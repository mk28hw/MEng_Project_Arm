
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800200  00004892  00004926  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004892  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d1  008004da  008004da  00004c00  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00004c00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b48  00000000  00000000  00004ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e047  00000000  00000000  00005814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004014  00000000  00000000  0002385b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006564  00000000  00000000  0002786f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000285c  00000000  00000000  0002ddd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000461d  00000000  00000000  00030630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d935  00000000  00000000  00034c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af0  00000000  00000000  00042582  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5a c1       	rjmp	.+692    	; 0x2b6 <__ctors_end>
       2:	00 00       	nop
       4:	89 c1       	rjmp	.+786    	; 0x318 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c1       	rjmp	.+782    	; 0x318 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c1       	rjmp	.+778    	; 0x318 <__bad_interrupt>
       e:	00 00       	nop
      10:	83 c1       	rjmp	.+774    	; 0x318 <__bad_interrupt>
      12:	00 00       	nop
      14:	81 c1       	rjmp	.+770    	; 0x318 <__bad_interrupt>
      16:	00 00       	nop
      18:	7f c1       	rjmp	.+766    	; 0x318 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7d c1       	rjmp	.+762    	; 0x318 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7b c1       	rjmp	.+758    	; 0x318 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_9>
      28:	77 c1       	rjmp	.+750    	; 0x318 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	75 c1       	rjmp	.+746    	; 0x318 <__bad_interrupt>
      2e:	00 00       	nop
      30:	73 c1       	rjmp	.+742    	; 0x318 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c1       	rjmp	.+738    	; 0x318 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c1       	rjmp	.+734    	; 0x318 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c1       	rjmp	.+730    	; 0x318 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6b c1       	rjmp	.+726    	; 0x318 <__bad_interrupt>
      42:	00 00       	nop
      44:	69 c1       	rjmp	.+722    	; 0x318 <__bad_interrupt>
      46:	00 00       	nop
      48:	67 c1       	rjmp	.+718    	; 0x318 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	65 c1       	rjmp	.+714    	; 0x318 <__bad_interrupt>
      4e:	00 00       	nop
      50:	63 c1       	rjmp	.+710    	; 0x318 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c1       	rjmp	.+706    	; 0x318 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c1       	rjmp	.+702    	; 0x318 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__vector_23>
      60:	5b c1       	rjmp	.+694    	; 0x318 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__vector_25>
      68:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__vector_26>
      6c:	55 c1       	rjmp	.+682    	; 0x318 <__bad_interrupt>
      6e:	00 00       	nop
      70:	53 c1       	rjmp	.+678    	; 0x318 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_29>
      78:	4f c1       	rjmp	.+670    	; 0x318 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4d c1       	rjmp	.+666    	; 0x318 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4b c1       	rjmp	.+662    	; 0x318 <__bad_interrupt>
      82:	00 00       	nop
      84:	49 c1       	rjmp	.+658    	; 0x318 <__bad_interrupt>
      86:	00 00       	nop
      88:	47 c1       	rjmp	.+654    	; 0x318 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	45 c1       	rjmp	.+650    	; 0x318 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__vector_36>
      94:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__vector_37>
      98:	3f c1       	rjmp	.+638    	; 0x318 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__vector_39>
      a0:	3b c1       	rjmp	.+630    	; 0x318 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	39 c1       	rjmp	.+626    	; 0x318 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	37 c1       	rjmp	.+622    	; 0x318 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	35 c1       	rjmp	.+618    	; 0x318 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	33 c1       	rjmp	.+614    	; 0x318 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	31 c1       	rjmp	.+610    	; 0x318 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2f c1       	rjmp	.+606    	; 0x318 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2d c1       	rjmp	.+602    	; 0x318 <__bad_interrupt>
      be:	00 00       	nop
      c0:	2b c1       	rjmp	.+598    	; 0x318 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	29 c1       	rjmp	.+594    	; 0x318 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	27 c1       	rjmp	.+590    	; 0x318 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	25 c1       	rjmp	.+586    	; 0x318 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	23 c1       	rjmp	.+582    	; 0x318 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	21 c1       	rjmp	.+578    	; 0x318 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	1f c1       	rjmp	.+574    	; 0x318 <__bad_interrupt>
      da:	00 00       	nop
      dc:	1d c1       	rjmp	.+570    	; 0x318 <__bad_interrupt>
      de:	00 00       	nop
      e0:	1b c1       	rjmp	.+566    	; 0x318 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	05 a8       	ldd	r0, Z+53	; 0x35
      e6:	4c cd       	rjmp	.-1384   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
      e8:	b2 d4       	rcall	.+2404   	; 0xa4e <_ZN3Arm9readServoEhhh+0xaa>
      ea:	4e b9       	out	0x0e, r20	; 14
      ec:	38 36       	cpi	r19, 0x68	; 104
      ee:	a9 02       	muls	r26, r25
      f0:	0c 50       	subi	r16, 0x0C	; 12
      f2:	b9 91       	ld	r27, Y+
      f4:	86 88       	ldd	r8, Z+22	; 0x16
      f6:	08 3c       	cpi	r16, 0xC8	; 200
      f8:	a6 aa       	std	Z+54, r10	; 0x36
      fa:	aa 2a       	or	r10, r26
      fc:	be 00       	.word	0x00be	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240
     102:	07 63       	ori	r16, 0x37	; 55
     104:	42 36       	cpi	r20, 0x62	; 98
     106:	b7 9b       	sbis	0x16, 7	; 22
     108:	d8 a7       	std	Y+40, r29	; 0x28
     10a:	1a 39       	cpi	r17, 0x9A	; 154
     10c:	68 56       	subi	r22, 0x68	; 104
     10e:	18 ae       	std	Y+56, r1	; 0x38
     110:	ba ab       	std	Y+50, r27	; 0x32
     112:	55 8c       	ldd	r5, Z+29	; 0x1d
     114:	1d 3c       	cpi	r17, 0xCD	; 205
     116:	b7 cc       	rjmp	.-1682   	; 0xfffffa86 <__eeprom_end+0xff7efa86>
     118:	57 63       	ori	r21, 0x37	; 55
     11a:	bd 6d       	ori	r27, 0xDD	; 221
     11c:	ed fd       	.word	0xfded	; ????
     11e:	75 3e       	cpi	r23, 0xE5	; 229
     120:	f6 17       	cp	r31, r22
     122:	72 31       	cpi	r23, 0x12	; 18
     124:	bf 00       	.word	0x00bf	; ????
     126:	00 00       	nop
     128:	80 3f       	cpi	r24, 0xF0	; 240
     12a:	08 00       	.word	0x0008	; ????
     12c:	00 00       	nop
     12e:	be 92       	st	-X, r11
     130:	24 49       	sbci	r18, 0x94	; 148
     132:	12 3e       	cpi	r17, 0xE2	; 226
     134:	ab aa       	std	Y+51, r10	; 0x33
     136:	aa 2a       	or	r10, r26
     138:	be cd       	rjmp	.-1156   	; 0xfffffcb6 <__eeprom_end+0xff7efcb6>
     13a:	cc cc       	rjmp	.-1640   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     13c:	4c 3e       	cpi	r20, 0xEC	; 236
     13e:	00 00       	nop
     140:	00 80       	ld	r0, Z
     142:	be ab       	std	Y+54, r27	; 0x36
     144:	aa aa       	std	Y+50, r10	; 0x32
     146:	aa 3e       	cpi	r26, 0xEA	; 234
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	bf 00       	.word	0x00bf	; ????
     14e:	00 00       	nop
     150:	80 3f       	cpi	r24, 0xF0	; 240
     152:	00 00       	nop
     154:	00 00       	nop
     156:	00 08       	sbc	r0, r0
     158:	41 78       	andi	r20, 0x81	; 129
     15a:	d3 bb       	out	0x13, r29	; 19
     15c:	43 87       	std	Z+11, r20	; 0x0b
     15e:	d1 13       	cpse	r29, r17
     160:	3d 19       	sub	r19, r13
     162:	0e 3c       	cpi	r16, 0xCE	; 206
     164:	c3 bd       	out	0x23, r28	; 35
     166:	42 82       	std	Z+2, r4	; 0x02
     168:	ad 2b       	or	r26, r29
     16a:	3e 68       	ori	r19, 0x8E	; 142
     16c:	ec 82       	std	Y+4, r14	; 0x04
     16e:	76 be       	out	0x36, r7	; 54
     170:	d9 8f       	std	Y+25, r29	; 0x19
     172:	e1 a9       	ldd	r30, Z+49	; 0x31
     174:	3e 4c       	sbci	r19, 0xCE	; 206
     176:	80 ef       	ldi	r24, 0xF0	; 240
     178:	ff be       	out	0x3f, r15	; 63
     17a:	01 c4       	rjmp	.+2050   	; 0x97e <_ZN3Arm13moveSpeedEasyEhif+0x4a>
     17c:	ff 7f       	andi	r31, 0xFF	; 255
     17e:	3f 00       	.word	0x003f	; ????
     180:	00 00       	nop
     182:	00 00       	nop
     184:	a8 18       	sub	r10, r8
     186:	ab 18       	sub	r10, r11
     188:	9a 18       	sub	r9, r10
     18a:	9e 18       	sub	r9, r14
     18c:	a4 18       	sub	r10, r4
     18e:	e2 18       	sub	r14, r2
     190:	af 18       	sub	r10, r15
     192:	b3 18       	sub	r11, r3
     194:	b9 18       	sub	r11, r9
     196:	bd 18       	sub	r11, r13
     198:	c1 18       	sub	r12, r1
     19a:	c7 18       	sub	r12, r7
     19c:	cb 18       	sub	r12, r11
     19e:	cf 18       	sub	r12, r15
     1a0:	e2 18       	sub	r14, r2
     1a2:	d5 18       	sub	r13, r5
     1a4:	d9 18       	sub	r13, r9
     1a6:	dd 18       	sub	r13, r13

000001a8 <__trampolines_end>:
     1a8:	00 00       	nop
     1aa:	0a 0b       	sbc	r16, r26
     1ac:	02 09       	sbc	r16, r2
     1ae:	0c 0d       	add	r16, r12
     1b0:	0e 08       	sbc	r0, r14
     1b2:	07 03       	mulsu	r16, r23
     1b4:	04 01       	movw	r0, r8
	...
     1d2:	00 00       	nop
     1d4:	12 11       	cpse	r17, r2
     1d6:	10 00       	.word	0x0010	; ????
	...

000001ee <digital_pin_to_bit_mask_PGM>:
     1ee:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1fe:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     20e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     21e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     22e:	04 08 10 20 40 80                                   ... @.

00000234 <digital_pin_to_port_PGM>:
     234:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     244:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     254:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     264:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     274:	0b 0b 0b 0b 0b 0b                                   ......

0000027a <port_to_output_PGM>:
     27a:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     28a:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000294 <port_to_mode_PGM>:
     294:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     2a4:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002ae <__ctors_start>:
     2ae:	ca 09       	sbc	r28, r10
     2b0:	36 16       	cp	r3, r22
     2b2:	cb 16       	cp	r12, r27
     2b4:	c6 1c       	adc	r12, r6

000002b6 <__ctors_end>:
     2b6:	11 24       	eor	r1, r1
     2b8:	1f be       	out	0x3f, r1	; 63
     2ba:	cf ef       	ldi	r28, 0xFF	; 255
     2bc:	d1 e2       	ldi	r29, 0x21	; 33
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	00 e0       	ldi	r16, 0x00	; 0
     2c4:	0c bf       	out	0x3c, r16	; 60

000002c6 <__do_copy_data>:
     2c6:	14 e0       	ldi	r17, 0x04	; 4
     2c8:	a0 e0       	ldi	r26, 0x00	; 0
     2ca:	b2 e0       	ldi	r27, 0x02	; 2
     2cc:	e2 e9       	ldi	r30, 0x92	; 146
     2ce:	f8 e4       	ldi	r31, 0x48	; 72
     2d0:	00 e0       	ldi	r16, 0x00	; 0
     2d2:	0b bf       	out	0x3b, r16	; 59
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <__do_copy_data+0x14>
     2d6:	07 90       	elpm	r0, Z+
     2d8:	0d 92       	st	X+, r0
     2da:	aa 3d       	cpi	r26, 0xDA	; 218
     2dc:	b1 07       	cpc	r27, r17
     2de:	d9 f7       	brne	.-10     	; 0x2d6 <__do_copy_data+0x10>

000002e0 <__do_clear_bss>:
     2e0:	27 e0       	ldi	r18, 0x07	; 7
     2e2:	aa ed       	ldi	r26, 0xDA	; 218
     2e4:	b4 e0       	ldi	r27, 0x04	; 4
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <.do_clear_bss_start>

000002e8 <.do_clear_bss_loop>:
     2e8:	1d 92       	st	X+, r1

000002ea <.do_clear_bss_start>:
     2ea:	ab 3a       	cpi	r26, 0xAB	; 171
     2ec:	b2 07       	cpc	r27, r18
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <.do_clear_bss_loop>

000002f0 <__do_global_ctors>:
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	cb e5       	ldi	r28, 0x5B	; 91
     2f4:	d1 e0       	ldi	r29, 0x01	; 1
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <__do_global_ctors+0x16>
     2fa:	21 97       	sbiw	r28, 0x01	; 1
     2fc:	01 09       	sbc	r16, r1
     2fe:	80 2f       	mov	r24, r16
     300:	fe 01       	movw	r30, r28
     302:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <__tablejump2__>
     306:	c7 35       	cpi	r28, 0x57	; 87
     308:	d1 07       	cpc	r29, r17
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	08 07       	cpc	r16, r24
     30e:	a9 f7       	brne	.-22     	; 0x2fa <__do_global_ctors+0xa>
     310:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <main>
     314:	0c 94 47 24 	jmp	0x488e	; 0x488e <_exit>

00000318 <__bad_interrupt>:
     318:	73 ce       	rjmp	.-794    	; 0x0 <__vectors>

0000031a <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	//serialWriting = NO;
	RS485_RX_ON
}
void Arm::readServo(uint8_t pcktID, uint8_t pcktCmnd) { this->readServo(pcktID, pcktCmnd, 1); }
     31a:	dc 01       	movw	r26, r24
     31c:	ed 91       	ld	r30, X+
     31e:	fc 91       	ld	r31, X
     320:	01 90       	ld	r0, Z+
     322:	f0 81       	ld	r31, Z
     324:	e0 2d       	mov	r30, r0
     326:	19 94       	eijmp

00000328 <_ZN3Arm19updateServoPositionEhi>:
     328:	8f 92       	push	r8
     32a:	9f 92       	push	r9
     32c:	af 92       	push	r10
     32e:	bf 92       	push	r11
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	7c 01       	movw	r14, r24
     340:	84 e1       	ldi	r24, 0x14	; 20
     342:	d8 2e       	mov	r13, r24
     344:	c6 2f       	mov	r28, r22
     346:	d0 e0       	ldi	r29, 0x00	; 0
     348:	87 01       	movw	r16, r14
     34a:	d6 9e       	mul	r13, r22
     34c:	00 0d       	add	r16, r0
     34e:	11 1d       	adc	r17, r1
     350:	11 24       	eor	r1, r1
     352:	f8 01       	movw	r30, r16
     354:	53 8b       	std	Z+19, r21	; 0x13
     356:	42 8b       	std	Z+18, r20	; 0x12
     358:	ba 01       	movw	r22, r20
     35a:	55 0f       	add	r21, r21
     35c:	88 0b       	sbc	r24, r24
     35e:	99 0b       	sbc	r25, r25
     360:	0e 94 93 11 	call	0x2326	; 0x2326 <__floatsisf>
     364:	4b 01       	movw	r8, r22
     366:	5c 01       	movw	r10, r24
     368:	21 96       	adiw	r28, 0x01	; 1
     36a:	dc 9e       	mul	r13, r28
     36c:	c0 01       	movw	r24, r0
     36e:	dd 9e       	mul	r13, r29
     370:	90 0d       	add	r25, r0
     372:	11 24       	eor	r1, r1
     374:	e7 01       	movw	r28, r14
     376:	c8 0f       	add	r28, r24
     378:	d9 1f       	adc	r29, r25
     37a:	24 ed       	ldi	r18, 0xD4	; 212
     37c:	3f e0       	ldi	r19, 0x0F	; 15
     37e:	49 ec       	ldi	r20, 0xC9	; 201
     380:	5a e3       	ldi	r21, 0x3A	; 58
     382:	c5 01       	movw	r24, r10
     384:	b4 01       	movw	r22, r8
     386:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     38a:	68 83       	st	Y, r22
     38c:	79 83       	std	Y+1, r23	; 0x01
     38e:	8a 83       	std	Y+2, r24	; 0x02
     390:	9b 83       	std	Y+3, r25	; 0x03
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	44 eb       	ldi	r20, 0xB4	; 180
     398:	5d e3       	ldi	r21, 0x3D	; 61
     39a:	c5 01       	movw	r24, r10
     39c:	b4 01       	movw	r22, r8
     39e:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     3a2:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fixsfsi>
     3a6:	f8 01       	movw	r30, r16
     3a8:	60 8f       	std	Z+24, r22	; 0x18
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	bf 90       	pop	r11
     3ba:	af 90       	pop	r10
     3bc:	9f 90       	pop	r9
     3be:	8f 90       	pop	r8
     3c0:	08 95       	ret

000003c2 <_ZN3Arm19updateServoPositionEhhh>:
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
     3ca:	16 2f       	mov	r17, r22
     3cc:	84 2f       	mov	r24, r20
     3ce:	62 2f       	mov	r22, r18
     3d0:	20 d5       	rcall	.+2624   	; 0xe12 <_Z12combineByteshh>
     3d2:	ac 01       	movw	r20, r24
     3d4:	61 2f       	mov	r22, r17
     3d6:	ce 01       	movw	r24, r28
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	1f 91       	pop	r17
     3de:	a4 cf       	rjmp	.-184    	; 0x328 <_ZN3Arm19updateServoPositionEhi>

000003e0 <_ZN3Arm16updateServoSpeedEhj>:
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	da 01       	movw	r26, r20
     3e4:	41 15       	cp	r20, r1
     3e6:	24 e0       	ldi	r18, 0x04	; 4
     3e8:	52 07       	cpc	r21, r18
     3ea:	0c f0       	brlt	.+2      	; 0x3ee <_ZN3Arm16updateServoSpeedEhj+0xe>
     3ec:	b4 50       	subi	r27, 0x04	; 4
     3ee:	e4 e1       	ldi	r30, 0x14	; 20
     3f0:	e6 9f       	mul	r30, r22
     3f2:	90 01       	movw	r18, r0
     3f4:	e7 9f       	mul	r30, r23
     3f6:	30 0d       	add	r19, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	fc 01       	movw	r30, r24
     3fc:	e2 0f       	add	r30, r18
     3fe:	f3 1f       	adc	r31, r19
     400:	b3 8f       	std	Z+27, r27	; 0x1b
     402:	a2 8f       	std	Z+26, r26	; 0x1a
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	41 15       	cp	r20, r1
     408:	54 40       	sbci	r21, 0x04	; 4
     40a:	0c f4       	brge	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	86 8f       	std	Z+30, r24	; 0x1e
     410:	08 95       	ret

00000412 <_ZN3Arm15updateServoLoadEhj>:
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	da 01       	movw	r26, r20
     416:	41 15       	cp	r20, r1
     418:	24 e0       	ldi	r18, 0x04	; 4
     41a:	52 07       	cpc	r21, r18
     41c:	0c f0       	brlt	.+2      	; 0x420 <_ZN3Arm15updateServoLoadEhj+0xe>
     41e:	b4 50       	subi	r27, 0x04	; 4
     420:	e4 e1       	ldi	r30, 0x14	; 20
     422:	e6 9f       	mul	r30, r22
     424:	90 01       	movw	r18, r0
     426:	e7 9f       	mul	r30, r23
     428:	30 0d       	add	r19, r0
     42a:	11 24       	eor	r1, r1
     42c:	fc 01       	movw	r30, r24
     42e:	e2 0f       	add	r30, r18
     430:	f3 1f       	adc	r31, r19
     432:	b0 a3       	std	Z+32, r27	; 0x20
     434:	a7 8f       	std	Z+31, r26	; 0x1f
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	41 15       	cp	r20, r1
     43a:	54 40       	sbci	r21, 0x04	; 4
     43c:	0c f4       	brge	.+2      	; 0x440 <_ZN3Arm15updateServoLoadEhj+0x2e>
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	81 a3       	std	Z+33, r24	; 0x21
     442:	08 95       	ret

00000444 <_ZN3Arm15updateServoLoadEhhh>:
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	ec 01       	movw	r28, r24
     44c:	16 2f       	mov	r17, r22
     44e:	84 2f       	mov	r24, r20
     450:	62 2f       	mov	r22, r18
     452:	df d4       	rcall	.+2494   	; 0xe12 <_Z12combineByteshh>
     454:	ac 01       	movw	r20, r24
     456:	61 2f       	mov	r22, r17
     458:	ce 01       	movw	r24, r28
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	d8 cf       	rjmp	.-80     	; 0x412 <_ZN3Arm15updateServoLoadEhj>

00000462 <_ZN3Arm3fkXEff>:
     462:	4f 92       	push	r4
     464:	5f 92       	push	r5
     466:	6f 92       	push	r6
     468:	7f 92       	push	r7
     46a:	8f 92       	push	r8
     46c:	9f 92       	push	r9
     46e:	af 92       	push	r10
     470:	bf 92       	push	r11
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
     484:	cb 01       	movw	r24, r22
     486:	ba 01       	movw	r22, r20
     488:	48 01       	movw	r8, r16
     48a:	59 01       	movw	r10, r18
     48c:	2b ed       	ldi	r18, 0xDB	; 219
     48e:	3f e0       	ldi	r19, 0x0F	; 15
     490:	49 ec       	ldi	r20, 0xC9	; 201
     492:	5f e3       	ldi	r21, 0x3F	; 63
     494:	0e 94 8c 10 	call	0x2118	; 0x2118 <__subsf3>
     498:	6b 01       	movw	r12, r22
     49a:	7c 01       	movw	r14, r24
     49c:	a5 01       	movw	r20, r10
     49e:	94 01       	movw	r18, r8
     4a0:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3>
     4a4:	2b ed       	ldi	r18, 0xDB	; 219
     4a6:	3f e0       	ldi	r19, 0x0F	; 15
     4a8:	49 e4       	ldi	r20, 0x49	; 73
     4aa:	50 e4       	ldi	r21, 0x40	; 64
     4ac:	0e 94 8c 10 	call	0x2118	; 0x2118 <__subsf3>
     4b0:	0e 94 f5 10 	call	0x21ea	; 0x21ea <cos>
     4b4:	2b 01       	movw	r4, r22
     4b6:	3c 01       	movw	r6, r24
     4b8:	c7 01       	movw	r24, r14
     4ba:	b6 01       	movw	r22, r12
     4bc:	0e 94 f5 10 	call	0x21ea	; 0x21ea <cos>
     4c0:	4b 01       	movw	r8, r22
     4c2:	5c 01       	movw	r10, r24
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	4b e9       	ldi	r20, 0x9B	; 155
     4ca:	53 e4       	ldi	r21, 0x43	; 67
     4cc:	c3 01       	movw	r24, r6
     4ce:	b2 01       	movw	r22, r4
     4d0:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     4d4:	6b 01       	movw	r12, r22
     4d6:	7c 01       	movw	r14, r24
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	47 e5       	ldi	r20, 0x57	; 87
     4de:	53 e4       	ldi	r21, 0x43	; 67
     4e0:	c5 01       	movw	r24, r10
     4e2:	b4 01       	movw	r22, r8
     4e4:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     4e8:	9b 01       	movw	r18, r22
     4ea:	ac 01       	movw	r20, r24
     4ec:	c7 01       	movw	r24, r14
     4ee:	b6 01       	movw	r22, r12
     4f0:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3>
     4f4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fixsfsi>
     4f8:	c8 57       	subi	r28, 0x78	; 120
     4fa:	df 4f       	sbci	r29, 0xFF	; 255
     4fc:	79 83       	std	Y+1, r23	; 0x01
     4fe:	68 83       	st	Y, r22
     500:	cb 01       	movw	r24, r22
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	9f 90       	pop	r9
     518:	8f 90       	pop	r8
     51a:	7f 90       	pop	r7
     51c:	6f 90       	pop	r6
     51e:	5f 90       	pop	r5
     520:	4f 90       	pop	r4
     522:	08 95       	ret

00000524 <_ZN3Arm13checkPositionEhj>:
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	63 30       	cpi	r22, 0x03	; 3
     53a:	30 f4       	brcc	.+12     	; 0x548 <_ZN3Arm13checkPositionEhj+0x24>
     53c:	ca 01       	movw	r24, r20
     53e:	45 3a       	cpi	r20, 0xA5	; 165
     540:	56 40       	sbci	r21, 0x06	; 6
     542:	08 f4       	brcc	.+2      	; 0x546 <_ZN3Arm13checkPositionEhj+0x22>
     544:	5b c0       	rjmp	.+182    	; 0x5fc <_ZN3Arm13checkPositionEhj+0xd8>
     546:	58 c0       	rjmp	.+176    	; 0x5f8 <_ZN3Arm13checkPositionEhj+0xd4>
     548:	63 30       	cpi	r22, 0x03	; 3
     54a:	39 f4       	brne	.+14     	; 0x55a <_ZN3Arm13checkPositionEhj+0x36>
     54c:	41 30       	cpi	r20, 0x01	; 1
     54e:	50 41       	sbci	r21, 0x10	; 16
     550:	08 f0       	brcs	.+2      	; 0x554 <_ZN3Arm13checkPositionEhj+0x30>
     552:	4f c0       	rjmp	.+158    	; 0x5f2 <_ZN3Arm13checkPositionEhj+0xce>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 ef       	ldi	r25, 0xF0	; 240
     558:	51 c0       	rjmp	.+162    	; 0x5fc <_ZN3Arm13checkPositionEhj+0xd8>
     55a:	ea 01       	movw	r28, r20
     55c:	7c 01       	movw	r14, r24
     55e:	64 30       	cpi	r22, 0x04	; 4
     560:	09 f0       	breq	.+2      	; 0x564 <_ZN3Arm13checkPositionEhj+0x40>
     562:	42 c0       	rjmp	.+132    	; 0x5e8 <_ZN3Arm13checkPositionEhj+0xc4>
     564:	fc 01       	movw	r30, r24
     566:	ea 58       	subi	r30, 0x8A	; 138
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	60 81       	ld	r22, Z
     56c:	71 81       	ldd	r23, Z+1	; 0x01
     56e:	07 2e       	mov	r0, r23
     570:	00 0c       	add	r0, r0
     572:	88 0b       	sbc	r24, r24
     574:	99 0b       	sbc	r25, r25
     576:	0e 94 93 11 	call	0x2326	; 0x2326 <__floatsisf>
     57a:	24 ed       	ldi	r18, 0xD4	; 212
     57c:	3f e0       	ldi	r19, 0x0F	; 15
     57e:	49 ec       	ldi	r20, 0xC9	; 201
     580:	5a e3       	ldi	r21, 0x3A	; 58
     582:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     586:	4b 01       	movw	r8, r22
     588:	5c 01       	movw	r10, r24
     58a:	be 01       	movw	r22, r28
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 91 11 	call	0x2322	; 0x2322 <__floatunsisf>
     594:	24 ed       	ldi	r18, 0xD4	; 212
     596:	3f e0       	ldi	r19, 0x0F	; 15
     598:	49 ec       	ldi	r20, 0xC9	; 201
     59a:	5a e3       	ldi	r21, 0x3A	; 58
     59c:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     5a0:	ab 01       	movw	r20, r22
     5a2:	bc 01       	movw	r22, r24
     5a4:	95 01       	movw	r18, r10
     5a6:	84 01       	movw	r16, r8
     5a8:	c7 01       	movw	r24, r14
     5aa:	5b df       	rcall	.-330    	; 0x462 <_ZN3Arm3fkXEff>
     5ac:	84 36       	cpi	r24, 0x64	; 100
     5ae:	91 05       	cpc	r25, r1
     5b0:	84 f4       	brge	.+32     	; 0x5d2 <_ZN3Arm13checkPositionEhj+0xae>
     5b2:	f7 01       	movw	r30, r14
     5b4:	ee 59       	subi	r30, 0x9E	; 158
     5b6:	ff 4f       	sbci	r31, 0xFF	; 255
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	87 30       	cpi	r24, 0x07	; 7
     5be:	23 e0       	ldi	r18, 0x03	; 3
     5c0:	92 07       	cpc	r25, r18
     5c2:	14 f4       	brge	.+4      	; 0x5c8 <_ZN3Arm13checkPositionEhj+0xa4>
     5c4:	87 e0       	ldi	r24, 0x07	; 7
     5c6:	93 e0       	ldi	r25, 0x03	; 3
     5c8:	85 3a       	cpi	r24, 0xA5	; 165
     5ca:	26 e0       	ldi	r18, 0x06	; 6
     5cc:	92 07       	cpc	r25, r18
     5ce:	b4 f0       	brlt	.+44     	; 0x5fc <_ZN3Arm13checkPositionEhj+0xd8>
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <_ZN3Arm13checkPositionEhj+0xd4>
     5d2:	c5 3a       	cpi	r28, 0xA5	; 165
     5d4:	86 e0       	ldi	r24, 0x06	; 6
     5d6:	d8 07       	cpc	r29, r24
     5d8:	78 f4       	brcc	.+30     	; 0x5f8 <_ZN3Arm13checkPositionEhj+0xd4>
     5da:	ce 01       	movw	r24, r28
     5dc:	c7 30       	cpi	r28, 0x07	; 7
     5de:	d3 40       	sbci	r29, 0x03	; 3
     5e0:	68 f4       	brcc	.+26     	; 0x5fc <_ZN3Arm13checkPositionEhj+0xd8>
     5e2:	87 e0       	ldi	r24, 0x07	; 7
     5e4:	93 e0       	ldi	r25, 0x03	; 3
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <_ZN3Arm13checkPositionEhj+0xd8>
     5e8:	65 30       	cpi	r22, 0x05	; 5
     5ea:	99 f3       	breq	.-26     	; 0x5d2 <_ZN3Arm13checkPositionEhj+0xae>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	05 c0       	rjmp	.+10     	; 0x5fc <_ZN3Arm13checkPositionEhj+0xd8>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e1       	ldi	r25, 0x10	; 16
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <_ZN3Arm13checkPositionEhj+0xd8>
     5f8:	84 ea       	ldi	r24, 0xA4	; 164
     5fa:	96 e0       	ldi	r25, 0x06	; 6
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	bf 90       	pop	r11
     60a:	af 90       	pop	r10
     60c:	9f 90       	pop	r9
     60e:	8f 90       	pop	r8
     610:	08 95       	ret

00000612 <_ZN3Arm3fkXEv>:
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	fc 01       	movw	r30, r24
     618:	e8 58       	subi	r30, 0x88	; 136
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	00 81       	ld	r16, Z
     61e:	11 81       	ldd	r17, Z+1	; 0x01
     620:	22 81       	ldd	r18, Z+2	; 0x02
     622:	33 81       	ldd	r19, Z+3	; 0x03
     624:	74 97       	sbiw	r30, 0x14	; 20
     626:	40 81       	ld	r20, Z
     628:	51 81       	ldd	r21, Z+1	; 0x01
     62a:	62 81       	ldd	r22, Z+2	; 0x02
     62c:	73 81       	ldd	r23, Z+3	; 0x03
     62e:	19 df       	rcall	.-462    	; 0x462 <_ZN3Arm3fkXEff>
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <_ZN3Arm3fkYEff>:
     636:	4f 92       	push	r4
     638:	5f 92       	push	r5
     63a:	6f 92       	push	r6
     63c:	7f 92       	push	r7
     63e:	8f 92       	push	r8
     640:	9f 92       	push	r9
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
     658:	cb 01       	movw	r24, r22
     65a:	ba 01       	movw	r22, r20
     65c:	48 01       	movw	r8, r16
     65e:	59 01       	movw	r10, r18
     660:	2b ed       	ldi	r18, 0xDB	; 219
     662:	3f e0       	ldi	r19, 0x0F	; 15
     664:	49 ec       	ldi	r20, 0xC9	; 201
     666:	5f e3       	ldi	r21, 0x3F	; 63
     668:	0e 94 8c 10 	call	0x2118	; 0x2118 <__subsf3>
     66c:	6b 01       	movw	r12, r22
     66e:	7c 01       	movw	r14, r24
     670:	a5 01       	movw	r20, r10
     672:	94 01       	movw	r18, r8
     674:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3>
     678:	2b ed       	ldi	r18, 0xDB	; 219
     67a:	3f e0       	ldi	r19, 0x0F	; 15
     67c:	49 e4       	ldi	r20, 0x49	; 73
     67e:	50 e4       	ldi	r21, 0x40	; 64
     680:	0e 94 8c 10 	call	0x2118	; 0x2118 <__subsf3>
     684:	0e 94 57 13 	call	0x26ae	; 0x26ae <sin>
     688:	2b 01       	movw	r4, r22
     68a:	3c 01       	movw	r6, r24
     68c:	c7 01       	movw	r24, r14
     68e:	b6 01       	movw	r22, r12
     690:	0e 94 57 13 	call	0x26ae	; 0x26ae <sin>
     694:	4b 01       	movw	r8, r22
     696:	5c 01       	movw	r10, r24
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	4b e9       	ldi	r20, 0x9B	; 155
     69e:	53 e4       	ldi	r21, 0x43	; 67
     6a0:	c3 01       	movw	r24, r6
     6a2:	b2 01       	movw	r22, r4
     6a4:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     6a8:	6b 01       	movw	r12, r22
     6aa:	7c 01       	movw	r14, r24
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	47 e5       	ldi	r20, 0x57	; 87
     6b2:	53 e4       	ldi	r21, 0x43	; 67
     6b4:	c5 01       	movw	r24, r10
     6b6:	b4 01       	movw	r22, r8
     6b8:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     6bc:	9b 01       	movw	r18, r22
     6be:	ac 01       	movw	r20, r24
     6c0:	c7 01       	movw	r24, r14
     6c2:	b6 01       	movw	r22, r12
     6c4:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3>
     6c8:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fixsfsi>
     6cc:	c6 57       	subi	r28, 0x76	; 118
     6ce:	df 4f       	sbci	r29, 0xFF	; 255
     6d0:	79 83       	std	Y+1, r23	; 0x01
     6d2:	68 83       	st	Y, r22
     6d4:	cb 01       	movw	r24, r22
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	7f 90       	pop	r7
     6f0:	6f 90       	pop	r6
     6f2:	5f 90       	pop	r5
     6f4:	4f 90       	pop	r4
     6f6:	08 95       	ret

000006f8 <_ZN3Arm3fkYEv>:
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	fc 01       	movw	r30, r24
     6fe:	e8 58       	subi	r30, 0x88	; 136
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	00 81       	ld	r16, Z
     704:	11 81       	ldd	r17, Z+1	; 0x01
     706:	22 81       	ldd	r18, Z+2	; 0x02
     708:	33 81       	ldd	r19, Z+3	; 0x03
     70a:	74 97       	sbiw	r30, 0x14	; 20
     70c:	40 81       	ld	r20, Z
     70e:	51 81       	ldd	r21, Z+1	; 0x01
     710:	62 81       	ldd	r22, Z+2	; 0x02
     712:	73 81       	ldd	r23, Z+3	; 0x03
     714:	90 df       	rcall	.-224    	; 0x636 <_ZN3Arm3fkYEff>
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <_ZN3Arm10writeServoEhhPhh>:
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	16 2f       	mov	r17, r22
     72a:	d4 2f       	mov	r29, r20
     72c:	79 01       	movw	r14, r18
     72e:	c6 e0       	ldi	r28, 0x06	; 6
     730:	c4 0f       	add	r28, r20
     732:	c0 0f       	add	r28, r16
     734:	60 2f       	mov	r22, r16
     736:	c9 01       	movw	r24, r18
     738:	74 d3       	rcall	.+1768   	; 0xe22 <_Z8sumBytesPhh>
     73a:	c1 0f       	add	r28, r17
     73c:	8c 0f       	add	r24, r28
     73e:	c8 2f       	mov	r28, r24
     740:	c0 95       	com	r28
     742:	8d e3       	ldi	r24, 0x3D	; 61
     744:	96 e0       	ldi	r25, 0x06	; 6
     746:	0e 94 5e 14 	call	0x28bc	; 0x28bc <_ZN14HardwareSerial9availableEv>
     74a:	89 2b       	or	r24, r25
     74c:	29 f0       	breq	.+10     	; 0x758 <_ZN3Arm10writeServoEhhPhh+0x3c>
     74e:	8d e3       	ldi	r24, 0x3D	; 61
     750:	96 e0       	ldi	r25, 0x06	; 6
     752:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
     756:	f5 cf       	rjmp	.-22     	; 0x742 <_ZN3Arm10writeServoEhhPhh+0x26>
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	0e 94 1f 19 	call	0x323e	; 0x323e <digitalWrite>
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	0e 94 1f 19 	call	0x323e	; 0x323e <digitalWrite>
     768:	65 e0       	ldi	r22, 0x05	; 5
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
     774:	6f ef       	ldi	r22, 0xFF	; 255
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	8d e3       	ldi	r24, 0x3D	; 61
     77a:	96 e0       	ldi	r25, 0x06	; 6
     77c:	ce dd       	rcall	.-1124   	; 0x31a <_ZN14HardwareSerial5writeEi>
     77e:	6f ef       	ldi	r22, 0xFF	; 255
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	8d e3       	ldi	r24, 0x3D	; 61
     784:	96 e0       	ldi	r25, 0x06	; 6
     786:	c9 dd       	rcall	.-1134   	; 0x31a <_ZN14HardwareSerial5writeEi>
     788:	61 2f       	mov	r22, r17
     78a:	8d e3       	ldi	r24, 0x3D	; 61
     78c:	96 e0       	ldi	r25, 0x06	; 6
     78e:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN14HardwareSerial5writeEh>
     792:	10 e0       	ldi	r17, 0x00	; 0
     794:	b8 01       	movw	r22, r16
     796:	6d 5f       	subi	r22, 0xFD	; 253
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	8d e3       	ldi	r24, 0x3D	; 61
     79c:	96 e0       	ldi	r25, 0x06	; 6
     79e:	bd dd       	rcall	.-1158   	; 0x31a <_ZN14HardwareSerial5writeEi>
     7a0:	63 e0       	ldi	r22, 0x03	; 3
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	8d e3       	ldi	r24, 0x3D	; 61
     7a6:	96 e0       	ldi	r25, 0x06	; 6
     7a8:	b8 dd       	rcall	.-1168   	; 0x31a <_ZN14HardwareSerial5writeEi>
     7aa:	6d 2f       	mov	r22, r29
     7ac:	8d e3       	ldi	r24, 0x3D	; 61
     7ae:	96 e0       	ldi	r25, 0x06	; 6
     7b0:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN14HardwareSerial5writeEh>
     7b4:	a8 01       	movw	r20, r16
     7b6:	b7 01       	movw	r22, r14
     7b8:	8d e3       	ldi	r24, 0x3D	; 61
     7ba:	96 e0       	ldi	r25, 0x06	; 6
     7bc:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_ZN5Print5writeEPKhj>
     7c0:	6c 2f       	mov	r22, r28
     7c2:	8d e3       	ldi	r24, 0x3D	; 61
     7c4:	96 e0       	ldi	r25, 0x06	; 6
     7c6:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN14HardwareSerial5writeEh>
     7ca:	8d e3       	ldi	r24, 0x3D	; 61
     7cc:	96 e0       	ldi	r25, 0x06	; 6
     7ce:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZN14HardwareSerial5flushEv>
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	0e 94 1f 19 	call	0x323e	; 0x323e <digitalWrite>
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	0e 94 1f 19 	call	0x323e	; 0x323e <digitalWrite>
     7e2:	65 e0       	ldi	r22, 0x05	; 5
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <delay>

000007fa <_ZN3Arm14setTorqueLimitEhi>:
     7fa:	0f 93       	push	r16
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	1f 92       	push	r1
     802:	1f 92       	push	r1
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	49 83       	std	Y+1, r20	; 0x01
     80a:	5a 83       	std	Y+2, r21	; 0x02
     80c:	02 e0       	ldi	r16, 0x02	; 2
     80e:	9e 01       	movw	r18, r28
     810:	2f 5f       	subi	r18, 0xFF	; 255
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	42 e2       	ldi	r20, 0x22	; 34
     816:	82 df       	rcall	.-252    	; 0x71c <_ZN3Arm10writeServoEhhPhh>
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <_ZN3Arm7setModeEhh>:
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	00 d0       	rcall	.+0      	; 0x834 <_ZN3Arm7setModeEhh+0x10>
     834:	1f 92       	push	r1
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	7c 01       	movw	r14, r24
     83c:	16 2f       	mov	r17, r22
     83e:	d4 2e       	mov	r13, r20
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	48 13       	cpse	r20, r24
     844:	05 c0       	rjmp	.+10     	; 0x850 <_ZN3Arm7setModeEhh+0x2c>
     846:	19 82       	std	Y+1, r1	; 0x01
     848:	1a 82       	std	Y+2, r1	; 0x02
     84a:	1b 82       	std	Y+3, r1	; 0x03
     84c:	1c 82       	std	Y+4, r1	; 0x04
     84e:	09 c0       	rjmp	.+18     	; 0x862 <_ZN3Arm7setModeEhh+0x3e>
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	48 13       	cpse	r20, r24
     854:	11 c0       	rjmp	.+34     	; 0x878 <_ZN3Arm7setModeEhh+0x54>
     856:	9f ef       	ldi	r25, 0xFF	; 255
     858:	99 83       	std	Y+1, r25	; 0x01
     85a:	8f e0       	ldi	r24, 0x0F	; 15
     85c:	8a 83       	std	Y+2, r24	; 0x02
     85e:	9b 83       	std	Y+3, r25	; 0x03
     860:	8c 83       	std	Y+4, r24	; 0x04
     862:	04 e0       	ldi	r16, 0x04	; 4
     864:	9e 01       	movw	r18, r28
     866:	2f 5f       	subi	r18, 0xFF	; 255
     868:	3f 4f       	sbci	r19, 0xFF	; 255
     86a:	46 e0       	ldi	r20, 0x06	; 6
     86c:	61 2f       	mov	r22, r17
     86e:	c7 01       	movw	r24, r14
     870:	55 df       	rcall	.-342    	; 0x71c <_ZN3Arm10writeServoEhhPhh>
     872:	16 30       	cpi	r17, 0x06	; 6
     874:	a8 f0       	brcs	.+42     	; 0x8a0 <_ZN3Arm7setModeEhh+0x7c>
     876:	1b c0       	rjmp	.+54     	; 0x8ae <_ZN3Arm7setModeEhh+0x8a>
     878:	87 e0       	ldi	r24, 0x07	; 7
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	8a 83       	std	Y+2, r24	; 0x02
     880:	84 ea       	ldi	r24, 0xA4	; 164
     882:	8b 83       	std	Y+3, r24	; 0x03
     884:	86 e0       	ldi	r24, 0x06	; 6
     886:	8c 83       	std	Y+4, r24	; 0x04
     888:	04 e0       	ldi	r16, 0x04	; 4
     88a:	9e 01       	movw	r18, r28
     88c:	2f 5f       	subi	r18, 0xFF	; 255
     88e:	3f 4f       	sbci	r19, 0xFF	; 255
     890:	46 e0       	ldi	r20, 0x06	; 6
     892:	c7 01       	movw	r24, r14
     894:	43 df       	rcall	.-378    	; 0x71c <_ZN3Arm10writeServoEhhPhh>
     896:	16 30       	cpi	r17, 0x06	; 6
     898:	50 f4       	brcc	.+20     	; 0x8ae <_ZN3Arm7setModeEhh+0x8a>
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	8d 15       	cp	r24, r13
     89e:	38 f0       	brcs	.+14     	; 0x8ae <_ZN3Arm7setModeEhh+0x8a>
     8a0:	f7 01       	movw	r30, r14
     8a2:	84 e1       	ldi	r24, 0x14	; 20
     8a4:	18 9f       	mul	r17, r24
     8a6:	e0 0d       	add	r30, r0
     8a8:	f1 1d       	adc	r31, r1
     8aa:	11 24       	eor	r1, r1
     8ac:	d1 8a       	std	Z+17, r13	; 0x11
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	08 95       	ret

000008c6 <_ZN3Arm12setModeWheelEh>:
     8c6:	41 e0       	ldi	r20, 0x01	; 1
     8c8:	ad cf       	rjmp	.-166    	; 0x824 <_ZN3Arm7setModeEhh>

000008ca <_ZN3Arm12setModeJointEh>:
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	ab cf       	rjmp	.-170    	; 0x824 <_ZN3Arm7setModeEhh>

000008ce <_ZN3Arm16setModeMultiTurnEh>:
     8ce:	42 e0       	ldi	r20, 0x02	; 2
     8d0:	a9 cf       	rjmp	.-174    	; 0x824 <_ZN3Arm7setModeEhh>

000008d2 <_ZN3Arm9moveSpeedEhjj>:
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <_ZN3Arm9moveSpeedEhjj+0x14>
     8e6:	1f 92       	push	r1
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	7c 01       	movw	r14, r24
     8ee:	16 2f       	mov	r17, r22
     8f0:	b2 2e       	mov	r11, r18
     8f2:	03 2f       	mov	r16, r19
     8f4:	17 de       	rcall	.-978    	; 0x524 <_ZN3Arm13checkPositionEhj>
     8f6:	6c 01       	movw	r12, r24
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	da 82       	std	Y+2, r13	; 0x02
     8fc:	bb 82       	std	Y+3, r11	; 0x03
     8fe:	0c 83       	std	Y+4, r16	; 0x04
     900:	04 e0       	ldi	r16, 0x04	; 4
     902:	9e 01       	movw	r18, r28
     904:	2f 5f       	subi	r18, 0xFF	; 255
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	4e e1       	ldi	r20, 0x1E	; 30
     90a:	61 2f       	mov	r22, r17
     90c:	c7 01       	movw	r24, r14
     90e:	06 df       	rcall	.-500    	; 0x71c <_ZN3Arm10writeServoEhhPhh>
     910:	a6 01       	movw	r20, r12
     912:	61 2f       	mov	r22, r17
     914:	c7 01       	movw	r24, r14
     916:	08 dd       	rcall	.-1520   	; 0x328 <_ZN3Arm19updateServoPositionEhi>
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	08 95       	ret

00000934 <_ZN3Arm13moveSpeedEasyEhif>:
     934:	8f 92       	push	r8
     936:	9f 92       	push	r9
     938:	af 92       	push	r10
     93a:	bf 92       	push	r11
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	7c 01       	movw	r14, r24
     94c:	d6 2e       	mov	r13, r22
     94e:	ea 01       	movw	r28, r20
     950:	c9 01       	movw	r24, r18
     952:	b8 01       	movw	r22, r16
     954:	24 e1       	ldi	r18, 0x14	; 20
     956:	3e ea       	ldi	r19, 0xAE	; 174
     958:	43 e2       	ldi	r20, 0x23	; 35
     95a:	51 e4       	ldi	r21, 0x41	; 65
     95c:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     960:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fixsfsi>
     964:	4b 01       	movw	r8, r22
     966:	5c 01       	movw	r10, r24
     968:	be 01       	movw	r22, r28
     96a:	dd 0f       	add	r29, r29
     96c:	88 0b       	sbc	r24, r24
     96e:	99 0b       	sbc	r25, r25
     970:	0e 94 93 11 	call	0x2326	; 0x2326 <__floatsisf>
     974:	21 e6       	ldi	r18, 0x61	; 97
     976:	3b e0       	ldi	r19, 0x0B	; 11
     978:	46 e3       	ldi	r20, 0x36	; 54
     97a:	51 e4       	ldi	r21, 0x41	; 65
     97c:	0e 94 a8 12 	call	0x2550	; 0x2550 <__mulsf3>
     980:	0e 94 65 11 	call	0x22ca	; 0x22ca <__fixunssfsi>
     984:	94 01       	movw	r18, r8
     986:	ab 01       	movw	r20, r22
     988:	6d 2d       	mov	r22, r13
     98a:	c7 01       	movw	r24, r14
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	9f 90       	pop	r9
     9a0:	8f 90       	pop	r8
     9a2:	97 cf       	rjmp	.-210    	; 0x8d2 <_ZN3Arm9moveSpeedEhjj>

000009a4 <_ZN3Arm9readServoEhhh>:
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	06 2f       	mov	r16, r22
     9ae:	14 2f       	mov	r17, r20
     9b0:	d2 2f       	mov	r29, r18
     9b2:	c6 e0       	ldi	r28, 0x06	; 6
     9b4:	c2 0f       	add	r28, r18
     9b6:	c4 0f       	add	r28, r20
     9b8:	c6 0f       	add	r28, r22
     9ba:	c0 95       	com	r28
     9bc:	8d e3       	ldi	r24, 0x3D	; 61
     9be:	96 e0       	ldi	r25, 0x06	; 6
     9c0:	0e 94 5e 14 	call	0x28bc	; 0x28bc <_ZN14HardwareSerial9availableEv>
     9c4:	89 2b       	or	r24, r25
     9c6:	29 f0       	breq	.+10     	; 0x9d2 <_ZN3Arm9readServoEhhh+0x2e>
     9c8:	8d e3       	ldi	r24, 0x3D	; 61
     9ca:	96 e0       	ldi	r25, 0x06	; 6
     9cc:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
     9d0:	f5 cf       	rjmp	.-22     	; 0x9bc <_ZN3Arm9readServoEhhh+0x18>
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	0e 94 1f 19 	call	0x323e	; 0x323e <digitalWrite>
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	0e 94 1f 19 	call	0x323e	; 0x323e <digitalWrite>
     9e2:	65 e0       	ldi	r22, 0x05	; 5
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
     9ee:	6f ef       	ldi	r22, 0xFF	; 255
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	8d e3       	ldi	r24, 0x3D	; 61
     9f4:	96 e0       	ldi	r25, 0x06	; 6
     9f6:	91 dc       	rcall	.-1758   	; 0x31a <_ZN14HardwareSerial5writeEi>
     9f8:	6f ef       	ldi	r22, 0xFF	; 255
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	8d e3       	ldi	r24, 0x3D	; 61
     9fe:	96 e0       	ldi	r25, 0x06	; 6
     a00:	8c dc       	rcall	.-1768   	; 0x31a <_ZN14HardwareSerial5writeEi>
     a02:	60 2f       	mov	r22, r16
     a04:	8d e3       	ldi	r24, 0x3D	; 61
     a06:	96 e0       	ldi	r25, 0x06	; 6
     a08:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN14HardwareSerial5writeEh>
     a0c:	64 e0       	ldi	r22, 0x04	; 4
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	8d e3       	ldi	r24, 0x3D	; 61
     a12:	96 e0       	ldi	r25, 0x06	; 6
     a14:	82 dc       	rcall	.-1788   	; 0x31a <_ZN14HardwareSerial5writeEi>
     a16:	62 e0       	ldi	r22, 0x02	; 2
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	8d e3       	ldi	r24, 0x3D	; 61
     a1c:	96 e0       	ldi	r25, 0x06	; 6
     a1e:	7d dc       	rcall	.-1798   	; 0x31a <_ZN14HardwareSerial5writeEi>
     a20:	61 2f       	mov	r22, r17
     a22:	8d e3       	ldi	r24, 0x3D	; 61
     a24:	96 e0       	ldi	r25, 0x06	; 6
     a26:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN14HardwareSerial5writeEh>
     a2a:	6d 2f       	mov	r22, r29
     a2c:	8d e3       	ldi	r24, 0x3D	; 61
     a2e:	96 e0       	ldi	r25, 0x06	; 6
     a30:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN14HardwareSerial5writeEh>
     a34:	6c 2f       	mov	r22, r28
     a36:	8d e3       	ldi	r24, 0x3D	; 61
     a38:	96 e0       	ldi	r25, 0x06	; 6
     a3a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN14HardwareSerial5writeEh>
     a3e:	8d e3       	ldi	r24, 0x3D	; 61
     a40:	96 e0       	ldi	r25, 0x06	; 6
     a42:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZN14HardwareSerial5flushEv>
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	0e 94 1f 19 	call	0x323e	; 0x323e <digitalWrite>
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	83 e0       	ldi	r24, 0x03	; 3
     a52:	0e 94 1f 19 	call	0x323e	; 0x323e <digitalWrite>
     a56:	65 e0       	ldi	r22, 0x05	; 5
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <delay>

00000a6a <_ZN3Arm7getDataEhh>:
	return (Position > position_min) && (Position < position_max) ? true : false;

}

/* Request and Capture given Data from servo with given ID */
int Arm::getData(uint8_t id, uint8_t ctrlData) {
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	62 97       	sbiw	r28, 0x12	; 18
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	6c 01       	movw	r12, r24
     a98:	16 2f       	mov	r17, r22
     a9a:	f4 2e       	mov	r15, r20
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
     a9c:	6e ea       	ldi	r22, 0xAE	; 174
     a9e:	74 e0       	ldi	r23, 0x04	; 4
     aa0:	ce 01       	movw	r24, r28
     aa2:	0d 96       	adiw	r24, 0x0d	; 13
     aa4:	0e 94 b4 19 	call	0x3368	; 0x3368 <_ZN6StringC1EPKc>

	readServo(id, ctrlData, 2);
     aa8:	22 e0       	ldi	r18, 0x02	; 2
     aaa:	4f 2d       	mov	r20, r15
     aac:	61 2f       	mov	r22, r17
     aae:	c6 01       	movw	r24, r12
     ab0:	79 df       	rcall	.-270    	; 0x9a4 <_ZN3Arm9readServoEhhh>
	delay(5);
     ab2:	65 e0       	ldi	r22, 0x05	; 5
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
	serialReading = YES;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	f6 01       	movw	r30, r12
     ac2:	87 87       	std	Z+15, r24	; 0x0f

	msgByte = Serial1.read();
     ac4:	8d e3       	ldi	r24, 0x3D	; 61
     ac6:	96 e0       	ldi	r25, 0x06	; 6
     ac8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
     acc:	18 2f       	mov	r17, r24
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
     ace:	8d e3       	ldi	r24, 0x3D	; 61
     ad0:	96 e0       	ldi	r25, 0x06	; 6
     ad2:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;

	msgStarted = startOne && startTwo ? YES : NO;
     ad6:	1f 3f       	cpi	r17, 0xFF	; 255
     ad8:	11 f4       	brne	.+4      	; 0xade <_ZN3Arm7getDataEhh+0x74>
     ada:	8f 3f       	cpi	r24, 0xFF	; 255
     adc:	e9 f0       	breq	.+58     	; 0xb18 <_ZN3Arm7getDataEhh+0xae>
}

/* Request and Capture given Data from servo with given ID */
int Arm::getData(uint8_t id, uint8_t ctrlData) {
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
     ade:	f1 2c       	mov	r15, r1
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //5
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//6
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
     ae0:	8d e3       	ldi	r24, 0x3D	; 61
     ae2:	96 e0       	ldi	r25, 0x06	; 6
     ae4:	0e 94 5e 14 	call	0x28bc	; 0x28bc <_ZN14HardwareSerial9availableEv>
     ae8:	89 2b       	or	r24, r25
     aea:	29 f0       	breq	.+10     	; 0xaf6 <_ZN3Arm7getDataEhh+0x8c>
     aec:	8d e3       	ldi	r24, 0x3D	; 61
     aee:	96 e0       	ldi	r25, 0x06	; 6
     af0:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
     af4:	f5 cf       	rjmp	.-22     	; 0xae0 <_ZN3Arm7getDataEhh+0x76>
	serialReading = NO;
     af6:	f6 01       	movw	r30, r12
     af8:	17 86       	std	Z+15, r1	; 0x0f

	/*  Check if the returned data is not corrupted and there are no errors
			Return -255 if the data is corrupted (Checksum error)
			Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
     afa:	ff 20       	and	r15, r15
     afc:	39 f0       	breq	.+14     	; 0xb0c <_ZN3Arm7getDataEhh+0xa2>
     afe:	00 23       	and	r16, r16
     b00:	41 f0       	breq	.+16     	; 0xb12 <_ZN3Arm7getDataEhh+0xa8>
     b02:	10 e0       	ldi	r17, 0x00	; 0
     b04:	11 95       	neg	r17
     b06:	01 95       	neg	r16
     b08:	11 09       	sbc	r17, r1
     b0a:	0d c1       	rjmp	.+538    	; 0xd26 <_ZN3Arm7getDataEhh+0x2bc>
     b0c:	01 e0       	ldi	r16, 0x01	; 1
     b0e:	1f ef       	ldi	r17, 0xFF	; 255
     b10:	0a c1       	rjmp	.+532    	; 0xd26 <_ZN3Arm7getDataEhh+0x2bc>
     b12:	09 2d       	mov	r16, r9
     b14:	17 2d       	mov	r17, r7
     b16:	07 c1       	rjmp	.+526    	; 0xd26 <_ZN3Arm7getDataEhh+0x2bc>
	msgByte = Serial1.read();									// 02 : Start 2/2
	startTwo = msgByte == 0xFF ? YES : NO;

	msgStarted = startOne && startTwo ? YES : NO;
	if (msgStarted) {
		msgId = Serial1.read();
     b18:	8d e3       	ldi	r24, 0x3D	; 61
     b1a:	96 e0       	ldi	r25, 0x06	; 6
     b1c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
     b20:	3c 01       	movw	r6, r24
		line = "ID:" + padNumber(msgId, 6);							//1
     b22:	bc 01       	movw	r22, r24
     b24:	77 27       	eor	r23, r23
     b26:	46 e0       	ldi	r20, 0x06	; 6
     b28:	ce 01       	movw	r24, r28
     b2a:	07 96       	adiw	r24, 0x07	; 7
     b2c:	16 d1       	rcall	.+556    	; 0xd5a <_Z9padNumberih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     b2e:	62 e2       	ldi	r22, 0x22	; 34
     b30:	72 e0       	ldi	r23, 0x02	; 2
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	0e 94 b4 19 	call	0x3368	; 0x3368 <_ZN6StringC1EPKc>
     b3a:	be 01       	movw	r22, r28
     b3c:	69 5f       	subi	r22, 0xF9	; 249
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
     b48:	bc 01       	movw	r22, r24
     b4a:	ce 01       	movw	r24, r28
     b4c:	0d 96       	adiw	r24, 0x0d	; 13
     b4e:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
     b5a:	ce 01       	movw	r24, r28
     b5c:	07 96       	adiw	r24, 0x07	; 7
     b5e:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
		msgLength = Serial1.read();
     b62:	8d e3       	ldi	r24, 0x3D	; 61
     b64:	96 e0       	ldi	r25, 0x06	; 6
     b66:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
     b6a:	4c 01       	movw	r8, r24
		line = line + ", MsgLegth:" + padNumber(msgLength, 6);		//2
     b6c:	bc 01       	movw	r22, r24
     b6e:	77 27       	eor	r23, r23
     b70:	46 e0       	ldi	r20, 0x06	; 6
     b72:	ce 01       	movw	r24, r28
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	f1 d0       	rcall	.+482    	; 0xd5a <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     b78:	be 01       	movw	r22, r28
     b7a:	63 5f       	subi	r22, 0xF3	; 243
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	ce 01       	movw	r24, r28
     b80:	07 96       	adiw	r24, 0x07	; 7
     b82:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
     b86:	66 e2       	ldi	r22, 0x26	; 38
     b88:	72 e0       	ldi	r23, 0x02	; 2
     b8a:	ce 01       	movw	r24, r28
     b8c:	07 96       	adiw	r24, 0x07	; 7
     b8e:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
     b92:	be 01       	movw	r22, r28
     b94:	6f 5f       	subi	r22, 0xFF	; 255
     b96:	7f 4f       	sbci	r23, 0xFF	; 255
     b98:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
     b9c:	bc 01       	movw	r22, r24
     b9e:	ce 01       	movw	r24, r28
     ba0:	0d 96       	adiw	r24, 0x0d	; 13
     ba2:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     ba6:	ce 01       	movw	r24, r28
     ba8:	07 96       	adiw	r24, 0x07	; 7
     baa:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
     bae:	ce 01       	movw	r24, r28
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
		msgError = Serial1.read();
     bb6:	8d e3       	ldi	r24, 0x3D	; 61
     bb8:	96 e0       	ldi	r25, 0x06	; 6
     bba:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
     bbe:	7c 01       	movw	r14, r24
     bc0:	08 2f       	mov	r16, r24
		line = line + ", Error:" + padNumber(msgError, 6);			//3
     bc2:	bc 01       	movw	r22, r24
     bc4:	77 27       	eor	r23, r23
     bc6:	46 e0       	ldi	r20, 0x06	; 6
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	c6 d0       	rcall	.+396    	; 0xd5a <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     bce:	be 01       	movw	r22, r28
     bd0:	63 5f       	subi	r22, 0xF3	; 243
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	ce 01       	movw	r24, r28
     bd6:	07 96       	adiw	r24, 0x07	; 7
     bd8:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
     bdc:	62 e3       	ldi	r22, 0x32	; 50
     bde:	72 e0       	ldi	r23, 0x02	; 2
     be0:	ce 01       	movw	r24, r28
     be2:	07 96       	adiw	r24, 0x07	; 7
     be4:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
     be8:	be 01       	movw	r22, r28
     bea:	6f 5f       	subi	r22, 0xFF	; 255
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
     bf2:	bc 01       	movw	r22, r24
     bf4:	ce 01       	movw	r24, r28
     bf6:	0d 96       	adiw	r24, 0x0d	; 13
     bf8:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     bfc:	ce 01       	movw	r24, r28
     bfe:	07 96       	adiw	r24, 0x07	; 7
     c00:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
     c04:	ce 01       	movw	r24, r28
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>

		msgData_1 = Serial1.read();
     c0c:	8d e3       	ldi	r24, 0x3D	; 61
     c0e:	96 e0       	ldi	r25, 0x06	; 6
     c10:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
     c14:	18 2f       	mov	r17, r24
		msgData_2 = Serial1.read();
     c16:	8d e3       	ldi	r24, 0x3D	; 61
     c18:	96 e0       	ldi	r25, 0x06	; 6
     c1a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
		msgData = combineBytes(msgData_1, msgData_2);
     c1e:	f8 2e       	mov	r15, r24
     c20:	68 2f       	mov	r22, r24
     c22:	81 2f       	mov	r24, r17
     c24:	f6 d0       	rcall	.+492    	; 0xe12 <_Z12combineByteshh>
     c26:	98 2e       	mov	r9, r24
     c28:	79 2e       	mov	r7, r25
		line = line + ", Data:" + padNumber(msgData, 6);			//4
     c2a:	46 e0       	ldi	r20, 0x06	; 6
     c2c:	68 2f       	mov	r22, r24
     c2e:	79 2f       	mov	r23, r25
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	92 d0       	rcall	.+292    	; 0xd5a <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     c36:	be 01       	movw	r22, r28
     c38:	63 5f       	subi	r22, 0xF3	; 243
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	ce 01       	movw	r24, r28
     c3e:	07 96       	adiw	r24, 0x07	; 7
     c40:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
     c44:	6b e3       	ldi	r22, 0x3B	; 59
     c46:	72 e0       	ldi	r23, 0x02	; 2
     c48:	ce 01       	movw	r24, r28
     c4a:	07 96       	adiw	r24, 0x07	; 7
     c4c:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
     c50:	be 01       	movw	r22, r28
     c52:	6f 5f       	subi	r22, 0xFF	; 255
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
     c5a:	bc 01       	movw	r22, r24
     c5c:	ce 01       	movw	r24, r28
     c5e:	0d 96       	adiw	r24, 0x0d	; 13
     c60:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     c64:	ce 01       	movw	r24, r28
     c66:	07 96       	adiw	r24, 0x07	; 7
     c68:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
     c6c:	ce 01       	movw	r24, r28
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
		msgChecksum = Serial1.read();
     c74:	8d e3       	ldi	r24, 0x3D	; 61
     c76:	96 e0       	ldi	r25, 0x06	; 6
     c78:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //5
     c7c:	5c 01       	movw	r10, r24
     c7e:	bc 01       	movw	r22, r24
     c80:	77 27       	eor	r23, r23
     c82:	46 e0       	ldi	r20, 0x06	; 6
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	68 d0       	rcall	.+208    	; 0xd5a <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     c8a:	be 01       	movw	r22, r28
     c8c:	63 5f       	subi	r22, 0xF3	; 243
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	ce 01       	movw	r24, r28
     c92:	07 96       	adiw	r24, 0x07	; 7
     c94:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
     c98:	63 e4       	ldi	r22, 0x43	; 67
     c9a:	72 e0       	ldi	r23, 0x02	; 2
     c9c:	ce 01       	movw	r24, r28
     c9e:	07 96       	adiw	r24, 0x07	; 7
     ca0:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
     ca4:	be 01       	movw	r22, r28
     ca6:	6f 5f       	subi	r22, 0xFF	; 255
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
     cae:	bc 01       	movw	r22, r24
     cb0:	ce 01       	movw	r24, r28
     cb2:	0d 96       	adiw	r24, 0x0d	; 13
     cb4:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     cb8:	ce 01       	movw	r24, r28
     cba:	07 96       	adiw	r24, 0x07	; 7
     cbc:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
     cc0:	ce 01       	movw	r24, r28
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
     cc8:	86 0c       	add	r8, r6
     cca:	e8 0c       	add	r14, r8
     ccc:	1e 0d       	add	r17, r14
     cce:	1f 0d       	add	r17, r15
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//6
     cd0:	10 95       	com	r17
     cd2:	61 2f       	mov	r22, r17
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	46 e0       	ldi	r20, 0x06	; 6
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	3e d0       	rcall	.+124    	; 0xd5a <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     cde:	be 01       	movw	r22, r28
     ce0:	63 5f       	subi	r22, 0xF3	; 243
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	ce 01       	movw	r24, r28
     ce6:	07 96       	adiw	r24, 0x07	; 7
     ce8:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
     cec:	62 e5       	ldi	r22, 0x52	; 82
     cee:	72 e0       	ldi	r23, 0x02	; 2
     cf0:	ce 01       	movw	r24, r28
     cf2:	07 96       	adiw	r24, 0x07	; 7
     cf4:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
     cf8:	be 01       	movw	r22, r28
     cfa:	6f 5f       	subi	r22, 0xFF	; 255
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
     d02:	bc 01       	movw	r22, r24
     d04:	ce 01       	movw	r24, r28
     d06:	0d 96       	adiw	r24, 0x0d	; 13
     d08:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     d0c:	ce 01       	movw	r24, r28
     d0e:	07 96       	adiw	r24, 0x07	; 7
     d10:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
     d1c:	ff 24       	eor	r15, r15
     d1e:	f3 94       	inc	r15
     d20:	1a 11       	cpse	r17, r10
     d22:	dd ce       	rjmp	.-582    	; 0xade <_ZN3Arm7getDataEhh+0x74>
     d24:	dd ce       	rjmp	.-582    	; 0xae0 <_ZN3Arm7getDataEhh+0x76>
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
     d26:	ce 01       	movw	r24, r28
     d28:	0d 96       	adiw	r24, 0x0d	; 13
     d2a:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>

	/*  Check if the returned data is not corrupted and there are no errors
			Return -255 if the data is corrupted (Checksum error)
			Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
}
     d2e:	c8 01       	movw	r24, r16
     d30:	62 96       	adiw	r28, 0x12	; 18
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	bf 90       	pop	r11
     d4e:	af 90       	pop	r10
     d50:	9f 90       	pop	r9
     d52:	8f 90       	pop	r8
     d54:	7f 90       	pop	r7
     d56:	6f 90       	pop	r6
     d58:	08 95       	ret

00000d5a <_Z9padNumberih>:
 *  Author: Marek Kujawa
 */ 
#include <Arduino.h>
#include "General.h"

String padNumber(int value, uint8_t padding) {
     d5a:	8f 92       	push	r8
     d5c:	9f 92       	push	r9
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	00 d0       	rcall	.+0      	; 0xd74 <_Z9padNumberih+0x1a>
     d74:	1f 92       	push	r1
     d76:	1f 92       	push	r1
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	7c 01       	movw	r14, r24
     d7e:	96 2e       	mov	r9, r22
     d80:	87 2e       	mov	r8, r23
	/* if the value is greater than number of digits it will be maxed out, e.g. pad=2, val=200 => val=99 */
	//value = (value < pow(10, padding)) ? value : (pow(10, padding)) - 1;
	response = sprintf(tmp, "%%%dd", padding);
	response = sprintf(buffer, tmp, value);
	return buffer;
}
     d82:	ad b6       	in	r10, 0x3d	; 61
     d84:	be b6       	in	r11, 0x3e	; 62
#include <Arduino.h>
#include "General.h"

String padNumber(int value, uint8_t padding) {
	uint8_t response;
	char buffer[padding];
     d86:	8d b7       	in	r24, 0x3d	; 61
     d88:	9e b7       	in	r25, 0x3e	; 62
     d8a:	84 1b       	sub	r24, r20
     d8c:	91 09       	sbc	r25, r1
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	9e bf       	out	0x3e, r25	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	8d bf       	out	0x3d, r24	; 61
     d98:	0d b7       	in	r16, 0x3d	; 61
     d9a:	1e b7       	in	r17, 0x3e	; 62
     d9c:	0f 5f       	subi	r16, 0xFF	; 255
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
	char tmp[5];
	/* if the value is greater than number of digits it will be maxed out, e.g. pad=2, val=200 => val=99 */
	//value = (value < pow(10, padding)) ? value : (pow(10, padding)) - 1;
	response = sprintf(tmp, "%%%dd", padding);
     da0:	1f 92       	push	r1
     da2:	4f 93       	push	r20
     da4:	81 e6       	ldi	r24, 0x61	; 97
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	9f 93       	push	r25
     daa:	8f 93       	push	r24
     dac:	ce 01       	movw	r24, r28
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	6c 01       	movw	r12, r24
     db2:	9f 93       	push	r25
     db4:	8f 93       	push	r24
     db6:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <sprintf>
	response = sprintf(buffer, tmp, value);
     dba:	8f 92       	push	r8
     dbc:	9f 92       	push	r9
     dbe:	df 92       	push	r13
     dc0:	cf 92       	push	r12
     dc2:	1f 93       	push	r17
     dc4:	0f 93       	push	r16
     dc6:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <sprintf>
	return buffer;
     dca:	b8 01       	movw	r22, r16
     dcc:	c7 01       	movw	r24, r14
     dce:	0e 94 b4 19 	call	0x3368	; 0x3368 <_ZN6StringC1EPKc>
     dd2:	8d b7       	in	r24, 0x3d	; 61
     dd4:	9e b7       	in	r25, 0x3e	; 62
     dd6:	0c 96       	adiw	r24, 0x0c	; 12
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	9e bf       	out	0x3e, r25	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	8d bf       	out	0x3d, r24	; 61
}
     de2:	c7 01       	movw	r24, r14
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	be be       	out	0x3e, r11	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	ad be       	out	0x3d, r10	; 61
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	9f 90       	pop	r9
     e0e:	8f 90       	pop	r8
     e10:	08 95       	ret

00000e12 <_Z12combineByteshh>:

int combineBytes(uint8_t byte_L, uint8_t byte_H) { return byte_L + (byte_H<<8); }
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	76 2f       	mov	r23, r22
     e16:	66 27       	eor	r22, r22
     e18:	9b 01       	movw	r18, r22
     e1a:	28 0f       	add	r18, r24
     e1c:	31 1d       	adc	r19, r1
     e1e:	c9 01       	movw	r24, r18
     e20:	08 95       	ret

00000e22 <_Z8sumBytesPhh>:

int sumBytes(uint8_t* bytes, uint8_t parsNo) {
     e22:	38 2f       	mov	r19, r24
     e24:	fc 01       	movw	r30, r24
	int sum = 0;
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i=0; i<parsNo; i++) sum +=bytes[i];
     e2a:	2e 2f       	mov	r18, r30
     e2c:	23 1b       	sub	r18, r19
     e2e:	26 17       	cp	r18, r22
     e30:	20 f4       	brcc	.+8      	; 0xe3a <_Z8sumBytesPhh+0x18>
     e32:	21 91       	ld	r18, Z+
     e34:	82 0f       	add	r24, r18
     e36:	91 1d       	adc	r25, r1
     e38:	f8 cf       	rjmp	.-16     	; 0xe2a <_Z8sumBytesPhh+0x8>
	return sum;
}
     e3a:	08 95       	ret

00000e3c <_Z12combineToCSVPih>:

String combineToCSV(int* data, uint8_t number) {
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	2c 97       	sbiw	r28, 0x0c	; 12
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	7c 01       	movw	r14, r24
     e5e:	c4 2e       	mov	r12, r20
	uint8_t i;
	String line = padNumber(data[0], 10);
     e60:	fb 01       	movw	r30, r22
     e62:	61 91       	ld	r22, Z+
     e64:	71 91       	ld	r23, Z+
     e66:	8f 01       	movw	r16, r30
     e68:	4a e0       	ldi	r20, 0x0A	; 10
     e6a:	77 df       	rcall	.-274    	; 0xd5a <_Z9padNumberih>
	for (i=1; i < number; i++) { line = line + "," + padNumber(data[i], 6);}
     e6c:	dd 24       	eor	r13, r13
     e6e:	d3 94       	inc	r13
     e70:	dc 14       	cp	r13, r12
     e72:	30 f5       	brcc	.+76     	; 0xec0 <_Z12combineToCSVPih+0x84>
     e74:	f8 01       	movw	r30, r16
     e76:	61 91       	ld	r22, Z+
     e78:	71 91       	ld	r23, Z+
     e7a:	8f 01       	movw	r16, r30
     e7c:	46 e0       	ldi	r20, 0x06	; 6
     e7e:	ce 01       	movw	r24, r28
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	6b df       	rcall	.-298    	; 0xd5a <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     e84:	b7 01       	movw	r22, r14
     e86:	ce 01       	movw	r24, r28
     e88:	07 96       	adiw	r24, 0x07	; 7
     e8a:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
     e8e:	67 e6       	ldi	r22, 0x67	; 103
     e90:	72 e0       	ldi	r23, 0x02	; 2
     e92:	ce 01       	movw	r24, r28
     e94:	07 96       	adiw	r24, 0x07	; 7
     e96:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
     e9a:	be 01       	movw	r22, r28
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
     ea4:	bc 01       	movw	r22, r24
     ea6:	c7 01       	movw	r24, r14
     ea8:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     eac:	ce 01       	movw	r24, r28
     eae:	07 96       	adiw	r24, 0x07	; 7
     eb0:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
     ebc:	d3 94       	inc	r13
     ebe:	d8 cf       	rjmp	.-80     	; 0xe70 <_Z12combineToCSVPih+0x34>
	return line;
}
     ec0:	c7 01       	movw	r24, r14
     ec2:	2c 96       	adiw	r28, 0x0c	; 12
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	08 95       	ret

00000ee0 <_Z16dumpDataToSerialPih>:

void dumpDataToSerial(int* data, uint8_t number) { Serial.println(combineToCSV(data, number)); }
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <_Z16dumpDataToSerialPih+0x6>
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <_Z16dumpDataToSerialPih+0x8>
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	46 2f       	mov	r20, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	ce 01       	movw	r24, r28
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	a3 df       	rcall	.-186    	; 0xe3c <_Z12combineToCSVPih>
     ef6:	be 01       	movw	r22, r28
     ef8:	6f 5f       	subi	r22, 0xFF	; 255
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	80 ea       	ldi	r24, 0xA0	; 160
     efe:	95 e0       	ldi	r25, 0x05	; 5
     f00:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN5Print7printlnERK6String>
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
     f0c:	26 96       	adiw	r28, 0x06	; 6
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <_Z8printLCDhhih>:
	 };
	 Serial.print(three);
	 Serial.print(four);
	dumpDataToSerial(data, 6);
	delay(20000);
}
     f1e:	4f 92       	push	r4
     f20:	5f 92       	push	r5
     f22:	6f 92       	push	r6
     f24:	7f 92       	push	r7
     f26:	8f 92       	push	r8
     f28:	9f 92       	push	r9
     f2a:	af 92       	push	r10
     f2c:	bf 92       	push	r11
     f2e:	cf 92       	push	r12
     f30:	df 92       	push	r13
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <_Z8printLCDhhih+0x22>
     f40:	1f 92       	push	r1
     f42:	1f 92       	push	r1
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	98 2e       	mov	r9, r24
     f4a:	86 2e       	mov	r8, r22
     f4c:	8a 01       	movw	r16, r20
     f4e:	d2 2e       	mov	r13, r18
     f50:	ad b6       	in	r10, 0x3d	; 61
     f52:	be b6       	in	r11, 0x3e	; 62
     f54:	8d b7       	in	r24, 0x3d	; 61
     f56:	9e b7       	in	r25, 0x3e	; 62
     f58:	82 1b       	sub	r24, r18
     f5a:	91 09       	sbc	r25, r1
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	9e bf       	out	0x3e, r25	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	8d bf       	out	0x3d, r24	; 61
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	7c 01       	movw	r14, r24
     f6a:	62 2f       	mov	r22, r18
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 91 11 	call	0x2322	; 0x2322 <__floatunsisf>
     f76:	9b 01       	movw	r18, r22
     f78:	ac 01       	movw	r20, r24
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	80 e2       	ldi	r24, 0x20	; 32
     f80:	91 e4       	ldi	r25, 0x41	; 65
     f82:	0e 94 0b 13 	call	0x2616	; 0x2616 <pow>
     f86:	2b 01       	movw	r4, r22
     f88:	3c 01       	movw	r6, r24
     f8a:	b8 01       	movw	r22, r16
     f8c:	01 2e       	mov	r0, r17
     f8e:	00 0c       	add	r0, r0
     f90:	88 0b       	sbc	r24, r24
     f92:	99 0b       	sbc	r25, r25
     f94:	0e 94 93 11 	call	0x2326	; 0x2326 <__floatsisf>
     f98:	a3 01       	movw	r20, r6
     f9a:	92 01       	movw	r18, r4
     f9c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__cmpsf2>
     fa0:	87 fd       	sbrc	r24, 7
     fa2:	0b c0       	rjmp	.+22     	; 0xfba <_Z8printLCDhhih+0x9c>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	c3 01       	movw	r24, r6
     fae:	b2 01       	movw	r22, r4
     fb0:	0e 94 8c 10 	call	0x2118	; 0x2118 <__subsf3>
     fb4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fixsfsi>
     fb8:	8b 01       	movw	r16, r22
     fba:	1f 92       	push	r1
     fbc:	df 92       	push	r13
     fbe:	81 e6       	ldi	r24, 0x61	; 97
     fc0:	92 e0       	ldi	r25, 0x02	; 2
     fc2:	9f 93       	push	r25
     fc4:	8f 93       	push	r24
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	6c 01       	movw	r12, r24
     fcc:	9f 93       	push	r25
     fce:	8f 93       	push	r24
     fd0:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <sprintf>
     fd4:	1f 93       	push	r17
     fd6:	0f 93       	push	r16
     fd8:	df 92       	push	r13
     fda:	cf 92       	push	r12
     fdc:	ff 92       	push	r15
     fde:	ef 92       	push	r14
     fe0:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <sprintf>
     fe4:	48 2d       	mov	r20, r8
     fe6:	69 2d       	mov	r22, r9
     fe8:	80 ef       	ldi	r24, 0xF0	; 240
     fea:	94 e0       	ldi	r25, 0x04	; 4
     fec:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     ff0:	b7 01       	movw	r22, r14
     ff2:	80 ef       	ldi	r24, 0xF0	; 240
     ff4:	94 e0       	ldi	r25, 0x04	; 4
     ff6:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <_ZN5Print5printEPKc>
     ffa:	8d b7       	in	r24, 0x3d	; 61
     ffc:	9e b7       	in	r25, 0x3e	; 62
     ffe:	0c 96       	adiw	r24, 0x0c	; 12
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	9e bf       	out	0x3e, r25	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	8d bf       	out	0x3d, r24	; 61
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	be be       	out	0x3e, r11	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	ad be       	out	0x3d, r10	; 61
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	bf 90       	pop	r11
    1030:	af 90       	pop	r10
    1032:	9f 90       	pop	r9
    1034:	8f 90       	pop	r8
    1036:	7f 90       	pop	r7
    1038:	6f 90       	pop	r6
    103a:	5f 90       	pop	r5
    103c:	4f 90       	pop	r4
    103e:	08 95       	ret

00001040 <_Z8printLCDhhPKc>:
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ea 01       	movw	r28, r20
    1046:	46 2f       	mov	r20, r22
    1048:	68 2f       	mov	r22, r24
    104a:	80 ef       	ldi	r24, 0xF0	; 240
    104c:	94 e0       	ldi	r25, 0x04	; 4
    104e:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1052:	be 01       	movw	r22, r28
    1054:	80 ef       	ldi	r24, 0xF0	; 240
    1056:	94 e0       	ldi	r25, 0x04	; 4
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <_ZN5Print5printEPKc>

00001060 <_Z13setupSwitchesv>:
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	84 b9       	out	0x04, r24	; 4
    1064:	84 b1       	in	r24, 0x04	; 4
    1066:	88 7f       	andi	r24, 0xF8	; 248
    1068:	84 b9       	out	0x04, r24	; 4
    106a:	eb e6       	ldi	r30, 0x6B	; 107
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	87 60       	ori	r24, 0x07	; 7
    1072:	80 83       	st	Z, r24
    1074:	e8 e6       	ldi	r30, 0x68	; 104
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	81 60       	ori	r24, 0x01	; 1
    107c:	80 83       	st	Z, r24
    107e:	78 94       	sei
    1080:	08 95       	ret

00001082 <_Z13setupJoystickv>:
    1082:	ea e0       	ldi	r30, 0x0A	; 10
    1084:	f1 e0       	ldi	r31, 0x01	; 1
    1086:	80 81       	ld	r24, Z
    1088:	8d 7f       	andi	r24, 0xFD	; 253
    108a:	80 83       	st	Z, r24
    108c:	e7 e0       	ldi	r30, 0x07	; 7
    108e:	f1 e0       	ldi	r31, 0x01	; 1
    1090:	80 81       	ld	r24, Z
    1092:	8f 70       	andi	r24, 0x0F	; 15
    1094:	80 83       	st	Z, r24
    1096:	08 95       	ret

00001098 <_Z15startConversionh>:
    1098:	ec e7       	ldi	r30, 0x7C	; 124
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	90 81       	ld	r25, Z
    109e:	90 7e       	andi	r25, 0xE0	; 224
    10a0:	90 83       	st	Z, r25
    10a2:	90 81       	ld	r25, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	27 70       	andi	r18, 0x07	; 7
    10a8:	92 2b       	or	r25, r18
    10aa:	90 83       	st	Z, r25
    10ac:	88 70       	andi	r24, 0x08	; 8
    10ae:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    10b2:	ea e7       	ldi	r30, 0x7A	; 122
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	80 64       	ori	r24, 0x40	; 64
    10ba:	80 83       	st	Z, r24
    10bc:	08 95       	ret

000010be <_Z8setupADCv>:
    10be:	ec e7       	ldi	r30, 0x7C	; 124
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8f 77       	andi	r24, 0x7F	; 127
    10c6:	80 83       	st	Z, r24
    10c8:	80 81       	ld	r24, Z
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	80 83       	st	Z, r24
    10ce:	ea e7       	ldi	r30, 0x7A	; 122
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	87 60       	ori	r24, 0x07	; 7
    10d6:	80 83       	st	Z, r24
    10d8:	80 81       	ld	r24, Z
    10da:	80 68       	ori	r24, 0x80	; 128
    10dc:	80 83       	st	Z, r24
    10de:	80 81       	ld	r24, Z
    10e0:	88 60       	ori	r24, 0x08	; 8
    10e2:	80 83       	st	Z, r24
    10e4:	80 e2       	ldi	r24, 0x20	; 32
    10e6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    10ea:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <AnChannel>
    10ee:	84 5f       	subi	r24, 0xF4	; 244
    10f0:	d3 cf       	rjmp	.-90     	; 0x1098 <_Z15startConversionh>

000010f2 <__vector_29>:
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	0b b6       	in	r0, 0x3b	; 59
    10fe:	0f 92       	push	r0
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31
    1118:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    111c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1120:	84 3f       	cpi	r24, 0xF4	; 244
    1122:	91 40       	sbci	r25, 0x01	; 1
    1124:	38 f4       	brcc	.+14     	; 0x1134 <__vector_29+0x42>
    1126:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    112a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    112e:	24 5f       	subi	r18, 0xF4	; 244
    1130:	31 40       	sbci	r19, 0x01	; 1
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <__vector_29+0x60>
    1134:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    1138:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	92 40       	sbci	r25, 0x02	; 2
    1140:	30 f0       	brcs	.+12     	; 0x114e <__vector_29+0x5c>
    1142:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    1146:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    114a:	32 50       	subi	r19, 0x02	; 2
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <__vector_29+0x60>
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <AnChannel>
    1156:	e8 2f       	mov	r30, r24
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	e1 52       	subi	r30, 0x21	; 33
    1160:	fb 4f       	sbci	r31, 0xFB	; 251
    1162:	31 83       	std	Z+1, r19	; 0x01
    1164:	20 83       	st	Z, r18
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	10 f4       	brcc	.+4      	; 0x116e <__vector_29+0x7c>
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <__vector_29+0x7e>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <AnChannel>
    1174:	84 5f       	subi	r24, 0xF4	; 244
    1176:	90 df       	rcall	.-224    	; 0x1098 <_Z15startConversionh>
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	bf 91       	pop	r27
    117e:	af 91       	pop	r26
    1180:	9f 91       	pop	r25
    1182:	8f 91       	pop	r24
    1184:	7f 91       	pop	r23
    1186:	6f 91       	pop	r22
    1188:	5f 91       	pop	r21
    118a:	4f 91       	pop	r20
    118c:	3f 91       	pop	r19
    118e:	2f 91       	pop	r18
    1190:	0f 90       	pop	r0
    1192:	0b be       	out	0x3b, r0	; 59
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <__vector_9>:
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	0b b6       	in	r0, 0x3b	; 59
    11aa:	0f 92       	push	r0
    11ac:	ef 92       	push	r14
    11ae:	ff 92       	push	r15
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	2f 93       	push	r18
    11b6:	3f 93       	push	r19
    11b8:	4f 93       	push	r20
    11ba:	5f 93       	push	r21
    11bc:	6f 93       	push	r22
    11be:	7f 93       	push	r23
    11c0:	8f 93       	push	r24
    11c2:	9f 93       	push	r25
    11c4:	af 93       	push	r26
    11c6:	bf 93       	push	r27
    11c8:	cf 93       	push	r28
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
    11ce:	c0 91 0a 05 	lds	r28, 0x050A	; 0x80050a <arm+0xc>
    11d2:	18 9b       	sbis	0x03, 0	; 3
    11d4:	3b c0       	rjmp	.+118    	; 0x124c <__vector_9+0xae>
    11d6:	2f 9a       	sbi	0x05, 7	; 5
    11d8:	84 e1       	ldi	r24, 0x14	; 20
    11da:	c8 9f       	mul	r28, r24
    11dc:	80 01       	movw	r16, r0
    11de:	11 24       	eor	r1, r1
    11e0:	02 50       	subi	r16, 0x02	; 2
    11e2:	1b 4f       	sbci	r17, 0xFB	; 251
    11e4:	78 01       	movw	r14, r16
    11e6:	ec e1       	ldi	r30, 0x1C	; 28
    11e8:	ee 0e       	add	r14, r30
    11ea:	f1 1c       	adc	r15, r1
    11ec:	0e 5e       	subi	r16, 0xEE	; 238
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	18 9b       	sbis	0x03, 0	; 3
    11f2:	23 c0       	rjmp	.+70     	; 0x123a <__vector_9+0x9c>
    11f4:	c3 30       	cpi	r28, 0x03	; 3
    11f6:	70 f4       	brcc	.+28     	; 0x1214 <__vector_9+0x76>
    11f8:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <lastButtonPressed>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	21 f0       	breq	.+8      	; 0x1208 <__vector_9+0x6a>
    1200:	f7 01       	movw	r30, r14
    1202:	20 81       	ld	r18, Z
    1204:	31 81       	ldd	r19, Z+1	; 0x01
    1206:	02 c0       	rjmp	.+4      	; 0x120c <__vector_9+0x6e>
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	f8 01       	movw	r30, r16
    120e:	40 81       	ld	r20, Z
    1210:	51 81       	ldd	r21, Z+1	; 0x01
    1212:	08 c0       	rjmp	.+16     	; 0x1224 <__vector_9+0x86>
    1214:	f7 01       	movw	r30, r14
    1216:	20 81       	ld	r18, Z
    1218:	31 81       	ldd	r19, Z+1	; 0x01
    121a:	f8 01       	movw	r30, r16
    121c:	40 81       	ld	r20, Z
    121e:	51 81       	ldd	r21, Z+1	; 0x01
    1220:	41 50       	subi	r20, 0x01	; 1
    1222:	51 09       	sbc	r21, r1
    1224:	6c 2f       	mov	r22, r28
    1226:	8e ef       	ldi	r24, 0xFE	; 254
    1228:	94 e0       	ldi	r25, 0x04	; 4
    122a:	53 db       	rcall	.-2394   	; 0x8d2 <_ZN3Arm9moveSpeedEhjj>
    122c:	68 ec       	ldi	r22, 0xC8	; 200
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
    1238:	db cf       	rjmp	.-74     	; 0x11f0 <__vector_9+0x52>
    123a:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <buttonsFlip+0x1>
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	89 27       	eor	r24, r25
    1242:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <buttonsFlip+0x1>
    1246:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <lastButtonPressed>
    124a:	2f 98       	cbi	0x05, 7	; 5
    124c:	19 9b       	sbis	0x03, 1	; 3
    124e:	3d c0       	rjmp	.+122    	; 0x12ca <__vector_9+0x12c>
    1250:	2f 9a       	sbi	0x05, 7	; 5
    1252:	f4 e1       	ldi	r31, 0x14	; 20
    1254:	cf 9f       	mul	r28, r31
    1256:	80 01       	movw	r16, r0
    1258:	11 24       	eor	r1, r1
    125a:	02 50       	subi	r16, 0x02	; 2
    125c:	1b 4f       	sbci	r17, 0xFB	; 251
    125e:	78 01       	movw	r14, r16
    1260:	8c e1       	ldi	r24, 0x1C	; 28
    1262:	e8 0e       	add	r14, r24
    1264:	f1 1c       	adc	r15, r1
    1266:	0e 5e       	subi	r16, 0xEE	; 238
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
    126a:	19 9b       	sbis	0x03, 1	; 3
    126c:	24 c0       	rjmp	.+72     	; 0x12b6 <__vector_9+0x118>
    126e:	c3 30       	cpi	r28, 0x03	; 3
    1270:	78 f4       	brcc	.+30     	; 0x1290 <__vector_9+0xf2>
    1272:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <lastButtonPressed>
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	29 f0       	breq	.+10     	; 0x1284 <__vector_9+0xe6>
    127a:	f7 01       	movw	r30, r14
    127c:	20 81       	ld	r18, Z
    127e:	31 81       	ldd	r19, Z+1	; 0x01
    1280:	3c 5f       	subi	r19, 0xFC	; 252
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <__vector_9+0xea>
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	34 e0       	ldi	r19, 0x04	; 4
    1288:	f8 01       	movw	r30, r16
    128a:	40 81       	ld	r20, Z
    128c:	51 81       	ldd	r21, Z+1	; 0x01
    128e:	08 c0       	rjmp	.+16     	; 0x12a0 <__vector_9+0x102>
    1290:	f7 01       	movw	r30, r14
    1292:	20 81       	ld	r18, Z
    1294:	31 81       	ldd	r19, Z+1	; 0x01
    1296:	f8 01       	movw	r30, r16
    1298:	40 81       	ld	r20, Z
    129a:	51 81       	ldd	r21, Z+1	; 0x01
    129c:	4f 5f       	subi	r20, 0xFF	; 255
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	6c 2f       	mov	r22, r28
    12a2:	8e ef       	ldi	r24, 0xFE	; 254
    12a4:	94 e0       	ldi	r25, 0x04	; 4
    12a6:	15 db       	rcall	.-2518   	; 0x8d2 <_ZN3Arm9moveSpeedEhjj>
    12a8:	68 ec       	ldi	r22, 0xC8	; 200
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
    12b4:	da cf       	rjmp	.-76     	; 0x126a <__vector_9+0xcc>
    12b6:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <buttonsFlip+0x2>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	89 27       	eor	r24, r25
    12be:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <buttonsFlip+0x2>
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <lastButtonPressed>
    12c8:	2f 98       	cbi	0x05, 7	; 5
    12ca:	1a 9b       	sbis	0x03, 2	; 3
    12cc:	4b c0       	rjmp	.+150    	; 0x1364 <__vector_9+0x1c6>
    12ce:	1f 9a       	sbi	0x03, 7	; 3
    12d0:	64 e1       	ldi	r22, 0x14	; 20
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
    12dc:	00 e0       	ldi	r16, 0x00	; 0
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	1a 9b       	sbis	0x03, 2	; 3
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <__vector_9+0x158>
    12e4:	61 e0       	ldi	r22, 0x01	; 1
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
    12f0:	0f 5f       	subi	r16, 0xFF	; 255
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	f5 cf       	rjmp	.-22     	; 0x12e0 <__vector_9+0x142>
    12f6:	09 3e       	cpi	r16, 0xE9	; 233
    12f8:	13 40       	sbci	r17, 0x03	; 3
    12fa:	38 f0       	brcs	.+14     	; 0x130a <__vector_9+0x16c>
    12fc:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <autoBalanceOn>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	89 27       	eor	r24, r25
    1304:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <autoBalanceOn>
    1308:	24 c0       	rjmp	.+72     	; 0x1352 <__vector_9+0x1b4>
    130a:	c3 30       	cpi	r28, 0x03	; 3
    130c:	78 f4       	brcc	.+30     	; 0x132c <__vector_9+0x18e>
    130e:	84 e1       	ldi	r24, 0x14	; 20
    1310:	c8 9f       	mul	r28, r24
    1312:	f0 01       	movw	r30, r0
    1314:	11 24       	eor	r1, r1
    1316:	e2 50       	subi	r30, 0x02	; 2
    1318:	fb 4f       	sbci	r31, 0xFB	; 251
    131a:	42 89       	ldd	r20, Z+18	; 0x12
    131c:	53 89       	ldd	r21, Z+19	; 0x13
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	6c 2f       	mov	r22, r28
    1324:	8e ef       	ldi	r24, 0xFE	; 254
    1326:	94 e0       	ldi	r25, 0x04	; 4
    1328:	d4 da       	rcall	.-2648   	; 0x8d2 <_ZN3Arm9moveSpeedEhjj>
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <__vector_9+0x192>
    132c:	c5 30       	cpi	r28, 0x05	; 5
    132e:	18 f4       	brcc	.+6      	; 0x1336 <__vector_9+0x198>
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	6c 0f       	add	r22, r28
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <__vector_9+0x19a>
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	60 93 0a 05 	sts	0x050A, r22	; 0x80050a <arm+0xc>
    133c:	8e ef       	ldi	r24, 0xFE	; 254
    133e:	94 e0       	ldi	r25, 0x04	; 4
    1340:	64 30       	cpi	r22, 0x04	; 4
    1342:	10 f0       	brcs	.+4      	; 0x1348 <__vector_9+0x1aa>
    1344:	c2 da       	rcall	.-2684   	; 0x8ca <_ZN3Arm12setModeJointEh>
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <__vector_9+0x1b4>
    1348:	63 30       	cpi	r22, 0x03	; 3
    134a:	11 f4       	brne	.+4      	; 0x1350 <__vector_9+0x1b2>
    134c:	c0 da       	rcall	.-2688   	; 0x8ce <_ZN3Arm16setModeMultiTurnEh>
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <__vector_9+0x1b4>
    1350:	ba da       	rcall	.-2700   	; 0x8c6 <_ZN3Arm12setModeWheelEh>
    1352:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <lastButtonPressed>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 27       	eor	r24, r25
    135a:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <lastButtonPressed>
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <lastButtonPressed>
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	cf 91       	pop	r28
    136a:	bf 91       	pop	r27
    136c:	af 91       	pop	r26
    136e:	9f 91       	pop	r25
    1370:	8f 91       	pop	r24
    1372:	7f 91       	pop	r23
    1374:	6f 91       	pop	r22
    1376:	5f 91       	pop	r21
    1378:	4f 91       	pop	r20
    137a:	3f 91       	pop	r19
    137c:	2f 91       	pop	r18
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	0f 90       	pop	r0
    1388:	0b be       	out	0x3b, r0	; 59
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <_GLOBAL__sub_I_position_old>:
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <angle>
    139c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <angle+0x1>
    13a0:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <currPos+0x1>
    13a4:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <currPos>
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	87 e5       	ldi	r24, 0x57	; 87
    13ae:	93 e4       	ldi	r25, 0x43	; 67
    13b0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <square>
    13b4:	ce ef       	ldi	r28, 0xFE	; 254
    13b6:	d4 e0       	ldi	r29, 0x04	; 4
    13b8:	83 d7       	rcall	.+3846   	; 0x22c0 <__fixsfsi>
    13ba:	68 83       	st	Y, r22
    13bc:	79 83       	std	Y+1, r23	; 0x01
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	9b 83       	std	Y+3, r25	; 0x03
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	8b e9       	ldi	r24, 0x9B	; 155
    13c8:	93 e4       	ldi	r25, 0x43	; 67
    13ca:	0e 94 5d 13 	call	0x26ba	; 0x26ba <square>
    13ce:	78 d7       	rcall	.+3824   	; 0x22c0 <__fixsfsi>
    13d0:	6c 83       	std	Y+4, r22	; 0x04
    13d2:	7d 83       	std	Y+5, r23	; 0x05
    13d4:	8e 83       	std	Y+6, r24	; 0x06
    13d6:	9f 83       	std	Y+7, r25	; 0x07
    13d8:	84 eb       	ldi	r24, 0xB4	; 180
    13da:	98 e0       	ldi	r25, 0x08	; 8
    13dc:	a2 e0       	ldi	r26, 0x02	; 2
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	88 87       	std	Y+8, r24	; 0x08
    13e2:	99 87       	std	Y+9, r25	; 0x09
    13e4:	aa 87       	std	Y+10, r26	; 0x0a
    13e6:	bb 87       	std	Y+11, r27	; 0x0b
    13e8:	1d 86       	std	Y+13, r1	; 0x0d
    13ea:	1e 86       	std	Y+14, r1	; 0x0e
    13ec:	1f 86       	std	Y+15, r1	; 0x0f
    13ee:	24 e1       	ldi	r18, 0x14	; 20
    13f0:	44 e0       	ldi	r20, 0x04	; 4
    13f2:	67 e2       	ldi	r22, 0x27	; 39
    13f4:	80 ef       	ldi	r24, 0xF0	; 240
    13f6:	94 e0       	ldi	r25, 0x04	; 4
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <_ZN17LiquidCrystal_I2CC1Ehhh>

00001400 <_Z11getMoreDatahh>:
    1400:	2f 92       	push	r2
    1402:	3f 92       	push	r3
    1404:	4f 92       	push	r4
    1406:	5f 92       	push	r5
    1408:	6f 92       	push	r6
    140a:	7f 92       	push	r7
    140c:	8f 92       	push	r8
    140e:	9f 92       	push	r9
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	62 97       	sbiw	r28, 0x12	; 18
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	d8 2e       	mov	r13, r24
    1436:	16 2f       	mov	r17, r22
    1438:	6e ea       	ldi	r22, 0xAE	; 174
    143a:	74 e0       	ldi	r23, 0x04	; 4
    143c:	ce 01       	movw	r24, r28
    143e:	0d 96       	adiw	r24, 0x0d	; 13
    1440:	0e 94 b4 19 	call	0x3368	; 0x3368 <_ZN6StringC1EPKc>
    1444:	26 e0       	ldi	r18, 0x06	; 6
    1446:	41 2f       	mov	r20, r17
    1448:	6d 2d       	mov	r22, r13
    144a:	8e ef       	ldi	r24, 0xFE	; 254
    144c:	94 e0       	ldi	r25, 0x04	; 4
    144e:	aa da       	rcall	.-2732   	; 0x9a4 <_ZN3Arm9readServoEhhh>
    1450:	6a e0       	ldi	r22, 0x0A	; 10
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <serialReading>
    1462:	8d e3       	ldi	r24, 0x3D	; 61
    1464:	96 e0       	ldi	r25, 0x06	; 6
    1466:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    146a:	18 2f       	mov	r17, r24
    146c:	8d e3       	ldi	r24, 0x3D	; 61
    146e:	96 e0       	ldi	r25, 0x06	; 6
    1470:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    1474:	1f 3f       	cpi	r17, 0xFF	; 255
    1476:	11 f4       	brne	.+4      	; 0x147c <_Z11getMoreDatahh+0x7c>
    1478:	8f 3f       	cpi	r24, 0xFF	; 255
    147a:	e9 f0       	breq	.+58     	; 0x14b6 <_Z11getMoreDatahh+0xb6>
    147c:	e1 2c       	mov	r14, r1
    147e:	8d e3       	ldi	r24, 0x3D	; 61
    1480:	96 e0       	ldi	r25, 0x06	; 6
    1482:	0e 94 5e 14 	call	0x28bc	; 0x28bc <_ZN14HardwareSerial9availableEv>
    1486:	8c 01       	movw	r16, r24
    1488:	89 2b       	or	r24, r25
    148a:	29 f0       	breq	.+10     	; 0x1496 <_Z11getMoreDatahh+0x96>
    148c:	8d e3       	ldi	r24, 0x3D	; 61
    148e:	96 e0       	ldi	r25, 0x06	; 6
    1490:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    1494:	f4 cf       	rjmp	.-24     	; 0x147e <_Z11getMoreDatahh+0x7e>
    1496:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <serialReading>
    149a:	ee 20       	and	r14, r14
    149c:	49 f0       	breq	.+18     	; 0x14b0 <_Z11getMoreDatahh+0xb0>
    149e:	ff 20       	and	r15, r15
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <_Z11getMoreDatahh+0xa4>
    14a2:	85 c1       	rjmp	.+778    	; 0x17ae <_Z11getMoreDatahh+0x3ae>
    14a4:	0f 2d       	mov	r16, r15
    14a6:	10 e0       	ldi	r17, 0x00	; 0
    14a8:	11 95       	neg	r17
    14aa:	01 95       	neg	r16
    14ac:	11 09       	sbc	r17, r1
    14ae:	7f c1       	rjmp	.+766    	; 0x17ae <_Z11getMoreDatahh+0x3ae>
    14b0:	01 e0       	ldi	r16, 0x01	; 1
    14b2:	1f ef       	ldi	r17, 0xFF	; 255
    14b4:	7c c1       	rjmp	.+760    	; 0x17ae <_Z11getMoreDatahh+0x3ae>
    14b6:	8d e3       	ldi	r24, 0x3D	; 61
    14b8:	96 e0       	ldi	r25, 0x06	; 6
    14ba:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    14be:	2c 01       	movw	r4, r24
    14c0:	bc 01       	movw	r22, r24
    14c2:	77 27       	eor	r23, r23
    14c4:	46 e0       	ldi	r20, 0x06	; 6
    14c6:	ce 01       	movw	r24, r28
    14c8:	07 96       	adiw	r24, 0x07	; 7
    14ca:	47 dc       	rcall	.-1906   	; 0xd5a <_Z9padNumberih>
    14cc:	62 e2       	ldi	r22, 0x22	; 34
    14ce:	72 e0       	ldi	r23, 0x02	; 2
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	0e 94 b4 19 	call	0x3368	; 0x3368 <_ZN6StringC1EPKc>
    14d8:	be 01       	movw	r22, r28
    14da:	69 5f       	subi	r22, 0xF9	; 249
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
    14e6:	bc 01       	movw	r22, r24
    14e8:	ce 01       	movw	r24, r28
    14ea:	0d 96       	adiw	r24, 0x0d	; 13
    14ec:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    14f8:	ce 01       	movw	r24, r28
    14fa:	07 96       	adiw	r24, 0x07	; 7
    14fc:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    1500:	8d e3       	ldi	r24, 0x3D	; 61
    1502:	96 e0       	ldi	r25, 0x06	; 6
    1504:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    1508:	7c 01       	movw	r14, r24
    150a:	bc 01       	movw	r22, r24
    150c:	77 27       	eor	r23, r23
    150e:	46 e0       	ldi	r20, 0x06	; 6
    1510:	ce 01       	movw	r24, r28
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	22 dc       	rcall	.-1980   	; 0xd5a <_Z9padNumberih>
    1516:	be 01       	movw	r22, r28
    1518:	63 5f       	subi	r22, 0xF3	; 243
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	ce 01       	movw	r24, r28
    151e:	07 96       	adiw	r24, 0x07	; 7
    1520:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    1524:	66 e2       	ldi	r22, 0x26	; 38
    1526:	72 e0       	ldi	r23, 0x02	; 2
    1528:	ce 01       	movw	r24, r28
    152a:	07 96       	adiw	r24, 0x07	; 7
    152c:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
    1530:	be 01       	movw	r22, r28
    1532:	6f 5f       	subi	r22, 0xFF	; 255
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
    153a:	bc 01       	movw	r22, r24
    153c:	ce 01       	movw	r24, r28
    153e:	0d 96       	adiw	r24, 0x0d	; 13
    1540:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
    1544:	ce 01       	movw	r24, r28
    1546:	07 96       	adiw	r24, 0x07	; 7
    1548:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    154c:	ce 01       	movw	r24, r28
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    1554:	8d e3       	ldi	r24, 0x3D	; 61
    1556:	96 e0       	ldi	r25, 0x06	; 6
    1558:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    155c:	8c 01       	movw	r16, r24
    155e:	f8 2e       	mov	r15, r24
    1560:	bc 01       	movw	r22, r24
    1562:	77 27       	eor	r23, r23
    1564:	46 e0       	ldi	r20, 0x06	; 6
    1566:	ce 01       	movw	r24, r28
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	f7 db       	rcall	.-2066   	; 0xd5a <_Z9padNumberih>
    156c:	be 01       	movw	r22, r28
    156e:	63 5f       	subi	r22, 0xF3	; 243
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	ce 01       	movw	r24, r28
    1574:	07 96       	adiw	r24, 0x07	; 7
    1576:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    157a:	62 e3       	ldi	r22, 0x32	; 50
    157c:	72 e0       	ldi	r23, 0x02	; 2
    157e:	ce 01       	movw	r24, r28
    1580:	07 96       	adiw	r24, 0x07	; 7
    1582:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
    1586:	be 01       	movw	r22, r28
    1588:	6f 5f       	subi	r22, 0xFF	; 255
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
    1590:	bc 01       	movw	r22, r24
    1592:	ce 01       	movw	r24, r28
    1594:	0d 96       	adiw	r24, 0x0d	; 13
    1596:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
    159a:	ce 01       	movw	r24, r28
    159c:	07 96       	adiw	r24, 0x07	; 7
    159e:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    15a2:	ce 01       	movw	r24, r28
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    15aa:	8d e3       	ldi	r24, 0x3D	; 61
    15ac:	96 e0       	ldi	r25, 0x06	; 6
    15ae:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    15b2:	4c 01       	movw	r8, r24
    15b4:	8d e3       	ldi	r24, 0x3D	; 61
    15b6:	96 e0       	ldi	r25, 0x06	; 6
    15b8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    15bc:	28 2e       	mov	r2, r24
    15be:	b4 01       	movw	r22, r8
    15c0:	77 27       	eor	r23, r23
    15c2:	46 e0       	ldi	r20, 0x06	; 6
    15c4:	ce 01       	movw	r24, r28
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	c8 db       	rcall	.-2160   	; 0xd5a <_Z9padNumberih>
    15ca:	be 01       	movw	r22, r28
    15cc:	63 5f       	subi	r22, 0xF3	; 243
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	ce 01       	movw	r24, r28
    15d2:	07 96       	adiw	r24, 0x07	; 7
    15d4:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    15d8:	64 e3       	ldi	r22, 0x34	; 52
    15da:	73 e0       	ldi	r23, 0x03	; 3
    15dc:	ce 01       	movw	r24, r28
    15de:	07 96       	adiw	r24, 0x07	; 7
    15e0:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
    15e4:	be 01       	movw	r22, r28
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
    15ee:	bc 01       	movw	r22, r24
    15f0:	ce 01       	movw	r24, r28
    15f2:	0d 96       	adiw	r24, 0x0d	; 13
    15f4:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
    15f8:	ce 01       	movw	r24, r28
    15fa:	07 96       	adiw	r24, 0x07	; 7
    15fc:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    1600:	ce 01       	movw	r24, r28
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    1608:	8d e3       	ldi	r24, 0x3D	; 61
    160a:	96 e0       	ldi	r25, 0x06	; 6
    160c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    1610:	5c 01       	movw	r10, r24
    1612:	8d e3       	ldi	r24, 0x3D	; 61
    1614:	96 e0       	ldi	r25, 0x06	; 6
    1616:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    161a:	38 2e       	mov	r3, r24
    161c:	b5 01       	movw	r22, r10
    161e:	77 27       	eor	r23, r23
    1620:	46 e0       	ldi	r20, 0x06	; 6
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	99 db       	rcall	.-2254   	; 0xd5a <_Z9padNumberih>
    1628:	be 01       	movw	r22, r28
    162a:	63 5f       	subi	r22, 0xF3	; 243
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	ce 01       	movw	r24, r28
    1630:	07 96       	adiw	r24, 0x07	; 7
    1632:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    1636:	6c e3       	ldi	r22, 0x3C	; 60
    1638:	73 e0       	ldi	r23, 0x03	; 3
    163a:	ce 01       	movw	r24, r28
    163c:	07 96       	adiw	r24, 0x07	; 7
    163e:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
    1642:	be 01       	movw	r22, r28
    1644:	6f 5f       	subi	r22, 0xFF	; 255
    1646:	7f 4f       	sbci	r23, 0xFF	; 255
    1648:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
    164c:	bc 01       	movw	r22, r24
    164e:	ce 01       	movw	r24, r28
    1650:	0d 96       	adiw	r24, 0x0d	; 13
    1652:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
    1656:	ce 01       	movw	r24, r28
    1658:	07 96       	adiw	r24, 0x07	; 7
    165a:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    1666:	8d e3       	ldi	r24, 0x3D	; 61
    1668:	96 e0       	ldi	r25, 0x06	; 6
    166a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    166e:	c8 2e       	mov	r12, r24
    1670:	8d e3       	ldi	r24, 0x3D	; 61
    1672:	96 e0       	ldi	r25, 0x06	; 6
    1674:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    1678:	58 2e       	mov	r5, r24
    167a:	46 e0       	ldi	r20, 0x06	; 6
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	ce 01       	movw	r24, r28
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	6a db       	rcall	.-2348   	; 0xd5a <_Z9padNumberih>
    1686:	be 01       	movw	r22, r28
    1688:	63 5f       	subi	r22, 0xF3	; 243
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	ce 01       	movw	r24, r28
    168e:	07 96       	adiw	r24, 0x07	; 7
    1690:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    1694:	64 e4       	ldi	r22, 0x44	; 68
    1696:	73 e0       	ldi	r23, 0x03	; 3
    1698:	ce 01       	movw	r24, r28
    169a:	07 96       	adiw	r24, 0x07	; 7
    169c:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
    16a0:	be 01       	movw	r22, r28
    16a2:	6f 5f       	subi	r22, 0xFF	; 255
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
    16aa:	bc 01       	movw	r22, r24
    16ac:	ce 01       	movw	r24, r28
    16ae:	0d 96       	adiw	r24, 0x0d	; 13
    16b0:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
    16b4:	ce 01       	movw	r24, r28
    16b6:	07 96       	adiw	r24, 0x07	; 7
    16b8:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    16c4:	8d e3       	ldi	r24, 0x3D	; 61
    16c6:	96 e0       	ldi	r25, 0x06	; 6
    16c8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN14HardwareSerial4readEv>
    16cc:	3c 01       	movw	r6, r24
    16ce:	bc 01       	movw	r22, r24
    16d0:	77 27       	eor	r23, r23
    16d2:	46 e0       	ldi	r20, 0x06	; 6
    16d4:	ce 01       	movw	r24, r28
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	40 db       	rcall	.-2432   	; 0xd5a <_Z9padNumberih>
    16da:	be 01       	movw	r22, r28
    16dc:	63 5f       	subi	r22, 0xF3	; 243
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	ce 01       	movw	r24, r28
    16e2:	07 96       	adiw	r24, 0x07	; 7
    16e4:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    16e8:	63 e4       	ldi	r22, 0x43	; 67
    16ea:	72 e0       	ldi	r23, 0x02	; 2
    16ec:	ce 01       	movw	r24, r28
    16ee:	07 96       	adiw	r24, 0x07	; 7
    16f0:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
    16f4:	be 01       	movw	r22, r28
    16f6:	6f 5f       	subi	r22, 0xFF	; 255
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
    16fe:	bc 01       	movw	r22, r24
    1700:	ce 01       	movw	r24, r28
    1702:	0d 96       	adiw	r24, 0x0d	; 13
    1704:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
    1708:	ce 01       	movw	r24, r28
    170a:	07 96       	adiw	r24, 0x07	; 7
    170c:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    1710:	ce 01       	movw	r24, r28
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    1718:	14 2d       	mov	r17, r4
    171a:	1e 0d       	add	r17, r14
    171c:	10 0f       	add	r17, r16
    171e:	18 0d       	add	r17, r8
    1720:	12 0d       	add	r17, r2
    1722:	1a 0d       	add	r17, r10
    1724:	13 0d       	add	r17, r3
    1726:	1c 0d       	add	r17, r12
    1728:	15 0d       	add	r17, r5
    172a:	10 95       	com	r17
    172c:	61 2f       	mov	r22, r17
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	46 e0       	ldi	r20, 0x06	; 6
    1732:	ce 01       	movw	r24, r28
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	11 db       	rcall	.-2526   	; 0xd5a <_Z9padNumberih>
    1738:	be 01       	movw	r22, r28
    173a:	63 5f       	subi	r22, 0xF3	; 243
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	ce 01       	movw	r24, r28
    1740:	07 96       	adiw	r24, 0x07	; 7
    1742:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    1746:	62 e5       	ldi	r22, 0x52	; 82
    1748:	72 e0       	ldi	r23, 0x02	; 2
    174a:	ce 01       	movw	r24, r28
    174c:	07 96       	adiw	r24, 0x07	; 7
    174e:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
    1752:	be 01       	movw	r22, r28
    1754:	6f 5f       	subi	r22, 0xFF	; 255
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZplRK15StringSumHelperRK6String>
    175c:	bc 01       	movw	r22, r24
    175e:	ce 01       	movw	r24, r28
    1760:	0d 96       	adiw	r24, 0x0d	; 13
    1762:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringaSERKS_>
    1766:	ce 01       	movw	r24, r28
    1768:	07 96       	adiw	r24, 0x07	; 7
    176a:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    176e:	ce 01       	movw	r24, r28
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    1776:	16 11       	cpse	r17, r6
    1778:	81 ce       	rjmp	.-766    	; 0x147c <_Z11getMoreDatahh+0x7c>
    177a:	22 2d       	mov	r18, r2
    177c:	48 2d       	mov	r20, r8
    177e:	6d 2d       	mov	r22, r13
    1780:	8e ef       	ldi	r24, 0xFE	; 254
    1782:	94 e0       	ldi	r25, 0x04	; 4
    1784:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN3Arm19updateServoPositionEhhh>
    1788:	63 2d       	mov	r22, r3
    178a:	8a 2d       	mov	r24, r10
    178c:	42 db       	rcall	.-2428   	; 0xe12 <_Z12combineByteshh>
    178e:	ac 01       	movw	r20, r24
    1790:	6d 2d       	mov	r22, r13
    1792:	8e ef       	ldi	r24, 0xFE	; 254
    1794:	94 e0       	ldi	r25, 0x04	; 4
    1796:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN3Arm16updateServoSpeedEhj>
    179a:	25 2d       	mov	r18, r5
    179c:	4c 2d       	mov	r20, r12
    179e:	6d 2d       	mov	r22, r13
    17a0:	8e ef       	ldi	r24, 0xFE	; 254
    17a2:	94 e0       	ldi	r25, 0x04	; 4
    17a4:	0e 94 22 02 	call	0x444	; 0x444 <_ZN3Arm15updateServoLoadEhhh>
    17a8:	ee 24       	eor	r14, r14
    17aa:	e3 94       	inc	r14
    17ac:	68 ce       	rjmp	.-816    	; 0x147e <_Z11getMoreDatahh+0x7e>
    17ae:	ce 01       	movw	r24, r28
    17b0:	0d 96       	adiw	r24, 0x0d	; 13
    17b2:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    17b6:	c8 01       	movw	r24, r16
    17b8:	62 96       	adiw	r28, 0x12	; 18
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	9f 90       	pop	r9
    17da:	8f 90       	pop	r8
    17dc:	7f 90       	pop	r7
    17de:	6f 90       	pop	r6
    17e0:	5f 90       	pop	r5
    17e2:	4f 90       	pop	r4
    17e4:	3f 90       	pop	r3
    17e6:	2f 90       	pop	r2
    17e8:	08 95       	ret

000017ea <loop>:
    17ea:	4f 92       	push	r4
    17ec:	5f 92       	push	r5
    17ee:	6f 92       	push	r6
    17f0:	7f 92       	push	r7
    17f2:	bf 92       	push	r11
    17f4:	cf 92       	push	r12
    17f6:	df 92       	push	r13
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	2c 97       	sbiw	r28, 0x0c	; 12
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	ed b6       	in	r14, 0x3d	; 61
    1816:	fe b6       	in	r15, 0x3e	; 62
    1818:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <autoBalanceOn>
    181c:	88 23       	and	r24, r24
    181e:	61 f1       	breq	.+88     	; 0x1878 <loop+0x8e>
    1820:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <arm+0x6f>
    1824:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <arm+0x70>
    1828:	c2 97       	sbiw	r24, 0x32	; 50
    182a:	1c f0       	brlt	.+6      	; 0x1832 <loop+0x48>
    182c:	24 ef       	ldi	r18, 0xF4	; 244
    182e:	31 e0       	ldi	r19, 0x01	; 1
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <loop+0x4c>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <arm+0x71>
    183a:	81 11       	cpse	r24, r1
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <loop+0x56>
    183e:	3c 5f       	subi	r19, 0xFC	; 252
    1840:	44 e6       	ldi	r20, 0x64	; 100
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	8e ef       	ldi	r24, 0xFE	; 254
    1848:	94 e0       	ldi	r25, 0x04	; 4
    184a:	43 d8       	rcall	.-3962   	; 0x8d2 <_ZN3Arm9moveSpeedEhjj>
    184c:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <arm+0x83>
    1850:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <arm+0x84>
    1854:	c2 97       	sbiw	r24, 0x32	; 50
    1856:	1c f0       	brlt	.+6      	; 0x185e <loop+0x74>
    1858:	24 ef       	ldi	r18, 0xF4	; 244
    185a:	31 e0       	ldi	r19, 0x01	; 1
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <loop+0x78>
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <arm+0x85>
    1866:	81 11       	cpse	r24, r1
    1868:	01 c0       	rjmp	.+2      	; 0x186c <loop+0x82>
    186a:	3c 5f       	subi	r19, 0xFC	; 252
    186c:	44 e6       	ldi	r20, 0x64	; 100
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	8e ef       	ldi	r24, 0xFE	; 254
    1874:	94 e0       	ldi	r25, 0x04	; 4
    1876:	2d d8       	rcall	.-4006   	; 0x8d2 <_ZN3Arm9moveSpeedEhjj>
    1878:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <arm+0xd>
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	89 27       	eor	r24, r25
    1880:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <autoBalanceOn>
    1884:	89 13       	cpse	r24, r25
    1886:	55 c0       	rjmp	.+170    	; 0x1932 <loop+0x148>
    1888:	81 11       	cpse	r24, r1
    188a:	53 c0       	rjmp	.+166    	; 0x1932 <loop+0x148>
    188c:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <millis>
    1890:	00 91 db 04 	lds	r16, 0x04DB	; 0x8004db <t_global_start>
    1894:	10 91 dc 04 	lds	r17, 0x04DC	; 0x8004dc <t_global_start+0x1>
    1898:	20 91 dd 04 	lds	r18, 0x04DD	; 0x8004dd <t_global_start+0x2>
    189c:	30 91 de 04 	lds	r19, 0x04DE	; 0x8004de <t_global_start+0x3>
    18a0:	ab 01       	movw	r20, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	40 1b       	sub	r20, r16
    18a6:	51 0b       	sbc	r21, r17
    18a8:	62 0b       	sbc	r22, r18
    18aa:	73 0b       	sbc	r23, r19
    18ac:	2a e0       	ldi	r18, 0x0A	; 10
    18ae:	ce 01       	movw	r24, r28
    18b0:	07 96       	adiw	r24, 0x07	; 7
    18b2:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <_ZN6StringC1Emh>
    18b6:	be 01       	movw	r22, r28
    18b8:	69 5f       	subi	r22, 0xF9	; 249
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	ce 01       	movw	r24, r28
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    18c4:	6e ee       	ldi	r22, 0xEE	; 238
    18c6:	73 e0       	ldi	r23, 0x03	; 3
    18c8:	ce 01       	movw	r24, r28
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZplRK15StringSumHelperPKc>
    18d0:	bc 01       	movw	r22, r24
    18d2:	80 ea       	ldi	r24, 0xA0	; 160
    18d4:	95 e0       	ldi	r25, 0x05	; 5
    18d6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN5Print7printlnERK6String>
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    18e2:	ce 01       	movw	r24, r28
    18e4:	07 96       	adiw	r24, 0x07	; 7
    18e6:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    18ea:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <load_4_dir>
    18ee:	81 11       	cpse	r24, r1
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <loop+0x10e>
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	34 e0       	ldi	r19, 0x04	; 4
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <loop+0x112>
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	44 e6       	ldi	r20, 0x64	; 100
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	8e ef       	ldi	r24, 0xFE	; 254
    1904:	94 e0       	ldi	r25, 0x04	; 4
    1906:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_ZN3Arm9moveSpeedEhjj>
    190a:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <load_5_dir>
    190e:	81 11       	cpse	r24, r1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <loop+0x12e>
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	34 e0       	ldi	r19, 0x04	; 4
    1916:	02 c0       	rjmp	.+4      	; 0x191c <loop+0x132>
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	44 e6       	ldi	r20, 0x64	; 100
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	62 e0       	ldi	r22, 0x02	; 2
    1922:	8e ef       	ldi	r24, 0xFE	; 254
    1924:	94 e0       	ldi	r25, 0x04	; 4
    1926:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_ZN3Arm9moveSpeedEhjj>
    192a:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <autoBalanceOn>
    192e:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <arm+0xd>
    1932:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <arm+0xc>
    1936:	84 30       	cpi	r24, 0x04	; 4
    1938:	10 f4       	brcc	.+4      	; 0x193e <loop+0x154>
    193a:	64 e2       	ldi	r22, 0x24	; 36
    193c:	61 dd       	rcall	.-1342   	; 0x1400 <_Z11getMoreDatahh>
    193e:	64 e2       	ldi	r22, 0x24	; 36
    1940:	84 e0       	ldi	r24, 0x04	; 4
    1942:	5e dd       	rcall	.-1348   	; 0x1400 <_Z11getMoreDatahh>
    1944:	64 e2       	ldi	r22, 0x24	; 36
    1946:	85 e0       	ldi	r24, 0x05	; 5
    1948:	5b dd       	rcall	.-1354   	; 0x1400 <_Z11getMoreDatahh>
    194a:	46 e2       	ldi	r20, 0x26	; 38
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	8e ef       	ldi	r24, 0xFE	; 254
    1950:	94 e0       	ldi	r25, 0x04	; 4
    1952:	8b d8       	rcall	.-3818   	; 0xa6a <_ZN3Arm7getDataEhh>
    1954:	97 fd       	sbrc	r25, 7
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <loop+0x17a>
    1958:	ac 01       	movw	r20, r24
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	8e ef       	ldi	r24, 0xFE	; 254
    195e:	94 e0       	ldi	r25, 0x04	; 4
    1960:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN3Arm16updateServoSpeedEhj>
    1964:	46 e2       	ldi	r20, 0x26	; 38
    1966:	62 e0       	ldi	r22, 0x02	; 2
    1968:	8e ef       	ldi	r24, 0xFE	; 254
    196a:	94 e0       	ldi	r25, 0x04	; 4
    196c:	7e d8       	rcall	.-3844   	; 0xa6a <_ZN3Arm7getDataEhh>
    196e:	97 fd       	sbrc	r25, 7
    1970:	06 c0       	rjmp	.+12     	; 0x197e <loop+0x194>
    1972:	ac 01       	movw	r20, r24
    1974:	62 e0       	ldi	r22, 0x02	; 2
    1976:	8e ef       	ldi	r24, 0xFE	; 254
    1978:	94 e0       	ldi	r25, 0x04	; 4
    197a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN3Arm16updateServoSpeedEhj>
    197e:	44 e4       	ldi	r20, 0x44	; 68
    1980:	64 e0       	ldi	r22, 0x04	; 4
    1982:	8e ef       	ldi	r24, 0xFE	; 254
    1984:	94 e0       	ldi	r25, 0x04	; 4
    1986:	71 d8       	rcall	.-3870   	; 0xa6a <_ZN3Arm7getDataEhh>
    1988:	97 fd       	sbrc	r25, 7
    198a:	09 c0       	rjmp	.+18     	; 0x199e <loop+0x1b4>
    198c:	98 50       	subi	r25, 0x08	; 8
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <arm+0x73>
    199a:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <arm+0x72>
    199e:	44 e4       	ldi	r20, 0x44	; 68
    19a0:	65 e0       	ldi	r22, 0x05	; 5
    19a2:	8e ef       	ldi	r24, 0xFE	; 254
    19a4:	94 e0       	ldi	r25, 0x04	; 4
    19a6:	61 d8       	rcall	.-3902   	; 0xa6a <_ZN3Arm7getDataEhh>
    19a8:	97 fd       	sbrc	r25, 7
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <loop+0x1d4>
    19ac:	98 50       	subi	r25, 0x08	; 8
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <arm+0x87>
    19ba:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <arm+0x86>
    19be:	40 91 0a 05 	lds	r20, 0x050A	; 0x80050a <arm+0xc>
    19c2:	50 e0       	ldi	r21, 0x00	; 0
    19c4:	21 e0       	ldi	r18, 0x01	; 1
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	83 e0       	ldi	r24, 0x03	; 3
    19ca:	a9 da       	rcall	.-2734   	; 0xf1e <_Z8printLCDhhih>
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	68 e0       	ldi	r22, 0x08	; 8
    19d0:	80 ef       	ldi	r24, 0xF0	; 240
    19d2:	94 e0       	ldi	r25, 0x04	; 4
    19d4:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    19d8:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <arm+0x71>
    19dc:	81 11       	cpse	r24, r1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <loop+0x1fc>
    19e0:	68 ee       	ldi	r22, 0xE8	; 232
    19e2:	73 e0       	ldi	r23, 0x03	; 3
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <loop+0x200>
    19e6:	66 ee       	ldi	r22, 0xE6	; 230
    19e8:	73 e0       	ldi	r23, 0x03	; 3
    19ea:	80 ef       	ldi	r24, 0xF0	; 240
    19ec:	94 e0       	ldi	r25, 0x04	; 4
    19ee:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <_ZN5Print5printEPKc>
    19f2:	40 91 6d 05 	lds	r20, 0x056D	; 0x80056d <arm+0x6f>
    19f6:	50 91 6e 05 	lds	r21, 0x056E	; 0x80056e <arm+0x70>
    19fa:	23 e0       	ldi	r18, 0x03	; 3
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	89 e0       	ldi	r24, 0x09	; 9
    1a00:	8e da       	rcall	.-2788   	; 0xf1e <_Z8printLCDhhih>
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	6d e0       	ldi	r22, 0x0D	; 13
    1a06:	80 ef       	ldi	r24, 0xF0	; 240
    1a08:	94 e0       	ldi	r25, 0x04	; 4
    1a0a:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1a0e:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <arm+0x85>
    1a12:	81 11       	cpse	r24, r1
    1a14:	03 c0       	rjmp	.+6      	; 0x1a1c <loop+0x232>
    1a16:	68 ee       	ldi	r22, 0xE8	; 232
    1a18:	73 e0       	ldi	r23, 0x03	; 3
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <loop+0x236>
    1a1c:	66 ee       	ldi	r22, 0xE6	; 230
    1a1e:	73 e0       	ldi	r23, 0x03	; 3
    1a20:	80 ef       	ldi	r24, 0xF0	; 240
    1a22:	94 e0       	ldi	r25, 0x04	; 4
    1a24:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <_ZN5Print5printEPKc>
    1a28:	40 91 81 05 	lds	r20, 0x0581	; 0x800581 <arm+0x83>
    1a2c:	50 91 82 05 	lds	r21, 0x0582	; 0x800582 <arm+0x84>
    1a30:	23 e0       	ldi	r18, 0x03	; 3
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	8e e0       	ldi	r24, 0x0E	; 14
    1a36:	73 da       	rcall	.-2842   	; 0xf1e <_Z8printLCDhhih>
    1a38:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <cycle_counter>
    1a3c:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <cycle_counter+0x1>
    1a40:	82 30       	cpi	r24, 0x02	; 2
    1a42:	91 05       	cpc	r25, r1
    1a44:	e4 f0       	brlt	.+56     	; 0x1a7e <loop+0x294>
    1a46:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <__data_end>
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 27       	eor	r24, r25
    1a4e:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <__data_end>
    1a52:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <cycle_counter+0x1>
    1a56:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <cycle_counter>
    1a5a:	88 23       	and	r24, r24
    1a5c:	39 f0       	breq	.+14     	; 0x1a6c <loop+0x282>
    1a5e:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <autoBalanceOn>
    1a62:	81 11       	cpse	r24, r1
    1a64:	06 c0       	rjmp	.+12     	; 0x1a72 <loop+0x288>
    1a66:	4a ee       	ldi	r20, 0xEA	; 234
    1a68:	53 e0       	ldi	r21, 0x03	; 3
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <loop+0x28c>
    1a6c:	46 e8       	ldi	r20, 0x86	; 134
    1a6e:	52 e0       	ldi	r21, 0x02	; 2
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <loop+0x28c>
    1a72:	4c ee       	ldi	r20, 0xEC	; 236
    1a74:	53 e0       	ldi	r21, 0x03	; 3
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	83 e1       	ldi	r24, 0x13	; 19
    1a7a:	e2 da       	rcall	.-2620   	; 0x1040 <_Z8printLCDhhPKc>
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <loop+0x29e>
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <cycle_counter+0x1>
    1a84:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <cycle_counter>
    1a88:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <arm+0xc>
    1a8c:	e3 30       	cpi	r30, 0x03	; 3
    1a8e:	c9 f4       	brne	.+50     	; 0x1ac2 <loop+0x2d8>
    1a90:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <arm+0x4e>
    1a94:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <arm+0x4f>
    1a98:	07 2e       	mov	r0, r23
    1a9a:	00 0c       	add	r0, r0
    1a9c:	88 0b       	sbc	r24, r24
    1a9e:	99 0b       	sbc	r25, r25
    1aa0:	42 d4       	rcall	.+2180   	; 0x2326 <__floatsisf>
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	44 eb       	ldi	r20, 0xB4	; 180
    1aa8:	5d e3       	ldi	r21, 0x3D	; 61
    1aaa:	52 d5       	rcall	.+2724   	; 0x2550 <__mulsf3>
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e4       	ldi	r20, 0x40	; 64
    1ab2:	50 e4       	ldi	r21, 0x40	; 64
    1ab4:	9d d3       	rcall	.+1850   	; 0x21f0 <__divsf3>
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 ef       	ldi	r20, 0xF0	; 240
    1abc:	52 e4       	ldi	r21, 0x42	; 66
    1abe:	2d d3       	rcall	.+1626   	; 0x211a <__addsf3>
    1ac0:	12 c0       	rjmp	.+36     	; 0x1ae6 <loop+0x2fc>
    1ac2:	44 e1       	ldi	r20, 0x14	; 20
    1ac4:	e4 9f       	mul	r30, r20
    1ac6:	f0 01       	movw	r30, r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	e2 50       	subi	r30, 0x02	; 2
    1acc:	fb 4f       	sbci	r31, 0xFB	; 251
    1ace:	62 89       	ldd	r22, Z+18	; 0x12
    1ad0:	73 89       	ldd	r23, Z+19	; 0x13
    1ad2:	07 2e       	mov	r0, r23
    1ad4:	00 0c       	add	r0, r0
    1ad6:	88 0b       	sbc	r24, r24
    1ad8:	99 0b       	sbc	r25, r25
    1ada:	25 d4       	rcall	.+2122   	; 0x2326 <__floatsisf>
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	44 eb       	ldi	r20, 0xB4	; 180
    1ae2:	5d e3       	ldi	r21, 0x3D	; 61
    1ae4:	35 d5       	rcall	.+2666   	; 0x2550 <__mulsf3>
    1ae6:	ec d3       	rcall	.+2008   	; 0x22c0 <__fixsfsi>
    1ae8:	ab 01       	movw	r20, r22
    1aea:	24 e0       	ldi	r18, 0x04	; 4
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	16 da       	rcall	.-3028   	; 0xf1e <_Z8printLCDhhih>
    1af2:	6f ed       	ldi	r22, 0xDF	; 223
    1af4:	80 ef       	ldi	r24, 0xF0	; 240
    1af6:	94 e0       	ldi	r25, 0x04	; 4
    1af8:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN5Print5printEc>
    1afc:	60 91 60 05 	lds	r22, 0x0560	; 0x800560 <arm+0x62>
    1b00:	70 91 61 05 	lds	r23, 0x0561	; 0x800561 <arm+0x63>
    1b04:	07 2e       	mov	r0, r23
    1b06:	00 0c       	add	r0, r0
    1b08:	88 0b       	sbc	r24, r24
    1b0a:	99 0b       	sbc	r25, r25
    1b0c:	0c d4       	rcall	.+2072   	; 0x2326 <__floatsisf>
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	44 eb       	ldi	r20, 0xB4	; 180
    1b14:	5d e3       	ldi	r21, 0x3D	; 61
    1b16:	1c d5       	rcall	.+2616   	; 0x2550 <__mulsf3>
    1b18:	d3 d3       	rcall	.+1958   	; 0x22c0 <__fixsfsi>
    1b1a:	24 e0       	ldi	r18, 0x04	; 4
    1b1c:	ab 01       	movw	r20, r22
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	88 e0       	ldi	r24, 0x08	; 8
    1b22:	fd d9       	rcall	.-3078   	; 0xf1e <_Z8printLCDhhih>
    1b24:	6f ed       	ldi	r22, 0xDF	; 223
    1b26:	80 ef       	ldi	r24, 0xF0	; 240
    1b28:	94 e0       	ldi	r25, 0x04	; 4
    1b2a:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN5Print5printEc>
    1b2e:	60 91 74 05 	lds	r22, 0x0574	; 0x800574 <arm+0x76>
    1b32:	70 91 75 05 	lds	r23, 0x0575	; 0x800575 <arm+0x77>
    1b36:	07 2e       	mov	r0, r23
    1b38:	00 0c       	add	r0, r0
    1b3a:	88 0b       	sbc	r24, r24
    1b3c:	99 0b       	sbc	r25, r25
    1b3e:	f3 d3       	rcall	.+2022   	; 0x2326 <__floatsisf>
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	44 eb       	ldi	r20, 0xB4	; 180
    1b46:	5d e3       	ldi	r21, 0x3D	; 61
    1b48:	03 d5       	rcall	.+2566   	; 0x2550 <__mulsf3>
    1b4a:	ba d3       	rcall	.+1908   	; 0x22c0 <__fixsfsi>
    1b4c:	24 e0       	ldi	r18, 0x04	; 4
    1b4e:	ab 01       	movw	r20, r22
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	8d e0       	ldi	r24, 0x0D	; 13
    1b54:	e4 d9       	rcall	.-3128   	; 0xf1e <_Z8printLCDhhih>
    1b56:	6f ed       	ldi	r22, 0xDF	; 223
    1b58:	80 ef       	ldi	r24, 0xF0	; 240
    1b5a:	94 e0       	ldi	r25, 0x04	; 4
    1b5c:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN5Print5printEc>
    1b60:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <arm+0xc>
    1b64:	14 e1       	ldi	r17, 0x14	; 20
    1b66:	1e 9f       	mul	r17, r30
    1b68:	f0 01       	movw	r30, r0
    1b6a:	11 24       	eor	r1, r1
    1b6c:	e2 50       	subi	r30, 0x02	; 2
    1b6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1b70:	42 8d       	ldd	r20, Z+26	; 0x1a
    1b72:	53 8d       	ldd	r21, Z+27	; 0x1b
    1b74:	24 e0       	ldi	r18, 0x04	; 4
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	d1 d9       	rcall	.-3166   	; 0xf1e <_Z8printLCDhhih>
    1b7c:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <arm+0xc>
    1b80:	18 9f       	mul	r17, r24
    1b82:	f0 01       	movw	r30, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	e2 50       	subi	r30, 0x02	; 2
    1b88:	fb 4f       	sbci	r31, 0xFB	; 251
    1b8a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b8c:	33 8d       	ldd	r19, Z+27	; 0x1b
    1b8e:	23 2b       	or	r18, r19
    1b90:	99 f0       	breq	.+38     	; 0x1bb8 <loop+0x3ce>
    1b92:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b94:	99 23       	and	r25, r25
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <loop+0x3b6>
    1b98:	83 30       	cpi	r24, 0x03	; 3
    1b9a:	31 f0       	breq	.+12     	; 0x1ba8 <loop+0x3be>
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	07 c0       	rjmp	.+14     	; 0x1bae <loop+0x3c4>
    1ba0:	83 30       	cpi	r24, 0x03	; 3
    1ba2:	21 f0       	breq	.+8      	; 0x1bac <loop+0x3c2>
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <loop+0x3c4>
    1ba8:	6e e7       	ldi	r22, 0x7E	; 126
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <loop+0x3c4>
    1bac:	6f e7       	ldi	r22, 0x7F	; 127
    1bae:	80 ef       	ldi	r24, 0xF0	; 240
    1bb0:	94 e0       	ldi	r25, 0x04	; 4
    1bb2:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN5Print5printEc>
    1bb6:	06 c0       	rjmp	.+12     	; 0x1bc4 <loop+0x3da>
    1bb8:	66 e8       	ldi	r22, 0x86	; 134
    1bba:	72 e0       	ldi	r23, 0x02	; 2
    1bbc:	80 ef       	ldi	r24, 0xF0	; 240
    1bbe:	94 e0       	ldi	r25, 0x04	; 4
    1bc0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <_ZN5Print5printEPKc>
    1bc4:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <arm+0x2e>
    1bc8:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <arm+0x2f>
    1bcc:	89 2b       	or	r24, r25
    1bce:	31 f0       	breq	.+12     	; 0x1bdc <loop+0x3f2>
    1bd0:	60 91 30 05 	lds	r22, 0x0530	; 0x800530 <arm+0x32>
    1bd4:	80 ef       	ldi	r24, 0xF0	; 240
    1bd6:	94 e0       	ldi	r25, 0x04	; 4
    1bd8:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN5Print5printEc>
    1bdc:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <arm+0x42>
    1be0:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <arm+0x43>
    1be4:	89 2b       	or	r24, r25
    1be6:	31 f0       	breq	.+12     	; 0x1bf4 <loop+0x40a>
    1be8:	60 91 44 05 	lds	r22, 0x0544	; 0x800544 <arm+0x46>
    1bec:	80 ef       	ldi	r24, 0xF0	; 240
    1bee:	94 e0       	ldi	r25, 0x04	; 4
    1bf0:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN5Print5printEc>
    1bf4:	40 91 e3 04 	lds	r20, 0x04E3	; 0x8004e3 <AnValue+0x4>
    1bf8:	50 91 e4 04 	lds	r21, 0x04E4	; 0x8004e4 <AnValue+0x5>
    1bfc:	24 e0       	ldi	r18, 0x04	; 4
    1bfe:	62 e0       	ldi	r22, 0x02	; 2
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	8d d9       	rcall	.-3302   	; 0xf1e <_Z8printLCDhhih>
    1c04:	40 91 e5 04 	lds	r20, 0x04E5	; 0x8004e5 <AnValue+0x6>
    1c08:	50 91 e6 04 	lds	r21, 0x04E6	; 0x8004e6 <AnValue+0x7>
    1c0c:	24 e0       	ldi	r18, 0x04	; 4
    1c0e:	62 e0       	ldi	r22, 0x02	; 2
    1c10:	87 e0       	ldi	r24, 0x07	; 7
    1c12:	85 d9       	rcall	.-3318   	; 0xf1e <_Z8printLCDhhih>
    1c14:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <AnValue+0x4>
    1c18:	10 91 e4 04 	lds	r17, 0x04E4	; 0x8004e4 <AnValue+0x5>
    1c1c:	91 2f       	mov	r25, r17
    1c1e:	64 e6       	ldi	r22, 0x64	; 100
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__divmodhi4>
    1c26:	07 2e       	mov	r0, r23
    1c28:	00 0c       	add	r0, r0
    1c2a:	88 0b       	sbc	r24, r24
    1c2c:	99 0b       	sbc	r25, r25
    1c2e:	7b d3       	rcall	.+1782   	; 0x2326 <__floatsisf>
    1c30:	10 95       	com	r17
    1c32:	11 1f       	adc	r17, r17
    1c34:	11 27       	eor	r17, r17
    1c36:	11 1f       	adc	r17, r17
    1c38:	41 2f       	mov	r20, r17
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	8b 01       	movw	r16, r22
    1c3e:	9c 01       	movw	r18, r24
    1c40:	64 e0       	ldi	r22, 0x04	; 4
    1c42:	8e ef       	ldi	r24, 0xFE	; 254
    1c44:	94 e0       	ldi	r25, 0x04	; 4
    1c46:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN3Arm13moveSpeedEasyEhif>
    1c4a:	8e ef       	ldi	r24, 0xFE	; 254
    1c4c:	94 e0       	ldi	r25, 0x04	; 4
    1c4e:	0e 94 09 03 	call	0x612	; 0x612 <_ZN3Arm3fkXEv>
    1c52:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <arm+0x89>
    1c56:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <arm+0x88>
    1c5a:	8e ef       	ldi	r24, 0xFE	; 254
    1c5c:	94 e0       	ldi	r25, 0x04	; 4
    1c5e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN3Arm3fkYEv>
    1c62:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <arm+0x8b>
    1c66:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <arm+0x8a>
    1c6a:	40 91 86 05 	lds	r20, 0x0586	; 0x800586 <arm+0x88>
    1c6e:	50 91 87 05 	lds	r21, 0x0587	; 0x800587 <arm+0x89>
    1c72:	24 e0       	ldi	r18, 0x04	; 4
    1c74:	63 e0       	ldi	r22, 0x03	; 3
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	52 d9       	rcall	.-3420   	; 0xf1e <_Z8printLCDhhih>
    1c7a:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <arm+0x8a>
    1c7e:	50 91 89 05 	lds	r21, 0x0589	; 0x800589 <arm+0x8b>
    1c82:	24 e0       	ldi	r18, 0x04	; 4
    1c84:	63 e0       	ldi	r22, 0x03	; 3
    1c86:	87 e0       	ldi	r24, 0x07	; 7
    1c88:	4a d9       	rcall	.-3436   	; 0xf1e <_Z8printLCDhhih>
    1c8a:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <millis>
    1c8e:	b0 90 06 02 	lds	r11, 0x0206	; 0x800206 <number>
    1c92:	cb 2c       	mov	r12, r11
    1c94:	d1 2c       	mov	r13, r1
    1c96:	96 01       	movw	r18, r12
    1c98:	22 0f       	add	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	ed b7       	in	r30, 0x3d	; 61
    1c9e:	fe b7       	in	r31, 0x3e	; 62
    1ca0:	e2 1b       	sub	r30, r18
    1ca2:	f3 0b       	sbc	r31, r19
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	fe bf       	out	0x3e, r31	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	ed bf       	out	0x3d, r30	; 61
    1cae:	0d b7       	in	r16, 0x3d	; 61
    1cb0:	1e b7       	in	r17, 0x3e	; 62
    1cb2:	0f 5f       	subi	r16, 0xFF	; 255
    1cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb6:	40 90 e8 04 	lds	r4, 0x04E8	; 0x8004e8 <t_start>
    1cba:	50 90 e9 04 	lds	r5, 0x04E9	; 0x8004e9 <t_start+0x1>
    1cbe:	60 90 ea 04 	lds	r6, 0x04EA	; 0x8004ea <t_start+0x2>
    1cc2:	70 90 eb 04 	lds	r7, 0x04EB	; 0x8004eb <t_start+0x3>
    1cc6:	64 19       	sub	r22, r4
    1cc8:	75 09       	sbc	r23, r5
    1cca:	86 09       	sbc	r24, r6
    1ccc:	97 09       	sbc	r25, r7
    1cce:	24 e6       	ldi	r18, 0x64	; 100
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__udivmodsi4>
    1cda:	ed b7       	in	r30, 0x3d	; 61
    1cdc:	fe b7       	in	r31, 0x3e	; 62
    1cde:	32 83       	std	Z+2, r19	; 0x02
    1ce0:	21 83       	std	Z+1, r18	; 0x01
    1ce2:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <arm+0x62>
    1ce6:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <arm+0x63>
    1cea:	f8 01       	movw	r30, r16
    1cec:	93 83       	std	Z+3, r25	; 0x03
    1cee:	82 83       	std	Z+2, r24	; 0x02
    1cf0:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <arm+0x6f>
    1cf4:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <arm+0x70>
    1cf8:	95 83       	std	Z+5, r25	; 0x05
    1cfa:	84 83       	std	Z+4, r24	; 0x04
    1cfc:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <arm+0x71>
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	97 83       	std	Z+7, r25	; 0x07
    1d04:	86 83       	std	Z+6, r24	; 0x06
    1d06:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <arm+0x72>
    1d0a:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <arm+0x73>
    1d0e:	91 87       	std	Z+9, r25	; 0x09
    1d10:	80 87       	std	Z+8, r24	; 0x08
    1d12:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <arm+0x2e>
    1d16:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <arm+0x2f>
    1d1a:	93 87       	std	Z+11, r25	; 0x0b
    1d1c:	82 87       	std	Z+10, r24	; 0x0a
    1d1e:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <arm+0x32>
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	95 87       	std	Z+13, r25	; 0x0d
    1d26:	84 87       	std	Z+12, r24	; 0x0c
    1d28:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <arm+0x76>
    1d2c:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <arm+0x77>
    1d30:	97 87       	std	Z+15, r25	; 0x0f
    1d32:	86 87       	std	Z+14, r24	; 0x0e
    1d34:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <arm+0x83>
    1d38:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <arm+0x84>
    1d3c:	91 8b       	std	Z+17, r25	; 0x11
    1d3e:	80 8b       	std	Z+16, r24	; 0x10
    1d40:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <arm+0x85>
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	93 8b       	std	Z+19, r25	; 0x13
    1d48:	82 8b       	std	Z+18, r24	; 0x12
    1d4a:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <arm+0x86>
    1d4e:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <arm+0x87>
    1d52:	95 8b       	std	Z+21, r25	; 0x15
    1d54:	84 8b       	std	Z+20, r24	; 0x14
    1d56:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <arm+0x42>
    1d5a:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <arm+0x43>
    1d5e:	97 8b       	std	Z+23, r25	; 0x17
    1d60:	86 8b       	std	Z+22, r24	; 0x16
    1d62:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <arm+0x46>
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	91 8f       	std	Z+25, r25	; 0x19
    1d6a:	80 8f       	std	Z+24, r24	; 0x18
    1d6c:	7a 96       	adiw	r30, 0x1a	; 26
    1d6e:	c6 01       	movw	r24, r12
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	8c 30       	cpi	r24, 0x0C	; 12
    1d74:	91 05       	cpc	r25, r1
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <loop+0x594>
    1d78:	11 92       	st	Z+, r1
    1d7a:	11 92       	st	Z+, r1
    1d7c:	f9 cf       	rjmp	.-14     	; 0x1d70 <loop+0x586>
    1d7e:	6b 2d       	mov	r22, r11
    1d80:	c8 01       	movw	r24, r16
    1d82:	ae d8       	rcall	.-3748   	; 0xee0 <_Z16dumpDataToSerialPih>
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	fe be       	out	0x3e, r15	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	ed be       	out	0x3d, r14	; 61
    1d8e:	2c 96       	adiw	r28, 0x0c	; 12
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	bf 90       	pop	r11
    1dac:	7f 90       	pop	r7
    1dae:	6f 90       	pop	r6
    1db0:	5f 90       	pop	r5
    1db2:	4f 90       	pop	r4
    1db4:	08 95       	ret

00001db6 <setup>:
	}
	Serial.println((String)(millis() - t_global_start)+". Move S5 to 150 Ends");
	delay(5000);
}

void setup() {
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	6c 97       	sbiw	r28, 0x1c	; 28
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
	t_global_start = millis();
    1dce:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <millis>
    1dd2:	60 93 db 04 	sts	0x04DB, r22	; 0x8004db <t_global_start>
    1dd6:	70 93 dc 04 	sts	0x04DC, r23	; 0x8004dc <t_global_start+0x1>
    1dda:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <t_global_start+0x2>
    1dde:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <t_global_start+0x3>
	
	setupSwitches();					// Setup the arm control switches
    1de2:	3e d9       	rcall	.-3460   	; 0x1060 <_Z13setupSwitchesv>
	setupJoystick();
    1de4:	4e d9       	rcall	.-3428   	; 0x1082 <_Z13setupJoystickv>
	setupADC();
    1de6:	6b d9       	rcall	.-3370   	; 0x10be <_Z8setupADCv>
    1de8:	80 ef       	ldi	r24, 0xF0	; 240
	
	/* LCD Setup */
	lcd.init();							// initialize the lcd
    1dea:	94 e0       	ldi	r25, 0x04	; 4
    1dec:	0e 94 cc 1b 	call	0x3798	; 0x3798 <_ZN17LiquidCrystal_I2C4initEv>
    1df0:	88 e0       	ldi	r24, 0x08	; 8
	uint8_t ch_arrow_down[8]	= {B00100, B00100, B00100, B00100, B10101, B01110, B00100, B00000};
    1df2:	ea e0       	ldi	r30, 0x0A	; 10
    1df4:	f2 e0       	ldi	r31, 0x02	; 2
    1df6:	de 01       	movw	r26, r28
    1df8:	19 96       	adiw	r26, 0x09	; 9
    1dfa:	01 90       	ld	r0, Z+
    1dfc:	0d 92       	st	X+, r0
    1dfe:	8a 95       	dec	r24
    1e00:	e1 f7       	brne	.-8      	; 0x1dfa <setup+0x44>
    1e02:	88 e0       	ldi	r24, 0x08	; 8
	uint8_t ch_arrow_up[8]		= {B00100, B01110, B10101, B00100, B00100, B00100, B00100, B00000};
    1e04:	e2 e1       	ldi	r30, 0x12	; 18
    1e06:	f2 e0       	ldi	r31, 0x02	; 2
    1e08:	de 01       	movw	r26, r28
    1e0a:	11 96       	adiw	r26, 0x01	; 1
    1e0c:	01 90       	ld	r0, Z+
    1e0e:	0d 92       	st	X+, r0
    1e10:	8a 95       	dec	r24
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <setup+0x56>
    1e14:	ae 01       	movw	r20, r28
	lcd.createChar(0, ch_arrow_down);
    1e16:	47 5f       	subi	r20, 0xF7	; 247
    1e18:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	80 ef       	ldi	r24, 0xF0	; 240
    1e1e:	94 e0       	ldi	r25, 0x04	; 4
    1e20:	0e 94 4d 1b 	call	0x369a	; 0x369a <_ZN17LiquidCrystal_I2C10createCharEhPh>
    1e24:	ae 01       	movw	r20, r28
	lcd.createChar(1, ch_arrow_up);
    1e26:	4f 5f       	subi	r20, 0xFF	; 255
    1e28:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	80 ef       	ldi	r24, 0xF0	; 240
    1e2e:	94 e0       	ldi	r25, 0x04	; 4
    1e30:	0e 94 4d 1b 	call	0x369a	; 0x369a <_ZN17LiquidCrystal_I2C10createCharEhPh>
    1e34:	80 ef       	ldi	r24, 0xF0	; 240
	lcd.backlight();
    1e36:	94 e0       	ldi	r25, 0x04	; 4
    1e38:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <_ZN17LiquidCrystal_I2C9backlightEv>
    1e3c:	80 ef       	ldi	r24, 0xF0	; 240
	lcd.clear();
    1e3e:	94 e0       	ldi	r25, 0x04	; 4
    1e40:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN17LiquidCrystal_I2C5clearEv>
    1e44:	61 e0       	ldi	r22, 0x01	; 1
	
	/* Pins Setup */
	pinMode(RS485_RX_EN_PIN, OUTPUT);
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <pinMode>
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(RS485_TX_EN_PIN, OUTPUT);
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <pinMode>
    1e54:	26 e0       	ldi	r18, 0x06	; 6
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	51 ee       	ldi	r21, 0xE1	; 225
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	80 ea       	ldi	r24, 0xA0	; 160
    1e60:	95 e0       	ldi	r25, 0x05	; 5
    1e62:	33 d6       	rcall	.+3174   	; 0x2aca <_ZN14HardwareSerial5beginEmh>
    1e64:	26 e0       	ldi	r18, 0x06	; 6
    1e66:	47 e3       	ldi	r20, 0x37	; 55
    1e68:	5f ed       	ldi	r21, 0xDF	; 223
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	8d e3       	ldi	r24, 0x3D	; 61
    1e70:	96 e0       	ldi	r25, 0x06	; 6
    1e72:	2b d6       	rcall	.+3158   	; 0x2aca <_ZN14HardwareSerial5beginEmh>
	
	/* Serials Setup */
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
    1e74:	8d e3       	ldi	r24, 0x3D	; 61
    1e76:	96 e0       	ldi	r25, 0x06	; 6
    1e78:	07 d6       	rcall	.+3086   	; 0x2a88 <_ZN14HardwareSerial5flushEv>
    1e7a:	0e ef       	ldi	r16, 0xFE	; 254
	arm.id = 1;
    1e7c:	14 e0       	ldi	r17, 0x04	; 4
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	f8 01       	movw	r30, r16
    1e82:	84 87       	std	Z+12, r24	; 0x0c
	
	/* Angle Limits Setup (Servo Modes) */
	printLCD(0, 0, "Set Angle Limits" );
    1e84:	47 e0       	ldi	r20, 0x07	; 7
    1e86:	54 e0       	ldi	r21, 0x04	; 4
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	d9 d8       	rcall	.-3662   	; 0x1040 <_Z8printLCDhhPKc>
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
	arm.setModeWheel(1);
    1e90:	c8 01       	movw	r24, r16
    1e92:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN3Arm12setModeWheelEh>
    1e96:	62 e0       	ldi	r22, 0x02	; 2
	arm.setModeWheel(2);
    1e98:	c8 01       	movw	r24, r16
    1e9a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN3Arm12setModeWheelEh>
    1e9e:	63 e0       	ldi	r22, 0x03	; 3
	arm.setModeMultiTurn(3);
    1ea0:	c8 01       	movw	r24, r16
    1ea2:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN3Arm16setModeMultiTurnEh>
    1ea6:	64 e0       	ldi	r22, 0x04	; 4
	arm.setModeJoint(4);
    1ea8:	c8 01       	movw	r24, r16
    1eaa:	0e 94 65 04 	call	0x8ca	; 0x8ca <_ZN3Arm12setModeJointEh>
    1eae:	65 e0       	ldi	r22, 0x05	; 5
	arm.setModeJoint(5);
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	0e 94 65 04 	call	0x8ca	; 0x8ca <_ZN3Arm12setModeJointEh>
    1eb6:	64 ef       	ldi	r22, 0xF4	; 244
	delay(500);
    1eb8:	71 e0       	ldi	r23, 0x01	; 1
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
	printLCD(18, 0, "OK" );
    1ec2:	48 e1       	ldi	r20, 0x18	; 24
    1ec4:	54 e0       	ldi	r21, 0x04	; 4
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	82 e1       	ldi	r24, 0x12	; 18
    1eca:	ba d8       	rcall	.-3724   	; 0x1040 <_Z8printLCDhhPKc>

	/* Set the default speeds of the servos */
	printLCD(0, 1, "Set Speeds" );
    1ecc:	4b e1       	ldi	r20, 0x1B	; 27
    1ece:	54 e0       	ldi	r21, 0x04	; 4
    1ed0:	61 e0       	ldi	r22, 0x01	; 1
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	b5 d8       	rcall	.-3734   	; 0x1040 <_Z8printLCDhhPKc>
    1ed6:	88 ee       	ldi	r24, 0xE8	; 232
	arm.servos[1].speed_default = 1000;
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	f8 01       	movw	r30, r16
    1edc:	91 ab       	std	Z+49, r25	; 0x31
    1ede:	80 ab       	std	Z+48, r24	; 0x30
    1ee0:	90 93 43 05 	sts	0x0543, r25	; 0x800543 <arm+0x45>
	arm.servos[2].speed_default = 1000;
    1ee4:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <arm+0x44>
    1ee8:	8e e1       	ldi	r24, 0x1E	; 30
	arm.servos[3].speed_default = 30;
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <arm+0x59>
    1ef0:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <arm+0x58>
    1ef4:	8a e0       	ldi	r24, 0x0A	; 10
	arm.servos[4].speed_default = 10;
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <arm+0x6d>
    1efc:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <arm+0x6c>
    1f00:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <arm+0x81>
	arm.servos[5].speed_default = 10;
    1f04:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <arm+0x80>
    1f08:	64 ef       	ldi	r22, 0xF4	; 244
	delay(500);
    1f0a:	71 e0       	ldi	r23, 0x01	; 1
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
	printLCD(18, 1, "OK" );
    1f14:	48 e1       	ldi	r20, 0x18	; 24
    1f16:	54 e0       	ldi	r21, 0x04	; 4
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	82 e1       	ldi	r24, 0x12	; 18
    1f1c:	91 d8       	rcall	.-3806   	; 0x1040 <_Z8printLCDhhPKc>

	/* Enable Toques for Joints (4 and 5) */
	printLCD(0, 2, "Set Torques" );
    1f1e:	46 e2       	ldi	r20, 0x26	; 38
    1f20:	54 e0       	ldi	r21, 0x04	; 4
    1f22:	62 e0       	ldi	r22, 0x02	; 2
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	8c d8       	rcall	.-3816   	; 0x1040 <_Z8printLCDhhPKc>
    1f28:	4f ef       	ldi	r20, 0xFF	; 255
	arm.setTorqueLimit(1, 0x03FF); // 100%
    1f2a:	53 e0       	ldi	r21, 0x03	; 3
    1f2c:	61 e0       	ldi	r22, 0x01	; 1
    1f2e:	c8 01       	movw	r24, r16
    1f30:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN3Arm14setTorqueLimitEhi>
    1f34:	4f ef       	ldi	r20, 0xFF	; 255
	arm.setTorqueLimit(2, 0x03FF); // 100%
    1f36:	53 e0       	ldi	r21, 0x03	; 3
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN3Arm14setTorqueLimitEhi>
    1f40:	40 e0       	ldi	r20, 0x00	; 0
	arm.setTorqueLimit(3, 0x0200); //  50%
    1f42:	52 e0       	ldi	r21, 0x02	; 2
    1f44:	63 e0       	ldi	r22, 0x03	; 3
    1f46:	c8 01       	movw	r24, r16
    1f48:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN3Arm14setTorqueLimitEhi>
    1f4c:	4f ef       	ldi	r20, 0xFF	; 255
	arm.setTorqueLimit(4, 0x03FF); // 100%
    1f4e:	53 e0       	ldi	r21, 0x03	; 3
    1f50:	64 e0       	ldi	r22, 0x04	; 4
    1f52:	c8 01       	movw	r24, r16
    1f54:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN3Arm14setTorqueLimitEhi>
    1f58:	4f ef       	ldi	r20, 0xFF	; 255
	arm.setTorqueLimit(5, 0x03FF); // 100%
    1f5a:	53 e0       	ldi	r21, 0x03	; 3
    1f5c:	65 e0       	ldi	r22, 0x05	; 5
    1f5e:	c8 01       	movw	r24, r16
    1f60:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN3Arm14setTorqueLimitEhi>
	delay(500);
    1f64:	64 ef       	ldi	r22, 0xF4	; 244
    1f66:	71 e0       	ldi	r23, 0x01	; 1
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
	printLCD(18, 2, "OK" );
    1f70:	48 e1       	ldi	r20, 0x18	; 24
    1f72:	54 e0       	ldi	r21, 0x04	; 4
    1f74:	62 e0       	ldi	r22, 0x02	; 2
    1f76:	82 e1       	ldi	r24, 0x12	; 18
    1f78:	63 d8       	rcall	.-3898   	; 0x1040 <_Z8printLCDhhPKc>
	
	/* Update Angles (Positions) for Joints (3, 4 and 5) */
	printLCD(0, 3, "Update Angles S3-5 " );
    1f7a:	4b e6       	ldi	r20, 0x6B	; 107
    1f7c:	54 e0       	ldi	r21, 0x04	; 4
    1f7e:	63 e0       	ldi	r22, 0x03	; 3
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	5e d8       	rcall	.-3908   	; 0x1040 <_Z8printLCDhhPKc>
    1f84:	44 e2       	ldi	r20, 0x24	; 36
	arm.servos[3].position = arm.getData(3, MX_PRESENT_POSITION_L);
    1f86:	63 e0       	ldi	r22, 0x03	; 3
    1f88:	c8 01       	movw	r24, r16
    1f8a:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN3Arm7getDataEhh>
    1f8e:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <arm+0x4f>
    1f92:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <arm+0x4e>
    1f96:	44 e2       	ldi	r20, 0x24	; 36
	arm.servos[4].position = arm.getData(4, MX_PRESENT_POSITION_L);
    1f98:	64 e0       	ldi	r22, 0x04	; 4
    1f9a:	c8 01       	movw	r24, r16
    1f9c:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN3Arm7getDataEhh>
    1fa0:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <arm+0x63>
    1fa4:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <arm+0x62>
    1fa8:	44 e2       	ldi	r20, 0x24	; 36
	arm.servos[5].position = arm.getData(5, MX_PRESENT_POSITION_L);
    1faa:	65 e0       	ldi	r22, 0x05	; 5
    1fac:	c8 01       	movw	r24, r16
    1fae:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN3Arm7getDataEhh>
    1fb2:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <arm+0x77>
    1fb6:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <arm+0x76>
	delay(500);
    1fba:	64 ef       	ldi	r22, 0xF4	; 244
    1fbc:	71 e0       	ldi	r23, 0x01	; 1
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <delay>
	printLCD(18, 3, "OK" );
    1fc6:	48 e1       	ldi	r20, 0x18	; 24
    1fc8:	54 e0       	ldi	r21, 0x04	; 4
    1fca:	63 e0       	ldi	r22, 0x03	; 3
    1fcc:	82 e1       	ldi	r24, 0x12	; 18
    1fce:	38 d8       	rcall	.-3984   	; 0x1040 <_Z8printLCDhhPKc>
	
	delay(500);
    1fd0:	64 ef       	ldi	r22, 0xF4	; 244
    1fd2:	71 e0       	ldi	r23, 0x01	; 1
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	fb d7       	rcall	.+4086   	; 0x2fd0 <delay>
    1fda:	80 ef       	ldi	r24, 0xF0	; 240

	/* LCD Captions Setup */
	lcd.clear();
    1fdc:	94 e0       	ldi	r25, 0x04	; 4
    1fde:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN17LiquidCrystal_I2C5clearEv>
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
	lcd.setCursor(0,0);
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	80 ef       	ldi	r24, 0xF0	; 240
    1fe8:	94 e0       	ldi	r25, 0x04	; 4
    1fea:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("ID#");
    1fee:	67 e5       	ldi	r22, 0x57	; 87
    1ff0:	74 e0       	ldi	r23, 0x04	; 4
    1ff2:	80 ef       	ldi	r24, 0xF0	; 240
    1ff4:	94 e0       	ldi	r25, 0x04	; 4
    1ff6:	56 d7       	rcall	.+3756   	; 0x2ea4 <_ZN5Print5printEPKc>
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
	lcd.setCursor(5,0);
    1ffa:	65 e0       	ldi	r22, 0x05	; 5
    1ffc:	80 ef       	ldi	r24, 0xF0	; 240
    1ffe:	94 e0       	ldi	r25, 0x04	; 4
    2000:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("mA:");
    2004:	6b e5       	ldi	r22, 0x5B	; 91
    2006:	74 e0       	ldi	r23, 0x04	; 4
    2008:	80 ef       	ldi	r24, 0xF0	; 240
    200a:	94 e0       	ldi	r25, 0x04	; 4
    200c:	4b d7       	rcall	.+3734   	; 0x2ea4 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	80 ef       	ldi	r24, 0xF0	; 240
    2014:	94 e0       	ldi	r25, 0x04	; 4
    2016:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("an:");
    201a:	6f e5       	ldi	r22, 0x5F	; 95
    201c:	74 e0       	ldi	r23, 0x04	; 4
    201e:	80 ef       	ldi	r24, 0xF0	; 240
    2020:	94 e0       	ldi	r25, 0x04	; 4
    2022:	40 d7       	rcall	.+3712   	; 0x2ea4 <_ZN5Print5printEPKc>
	lcd.setCursor(0,2);
    2024:	42 e0       	ldi	r20, 0x02	; 2
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	80 ef       	ldi	r24, 0xF0	; 240
    202a:	94 e0       	ldi	r25, 0x04	; 4
    202c:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("sp:");
    2030:	63 e6       	ldi	r22, 0x63	; 99
    2032:	74 e0       	ldi	r23, 0x04	; 4
    2034:	80 ef       	ldi	r24, 0xF0	; 240
    2036:	94 e0       	ldi	r25, 0x04	; 4
    2038:	35 d7       	rcall	.+3690   	; 0x2ea4 <_ZN5Print5printEPKc>
	lcd.setCursor(0,3);
    203a:	43 e0       	ldi	r20, 0x03	; 3
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	80 ef       	ldi	r24, 0xF0	; 240
    2040:	94 e0       	ldi	r25, 0x04	; 4
    2042:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("ld:");
    2046:	67 e6       	ldi	r22, 0x67	; 103
    2048:	74 e0       	ldi	r23, 0x04	; 4
    204a:	80 ef       	ldi	r24, 0xF0	; 240
    204c:	94 e0       	ldi	r25, 0x04	; 4
    204e:	2a d7       	rcall	.+3668   	; 0x2ea4 <_ZN5Print5printEPKc>
    2050:	4e e0       	ldi	r20, 0x0E	; 14
	Serial.println((String)"Max Torque: "+arm.getData(1, MX_MAX_TORQUE_L)); 
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	c8 01       	movw	r24, r16
    2056:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN3Arm7getDataEhh>
    205a:	8c 01       	movw	r16, r24
    205c:	6f e7       	ldi	r22, 0x7F	; 127
    205e:	74 e0       	ldi	r23, 0x04	; 4
    2060:	ce 01       	movw	r24, r28
    2062:	47 96       	adiw	r24, 0x17	; 23
    2064:	0e 94 b4 19 	call	0x3368	; 0x3368 <_ZN6StringC1EPKc>
    2068:	be 01       	movw	r22, r28
{
public:
	StringSumHelper(const String &s) : String(s) {}
    206a:	69 5e       	subi	r22, 0xE9	; 233
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	ce 01       	movw	r24, r28
    2070:	41 96       	adiw	r24, 0x11	; 17
    2072:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    2076:	b8 01       	movw	r22, r16
    2078:	ce 01       	movw	r24, r28
    207a:	41 96       	adiw	r24, 0x11	; 17
    207c:	0e 94 a7 1a 	call	0x354e	; 0x354e <_ZplRK15StringSumHelperi>
    2080:	bc 01       	movw	r22, r24
    2082:	80 ea       	ldi	r24, 0xA0	; 160
    2084:	95 e0       	ldi	r25, 0x05	; 5
    2086:	19 d7       	rcall	.+3634   	; 0x2eba <_ZN5Print7printlnERK6String>
    2088:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    208a:	41 96       	adiw	r24, 0x11	; 17
    208c:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    2090:	ce 01       	movw	r24, r28
    2092:	47 96       	adiw	r24, 0x17	; 23
    2094:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    2098:	47 e4       	ldi	r20, 0x47	; 71
	Serial.println((String)"Goal Torque: "+arm.getData(1, MX_GOAL_TORQUE_L)); 
    209a:	61 e0       	ldi	r22, 0x01	; 1
    209c:	8e ef       	ldi	r24, 0xFE	; 254
    209e:	94 e0       	ldi	r25, 0x04	; 4
    20a0:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN3Arm7getDataEhh>
    20a4:	8c 01       	movw	r16, r24
    20a6:	6c e8       	ldi	r22, 0x8C	; 140
    20a8:	74 e0       	ldi	r23, 0x04	; 4
    20aa:	ce 01       	movw	r24, r28
    20ac:	47 96       	adiw	r24, 0x17	; 23
    20ae:	0e 94 b4 19 	call	0x3368	; 0x3368 <_ZN6StringC1EPKc>
    20b2:	be 01       	movw	r22, r28
{
public:
	StringSumHelper(const String &s) : String(s) {}
    20b4:	69 5e       	subi	r22, 0xE9	; 233
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	ce 01       	movw	r24, r28
    20ba:	41 96       	adiw	r24, 0x11	; 17
    20bc:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6StringC1ERKS_>
    20c0:	b8 01       	movw	r22, r16
    20c2:	ce 01       	movw	r24, r28
    20c4:	41 96       	adiw	r24, 0x11	; 17
    20c6:	0e 94 a7 1a 	call	0x354e	; 0x354e <_ZplRK15StringSumHelperi>
    20ca:	bc 01       	movw	r22, r24
    20cc:	80 ea       	ldi	r24, 0xA0	; 160
    20ce:	95 e0       	ldi	r25, 0x05	; 5
    20d0:	f4 d6       	rcall	.+3560   	; 0x2eba <_ZN5Print7printlnERK6String>
    20d2:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    20d4:	41 96       	adiw	r24, 0x11	; 17
    20d6:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
    20da:	ce 01       	movw	r24, r28
    20dc:	47 96       	adiw	r24, 0x17	; 23
    20de:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6StringD1Ev>
	//arm.goHome();
	//delay(3000);
	//arm.goToXY(200,-230);
	//delay(4000);
	//goHome();
	arm.moveSpeed(4, 100*CONVERT_DEGREE_POSITION, 2*MX_CONVERT_PERCENT_SPEED);
    20e2:	24 e1       	ldi	r18, 0x14	; 20
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	41 e7       	ldi	r20, 0x71	; 113
    20e8:	54 e0       	ldi	r21, 0x04	; 4
    20ea:	64 e0       	ldi	r22, 0x04	; 4
    20ec:	8e ef       	ldi	r24, 0xFE	; 254
    20ee:	94 e0       	ldi	r25, 0x04	; 4
    20f0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_ZN3Arm9moveSpeedEhjj>
	delay(10000);
    20f4:	60 e1       	ldi	r22, 0x10	; 16
    20f6:	77 e2       	ldi	r23, 0x27	; 39
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	69 d7       	rcall	.+3794   	; 0x2fd0 <delay>
    20fe:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <fPrintON>
	fPrintON = false;
    2102:	6c 96       	adiw	r28, 0x1c	; 28
	//experiment_1();
}
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	1f 91       	pop	r17
    2114:	0f 91       	pop	r16
    2116:	08 95       	ret

00002118 <__subsf3>:
    2118:	50 58       	subi	r21, 0x80	; 128

0000211a <__addsf3>:
    211a:	bb 27       	eor	r27, r27
    211c:	aa 27       	eor	r26, r26
    211e:	0e d0       	rcall	.+28     	; 0x213c <__addsf3x>
    2120:	c5 c1       	rjmp	.+906    	; 0x24ac <__fp_round>
    2122:	8e d1       	rcall	.+796    	; 0x2440 <__fp_pscA>
    2124:	30 f0       	brcs	.+12     	; 0x2132 <__addsf3+0x18>
    2126:	93 d1       	rcall	.+806    	; 0x244e <__fp_pscB>
    2128:	20 f0       	brcs	.+8      	; 0x2132 <__addsf3+0x18>
    212a:	31 f4       	brne	.+12     	; 0x2138 <__addsf3+0x1e>
    212c:	9f 3f       	cpi	r25, 0xFF	; 255
    212e:	11 f4       	brne	.+4      	; 0x2134 <__addsf3+0x1a>
    2130:	1e f4       	brtc	.+6      	; 0x2138 <__addsf3+0x1e>
    2132:	5e c1       	rjmp	.+700    	; 0x23f0 <__fp_nan>
    2134:	0e f4       	brtc	.+2      	; 0x2138 <__addsf3+0x1e>
    2136:	e0 95       	com	r30
    2138:	e7 fb       	bst	r30, 7
    213a:	54 c1       	rjmp	.+680    	; 0x23e4 <__fp_inf>

0000213c <__addsf3x>:
    213c:	e9 2f       	mov	r30, r25
    213e:	d8 d1       	rcall	.+944    	; 0x24f0 <__fp_split3>
    2140:	80 f3       	brcs	.-32     	; 0x2122 <__addsf3+0x8>
    2142:	ba 17       	cp	r27, r26
    2144:	62 07       	cpc	r22, r18
    2146:	73 07       	cpc	r23, r19
    2148:	84 07       	cpc	r24, r20
    214a:	95 07       	cpc	r25, r21
    214c:	18 f0       	brcs	.+6      	; 0x2154 <__addsf3x+0x18>
    214e:	71 f4       	brne	.+28     	; 0x216c <__addsf3x+0x30>
    2150:	9e f5       	brtc	.+102    	; 0x21b8 <__addsf3x+0x7c>
    2152:	f0 c1       	rjmp	.+992    	; 0x2534 <__fp_zero>
    2154:	0e f4       	brtc	.+2      	; 0x2158 <__addsf3x+0x1c>
    2156:	e0 95       	com	r30
    2158:	0b 2e       	mov	r0, r27
    215a:	ba 2f       	mov	r27, r26
    215c:	a0 2d       	mov	r26, r0
    215e:	0b 01       	movw	r0, r22
    2160:	b9 01       	movw	r22, r18
    2162:	90 01       	movw	r18, r0
    2164:	0c 01       	movw	r0, r24
    2166:	ca 01       	movw	r24, r20
    2168:	a0 01       	movw	r20, r0
    216a:	11 24       	eor	r1, r1
    216c:	ff 27       	eor	r31, r31
    216e:	59 1b       	sub	r21, r25
    2170:	99 f0       	breq	.+38     	; 0x2198 <__addsf3x+0x5c>
    2172:	59 3f       	cpi	r21, 0xF9	; 249
    2174:	50 f4       	brcc	.+20     	; 0x218a <__addsf3x+0x4e>
    2176:	50 3e       	cpi	r21, 0xE0	; 224
    2178:	68 f1       	brcs	.+90     	; 0x21d4 <__addsf3x+0x98>
    217a:	1a 16       	cp	r1, r26
    217c:	f0 40       	sbci	r31, 0x00	; 0
    217e:	a2 2f       	mov	r26, r18
    2180:	23 2f       	mov	r18, r19
    2182:	34 2f       	mov	r19, r20
    2184:	44 27       	eor	r20, r20
    2186:	58 5f       	subi	r21, 0xF8	; 248
    2188:	f3 cf       	rjmp	.-26     	; 0x2170 <__addsf3x+0x34>
    218a:	46 95       	lsr	r20
    218c:	37 95       	ror	r19
    218e:	27 95       	ror	r18
    2190:	a7 95       	ror	r26
    2192:	f0 40       	sbci	r31, 0x00	; 0
    2194:	53 95       	inc	r21
    2196:	c9 f7       	brne	.-14     	; 0x218a <__addsf3x+0x4e>
    2198:	7e f4       	brtc	.+30     	; 0x21b8 <__addsf3x+0x7c>
    219a:	1f 16       	cp	r1, r31
    219c:	ba 0b       	sbc	r27, r26
    219e:	62 0b       	sbc	r22, r18
    21a0:	73 0b       	sbc	r23, r19
    21a2:	84 0b       	sbc	r24, r20
    21a4:	ba f0       	brmi	.+46     	; 0x21d4 <__addsf3x+0x98>
    21a6:	91 50       	subi	r25, 0x01	; 1
    21a8:	a1 f0       	breq	.+40     	; 0x21d2 <__addsf3x+0x96>
    21aa:	ff 0f       	add	r31, r31
    21ac:	bb 1f       	adc	r27, r27
    21ae:	66 1f       	adc	r22, r22
    21b0:	77 1f       	adc	r23, r23
    21b2:	88 1f       	adc	r24, r24
    21b4:	c2 f7       	brpl	.-16     	; 0x21a6 <__addsf3x+0x6a>
    21b6:	0e c0       	rjmp	.+28     	; 0x21d4 <__addsf3x+0x98>
    21b8:	ba 0f       	add	r27, r26
    21ba:	62 1f       	adc	r22, r18
    21bc:	73 1f       	adc	r23, r19
    21be:	84 1f       	adc	r24, r20
    21c0:	48 f4       	brcc	.+18     	; 0x21d4 <__addsf3x+0x98>
    21c2:	87 95       	ror	r24
    21c4:	77 95       	ror	r23
    21c6:	67 95       	ror	r22
    21c8:	b7 95       	ror	r27
    21ca:	f7 95       	ror	r31
    21cc:	9e 3f       	cpi	r25, 0xFE	; 254
    21ce:	08 f0       	brcs	.+2      	; 0x21d2 <__addsf3x+0x96>
    21d0:	b3 cf       	rjmp	.-154    	; 0x2138 <__addsf3+0x1e>
    21d2:	93 95       	inc	r25
    21d4:	88 0f       	add	r24, r24
    21d6:	08 f0       	brcs	.+2      	; 0x21da <__addsf3x+0x9e>
    21d8:	99 27       	eor	r25, r25
    21da:	ee 0f       	add	r30, r30
    21dc:	97 95       	ror	r25
    21de:	87 95       	ror	r24
    21e0:	08 95       	ret

000021e2 <__cmpsf2>:
    21e2:	dc d0       	rcall	.+440    	; 0x239c <__fp_cmp>
    21e4:	08 f4       	brcc	.+2      	; 0x21e8 <__cmpsf2+0x6>
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	08 95       	ret

000021ea <cos>:
    21ea:	39 d1       	rcall	.+626    	; 0x245e <__fp_rempio2>
    21ec:	e3 95       	inc	r30
    21ee:	6f c1       	rjmp	.+734    	; 0x24ce <__fp_sinus>

000021f0 <__divsf3>:
    21f0:	0c d0       	rcall	.+24     	; 0x220a <__divsf3x>
    21f2:	5c c1       	rjmp	.+696    	; 0x24ac <__fp_round>
    21f4:	2c d1       	rcall	.+600    	; 0x244e <__fp_pscB>
    21f6:	40 f0       	brcs	.+16     	; 0x2208 <__stack+0x9>
    21f8:	23 d1       	rcall	.+582    	; 0x2440 <__fp_pscA>
    21fa:	30 f0       	brcs	.+12     	; 0x2208 <__stack+0x9>
    21fc:	21 f4       	brne	.+8      	; 0x2206 <__stack+0x7>
    21fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2200:	19 f0       	breq	.+6      	; 0x2208 <__stack+0x9>
    2202:	f0 c0       	rjmp	.+480    	; 0x23e4 <__fp_inf>
    2204:	51 11       	cpse	r21, r1
    2206:	97 c1       	rjmp	.+814    	; 0x2536 <__fp_szero>
    2208:	f3 c0       	rjmp	.+486    	; 0x23f0 <__fp_nan>

0000220a <__divsf3x>:
    220a:	72 d1       	rcall	.+740    	; 0x24f0 <__fp_split3>
    220c:	98 f3       	brcs	.-26     	; 0x21f4 <__divsf3+0x4>

0000220e <__divsf3_pse>:
    220e:	99 23       	and	r25, r25
    2210:	c9 f3       	breq	.-14     	; 0x2204 <__stack+0x5>
    2212:	55 23       	and	r21, r21
    2214:	b1 f3       	breq	.-20     	; 0x2202 <__stack+0x3>
    2216:	95 1b       	sub	r25, r21
    2218:	55 0b       	sbc	r21, r21
    221a:	bb 27       	eor	r27, r27
    221c:	aa 27       	eor	r26, r26
    221e:	62 17       	cp	r22, r18
    2220:	73 07       	cpc	r23, r19
    2222:	84 07       	cpc	r24, r20
    2224:	38 f0       	brcs	.+14     	; 0x2234 <__divsf3_pse+0x26>
    2226:	9f 5f       	subi	r25, 0xFF	; 255
    2228:	5f 4f       	sbci	r21, 0xFF	; 255
    222a:	22 0f       	add	r18, r18
    222c:	33 1f       	adc	r19, r19
    222e:	44 1f       	adc	r20, r20
    2230:	aa 1f       	adc	r26, r26
    2232:	a9 f3       	breq	.-22     	; 0x221e <__divsf3_pse+0x10>
    2234:	33 d0       	rcall	.+102    	; 0x229c <__divsf3_pse+0x8e>
    2236:	0e 2e       	mov	r0, r30
    2238:	3a f0       	brmi	.+14     	; 0x2248 <__divsf3_pse+0x3a>
    223a:	e0 e8       	ldi	r30, 0x80	; 128
    223c:	30 d0       	rcall	.+96     	; 0x229e <__divsf3_pse+0x90>
    223e:	91 50       	subi	r25, 0x01	; 1
    2240:	50 40       	sbci	r21, 0x00	; 0
    2242:	e6 95       	lsr	r30
    2244:	00 1c       	adc	r0, r0
    2246:	ca f7       	brpl	.-14     	; 0x223a <__divsf3_pse+0x2c>
    2248:	29 d0       	rcall	.+82     	; 0x229c <__divsf3_pse+0x8e>
    224a:	fe 2f       	mov	r31, r30
    224c:	27 d0       	rcall	.+78     	; 0x229c <__divsf3_pse+0x8e>
    224e:	66 0f       	add	r22, r22
    2250:	77 1f       	adc	r23, r23
    2252:	88 1f       	adc	r24, r24
    2254:	bb 1f       	adc	r27, r27
    2256:	26 17       	cp	r18, r22
    2258:	37 07       	cpc	r19, r23
    225a:	48 07       	cpc	r20, r24
    225c:	ab 07       	cpc	r26, r27
    225e:	b0 e8       	ldi	r27, 0x80	; 128
    2260:	09 f0       	breq	.+2      	; 0x2264 <__divsf3_pse+0x56>
    2262:	bb 0b       	sbc	r27, r27
    2264:	80 2d       	mov	r24, r0
    2266:	bf 01       	movw	r22, r30
    2268:	ff 27       	eor	r31, r31
    226a:	93 58       	subi	r25, 0x83	; 131
    226c:	5f 4f       	sbci	r21, 0xFF	; 255
    226e:	2a f0       	brmi	.+10     	; 0x227a <__divsf3_pse+0x6c>
    2270:	9e 3f       	cpi	r25, 0xFE	; 254
    2272:	51 05       	cpc	r21, r1
    2274:	68 f0       	brcs	.+26     	; 0x2290 <__divsf3_pse+0x82>
    2276:	b6 c0       	rjmp	.+364    	; 0x23e4 <__fp_inf>
    2278:	5e c1       	rjmp	.+700    	; 0x2536 <__fp_szero>
    227a:	5f 3f       	cpi	r21, 0xFF	; 255
    227c:	ec f3       	brlt	.-6      	; 0x2278 <__divsf3_pse+0x6a>
    227e:	98 3e       	cpi	r25, 0xE8	; 232
    2280:	dc f3       	brlt	.-10     	; 0x2278 <__divsf3_pse+0x6a>
    2282:	86 95       	lsr	r24
    2284:	77 95       	ror	r23
    2286:	67 95       	ror	r22
    2288:	b7 95       	ror	r27
    228a:	f7 95       	ror	r31
    228c:	9f 5f       	subi	r25, 0xFF	; 255
    228e:	c9 f7       	brne	.-14     	; 0x2282 <__divsf3_pse+0x74>
    2290:	88 0f       	add	r24, r24
    2292:	91 1d       	adc	r25, r1
    2294:	96 95       	lsr	r25
    2296:	87 95       	ror	r24
    2298:	97 f9       	bld	r25, 7
    229a:	08 95       	ret
    229c:	e1 e0       	ldi	r30, 0x01	; 1
    229e:	66 0f       	add	r22, r22
    22a0:	77 1f       	adc	r23, r23
    22a2:	88 1f       	adc	r24, r24
    22a4:	bb 1f       	adc	r27, r27
    22a6:	62 17       	cp	r22, r18
    22a8:	73 07       	cpc	r23, r19
    22aa:	84 07       	cpc	r24, r20
    22ac:	ba 07       	cpc	r27, r26
    22ae:	20 f0       	brcs	.+8      	; 0x22b8 <__divsf3_pse+0xaa>
    22b0:	62 1b       	sub	r22, r18
    22b2:	73 0b       	sbc	r23, r19
    22b4:	84 0b       	sbc	r24, r20
    22b6:	ba 0b       	sbc	r27, r26
    22b8:	ee 1f       	adc	r30, r30
    22ba:	88 f7       	brcc	.-30     	; 0x229e <__divsf3_pse+0x90>
    22bc:	e0 95       	com	r30
    22be:	08 95       	ret

000022c0 <__fixsfsi>:
    22c0:	04 d0       	rcall	.+8      	; 0x22ca <__fixunssfsi>
    22c2:	68 94       	set
    22c4:	b1 11       	cpse	r27, r1
    22c6:	37 c1       	rjmp	.+622    	; 0x2536 <__fp_szero>
    22c8:	08 95       	ret

000022ca <__fixunssfsi>:
    22ca:	1a d1       	rcall	.+564    	; 0x2500 <__fp_splitA>
    22cc:	88 f0       	brcs	.+34     	; 0x22f0 <__fixunssfsi+0x26>
    22ce:	9f 57       	subi	r25, 0x7F	; 127
    22d0:	90 f0       	brcs	.+36     	; 0x22f6 <__fixunssfsi+0x2c>
    22d2:	b9 2f       	mov	r27, r25
    22d4:	99 27       	eor	r25, r25
    22d6:	b7 51       	subi	r27, 0x17	; 23
    22d8:	a0 f0       	brcs	.+40     	; 0x2302 <__fixunssfsi+0x38>
    22da:	d1 f0       	breq	.+52     	; 0x2310 <__fixunssfsi+0x46>
    22dc:	66 0f       	add	r22, r22
    22de:	77 1f       	adc	r23, r23
    22e0:	88 1f       	adc	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	1a f0       	brmi	.+6      	; 0x22ec <__fixunssfsi+0x22>
    22e6:	ba 95       	dec	r27
    22e8:	c9 f7       	brne	.-14     	; 0x22dc <__fixunssfsi+0x12>
    22ea:	12 c0       	rjmp	.+36     	; 0x2310 <__fixunssfsi+0x46>
    22ec:	b1 30       	cpi	r27, 0x01	; 1
    22ee:	81 f0       	breq	.+32     	; 0x2310 <__fixunssfsi+0x46>
    22f0:	21 d1       	rcall	.+578    	; 0x2534 <__fp_zero>
    22f2:	b1 e0       	ldi	r27, 0x01	; 1
    22f4:	08 95       	ret
    22f6:	1e c1       	rjmp	.+572    	; 0x2534 <__fp_zero>
    22f8:	67 2f       	mov	r22, r23
    22fa:	78 2f       	mov	r23, r24
    22fc:	88 27       	eor	r24, r24
    22fe:	b8 5f       	subi	r27, 0xF8	; 248
    2300:	39 f0       	breq	.+14     	; 0x2310 <__fixunssfsi+0x46>
    2302:	b9 3f       	cpi	r27, 0xF9	; 249
    2304:	cc f3       	brlt	.-14     	; 0x22f8 <__fixunssfsi+0x2e>
    2306:	86 95       	lsr	r24
    2308:	77 95       	ror	r23
    230a:	67 95       	ror	r22
    230c:	b3 95       	inc	r27
    230e:	d9 f7       	brne	.-10     	; 0x2306 <__fixunssfsi+0x3c>
    2310:	3e f4       	brtc	.+14     	; 0x2320 <__fixunssfsi+0x56>
    2312:	90 95       	com	r25
    2314:	80 95       	com	r24
    2316:	70 95       	com	r23
    2318:	61 95       	neg	r22
    231a:	7f 4f       	sbci	r23, 0xFF	; 255
    231c:	8f 4f       	sbci	r24, 0xFF	; 255
    231e:	9f 4f       	sbci	r25, 0xFF	; 255
    2320:	08 95       	ret

00002322 <__floatunsisf>:
    2322:	e8 94       	clt
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <__floatsisf+0x12>

00002326 <__floatsisf>:
    2326:	97 fb       	bst	r25, 7
    2328:	3e f4       	brtc	.+14     	; 0x2338 <__floatsisf+0x12>
    232a:	90 95       	com	r25
    232c:	80 95       	com	r24
    232e:	70 95       	com	r23
    2330:	61 95       	neg	r22
    2332:	7f 4f       	sbci	r23, 0xFF	; 255
    2334:	8f 4f       	sbci	r24, 0xFF	; 255
    2336:	9f 4f       	sbci	r25, 0xFF	; 255
    2338:	99 23       	and	r25, r25
    233a:	a9 f0       	breq	.+42     	; 0x2366 <__floatsisf+0x40>
    233c:	f9 2f       	mov	r31, r25
    233e:	96 e9       	ldi	r25, 0x96	; 150
    2340:	bb 27       	eor	r27, r27
    2342:	93 95       	inc	r25
    2344:	f6 95       	lsr	r31
    2346:	87 95       	ror	r24
    2348:	77 95       	ror	r23
    234a:	67 95       	ror	r22
    234c:	b7 95       	ror	r27
    234e:	f1 11       	cpse	r31, r1
    2350:	f8 cf       	rjmp	.-16     	; 0x2342 <__floatsisf+0x1c>
    2352:	fa f4       	brpl	.+62     	; 0x2392 <__floatsisf+0x6c>
    2354:	bb 0f       	add	r27, r27
    2356:	11 f4       	brne	.+4      	; 0x235c <__floatsisf+0x36>
    2358:	60 ff       	sbrs	r22, 0
    235a:	1b c0       	rjmp	.+54     	; 0x2392 <__floatsisf+0x6c>
    235c:	6f 5f       	subi	r22, 0xFF	; 255
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	8f 4f       	sbci	r24, 0xFF	; 255
    2362:	9f 4f       	sbci	r25, 0xFF	; 255
    2364:	16 c0       	rjmp	.+44     	; 0x2392 <__floatsisf+0x6c>
    2366:	88 23       	and	r24, r24
    2368:	11 f0       	breq	.+4      	; 0x236e <__floatsisf+0x48>
    236a:	96 e9       	ldi	r25, 0x96	; 150
    236c:	11 c0       	rjmp	.+34     	; 0x2390 <__floatsisf+0x6a>
    236e:	77 23       	and	r23, r23
    2370:	21 f0       	breq	.+8      	; 0x237a <__floatsisf+0x54>
    2372:	9e e8       	ldi	r25, 0x8E	; 142
    2374:	87 2f       	mov	r24, r23
    2376:	76 2f       	mov	r23, r22
    2378:	05 c0       	rjmp	.+10     	; 0x2384 <__floatsisf+0x5e>
    237a:	66 23       	and	r22, r22
    237c:	71 f0       	breq	.+28     	; 0x239a <__floatsisf+0x74>
    237e:	96 e8       	ldi	r25, 0x86	; 134
    2380:	86 2f       	mov	r24, r22
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	2a f0       	brmi	.+10     	; 0x2392 <__floatsisf+0x6c>
    2388:	9a 95       	dec	r25
    238a:	66 0f       	add	r22, r22
    238c:	77 1f       	adc	r23, r23
    238e:	88 1f       	adc	r24, r24
    2390:	da f7       	brpl	.-10     	; 0x2388 <__floatsisf+0x62>
    2392:	88 0f       	add	r24, r24
    2394:	96 95       	lsr	r25
    2396:	87 95       	ror	r24
    2398:	97 f9       	bld	r25, 7
    239a:	08 95       	ret

0000239c <__fp_cmp>:
    239c:	99 0f       	add	r25, r25
    239e:	00 08       	sbc	r0, r0
    23a0:	55 0f       	add	r21, r21
    23a2:	aa 0b       	sbc	r26, r26
    23a4:	e0 e8       	ldi	r30, 0x80	; 128
    23a6:	fe ef       	ldi	r31, 0xFE	; 254
    23a8:	16 16       	cp	r1, r22
    23aa:	17 06       	cpc	r1, r23
    23ac:	e8 07       	cpc	r30, r24
    23ae:	f9 07       	cpc	r31, r25
    23b0:	c0 f0       	brcs	.+48     	; 0x23e2 <__fp_cmp+0x46>
    23b2:	12 16       	cp	r1, r18
    23b4:	13 06       	cpc	r1, r19
    23b6:	e4 07       	cpc	r30, r20
    23b8:	f5 07       	cpc	r31, r21
    23ba:	98 f0       	brcs	.+38     	; 0x23e2 <__fp_cmp+0x46>
    23bc:	62 1b       	sub	r22, r18
    23be:	73 0b       	sbc	r23, r19
    23c0:	84 0b       	sbc	r24, r20
    23c2:	95 0b       	sbc	r25, r21
    23c4:	39 f4       	brne	.+14     	; 0x23d4 <__fp_cmp+0x38>
    23c6:	0a 26       	eor	r0, r26
    23c8:	61 f0       	breq	.+24     	; 0x23e2 <__fp_cmp+0x46>
    23ca:	23 2b       	or	r18, r19
    23cc:	24 2b       	or	r18, r20
    23ce:	25 2b       	or	r18, r21
    23d0:	21 f4       	brne	.+8      	; 0x23da <__fp_cmp+0x3e>
    23d2:	08 95       	ret
    23d4:	0a 26       	eor	r0, r26
    23d6:	09 f4       	brne	.+2      	; 0x23da <__fp_cmp+0x3e>
    23d8:	a1 40       	sbci	r26, 0x01	; 1
    23da:	a6 95       	lsr	r26
    23dc:	8f ef       	ldi	r24, 0xFF	; 255
    23de:	81 1d       	adc	r24, r1
    23e0:	81 1d       	adc	r24, r1
    23e2:	08 95       	ret

000023e4 <__fp_inf>:
    23e4:	97 f9       	bld	r25, 7
    23e6:	9f 67       	ori	r25, 0x7F	; 127
    23e8:	80 e8       	ldi	r24, 0x80	; 128
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	08 95       	ret

000023f0 <__fp_nan>:
    23f0:	9f ef       	ldi	r25, 0xFF	; 255
    23f2:	80 ec       	ldi	r24, 0xC0	; 192
    23f4:	08 95       	ret

000023f6 <__fp_powser>:
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	1f 93       	push	r17
    23fc:	0f 93       	push	r16
    23fe:	ff 92       	push	r15
    2400:	ef 92       	push	r14
    2402:	df 92       	push	r13
    2404:	7b 01       	movw	r14, r22
    2406:	8c 01       	movw	r16, r24
    2408:	68 94       	set
    240a:	05 c0       	rjmp	.+10     	; 0x2416 <__fp_powser+0x20>
    240c:	da 2e       	mov	r13, r26
    240e:	ef 01       	movw	r28, r30
    2410:	ab d0       	rcall	.+342    	; 0x2568 <__mulsf3x>
    2412:	fe 01       	movw	r30, r28
    2414:	e8 94       	clt
    2416:	a5 91       	lpm	r26, Z+
    2418:	25 91       	lpm	r18, Z+
    241a:	35 91       	lpm	r19, Z+
    241c:	45 91       	lpm	r20, Z+
    241e:	55 91       	lpm	r21, Z+
    2420:	ae f3       	brts	.-22     	; 0x240c <__fp_powser+0x16>
    2422:	ef 01       	movw	r28, r30
    2424:	8b de       	rcall	.-746    	; 0x213c <__addsf3x>
    2426:	fe 01       	movw	r30, r28
    2428:	97 01       	movw	r18, r14
    242a:	a8 01       	movw	r20, r16
    242c:	da 94       	dec	r13
    242e:	79 f7       	brne	.-34     	; 0x240e <__fp_powser+0x18>
    2430:	df 90       	pop	r13
    2432:	ef 90       	pop	r14
    2434:	ff 90       	pop	r15
    2436:	0f 91       	pop	r16
    2438:	1f 91       	pop	r17
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <__fp_pscA>:
    2440:	00 24       	eor	r0, r0
    2442:	0a 94       	dec	r0
    2444:	16 16       	cp	r1, r22
    2446:	17 06       	cpc	r1, r23
    2448:	18 06       	cpc	r1, r24
    244a:	09 06       	cpc	r0, r25
    244c:	08 95       	ret

0000244e <__fp_pscB>:
    244e:	00 24       	eor	r0, r0
    2450:	0a 94       	dec	r0
    2452:	12 16       	cp	r1, r18
    2454:	13 06       	cpc	r1, r19
    2456:	14 06       	cpc	r1, r20
    2458:	05 06       	cpc	r0, r21
    245a:	08 95       	ret
    245c:	c9 cf       	rjmp	.-110    	; 0x23f0 <__fp_nan>

0000245e <__fp_rempio2>:
    245e:	50 d0       	rcall	.+160    	; 0x2500 <__fp_splitA>
    2460:	e8 f3       	brcs	.-6      	; 0x245c <__fp_pscB+0xe>
    2462:	e8 94       	clt
    2464:	e0 e0       	ldi	r30, 0x00	; 0
    2466:	bb 27       	eor	r27, r27
    2468:	9f 57       	subi	r25, 0x7F	; 127
    246a:	f0 f0       	brcs	.+60     	; 0x24a8 <__fp_rempio2+0x4a>
    246c:	2a ed       	ldi	r18, 0xDA	; 218
    246e:	3f e0       	ldi	r19, 0x0F	; 15
    2470:	49 ec       	ldi	r20, 0xC9	; 201
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <__fp_rempio2+0x22>
    2474:	ee 0f       	add	r30, r30
    2476:	bb 0f       	add	r27, r27
    2478:	66 1f       	adc	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	88 1f       	adc	r24, r24
    247e:	28 f0       	brcs	.+10     	; 0x248a <__fp_rempio2+0x2c>
    2480:	b2 3a       	cpi	r27, 0xA2	; 162
    2482:	62 07       	cpc	r22, r18
    2484:	73 07       	cpc	r23, r19
    2486:	84 07       	cpc	r24, r20
    2488:	28 f0       	brcs	.+10     	; 0x2494 <__fp_rempio2+0x36>
    248a:	b2 5a       	subi	r27, 0xA2	; 162
    248c:	62 0b       	sbc	r22, r18
    248e:	73 0b       	sbc	r23, r19
    2490:	84 0b       	sbc	r24, r20
    2492:	e3 95       	inc	r30
    2494:	9a 95       	dec	r25
    2496:	72 f7       	brpl	.-36     	; 0x2474 <__fp_rempio2+0x16>
    2498:	80 38       	cpi	r24, 0x80	; 128
    249a:	30 f4       	brcc	.+12     	; 0x24a8 <__fp_rempio2+0x4a>
    249c:	9a 95       	dec	r25
    249e:	bb 0f       	add	r27, r27
    24a0:	66 1f       	adc	r22, r22
    24a2:	77 1f       	adc	r23, r23
    24a4:	88 1f       	adc	r24, r24
    24a6:	d2 f7       	brpl	.-12     	; 0x249c <__fp_rempio2+0x3e>
    24a8:	90 48       	sbci	r25, 0x80	; 128
    24aa:	3d c1       	rjmp	.+634    	; 0x2726 <__fp_mpack_finite>

000024ac <__fp_round>:
    24ac:	09 2e       	mov	r0, r25
    24ae:	03 94       	inc	r0
    24b0:	00 0c       	add	r0, r0
    24b2:	11 f4       	brne	.+4      	; 0x24b8 <__fp_round+0xc>
    24b4:	88 23       	and	r24, r24
    24b6:	52 f0       	brmi	.+20     	; 0x24cc <__fp_round+0x20>
    24b8:	bb 0f       	add	r27, r27
    24ba:	40 f4       	brcc	.+16     	; 0x24cc <__fp_round+0x20>
    24bc:	bf 2b       	or	r27, r31
    24be:	11 f4       	brne	.+4      	; 0x24c4 <__fp_round+0x18>
    24c0:	60 ff       	sbrs	r22, 0
    24c2:	04 c0       	rjmp	.+8      	; 0x24cc <__fp_round+0x20>
    24c4:	6f 5f       	subi	r22, 0xFF	; 255
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	08 95       	ret

000024ce <__fp_sinus>:
    24ce:	ef 93       	push	r30
    24d0:	e0 ff       	sbrs	r30, 0
    24d2:	06 c0       	rjmp	.+12     	; 0x24e0 <__fp_sinus+0x12>
    24d4:	a2 ea       	ldi	r26, 0xA2	; 162
    24d6:	2a ed       	ldi	r18, 0xDA	; 218
    24d8:	3f e0       	ldi	r19, 0x0F	; 15
    24da:	49 ec       	ldi	r20, 0xC9	; 201
    24dc:	5f eb       	ldi	r21, 0xBF	; 191
    24de:	2e de       	rcall	.-932    	; 0x213c <__addsf3x>
    24e0:	e5 df       	rcall	.-54     	; 0x24ac <__fp_round>
    24e2:	0f 90       	pop	r0
    24e4:	03 94       	inc	r0
    24e6:	01 fc       	sbrc	r0, 1
    24e8:	90 58       	subi	r25, 0x80	; 128
    24ea:	e4 ee       	ldi	r30, 0xE4	; 228
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	27 c1       	rjmp	.+590    	; 0x273e <__fp_powsodd>

000024f0 <__fp_split3>:
    24f0:	57 fd       	sbrc	r21, 7
    24f2:	90 58       	subi	r25, 0x80	; 128
    24f4:	44 0f       	add	r20, r20
    24f6:	55 1f       	adc	r21, r21
    24f8:	59 f0       	breq	.+22     	; 0x2510 <__fp_splitA+0x10>
    24fa:	5f 3f       	cpi	r21, 0xFF	; 255
    24fc:	71 f0       	breq	.+28     	; 0x251a <__fp_splitA+0x1a>
    24fe:	47 95       	ror	r20

00002500 <__fp_splitA>:
    2500:	88 0f       	add	r24, r24
    2502:	97 fb       	bst	r25, 7
    2504:	99 1f       	adc	r25, r25
    2506:	61 f0       	breq	.+24     	; 0x2520 <__fp_splitA+0x20>
    2508:	9f 3f       	cpi	r25, 0xFF	; 255
    250a:	79 f0       	breq	.+30     	; 0x252a <__fp_splitA+0x2a>
    250c:	87 95       	ror	r24
    250e:	08 95       	ret
    2510:	12 16       	cp	r1, r18
    2512:	13 06       	cpc	r1, r19
    2514:	14 06       	cpc	r1, r20
    2516:	55 1f       	adc	r21, r21
    2518:	f2 cf       	rjmp	.-28     	; 0x24fe <__fp_split3+0xe>
    251a:	46 95       	lsr	r20
    251c:	f1 df       	rcall	.-30     	; 0x2500 <__fp_splitA>
    251e:	08 c0       	rjmp	.+16     	; 0x2530 <__fp_splitA+0x30>
    2520:	16 16       	cp	r1, r22
    2522:	17 06       	cpc	r1, r23
    2524:	18 06       	cpc	r1, r24
    2526:	99 1f       	adc	r25, r25
    2528:	f1 cf       	rjmp	.-30     	; 0x250c <__fp_splitA+0xc>
    252a:	86 95       	lsr	r24
    252c:	71 05       	cpc	r23, r1
    252e:	61 05       	cpc	r22, r1
    2530:	08 94       	sec
    2532:	08 95       	ret

00002534 <__fp_zero>:
    2534:	e8 94       	clt

00002536 <__fp_szero>:
    2536:	bb 27       	eor	r27, r27
    2538:	66 27       	eor	r22, r22
    253a:	77 27       	eor	r23, r23
    253c:	cb 01       	movw	r24, r22
    253e:	97 f9       	bld	r25, 7
    2540:	08 95       	ret

00002542 <inverse>:
    2542:	9b 01       	movw	r18, r22
    2544:	ac 01       	movw	r20, r24
    2546:	60 e0       	ldi	r22, 0x00	; 0
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	80 e8       	ldi	r24, 0x80	; 128
    254c:	9f e3       	ldi	r25, 0x3F	; 63
    254e:	50 ce       	rjmp	.-864    	; 0x21f0 <__divsf3>

00002550 <__mulsf3>:
    2550:	0b d0       	rcall	.+22     	; 0x2568 <__mulsf3x>
    2552:	ac cf       	rjmp	.-168    	; 0x24ac <__fp_round>
    2554:	75 df       	rcall	.-278    	; 0x2440 <__fp_pscA>
    2556:	28 f0       	brcs	.+10     	; 0x2562 <__mulsf3+0x12>
    2558:	7a df       	rcall	.-268    	; 0x244e <__fp_pscB>
    255a:	18 f0       	brcs	.+6      	; 0x2562 <__mulsf3+0x12>
    255c:	95 23       	and	r25, r21
    255e:	09 f0       	breq	.+2      	; 0x2562 <__mulsf3+0x12>
    2560:	41 cf       	rjmp	.-382    	; 0x23e4 <__fp_inf>
    2562:	46 cf       	rjmp	.-372    	; 0x23f0 <__fp_nan>
    2564:	11 24       	eor	r1, r1
    2566:	e7 cf       	rjmp	.-50     	; 0x2536 <__fp_szero>

00002568 <__mulsf3x>:
    2568:	c3 df       	rcall	.-122    	; 0x24f0 <__fp_split3>
    256a:	a0 f3       	brcs	.-24     	; 0x2554 <__mulsf3+0x4>

0000256c <__mulsf3_pse>:
    256c:	95 9f       	mul	r25, r21
    256e:	d1 f3       	breq	.-12     	; 0x2564 <__mulsf3+0x14>
    2570:	95 0f       	add	r25, r21
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	55 1f       	adc	r21, r21
    2576:	62 9f       	mul	r22, r18
    2578:	f0 01       	movw	r30, r0
    257a:	72 9f       	mul	r23, r18
    257c:	bb 27       	eor	r27, r27
    257e:	f0 0d       	add	r31, r0
    2580:	b1 1d       	adc	r27, r1
    2582:	63 9f       	mul	r22, r19
    2584:	aa 27       	eor	r26, r26
    2586:	f0 0d       	add	r31, r0
    2588:	b1 1d       	adc	r27, r1
    258a:	aa 1f       	adc	r26, r26
    258c:	64 9f       	mul	r22, r20
    258e:	66 27       	eor	r22, r22
    2590:	b0 0d       	add	r27, r0
    2592:	a1 1d       	adc	r26, r1
    2594:	66 1f       	adc	r22, r22
    2596:	82 9f       	mul	r24, r18
    2598:	22 27       	eor	r18, r18
    259a:	b0 0d       	add	r27, r0
    259c:	a1 1d       	adc	r26, r1
    259e:	62 1f       	adc	r22, r18
    25a0:	73 9f       	mul	r23, r19
    25a2:	b0 0d       	add	r27, r0
    25a4:	a1 1d       	adc	r26, r1
    25a6:	62 1f       	adc	r22, r18
    25a8:	83 9f       	mul	r24, r19
    25aa:	a0 0d       	add	r26, r0
    25ac:	61 1d       	adc	r22, r1
    25ae:	22 1f       	adc	r18, r18
    25b0:	74 9f       	mul	r23, r20
    25b2:	33 27       	eor	r19, r19
    25b4:	a0 0d       	add	r26, r0
    25b6:	61 1d       	adc	r22, r1
    25b8:	23 1f       	adc	r18, r19
    25ba:	84 9f       	mul	r24, r20
    25bc:	60 0d       	add	r22, r0
    25be:	21 1d       	adc	r18, r1
    25c0:	82 2f       	mov	r24, r18
    25c2:	76 2f       	mov	r23, r22
    25c4:	6a 2f       	mov	r22, r26
    25c6:	11 24       	eor	r1, r1
    25c8:	9f 57       	subi	r25, 0x7F	; 127
    25ca:	50 40       	sbci	r21, 0x00	; 0
    25cc:	8a f0       	brmi	.+34     	; 0x25f0 <__mulsf3_pse+0x84>
    25ce:	e1 f0       	breq	.+56     	; 0x2608 <__mulsf3_pse+0x9c>
    25d0:	88 23       	and	r24, r24
    25d2:	4a f0       	brmi	.+18     	; 0x25e6 <__mulsf3_pse+0x7a>
    25d4:	ee 0f       	add	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	bb 1f       	adc	r27, r27
    25da:	66 1f       	adc	r22, r22
    25dc:	77 1f       	adc	r23, r23
    25de:	88 1f       	adc	r24, r24
    25e0:	91 50       	subi	r25, 0x01	; 1
    25e2:	50 40       	sbci	r21, 0x00	; 0
    25e4:	a9 f7       	brne	.-22     	; 0x25d0 <__mulsf3_pse+0x64>
    25e6:	9e 3f       	cpi	r25, 0xFE	; 254
    25e8:	51 05       	cpc	r21, r1
    25ea:	70 f0       	brcs	.+28     	; 0x2608 <__mulsf3_pse+0x9c>
    25ec:	fb ce       	rjmp	.-522    	; 0x23e4 <__fp_inf>
    25ee:	a3 cf       	rjmp	.-186    	; 0x2536 <__fp_szero>
    25f0:	5f 3f       	cpi	r21, 0xFF	; 255
    25f2:	ec f3       	brlt	.-6      	; 0x25ee <__mulsf3_pse+0x82>
    25f4:	98 3e       	cpi	r25, 0xE8	; 232
    25f6:	dc f3       	brlt	.-10     	; 0x25ee <__mulsf3_pse+0x82>
    25f8:	86 95       	lsr	r24
    25fa:	77 95       	ror	r23
    25fc:	67 95       	ror	r22
    25fe:	b7 95       	ror	r27
    2600:	f7 95       	ror	r31
    2602:	e7 95       	ror	r30
    2604:	9f 5f       	subi	r25, 0xFF	; 255
    2606:	c1 f7       	brne	.-16     	; 0x25f8 <__mulsf3_pse+0x8c>
    2608:	fe 2b       	or	r31, r30
    260a:	88 0f       	add	r24, r24
    260c:	91 1d       	adc	r25, r1
    260e:	96 95       	lsr	r25
    2610:	87 95       	ror	r24
    2612:	97 f9       	bld	r25, 7
    2614:	08 95       	ret

00002616 <pow>:
    2616:	fa 01       	movw	r30, r20
    2618:	ee 0f       	add	r30, r30
    261a:	ff 1f       	adc	r31, r31
    261c:	30 96       	adiw	r30, 0x00	; 0
    261e:	21 05       	cpc	r18, r1
    2620:	31 05       	cpc	r19, r1
    2622:	99 f1       	breq	.+102    	; 0x268a <pow+0x74>
    2624:	61 15       	cp	r22, r1
    2626:	71 05       	cpc	r23, r1
    2628:	61 f4       	brne	.+24     	; 0x2642 <pow+0x2c>
    262a:	80 38       	cpi	r24, 0x80	; 128
    262c:	bf e3       	ldi	r27, 0x3F	; 63
    262e:	9b 07       	cpc	r25, r27
    2630:	49 f1       	breq	.+82     	; 0x2684 <pow+0x6e>
    2632:	68 94       	set
    2634:	90 38       	cpi	r25, 0x80	; 128
    2636:	81 05       	cpc	r24, r1
    2638:	61 f0       	breq	.+24     	; 0x2652 <pow+0x3c>
    263a:	80 38       	cpi	r24, 0x80	; 128
    263c:	bf ef       	ldi	r27, 0xFF	; 255
    263e:	9b 07       	cpc	r25, r27
    2640:	41 f0       	breq	.+16     	; 0x2652 <pow+0x3c>
    2642:	99 23       	and	r25, r25
    2644:	42 f5       	brpl	.+80     	; 0x2696 <pow+0x80>
    2646:	ff 3f       	cpi	r31, 0xFF	; 255
    2648:	e1 05       	cpc	r30, r1
    264a:	31 05       	cpc	r19, r1
    264c:	21 05       	cpc	r18, r1
    264e:	11 f1       	breq	.+68     	; 0x2694 <pow+0x7e>
    2650:	e8 94       	clt
    2652:	08 94       	sec
    2654:	e7 95       	ror	r30
    2656:	d9 01       	movw	r26, r18
    2658:	aa 23       	and	r26, r26
    265a:	29 f4       	brne	.+10     	; 0x2666 <pow+0x50>
    265c:	ab 2f       	mov	r26, r27
    265e:	be 2f       	mov	r27, r30
    2660:	f8 5f       	subi	r31, 0xF8	; 248
    2662:	d0 f3       	brcs	.-12     	; 0x2658 <pow+0x42>
    2664:	10 c0       	rjmp	.+32     	; 0x2686 <pow+0x70>
    2666:	ff 5f       	subi	r31, 0xFF	; 255
    2668:	70 f4       	brcc	.+28     	; 0x2686 <pow+0x70>
    266a:	a6 95       	lsr	r26
    266c:	e0 f7       	brcc	.-8      	; 0x2666 <pow+0x50>
    266e:	f7 39       	cpi	r31, 0x97	; 151
    2670:	50 f0       	brcs	.+20     	; 0x2686 <pow+0x70>
    2672:	19 f0       	breq	.+6      	; 0x267a <pow+0x64>
    2674:	ff 3a       	cpi	r31, 0xAF	; 175
    2676:	38 f4       	brcc	.+14     	; 0x2686 <pow+0x70>
    2678:	9f 77       	andi	r25, 0x7F	; 127
    267a:	9f 93       	push	r25
    267c:	0c d0       	rcall	.+24     	; 0x2696 <pow+0x80>
    267e:	0f 90       	pop	r0
    2680:	07 fc       	sbrc	r0, 7
    2682:	90 58       	subi	r25, 0x80	; 128
    2684:	08 95       	ret
    2686:	3e f0       	brts	.+14     	; 0x2696 <pow+0x80>
    2688:	b3 ce       	rjmp	.-666    	; 0x23f0 <__fp_nan>
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	70 e0       	ldi	r23, 0x00	; 0
    268e:	80 e8       	ldi	r24, 0x80	; 128
    2690:	9f e3       	ldi	r25, 0x3F	; 63
    2692:	08 95       	ret
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	9f 77       	andi	r25, 0x7F	; 127
    2698:	5f 93       	push	r21
    269a:	4f 93       	push	r20
    269c:	3f 93       	push	r19
    269e:	2f 93       	push	r18
    26a0:	9a d0       	rcall	.+308    	; 0x27d6 <log>
    26a2:	2f 91       	pop	r18
    26a4:	3f 91       	pop	r19
    26a6:	4f 91       	pop	r20
    26a8:	5f 91       	pop	r21
    26aa:	52 df       	rcall	.-348    	; 0x2550 <__mulsf3>
    26ac:	0e c0       	rjmp	.+28     	; 0x26ca <exp>

000026ae <sin>:
    26ae:	9f 93       	push	r25
    26b0:	d6 de       	rcall	.-596    	; 0x245e <__fp_rempio2>
    26b2:	0f 90       	pop	r0
    26b4:	07 fc       	sbrc	r0, 7
    26b6:	ee 5f       	subi	r30, 0xFE	; 254
    26b8:	0a cf       	rjmp	.-492    	; 0x24ce <__fp_sinus>

000026ba <square>:
    26ba:	9b 01       	movw	r18, r22
    26bc:	ac 01       	movw	r20, r24
    26be:	48 cf       	rjmp	.-368    	; 0x2550 <__mulsf3>
    26c0:	19 f4       	brne	.+6      	; 0x26c8 <square+0xe>
    26c2:	0e f0       	brts	.+2      	; 0x26c6 <square+0xc>
    26c4:	8f ce       	rjmp	.-738    	; 0x23e4 <__fp_inf>
    26c6:	36 cf       	rjmp	.-404    	; 0x2534 <__fp_zero>
    26c8:	93 ce       	rjmp	.-730    	; 0x23f0 <__fp_nan>

000026ca <exp>:
    26ca:	1a df       	rcall	.-460    	; 0x2500 <__fp_splitA>
    26cc:	c8 f3       	brcs	.-14     	; 0x26c0 <square+0x6>
    26ce:	96 38       	cpi	r25, 0x86	; 134
    26d0:	c0 f7       	brcc	.-16     	; 0x26c2 <square+0x8>
    26d2:	07 f8       	bld	r0, 7
    26d4:	0f 92       	push	r0
    26d6:	e8 94       	clt
    26d8:	2b e3       	ldi	r18, 0x3B	; 59
    26da:	3a ea       	ldi	r19, 0xAA	; 170
    26dc:	48 eb       	ldi	r20, 0xB8	; 184
    26de:	5f e7       	ldi	r21, 0x7F	; 127
    26e0:	45 df       	rcall	.-374    	; 0x256c <__mulsf3_pse>
    26e2:	0f 92       	push	r0
    26e4:	0f 92       	push	r0
    26e6:	0f 92       	push	r0
    26e8:	4d b7       	in	r20, 0x3d	; 61
    26ea:	5e b7       	in	r21, 0x3e	; 62
    26ec:	0f 92       	push	r0
    26ee:	b3 d0       	rcall	.+358    	; 0x2856 <modf>
    26f0:	e2 e0       	ldi	r30, 0x02	; 2
    26f2:	f1 e0       	ldi	r31, 0x01	; 1
    26f4:	80 de       	rcall	.-768    	; 0x23f6 <__fp_powser>
    26f6:	4f 91       	pop	r20
    26f8:	5f 91       	pop	r21
    26fa:	ef 91       	pop	r30
    26fc:	ff 91       	pop	r31
    26fe:	e5 95       	asr	r30
    2700:	ee 1f       	adc	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	49 f0       	breq	.+18     	; 0x2718 <exp+0x4e>
    2706:	fe 57       	subi	r31, 0x7E	; 126
    2708:	e0 68       	ori	r30, 0x80	; 128
    270a:	44 27       	eor	r20, r20
    270c:	ee 0f       	add	r30, r30
    270e:	44 1f       	adc	r20, r20
    2710:	fa 95       	dec	r31
    2712:	e1 f7       	brne	.-8      	; 0x270c <exp+0x42>
    2714:	41 95       	neg	r20
    2716:	55 0b       	sbc	r21, r21
    2718:	25 d0       	rcall	.+74     	; 0x2764 <ldexp>
    271a:	0f 90       	pop	r0
    271c:	07 fe       	sbrs	r0, 7
    271e:	11 cf       	rjmp	.-478    	; 0x2542 <inverse>
    2720:	08 95       	ret

00002722 <__fp_mpack>:
    2722:	9f 3f       	cpi	r25, 0xFF	; 255
    2724:	31 f0       	breq	.+12     	; 0x2732 <__fp_mpack_finite+0xc>

00002726 <__fp_mpack_finite>:
    2726:	91 50       	subi	r25, 0x01	; 1
    2728:	20 f4       	brcc	.+8      	; 0x2732 <__fp_mpack_finite+0xc>
    272a:	87 95       	ror	r24
    272c:	77 95       	ror	r23
    272e:	67 95       	ror	r22
    2730:	b7 95       	ror	r27
    2732:	88 0f       	add	r24, r24
    2734:	91 1d       	adc	r25, r1
    2736:	96 95       	lsr	r25
    2738:	87 95       	ror	r24
    273a:	97 f9       	bld	r25, 7
    273c:	08 95       	ret

0000273e <__fp_powsodd>:
    273e:	9f 93       	push	r25
    2740:	8f 93       	push	r24
    2742:	7f 93       	push	r23
    2744:	6f 93       	push	r22
    2746:	ff 93       	push	r31
    2748:	ef 93       	push	r30
    274a:	9b 01       	movw	r18, r22
    274c:	ac 01       	movw	r20, r24
    274e:	00 df       	rcall	.-512    	; 0x2550 <__mulsf3>
    2750:	ef 91       	pop	r30
    2752:	ff 91       	pop	r31
    2754:	50 de       	rcall	.-864    	; 0x23f6 <__fp_powser>
    2756:	2f 91       	pop	r18
    2758:	3f 91       	pop	r19
    275a:	4f 91       	pop	r20
    275c:	5f 91       	pop	r21
    275e:	f8 ce       	rjmp	.-528    	; 0x2550 <__mulsf3>
    2760:	41 ce       	rjmp	.-894    	; 0x23e4 <__fp_inf>
    2762:	df cf       	rjmp	.-66     	; 0x2722 <__fp_mpack>

00002764 <ldexp>:
    2764:	cd de       	rcall	.-614    	; 0x2500 <__fp_splitA>
    2766:	e8 f3       	brcs	.-6      	; 0x2762 <__fp_powsodd+0x24>
    2768:	99 23       	and	r25, r25
    276a:	d9 f3       	breq	.-10     	; 0x2762 <__fp_powsodd+0x24>
    276c:	94 0f       	add	r25, r20
    276e:	51 1d       	adc	r21, r1
    2770:	bb f3       	brvs	.-18     	; 0x2760 <__fp_powsodd+0x22>
    2772:	91 50       	subi	r25, 0x01	; 1
    2774:	50 40       	sbci	r21, 0x00	; 0
    2776:	94 f0       	brlt	.+36     	; 0x279c <ldexp+0x38>
    2778:	59 f0       	breq	.+22     	; 0x2790 <ldexp+0x2c>
    277a:	88 23       	and	r24, r24
    277c:	32 f0       	brmi	.+12     	; 0x278a <ldexp+0x26>
    277e:	66 0f       	add	r22, r22
    2780:	77 1f       	adc	r23, r23
    2782:	88 1f       	adc	r24, r24
    2784:	91 50       	subi	r25, 0x01	; 1
    2786:	50 40       	sbci	r21, 0x00	; 0
    2788:	c1 f7       	brne	.-16     	; 0x277a <ldexp+0x16>
    278a:	9e 3f       	cpi	r25, 0xFE	; 254
    278c:	51 05       	cpc	r21, r1
    278e:	44 f7       	brge	.-48     	; 0x2760 <__fp_powsodd+0x22>
    2790:	88 0f       	add	r24, r24
    2792:	91 1d       	adc	r25, r1
    2794:	96 95       	lsr	r25
    2796:	87 95       	ror	r24
    2798:	97 f9       	bld	r25, 7
    279a:	08 95       	ret
    279c:	5f 3f       	cpi	r21, 0xFF	; 255
    279e:	ac f0       	brlt	.+42     	; 0x27ca <ldexp+0x66>
    27a0:	98 3e       	cpi	r25, 0xE8	; 232
    27a2:	9c f0       	brlt	.+38     	; 0x27ca <ldexp+0x66>
    27a4:	bb 27       	eor	r27, r27
    27a6:	86 95       	lsr	r24
    27a8:	77 95       	ror	r23
    27aa:	67 95       	ror	r22
    27ac:	b7 95       	ror	r27
    27ae:	08 f4       	brcc	.+2      	; 0x27b2 <ldexp+0x4e>
    27b0:	b1 60       	ori	r27, 0x01	; 1
    27b2:	93 95       	inc	r25
    27b4:	c1 f7       	brne	.-16     	; 0x27a6 <ldexp+0x42>
    27b6:	bb 0f       	add	r27, r27
    27b8:	58 f7       	brcc	.-42     	; 0x2790 <ldexp+0x2c>
    27ba:	11 f4       	brne	.+4      	; 0x27c0 <ldexp+0x5c>
    27bc:	60 ff       	sbrs	r22, 0
    27be:	e8 cf       	rjmp	.-48     	; 0x2790 <ldexp+0x2c>
    27c0:	6f 5f       	subi	r22, 0xFF	; 255
    27c2:	7f 4f       	sbci	r23, 0xFF	; 255
    27c4:	8f 4f       	sbci	r24, 0xFF	; 255
    27c6:	9f 4f       	sbci	r25, 0xFF	; 255
    27c8:	e3 cf       	rjmp	.-58     	; 0x2790 <ldexp+0x2c>
    27ca:	b5 ce       	rjmp	.-662    	; 0x2536 <__fp_szero>
    27cc:	0e f0       	brts	.+2      	; 0x27d0 <ldexp+0x6c>
    27ce:	a9 cf       	rjmp	.-174    	; 0x2722 <__fp_mpack>
    27d0:	0f ce       	rjmp	.-994    	; 0x23f0 <__fp_nan>
    27d2:	68 94       	set
    27d4:	07 ce       	rjmp	.-1010   	; 0x23e4 <__fp_inf>

000027d6 <log>:
    27d6:	94 de       	rcall	.-728    	; 0x2500 <__fp_splitA>
    27d8:	c8 f3       	brcs	.-14     	; 0x27cc <ldexp+0x68>
    27da:	99 23       	and	r25, r25
    27dc:	d1 f3       	breq	.-12     	; 0x27d2 <ldexp+0x6e>
    27de:	c6 f3       	brts	.-16     	; 0x27d0 <ldexp+0x6c>
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	1f 93       	push	r17
    27e6:	0f 93       	push	r16
    27e8:	ff 92       	push	r15
    27ea:	c9 2f       	mov	r28, r25
    27ec:	dd 27       	eor	r29, r29
    27ee:	88 23       	and	r24, r24
    27f0:	2a f0       	brmi	.+10     	; 0x27fc <log+0x26>
    27f2:	21 97       	sbiw	r28, 0x01	; 1
    27f4:	66 0f       	add	r22, r22
    27f6:	77 1f       	adc	r23, r23
    27f8:	88 1f       	adc	r24, r24
    27fa:	da f7       	brpl	.-10     	; 0x27f2 <log+0x1c>
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f eb       	ldi	r21, 0xBF	; 191
    2804:	9f e3       	ldi	r25, 0x3F	; 63
    2806:	88 39       	cpi	r24, 0x98	; 152
    2808:	20 f0       	brcs	.+8      	; 0x2812 <log+0x3c>
    280a:	80 3e       	cpi	r24, 0xE0	; 224
    280c:	30 f0       	brcs	.+12     	; 0x281a <log+0x44>
    280e:	21 96       	adiw	r28, 0x01	; 1
    2810:	8f 77       	andi	r24, 0x7F	; 127
    2812:	83 dc       	rcall	.-1786   	; 0x211a <__addsf3>
    2814:	ea e2       	ldi	r30, 0x2A	; 42
    2816:	f1 e0       	ldi	r31, 0x01	; 1
    2818:	03 c0       	rjmp	.+6      	; 0x2820 <log+0x4a>
    281a:	7f dc       	rcall	.-1794   	; 0x211a <__addsf3>
    281c:	e7 e5       	ldi	r30, 0x57	; 87
    281e:	f1 e0       	ldi	r31, 0x01	; 1
    2820:	ea dd       	rcall	.-1068   	; 0x23f6 <__fp_powser>
    2822:	8b 01       	movw	r16, r22
    2824:	be 01       	movw	r22, r28
    2826:	ec 01       	movw	r28, r24
    2828:	fb 2e       	mov	r15, r27
    282a:	6f 57       	subi	r22, 0x7F	; 127
    282c:	71 09       	sbc	r23, r1
    282e:	75 95       	asr	r23
    2830:	77 1f       	adc	r23, r23
    2832:	88 0b       	sbc	r24, r24
    2834:	99 0b       	sbc	r25, r25
    2836:	77 dd       	rcall	.-1298   	; 0x2326 <__floatsisf>
    2838:	28 e1       	ldi	r18, 0x18	; 24
    283a:	32 e7       	ldi	r19, 0x72	; 114
    283c:	41 e3       	ldi	r20, 0x31	; 49
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	93 de       	rcall	.-730    	; 0x2568 <__mulsf3x>
    2842:	af 2d       	mov	r26, r15
    2844:	98 01       	movw	r18, r16
    2846:	ae 01       	movw	r20, r28
    2848:	ff 90       	pop	r15
    284a:	0f 91       	pop	r16
    284c:	1f 91       	pop	r17
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	74 dc       	rcall	.-1816   	; 0x213c <__addsf3x>
    2854:	2b ce       	rjmp	.-938    	; 0x24ac <__fp_round>

00002856 <modf>:
    2856:	fa 01       	movw	r30, r20
    2858:	dc 01       	movw	r26, r24
    285a:	aa 0f       	add	r26, r26
    285c:	bb 1f       	adc	r27, r27
    285e:	9b 01       	movw	r18, r22
    2860:	ac 01       	movw	r20, r24
    2862:	bf 57       	subi	r27, 0x7F	; 127
    2864:	28 f4       	brcc	.+10     	; 0x2870 <modf+0x1a>
    2866:	22 27       	eor	r18, r18
    2868:	33 27       	eor	r19, r19
    286a:	44 27       	eor	r20, r20
    286c:	50 78       	andi	r21, 0x80	; 128
    286e:	1f c0       	rjmp	.+62     	; 0x28ae <modf+0x58>
    2870:	b7 51       	subi	r27, 0x17	; 23
    2872:	88 f4       	brcc	.+34     	; 0x2896 <modf+0x40>
    2874:	ab 2f       	mov	r26, r27
    2876:	00 24       	eor	r0, r0
    2878:	46 95       	lsr	r20
    287a:	37 95       	ror	r19
    287c:	27 95       	ror	r18
    287e:	01 1c       	adc	r0, r1
    2880:	a3 95       	inc	r26
    2882:	d2 f3       	brmi	.-12     	; 0x2878 <modf+0x22>
    2884:	00 20       	and	r0, r0
    2886:	69 f0       	breq	.+26     	; 0x28a2 <modf+0x4c>
    2888:	22 0f       	add	r18, r18
    288a:	33 1f       	adc	r19, r19
    288c:	44 1f       	adc	r20, r20
    288e:	b3 95       	inc	r27
    2890:	da f3       	brmi	.-10     	; 0x2888 <modf+0x32>
    2892:	0d d0       	rcall	.+26     	; 0x28ae <modf+0x58>
    2894:	41 cc       	rjmp	.-1918   	; 0x2118 <__subsf3>
    2896:	61 30       	cpi	r22, 0x01	; 1
    2898:	71 05       	cpc	r23, r1
    289a:	a0 e8       	ldi	r26, 0x80	; 128
    289c:	8a 07       	cpc	r24, r26
    289e:	b9 46       	sbci	r27, 0x69	; 105
    28a0:	30 f4       	brcc	.+12     	; 0x28ae <modf+0x58>
    28a2:	9b 01       	movw	r18, r22
    28a4:	ac 01       	movw	r20, r24
    28a6:	66 27       	eor	r22, r22
    28a8:	77 27       	eor	r23, r23
    28aa:	88 27       	eor	r24, r24
    28ac:	90 78       	andi	r25, 0x80	; 128
    28ae:	30 96       	adiw	r30, 0x00	; 0
    28b0:	21 f0       	breq	.+8      	; 0x28ba <modf+0x64>
    28b2:	20 83       	st	Z, r18
    28b4:	31 83       	std	Z+1, r19	; 0x01
    28b6:	42 83       	std	Z+2, r20	; 0x02
    28b8:	53 83       	std	Z+3, r21	; 0x03
    28ba:	08 95       	ret

000028bc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    28bc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    28be:	91 8d       	ldd	r25, Z+25	; 0x19
    28c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    28c2:	89 2f       	mov	r24, r25
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	80 5c       	subi	r24, 0xC0	; 192
    28c8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ca:	82 1b       	sub	r24, r18
    28cc:	91 09       	sbc	r25, r1
}
    28ce:	8f 73       	andi	r24, 0x3F	; 63
    28d0:	99 27       	eor	r25, r25
    28d2:	08 95       	ret

000028d4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    28d4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    28d6:	91 8d       	ldd	r25, Z+25	; 0x19
    28d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    28da:	98 17       	cp	r25, r24
    28dc:	31 f0       	breq	.+12     	; 0x28ea <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    28de:	82 8d       	ldd	r24, Z+26	; 0x1a
    28e0:	e8 0f       	add	r30, r24
    28e2:	f1 1d       	adc	r31, r1
    28e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    28ea:	8f ef       	ldi	r24, 0xFF	; 255
    28ec:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    28ee:	08 95       	ret

000028f0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    28f0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    28f2:	91 8d       	ldd	r25, Z+25	; 0x19
    28f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    28f6:	98 17       	cp	r25, r24
    28f8:	61 f0       	breq	.+24     	; 0x2912 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    28fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    28fc:	df 01       	movw	r26, r30
    28fe:	a8 0f       	add	r26, r24
    2900:	b1 1d       	adc	r27, r1
    2902:	5d 96       	adiw	r26, 0x1d	; 29
    2904:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2906:	92 8d       	ldd	r25, Z+26	; 0x1a
    2908:	9f 5f       	subi	r25, 0xFF	; 255
    290a:	9f 73       	andi	r25, 0x3F	; 63
    290c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2912:	8f ef       	ldi	r24, 0xFF	; 255
    2914:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2916:	08 95       	ret

00002918 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2918:	fc 01       	movw	r30, r24
    291a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    291c:	44 8d       	ldd	r20, Z+28	; 0x1c
    291e:	25 2f       	mov	r18, r21
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	84 2f       	mov	r24, r20
    2924:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2926:	82 1b       	sub	r24, r18
    2928:	93 0b       	sbc	r25, r19
    292a:	54 17       	cp	r21, r20
    292c:	10 f0       	brcs	.+4      	; 0x2932 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    292e:	cf 96       	adiw	r24, 0x3f	; 63
    2930:	08 95       	ret
  return tail - head - 1;
    2932:	01 97       	sbiw	r24, 0x01	; 1
}
    2934:	08 95       	ret

00002936 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2936:	8d e2       	ldi	r24, 0x2D	; 45
    2938:	96 e1       	ldi	r25, 0x16	; 22
    293a:	89 2b       	or	r24, r25
    293c:	39 f0       	breq	.+14     	; 0x294c <_Z14serialEventRunv+0x16>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	89 2b       	or	r24, r25
    2944:	19 f0       	breq	.+6      	; 0x294c <_Z14serialEventRunv+0x16>
    2946:	89 d1       	rcall	.+786    	; 0x2c5a <_Z17Serial0_availablev>
    2948:	81 11       	cpse	r24, r1
    294a:	24 c0       	rjmp	.+72     	; 0x2994 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    294c:	82 ec       	ldi	r24, 0xC2	; 194
    294e:	96 e1       	ldi	r25, 0x16	; 22
    2950:	89 2b       	or	r24, r25
    2952:	39 f0       	breq	.+14     	; 0x2962 <_Z14serialEventRunv+0x2c>
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	89 2b       	or	r24, r25
    295a:	19 f0       	breq	.+6      	; 0x2962 <_Z14serialEventRunv+0x2c>
    295c:	13 d2       	rcall	.+1062   	; 0x2d84 <_Z17Serial1_availablev>
    295e:	81 11       	cpse	r24, r1
    2960:	1c c0       	rjmp	.+56     	; 0x299a <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	89 2b       	or	r24, r25
    2968:	41 f0       	breq	.+16     	; 0x297a <_Z14serialEventRunv+0x44>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	89 2b       	or	r24, r25
    2970:	21 f0       	breq	.+8      	; 0x297a <_Z14serialEventRunv+0x44>
    2972:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2976:	81 11       	cpse	r24, r1
    2978:	13 c0       	rjmp	.+38     	; 0x29a0 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	89 2b       	or	r24, r25
    2980:	a1 f0       	breq	.+40     	; 0x29aa <_Z14serialEventRunv+0x74>
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	89 2b       	or	r24, r25
    2988:	81 f0       	breq	.+32     	; 0x29aa <_Z14serialEventRunv+0x74>
    298a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    298e:	81 11       	cpse	r24, r1
    2990:	0a c0       	rjmp	.+20     	; 0x29a6 <_Z14serialEventRunv+0x70>
    2992:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2994:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2998:	d9 cf       	rjmp	.-78     	; 0x294c <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    299a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    299e:	e1 cf       	rjmp	.-62     	; 0x2962 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    29a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    29a4:	ea cf       	rjmp	.-44     	; 0x297a <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    29a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    29aa:	08 95       	ret

000029ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    29ac:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    29ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    29b0:	df 01       	movw	r26, r30
    29b2:	a8 0f       	add	r26, r24
    29b4:	b1 1d       	adc	r27, r1
    29b6:	a3 5a       	subi	r26, 0xA3	; 163
    29b8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ba:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    29bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	8f 73       	andi	r24, 0x3F	; 63
    29c4:	99 27       	eor	r25, r25
    29c6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    29c8:	a6 89       	ldd	r26, Z+22	; 0x16
    29ca:	b7 89       	ldd	r27, Z+23	; 0x17
    29cc:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    29ce:	a0 89       	ldd	r26, Z+16	; 0x10
    29d0:	b1 89       	ldd	r27, Z+17	; 0x11
    29d2:	8c 91       	ld	r24, X
    29d4:	83 70       	andi	r24, 0x03	; 3
    29d6:	80 64       	ori	r24, 0x40	; 64
    29d8:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    29da:	93 8d       	ldd	r25, Z+27	; 0x1b
    29dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    29de:	98 13       	cpse	r25, r24
    29e0:	06 c0       	rjmp	.+12     	; 0x29ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    29e2:	02 88       	ldd	r0, Z+18	; 0x12
    29e4:	f3 89       	ldd	r31, Z+19	; 0x13
    29e6:	e0 2d       	mov	r30, r0
    29e8:	80 81       	ld	r24, Z
    29ea:	8f 7d       	andi	r24, 0xDF	; 223
    29ec:	80 83       	st	Z, r24
    29ee:	08 95       	ret

000029f0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    29f0:	ef 92       	push	r14
    29f2:	ff 92       	push	r15
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	ec 01       	movw	r28, r24
  _written = true;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2a02:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a06:	98 13       	cpse	r25, r24
    2a08:	05 c0       	rjmp	.+10     	; 0x2a14 <_ZN14HardwareSerial5writeEh+0x24>
    2a0a:	e8 89       	ldd	r30, Y+16	; 0x10
    2a0c:	f9 89       	ldd	r31, Y+17	; 0x11
    2a0e:	80 81       	ld	r24, Z
    2a10:	85 fd       	sbrc	r24, 5
    2a12:	25 c0       	rjmp	.+74     	; 0x2a5e <_ZN14HardwareSerial5writeEh+0x6e>
    2a14:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2a16:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2a18:	10 e0       	ldi	r17, 0x00	; 0
    2a1a:	0f 5f       	subi	r16, 0xFF	; 255
    2a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1e:	0f 73       	andi	r16, 0x3F	; 63
    2a20:	11 27       	eor	r17, r17
    2a22:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2a24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a26:	e8 12       	cpse	r14, r24
    2a28:	0b c0       	rjmp	.+22     	; 0x2a40 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	07 fc       	sbrc	r0, 7
    2a2e:	fa cf       	rjmp	.-12     	; 0x2a24 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2a30:	e8 89       	ldd	r30, Y+16	; 0x10
    2a32:	f9 89       	ldd	r31, Y+17	; 0x11
    2a34:	80 81       	ld	r24, Z
    2a36:	85 ff       	sbrs	r24, 5
    2a38:	f5 cf       	rjmp	.-22     	; 0x2a24 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	b7 df       	rcall	.-146    	; 0x29ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2a3e:	f2 cf       	rjmp	.-28     	; 0x2a24 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a42:	fe 01       	movw	r30, r28
    2a44:	e8 0f       	add	r30, r24
    2a46:	f1 1d       	adc	r31, r1
    2a48:	e3 5a       	subi	r30, 0xA3	; 163
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2a4e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a50:	f8 94       	cli
    _tx_buffer_head = i;
    2a52:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2a54:	ea 89       	ldd	r30, Y+18	; 0x12
    2a56:	fb 89       	ldd	r31, Y+19	; 0x13
    2a58:	80 81       	ld	r24, Z
    2a5a:	80 62       	ori	r24, 0x20	; 32
    2a5c:	0a c0       	rjmp	.+20     	; 0x2a72 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2a5e:	9f b7       	in	r25, 0x3f	; 63
    2a60:	f8 94       	cli
      *_udr = c;
    2a62:	ee 89       	ldd	r30, Y+22	; 0x16
    2a64:	ff 89       	ldd	r31, Y+23	; 0x17
    2a66:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2a68:	e8 89       	ldd	r30, Y+16	; 0x10
    2a6a:	f9 89       	ldd	r31, Y+17	; 0x11
    2a6c:	80 81       	ld	r24, Z
    2a6e:	83 70       	andi	r24, 0x03	; 3
    2a70:	80 64       	ori	r24, 0x40	; 64
    2a72:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a74:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	ff 90       	pop	r15
    2a84:	ef 90       	pop	r14
    2a86:	08 95       	ret

00002a88 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2a8e:	88 8d       	ldd	r24, Y+24	; 0x18
    2a90:	88 23       	and	r24, r24
    2a92:	c1 f0       	breq	.+48     	; 0x2ac4 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2a94:	ea 89       	ldd	r30, Y+18	; 0x12
    2a96:	fb 89       	ldd	r31, Y+19	; 0x13
    2a98:	80 81       	ld	r24, Z
    2a9a:	85 fd       	sbrc	r24, 5
    2a9c:	05 c0       	rjmp	.+10     	; 0x2aa8 <_ZN14HardwareSerial5flushEv+0x20>
    2a9e:	a8 89       	ldd	r26, Y+16	; 0x10
    2aa0:	b9 89       	ldd	r27, Y+17	; 0x11
    2aa2:	8c 91       	ld	r24, X
    2aa4:	86 fd       	sbrc	r24, 6
    2aa6:	0e c0       	rjmp	.+28     	; 0x2ac4 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	07 fc       	sbrc	r0, 7
    2aac:	f5 cf       	rjmp	.-22     	; 0x2a98 <_ZN14HardwareSerial5flushEv+0x10>
    2aae:	80 81       	ld	r24, Z
    2ab0:	85 ff       	sbrs	r24, 5
    2ab2:	f2 cf       	rjmp	.-28     	; 0x2a98 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2ab4:	a8 89       	ldd	r26, Y+16	; 0x10
    2ab6:	b9 89       	ldd	r27, Y+17	; 0x11
    2ab8:	8c 91       	ld	r24, X
    2aba:	85 ff       	sbrs	r24, 5
    2abc:	ed cf       	rjmp	.-38     	; 0x2a98 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2abe:	ce 01       	movw	r24, r28
    2ac0:	75 df       	rcall	.-278    	; 0x29ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2ac2:	e8 cf       	rjmp	.-48     	; 0x2a94 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	08 95       	ret

00002aca <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2aca:	cf 92       	push	r12
    2acc:	df 92       	push	r13
    2ace:	ef 92       	push	r14
    2ad0:	ff 92       	push	r15
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	ec 01       	movw	r28, r24
    2ada:	6a 01       	movw	r12, r20
    2adc:	7b 01       	movw	r14, r22
    2ade:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2ae0:	e8 89       	ldd	r30, Y+16	; 0x10
    2ae2:	f9 89       	ldd	r31, Y+17	; 0x11
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2ae8:	41 15       	cp	r20, r1
    2aea:	51 4e       	sbci	r21, 0xE1	; 225
    2aec:	61 05       	cpc	r22, r1
    2aee:	71 05       	cpc	r23, r1
    2af0:	b1 f0       	breq	.+44     	; 0x2b1e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	79 e0       	ldi	r23, 0x09	; 9
    2af6:	8d e3       	ldi	r24, 0x3D	; 61
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a7 01       	movw	r20, r14
    2afc:	96 01       	movw	r18, r12
    2afe:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__udivmodsi4>
    2b02:	da 01       	movw	r26, r20
    2b04:	c9 01       	movw	r24, r18
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	a1 09       	sbc	r26, r1
    2b0a:	b1 09       	sbc	r27, r1
    2b0c:	b6 95       	lsr	r27
    2b0e:	a7 95       	ror	r26
    2b10:	97 95       	ror	r25
    2b12:	87 95       	ror	r24
    2b14:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2b16:	21 15       	cp	r18, r1
    2b18:	80 e1       	ldi	r24, 0x10	; 16
    2b1a:	38 07       	cpc	r19, r24
    2b1c:	a8 f0       	brcs	.+42     	; 0x2b48 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2b1e:	e8 89       	ldd	r30, Y+16	; 0x10
    2b20:	f9 89       	ldd	r31, Y+17	; 0x11
    2b22:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2b24:	60 e8       	ldi	r22, 0x80	; 128
    2b26:	74 e8       	ldi	r23, 0x84	; 132
    2b28:	8e e1       	ldi	r24, 0x1E	; 30
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	a7 01       	movw	r20, r14
    2b2e:	96 01       	movw	r18, r12
    2b30:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__udivmodsi4>
    2b34:	da 01       	movw	r26, r20
    2b36:	c9 01       	movw	r24, r18
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	a1 09       	sbc	r26, r1
    2b3c:	b1 09       	sbc	r27, r1
    2b3e:	b6 95       	lsr	r27
    2b40:	a7 95       	ror	r26
    2b42:	97 95       	ror	r25
    2b44:	87 95       	ror	r24
    2b46:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2b48:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b4a:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b4c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2b4e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b50:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b52:	20 83       	st	Z, r18

  _written = false;
    2b54:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2b56:	ec 89       	ldd	r30, Y+20	; 0x14
    2b58:	fd 89       	ldd	r31, Y+21	; 0x15
    2b5a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2b5c:	ea 89       	ldd	r30, Y+18	; 0x12
    2b5e:	fb 89       	ldd	r31, Y+19	; 0x13
    2b60:	80 81       	ld	r24, Z
    2b62:	80 61       	ori	r24, 0x10	; 16
    2b64:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2b66:	ea 89       	ldd	r30, Y+18	; 0x12
    2b68:	fb 89       	ldd	r31, Y+19	; 0x13
    2b6a:	80 81       	ld	r24, Z
    2b6c:	88 60       	ori	r24, 0x08	; 8
    2b6e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2b70:	ea 89       	ldd	r30, Y+18	; 0x12
    2b72:	fb 89       	ldd	r31, Y+19	; 0x13
    2b74:	80 81       	ld	r24, Z
    2b76:	80 68       	ori	r24, 0x80	; 128
    2b78:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2b7a:	ea 89       	ldd	r30, Y+18	; 0x12
    2b7c:	fb 89       	ldd	r31, Y+19	; 0x13
    2b7e:	80 81       	ld	r24, Z
    2b80:	8f 7d       	andi	r24, 0xDF	; 223
    2b82:	80 83       	st	Z, r24
}
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	ff 90       	pop	r15
    2b8c:	ef 90       	pop	r14
    2b8e:	df 90       	pop	r13
    2b90:	cf 90       	pop	r12
    2b92:	08 95       	ret

00002b94 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	08 95       	ret

00002b9a <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2b9a:	08 95       	ret

00002b9c <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2b9c:	1f 92       	push	r1
    2b9e:	0f 92       	push	r0
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	0f 92       	push	r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	0b b6       	in	r0, 0x3b	; 59
    2ba8:	0f 92       	push	r0
    2baa:	2f 93       	push	r18
    2bac:	8f 93       	push	r24
    2bae:	9f 93       	push	r25
    2bb0:	ef 93       	push	r30
    2bb2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2bb4:	e0 91 b0 05 	lds	r30, 0x05B0	; 0x8005b0 <Serial+0x10>
    2bb8:	f0 91 b1 05 	lds	r31, 0x05B1	; 0x8005b1 <Serial+0x11>
    2bbc:	80 81       	ld	r24, Z
    2bbe:	e0 91 b6 05 	lds	r30, 0x05B6	; 0x8005b6 <Serial+0x16>
    2bc2:	f0 91 b7 05 	lds	r31, 0x05B7	; 0x8005b7 <Serial+0x17>
    2bc6:	82 fd       	sbrc	r24, 2
    2bc8:	12 c0       	rjmp	.+36     	; 0x2bee <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2bca:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2bcc:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <Serial+0x19>
    2bd0:	8f 5f       	subi	r24, 0xFF	; 255
    2bd2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2bd4:	20 91 ba 05 	lds	r18, 0x05BA	; 0x8005ba <Serial+0x1a>
    2bd8:	82 17       	cp	r24, r18
    2bda:	51 f0       	breq	.+20     	; 0x2bf0 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    2bdc:	e0 91 b9 05 	lds	r30, 0x05B9	; 0x8005b9 <Serial+0x19>
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	e0 56       	subi	r30, 0x60	; 96
    2be4:	fa 4f       	sbci	r31, 0xFA	; 250
    2be6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2be8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <Serial+0x19>
    2bec:	01 c0       	rjmp	.+2      	; 0x2bf0 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2bee:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2bf0:	ff 91       	pop	r31
    2bf2:	ef 91       	pop	r30
    2bf4:	9f 91       	pop	r25
    2bf6:	8f 91       	pop	r24
    2bf8:	2f 91       	pop	r18
    2bfa:	0f 90       	pop	r0
    2bfc:	0b be       	out	0x3b, r0	; 59
    2bfe:	0f 90       	pop	r0
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	0f 90       	pop	r0
    2c04:	1f 90       	pop	r1
    2c06:	18 95       	reti

00002c08 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2c08:	1f 92       	push	r1
    2c0a:	0f 92       	push	r0
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	0f 92       	push	r0
    2c10:	11 24       	eor	r1, r1
    2c12:	0b b6       	in	r0, 0x3b	; 59
    2c14:	0f 92       	push	r0
    2c16:	2f 93       	push	r18
    2c18:	3f 93       	push	r19
    2c1a:	4f 93       	push	r20
    2c1c:	5f 93       	push	r21
    2c1e:	6f 93       	push	r22
    2c20:	7f 93       	push	r23
    2c22:	8f 93       	push	r24
    2c24:	9f 93       	push	r25
    2c26:	af 93       	push	r26
    2c28:	bf 93       	push	r27
    2c2a:	ef 93       	push	r30
    2c2c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2c2e:	80 ea       	ldi	r24, 0xA0	; 160
    2c30:	95 e0       	ldi	r25, 0x05	; 5
    2c32:	bc de       	rcall	.-648    	; 0x29ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2c34:	ff 91       	pop	r31
    2c36:	ef 91       	pop	r30
    2c38:	bf 91       	pop	r27
    2c3a:	af 91       	pop	r26
    2c3c:	9f 91       	pop	r25
    2c3e:	8f 91       	pop	r24
    2c40:	7f 91       	pop	r23
    2c42:	6f 91       	pop	r22
    2c44:	5f 91       	pop	r21
    2c46:	4f 91       	pop	r20
    2c48:	3f 91       	pop	r19
    2c4a:	2f 91       	pop	r18
    2c4c:	0f 90       	pop	r0
    2c4e:	0b be       	out	0x3b, r0	; 59
    2c50:	0f 90       	pop	r0
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	0f 90       	pop	r0
    2c56:	1f 90       	pop	r1
    2c58:	18 95       	reti

00002c5a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2c5a:	80 ea       	ldi	r24, 0xA0	; 160
    2c5c:	95 e0       	ldi	r25, 0x05	; 5
    2c5e:	2e de       	rcall	.-932    	; 0x28bc <_ZN14HardwareSerial9availableEv>
    2c60:	21 e0       	ldi	r18, 0x01	; 1
    2c62:	89 2b       	or	r24, r25
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <_Z17Serial0_availablev+0xe>
    2c66:	20 e0       	ldi	r18, 0x00	; 0
}
    2c68:	82 2f       	mov	r24, r18
    2c6a:	08 95       	ret

00002c6c <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2c6c:	e0 ea       	ldi	r30, 0xA0	; 160
    2c6e:	f5 e0       	ldi	r31, 0x05	; 5
    2c70:	13 82       	std	Z+3, r1	; 0x03
    2c72:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2c74:	88 ee       	ldi	r24, 0xE8	; 232
    2c76:	93 e0       	ldi	r25, 0x03	; 3
    2c78:	a0 e0       	ldi	r26, 0x00	; 0
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	84 83       	std	Z+4, r24	; 0x04
    2c7e:	95 83       	std	Z+5, r25	; 0x05
    2c80:	a6 83       	std	Z+6, r26	; 0x06
    2c82:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2c84:	8e e9       	ldi	r24, 0x9E	; 158
    2c86:	94 e0       	ldi	r25, 0x04	; 4
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
    2c8c:	85 ec       	ldi	r24, 0xC5	; 197
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	95 87       	std	Z+13, r25	; 0x0d
    2c92:	84 87       	std	Z+12, r24	; 0x0c
    2c94:	84 ec       	ldi	r24, 0xC4	; 196
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	97 87       	std	Z+15, r25	; 0x0f
    2c9a:	86 87       	std	Z+14, r24	; 0x0e
    2c9c:	80 ec       	ldi	r24, 0xC0	; 192
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	91 8b       	std	Z+17, r25	; 0x11
    2ca2:	80 8b       	std	Z+16, r24	; 0x10
    2ca4:	81 ec       	ldi	r24, 0xC1	; 193
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	93 8b       	std	Z+19, r25	; 0x13
    2caa:	82 8b       	std	Z+18, r24	; 0x12
    2cac:	82 ec       	ldi	r24, 0xC2	; 194
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	95 8b       	std	Z+21, r25	; 0x15
    2cb2:	84 8b       	std	Z+20, r24	; 0x14
    2cb4:	86 ec       	ldi	r24, 0xC6	; 198
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	97 8b       	std	Z+23, r25	; 0x17
    2cba:	86 8b       	std	Z+22, r24	; 0x16
    2cbc:	11 8e       	std	Z+25, r1	; 0x19
    2cbe:	12 8e       	std	Z+26, r1	; 0x1a
    2cc0:	13 8e       	std	Z+27, r1	; 0x1b
    2cc2:	14 8e       	std	Z+28, r1	; 0x1c
    2cc4:	08 95       	ret

00002cc6 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2cc6:	1f 92       	push	r1
    2cc8:	0f 92       	push	r0
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	0f 92       	push	r0
    2cce:	11 24       	eor	r1, r1
    2cd0:	0b b6       	in	r0, 0x3b	; 59
    2cd2:	0f 92       	push	r0
    2cd4:	2f 93       	push	r18
    2cd6:	8f 93       	push	r24
    2cd8:	9f 93       	push	r25
    2cda:	ef 93       	push	r30
    2cdc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2cde:	e0 91 4d 06 	lds	r30, 0x064D	; 0x80064d <Serial1+0x10>
    2ce2:	f0 91 4e 06 	lds	r31, 0x064E	; 0x80064e <Serial1+0x11>
    2ce6:	80 81       	ld	r24, Z
    2ce8:	e0 91 53 06 	lds	r30, 0x0653	; 0x800653 <Serial1+0x16>
    2cec:	f0 91 54 06 	lds	r31, 0x0654	; 0x800654 <Serial1+0x17>
    2cf0:	82 fd       	sbrc	r24, 2
    2cf2:	12 c0       	rjmp	.+36     	; 0x2d18 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2cf4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2cf6:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <Serial1+0x19>
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2cfe:	20 91 57 06 	lds	r18, 0x0657	; 0x800657 <Serial1+0x1a>
    2d02:	82 17       	cp	r24, r18
    2d04:	51 f0       	breq	.+20     	; 0x2d1a <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    2d06:	e0 91 56 06 	lds	r30, 0x0656	; 0x800656 <Serial1+0x19>
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	e3 5c       	subi	r30, 0xC3	; 195
    2d0e:	f9 4f       	sbci	r31, 0xF9	; 249
    2d10:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2d12:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <Serial1+0x19>
    2d16:	01 c0       	rjmp	.+2      	; 0x2d1a <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2d18:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    2d1a:	ff 91       	pop	r31
    2d1c:	ef 91       	pop	r30
    2d1e:	9f 91       	pop	r25
    2d20:	8f 91       	pop	r24
    2d22:	2f 91       	pop	r18
    2d24:	0f 90       	pop	r0
    2d26:	0b be       	out	0x3b, r0	; 59
    2d28:	0f 90       	pop	r0
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	0f 90       	pop	r0
    2d2e:	1f 90       	pop	r1
    2d30:	18 95       	reti

00002d32 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2d32:	1f 92       	push	r1
    2d34:	0f 92       	push	r0
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	0f 92       	push	r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	0b b6       	in	r0, 0x3b	; 59
    2d3e:	0f 92       	push	r0
    2d40:	2f 93       	push	r18
    2d42:	3f 93       	push	r19
    2d44:	4f 93       	push	r20
    2d46:	5f 93       	push	r21
    2d48:	6f 93       	push	r22
    2d4a:	7f 93       	push	r23
    2d4c:	8f 93       	push	r24
    2d4e:	9f 93       	push	r25
    2d50:	af 93       	push	r26
    2d52:	bf 93       	push	r27
    2d54:	ef 93       	push	r30
    2d56:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    2d58:	8d e3       	ldi	r24, 0x3D	; 61
    2d5a:	96 e0       	ldi	r25, 0x06	; 6
    2d5c:	27 de       	rcall	.-946    	; 0x29ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2d5e:	ff 91       	pop	r31
    2d60:	ef 91       	pop	r30
    2d62:	bf 91       	pop	r27
    2d64:	af 91       	pop	r26
    2d66:	9f 91       	pop	r25
    2d68:	8f 91       	pop	r24
    2d6a:	7f 91       	pop	r23
    2d6c:	6f 91       	pop	r22
    2d6e:	5f 91       	pop	r21
    2d70:	4f 91       	pop	r20
    2d72:	3f 91       	pop	r19
    2d74:	2f 91       	pop	r18
    2d76:	0f 90       	pop	r0
    2d78:	0b be       	out	0x3b, r0	; 59
    2d7a:	0f 90       	pop	r0
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	0f 90       	pop	r0
    2d80:	1f 90       	pop	r1
    2d82:	18 95       	reti

00002d84 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    2d84:	8d e3       	ldi	r24, 0x3D	; 61
    2d86:	96 e0       	ldi	r25, 0x06	; 6
    2d88:	99 dd       	rcall	.-1230   	; 0x28bc <_ZN14HardwareSerial9availableEv>
    2d8a:	21 e0       	ldi	r18, 0x01	; 1
    2d8c:	89 2b       	or	r24, r25
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <_Z17Serial1_availablev+0xe>
    2d90:	20 e0       	ldi	r18, 0x00	; 0
}
    2d92:	82 2f       	mov	r24, r18
    2d94:	08 95       	ret

00002d96 <_GLOBAL__sub_I___vector_36>:
    2d96:	ed e3       	ldi	r30, 0x3D	; 61
    2d98:	f6 e0       	ldi	r31, 0x06	; 6
    2d9a:	13 82       	std	Z+3, r1	; 0x03
    2d9c:	12 82       	std	Z+2, r1	; 0x02
    2d9e:	88 ee       	ldi	r24, 0xE8	; 232
    2da0:	93 e0       	ldi	r25, 0x03	; 3
    2da2:	a0 e0       	ldi	r26, 0x00	; 0
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	84 83       	std	Z+4, r24	; 0x04
    2da8:	95 83       	std	Z+5, r25	; 0x05
    2daa:	a6 83       	std	Z+6, r26	; 0x06
    2dac:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2dae:	8e e9       	ldi	r24, 0x9E	; 158
    2db0:	94 e0       	ldi	r25, 0x04	; 4
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
    2db6:	8d ec       	ldi	r24, 0xCD	; 205
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	95 87       	std	Z+13, r25	; 0x0d
    2dbc:	84 87       	std	Z+12, r24	; 0x0c
    2dbe:	8c ec       	ldi	r24, 0xCC	; 204
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	97 87       	std	Z+15, r25	; 0x0f
    2dc4:	86 87       	std	Z+14, r24	; 0x0e
    2dc6:	88 ec       	ldi	r24, 0xC8	; 200
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	91 8b       	std	Z+17, r25	; 0x11
    2dcc:	80 8b       	std	Z+16, r24	; 0x10
    2dce:	89 ec       	ldi	r24, 0xC9	; 201
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	93 8b       	std	Z+19, r25	; 0x13
    2dd4:	82 8b       	std	Z+18, r24	; 0x12
    2dd6:	8a ec       	ldi	r24, 0xCA	; 202
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	95 8b       	std	Z+21, r25	; 0x15
    2ddc:	84 8b       	std	Z+20, r24	; 0x14
    2dde:	8e ec       	ldi	r24, 0xCE	; 206
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	97 8b       	std	Z+23, r25	; 0x17
    2de4:	86 8b       	std	Z+22, r24	; 0x16
    2de6:	11 8e       	std	Z+25, r1	; 0x19
    2de8:	12 8e       	std	Z+26, r1	; 0x1a
    2dea:	13 8e       	std	Z+27, r1	; 0x1b
    2dec:	14 8e       	std	Z+28, r1	; 0x1c
    2dee:	08 95       	ret

00002df0 <initVariant>:
    2df0:	08 95       	ret

00002df2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2df2:	32 d1       	rcall	.+612    	; 0x3058 <init>

	initVariant();
    2df4:	fd df       	rcall	.-6      	; 0x2df0 <initVariant>
    2df6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2dfa:	cb e9       	ldi	r28, 0x9B	; 155
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2dfc:	d4 e1       	ldi	r29, 0x14	; 20
    2dfe:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    2e02:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    2e04:	e1 f3       	breq	.-8      	; 0x2dfe <main+0xc>
    2e06:	97 dd       	rcall	.-1234   	; 0x2936 <_Z14serialEventRunv>
    2e08:	fa cf       	rjmp	.-12     	; 0x2dfe <main+0xc>

00002e0a <_ZN5Print5writeEPKhj>:
    2e0a:	cf 92       	push	r12
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
    2e0c:	df 92       	push	r13
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	6c 01       	movw	r12, r24
    2e1c:	7a 01       	movw	r14, r20
    2e1e:	8b 01       	movw	r16, r22
    2e20:	c0 e0       	ldi	r28, 0x00	; 0
    2e22:	d0 e0       	ldi	r29, 0x00	; 0
    2e24:	ce 15       	cp	r28, r14
    2e26:	df 05       	cpc	r29, r15
    2e28:	81 f0       	breq	.+32     	; 0x2e4a <_ZN5Print5writeEPKhj+0x40>
    2e2a:	d8 01       	movw	r26, r16
    2e2c:	6d 91       	ld	r22, X+
    2e2e:	8d 01       	movw	r16, r26
    2e30:	d6 01       	movw	r26, r12
    2e32:	ed 91       	ld	r30, X+
    2e34:	fc 91       	ld	r31, X
    2e36:	01 90       	ld	r0, Z+
    2e38:	f0 81       	ld	r31, Z
    2e3a:	e0 2d       	mov	r30, r0
    2e3c:	c6 01       	movw	r24, r12
    2e3e:	19 95       	eicall
    2e40:	89 2b       	or	r24, r25
    2e42:	11 f0       	breq	.+4      	; 0x2e48 <_ZN5Print5writeEPKhj+0x3e>
    2e44:	21 96       	adiw	r28, 0x01	; 1
    2e46:	ee cf       	rjmp	.-36     	; 0x2e24 <_ZN5Print5writeEPKhj+0x1a>
    2e48:	7e 01       	movw	r14, r28
    2e4a:	c7 01       	movw	r24, r14
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	cf 90       	pop	r12
    2e5c:	08 95       	ret

00002e5e <_ZN5Print5writeEPKc>:
    2e5e:	61 15       	cp	r22, r1
    2e60:	71 05       	cpc	r23, r1
    2e62:	79 f0       	breq	.+30     	; 0x2e82 <_ZN5Print5writeEPKc+0x24>
    2e64:	fb 01       	movw	r30, r22
    2e66:	01 90       	ld	r0, Z+
    2e68:	00 20       	and	r0, r0
    2e6a:	e9 f7       	brne	.-6      	; 0x2e66 <_ZN5Print5writeEPKc+0x8>
    2e6c:	31 97       	sbiw	r30, 0x01	; 1
    2e6e:	af 01       	movw	r20, r30
    2e70:	46 1b       	sub	r20, r22
    2e72:	57 0b       	sbc	r21, r23
    2e74:	dc 01       	movw	r26, r24
    2e76:	ed 91       	ld	r30, X+
    2e78:	fc 91       	ld	r31, X
    2e7a:	02 80       	ldd	r0, Z+2	; 0x02
    2e7c:	f3 81       	ldd	r31, Z+3	; 0x03
    2e7e:	e0 2d       	mov	r30, r0
    2e80:	19 94       	eijmp
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	08 95       	ret

00002e88 <_ZN5Print5printERK6String>:
    2e88:	db 01       	movw	r26, r22
    2e8a:	14 96       	adiw	r26, 0x04	; 4
    2e8c:	4d 91       	ld	r20, X+
    2e8e:	5c 91       	ld	r21, X
    2e90:	15 97       	sbiw	r26, 0x05	; 5
    2e92:	6d 91       	ld	r22, X+
    2e94:	7c 91       	ld	r23, X
    2e96:	dc 01       	movw	r26, r24
    2e98:	ed 91       	ld	r30, X+
    2e9a:	fc 91       	ld	r31, X
    2e9c:	02 80       	ldd	r0, Z+2	; 0x02
    2e9e:	f3 81       	ldd	r31, Z+3	; 0x03
    2ea0:	e0 2d       	mov	r30, r0
    2ea2:	19 94       	eijmp

00002ea4 <_ZN5Print5printEPKc>:
    2ea4:	dc cf       	rjmp	.-72     	; 0x2e5e <_ZN5Print5writeEPKc>

00002ea6 <_ZN5Print5printEc>:
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	ed 91       	ld	r30, X+
    2eaa:	fc 91       	ld	r31, X
    2eac:	01 90       	ld	r0, Z+
    2eae:	f0 81       	ld	r31, Z
    2eb0:	e0 2d       	mov	r30, r0
    2eb2:	19 94       	eijmp

00002eb4 <_ZN5Print7printlnEv>:
    2eb4:	6c ea       	ldi	r22, 0xAC	; 172
    2eb6:	74 e0       	ldi	r23, 0x04	; 4
    2eb8:	d2 cf       	rjmp	.-92     	; 0x2e5e <_ZN5Print5writeEPKc>

00002eba <_ZN5Print7printlnERK6String>:
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    2eba:	0f 93       	push	r16
    2ebc:	1f 93       	push	r17
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	ec 01       	movw	r28, r24
  size_t n = print(s);
    2ec4:	e1 df       	rcall	.-62     	; 0x2e88 <_ZN5Print5printERK6String>
    2ec6:	8c 01       	movw	r16, r24
  n += println();
    2ec8:	ce 01       	movw	r24, r28
    2eca:	f4 df       	rcall	.-24     	; 0x2eb4 <_ZN5Print7printlnEv>
  return n;
}
    2ecc:	80 0f       	add	r24, r16
    2ece:	91 1f       	adc	r25, r17
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	08 95       	ret

00002eda <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2eda:	1f 92       	push	r1
    2edc:	0f 92       	push	r0
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	0f 92       	push	r0
    2ee2:	11 24       	eor	r1, r1
    2ee4:	2f 93       	push	r18
    2ee6:	3f 93       	push	r19
    2ee8:	8f 93       	push	r24
    2eea:	9f 93       	push	r25
    2eec:	af 93       	push	r26
    2eee:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2ef0:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <timer0_millis>
    2ef4:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <timer0_millis+0x1>
    2ef8:	a0 91 dd 06 	lds	r26, 0x06DD	; 0x8006dd <timer0_millis+0x2>
    2efc:	b0 91 de 06 	lds	r27, 0x06DE	; 0x8006de <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2f00:	30 91 da 06 	lds	r19, 0x06DA	; 0x8006da <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2f04:	23 e0       	ldi	r18, 0x03	; 3
    2f06:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2f08:	2d 37       	cpi	r18, 0x7D	; 125
    2f0a:	20 f4       	brcc	.+8      	; 0x2f14 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	a1 1d       	adc	r26, r1
    2f10:	b1 1d       	adc	r27, r1
    2f12:	05 c0       	rjmp	.+10     	; 0x2f1e <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2f14:	26 e8       	ldi	r18, 0x86	; 134
    2f16:	23 0f       	add	r18, r19
		m += 1;
    2f18:	02 96       	adiw	r24, 0x02	; 2
    2f1a:	a1 1d       	adc	r26, r1
    2f1c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2f1e:	20 93 da 06 	sts	0x06DA, r18	; 0x8006da <timer0_fract>
	timer0_millis = m;
    2f22:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <timer0_millis>
    2f26:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <timer0_millis+0x1>
    2f2a:	a0 93 dd 06 	sts	0x06DD, r26	; 0x8006dd <timer0_millis+0x2>
    2f2e:	b0 93 de 06 	sts	0x06DE, r27	; 0x8006de <timer0_millis+0x3>
	timer0_overflow_count++;
    2f32:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <timer0_overflow_count>
    2f36:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <timer0_overflow_count+0x1>
    2f3a:	a0 91 e1 06 	lds	r26, 0x06E1	; 0x8006e1 <timer0_overflow_count+0x2>
    2f3e:	b0 91 e2 06 	lds	r27, 0x06E2	; 0x8006e2 <timer0_overflow_count+0x3>
    2f42:	01 96       	adiw	r24, 0x01	; 1
    2f44:	a1 1d       	adc	r26, r1
    2f46:	b1 1d       	adc	r27, r1
    2f48:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <timer0_overflow_count>
    2f4c:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <timer0_overflow_count+0x1>
    2f50:	a0 93 e1 06 	sts	0x06E1, r26	; 0x8006e1 <timer0_overflow_count+0x2>
    2f54:	b0 93 e2 06 	sts	0x06E2, r27	; 0x8006e2 <timer0_overflow_count+0x3>
}
    2f58:	bf 91       	pop	r27
    2f5a:	af 91       	pop	r26
    2f5c:	9f 91       	pop	r25
    2f5e:	8f 91       	pop	r24
    2f60:	3f 91       	pop	r19
    2f62:	2f 91       	pop	r18
    2f64:	0f 90       	pop	r0
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	0f 90       	pop	r0
    2f6a:	1f 90       	pop	r1
    2f6c:	18 95       	reti

00002f6e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2f6e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2f70:	f8 94       	cli
	m = timer0_millis;
    2f72:	60 91 db 06 	lds	r22, 0x06DB	; 0x8006db <timer0_millis>
    2f76:	70 91 dc 06 	lds	r23, 0x06DC	; 0x8006dc <timer0_millis+0x1>
    2f7a:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <timer0_millis+0x2>
    2f7e:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <timer0_millis+0x3>
	SREG = oldSREG;
    2f82:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2f84:	08 95       	ret

00002f86 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2f86:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2f88:	f8 94       	cli
	m = timer0_overflow_count;
    2f8a:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <timer0_overflow_count>
    2f8e:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <timer0_overflow_count+0x1>
    2f92:	a0 91 e1 06 	lds	r26, 0x06E1	; 0x8006e1 <timer0_overflow_count+0x2>
    2f96:	b0 91 e2 06 	lds	r27, 0x06E2	; 0x8006e2 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2f9a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2f9c:	a8 9b       	sbis	0x15, 0	; 21
    2f9e:	05 c0       	rjmp	.+10     	; 0x2faa <micros+0x24>
    2fa0:	2f 3f       	cpi	r18, 0xFF	; 255
    2fa2:	19 f0       	breq	.+6      	; 0x2faa <micros+0x24>
		m++;
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	a1 1d       	adc	r26, r1
    2fa8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2faa:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2fac:	ba 2f       	mov	r27, r26
    2fae:	a9 2f       	mov	r26, r25
    2fb0:	98 2f       	mov	r25, r24
    2fb2:	88 27       	eor	r24, r24
    2fb4:	82 0f       	add	r24, r18
    2fb6:	91 1d       	adc	r25, r1
    2fb8:	a1 1d       	adc	r26, r1
    2fba:	b1 1d       	adc	r27, r1
    2fbc:	bc 01       	movw	r22, r24
    2fbe:	cd 01       	movw	r24, r26
    2fc0:	42 e0       	ldi	r20, 0x02	; 2
    2fc2:	66 0f       	add	r22, r22
    2fc4:	77 1f       	adc	r23, r23
    2fc6:	88 1f       	adc	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	4a 95       	dec	r20
    2fcc:	d1 f7       	brne	.-12     	; 0x2fc2 <micros+0x3c>
}
    2fce:	08 95       	ret

00002fd0 <delay>:

void delay(unsigned long ms)
{
    2fd0:	8f 92       	push	r8
    2fd2:	9f 92       	push	r9
    2fd4:	af 92       	push	r10
    2fd6:	bf 92       	push	r11
    2fd8:	cf 92       	push	r12
    2fda:	df 92       	push	r13
    2fdc:	ef 92       	push	r14
    2fde:	ff 92       	push	r15
    2fe0:	6b 01       	movw	r12, r22
    2fe2:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2fe4:	d0 df       	rcall	.-96     	; 0x2f86 <micros>
    2fe6:	4b 01       	movw	r8, r22
    2fe8:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2fea:	c1 14       	cp	r12, r1
    2fec:	d1 04       	cpc	r13, r1
    2fee:	e1 04       	cpc	r14, r1
    2ff0:	f1 04       	cpc	r15, r1
		yield();
    2ff2:	f1 f0       	breq	.+60     	; 0x3030 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2ff4:	ce d4       	rcall	.+2460   	; 0x3992 <yield>
    2ff6:	c7 df       	rcall	.-114    	; 0x2f86 <micros>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	88 19       	sub	r24, r8
    2ffe:	99 09       	sbc	r25, r9
    3000:	aa 09       	sbc	r26, r10
    3002:	bb 09       	sbc	r27, r11
    3004:	88 3e       	cpi	r24, 0xE8	; 232
    3006:	93 40       	sbci	r25, 0x03	; 3
    3008:	a1 05       	cpc	r26, r1
    300a:	b1 05       	cpc	r27, r1
    300c:	70 f3       	brcs	.-36     	; 0x2fea <delay+0x1a>
			ms--;
    300e:	21 e0       	ldi	r18, 0x01	; 1
    3010:	c2 1a       	sub	r12, r18
    3012:	d1 08       	sbc	r13, r1
    3014:	e1 08       	sbc	r14, r1
    3016:	f1 08       	sbc	r15, r1
			start += 1000;
    3018:	88 ee       	ldi	r24, 0xE8	; 232
    301a:	88 0e       	add	r8, r24
    301c:	83 e0       	ldi	r24, 0x03	; 3
    301e:	98 1e       	adc	r9, r24
    3020:	a1 1c       	adc	r10, r1
    3022:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3024:	c1 14       	cp	r12, r1
    3026:	d1 04       	cpc	r13, r1
    3028:	e1 04       	cpc	r14, r1
    302a:	f1 04       	cpc	r15, r1
    302c:	21 f7       	brne	.-56     	; 0x2ff6 <delay+0x26>
    302e:	dd cf       	rjmp	.-70     	; 0x2fea <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    3030:	ff 90       	pop	r15
    3032:	ef 90       	pop	r14
    3034:	df 90       	pop	r13
    3036:	cf 90       	pop	r12
    3038:	bf 90       	pop	r11
    303a:	af 90       	pop	r10
    303c:	9f 90       	pop	r9
    303e:	8f 90       	pop	r8
    3040:	08 95       	ret

00003042 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	91 05       	cpc	r25, r1
    3046:	38 f0       	brcs	.+14     	; 0x3056 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3050:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	f1 f7       	brne	.-4      	; 0x3052 <delayMicroseconds+0x10>
    3056:	08 95       	ret

00003058 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3058:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    305a:	84 b5       	in	r24, 0x24	; 36
    305c:	82 60       	ori	r24, 0x02	; 2
    305e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3060:	84 b5       	in	r24, 0x24	; 36
    3062:	81 60       	ori	r24, 0x01	; 1
    3064:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3066:	85 b5       	in	r24, 0x25	; 37
    3068:	82 60       	ori	r24, 0x02	; 2
    306a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    306c:	85 b5       	in	r24, 0x25	; 37
    306e:	81 60       	ori	r24, 0x01	; 1
    3070:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3072:	ee e6       	ldi	r30, 0x6E	; 110
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	81 60       	ori	r24, 0x01	; 1
    307a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    307c:	e1 e8       	ldi	r30, 0x81	; 129
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3082:	80 81       	ld	r24, Z
    3084:	82 60       	ori	r24, 0x02	; 2
    3086:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3088:	80 81       	ld	r24, Z
    308a:	81 60       	ori	r24, 0x01	; 1
    308c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    308e:	e0 e8       	ldi	r30, 0x80	; 128
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
    3094:	81 60       	ori	r24, 0x01	; 1
    3096:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3098:	e1 eb       	ldi	r30, 0xB1	; 177
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	84 60       	ori	r24, 0x04	; 4
    30a0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    30a2:	e0 eb       	ldi	r30, 0xB0	; 176
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	81 60       	ori	r24, 0x01	; 1
    30aa:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    30ac:	e1 e9       	ldi	r30, 0x91	; 145
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	82 60       	ori	r24, 0x02	; 2
    30b4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    30b6:	80 81       	ld	r24, Z
    30b8:	81 60       	ori	r24, 0x01	; 1
    30ba:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    30bc:	e0 e9       	ldi	r30, 0x90	; 144
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	81 60       	ori	r24, 0x01	; 1
    30c4:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    30c6:	e1 ea       	ldi	r30, 0xA1	; 161
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	82 60       	ori	r24, 0x02	; 2
    30ce:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    30d0:	80 81       	ld	r24, Z
    30d2:	81 60       	ori	r24, 0x01	; 1
    30d4:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    30d6:	e0 ea       	ldi	r30, 0xA0	; 160
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	80 81       	ld	r24, Z
    30dc:	81 60       	ori	r24, 0x01	; 1
    30de:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    30e0:	e1 e2       	ldi	r30, 0x21	; 33
    30e2:	f1 e0       	ldi	r31, 0x01	; 1
    30e4:	80 81       	ld	r24, Z
    30e6:	82 60       	ori	r24, 0x02	; 2
    30e8:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    30ea:	80 81       	ld	r24, Z
    30ec:	81 60       	ori	r24, 0x01	; 1
    30ee:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    30f0:	e0 e2       	ldi	r30, 0x20	; 32
    30f2:	f1 e0       	ldi	r31, 0x01	; 1
    30f4:	80 81       	ld	r24, Z
    30f6:	81 60       	ori	r24, 0x01	; 1
    30f8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    30fa:	ea e7       	ldi	r30, 0x7A	; 122
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	84 60       	ori	r24, 0x04	; 4
    3102:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3104:	80 81       	ld	r24, Z
    3106:	82 60       	ori	r24, 0x02	; 2
    3108:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    310a:	80 81       	ld	r24, Z
    310c:	81 60       	ori	r24, 0x01	; 1
    310e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3110:	80 81       	ld	r24, Z
    3112:	80 68       	ori	r24, 0x80	; 128
    3114:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3116:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    311a:	08 95       	ret

0000311c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	fc 01       	movw	r30, r24
    3120:	31 97       	sbiw	r30, 0x01	; 1
    3122:	e2 31       	cpi	r30, 0x12	; 18
    3124:	f1 05       	cpc	r31, r1
    3126:	08 f0       	brcs	.+2      	; 0x312a <turnOffPWM+0xe>
    3128:	4d c0       	rjmp	.+154    	; 0x31c4 <turnOffPWM+0xa8>
    312a:	88 27       	eor	r24, r24
    312c:	ee 53       	subi	r30, 0x3E	; 62
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	8f 4f       	sbci	r24, 0xFF	; 255
    3132:	47 c6       	rjmp	.+3214   	; 0x3dc2 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3134:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3138:	8f 77       	andi	r24, 0x7F	; 127
    313a:	03 c0       	rjmp	.+6      	; 0x3142 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    313c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3140:	8f 7d       	andi	r24, 0xDF	; 223
    3142:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3146:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3148:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    314c:	87 7f       	andi	r24, 0xF7	; 247
    314e:	f9 cf       	rjmp	.-14     	; 0x3142 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3150:	84 b5       	in	r24, 0x24	; 36
    3152:	8f 77       	andi	r24, 0x7F	; 127
    3154:	02 c0       	rjmp	.+4      	; 0x315a <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3156:	84 b5       	in	r24, 0x24	; 36
    3158:	8f 7d       	andi	r24, 0xDF	; 223
    315a:	84 bd       	out	0x24, r24	; 36
    315c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    315e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    3162:	8f 77       	andi	r24, 0x7F	; 127
    3164:	03 c0       	rjmp	.+6      	; 0x316c <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3166:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    316a:	8f 7d       	andi	r24, 0xDF	; 223
    316c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    3170:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3172:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    3176:	8f 77       	andi	r24, 0x7F	; 127
    3178:	07 c0       	rjmp	.+14     	; 0x3188 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    317a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    317e:	8f 7d       	andi	r24, 0xDF	; 223
    3180:	03 c0       	rjmp	.+6      	; 0x3188 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3182:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    3186:	87 7f       	andi	r24, 0xF7	; 247
    3188:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    318c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    318e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3192:	8f 77       	andi	r24, 0x7F	; 127
    3194:	07 c0       	rjmp	.+14     	; 0x31a4 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3196:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    319a:	8f 7d       	andi	r24, 0xDF	; 223
    319c:	03 c0       	rjmp	.+6      	; 0x31a4 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    319e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    31a2:	87 7f       	andi	r24, 0xF7	; 247
    31a4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    31a8:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    31aa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    31ae:	8f 77       	andi	r24, 0x7F	; 127
    31b0:	07 c0       	rjmp	.+14     	; 0x31c0 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    31b2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    31b6:	8f 7d       	andi	r24, 0xDF	; 223
    31b8:	03 c0       	rjmp	.+6      	; 0x31c0 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    31ba:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    31be:	87 7f       	andi	r24, 0xF7	; 247
    31c0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    31c4:	08 95       	ret

000031c6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    31c6:	cf 93       	push	r28
    31c8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	fc 01       	movw	r30, r24
    31ce:	e2 51       	subi	r30, 0x12	; 18
    31d0:	fe 4f       	sbci	r31, 0xFE	; 254
    31d2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    31d4:	fc 01       	movw	r30, r24
    31d6:	ec 5c       	subi	r30, 0xCC	; 204
    31d8:	fd 4f       	sbci	r31, 0xFD	; 253
    31da:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    31dc:	88 23       	and	r24, r24
    31de:	61 f1       	breq	.+88     	; 0x3238 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	88 0f       	add	r24, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	fc 01       	movw	r30, r24
    31e8:	ec 56       	subi	r30, 0x6C	; 108
    31ea:	fd 4f       	sbci	r31, 0xFD	; 253
    31ec:	c5 91       	lpm	r28, Z+
    31ee:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    31f0:	fc 01       	movw	r30, r24
    31f2:	e6 58       	subi	r30, 0x86	; 134
    31f4:	fd 4f       	sbci	r31, 0xFD	; 253
    31f6:	a5 91       	lpm	r26, Z+
    31f8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    31fa:	61 11       	cpse	r22, r1
    31fc:	09 c0       	rjmp	.+18     	; 0x3210 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    31fe:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3200:	f8 94       	cli
		*reg &= ~bit;
    3202:	88 81       	ld	r24, Y
    3204:	20 95       	com	r18
    3206:	82 23       	and	r24, r18
    3208:	88 83       	st	Y, r24
		*out &= ~bit;
    320a:	ec 91       	ld	r30, X
    320c:	2e 23       	and	r18, r30
    320e:	0b c0       	rjmp	.+22     	; 0x3226 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3210:	62 30       	cpi	r22, 0x02	; 2
    3212:	61 f4       	brne	.+24     	; 0x322c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3214:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3216:	f8 94       	cli
		*reg &= ~bit;
    3218:	88 81       	ld	r24, Y
    321a:	32 2f       	mov	r19, r18
    321c:	30 95       	com	r19
    321e:	83 23       	and	r24, r19
    3220:	88 83       	st	Y, r24
		*out |= bit;
    3222:	ec 91       	ld	r30, X
    3224:	2e 2b       	or	r18, r30
    3226:	2c 93       	st	X, r18
		SREG = oldSREG;
    3228:	9f bf       	out	0x3f, r25	; 63
    322a:	06 c0       	rjmp	.+12     	; 0x3238 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    322c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    322e:	f8 94       	cli
		*reg |= bit;
    3230:	e8 81       	ld	r30, Y
    3232:	2e 2b       	or	r18, r30
    3234:	28 83       	st	Y, r18
		SREG = oldSREG;
    3236:	8f bf       	out	0x3f, r24	; 63
	}
}
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	08 95       	ret

0000323e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    323e:	1f 93       	push	r17
    3240:	cf 93       	push	r28
    3242:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	f9 01       	movw	r30, r18
    324a:	e8 55       	subi	r30, 0x58	; 88
    324c:	fe 4f       	sbci	r31, 0xFE	; 254
    324e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3250:	f9 01       	movw	r30, r18
    3252:	e2 51       	subi	r30, 0x12	; 18
    3254:	fe 4f       	sbci	r31, 0xFE	; 254
    3256:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3258:	f9 01       	movw	r30, r18
    325a:	ec 5c       	subi	r30, 0xCC	; 204
    325c:	fd 4f       	sbci	r31, 0xFD	; 253
    325e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3260:	cc 23       	and	r28, r28
    3262:	b9 f0       	breq	.+46     	; 0x3292 <digitalWrite+0x54>
    3264:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3266:	81 11       	cpse	r24, r1
    3268:	59 df       	rcall	.-334    	; 0x311c <turnOffPWM>

	out = portOutputRegister(port);
    326a:	ec 2f       	mov	r30, r28
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	ee 0f       	add	r30, r30
    3270:	ff 1f       	adc	r31, r31
    3272:	e6 58       	subi	r30, 0x86	; 134
    3274:	fd 4f       	sbci	r31, 0xFD	; 253
    3276:	a5 91       	lpm	r26, Z+
    3278:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    327a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    327c:	f8 94       	cli

	if (val == LOW) {
    327e:	11 11       	cpse	r17, r1
    3280:	04 c0       	rjmp	.+8      	; 0x328a <digitalWrite+0x4c>
		*out &= ~bit;
    3282:	8c 91       	ld	r24, X
    3284:	d0 95       	com	r29
    3286:	d8 23       	and	r29, r24
    3288:	02 c0       	rjmp	.+4      	; 0x328e <digitalWrite+0x50>
	} else {
		*out |= bit;
    328a:	ec 91       	ld	r30, X
    328c:	de 2b       	or	r29, r30
    328e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3290:	9f bf       	out	0x3f, r25	; 63
}
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	1f 91       	pop	r17
    3298:	08 95       	ret

0000329a <_ZN6StringD1Ev>:
StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}
    329a:	fc 01       	movw	r30, r24
    329c:	80 81       	ld	r24, Z
    329e:	91 81       	ldd	r25, Z+1	; 0x01
    32a0:	44 c6       	rjmp	.+3208   	; 0x3f2a <free>

000032a2 <_ZN6String10invalidateEv>:
    32a2:	cf 93       	push	r28
    32a4:	df 93       	push	r29
    32a6:	ec 01       	movw	r28, r24
    32a8:	88 81       	ld	r24, Y
    32aa:	99 81       	ldd	r25, Y+1	; 0x01
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	09 f0       	breq	.+2      	; 0x32b2 <_ZN6String10invalidateEv+0x10>
    32b0:	3c d6       	rcall	.+3192   	; 0x3f2a <free>
    32b2:	19 82       	std	Y+1, r1	; 0x01
    32b4:	18 82       	st	Y, r1
    32b6:	1d 82       	std	Y+5, r1	; 0x05
    32b8:	1c 82       	std	Y+4, r1	; 0x04
    32ba:	1b 82       	std	Y+3, r1	; 0x03
    32bc:	1a 82       	std	Y+2, r1	; 0x02
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	08 95       	ret

000032c4 <_ZN6String12changeBufferEj>:
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	ec 01       	movw	r28, r24
    32ce:	8b 01       	movw	r16, r22
    32d0:	6f 5f       	subi	r22, 0xFF	; 255
    32d2:	7f 4f       	sbci	r23, 0xFF	; 255
    32d4:	88 81       	ld	r24, Y
    32d6:	99 81       	ldd	r25, Y+1	; 0x01
    32d8:	b1 d6       	rcall	.+3426   	; 0x403c <realloc>
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	31 f0       	breq	.+12     	; 0x32ea <_ZN6String12changeBufferEj+0x26>
    32de:	99 83       	std	Y+1, r25	; 0x01
    32e0:	88 83       	st	Y, r24
    32e2:	1b 83       	std	Y+3, r17	; 0x03
    32e4:	0a 83       	std	Y+2, r16	; 0x02
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	01 c0       	rjmp	.+2      	; 0x32ec <_ZN6String12changeBufferEj+0x28>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	08 95       	ret

000032f6 <_ZN6String7reserveEj>:
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	ec 01       	movw	r28, r24
    32fc:	88 81       	ld	r24, Y
    32fe:	99 81       	ldd	r25, Y+1	; 0x01
    3300:	89 2b       	or	r24, r25
    3302:	29 f0       	breq	.+10     	; 0x330e <_ZN6String7reserveEj+0x18>
    3304:	8a 81       	ldd	r24, Y+2	; 0x02
    3306:	9b 81       	ldd	r25, Y+3	; 0x03
    3308:	86 17       	cp	r24, r22
    330a:	97 07       	cpc	r25, r23
    330c:	58 f4       	brcc	.+22     	; 0x3324 <_ZN6String7reserveEj+0x2e>
    330e:	ce 01       	movw	r24, r28
    3310:	d9 df       	rcall	.-78     	; 0x32c4 <_ZN6String12changeBufferEj>
    3312:	88 23       	and	r24, r24
    3314:	41 f0       	breq	.+16     	; 0x3326 <_ZN6String7reserveEj+0x30>
    3316:	8c 81       	ldd	r24, Y+4	; 0x04
    3318:	9d 81       	ldd	r25, Y+5	; 0x05
    331a:	89 2b       	or	r24, r25
    331c:	19 f4       	brne	.+6      	; 0x3324 <_ZN6String7reserveEj+0x2e>
    331e:	e8 81       	ld	r30, Y
    3320:	f9 81       	ldd	r31, Y+1	; 0x01
    3322:	10 82       	st	Z, r1
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	08 95       	ret

0000332c <_ZN6String4copyEPKcj>:
    332c:	ef 92       	push	r14
    332e:	ff 92       	push	r15
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	ec 01       	movw	r28, r24
    333a:	7b 01       	movw	r14, r22
    333c:	8a 01       	movw	r16, r20
    333e:	ba 01       	movw	r22, r20
    3340:	da df       	rcall	.-76     	; 0x32f6 <_ZN6String7reserveEj>
    3342:	81 11       	cpse	r24, r1
    3344:	03 c0       	rjmp	.+6      	; 0x334c <_ZN6String4copyEPKcj+0x20>
    3346:	ce 01       	movw	r24, r28
    3348:	ac df       	rcall	.-168    	; 0x32a2 <_ZN6String10invalidateEv>
    334a:	06 c0       	rjmp	.+12     	; 0x3358 <_ZN6String4copyEPKcj+0x2c>
    334c:	1d 83       	std	Y+5, r17	; 0x05
    334e:	0c 83       	std	Y+4, r16	; 0x04
    3350:	b7 01       	movw	r22, r14
    3352:	88 81       	ld	r24, Y
    3354:	99 81       	ldd	r25, Y+1	; 0x01
    3356:	5b d7       	rcall	.+3766   	; 0x420e <strcpy>
    3358:	ce 01       	movw	r24, r28
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	1f 91       	pop	r17
    3360:	0f 91       	pop	r16
    3362:	ff 90       	pop	r15
    3364:	ef 90       	pop	r14
    3366:	08 95       	ret

00003368 <_ZN6StringC1EPKc>:
    3368:	fc 01       	movw	r30, r24
    336a:	11 82       	std	Z+1, r1	; 0x01
    336c:	10 82       	st	Z, r1
    336e:	13 82       	std	Z+3, r1	; 0x03
    3370:	12 82       	std	Z+2, r1	; 0x02
    3372:	15 82       	std	Z+5, r1	; 0x05
    3374:	14 82       	std	Z+4, r1	; 0x04
    3376:	61 15       	cp	r22, r1
    3378:	71 05       	cpc	r23, r1
    337a:	49 f0       	breq	.+18     	; 0x338e <_ZN6StringC1EPKc+0x26>
    337c:	fb 01       	movw	r30, r22
    337e:	01 90       	ld	r0, Z+
    3380:	00 20       	and	r0, r0
    3382:	e9 f7       	brne	.-6      	; 0x337e <_ZN6StringC1EPKc+0x16>
    3384:	31 97       	sbiw	r30, 0x01	; 1
    3386:	af 01       	movw	r20, r30
    3388:	46 1b       	sub	r20, r22
    338a:	57 0b       	sbc	r21, r23
    338c:	cf cf       	rjmp	.-98     	; 0x332c <_ZN6String4copyEPKcj>
    338e:	08 95       	ret

00003390 <_ZN6StringaSERKS_>:
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	ec 01       	movw	r28, r24
    3396:	fb 01       	movw	r30, r22
    3398:	86 17       	cp	r24, r22
    339a:	97 07       	cpc	r25, r23
    339c:	51 f0       	breq	.+20     	; 0x33b2 <_ZN6StringaSERKS_+0x22>
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	61 15       	cp	r22, r1
    33a4:	71 05       	cpc	r23, r1
    33a6:	21 f0       	breq	.+8      	; 0x33b0 <_ZN6StringaSERKS_+0x20>
    33a8:	44 81       	ldd	r20, Z+4	; 0x04
    33aa:	55 81       	ldd	r21, Z+5	; 0x05
    33ac:	bf df       	rcall	.-130    	; 0x332c <_ZN6String4copyEPKcj>
    33ae:	01 c0       	rjmp	.+2      	; 0x33b2 <_ZN6StringaSERKS_+0x22>
    33b0:	78 df       	rcall	.-272    	; 0x32a2 <_ZN6String10invalidateEv>
    33b2:	ce 01       	movw	r24, r28
    33b4:	df 91       	pop	r29
    33b6:	cf 91       	pop	r28
    33b8:	08 95       	ret

000033ba <_ZN6StringC1ERKS_>:
    33ba:	fc 01       	movw	r30, r24
    33bc:	11 82       	std	Z+1, r1	; 0x01
    33be:	10 82       	st	Z, r1
    33c0:	13 82       	std	Z+3, r1	; 0x03
    33c2:	12 82       	std	Z+2, r1	; 0x02
    33c4:	15 82       	std	Z+5, r1	; 0x05
    33c6:	14 82       	std	Z+4, r1	; 0x04
    33c8:	e3 cf       	rjmp	.-58     	; 0x3390 <_ZN6StringaSERKS_>

000033ca <_ZN6StringaSEPKc>:
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	ec 01       	movw	r28, r24
    33d0:	61 15       	cp	r22, r1
    33d2:	71 05       	cpc	r23, r1
    33d4:	51 f0       	breq	.+20     	; 0x33ea <_ZN6StringaSEPKc+0x20>
    33d6:	fb 01       	movw	r30, r22
    33d8:	01 90       	ld	r0, Z+
    33da:	00 20       	and	r0, r0
    33dc:	e9 f7       	brne	.-6      	; 0x33d8 <_ZN6StringaSEPKc+0xe>
    33de:	31 97       	sbiw	r30, 0x01	; 1
    33e0:	af 01       	movw	r20, r30
    33e2:	46 1b       	sub	r20, r22
    33e4:	57 0b       	sbc	r21, r23
    33e6:	a2 df       	rcall	.-188    	; 0x332c <_ZN6String4copyEPKcj>
    33e8:	01 c0       	rjmp	.+2      	; 0x33ec <_ZN6StringaSEPKc+0x22>
    33ea:	5b df       	rcall	.-330    	; 0x32a2 <_ZN6String10invalidateEv>
    33ec:	ce 01       	movw	r24, r28
    33ee:	df 91       	pop	r29
    33f0:	cf 91       	pop	r28
    33f2:	08 95       	ret

000033f4 <_ZN6StringC1Emh>:
    33f4:	0f 93       	push	r16
    33f6:	1f 93       	push	r17
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
    3400:	a1 97       	sbiw	r28, 0x21	; 33
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	8c 01       	movw	r16, r24
    340e:	cb 01       	movw	r24, r22
    3410:	ba 01       	movw	r22, r20
    3412:	f8 01       	movw	r30, r16
    3414:	11 82       	std	Z+1, r1	; 0x01
    3416:	10 82       	st	Z, r1
    3418:	13 82       	std	Z+3, r1	; 0x03
    341a:	12 82       	std	Z+2, r1	; 0x02
    341c:	15 82       	std	Z+5, r1	; 0x05
    341e:	14 82       	std	Z+4, r1	; 0x04
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	ae 01       	movw	r20, r28
    3424:	4f 5f       	subi	r20, 0xFF	; 255
    3426:	5f 4f       	sbci	r21, 0xFF	; 255
    3428:	03 d7       	rcall	.+3590   	; 0x4230 <ultoa>
    342a:	be 01       	movw	r22, r28
    342c:	6f 5f       	subi	r22, 0xFF	; 255
    342e:	7f 4f       	sbci	r23, 0xFF	; 255
    3430:	c8 01       	movw	r24, r16
    3432:	cb df       	rcall	.-106    	; 0x33ca <_ZN6StringaSEPKc>
    3434:	a1 96       	adiw	r28, 0x21	; 33
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	df 91       	pop	r29
    3442:	cf 91       	pop	r28
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	08 95       	ret

0000344a <_ZN6String6concatEPKcj>:
    344a:	ef 92       	push	r14
    344c:	ff 92       	push	r15
    344e:	0f 93       	push	r16
    3450:	1f 93       	push	r17
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	61 15       	cp	r22, r1
    3458:	71 05       	cpc	r23, r1
    345a:	11 f4       	brne	.+4      	; 0x3460 <_ZN6String6concatEPKcj+0x16>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	1a c0       	rjmp	.+52     	; 0x3494 <_ZN6String6concatEPKcj+0x4a>
    3460:	41 15       	cp	r20, r1
    3462:	51 05       	cpc	r21, r1
    3464:	b1 f0       	breq	.+44     	; 0x3492 <_ZN6String6concatEPKcj+0x48>
    3466:	7b 01       	movw	r14, r22
    3468:	ec 01       	movw	r28, r24
    346a:	8c 81       	ldd	r24, Y+4	; 0x04
    346c:	9d 81       	ldd	r25, Y+5	; 0x05
    346e:	8a 01       	movw	r16, r20
    3470:	08 0f       	add	r16, r24
    3472:	19 1f       	adc	r17, r25
    3474:	b8 01       	movw	r22, r16
    3476:	ce 01       	movw	r24, r28
    3478:	3e df       	rcall	.-388    	; 0x32f6 <_ZN6String7reserveEj>
    347a:	88 23       	and	r24, r24
    347c:	79 f3       	breq	.-34     	; 0x345c <_ZN6String6concatEPKcj+0x12>
    347e:	28 81       	ld	r18, Y
    3480:	39 81       	ldd	r19, Y+1	; 0x01
    3482:	8c 81       	ldd	r24, Y+4	; 0x04
    3484:	9d 81       	ldd	r25, Y+5	; 0x05
    3486:	b7 01       	movw	r22, r14
    3488:	82 0f       	add	r24, r18
    348a:	93 1f       	adc	r25, r19
    348c:	c0 d6       	rcall	.+3456   	; 0x420e <strcpy>
    348e:	1d 83       	std	Y+5, r17	; 0x05
    3490:	0c 83       	std	Y+4, r16	; 0x04
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	df 91       	pop	r29
    3496:	cf 91       	pop	r28
    3498:	1f 91       	pop	r17
    349a:	0f 91       	pop	r16
    349c:	ff 90       	pop	r15
    349e:	ef 90       	pop	r14
    34a0:	08 95       	ret

000034a2 <_ZN6String6concatEi>:
    34a2:	ef 92       	push	r14
    34a4:	ff 92       	push	r15
    34a6:	0f 93       	push	r16
    34a8:	1f 93       	push	r17
    34aa:	cf 93       	push	r28
    34ac:	df 93       	push	r29
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	28 97       	sbiw	r28, 0x08	; 8
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	7c 01       	movw	r14, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	4a e0       	ldi	r20, 0x0A	; 10
    34c4:	8e 01       	movw	r16, r28
    34c6:	0f 5f       	subi	r16, 0xFF	; 255
    34c8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ca:	b8 01       	movw	r22, r16
    34cc:	a7 d6       	rcall	.+3406   	; 0x421c <__itoa_ncheck>
    34ce:	f8 01       	movw	r30, r16
    34d0:	01 90       	ld	r0, Z+
    34d2:	00 20       	and	r0, r0
    34d4:	e9 f7       	brne	.-6      	; 0x34d0 <_ZN6String6concatEi+0x2e>
    34d6:	31 97       	sbiw	r30, 0x01	; 1
    34d8:	af 01       	movw	r20, r30
    34da:	40 1b       	sub	r20, r16
    34dc:	51 0b       	sbc	r21, r17
    34de:	b8 01       	movw	r22, r16
    34e0:	c7 01       	movw	r24, r14
    34e2:	b3 df       	rcall	.-154    	; 0x344a <_ZN6String6concatEPKcj>
    34e4:	28 96       	adiw	r28, 0x08	; 8
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	1f 91       	pop	r17
    34f6:	0f 91       	pop	r16
    34f8:	ff 90       	pop	r15
    34fa:	ef 90       	pop	r14
    34fc:	08 95       	ret

000034fe <_ZplRK15StringSumHelperRK6String>:
    34fe:	cf 93       	push	r28
    3500:	df 93       	push	r29
    3502:	ec 01       	movw	r28, r24
    3504:	fb 01       	movw	r30, r22
    3506:	44 81       	ldd	r20, Z+4	; 0x04
    3508:	55 81       	ldd	r21, Z+5	; 0x05
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	9d df       	rcall	.-198    	; 0x344a <_ZN6String6concatEPKcj>
    3510:	81 11       	cpse	r24, r1
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <_ZplRK15StringSumHelperRK6String+0x1a>
    3514:	ce 01       	movw	r24, r28
    3516:	c5 de       	rcall	.-630    	; 0x32a2 <_ZN6String10invalidateEv>
    3518:	ce 01       	movw	r24, r28
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	08 95       	ret

00003520 <_ZplRK15StringSumHelperPKc>:
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
    3524:	ec 01       	movw	r28, r24
    3526:	61 15       	cp	r22, r1
    3528:	71 05       	cpc	r23, r1
    352a:	59 f0       	breq	.+22     	; 0x3542 <_ZplRK15StringSumHelperPKc+0x22>
    352c:	fb 01       	movw	r30, r22
    352e:	01 90       	ld	r0, Z+
    3530:	00 20       	and	r0, r0
    3532:	e9 f7       	brne	.-6      	; 0x352e <_ZplRK15StringSumHelperPKc+0xe>
    3534:	31 97       	sbiw	r30, 0x01	; 1
    3536:	af 01       	movw	r20, r30
    3538:	46 1b       	sub	r20, r22
    353a:	57 0b       	sbc	r21, r23
    353c:	86 df       	rcall	.-244    	; 0x344a <_ZN6String6concatEPKcj>
    353e:	81 11       	cpse	r24, r1
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <_ZplRK15StringSumHelperPKc+0x26>
    3542:	ce 01       	movw	r24, r28
    3544:	ae de       	rcall	.-676    	; 0x32a2 <_ZN6String10invalidateEv>
    3546:	ce 01       	movw	r24, r28
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	08 95       	ret

0000354e <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3554:	a6 df       	rcall	.-180    	; 0x34a2 <_ZN6String6concatEi>
    3556:	81 11       	cpse	r24, r1
    3558:	02 c0       	rjmp	.+4      	; 0x355e <_ZplRK15StringSumHelperi+0x10>
    355a:	ce 01       	movw	r24, r28
    355c:	a2 de       	rcall	.-700    	; 0x32a2 <_ZN6String10invalidateEv>
	return a;
}
    355e:	ce 01       	movw	r24, r28
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	08 95       	ret

00003566 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    3566:	fc 01       	movw	r30, r24
    3568:	13 82       	std	Z+3, r1	; 0x03
    356a:	12 82       	std	Z+2, r1	; 0x02
    356c:	8f eb       	ldi	r24, 0xBF	; 191
    356e:	94 e0       	ldi	r25, 0x04	; 4
    3570:	91 83       	std	Z+1, r25	; 0x01
    3572:	80 83       	st	Z, r24
    3574:	64 83       	std	Z+4, r22	; 0x04
    3576:	41 87       	std	Z+9, r20	; 0x09
    3578:	22 87       	std	Z+10, r18	; 0x0a
    357a:	13 86       	std	Z+11, r1	; 0x0b
    357c:	08 95       	ret

0000357e <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    357e:	1f 93       	push	r17
    3580:	cf 93       	push	r28
    3582:	df 93       	push	r29
    3584:	ec 01       	movw	r28, r24
    3586:	16 2f       	mov	r17, r22
    3588:	6c 81       	ldd	r22, Y+4	; 0x04
    358a:	83 ee       	ldi	r24, 0xE3	; 227
    358c:	96 e0       	ldi	r25, 0x06	; 6
    358e:	e0 d1       	rcall	.+960    	; 0x3950 <_ZN7TwoWire17beginTransmissionEh>
    3590:	6b 85       	ldd	r22, Y+11	; 0x0b
    3592:	61 2b       	or	r22, r17
    3594:	83 ee       	ldi	r24, 0xE3	; 227
    3596:	96 e0       	ldi	r25, 0x06	; 6
    3598:	8e d1       	rcall	.+796    	; 0x38b6 <_ZN7TwoWire5writeEh>
    359a:	83 ee       	ldi	r24, 0xE3	; 227
    359c:	96 e0       	ldi	r25, 0x06	; 6
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	1f 91       	pop	r17
    35a4:	f1 c1       	rjmp	.+994    	; 0x3988 <_ZN7TwoWire15endTransmissionEv>

000035a6 <_ZN17LiquidCrystal_I2C9backlightEv>:
    35a6:	28 e0       	ldi	r18, 0x08	; 8
    35a8:	fc 01       	movw	r30, r24
    35aa:	23 87       	std	Z+11, r18	; 0x0b
    35ac:	60 e0       	ldi	r22, 0x00	; 0
    35ae:	e7 cf       	rjmp	.-50     	; 0x357e <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000035b0 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	cf 93       	push	r28
    35b6:	8c 01       	movw	r16, r24
    35b8:	c6 2f       	mov	r28, r22
    35ba:	64 60       	ori	r22, 0x04	; 4
    35bc:	e0 df       	rcall	.-64     	; 0x357e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	3f dd       	rcall	.-1410   	; 0x3042 <delayMicroseconds>
    35c4:	6c 2f       	mov	r22, r28
    35c6:	6b 7f       	andi	r22, 0xFB	; 251
    35c8:	c8 01       	movw	r24, r16
    35ca:	d9 df       	rcall	.-78     	; 0x357e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    35cc:	82 e3       	ldi	r24, 0x32	; 50
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	35 cd       	rjmp	.-1430   	; 0x3042 <delayMicroseconds>

000035d8 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    35d8:	1f 93       	push	r17
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	ec 01       	movw	r28, r24
    35e0:	16 2f       	mov	r17, r22
    35e2:	cd df       	rcall	.-102    	; 0x357e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    35e4:	61 2f       	mov	r22, r17
    35e6:	ce 01       	movw	r24, r28
    35e8:	df 91       	pop	r29
    35ea:	cf 91       	pop	r28
    35ec:	1f 91       	pop	r17
    35ee:	e0 cf       	rjmp	.-64     	; 0x35b0 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000035f0 <_ZN17LiquidCrystal_I2C4sendEhh>:
    35f0:	0f 93       	push	r16
    35f2:	1f 93       	push	r17
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
    35f8:	8c 01       	movw	r16, r24
    35fa:	c6 2f       	mov	r28, r22
    35fc:	d4 2f       	mov	r29, r20
    35fe:	60 7f       	andi	r22, 0xF0	; 240
    3600:	64 2b       	or	r22, r20
    3602:	ea df       	rcall	.-44     	; 0x35d8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    3604:	80 e1       	ldi	r24, 0x10	; 16
    3606:	c8 9f       	mul	r28, r24
    3608:	b0 01       	movw	r22, r0
    360a:	11 24       	eor	r1, r1
    360c:	6d 2b       	or	r22, r29
    360e:	c8 01       	movw	r24, r16
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	df cf       	rjmp	.-66     	; 0x35d8 <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000361a <_ZN17LiquidCrystal_I2C7commandEh>:
    361a:	40 e0       	ldi	r20, 0x00	; 0
    361c:	e9 cf       	rjmp	.-46     	; 0x35f0 <_ZN17LiquidCrystal_I2C4sendEhh>

0000361e <_ZN17LiquidCrystal_I2C5clearEv>:
    361e:	61 e0       	ldi	r22, 0x01	; 1
    3620:	fc df       	rcall	.-8      	; 0x361a <_ZN17LiquidCrystal_I2C7commandEh>
    3622:	80 ed       	ldi	r24, 0xD0	; 208
    3624:	97 e0       	ldi	r25, 0x07	; 7
    3626:	0d cd       	rjmp	.-1510   	; 0x3042 <delayMicroseconds>

00003628 <_ZN17LiquidCrystal_I2C4homeEv>:
    3628:	62 e0       	ldi	r22, 0x02	; 2
    362a:	f7 df       	rcall	.-18     	; 0x361a <_ZN17LiquidCrystal_I2C7commandEh>
    362c:	80 ed       	ldi	r24, 0xD0	; 208
    362e:	97 e0       	ldi	r25, 0x07	; 7
    3630:	08 cd       	rjmp	.-1520   	; 0x3042 <delayMicroseconds>

00003632 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    3632:	cf 93       	push	r28
    3634:	df 93       	push	r29
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	28 97       	sbiw	r28, 0x08	; 8
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
    3646:	9c 01       	movw	r18, r24
    3648:	88 e0       	ldi	r24, 0x08	; 8
    364a:	ea e1       	ldi	r30, 0x1A	; 26
    364c:	f2 e0       	ldi	r31, 0x02	; 2
    364e:	de 01       	movw	r26, r28
    3650:	11 96       	adiw	r26, 0x01	; 1
    3652:	01 90       	ld	r0, Z+
    3654:	0d 92       	st	X+, r0
    3656:	8a 95       	dec	r24
    3658:	e1 f7       	brne	.-8      	; 0x3652 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    365a:	f9 01       	movw	r30, r18
    365c:	80 85       	ldd	r24, Z+8	; 0x08
    365e:	84 17       	cp	r24, r20
    3660:	10 f4       	brcc	.+4      	; 0x3666 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    3662:	4f ef       	ldi	r20, 0xFF	; 255
    3664:	48 0f       	add	r20, r24
    3666:	fe 01       	movw	r30, r28
    3668:	31 96       	adiw	r30, 0x01	; 1
    366a:	e4 0f       	add	r30, r20
    366c:	f1 1d       	adc	r31, r1
    366e:	e4 0f       	add	r30, r20
    3670:	f1 1d       	adc	r31, r1
    3672:	90 81       	ld	r25, Z
    3674:	69 0f       	add	r22, r25
    3676:	60 68       	ori	r22, 0x80	; 128
    3678:	c9 01       	movw	r24, r18
    367a:	28 96       	adiw	r28, 0x08	; 8
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	df 91       	pop	r29
    3688:	cf 91       	pop	r28
    368a:	c7 cf       	rjmp	.-114    	; 0x361a <_ZN17LiquidCrystal_I2C7commandEh>

0000368c <_ZN17LiquidCrystal_I2C7displayEv>:
    368c:	fc 01       	movw	r30, r24
    368e:	66 81       	ldd	r22, Z+6	; 0x06
    3690:	26 2f       	mov	r18, r22
    3692:	24 60       	ori	r18, 0x04	; 4
    3694:	26 83       	std	Z+6, r18	; 0x06
    3696:	6c 60       	ori	r22, 0x0C	; 12
    3698:	c0 cf       	rjmp	.-128    	; 0x361a <_ZN17LiquidCrystal_I2C7commandEh>

0000369a <_ZN17LiquidCrystal_I2C10createCharEhPh>:
    369a:	ef 92       	push	r14
    369c:	ff 92       	push	r15
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
    36a6:	8c 01       	movw	r16, r24
    36a8:	7a 01       	movw	r14, r20
    36aa:	67 70       	andi	r22, 0x07	; 7
    36ac:	88 e0       	ldi	r24, 0x08	; 8
    36ae:	68 9f       	mul	r22, r24
    36b0:	b0 01       	movw	r22, r0
    36b2:	11 24       	eor	r1, r1
    36b4:	60 64       	ori	r22, 0x40	; 64
    36b6:	c8 01       	movw	r24, r16
    36b8:	b0 df       	rcall	.-160    	; 0x361a <_ZN17LiquidCrystal_I2C7commandEh>
    36ba:	e7 01       	movw	r28, r14
    36bc:	a8 e0       	ldi	r26, 0x08	; 8
    36be:	ea 0e       	add	r14, r26
    36c0:	f1 1c       	adc	r15, r1
    36c2:	69 91       	ld	r22, Y+
    36c4:	d8 01       	movw	r26, r16
    36c6:	ed 91       	ld	r30, X+
    36c8:	fc 91       	ld	r31, X
    36ca:	01 90       	ld	r0, Z+
    36cc:	f0 81       	ld	r31, Z
    36ce:	e0 2d       	mov	r30, r0
    36d0:	c8 01       	movw	r24, r16
    36d2:	19 95       	eicall
    36d4:	ce 15       	cp	r28, r14
    36d6:	df 05       	cpc	r29, r15
    36d8:	a1 f7       	brne	.-24     	; 0x36c2 <_ZN17LiquidCrystal_I2C10createCharEhPh+0x28>
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	ff 90       	pop	r15
    36e4:	ef 90       	pop	r14
    36e6:	08 95       	ret

000036e8 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    36e8:	41 e0       	ldi	r20, 0x01	; 1
    36ea:	82 df       	rcall	.-252    	; 0x35f0 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	08 95       	ret

000036f2 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	ec 01       	movw	r28, r24
	if (lines > 1) {
    36f8:	42 30       	cpi	r20, 0x02	; 2
    36fa:	18 f0       	brcs	.+6      	; 0x3702 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    36fc:	8d 81       	ldd	r24, Y+5	; 0x05
    36fe:	88 60       	ori	r24, 0x08	; 8
    3700:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    3702:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    3704:	22 23       	and	r18, r18
    3706:	29 f0       	breq	.+10     	; 0x3712 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    3708:	41 30       	cpi	r20, 0x01	; 1
    370a:	19 f4       	brne	.+6      	; 0x3712 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    370c:	8d 81       	ldd	r24, Y+5	; 0x05
    370e:	84 60       	ori	r24, 0x04	; 4
    3710:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    3712:	62 e3       	ldi	r22, 0x32	; 50
    3714:	70 e0       	ldi	r23, 0x00	; 0
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	5a dc       	rcall	.-1868   	; 0x2fd0 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    371c:	6b 85       	ldd	r22, Y+11	; 0x0b
    371e:	ce 01       	movw	r24, r28
    3720:	2e df       	rcall	.-420    	; 0x357e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    3722:	68 ee       	ldi	r22, 0xE8	; 232
    3724:	73 e0       	ldi	r23, 0x03	; 3
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	52 dc       	rcall	.-1884   	; 0x2fd0 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    372c:	60 e3       	ldi	r22, 0x30	; 48
    372e:	ce 01       	movw	r24, r28
    3730:	53 df       	rcall	.-346    	; 0x35d8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    3732:	84 e9       	ldi	r24, 0x94	; 148
    3734:	91 e1       	ldi	r25, 0x11	; 17
    3736:	85 dc       	rcall	.-1782   	; 0x3042 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    3738:	60 e3       	ldi	r22, 0x30	; 48
    373a:	ce 01       	movw	r24, r28
    373c:	4d df       	rcall	.-358    	; 0x35d8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    373e:	84 e9       	ldi	r24, 0x94	; 148
    3740:	91 e1       	ldi	r25, 0x11	; 17
    3742:	7f dc       	rcall	.-1794   	; 0x3042 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    3744:	60 e3       	ldi	r22, 0x30	; 48
    3746:	ce 01       	movw	r24, r28
    3748:	47 df       	rcall	.-370    	; 0x35d8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    374a:	86 e9       	ldi	r24, 0x96	; 150
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	79 dc       	rcall	.-1806   	; 0x3042 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    3750:	60 e2       	ldi	r22, 0x20	; 32
    3752:	ce 01       	movw	r24, r28
    3754:	41 df       	rcall	.-382    	; 0x35d8 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    3756:	6d 81       	ldd	r22, Y+5	; 0x05
    3758:	60 62       	ori	r22, 0x20	; 32
    375a:	ce 01       	movw	r24, r28
    375c:	5e df       	rcall	.-324    	; 0x361a <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    375e:	84 e0       	ldi	r24, 0x04	; 4
    3760:	8e 83       	std	Y+6, r24	; 0x06
	display();
    3762:	ce 01       	movw	r24, r28
    3764:	93 df       	rcall	.-218    	; 0x368c <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    3766:	ce 01       	movw	r24, r28
    3768:	5a df       	rcall	.-332    	; 0x361e <_ZN17LiquidCrystal_I2C5clearEv>
    376a:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    376c:	8f 83       	std	Y+7, r24	; 0x07
    376e:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    3770:	ce 01       	movw	r24, r28
    3772:	53 df       	rcall	.-346    	; 0x361a <_ZN17LiquidCrystal_I2C7commandEh>
    3774:	ce 01       	movw	r24, r28
    3776:	df 91       	pop	r29
	
	home();
    3778:	cf 91       	pop	r28
  
}
    377a:	56 cf       	rjmp	.-340    	; 0x3628 <_ZN17LiquidCrystal_I2C4homeEv>

0000377c <_ZN17LiquidCrystal_I2C9init_privEv>:
    377c:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    377e:	df 93       	push	r29
    3780:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    3782:	83 ee       	ldi	r24, 0xE3	; 227
    3784:	96 e0       	ldi	r25, 0x06	; 6
    3786:	d5 d0       	rcall	.+426    	; 0x3932 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    3788:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	4a 85       	ldd	r20, Y+10	; 0x0a
    378e:	69 85       	ldd	r22, Y+9	; 0x09
    3790:	ce 01       	movw	r24, r28
}
    3792:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    3794:	cf 91       	pop	r28
    3796:	ad cf       	rjmp	.-166    	; 0x36f2 <_ZN17LiquidCrystal_I2C5beginEhhh>

00003798 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    3798:	f1 cf       	rjmp	.-30     	; 0x377c <_ZN17LiquidCrystal_I2C9init_privEv>

0000379a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    379a:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <_ZN7TwoWire14rxBufferLengthE>
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	20 91 18 07 	lds	r18, 0x0718	; 0x800718 <_ZN7TwoWire13rxBufferIndexE>
    37a4:	82 1b       	sub	r24, r18
    37a6:	91 09       	sbc	r25, r1
    37a8:	08 95       	ret

000037aa <_ZN7TwoWire4readEv>:
    37aa:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <_ZN7TwoWire13rxBufferIndexE>
    37ae:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <_ZN7TwoWire14rxBufferLengthE>
    37b2:	98 17       	cp	r25, r24
    37b4:	50 f4       	brcc	.+20     	; 0x37ca <_ZN7TwoWire4readEv+0x20>
    37b6:	e9 2f       	mov	r30, r25
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	e7 5e       	subi	r30, 0xE7	; 231
    37bc:	f8 4f       	sbci	r31, 0xF8	; 248
    37be:	20 81       	ld	r18, Z
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	9f 5f       	subi	r25, 0xFF	; 255
    37c4:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <_ZN7TwoWire13rxBufferIndexE>
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <_ZN7TwoWire4readEv+0x24>
    37ca:	2f ef       	ldi	r18, 0xFF	; 255
    37cc:	3f ef       	ldi	r19, 0xFF	; 255
    37ce:	c9 01       	movw	r24, r18
    37d0:	08 95       	ret

000037d2 <_ZN7TwoWire4peekEv>:
    37d2:	e0 91 18 07 	lds	r30, 0x0718	; 0x800718 <_ZN7TwoWire13rxBufferIndexE>
    37d6:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <_ZN7TwoWire14rxBufferLengthE>
    37da:	e8 17       	cp	r30, r24
    37dc:	30 f4       	brcc	.+12     	; 0x37ea <_ZN7TwoWire4peekEv+0x18>
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	e7 5e       	subi	r30, 0xE7	; 231
    37e2:	f8 4f       	sbci	r31, 0xF8	; 248
    37e4:	80 81       	ld	r24, Z
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	08 95       	ret
    37ea:	8f ef       	ldi	r24, 0xFF	; 255
    37ec:	9f ef       	ldi	r25, 0xFF	; 255
    37ee:	08 95       	ret

000037f0 <_ZN7TwoWire5flushEv>:
    37f0:	08 95       	ret

000037f2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	ec 01       	movw	r28, r24
    37f8:	e0 91 ef 06 	lds	r30, 0x06EF	; 0x8006ef <_ZN7TwoWire14user_onReceiveE>
    37fc:	f0 91 f0 06 	lds	r31, 0x06F0	; 0x8006f0 <_ZN7TwoWire14user_onReceiveE+0x1>
    3800:	30 97       	sbiw	r30, 0x00	; 0
    3802:	f1 f0       	breq	.+60     	; 0x3840 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3804:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <_ZN7TwoWire13rxBufferIndexE>
    3808:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <_ZN7TwoWire14rxBufferLengthE>
    380c:	98 17       	cp	r25, r24
    380e:	c0 f0       	brcs	.+48     	; 0x3840 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	29 2f       	mov	r18, r25
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	26 17       	cp	r18, r22
    3818:	37 07       	cpc	r19, r23
    381a:	54 f4       	brge	.+20     	; 0x3830 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    381c:	de 01       	movw	r26, r28
    381e:	a2 0f       	add	r26, r18
    3820:	b3 1f       	adc	r27, r19
    3822:	4c 91       	ld	r20, X
    3824:	d9 01       	movw	r26, r18
    3826:	a7 5e       	subi	r26, 0xE7	; 231
    3828:	b8 4f       	sbci	r27, 0xF8	; 248
    382a:	4c 93       	st	X, r20
    382c:	9f 5f       	subi	r25, 0xFF	; 255
    382e:	f1 cf       	rjmp	.-30     	; 0x3812 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3830:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <_ZN7TwoWire13rxBufferIndexE>
    3834:	60 93 17 07 	sts	0x0717, r22	; 0x800717 <_ZN7TwoWire14rxBufferLengthE>
    3838:	cb 01       	movw	r24, r22
    383a:	df 91       	pop	r29
    383c:	cf 91       	pop	r28
    383e:	19 94       	eijmp
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <_ZN7TwoWire16onRequestServiceEv>:
    3846:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <_ZN7TwoWire14user_onRequestE>
    384a:	f0 91 f2 06 	lds	r31, 0x06F2	; 0x8006f2 <_ZN7TwoWire14user_onRequestE+0x1>
    384e:	30 97       	sbiw	r30, 0x00	; 0
    3850:	29 f0       	breq	.+10     	; 0x385c <_ZN7TwoWire16onRequestServiceEv+0x16>
    3852:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <_ZN7TwoWire13txBufferIndexE>
    3856:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN7TwoWire14txBufferLengthE>
    385a:	19 94       	eijmp
    385c:	08 95       	ret

0000385e <_ZN7TwoWire5writeEPKhj>:
    385e:	cf 92       	push	r12
    3860:	df 92       	push	r13
    3862:	ef 92       	push	r14
    3864:	ff 92       	push	r15
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    386a:	cf 93       	push	r28
    386c:	df 93       	push	r29
    386e:	7c 01       	movw	r14, r24
    3870:	cb 01       	movw	r24, r22
    3872:	8a 01       	movw	r16, r20
    3874:	20 91 f3 06 	lds	r18, 0x06F3	; 0x8006f3 <_ZN7TwoWire12transmittingE>
    3878:	22 23       	and	r18, r18
    387a:	89 f0       	breq	.+34     	; 0x389e <_ZN7TwoWire5writeEPKhj+0x40>
    387c:	eb 01       	movw	r28, r22
    387e:	6b 01       	movw	r12, r22
    3880:	c4 0e       	add	r12, r20
    3882:	d5 1e       	adc	r13, r21
    3884:	cc 15       	cp	r28, r12
    3886:	dd 05       	cpc	r29, r13
    3888:	61 f0       	breq	.+24     	; 0x38a2 <_ZN7TwoWire5writeEPKhj+0x44>
    388a:	69 91       	ld	r22, Y+
    388c:	d7 01       	movw	r26, r14
    388e:	ed 91       	ld	r30, X+
    3890:	fc 91       	ld	r31, X
    3892:	01 90       	ld	r0, Z+
    3894:	f0 81       	ld	r31, Z
    3896:	e0 2d       	mov	r30, r0
    3898:	c7 01       	movw	r24, r14
    389a:	19 95       	eicall
    389c:	f3 cf       	rjmp	.-26     	; 0x3884 <_ZN7TwoWire5writeEPKhj+0x26>
    389e:	64 2f       	mov	r22, r20
    38a0:	eb d0       	rcall	.+470    	; 0x3a78 <twi_transmit>
    38a2:	c8 01       	movw	r24, r16
    38a4:	df 91       	pop	r29
    38a6:	cf 91       	pop	r28
    38a8:	1f 91       	pop	r17
    38aa:	0f 91       	pop	r16
    38ac:	ff 90       	pop	r15
    38ae:	ef 90       	pop	r14
    38b0:	df 90       	pop	r13
    38b2:	cf 90       	pop	r12
    38b4:	08 95       	ret

000038b6 <_ZN7TwoWire5writeEh>:
    38b6:	cf 93       	push	r28
    38b8:	df 93       	push	r29
    38ba:	1f 92       	push	r1
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	69 83       	std	Y+1, r22	; 0x01
    38c2:	20 91 f3 06 	lds	r18, 0x06F3	; 0x8006f3 <_ZN7TwoWire12transmittingE>
    38c6:	22 23       	and	r18, r18
    38c8:	d1 f0       	breq	.+52     	; 0x38fe <_ZN7TwoWire5writeEh+0x48>
    38ca:	20 91 f4 06 	lds	r18, 0x06F4	; 0x8006f4 <_ZN7TwoWire14txBufferLengthE>
    38ce:	20 32       	cpi	r18, 0x20	; 32
    38d0:	40 f0       	brcs	.+16     	; 0x38e2 <_ZN7TwoWire5writeEh+0x2c>
    38d2:	21 e0       	ldi	r18, 0x01	; 1
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	fc 01       	movw	r30, r24
    38d8:	33 83       	std	Z+3, r19	; 0x03
    38da:	22 83       	std	Z+2, r18	; 0x02
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	14 c0       	rjmp	.+40     	; 0x390a <_ZN7TwoWire5writeEh+0x54>
    38e2:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <_ZN7TwoWire13txBufferIndexE>
    38e6:	e8 2f       	mov	r30, r24
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	ea 50       	subi	r30, 0x0A	; 10
    38ec:	f9 4f       	sbci	r31, 0xF9	; 249
    38ee:	99 81       	ldd	r25, Y+1	; 0x01
    38f0:	90 83       	st	Z, r25
    38f2:	8f 5f       	subi	r24, 0xFF	; 255
    38f4:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <_ZN7TwoWire13txBufferIndexE>
    38f8:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <_ZN7TwoWire14txBufferLengthE>
    38fc:	04 c0       	rjmp	.+8      	; 0x3906 <_ZN7TwoWire5writeEh+0x50>
    38fe:	61 e0       	ldi	r22, 0x01	; 1
    3900:	ce 01       	movw	r24, r28
    3902:	01 96       	adiw	r24, 0x01	; 1
    3904:	b9 d0       	rcall	.+370    	; 0x3a78 <twi_transmit>
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	0f 90       	pop	r0
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	08 95       	ret

00003912 <_ZN7TwoWireC1Ev>:
    3912:	fc 01       	movw	r30, r24
    3914:	13 82       	std	Z+3, r1	; 0x03
    3916:	12 82       	std	Z+2, r1	; 0x02
    3918:	88 ee       	ldi	r24, 0xE8	; 232
    391a:	93 e0       	ldi	r25, 0x03	; 3
    391c:	a0 e0       	ldi	r26, 0x00	; 0
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	84 83       	std	Z+4, r24	; 0x04
    3922:	95 83       	std	Z+5, r25	; 0x05
    3924:	a6 83       	std	Z+6, r26	; 0x06
    3926:	b7 83       	std	Z+7, r27	; 0x07
    3928:	8b ec       	ldi	r24, 0xCB	; 203
    392a:	94 e0       	ldi	r25, 0x04	; 4
    392c:	91 83       	std	Z+1, r25	; 0x01
    392e:	80 83       	st	Z, r24
    3930:	08 95       	ret

00003932 <_ZN7TwoWire5beginEv>:
    3932:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <_ZN7TwoWire13rxBufferIndexE>
    3936:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <_ZN7TwoWire14rxBufferLengthE>
    393a:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <_ZN7TwoWire13txBufferIndexE>
    393e:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN7TwoWire14txBufferLengthE>
    3942:	28 d0       	rcall	.+80     	; 0x3994 <twi_init>
    3944:	83 e2       	ldi	r24, 0x23	; 35
    3946:	9c e1       	ldi	r25, 0x1C	; 28
    3948:	c4 d0       	rcall	.+392    	; 0x3ad2 <twi_attachSlaveTxEvent>
    394a:	89 ef       	ldi	r24, 0xF9	; 249
    394c:	9b e1       	ldi	r25, 0x1B	; 27
    394e:	bc c0       	rjmp	.+376    	; 0x3ac8 <twi_attachSlaveRxEvent>

00003950 <_ZN7TwoWire17beginTransmissionEh>:
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <_ZN7TwoWire12transmittingE>
    3956:	60 93 16 07 	sts	0x0716, r22	; 0x800716 <_ZN7TwoWire9txAddressE>
    395a:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <_ZN7TwoWire13txBufferIndexE>
    395e:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN7TwoWire14txBufferLengthE>
    3962:	08 95       	ret

00003964 <_ZN7TwoWire15endTransmissionEh>:
    3964:	0f 93       	push	r16
    3966:	06 2f       	mov	r16, r22
    3968:	21 e0       	ldi	r18, 0x01	; 1
    396a:	40 91 f4 06 	lds	r20, 0x06F4	; 0x8006f4 <_ZN7TwoWire14txBufferLengthE>
    396e:	66 ef       	ldi	r22, 0xF6	; 246
    3970:	76 e0       	ldi	r23, 0x06	; 6
    3972:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <_ZN7TwoWire9txAddressE>
    3976:	2a d0       	rcall	.+84     	; 0x39cc <twi_writeTo>
    3978:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <_ZN7TwoWire13txBufferIndexE>
    397c:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <_ZN7TwoWire14txBufferLengthE>
    3980:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <_ZN7TwoWire12transmittingE>
    3984:	0f 91       	pop	r16
    3986:	08 95       	ret

00003988 <_ZN7TwoWire15endTransmissionEv>:
    3988:	61 e0       	ldi	r22, 0x01	; 1
    398a:	ec cf       	rjmp	.-40     	; 0x3964 <_ZN7TwoWire15endTransmissionEh>

0000398c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    398c:	83 ee       	ldi	r24, 0xE3	; 227
    398e:	96 e0       	ldi	r25, 0x06	; 6
    3990:	c0 cf       	rjmp	.-128    	; 0x3912 <_ZN7TwoWireC1Ev>

00003992 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3992:	08 95       	ret

00003994 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3994:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <twi_state>
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <twi_sendStop>
    399e:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <twi_inRepStart>
    39a2:	61 e0       	ldi	r22, 0x01	; 1
    39a4:	84 e1       	ldi	r24, 0x14	; 20
    39a6:	4b dc       	rcall	.-1898   	; 0x323e <digitalWrite>
    39a8:	61 e0       	ldi	r22, 0x01	; 1
    39aa:	85 e1       	ldi	r24, 0x15	; 21
    39ac:	48 dc       	rcall	.-1904   	; 0x323e <digitalWrite>
    39ae:	e9 eb       	ldi	r30, 0xB9	; 185
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z
    39b4:	8e 7f       	andi	r24, 0xFE	; 254
    39b6:	80 83       	st	Z, r24
    39b8:	80 81       	ld	r24, Z
    39ba:	8d 7f       	andi	r24, 0xFD	; 253
    39bc:	80 83       	st	Z, r24
    39be:	88 e4       	ldi	r24, 0x48	; 72
    39c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    39c4:	85 e4       	ldi	r24, 0x45	; 69
    39c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39ca:	08 95       	ret

000039cc <twi_writeTo>:
    39cc:	0f 93       	push	r16
    39ce:	41 32       	cpi	r20, 0x21	; 33
    39d0:	08 f0       	brcs	.+2      	; 0x39d4 <twi_writeTo+0x8>
    39d2:	4a c0       	rjmp	.+148    	; 0x3a68 <twi_writeTo+0x9c>
    39d4:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <twi_state>
    39d8:	91 11       	cpse	r25, r1
    39da:	fc cf       	rjmp	.-8      	; 0x39d4 <twi_writeTo+0x8>
    39dc:	32 e0       	ldi	r19, 0x02	; 2
    39de:	30 93 a6 07 	sts	0x07A6, r19	; 0x8007a6 <twi_state>
    39e2:	00 93 a4 07 	sts	0x07A4, r16	; 0x8007a4 <twi_sendStop>
    39e6:	3f ef       	ldi	r19, 0xFF	; 255
    39e8:	30 93 39 07 	sts	0x0739, r19	; 0x800739 <twi_error>
    39ec:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <twi_masterBufferIndex>
    39f0:	40 93 7d 07 	sts	0x077D, r20	; 0x80077d <twi_masterBufferLength>
    39f4:	56 2f       	mov	r21, r22
    39f6:	af e7       	ldi	r26, 0x7F	; 127
    39f8:	b7 e0       	ldi	r27, 0x07	; 7
    39fa:	fb 01       	movw	r30, r22
    39fc:	3e 2f       	mov	r19, r30
    39fe:	35 1b       	sub	r19, r21
    3a00:	34 17       	cp	r19, r20
    3a02:	18 f4       	brcc	.+6      	; 0x3a0a <twi_writeTo+0x3e>
    3a04:	31 91       	ld	r19, Z+
    3a06:	3d 93       	st	X+, r19
    3a08:	f9 cf       	rjmp	.-14     	; 0x39fc <twi_writeTo+0x30>
    3a0a:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <twi_slarw>
    3a0e:	30 91 a5 07 	lds	r19, 0x07A5	; 0x8007a5 <twi_slarw>
    3a12:	88 0f       	add	r24, r24
    3a14:	83 2b       	or	r24, r19
    3a16:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <twi_slarw>
    3a1a:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <twi_inRepStart>
    3a1e:	81 30       	cpi	r24, 0x01	; 1
    3a20:	61 f4       	brne	.+24     	; 0x3a3a <twi_writeTo+0x6e>
    3a22:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <twi_inRepStart>
    3a26:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <twi_slarw>
    3a2a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3a2e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a32:	83 fd       	sbrc	r24, 3
    3a34:	f8 cf       	rjmp	.-16     	; 0x3a26 <twi_writeTo+0x5a>
    3a36:	85 ec       	ldi	r24, 0xC5	; 197
    3a38:	01 c0       	rjmp	.+2      	; 0x3a3c <twi_writeTo+0x70>
    3a3a:	85 ee       	ldi	r24, 0xE5	; 229
    3a3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a40:	22 23       	and	r18, r18
    3a42:	21 f0       	breq	.+8      	; 0x3a4c <twi_writeTo+0x80>
    3a44:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <twi_state>
    3a48:	82 30       	cpi	r24, 0x02	; 2
    3a4a:	d1 f3       	breq	.-12     	; 0x3a40 <twi_writeTo+0x74>
    3a4c:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <twi_error>
    3a50:	8f 3f       	cpi	r24, 0xFF	; 255
    3a52:	79 f0       	breq	.+30     	; 0x3a72 <twi_writeTo+0xa6>
    3a54:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <twi_error>
    3a58:	80 32       	cpi	r24, 0x20	; 32
    3a5a:	41 f0       	breq	.+16     	; 0x3a6c <twi_writeTo+0xa0>
    3a5c:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <twi_error>
    3a60:	80 33       	cpi	r24, 0x30	; 48
    3a62:	31 f0       	breq	.+12     	; 0x3a70 <twi_writeTo+0xa4>
    3a64:	94 e0       	ldi	r25, 0x04	; 4
    3a66:	05 c0       	rjmp	.+10     	; 0x3a72 <twi_writeTo+0xa6>
    3a68:	91 e0       	ldi	r25, 0x01	; 1
    3a6a:	03 c0       	rjmp	.+6      	; 0x3a72 <twi_writeTo+0xa6>
    3a6c:	92 e0       	ldi	r25, 0x02	; 2
    3a6e:	01 c0       	rjmp	.+2      	; 0x3a72 <twi_writeTo+0xa6>
    3a70:	93 e0       	ldi	r25, 0x03	; 3
    3a72:	89 2f       	mov	r24, r25
    3a74:	0f 91       	pop	r16
    3a76:	08 95       	ret

00003a78 <twi_transmit>:
    3a78:	40 91 5b 07 	lds	r20, 0x075B	; 0x80075b <twi_txBufferLength>
    3a7c:	26 2f       	mov	r18, r22
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	24 0f       	add	r18, r20
    3a82:	31 1d       	adc	r19, r1
    3a84:	21 32       	cpi	r18, 0x21	; 33
    3a86:	31 05       	cpc	r19, r1
    3a88:	dc f4       	brge	.+54     	; 0x3ac0 <twi_transmit+0x48>
    3a8a:	20 91 a6 07 	lds	r18, 0x07A6	; 0x8007a6 <twi_state>
    3a8e:	24 30       	cpi	r18, 0x04	; 4
    3a90:	c9 f4       	brne	.+50     	; 0x3ac4 <twi_transmit+0x4c>
    3a92:	fc 01       	movw	r30, r24
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	86 17       	cp	r24, r22
    3a9a:	58 f4       	brcc	.+22     	; 0x3ab2 <twi_transmit+0x3a>
    3a9c:	30 91 5b 07 	lds	r19, 0x075B	; 0x80075b <twi_txBufferLength>
    3aa0:	21 91       	ld	r18, Z+
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	a3 5a       	subi	r26, 0xA3	; 163
    3aa6:	b8 4f       	sbci	r27, 0xF8	; 248
    3aa8:	a3 0f       	add	r26, r19
    3aaa:	b1 1d       	adc	r27, r1
    3aac:	2c 93       	st	X, r18
    3aae:	01 96       	adiw	r24, 0x01	; 1
    3ab0:	f3 cf       	rjmp	.-26     	; 0x3a98 <twi_transmit+0x20>
    3ab2:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <twi_txBufferLength>
    3ab6:	68 0f       	add	r22, r24
    3ab8:	60 93 5b 07 	sts	0x075B, r22	; 0x80075b <twi_txBufferLength>
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	08 95       	ret
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	08 95       	ret
    3ac4:	82 e0       	ldi	r24, 0x02	; 2
    3ac6:	08 95       	ret

00003ac8 <twi_attachSlaveRxEvent>:
    3ac8:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <twi_onSlaveReceive+0x1>
    3acc:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <twi_onSlaveReceive>
    3ad0:	08 95       	ret

00003ad2 <twi_attachSlaveTxEvent>:
    3ad2:	90 93 a2 07 	sts	0x07A2, r25	; 0x8007a2 <twi_onSlaveTransmit+0x1>
    3ad6:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <twi_onSlaveTransmit>
    3ada:	08 95       	ret

00003adc <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3adc:	85 ed       	ldi	r24, 0xD5	; 213
    3ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3ae2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3ae6:	84 fd       	sbrc	r24, 4
    3ae8:	fc cf       	rjmp	.-8      	; 0x3ae2 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3aea:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <twi_state>
    3aee:	08 95       	ret

00003af0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3af0:	85 ec       	ldi	r24, 0xC5	; 197
    3af2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    3af6:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <twi_state>
    3afa:	08 95       	ret

00003afc <__vector_39>:
}

ISR(TWI_vect)
{
    3afc:	1f 92       	push	r1
    3afe:	0f 92       	push	r0
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	0f 92       	push	r0
    3b04:	11 24       	eor	r1, r1
    3b06:	0b b6       	in	r0, 0x3b	; 59
    3b08:	0f 92       	push	r0
    3b0a:	2f 93       	push	r18
    3b0c:	3f 93       	push	r19
    3b0e:	4f 93       	push	r20
    3b10:	5f 93       	push	r21
    3b12:	6f 93       	push	r22
    3b14:	7f 93       	push	r23
    3b16:	8f 93       	push	r24
    3b18:	9f 93       	push	r25
    3b1a:	af 93       	push	r26
    3b1c:	bf 93       	push	r27
    3b1e:	ef 93       	push	r30
    3b20:	ff 93       	push	r31
  switch(TW_STATUS){
    3b22:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3b26:	88 7f       	andi	r24, 0xF8	; 248
    3b28:	80 36       	cpi	r24, 0x60	; 96
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <__vector_39+0x32>
    3b2c:	9d c0       	rjmp	.+314    	; 0x3c68 <__vector_39+0x16c>
    3b2e:	70 f5       	brcc	.+92     	; 0x3b8c <__vector_39+0x90>
    3b30:	88 32       	cpi	r24, 0x28	; 40
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <__vector_39+0x3a>
    3b34:	5c c0       	rjmp	.+184    	; 0x3bee <__vector_39+0xf2>
    3b36:	90 f4       	brcc	.+36     	; 0x3b5c <__vector_39+0x60>
    3b38:	80 31       	cpi	r24, 0x10	; 16
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <__vector_39+0x42>
    3b3c:	55 c0       	rjmp	.+170    	; 0x3be8 <__vector_39+0xec>
    3b3e:	38 f4       	brcc	.+14     	; 0x3b4e <__vector_39+0x52>
    3b40:	88 23       	and	r24, r24
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <__vector_39+0x4a>
    3b44:	f3 c0       	rjmp	.+486    	; 0x3d2c <__vector_39+0x230>
    3b46:	88 30       	cpi	r24, 0x08	; 8
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <__vector_39+0x50>
    3b4a:	4e c0       	rjmp	.+156    	; 0x3be8 <__vector_39+0xec>
    3b4c:	f2 c0       	rjmp	.+484    	; 0x3d32 <__vector_39+0x236>
    3b4e:	88 31       	cpi	r24, 0x18	; 24
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <__vector_39+0x58>
    3b52:	4d c0       	rjmp	.+154    	; 0x3bee <__vector_39+0xf2>
    3b54:	80 32       	cpi	r24, 0x20	; 32
    3b56:	09 f4       	brne	.+2      	; 0x3b5a <__vector_39+0x5e>
    3b58:	5e c0       	rjmp	.+188    	; 0x3c16 <__vector_39+0x11a>
    3b5a:	eb c0       	rjmp	.+470    	; 0x3d32 <__vector_39+0x236>
    3b5c:	80 34       	cpi	r24, 0x40	; 64
    3b5e:	09 f4       	brne	.+2      	; 0x3b62 <__vector_39+0x66>
    3b60:	69 c0       	rjmp	.+210    	; 0x3c34 <__vector_39+0x138>
    3b62:	50 f4       	brcc	.+20     	; 0x3b78 <__vector_39+0x7c>
    3b64:	80 33       	cpi	r24, 0x30	; 48
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <__vector_39+0x6e>
    3b68:	56 c0       	rjmp	.+172    	; 0x3c16 <__vector_39+0x11a>
    3b6a:	88 33       	cpi	r24, 0x38	; 56
    3b6c:	09 f0       	breq	.+2      	; 0x3b70 <__vector_39+0x74>
    3b6e:	e1 c0       	rjmp	.+450    	; 0x3d32 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3b70:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <twi_error>
      twi_releaseBus();
    3b74:	bd df       	rcall	.-134    	; 0x3af0 <twi_releaseBus>
      break;
    3b76:	dd c0       	rjmp	.+442    	; 0x3d32 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3b78:	80 35       	cpi	r24, 0x50	; 80
    3b7a:	09 f4       	brne	.+2      	; 0x3b7e <__vector_39+0x82>
    3b7c:	4f c0       	rjmp	.+158    	; 0x3c1c <__vector_39+0x120>
    3b7e:	88 35       	cpi	r24, 0x58	; 88
    3b80:	09 f4       	brne	.+2      	; 0x3b84 <__vector_39+0x88>
    3b82:	5d c0       	rjmp	.+186    	; 0x3c3e <__vector_39+0x142>
    3b84:	88 34       	cpi	r24, 0x48	; 72
    3b86:	09 f0       	breq	.+2      	; 0x3b8a <__vector_39+0x8e>
    3b88:	d4 c0       	rjmp	.+424    	; 0x3d32 <__vector_39+0x236>
    3b8a:	d2 c0       	rjmp	.+420    	; 0x3d30 <__vector_39+0x234>
    3b8c:	88 39       	cpi	r24, 0x98	; 152
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <__vector_39+0x96>
    3b90:	c3 c0       	rjmp	.+390    	; 0x3d18 <__vector_39+0x21c>
    3b92:	a8 f4       	brcc	.+42     	; 0x3bbe <__vector_39+0xc2>
    3b94:	88 37       	cpi	r24, 0x78	; 120
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <__vector_39+0x9e>
    3b98:	67 c0       	rjmp	.+206    	; 0x3c68 <__vector_39+0x16c>
    3b9a:	38 f4       	brcc	.+14     	; 0x3baa <__vector_39+0xae>
    3b9c:	88 36       	cpi	r24, 0x68	; 104
    3b9e:	09 f4       	brne	.+2      	; 0x3ba2 <__vector_39+0xa6>
    3ba0:	63 c0       	rjmp	.+198    	; 0x3c68 <__vector_39+0x16c>
    3ba2:	80 37       	cpi	r24, 0x70	; 112
    3ba4:	09 f4       	brne	.+2      	; 0x3ba8 <__vector_39+0xac>
    3ba6:	60 c0       	rjmp	.+192    	; 0x3c68 <__vector_39+0x16c>
    3ba8:	c4 c0       	rjmp	.+392    	; 0x3d32 <__vector_39+0x236>
    3baa:	88 38       	cpi	r24, 0x88	; 136
    3bac:	09 f4       	brne	.+2      	; 0x3bb0 <__vector_39+0xb4>
    3bae:	b4 c0       	rjmp	.+360    	; 0x3d18 <__vector_39+0x21c>
    3bb0:	80 39       	cpi	r24, 0x90	; 144
    3bb2:	09 f4       	brne	.+2      	; 0x3bb6 <__vector_39+0xba>
    3bb4:	5f c0       	rjmp	.+190    	; 0x3c74 <__vector_39+0x178>
    3bb6:	80 38       	cpi	r24, 0x80	; 128
    3bb8:	09 f0       	breq	.+2      	; 0x3bbc <__vector_39+0xc0>
    3bba:	bb c0       	rjmp	.+374    	; 0x3d32 <__vector_39+0x236>
    3bbc:	5b c0       	rjmp	.+182    	; 0x3c74 <__vector_39+0x178>
    3bbe:	80 3b       	cpi	r24, 0xB0	; 176
    3bc0:	09 f4       	brne	.+2      	; 0x3bc4 <__vector_39+0xc8>
    3bc2:	82 c0       	rjmp	.+260    	; 0x3cc8 <__vector_39+0x1cc>
    3bc4:	38 f4       	brcc	.+14     	; 0x3bd4 <__vector_39+0xd8>
    3bc6:	80 3a       	cpi	r24, 0xA0	; 160
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <__vector_39+0xd0>
    3bca:	66 c0       	rjmp	.+204    	; 0x3c98 <__vector_39+0x19c>
    3bcc:	88 3a       	cpi	r24, 0xA8	; 168
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <__vector_39+0xd6>
    3bd0:	7b c0       	rjmp	.+246    	; 0x3cc8 <__vector_39+0x1cc>
    3bd2:	af c0       	rjmp	.+350    	; 0x3d32 <__vector_39+0x236>
    3bd4:	80 3c       	cpi	r24, 0xC0	; 192
    3bd6:	09 f4       	brne	.+2      	; 0x3bda <__vector_39+0xde>
    3bd8:	a3 c0       	rjmp	.+326    	; 0x3d20 <__vector_39+0x224>
    3bda:	88 3c       	cpi	r24, 0xC8	; 200
    3bdc:	09 f4       	brne	.+2      	; 0x3be0 <__vector_39+0xe4>
    3bde:	a0 c0       	rjmp	.+320    	; 0x3d20 <__vector_39+0x224>
    3be0:	88 3b       	cpi	r24, 0xB8	; 184
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <__vector_39+0xea>
    3be4:	86 c0       	rjmp	.+268    	; 0x3cf2 <__vector_39+0x1f6>
    3be6:	a5 c0       	rjmp	.+330    	; 0x3d32 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3be8:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <twi_slarw>
    3bec:	10 c0       	rjmp	.+32     	; 0x3c0e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3bee:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <twi_masterBufferIndex>
    3bf2:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <twi_masterBufferLength>
    3bf6:	98 17       	cp	r25, r24
    3bf8:	70 f5       	brcc	.+92     	; 0x3c56 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3bfa:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <twi_masterBufferIndex>
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	8e 0f       	add	r24, r30
    3c02:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <twi_masterBufferIndex>
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	e1 58       	subi	r30, 0x81	; 129
    3c0a:	f8 4f       	sbci	r31, 0xF8	; 248
    3c0c:	80 81       	ld	r24, Z
    3c0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3c12:	85 ec       	ldi	r24, 0xC5	; 197
    3c14:	82 c0       	rjmp	.+260    	; 0x3d1a <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3c16:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <twi_error>
    3c1a:	8a c0       	rjmp	.+276    	; 0x3d30 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3c1c:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <twi_masterBufferIndex>
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	8e 0f       	add	r24, r30
    3c24:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <twi_masterBufferIndex>
    3c28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	e1 58       	subi	r30, 0x81	; 129
    3c30:	f8 4f       	sbci	r31, 0xF8	; 248
    3c32:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3c34:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <twi_masterBufferIndex>
    3c38:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <twi_masterBufferLength>
    3c3c:	6a c0       	rjmp	.+212    	; 0x3d12 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3c3e:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <twi_masterBufferIndex>
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	8e 0f       	add	r24, r30
    3c46:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <twi_masterBufferIndex>
    3c4a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	e1 58       	subi	r30, 0x81	; 129
    3c52:	f8 4f       	sbci	r31, 0xF8	; 248
    3c54:	80 83       	st	Z, r24
	if (twi_sendStop)
    3c56:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <twi_sendStop>
    3c5a:	81 11       	cpse	r24, r1
    3c5c:	69 c0       	rjmp	.+210    	; 0x3d30 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3c64:	84 ea       	ldi	r24, 0xA4	; 164
    3c66:	5d c0       	rjmp	.+186    	; 0x3d22 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3c68:	83 e0       	ldi	r24, 0x03	; 3
    3c6a:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3c6e:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <twi_rxBufferIndex>
    3c72:	cf cf       	rjmp	.-98     	; 0x3c12 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3c74:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <twi_rxBufferIndex>
    3c78:	80 32       	cpi	r24, 0x20	; 32
    3c7a:	08 f0       	brcs	.+2      	; 0x3c7e <__vector_39+0x182>
    3c7c:	4d c0       	rjmp	.+154    	; 0x3d18 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3c7e:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <twi_rxBufferIndex>
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	8e 0f       	add	r24, r30
    3c86:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <twi_rxBufferIndex>
    3c8a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	e5 5c       	subi	r30, 0xC5	; 197
    3c92:	f8 4f       	sbci	r31, 0xF8	; 248
    3c94:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3c96:	bd cf       	rjmp	.-134    	; 0x3c12 <__vector_39+0x116>
    3c98:	2b df       	rcall	.-426    	; 0x3af0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3c9a:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <twi_rxBufferIndex>
    3c9e:	80 32       	cpi	r24, 0x20	; 32
    3ca0:	30 f4       	brcc	.+12     	; 0x3cae <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3ca2:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <twi_rxBufferIndex>
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	e5 5c       	subi	r30, 0xC5	; 197
    3caa:	f8 4f       	sbci	r31, 0xF8	; 248
    3cac:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3cae:	60 91 3a 07 	lds	r22, 0x073A	; 0x80073a <twi_rxBufferIndex>
    3cb2:	70 e0       	ldi	r23, 0x00	; 0
    3cb4:	e0 91 9f 07 	lds	r30, 0x079F	; 0x80079f <twi_onSlaveReceive>
    3cb8:	f0 91 a0 07 	lds	r31, 0x07A0	; 0x8007a0 <twi_onSlaveReceive+0x1>
    3cbc:	8b e3       	ldi	r24, 0x3B	; 59
    3cbe:	97 e0       	ldi	r25, 0x07	; 7
    3cc0:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3cc2:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <twi_rxBufferIndex>
      break;
    3cc6:	35 c0       	rjmp	.+106    	; 0x3d32 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3cc8:	84 e0       	ldi	r24, 0x04	; 4
    3cca:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3cce:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3cd2:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3cd6:	e0 91 a1 07 	lds	r30, 0x07A1	; 0x8007a1 <twi_onSlaveTransmit>
    3cda:	f0 91 a2 07 	lds	r31, 0x07A2	; 0x8007a2 <twi_onSlaveTransmit+0x1>
    3cde:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3ce0:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <twi_txBufferLength>
    3ce4:	81 11       	cpse	r24, r1
    3ce6:	05 c0       	rjmp	.+10     	; 0x3cf2 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3cee:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3cf2:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <twi_txBufferIndex>
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	8e 0f       	add	r24, r30
    3cfa:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <twi_txBufferIndex>
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	e3 5a       	subi	r30, 0xA3	; 163
    3d02:	f8 4f       	sbci	r31, 0xF8	; 248
    3d04:	80 81       	ld	r24, Z
    3d06:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3d0a:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <twi_txBufferIndex>
    3d0e:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <twi_txBufferLength>
    3d12:	98 17       	cp	r25, r24
    3d14:	08 f4       	brcc	.+2      	; 0x3d18 <__vector_39+0x21c>
    3d16:	7d cf       	rjmp	.-262    	; 0x3c12 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3d18:	85 e8       	ldi	r24, 0x85	; 133
    3d1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3d1e:	09 c0       	rjmp	.+18     	; 0x3d32 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d20:	85 ec       	ldi	r24, 0xC5	; 197
    3d22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3d26:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <twi_state>
      break;
    3d2a:	03 c0       	rjmp	.+6      	; 0x3d32 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3d2c:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <twi_error>
      twi_stop();
    3d30:	d5 de       	rcall	.-598    	; 0x3adc <twi_stop>
      break;
  }
}
    3d32:	ff 91       	pop	r31
    3d34:	ef 91       	pop	r30
    3d36:	bf 91       	pop	r27
    3d38:	af 91       	pop	r26
    3d3a:	9f 91       	pop	r25
    3d3c:	8f 91       	pop	r24
    3d3e:	7f 91       	pop	r23
    3d40:	6f 91       	pop	r22
    3d42:	5f 91       	pop	r21
    3d44:	4f 91       	pop	r20
    3d46:	3f 91       	pop	r19
    3d48:	2f 91       	pop	r18
    3d4a:	0f 90       	pop	r0
    3d4c:	0b be       	out	0x3b, r0	; 59
    3d4e:	0f 90       	pop	r0
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	0f 90       	pop	r0
    3d54:	1f 90       	pop	r1
    3d56:	18 95       	reti

00003d58 <__divmodhi4>:
    3d58:	97 fb       	bst	r25, 7
    3d5a:	07 2e       	mov	r0, r23
    3d5c:	16 f4       	brtc	.+4      	; 0x3d62 <__divmodhi4+0xa>
    3d5e:	00 94       	com	r0
    3d60:	06 d0       	rcall	.+12     	; 0x3d6e <__divmodhi4_neg1>
    3d62:	77 fd       	sbrc	r23, 7
    3d64:	08 d0       	rcall	.+16     	; 0x3d76 <__divmodhi4_neg2>
    3d66:	35 d0       	rcall	.+106    	; 0x3dd2 <__udivmodhi4>
    3d68:	07 fc       	sbrc	r0, 7
    3d6a:	05 d0       	rcall	.+10     	; 0x3d76 <__divmodhi4_neg2>
    3d6c:	3e f4       	brtc	.+14     	; 0x3d7c <__divmodhi4_exit>

00003d6e <__divmodhi4_neg1>:
    3d6e:	90 95       	com	r25
    3d70:	81 95       	neg	r24
    3d72:	9f 4f       	sbci	r25, 0xFF	; 255
    3d74:	08 95       	ret

00003d76 <__divmodhi4_neg2>:
    3d76:	70 95       	com	r23
    3d78:	61 95       	neg	r22
    3d7a:	7f 4f       	sbci	r23, 0xFF	; 255

00003d7c <__divmodhi4_exit>:
    3d7c:	08 95       	ret

00003d7e <__udivmodsi4>:
    3d7e:	a1 e2       	ldi	r26, 0x21	; 33
    3d80:	1a 2e       	mov	r1, r26
    3d82:	aa 1b       	sub	r26, r26
    3d84:	bb 1b       	sub	r27, r27
    3d86:	fd 01       	movw	r30, r26
    3d88:	0d c0       	rjmp	.+26     	; 0x3da4 <__udivmodsi4_ep>

00003d8a <__udivmodsi4_loop>:
    3d8a:	aa 1f       	adc	r26, r26
    3d8c:	bb 1f       	adc	r27, r27
    3d8e:	ee 1f       	adc	r30, r30
    3d90:	ff 1f       	adc	r31, r31
    3d92:	a2 17       	cp	r26, r18
    3d94:	b3 07       	cpc	r27, r19
    3d96:	e4 07       	cpc	r30, r20
    3d98:	f5 07       	cpc	r31, r21
    3d9a:	20 f0       	brcs	.+8      	; 0x3da4 <__udivmodsi4_ep>
    3d9c:	a2 1b       	sub	r26, r18
    3d9e:	b3 0b       	sbc	r27, r19
    3da0:	e4 0b       	sbc	r30, r20
    3da2:	f5 0b       	sbc	r31, r21

00003da4 <__udivmodsi4_ep>:
    3da4:	66 1f       	adc	r22, r22
    3da6:	77 1f       	adc	r23, r23
    3da8:	88 1f       	adc	r24, r24
    3daa:	99 1f       	adc	r25, r25
    3dac:	1a 94       	dec	r1
    3dae:	69 f7       	brne	.-38     	; 0x3d8a <__udivmodsi4_loop>
    3db0:	60 95       	com	r22
    3db2:	70 95       	com	r23
    3db4:	80 95       	com	r24
    3db6:	90 95       	com	r25
    3db8:	9b 01       	movw	r18, r22
    3dba:	ac 01       	movw	r20, r24
    3dbc:	bd 01       	movw	r22, r26
    3dbe:	cf 01       	movw	r24, r30
    3dc0:	08 95       	ret

00003dc2 <__tablejump2__>:
    3dc2:	ee 0f       	add	r30, r30
    3dc4:	ff 1f       	adc	r31, r31
    3dc6:	88 1f       	adc	r24, r24
    3dc8:	8b bf       	out	0x3b, r24	; 59
    3dca:	07 90       	elpm	r0, Z+
    3dcc:	f6 91       	elpm	r31, Z
    3dce:	e0 2d       	mov	r30, r0
    3dd0:	19 94       	eijmp

00003dd2 <__udivmodhi4>:
    3dd2:	aa 1b       	sub	r26, r26
    3dd4:	bb 1b       	sub	r27, r27
    3dd6:	51 e1       	ldi	r21, 0x11	; 17
    3dd8:	07 c0       	rjmp	.+14     	; 0x3de8 <__udivmodhi4_ep>

00003dda <__udivmodhi4_loop>:
    3dda:	aa 1f       	adc	r26, r26
    3ddc:	bb 1f       	adc	r27, r27
    3dde:	a6 17       	cp	r26, r22
    3de0:	b7 07       	cpc	r27, r23
    3de2:	10 f0       	brcs	.+4      	; 0x3de8 <__udivmodhi4_ep>
    3de4:	a6 1b       	sub	r26, r22
    3de6:	b7 0b       	sbc	r27, r23

00003de8 <__udivmodhi4_ep>:
    3de8:	88 1f       	adc	r24, r24
    3dea:	99 1f       	adc	r25, r25
    3dec:	5a 95       	dec	r21
    3dee:	a9 f7       	brne	.-22     	; 0x3dda <__udivmodhi4_loop>
    3df0:	80 95       	com	r24
    3df2:	90 95       	com	r25
    3df4:	bc 01       	movw	r22, r24
    3df6:	cd 01       	movw	r24, r26
    3df8:	08 95       	ret

00003dfa <malloc>:
    3dfa:	0f 93       	push	r16
    3dfc:	1f 93       	push	r17
    3dfe:	cf 93       	push	r28
    3e00:	df 93       	push	r29
    3e02:	82 30       	cpi	r24, 0x02	; 2
    3e04:	91 05       	cpc	r25, r1
    3e06:	10 f4       	brcc	.+4      	; 0x3e0c <malloc+0x12>
    3e08:	82 e0       	ldi	r24, 0x02	; 2
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <__flp>
    3e10:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <__flp+0x1>
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	a0 e0       	ldi	r26, 0x00	; 0
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	30 97       	sbiw	r30, 0x00	; 0
    3e1e:	19 f1       	breq	.+70     	; 0x3e66 <malloc+0x6c>
    3e20:	40 81       	ld	r20, Z
    3e22:	51 81       	ldd	r21, Z+1	; 0x01
    3e24:	02 81       	ldd	r16, Z+2	; 0x02
    3e26:	13 81       	ldd	r17, Z+3	; 0x03
    3e28:	48 17       	cp	r20, r24
    3e2a:	59 07       	cpc	r21, r25
    3e2c:	c8 f0       	brcs	.+50     	; 0x3e60 <malloc+0x66>
    3e2e:	84 17       	cp	r24, r20
    3e30:	95 07       	cpc	r25, r21
    3e32:	69 f4       	brne	.+26     	; 0x3e4e <malloc+0x54>
    3e34:	10 97       	sbiw	r26, 0x00	; 0
    3e36:	31 f0       	breq	.+12     	; 0x3e44 <malloc+0x4a>
    3e38:	12 96       	adiw	r26, 0x02	; 2
    3e3a:	0c 93       	st	X, r16
    3e3c:	12 97       	sbiw	r26, 0x02	; 2
    3e3e:	13 96       	adiw	r26, 0x03	; 3
    3e40:	1c 93       	st	X, r17
    3e42:	27 c0       	rjmp	.+78     	; 0x3e92 <malloc+0x98>
    3e44:	00 93 a9 07 	sts	0x07A9, r16	; 0x8007a9 <__flp>
    3e48:	10 93 aa 07 	sts	0x07AA, r17	; 0x8007aa <__flp+0x1>
    3e4c:	22 c0       	rjmp	.+68     	; 0x3e92 <malloc+0x98>
    3e4e:	21 15       	cp	r18, r1
    3e50:	31 05       	cpc	r19, r1
    3e52:	19 f0       	breq	.+6      	; 0x3e5a <malloc+0x60>
    3e54:	42 17       	cp	r20, r18
    3e56:	53 07       	cpc	r21, r19
    3e58:	18 f4       	brcc	.+6      	; 0x3e60 <malloc+0x66>
    3e5a:	9a 01       	movw	r18, r20
    3e5c:	bd 01       	movw	r22, r26
    3e5e:	ef 01       	movw	r28, r30
    3e60:	df 01       	movw	r26, r30
    3e62:	f8 01       	movw	r30, r16
    3e64:	db cf       	rjmp	.-74     	; 0x3e1c <malloc+0x22>
    3e66:	21 15       	cp	r18, r1
    3e68:	31 05       	cpc	r19, r1
    3e6a:	f9 f0       	breq	.+62     	; 0x3eaa <malloc+0xb0>
    3e6c:	28 1b       	sub	r18, r24
    3e6e:	39 0b       	sbc	r19, r25
    3e70:	24 30       	cpi	r18, 0x04	; 4
    3e72:	31 05       	cpc	r19, r1
    3e74:	80 f4       	brcc	.+32     	; 0x3e96 <malloc+0x9c>
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
    3e78:	9b 81       	ldd	r25, Y+3	; 0x03
    3e7a:	61 15       	cp	r22, r1
    3e7c:	71 05       	cpc	r23, r1
    3e7e:	21 f0       	breq	.+8      	; 0x3e88 <malloc+0x8e>
    3e80:	fb 01       	movw	r30, r22
    3e82:	93 83       	std	Z+3, r25	; 0x03
    3e84:	82 83       	std	Z+2, r24	; 0x02
    3e86:	04 c0       	rjmp	.+8      	; 0x3e90 <malloc+0x96>
    3e88:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <__flp+0x1>
    3e8c:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <__flp>
    3e90:	fe 01       	movw	r30, r28
    3e92:	32 96       	adiw	r30, 0x02	; 2
    3e94:	44 c0       	rjmp	.+136    	; 0x3f1e <malloc+0x124>
    3e96:	fe 01       	movw	r30, r28
    3e98:	e2 0f       	add	r30, r18
    3e9a:	f3 1f       	adc	r31, r19
    3e9c:	81 93       	st	Z+, r24
    3e9e:	91 93       	st	Z+, r25
    3ea0:	22 50       	subi	r18, 0x02	; 2
    3ea2:	31 09       	sbc	r19, r1
    3ea4:	39 83       	std	Y+1, r19	; 0x01
    3ea6:	28 83       	st	Y, r18
    3ea8:	3a c0       	rjmp	.+116    	; 0x3f1e <malloc+0x124>
    3eaa:	20 91 a7 07 	lds	r18, 0x07A7	; 0x8007a7 <__brkval>
    3eae:	30 91 a8 07 	lds	r19, 0x07A8	; 0x8007a8 <__brkval+0x1>
    3eb2:	23 2b       	or	r18, r19
    3eb4:	41 f4       	brne	.+16     	; 0x3ec6 <malloc+0xcc>
    3eb6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3eba:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3ebe:	30 93 a8 07 	sts	0x07A8, r19	; 0x8007a8 <__brkval+0x1>
    3ec2:	20 93 a7 07 	sts	0x07A7, r18	; 0x8007a7 <__brkval>
    3ec6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3eca:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3ece:	21 15       	cp	r18, r1
    3ed0:	31 05       	cpc	r19, r1
    3ed2:	41 f4       	brne	.+16     	; 0x3ee4 <malloc+0xea>
    3ed4:	2d b7       	in	r18, 0x3d	; 61
    3ed6:	3e b7       	in	r19, 0x3e	; 62
    3ed8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3edc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3ee0:	24 1b       	sub	r18, r20
    3ee2:	35 0b       	sbc	r19, r21
    3ee4:	e0 91 a7 07 	lds	r30, 0x07A7	; 0x8007a7 <__brkval>
    3ee8:	f0 91 a8 07 	lds	r31, 0x07A8	; 0x8007a8 <__brkval+0x1>
    3eec:	e2 17       	cp	r30, r18
    3eee:	f3 07       	cpc	r31, r19
    3ef0:	a0 f4       	brcc	.+40     	; 0x3f1a <malloc+0x120>
    3ef2:	2e 1b       	sub	r18, r30
    3ef4:	3f 0b       	sbc	r19, r31
    3ef6:	28 17       	cp	r18, r24
    3ef8:	39 07       	cpc	r19, r25
    3efa:	78 f0       	brcs	.+30     	; 0x3f1a <malloc+0x120>
    3efc:	ac 01       	movw	r20, r24
    3efe:	4e 5f       	subi	r20, 0xFE	; 254
    3f00:	5f 4f       	sbci	r21, 0xFF	; 255
    3f02:	24 17       	cp	r18, r20
    3f04:	35 07       	cpc	r19, r21
    3f06:	48 f0       	brcs	.+18     	; 0x3f1a <malloc+0x120>
    3f08:	4e 0f       	add	r20, r30
    3f0a:	5f 1f       	adc	r21, r31
    3f0c:	50 93 a8 07 	sts	0x07A8, r21	; 0x8007a8 <__brkval+0x1>
    3f10:	40 93 a7 07 	sts	0x07A7, r20	; 0x8007a7 <__brkval>
    3f14:	81 93       	st	Z+, r24
    3f16:	91 93       	st	Z+, r25
    3f18:	02 c0       	rjmp	.+4      	; 0x3f1e <malloc+0x124>
    3f1a:	e0 e0       	ldi	r30, 0x00	; 0
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	cf 01       	movw	r24, r30
    3f20:	df 91       	pop	r29
    3f22:	cf 91       	pop	r28
    3f24:	1f 91       	pop	r17
    3f26:	0f 91       	pop	r16
    3f28:	08 95       	ret

00003f2a <free>:
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	00 97       	sbiw	r24, 0x00	; 0
    3f30:	09 f4       	brne	.+2      	; 0x3f34 <free+0xa>
    3f32:	81 c0       	rjmp	.+258    	; 0x4036 <free+0x10c>
    3f34:	fc 01       	movw	r30, r24
    3f36:	32 97       	sbiw	r30, 0x02	; 2
    3f38:	13 82       	std	Z+3, r1	; 0x03
    3f3a:	12 82       	std	Z+2, r1	; 0x02
    3f3c:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <__flp>
    3f40:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <__flp+0x1>
    3f44:	10 97       	sbiw	r26, 0x00	; 0
    3f46:	81 f4       	brne	.+32     	; 0x3f68 <free+0x3e>
    3f48:	20 81       	ld	r18, Z
    3f4a:	31 81       	ldd	r19, Z+1	; 0x01
    3f4c:	82 0f       	add	r24, r18
    3f4e:	93 1f       	adc	r25, r19
    3f50:	20 91 a7 07 	lds	r18, 0x07A7	; 0x8007a7 <__brkval>
    3f54:	30 91 a8 07 	lds	r19, 0x07A8	; 0x8007a8 <__brkval+0x1>
    3f58:	28 17       	cp	r18, r24
    3f5a:	39 07       	cpc	r19, r25
    3f5c:	51 f5       	brne	.+84     	; 0x3fb2 <free+0x88>
    3f5e:	f0 93 a8 07 	sts	0x07A8, r31	; 0x8007a8 <__brkval+0x1>
    3f62:	e0 93 a7 07 	sts	0x07A7, r30	; 0x8007a7 <__brkval>
    3f66:	67 c0       	rjmp	.+206    	; 0x4036 <free+0x10c>
    3f68:	ed 01       	movw	r28, r26
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	ce 17       	cp	r28, r30
    3f70:	df 07       	cpc	r29, r31
    3f72:	40 f4       	brcc	.+16     	; 0x3f84 <free+0x5a>
    3f74:	4a 81       	ldd	r20, Y+2	; 0x02
    3f76:	5b 81       	ldd	r21, Y+3	; 0x03
    3f78:	9e 01       	movw	r18, r28
    3f7a:	41 15       	cp	r20, r1
    3f7c:	51 05       	cpc	r21, r1
    3f7e:	f1 f0       	breq	.+60     	; 0x3fbc <free+0x92>
    3f80:	ea 01       	movw	r28, r20
    3f82:	f5 cf       	rjmp	.-22     	; 0x3f6e <free+0x44>
    3f84:	d3 83       	std	Z+3, r29	; 0x03
    3f86:	c2 83       	std	Z+2, r28	; 0x02
    3f88:	40 81       	ld	r20, Z
    3f8a:	51 81       	ldd	r21, Z+1	; 0x01
    3f8c:	84 0f       	add	r24, r20
    3f8e:	95 1f       	adc	r25, r21
    3f90:	c8 17       	cp	r28, r24
    3f92:	d9 07       	cpc	r29, r25
    3f94:	59 f4       	brne	.+22     	; 0x3fac <free+0x82>
    3f96:	88 81       	ld	r24, Y
    3f98:	99 81       	ldd	r25, Y+1	; 0x01
    3f9a:	84 0f       	add	r24, r20
    3f9c:	95 1f       	adc	r25, r21
    3f9e:	02 96       	adiw	r24, 0x02	; 2
    3fa0:	91 83       	std	Z+1, r25	; 0x01
    3fa2:	80 83       	st	Z, r24
    3fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa8:	93 83       	std	Z+3, r25	; 0x03
    3faa:	82 83       	std	Z+2, r24	; 0x02
    3fac:	21 15       	cp	r18, r1
    3fae:	31 05       	cpc	r19, r1
    3fb0:	29 f4       	brne	.+10     	; 0x3fbc <free+0x92>
    3fb2:	f0 93 aa 07 	sts	0x07AA, r31	; 0x8007aa <__flp+0x1>
    3fb6:	e0 93 a9 07 	sts	0x07A9, r30	; 0x8007a9 <__flp>
    3fba:	3d c0       	rjmp	.+122    	; 0x4036 <free+0x10c>
    3fbc:	e9 01       	movw	r28, r18
    3fbe:	fb 83       	std	Y+3, r31	; 0x03
    3fc0:	ea 83       	std	Y+2, r30	; 0x02
    3fc2:	49 91       	ld	r20, Y+
    3fc4:	59 91       	ld	r21, Y+
    3fc6:	c4 0f       	add	r28, r20
    3fc8:	d5 1f       	adc	r29, r21
    3fca:	ec 17       	cp	r30, r28
    3fcc:	fd 07       	cpc	r31, r29
    3fce:	61 f4       	brne	.+24     	; 0x3fe8 <free+0xbe>
    3fd0:	80 81       	ld	r24, Z
    3fd2:	91 81       	ldd	r25, Z+1	; 0x01
    3fd4:	84 0f       	add	r24, r20
    3fd6:	95 1f       	adc	r25, r21
    3fd8:	02 96       	adiw	r24, 0x02	; 2
    3fda:	e9 01       	movw	r28, r18
    3fdc:	99 83       	std	Y+1, r25	; 0x01
    3fde:	88 83       	st	Y, r24
    3fe0:	82 81       	ldd	r24, Z+2	; 0x02
    3fe2:	93 81       	ldd	r25, Z+3	; 0x03
    3fe4:	9b 83       	std	Y+3, r25	; 0x03
    3fe6:	8a 83       	std	Y+2, r24	; 0x02
    3fe8:	e0 e0       	ldi	r30, 0x00	; 0
    3fea:	f0 e0       	ldi	r31, 0x00	; 0
    3fec:	12 96       	adiw	r26, 0x02	; 2
    3fee:	8d 91       	ld	r24, X+
    3ff0:	9c 91       	ld	r25, X
    3ff2:	13 97       	sbiw	r26, 0x03	; 3
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	19 f0       	breq	.+6      	; 0x3ffe <free+0xd4>
    3ff8:	fd 01       	movw	r30, r26
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	f7 cf       	rjmp	.-18     	; 0x3fec <free+0xc2>
    3ffe:	8d 91       	ld	r24, X+
    4000:	9c 91       	ld	r25, X
    4002:	11 97       	sbiw	r26, 0x01	; 1
    4004:	9d 01       	movw	r18, r26
    4006:	2e 5f       	subi	r18, 0xFE	; 254
    4008:	3f 4f       	sbci	r19, 0xFF	; 255
    400a:	82 0f       	add	r24, r18
    400c:	93 1f       	adc	r25, r19
    400e:	20 91 a7 07 	lds	r18, 0x07A7	; 0x8007a7 <__brkval>
    4012:	30 91 a8 07 	lds	r19, 0x07A8	; 0x8007a8 <__brkval+0x1>
    4016:	28 17       	cp	r18, r24
    4018:	39 07       	cpc	r19, r25
    401a:	69 f4       	brne	.+26     	; 0x4036 <free+0x10c>
    401c:	30 97       	sbiw	r30, 0x00	; 0
    401e:	29 f4       	brne	.+10     	; 0x402a <free+0x100>
    4020:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <__flp+0x1>
    4024:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <__flp>
    4028:	02 c0       	rjmp	.+4      	; 0x402e <free+0x104>
    402a:	13 82       	std	Z+3, r1	; 0x03
    402c:	12 82       	std	Z+2, r1	; 0x02
    402e:	b0 93 a8 07 	sts	0x07A8, r27	; 0x8007a8 <__brkval+0x1>
    4032:	a0 93 a7 07 	sts	0x07A7, r26	; 0x8007a7 <__brkval>
    4036:	df 91       	pop	r29
    4038:	cf 91       	pop	r28
    403a:	08 95       	ret

0000403c <realloc>:
    403c:	6f 92       	push	r6
    403e:	7f 92       	push	r7
    4040:	8f 92       	push	r8
    4042:	9f 92       	push	r9
    4044:	af 92       	push	r10
    4046:	bf 92       	push	r11
    4048:	cf 92       	push	r12
    404a:	df 92       	push	r13
    404c:	ef 92       	push	r14
    404e:	ff 92       	push	r15
    4050:	0f 93       	push	r16
    4052:	1f 93       	push	r17
    4054:	cf 93       	push	r28
    4056:	df 93       	push	r29
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	81 f4       	brne	.+32     	; 0x407c <realloc+0x40>
    405c:	cb 01       	movw	r24, r22
    405e:	df 91       	pop	r29
    4060:	cf 91       	pop	r28
    4062:	1f 91       	pop	r17
    4064:	0f 91       	pop	r16
    4066:	ff 90       	pop	r15
    4068:	ef 90       	pop	r14
    406a:	df 90       	pop	r13
    406c:	cf 90       	pop	r12
    406e:	bf 90       	pop	r11
    4070:	af 90       	pop	r10
    4072:	9f 90       	pop	r9
    4074:	8f 90       	pop	r8
    4076:	7f 90       	pop	r7
    4078:	6f 90       	pop	r6
    407a:	bf ce       	rjmp	.-642    	; 0x3dfa <malloc>
    407c:	fc 01       	movw	r30, r24
    407e:	e6 0f       	add	r30, r22
    4080:	f7 1f       	adc	r31, r23
    4082:	9c 01       	movw	r18, r24
    4084:	22 50       	subi	r18, 0x02	; 2
    4086:	31 09       	sbc	r19, r1
    4088:	e2 17       	cp	r30, r18
    408a:	f3 07       	cpc	r31, r19
    408c:	08 f4       	brcc	.+2      	; 0x4090 <realloc+0x54>
    408e:	a5 c0       	rjmp	.+330    	; 0x41da <realloc+0x19e>
    4090:	ec 01       	movw	r28, r24
    4092:	d9 01       	movw	r26, r18
    4094:	0d 91       	ld	r16, X+
    4096:	1c 91       	ld	r17, X
    4098:	11 97       	sbiw	r26, 0x01	; 1
    409a:	06 17       	cp	r16, r22
    409c:	17 07       	cpc	r17, r23
    409e:	a8 f0       	brcs	.+42     	; 0x40ca <realloc+0x8e>
    40a0:	05 30       	cpi	r16, 0x05	; 5
    40a2:	11 05       	cpc	r17, r1
    40a4:	08 f4       	brcc	.+2      	; 0x40a8 <realloc+0x6c>
    40a6:	97 c0       	rjmp	.+302    	; 0x41d6 <realloc+0x19a>
    40a8:	c8 01       	movw	r24, r16
    40aa:	04 97       	sbiw	r24, 0x04	; 4
    40ac:	86 17       	cp	r24, r22
    40ae:	97 07       	cpc	r25, r23
    40b0:	08 f4       	brcc	.+2      	; 0x40b4 <realloc+0x78>
    40b2:	91 c0       	rjmp	.+290    	; 0x41d6 <realloc+0x19a>
    40b4:	02 50       	subi	r16, 0x02	; 2
    40b6:	11 09       	sbc	r17, r1
    40b8:	06 1b       	sub	r16, r22
    40ba:	17 0b       	sbc	r17, r23
    40bc:	01 93       	st	Z+, r16
    40be:	11 93       	st	Z+, r17
    40c0:	6d 93       	st	X+, r22
    40c2:	7c 93       	st	X, r23
    40c4:	cf 01       	movw	r24, r30
    40c6:	31 df       	rcall	.-414    	; 0x3f2a <free>
    40c8:	86 c0       	rjmp	.+268    	; 0x41d6 <realloc+0x19a>
    40ca:	5b 01       	movw	r10, r22
    40cc:	a0 1a       	sub	r10, r16
    40ce:	b1 0a       	sbc	r11, r17
    40d0:	4c 01       	movw	r8, r24
    40d2:	80 0e       	add	r8, r16
    40d4:	91 1e       	adc	r9, r17
    40d6:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <__flp>
    40da:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <__flp+0x1>
    40de:	61 2c       	mov	r6, r1
    40e0:	71 2c       	mov	r7, r1
    40e2:	e1 2c       	mov	r14, r1
    40e4:	f1 2c       	mov	r15, r1
    40e6:	10 97       	sbiw	r26, 0x00	; 0
    40e8:	09 f4       	brne	.+2      	; 0x40ec <realloc+0xb0>
    40ea:	46 c0       	rjmp	.+140    	; 0x4178 <realloc+0x13c>
    40ec:	8d 91       	ld	r24, X+
    40ee:	9c 91       	ld	r25, X
    40f0:	11 97       	sbiw	r26, 0x01	; 1
    40f2:	a8 15       	cp	r26, r8
    40f4:	b9 05       	cpc	r27, r9
    40f6:	b1 f5       	brne	.+108    	; 0x4164 <realloc+0x128>
    40f8:	6c 01       	movw	r12, r24
    40fa:	42 e0       	ldi	r20, 0x02	; 2
    40fc:	c4 0e       	add	r12, r20
    40fe:	d1 1c       	adc	r13, r1
    4100:	ca 14       	cp	r12, r10
    4102:	db 04       	cpc	r13, r11
    4104:	78 f1       	brcs	.+94     	; 0x4164 <realloc+0x128>
    4106:	4c 01       	movw	r8, r24
    4108:	8a 18       	sub	r8, r10
    410a:	9b 08       	sbc	r9, r11
    410c:	64 01       	movw	r12, r8
    410e:	42 e0       	ldi	r20, 0x02	; 2
    4110:	c4 0e       	add	r12, r20
    4112:	d1 1c       	adc	r13, r1
    4114:	12 96       	adiw	r26, 0x02	; 2
    4116:	bc 90       	ld	r11, X
    4118:	12 97       	sbiw	r26, 0x02	; 2
    411a:	13 96       	adiw	r26, 0x03	; 3
    411c:	ac 91       	ld	r26, X
    411e:	b5 e0       	ldi	r27, 0x05	; 5
    4120:	cb 16       	cp	r12, r27
    4122:	d1 04       	cpc	r13, r1
    4124:	40 f0       	brcs	.+16     	; 0x4136 <realloc+0xfa>
    4126:	b2 82       	std	Z+2, r11	; 0x02
    4128:	a3 83       	std	Z+3, r26	; 0x03
    412a:	91 82       	std	Z+1, r9	; 0x01
    412c:	80 82       	st	Z, r8
    412e:	d9 01       	movw	r26, r18
    4130:	6d 93       	st	X+, r22
    4132:	7c 93       	st	X, r23
    4134:	09 c0       	rjmp	.+18     	; 0x4148 <realloc+0x10c>
    4136:	0e 5f       	subi	r16, 0xFE	; 254
    4138:	1f 4f       	sbci	r17, 0xFF	; 255
    413a:	80 0f       	add	r24, r16
    413c:	91 1f       	adc	r25, r17
    413e:	f9 01       	movw	r30, r18
    4140:	91 83       	std	Z+1, r25	; 0x01
    4142:	80 83       	st	Z, r24
    4144:	eb 2d       	mov	r30, r11
    4146:	fa 2f       	mov	r31, r26
    4148:	e1 14       	cp	r14, r1
    414a:	f1 04       	cpc	r15, r1
    414c:	31 f0       	breq	.+12     	; 0x415a <realloc+0x11e>
    414e:	d7 01       	movw	r26, r14
    4150:	13 96       	adiw	r26, 0x03	; 3
    4152:	fc 93       	st	X, r31
    4154:	ee 93       	st	-X, r30
    4156:	12 97       	sbiw	r26, 0x02	; 2
    4158:	3e c0       	rjmp	.+124    	; 0x41d6 <realloc+0x19a>
    415a:	f0 93 aa 07 	sts	0x07AA, r31	; 0x8007aa <__flp+0x1>
    415e:	e0 93 a9 07 	sts	0x07A9, r30	; 0x8007a9 <__flp>
    4162:	39 c0       	rjmp	.+114    	; 0x41d6 <realloc+0x19a>
    4164:	68 16       	cp	r6, r24
    4166:	79 06       	cpc	r7, r25
    4168:	08 f4       	brcc	.+2      	; 0x416c <realloc+0x130>
    416a:	3c 01       	movw	r6, r24
    416c:	7d 01       	movw	r14, r26
    416e:	12 96       	adiw	r26, 0x02	; 2
    4170:	0d 90       	ld	r0, X+
    4172:	bc 91       	ld	r27, X
    4174:	a0 2d       	mov	r26, r0
    4176:	b7 cf       	rjmp	.-146    	; 0x40e6 <realloc+0xaa>
    4178:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <__brkval>
    417c:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <__brkval+0x1>
    4180:	88 16       	cp	r8, r24
    4182:	99 06       	cpc	r9, r25
    4184:	e1 f4       	brne	.+56     	; 0x41be <realloc+0x182>
    4186:	66 16       	cp	r6, r22
    4188:	77 06       	cpc	r7, r23
    418a:	c8 f4       	brcc	.+50     	; 0x41be <realloc+0x182>
    418c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    4190:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    4194:	00 97       	sbiw	r24, 0x00	; 0
    4196:	41 f4       	brne	.+16     	; 0x41a8 <realloc+0x16c>
    4198:	8d b7       	in	r24, 0x3d	; 61
    419a:	9e b7       	in	r25, 0x3e	; 62
    419c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    41a0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    41a4:	84 1b       	sub	r24, r20
    41a6:	95 0b       	sbc	r25, r21
    41a8:	e8 17       	cp	r30, r24
    41aa:	f9 07       	cpc	r31, r25
    41ac:	b0 f4       	brcc	.+44     	; 0x41da <realloc+0x19e>
    41ae:	f0 93 a8 07 	sts	0x07A8, r31	; 0x8007a8 <__brkval+0x1>
    41b2:	e0 93 a7 07 	sts	0x07A7, r30	; 0x8007a7 <__brkval>
    41b6:	f9 01       	movw	r30, r18
    41b8:	71 83       	std	Z+1, r23	; 0x01
    41ba:	60 83       	st	Z, r22
    41bc:	0c c0       	rjmp	.+24     	; 0x41d6 <realloc+0x19a>
    41be:	cb 01       	movw	r24, r22
    41c0:	1c de       	rcall	.-968    	; 0x3dfa <malloc>
    41c2:	7c 01       	movw	r14, r24
    41c4:	00 97       	sbiw	r24, 0x00	; 0
    41c6:	49 f0       	breq	.+18     	; 0x41da <realloc+0x19e>
    41c8:	a8 01       	movw	r20, r16
    41ca:	be 01       	movw	r22, r28
    41cc:	17 d0       	rcall	.+46     	; 0x41fc <memcpy>
    41ce:	ce 01       	movw	r24, r28
    41d0:	ac de       	rcall	.-680    	; 0x3f2a <free>
    41d2:	c7 01       	movw	r24, r14
    41d4:	04 c0       	rjmp	.+8      	; 0x41de <realloc+0x1a2>
    41d6:	ce 01       	movw	r24, r28
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <realloc+0x1a2>
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	1f 91       	pop	r17
    41e4:	0f 91       	pop	r16
    41e6:	ff 90       	pop	r15
    41e8:	ef 90       	pop	r14
    41ea:	df 90       	pop	r13
    41ec:	cf 90       	pop	r12
    41ee:	bf 90       	pop	r11
    41f0:	af 90       	pop	r10
    41f2:	9f 90       	pop	r9
    41f4:	8f 90       	pop	r8
    41f6:	7f 90       	pop	r7
    41f8:	6f 90       	pop	r6
    41fa:	08 95       	ret

000041fc <memcpy>:
    41fc:	fb 01       	movw	r30, r22
    41fe:	dc 01       	movw	r26, r24
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <memcpy+0xa>
    4202:	01 90       	ld	r0, Z+
    4204:	0d 92       	st	X+, r0
    4206:	41 50       	subi	r20, 0x01	; 1
    4208:	50 40       	sbci	r21, 0x00	; 0
    420a:	d8 f7       	brcc	.-10     	; 0x4202 <memcpy+0x6>
    420c:	08 95       	ret

0000420e <strcpy>:
    420e:	fb 01       	movw	r30, r22
    4210:	dc 01       	movw	r26, r24
    4212:	01 90       	ld	r0, Z+
    4214:	0d 92       	st	X+, r0
    4216:	00 20       	and	r0, r0
    4218:	e1 f7       	brne	.-8      	; 0x4212 <strcpy+0x4>
    421a:	08 95       	ret

0000421c <__itoa_ncheck>:
    421c:	bb 27       	eor	r27, r27
    421e:	4a 30       	cpi	r20, 0x0A	; 10
    4220:	31 f4       	brne	.+12     	; 0x422e <__itoa_ncheck+0x12>
    4222:	99 23       	and	r25, r25
    4224:	22 f4       	brpl	.+8      	; 0x422e <__itoa_ncheck+0x12>
    4226:	bd e2       	ldi	r27, 0x2D	; 45
    4228:	90 95       	com	r25
    422a:	81 95       	neg	r24
    422c:	9f 4f       	sbci	r25, 0xFF	; 255
    422e:	2c c0       	rjmp	.+88     	; 0x4288 <__utoa_common>

00004230 <ultoa>:
    4230:	25 32       	cpi	r18, 0x25	; 37
    4232:	31 05       	cpc	r19, r1
    4234:	18 f4       	brcc	.+6      	; 0x423c <ultoa+0xc>
    4236:	22 30       	cpi	r18, 0x02	; 2
    4238:	08 f0       	brcs	.+2      	; 0x423c <ultoa+0xc>
    423a:	04 c0       	rjmp	.+8      	; 0x4244 <__ultoa_ncheck>
    423c:	fa 01       	movw	r30, r20
    423e:	10 82       	st	Z, r1
    4240:	ca 01       	movw	r24, r20
    4242:	08 95       	ret

00004244 <__ultoa_ncheck>:
    4244:	bb 27       	eor	r27, r27

00004246 <__ultoa_common>:
    4246:	fa 01       	movw	r30, r20
    4248:	a6 2f       	mov	r26, r22
    424a:	62 17       	cp	r22, r18
    424c:	71 05       	cpc	r23, r1
    424e:	81 05       	cpc	r24, r1
    4250:	91 05       	cpc	r25, r1
    4252:	33 0b       	sbc	r19, r19
    4254:	30 fb       	bst	r19, 0
    4256:	66 f0       	brts	.+24     	; 0x4270 <__ultoa_common+0x2a>
    4258:	aa 27       	eor	r26, r26
    425a:	66 0f       	add	r22, r22
    425c:	77 1f       	adc	r23, r23
    425e:	88 1f       	adc	r24, r24
    4260:	99 1f       	adc	r25, r25
    4262:	aa 1f       	adc	r26, r26
    4264:	a2 17       	cp	r26, r18
    4266:	10 f0       	brcs	.+4      	; 0x426c <__ultoa_common+0x26>
    4268:	a2 1b       	sub	r26, r18
    426a:	63 95       	inc	r22
    426c:	38 50       	subi	r19, 0x08	; 8
    426e:	a9 f7       	brne	.-22     	; 0x425a <__ultoa_common+0x14>
    4270:	a0 5d       	subi	r26, 0xD0	; 208
    4272:	aa 33       	cpi	r26, 0x3A	; 58
    4274:	08 f0       	brcs	.+2      	; 0x4278 <__ultoa_common+0x32>
    4276:	a9 5d       	subi	r26, 0xD9	; 217
    4278:	a1 93       	st	Z+, r26
    427a:	36 f7       	brtc	.-52     	; 0x4248 <__ultoa_common+0x2>
    427c:	b1 11       	cpse	r27, r1
    427e:	b1 93       	st	Z+, r27
    4280:	10 82       	st	Z, r1
    4282:	ca 01       	movw	r24, r20
    4284:	5a c2       	rjmp	.+1204   	; 0x473a <strrev>

00004286 <__utoa_ncheck>:
    4286:	bb 27       	eor	r27, r27

00004288 <__utoa_common>:
    4288:	fb 01       	movw	r30, r22
    428a:	55 27       	eor	r21, r21
    428c:	aa 27       	eor	r26, r26
    428e:	88 0f       	add	r24, r24
    4290:	99 1f       	adc	r25, r25
    4292:	aa 1f       	adc	r26, r26
    4294:	a4 17       	cp	r26, r20
    4296:	10 f0       	brcs	.+4      	; 0x429c <__utoa_common+0x14>
    4298:	a4 1b       	sub	r26, r20
    429a:	83 95       	inc	r24
    429c:	50 51       	subi	r21, 0x10	; 16
    429e:	b9 f7       	brne	.-18     	; 0x428e <__utoa_common+0x6>
    42a0:	a0 5d       	subi	r26, 0xD0	; 208
    42a2:	aa 33       	cpi	r26, 0x3A	; 58
    42a4:	08 f0       	brcs	.+2      	; 0x42a8 <__utoa_common+0x20>
    42a6:	a9 5d       	subi	r26, 0xD9	; 217
    42a8:	a1 93       	st	Z+, r26
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	79 f7       	brne	.-34     	; 0x428c <__utoa_common+0x4>
    42ae:	b1 11       	cpse	r27, r1
    42b0:	b1 93       	st	Z+, r27
    42b2:	11 92       	st	Z+, r1
    42b4:	cb 01       	movw	r24, r22
    42b6:	41 c2       	rjmp	.+1154   	; 0x473a <strrev>

000042b8 <sprintf>:
    42b8:	0f 93       	push	r16
    42ba:	1f 93       	push	r17
    42bc:	cf 93       	push	r28
    42be:	df 93       	push	r29
    42c0:	cd b7       	in	r28, 0x3d	; 61
    42c2:	de b7       	in	r29, 0x3e	; 62
    42c4:	2e 97       	sbiw	r28, 0x0e	; 14
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	f8 94       	cli
    42ca:	de bf       	out	0x3e, r29	; 62
    42cc:	0f be       	out	0x3f, r0	; 63
    42ce:	cd bf       	out	0x3d, r28	; 61
    42d0:	0e 89       	ldd	r16, Y+22	; 0x16
    42d2:	1f 89       	ldd	r17, Y+23	; 0x17
    42d4:	86 e0       	ldi	r24, 0x06	; 6
    42d6:	8c 83       	std	Y+4, r24	; 0x04
    42d8:	1a 83       	std	Y+2, r17	; 0x02
    42da:	09 83       	std	Y+1, r16	; 0x01
    42dc:	8f ef       	ldi	r24, 0xFF	; 255
    42de:	9f e7       	ldi	r25, 0x7F	; 127
    42e0:	9e 83       	std	Y+6, r25	; 0x06
    42e2:	8d 83       	std	Y+5, r24	; 0x05
    42e4:	ae 01       	movw	r20, r28
    42e6:	46 5e       	subi	r20, 0xE6	; 230
    42e8:	5f 4f       	sbci	r21, 0xFF	; 255
    42ea:	68 8d       	ldd	r22, Y+24	; 0x18
    42ec:	79 8d       	ldd	r23, Y+25	; 0x19
    42ee:	ce 01       	movw	r24, r28
    42f0:	01 96       	adiw	r24, 0x01	; 1
    42f2:	10 d0       	rcall	.+32     	; 0x4314 <vfprintf>
    42f4:	ef 81       	ldd	r30, Y+7	; 0x07
    42f6:	f8 85       	ldd	r31, Y+8	; 0x08
    42f8:	e0 0f       	add	r30, r16
    42fa:	f1 1f       	adc	r31, r17
    42fc:	10 82       	st	Z, r1
    42fe:	2e 96       	adiw	r28, 0x0e	; 14
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	1f 91       	pop	r17
    4310:	0f 91       	pop	r16
    4312:	08 95       	ret

00004314 <vfprintf>:
    4314:	2f 92       	push	r2
    4316:	3f 92       	push	r3
    4318:	4f 92       	push	r4
    431a:	5f 92       	push	r5
    431c:	6f 92       	push	r6
    431e:	7f 92       	push	r7
    4320:	8f 92       	push	r8
    4322:	9f 92       	push	r9
    4324:	af 92       	push	r10
    4326:	bf 92       	push	r11
    4328:	cf 92       	push	r12
    432a:	df 92       	push	r13
    432c:	ef 92       	push	r14
    432e:	ff 92       	push	r15
    4330:	0f 93       	push	r16
    4332:	1f 93       	push	r17
    4334:	cf 93       	push	r28
    4336:	df 93       	push	r29
    4338:	cd b7       	in	r28, 0x3d	; 61
    433a:	de b7       	in	r29, 0x3e	; 62
    433c:	2b 97       	sbiw	r28, 0x0b	; 11
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	cd bf       	out	0x3d, r28	; 61
    4348:	6c 01       	movw	r12, r24
    434a:	7b 01       	movw	r14, r22
    434c:	8a 01       	movw	r16, r20
    434e:	fc 01       	movw	r30, r24
    4350:	17 82       	std	Z+7, r1	; 0x07
    4352:	16 82       	std	Z+6, r1	; 0x06
    4354:	83 81       	ldd	r24, Z+3	; 0x03
    4356:	81 ff       	sbrs	r24, 1
    4358:	bf c1       	rjmp	.+894    	; 0x46d8 <vfprintf+0x3c4>
    435a:	ce 01       	movw	r24, r28
    435c:	01 96       	adiw	r24, 0x01	; 1
    435e:	3c 01       	movw	r6, r24
    4360:	f6 01       	movw	r30, r12
    4362:	93 81       	ldd	r25, Z+3	; 0x03
    4364:	f7 01       	movw	r30, r14
    4366:	93 fd       	sbrc	r25, 3
    4368:	85 91       	lpm	r24, Z+
    436a:	93 ff       	sbrs	r25, 3
    436c:	81 91       	ld	r24, Z+
    436e:	7f 01       	movw	r14, r30
    4370:	88 23       	and	r24, r24
    4372:	09 f4       	brne	.+2      	; 0x4376 <vfprintf+0x62>
    4374:	ad c1       	rjmp	.+858    	; 0x46d0 <vfprintf+0x3bc>
    4376:	85 32       	cpi	r24, 0x25	; 37
    4378:	39 f4       	brne	.+14     	; 0x4388 <vfprintf+0x74>
    437a:	93 fd       	sbrc	r25, 3
    437c:	85 91       	lpm	r24, Z+
    437e:	93 ff       	sbrs	r25, 3
    4380:	81 91       	ld	r24, Z+
    4382:	7f 01       	movw	r14, r30
    4384:	85 32       	cpi	r24, 0x25	; 37
    4386:	21 f4       	brne	.+8      	; 0x4390 <vfprintf+0x7c>
    4388:	b6 01       	movw	r22, r12
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	e6 d1       	rcall	.+972    	; 0x475a <fputc>
    438e:	e8 cf       	rjmp	.-48     	; 0x4360 <vfprintf+0x4c>
    4390:	91 2c       	mov	r9, r1
    4392:	21 2c       	mov	r2, r1
    4394:	31 2c       	mov	r3, r1
    4396:	ff e1       	ldi	r31, 0x1F	; 31
    4398:	f3 15       	cp	r31, r3
    439a:	d8 f0       	brcs	.+54     	; 0x43d2 <vfprintf+0xbe>
    439c:	8b 32       	cpi	r24, 0x2B	; 43
    439e:	79 f0       	breq	.+30     	; 0x43be <vfprintf+0xaa>
    43a0:	38 f4       	brcc	.+14     	; 0x43b0 <vfprintf+0x9c>
    43a2:	80 32       	cpi	r24, 0x20	; 32
    43a4:	79 f0       	breq	.+30     	; 0x43c4 <vfprintf+0xb0>
    43a6:	83 32       	cpi	r24, 0x23	; 35
    43a8:	a1 f4       	brne	.+40     	; 0x43d2 <vfprintf+0xbe>
    43aa:	23 2d       	mov	r18, r3
    43ac:	20 61       	ori	r18, 0x10	; 16
    43ae:	1d c0       	rjmp	.+58     	; 0x43ea <vfprintf+0xd6>
    43b0:	8d 32       	cpi	r24, 0x2D	; 45
    43b2:	61 f0       	breq	.+24     	; 0x43cc <vfprintf+0xb8>
    43b4:	80 33       	cpi	r24, 0x30	; 48
    43b6:	69 f4       	brne	.+26     	; 0x43d2 <vfprintf+0xbe>
    43b8:	23 2d       	mov	r18, r3
    43ba:	21 60       	ori	r18, 0x01	; 1
    43bc:	16 c0       	rjmp	.+44     	; 0x43ea <vfprintf+0xd6>
    43be:	83 2d       	mov	r24, r3
    43c0:	82 60       	ori	r24, 0x02	; 2
    43c2:	38 2e       	mov	r3, r24
    43c4:	e3 2d       	mov	r30, r3
    43c6:	e4 60       	ori	r30, 0x04	; 4
    43c8:	3e 2e       	mov	r3, r30
    43ca:	2a c0       	rjmp	.+84     	; 0x4420 <vfprintf+0x10c>
    43cc:	f3 2d       	mov	r31, r3
    43ce:	f8 60       	ori	r31, 0x08	; 8
    43d0:	1d c0       	rjmp	.+58     	; 0x440c <vfprintf+0xf8>
    43d2:	37 fc       	sbrc	r3, 7
    43d4:	2d c0       	rjmp	.+90     	; 0x4430 <vfprintf+0x11c>
    43d6:	20 ed       	ldi	r18, 0xD0	; 208
    43d8:	28 0f       	add	r18, r24
    43da:	2a 30       	cpi	r18, 0x0A	; 10
    43dc:	40 f0       	brcs	.+16     	; 0x43ee <vfprintf+0xda>
    43de:	8e 32       	cpi	r24, 0x2E	; 46
    43e0:	b9 f4       	brne	.+46     	; 0x4410 <vfprintf+0xfc>
    43e2:	36 fc       	sbrc	r3, 6
    43e4:	75 c1       	rjmp	.+746    	; 0x46d0 <vfprintf+0x3bc>
    43e6:	23 2d       	mov	r18, r3
    43e8:	20 64       	ori	r18, 0x40	; 64
    43ea:	32 2e       	mov	r3, r18
    43ec:	19 c0       	rjmp	.+50     	; 0x4420 <vfprintf+0x10c>
    43ee:	36 fe       	sbrs	r3, 6
    43f0:	06 c0       	rjmp	.+12     	; 0x43fe <vfprintf+0xea>
    43f2:	8a e0       	ldi	r24, 0x0A	; 10
    43f4:	98 9e       	mul	r9, r24
    43f6:	20 0d       	add	r18, r0
    43f8:	11 24       	eor	r1, r1
    43fa:	92 2e       	mov	r9, r18
    43fc:	11 c0       	rjmp	.+34     	; 0x4420 <vfprintf+0x10c>
    43fe:	ea e0       	ldi	r30, 0x0A	; 10
    4400:	2e 9e       	mul	r2, r30
    4402:	20 0d       	add	r18, r0
    4404:	11 24       	eor	r1, r1
    4406:	22 2e       	mov	r2, r18
    4408:	f3 2d       	mov	r31, r3
    440a:	f0 62       	ori	r31, 0x20	; 32
    440c:	3f 2e       	mov	r3, r31
    440e:	08 c0       	rjmp	.+16     	; 0x4420 <vfprintf+0x10c>
    4410:	8c 36       	cpi	r24, 0x6C	; 108
    4412:	21 f4       	brne	.+8      	; 0x441c <vfprintf+0x108>
    4414:	83 2d       	mov	r24, r3
    4416:	80 68       	ori	r24, 0x80	; 128
    4418:	38 2e       	mov	r3, r24
    441a:	02 c0       	rjmp	.+4      	; 0x4420 <vfprintf+0x10c>
    441c:	88 36       	cpi	r24, 0x68	; 104
    441e:	41 f4       	brne	.+16     	; 0x4430 <vfprintf+0x11c>
    4420:	f7 01       	movw	r30, r14
    4422:	93 fd       	sbrc	r25, 3
    4424:	85 91       	lpm	r24, Z+
    4426:	93 ff       	sbrs	r25, 3
    4428:	81 91       	ld	r24, Z+
    442a:	7f 01       	movw	r14, r30
    442c:	81 11       	cpse	r24, r1
    442e:	b3 cf       	rjmp	.-154    	; 0x4396 <vfprintf+0x82>
    4430:	98 2f       	mov	r25, r24
    4432:	9f 7d       	andi	r25, 0xDF	; 223
    4434:	95 54       	subi	r25, 0x45	; 69
    4436:	93 30       	cpi	r25, 0x03	; 3
    4438:	28 f4       	brcc	.+10     	; 0x4444 <vfprintf+0x130>
    443a:	0c 5f       	subi	r16, 0xFC	; 252
    443c:	1f 4f       	sbci	r17, 0xFF	; 255
    443e:	9f e3       	ldi	r25, 0x3F	; 63
    4440:	99 83       	std	Y+1, r25	; 0x01
    4442:	0d c0       	rjmp	.+26     	; 0x445e <vfprintf+0x14a>
    4444:	83 36       	cpi	r24, 0x63	; 99
    4446:	31 f0       	breq	.+12     	; 0x4454 <vfprintf+0x140>
    4448:	83 37       	cpi	r24, 0x73	; 115
    444a:	71 f0       	breq	.+28     	; 0x4468 <vfprintf+0x154>
    444c:	83 35       	cpi	r24, 0x53	; 83
    444e:	09 f0       	breq	.+2      	; 0x4452 <vfprintf+0x13e>
    4450:	55 c0       	rjmp	.+170    	; 0x44fc <vfprintf+0x1e8>
    4452:	20 c0       	rjmp	.+64     	; 0x4494 <vfprintf+0x180>
    4454:	f8 01       	movw	r30, r16
    4456:	80 81       	ld	r24, Z
    4458:	89 83       	std	Y+1, r24	; 0x01
    445a:	0e 5f       	subi	r16, 0xFE	; 254
    445c:	1f 4f       	sbci	r17, 0xFF	; 255
    445e:	88 24       	eor	r8, r8
    4460:	83 94       	inc	r8
    4462:	91 2c       	mov	r9, r1
    4464:	53 01       	movw	r10, r6
    4466:	12 c0       	rjmp	.+36     	; 0x448c <vfprintf+0x178>
    4468:	28 01       	movw	r4, r16
    446a:	f2 e0       	ldi	r31, 0x02	; 2
    446c:	4f 0e       	add	r4, r31
    446e:	51 1c       	adc	r5, r1
    4470:	f8 01       	movw	r30, r16
    4472:	a0 80       	ld	r10, Z
    4474:	b1 80       	ldd	r11, Z+1	; 0x01
    4476:	36 fe       	sbrs	r3, 6
    4478:	03 c0       	rjmp	.+6      	; 0x4480 <vfprintf+0x16c>
    447a:	69 2d       	mov	r22, r9
    447c:	70 e0       	ldi	r23, 0x00	; 0
    447e:	02 c0       	rjmp	.+4      	; 0x4484 <vfprintf+0x170>
    4480:	6f ef       	ldi	r22, 0xFF	; 255
    4482:	7f ef       	ldi	r23, 0xFF	; 255
    4484:	c5 01       	movw	r24, r10
    4486:	4e d1       	rcall	.+668    	; 0x4724 <strnlen>
    4488:	4c 01       	movw	r8, r24
    448a:	82 01       	movw	r16, r4
    448c:	f3 2d       	mov	r31, r3
    448e:	ff 77       	andi	r31, 0x7F	; 127
    4490:	3f 2e       	mov	r3, r31
    4492:	15 c0       	rjmp	.+42     	; 0x44be <vfprintf+0x1aa>
    4494:	28 01       	movw	r4, r16
    4496:	22 e0       	ldi	r18, 0x02	; 2
    4498:	42 0e       	add	r4, r18
    449a:	51 1c       	adc	r5, r1
    449c:	f8 01       	movw	r30, r16
    449e:	a0 80       	ld	r10, Z
    44a0:	b1 80       	ldd	r11, Z+1	; 0x01
    44a2:	36 fe       	sbrs	r3, 6
    44a4:	03 c0       	rjmp	.+6      	; 0x44ac <vfprintf+0x198>
    44a6:	69 2d       	mov	r22, r9
    44a8:	70 e0       	ldi	r23, 0x00	; 0
    44aa:	02 c0       	rjmp	.+4      	; 0x44b0 <vfprintf+0x19c>
    44ac:	6f ef       	ldi	r22, 0xFF	; 255
    44ae:	7f ef       	ldi	r23, 0xFF	; 255
    44b0:	c5 01       	movw	r24, r10
    44b2:	2d d1       	rcall	.+602    	; 0x470e <strnlen_P>
    44b4:	4c 01       	movw	r8, r24
    44b6:	f3 2d       	mov	r31, r3
    44b8:	f0 68       	ori	r31, 0x80	; 128
    44ba:	3f 2e       	mov	r3, r31
    44bc:	82 01       	movw	r16, r4
    44be:	33 fc       	sbrc	r3, 3
    44c0:	19 c0       	rjmp	.+50     	; 0x44f4 <vfprintf+0x1e0>
    44c2:	82 2d       	mov	r24, r2
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	88 16       	cp	r8, r24
    44c8:	99 06       	cpc	r9, r25
    44ca:	a0 f4       	brcc	.+40     	; 0x44f4 <vfprintf+0x1e0>
    44cc:	b6 01       	movw	r22, r12
    44ce:	80 e2       	ldi	r24, 0x20	; 32
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	43 d1       	rcall	.+646    	; 0x475a <fputc>
    44d4:	2a 94       	dec	r2
    44d6:	f5 cf       	rjmp	.-22     	; 0x44c2 <vfprintf+0x1ae>
    44d8:	f5 01       	movw	r30, r10
    44da:	37 fc       	sbrc	r3, 7
    44dc:	85 91       	lpm	r24, Z+
    44de:	37 fe       	sbrs	r3, 7
    44e0:	81 91       	ld	r24, Z+
    44e2:	5f 01       	movw	r10, r30
    44e4:	b6 01       	movw	r22, r12
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	38 d1       	rcall	.+624    	; 0x475a <fputc>
    44ea:	21 10       	cpse	r2, r1
    44ec:	2a 94       	dec	r2
    44ee:	21 e0       	ldi	r18, 0x01	; 1
    44f0:	82 1a       	sub	r8, r18
    44f2:	91 08       	sbc	r9, r1
    44f4:	81 14       	cp	r8, r1
    44f6:	91 04       	cpc	r9, r1
    44f8:	79 f7       	brne	.-34     	; 0x44d8 <vfprintf+0x1c4>
    44fa:	e1 c0       	rjmp	.+450    	; 0x46be <vfprintf+0x3aa>
    44fc:	84 36       	cpi	r24, 0x64	; 100
    44fe:	11 f0       	breq	.+4      	; 0x4504 <vfprintf+0x1f0>
    4500:	89 36       	cpi	r24, 0x69	; 105
    4502:	39 f5       	brne	.+78     	; 0x4552 <vfprintf+0x23e>
    4504:	f8 01       	movw	r30, r16
    4506:	37 fe       	sbrs	r3, 7
    4508:	07 c0       	rjmp	.+14     	; 0x4518 <vfprintf+0x204>
    450a:	60 81       	ld	r22, Z
    450c:	71 81       	ldd	r23, Z+1	; 0x01
    450e:	82 81       	ldd	r24, Z+2	; 0x02
    4510:	93 81       	ldd	r25, Z+3	; 0x03
    4512:	0c 5f       	subi	r16, 0xFC	; 252
    4514:	1f 4f       	sbci	r17, 0xFF	; 255
    4516:	08 c0       	rjmp	.+16     	; 0x4528 <vfprintf+0x214>
    4518:	60 81       	ld	r22, Z
    451a:	71 81       	ldd	r23, Z+1	; 0x01
    451c:	07 2e       	mov	r0, r23
    451e:	00 0c       	add	r0, r0
    4520:	88 0b       	sbc	r24, r24
    4522:	99 0b       	sbc	r25, r25
    4524:	0e 5f       	subi	r16, 0xFE	; 254
    4526:	1f 4f       	sbci	r17, 0xFF	; 255
    4528:	f3 2d       	mov	r31, r3
    452a:	ff 76       	andi	r31, 0x6F	; 111
    452c:	3f 2e       	mov	r3, r31
    452e:	97 ff       	sbrs	r25, 7
    4530:	09 c0       	rjmp	.+18     	; 0x4544 <vfprintf+0x230>
    4532:	90 95       	com	r25
    4534:	80 95       	com	r24
    4536:	70 95       	com	r23
    4538:	61 95       	neg	r22
    453a:	7f 4f       	sbci	r23, 0xFF	; 255
    453c:	8f 4f       	sbci	r24, 0xFF	; 255
    453e:	9f 4f       	sbci	r25, 0xFF	; 255
    4540:	f0 68       	ori	r31, 0x80	; 128
    4542:	3f 2e       	mov	r3, r31
    4544:	2a e0       	ldi	r18, 0x0A	; 10
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	a3 01       	movw	r20, r6
    454a:	43 d1       	rcall	.+646    	; 0x47d2 <__ultoa_invert>
    454c:	88 2e       	mov	r8, r24
    454e:	86 18       	sub	r8, r6
    4550:	44 c0       	rjmp	.+136    	; 0x45da <vfprintf+0x2c6>
    4552:	85 37       	cpi	r24, 0x75	; 117
    4554:	31 f4       	brne	.+12     	; 0x4562 <vfprintf+0x24e>
    4556:	23 2d       	mov	r18, r3
    4558:	2f 7e       	andi	r18, 0xEF	; 239
    455a:	b2 2e       	mov	r11, r18
    455c:	2a e0       	ldi	r18, 0x0A	; 10
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	25 c0       	rjmp	.+74     	; 0x45ac <vfprintf+0x298>
    4562:	93 2d       	mov	r25, r3
    4564:	99 7f       	andi	r25, 0xF9	; 249
    4566:	b9 2e       	mov	r11, r25
    4568:	8f 36       	cpi	r24, 0x6F	; 111
    456a:	c1 f0       	breq	.+48     	; 0x459c <vfprintf+0x288>
    456c:	18 f4       	brcc	.+6      	; 0x4574 <vfprintf+0x260>
    456e:	88 35       	cpi	r24, 0x58	; 88
    4570:	79 f0       	breq	.+30     	; 0x4590 <vfprintf+0x27c>
    4572:	ae c0       	rjmp	.+348    	; 0x46d0 <vfprintf+0x3bc>
    4574:	80 37       	cpi	r24, 0x70	; 112
    4576:	19 f0       	breq	.+6      	; 0x457e <vfprintf+0x26a>
    4578:	88 37       	cpi	r24, 0x78	; 120
    457a:	21 f0       	breq	.+8      	; 0x4584 <vfprintf+0x270>
    457c:	a9 c0       	rjmp	.+338    	; 0x46d0 <vfprintf+0x3bc>
    457e:	e9 2f       	mov	r30, r25
    4580:	e0 61       	ori	r30, 0x10	; 16
    4582:	be 2e       	mov	r11, r30
    4584:	b4 fe       	sbrs	r11, 4
    4586:	0d c0       	rjmp	.+26     	; 0x45a2 <vfprintf+0x28e>
    4588:	fb 2d       	mov	r31, r11
    458a:	f4 60       	ori	r31, 0x04	; 4
    458c:	bf 2e       	mov	r11, r31
    458e:	09 c0       	rjmp	.+18     	; 0x45a2 <vfprintf+0x28e>
    4590:	34 fe       	sbrs	r3, 4
    4592:	0a c0       	rjmp	.+20     	; 0x45a8 <vfprintf+0x294>
    4594:	29 2f       	mov	r18, r25
    4596:	26 60       	ori	r18, 0x06	; 6
    4598:	b2 2e       	mov	r11, r18
    459a:	06 c0       	rjmp	.+12     	; 0x45a8 <vfprintf+0x294>
    459c:	28 e0       	ldi	r18, 0x08	; 8
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	05 c0       	rjmp	.+10     	; 0x45ac <vfprintf+0x298>
    45a2:	20 e1       	ldi	r18, 0x10	; 16
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	02 c0       	rjmp	.+4      	; 0x45ac <vfprintf+0x298>
    45a8:	20 e1       	ldi	r18, 0x10	; 16
    45aa:	32 e0       	ldi	r19, 0x02	; 2
    45ac:	f8 01       	movw	r30, r16
    45ae:	b7 fe       	sbrs	r11, 7
    45b0:	07 c0       	rjmp	.+14     	; 0x45c0 <vfprintf+0x2ac>
    45b2:	60 81       	ld	r22, Z
    45b4:	71 81       	ldd	r23, Z+1	; 0x01
    45b6:	82 81       	ldd	r24, Z+2	; 0x02
    45b8:	93 81       	ldd	r25, Z+3	; 0x03
    45ba:	0c 5f       	subi	r16, 0xFC	; 252
    45bc:	1f 4f       	sbci	r17, 0xFF	; 255
    45be:	06 c0       	rjmp	.+12     	; 0x45cc <vfprintf+0x2b8>
    45c0:	60 81       	ld	r22, Z
    45c2:	71 81       	ldd	r23, Z+1	; 0x01
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	0e 5f       	subi	r16, 0xFE	; 254
    45ca:	1f 4f       	sbci	r17, 0xFF	; 255
    45cc:	a3 01       	movw	r20, r6
    45ce:	01 d1       	rcall	.+514    	; 0x47d2 <__ultoa_invert>
    45d0:	88 2e       	mov	r8, r24
    45d2:	86 18       	sub	r8, r6
    45d4:	fb 2d       	mov	r31, r11
    45d6:	ff 77       	andi	r31, 0x7F	; 127
    45d8:	3f 2e       	mov	r3, r31
    45da:	36 fe       	sbrs	r3, 6
    45dc:	0d c0       	rjmp	.+26     	; 0x45f8 <vfprintf+0x2e4>
    45de:	23 2d       	mov	r18, r3
    45e0:	2e 7f       	andi	r18, 0xFE	; 254
    45e2:	a2 2e       	mov	r10, r18
    45e4:	89 14       	cp	r8, r9
    45e6:	58 f4       	brcc	.+22     	; 0x45fe <vfprintf+0x2ea>
    45e8:	34 fe       	sbrs	r3, 4
    45ea:	0b c0       	rjmp	.+22     	; 0x4602 <vfprintf+0x2ee>
    45ec:	32 fc       	sbrc	r3, 2
    45ee:	09 c0       	rjmp	.+18     	; 0x4602 <vfprintf+0x2ee>
    45f0:	83 2d       	mov	r24, r3
    45f2:	8e 7e       	andi	r24, 0xEE	; 238
    45f4:	a8 2e       	mov	r10, r24
    45f6:	05 c0       	rjmp	.+10     	; 0x4602 <vfprintf+0x2ee>
    45f8:	b8 2c       	mov	r11, r8
    45fa:	a3 2c       	mov	r10, r3
    45fc:	03 c0       	rjmp	.+6      	; 0x4604 <vfprintf+0x2f0>
    45fe:	b8 2c       	mov	r11, r8
    4600:	01 c0       	rjmp	.+2      	; 0x4604 <vfprintf+0x2f0>
    4602:	b9 2c       	mov	r11, r9
    4604:	a4 fe       	sbrs	r10, 4
    4606:	0f c0       	rjmp	.+30     	; 0x4626 <vfprintf+0x312>
    4608:	fe 01       	movw	r30, r28
    460a:	e8 0d       	add	r30, r8
    460c:	f1 1d       	adc	r31, r1
    460e:	80 81       	ld	r24, Z
    4610:	80 33       	cpi	r24, 0x30	; 48
    4612:	21 f4       	brne	.+8      	; 0x461c <vfprintf+0x308>
    4614:	9a 2d       	mov	r25, r10
    4616:	99 7e       	andi	r25, 0xE9	; 233
    4618:	a9 2e       	mov	r10, r25
    461a:	09 c0       	rjmp	.+18     	; 0x462e <vfprintf+0x31a>
    461c:	a2 fe       	sbrs	r10, 2
    461e:	06 c0       	rjmp	.+12     	; 0x462c <vfprintf+0x318>
    4620:	b3 94       	inc	r11
    4622:	b3 94       	inc	r11
    4624:	04 c0       	rjmp	.+8      	; 0x462e <vfprintf+0x31a>
    4626:	8a 2d       	mov	r24, r10
    4628:	86 78       	andi	r24, 0x86	; 134
    462a:	09 f0       	breq	.+2      	; 0x462e <vfprintf+0x31a>
    462c:	b3 94       	inc	r11
    462e:	a3 fc       	sbrc	r10, 3
    4630:	10 c0       	rjmp	.+32     	; 0x4652 <vfprintf+0x33e>
    4632:	a0 fe       	sbrs	r10, 0
    4634:	06 c0       	rjmp	.+12     	; 0x4642 <vfprintf+0x32e>
    4636:	b2 14       	cp	r11, r2
    4638:	80 f4       	brcc	.+32     	; 0x465a <vfprintf+0x346>
    463a:	28 0c       	add	r2, r8
    463c:	92 2c       	mov	r9, r2
    463e:	9b 18       	sub	r9, r11
    4640:	0d c0       	rjmp	.+26     	; 0x465c <vfprintf+0x348>
    4642:	b2 14       	cp	r11, r2
    4644:	58 f4       	brcc	.+22     	; 0x465c <vfprintf+0x348>
    4646:	b6 01       	movw	r22, r12
    4648:	80 e2       	ldi	r24, 0x20	; 32
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	86 d0       	rcall	.+268    	; 0x475a <fputc>
    464e:	b3 94       	inc	r11
    4650:	f8 cf       	rjmp	.-16     	; 0x4642 <vfprintf+0x32e>
    4652:	b2 14       	cp	r11, r2
    4654:	18 f4       	brcc	.+6      	; 0x465c <vfprintf+0x348>
    4656:	2b 18       	sub	r2, r11
    4658:	02 c0       	rjmp	.+4      	; 0x465e <vfprintf+0x34a>
    465a:	98 2c       	mov	r9, r8
    465c:	21 2c       	mov	r2, r1
    465e:	a4 fe       	sbrs	r10, 4
    4660:	0f c0       	rjmp	.+30     	; 0x4680 <vfprintf+0x36c>
    4662:	b6 01       	movw	r22, r12
    4664:	80 e3       	ldi	r24, 0x30	; 48
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	78 d0       	rcall	.+240    	; 0x475a <fputc>
    466a:	a2 fe       	sbrs	r10, 2
    466c:	16 c0       	rjmp	.+44     	; 0x469a <vfprintf+0x386>
    466e:	a1 fc       	sbrc	r10, 1
    4670:	03 c0       	rjmp	.+6      	; 0x4678 <vfprintf+0x364>
    4672:	88 e7       	ldi	r24, 0x78	; 120
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	02 c0       	rjmp	.+4      	; 0x467c <vfprintf+0x368>
    4678:	88 e5       	ldi	r24, 0x58	; 88
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	b6 01       	movw	r22, r12
    467e:	0c c0       	rjmp	.+24     	; 0x4698 <vfprintf+0x384>
    4680:	8a 2d       	mov	r24, r10
    4682:	86 78       	andi	r24, 0x86	; 134
    4684:	51 f0       	breq	.+20     	; 0x469a <vfprintf+0x386>
    4686:	a1 fe       	sbrs	r10, 1
    4688:	02 c0       	rjmp	.+4      	; 0x468e <vfprintf+0x37a>
    468a:	8b e2       	ldi	r24, 0x2B	; 43
    468c:	01 c0       	rjmp	.+2      	; 0x4690 <vfprintf+0x37c>
    468e:	80 e2       	ldi	r24, 0x20	; 32
    4690:	a7 fc       	sbrc	r10, 7
    4692:	8d e2       	ldi	r24, 0x2D	; 45
    4694:	b6 01       	movw	r22, r12
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	60 d0       	rcall	.+192    	; 0x475a <fputc>
    469a:	89 14       	cp	r8, r9
    469c:	30 f4       	brcc	.+12     	; 0x46aa <vfprintf+0x396>
    469e:	b6 01       	movw	r22, r12
    46a0:	80 e3       	ldi	r24, 0x30	; 48
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	5a d0       	rcall	.+180    	; 0x475a <fputc>
    46a6:	9a 94       	dec	r9
    46a8:	f8 cf       	rjmp	.-16     	; 0x469a <vfprintf+0x386>
    46aa:	8a 94       	dec	r8
    46ac:	f3 01       	movw	r30, r6
    46ae:	e8 0d       	add	r30, r8
    46b0:	f1 1d       	adc	r31, r1
    46b2:	80 81       	ld	r24, Z
    46b4:	b6 01       	movw	r22, r12
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	50 d0       	rcall	.+160    	; 0x475a <fputc>
    46ba:	81 10       	cpse	r8, r1
    46bc:	f6 cf       	rjmp	.-20     	; 0x46aa <vfprintf+0x396>
    46be:	22 20       	and	r2, r2
    46c0:	09 f4       	brne	.+2      	; 0x46c4 <vfprintf+0x3b0>
    46c2:	4e ce       	rjmp	.-868    	; 0x4360 <vfprintf+0x4c>
    46c4:	b6 01       	movw	r22, r12
    46c6:	80 e2       	ldi	r24, 0x20	; 32
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	47 d0       	rcall	.+142    	; 0x475a <fputc>
    46cc:	2a 94       	dec	r2
    46ce:	f7 cf       	rjmp	.-18     	; 0x46be <vfprintf+0x3aa>
    46d0:	f6 01       	movw	r30, r12
    46d2:	86 81       	ldd	r24, Z+6	; 0x06
    46d4:	97 81       	ldd	r25, Z+7	; 0x07
    46d6:	02 c0       	rjmp	.+4      	; 0x46dc <vfprintf+0x3c8>
    46d8:	8f ef       	ldi	r24, 0xFF	; 255
    46da:	9f ef       	ldi	r25, 0xFF	; 255
    46dc:	2b 96       	adiw	r28, 0x0b	; 11
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	f8 94       	cli
    46e2:	de bf       	out	0x3e, r29	; 62
    46e4:	0f be       	out	0x3f, r0	; 63
    46e6:	cd bf       	out	0x3d, r28	; 61
    46e8:	df 91       	pop	r29
    46ea:	cf 91       	pop	r28
    46ec:	1f 91       	pop	r17
    46ee:	0f 91       	pop	r16
    46f0:	ff 90       	pop	r15
    46f2:	ef 90       	pop	r14
    46f4:	df 90       	pop	r13
    46f6:	cf 90       	pop	r12
    46f8:	bf 90       	pop	r11
    46fa:	af 90       	pop	r10
    46fc:	9f 90       	pop	r9
    46fe:	8f 90       	pop	r8
    4700:	7f 90       	pop	r7
    4702:	6f 90       	pop	r6
    4704:	5f 90       	pop	r5
    4706:	4f 90       	pop	r4
    4708:	3f 90       	pop	r3
    470a:	2f 90       	pop	r2
    470c:	08 95       	ret

0000470e <strnlen_P>:
    470e:	fc 01       	movw	r30, r24
    4710:	05 90       	lpm	r0, Z+
    4712:	61 50       	subi	r22, 0x01	; 1
    4714:	70 40       	sbci	r23, 0x00	; 0
    4716:	01 10       	cpse	r0, r1
    4718:	d8 f7       	brcc	.-10     	; 0x4710 <strnlen_P+0x2>
    471a:	80 95       	com	r24
    471c:	90 95       	com	r25
    471e:	8e 0f       	add	r24, r30
    4720:	9f 1f       	adc	r25, r31
    4722:	08 95       	ret

00004724 <strnlen>:
    4724:	fc 01       	movw	r30, r24
    4726:	61 50       	subi	r22, 0x01	; 1
    4728:	70 40       	sbci	r23, 0x00	; 0
    472a:	01 90       	ld	r0, Z+
    472c:	01 10       	cpse	r0, r1
    472e:	d8 f7       	brcc	.-10     	; 0x4726 <strnlen+0x2>
    4730:	80 95       	com	r24
    4732:	90 95       	com	r25
    4734:	8e 0f       	add	r24, r30
    4736:	9f 1f       	adc	r25, r31
    4738:	08 95       	ret

0000473a <strrev>:
    473a:	dc 01       	movw	r26, r24
    473c:	fc 01       	movw	r30, r24
    473e:	67 2f       	mov	r22, r23
    4740:	71 91       	ld	r23, Z+
    4742:	77 23       	and	r23, r23
    4744:	e1 f7       	brne	.-8      	; 0x473e <strrev+0x4>
    4746:	32 97       	sbiw	r30, 0x02	; 2
    4748:	04 c0       	rjmp	.+8      	; 0x4752 <strrev+0x18>
    474a:	7c 91       	ld	r23, X
    474c:	6d 93       	st	X+, r22
    474e:	70 83       	st	Z, r23
    4750:	62 91       	ld	r22, -Z
    4752:	ae 17       	cp	r26, r30
    4754:	bf 07       	cpc	r27, r31
    4756:	c8 f3       	brcs	.-14     	; 0x474a <strrev+0x10>
    4758:	08 95       	ret

0000475a <fputc>:
    475a:	0f 93       	push	r16
    475c:	1f 93       	push	r17
    475e:	cf 93       	push	r28
    4760:	df 93       	push	r29
    4762:	fb 01       	movw	r30, r22
    4764:	23 81       	ldd	r18, Z+3	; 0x03
    4766:	21 fd       	sbrc	r18, 1
    4768:	03 c0       	rjmp	.+6      	; 0x4770 <fputc+0x16>
    476a:	8f ef       	ldi	r24, 0xFF	; 255
    476c:	9f ef       	ldi	r25, 0xFF	; 255
    476e:	2c c0       	rjmp	.+88     	; 0x47c8 <fputc+0x6e>
    4770:	22 ff       	sbrs	r18, 2
    4772:	16 c0       	rjmp	.+44     	; 0x47a0 <fputc+0x46>
    4774:	46 81       	ldd	r20, Z+6	; 0x06
    4776:	57 81       	ldd	r21, Z+7	; 0x07
    4778:	24 81       	ldd	r18, Z+4	; 0x04
    477a:	35 81       	ldd	r19, Z+5	; 0x05
    477c:	42 17       	cp	r20, r18
    477e:	53 07       	cpc	r21, r19
    4780:	44 f4       	brge	.+16     	; 0x4792 <fputc+0x38>
    4782:	a0 81       	ld	r26, Z
    4784:	b1 81       	ldd	r27, Z+1	; 0x01
    4786:	9d 01       	movw	r18, r26
    4788:	2f 5f       	subi	r18, 0xFF	; 255
    478a:	3f 4f       	sbci	r19, 0xFF	; 255
    478c:	31 83       	std	Z+1, r19	; 0x01
    478e:	20 83       	st	Z, r18
    4790:	8c 93       	st	X, r24
    4792:	26 81       	ldd	r18, Z+6	; 0x06
    4794:	37 81       	ldd	r19, Z+7	; 0x07
    4796:	2f 5f       	subi	r18, 0xFF	; 255
    4798:	3f 4f       	sbci	r19, 0xFF	; 255
    479a:	37 83       	std	Z+7, r19	; 0x07
    479c:	26 83       	std	Z+6, r18	; 0x06
    479e:	14 c0       	rjmp	.+40     	; 0x47c8 <fputc+0x6e>
    47a0:	8b 01       	movw	r16, r22
    47a2:	ec 01       	movw	r28, r24
    47a4:	fb 01       	movw	r30, r22
    47a6:	00 84       	ldd	r0, Z+8	; 0x08
    47a8:	f1 85       	ldd	r31, Z+9	; 0x09
    47aa:	e0 2d       	mov	r30, r0
    47ac:	19 95       	eicall
    47ae:	89 2b       	or	r24, r25
    47b0:	e1 f6       	brne	.-72     	; 0x476a <fputc+0x10>
    47b2:	d8 01       	movw	r26, r16
    47b4:	16 96       	adiw	r26, 0x06	; 6
    47b6:	8d 91       	ld	r24, X+
    47b8:	9c 91       	ld	r25, X
    47ba:	17 97       	sbiw	r26, 0x07	; 7
    47bc:	01 96       	adiw	r24, 0x01	; 1
    47be:	17 96       	adiw	r26, 0x07	; 7
    47c0:	9c 93       	st	X, r25
    47c2:	8e 93       	st	-X, r24
    47c4:	16 97       	sbiw	r26, 0x06	; 6
    47c6:	ce 01       	movw	r24, r28
    47c8:	df 91       	pop	r29
    47ca:	cf 91       	pop	r28
    47cc:	1f 91       	pop	r17
    47ce:	0f 91       	pop	r16
    47d0:	08 95       	ret

000047d2 <__ultoa_invert>:
    47d2:	fa 01       	movw	r30, r20
    47d4:	aa 27       	eor	r26, r26
    47d6:	28 30       	cpi	r18, 0x08	; 8
    47d8:	51 f1       	breq	.+84     	; 0x482e <__ultoa_invert+0x5c>
    47da:	20 31       	cpi	r18, 0x10	; 16
    47dc:	81 f1       	breq	.+96     	; 0x483e <__ultoa_invert+0x6c>
    47de:	e8 94       	clt
    47e0:	6f 93       	push	r22
    47e2:	6e 7f       	andi	r22, 0xFE	; 254
    47e4:	6e 5f       	subi	r22, 0xFE	; 254
    47e6:	7f 4f       	sbci	r23, 0xFF	; 255
    47e8:	8f 4f       	sbci	r24, 0xFF	; 255
    47ea:	9f 4f       	sbci	r25, 0xFF	; 255
    47ec:	af 4f       	sbci	r26, 0xFF	; 255
    47ee:	b1 e0       	ldi	r27, 0x01	; 1
    47f0:	3e d0       	rcall	.+124    	; 0x486e <__ultoa_invert+0x9c>
    47f2:	b4 e0       	ldi	r27, 0x04	; 4
    47f4:	3c d0       	rcall	.+120    	; 0x486e <__ultoa_invert+0x9c>
    47f6:	67 0f       	add	r22, r23
    47f8:	78 1f       	adc	r23, r24
    47fa:	89 1f       	adc	r24, r25
    47fc:	9a 1f       	adc	r25, r26
    47fe:	a1 1d       	adc	r26, r1
    4800:	68 0f       	add	r22, r24
    4802:	79 1f       	adc	r23, r25
    4804:	8a 1f       	adc	r24, r26
    4806:	91 1d       	adc	r25, r1
    4808:	a1 1d       	adc	r26, r1
    480a:	6a 0f       	add	r22, r26
    480c:	71 1d       	adc	r23, r1
    480e:	81 1d       	adc	r24, r1
    4810:	91 1d       	adc	r25, r1
    4812:	a1 1d       	adc	r26, r1
    4814:	20 d0       	rcall	.+64     	; 0x4856 <__ultoa_invert+0x84>
    4816:	09 f4       	brne	.+2      	; 0x481a <__ultoa_invert+0x48>
    4818:	68 94       	set
    481a:	3f 91       	pop	r19
    481c:	2a e0       	ldi	r18, 0x0A	; 10
    481e:	26 9f       	mul	r18, r22
    4820:	11 24       	eor	r1, r1
    4822:	30 19       	sub	r19, r0
    4824:	30 5d       	subi	r19, 0xD0	; 208
    4826:	31 93       	st	Z+, r19
    4828:	de f6       	brtc	.-74     	; 0x47e0 <__ultoa_invert+0xe>
    482a:	cf 01       	movw	r24, r30
    482c:	08 95       	ret
    482e:	46 2f       	mov	r20, r22
    4830:	47 70       	andi	r20, 0x07	; 7
    4832:	40 5d       	subi	r20, 0xD0	; 208
    4834:	41 93       	st	Z+, r20
    4836:	b3 e0       	ldi	r27, 0x03	; 3
    4838:	0f d0       	rcall	.+30     	; 0x4858 <__ultoa_invert+0x86>
    483a:	c9 f7       	brne	.-14     	; 0x482e <__ultoa_invert+0x5c>
    483c:	f6 cf       	rjmp	.-20     	; 0x482a <__ultoa_invert+0x58>
    483e:	46 2f       	mov	r20, r22
    4840:	4f 70       	andi	r20, 0x0F	; 15
    4842:	40 5d       	subi	r20, 0xD0	; 208
    4844:	4a 33       	cpi	r20, 0x3A	; 58
    4846:	18 f0       	brcs	.+6      	; 0x484e <__ultoa_invert+0x7c>
    4848:	49 5d       	subi	r20, 0xD9	; 217
    484a:	31 fd       	sbrc	r19, 1
    484c:	40 52       	subi	r20, 0x20	; 32
    484e:	41 93       	st	Z+, r20
    4850:	02 d0       	rcall	.+4      	; 0x4856 <__ultoa_invert+0x84>
    4852:	a9 f7       	brne	.-22     	; 0x483e <__ultoa_invert+0x6c>
    4854:	ea cf       	rjmp	.-44     	; 0x482a <__ultoa_invert+0x58>
    4856:	b4 e0       	ldi	r27, 0x04	; 4
    4858:	a6 95       	lsr	r26
    485a:	97 95       	ror	r25
    485c:	87 95       	ror	r24
    485e:	77 95       	ror	r23
    4860:	67 95       	ror	r22
    4862:	ba 95       	dec	r27
    4864:	c9 f7       	brne	.-14     	; 0x4858 <__ultoa_invert+0x86>
    4866:	00 97       	sbiw	r24, 0x00	; 0
    4868:	61 05       	cpc	r22, r1
    486a:	71 05       	cpc	r23, r1
    486c:	08 95       	ret
    486e:	9b 01       	movw	r18, r22
    4870:	ac 01       	movw	r20, r24
    4872:	0a 2e       	mov	r0, r26
    4874:	06 94       	lsr	r0
    4876:	57 95       	ror	r21
    4878:	47 95       	ror	r20
    487a:	37 95       	ror	r19
    487c:	27 95       	ror	r18
    487e:	ba 95       	dec	r27
    4880:	c9 f7       	brne	.-14     	; 0x4874 <__ultoa_invert+0xa2>
    4882:	62 0f       	add	r22, r18
    4884:	73 1f       	adc	r23, r19
    4886:	84 1f       	adc	r24, r20
    4888:	95 1f       	adc	r25, r21
    488a:	a0 1d       	adc	r26, r0
    488c:	08 95       	ret

0000488e <_exit>:
    488e:	f8 94       	cli

00004890 <__stop_program>:
    4890:	ff cf       	rjmp	.-2      	; 0x4890 <__stop_program>
