
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800200  000037ea  0000387e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000262  00800358  00800358  000039d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009b8  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015f6f  00000000  00000000  0000442c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036a8  00000000  00000000  0001a39b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004fe2  00000000  00000000  0001da43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f08  00000000  00000000  00022a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d12  00000000  00000000  00024930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a42f  00000000  00000000  00028642  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000968  00000000  00000000  00032a71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c4       	rjmp	.+2064   	; 0x836 <__vector_9>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__vector_25>
      68:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__vector_36>
      94:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__vector_9+0x12a>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	ce 11       	cpse	r28, r14
     168:	d1 11       	cpse	r29, r1
     16a:	c0 11       	cpse	r28, r0
     16c:	c4 11       	cpse	r28, r4
     16e:	ca 11       	cpse	r28, r10
     170:	08 12       	cpse	r0, r24
     172:	d5 11       	cpse	r29, r5
     174:	d9 11       	cpse	r29, r9
     176:	df 11       	cpse	r29, r15
     178:	e3 11       	cpse	r30, r3
     17a:	e7 11       	cpse	r30, r7
     17c:	ed 11       	cpse	r30, r13
     17e:	f1 11       	cpse	r31, r1
     180:	f5 11       	cpse	r31, r5
     182:	08 12       	cpse	r0, r24
     184:	fb 11       	cpse	r31, r11
     186:	ff 11       	cpse	r31, r15
     188:	03 12       	cpse	r0, r19

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
     290:	04 03       	mulsu	r16, r20
     292:	b5 0e       	add	r11, r21
     294:	4a 0f       	add	r20, r26
     296:	f7 14       	cp	r15, r7

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	ea ee       	ldi	r30, 0xEA	; 234
     2b0:	f7 e3       	ldi	r31, 0x37	; 55
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a8 35       	cpi	r26, 0x58	; 88
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	25 e0       	ldi	r18, 0x05	; 5
     2c4:	a8 e5       	ldi	r26, 0x58	; 88
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	aa 3b       	cpi	r26, 0xBA	; 186
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__tablejump2__>
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <main>
     2f6:	0c 94 f3 1b 	jmp	0x37e6	; 0x37e6 <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	serialWriting = NO;
	RS485_RX_ON
}
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	8a 01       	movw	r16, r20
     33a:	d2 2e       	mov	r13, r18
     33c:	ad b6       	in	r10, 0x3d	; 61
     33e:	be b6       	in	r11, 0x3e	; 62
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	82 1b       	sub	r24, r18
     346:	91 09       	sbc	r25, r1
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	9e bf       	out	0x3e, r25	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	62 2f       	mov	r22, r18
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatunsisf>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	0e 94 10 0b 	call	0x1620	; 0x1620 <pow>
     372:	2b 01       	movw	r4, r22
     374:	3c 01       	movw	r6, r24
     376:	b8 01       	movw	r22, r16
     378:	01 2e       	mov	r0, r17
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatsisf>
     384:	a3 01       	movw	r20, r6
     386:	92 01       	movw	r18, r4
     388:	0e 94 c6 09 	call	0x138c	; 0x138c <__cmpsf2>
     38c:	87 fd       	sbrc	r24, 7
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <_Z8printLCDhhih+0x98>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e8       	ldi	r20, 0x80	; 128
     396:	5f e3       	ldi	r21, 0x3F	; 63
     398:	c3 01       	movw	r24, r6
     39a:	b2 01       	movw	r22, r4
     39c:	92 d7       	rcall	.+3876   	; 0x12c2 <__subsf3>
     39e:	fa d7       	rcall	.+4084   	; 0x1394 <__fixsfsi>
     3a0:	8b 01       	movw	r16, r22
     3a2:	1f 92       	push	r1
     3a4:	df 92       	push	r13
     3a6:	80 e1       	ldi	r24, 0x10	; 16
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	9f 93       	push	r25
     3ac:	8f 93       	push	r24
     3ae:	ce 01       	movw	r24, r28
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	6c 01       	movw	r12, r24
     3b4:	9f 93       	push	r25
     3b6:	8f 93       	push	r24
     3b8:	0e 94 18 19 	call	0x3230	; 0x3230 <sprintf>
     3bc:	1f 93       	push	r17
     3be:	0f 93       	push	r16
     3c0:	df 92       	push	r13
     3c2:	cf 92       	push	r12
     3c4:	ff 92       	push	r15
     3c6:	ef 92       	push	r14
     3c8:	0e 94 18 19 	call	0x3230	; 0x3230 <sprintf>
     3cc:	48 2d       	mov	r20, r8
     3ce:	69 2d       	mov	r22, r9
     3d0:	8a e5       	ldi	r24, 0x5A	; 90
     3d2:	93 e0       	ldi	r25, 0x03	; 3
     3d4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3d8:	b7 01       	movw	r22, r14
     3da:	8a e5       	ldi	r24, 0x5A	; 90
     3dc:	93 e0       	ldi	r25, 0x03	; 3
     3de:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN5Print5printEPKc>
     3e2:	8d b7       	in	r24, 0x3d	; 61
     3e4:	9e b7       	in	r25, 0x3e	; 62
     3e6:	0c 96       	adiw	r24, 0x0c	; 12
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	9e bf       	out	0x3e, r25	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	8d bf       	out	0x3d, r24	; 61
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	be be       	out	0x3e, r11	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	ad be       	out	0x3d, r10	; 61
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	7f 90       	pop	r7
     420:	6f 90       	pop	r6
     422:	5f 90       	pop	r5
     424:	4f 90       	pop	r4
     426:	08 95       	ret

00000428 <_Z13setupSwitchesv>:
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	84 b9       	out	0x04, r24	; 4
     42c:	84 b1       	in	r24, 0x04	; 4
     42e:	88 7f       	andi	r24, 0xF8	; 248
     430:	84 b9       	out	0x04, r24	; 4
     432:	eb e6       	ldi	r30, 0x6B	; 107
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	87 60       	ori	r24, 0x07	; 7
     43a:	80 83       	st	Z, r24
     43c:	e8 e6       	ldi	r30, 0x68	; 104
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	81 60       	ori	r24, 0x01	; 1
     444:	80 83       	st	Z, r24
     446:	78 94       	sei
     448:	08 95       	ret

0000044a <_Z13checkPositionhi>:
     44a:	83 30       	cpi	r24, 0x03	; 3
     44c:	30 f4       	brcc	.+12     	; 0x45a <_Z13checkPositionhi+0x10>
     44e:	cb 01       	movw	r24, r22
     450:	77 ff       	sbrs	r23, 7
     452:	1b c0       	rjmp	.+54     	; 0x48a <_Z13checkPositionhi+0x40>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	18 c0       	rjmp	.+48     	; 0x48a <_Z13checkPositionhi+0x40>
     45a:	83 30       	cpi	r24, 0x03	; 3
     45c:	69 f4       	brne	.+26     	; 0x478 <_Z13checkPositionhi+0x2e>
     45e:	cb 01       	movw	r24, r22
     460:	61 15       	cp	r22, r1
     462:	78 4f       	sbci	r23, 0xF8	; 248
     464:	14 f4       	brge	.+4      	; 0x46a <_Z13checkPositionhi+0x20>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	98 ef       	ldi	r25, 0xF8	; 248
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	28 e0       	ldi	r18, 0x08	; 8
     46e:	92 07       	cpc	r25, r18
     470:	ac f0       	brlt	.+42     	; 0x49c <_Z13checkPositionhi+0x52>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	98 e0       	ldi	r25, 0x08	; 8
     476:	08 95       	ret
     478:	84 50       	subi	r24, 0x04	; 4
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	68 f4       	brcc	.+26     	; 0x498 <_Z13checkPositionhi+0x4e>
     47e:	cb 01       	movw	r24, r22
     480:	64 3e       	cpi	r22, 0xE4	; 228
     482:	72 40       	sbci	r23, 0x02	; 2
     484:	14 f4       	brge	.+4      	; 0x48a <_Z13checkPositionhi+0x40>
     486:	84 ee       	ldi	r24, 0xE4	; 228
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	85 3a       	cpi	r24, 0xA5	; 165
     48c:	26 e0       	ldi	r18, 0x06	; 6
     48e:	92 07       	cpc	r25, r18
     490:	2c f0       	brlt	.+10     	; 0x49c <_Z13checkPositionhi+0x52>
     492:	84 ea       	ldi	r24, 0xA4	; 164
     494:	96 e0       	ldi	r25, 0x06	; 6
     496:	08 95       	ret
     498:	8f ef       	ldi	r24, 0xFF	; 255
     49a:	9f ef       	ldi	r25, 0xFF	; 255
     49c:	08 95       	ret

0000049e <_Z11printSerial6Stringi>:
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	eb 01       	movw	r28, r22
     4a4:	bc 01       	movw	r22, r24
     4a6:	8f ea       	ldi	r24, 0xAF	; 175
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_ZN5Print5printERK6String>
     4ae:	65 e3       	ldi	r22, 0x35	; 53
     4b0:	72 e0       	ldi	r23, 0x02	; 2
     4b2:	8f ea       	ldi	r24, 0xAF	; 175
     4b4:	93 e0       	ldi	r25, 0x03	; 3
     4b6:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN5Print5printEPKc>
     4ba:	4a e0       	ldi	r20, 0x0A	; 10
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	be 01       	movw	r22, r28
     4c0:	8f ea       	ldi	r24, 0xAF	; 175
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	0c 94 8f 10 	jmp	0x211e	; 0x211e <_ZN5Print7printlnEii>

000004cc <_Z12error_decodeh>:
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	e6 97       	sbiw	r28, 0x36	; 54
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	08 2f       	mov	r16, r24
     4ee:	6c e2       	ldi	r22, 0x2C	; 44
     4f0:	73 e0       	ldi	r23, 0x03	; 3
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	7c 01       	movw	r14, r24
     4f8:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     4fc:	6c e2       	ldi	r22, 0x2C	; 44
     4fe:	73 e0       	ldi	r23, 0x03	; 3
     500:	ce 01       	movw	r24, r28
     502:	07 96       	adiw	r24, 0x07	; 7
     504:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     508:	10 2f       	mov	r17, r16
     50a:	11 70       	andi	r17, 0x01	; 1
     50c:	00 fd       	sbrc	r16, 0
     50e:	03 c0       	rjmp	.+6      	; 0x516 <_Z12error_decodeh+0x4a>
     510:	6c e2       	ldi	r22, 0x2C	; 44
     512:	73 e0       	ldi	r23, 0x03	; 3
     514:	02 c0       	rjmp	.+4      	; 0x51a <_Z12error_decodeh+0x4e>
     516:	66 e1       	ldi	r22, 0x16	; 22
     518:	72 e0       	ldi	r23, 0x02	; 2
     51a:	ce 01       	movw	r24, r28
     51c:	0d 96       	adiw	r24, 0x0d	; 13
     51e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     522:	11 11       	cpse	r17, r1
     524:	03 c0       	rjmp	.+6      	; 0x52c <_Z12error_decodeh+0x60>
     526:	6c e2       	ldi	r22, 0x2C	; 44
     528:	73 e0       	ldi	r23, 0x03	; 3
     52a:	02 c0       	rjmp	.+4      	; 0x530 <_Z12error_decodeh+0x64>
     52c:	6a e1       	ldi	r22, 0x1A	; 26
     52e:	72 e0       	ldi	r23, 0x02	; 2
     530:	ce 01       	movw	r24, r28
     532:	43 96       	adiw	r24, 0x13	; 19
     534:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     538:	11 11       	cpse	r17, r1
     53a:	03 c0       	rjmp	.+6      	; 0x542 <_Z12error_decodeh+0x76>
     53c:	6c e2       	ldi	r22, 0x2C	; 44
     53e:	73 e0       	ldi	r23, 0x03	; 3
     540:	02 c0       	rjmp	.+4      	; 0x546 <_Z12error_decodeh+0x7a>
     542:	6e e1       	ldi	r22, 0x1E	; 30
     544:	72 e0       	ldi	r23, 0x02	; 2
     546:	ce 01       	movw	r24, r28
     548:	49 96       	adiw	r24, 0x19	; 25
     54a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     54e:	11 11       	cpse	r17, r1
     550:	03 c0       	rjmp	.+6      	; 0x558 <_Z12error_decodeh+0x8c>
     552:	6c e2       	ldi	r22, 0x2C	; 44
     554:	73 e0       	ldi	r23, 0x03	; 3
     556:	02 c0       	rjmp	.+4      	; 0x55c <_Z12error_decodeh+0x90>
     558:	62 e2       	ldi	r22, 0x22	; 34
     55a:	72 e0       	ldi	r23, 0x02	; 2
     55c:	ce 01       	movw	r24, r28
     55e:	4f 96       	adiw	r24, 0x1f	; 31
     560:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     564:	11 11       	cpse	r17, r1
     566:	03 c0       	rjmp	.+6      	; 0x56e <_Z12error_decodeh+0xa2>
     568:	6c e2       	ldi	r22, 0x2C	; 44
     56a:	73 e0       	ldi	r23, 0x03	; 3
     56c:	02 c0       	rjmp	.+4      	; 0x572 <_Z12error_decodeh+0xa6>
     56e:	66 e2       	ldi	r22, 0x26	; 38
     570:	72 e0       	ldi	r23, 0x02	; 2
     572:	ce 01       	movw	r24, r28
     574:	85 96       	adiw	r24, 0x25	; 37
     576:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     57a:	6c e2       	ldi	r22, 0x2C	; 44
     57c:	73 e0       	ldi	r23, 0x03	; 3
     57e:	ce 01       	movw	r24, r28
     580:	8b 96       	adiw	r24, 0x2b	; 43
     582:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     586:	67 01       	movw	r12, r14
     588:	00 e0       	ldi	r16, 0x00	; 0
     58a:	10 e0       	ldi	r17, 0x00	; 0
     58c:	b6 01       	movw	r22, r12
     58e:	ce 01       	movw	r24, r28
     590:	c1 96       	adiw	r24, 0x31	; 49
     592:	0e 94 03 13 	call	0x2606	; 0x2606 <_ZN6StringC1ERKS_>
     596:	b8 01       	movw	r22, r16
     598:	ce 01       	movw	r24, r28
     59a:	c1 96       	adiw	r24, 0x31	; 49
     59c:	80 df       	rcall	.-256    	; 0x49e <_Z11printSerial6Stringi>
     59e:	ce 01       	movw	r24, r28
     5a0:	c1 96       	adiw	r24, 0x31	; 49
     5a2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
     5a6:	0f 5f       	subi	r16, 0xFF	; 255
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	96 e0       	ldi	r25, 0x06	; 6
     5ac:	c9 0e       	add	r12, r25
     5ae:	d1 1c       	adc	r13, r1
     5b0:	08 30       	cpi	r16, 0x08	; 8
     5b2:	11 05       	cpc	r17, r1
     5b4:	59 f7       	brne	.-42     	; 0x58c <_Z12error_decodeh+0xc0>
     5b6:	8e 01       	movw	r16, r28
     5b8:	0f 5c       	subi	r16, 0xCF	; 207
     5ba:	1f 4f       	sbci	r17, 0xFF	; 255
     5bc:	06 50       	subi	r16, 0x06	; 6
     5be:	11 09       	sbc	r17, r1
     5c0:	c8 01       	movw	r24, r16
     5c2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
     5c6:	e0 16       	cp	r14, r16
     5c8:	f1 06       	cpc	r15, r17
     5ca:	c1 f7       	brne	.-16     	; 0x5bc <_Z12error_decodeh+0xf0>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	e6 96       	adiw	r28, 0x36	; 54
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	08 95       	ret

000005ee <_Z8sumBytesPhh>:
     5ee:	38 2f       	mov	r19, r24
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	2e 2f       	mov	r18, r30
     5f8:	23 1b       	sub	r18, r19
     5fa:	26 17       	cp	r18, r22
     5fc:	20 f4       	brcc	.+8      	; 0x606 <_Z8sumBytesPhh+0x18>
     5fe:	21 91       	ld	r18, Z+
     600:	82 0f       	add	r24, r18
     602:	91 1d       	adc	r25, r1
     604:	f8 cf       	rjmp	.-16     	; 0x5f6 <_Z8sumBytesPhh+0x8>
     606:	08 95       	ret

00000608 <_GLOBAL__sub_I_position_old>:
     608:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     60c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     610:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <currPos+0x1>
     614:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <currPos>
     618:	24 e0       	ldi	r18, 0x04	; 4
     61a:	44 e1       	ldi	r20, 0x14	; 20
     61c:	67 e2       	ldi	r22, 0x27	; 39
     61e:	8a e5       	ldi	r24, 0x5A	; 90
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <_ZN17LiquidCrystal_I2CC1Ehhh>

00000626 <_Z10writeServohhPhh>:
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	18 2f       	mov	r17, r24
     634:	d6 2f       	mov	r29, r22
     636:	7a 01       	movw	r14, r20
     638:	02 2f       	mov	r16, r18
     63a:	c6 e0       	ldi	r28, 0x06	; 6
     63c:	c6 0f       	add	r28, r22
     63e:	c2 0f       	add	r28, r18
     640:	62 2f       	mov	r22, r18
     642:	ca 01       	movw	r24, r20
     644:	d4 df       	rcall	.-88     	; 0x5ee <_Z8sumBytesPhh>
     646:	c1 0f       	add	r28, r17
     648:	8c 0f       	add	r24, r28
     64a:	c8 2f       	mov	r28, r24
     64c:	c0 95       	com	r28
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	82 e0       	ldi	r24, 0x02	; 2
     652:	0e 94 45 12 	call	0x248a	; 0x248a <digitalWrite>
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	0e 94 45 12 	call	0x248a	; 0x248a <digitalWrite>
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>
     66a:	6f ef       	ldi	r22, 0xFF	; 255
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	8c e4       	ldi	r24, 0x4C	; 76
     670:	94 e0       	ldi	r25, 0x04	; 4
     672:	44 de       	rcall	.-888    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     674:	6f ef       	ldi	r22, 0xFF	; 255
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	8c e4       	ldi	r24, 0x4C	; 76
     67a:	94 e0       	ldi	r25, 0x04	; 4
     67c:	3f de       	rcall	.-898    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     67e:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <serialWriting>
     682:	88 23       	and	r24, r24
     684:	39 f0       	breq	.+14     	; 0x694 <_Z10writeServohhPhh+0x6e>
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>
     692:	f5 cf       	rjmp	.-22     	; 0x67e <_Z10writeServohhPhh+0x58>
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <serialWriting>
     69a:	61 2f       	mov	r22, r17
     69c:	8c e4       	ldi	r24, 0x4C	; 76
     69e:	94 e0       	ldi	r25, 0x04	; 4
     6a0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN14HardwareSerial5writeEh>
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	b8 01       	movw	r22, r16
     6a8:	6d 5f       	subi	r22, 0xFD	; 253
     6aa:	7f 4f       	sbci	r23, 0xFF	; 255
     6ac:	8c e4       	ldi	r24, 0x4C	; 76
     6ae:	94 e0       	ldi	r25, 0x04	; 4
     6b0:	25 de       	rcall	.-950    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     6b2:	63 e0       	ldi	r22, 0x03	; 3
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	8c e4       	ldi	r24, 0x4C	; 76
     6b8:	94 e0       	ldi	r25, 0x04	; 4
     6ba:	20 de       	rcall	.-960    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     6bc:	6d 2f       	mov	r22, r29
     6be:	8c e4       	ldi	r24, 0x4C	; 76
     6c0:	94 e0       	ldi	r25, 0x04	; 4
     6c2:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN14HardwareSerial5writeEh>
     6c6:	a8 01       	movw	r20, r16
     6c8:	b7 01       	movw	r22, r14
     6ca:	8c e4       	ldi	r24, 0x4C	; 76
     6cc:	94 e0       	ldi	r25, 0x04	; 4
     6ce:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5writeEPKhj>
     6d2:	6c 2f       	mov	r22, r28
     6d4:	8c e4       	ldi	r24, 0x4C	; 76
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN14HardwareSerial5writeEh>
     6dc:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <serialWriting>
     6e0:	8c e4       	ldi	r24, 0x4C	; 76
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN14HardwareSerial5flushEv>
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	0e 94 45 12 	call	0x248a	; 0x248a <digitalWrite>
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	0e 94 45 12 	call	0x248a	; 0x248a <digitalWrite>
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	0c 94 0e 11 	jmp	0x221c	; 0x221c <delay>

00000710 <_Z9moveSpeedhii>:
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	00 d0       	rcall	.+0      	; 0x720 <_Z9moveSpeedhii+0x10>
     720:	1f 92       	push	r1
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	18 2f       	mov	r17, r24
     728:	d4 2e       	mov	r13, r20
     72a:	e5 2e       	mov	r14, r21
     72c:	8e de       	rcall	.-740    	; 0x44a <_Z13checkPositionhi>
     72e:	f8 2e       	mov	r15, r24
     730:	09 2f       	mov	r16, r25
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	db 82       	std	Y+3, r13	; 0x03
     738:	ec 82       	std	Y+4, r14	; 0x04
     73a:	24 e0       	ldi	r18, 0x04	; 4
     73c:	ae 01       	movw	r20, r28
     73e:	4f 5f       	subi	r20, 0xFF	; 255
     740:	5f 4f       	sbci	r21, 0xFF	; 255
     742:	6e e1       	ldi	r22, 0x1E	; 30
     744:	81 2f       	mov	r24, r17
     746:	6f df       	rcall	.-290    	; 0x626 <_Z10writeServohhPhh>
     748:	f0 92 ac 03 	sts	0x03AC, r15	; 0x8003ac <currPos>
     74c:	00 93 ad 03 	sts	0x03AD, r16	; 0x8003ad <currPos+0x1>
     750:	8a e0       	ldi	r24, 0x0A	; 10
     752:	18 9f       	mul	r17, r24
     754:	f0 01       	movw	r30, r0
     756:	11 24       	eor	r1, r1
     758:	e5 59       	subi	r30, 0x95	; 149
     75a:	fc 4f       	sbci	r31, 0xFC	; 252
     75c:	f3 82       	std	Z+3, r15	; 0x03
     75e:	04 83       	std	Z+4, r16	; 0x04
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	08 95       	ret

00000778 <_Z14setTorqueLimithi>:
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	1f 92       	push	r1
     77e:	1f 92       	push	r1
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	69 83       	std	Y+1, r22	; 0x01
     786:	7a 83       	std	Y+2, r23	; 0x02
     788:	22 e0       	ldi	r18, 0x02	; 2
     78a:	ae 01       	movw	r20, r28
     78c:	4f 5f       	subi	r20, 0xFF	; 255
     78e:	5f 4f       	sbci	r21, 0xFF	; 255
     790:	62 e2       	ldi	r22, 0x22	; 34
     792:	49 df       	rcall	.-366    	; 0x626 <_Z10writeServohhPhh>
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <_Z7setModehh>:
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <_Z7setModehh+0xa>
     7a8:	1f 92       	push	r1
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	18 2f       	mov	r17, r24
     7b0:	06 2f       	mov	r16, r22
     7b2:	61 30       	cpi	r22, 0x01	; 1
     7b4:	29 f4       	brne	.+10     	; 0x7c0 <_Z7setModehh+0x22>
     7b6:	19 82       	std	Y+1, r1	; 0x01
     7b8:	1a 82       	std	Y+2, r1	; 0x02
     7ba:	1b 82       	std	Y+3, r1	; 0x03
     7bc:	1c 82       	std	Y+4, r1	; 0x04
     7be:	08 c0       	rjmp	.+16     	; 0x7d0 <_Z7setModehh+0x32>
     7c0:	62 30       	cpi	r22, 0x02	; 2
     7c2:	81 f4       	brne	.+32     	; 0x7e4 <_Z7setModehh+0x46>
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	99 83       	std	Y+1, r25	; 0x01
     7c8:	8f e0       	ldi	r24, 0x0F	; 15
     7ca:	8a 83       	std	Y+2, r24	; 0x02
     7cc:	9b 83       	std	Y+3, r25	; 0x03
     7ce:	8c 83       	std	Y+4, r24	; 0x04
     7d0:	24 e0       	ldi	r18, 0x04	; 4
     7d2:	ae 01       	movw	r20, r28
     7d4:	4f 5f       	subi	r20, 0xFF	; 255
     7d6:	5f 4f       	sbci	r21, 0xFF	; 255
     7d8:	66 e0       	ldi	r22, 0x06	; 6
     7da:	81 2f       	mov	r24, r17
     7dc:	24 df       	rcall	.-440    	; 0x626 <_Z10writeServohhPhh>
     7de:	16 30       	cpi	r17, 0x06	; 6
     7e0:	a0 f0       	brcs	.+40     	; 0x80a <_Z7setModehh+0x6c>
     7e2:	1a c0       	rjmp	.+52     	; 0x818 <_Z7setModehh+0x7a>
     7e4:	84 ee       	ldi	r24, 0xE4	; 228
     7e6:	89 83       	std	Y+1, r24	; 0x01
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	8a 83       	std	Y+2, r24	; 0x02
     7ec:	84 ea       	ldi	r24, 0xA4	; 164
     7ee:	8b 83       	std	Y+3, r24	; 0x03
     7f0:	86 e0       	ldi	r24, 0x06	; 6
     7f2:	8c 83       	std	Y+4, r24	; 0x04
     7f4:	24 e0       	ldi	r18, 0x04	; 4
     7f6:	ae 01       	movw	r20, r28
     7f8:	4f 5f       	subi	r20, 0xFF	; 255
     7fa:	5f 4f       	sbci	r21, 0xFF	; 255
     7fc:	66 e0       	ldi	r22, 0x06	; 6
     7fe:	81 2f       	mov	r24, r17
     800:	12 df       	rcall	.-476    	; 0x626 <_Z10writeServohhPhh>
     802:	16 30       	cpi	r17, 0x06	; 6
     804:	48 f4       	brcc	.+18     	; 0x818 <_Z7setModehh+0x7a>
     806:	03 30       	cpi	r16, 0x03	; 3
     808:	38 f4       	brcc	.+14     	; 0x818 <_Z7setModehh+0x7a>
     80a:	8a e0       	ldi	r24, 0x0A	; 10
     80c:	18 9f       	mul	r17, r24
     80e:	f0 01       	movw	r30, r0
     810:	11 24       	eor	r1, r1
     812:	e5 59       	subi	r30, 0x95	; 149
     814:	fc 4f       	sbci	r31, 0xFC	; 252
     816:	02 83       	std	Z+2, r16	; 0x02
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <_Z12setModeWheelh>:
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	b8 cf       	rjmp	.-144    	; 0x79e <_Z7setModehh>

0000082e <_Z12setModeJointh>:
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	b6 cf       	rjmp	.-148    	; 0x79e <_Z7setModehh>

00000832 <_Z16setModeMultiTurnh>:
     832:	62 e0       	ldi	r22, 0x02	; 2
     834:	b4 cf       	rjmp	.-152    	; 0x79e <_Z7setModehh>

00000836 <__vector_9>:
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	2f 93       	push	r18
     84e:	3f 93       	push	r19
     850:	4f 93       	push	r20
     852:	5f 93       	push	r21
     854:	6f 93       	push	r22
     856:	7f 93       	push	r23
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	af 93       	push	r26
     85e:	bf 93       	push	r27
     860:	cf 93       	push	r28
     862:	ef 93       	push	r30
     864:	ff 93       	push	r31
     866:	c0 91 6b 03 	lds	r28, 0x036B	; 0x80036b <arm>
     86a:	18 9b       	sbis	0x03, 0	; 3
     86c:	38 c0       	rjmp	.+112    	; 0x8de <__vector_9+0xa8>
     86e:	2f 9a       	sbi	0x05, 7	; 5
     870:	8a e0       	ldi	r24, 0x0A	; 10
     872:	c8 9f       	mul	r28, r24
     874:	80 01       	movw	r16, r0
     876:	11 24       	eor	r1, r1
     878:	05 59       	subi	r16, 0x95	; 149
     87a:	1c 4f       	sbci	r17, 0xFC	; 252
     87c:	78 01       	movw	r14, r16
     87e:	e3 e0       	ldi	r30, 0x03	; 3
     880:	ee 0e       	add	r14, r30
     882:	f1 1c       	adc	r15, r1
     884:	09 5f       	subi	r16, 0xF9	; 249
     886:	1f 4f       	sbci	r17, 0xFF	; 255
     888:	18 9b       	sbis	0x03, 0	; 3
     88a:	20 c0       	rjmp	.+64     	; 0x8cc <__vector_9+0x96>
     88c:	f7 01       	movw	r30, r14
     88e:	60 81       	ld	r22, Z
     890:	71 81       	ldd	r23, Z+1	; 0x01
     892:	61 50       	subi	r22, 0x01	; 1
     894:	71 09       	sbc	r23, r1
     896:	71 83       	std	Z+1, r23	; 0x01
     898:	60 83       	st	Z, r22
     89a:	c3 30       	cpi	r28, 0x03	; 3
     89c:	40 f4       	brcc	.+16     	; 0x8ae <__vector_9+0x78>
     89e:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <lastButtonPressed>
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	21 f4       	brne	.+8      	; 0x8ae <__vector_9+0x78>
     8a6:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <buttonsFlip+0x1>
     8aa:	81 11       	cpse	r24, r1
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__vector_9+0x80>
     8ae:	f8 01       	movw	r30, r16
     8b0:	40 81       	ld	r20, Z
     8b2:	51 81       	ldd	r21, Z+1	; 0x01
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__vector_9+0x84>
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	8c 2f       	mov	r24, r28
     8bc:	29 df       	rcall	.-430    	; 0x710 <_Z9moveSpeedhii>
     8be:	68 ec       	ldi	r22, 0xC8	; 200
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>
     8ca:	de cf       	rjmp	.-68     	; 0x888 <__vector_9+0x52>
     8cc:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <buttonsFlip+0x1>
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	89 27       	eor	r24, r25
     8d4:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <buttonsFlip+0x1>
     8d8:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <lastButtonPressed>
     8dc:	2f 98       	cbi	0x05, 7	; 5
     8de:	19 9b       	sbis	0x03, 1	; 3
     8e0:	3e c0       	rjmp	.+124    	; 0x95e <__vector_9+0x128>
     8e2:	2f 9a       	sbi	0x05, 7	; 5
     8e4:	fa e0       	ldi	r31, 0x0A	; 10
     8e6:	cf 9f       	mul	r28, r31
     8e8:	80 01       	movw	r16, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	05 59       	subi	r16, 0x95	; 149
     8ee:	1c 4f       	sbci	r17, 0xFC	; 252
     8f0:	78 01       	movw	r14, r16
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	e8 0e       	add	r14, r24
     8f6:	f1 1c       	adc	r15, r1
     8f8:	09 5f       	subi	r16, 0xF9	; 249
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	19 9b       	sbis	0x03, 1	; 3
     8fe:	25 c0       	rjmp	.+74     	; 0x94a <__vector_9+0x114>
     900:	f7 01       	movw	r30, r14
     902:	60 81       	ld	r22, Z
     904:	71 81       	ldd	r23, Z+1	; 0x01
     906:	6f 5f       	subi	r22, 0xFF	; 255
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	71 83       	std	Z+1, r23	; 0x01
     90c:	60 83       	st	Z, r22
     90e:	c3 30       	cpi	r28, 0x03	; 3
     910:	68 f4       	brcc	.+26     	; 0x92c <__vector_9+0xf6>
     912:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <lastButtonPressed>
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	21 f4       	brne	.+8      	; 0x922 <__vector_9+0xec>
     91a:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <buttonsFlip+0x2>
     91e:	81 11       	cpse	r24, r1
     920:	09 c0       	rjmp	.+18     	; 0x934 <__vector_9+0xfe>
     922:	f8 01       	movw	r30, r16
     924:	40 81       	ld	r20, Z
     926:	51 81       	ldd	r21, Z+1	; 0x01
     928:	5c 5f       	subi	r21, 0xFC	; 252
     92a:	06 c0       	rjmp	.+12     	; 0x938 <__vector_9+0x102>
     92c:	f8 01       	movw	r30, r16
     92e:	40 81       	ld	r20, Z
     930:	51 81       	ldd	r21, Z+1	; 0x01
     932:	02 c0       	rjmp	.+4      	; 0x938 <__vector_9+0x102>
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	54 e0       	ldi	r21, 0x04	; 4
     938:	8c 2f       	mov	r24, r28
     93a:	ea de       	rcall	.-556    	; 0x710 <_Z9moveSpeedhii>
     93c:	68 ec       	ldi	r22, 0xC8	; 200
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>
     948:	d9 cf       	rjmp	.-78     	; 0x8fc <__vector_9+0xc6>
     94a:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <buttonsFlip+0x2>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	89 27       	eor	r24, r25
     952:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <buttonsFlip+0x2>
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <lastButtonPressed>
     95c:	2f 98       	cbi	0x05, 7	; 5
     95e:	1a 9b       	sbis	0x03, 2	; 3
     960:	37 c0       	rjmp	.+110    	; 0x9d0 <__vector_9+0x19a>
     962:	1f 9a       	sbi	0x03, 7	; 3
     964:	64 e1       	ldi	r22, 0x14	; 20
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>
     970:	1a 9b       	sbis	0x03, 2	; 3
     972:	05 c0       	rjmp	.+10     	; 0x97e <__vector_9+0x148>
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	f7 cf       	rjmp	.-18     	; 0x96c <__vector_9+0x136>
     97e:	c3 30       	cpi	r28, 0x03	; 3
     980:	68 f4       	brcc	.+26     	; 0x99c <__vector_9+0x166>
     982:	8a e0       	ldi	r24, 0x0A	; 10
     984:	c8 9f       	mul	r28, r24
     986:	f0 01       	movw	r30, r0
     988:	11 24       	eor	r1, r1
     98a:	e5 59       	subi	r30, 0x95	; 149
     98c:	fc 4f       	sbci	r31, 0xFC	; 252
     98e:	63 81       	ldd	r22, Z+3	; 0x03
     990:	74 81       	ldd	r23, Z+4	; 0x04
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	8c 2f       	mov	r24, r28
     998:	bb de       	rcall	.-650    	; 0x710 <_Z9moveSpeedhii>
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__vector_9+0x16a>
     99c:	c5 30       	cpi	r28, 0x05	; 5
     99e:	18 f4       	brcc	.+6      	; 0x9a6 <__vector_9+0x170>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	8c 0f       	add	r24, r28
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <__vector_9+0x172>
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <arm>
     9ac:	84 30       	cpi	r24, 0x04	; 4
     9ae:	10 f0       	brcs	.+4      	; 0x9b4 <__vector_9+0x17e>
     9b0:	3e df       	rcall	.-388    	; 0x82e <_Z12setModeJointh>
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <__vector_9+0x188>
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	11 f4       	brne	.+4      	; 0x9bc <__vector_9+0x186>
     9b8:	3c df       	rcall	.-392    	; 0x832 <_Z16setModeMultiTurnh>
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <__vector_9+0x188>
     9bc:	36 df       	rcall	.-404    	; 0x82a <_Z12setModeWheelh>
     9be:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <lastButtonPressed>
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	89 27       	eor	r24, r25
     9c6:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <lastButtonPressed>
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <lastButtonPressed>
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	cf 91       	pop	r28
     9d6:	bf 91       	pop	r27
     9d8:	af 91       	pop	r26
     9da:	9f 91       	pop	r25
     9dc:	8f 91       	pop	r24
     9de:	7f 91       	pop	r23
     9e0:	6f 91       	pop	r22
     9e2:	5f 91       	pop	r21
     9e4:	4f 91       	pop	r20
     9e6:	3f 91       	pop	r19
     9e8:	2f 91       	pop	r18
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	0f 90       	pop	r0
     9f4:	0b be       	out	0x3b, r0	; 59
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <_Z9readServohhh>:
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	c8 2f       	mov	r28, r24
     a08:	d6 2f       	mov	r29, r22
     a0a:	14 2f       	mov	r17, r20
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	0e 94 45 12 	call	0x248a	; 0x248a <digitalWrite>
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	0e 94 45 12 	call	0x248a	; 0x248a <digitalWrite>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>
     a28:	6f ef       	ldi	r22, 0xFF	; 255
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	8c e4       	ldi	r24, 0x4C	; 76
     a2e:	94 e0       	ldi	r25, 0x04	; 4
     a30:	65 dc       	rcall	.-1846   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     a32:	6f ef       	ldi	r22, 0xFF	; 255
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	8c e4       	ldi	r24, 0x4C	; 76
     a38:	94 e0       	ldi	r25, 0x04	; 4
     a3a:	60 dc       	rcall	.-1856   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <serialWriting>
     a42:	6c 2f       	mov	r22, r28
     a44:	8c e4       	ldi	r24, 0x4C	; 76
     a46:	94 e0       	ldi	r25, 0x04	; 4
     a48:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN14HardwareSerial5writeEh>
     a4c:	64 e0       	ldi	r22, 0x04	; 4
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	8c e4       	ldi	r24, 0x4C	; 76
     a52:	94 e0       	ldi	r25, 0x04	; 4
     a54:	53 dc       	rcall	.-1882   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     a56:	62 e0       	ldi	r22, 0x02	; 2
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	8c e4       	ldi	r24, 0x4C	; 76
     a5c:	94 e0       	ldi	r25, 0x04	; 4
     a5e:	4e dc       	rcall	.-1892   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     a60:	6d 2f       	mov	r22, r29
     a62:	8c e4       	ldi	r24, 0x4C	; 76
     a64:	94 e0       	ldi	r25, 0x04	; 4
     a66:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN14HardwareSerial5writeEh>
     a6a:	61 2f       	mov	r22, r17
     a6c:	8c e4       	ldi	r24, 0x4C	; 76
     a6e:	94 e0       	ldi	r25, 0x04	; 4
     a70:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN14HardwareSerial5writeEh>
     a74:	66 e0       	ldi	r22, 0x06	; 6
     a76:	61 0f       	add	r22, r17
     a78:	6d 0f       	add	r22, r29
     a7a:	6c 0f       	add	r22, r28
     a7c:	60 95       	com	r22
     a7e:	8c e4       	ldi	r24, 0x4C	; 76
     a80:	94 e0       	ldi	r25, 0x04	; 4
     a82:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN14HardwareSerial5writeEh>
     a86:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <serialWriting>
     a8a:	8c e4       	ldi	r24, 0x4C	; 76
     a8c:	94 e0       	ldi	r25, 0x04	; 4
     a8e:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN14HardwareSerial5flushEv>
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	0e 94 45 12 	call	0x248a	; 0x248a <digitalWrite>
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	0e 94 45 12 	call	0x248a	; 0x248a <digitalWrite>
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0c 94 0e 11 	jmp	0x221c	; 0x221c <delay>

00000ab4 <_Z7getDatahhh>:

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
     ab4:	2f 92       	push	r2
     ab6:	3f 92       	push	r3
     ab8:	4f 92       	push	r4
     aba:	5f 92       	push	r5
     abc:	6f 92       	push	r6
     abe:	7f 92       	push	r7
     ac0:	8f 92       	push	r8
     ac2:	9f 92       	push	r9
     ac4:	af 92       	push	r10
     ac6:	bf 92       	push	r11
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	00 d0       	rcall	.+0      	; 0xada <_Z7getDatahhh+0x26>
     ada:	00 d0       	rcall	.+0      	; 0xadc <_Z7getDatahhh+0x28>
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	f4 2e       	mov	r15, r20
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;

	int msgData;
	readServo(id, ctrlData, askedLength);
     ae2:	8e df       	rcall	.-228    	; 0xa00 <_Z9readServohhh>
	delay(10);
     ae4:	6a e0       	ldi	r22, 0x0A	; 10
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>
	serialReading = YES;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
     af6:	8c e4       	ldi	r24, 0x4C	; 76
     af8:	94 e0       	ldi	r25, 0x04	; 4
     afa:	79 d7       	rcall	.+3826   	; 0x19ee <_ZN14HardwareSerial4readEv>
     afc:	18 2f       	mov	r17, r24
	//Serial1.availableForWrite();
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
     afe:	8c e4       	ldi	r24, 0x4C	; 76
     b00:	94 e0       	ldi	r25, 0x04	; 4
     b02:	75 d7       	rcall	.+3818   	; 0x19ee <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
     b04:	1f 3f       	cpi	r17, 0xFF	; 255
     b06:	19 f4       	brne	.+6      	; 0xb0e <_Z7getDatahhh+0x5a>
     b08:	11 e0       	ldi	r17, 0x01	; 1
     b0a:	8f 3f       	cpi	r24, 0xFF	; 255
     b0c:	09 f0       	breq	.+2      	; 0xb10 <_Z7getDatahhh+0x5c>
     b0e:	10 e0       	ldi	r17, 0x00	; 0
	Serial.print("## Start 01: ");
     b10:	6a e2       	ldi	r22, 0x2A	; 42
     b12:	72 e0       	ldi	r23, 0x02	; 2
     b14:	8f ea       	ldi	r24, 0xAF	; 175
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     b1c:	8c e4       	ldi	r24, 0x4C	; 76
     b1e:	94 e0       	ldi	r25, 0x04	; 4
     b20:	4c d7       	rcall	.+3736   	; 0x19ba <_ZN14HardwareSerial9availableEv>
     b22:	4a e0       	ldi	r20, 0x0A	; 10
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	bc 01       	movw	r22, r24
     b28:	8f ea       	ldi	r24, 0xAF	; 175
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN5Print5printEii>
	Serial.println(" ####################");
     b30:	68 e3       	ldi	r22, 0x38	; 56
     b32:	72 e0       	ldi	r23, 0x02	; 2
     b34:	8f ea       	ldi	r24, 0xAF	; 175
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <_ZN5Print7printlnEPKc>
	if (msgStarted) {
     b3c:	11 23       	and	r17, r17
     b3e:	09 f4       	brne	.+2      	; 0xb42 <_Z7getDatahhh+0x8e>
     b40:	a0 c0       	rjmp	.+320    	; 0xc82 <_Z7getDatahhh+0x1ce>
		msgId = Serial1.read();
     b42:	8c e4       	ldi	r24, 0x4C	; 76
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	53 d7       	rcall	.+3750   	; 0x19ee <_ZN14HardwareSerial4readEv>
     b48:	5c 01       	movw	r10, r24
		printSerial("Servo ID   ", msgId);
     b4a:	6e e4       	ldi	r22, 0x4E	; 78
     b4c:	72 e0       	ldi	r23, 0x02	; 2
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     b56:	b5 01       	movw	r22, r10
     b58:	77 27       	eor	r23, r23
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	9f dc       	rcall	.-1730   	; 0x49e <_Z11printSerial6Stringi>
     b60:	ce 01       	movw	r24, r28
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
		msgLength = Serial1.read();
     b68:	8c e4       	ldi	r24, 0x4C	; 76
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	40 d7       	rcall	.+3712   	; 0x19ee <_ZN14HardwareSerial4readEv>
     b6e:	4c 01       	movw	r8, r24
		printSerial("Msg Length ", msgLength);
     b70:	6a e5       	ldi	r22, 0x5A	; 90
     b72:	72 e0       	ldi	r23, 0x02	; 2
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     b7c:	b4 01       	movw	r22, r8
     b7e:	77 27       	eor	r23, r23
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	8c dc       	rcall	.-1768   	; 0x49e <_Z11printSerial6Stringi>
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
		msgError = Serial1.read();
     b8e:	8c e4       	ldi	r24, 0x4C	; 76
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	2d d7       	rcall	.+3674   	; 0x19ee <_ZN14HardwareSerial4readEv>
     b94:	8c 01       	movw	r16, r24
     b96:	38 2e       	mov	r3, r24
		printSerial("Msg Error  ", msgError);
     b98:	66 e6       	ldi	r22, 0x66	; 102
     b9a:	72 e0       	ldi	r23, 0x02	; 2
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     ba4:	b8 01       	movw	r22, r16
     ba6:	77 27       	eor	r23, r23
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	78 dc       	rcall	.-1808   	; 0x49e <_Z11printSerial6Stringi>
     bae:	ce 01       	movw	r24, r28
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
		msgData_1 = Serial1.read();
     bb6:	8c e4       	ldi	r24, 0x4C	; 76
     bb8:	94 e0       	ldi	r25, 0x04	; 4
     bba:	19 d7       	rcall	.+3634   	; 0x19ee <_ZN14HardwareSerial4readEv>
     bbc:	6c 01       	movw	r12, r24
     bbe:	3c 01       	movw	r6, r24
     bc0:	77 24       	eor	r7, r7
		printSerial("Msg Data L ", msgData_1);
     bc2:	62 e7       	ldi	r22, 0x72	; 114
     bc4:	72 e0       	ldi	r23, 0x02	; 2
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     bce:	b3 01       	movw	r22, r6
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	64 dc       	rcall	.-1848   	; 0x49e <_Z11printSerial6Stringi>
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
		if (askedLength>1) {
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	8f 15       	cp	r24, r15
			msgData_2 = Serial1.read();
     be2:	30 f5       	brcc	.+76     	; 0xc30 <_Z7getDatahhh+0x17c>
     be4:	8c e4       	ldi	r24, 0x4C	; 76
     be6:	94 e0       	ldi	r25, 0x04	; 4
     be8:	02 d7       	rcall	.+3588   	; 0x19ee <_ZN14HardwareSerial4readEv>
     bea:	28 2e       	mov	r2, r24
     bec:	7c 01       	movw	r14, r24
     bee:	ff 24       	eor	r15, r15
			msgData = msgData_1 + (msgData_2<<8);
     bf0:	5e 2c       	mov	r5, r14
     bf2:	44 24       	eor	r4, r4
     bf4:	46 0c       	add	r4, r6
			printSerial("Msg Data H ", msgData_2);
     bf6:	57 1c       	adc	r5, r7
     bf8:	6e e7       	ldi	r22, 0x7E	; 126
     bfa:	72 e0       	ldi	r23, 0x02	; 2
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     c04:	b7 01       	movw	r22, r14
     c06:	ce 01       	movw	r24, r28
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	49 dc       	rcall	.-1902   	; 0x49e <_Z11printSerial6Stringi>
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
			printSerial("Msg Data   ", msgData);
     c14:	6a e8       	ldi	r22, 0x8A	; 138
     c16:	72 e0       	ldi	r23, 0x02	; 2
     c18:	ce 01       	movw	r24, r28
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     c20:	b2 01       	movw	r22, r4
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	3b dc       	rcall	.-1930   	; 0x49e <_Z11printSerial6Stringi>
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
		}
		msgChecksum = Serial1.read();
     c30:	8c e4       	ldi	r24, 0x4C	; 76
     c32:	94 e0       	ldi	r25, 0x04	; 4
     c34:	dc d6       	rcall	.+3512   	; 0x19ee <_ZN14HardwareSerial4readEv>
		printSerial("Checksum   ", msgChecksum);
     c36:	7c 01       	movw	r14, r24
     c38:	66 e9       	ldi	r22, 0x96	; 150
     c3a:	72 e0       	ldi	r23, 0x02	; 2
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     c44:	b7 01       	movw	r22, r14
     c46:	77 27       	eor	r23, r23
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	28 dc       	rcall	.-1968   	; 0x49e <_Z11printSerial6Stringi>
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
     c56:	a8 0c       	add	r10, r8
     c58:	0a 0d       	add	r16, r10
     c5a:	0c 0d       	add	r16, r12
     c5c:	20 0e       	add	r2, r16
		printSerial("Checksum~  ", Checksum);
     c5e:	20 94       	com	r2
     c60:	62 ea       	ldi	r22, 0xA2	; 162
     c62:	72 e0       	ldi	r23, 0x02	; 2
     c64:	ce 01       	movw	r24, r28
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     c6c:	62 2d       	mov	r22, r2
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	ce 01       	movw	r24, r28
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	14 dc       	rcall	.-2008   	; 0x49e <_Z11printSerial6Stringi>
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
		msgOK = msgChecksum == Checksum ? YES : NO;
     c7a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
     c7e:	11 e0       	ldi	r17, 0x01	; 1
		printSerial("Checksum   ", msgChecksum);
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		printSerial("Checksum~  ", Checksum);
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
     c80:	2e 10       	cpse	r2, r14
     c82:	10 e0       	ldi	r17, 0x00	; 0
     c84:	8c e4       	ldi	r24, 0x4C	; 76
     c86:	94 e0       	ldi	r25, 0x04	; 4
     c88:	98 d6       	rcall	.+3376   	; 0x19ba <_ZN14HardwareSerial9availableEv>
     c8a:	89 2b       	or	r24, r25
     c8c:	21 f0       	breq	.+8      	; 0xc96 <_Z7getDatahhh+0x1e2>
     c8e:	8c e4       	ldi	r24, 0x4C	; 76
     c90:	94 e0       	ldi	r25, 0x04	; 4
     c92:	ad d6       	rcall	.+3418   	; 0x19ee <_ZN14HardwareSerial4readEv>
     c94:	f7 cf       	rjmp	.-18     	; 0xc84 <_Z7getDatahhh+0x1d0>
	serialReading = NO;
     c96:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
     c9a:	11 23       	and	r17, r17
     c9c:	41 f0       	breq	.+16     	; 0xcae <_Z7getDatahhh+0x1fa>
     c9e:	33 20       	and	r3, r3
     ca0:	49 f0       	breq	.+18     	; 0xcb4 <_Z7getDatahhh+0x200>
     ca2:	83 2d       	mov	r24, r3
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	91 95       	neg	r25
     ca8:	81 95       	neg	r24
     caa:	91 09       	sbc	r25, r1
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <_Z7getDatahhh+0x202>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	9f ef       	ldi	r25, 0xFF	; 255
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <_Z7getDatahhh+0x202>
     cb4:	c2 01       	movw	r24, r4
}
     cb6:	26 96       	adiw	r28, 0x06	; 6
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	bf 90       	pop	r11
     cd4:	af 90       	pop	r10
     cd6:	9f 90       	pop	r9
     cd8:	8f 90       	pop	r8
     cda:	7f 90       	pop	r7
     cdc:	6f 90       	pop	r6
     cde:	5f 90       	pop	r5
     ce0:	4f 90       	pop	r4
     ce2:	3f 90       	pop	r3
     ce4:	2f 90       	pop	r2
     ce6:	08 95       	ret

00000ce8 <_Z11printBufferv>:
 */
void printBuffer() {
	//delay(20);
	//uint8_t start_1, start_2, servo_id, msg_length, er_byte, chck_sum;

	Serial.print("## Start: ");
     ce8:	6e ea       	ldi	r22, 0xAE	; 174
     cea:	72 e0       	ldi	r23, 0x02	; 2
     cec:	8f ea       	ldi	r24, 0xAF	; 175
     cee:	93 e0       	ldi	r25, 0x03	; 3
     cf0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     cf4:	8c e4       	ldi	r24, 0x4C	; 76
     cf6:	94 e0       	ldi	r25, 0x04	; 4
     cf8:	60 d6       	rcall	.+3264   	; 0x19ba <_ZN14HardwareSerial9availableEv>
     cfa:	4a e0       	ldi	r20, 0x0A	; 10
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	bc 01       	movw	r22, r24
     d00:	8f ea       	ldi	r24, 0xAF	; 175
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN5Print5printEii>
	Serial.println(" ####################");
     d08:	68 e3       	ldi	r22, 0x38	; 56
     d0a:	72 e0       	ldi	r23, 0x02	; 2
     d0c:	8f ea       	ldi	r24, 0xAF	; 175
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <_ZN5Print7printlnEPKc>
	serialReading = YES;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
	while(Serial1.available()){
     d1a:	8c e4       	ldi	r24, 0x4C	; 76
     d1c:	94 e0       	ldi	r25, 0x04	; 4
     d1e:	4d d6       	rcall	.+3226   	; 0x19ba <_ZN14HardwareSerial9availableEv>
     d20:	89 2b       	or	r24, r25
     d22:	09 f1       	breq	.+66     	; 0xd66 <_Z11printBufferv+0x7e>

		Serial.print(Serial1.available());
     d24:	8c e4       	ldi	r24, 0x4C	; 76
     d26:	94 e0       	ldi	r25, 0x04	; 4
     d28:	48 d6       	rcall	.+3216   	; 0x19ba <_ZN14HardwareSerial9availableEv>
     d2a:	4a e0       	ldi	r20, 0x0A	; 10
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	bc 01       	movw	r22, r24
     d30:	8f ea       	ldi	r24, 0xAF	; 175
     d32:	93 e0       	ldi	r25, 0x03	; 3
     d34:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN5Print5printEii>
		Serial.print(", ");
     d38:	69 eb       	ldi	r22, 0xB9	; 185
     d3a:	72 e0       	ldi	r23, 0x02	; 2
     d3c:	8f ea       	ldi	r24, 0xAF	; 175
     d3e:	93 e0       	ldi	r25, 0x03	; 3
     d40:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN5Print5printEPKc>
		Serial.println(Serial1.read());
     d44:	8c e4       	ldi	r24, 0x4C	; 76
     d46:	94 e0       	ldi	r25, 0x04	; 4
     d48:	52 d6       	rcall	.+3236   	; 0x19ee <_ZN14HardwareSerial4readEv>
     d4a:	4a e0       	ldi	r20, 0x0A	; 10
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	bc 01       	movw	r22, r24
     d50:	8f ea       	ldi	r24, 0xAF	; 175
     d52:	93 e0       	ldi	r25, 0x03	; 3
     d54:	0e 94 8f 10 	call	0x211e	; 0x211e <_ZN5Print7printlnEii>
		delay(1);
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>

	Serial.print("## Start: ");
	Serial.print(Serial1.available());
	Serial.println(" ####################");
	serialReading = YES;
	while(Serial1.available()){
     d64:	da cf       	rjmp	.-76     	; 0xd1a <_Z11printBufferv+0x32>
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	serialReading = NO;
     d66:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
	Serial.println("## End #####################");
     d6a:	6c eb       	ldi	r22, 0xBC	; 188
     d6c:	72 e0       	ldi	r23, 0x02	; 2
     d6e:	8f ea       	ldi	r24, 0xAF	; 175
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <_ZN5Print7printlnEPKc>

00000d76 <setup>:
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <setup+0xa>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <setup+0xc>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
     d86:	50 db       	rcall	.-2400   	; 0x428 <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
     d88:	8a e5       	ldi	r24, 0x5A	; 90
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     d90:	8a e5       	ldi	r24, 0x5A	; 90
     d92:	93 e0       	ldi	r25, 0x03	; 3
     d94:	0e 94 2b 13 	call	0x2656	; 0x2656 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     d98:	8a e5       	ldi	r24, 0x5A	; 90
     d9a:	93 e0       	ldi	r25, 0x03	; 3
     d9c:	0e 94 67 13 	call	0x26ce	; 0x26ce <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	0e 94 09 12 	call	0x2412	; 0x2412 <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	0e 94 09 12 	call	0x2412	; 0x2412 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     db0:	26 e0       	ldi	r18, 0x06	; 6
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	51 ee       	ldi	r21, 0xE1	; 225
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	8f ea       	ldi	r24, 0xAF	; 175
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	04 d7       	rcall	.+3592   	; 0x1bc8 <_ZN14HardwareSerial5beginEmh>
     dc0:	26 e0       	ldi	r18, 0x06	; 6
     dc2:	47 e3       	ldi	r20, 0x37	; 55
     dc4:	5f ed       	ldi	r21, 0xDF	; 223
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	8c e4       	ldi	r24, 0x4C	; 76
     dcc:	94 e0       	ldi	r25, 0x04	; 4
     dce:	fc d6       	rcall	.+3576   	; 0x1bc8 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
     dd0:	8c e4       	ldi	r24, 0x4C	; 76
     dd2:	94 e0       	ldi	r25, 0x04	; 4
     dd4:	d8 d6       	rcall	.+3504   	; 0x1b86 <_ZN14HardwareSerial5flushEv>
     dd6:	85 e0       	ldi	r24, 0x05	; 5
	arm.id = 5;
     dd8:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <arm>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	25 dd       	rcall	.-1462   	; 0x82a <_Z12setModeWheelh>
	setModeWheel(2);
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	23 dd       	rcall	.-1466   	; 0x82a <_Z12setModeWheelh>
	setModeMultiTurn(3);
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	25 dd       	rcall	.-1462   	; 0x832 <_Z16setModeMultiTurnh>
     de8:	84 e0       	ldi	r24, 0x04	; 4
	setModeJoint(4);
     dea:	21 dd       	rcall	.-1470   	; 0x82e <_Z12setModeJointh>
     dec:	85 e0       	ldi	r24, 0x05	; 5
     dee:	1f dd       	rcall	.-1474   	; 0x82e <_Z12setModeJointh>
	setModeJoint(5);
     df0:	84 ef       	ldi	r24, 0xF4	; 244
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <arm+0x12>
	/* Set the speeds of the servos */
	arm.servos[1].speed = 500;
     df8:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <arm+0x11>
     dfc:	84 e6       	ldi	r24, 0x64	; 100
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <arm+0x1c>
	arm.servos[2].speed = 100;
     e04:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <arm+0x1b>
     e08:	8e e1       	ldi	r24, 0x1E	; 30
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <arm+0x26>
	arm.servos[3].speed = 30;
     e10:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <arm+0x25>
     e14:	8f e0       	ldi	r24, 0x0F	; 15
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <arm+0x30>
	arm.servos[4].speed = 15;
     e1c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <arm+0x2f>
     e20:	84 e1       	ldi	r24, 0x14	; 20
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <arm+0x3a>
	arm.servos[5].speed = 20;
     e28:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <arm+0x39>
     e2c:	11 e0       	ldi	r17, 0x01	; 1
     e2e:	6f ef       	ldi	r22, 0xFF	; 255
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
     e30:	73 e0       	ldi	r23, 0x03	; 3
		setTorqueLimit(i, MAX_TORQUE);
     e32:	81 2f       	mov	r24, r17
     e34:	a1 dc       	rcall	.-1726   	; 0x778 <_Z14setTorqueLimithi>
     e36:	1f 5f       	subi	r17, 0xFF	; 255
     e38:	16 30       	cpi	r17, 0x06	; 6
     e3a:	c9 f7       	brne	.-14     	; 0xe2e <setup+0xb8>
	arm.servos[2].speed = 100;
	arm.servos[3].speed = 30;
	arm.servos[4].speed = 15;
	arm.servos[5].speed = 20;
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	8a e5       	ldi	r24, 0x5A	; 90
		setTorqueLimit(i, MAX_TORQUE);
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     e48:	69 ed       	ldi	r22, 0xD9	; 217
     e4a:	72 e0       	ldi	r23, 0x02	; 2
     e4c:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.print("sID:");
     e4e:	93 e0       	ldi	r25, 0x03	; 3
     e50:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN5Print5printEPKc>
     e54:	41 e0       	ldi	r20, 0x01	; 1
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.setCursor(0,1);
     e5a:	93 e0       	ldi	r25, 0x03	; 3
     e5c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     e60:	6e ed       	ldi	r22, 0xDE	; 222
     e62:	72 e0       	ldi	r23, 0x02	; 2
     e64:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.print("deg:");
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN5Print5printEPKc>
     e6c:	42 e0       	ldi	r20, 0x02	; 2
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.setCursor(0,2);
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     e78:	63 ee       	ldi	r22, 0xE3	; 227
     e7a:	72 e0       	ldi	r23, 0x02	; 2
     e7c:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.print("rpm:");
     e7e:	93 e0       	ldi	r25, 0x03	; 3
     e80:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN5Print5printEPKc>
     e84:	43 e0       	ldi	r20, 0x03	; 3
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.setCursor(0,3);
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     e90:	68 ee       	ldi	r22, 0xE8	; 232
     e92:	72 e0       	ldi	r23, 0x02	; 2
     e94:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.print("ld%:");
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_ZN5Print5printEPKc>
     e9c:	48 e0       	ldi	r20, 0x08	; 8

	readServo(arm.id, 0x18, 8);
     e9e:	68 e1       	ldi	r22, 0x18	; 24
     ea0:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <arm>
     ea4:	ad dd       	rcall	.-1190   	; 0xa00 <_Z9readServohhh>
     ea6:	20 df       	rcall	.-448    	; 0xce8 <_Z11printBufferv>
	printBuffer();
     ea8:	62 e0       	ldi	r22, 0x02	; 2
     eaa:	70 e0       	ldi	r23, 0x00	; 0
	delay(2);
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>
     eb4:	42 e0       	ldi	r20, 0x02	; 2
     eb6:	64 e4       	ldi	r22, 0x44	; 68
	int somthe = getData(5, MX_CURRENT_L, 2);
     eb8:	85 e0       	ldi	r24, 0x05	; 5
     eba:	fc dd       	rcall	.-1032   	; 0xab4 <_Z7getDatahhh>
     ebc:	8c 01       	movw	r16, r24
     ebe:	6d ee       	ldi	r22, 0xED	; 237
     ec0:	72 e0       	ldi	r23, 0x02	; 2
	printSerial("return", somthe);
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN6StringC1EPKc>
     eca:	b8 01       	movw	r22, r16
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	e6 da       	rcall	.-2612   	; 0x49e <_Z11printSerial6Stringi>
     ed2:	ce 01       	movw	r24, r28
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6StringD1Ev>
     eda:	26 96       	adiw	r28, 0x06	; 6
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
	//printBuffer();
}
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <_Z12printDataLCDv>:
     ef0:	7f 92       	push	r7
     ef2:	8f 92       	push	r8
     ef4:	9f 92       	push	r9
void printSerial(String title, int value) {
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
void printDataLCD() {
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
	delay(10);
     f0a:	6a e0       	ldi	r22, 0x0A	; 10
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 0e 11 	call	0x221c	; 0x221c <delay>
	int punch;
	int current;
	int8_t rotations = 0;
	bool speedDirection, loadDirection;
	uint8_t i = 0;
	int available = Serial1.available();
     f16:	8c e4       	ldi	r24, 0x4C	; 76
     f18:	94 e0       	ldi	r25, 0x04	; 4
     f1a:	4f d5       	rcall	.+2718   	; 0x19ba <_ZN14HardwareSerial9availableEv>
	if (available > 0){
     f1c:	18 16       	cp	r1, r24
     f1e:	19 06       	cpc	r1, r25
     f20:	0c f0       	brlt	.+2      	; 0xf24 <_Z12printDataLCDv+0x34>
     f22:	b9 c1       	rjmp	.+882    	; 0x1296 <_Z12printDataLCDv+0x3a6>
		serialReading = YES;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     f2a:	8c e4       	ldi	r24, 0x4C	; 76
     f2c:	94 e0       	ldi	r25, 0x04	; 4
     f2e:	5f d5       	rcall	.+2750   	; 0x19ee <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     f30:	8f 3f       	cpi	r24, 0xFF	; 255
     f32:	91 05       	cpc	r25, r1
     f34:	09 f0       	breq	.+2      	; 0xf38 <_Z12printDataLCDv+0x48>
     f36:	af c1       	rjmp	.+862    	; 0x1296 <_Z12printDataLCDv+0x3a6>
     f38:	8c e4       	ldi	r24, 0x4C	; 76
     f3a:	94 e0       	ldi	r25, 0x04	; 4
     f3c:	58 d5       	rcall	.+2736   	; 0x19ee <_ZN14HardwareSerial4readEv>
     f3e:	8f 3f       	cpi	r24, 0xFF	; 255
     f40:	91 05       	cpc	r25, r1
     f42:	09 f0       	breq	.+2      	; 0xf46 <_Z12printDataLCDv+0x56>
     f44:	a8 c1       	rjmp	.+848    	; 0x1296 <_Z12printDataLCDv+0x3a6>
			do { servoID = Serial1.read(); } while (servoID == 0xFF); // this make sure you wait for real data
     f46:	8c e4       	ldi	r24, 0x4C	; 76
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	51 d5       	rcall	.+2722   	; 0x19ee <_ZN14HardwareSerial4readEv>
     f4c:	ec 01       	movw	r28, r24
     f4e:	b8 2e       	mov	r11, r24
     f50:	2f ef       	ldi	r18, 0xFF	; 255
     f52:	82 17       	cp	r24, r18
     f54:	c1 f3       	breq	.-16     	; 0xf46 <_Z12printDataLCDv+0x56>

			msgLength = Serial1.read(); // msg Length
     f56:	8c e4       	ldi	r24, 0x4C	; 76
     f58:	94 e0       	ldi	r25, 0x04	; 4
     f5a:	49 d5       	rcall	.+2706   	; 0x19ee <_ZN14HardwareSerial4readEv>
     f5c:	08 2f       	mov	r16, r24
			error_byte = Serial1.read();
     f5e:	8c e4       	ldi	r24, 0x4C	; 76
     f60:	94 e0       	ldi	r25, 0x04	; 4
     f62:	45 d5       	rcall	.+2698   	; 0x19ee <_ZN14HardwareSerial4readEv>
     f64:	18 2f       	mov	r17, r24
     f66:	81 11       	cpse	r24, r1
			error_byte_old = error_byte ? error_byte : error_byte_old;
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <_Z12printDataLCDv+0x7e>
     f6a:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <error_byte_old>
     f6e:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <error_byte_old>
     f72:	40 e0       	ldi	r20, 0x00	; 0

			lcd.setCursor(6,0);
     f74:	66 e0       	ldi	r22, 0x06	; 6
     f76:	8a e5       	ldi	r24, 0x5A	; 90
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     f7e:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <error_counter>
     f82:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <error_counter+0x1>
     f86:	11 11       	cpse	r17, r1
			if (error_byte || error_counter) {
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <_Z12printDataLCDv+0x9e>
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	01 f1       	breq	.+64     	; 0xfce <_Z12printDataLCDv+0xde>
     f8e:	8b 30       	cpi	r24, 0x0B	; 11
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     f90:	91 05       	cpc	r25, r1
     f92:	14 f4       	brge	.+4      	; 0xf98 <_Z12printDataLCDv+0xa8>
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <_Z12printDataLCDv+0xac>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <error_counter+0x1>
     fa0:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <error_counter>
				String* er;
				er = error_decode(error_byte);
     fa4:	81 2f       	mov	r24, r17
     fa6:	92 da       	rcall	.-2780   	; 0x4cc <_Z12error_decodeh>
				lcd.print("ER:");
     fa8:	63 e0       	ldi	r22, 0x03	; 3
     faa:	73 e0       	ldi	r23, 0x03	; 3
     fac:	8a e5       	ldi	r24, 0x5A	; 90
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	f7 d7       	rcall	.+4078   	; 0x1fa0 <_ZN5Print5printEPKc>
     fb2:	4a e0       	ldi	r20, 0x0A	; 10
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <error_byte_old>
     fba:	8a e5       	ldi	r24, 0x5A	; 90
     fbc:	93 e0       	ldi	r25, 0x03	; 3
     fbe:	0e 94 3e 10 	call	0x207c	; 0x207c <_ZN5Print5printEhi>
				lcd.print("   ");
     fc2:	6e e0       	ldi	r22, 0x0E	; 14
     fc4:	73 e0       	ldi	r23, 0x03	; 3
     fc6:	8a e5       	ldi	r24, 0x5A	; 90
     fc8:	93 e0       	ldi	r25, 0x03	; 3
     fca:	ea d7       	rcall	.+4052   	; 0x1fa0 <_ZN5Print5printEPKc>
     fcc:	40 c1       	rjmp	.+640    	; 0x124e <_Z12printDataLCDv+0x35e>
			} else { // No Error :)
				lcd.print("          ");
     fce:	67 e0       	ldi	r22, 0x07	; 7
     fd0:	73 e0       	ldi	r23, 0x03	; 3
     fd2:	8a e5       	ldi	r24, 0x5A	; 90
     fd4:	93 e0       	ldi	r25, 0x03	; 3
     fd6:	e4 d7       	rcall	.+4040   	; 0x1fa0 <_ZN5Print5printEPKc>
				if (msgLength > 2) {
     fd8:	03 30       	cpi	r16, 0x03	; 3
     fda:	08 f4       	brcc	.+2      	; 0xfde <_Z12printDataLCDv+0xee>
					position = Serial1.read();
     fdc:	38 c1       	rjmp	.+624    	; 0x124e <_Z12printDataLCDv+0x35e>
     fde:	8c e4       	ldi	r24, 0x4C	; 76
     fe0:	94 e0       	ldi	r25, 0x04	; 4
     fe2:	05 d5       	rcall	.+2570   	; 0x19ee <_ZN14HardwareSerial4readEv>
     fe4:	8c 01       	movw	r16, r24
					position = (Serial1.read()<<8) + position;
     fe6:	8c e4       	ldi	r24, 0x4C	; 76
     fe8:	94 e0       	ldi	r25, 0x04	; 4
     fea:	01 d5       	rcall	.+2562   	; 0x19ee <_ZN14HardwareSerial4readEv>
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	38 2f       	mov	r19, r24
     ff2:	02 0f       	add	r16, r18
     ff4:	13 1f       	adc	r17, r19
     ff6:	7e 01       	movw	r14, r28
					if (!arm.servos[servoID].direction) {
     ff8:	ff 24       	eor	r15, r15
     ffa:	3a e0       	ldi	r19, 0x0A	; 10
     ffc:	c3 9f       	mul	r28, r19
     ffe:	e0 01       	movw	r28, r0
    1000:	11 24       	eor	r1, r1
    1002:	c5 59       	subi	r28, 0x95	; 149
    1004:	dc 4f       	sbci	r29, 0xFC	; 252
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	2b 81       	ldd	r18, Y+3	; 0x03
    100a:	3c 81       	ldd	r19, Y+4	; 0x04
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	81 11       	cpse	r24, r1
    1010:	08 c0       	rjmp	.+16     	; 0x1022 <_Z12printDataLCDv+0x132>
    1012:	a8 01       	movw	r20, r16
						arm.servos[servoID].turns = (arm.servos[servoID].position > (position+100))
							? arm.servos[servoID].turns + 1
							: arm.servos[servoID].turns;
    1014:	4c 59       	subi	r20, 0x9C	; 156
    1016:	5f 4f       	sbci	r21, 0xFF	; 255
    1018:	42 17       	cp	r20, r18
    101a:	53 07       	cpc	r21, r19
    101c:	44 f4       	brge	.+16     	; 0x102e <_Z12printDataLCDv+0x13e>
    101e:	9f 5f       	subi	r25, 0xFF	; 255
    1020:	06 c0       	rjmp	.+12     	; 0x102e <_Z12printDataLCDv+0x13e>
    1022:	2c 59       	subi	r18, 0x9C	; 156
					} else {
						arm.servos[servoID].turns = ((arm.servos[servoID].position+100) < position)
							? arm.servos[servoID].turns - 1
							: arm.servos[servoID].turns;
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	20 17       	cp	r18, r16
    1028:	31 07       	cpc	r19, r17
    102a:	0c f4       	brge	.+2      	; 0x102e <_Z12printDataLCDv+0x13e>
    102c:	91 50       	subi	r25, 0x01	; 1
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	8e 9d       	mul	r24, r14
    1032:	f0 01       	movw	r30, r0
    1034:	8f 9d       	mul	r24, r15
    1036:	f0 0d       	add	r31, r0
    1038:	11 24       	eor	r1, r1
    103a:	e5 59       	subi	r30, 0x95	; 149
    103c:	fc 4f       	sbci	r31, 0xFC	; 252
					}

					//Serial.println(position);
					speed = Serial1.read();
    103e:	96 83       	std	Z+6, r25	; 0x06
    1040:	8c e4       	ldi	r24, 0x4C	; 76
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	d4 d4       	rcall	.+2472   	; 0x19ee <_ZN14HardwareSerial4readEv>
    1046:	6c 01       	movw	r12, r24
					speed = (Serial1.read()<<8) + speed;
    1048:	8c e4       	ldi	r24, 0x4C	; 76
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	d0 d4       	rcall	.+2464   	; 0x19ee <_ZN14HardwareSerial4readEv>
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	38 2f       	mov	r19, r24
    1054:	c2 0e       	add	r12, r18
					//Serial.println(speed);
					load = Serial1.read();
    1056:	d3 1e       	adc	r13, r19
    1058:	8c e4       	ldi	r24, 0x4C	; 76
    105a:	94 e0       	ldi	r25, 0x04	; 4
    105c:	c8 d4       	rcall	.+2448   	; 0x19ee <_ZN14HardwareSerial4readEv>
					load = (Serial1.read()<<8) + load;
    105e:	ec 01       	movw	r28, r24
    1060:	8c e4       	ldi	r24, 0x4C	; 76
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	c4 d4       	rcall	.+2440   	; 0x19ee <_ZN14HardwareSerial4readEv>
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	38 2f       	mov	r19, r24
					voltage = Serial1.read();
    106c:	c2 0f       	add	r28, r18
    106e:	d3 1f       	adc	r29, r19
    1070:	8c e4       	ldi	r24, 0x4C	; 76
					temperature = Serial1.read();
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	bc d4       	rcall	.+2424   	; 0x19ee <_ZN14HardwareSerial4readEv>
    1076:	8c e4       	ldi	r24, 0x4C	; 76
					registered = Serial1.read();
    1078:	94 e0       	ldi	r25, 0x04	; 4
    107a:	b9 d4       	rcall	.+2418   	; 0x19ee <_ZN14HardwareSerial4readEv>
    107c:	8c e4       	ldi	r24, 0x4C	; 76
					moving = Serial1.read();
    107e:	94 e0       	ldi	r25, 0x04	; 4
    1080:	b6 d4       	rcall	.+2412   	; 0x19ee <_ZN14HardwareSerial4readEv>
    1082:	8c e4       	ldi	r24, 0x4C	; 76
					lock = Serial1.read();
    1084:	94 e0       	ldi	r25, 0x04	; 4
    1086:	b3 d4       	rcall	.+2406   	; 0x19ee <_ZN14HardwareSerial4readEv>
    1088:	8c e4       	ldi	r24, 0x4C	; 76
    108a:	94 e0       	ldi	r25, 0x04	; 4
					punch = Serial1.read();
    108c:	b0 d4       	rcall	.+2400   	; 0x19ee <_ZN14HardwareSerial4readEv>
    108e:	8c e4       	ldi	r24, 0x4C	; 76
    1090:	94 e0       	ldi	r25, 0x04	; 4
    1092:	ad d4       	rcall	.+2394   	; 0x19ee <_ZN14HardwareSerial4readEv>
					punch = (Serial1.read()<<8) + punch;
    1094:	8c e4       	ldi	r24, 0x4C	; 76
    1096:	94 e0       	ldi	r25, 0x04	; 4
    1098:	aa d4       	rcall	.+2388   	; 0x19ee <_ZN14HardwareSerial4readEv>
    109a:	8c e4       	ldi	r24, 0x4C	; 76
					current = Serial1.read();
    109c:	94 e0       	ldi	r25, 0x04	; 4
    109e:	a7 d4       	rcall	.+2382   	; 0x19ee <_ZN14HardwareSerial4readEv>
    10a0:	8c e4       	ldi	r24, 0x4C	; 76
    10a2:	94 e0       	ldi	r25, 0x04	; 4
					current = (Serial1.read()<<8) + current;
    10a4:	a4 d4       	rcall	.+2376   	; 0x19ee <_ZN14HardwareSerial4readEv>
    10a6:	c1 14       	cp	r12, r1
    10a8:	94 e0       	ldi	r25, 0x04	; 4
    10aa:	d9 06       	cpc	r13, r25
					//Serial.println(load);
					if (speed > 0x3FF) {
    10ac:	2c f0       	brlt	.+10     	; 0x10b8 <_Z12printDataLCDv+0x1c8>
    10ae:	e4 e0       	ldi	r30, 0x04	; 4
    10b0:	de 1a       	sub	r13, r30
    10b2:	77 24       	eor	r7, r7
						speedDirection = CW;
						speed = speed - 0x400;
    10b4:	73 94       	inc	r7
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <_Z12printDataLCDv+0x1ca>
					punch = (Serial1.read()<<8) + punch;
					current = Serial1.read();
					current = (Serial1.read()<<8) + current;
					//Serial.println(load);
					if (speed > 0x3FF) {
						speedDirection = CW;
    10b8:	71 2c       	mov	r7, r1
    10ba:	c1 15       	cp	r28, r1
    10bc:	f4 e0       	ldi	r31, 0x04	; 4
						speed = speed - 0x400;
						} else {
						speedDirection = CCW;
    10be:	df 07       	cpc	r29, r31
					}
					if (load > 0x3FF) {
    10c0:	24 f0       	brlt	.+8      	; 0x10ca <_Z12printDataLCDv+0x1da>
    10c2:	d4 50       	subi	r29, 0x04	; 4
    10c4:	aa 24       	eor	r10, r10
    10c6:	a3 94       	inc	r10
						loadDirection = CW;
						load = load - 0x400;
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <_Z12printDataLCDv+0x1dc>
						speed = speed - 0x400;
						} else {
						speedDirection = CCW;
					}
					if (load > 0x3FF) {
						loadDirection = CW;
    10ca:	a1 2c       	mov	r10, r1
    10cc:	2a e0       	ldi	r18, 0x0A	; 10
						load = load - 0x400;
						} else {
						loadDirection = CCW;
    10ce:	2e 9d       	mul	r18, r14
					}
					/* Update the Arm Object */
					arm.servos[servoID].direction = speedDirection;
    10d0:	c0 01       	movw	r24, r0
    10d2:	2f 9d       	mul	r18, r15
    10d4:	90 0d       	add	r25, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	9c 01       	movw	r18, r24
    10da:	25 59       	subi	r18, 0x95	; 149
    10dc:	3c 4f       	sbci	r19, 0xFC	; 252
    10de:	49 01       	movw	r8, r18
    10e0:	f9 01       	movw	r30, r18
    10e2:	75 82       	std	Z+5, r7	; 0x05
    10e4:	14 83       	std	Z+4, r17	; 0x04
    10e6:	03 83       	std	Z+3, r16	; 0x03
					arm.servos[servoID].position = position;
    10e8:	d2 87       	std	Z+10, r29	; 0x0a
    10ea:	c1 87       	std	Z+9, r28	; 0x09
					arm.servos[servoID].speed;
					arm.servos[servoID].load = load;
    10ec:	21 e0       	ldi	r18, 0x01	; 1
					//Serial.println("================");
					//lcd.clear();
					//char buffer[16];
					//sprintf(buffer, "Servo ID: %d", servoID);
					printLCD(LCD_COL1, 0, servoID, 1);
    10ee:	a7 01       	movw	r20, r14
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	0a d9       	rcall	.-3564   	; 0x30a <_Z8printLCDhhih>
    10f6:	f4 01       	movw	r30, r8
					lcd.print(arm.servos[servoID].mode == 1 ? " Whl" : arm.servos[servoID].mode == 2 ? " Mlt" : " Jnt");
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	29 f0       	breq	.+10     	; 0x1108 <_Z12printDataLCDv+0x218>
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	31 f0       	breq	.+12     	; 0x110e <_Z12printDataLCDv+0x21e>
    1102:	64 ef       	ldi	r22, 0xF4	; 244
    1104:	72 e0       	ldi	r23, 0x02	; 2
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <_Z12printDataLCDv+0x222>
    1108:	69 ef       	ldi	r22, 0xF9	; 249
    110a:	72 e0       	ldi	r23, 0x02	; 2
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <_Z12printDataLCDv+0x222>
    110e:	6e ef       	ldi	r22, 0xFE	; 254
    1110:	72 e0       	ldi	r23, 0x02	; 2
    1112:	8a e5       	ldi	r24, 0x5A	; 90
    1114:	93 e0       	ldi	r25, 0x03	; 3
					printLCD(LCD_COL1, 1, position * MX_PRESENT_POSITION_DEGREE, 4);
    1116:	44 d7       	rcall	.+3720   	; 0x1fa0 <_ZN5Print5printEPKc>
    1118:	b8 01       	movw	r22, r16
    111a:	01 2e       	mov	r0, r17
    111c:	00 0c       	add	r0, r0
    111e:	88 0b       	sbc	r24, r24
    1120:	99 0b       	sbc	r25, r25
    1122:	6b d1       	rcall	.+726    	; 0x13fa <__floatsisf>
    1124:	28 e5       	ldi	r18, 0x58	; 88
    1126:	39 e3       	ldi	r19, 0x39	; 57
    1128:	44 eb       	ldi	r20, 0xB4	; 180
    112a:	5d e3       	ldi	r21, 0x3D	; 61
    112c:	16 d2       	rcall	.+1068   	; 0x155a <__mulsf3>
    112e:	32 d1       	rcall	.+612    	; 0x1394 <__fixsfsi>
    1130:	24 e0       	ldi	r18, 0x04	; 4
    1132:	ab 01       	movw	r20, r22
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	84 e0       	ldi	r24, 0x04	; 4
    1138:	e8 d8       	rcall	.-3632   	; 0x30a <_Z8printLCDhhih>
    113a:	6f ed       	ldi	r22, 0xDF	; 223
    113c:	8a e5       	ldi	r24, 0x5A	; 90
					lcd.print((char)CH_DEG);
    113e:	93 e0       	ldi	r25, 0x03	; 3
    1140:	30 d7       	rcall	.+3680   	; 0x1fa2 <_ZN5Print5printEc>
    1142:	2a e0       	ldi	r18, 0x0A	; 10
    1144:	2e 9d       	mul	r18, r14
    1146:	c0 01       	movw	r24, r0
					printLCD(11, 1, arm.servos[servoID].turns,3);
    1148:	2f 9d       	mul	r18, r15
    114a:	90 0d       	add	r25, r0
    114c:	11 24       	eor	r1, r1
    114e:	9c 01       	movw	r18, r24
    1150:	25 59       	subi	r18, 0x95	; 149
    1152:	3c 4f       	sbci	r19, 0xFC	; 252
    1154:	49 01       	movw	r8, r18
    1156:	f9 01       	movw	r30, r18
    1158:	46 81       	ldd	r20, Z+6	; 0x06
    115a:	04 2e       	mov	r0, r20
    115c:	00 0c       	add	r0, r0
    115e:	55 0b       	sbc	r21, r21
    1160:	23 e0       	ldi	r18, 0x03	; 3
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	8b e0       	ldi	r24, 0x0B	; 11
    1166:	d1 d8       	rcall	.-3678   	; 0x30a <_Z8printLCDhhih>
					lcd.print("turns");
    1168:	62 e1       	ldi	r22, 0x12	; 18
    116a:	73 e0       	ldi	r23, 0x03	; 3
    116c:	8a e5       	ldi	r24, 0x5A	; 90
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	17 d7       	rcall	.+3630   	; 0x1fa0 <_ZN5Print5printEPKc>
					printLCD(LCD_COL2+5, 1, arm.servos[servoID].position * MX_PRESENT_POSITION_DEGREE, 4);
    1172:	f4 01       	movw	r30, r8
    1174:	63 81       	ldd	r22, Z+3	; 0x03
    1176:	74 81       	ldd	r23, Z+4	; 0x04
    1178:	07 2e       	mov	r0, r23
    117a:	00 0c       	add	r0, r0
    117c:	88 0b       	sbc	r24, r24
    117e:	99 0b       	sbc	r25, r25
    1180:	3c d1       	rcall	.+632    	; 0x13fa <__floatsisf>
    1182:	28 e5       	ldi	r18, 0x58	; 88
    1184:	39 e3       	ldi	r19, 0x39	; 57
    1186:	44 eb       	ldi	r20, 0xB4	; 180
    1188:	5d e3       	ldi	r21, 0x3D	; 61
    118a:	e7 d1       	rcall	.+974    	; 0x155a <__mulsf3>
    118c:	03 d1       	rcall	.+518    	; 0x1394 <__fixsfsi>
    118e:	24 e0       	ldi	r18, 0x04	; 4
    1190:	ab 01       	movw	r20, r22
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	8f e0       	ldi	r24, 0x0F	; 15
    1196:	b9 d8       	rcall	.-3726   	; 0x30a <_Z8printLCDhhih>
    1198:	6f ed       	ldi	r22, 0xDF	; 223
    119a:	8a e5       	ldi	r24, 0x5A	; 90
					lcd.print((char)CH_DEG);
    119c:	93 e0       	ldi	r25, 0x03	; 3
    119e:	01 d7       	rcall	.+3586   	; 0x1fa2 <_ZN5Print5printEc>
    11a0:	24 e0       	ldi	r18, 0x04	; 4
    11a2:	a6 01       	movw	r20, r12
					// 			lcd.setCursor(LCD_COL2 ,1);
					// 			lcd.print((int)(currPos));
					//lcd.setCursor(10,1);
					//lcd.print(rotations);
					printLCD(LCD_COL1, 2, speed, 4);
    11a4:	62 e0       	ldi	r22, 0x02	; 2
    11a6:	84 e0       	ldi	r24, 0x04	; 4
    11a8:	b0 d8       	rcall	.-3744   	; 0x30a <_Z8printLCDhhih>
    11aa:	71 10       	cpse	r7, r1
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <_Z12printDataLCDv+0x2c2>
					lcd.print(speedDirection ? (char)CH_ARR : (char)CH_ARL);
    11ae:	6f e7       	ldi	r22, 0x7F	; 127
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <_Z12printDataLCDv+0x2c4>
    11b2:	6e e7       	ldi	r22, 0x7E	; 126
    11b4:	8a e5       	ldi	r24, 0x5A	; 90
    11b6:	93 e0       	ldi	r25, 0x03	; 3
    11b8:	f4 d6       	rcall	.+3560   	; 0x1fa2 <_ZN5Print5printEc>
    11ba:	8a e0       	ldi	r24, 0x0A	; 10
    11bc:	8e 9d       	mul	r24, r14
					printLCD(LCD_COL1+5, 2, arm.servos[servoID].speed, 4);
    11be:	f0 01       	movw	r30, r0
    11c0:	8f 9d       	mul	r24, r15
    11c2:	f0 0d       	add	r31, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	e5 59       	subi	r30, 0x95	; 149
    11c8:	fc 4f       	sbci	r31, 0xFC	; 252
    11ca:	47 81       	ldd	r20, Z+7	; 0x07
    11cc:	50 85       	ldd	r21, Z+8	; 0x08
    11ce:	24 e0       	ldi	r18, 0x04	; 4
    11d0:	62 e0       	ldi	r22, 0x02	; 2
    11d2:	89 e0       	ldi	r24, 0x09	; 9
    11d4:	9a d8       	rcall	.-3788   	; 0x30a <_Z8printLCDhhih>
    11d6:	40 91 ab 03 	lds	r20, 0x03AB	; 0x8003ab <lastButtonPressed>
					printLCD(LCD_COL1+10, 2, lastButtonPressed, 4);
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	24 e0       	ldi	r18, 0x04	; 4
    11de:	62 e0       	ldi	r22, 0x02	; 2
    11e0:	8e e0       	ldi	r24, 0x0E	; 14
    11e2:	93 d8       	rcall	.-3802   	; 0x30a <_Z8printLCDhhih>
    11e4:	40 91 ab 03 	lds	r20, 0x03AB	; 0x8003ab <lastButtonPressed>
					printLCD(LCD_COL1+10, 2, lastButtonPressed, 4);
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	24 e0       	ldi	r18, 0x04	; 4
    11ec:	62 e0       	ldi	r22, 0x02	; 2
    11ee:	8e e0       	ldi	r24, 0x0E	; 14
    11f0:	8c d8       	rcall	.-3816   	; 0x30a <_Z8printLCDhhih>
    11f2:	60 91 aa 03 	lds	r22, 0x03AA	; 0x8003aa <buttonsFlip+0x2>
					lcd.print(buttonsFlip[2]);
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	4a e0       	ldi	r20, 0x0A	; 10
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	8a e5       	ldi	r24, 0x5A	; 90
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	88 d7       	rcall	.+3856   	; 0x2112 <_ZN5Print5printEii>
    1202:	60 91 a9 03 	lds	r22, 0x03A9	; 0x8003a9 <buttonsFlip+0x1>
    1206:	70 e0       	ldi	r23, 0x00	; 0
					lcd.print(buttonsFlip[1]);
    1208:	4a e0       	ldi	r20, 0x0A	; 10
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	8a e5       	ldi	r24, 0x5A	; 90
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	80 d7       	rcall	.+3840   	; 0x2112 <_ZN5Print5printEii>
    1212:	24 e0       	ldi	r18, 0x04	; 4
    1214:	ae 01       	movw	r20, r28
    1216:	63 e0       	ldi	r22, 0x03	; 3
					printLCD(LCD_COL1, 3, load, 4);
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	77 d8       	rcall	.-3858   	; 0x30a <_Z8printLCDhhih>
    121c:	a1 10       	cpse	r10, r1
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <_Z12printDataLCDv+0x334>
    1220:	6f e7       	ldi	r22, 0x7F	; 127
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <_Z12printDataLCDv+0x336>
    1224:	6e e7       	ldi	r22, 0x7E	; 126
    1226:	8a e5       	ldi	r24, 0x5A	; 90
    1228:	93 e0       	ldi	r25, 0x03	; 3
    122a:	bb d6       	rcall	.+3446   	; 0x1fa2 <_ZN5Print5printEc>
    122c:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <servoID_old>
    1230:	b8 12       	cpse	r11, r24
    1232:	05 c0       	rjmp	.+10     	; 0x123e <_Z12printDataLCDv+0x34e>
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
    1234:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <currPos>
    1238:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <currPos+0x1>
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <_Z12printDataLCDv+0x352>
    123e:	90 2f       	mov	r25, r16
    1240:	81 2f       	mov	r24, r17
    1242:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <currPos>
				lcd.print("   ");
			} else { // No Error :)
				lcd.print("          ");
				if (msgLength > 2) {
					position = Serial1.read();
					position = (Serial1.read()<<8) + position;
    1246:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <currPos+0x1>
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
    124a:	b0 92 ae 03 	sts	0x03AE, r11	; 0x8003ae <servoID_old>
    124e:	8c e4       	ldi	r24, 0x4C	; 76
					servoID_old = servoID;
    1250:	94 e0       	ldi	r25, 0x04	; 4
    1252:	b3 d3       	rcall	.+1894   	; 0x19ba <_ZN14HardwareSerial9availableEv>
				}
			}
			while(Serial1.available() > 0) {
    1254:	18 16       	cp	r1, r24
    1256:	19 06       	cpc	r1, r25
    1258:	24 f4       	brge	.+8      	; 0x1262 <_Z12printDataLCDv+0x372>
    125a:	8c e4       	ldi	r24, 0x4C	; 76
    125c:	94 e0       	ldi	r25, 0x04	; 4
    125e:	c7 d3       	rcall	.+1934   	; 0x19ee <_ZN14HardwareSerial4readEv>
    1260:	f6 cf       	rjmp	.-20     	; 0x124e <_Z12printDataLCDv+0x35e>
				//Serial.println(Serial1.read());
				Serial1.read();
    1262:	61 e0       	ldi	r22, 0x01	; 1
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
					servoID_old = servoID;
				}
			}
			while(Serial1.available() > 0) {
    126a:	d8 d7       	rcall	.+4016   	; 0x221c <delay>
				//Serial.println(Serial1.read());
				Serial1.read();
			}

			delay(1);
    126c:	40 91 66 03 	lds	r20, 0x0366	; 0x800366 <cycle_counter>
    1270:	50 91 67 03 	lds	r21, 0x0367	; 0x800367 <cycle_counter+0x1>
    1274:	48 3e       	cpi	r20, 0xE8	; 232
    1276:	f3 e0       	ldi	r31, 0x03	; 3
			cycle_counter = cycle_counter > 999 ? 0 : cycle_counter + 1;
    1278:	5f 07       	cpc	r21, r31
    127a:	1c f4       	brge	.+6      	; 0x1282 <_Z12printDataLCDv+0x392>
    127c:	4f 5f       	subi	r20, 0xFF	; 255
    127e:	5f 4f       	sbci	r21, 0xFF	; 255
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <_Z12printDataLCDv+0x396>
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	50 93 67 03 	sts	0x0367, r21	; 0x800367 <cycle_counter+0x1>
    128a:	40 93 66 03 	sts	0x0366, r20	; 0x800366 <cycle_counter>
    128e:	24 e0       	ldi	r18, 0x04	; 4
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	80 e1       	ldi	r24, 0x10	; 16
    1294:	3a d8       	rcall	.-3980   	; 0x30a <_Z8printLCDhhih>
    1296:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
			printLCD(16, 0, cycle_counter, 4);
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
		}
	}
	serialReading = NO;
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
}
    12a8:	cf 90       	pop	r12
    12aa:	bf 90       	pop	r11
    12ac:	af 90       	pop	r10
    12ae:	9f 90       	pop	r9
    12b0:	8f 90       	pop	r8
    12b2:	7f 90       	pop	r7
    12b4:	08 95       	ret

000012b6 <loop>:
    12b6:	42 e2       	ldi	r20, 0x22	; 34
    12b8:	64 e2       	ldi	r22, 0x24	; 36
    12ba:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <arm>
    12be:	a0 db       	rcall	.-2240   	; 0xa00 <_Z9readServohhh>
    12c0:	17 ce       	rjmp	.-978    	; 0xef0 <_Z12printDataLCDv>

000012c2 <__subsf3>:
    12c2:	50 58       	subi	r21, 0x80	; 128

000012c4 <__addsf3>:
    12c4:	bb 27       	eor	r27, r27
    12c6:	aa 27       	eor	r26, r26
    12c8:	0e d0       	rcall	.+28     	; 0x12e6 <__addsf3x>
    12ca:	0d c1       	rjmp	.+538    	; 0x14e6 <__fp_round>
    12cc:	fe d0       	rcall	.+508    	; 0x14ca <__fp_pscA>
    12ce:	30 f0       	brcs	.+12     	; 0x12dc <__addsf3+0x18>
    12d0:	03 d1       	rcall	.+518    	; 0x14d8 <__fp_pscB>
    12d2:	20 f0       	brcs	.+8      	; 0x12dc <__addsf3+0x18>
    12d4:	31 f4       	brne	.+12     	; 0x12e2 <__addsf3+0x1e>
    12d6:	9f 3f       	cpi	r25, 0xFF	; 255
    12d8:	11 f4       	brne	.+4      	; 0x12de <__addsf3+0x1a>
    12da:	1e f4       	brtc	.+6      	; 0x12e2 <__addsf3+0x1e>
    12dc:	f3 c0       	rjmp	.+486    	; 0x14c4 <__fp_nan>
    12de:	0e f4       	brtc	.+2      	; 0x12e2 <__addsf3+0x1e>
    12e0:	e0 95       	com	r30
    12e2:	e7 fb       	bst	r30, 7
    12e4:	e9 c0       	rjmp	.+466    	; 0x14b8 <__fp_inf>

000012e6 <__addsf3x>:
    12e6:	e9 2f       	mov	r30, r25
    12e8:	0f d1       	rcall	.+542    	; 0x1508 <__fp_split3>
    12ea:	80 f3       	brcs	.-32     	; 0x12cc <__addsf3+0x8>
    12ec:	ba 17       	cp	r27, r26
    12ee:	62 07       	cpc	r22, r18
    12f0:	73 07       	cpc	r23, r19
    12f2:	84 07       	cpc	r24, r20
    12f4:	95 07       	cpc	r25, r21
    12f6:	18 f0       	brcs	.+6      	; 0x12fe <__addsf3x+0x18>
    12f8:	71 f4       	brne	.+28     	; 0x1316 <__addsf3x+0x30>
    12fa:	9e f5       	brtc	.+102    	; 0x1362 <__addsf3x+0x7c>
    12fc:	27 c1       	rjmp	.+590    	; 0x154c <__fp_zero>
    12fe:	0e f4       	brtc	.+2      	; 0x1302 <__addsf3x+0x1c>
    1300:	e0 95       	com	r30
    1302:	0b 2e       	mov	r0, r27
    1304:	ba 2f       	mov	r27, r26
    1306:	a0 2d       	mov	r26, r0
    1308:	0b 01       	movw	r0, r22
    130a:	b9 01       	movw	r22, r18
    130c:	90 01       	movw	r18, r0
    130e:	0c 01       	movw	r0, r24
    1310:	ca 01       	movw	r24, r20
    1312:	a0 01       	movw	r20, r0
    1314:	11 24       	eor	r1, r1
    1316:	ff 27       	eor	r31, r31
    1318:	59 1b       	sub	r21, r25
    131a:	99 f0       	breq	.+38     	; 0x1342 <__addsf3x+0x5c>
    131c:	59 3f       	cpi	r21, 0xF9	; 249
    131e:	50 f4       	brcc	.+20     	; 0x1334 <__addsf3x+0x4e>
    1320:	50 3e       	cpi	r21, 0xE0	; 224
    1322:	68 f1       	brcs	.+90     	; 0x137e <__addsf3x+0x98>
    1324:	1a 16       	cp	r1, r26
    1326:	f0 40       	sbci	r31, 0x00	; 0
    1328:	a2 2f       	mov	r26, r18
    132a:	23 2f       	mov	r18, r19
    132c:	34 2f       	mov	r19, r20
    132e:	44 27       	eor	r20, r20
    1330:	58 5f       	subi	r21, 0xF8	; 248
    1332:	f3 cf       	rjmp	.-26     	; 0x131a <__addsf3x+0x34>
    1334:	46 95       	lsr	r20
    1336:	37 95       	ror	r19
    1338:	27 95       	ror	r18
    133a:	a7 95       	ror	r26
    133c:	f0 40       	sbci	r31, 0x00	; 0
    133e:	53 95       	inc	r21
    1340:	c9 f7       	brne	.-14     	; 0x1334 <__addsf3x+0x4e>
    1342:	7e f4       	brtc	.+30     	; 0x1362 <__addsf3x+0x7c>
    1344:	1f 16       	cp	r1, r31
    1346:	ba 0b       	sbc	r27, r26
    1348:	62 0b       	sbc	r22, r18
    134a:	73 0b       	sbc	r23, r19
    134c:	84 0b       	sbc	r24, r20
    134e:	ba f0       	brmi	.+46     	; 0x137e <__addsf3x+0x98>
    1350:	91 50       	subi	r25, 0x01	; 1
    1352:	a1 f0       	breq	.+40     	; 0x137c <__addsf3x+0x96>
    1354:	ff 0f       	add	r31, r31
    1356:	bb 1f       	adc	r27, r27
    1358:	66 1f       	adc	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	c2 f7       	brpl	.-16     	; 0x1350 <__addsf3x+0x6a>
    1360:	0e c0       	rjmp	.+28     	; 0x137e <__addsf3x+0x98>
    1362:	ba 0f       	add	r27, r26
    1364:	62 1f       	adc	r22, r18
    1366:	73 1f       	adc	r23, r19
    1368:	84 1f       	adc	r24, r20
    136a:	48 f4       	brcc	.+18     	; 0x137e <__addsf3x+0x98>
    136c:	87 95       	ror	r24
    136e:	77 95       	ror	r23
    1370:	67 95       	ror	r22
    1372:	b7 95       	ror	r27
    1374:	f7 95       	ror	r31
    1376:	9e 3f       	cpi	r25, 0xFE	; 254
    1378:	08 f0       	brcs	.+2      	; 0x137c <__addsf3x+0x96>
    137a:	b3 cf       	rjmp	.-154    	; 0x12e2 <__addsf3+0x1e>
    137c:	93 95       	inc	r25
    137e:	88 0f       	add	r24, r24
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__addsf3x+0x9e>
    1382:	99 27       	eor	r25, r25
    1384:	ee 0f       	add	r30, r30
    1386:	97 95       	ror	r25
    1388:	87 95       	ror	r24
    138a:	08 95       	ret

0000138c <__cmpsf2>:
    138c:	71 d0       	rcall	.+226    	; 0x1470 <__fp_cmp>
    138e:	08 f4       	brcc	.+2      	; 0x1392 <__cmpsf2+0x6>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	08 95       	ret

00001394 <__fixsfsi>:
    1394:	04 d0       	rcall	.+8      	; 0x139e <__fixunssfsi>
    1396:	68 94       	set
    1398:	b1 11       	cpse	r27, r1
    139a:	d9 c0       	rjmp	.+434    	; 0x154e <__fp_szero>
    139c:	08 95       	ret

0000139e <__fixunssfsi>:
    139e:	bc d0       	rcall	.+376    	; 0x1518 <__fp_splitA>
    13a0:	88 f0       	brcs	.+34     	; 0x13c4 <__fixunssfsi+0x26>
    13a2:	9f 57       	subi	r25, 0x7F	; 127
    13a4:	90 f0       	brcs	.+36     	; 0x13ca <__fixunssfsi+0x2c>
    13a6:	b9 2f       	mov	r27, r25
    13a8:	99 27       	eor	r25, r25
    13aa:	b7 51       	subi	r27, 0x17	; 23
    13ac:	a0 f0       	brcs	.+40     	; 0x13d6 <__fixunssfsi+0x38>
    13ae:	d1 f0       	breq	.+52     	; 0x13e4 <__fixunssfsi+0x46>
    13b0:	66 0f       	add	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	1a f0       	brmi	.+6      	; 0x13c0 <__fixunssfsi+0x22>
    13ba:	ba 95       	dec	r27
    13bc:	c9 f7       	brne	.-14     	; 0x13b0 <__fixunssfsi+0x12>
    13be:	12 c0       	rjmp	.+36     	; 0x13e4 <__fixunssfsi+0x46>
    13c0:	b1 30       	cpi	r27, 0x01	; 1
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <__fixunssfsi+0x46>
    13c4:	c3 d0       	rcall	.+390    	; 0x154c <__fp_zero>
    13c6:	b1 e0       	ldi	r27, 0x01	; 1
    13c8:	08 95       	ret
    13ca:	c0 c0       	rjmp	.+384    	; 0x154c <__fp_zero>
    13cc:	67 2f       	mov	r22, r23
    13ce:	78 2f       	mov	r23, r24
    13d0:	88 27       	eor	r24, r24
    13d2:	b8 5f       	subi	r27, 0xF8	; 248
    13d4:	39 f0       	breq	.+14     	; 0x13e4 <__fixunssfsi+0x46>
    13d6:	b9 3f       	cpi	r27, 0xF9	; 249
    13d8:	cc f3       	brlt	.-14     	; 0x13cc <__fixunssfsi+0x2e>
    13da:	86 95       	lsr	r24
    13dc:	77 95       	ror	r23
    13de:	67 95       	ror	r22
    13e0:	b3 95       	inc	r27
    13e2:	d9 f7       	brne	.-10     	; 0x13da <__fixunssfsi+0x3c>
    13e4:	3e f4       	brtc	.+14     	; 0x13f4 <__fixunssfsi+0x56>
    13e6:	90 95       	com	r25
    13e8:	80 95       	com	r24
    13ea:	70 95       	com	r23
    13ec:	61 95       	neg	r22
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	8f 4f       	sbci	r24, 0xFF	; 255
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	08 95       	ret

000013f6 <__floatunsisf>:
    13f6:	e8 94       	clt
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <__floatsisf+0x12>

000013fa <__floatsisf>:
    13fa:	97 fb       	bst	r25, 7
    13fc:	3e f4       	brtc	.+14     	; 0x140c <__floatsisf+0x12>
    13fe:	90 95       	com	r25
    1400:	80 95       	com	r24
    1402:	70 95       	com	r23
    1404:	61 95       	neg	r22
    1406:	7f 4f       	sbci	r23, 0xFF	; 255
    1408:	8f 4f       	sbci	r24, 0xFF	; 255
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	99 23       	and	r25, r25
    140e:	a9 f0       	breq	.+42     	; 0x143a <__floatsisf+0x40>
    1410:	f9 2f       	mov	r31, r25
    1412:	96 e9       	ldi	r25, 0x96	; 150
    1414:	bb 27       	eor	r27, r27
    1416:	93 95       	inc	r25
    1418:	f6 95       	lsr	r31
    141a:	87 95       	ror	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	b7 95       	ror	r27
    1422:	f1 11       	cpse	r31, r1
    1424:	f8 cf       	rjmp	.-16     	; 0x1416 <__floatsisf+0x1c>
    1426:	fa f4       	brpl	.+62     	; 0x1466 <__floatsisf+0x6c>
    1428:	bb 0f       	add	r27, r27
    142a:	11 f4       	brne	.+4      	; 0x1430 <__floatsisf+0x36>
    142c:	60 ff       	sbrs	r22, 0
    142e:	1b c0       	rjmp	.+54     	; 0x1466 <__floatsisf+0x6c>
    1430:	6f 5f       	subi	r22, 0xFF	; 255
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	16 c0       	rjmp	.+44     	; 0x1466 <__floatsisf+0x6c>
    143a:	88 23       	and	r24, r24
    143c:	11 f0       	breq	.+4      	; 0x1442 <__floatsisf+0x48>
    143e:	96 e9       	ldi	r25, 0x96	; 150
    1440:	11 c0       	rjmp	.+34     	; 0x1464 <__floatsisf+0x6a>
    1442:	77 23       	and	r23, r23
    1444:	21 f0       	breq	.+8      	; 0x144e <__floatsisf+0x54>
    1446:	9e e8       	ldi	r25, 0x8E	; 142
    1448:	87 2f       	mov	r24, r23
    144a:	76 2f       	mov	r23, r22
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <__floatsisf+0x5e>
    144e:	66 23       	and	r22, r22
    1450:	71 f0       	breq	.+28     	; 0x146e <__floatsisf+0x74>
    1452:	96 e8       	ldi	r25, 0x86	; 134
    1454:	86 2f       	mov	r24, r22
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	2a f0       	brmi	.+10     	; 0x1466 <__floatsisf+0x6c>
    145c:	9a 95       	dec	r25
    145e:	66 0f       	add	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	88 1f       	adc	r24, r24
    1464:	da f7       	brpl	.-10     	; 0x145c <__floatsisf+0x62>
    1466:	88 0f       	add	r24, r24
    1468:	96 95       	lsr	r25
    146a:	87 95       	ror	r24
    146c:	97 f9       	bld	r25, 7
    146e:	08 95       	ret

00001470 <__fp_cmp>:
    1470:	99 0f       	add	r25, r25
    1472:	00 08       	sbc	r0, r0
    1474:	55 0f       	add	r21, r21
    1476:	aa 0b       	sbc	r26, r26
    1478:	e0 e8       	ldi	r30, 0x80	; 128
    147a:	fe ef       	ldi	r31, 0xFE	; 254
    147c:	16 16       	cp	r1, r22
    147e:	17 06       	cpc	r1, r23
    1480:	e8 07       	cpc	r30, r24
    1482:	f9 07       	cpc	r31, r25
    1484:	c0 f0       	brcs	.+48     	; 0x14b6 <__fp_cmp+0x46>
    1486:	12 16       	cp	r1, r18
    1488:	13 06       	cpc	r1, r19
    148a:	e4 07       	cpc	r30, r20
    148c:	f5 07       	cpc	r31, r21
    148e:	98 f0       	brcs	.+38     	; 0x14b6 <__fp_cmp+0x46>
    1490:	62 1b       	sub	r22, r18
    1492:	73 0b       	sbc	r23, r19
    1494:	84 0b       	sbc	r24, r20
    1496:	95 0b       	sbc	r25, r21
    1498:	39 f4       	brne	.+14     	; 0x14a8 <__fp_cmp+0x38>
    149a:	0a 26       	eor	r0, r26
    149c:	61 f0       	breq	.+24     	; 0x14b6 <__fp_cmp+0x46>
    149e:	23 2b       	or	r18, r19
    14a0:	24 2b       	or	r18, r20
    14a2:	25 2b       	or	r18, r21
    14a4:	21 f4       	brne	.+8      	; 0x14ae <__fp_cmp+0x3e>
    14a6:	08 95       	ret
    14a8:	0a 26       	eor	r0, r26
    14aa:	09 f4       	brne	.+2      	; 0x14ae <__fp_cmp+0x3e>
    14ac:	a1 40       	sbci	r26, 0x01	; 1
    14ae:	a6 95       	lsr	r26
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	81 1d       	adc	r24, r1
    14b4:	81 1d       	adc	r24, r1
    14b6:	08 95       	ret

000014b8 <__fp_inf>:
    14b8:	97 f9       	bld	r25, 7
    14ba:	9f 67       	ori	r25, 0x7F	; 127
    14bc:	80 e8       	ldi	r24, 0x80	; 128
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	08 95       	ret

000014c4 <__fp_nan>:
    14c4:	9f ef       	ldi	r25, 0xFF	; 255
    14c6:	80 ec       	ldi	r24, 0xC0	; 192
    14c8:	08 95       	ret

000014ca <__fp_pscA>:
    14ca:	00 24       	eor	r0, r0
    14cc:	0a 94       	dec	r0
    14ce:	16 16       	cp	r1, r22
    14d0:	17 06       	cpc	r1, r23
    14d2:	18 06       	cpc	r1, r24
    14d4:	09 06       	cpc	r0, r25
    14d6:	08 95       	ret

000014d8 <__fp_pscB>:
    14d8:	00 24       	eor	r0, r0
    14da:	0a 94       	dec	r0
    14dc:	12 16       	cp	r1, r18
    14de:	13 06       	cpc	r1, r19
    14e0:	14 06       	cpc	r1, r20
    14e2:	05 06       	cpc	r0, r21
    14e4:	08 95       	ret

000014e6 <__fp_round>:
    14e6:	09 2e       	mov	r0, r25
    14e8:	03 94       	inc	r0
    14ea:	00 0c       	add	r0, r0
    14ec:	11 f4       	brne	.+4      	; 0x14f2 <__fp_round+0xc>
    14ee:	88 23       	and	r24, r24
    14f0:	52 f0       	brmi	.+20     	; 0x1506 <__fp_round+0x20>
    14f2:	bb 0f       	add	r27, r27
    14f4:	40 f4       	brcc	.+16     	; 0x1506 <__fp_round+0x20>
    14f6:	bf 2b       	or	r27, r31
    14f8:	11 f4       	brne	.+4      	; 0x14fe <__fp_round+0x18>
    14fa:	60 ff       	sbrs	r22, 0
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <__fp_round+0x20>
    14fe:	6f 5f       	subi	r22, 0xFF	; 255
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	8f 4f       	sbci	r24, 0xFF	; 255
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	08 95       	ret

00001508 <__fp_split3>:
    1508:	57 fd       	sbrc	r21, 7
    150a:	90 58       	subi	r25, 0x80	; 128
    150c:	44 0f       	add	r20, r20
    150e:	55 1f       	adc	r21, r21
    1510:	59 f0       	breq	.+22     	; 0x1528 <__fp_splitA+0x10>
    1512:	5f 3f       	cpi	r21, 0xFF	; 255
    1514:	71 f0       	breq	.+28     	; 0x1532 <__fp_splitA+0x1a>
    1516:	47 95       	ror	r20

00001518 <__fp_splitA>:
    1518:	88 0f       	add	r24, r24
    151a:	97 fb       	bst	r25, 7
    151c:	99 1f       	adc	r25, r25
    151e:	61 f0       	breq	.+24     	; 0x1538 <__fp_splitA+0x20>
    1520:	9f 3f       	cpi	r25, 0xFF	; 255
    1522:	79 f0       	breq	.+30     	; 0x1542 <__fp_splitA+0x2a>
    1524:	87 95       	ror	r24
    1526:	08 95       	ret
    1528:	12 16       	cp	r1, r18
    152a:	13 06       	cpc	r1, r19
    152c:	14 06       	cpc	r1, r20
    152e:	55 1f       	adc	r21, r21
    1530:	f2 cf       	rjmp	.-28     	; 0x1516 <__fp_split3+0xe>
    1532:	46 95       	lsr	r20
    1534:	f1 df       	rcall	.-30     	; 0x1518 <__fp_splitA>
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <__fp_splitA+0x30>
    1538:	16 16       	cp	r1, r22
    153a:	17 06       	cpc	r1, r23
    153c:	18 06       	cpc	r1, r24
    153e:	99 1f       	adc	r25, r25
    1540:	f1 cf       	rjmp	.-30     	; 0x1524 <__fp_splitA+0xc>
    1542:	86 95       	lsr	r24
    1544:	71 05       	cpc	r23, r1
    1546:	61 05       	cpc	r22, r1
    1548:	08 94       	sec
    154a:	08 95       	ret

0000154c <__fp_zero>:
    154c:	e8 94       	clt

0000154e <__fp_szero>:
    154e:	bb 27       	eor	r27, r27
    1550:	66 27       	eor	r22, r22
    1552:	77 27       	eor	r23, r23
    1554:	cb 01       	movw	r24, r22
    1556:	97 f9       	bld	r25, 7
    1558:	08 95       	ret

0000155a <__mulsf3>:
    155a:	0b d0       	rcall	.+22     	; 0x1572 <__mulsf3x>
    155c:	c4 cf       	rjmp	.-120    	; 0x14e6 <__fp_round>
    155e:	b5 df       	rcall	.-150    	; 0x14ca <__fp_pscA>
    1560:	28 f0       	brcs	.+10     	; 0x156c <__mulsf3+0x12>
    1562:	ba df       	rcall	.-140    	; 0x14d8 <__fp_pscB>
    1564:	18 f0       	brcs	.+6      	; 0x156c <__mulsf3+0x12>
    1566:	95 23       	and	r25, r21
    1568:	09 f0       	breq	.+2      	; 0x156c <__mulsf3+0x12>
    156a:	a6 cf       	rjmp	.-180    	; 0x14b8 <__fp_inf>
    156c:	ab cf       	rjmp	.-170    	; 0x14c4 <__fp_nan>
    156e:	11 24       	eor	r1, r1
    1570:	ee cf       	rjmp	.-36     	; 0x154e <__fp_szero>

00001572 <__mulsf3x>:
    1572:	ca df       	rcall	.-108    	; 0x1508 <__fp_split3>
    1574:	a0 f3       	brcs	.-24     	; 0x155e <__mulsf3+0x4>

00001576 <__mulsf3_pse>:
    1576:	95 9f       	mul	r25, r21
    1578:	d1 f3       	breq	.-12     	; 0x156e <__mulsf3+0x14>
    157a:	95 0f       	add	r25, r21
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	55 1f       	adc	r21, r21
    1580:	62 9f       	mul	r22, r18
    1582:	f0 01       	movw	r30, r0
    1584:	72 9f       	mul	r23, r18
    1586:	bb 27       	eor	r27, r27
    1588:	f0 0d       	add	r31, r0
    158a:	b1 1d       	adc	r27, r1
    158c:	63 9f       	mul	r22, r19
    158e:	aa 27       	eor	r26, r26
    1590:	f0 0d       	add	r31, r0
    1592:	b1 1d       	adc	r27, r1
    1594:	aa 1f       	adc	r26, r26
    1596:	64 9f       	mul	r22, r20
    1598:	66 27       	eor	r22, r22
    159a:	b0 0d       	add	r27, r0
    159c:	a1 1d       	adc	r26, r1
    159e:	66 1f       	adc	r22, r22
    15a0:	82 9f       	mul	r24, r18
    15a2:	22 27       	eor	r18, r18
    15a4:	b0 0d       	add	r27, r0
    15a6:	a1 1d       	adc	r26, r1
    15a8:	62 1f       	adc	r22, r18
    15aa:	73 9f       	mul	r23, r19
    15ac:	b0 0d       	add	r27, r0
    15ae:	a1 1d       	adc	r26, r1
    15b0:	62 1f       	adc	r22, r18
    15b2:	83 9f       	mul	r24, r19
    15b4:	a0 0d       	add	r26, r0
    15b6:	61 1d       	adc	r22, r1
    15b8:	22 1f       	adc	r18, r18
    15ba:	74 9f       	mul	r23, r20
    15bc:	33 27       	eor	r19, r19
    15be:	a0 0d       	add	r26, r0
    15c0:	61 1d       	adc	r22, r1
    15c2:	23 1f       	adc	r18, r19
    15c4:	84 9f       	mul	r24, r20
    15c6:	60 0d       	add	r22, r0
    15c8:	21 1d       	adc	r18, r1
    15ca:	82 2f       	mov	r24, r18
    15cc:	76 2f       	mov	r23, r22
    15ce:	6a 2f       	mov	r22, r26
    15d0:	11 24       	eor	r1, r1
    15d2:	9f 57       	subi	r25, 0x7F	; 127
    15d4:	50 40       	sbci	r21, 0x00	; 0
    15d6:	8a f0       	brmi	.+34     	; 0x15fa <__mulsf3_pse+0x84>
    15d8:	e1 f0       	breq	.+56     	; 0x1612 <__mulsf3_pse+0x9c>
    15da:	88 23       	and	r24, r24
    15dc:	4a f0       	brmi	.+18     	; 0x15f0 <__mulsf3_pse+0x7a>
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	bb 1f       	adc	r27, r27
    15e4:	66 1f       	adc	r22, r22
    15e6:	77 1f       	adc	r23, r23
    15e8:	88 1f       	adc	r24, r24
    15ea:	91 50       	subi	r25, 0x01	; 1
    15ec:	50 40       	sbci	r21, 0x00	; 0
    15ee:	a9 f7       	brne	.-22     	; 0x15da <__mulsf3_pse+0x64>
    15f0:	9e 3f       	cpi	r25, 0xFE	; 254
    15f2:	51 05       	cpc	r21, r1
    15f4:	70 f0       	brcs	.+28     	; 0x1612 <__mulsf3_pse+0x9c>
    15f6:	60 cf       	rjmp	.-320    	; 0x14b8 <__fp_inf>
    15f8:	aa cf       	rjmp	.-172    	; 0x154e <__fp_szero>
    15fa:	5f 3f       	cpi	r21, 0xFF	; 255
    15fc:	ec f3       	brlt	.-6      	; 0x15f8 <__mulsf3_pse+0x82>
    15fe:	98 3e       	cpi	r25, 0xE8	; 232
    1600:	dc f3       	brlt	.-10     	; 0x15f8 <__mulsf3_pse+0x82>
    1602:	86 95       	lsr	r24
    1604:	77 95       	ror	r23
    1606:	67 95       	ror	r22
    1608:	b7 95       	ror	r27
    160a:	f7 95       	ror	r31
    160c:	e7 95       	ror	r30
    160e:	9f 5f       	subi	r25, 0xFF	; 255
    1610:	c1 f7       	brne	.-16     	; 0x1602 <__mulsf3_pse+0x8c>
    1612:	fe 2b       	or	r31, r30
    1614:	88 0f       	add	r24, r24
    1616:	91 1d       	adc	r25, r1
    1618:	96 95       	lsr	r25
    161a:	87 95       	ror	r24
    161c:	97 f9       	bld	r25, 7
    161e:	08 95       	ret

00001620 <pow>:
    1620:	fa 01       	movw	r30, r20
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	30 96       	adiw	r30, 0x00	; 0
    1628:	21 05       	cpc	r18, r1
    162a:	31 05       	cpc	r19, r1
    162c:	99 f1       	breq	.+102    	; 0x1694 <pow+0x74>
    162e:	61 15       	cp	r22, r1
    1630:	71 05       	cpc	r23, r1
    1632:	61 f4       	brne	.+24     	; 0x164c <pow+0x2c>
    1634:	80 38       	cpi	r24, 0x80	; 128
    1636:	bf e3       	ldi	r27, 0x3F	; 63
    1638:	9b 07       	cpc	r25, r27
    163a:	49 f1       	breq	.+82     	; 0x168e <pow+0x6e>
    163c:	68 94       	set
    163e:	90 38       	cpi	r25, 0x80	; 128
    1640:	81 05       	cpc	r24, r1
    1642:	61 f0       	breq	.+24     	; 0x165c <pow+0x3c>
    1644:	80 38       	cpi	r24, 0x80	; 128
    1646:	bf ef       	ldi	r27, 0xFF	; 255
    1648:	9b 07       	cpc	r25, r27
    164a:	41 f0       	breq	.+16     	; 0x165c <pow+0x3c>
    164c:	99 23       	and	r25, r25
    164e:	42 f5       	brpl	.+80     	; 0x16a0 <pow+0x80>
    1650:	ff 3f       	cpi	r31, 0xFF	; 255
    1652:	e1 05       	cpc	r30, r1
    1654:	31 05       	cpc	r19, r1
    1656:	21 05       	cpc	r18, r1
    1658:	11 f1       	breq	.+68     	; 0x169e <pow+0x7e>
    165a:	e8 94       	clt
    165c:	08 94       	sec
    165e:	e7 95       	ror	r30
    1660:	d9 01       	movw	r26, r18
    1662:	aa 23       	and	r26, r26
    1664:	29 f4       	brne	.+10     	; 0x1670 <pow+0x50>
    1666:	ab 2f       	mov	r26, r27
    1668:	be 2f       	mov	r27, r30
    166a:	f8 5f       	subi	r31, 0xF8	; 248
    166c:	d0 f3       	brcs	.-12     	; 0x1662 <pow+0x42>
    166e:	10 c0       	rjmp	.+32     	; 0x1690 <pow+0x70>
    1670:	ff 5f       	subi	r31, 0xFF	; 255
    1672:	70 f4       	brcc	.+28     	; 0x1690 <pow+0x70>
    1674:	a6 95       	lsr	r26
    1676:	e0 f7       	brcc	.-8      	; 0x1670 <pow+0x50>
    1678:	f7 39       	cpi	r31, 0x97	; 151
    167a:	50 f0       	brcs	.+20     	; 0x1690 <pow+0x70>
    167c:	19 f0       	breq	.+6      	; 0x1684 <pow+0x64>
    167e:	ff 3a       	cpi	r31, 0xAF	; 175
    1680:	38 f4       	brcc	.+14     	; 0x1690 <pow+0x70>
    1682:	9f 77       	andi	r25, 0x7F	; 127
    1684:	9f 93       	push	r25
    1686:	0c d0       	rcall	.+24     	; 0x16a0 <pow+0x80>
    1688:	0f 90       	pop	r0
    168a:	07 fc       	sbrc	r0, 7
    168c:	90 58       	subi	r25, 0x80	; 128
    168e:	08 95       	ret
    1690:	3e f0       	brts	.+14     	; 0x16a0 <pow+0x80>
    1692:	18 cf       	rjmp	.-464    	; 0x14c4 <__fp_nan>
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	80 e8       	ldi	r24, 0x80	; 128
    169a:	9f e3       	ldi	r25, 0x3F	; 63
    169c:	08 95       	ret
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	9f 77       	andi	r25, 0x7F	; 127
    16a2:	5f 93       	push	r21
    16a4:	4f 93       	push	r20
    16a6:	3f 93       	push	r19
    16a8:	2f 93       	push	r18
    16aa:	9e d0       	rcall	.+316    	; 0x17e8 <log>
    16ac:	2f 91       	pop	r18
    16ae:	3f 91       	pop	r19
    16b0:	4f 91       	pop	r20
    16b2:	5f 91       	pop	r21
    16b4:	52 df       	rcall	.-348    	; 0x155a <__mulsf3>
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <exp>
    16b8:	19 f4       	brne	.+6      	; 0x16c0 <pow+0xa0>
    16ba:	0e f0       	brts	.+2      	; 0x16be <pow+0x9e>
    16bc:	fd ce       	rjmp	.-518    	; 0x14b8 <__fp_inf>
    16be:	46 cf       	rjmp	.-372    	; 0x154c <__fp_zero>
    16c0:	01 cf       	rjmp	.-510    	; 0x14c4 <__fp_nan>

000016c2 <exp>:
    16c2:	2a df       	rcall	.-428    	; 0x1518 <__fp_splitA>
    16c4:	c8 f3       	brcs	.-14     	; 0x16b8 <pow+0x98>
    16c6:	96 38       	cpi	r25, 0x86	; 134
    16c8:	c0 f7       	brcc	.-16     	; 0x16ba <pow+0x9a>
    16ca:	07 f8       	bld	r0, 7
    16cc:	0f 92       	push	r0
    16ce:	e8 94       	clt
    16d0:	2b e3       	ldi	r18, 0x3B	; 59
    16d2:	3a ea       	ldi	r19, 0xAA	; 170
    16d4:	48 eb       	ldi	r20, 0xB8	; 184
    16d6:	5f e7       	ldi	r21, 0x7F	; 127
    16d8:	4e df       	rcall	.-356    	; 0x1576 <__mulsf3_pse>
    16da:	0f 92       	push	r0
    16dc:	0f 92       	push	r0
    16de:	0f 92       	push	r0
    16e0:	4d b7       	in	r20, 0x3d	; 61
    16e2:	5e b7       	in	r21, 0x3e	; 62
    16e4:	0f 92       	push	r0
    16e6:	c0 d0       	rcall	.+384    	; 0x1868 <modf>
    16e8:	e4 ee       	ldi	r30, 0xE4	; 228
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	16 d0       	rcall	.+44     	; 0x171a <__fp_powser>
    16ee:	4f 91       	pop	r20
    16f0:	5f 91       	pop	r21
    16f2:	ef 91       	pop	r30
    16f4:	ff 91       	pop	r31
    16f6:	e5 95       	asr	r30
    16f8:	ee 1f       	adc	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	49 f0       	breq	.+18     	; 0x1710 <exp+0x4e>
    16fe:	fe 57       	subi	r31, 0x7E	; 126
    1700:	e0 68       	ori	r30, 0x80	; 128
    1702:	44 27       	eor	r20, r20
    1704:	ee 0f       	add	r30, r30
    1706:	44 1f       	adc	r20, r20
    1708:	fa 95       	dec	r31
    170a:	e1 f7       	brne	.-8      	; 0x1704 <exp+0x42>
    170c:	41 95       	neg	r20
    170e:	55 0b       	sbc	r21, r21
    1710:	32 d0       	rcall	.+100    	; 0x1776 <ldexp>
    1712:	0f 90       	pop	r0
    1714:	07 fe       	sbrs	r0, 7
    1716:	26 c0       	rjmp	.+76     	; 0x1764 <inverse>
    1718:	08 95       	ret

0000171a <__fp_powser>:
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	1f 93       	push	r17
    1720:	0f 93       	push	r16
    1722:	ff 92       	push	r15
    1724:	ef 92       	push	r14
    1726:	df 92       	push	r13
    1728:	7b 01       	movw	r14, r22
    172a:	8c 01       	movw	r16, r24
    172c:	68 94       	set
    172e:	05 c0       	rjmp	.+10     	; 0x173a <__fp_powser+0x20>
    1730:	da 2e       	mov	r13, r26
    1732:	ef 01       	movw	r28, r30
    1734:	1e df       	rcall	.-452    	; 0x1572 <__mulsf3x>
    1736:	fe 01       	movw	r30, r28
    1738:	e8 94       	clt
    173a:	a5 91       	lpm	r26, Z+
    173c:	25 91       	lpm	r18, Z+
    173e:	35 91       	lpm	r19, Z+
    1740:	45 91       	lpm	r20, Z+
    1742:	55 91       	lpm	r21, Z+
    1744:	ae f3       	brts	.-22     	; 0x1730 <__fp_powser+0x16>
    1746:	ef 01       	movw	r28, r30
    1748:	ce dd       	rcall	.-1124   	; 0x12e6 <__addsf3x>
    174a:	fe 01       	movw	r30, r28
    174c:	97 01       	movw	r18, r14
    174e:	a8 01       	movw	r20, r16
    1750:	da 94       	dec	r13
    1752:	79 f7       	brne	.-34     	; 0x1732 <__fp_powser+0x18>
    1754:	df 90       	pop	r13
    1756:	ef 90       	pop	r14
    1758:	ff 90       	pop	r15
    175a:	0f 91       	pop	r16
    175c:	1f 91       	pop	r17
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <inverse>:
    1764:	9b 01       	movw	r18, r22
    1766:	ac 01       	movw	r20, r24
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	80 e8       	ldi	r24, 0x80	; 128
    176e:	9f e3       	ldi	r25, 0x3F	; 63
    1770:	ae c0       	rjmp	.+348    	; 0x18ce <__divsf3>
    1772:	a2 ce       	rjmp	.-700    	; 0x14b8 <__fp_inf>
    1774:	14 c1       	rjmp	.+552    	; 0x199e <__fp_mpack>

00001776 <ldexp>:
    1776:	d0 de       	rcall	.-608    	; 0x1518 <__fp_splitA>
    1778:	e8 f3       	brcs	.-6      	; 0x1774 <inverse+0x10>
    177a:	99 23       	and	r25, r25
    177c:	d9 f3       	breq	.-10     	; 0x1774 <inverse+0x10>
    177e:	94 0f       	add	r25, r20
    1780:	51 1d       	adc	r21, r1
    1782:	bb f3       	brvs	.-18     	; 0x1772 <inverse+0xe>
    1784:	91 50       	subi	r25, 0x01	; 1
    1786:	50 40       	sbci	r21, 0x00	; 0
    1788:	94 f0       	brlt	.+36     	; 0x17ae <ldexp+0x38>
    178a:	59 f0       	breq	.+22     	; 0x17a2 <ldexp+0x2c>
    178c:	88 23       	and	r24, r24
    178e:	32 f0       	brmi	.+12     	; 0x179c <ldexp+0x26>
    1790:	66 0f       	add	r22, r22
    1792:	77 1f       	adc	r23, r23
    1794:	88 1f       	adc	r24, r24
    1796:	91 50       	subi	r25, 0x01	; 1
    1798:	50 40       	sbci	r21, 0x00	; 0
    179a:	c1 f7       	brne	.-16     	; 0x178c <ldexp+0x16>
    179c:	9e 3f       	cpi	r25, 0xFE	; 254
    179e:	51 05       	cpc	r21, r1
    17a0:	44 f7       	brge	.-48     	; 0x1772 <inverse+0xe>
    17a2:	88 0f       	add	r24, r24
    17a4:	91 1d       	adc	r25, r1
    17a6:	96 95       	lsr	r25
    17a8:	87 95       	ror	r24
    17aa:	97 f9       	bld	r25, 7
    17ac:	08 95       	ret
    17ae:	5f 3f       	cpi	r21, 0xFF	; 255
    17b0:	ac f0       	brlt	.+42     	; 0x17dc <ldexp+0x66>
    17b2:	98 3e       	cpi	r25, 0xE8	; 232
    17b4:	9c f0       	brlt	.+38     	; 0x17dc <ldexp+0x66>
    17b6:	bb 27       	eor	r27, r27
    17b8:	86 95       	lsr	r24
    17ba:	77 95       	ror	r23
    17bc:	67 95       	ror	r22
    17be:	b7 95       	ror	r27
    17c0:	08 f4       	brcc	.+2      	; 0x17c4 <ldexp+0x4e>
    17c2:	b1 60       	ori	r27, 0x01	; 1
    17c4:	93 95       	inc	r25
    17c6:	c1 f7       	brne	.-16     	; 0x17b8 <ldexp+0x42>
    17c8:	bb 0f       	add	r27, r27
    17ca:	58 f7       	brcc	.-42     	; 0x17a2 <ldexp+0x2c>
    17cc:	11 f4       	brne	.+4      	; 0x17d2 <ldexp+0x5c>
    17ce:	60 ff       	sbrs	r22, 0
    17d0:	e8 cf       	rjmp	.-48     	; 0x17a2 <ldexp+0x2c>
    17d2:	6f 5f       	subi	r22, 0xFF	; 255
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	8f 4f       	sbci	r24, 0xFF	; 255
    17d8:	9f 4f       	sbci	r25, 0xFF	; 255
    17da:	e3 cf       	rjmp	.-58     	; 0x17a2 <ldexp+0x2c>
    17dc:	b8 ce       	rjmp	.-656    	; 0x154e <__fp_szero>
    17de:	0e f0       	brts	.+2      	; 0x17e2 <ldexp+0x6c>
    17e0:	de c0       	rjmp	.+444    	; 0x199e <__fp_mpack>
    17e2:	70 ce       	rjmp	.-800    	; 0x14c4 <__fp_nan>
    17e4:	68 94       	set
    17e6:	68 ce       	rjmp	.-816    	; 0x14b8 <__fp_inf>

000017e8 <log>:
    17e8:	97 de       	rcall	.-722    	; 0x1518 <__fp_splitA>
    17ea:	c8 f3       	brcs	.-14     	; 0x17de <ldexp+0x68>
    17ec:	99 23       	and	r25, r25
    17ee:	d1 f3       	breq	.-12     	; 0x17e4 <ldexp+0x6e>
    17f0:	c6 f3       	brts	.-16     	; 0x17e2 <ldexp+0x6c>
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	1f 93       	push	r17
    17f8:	0f 93       	push	r16
    17fa:	ff 92       	push	r15
    17fc:	c9 2f       	mov	r28, r25
    17fe:	dd 27       	eor	r29, r29
    1800:	88 23       	and	r24, r24
    1802:	2a f0       	brmi	.+10     	; 0x180e <log+0x26>
    1804:	21 97       	sbiw	r28, 0x01	; 1
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	da f7       	brpl	.-10     	; 0x1804 <log+0x1c>
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f eb       	ldi	r21, 0xBF	; 191
    1816:	9f e3       	ldi	r25, 0x3F	; 63
    1818:	88 39       	cpi	r24, 0x98	; 152
    181a:	20 f0       	brcs	.+8      	; 0x1824 <log+0x3c>
    181c:	80 3e       	cpi	r24, 0xE0	; 224
    181e:	30 f0       	brcs	.+12     	; 0x182c <log+0x44>
    1820:	21 96       	adiw	r28, 0x01	; 1
    1822:	8f 77       	andi	r24, 0x7F	; 127
    1824:	4f dd       	rcall	.-1378   	; 0x12c4 <__addsf3>
    1826:	ec e0       	ldi	r30, 0x0C	; 12
    1828:	f1 e0       	ldi	r31, 0x01	; 1
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <log+0x4a>
    182c:	4b dd       	rcall	.-1386   	; 0x12c4 <__addsf3>
    182e:	e9 e3       	ldi	r30, 0x39	; 57
    1830:	f1 e0       	ldi	r31, 0x01	; 1
    1832:	73 df       	rcall	.-282    	; 0x171a <__fp_powser>
    1834:	8b 01       	movw	r16, r22
    1836:	be 01       	movw	r22, r28
    1838:	ec 01       	movw	r28, r24
    183a:	fb 2e       	mov	r15, r27
    183c:	6f 57       	subi	r22, 0x7F	; 127
    183e:	71 09       	sbc	r23, r1
    1840:	75 95       	asr	r23
    1842:	77 1f       	adc	r23, r23
    1844:	88 0b       	sbc	r24, r24
    1846:	99 0b       	sbc	r25, r25
    1848:	d8 dd       	rcall	.-1104   	; 0x13fa <__floatsisf>
    184a:	28 e1       	ldi	r18, 0x18	; 24
    184c:	32 e7       	ldi	r19, 0x72	; 114
    184e:	41 e3       	ldi	r20, 0x31	; 49
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	8f de       	rcall	.-738    	; 0x1572 <__mulsf3x>
    1854:	af 2d       	mov	r26, r15
    1856:	98 01       	movw	r18, r16
    1858:	ae 01       	movw	r20, r28
    185a:	ff 90       	pop	r15
    185c:	0f 91       	pop	r16
    185e:	1f 91       	pop	r17
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	40 dd       	rcall	.-1408   	; 0x12e6 <__addsf3x>
    1866:	3f ce       	rjmp	.-898    	; 0x14e6 <__fp_round>

00001868 <modf>:
    1868:	fa 01       	movw	r30, r20
    186a:	dc 01       	movw	r26, r24
    186c:	aa 0f       	add	r26, r26
    186e:	bb 1f       	adc	r27, r27
    1870:	9b 01       	movw	r18, r22
    1872:	ac 01       	movw	r20, r24
    1874:	bf 57       	subi	r27, 0x7F	; 127
    1876:	28 f4       	brcc	.+10     	; 0x1882 <modf+0x1a>
    1878:	22 27       	eor	r18, r18
    187a:	33 27       	eor	r19, r19
    187c:	44 27       	eor	r20, r20
    187e:	50 78       	andi	r21, 0x80	; 128
    1880:	1f c0       	rjmp	.+62     	; 0x18c0 <modf+0x58>
    1882:	b7 51       	subi	r27, 0x17	; 23
    1884:	88 f4       	brcc	.+34     	; 0x18a8 <modf+0x40>
    1886:	ab 2f       	mov	r26, r27
    1888:	00 24       	eor	r0, r0
    188a:	46 95       	lsr	r20
    188c:	37 95       	ror	r19
    188e:	27 95       	ror	r18
    1890:	01 1c       	adc	r0, r1
    1892:	a3 95       	inc	r26
    1894:	d2 f3       	brmi	.-12     	; 0x188a <modf+0x22>
    1896:	00 20       	and	r0, r0
    1898:	69 f0       	breq	.+26     	; 0x18b4 <modf+0x4c>
    189a:	22 0f       	add	r18, r18
    189c:	33 1f       	adc	r19, r19
    189e:	44 1f       	adc	r20, r20
    18a0:	b3 95       	inc	r27
    18a2:	da f3       	brmi	.-10     	; 0x189a <modf+0x32>
    18a4:	0d d0       	rcall	.+26     	; 0x18c0 <modf+0x58>
    18a6:	0d cd       	rjmp	.-1510   	; 0x12c2 <__subsf3>
    18a8:	61 30       	cpi	r22, 0x01	; 1
    18aa:	71 05       	cpc	r23, r1
    18ac:	a0 e8       	ldi	r26, 0x80	; 128
    18ae:	8a 07       	cpc	r24, r26
    18b0:	b9 46       	sbci	r27, 0x69	; 105
    18b2:	30 f4       	brcc	.+12     	; 0x18c0 <modf+0x58>
    18b4:	9b 01       	movw	r18, r22
    18b6:	ac 01       	movw	r20, r24
    18b8:	66 27       	eor	r22, r22
    18ba:	77 27       	eor	r23, r23
    18bc:	88 27       	eor	r24, r24
    18be:	90 78       	andi	r25, 0x80	; 128
    18c0:	30 96       	adiw	r30, 0x00	; 0
    18c2:	21 f0       	breq	.+8      	; 0x18cc <modf+0x64>
    18c4:	20 83       	st	Z, r18
    18c6:	31 83       	std	Z+1, r19	; 0x01
    18c8:	42 83       	std	Z+2, r20	; 0x02
    18ca:	53 83       	std	Z+3, r21	; 0x03
    18cc:	08 95       	ret

000018ce <__divsf3>:
    18ce:	0c d0       	rcall	.+24     	; 0x18e8 <__divsf3x>
    18d0:	0a ce       	rjmp	.-1004   	; 0x14e6 <__fp_round>
    18d2:	02 de       	rcall	.-1020   	; 0x14d8 <__fp_pscB>
    18d4:	40 f0       	brcs	.+16     	; 0x18e6 <__divsf3+0x18>
    18d6:	f9 dd       	rcall	.-1038   	; 0x14ca <__fp_pscA>
    18d8:	30 f0       	brcs	.+12     	; 0x18e6 <__divsf3+0x18>
    18da:	21 f4       	brne	.+8      	; 0x18e4 <__divsf3+0x16>
    18dc:	5f 3f       	cpi	r21, 0xFF	; 255
    18de:	19 f0       	breq	.+6      	; 0x18e6 <__divsf3+0x18>
    18e0:	eb cd       	rjmp	.-1066   	; 0x14b8 <__fp_inf>
    18e2:	51 11       	cpse	r21, r1
    18e4:	34 ce       	rjmp	.-920    	; 0x154e <__fp_szero>
    18e6:	ee cd       	rjmp	.-1060   	; 0x14c4 <__fp_nan>

000018e8 <__divsf3x>:
    18e8:	0f de       	rcall	.-994    	; 0x1508 <__fp_split3>
    18ea:	98 f3       	brcs	.-26     	; 0x18d2 <__divsf3+0x4>

000018ec <__divsf3_pse>:
    18ec:	99 23       	and	r25, r25
    18ee:	c9 f3       	breq	.-14     	; 0x18e2 <__divsf3+0x14>
    18f0:	55 23       	and	r21, r21
    18f2:	b1 f3       	breq	.-20     	; 0x18e0 <__divsf3+0x12>
    18f4:	95 1b       	sub	r25, r21
    18f6:	55 0b       	sbc	r21, r21
    18f8:	bb 27       	eor	r27, r27
    18fa:	aa 27       	eor	r26, r26
    18fc:	62 17       	cp	r22, r18
    18fe:	73 07       	cpc	r23, r19
    1900:	84 07       	cpc	r24, r20
    1902:	38 f0       	brcs	.+14     	; 0x1912 <__divsf3_pse+0x26>
    1904:	9f 5f       	subi	r25, 0xFF	; 255
    1906:	5f 4f       	sbci	r21, 0xFF	; 255
    1908:	22 0f       	add	r18, r18
    190a:	33 1f       	adc	r19, r19
    190c:	44 1f       	adc	r20, r20
    190e:	aa 1f       	adc	r26, r26
    1910:	a9 f3       	breq	.-22     	; 0x18fc <__divsf3_pse+0x10>
    1912:	33 d0       	rcall	.+102    	; 0x197a <__divsf3_pse+0x8e>
    1914:	0e 2e       	mov	r0, r30
    1916:	3a f0       	brmi	.+14     	; 0x1926 <__divsf3_pse+0x3a>
    1918:	e0 e8       	ldi	r30, 0x80	; 128
    191a:	30 d0       	rcall	.+96     	; 0x197c <__divsf3_pse+0x90>
    191c:	91 50       	subi	r25, 0x01	; 1
    191e:	50 40       	sbci	r21, 0x00	; 0
    1920:	e6 95       	lsr	r30
    1922:	00 1c       	adc	r0, r0
    1924:	ca f7       	brpl	.-14     	; 0x1918 <__divsf3_pse+0x2c>
    1926:	29 d0       	rcall	.+82     	; 0x197a <__divsf3_pse+0x8e>
    1928:	fe 2f       	mov	r31, r30
    192a:	27 d0       	rcall	.+78     	; 0x197a <__divsf3_pse+0x8e>
    192c:	66 0f       	add	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	bb 1f       	adc	r27, r27
    1934:	26 17       	cp	r18, r22
    1936:	37 07       	cpc	r19, r23
    1938:	48 07       	cpc	r20, r24
    193a:	ab 07       	cpc	r26, r27
    193c:	b0 e8       	ldi	r27, 0x80	; 128
    193e:	09 f0       	breq	.+2      	; 0x1942 <__divsf3_pse+0x56>
    1940:	bb 0b       	sbc	r27, r27
    1942:	80 2d       	mov	r24, r0
    1944:	bf 01       	movw	r22, r30
    1946:	ff 27       	eor	r31, r31
    1948:	93 58       	subi	r25, 0x83	; 131
    194a:	5f 4f       	sbci	r21, 0xFF	; 255
    194c:	2a f0       	brmi	.+10     	; 0x1958 <__divsf3_pse+0x6c>
    194e:	9e 3f       	cpi	r25, 0xFE	; 254
    1950:	51 05       	cpc	r21, r1
    1952:	68 f0       	brcs	.+26     	; 0x196e <__divsf3_pse+0x82>
    1954:	b1 cd       	rjmp	.-1182   	; 0x14b8 <__fp_inf>
    1956:	fb cd       	rjmp	.-1034   	; 0x154e <__fp_szero>
    1958:	5f 3f       	cpi	r21, 0xFF	; 255
    195a:	ec f3       	brlt	.-6      	; 0x1956 <__divsf3_pse+0x6a>
    195c:	98 3e       	cpi	r25, 0xE8	; 232
    195e:	dc f3       	brlt	.-10     	; 0x1956 <__divsf3_pse+0x6a>
    1960:	86 95       	lsr	r24
    1962:	77 95       	ror	r23
    1964:	67 95       	ror	r22
    1966:	b7 95       	ror	r27
    1968:	f7 95       	ror	r31
    196a:	9f 5f       	subi	r25, 0xFF	; 255
    196c:	c9 f7       	brne	.-14     	; 0x1960 <__divsf3_pse+0x74>
    196e:	88 0f       	add	r24, r24
    1970:	91 1d       	adc	r25, r1
    1972:	96 95       	lsr	r25
    1974:	87 95       	ror	r24
    1976:	97 f9       	bld	r25, 7
    1978:	08 95       	ret
    197a:	e1 e0       	ldi	r30, 0x01	; 1
    197c:	66 0f       	add	r22, r22
    197e:	77 1f       	adc	r23, r23
    1980:	88 1f       	adc	r24, r24
    1982:	bb 1f       	adc	r27, r27
    1984:	62 17       	cp	r22, r18
    1986:	73 07       	cpc	r23, r19
    1988:	84 07       	cpc	r24, r20
    198a:	ba 07       	cpc	r27, r26
    198c:	20 f0       	brcs	.+8      	; 0x1996 <__divsf3_pse+0xaa>
    198e:	62 1b       	sub	r22, r18
    1990:	73 0b       	sbc	r23, r19
    1992:	84 0b       	sbc	r24, r20
    1994:	ba 0b       	sbc	r27, r26
    1996:	ee 1f       	adc	r30, r30
    1998:	88 f7       	brcc	.-30     	; 0x197c <__divsf3_pse+0x90>
    199a:	e0 95       	com	r30
    199c:	08 95       	ret

0000199e <__fp_mpack>:
    199e:	9f 3f       	cpi	r25, 0xFF	; 255
    19a0:	31 f0       	breq	.+12     	; 0x19ae <__fp_mpack_finite+0xc>

000019a2 <__fp_mpack_finite>:
    19a2:	91 50       	subi	r25, 0x01	; 1
    19a4:	20 f4       	brcc	.+8      	; 0x19ae <__fp_mpack_finite+0xc>
    19a6:	87 95       	ror	r24
    19a8:	77 95       	ror	r23
    19aa:	67 95       	ror	r22
    19ac:	b7 95       	ror	r27
    19ae:	88 0f       	add	r24, r24
    19b0:	91 1d       	adc	r25, r1
    19b2:	96 95       	lsr	r25
    19b4:	87 95       	ror	r24
    19b6:	97 f9       	bld	r25, 7
    19b8:	08 95       	ret

000019ba <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    19ba:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    19bc:	91 8d       	ldd	r25, Z+25	; 0x19
    19be:	22 8d       	ldd	r18, Z+26	; 0x1a
    19c0:	89 2f       	mov	r24, r25
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	80 5c       	subi	r24, 0xC0	; 192
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	82 1b       	sub	r24, r18
    19ca:	91 09       	sbc	r25, r1
}
    19cc:	8f 73       	andi	r24, 0x3F	; 63
    19ce:	99 27       	eor	r25, r25
    19d0:	08 95       	ret

000019d2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    19d2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    19d4:	91 8d       	ldd	r25, Z+25	; 0x19
    19d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    19d8:	98 17       	cp	r25, r24
    19da:	31 f0       	breq	.+12     	; 0x19e8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    19dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    19de:	e8 0f       	add	r30, r24
    19e0:	f1 1d       	adc	r31, r1
    19e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    19ec:	08 95       	ret

000019ee <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    19ee:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    19f0:	91 8d       	ldd	r25, Z+25	; 0x19
    19f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    19f4:	98 17       	cp	r25, r24
    19f6:	61 f0       	breq	.+24     	; 0x1a10 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    19f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    19fa:	df 01       	movw	r26, r30
    19fc:	a8 0f       	add	r26, r24
    19fe:	b1 1d       	adc	r27, r1
    1a00:	5d 96       	adiw	r26, 0x1d	; 29
    1a02:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1a04:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a06:	9f 5f       	subi	r25, 0xFF	; 255
    1a08:	9f 73       	andi	r25, 0x3F	; 63
    1a0a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1a14:	08 95       	ret

00001a16 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1a16:	fc 01       	movw	r30, r24
    1a18:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1a1a:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a1c:	25 2f       	mov	r18, r21
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	84 2f       	mov	r24, r20
    1a22:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1a24:	82 1b       	sub	r24, r18
    1a26:	93 0b       	sbc	r25, r19
    1a28:	54 17       	cp	r21, r20
    1a2a:	10 f0       	brcs	.+4      	; 0x1a30 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1a2c:	cf 96       	adiw	r24, 0x3f	; 63
    1a2e:	08 95       	ret
  return tail - head - 1;
    1a30:	01 97       	sbiw	r24, 0x01	; 1
}
    1a32:	08 95       	ret

00001a34 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1a34:	8c ea       	ldi	r24, 0xAC	; 172
    1a36:	9e e0       	ldi	r25, 0x0E	; 14
    1a38:	89 2b       	or	r24, r25
    1a3a:	39 f0       	breq	.+14     	; 0x1a4a <_Z14serialEventRunv+0x16>
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	89 2b       	or	r24, r25
    1a42:	19 f0       	breq	.+6      	; 0x1a4a <_Z14serialEventRunv+0x16>
    1a44:	89 d1       	rcall	.+786    	; 0x1d58 <_Z17Serial0_availablev>
    1a46:	81 11       	cpse	r24, r1
    1a48:	24 c0       	rjmp	.+72     	; 0x1a92 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1a4a:	81 e4       	ldi	r24, 0x41	; 65
    1a4c:	9f e0       	ldi	r25, 0x0F	; 15
    1a4e:	89 2b       	or	r24, r25
    1a50:	39 f0       	breq	.+14     	; 0x1a60 <_Z14serialEventRunv+0x2c>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	89 2b       	or	r24, r25
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <_Z14serialEventRunv+0x2c>
    1a5a:	13 d2       	rcall	.+1062   	; 0x1e82 <_Z17Serial1_availablev>
    1a5c:	81 11       	cpse	r24, r1
    1a5e:	1c c0       	rjmp	.+56     	; 0x1a98 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	89 2b       	or	r24, r25
    1a66:	41 f0       	breq	.+16     	; 0x1a78 <_Z14serialEventRunv+0x44>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	89 2b       	or	r24, r25
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <_Z14serialEventRunv+0x44>
    1a70:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a74:	81 11       	cpse	r24, r1
    1a76:	13 c0       	rjmp	.+38     	; 0x1a9e <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	89 2b       	or	r24, r25
    1a7e:	a1 f0       	breq	.+40     	; 0x1aa8 <_Z14serialEventRunv+0x74>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	89 2b       	or	r24, r25
    1a86:	81 f0       	breq	.+32     	; 0x1aa8 <_Z14serialEventRunv+0x74>
    1a88:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a8c:	81 11       	cpse	r24, r1
    1a8e:	0a c0       	rjmp	.+20     	; 0x1aa4 <_Z14serialEventRunv+0x70>
    1a90:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1a92:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a96:	d9 cf       	rjmp	.-78     	; 0x1a4a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1a98:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a9c:	e1 cf       	rjmp	.-62     	; 0x1a60 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1a9e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1aa2:	ea cf       	rjmp	.-44     	; 0x1a78 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1aa4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1aa8:	08 95       	ret

00001aaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1aaa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1aac:	84 8d       	ldd	r24, Z+28	; 0x1c
    1aae:	df 01       	movw	r26, r30
    1ab0:	a8 0f       	add	r26, r24
    1ab2:	b1 1d       	adc	r27, r1
    1ab4:	a3 5a       	subi	r26, 0xA3	; 163
    1ab6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1aba:	84 8d       	ldd	r24, Z+28	; 0x1c
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	8f 73       	andi	r24, 0x3F	; 63
    1ac2:	99 27       	eor	r25, r25
    1ac4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1ac6:	a6 89       	ldd	r26, Z+22	; 0x16
    1ac8:	b7 89       	ldd	r27, Z+23	; 0x17
    1aca:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1acc:	a0 89       	ldd	r26, Z+16	; 0x10
    1ace:	b1 89       	ldd	r27, Z+17	; 0x11
    1ad0:	8c 91       	ld	r24, X
    1ad2:	83 70       	andi	r24, 0x03	; 3
    1ad4:	80 64       	ori	r24, 0x40	; 64
    1ad6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1ad8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ada:	84 8d       	ldd	r24, Z+28	; 0x1c
    1adc:	98 13       	cpse	r25, r24
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1ae0:	02 88       	ldd	r0, Z+18	; 0x12
    1ae2:	f3 89       	ldd	r31, Z+19	; 0x13
    1ae4:	e0 2d       	mov	r30, r0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8f 7d       	andi	r24, 0xDF	; 223
    1aea:	80 83       	st	Z, r24
    1aec:	08 95       	ret

00001aee <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	ec 01       	movw	r28, r24
  _written = true;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1b00:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b04:	98 13       	cpse	r25, r24
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <_ZN14HardwareSerial5writeEh+0x24>
    1b08:	e8 89       	ldd	r30, Y+16	; 0x10
    1b0a:	f9 89       	ldd	r31, Y+17	; 0x11
    1b0c:	80 81       	ld	r24, Z
    1b0e:	85 fd       	sbrc	r24, 5
    1b10:	25 c0       	rjmp	.+74     	; 0x1b5c <_ZN14HardwareSerial5writeEh+0x6e>
    1b12:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1b14:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1b16:	10 e0       	ldi	r17, 0x00	; 0
    1b18:	0f 5f       	subi	r16, 0xFF	; 255
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	0f 73       	andi	r16, 0x3F	; 63
    1b1e:	11 27       	eor	r17, r17
    1b20:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1b22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b24:	e8 12       	cpse	r14, r24
    1b26:	0b c0       	rjmp	.+22     	; 0x1b3e <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	07 fc       	sbrc	r0, 7
    1b2c:	fa cf       	rjmp	.-12     	; 0x1b22 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1b2e:	e8 89       	ldd	r30, Y+16	; 0x10
    1b30:	f9 89       	ldd	r31, Y+17	; 0x11
    1b32:	80 81       	ld	r24, Z
    1b34:	85 ff       	sbrs	r24, 5
    1b36:	f5 cf       	rjmp	.-22     	; 0x1b22 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1b38:	ce 01       	movw	r24, r28
    1b3a:	b7 df       	rcall	.-146    	; 0x1aaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b3c:	f2 cf       	rjmp	.-28     	; 0x1b22 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b40:	fe 01       	movw	r30, r28
    1b42:	e8 0f       	add	r30, r24
    1b44:	f1 1d       	adc	r31, r1
    1b46:	e3 5a       	subi	r30, 0xA3	; 163
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1b4c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b4e:	f8 94       	cli
    _tx_buffer_head = i;
    1b50:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1b52:	ea 89       	ldd	r30, Y+18	; 0x12
    1b54:	fb 89       	ldd	r31, Y+19	; 0x13
    1b56:	80 81       	ld	r24, Z
    1b58:	80 62       	ori	r24, 0x20	; 32
    1b5a:	0a c0       	rjmp	.+20     	; 0x1b70 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1b5c:	9f b7       	in	r25, 0x3f	; 63
    1b5e:	f8 94       	cli
      *_udr = c;
    1b60:	ee 89       	ldd	r30, Y+22	; 0x16
    1b62:	ff 89       	ldd	r31, Y+23	; 0x17
    1b64:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1b66:	e8 89       	ldd	r30, Y+16	; 0x10
    1b68:	f9 89       	ldd	r31, Y+17	; 0x11
    1b6a:	80 81       	ld	r24, Z
    1b6c:	83 70       	andi	r24, 0x03	; 3
    1b6e:	80 64       	ori	r24, 0x40	; 64
    1b70:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b72:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	08 95       	ret

00001b86 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1b8c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b8e:	88 23       	and	r24, r24
    1b90:	c1 f0       	breq	.+48     	; 0x1bc2 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b92:	ea 89       	ldd	r30, Y+18	; 0x12
    1b94:	fb 89       	ldd	r31, Y+19	; 0x13
    1b96:	80 81       	ld	r24, Z
    1b98:	85 fd       	sbrc	r24, 5
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <_ZN14HardwareSerial5flushEv+0x20>
    1b9c:	a8 89       	ldd	r26, Y+16	; 0x10
    1b9e:	b9 89       	ldd	r27, Y+17	; 0x11
    1ba0:	8c 91       	ld	r24, X
    1ba2:	86 fd       	sbrc	r24, 6
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	07 fc       	sbrc	r0, 7
    1baa:	f5 cf       	rjmp	.-22     	; 0x1b96 <_ZN14HardwareSerial5flushEv+0x10>
    1bac:	80 81       	ld	r24, Z
    1bae:	85 ff       	sbrs	r24, 5
    1bb0:	f2 cf       	rjmp	.-28     	; 0x1b96 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1bb2:	a8 89       	ldd	r26, Y+16	; 0x10
    1bb4:	b9 89       	ldd	r27, Y+17	; 0x11
    1bb6:	8c 91       	ld	r24, X
    1bb8:	85 ff       	sbrs	r24, 5
    1bba:	ed cf       	rjmp	.-38     	; 0x1b96 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	75 df       	rcall	.-278    	; 0x1aaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1bc0:	e8 cf       	rjmp	.-48     	; 0x1b92 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	ec 01       	movw	r28, r24
    1bd8:	6a 01       	movw	r12, r20
    1bda:	7b 01       	movw	r14, r22
    1bdc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1bde:	e8 89       	ldd	r30, Y+16	; 0x10
    1be0:	f9 89       	ldd	r31, Y+17	; 0x11
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1be6:	41 15       	cp	r20, r1
    1be8:	51 4e       	sbci	r21, 0xE1	; 225
    1bea:	61 05       	cpc	r22, r1
    1bec:	71 05       	cpc	r23, r1
    1bee:	b1 f0       	breq	.+44     	; 0x1c1c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	79 e0       	ldi	r23, 0x09	; 9
    1bf4:	8d e3       	ldi	r24, 0x3D	; 61
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	a7 01       	movw	r20, r14
    1bfa:	96 01       	movw	r18, r12
    1bfc:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    1c00:	da 01       	movw	r26, r20
    1c02:	c9 01       	movw	r24, r18
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	a1 09       	sbc	r26, r1
    1c08:	b1 09       	sbc	r27, r1
    1c0a:	b6 95       	lsr	r27
    1c0c:	a7 95       	ror	r26
    1c0e:	97 95       	ror	r25
    1c10:	87 95       	ror	r24
    1c12:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c14:	21 15       	cp	r18, r1
    1c16:	80 e1       	ldi	r24, 0x10	; 16
    1c18:	38 07       	cpc	r19, r24
    1c1a:	a8 f0       	brcs	.+42     	; 0x1c46 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1c1c:	e8 89       	ldd	r30, Y+16	; 0x10
    1c1e:	f9 89       	ldd	r31, Y+17	; 0x11
    1c20:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1c22:	60 e8       	ldi	r22, 0x80	; 128
    1c24:	74 e8       	ldi	r23, 0x84	; 132
    1c26:	8e e1       	ldi	r24, 0x1E	; 30
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a7 01       	movw	r20, r14
    1c2c:	96 01       	movw	r18, r12
    1c2e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    1c32:	da 01       	movw	r26, r20
    1c34:	c9 01       	movw	r24, r18
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	a1 09       	sbc	r26, r1
    1c3a:	b1 09       	sbc	r27, r1
    1c3c:	b6 95       	lsr	r27
    1c3e:	a7 95       	ror	r26
    1c40:	97 95       	ror	r25
    1c42:	87 95       	ror	r24
    1c44:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1c46:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c48:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c4a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1c4c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c4e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c50:	20 83       	st	Z, r18

  _written = false;
    1c52:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1c54:	ec 89       	ldd	r30, Y+20	; 0x14
    1c56:	fd 89       	ldd	r31, Y+21	; 0x15
    1c58:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1c5a:	ea 89       	ldd	r30, Y+18	; 0x12
    1c5c:	fb 89       	ldd	r31, Y+19	; 0x13
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 61       	ori	r24, 0x10	; 16
    1c62:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1c64:	ea 89       	ldd	r30, Y+18	; 0x12
    1c66:	fb 89       	ldd	r31, Y+19	; 0x13
    1c68:	80 81       	ld	r24, Z
    1c6a:	88 60       	ori	r24, 0x08	; 8
    1c6c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1c6e:	ea 89       	ldd	r30, Y+18	; 0x12
    1c70:	fb 89       	ldd	r31, Y+19	; 0x13
    1c72:	80 81       	ld	r24, Z
    1c74:	80 68       	ori	r24, 0x80	; 128
    1c76:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1c78:	ea 89       	ldd	r30, Y+18	; 0x12
    1c7a:	fb 89       	ldd	r31, Y+19	; 0x13
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8f 7d       	andi	r24, 0xDF	; 223
    1c80:	80 83       	st	Z, r24
}
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	08 95       	ret

00001c92 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	08 95       	ret

00001c98 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1c98:	08 95       	ret

00001c9a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1c9a:	1f 92       	push	r1
    1c9c:	0f 92       	push	r0
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	0f 92       	push	r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	0b b6       	in	r0, 0x3b	; 59
    1ca6:	0f 92       	push	r0
    1ca8:	2f 93       	push	r18
    1caa:	8f 93       	push	r24
    1cac:	9f 93       	push	r25
    1cae:	ef 93       	push	r30
    1cb0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1cb2:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <Serial+0x10>
    1cb6:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <Serial+0x11>
    1cba:	80 81       	ld	r24, Z
    1cbc:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <Serial+0x16>
    1cc0:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <Serial+0x17>
    1cc4:	82 fd       	sbrc	r24, 2
    1cc6:	12 c0       	rjmp	.+36     	; 0x1cec <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1cc8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1cca:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <Serial+0x19>
    1cce:	8f 5f       	subi	r24, 0xFF	; 255
    1cd0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1cd2:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <Serial+0x1a>
    1cd6:	82 17       	cp	r24, r18
    1cd8:	51 f0       	breq	.+20     	; 0x1cee <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1cda:	e0 91 c8 03 	lds	r30, 0x03C8	; 0x8003c8 <Serial+0x19>
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	e1 55       	subi	r30, 0x51	; 81
    1ce2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1ce6:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <Serial+0x19>
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1cec:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	9f 91       	pop	r25
    1cf4:	8f 91       	pop	r24
    1cf6:	2f 91       	pop	r18
    1cf8:	0f 90       	pop	r0
    1cfa:	0b be       	out	0x3b, r0	; 59
    1cfc:	0f 90       	pop	r0
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	0f 90       	pop	r0
    1d02:	1f 90       	pop	r1
    1d04:	18 95       	reti

00001d06 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1d06:	1f 92       	push	r1
    1d08:	0f 92       	push	r0
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	0f 92       	push	r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	0b b6       	in	r0, 0x3b	; 59
    1d12:	0f 92       	push	r0
    1d14:	2f 93       	push	r18
    1d16:	3f 93       	push	r19
    1d18:	4f 93       	push	r20
    1d1a:	5f 93       	push	r21
    1d1c:	6f 93       	push	r22
    1d1e:	7f 93       	push	r23
    1d20:	8f 93       	push	r24
    1d22:	9f 93       	push	r25
    1d24:	af 93       	push	r26
    1d26:	bf 93       	push	r27
    1d28:	ef 93       	push	r30
    1d2a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1d2c:	8f ea       	ldi	r24, 0xAF	; 175
    1d2e:	93 e0       	ldi	r25, 0x03	; 3
    1d30:	bc de       	rcall	.-648    	; 0x1aaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	0f 90       	pop	r0
    1d4c:	0b be       	out	0x3b, r0	; 59
    1d4e:	0f 90       	pop	r0
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	0f 90       	pop	r0
    1d54:	1f 90       	pop	r1
    1d56:	18 95       	reti

00001d58 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1d58:	8f ea       	ldi	r24, 0xAF	; 175
    1d5a:	93 e0       	ldi	r25, 0x03	; 3
    1d5c:	2e de       	rcall	.-932    	; 0x19ba <_ZN14HardwareSerial9availableEv>
    1d5e:	21 e0       	ldi	r18, 0x01	; 1
    1d60:	89 2b       	or	r24, r25
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <_Z17Serial0_availablev+0xe>
    1d64:	20 e0       	ldi	r18, 0x00	; 0
}
    1d66:	82 2f       	mov	r24, r18
    1d68:	08 95       	ret

00001d6a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1d6a:	ef ea       	ldi	r30, 0xAF	; 175
    1d6c:	f3 e0       	ldi	r31, 0x03	; 3
    1d6e:	13 82       	std	Z+3, r1	; 0x03
    1d70:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1d72:	88 ee       	ldi	r24, 0xE8	; 232
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	a0 e0       	ldi	r26, 0x00	; 0
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	84 83       	std	Z+4, r24	; 0x04
    1d7c:	95 83       	std	Z+5, r25	; 0x05
    1d7e:	a6 83       	std	Z+6, r26	; 0x06
    1d80:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1d82:	8c e1       	ldi	r24, 0x1C	; 28
    1d84:	93 e0       	ldi	r25, 0x03	; 3
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
    1d8a:	85 ec       	ldi	r24, 0xC5	; 197
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	95 87       	std	Z+13, r25	; 0x0d
    1d90:	84 87       	std	Z+12, r24	; 0x0c
    1d92:	84 ec       	ldi	r24, 0xC4	; 196
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	97 87       	std	Z+15, r25	; 0x0f
    1d98:	86 87       	std	Z+14, r24	; 0x0e
    1d9a:	80 ec       	ldi	r24, 0xC0	; 192
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	91 8b       	std	Z+17, r25	; 0x11
    1da0:	80 8b       	std	Z+16, r24	; 0x10
    1da2:	81 ec       	ldi	r24, 0xC1	; 193
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	93 8b       	std	Z+19, r25	; 0x13
    1da8:	82 8b       	std	Z+18, r24	; 0x12
    1daa:	82 ec       	ldi	r24, 0xC2	; 194
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	95 8b       	std	Z+21, r25	; 0x15
    1db0:	84 8b       	std	Z+20, r24	; 0x14
    1db2:	86 ec       	ldi	r24, 0xC6	; 198
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	97 8b       	std	Z+23, r25	; 0x17
    1db8:	86 8b       	std	Z+22, r24	; 0x16
    1dba:	11 8e       	std	Z+25, r1	; 0x19
    1dbc:	12 8e       	std	Z+26, r1	; 0x1a
    1dbe:	13 8e       	std	Z+27, r1	; 0x1b
    1dc0:	14 8e       	std	Z+28, r1	; 0x1c
    1dc2:	08 95       	ret

00001dc4 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1dc4:	1f 92       	push	r1
    1dc6:	0f 92       	push	r0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	0f 92       	push	r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	0b b6       	in	r0, 0x3b	; 59
    1dd0:	0f 92       	push	r0
    1dd2:	2f 93       	push	r18
    1dd4:	8f 93       	push	r24
    1dd6:	9f 93       	push	r25
    1dd8:	ef 93       	push	r30
    1dda:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1ddc:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <Serial1+0x10>
    1de0:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <Serial1+0x11>
    1de4:	80 81       	ld	r24, Z
    1de6:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <Serial1+0x16>
    1dea:	f0 91 63 04 	lds	r31, 0x0463	; 0x800463 <Serial1+0x17>
    1dee:	82 fd       	sbrc	r24, 2
    1df0:	12 c0       	rjmp	.+36     	; 0x1e16 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1df2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1df4:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <Serial1+0x19>
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1dfc:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <Serial1+0x1a>
    1e00:	82 17       	cp	r24, r18
    1e02:	51 f0       	breq	.+20     	; 0x1e18 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1e04:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <Serial1+0x19>
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	e4 5b       	subi	r30, 0xB4	; 180
    1e0c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e0e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1e10:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <Serial1+0x19>
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1e16:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1e18:	ff 91       	pop	r31
    1e1a:	ef 91       	pop	r30
    1e1c:	9f 91       	pop	r25
    1e1e:	8f 91       	pop	r24
    1e20:	2f 91       	pop	r18
    1e22:	0f 90       	pop	r0
    1e24:	0b be       	out	0x3b, r0	; 59
    1e26:	0f 90       	pop	r0
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	0f 90       	pop	r0
    1e2c:	1f 90       	pop	r1
    1e2e:	18 95       	reti

00001e30 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1e30:	1f 92       	push	r1
    1e32:	0f 92       	push	r0
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	0f 92       	push	r0
    1e38:	11 24       	eor	r1, r1
    1e3a:	0b b6       	in	r0, 0x3b	; 59
    1e3c:	0f 92       	push	r0
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1e56:	8c e4       	ldi	r24, 0x4C	; 76
    1e58:	94 e0       	ldi	r25, 0x04	; 4
    1e5a:	27 de       	rcall	.-946    	; 0x1aaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1e5c:	ff 91       	pop	r31
    1e5e:	ef 91       	pop	r30
    1e60:	bf 91       	pop	r27
    1e62:	af 91       	pop	r26
    1e64:	9f 91       	pop	r25
    1e66:	8f 91       	pop	r24
    1e68:	7f 91       	pop	r23
    1e6a:	6f 91       	pop	r22
    1e6c:	5f 91       	pop	r21
    1e6e:	4f 91       	pop	r20
    1e70:	3f 91       	pop	r19
    1e72:	2f 91       	pop	r18
    1e74:	0f 90       	pop	r0
    1e76:	0b be       	out	0x3b, r0	; 59
    1e78:	0f 90       	pop	r0
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	0f 90       	pop	r0
    1e7e:	1f 90       	pop	r1
    1e80:	18 95       	reti

00001e82 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1e82:	8c e4       	ldi	r24, 0x4C	; 76
    1e84:	94 e0       	ldi	r25, 0x04	; 4
    1e86:	99 dd       	rcall	.-1230   	; 0x19ba <_ZN14HardwareSerial9availableEv>
    1e88:	21 e0       	ldi	r18, 0x01	; 1
    1e8a:	89 2b       	or	r24, r25
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <_Z17Serial1_availablev+0xe>
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
}
    1e90:	82 2f       	mov	r24, r18
    1e92:	08 95       	ret

00001e94 <_GLOBAL__sub_I___vector_36>:
    1e94:	ec e4       	ldi	r30, 0x4C	; 76
    1e96:	f4 e0       	ldi	r31, 0x04	; 4
    1e98:	13 82       	std	Z+3, r1	; 0x03
    1e9a:	12 82       	std	Z+2, r1	; 0x02
    1e9c:	88 ee       	ldi	r24, 0xE8	; 232
    1e9e:	93 e0       	ldi	r25, 0x03	; 3
    1ea0:	a0 e0       	ldi	r26, 0x00	; 0
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	84 83       	std	Z+4, r24	; 0x04
    1ea6:	95 83       	std	Z+5, r25	; 0x05
    1ea8:	a6 83       	std	Z+6, r26	; 0x06
    1eaa:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1eac:	8c e1       	ldi	r24, 0x1C	; 28
    1eae:	93 e0       	ldi	r25, 0x03	; 3
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
    1eb4:	8d ec       	ldi	r24, 0xCD	; 205
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	95 87       	std	Z+13, r25	; 0x0d
    1eba:	84 87       	std	Z+12, r24	; 0x0c
    1ebc:	8c ec       	ldi	r24, 0xCC	; 204
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	97 87       	std	Z+15, r25	; 0x0f
    1ec2:	86 87       	std	Z+14, r24	; 0x0e
    1ec4:	88 ec       	ldi	r24, 0xC8	; 200
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	91 8b       	std	Z+17, r25	; 0x11
    1eca:	80 8b       	std	Z+16, r24	; 0x10
    1ecc:	89 ec       	ldi	r24, 0xC9	; 201
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	93 8b       	std	Z+19, r25	; 0x13
    1ed2:	82 8b       	std	Z+18, r24	; 0x12
    1ed4:	8a ec       	ldi	r24, 0xCA	; 202
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	95 8b       	std	Z+21, r25	; 0x15
    1eda:	84 8b       	std	Z+20, r24	; 0x14
    1edc:	8e ec       	ldi	r24, 0xCE	; 206
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	97 8b       	std	Z+23, r25	; 0x17
    1ee2:	86 8b       	std	Z+22, r24	; 0x16
    1ee4:	11 8e       	std	Z+25, r1	; 0x19
    1ee6:	12 8e       	std	Z+26, r1	; 0x1a
    1ee8:	13 8e       	std	Z+27, r1	; 0x1b
    1eea:	14 8e       	std	Z+28, r1	; 0x1c
    1eec:	08 95       	ret

00001eee <initVariant>:
    1eee:	08 95       	ret

00001ef0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1ef0:	d9 d1       	rcall	.+946    	; 0x22a4 <init>

	initVariant();
    1ef2:	fd df       	rcall	.-6      	; 0x1eee <initVariant>
    1ef4:	0e 94 bb 06 	call	0xd76	; 0xd76 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1ef8:	ca e1       	ldi	r28, 0x1A	; 26
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1efa:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1efc:	dc d9       	rcall	.-3144   	; 0x12b6 <loop>
		if (serialEventRun) serialEventRun();
    1efe:	20 97       	sbiw	r28, 0x00	; 0
    1f00:	e9 f3       	breq	.-6      	; 0x1efc <main+0xc>
    1f02:	98 dd       	rcall	.-1232   	; 0x1a34 <_Z14serialEventRunv>
    1f04:	fb cf       	rjmp	.-10     	; 0x1efc <main+0xc>

00001f06 <_ZN5Print5writeEPKhj>:
    1f06:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1f08:	df 92       	push	r13
    1f0a:	ef 92       	push	r14
    1f0c:	ff 92       	push	r15
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	6c 01       	movw	r12, r24
    1f18:	7a 01       	movw	r14, r20
    1f1a:	8b 01       	movw	r16, r22
    1f1c:	c0 e0       	ldi	r28, 0x00	; 0
    1f1e:	d0 e0       	ldi	r29, 0x00	; 0
    1f20:	ce 15       	cp	r28, r14
    1f22:	df 05       	cpc	r29, r15
    1f24:	81 f0       	breq	.+32     	; 0x1f46 <_ZN5Print5writeEPKhj+0x40>
    1f26:	d8 01       	movw	r26, r16
    1f28:	6d 91       	ld	r22, X+
    1f2a:	8d 01       	movw	r16, r26
    1f2c:	d6 01       	movw	r26, r12
    1f2e:	ed 91       	ld	r30, X+
    1f30:	fc 91       	ld	r31, X
    1f32:	01 90       	ld	r0, Z+
    1f34:	f0 81       	ld	r31, Z
    1f36:	e0 2d       	mov	r30, r0
    1f38:	c6 01       	movw	r24, r12
    1f3a:	19 95       	eicall
    1f3c:	89 2b       	or	r24, r25
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <_ZN5Print5writeEPKhj+0x3e>
    1f40:	21 96       	adiw	r28, 0x01	; 1
    1f42:	ee cf       	rjmp	.-36     	; 0x1f20 <_ZN5Print5writeEPKhj+0x1a>
    1f44:	7e 01       	movw	r14, r28
    1f46:	c7 01       	movw	r24, r14
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	08 95       	ret

00001f5a <_ZN5Print5writeEPKc>:
    1f5a:	61 15       	cp	r22, r1
    1f5c:	71 05       	cpc	r23, r1
    1f5e:	79 f0       	breq	.+30     	; 0x1f7e <_ZN5Print5writeEPKc+0x24>
    1f60:	fb 01       	movw	r30, r22
    1f62:	01 90       	ld	r0, Z+
    1f64:	00 20       	and	r0, r0
    1f66:	e9 f7       	brne	.-6      	; 0x1f62 <_ZN5Print5writeEPKc+0x8>
    1f68:	31 97       	sbiw	r30, 0x01	; 1
    1f6a:	af 01       	movw	r20, r30
    1f6c:	46 1b       	sub	r20, r22
    1f6e:	57 0b       	sbc	r21, r23
    1f70:	dc 01       	movw	r26, r24
    1f72:	ed 91       	ld	r30, X+
    1f74:	fc 91       	ld	r31, X
    1f76:	02 80       	ldd	r0, Z+2	; 0x02
    1f78:	f3 81       	ldd	r31, Z+3	; 0x03
    1f7a:	e0 2d       	mov	r30, r0
    1f7c:	19 94       	eijmp
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	08 95       	ret

00001f84 <_ZN5Print5printERK6String>:
    1f84:	db 01       	movw	r26, r22
    1f86:	14 96       	adiw	r26, 0x04	; 4
    1f88:	4d 91       	ld	r20, X+
    1f8a:	5c 91       	ld	r21, X
    1f8c:	15 97       	sbiw	r26, 0x05	; 5
    1f8e:	6d 91       	ld	r22, X+
    1f90:	7c 91       	ld	r23, X
    1f92:	dc 01       	movw	r26, r24
    1f94:	ed 91       	ld	r30, X+
    1f96:	fc 91       	ld	r31, X
    1f98:	02 80       	ldd	r0, Z+2	; 0x02
    1f9a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	19 94       	eijmp

00001fa0 <_ZN5Print5printEPKc>:
    1fa0:	dc cf       	rjmp	.-72     	; 0x1f5a <_ZN5Print5writeEPKc>

00001fa2 <_ZN5Print5printEc>:
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	ed 91       	ld	r30, X+
    1fa6:	fc 91       	ld	r31, X
    1fa8:	01 90       	ld	r0, Z+
    1faa:	f0 81       	ld	r31, Z
    1fac:	e0 2d       	mov	r30, r0
    1fae:	19 94       	eijmp

00001fb0 <_ZN5Print7printlnEv>:
    1fb0:	6a e2       	ldi	r22, 0x2A	; 42
    1fb2:	73 e0       	ldi	r23, 0x03	; 3
    1fb4:	d2 cf       	rjmp	.-92     	; 0x1f5a <_ZN5Print5writeEPKc>

00001fb6 <_ZN5Print7printlnEPKc>:
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	ec 01       	movw	r28, r24
    1fc0:	cc df       	rcall	.-104    	; 0x1f5a <_ZN5Print5writeEPKc>
    1fc2:	8c 01       	movw	r16, r24
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	f4 df       	rcall	.-24     	; 0x1fb0 <_ZN5Print7printlnEv>
    1fc8:	80 0f       	add	r24, r16
    1fca:	91 1f       	adc	r25, r17
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	08 95       	ret

00001fd6 <_ZN5Print11printNumberEmh>:
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	ef 92       	push	r14
    1fe0:	ff 92       	push	r15
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	a1 97       	sbiw	r28, 0x21	; 33
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	7c 01       	movw	r14, r24
    1ffc:	fa 01       	movw	r30, r20
    1ffe:	cb 01       	movw	r24, r22
    2000:	19 a2       	std	Y+33, r1	; 0x21
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	08 f4       	brcc	.+2      	; 0x2008 <_ZN5Print11printNumberEmh+0x32>
    2006:	2a e0       	ldi	r18, 0x0A	; 10
    2008:	8e 01       	movw	r16, r28
    200a:	0f 5d       	subi	r16, 0xDF	; 223
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	82 2e       	mov	r8, r18
    2010:	91 2c       	mov	r9, r1
    2012:	a1 2c       	mov	r10, r1
    2014:	b1 2c       	mov	r11, r1
    2016:	bf 01       	movw	r22, r30
    2018:	a5 01       	movw	r20, r10
    201a:	94 01       	movw	r18, r8
    201c:	ce d6       	rcall	.+3484   	; 0x2dba <__udivmodsi4>
    201e:	f9 01       	movw	r30, r18
    2020:	ca 01       	movw	r24, r20
    2022:	01 50       	subi	r16, 0x01	; 1
    2024:	11 09       	sbc	r17, r1
    2026:	6a 30       	cpi	r22, 0x0A	; 10
    2028:	10 f4       	brcc	.+4      	; 0x202e <_ZN5Print11printNumberEmh+0x58>
    202a:	60 5d       	subi	r22, 0xD0	; 208
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <_ZN5Print11printNumberEmh+0x5a>
    202e:	69 5c       	subi	r22, 0xC9	; 201
    2030:	d8 01       	movw	r26, r16
    2032:	6c 93       	st	X, r22
    2034:	23 2b       	or	r18, r19
    2036:	24 2b       	or	r18, r20
    2038:	25 2b       	or	r18, r21
    203a:	69 f7       	brne	.-38     	; 0x2016 <_ZN5Print11printNumberEmh+0x40>
    203c:	b8 01       	movw	r22, r16
    203e:	c7 01       	movw	r24, r14
    2040:	8c df       	rcall	.-232    	; 0x1f5a <_ZN5Print5writeEPKc>
    2042:	a1 96       	adiw	r28, 0x21	; 33
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	bf 90       	pop	r11
    205c:	af 90       	pop	r10
    205e:	9f 90       	pop	r9
    2060:	8f 90       	pop	r8
    2062:	08 95       	ret

00002064 <_ZN5Print5printEmi>:
    2064:	21 15       	cp	r18, r1
    2066:	31 05       	cpc	r19, r1
    2068:	41 f4       	brne	.+16     	; 0x207a <_ZN5Print5printEmi+0x16>
    206a:	dc 01       	movw	r26, r24
    206c:	ed 91       	ld	r30, X+
    206e:	fc 91       	ld	r31, X
    2070:	01 90       	ld	r0, Z+
    2072:	f0 81       	ld	r31, Z
    2074:	e0 2d       	mov	r30, r0
    2076:	64 2f       	mov	r22, r20
    2078:	19 94       	eijmp
    207a:	ad cf       	rjmp	.-166    	; 0x1fd6 <_ZN5Print11printNumberEmh>

0000207c <_ZN5Print5printEhi>:
    207c:	9a 01       	movw	r18, r20
    207e:	46 2f       	mov	r20, r22
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	ee cf       	rjmp	.-36     	; 0x2064 <_ZN5Print5printEmi>

00002088 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2088:	cf 92       	push	r12
    208a:	df 92       	push	r13
    208c:	ef 92       	push	r14
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
  if (base == 0) {
    2098:	21 15       	cp	r18, r1
    209a:	31 05       	cpc	r19, r1
    209c:	81 f4       	brne	.+32     	; 0x20be <_ZN5Print5printEli+0x36>
    return write(n);
    209e:	dc 01       	movw	r26, r24
    20a0:	ed 91       	ld	r30, X+
    20a2:	fc 91       	ld	r31, X
    20a4:	01 90       	ld	r0, Z+
    20a6:	f0 81       	ld	r31, Z
    20a8:	e0 2d       	mov	r30, r0
    20aa:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	df 90       	pop	r13
    20ba:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    20bc:	19 94       	eijmp
  } else if (base == 10) {
    20be:	2a 30       	cpi	r18, 0x0A	; 10
    20c0:	31 05       	cpc	r19, r1
    20c2:	f1 f4       	brne	.+60     	; 0x2100 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    20c4:	77 ff       	sbrs	r23, 7
    20c6:	1b c0       	rjmp	.+54     	; 0x20fe <_ZN5Print5printEli+0x76>
    20c8:	6a 01       	movw	r12, r20
    20ca:	7b 01       	movw	r14, r22
    20cc:	ec 01       	movw	r28, r24
      int t = print('-');
    20ce:	6d e2       	ldi	r22, 0x2D	; 45
    20d0:	68 df       	rcall	.-304    	; 0x1fa2 <_ZN5Print5printEc>
    20d2:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    20d4:	44 27       	eor	r20, r20
    20d6:	55 27       	eor	r21, r21
    20d8:	ba 01       	movw	r22, r20
    20da:	4c 19       	sub	r20, r12
    20dc:	5d 09       	sbc	r21, r13
    20de:	6e 09       	sbc	r22, r14
    20e0:	7f 09       	sbc	r23, r15
    20e2:	2a e0       	ldi	r18, 0x0A	; 10
    20e4:	ce 01       	movw	r24, r28
    20e6:	77 df       	rcall	.-274    	; 0x1fd6 <_ZN5Print11printNumberEmh>
    20e8:	80 0f       	add	r24, r16
    20ea:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	df 90       	pop	r13
    20fa:	cf 90       	pop	r12
    20fc:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    20fe:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    210e:	cf 90       	pop	r12
    2110:	62 cf       	rjmp	.-316    	; 0x1fd6 <_ZN5Print11printNumberEmh>

00002112 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2112:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2114:	ab 01       	movw	r20, r22
    2116:	77 0f       	add	r23, r23
    2118:	66 0b       	sbc	r22, r22
    211a:	77 0b       	sbc	r23, r23
    211c:	b5 cf       	rjmp	.-150    	; 0x2088 <_ZN5Print5printEli>

0000211e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2128:	f4 df       	rcall	.-24     	; 0x2112 <_ZN5Print5printEii>
    212a:	8c 01       	movw	r16, r24
  n += println();
    212c:	ce 01       	movw	r24, r28
    212e:	40 df       	rcall	.-384    	; 0x1fb0 <_ZN5Print7printlnEv>
  return n;
}
    2130:	80 0f       	add	r24, r16
    2132:	91 1f       	adc	r25, r17
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	08 95       	ret

0000213e <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	2f 93       	push	r18
    214a:	3f 93       	push	r19
    214c:	8f 93       	push	r24
    214e:	9f 93       	push	r25
    2150:	af 93       	push	r26
    2152:	bf 93       	push	r27
    2154:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <timer0_millis>
    2158:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <timer0_millis+0x1>
    215c:	a0 91 ec 04 	lds	r26, 0x04EC	; 0x8004ec <timer0_millis+0x2>
    2160:	b0 91 ed 04 	lds	r27, 0x04ED	; 0x8004ed <timer0_millis+0x3>
    2164:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <timer0_fract>
    2168:	23 e0       	ldi	r18, 0x03	; 3
    216a:	23 0f       	add	r18, r19
    216c:	2d 37       	cpi	r18, 0x7D	; 125
    216e:	20 f4       	brcc	.+8      	; 0x2178 <__vector_23+0x3a>
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	a1 1d       	adc	r26, r1
    2174:	b1 1d       	adc	r27, r1
    2176:	05 c0       	rjmp	.+10     	; 0x2182 <__vector_23+0x44>
    2178:	26 e8       	ldi	r18, 0x86	; 134
    217a:	23 0f       	add	r18, r19
    217c:	02 96       	adiw	r24, 0x02	; 2
    217e:	a1 1d       	adc	r26, r1
    2180:	b1 1d       	adc	r27, r1
    2182:	20 93 e9 04 	sts	0x04E9, r18	; 0x8004e9 <timer0_fract>
    2186:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <timer0_millis>
    218a:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <timer0_millis+0x1>
    218e:	a0 93 ec 04 	sts	0x04EC, r26	; 0x8004ec <timer0_millis+0x2>
    2192:	b0 93 ed 04 	sts	0x04ED, r27	; 0x8004ed <timer0_millis+0x3>
    2196:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <timer0_overflow_count>
    219a:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <timer0_overflow_count+0x1>
    219e:	a0 91 f0 04 	lds	r26, 0x04F0	; 0x8004f0 <timer0_overflow_count+0x2>
    21a2:	b0 91 f1 04 	lds	r27, 0x04F1	; 0x8004f1 <timer0_overflow_count+0x3>
    21a6:	01 96       	adiw	r24, 0x01	; 1
    21a8:	a1 1d       	adc	r26, r1
    21aa:	b1 1d       	adc	r27, r1
    21ac:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <timer0_overflow_count>
    21b0:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <timer0_overflow_count+0x1>
    21b4:	a0 93 f0 04 	sts	0x04F0, r26	; 0x8004f0 <timer0_overflow_count+0x2>
    21b8:	b0 93 f1 04 	sts	0x04F1, r27	; 0x8004f1 <timer0_overflow_count+0x3>
    21bc:	bf 91       	pop	r27
    21be:	af 91       	pop	r26
    21c0:	9f 91       	pop	r25
    21c2:	8f 91       	pop	r24
    21c4:	3f 91       	pop	r19
    21c6:	2f 91       	pop	r18
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f 90       	pop	r0
    21ce:	1f 90       	pop	r1
    21d0:	18 95       	reti

000021d2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    21d2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    21d4:	f8 94       	cli
	m = timer0_overflow_count;
    21d6:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <timer0_overflow_count>
    21da:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <timer0_overflow_count+0x1>
    21de:	a0 91 f0 04 	lds	r26, 0x04F0	; 0x8004f0 <timer0_overflow_count+0x2>
    21e2:	b0 91 f1 04 	lds	r27, 0x04F1	; 0x8004f1 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    21e6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    21e8:	a8 9b       	sbis	0x15, 0	; 21
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <micros+0x24>
    21ec:	2f 3f       	cpi	r18, 0xFF	; 255
    21ee:	19 f0       	breq	.+6      	; 0x21f6 <micros+0x24>
		m++;
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	a1 1d       	adc	r26, r1
    21f4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    21f6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    21f8:	ba 2f       	mov	r27, r26
    21fa:	a9 2f       	mov	r26, r25
    21fc:	98 2f       	mov	r25, r24
    21fe:	88 27       	eor	r24, r24
    2200:	82 0f       	add	r24, r18
    2202:	91 1d       	adc	r25, r1
    2204:	a1 1d       	adc	r26, r1
    2206:	b1 1d       	adc	r27, r1
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	42 e0       	ldi	r20, 0x02	; 2
    220e:	66 0f       	add	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	88 1f       	adc	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	4a 95       	dec	r20
    2218:	d1 f7       	brne	.-12     	; 0x220e <__stack+0xf>
}
    221a:	08 95       	ret

0000221c <delay>:

void delay(unsigned long ms)
{
    221c:	8f 92       	push	r8
    221e:	9f 92       	push	r9
    2220:	af 92       	push	r10
    2222:	bf 92       	push	r11
    2224:	cf 92       	push	r12
    2226:	df 92       	push	r13
    2228:	ef 92       	push	r14
    222a:	ff 92       	push	r15
    222c:	6b 01       	movw	r12, r22
    222e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2230:	d0 df       	rcall	.-96     	; 0x21d2 <micros>
    2232:	4b 01       	movw	r8, r22
    2234:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2236:	c1 14       	cp	r12, r1
    2238:	d1 04       	cpc	r13, r1
    223a:	e1 04       	cpc	r14, r1
    223c:	f1 04       	cpc	r15, r1
		yield();
    223e:	f1 f0       	breq	.+60     	; 0x227c <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2240:	d9 d3       	rcall	.+1970   	; 0x29f4 <yield>
    2242:	c7 df       	rcall	.-114    	; 0x21d2 <micros>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	88 19       	sub	r24, r8
    224a:	99 09       	sbc	r25, r9
    224c:	aa 09       	sbc	r26, r10
    224e:	bb 09       	sbc	r27, r11
    2250:	88 3e       	cpi	r24, 0xE8	; 232
    2252:	93 40       	sbci	r25, 0x03	; 3
    2254:	a1 05       	cpc	r26, r1
    2256:	b1 05       	cpc	r27, r1
    2258:	70 f3       	brcs	.-36     	; 0x2236 <delay+0x1a>
			ms--;
    225a:	21 e0       	ldi	r18, 0x01	; 1
    225c:	c2 1a       	sub	r12, r18
    225e:	d1 08       	sbc	r13, r1
    2260:	e1 08       	sbc	r14, r1
    2262:	f1 08       	sbc	r15, r1
			start += 1000;
    2264:	88 ee       	ldi	r24, 0xE8	; 232
    2266:	88 0e       	add	r8, r24
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	98 1e       	adc	r9, r24
    226c:	a1 1c       	adc	r10, r1
    226e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2270:	c1 14       	cp	r12, r1
    2272:	d1 04       	cpc	r13, r1
    2274:	e1 04       	cpc	r14, r1
    2276:	f1 04       	cpc	r15, r1
    2278:	21 f7       	brne	.-56     	; 0x2242 <delay+0x26>
    227a:	dd cf       	rjmp	.-70     	; 0x2236 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	cf 90       	pop	r12
    2284:	bf 90       	pop	r11
    2286:	af 90       	pop	r10
    2288:	9f 90       	pop	r9
    228a:	8f 90       	pop	r8
    228c:	08 95       	ret

0000228e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    228e:	82 30       	cpi	r24, 0x02	; 2
    2290:	91 05       	cpc	r25, r1
    2292:	38 f0       	brcs	.+14     	; 0x22a2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    229c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <delayMicroseconds+0x10>
    22a2:	08 95       	ret

000022a4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    22a4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    22a6:	84 b5       	in	r24, 0x24	; 36
    22a8:	82 60       	ori	r24, 0x02	; 2
    22aa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    22ac:	84 b5       	in	r24, 0x24	; 36
    22ae:	81 60       	ori	r24, 0x01	; 1
    22b0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    22b2:	85 b5       	in	r24, 0x25	; 37
    22b4:	82 60       	ori	r24, 0x02	; 2
    22b6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    22b8:	85 b5       	in	r24, 0x25	; 37
    22ba:	81 60       	ori	r24, 0x01	; 1
    22bc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    22be:	ee e6       	ldi	r30, 0x6E	; 110
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	81 60       	ori	r24, 0x01	; 1
    22c6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    22c8:	e1 e8       	ldi	r30, 0x81	; 129
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    22ce:	80 81       	ld	r24, Z
    22d0:	82 60       	ori	r24, 0x02	; 2
    22d2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    22d4:	80 81       	ld	r24, Z
    22d6:	81 60       	ori	r24, 0x01	; 1
    22d8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    22da:	e0 e8       	ldi	r30, 0x80	; 128
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	81 60       	ori	r24, 0x01	; 1
    22e2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    22e4:	e1 eb       	ldi	r30, 0xB1	; 177
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	84 60       	ori	r24, 0x04	; 4
    22ec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    22ee:	e0 eb       	ldi	r30, 0xB0	; 176
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	81 60       	ori	r24, 0x01	; 1
    22f6:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    22f8:	e1 e9       	ldi	r30, 0x91	; 145
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	82 60       	ori	r24, 0x02	; 2
    2300:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2302:	80 81       	ld	r24, Z
    2304:	81 60       	ori	r24, 0x01	; 1
    2306:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2308:	e0 e9       	ldi	r30, 0x90	; 144
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	81 60       	ori	r24, 0x01	; 1
    2310:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2312:	e1 ea       	ldi	r30, 0xA1	; 161
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	82 60       	ori	r24, 0x02	; 2
    231a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    231c:	80 81       	ld	r24, Z
    231e:	81 60       	ori	r24, 0x01	; 1
    2320:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2322:	e0 ea       	ldi	r30, 0xA0	; 160
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	81 60       	ori	r24, 0x01	; 1
    232a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    232c:	e1 e2       	ldi	r30, 0x21	; 33
    232e:	f1 e0       	ldi	r31, 0x01	; 1
    2330:	80 81       	ld	r24, Z
    2332:	82 60       	ori	r24, 0x02	; 2
    2334:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2336:	80 81       	ld	r24, Z
    2338:	81 60       	ori	r24, 0x01	; 1
    233a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    233c:	e0 e2       	ldi	r30, 0x20	; 32
    233e:	f1 e0       	ldi	r31, 0x01	; 1
    2340:	80 81       	ld	r24, Z
    2342:	81 60       	ori	r24, 0x01	; 1
    2344:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2346:	ea e7       	ldi	r30, 0x7A	; 122
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	84 60       	ori	r24, 0x04	; 4
    234e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2350:	80 81       	ld	r24, Z
    2352:	82 60       	ori	r24, 0x02	; 2
    2354:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2356:	80 81       	ld	r24, Z
    2358:	81 60       	ori	r24, 0x01	; 1
    235a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    235c:	80 81       	ld	r24, Z
    235e:	80 68       	ori	r24, 0x80	; 128
    2360:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2362:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    2366:	08 95       	ret

00002368 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	fc 01       	movw	r30, r24
    236c:	31 97       	sbiw	r30, 0x01	; 1
    236e:	e2 31       	cpi	r30, 0x12	; 18
    2370:	f1 05       	cpc	r31, r1
    2372:	08 f0       	brcs	.+2      	; 0x2376 <turnOffPWM+0xe>
    2374:	4d c0       	rjmp	.+154    	; 0x2410 <turnOffPWM+0xa8>
    2376:	88 27       	eor	r24, r24
    2378:	ed 54       	subi	r30, 0x4D	; 77
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	8f 4f       	sbci	r24, 0xFF	; 255
    237e:	3f c5       	rjmp	.+2686   	; 0x2dfe <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2380:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2384:	8f 77       	andi	r24, 0x7F	; 127
    2386:	03 c0       	rjmp	.+6      	; 0x238e <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2388:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    238c:	8f 7d       	andi	r24, 0xDF	; 223
    238e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2392:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2394:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2398:	87 7f       	andi	r24, 0xF7	; 247
    239a:	f9 cf       	rjmp	.-14     	; 0x238e <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    239c:	84 b5       	in	r24, 0x24	; 36
    239e:	8f 77       	andi	r24, 0x7F	; 127
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    23a2:	84 b5       	in	r24, 0x24	; 36
    23a4:	8f 7d       	andi	r24, 0xDF	; 223
    23a6:	84 bd       	out	0x24, r24	; 36
    23a8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    23aa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    23ae:	8f 77       	andi	r24, 0x7F	; 127
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    23b2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    23bc:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    23be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    23c2:	8f 77       	andi	r24, 0x7F	; 127
    23c4:	07 c0       	rjmp	.+14     	; 0x23d4 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    23c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    23ca:	8f 7d       	andi	r24, 0xDF	; 223
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    23ce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    23d2:	87 7f       	andi	r24, 0xF7	; 247
    23d4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    23d8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    23da:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    23de:	8f 77       	andi	r24, 0x7F	; 127
    23e0:	07 c0       	rjmp	.+14     	; 0x23f0 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    23e2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    23e6:	8f 7d       	andi	r24, 0xDF	; 223
    23e8:	03 c0       	rjmp	.+6      	; 0x23f0 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    23ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    23ee:	87 7f       	andi	r24, 0xF7	; 247
    23f0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    23f4:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    23f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    23fa:	8f 77       	andi	r24, 0x7F	; 127
    23fc:	07 c0       	rjmp	.+14     	; 0x240c <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    23fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2402:	8f 7d       	andi	r24, 0xDF	; 223
    2404:	03 c0       	rjmp	.+6      	; 0x240c <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2406:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    240a:	87 7f       	andi	r24, 0xF7	; 247
    240c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2410:	08 95       	ret

00002412 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	fc 01       	movw	r30, r24
    241a:	e0 53       	subi	r30, 0x30	; 48
    241c:	fe 4f       	sbci	r31, 0xFE	; 254
    241e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2420:	fc 01       	movw	r30, r24
    2422:	ea 5e       	subi	r30, 0xEA	; 234
    2424:	fd 4f       	sbci	r31, 0xFD	; 253
    2426:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2428:	88 23       	and	r24, r24
    242a:	61 f1       	breq	.+88     	; 0x2484 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	fc 01       	movw	r30, r24
    2434:	ea 58       	subi	r30, 0x8A	; 138
    2436:	fd 4f       	sbci	r31, 0xFD	; 253
    2438:	c5 91       	lpm	r28, Z+
    243a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    243c:	fc 01       	movw	r30, r24
    243e:	e4 5a       	subi	r30, 0xA4	; 164
    2440:	fd 4f       	sbci	r31, 0xFD	; 253
    2442:	a5 91       	lpm	r26, Z+
    2444:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2446:	61 11       	cpse	r22, r1
    2448:	09 c0       	rjmp	.+18     	; 0x245c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    244a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    244c:	f8 94       	cli
		*reg &= ~bit;
    244e:	88 81       	ld	r24, Y
    2450:	20 95       	com	r18
    2452:	82 23       	and	r24, r18
    2454:	88 83       	st	Y, r24
		*out &= ~bit;
    2456:	ec 91       	ld	r30, X
    2458:	2e 23       	and	r18, r30
    245a:	0b c0       	rjmp	.+22     	; 0x2472 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    245c:	62 30       	cpi	r22, 0x02	; 2
    245e:	61 f4       	brne	.+24     	; 0x2478 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2460:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2462:	f8 94       	cli
		*reg &= ~bit;
    2464:	88 81       	ld	r24, Y
    2466:	32 2f       	mov	r19, r18
    2468:	30 95       	com	r19
    246a:	83 23       	and	r24, r19
    246c:	88 83       	st	Y, r24
		*out |= bit;
    246e:	ec 91       	ld	r30, X
    2470:	2e 2b       	or	r18, r30
    2472:	2c 93       	st	X, r18
		SREG = oldSREG;
    2474:	9f bf       	out	0x3f, r25	; 63
    2476:	06 c0       	rjmp	.+12     	; 0x2484 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2478:	8f b7       	in	r24, 0x3f	; 63
                cli();
    247a:	f8 94       	cli
		*reg |= bit;
    247c:	e8 81       	ld	r30, Y
    247e:	2e 2b       	or	r18, r30
    2480:	28 83       	st	Y, r18
		SREG = oldSREG;
    2482:	8f bf       	out	0x3f, r24	; 63
	}
}
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	08 95       	ret

0000248a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	f9 01       	movw	r30, r18
    2496:	e6 57       	subi	r30, 0x76	; 118
    2498:	fe 4f       	sbci	r31, 0xFE	; 254
    249a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    249c:	f9 01       	movw	r30, r18
    249e:	e0 53       	subi	r30, 0x30	; 48
    24a0:	fe 4f       	sbci	r31, 0xFE	; 254
    24a2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    24a4:	f9 01       	movw	r30, r18
    24a6:	ea 5e       	subi	r30, 0xEA	; 234
    24a8:	fd 4f       	sbci	r31, 0xFD	; 253
    24aa:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    24ac:	cc 23       	and	r28, r28
    24ae:	b9 f0       	breq	.+46     	; 0x24de <digitalWrite+0x54>
    24b0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    24b2:	81 11       	cpse	r24, r1
    24b4:	59 df       	rcall	.-334    	; 0x2368 <turnOffPWM>

	out = portOutputRegister(port);
    24b6:	ec 2f       	mov	r30, r28
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	ee 0f       	add	r30, r30
    24bc:	ff 1f       	adc	r31, r31
    24be:	e4 5a       	subi	r30, 0xA4	; 164
    24c0:	fd 4f       	sbci	r31, 0xFD	; 253
    24c2:	a5 91       	lpm	r26, Z+
    24c4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    24c6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    24c8:	f8 94       	cli

	if (val == LOW) {
    24ca:	11 11       	cpse	r17, r1
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <digitalWrite+0x4c>
		*out &= ~bit;
    24ce:	8c 91       	ld	r24, X
    24d0:	d0 95       	com	r29
    24d2:	d8 23       	and	r29, r24
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <digitalWrite+0x50>
	} else {
		*out |= bit;
    24d6:	ec 91       	ld	r30, X
    24d8:	de 2b       	or	r29, r30
    24da:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    24dc:	9f bf       	out	0x3f, r25	; 63
}
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	08 95       	ret

000024e6 <_ZN6StringD1Ev>:
	move(rval);
}
String::String(StringSumHelper &&rval)
{
	init();
	move(rval);
    24e6:	fc 01       	movw	r30, r24
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	28 c5       	rjmp	.+2640   	; 0x2f3e <free>

000024ee <_ZN6String10invalidateEv>:
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	ec 01       	movw	r28, r24
    24f4:	88 81       	ld	r24, Y
    24f6:	99 81       	ldd	r25, Y+1	; 0x01
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	09 f0       	breq	.+2      	; 0x24fe <_ZN6String10invalidateEv+0x10>
    24fc:	20 d5       	rcall	.+2624   	; 0x2f3e <free>
    24fe:	19 82       	std	Y+1, r1	; 0x01
    2500:	18 82       	st	Y, r1
    2502:	1d 82       	std	Y+5, r1	; 0x05
    2504:	1c 82       	std	Y+4, r1	; 0x04
    2506:	1b 82       	std	Y+3, r1	; 0x03
    2508:	1a 82       	std	Y+2, r1	; 0x02
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	08 95       	ret

00002510 <_ZN6String12changeBufferEj>:
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	ec 01       	movw	r28, r24
    251a:	8b 01       	movw	r16, r22
    251c:	6f 5f       	subi	r22, 0xFF	; 255
    251e:	7f 4f       	sbci	r23, 0xFF	; 255
    2520:	88 81       	ld	r24, Y
    2522:	99 81       	ldd	r25, Y+1	; 0x01
    2524:	95 d5       	rcall	.+2858   	; 0x3050 <realloc>
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	31 f0       	breq	.+12     	; 0x2536 <_ZN6String12changeBufferEj+0x26>
    252a:	99 83       	std	Y+1, r25	; 0x01
    252c:	88 83       	st	Y, r24
    252e:	1b 83       	std	Y+3, r17	; 0x03
    2530:	0a 83       	std	Y+2, r16	; 0x02
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <_ZN6String12changeBufferEj+0x28>
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	08 95       	ret

00002542 <_ZN6String7reserveEj>:
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	ec 01       	movw	r28, r24
    2548:	88 81       	ld	r24, Y
    254a:	99 81       	ldd	r25, Y+1	; 0x01
    254c:	89 2b       	or	r24, r25
    254e:	29 f0       	breq	.+10     	; 0x255a <_ZN6String7reserveEj+0x18>
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	9b 81       	ldd	r25, Y+3	; 0x03
    2554:	86 17       	cp	r24, r22
    2556:	97 07       	cpc	r25, r23
    2558:	58 f4       	brcc	.+22     	; 0x2570 <_ZN6String7reserveEj+0x2e>
    255a:	ce 01       	movw	r24, r28
    255c:	d9 df       	rcall	.-78     	; 0x2510 <_ZN6String12changeBufferEj>
    255e:	88 23       	and	r24, r24
    2560:	41 f0       	breq	.+16     	; 0x2572 <_ZN6String7reserveEj+0x30>
    2562:	8c 81       	ldd	r24, Y+4	; 0x04
    2564:	9d 81       	ldd	r25, Y+5	; 0x05
    2566:	89 2b       	or	r24, r25
    2568:	19 f4       	brne	.+6      	; 0x2570 <_ZN6String7reserveEj+0x2e>
    256a:	e8 81       	ld	r30, Y
    256c:	f9 81       	ldd	r31, Y+1	; 0x01
    256e:	10 82       	st	Z, r1
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	08 95       	ret

00002578 <_ZN6String4copyEPKcj>:
    2578:	ef 92       	push	r14
    257a:	ff 92       	push	r15
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	ec 01       	movw	r28, r24
    2586:	7b 01       	movw	r14, r22
    2588:	8a 01       	movw	r16, r20
    258a:	ba 01       	movw	r22, r20
    258c:	da df       	rcall	.-76     	; 0x2542 <_ZN6String7reserveEj>
    258e:	81 11       	cpse	r24, r1
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <_ZN6String4copyEPKcj+0x20>
    2592:	ce 01       	movw	r24, r28
    2594:	ac df       	rcall	.-168    	; 0x24ee <_ZN6String10invalidateEv>
    2596:	06 c0       	rjmp	.+12     	; 0x25a4 <_ZN6String4copyEPKcj+0x2c>
    2598:	1d 83       	std	Y+5, r17	; 0x05
    259a:	0c 83       	std	Y+4, r16	; 0x04
    259c:	b7 01       	movw	r22, r14
    259e:	88 81       	ld	r24, Y
    25a0:	99 81       	ldd	r25, Y+1	; 0x01
    25a2:	3f d6       	rcall	.+3198   	; 0x3222 <strcpy>
    25a4:	ce 01       	movw	r24, r28
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	ff 90       	pop	r15
    25b0:	ef 90       	pop	r14
    25b2:	08 95       	ret

000025b4 <_ZN6StringC1EPKc>:
    25b4:	fc 01       	movw	r30, r24
    25b6:	11 82       	std	Z+1, r1	; 0x01
    25b8:	10 82       	st	Z, r1
    25ba:	13 82       	std	Z+3, r1	; 0x03
    25bc:	12 82       	std	Z+2, r1	; 0x02
    25be:	15 82       	std	Z+5, r1	; 0x05
    25c0:	14 82       	std	Z+4, r1	; 0x04
    25c2:	61 15       	cp	r22, r1
    25c4:	71 05       	cpc	r23, r1
    25c6:	49 f0       	breq	.+18     	; 0x25da <_ZN6StringC1EPKc+0x26>
    25c8:	fb 01       	movw	r30, r22
    25ca:	01 90       	ld	r0, Z+
    25cc:	00 20       	and	r0, r0
    25ce:	e9 f7       	brne	.-6      	; 0x25ca <_ZN6StringC1EPKc+0x16>
    25d0:	31 97       	sbiw	r30, 0x01	; 1
    25d2:	af 01       	movw	r20, r30
    25d4:	46 1b       	sub	r20, r22
    25d6:	57 0b       	sbc	r21, r23
    25d8:	cf cf       	rjmp	.-98     	; 0x2578 <_ZN6String4copyEPKcj>
    25da:	08 95       	ret

000025dc <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	ec 01       	movw	r28, r24
    25e2:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    25e4:	86 17       	cp	r24, r22
    25e6:	97 07       	cpc	r25, r23
    25e8:	51 f0       	breq	.+20     	; 0x25fe <_ZN6StringaSERKS_+0x22>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    25ea:	60 81       	ld	r22, Z
    25ec:	71 81       	ldd	r23, Z+1	; 0x01
    25ee:	61 15       	cp	r22, r1
    25f0:	71 05       	cpc	r23, r1
    25f2:	21 f0       	breq	.+8      	; 0x25fc <_ZN6StringaSERKS_+0x20>
    25f4:	44 81       	ldd	r20, Z+4	; 0x04
    25f6:	55 81       	ldd	r21, Z+5	; 0x05
    25f8:	bf df       	rcall	.-130    	; 0x2578 <_ZN6String4copyEPKcj>
    25fa:	01 c0       	rjmp	.+2      	; 0x25fe <_ZN6StringaSERKS_+0x22>
	else invalidate();
    25fc:	78 df       	rcall	.-272    	; 0x24ee <_ZN6String10invalidateEv>
    25fe:	ce 01       	movw	r24, r28
	
	return *this;
}
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	08 95       	ret

00002606 <_ZN6StringC1ERKS_>:
    2606:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2608:	11 82       	std	Z+1, r1	; 0x01
    260a:	10 82       	st	Z, r1
	capacity = 0;
    260c:	13 82       	std	Z+3, r1	; 0x03
    260e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2610:	15 82       	std	Z+5, r1	; 0x05
    2612:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    2614:	e3 cf       	rjmp	.-58     	; 0x25dc <_ZN6StringaSERKS_>

00002616 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    2616:	fc 01       	movw	r30, r24
    2618:	13 82       	std	Z+3, r1	; 0x03
    261a:	12 82       	std	Z+2, r1	; 0x02
    261c:	8d e3       	ldi	r24, 0x3D	; 61
    261e:	93 e0       	ldi	r25, 0x03	; 3
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	80 83       	st	Z, r24
    2624:	64 83       	std	Z+4, r22	; 0x04
    2626:	41 87       	std	Z+9, r20	; 0x09
    2628:	22 87       	std	Z+10, r18	; 0x0a
    262a:	13 86       	std	Z+11, r1	; 0x0b
    262c:	08 95       	ret

0000262e <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    262e:	1f 93       	push	r17
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	ec 01       	movw	r28, r24
    2636:	16 2f       	mov	r17, r22
    2638:	6c 81       	ldd	r22, Y+4	; 0x04
    263a:	82 ef       	ldi	r24, 0xF2	; 242
    263c:	94 e0       	ldi	r25, 0x04	; 4
    263e:	b9 d1       	rcall	.+882    	; 0x29b2 <_ZN7TwoWire17beginTransmissionEh>
    2640:	6b 85       	ldd	r22, Y+11	; 0x0b
    2642:	61 2b       	or	r22, r17
    2644:	82 ef       	ldi	r24, 0xF2	; 242
    2646:	94 e0       	ldi	r25, 0x04	; 4
    2648:	67 d1       	rcall	.+718    	; 0x2918 <_ZN7TwoWire5writeEh>
    264a:	82 ef       	ldi	r24, 0xF2	; 242
    264c:	94 e0       	ldi	r25, 0x04	; 4
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	1f 91       	pop	r17
    2654:	ca c1       	rjmp	.+916    	; 0x29ea <_ZN7TwoWire15endTransmissionEv>

00002656 <_ZN17LiquidCrystal_I2C9backlightEv>:
    2656:	28 e0       	ldi	r18, 0x08	; 8
    2658:	fc 01       	movw	r30, r24
    265a:	23 87       	std	Z+11, r18	; 0x0b
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	e7 cf       	rjmp	.-50     	; 0x262e <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002660 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	cf 93       	push	r28
    2666:	8c 01       	movw	r16, r24
    2668:	c6 2f       	mov	r28, r22
    266a:	64 60       	ori	r22, 0x04	; 4
    266c:	e0 df       	rcall	.-64     	; 0x262e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0d de       	rcall	.-998    	; 0x228e <delayMicroseconds>
    2674:	6c 2f       	mov	r22, r28
    2676:	6b 7f       	andi	r22, 0xFB	; 251
    2678:	c8 01       	movw	r24, r16
    267a:	d9 df       	rcall	.-78     	; 0x262e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    267c:	82 e3       	ldi	r24, 0x32	; 50
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	03 ce       	rjmp	.-1018   	; 0x228e <delayMicroseconds>

00002688 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	ec 01       	movw	r28, r24
    2690:	16 2f       	mov	r17, r22
    2692:	cd df       	rcall	.-102    	; 0x262e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2694:	61 2f       	mov	r22, r17
    2696:	ce 01       	movw	r24, r28
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	1f 91       	pop	r17
    269e:	e0 cf       	rjmp	.-64     	; 0x2660 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000026a0 <_ZN17LiquidCrystal_I2C4sendEhh>:
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	8c 01       	movw	r16, r24
    26aa:	c6 2f       	mov	r28, r22
    26ac:	d4 2f       	mov	r29, r20
    26ae:	60 7f       	andi	r22, 0xF0	; 240
    26b0:	64 2b       	or	r22, r20
    26b2:	ea df       	rcall	.-44     	; 0x2688 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    26b4:	80 e1       	ldi	r24, 0x10	; 16
    26b6:	c8 9f       	mul	r28, r24
    26b8:	b0 01       	movw	r22, r0
    26ba:	11 24       	eor	r1, r1
    26bc:	6d 2b       	or	r22, r29
    26be:	c8 01       	movw	r24, r16
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	df cf       	rjmp	.-66     	; 0x2688 <_ZN17LiquidCrystal_I2C10write4bitsEh>

000026ca <_ZN17LiquidCrystal_I2C7commandEh>:
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	e9 cf       	rjmp	.-46     	; 0x26a0 <_ZN17LiquidCrystal_I2C4sendEhh>

000026ce <_ZN17LiquidCrystal_I2C5clearEv>:
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	fc df       	rcall	.-8      	; 0x26ca <_ZN17LiquidCrystal_I2C7commandEh>
    26d2:	80 ed       	ldi	r24, 0xD0	; 208
    26d4:	97 e0       	ldi	r25, 0x07	; 7
    26d6:	db cd       	rjmp	.-1098   	; 0x228e <delayMicroseconds>

000026d8 <_ZN17LiquidCrystal_I2C4homeEv>:
    26d8:	62 e0       	ldi	r22, 0x02	; 2
    26da:	f7 df       	rcall	.-18     	; 0x26ca <_ZN17LiquidCrystal_I2C7commandEh>
    26dc:	80 ed       	ldi	r24, 0xD0	; 208
    26de:	97 e0       	ldi	r25, 0x07	; 7
    26e0:	d6 cd       	rjmp	.-1108   	; 0x228e <delayMicroseconds>

000026e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	28 97       	sbiw	r28, 0x08	; 8
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	9c 01       	movw	r18, r24
    26f8:	88 e0       	ldi	r24, 0x08	; 8
    26fa:	e8 e0       	ldi	r30, 0x08	; 8
    26fc:	f2 e0       	ldi	r31, 0x02	; 2
    26fe:	de 01       	movw	r26, r28
    2700:	11 96       	adiw	r26, 0x01	; 1
    2702:	01 90       	ld	r0, Z+
    2704:	0d 92       	st	X+, r0
    2706:	8a 95       	dec	r24
    2708:	e1 f7       	brne	.-8      	; 0x2702 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    270a:	f9 01       	movw	r30, r18
    270c:	80 85       	ldd	r24, Z+8	; 0x08
    270e:	84 17       	cp	r24, r20
    2710:	10 f4       	brcc	.+4      	; 0x2716 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2712:	4f ef       	ldi	r20, 0xFF	; 255
    2714:	48 0f       	add	r20, r24
    2716:	fe 01       	movw	r30, r28
    2718:	31 96       	adiw	r30, 0x01	; 1
    271a:	e4 0f       	add	r30, r20
    271c:	f1 1d       	adc	r31, r1
    271e:	e4 0f       	add	r30, r20
    2720:	f1 1d       	adc	r31, r1
    2722:	90 81       	ld	r25, Z
    2724:	69 0f       	add	r22, r25
    2726:	60 68       	ori	r22, 0x80	; 128
    2728:	c9 01       	movw	r24, r18
    272a:	28 96       	adiw	r28, 0x08	; 8
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	c7 cf       	rjmp	.-114    	; 0x26ca <_ZN17LiquidCrystal_I2C7commandEh>

0000273c <_ZN17LiquidCrystal_I2C7displayEv>:
    273c:	fc 01       	movw	r30, r24
    273e:	66 81       	ldd	r22, Z+6	; 0x06
    2740:	26 2f       	mov	r18, r22
    2742:	24 60       	ori	r18, 0x04	; 4
    2744:	26 83       	std	Z+6, r18	; 0x06
    2746:	6c 60       	ori	r22, 0x0C	; 12
    2748:	c0 cf       	rjmp	.-128    	; 0x26ca <_ZN17LiquidCrystal_I2C7commandEh>

0000274a <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    274a:	41 e0       	ldi	r20, 0x01	; 1
    274c:	a9 df       	rcall	.-174    	; 0x26a0 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	08 95       	ret

00002754 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	ec 01       	movw	r28, r24
	if (lines > 1) {
    275a:	42 30       	cpi	r20, 0x02	; 2
    275c:	18 f0       	brcs	.+6      	; 0x2764 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	88 60       	ori	r24, 0x08	; 8
    2762:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    2764:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    2766:	22 23       	and	r18, r18
    2768:	29 f0       	breq	.+10     	; 0x2774 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    276a:	41 30       	cpi	r20, 0x01	; 1
    276c:	19 f4       	brne	.+6      	; 0x2774 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	84 60       	ori	r24, 0x04	; 4
    2772:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2774:	62 e3       	ldi	r22, 0x32	; 50
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	4f dd       	rcall	.-1378   	; 0x221c <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    277e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2780:	ce 01       	movw	r24, r28
    2782:	55 df       	rcall	.-342    	; 0x262e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    2784:	68 ee       	ldi	r22, 0xE8	; 232
    2786:	73 e0       	ldi	r23, 0x03	; 3
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	47 dd       	rcall	.-1394   	; 0x221c <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    278e:	60 e3       	ldi	r22, 0x30	; 48
    2790:	ce 01       	movw	r24, r28
    2792:	7a df       	rcall	.-268    	; 0x2688 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2794:	84 e9       	ldi	r24, 0x94	; 148
    2796:	91 e1       	ldi	r25, 0x11	; 17
    2798:	7a dd       	rcall	.-1292   	; 0x228e <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    279a:	60 e3       	ldi	r22, 0x30	; 48
    279c:	ce 01       	movw	r24, r28
    279e:	74 df       	rcall	.-280    	; 0x2688 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    27a0:	84 e9       	ldi	r24, 0x94	; 148
    27a2:	91 e1       	ldi	r25, 0x11	; 17
    27a4:	74 dd       	rcall	.-1304   	; 0x228e <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    27a6:	60 e3       	ldi	r22, 0x30	; 48
    27a8:	ce 01       	movw	r24, r28
    27aa:	6e df       	rcall	.-292    	; 0x2688 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    27ac:	86 e9       	ldi	r24, 0x96	; 150
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	6e dd       	rcall	.-1316   	; 0x228e <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    27b2:	60 e2       	ldi	r22, 0x20	; 32
    27b4:	ce 01       	movw	r24, r28
    27b6:	68 df       	rcall	.-304    	; 0x2688 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    27b8:	6d 81       	ldd	r22, Y+5	; 0x05
    27ba:	60 62       	ori	r22, 0x20	; 32
    27bc:	ce 01       	movw	r24, r28
    27be:	85 df       	rcall	.-246    	; 0x26ca <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    27c0:	84 e0       	ldi	r24, 0x04	; 4
    27c2:	8e 83       	std	Y+6, r24	; 0x06
	display();
    27c4:	ce 01       	movw	r24, r28
    27c6:	ba df       	rcall	.-140    	; 0x273c <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    27c8:	ce 01       	movw	r24, r28
    27ca:	81 df       	rcall	.-254    	; 0x26ce <_ZN17LiquidCrystal_I2C5clearEv>
    27cc:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    27ce:	8f 83       	std	Y+7, r24	; 0x07
    27d0:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    27d2:	ce 01       	movw	r24, r28
    27d4:	7a df       	rcall	.-268    	; 0x26ca <_ZN17LiquidCrystal_I2C7commandEh>
    27d6:	ce 01       	movw	r24, r28
    27d8:	df 91       	pop	r29
	
	home();
    27da:	cf 91       	pop	r28
  
}
    27dc:	7d cf       	rjmp	.-262    	; 0x26d8 <_ZN17LiquidCrystal_I2C4homeEv>

000027de <_ZN17LiquidCrystal_I2C9init_privEv>:
    27de:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    27e0:	df 93       	push	r29
    27e2:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    27e4:	82 ef       	ldi	r24, 0xF2	; 242
    27e6:	94 e0       	ldi	r25, 0x04	; 4
    27e8:	d5 d0       	rcall	.+426    	; 0x2994 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    27ea:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	4a 85       	ldd	r20, Y+10	; 0x0a
    27f0:	69 85       	ldd	r22, Y+9	; 0x09
    27f2:	ce 01       	movw	r24, r28
}
    27f4:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    27f6:	cf 91       	pop	r28
    27f8:	ad cf       	rjmp	.-166    	; 0x2754 <_ZN17LiquidCrystal_I2C5beginEhhh>

000027fa <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    27fa:	f1 cf       	rjmp	.-30     	; 0x27de <_ZN17LiquidCrystal_I2C9init_privEv>

000027fc <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    27fc:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <_ZN7TwoWire14rxBufferLengthE>
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	20 91 27 05 	lds	r18, 0x0527	; 0x800527 <_ZN7TwoWire13rxBufferIndexE>
    2806:	82 1b       	sub	r24, r18
    2808:	91 09       	sbc	r25, r1
    280a:	08 95       	ret

0000280c <_ZN7TwoWire4readEv>:
    280c:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <_ZN7TwoWire13rxBufferIndexE>
    2810:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <_ZN7TwoWire14rxBufferLengthE>
    2814:	98 17       	cp	r25, r24
    2816:	50 f4       	brcc	.+20     	; 0x282c <_ZN7TwoWire4readEv+0x20>
    2818:	e9 2f       	mov	r30, r25
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	e8 5d       	subi	r30, 0xD8	; 216
    281e:	fa 4f       	sbci	r31, 0xFA	; 250
    2820:	20 81       	ld	r18, Z
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	9f 5f       	subi	r25, 0xFF	; 255
    2826:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <_ZN7TwoWire13rxBufferIndexE>
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <_ZN7TwoWire4readEv+0x24>
    282c:	2f ef       	ldi	r18, 0xFF	; 255
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	c9 01       	movw	r24, r18
    2832:	08 95       	ret

00002834 <_ZN7TwoWire4peekEv>:
    2834:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <_ZN7TwoWire13rxBufferIndexE>
    2838:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <_ZN7TwoWire14rxBufferLengthE>
    283c:	e8 17       	cp	r30, r24
    283e:	30 f4       	brcc	.+12     	; 0x284c <_ZN7TwoWire4peekEv+0x18>
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	e8 5d       	subi	r30, 0xD8	; 216
    2844:	fa 4f       	sbci	r31, 0xFA	; 250
    2846:	80 81       	ld	r24, Z
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	08 95       	ret
    284c:	8f ef       	ldi	r24, 0xFF	; 255
    284e:	9f ef       	ldi	r25, 0xFF	; 255
    2850:	08 95       	ret

00002852 <_ZN7TwoWire5flushEv>:
    2852:	08 95       	ret

00002854 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	ec 01       	movw	r28, r24
    285a:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <_ZN7TwoWire14user_onReceiveE>
    285e:	f0 91 ff 04 	lds	r31, 0x04FF	; 0x8004ff <_ZN7TwoWire14user_onReceiveE+0x1>
    2862:	30 97       	sbiw	r30, 0x00	; 0
    2864:	f1 f0       	breq	.+60     	; 0x28a2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2866:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <_ZN7TwoWire13rxBufferIndexE>
    286a:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <_ZN7TwoWire14rxBufferLengthE>
    286e:	98 17       	cp	r25, r24
    2870:	c0 f0       	brcs	.+48     	; 0x28a2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	29 2f       	mov	r18, r25
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	26 17       	cp	r18, r22
    287a:	37 07       	cpc	r19, r23
    287c:	54 f4       	brge	.+20     	; 0x2892 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    287e:	de 01       	movw	r26, r28
    2880:	a2 0f       	add	r26, r18
    2882:	b3 1f       	adc	r27, r19
    2884:	4c 91       	ld	r20, X
    2886:	d9 01       	movw	r26, r18
    2888:	a8 5d       	subi	r26, 0xD8	; 216
    288a:	ba 4f       	sbci	r27, 0xFA	; 250
    288c:	4c 93       	st	X, r20
    288e:	9f 5f       	subi	r25, 0xFF	; 255
    2890:	f1 cf       	rjmp	.-30     	; 0x2874 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2892:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <_ZN7TwoWire13rxBufferIndexE>
    2896:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <_ZN7TwoWire14rxBufferLengthE>
    289a:	cb 01       	movw	r24, r22
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	19 94       	eijmp
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	08 95       	ret

000028a8 <_ZN7TwoWire16onRequestServiceEv>:
    28a8:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <_ZN7TwoWire14user_onRequestE>
    28ac:	f0 91 01 05 	lds	r31, 0x0501	; 0x800501 <_ZN7TwoWire14user_onRequestE+0x1>
    28b0:	30 97       	sbiw	r30, 0x00	; 0
    28b2:	29 f0       	breq	.+10     	; 0x28be <_ZN7TwoWire16onRequestServiceEv+0x16>
    28b4:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZN7TwoWire13txBufferIndexE>
    28b8:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZN7TwoWire14txBufferLengthE>
    28bc:	19 94       	eijmp
    28be:	08 95       	ret

000028c0 <_ZN7TwoWire5writeEPKhj>:
    28c0:	cf 92       	push	r12
    28c2:	df 92       	push	r13
    28c4:	ef 92       	push	r14
    28c6:	ff 92       	push	r15
    28c8:	0f 93       	push	r16
    28ca:	1f 93       	push	r17
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	7c 01       	movw	r14, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	8a 01       	movw	r16, r20
    28d6:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN7TwoWire12transmittingE>
    28da:	22 23       	and	r18, r18
    28dc:	89 f0       	breq	.+34     	; 0x2900 <_ZN7TwoWire5writeEPKhj+0x40>
    28de:	eb 01       	movw	r28, r22
    28e0:	6b 01       	movw	r12, r22
    28e2:	c4 0e       	add	r12, r20
    28e4:	d5 1e       	adc	r13, r21
    28e6:	cc 15       	cp	r28, r12
    28e8:	dd 05       	cpc	r29, r13
    28ea:	61 f0       	breq	.+24     	; 0x2904 <_ZN7TwoWire5writeEPKhj+0x44>
    28ec:	69 91       	ld	r22, Y+
    28ee:	d7 01       	movw	r26, r14
    28f0:	ed 91       	ld	r30, X+
    28f2:	fc 91       	ld	r31, X
    28f4:	01 90       	ld	r0, Z+
    28f6:	f0 81       	ld	r31, Z
    28f8:	e0 2d       	mov	r30, r0
    28fa:	c7 01       	movw	r24, r14
    28fc:	19 95       	eicall
    28fe:	f3 cf       	rjmp	.-26     	; 0x28e6 <_ZN7TwoWire5writeEPKhj+0x26>
    2900:	64 2f       	mov	r22, r20
    2902:	eb d0       	rcall	.+470    	; 0x2ada <twi_transmit>
    2904:	c8 01       	movw	r24, r16
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	ff 90       	pop	r15
    2910:	ef 90       	pop	r14
    2912:	df 90       	pop	r13
    2914:	cf 90       	pop	r12
    2916:	08 95       	ret

00002918 <_ZN7TwoWire5writeEh>:
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	1f 92       	push	r1
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	69 83       	std	Y+1, r22	; 0x01
    2924:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN7TwoWire12transmittingE>
    2928:	22 23       	and	r18, r18
    292a:	d1 f0       	breq	.+52     	; 0x2960 <_ZN7TwoWire5writeEh+0x48>
    292c:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <_ZN7TwoWire14txBufferLengthE>
    2930:	20 32       	cpi	r18, 0x20	; 32
    2932:	40 f0       	brcs	.+16     	; 0x2944 <_ZN7TwoWire5writeEh+0x2c>
    2934:	21 e0       	ldi	r18, 0x01	; 1
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	fc 01       	movw	r30, r24
    293a:	33 83       	std	Z+3, r19	; 0x03
    293c:	22 83       	std	Z+2, r18	; 0x02
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	14 c0       	rjmp	.+40     	; 0x296c <_ZN7TwoWire5writeEh+0x54>
    2944:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <_ZN7TwoWire13txBufferIndexE>
    2948:	e8 2f       	mov	r30, r24
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	eb 5f       	subi	r30, 0xFB	; 251
    294e:	fa 4f       	sbci	r31, 0xFA	; 250
    2950:	99 81       	ldd	r25, Y+1	; 0x01
    2952:	90 83       	st	Z, r25
    2954:	8f 5f       	subi	r24, 0xFF	; 255
    2956:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZN7TwoWire13txBufferIndexE>
    295a:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZN7TwoWire14txBufferLengthE>
    295e:	04 c0       	rjmp	.+8      	; 0x2968 <_ZN7TwoWire5writeEh+0x50>
    2960:	61 e0       	ldi	r22, 0x01	; 1
    2962:	ce 01       	movw	r24, r28
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	b9 d0       	rcall	.+370    	; 0x2ada <twi_transmit>
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0f 90       	pop	r0
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	08 95       	ret

00002974 <_ZN7TwoWireC1Ev>:
    2974:	fc 01       	movw	r30, r24
    2976:	13 82       	std	Z+3, r1	; 0x03
    2978:	12 82       	std	Z+2, r1	; 0x02
    297a:	88 ee       	ldi	r24, 0xE8	; 232
    297c:	93 e0       	ldi	r25, 0x03	; 3
    297e:	a0 e0       	ldi	r26, 0x00	; 0
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	84 83       	std	Z+4, r24	; 0x04
    2984:	95 83       	std	Z+5, r25	; 0x05
    2986:	a6 83       	std	Z+6, r26	; 0x06
    2988:	b7 83       	std	Z+7, r27	; 0x07
    298a:	89 e4       	ldi	r24, 0x49	; 73
    298c:	93 e0       	ldi	r25, 0x03	; 3
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	08 95       	ret

00002994 <_ZN7TwoWire5beginEv>:
    2994:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <_ZN7TwoWire13rxBufferIndexE>
    2998:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <_ZN7TwoWire14rxBufferLengthE>
    299c:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZN7TwoWire13txBufferIndexE>
    29a0:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZN7TwoWire14txBufferLengthE>
    29a4:	28 d0       	rcall	.+80     	; 0x29f6 <twi_init>
    29a6:	84 e5       	ldi	r24, 0x54	; 84
    29a8:	94 e1       	ldi	r25, 0x14	; 20
    29aa:	c4 d0       	rcall	.+392    	; 0x2b34 <twi_attachSlaveTxEvent>
    29ac:	8a e2       	ldi	r24, 0x2A	; 42
    29ae:	94 e1       	ldi	r25, 0x14	; 20
    29b0:	bc c0       	rjmp	.+376    	; 0x2b2a <twi_attachSlaveRxEvent>

000029b2 <_ZN7TwoWire17beginTransmissionEh>:
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN7TwoWire12transmittingE>
    29b8:	60 93 25 05 	sts	0x0525, r22	; 0x800525 <_ZN7TwoWire9txAddressE>
    29bc:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZN7TwoWire13txBufferIndexE>
    29c0:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZN7TwoWire14txBufferLengthE>
    29c4:	08 95       	ret

000029c6 <_ZN7TwoWire15endTransmissionEh>:
    29c6:	0f 93       	push	r16
    29c8:	06 2f       	mov	r16, r22
    29ca:	21 e0       	ldi	r18, 0x01	; 1
    29cc:	40 91 03 05 	lds	r20, 0x0503	; 0x800503 <_ZN7TwoWire14txBufferLengthE>
    29d0:	65 e0       	ldi	r22, 0x05	; 5
    29d2:	75 e0       	ldi	r23, 0x05	; 5
    29d4:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <_ZN7TwoWire9txAddressE>
    29d8:	2a d0       	rcall	.+84     	; 0x2a2e <twi_writeTo>
    29da:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZN7TwoWire13txBufferIndexE>
    29de:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZN7TwoWire14txBufferLengthE>
    29e2:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN7TwoWire12transmittingE>
    29e6:	0f 91       	pop	r16
    29e8:	08 95       	ret

000029ea <_ZN7TwoWire15endTransmissionEv>:
    29ea:	61 e0       	ldi	r22, 0x01	; 1
    29ec:	ec cf       	rjmp	.-40     	; 0x29c6 <_ZN7TwoWire15endTransmissionEh>

000029ee <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    29ee:	82 ef       	ldi	r24, 0xF2	; 242
    29f0:	94 e0       	ldi	r25, 0x04	; 4
    29f2:	c0 cf       	rjmp	.-128    	; 0x2974 <_ZN7TwoWireC1Ev>

000029f4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    29f4:	08 95       	ret

000029f6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    29f6:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <twi_state>
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <twi_sendStop>
    2a00:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <twi_inRepStart>
    2a04:	61 e0       	ldi	r22, 0x01	; 1
    2a06:	84 e1       	ldi	r24, 0x14	; 20
    2a08:	40 dd       	rcall	.-1408   	; 0x248a <digitalWrite>
    2a0a:	61 e0       	ldi	r22, 0x01	; 1
    2a0c:	85 e1       	ldi	r24, 0x15	; 21
    2a0e:	3d dd       	rcall	.-1414   	; 0x248a <digitalWrite>
    2a10:	e9 eb       	ldi	r30, 0xB9	; 185
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	8e 7f       	andi	r24, 0xFE	; 254
    2a18:	80 83       	st	Z, r24
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8d 7f       	andi	r24, 0xFD	; 253
    2a1e:	80 83       	st	Z, r24
    2a20:	88 e4       	ldi	r24, 0x48	; 72
    2a22:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2a26:	85 e4       	ldi	r24, 0x45	; 69
    2a28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a2c:	08 95       	ret

00002a2e <twi_writeTo>:
    2a2e:	0f 93       	push	r16
    2a30:	41 32       	cpi	r20, 0x21	; 33
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <twi_writeTo+0x8>
    2a34:	4a c0       	rjmp	.+148    	; 0x2aca <twi_writeTo+0x9c>
    2a36:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <twi_state>
    2a3a:	91 11       	cpse	r25, r1
    2a3c:	fc cf       	rjmp	.-8      	; 0x2a36 <twi_writeTo+0x8>
    2a3e:	32 e0       	ldi	r19, 0x02	; 2
    2a40:	30 93 b5 05 	sts	0x05B5, r19	; 0x8005b5 <twi_state>
    2a44:	00 93 b3 05 	sts	0x05B3, r16	; 0x8005b3 <twi_sendStop>
    2a48:	3f ef       	ldi	r19, 0xFF	; 255
    2a4a:	30 93 48 05 	sts	0x0548, r19	; 0x800548 <twi_error>
    2a4e:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <twi_masterBufferIndex>
    2a52:	40 93 8c 05 	sts	0x058C, r20	; 0x80058c <twi_masterBufferLength>
    2a56:	56 2f       	mov	r21, r22
    2a58:	ae e8       	ldi	r26, 0x8E	; 142
    2a5a:	b5 e0       	ldi	r27, 0x05	; 5
    2a5c:	fb 01       	movw	r30, r22
    2a5e:	3e 2f       	mov	r19, r30
    2a60:	35 1b       	sub	r19, r21
    2a62:	34 17       	cp	r19, r20
    2a64:	18 f4       	brcc	.+6      	; 0x2a6c <twi_writeTo+0x3e>
    2a66:	31 91       	ld	r19, Z+
    2a68:	3d 93       	st	X+, r19
    2a6a:	f9 cf       	rjmp	.-14     	; 0x2a5e <twi_writeTo+0x30>
    2a6c:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <twi_slarw>
    2a70:	30 91 b4 05 	lds	r19, 0x05B4	; 0x8005b4 <twi_slarw>
    2a74:	88 0f       	add	r24, r24
    2a76:	83 2b       	or	r24, r19
    2a78:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <twi_slarw>
    2a7c:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <twi_inRepStart>
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	61 f4       	brne	.+24     	; 0x2a9c <twi_writeTo+0x6e>
    2a84:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <twi_inRepStart>
    2a88:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <twi_slarw>
    2a8c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2a90:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a94:	83 fd       	sbrc	r24, 3
    2a96:	f8 cf       	rjmp	.-16     	; 0x2a88 <twi_writeTo+0x5a>
    2a98:	85 ec       	ldi	r24, 0xC5	; 197
    2a9a:	01 c0       	rjmp	.+2      	; 0x2a9e <twi_writeTo+0x70>
    2a9c:	85 ee       	ldi	r24, 0xE5	; 229
    2a9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2aa2:	22 23       	and	r18, r18
    2aa4:	21 f0       	breq	.+8      	; 0x2aae <twi_writeTo+0x80>
    2aa6:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <twi_state>
    2aaa:	82 30       	cpi	r24, 0x02	; 2
    2aac:	d1 f3       	breq	.-12     	; 0x2aa2 <twi_writeTo+0x74>
    2aae:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <twi_error>
    2ab2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ab4:	79 f0       	breq	.+30     	; 0x2ad4 <twi_writeTo+0xa6>
    2ab6:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <twi_error>
    2aba:	80 32       	cpi	r24, 0x20	; 32
    2abc:	41 f0       	breq	.+16     	; 0x2ace <twi_writeTo+0xa0>
    2abe:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <twi_error>
    2ac2:	80 33       	cpi	r24, 0x30	; 48
    2ac4:	31 f0       	breq	.+12     	; 0x2ad2 <twi_writeTo+0xa4>
    2ac6:	94 e0       	ldi	r25, 0x04	; 4
    2ac8:	05 c0       	rjmp	.+10     	; 0x2ad4 <twi_writeTo+0xa6>
    2aca:	91 e0       	ldi	r25, 0x01	; 1
    2acc:	03 c0       	rjmp	.+6      	; 0x2ad4 <twi_writeTo+0xa6>
    2ace:	92 e0       	ldi	r25, 0x02	; 2
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <twi_writeTo+0xa6>
    2ad2:	93 e0       	ldi	r25, 0x03	; 3
    2ad4:	89 2f       	mov	r24, r25
    2ad6:	0f 91       	pop	r16
    2ad8:	08 95       	ret

00002ada <twi_transmit>:
    2ada:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <twi_txBufferLength>
    2ade:	26 2f       	mov	r18, r22
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	24 0f       	add	r18, r20
    2ae4:	31 1d       	adc	r19, r1
    2ae6:	21 32       	cpi	r18, 0x21	; 33
    2ae8:	31 05       	cpc	r19, r1
    2aea:	dc f4       	brge	.+54     	; 0x2b22 <twi_transmit+0x48>
    2aec:	20 91 b5 05 	lds	r18, 0x05B5	; 0x8005b5 <twi_state>
    2af0:	24 30       	cpi	r18, 0x04	; 4
    2af2:	c9 f4       	brne	.+50     	; 0x2b26 <twi_transmit+0x4c>
    2af4:	fc 01       	movw	r30, r24
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	86 17       	cp	r24, r22
    2afc:	58 f4       	brcc	.+22     	; 0x2b14 <twi_transmit+0x3a>
    2afe:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <twi_txBufferLength>
    2b02:	21 91       	ld	r18, Z+
    2b04:	dc 01       	movw	r26, r24
    2b06:	a4 59       	subi	r26, 0x94	; 148
    2b08:	ba 4f       	sbci	r27, 0xFA	; 250
    2b0a:	a3 0f       	add	r26, r19
    2b0c:	b1 1d       	adc	r27, r1
    2b0e:	2c 93       	st	X, r18
    2b10:	01 96       	adiw	r24, 0x01	; 1
    2b12:	f3 cf       	rjmp	.-26     	; 0x2afa <twi_transmit+0x20>
    2b14:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <twi_txBufferLength>
    2b18:	68 0f       	add	r22, r24
    2b1a:	60 93 6a 05 	sts	0x056A, r22	; 0x80056a <twi_txBufferLength>
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	08 95       	ret
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	08 95       	ret
    2b26:	82 e0       	ldi	r24, 0x02	; 2
    2b28:	08 95       	ret

00002b2a <twi_attachSlaveRxEvent>:
    2b2a:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <twi_onSlaveReceive+0x1>
    2b2e:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <twi_onSlaveReceive>
    2b32:	08 95       	ret

00002b34 <twi_attachSlaveTxEvent>:
    2b34:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <twi_onSlaveTransmit+0x1>
    2b38:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <twi_onSlaveTransmit>
    2b3c:	08 95       	ret

00002b3e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2b3e:	85 ed       	ldi	r24, 0xD5	; 213
    2b40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2b44:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b48:	84 fd       	sbrc	r24, 4
    2b4a:	fc cf       	rjmp	.-8      	; 0x2b44 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2b4c:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <twi_state>
    2b50:	08 95       	ret

00002b52 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2b52:	85 ec       	ldi	r24, 0xC5	; 197
    2b54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2b58:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <twi_state>
    2b5c:	08 95       	ret

00002b5e <__vector_39>:
}

ISR(TWI_vect)
{
    2b5e:	1f 92       	push	r1
    2b60:	0f 92       	push	r0
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	0f 92       	push	r0
    2b66:	11 24       	eor	r1, r1
    2b68:	0b b6       	in	r0, 0x3b	; 59
    2b6a:	0f 92       	push	r0
    2b6c:	2f 93       	push	r18
    2b6e:	3f 93       	push	r19
    2b70:	4f 93       	push	r20
    2b72:	5f 93       	push	r21
    2b74:	6f 93       	push	r22
    2b76:	7f 93       	push	r23
    2b78:	8f 93       	push	r24
    2b7a:	9f 93       	push	r25
    2b7c:	af 93       	push	r26
    2b7e:	bf 93       	push	r27
    2b80:	ef 93       	push	r30
    2b82:	ff 93       	push	r31
  switch(TW_STATUS){
    2b84:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2b88:	88 7f       	andi	r24, 0xF8	; 248
    2b8a:	80 36       	cpi	r24, 0x60	; 96
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <__vector_39+0x32>
    2b8e:	9d c0       	rjmp	.+314    	; 0x2cca <__vector_39+0x16c>
    2b90:	70 f5       	brcc	.+92     	; 0x2bee <__vector_39+0x90>
    2b92:	88 32       	cpi	r24, 0x28	; 40
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <__vector_39+0x3a>
    2b96:	5c c0       	rjmp	.+184    	; 0x2c50 <__vector_39+0xf2>
    2b98:	90 f4       	brcc	.+36     	; 0x2bbe <__vector_39+0x60>
    2b9a:	80 31       	cpi	r24, 0x10	; 16
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <__vector_39+0x42>
    2b9e:	55 c0       	rjmp	.+170    	; 0x2c4a <__vector_39+0xec>
    2ba0:	38 f4       	brcc	.+14     	; 0x2bb0 <__vector_39+0x52>
    2ba2:	88 23       	and	r24, r24
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <__vector_39+0x4a>
    2ba6:	f3 c0       	rjmp	.+486    	; 0x2d8e <__vector_39+0x230>
    2ba8:	88 30       	cpi	r24, 0x08	; 8
    2baa:	09 f4       	brne	.+2      	; 0x2bae <__vector_39+0x50>
    2bac:	4e c0       	rjmp	.+156    	; 0x2c4a <__vector_39+0xec>
    2bae:	f2 c0       	rjmp	.+484    	; 0x2d94 <__vector_39+0x236>
    2bb0:	88 31       	cpi	r24, 0x18	; 24
    2bb2:	09 f4       	brne	.+2      	; 0x2bb6 <__vector_39+0x58>
    2bb4:	4d c0       	rjmp	.+154    	; 0x2c50 <__vector_39+0xf2>
    2bb6:	80 32       	cpi	r24, 0x20	; 32
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <__vector_39+0x5e>
    2bba:	5e c0       	rjmp	.+188    	; 0x2c78 <__vector_39+0x11a>
    2bbc:	eb c0       	rjmp	.+470    	; 0x2d94 <__vector_39+0x236>
    2bbe:	80 34       	cpi	r24, 0x40	; 64
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <__vector_39+0x66>
    2bc2:	69 c0       	rjmp	.+210    	; 0x2c96 <__vector_39+0x138>
    2bc4:	50 f4       	brcc	.+20     	; 0x2bda <__vector_39+0x7c>
    2bc6:	80 33       	cpi	r24, 0x30	; 48
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <__vector_39+0x6e>
    2bca:	56 c0       	rjmp	.+172    	; 0x2c78 <__vector_39+0x11a>
    2bcc:	88 33       	cpi	r24, 0x38	; 56
    2bce:	09 f0       	breq	.+2      	; 0x2bd2 <__vector_39+0x74>
    2bd0:	e1 c0       	rjmp	.+450    	; 0x2d94 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2bd2:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_error>
      twi_releaseBus();
    2bd6:	bd df       	rcall	.-134    	; 0x2b52 <twi_releaseBus>
      break;
    2bd8:	dd c0       	rjmp	.+442    	; 0x2d94 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2bda:	80 35       	cpi	r24, 0x50	; 80
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <__vector_39+0x82>
    2bde:	4f c0       	rjmp	.+158    	; 0x2c7e <__vector_39+0x120>
    2be0:	88 35       	cpi	r24, 0x58	; 88
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <__vector_39+0x88>
    2be4:	5d c0       	rjmp	.+186    	; 0x2ca0 <__vector_39+0x142>
    2be6:	88 34       	cpi	r24, 0x48	; 72
    2be8:	09 f0       	breq	.+2      	; 0x2bec <__vector_39+0x8e>
    2bea:	d4 c0       	rjmp	.+424    	; 0x2d94 <__vector_39+0x236>
    2bec:	d2 c0       	rjmp	.+420    	; 0x2d92 <__vector_39+0x234>
    2bee:	88 39       	cpi	r24, 0x98	; 152
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <__vector_39+0x96>
    2bf2:	c3 c0       	rjmp	.+390    	; 0x2d7a <__vector_39+0x21c>
    2bf4:	a8 f4       	brcc	.+42     	; 0x2c20 <__vector_39+0xc2>
    2bf6:	88 37       	cpi	r24, 0x78	; 120
    2bf8:	09 f4       	brne	.+2      	; 0x2bfc <__vector_39+0x9e>
    2bfa:	67 c0       	rjmp	.+206    	; 0x2cca <__vector_39+0x16c>
    2bfc:	38 f4       	brcc	.+14     	; 0x2c0c <__vector_39+0xae>
    2bfe:	88 36       	cpi	r24, 0x68	; 104
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <__vector_39+0xa6>
    2c02:	63 c0       	rjmp	.+198    	; 0x2cca <__vector_39+0x16c>
    2c04:	80 37       	cpi	r24, 0x70	; 112
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <__vector_39+0xac>
    2c08:	60 c0       	rjmp	.+192    	; 0x2cca <__vector_39+0x16c>
    2c0a:	c4 c0       	rjmp	.+392    	; 0x2d94 <__vector_39+0x236>
    2c0c:	88 38       	cpi	r24, 0x88	; 136
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <__vector_39+0xb4>
    2c10:	b4 c0       	rjmp	.+360    	; 0x2d7a <__vector_39+0x21c>
    2c12:	80 39       	cpi	r24, 0x90	; 144
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <__vector_39+0xba>
    2c16:	5f c0       	rjmp	.+190    	; 0x2cd6 <__vector_39+0x178>
    2c18:	80 38       	cpi	r24, 0x80	; 128
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <__vector_39+0xc0>
    2c1c:	bb c0       	rjmp	.+374    	; 0x2d94 <__vector_39+0x236>
    2c1e:	5b c0       	rjmp	.+182    	; 0x2cd6 <__vector_39+0x178>
    2c20:	80 3b       	cpi	r24, 0xB0	; 176
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <__vector_39+0xc8>
    2c24:	82 c0       	rjmp	.+260    	; 0x2d2a <__vector_39+0x1cc>
    2c26:	38 f4       	brcc	.+14     	; 0x2c36 <__vector_39+0xd8>
    2c28:	80 3a       	cpi	r24, 0xA0	; 160
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <__vector_39+0xd0>
    2c2c:	66 c0       	rjmp	.+204    	; 0x2cfa <__vector_39+0x19c>
    2c2e:	88 3a       	cpi	r24, 0xA8	; 168
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <__vector_39+0xd6>
    2c32:	7b c0       	rjmp	.+246    	; 0x2d2a <__vector_39+0x1cc>
    2c34:	af c0       	rjmp	.+350    	; 0x2d94 <__vector_39+0x236>
    2c36:	80 3c       	cpi	r24, 0xC0	; 192
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <__vector_39+0xde>
    2c3a:	a3 c0       	rjmp	.+326    	; 0x2d82 <__vector_39+0x224>
    2c3c:	88 3c       	cpi	r24, 0xC8	; 200
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <__vector_39+0xe4>
    2c40:	a0 c0       	rjmp	.+320    	; 0x2d82 <__vector_39+0x224>
    2c42:	88 3b       	cpi	r24, 0xB8	; 184
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <__vector_39+0xea>
    2c46:	86 c0       	rjmp	.+268    	; 0x2d54 <__vector_39+0x1f6>
    2c48:	a5 c0       	rjmp	.+330    	; 0x2d94 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2c4a:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <twi_slarw>
    2c4e:	10 c0       	rjmp	.+32     	; 0x2c70 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c50:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <twi_masterBufferIndex>
    2c54:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <twi_masterBufferLength>
    2c58:	98 17       	cp	r25, r24
    2c5a:	70 f5       	brcc	.+92     	; 0x2cb8 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2c5c:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <twi_masterBufferIndex>
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	8e 0f       	add	r24, r30
    2c64:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <twi_masterBufferIndex>
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	e2 57       	subi	r30, 0x72	; 114
    2c6c:	fa 4f       	sbci	r31, 0xFA	; 250
    2c6e:	80 81       	ld	r24, Z
    2c70:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c74:	85 ec       	ldi	r24, 0xC5	; 197
    2c76:	82 c0       	rjmp	.+260    	; 0x2d7c <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2c78:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_error>
    2c7c:	8a c0       	rjmp	.+276    	; 0x2d92 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c7e:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <twi_masterBufferIndex>
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	8e 0f       	add	r24, r30
    2c86:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <twi_masterBufferIndex>
    2c8a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	e2 57       	subi	r30, 0x72	; 114
    2c92:	fa 4f       	sbci	r31, 0xFA	; 250
    2c94:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c96:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <twi_masterBufferIndex>
    2c9a:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <twi_masterBufferLength>
    2c9e:	6a c0       	rjmp	.+212    	; 0x2d74 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2ca0:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <twi_masterBufferIndex>
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	8e 0f       	add	r24, r30
    2ca8:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <twi_masterBufferIndex>
    2cac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	e2 57       	subi	r30, 0x72	; 114
    2cb4:	fa 4f       	sbci	r31, 0xFA	; 250
    2cb6:	80 83       	st	Z, r24
	if (twi_sendStop)
    2cb8:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <twi_sendStop>
    2cbc:	81 11       	cpse	r24, r1
    2cbe:	69 c0       	rjmp	.+210    	; 0x2d92 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2cc6:	84 ea       	ldi	r24, 0xA4	; 164
    2cc8:	5d c0       	rjmp	.+186    	; 0x2d84 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2cca:	83 e0       	ldi	r24, 0x03	; 3
    2ccc:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2cd0:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <twi_rxBufferIndex>
    2cd4:	cf cf       	rjmp	.-98     	; 0x2c74 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2cd6:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <twi_rxBufferIndex>
    2cda:	80 32       	cpi	r24, 0x20	; 32
    2cdc:	08 f0       	brcs	.+2      	; 0x2ce0 <__vector_39+0x182>
    2cde:	4d c0       	rjmp	.+154    	; 0x2d7a <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2ce0:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <twi_rxBufferIndex>
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	8e 0f       	add	r24, r30
    2ce8:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <twi_rxBufferIndex>
    2cec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	e6 5b       	subi	r30, 0xB6	; 182
    2cf4:	fa 4f       	sbci	r31, 0xFA	; 250
    2cf6:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2cf8:	bd cf       	rjmp	.-134    	; 0x2c74 <__vector_39+0x116>
    2cfa:	2b df       	rcall	.-426    	; 0x2b52 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2cfc:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <twi_rxBufferIndex>
    2d00:	80 32       	cpi	r24, 0x20	; 32
    2d02:	30 f4       	brcc	.+12     	; 0x2d10 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2d04:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <twi_rxBufferIndex>
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	e6 5b       	subi	r30, 0xB6	; 182
    2d0c:	fa 4f       	sbci	r31, 0xFA	; 250
    2d0e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2d10:	60 91 49 05 	lds	r22, 0x0549	; 0x800549 <twi_rxBufferIndex>
    2d14:	70 e0       	ldi	r23, 0x00	; 0
    2d16:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <twi_onSlaveReceive>
    2d1a:	f0 91 af 05 	lds	r31, 0x05AF	; 0x8005af <twi_onSlaveReceive+0x1>
    2d1e:	8a e4       	ldi	r24, 0x4A	; 74
    2d20:	95 e0       	ldi	r25, 0x05	; 5
    2d22:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2d24:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <twi_rxBufferIndex>
      break;
    2d28:	35 c0       	rjmp	.+106    	; 0x2d94 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2d2a:	84 e0       	ldi	r24, 0x04	; 4
    2d2c:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2d30:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2d34:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2d38:	e0 91 b0 05 	lds	r30, 0x05B0	; 0x8005b0 <twi_onSlaveTransmit>
    2d3c:	f0 91 b1 05 	lds	r31, 0x05B1	; 0x8005b1 <twi_onSlaveTransmit+0x1>
    2d40:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2d42:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <twi_txBufferLength>
    2d46:	81 11       	cpse	r24, r1
    2d48:	05 c0       	rjmp	.+10     	; 0x2d54 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2d50:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2d54:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <twi_txBufferIndex>
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	8e 0f       	add	r24, r30
    2d5c:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <twi_txBufferIndex>
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	e4 59       	subi	r30, 0x94	; 148
    2d64:	fa 4f       	sbci	r31, 0xFA	; 250
    2d66:	80 81       	ld	r24, Z
    2d68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d6c:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <twi_txBufferIndex>
    2d70:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <twi_txBufferLength>
    2d74:	98 17       	cp	r25, r24
    2d76:	08 f4       	brcc	.+2      	; 0x2d7a <__vector_39+0x21c>
    2d78:	7d cf       	rjmp	.-262    	; 0x2c74 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d7a:	85 e8       	ldi	r24, 0x85	; 133
    2d7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d80:	09 c0       	rjmp	.+18     	; 0x2d94 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d82:	85 ec       	ldi	r24, 0xC5	; 197
    2d84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2d88:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <twi_state>
      break;
    2d8c:	03 c0       	rjmp	.+6      	; 0x2d94 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2d8e:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <twi_error>
      twi_stop();
    2d92:	d5 de       	rcall	.-598    	; 0x2b3e <twi_stop>
      break;
  }
}
    2d94:	ff 91       	pop	r31
    2d96:	ef 91       	pop	r30
    2d98:	bf 91       	pop	r27
    2d9a:	af 91       	pop	r26
    2d9c:	9f 91       	pop	r25
    2d9e:	8f 91       	pop	r24
    2da0:	7f 91       	pop	r23
    2da2:	6f 91       	pop	r22
    2da4:	5f 91       	pop	r21
    2da6:	4f 91       	pop	r20
    2da8:	3f 91       	pop	r19
    2daa:	2f 91       	pop	r18
    2dac:	0f 90       	pop	r0
    2dae:	0b be       	out	0x3b, r0	; 59
    2db0:	0f 90       	pop	r0
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	0f 90       	pop	r0
    2db6:	1f 90       	pop	r1
    2db8:	18 95       	reti

00002dba <__udivmodsi4>:
    2dba:	a1 e2       	ldi	r26, 0x21	; 33
    2dbc:	1a 2e       	mov	r1, r26
    2dbe:	aa 1b       	sub	r26, r26
    2dc0:	bb 1b       	sub	r27, r27
    2dc2:	fd 01       	movw	r30, r26
    2dc4:	0d c0       	rjmp	.+26     	; 0x2de0 <__udivmodsi4_ep>

00002dc6 <__udivmodsi4_loop>:
    2dc6:	aa 1f       	adc	r26, r26
    2dc8:	bb 1f       	adc	r27, r27
    2dca:	ee 1f       	adc	r30, r30
    2dcc:	ff 1f       	adc	r31, r31
    2dce:	a2 17       	cp	r26, r18
    2dd0:	b3 07       	cpc	r27, r19
    2dd2:	e4 07       	cpc	r30, r20
    2dd4:	f5 07       	cpc	r31, r21
    2dd6:	20 f0       	brcs	.+8      	; 0x2de0 <__udivmodsi4_ep>
    2dd8:	a2 1b       	sub	r26, r18
    2dda:	b3 0b       	sbc	r27, r19
    2ddc:	e4 0b       	sbc	r30, r20
    2dde:	f5 0b       	sbc	r31, r21

00002de0 <__udivmodsi4_ep>:
    2de0:	66 1f       	adc	r22, r22
    2de2:	77 1f       	adc	r23, r23
    2de4:	88 1f       	adc	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	1a 94       	dec	r1
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <__udivmodsi4_loop>
    2dec:	60 95       	com	r22
    2dee:	70 95       	com	r23
    2df0:	80 95       	com	r24
    2df2:	90 95       	com	r25
    2df4:	9b 01       	movw	r18, r22
    2df6:	ac 01       	movw	r20, r24
    2df8:	bd 01       	movw	r22, r26
    2dfa:	cf 01       	movw	r24, r30
    2dfc:	08 95       	ret

00002dfe <__tablejump2__>:
    2dfe:	ee 0f       	add	r30, r30
    2e00:	ff 1f       	adc	r31, r31
    2e02:	88 1f       	adc	r24, r24
    2e04:	8b bf       	out	0x3b, r24	; 59
    2e06:	07 90       	elpm	r0, Z+
    2e08:	f6 91       	elpm	r31, Z
    2e0a:	e0 2d       	mov	r30, r0
    2e0c:	19 94       	eijmp

00002e0e <malloc>:
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	82 30       	cpi	r24, 0x02	; 2
    2e18:	91 05       	cpc	r25, r1
    2e1a:	10 f4       	brcc	.+4      	; 0x2e20 <malloc+0x12>
    2e1c:	82 e0       	ldi	r24, 0x02	; 2
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	e0 91 b8 05 	lds	r30, 0x05B8	; 0x8005b8 <__flp>
    2e24:	f0 91 b9 05 	lds	r31, 0x05B9	; 0x8005b9 <__flp+0x1>
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	a0 e0       	ldi	r26, 0x00	; 0
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	30 97       	sbiw	r30, 0x00	; 0
    2e32:	19 f1       	breq	.+70     	; 0x2e7a <malloc+0x6c>
    2e34:	40 81       	ld	r20, Z
    2e36:	51 81       	ldd	r21, Z+1	; 0x01
    2e38:	02 81       	ldd	r16, Z+2	; 0x02
    2e3a:	13 81       	ldd	r17, Z+3	; 0x03
    2e3c:	48 17       	cp	r20, r24
    2e3e:	59 07       	cpc	r21, r25
    2e40:	c8 f0       	brcs	.+50     	; 0x2e74 <malloc+0x66>
    2e42:	84 17       	cp	r24, r20
    2e44:	95 07       	cpc	r25, r21
    2e46:	69 f4       	brne	.+26     	; 0x2e62 <malloc+0x54>
    2e48:	10 97       	sbiw	r26, 0x00	; 0
    2e4a:	31 f0       	breq	.+12     	; 0x2e58 <malloc+0x4a>
    2e4c:	12 96       	adiw	r26, 0x02	; 2
    2e4e:	0c 93       	st	X, r16
    2e50:	12 97       	sbiw	r26, 0x02	; 2
    2e52:	13 96       	adiw	r26, 0x03	; 3
    2e54:	1c 93       	st	X, r17
    2e56:	27 c0       	rjmp	.+78     	; 0x2ea6 <malloc+0x98>
    2e58:	00 93 b8 05 	sts	0x05B8, r16	; 0x8005b8 <__flp>
    2e5c:	10 93 b9 05 	sts	0x05B9, r17	; 0x8005b9 <__flp+0x1>
    2e60:	22 c0       	rjmp	.+68     	; 0x2ea6 <malloc+0x98>
    2e62:	21 15       	cp	r18, r1
    2e64:	31 05       	cpc	r19, r1
    2e66:	19 f0       	breq	.+6      	; 0x2e6e <malloc+0x60>
    2e68:	42 17       	cp	r20, r18
    2e6a:	53 07       	cpc	r21, r19
    2e6c:	18 f4       	brcc	.+6      	; 0x2e74 <malloc+0x66>
    2e6e:	9a 01       	movw	r18, r20
    2e70:	bd 01       	movw	r22, r26
    2e72:	ef 01       	movw	r28, r30
    2e74:	df 01       	movw	r26, r30
    2e76:	f8 01       	movw	r30, r16
    2e78:	db cf       	rjmp	.-74     	; 0x2e30 <malloc+0x22>
    2e7a:	21 15       	cp	r18, r1
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	f9 f0       	breq	.+62     	; 0x2ebe <malloc+0xb0>
    2e80:	28 1b       	sub	r18, r24
    2e82:	39 0b       	sbc	r19, r25
    2e84:	24 30       	cpi	r18, 0x04	; 4
    2e86:	31 05       	cpc	r19, r1
    2e88:	80 f4       	brcc	.+32     	; 0x2eaa <malloc+0x9c>
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8e:	61 15       	cp	r22, r1
    2e90:	71 05       	cpc	r23, r1
    2e92:	21 f0       	breq	.+8      	; 0x2e9c <malloc+0x8e>
    2e94:	fb 01       	movw	r30, r22
    2e96:	93 83       	std	Z+3, r25	; 0x03
    2e98:	82 83       	std	Z+2, r24	; 0x02
    2e9a:	04 c0       	rjmp	.+8      	; 0x2ea4 <malloc+0x96>
    2e9c:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <__flp+0x1>
    2ea0:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <__flp>
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	32 96       	adiw	r30, 0x02	; 2
    2ea8:	44 c0       	rjmp	.+136    	; 0x2f32 <malloc+0x124>
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e2 0f       	add	r30, r18
    2eae:	f3 1f       	adc	r31, r19
    2eb0:	81 93       	st	Z+, r24
    2eb2:	91 93       	st	Z+, r25
    2eb4:	22 50       	subi	r18, 0x02	; 2
    2eb6:	31 09       	sbc	r19, r1
    2eb8:	39 83       	std	Y+1, r19	; 0x01
    2eba:	28 83       	st	Y, r18
    2ebc:	3a c0       	rjmp	.+116    	; 0x2f32 <malloc+0x124>
    2ebe:	20 91 b6 05 	lds	r18, 0x05B6	; 0x8005b6 <__brkval>
    2ec2:	30 91 b7 05 	lds	r19, 0x05B7	; 0x8005b7 <__brkval+0x1>
    2ec6:	23 2b       	or	r18, r19
    2ec8:	41 f4       	brne	.+16     	; 0x2eda <malloc+0xcc>
    2eca:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2ece:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2ed2:	30 93 b7 05 	sts	0x05B7, r19	; 0x8005b7 <__brkval+0x1>
    2ed6:	20 93 b6 05 	sts	0x05B6, r18	; 0x8005b6 <__brkval>
    2eda:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2ede:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2ee2:	21 15       	cp	r18, r1
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	41 f4       	brne	.+16     	; 0x2ef8 <malloc+0xea>
    2ee8:	2d b7       	in	r18, 0x3d	; 61
    2eea:	3e b7       	in	r19, 0x3e	; 62
    2eec:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2ef0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2ef4:	24 1b       	sub	r18, r20
    2ef6:	35 0b       	sbc	r19, r21
    2ef8:	e0 91 b6 05 	lds	r30, 0x05B6	; 0x8005b6 <__brkval>
    2efc:	f0 91 b7 05 	lds	r31, 0x05B7	; 0x8005b7 <__brkval+0x1>
    2f00:	e2 17       	cp	r30, r18
    2f02:	f3 07       	cpc	r31, r19
    2f04:	a0 f4       	brcc	.+40     	; 0x2f2e <malloc+0x120>
    2f06:	2e 1b       	sub	r18, r30
    2f08:	3f 0b       	sbc	r19, r31
    2f0a:	28 17       	cp	r18, r24
    2f0c:	39 07       	cpc	r19, r25
    2f0e:	78 f0       	brcs	.+30     	; 0x2f2e <malloc+0x120>
    2f10:	ac 01       	movw	r20, r24
    2f12:	4e 5f       	subi	r20, 0xFE	; 254
    2f14:	5f 4f       	sbci	r21, 0xFF	; 255
    2f16:	24 17       	cp	r18, r20
    2f18:	35 07       	cpc	r19, r21
    2f1a:	48 f0       	brcs	.+18     	; 0x2f2e <malloc+0x120>
    2f1c:	4e 0f       	add	r20, r30
    2f1e:	5f 1f       	adc	r21, r31
    2f20:	50 93 b7 05 	sts	0x05B7, r21	; 0x8005b7 <__brkval+0x1>
    2f24:	40 93 b6 05 	sts	0x05B6, r20	; 0x8005b6 <__brkval>
    2f28:	81 93       	st	Z+, r24
    2f2a:	91 93       	st	Z+, r25
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <malloc+0x124>
    2f2e:	e0 e0       	ldi	r30, 0x00	; 0
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	cf 01       	movw	r24, r30
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	08 95       	ret

00002f3e <free>:
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <free+0xa>
    2f46:	81 c0       	rjmp	.+258    	; 0x304a <free+0x10c>
    2f48:	fc 01       	movw	r30, r24
    2f4a:	32 97       	sbiw	r30, 0x02	; 2
    2f4c:	13 82       	std	Z+3, r1	; 0x03
    2f4e:	12 82       	std	Z+2, r1	; 0x02
    2f50:	a0 91 b8 05 	lds	r26, 0x05B8	; 0x8005b8 <__flp>
    2f54:	b0 91 b9 05 	lds	r27, 0x05B9	; 0x8005b9 <__flp+0x1>
    2f58:	10 97       	sbiw	r26, 0x00	; 0
    2f5a:	81 f4       	brne	.+32     	; 0x2f7c <free+0x3e>
    2f5c:	20 81       	ld	r18, Z
    2f5e:	31 81       	ldd	r19, Z+1	; 0x01
    2f60:	82 0f       	add	r24, r18
    2f62:	93 1f       	adc	r25, r19
    2f64:	20 91 b6 05 	lds	r18, 0x05B6	; 0x8005b6 <__brkval>
    2f68:	30 91 b7 05 	lds	r19, 0x05B7	; 0x8005b7 <__brkval+0x1>
    2f6c:	28 17       	cp	r18, r24
    2f6e:	39 07       	cpc	r19, r25
    2f70:	51 f5       	brne	.+84     	; 0x2fc6 <free+0x88>
    2f72:	f0 93 b7 05 	sts	0x05B7, r31	; 0x8005b7 <__brkval+0x1>
    2f76:	e0 93 b6 05 	sts	0x05B6, r30	; 0x8005b6 <__brkval>
    2f7a:	67 c0       	rjmp	.+206    	; 0x304a <free+0x10c>
    2f7c:	ed 01       	movw	r28, r26
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	ce 17       	cp	r28, r30
    2f84:	df 07       	cpc	r29, r31
    2f86:	40 f4       	brcc	.+16     	; 0x2f98 <free+0x5a>
    2f88:	4a 81       	ldd	r20, Y+2	; 0x02
    2f8a:	5b 81       	ldd	r21, Y+3	; 0x03
    2f8c:	9e 01       	movw	r18, r28
    2f8e:	41 15       	cp	r20, r1
    2f90:	51 05       	cpc	r21, r1
    2f92:	f1 f0       	breq	.+60     	; 0x2fd0 <free+0x92>
    2f94:	ea 01       	movw	r28, r20
    2f96:	f5 cf       	rjmp	.-22     	; 0x2f82 <free+0x44>
    2f98:	d3 83       	std	Z+3, r29	; 0x03
    2f9a:	c2 83       	std	Z+2, r28	; 0x02
    2f9c:	40 81       	ld	r20, Z
    2f9e:	51 81       	ldd	r21, Z+1	; 0x01
    2fa0:	84 0f       	add	r24, r20
    2fa2:	95 1f       	adc	r25, r21
    2fa4:	c8 17       	cp	r28, r24
    2fa6:	d9 07       	cpc	r29, r25
    2fa8:	59 f4       	brne	.+22     	; 0x2fc0 <free+0x82>
    2faa:	88 81       	ld	r24, Y
    2fac:	99 81       	ldd	r25, Y+1	; 0x01
    2fae:	84 0f       	add	r24, r20
    2fb0:	95 1f       	adc	r25, r21
    2fb2:	02 96       	adiw	r24, 0x02	; 2
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	80 83       	st	Z, r24
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbc:	93 83       	std	Z+3, r25	; 0x03
    2fbe:	82 83       	std	Z+2, r24	; 0x02
    2fc0:	21 15       	cp	r18, r1
    2fc2:	31 05       	cpc	r19, r1
    2fc4:	29 f4       	brne	.+10     	; 0x2fd0 <free+0x92>
    2fc6:	f0 93 b9 05 	sts	0x05B9, r31	; 0x8005b9 <__flp+0x1>
    2fca:	e0 93 b8 05 	sts	0x05B8, r30	; 0x8005b8 <__flp>
    2fce:	3d c0       	rjmp	.+122    	; 0x304a <free+0x10c>
    2fd0:	e9 01       	movw	r28, r18
    2fd2:	fb 83       	std	Y+3, r31	; 0x03
    2fd4:	ea 83       	std	Y+2, r30	; 0x02
    2fd6:	49 91       	ld	r20, Y+
    2fd8:	59 91       	ld	r21, Y+
    2fda:	c4 0f       	add	r28, r20
    2fdc:	d5 1f       	adc	r29, r21
    2fde:	ec 17       	cp	r30, r28
    2fe0:	fd 07       	cpc	r31, r29
    2fe2:	61 f4       	brne	.+24     	; 0x2ffc <free+0xbe>
    2fe4:	80 81       	ld	r24, Z
    2fe6:	91 81       	ldd	r25, Z+1	; 0x01
    2fe8:	84 0f       	add	r24, r20
    2fea:	95 1f       	adc	r25, r21
    2fec:	02 96       	adiw	r24, 0x02	; 2
    2fee:	e9 01       	movw	r28, r18
    2ff0:	99 83       	std	Y+1, r25	; 0x01
    2ff2:	88 83       	st	Y, r24
    2ff4:	82 81       	ldd	r24, Z+2	; 0x02
    2ff6:	93 81       	ldd	r25, Z+3	; 0x03
    2ff8:	9b 83       	std	Y+3, r25	; 0x03
    2ffa:	8a 83       	std	Y+2, r24	; 0x02
    2ffc:	e0 e0       	ldi	r30, 0x00	; 0
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	12 96       	adiw	r26, 0x02	; 2
    3002:	8d 91       	ld	r24, X+
    3004:	9c 91       	ld	r25, X
    3006:	13 97       	sbiw	r26, 0x03	; 3
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	19 f0       	breq	.+6      	; 0x3012 <free+0xd4>
    300c:	fd 01       	movw	r30, r26
    300e:	dc 01       	movw	r26, r24
    3010:	f7 cf       	rjmp	.-18     	; 0x3000 <free+0xc2>
    3012:	8d 91       	ld	r24, X+
    3014:	9c 91       	ld	r25, X
    3016:	11 97       	sbiw	r26, 0x01	; 1
    3018:	9d 01       	movw	r18, r26
    301a:	2e 5f       	subi	r18, 0xFE	; 254
    301c:	3f 4f       	sbci	r19, 0xFF	; 255
    301e:	82 0f       	add	r24, r18
    3020:	93 1f       	adc	r25, r19
    3022:	20 91 b6 05 	lds	r18, 0x05B6	; 0x8005b6 <__brkval>
    3026:	30 91 b7 05 	lds	r19, 0x05B7	; 0x8005b7 <__brkval+0x1>
    302a:	28 17       	cp	r18, r24
    302c:	39 07       	cpc	r19, r25
    302e:	69 f4       	brne	.+26     	; 0x304a <free+0x10c>
    3030:	30 97       	sbiw	r30, 0x00	; 0
    3032:	29 f4       	brne	.+10     	; 0x303e <free+0x100>
    3034:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <__flp+0x1>
    3038:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <__flp>
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <free+0x104>
    303e:	13 82       	std	Z+3, r1	; 0x03
    3040:	12 82       	std	Z+2, r1	; 0x02
    3042:	b0 93 b7 05 	sts	0x05B7, r27	; 0x8005b7 <__brkval+0x1>
    3046:	a0 93 b6 05 	sts	0x05B6, r26	; 0x8005b6 <__brkval>
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	08 95       	ret

00003050 <realloc>:
    3050:	6f 92       	push	r6
    3052:	7f 92       	push	r7
    3054:	8f 92       	push	r8
    3056:	9f 92       	push	r9
    3058:	af 92       	push	r10
    305a:	bf 92       	push	r11
    305c:	cf 92       	push	r12
    305e:	df 92       	push	r13
    3060:	ef 92       	push	r14
    3062:	ff 92       	push	r15
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	81 f4       	brne	.+32     	; 0x3090 <realloc+0x40>
    3070:	cb 01       	movw	r24, r22
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	cf 90       	pop	r12
    3082:	bf 90       	pop	r11
    3084:	af 90       	pop	r10
    3086:	9f 90       	pop	r9
    3088:	8f 90       	pop	r8
    308a:	7f 90       	pop	r7
    308c:	6f 90       	pop	r6
    308e:	bf ce       	rjmp	.-642    	; 0x2e0e <malloc>
    3090:	fc 01       	movw	r30, r24
    3092:	e6 0f       	add	r30, r22
    3094:	f7 1f       	adc	r31, r23
    3096:	9c 01       	movw	r18, r24
    3098:	22 50       	subi	r18, 0x02	; 2
    309a:	31 09       	sbc	r19, r1
    309c:	e2 17       	cp	r30, r18
    309e:	f3 07       	cpc	r31, r19
    30a0:	08 f4       	brcc	.+2      	; 0x30a4 <realloc+0x54>
    30a2:	a5 c0       	rjmp	.+330    	; 0x31ee <realloc+0x19e>
    30a4:	ec 01       	movw	r28, r24
    30a6:	d9 01       	movw	r26, r18
    30a8:	0d 91       	ld	r16, X+
    30aa:	1c 91       	ld	r17, X
    30ac:	11 97       	sbiw	r26, 0x01	; 1
    30ae:	06 17       	cp	r16, r22
    30b0:	17 07       	cpc	r17, r23
    30b2:	a8 f0       	brcs	.+42     	; 0x30de <realloc+0x8e>
    30b4:	05 30       	cpi	r16, 0x05	; 5
    30b6:	11 05       	cpc	r17, r1
    30b8:	08 f4       	brcc	.+2      	; 0x30bc <realloc+0x6c>
    30ba:	97 c0       	rjmp	.+302    	; 0x31ea <realloc+0x19a>
    30bc:	c8 01       	movw	r24, r16
    30be:	04 97       	sbiw	r24, 0x04	; 4
    30c0:	86 17       	cp	r24, r22
    30c2:	97 07       	cpc	r25, r23
    30c4:	08 f4       	brcc	.+2      	; 0x30c8 <realloc+0x78>
    30c6:	91 c0       	rjmp	.+290    	; 0x31ea <realloc+0x19a>
    30c8:	02 50       	subi	r16, 0x02	; 2
    30ca:	11 09       	sbc	r17, r1
    30cc:	06 1b       	sub	r16, r22
    30ce:	17 0b       	sbc	r17, r23
    30d0:	01 93       	st	Z+, r16
    30d2:	11 93       	st	Z+, r17
    30d4:	6d 93       	st	X+, r22
    30d6:	7c 93       	st	X, r23
    30d8:	cf 01       	movw	r24, r30
    30da:	31 df       	rcall	.-414    	; 0x2f3e <free>
    30dc:	86 c0       	rjmp	.+268    	; 0x31ea <realloc+0x19a>
    30de:	5b 01       	movw	r10, r22
    30e0:	a0 1a       	sub	r10, r16
    30e2:	b1 0a       	sbc	r11, r17
    30e4:	4c 01       	movw	r8, r24
    30e6:	80 0e       	add	r8, r16
    30e8:	91 1e       	adc	r9, r17
    30ea:	a0 91 b8 05 	lds	r26, 0x05B8	; 0x8005b8 <__flp>
    30ee:	b0 91 b9 05 	lds	r27, 0x05B9	; 0x8005b9 <__flp+0x1>
    30f2:	61 2c       	mov	r6, r1
    30f4:	71 2c       	mov	r7, r1
    30f6:	e1 2c       	mov	r14, r1
    30f8:	f1 2c       	mov	r15, r1
    30fa:	10 97       	sbiw	r26, 0x00	; 0
    30fc:	09 f4       	brne	.+2      	; 0x3100 <realloc+0xb0>
    30fe:	46 c0       	rjmp	.+140    	; 0x318c <realloc+0x13c>
    3100:	8d 91       	ld	r24, X+
    3102:	9c 91       	ld	r25, X
    3104:	11 97       	sbiw	r26, 0x01	; 1
    3106:	a8 15       	cp	r26, r8
    3108:	b9 05       	cpc	r27, r9
    310a:	b1 f5       	brne	.+108    	; 0x3178 <realloc+0x128>
    310c:	6c 01       	movw	r12, r24
    310e:	42 e0       	ldi	r20, 0x02	; 2
    3110:	c4 0e       	add	r12, r20
    3112:	d1 1c       	adc	r13, r1
    3114:	ca 14       	cp	r12, r10
    3116:	db 04       	cpc	r13, r11
    3118:	78 f1       	brcs	.+94     	; 0x3178 <realloc+0x128>
    311a:	4c 01       	movw	r8, r24
    311c:	8a 18       	sub	r8, r10
    311e:	9b 08       	sbc	r9, r11
    3120:	64 01       	movw	r12, r8
    3122:	42 e0       	ldi	r20, 0x02	; 2
    3124:	c4 0e       	add	r12, r20
    3126:	d1 1c       	adc	r13, r1
    3128:	12 96       	adiw	r26, 0x02	; 2
    312a:	bc 90       	ld	r11, X
    312c:	12 97       	sbiw	r26, 0x02	; 2
    312e:	13 96       	adiw	r26, 0x03	; 3
    3130:	ac 91       	ld	r26, X
    3132:	b5 e0       	ldi	r27, 0x05	; 5
    3134:	cb 16       	cp	r12, r27
    3136:	d1 04       	cpc	r13, r1
    3138:	40 f0       	brcs	.+16     	; 0x314a <realloc+0xfa>
    313a:	b2 82       	std	Z+2, r11	; 0x02
    313c:	a3 83       	std	Z+3, r26	; 0x03
    313e:	91 82       	std	Z+1, r9	; 0x01
    3140:	80 82       	st	Z, r8
    3142:	d9 01       	movw	r26, r18
    3144:	6d 93       	st	X+, r22
    3146:	7c 93       	st	X, r23
    3148:	09 c0       	rjmp	.+18     	; 0x315c <realloc+0x10c>
    314a:	0e 5f       	subi	r16, 0xFE	; 254
    314c:	1f 4f       	sbci	r17, 0xFF	; 255
    314e:	80 0f       	add	r24, r16
    3150:	91 1f       	adc	r25, r17
    3152:	f9 01       	movw	r30, r18
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	80 83       	st	Z, r24
    3158:	eb 2d       	mov	r30, r11
    315a:	fa 2f       	mov	r31, r26
    315c:	e1 14       	cp	r14, r1
    315e:	f1 04       	cpc	r15, r1
    3160:	31 f0       	breq	.+12     	; 0x316e <realloc+0x11e>
    3162:	d7 01       	movw	r26, r14
    3164:	13 96       	adiw	r26, 0x03	; 3
    3166:	fc 93       	st	X, r31
    3168:	ee 93       	st	-X, r30
    316a:	12 97       	sbiw	r26, 0x02	; 2
    316c:	3e c0       	rjmp	.+124    	; 0x31ea <realloc+0x19a>
    316e:	f0 93 b9 05 	sts	0x05B9, r31	; 0x8005b9 <__flp+0x1>
    3172:	e0 93 b8 05 	sts	0x05B8, r30	; 0x8005b8 <__flp>
    3176:	39 c0       	rjmp	.+114    	; 0x31ea <realloc+0x19a>
    3178:	68 16       	cp	r6, r24
    317a:	79 06       	cpc	r7, r25
    317c:	08 f4       	brcc	.+2      	; 0x3180 <realloc+0x130>
    317e:	3c 01       	movw	r6, r24
    3180:	7d 01       	movw	r14, r26
    3182:	12 96       	adiw	r26, 0x02	; 2
    3184:	0d 90       	ld	r0, X+
    3186:	bc 91       	ld	r27, X
    3188:	a0 2d       	mov	r26, r0
    318a:	b7 cf       	rjmp	.-146    	; 0x30fa <realloc+0xaa>
    318c:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <__brkval>
    3190:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <__brkval+0x1>
    3194:	88 16       	cp	r8, r24
    3196:	99 06       	cpc	r9, r25
    3198:	e1 f4       	brne	.+56     	; 0x31d2 <realloc+0x182>
    319a:	66 16       	cp	r6, r22
    319c:	77 06       	cpc	r7, r23
    319e:	c8 f4       	brcc	.+50     	; 0x31d2 <realloc+0x182>
    31a0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    31a4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	41 f4       	brne	.+16     	; 0x31bc <realloc+0x16c>
    31ac:	8d b7       	in	r24, 0x3d	; 61
    31ae:	9e b7       	in	r25, 0x3e	; 62
    31b0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    31b4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    31b8:	84 1b       	sub	r24, r20
    31ba:	95 0b       	sbc	r25, r21
    31bc:	e8 17       	cp	r30, r24
    31be:	f9 07       	cpc	r31, r25
    31c0:	b0 f4       	brcc	.+44     	; 0x31ee <realloc+0x19e>
    31c2:	f0 93 b7 05 	sts	0x05B7, r31	; 0x8005b7 <__brkval+0x1>
    31c6:	e0 93 b6 05 	sts	0x05B6, r30	; 0x8005b6 <__brkval>
    31ca:	f9 01       	movw	r30, r18
    31cc:	71 83       	std	Z+1, r23	; 0x01
    31ce:	60 83       	st	Z, r22
    31d0:	0c c0       	rjmp	.+24     	; 0x31ea <realloc+0x19a>
    31d2:	cb 01       	movw	r24, r22
    31d4:	1c de       	rcall	.-968    	; 0x2e0e <malloc>
    31d6:	7c 01       	movw	r14, r24
    31d8:	00 97       	sbiw	r24, 0x00	; 0
    31da:	49 f0       	breq	.+18     	; 0x31ee <realloc+0x19e>
    31dc:	a8 01       	movw	r20, r16
    31de:	be 01       	movw	r22, r28
    31e0:	17 d0       	rcall	.+46     	; 0x3210 <memcpy>
    31e2:	ce 01       	movw	r24, r28
    31e4:	ac de       	rcall	.-680    	; 0x2f3e <free>
    31e6:	c7 01       	movw	r24, r14
    31e8:	04 c0       	rjmp	.+8      	; 0x31f2 <realloc+0x1a2>
    31ea:	ce 01       	movw	r24, r28
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <realloc+0x1a2>
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	1f 91       	pop	r17
    31f8:	0f 91       	pop	r16
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	bf 90       	pop	r11
    3204:	af 90       	pop	r10
    3206:	9f 90       	pop	r9
    3208:	8f 90       	pop	r8
    320a:	7f 90       	pop	r7
    320c:	6f 90       	pop	r6
    320e:	08 95       	ret

00003210 <memcpy>:
    3210:	fb 01       	movw	r30, r22
    3212:	dc 01       	movw	r26, r24
    3214:	02 c0       	rjmp	.+4      	; 0x321a <memcpy+0xa>
    3216:	01 90       	ld	r0, Z+
    3218:	0d 92       	st	X+, r0
    321a:	41 50       	subi	r20, 0x01	; 1
    321c:	50 40       	sbci	r21, 0x00	; 0
    321e:	d8 f7       	brcc	.-10     	; 0x3216 <memcpy+0x6>
    3220:	08 95       	ret

00003222 <strcpy>:
    3222:	fb 01       	movw	r30, r22
    3224:	dc 01       	movw	r26, r24
    3226:	01 90       	ld	r0, Z+
    3228:	0d 92       	st	X+, r0
    322a:	00 20       	and	r0, r0
    322c:	e1 f7       	brne	.-8      	; 0x3226 <strcpy+0x4>
    322e:	08 95       	ret

00003230 <sprintf>:
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	2e 97       	sbiw	r28, 0x0e	; 14
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
    3248:	0e 89       	ldd	r16, Y+22	; 0x16
    324a:	1f 89       	ldd	r17, Y+23	; 0x17
    324c:	86 e0       	ldi	r24, 0x06	; 6
    324e:	8c 83       	std	Y+4, r24	; 0x04
    3250:	1a 83       	std	Y+2, r17	; 0x02
    3252:	09 83       	std	Y+1, r16	; 0x01
    3254:	8f ef       	ldi	r24, 0xFF	; 255
    3256:	9f e7       	ldi	r25, 0x7F	; 127
    3258:	9e 83       	std	Y+6, r25	; 0x06
    325a:	8d 83       	std	Y+5, r24	; 0x05
    325c:	ae 01       	movw	r20, r28
    325e:	46 5e       	subi	r20, 0xE6	; 230
    3260:	5f 4f       	sbci	r21, 0xFF	; 255
    3262:	68 8d       	ldd	r22, Y+24	; 0x18
    3264:	79 8d       	ldd	r23, Y+25	; 0x19
    3266:	ce 01       	movw	r24, r28
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	10 d0       	rcall	.+32     	; 0x328c <vfprintf>
    326c:	ef 81       	ldd	r30, Y+7	; 0x07
    326e:	f8 85       	ldd	r31, Y+8	; 0x08
    3270:	e0 0f       	add	r30, r16
    3272:	f1 1f       	adc	r31, r17
    3274:	10 82       	st	Z, r1
    3276:	2e 96       	adiw	r28, 0x0e	; 14
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	df 91       	pop	r29
    3284:	cf 91       	pop	r28
    3286:	1f 91       	pop	r17
    3288:	0f 91       	pop	r16
    328a:	08 95       	ret

0000328c <vfprintf>:
    328c:	2f 92       	push	r2
    328e:	3f 92       	push	r3
    3290:	4f 92       	push	r4
    3292:	5f 92       	push	r5
    3294:	6f 92       	push	r6
    3296:	7f 92       	push	r7
    3298:	8f 92       	push	r8
    329a:	9f 92       	push	r9
    329c:	af 92       	push	r10
    329e:	bf 92       	push	r11
    32a0:	cf 92       	push	r12
    32a2:	df 92       	push	r13
    32a4:	ef 92       	push	r14
    32a6:	ff 92       	push	r15
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	2b 97       	sbiw	r28, 0x0b	; 11
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	6c 01       	movw	r12, r24
    32c2:	7b 01       	movw	r14, r22
    32c4:	8a 01       	movw	r16, r20
    32c6:	fc 01       	movw	r30, r24
    32c8:	17 82       	std	Z+7, r1	; 0x07
    32ca:	16 82       	std	Z+6, r1	; 0x06
    32cc:	83 81       	ldd	r24, Z+3	; 0x03
    32ce:	81 ff       	sbrs	r24, 1
    32d0:	bf c1       	rjmp	.+894    	; 0x3650 <vfprintf+0x3c4>
    32d2:	ce 01       	movw	r24, r28
    32d4:	01 96       	adiw	r24, 0x01	; 1
    32d6:	3c 01       	movw	r6, r24
    32d8:	f6 01       	movw	r30, r12
    32da:	93 81       	ldd	r25, Z+3	; 0x03
    32dc:	f7 01       	movw	r30, r14
    32de:	93 fd       	sbrc	r25, 3
    32e0:	85 91       	lpm	r24, Z+
    32e2:	93 ff       	sbrs	r25, 3
    32e4:	81 91       	ld	r24, Z+
    32e6:	7f 01       	movw	r14, r30
    32e8:	88 23       	and	r24, r24
    32ea:	09 f4       	brne	.+2      	; 0x32ee <vfprintf+0x62>
    32ec:	ad c1       	rjmp	.+858    	; 0x3648 <vfprintf+0x3bc>
    32ee:	85 32       	cpi	r24, 0x25	; 37
    32f0:	39 f4       	brne	.+14     	; 0x3300 <vfprintf+0x74>
    32f2:	93 fd       	sbrc	r25, 3
    32f4:	85 91       	lpm	r24, Z+
    32f6:	93 ff       	sbrs	r25, 3
    32f8:	81 91       	ld	r24, Z+
    32fa:	7f 01       	movw	r14, r30
    32fc:	85 32       	cpi	r24, 0x25	; 37
    32fe:	21 f4       	brne	.+8      	; 0x3308 <vfprintf+0x7c>
    3300:	b6 01       	movw	r22, r12
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	d6 d1       	rcall	.+940    	; 0x36b2 <fputc>
    3306:	e8 cf       	rjmp	.-48     	; 0x32d8 <vfprintf+0x4c>
    3308:	91 2c       	mov	r9, r1
    330a:	21 2c       	mov	r2, r1
    330c:	31 2c       	mov	r3, r1
    330e:	ff e1       	ldi	r31, 0x1F	; 31
    3310:	f3 15       	cp	r31, r3
    3312:	d8 f0       	brcs	.+54     	; 0x334a <vfprintf+0xbe>
    3314:	8b 32       	cpi	r24, 0x2B	; 43
    3316:	79 f0       	breq	.+30     	; 0x3336 <vfprintf+0xaa>
    3318:	38 f4       	brcc	.+14     	; 0x3328 <vfprintf+0x9c>
    331a:	80 32       	cpi	r24, 0x20	; 32
    331c:	79 f0       	breq	.+30     	; 0x333c <vfprintf+0xb0>
    331e:	83 32       	cpi	r24, 0x23	; 35
    3320:	a1 f4       	brne	.+40     	; 0x334a <vfprintf+0xbe>
    3322:	23 2d       	mov	r18, r3
    3324:	20 61       	ori	r18, 0x10	; 16
    3326:	1d c0       	rjmp	.+58     	; 0x3362 <vfprintf+0xd6>
    3328:	8d 32       	cpi	r24, 0x2D	; 45
    332a:	61 f0       	breq	.+24     	; 0x3344 <vfprintf+0xb8>
    332c:	80 33       	cpi	r24, 0x30	; 48
    332e:	69 f4       	brne	.+26     	; 0x334a <vfprintf+0xbe>
    3330:	23 2d       	mov	r18, r3
    3332:	21 60       	ori	r18, 0x01	; 1
    3334:	16 c0       	rjmp	.+44     	; 0x3362 <vfprintf+0xd6>
    3336:	83 2d       	mov	r24, r3
    3338:	82 60       	ori	r24, 0x02	; 2
    333a:	38 2e       	mov	r3, r24
    333c:	e3 2d       	mov	r30, r3
    333e:	e4 60       	ori	r30, 0x04	; 4
    3340:	3e 2e       	mov	r3, r30
    3342:	2a c0       	rjmp	.+84     	; 0x3398 <vfprintf+0x10c>
    3344:	f3 2d       	mov	r31, r3
    3346:	f8 60       	ori	r31, 0x08	; 8
    3348:	1d c0       	rjmp	.+58     	; 0x3384 <vfprintf+0xf8>
    334a:	37 fc       	sbrc	r3, 7
    334c:	2d c0       	rjmp	.+90     	; 0x33a8 <vfprintf+0x11c>
    334e:	20 ed       	ldi	r18, 0xD0	; 208
    3350:	28 0f       	add	r18, r24
    3352:	2a 30       	cpi	r18, 0x0A	; 10
    3354:	40 f0       	brcs	.+16     	; 0x3366 <vfprintf+0xda>
    3356:	8e 32       	cpi	r24, 0x2E	; 46
    3358:	b9 f4       	brne	.+46     	; 0x3388 <vfprintf+0xfc>
    335a:	36 fc       	sbrc	r3, 6
    335c:	75 c1       	rjmp	.+746    	; 0x3648 <vfprintf+0x3bc>
    335e:	23 2d       	mov	r18, r3
    3360:	20 64       	ori	r18, 0x40	; 64
    3362:	32 2e       	mov	r3, r18
    3364:	19 c0       	rjmp	.+50     	; 0x3398 <vfprintf+0x10c>
    3366:	36 fe       	sbrs	r3, 6
    3368:	06 c0       	rjmp	.+12     	; 0x3376 <vfprintf+0xea>
    336a:	8a e0       	ldi	r24, 0x0A	; 10
    336c:	98 9e       	mul	r9, r24
    336e:	20 0d       	add	r18, r0
    3370:	11 24       	eor	r1, r1
    3372:	92 2e       	mov	r9, r18
    3374:	11 c0       	rjmp	.+34     	; 0x3398 <vfprintf+0x10c>
    3376:	ea e0       	ldi	r30, 0x0A	; 10
    3378:	2e 9e       	mul	r2, r30
    337a:	20 0d       	add	r18, r0
    337c:	11 24       	eor	r1, r1
    337e:	22 2e       	mov	r2, r18
    3380:	f3 2d       	mov	r31, r3
    3382:	f0 62       	ori	r31, 0x20	; 32
    3384:	3f 2e       	mov	r3, r31
    3386:	08 c0       	rjmp	.+16     	; 0x3398 <vfprintf+0x10c>
    3388:	8c 36       	cpi	r24, 0x6C	; 108
    338a:	21 f4       	brne	.+8      	; 0x3394 <vfprintf+0x108>
    338c:	83 2d       	mov	r24, r3
    338e:	80 68       	ori	r24, 0x80	; 128
    3390:	38 2e       	mov	r3, r24
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <vfprintf+0x10c>
    3394:	88 36       	cpi	r24, 0x68	; 104
    3396:	41 f4       	brne	.+16     	; 0x33a8 <vfprintf+0x11c>
    3398:	f7 01       	movw	r30, r14
    339a:	93 fd       	sbrc	r25, 3
    339c:	85 91       	lpm	r24, Z+
    339e:	93 ff       	sbrs	r25, 3
    33a0:	81 91       	ld	r24, Z+
    33a2:	7f 01       	movw	r14, r30
    33a4:	81 11       	cpse	r24, r1
    33a6:	b3 cf       	rjmp	.-154    	; 0x330e <vfprintf+0x82>
    33a8:	98 2f       	mov	r25, r24
    33aa:	9f 7d       	andi	r25, 0xDF	; 223
    33ac:	95 54       	subi	r25, 0x45	; 69
    33ae:	93 30       	cpi	r25, 0x03	; 3
    33b0:	28 f4       	brcc	.+10     	; 0x33bc <vfprintf+0x130>
    33b2:	0c 5f       	subi	r16, 0xFC	; 252
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	9f e3       	ldi	r25, 0x3F	; 63
    33b8:	99 83       	std	Y+1, r25	; 0x01
    33ba:	0d c0       	rjmp	.+26     	; 0x33d6 <vfprintf+0x14a>
    33bc:	83 36       	cpi	r24, 0x63	; 99
    33be:	31 f0       	breq	.+12     	; 0x33cc <vfprintf+0x140>
    33c0:	83 37       	cpi	r24, 0x73	; 115
    33c2:	71 f0       	breq	.+28     	; 0x33e0 <vfprintf+0x154>
    33c4:	83 35       	cpi	r24, 0x53	; 83
    33c6:	09 f0       	breq	.+2      	; 0x33ca <vfprintf+0x13e>
    33c8:	55 c0       	rjmp	.+170    	; 0x3474 <vfprintf+0x1e8>
    33ca:	20 c0       	rjmp	.+64     	; 0x340c <vfprintf+0x180>
    33cc:	f8 01       	movw	r30, r16
    33ce:	80 81       	ld	r24, Z
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	0e 5f       	subi	r16, 0xFE	; 254
    33d4:	1f 4f       	sbci	r17, 0xFF	; 255
    33d6:	88 24       	eor	r8, r8
    33d8:	83 94       	inc	r8
    33da:	91 2c       	mov	r9, r1
    33dc:	53 01       	movw	r10, r6
    33de:	12 c0       	rjmp	.+36     	; 0x3404 <vfprintf+0x178>
    33e0:	28 01       	movw	r4, r16
    33e2:	f2 e0       	ldi	r31, 0x02	; 2
    33e4:	4f 0e       	add	r4, r31
    33e6:	51 1c       	adc	r5, r1
    33e8:	f8 01       	movw	r30, r16
    33ea:	a0 80       	ld	r10, Z
    33ec:	b1 80       	ldd	r11, Z+1	; 0x01
    33ee:	36 fe       	sbrs	r3, 6
    33f0:	03 c0       	rjmp	.+6      	; 0x33f8 <vfprintf+0x16c>
    33f2:	69 2d       	mov	r22, r9
    33f4:	70 e0       	ldi	r23, 0x00	; 0
    33f6:	02 c0       	rjmp	.+4      	; 0x33fc <vfprintf+0x170>
    33f8:	6f ef       	ldi	r22, 0xFF	; 255
    33fa:	7f ef       	ldi	r23, 0xFF	; 255
    33fc:	c5 01       	movw	r24, r10
    33fe:	4e d1       	rcall	.+668    	; 0x369c <strnlen>
    3400:	4c 01       	movw	r8, r24
    3402:	82 01       	movw	r16, r4
    3404:	f3 2d       	mov	r31, r3
    3406:	ff 77       	andi	r31, 0x7F	; 127
    3408:	3f 2e       	mov	r3, r31
    340a:	15 c0       	rjmp	.+42     	; 0x3436 <vfprintf+0x1aa>
    340c:	28 01       	movw	r4, r16
    340e:	22 e0       	ldi	r18, 0x02	; 2
    3410:	42 0e       	add	r4, r18
    3412:	51 1c       	adc	r5, r1
    3414:	f8 01       	movw	r30, r16
    3416:	a0 80       	ld	r10, Z
    3418:	b1 80       	ldd	r11, Z+1	; 0x01
    341a:	36 fe       	sbrs	r3, 6
    341c:	03 c0       	rjmp	.+6      	; 0x3424 <vfprintf+0x198>
    341e:	69 2d       	mov	r22, r9
    3420:	70 e0       	ldi	r23, 0x00	; 0
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <vfprintf+0x19c>
    3424:	6f ef       	ldi	r22, 0xFF	; 255
    3426:	7f ef       	ldi	r23, 0xFF	; 255
    3428:	c5 01       	movw	r24, r10
    342a:	2d d1       	rcall	.+602    	; 0x3686 <strnlen_P>
    342c:	4c 01       	movw	r8, r24
    342e:	f3 2d       	mov	r31, r3
    3430:	f0 68       	ori	r31, 0x80	; 128
    3432:	3f 2e       	mov	r3, r31
    3434:	82 01       	movw	r16, r4
    3436:	33 fc       	sbrc	r3, 3
    3438:	19 c0       	rjmp	.+50     	; 0x346c <vfprintf+0x1e0>
    343a:	82 2d       	mov	r24, r2
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	88 16       	cp	r8, r24
    3440:	99 06       	cpc	r9, r25
    3442:	a0 f4       	brcc	.+40     	; 0x346c <vfprintf+0x1e0>
    3444:	b6 01       	movw	r22, r12
    3446:	80 e2       	ldi	r24, 0x20	; 32
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	33 d1       	rcall	.+614    	; 0x36b2 <fputc>
    344c:	2a 94       	dec	r2
    344e:	f5 cf       	rjmp	.-22     	; 0x343a <vfprintf+0x1ae>
    3450:	f5 01       	movw	r30, r10
    3452:	37 fc       	sbrc	r3, 7
    3454:	85 91       	lpm	r24, Z+
    3456:	37 fe       	sbrs	r3, 7
    3458:	81 91       	ld	r24, Z+
    345a:	5f 01       	movw	r10, r30
    345c:	b6 01       	movw	r22, r12
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	28 d1       	rcall	.+592    	; 0x36b2 <fputc>
    3462:	21 10       	cpse	r2, r1
    3464:	2a 94       	dec	r2
    3466:	21 e0       	ldi	r18, 0x01	; 1
    3468:	82 1a       	sub	r8, r18
    346a:	91 08       	sbc	r9, r1
    346c:	81 14       	cp	r8, r1
    346e:	91 04       	cpc	r9, r1
    3470:	79 f7       	brne	.-34     	; 0x3450 <vfprintf+0x1c4>
    3472:	e1 c0       	rjmp	.+450    	; 0x3636 <vfprintf+0x3aa>
    3474:	84 36       	cpi	r24, 0x64	; 100
    3476:	11 f0       	breq	.+4      	; 0x347c <vfprintf+0x1f0>
    3478:	89 36       	cpi	r24, 0x69	; 105
    347a:	39 f5       	brne	.+78     	; 0x34ca <vfprintf+0x23e>
    347c:	f8 01       	movw	r30, r16
    347e:	37 fe       	sbrs	r3, 7
    3480:	07 c0       	rjmp	.+14     	; 0x3490 <vfprintf+0x204>
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	93 81       	ldd	r25, Z+3	; 0x03
    348a:	0c 5f       	subi	r16, 0xFC	; 252
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	08 c0       	rjmp	.+16     	; 0x34a0 <vfprintf+0x214>
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	07 2e       	mov	r0, r23
    3496:	00 0c       	add	r0, r0
    3498:	88 0b       	sbc	r24, r24
    349a:	99 0b       	sbc	r25, r25
    349c:	0e 5f       	subi	r16, 0xFE	; 254
    349e:	1f 4f       	sbci	r17, 0xFF	; 255
    34a0:	f3 2d       	mov	r31, r3
    34a2:	ff 76       	andi	r31, 0x6F	; 111
    34a4:	3f 2e       	mov	r3, r31
    34a6:	97 ff       	sbrs	r25, 7
    34a8:	09 c0       	rjmp	.+18     	; 0x34bc <vfprintf+0x230>
    34aa:	90 95       	com	r25
    34ac:	80 95       	com	r24
    34ae:	70 95       	com	r23
    34b0:	61 95       	neg	r22
    34b2:	7f 4f       	sbci	r23, 0xFF	; 255
    34b4:	8f 4f       	sbci	r24, 0xFF	; 255
    34b6:	9f 4f       	sbci	r25, 0xFF	; 255
    34b8:	f0 68       	ori	r31, 0x80	; 128
    34ba:	3f 2e       	mov	r3, r31
    34bc:	2a e0       	ldi	r18, 0x0A	; 10
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	a3 01       	movw	r20, r6
    34c2:	33 d1       	rcall	.+614    	; 0x372a <__ultoa_invert>
    34c4:	88 2e       	mov	r8, r24
    34c6:	86 18       	sub	r8, r6
    34c8:	44 c0       	rjmp	.+136    	; 0x3552 <vfprintf+0x2c6>
    34ca:	85 37       	cpi	r24, 0x75	; 117
    34cc:	31 f4       	brne	.+12     	; 0x34da <vfprintf+0x24e>
    34ce:	23 2d       	mov	r18, r3
    34d0:	2f 7e       	andi	r18, 0xEF	; 239
    34d2:	b2 2e       	mov	r11, r18
    34d4:	2a e0       	ldi	r18, 0x0A	; 10
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	25 c0       	rjmp	.+74     	; 0x3524 <vfprintf+0x298>
    34da:	93 2d       	mov	r25, r3
    34dc:	99 7f       	andi	r25, 0xF9	; 249
    34de:	b9 2e       	mov	r11, r25
    34e0:	8f 36       	cpi	r24, 0x6F	; 111
    34e2:	c1 f0       	breq	.+48     	; 0x3514 <vfprintf+0x288>
    34e4:	18 f4       	brcc	.+6      	; 0x34ec <vfprintf+0x260>
    34e6:	88 35       	cpi	r24, 0x58	; 88
    34e8:	79 f0       	breq	.+30     	; 0x3508 <vfprintf+0x27c>
    34ea:	ae c0       	rjmp	.+348    	; 0x3648 <vfprintf+0x3bc>
    34ec:	80 37       	cpi	r24, 0x70	; 112
    34ee:	19 f0       	breq	.+6      	; 0x34f6 <vfprintf+0x26a>
    34f0:	88 37       	cpi	r24, 0x78	; 120
    34f2:	21 f0       	breq	.+8      	; 0x34fc <vfprintf+0x270>
    34f4:	a9 c0       	rjmp	.+338    	; 0x3648 <vfprintf+0x3bc>
    34f6:	e9 2f       	mov	r30, r25
    34f8:	e0 61       	ori	r30, 0x10	; 16
    34fa:	be 2e       	mov	r11, r30
    34fc:	b4 fe       	sbrs	r11, 4
    34fe:	0d c0       	rjmp	.+26     	; 0x351a <vfprintf+0x28e>
    3500:	fb 2d       	mov	r31, r11
    3502:	f4 60       	ori	r31, 0x04	; 4
    3504:	bf 2e       	mov	r11, r31
    3506:	09 c0       	rjmp	.+18     	; 0x351a <vfprintf+0x28e>
    3508:	34 fe       	sbrs	r3, 4
    350a:	0a c0       	rjmp	.+20     	; 0x3520 <vfprintf+0x294>
    350c:	29 2f       	mov	r18, r25
    350e:	26 60       	ori	r18, 0x06	; 6
    3510:	b2 2e       	mov	r11, r18
    3512:	06 c0       	rjmp	.+12     	; 0x3520 <vfprintf+0x294>
    3514:	28 e0       	ldi	r18, 0x08	; 8
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	05 c0       	rjmp	.+10     	; 0x3524 <vfprintf+0x298>
    351a:	20 e1       	ldi	r18, 0x10	; 16
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <vfprintf+0x298>
    3520:	20 e1       	ldi	r18, 0x10	; 16
    3522:	32 e0       	ldi	r19, 0x02	; 2
    3524:	f8 01       	movw	r30, r16
    3526:	b7 fe       	sbrs	r11, 7
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <vfprintf+0x2ac>
    352a:	60 81       	ld	r22, Z
    352c:	71 81       	ldd	r23, Z+1	; 0x01
    352e:	82 81       	ldd	r24, Z+2	; 0x02
    3530:	93 81       	ldd	r25, Z+3	; 0x03
    3532:	0c 5f       	subi	r16, 0xFC	; 252
    3534:	1f 4f       	sbci	r17, 0xFF	; 255
    3536:	06 c0       	rjmp	.+12     	; 0x3544 <vfprintf+0x2b8>
    3538:	60 81       	ld	r22, Z
    353a:	71 81       	ldd	r23, Z+1	; 0x01
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	0e 5f       	subi	r16, 0xFE	; 254
    3542:	1f 4f       	sbci	r17, 0xFF	; 255
    3544:	a3 01       	movw	r20, r6
    3546:	f1 d0       	rcall	.+482    	; 0x372a <__ultoa_invert>
    3548:	88 2e       	mov	r8, r24
    354a:	86 18       	sub	r8, r6
    354c:	fb 2d       	mov	r31, r11
    354e:	ff 77       	andi	r31, 0x7F	; 127
    3550:	3f 2e       	mov	r3, r31
    3552:	36 fe       	sbrs	r3, 6
    3554:	0d c0       	rjmp	.+26     	; 0x3570 <vfprintf+0x2e4>
    3556:	23 2d       	mov	r18, r3
    3558:	2e 7f       	andi	r18, 0xFE	; 254
    355a:	a2 2e       	mov	r10, r18
    355c:	89 14       	cp	r8, r9
    355e:	58 f4       	brcc	.+22     	; 0x3576 <vfprintf+0x2ea>
    3560:	34 fe       	sbrs	r3, 4
    3562:	0b c0       	rjmp	.+22     	; 0x357a <vfprintf+0x2ee>
    3564:	32 fc       	sbrc	r3, 2
    3566:	09 c0       	rjmp	.+18     	; 0x357a <vfprintf+0x2ee>
    3568:	83 2d       	mov	r24, r3
    356a:	8e 7e       	andi	r24, 0xEE	; 238
    356c:	a8 2e       	mov	r10, r24
    356e:	05 c0       	rjmp	.+10     	; 0x357a <vfprintf+0x2ee>
    3570:	b8 2c       	mov	r11, r8
    3572:	a3 2c       	mov	r10, r3
    3574:	03 c0       	rjmp	.+6      	; 0x357c <vfprintf+0x2f0>
    3576:	b8 2c       	mov	r11, r8
    3578:	01 c0       	rjmp	.+2      	; 0x357c <vfprintf+0x2f0>
    357a:	b9 2c       	mov	r11, r9
    357c:	a4 fe       	sbrs	r10, 4
    357e:	0f c0       	rjmp	.+30     	; 0x359e <vfprintf+0x312>
    3580:	fe 01       	movw	r30, r28
    3582:	e8 0d       	add	r30, r8
    3584:	f1 1d       	adc	r31, r1
    3586:	80 81       	ld	r24, Z
    3588:	80 33       	cpi	r24, 0x30	; 48
    358a:	21 f4       	brne	.+8      	; 0x3594 <vfprintf+0x308>
    358c:	9a 2d       	mov	r25, r10
    358e:	99 7e       	andi	r25, 0xE9	; 233
    3590:	a9 2e       	mov	r10, r25
    3592:	09 c0       	rjmp	.+18     	; 0x35a6 <vfprintf+0x31a>
    3594:	a2 fe       	sbrs	r10, 2
    3596:	06 c0       	rjmp	.+12     	; 0x35a4 <vfprintf+0x318>
    3598:	b3 94       	inc	r11
    359a:	b3 94       	inc	r11
    359c:	04 c0       	rjmp	.+8      	; 0x35a6 <vfprintf+0x31a>
    359e:	8a 2d       	mov	r24, r10
    35a0:	86 78       	andi	r24, 0x86	; 134
    35a2:	09 f0       	breq	.+2      	; 0x35a6 <vfprintf+0x31a>
    35a4:	b3 94       	inc	r11
    35a6:	a3 fc       	sbrc	r10, 3
    35a8:	10 c0       	rjmp	.+32     	; 0x35ca <vfprintf+0x33e>
    35aa:	a0 fe       	sbrs	r10, 0
    35ac:	06 c0       	rjmp	.+12     	; 0x35ba <vfprintf+0x32e>
    35ae:	b2 14       	cp	r11, r2
    35b0:	80 f4       	brcc	.+32     	; 0x35d2 <vfprintf+0x346>
    35b2:	28 0c       	add	r2, r8
    35b4:	92 2c       	mov	r9, r2
    35b6:	9b 18       	sub	r9, r11
    35b8:	0d c0       	rjmp	.+26     	; 0x35d4 <vfprintf+0x348>
    35ba:	b2 14       	cp	r11, r2
    35bc:	58 f4       	brcc	.+22     	; 0x35d4 <vfprintf+0x348>
    35be:	b6 01       	movw	r22, r12
    35c0:	80 e2       	ldi	r24, 0x20	; 32
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	76 d0       	rcall	.+236    	; 0x36b2 <fputc>
    35c6:	b3 94       	inc	r11
    35c8:	f8 cf       	rjmp	.-16     	; 0x35ba <vfprintf+0x32e>
    35ca:	b2 14       	cp	r11, r2
    35cc:	18 f4       	brcc	.+6      	; 0x35d4 <vfprintf+0x348>
    35ce:	2b 18       	sub	r2, r11
    35d0:	02 c0       	rjmp	.+4      	; 0x35d6 <vfprintf+0x34a>
    35d2:	98 2c       	mov	r9, r8
    35d4:	21 2c       	mov	r2, r1
    35d6:	a4 fe       	sbrs	r10, 4
    35d8:	0f c0       	rjmp	.+30     	; 0x35f8 <vfprintf+0x36c>
    35da:	b6 01       	movw	r22, r12
    35dc:	80 e3       	ldi	r24, 0x30	; 48
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	68 d0       	rcall	.+208    	; 0x36b2 <fputc>
    35e2:	a2 fe       	sbrs	r10, 2
    35e4:	16 c0       	rjmp	.+44     	; 0x3612 <vfprintf+0x386>
    35e6:	a1 fc       	sbrc	r10, 1
    35e8:	03 c0       	rjmp	.+6      	; 0x35f0 <vfprintf+0x364>
    35ea:	88 e7       	ldi	r24, 0x78	; 120
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	02 c0       	rjmp	.+4      	; 0x35f4 <vfprintf+0x368>
    35f0:	88 e5       	ldi	r24, 0x58	; 88
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	b6 01       	movw	r22, r12
    35f6:	0c c0       	rjmp	.+24     	; 0x3610 <vfprintf+0x384>
    35f8:	8a 2d       	mov	r24, r10
    35fa:	86 78       	andi	r24, 0x86	; 134
    35fc:	51 f0       	breq	.+20     	; 0x3612 <vfprintf+0x386>
    35fe:	a1 fe       	sbrs	r10, 1
    3600:	02 c0       	rjmp	.+4      	; 0x3606 <vfprintf+0x37a>
    3602:	8b e2       	ldi	r24, 0x2B	; 43
    3604:	01 c0       	rjmp	.+2      	; 0x3608 <vfprintf+0x37c>
    3606:	80 e2       	ldi	r24, 0x20	; 32
    3608:	a7 fc       	sbrc	r10, 7
    360a:	8d e2       	ldi	r24, 0x2D	; 45
    360c:	b6 01       	movw	r22, r12
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	50 d0       	rcall	.+160    	; 0x36b2 <fputc>
    3612:	89 14       	cp	r8, r9
    3614:	30 f4       	brcc	.+12     	; 0x3622 <vfprintf+0x396>
    3616:	b6 01       	movw	r22, r12
    3618:	80 e3       	ldi	r24, 0x30	; 48
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	4a d0       	rcall	.+148    	; 0x36b2 <fputc>
    361e:	9a 94       	dec	r9
    3620:	f8 cf       	rjmp	.-16     	; 0x3612 <vfprintf+0x386>
    3622:	8a 94       	dec	r8
    3624:	f3 01       	movw	r30, r6
    3626:	e8 0d       	add	r30, r8
    3628:	f1 1d       	adc	r31, r1
    362a:	80 81       	ld	r24, Z
    362c:	b6 01       	movw	r22, r12
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	40 d0       	rcall	.+128    	; 0x36b2 <fputc>
    3632:	81 10       	cpse	r8, r1
    3634:	f6 cf       	rjmp	.-20     	; 0x3622 <vfprintf+0x396>
    3636:	22 20       	and	r2, r2
    3638:	09 f4       	brne	.+2      	; 0x363c <vfprintf+0x3b0>
    363a:	4e ce       	rjmp	.-868    	; 0x32d8 <vfprintf+0x4c>
    363c:	b6 01       	movw	r22, r12
    363e:	80 e2       	ldi	r24, 0x20	; 32
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	37 d0       	rcall	.+110    	; 0x36b2 <fputc>
    3644:	2a 94       	dec	r2
    3646:	f7 cf       	rjmp	.-18     	; 0x3636 <vfprintf+0x3aa>
    3648:	f6 01       	movw	r30, r12
    364a:	86 81       	ldd	r24, Z+6	; 0x06
    364c:	97 81       	ldd	r25, Z+7	; 0x07
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <vfprintf+0x3c8>
    3650:	8f ef       	ldi	r24, 0xFF	; 255
    3652:	9f ef       	ldi	r25, 0xFF	; 255
    3654:	2b 96       	adiw	r28, 0x0b	; 11
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	df 90       	pop	r13
    366e:	cf 90       	pop	r12
    3670:	bf 90       	pop	r11
    3672:	af 90       	pop	r10
    3674:	9f 90       	pop	r9
    3676:	8f 90       	pop	r8
    3678:	7f 90       	pop	r7
    367a:	6f 90       	pop	r6
    367c:	5f 90       	pop	r5
    367e:	4f 90       	pop	r4
    3680:	3f 90       	pop	r3
    3682:	2f 90       	pop	r2
    3684:	08 95       	ret

00003686 <strnlen_P>:
    3686:	fc 01       	movw	r30, r24
    3688:	05 90       	lpm	r0, Z+
    368a:	61 50       	subi	r22, 0x01	; 1
    368c:	70 40       	sbci	r23, 0x00	; 0
    368e:	01 10       	cpse	r0, r1
    3690:	d8 f7       	brcc	.-10     	; 0x3688 <strnlen_P+0x2>
    3692:	80 95       	com	r24
    3694:	90 95       	com	r25
    3696:	8e 0f       	add	r24, r30
    3698:	9f 1f       	adc	r25, r31
    369a:	08 95       	ret

0000369c <strnlen>:
    369c:	fc 01       	movw	r30, r24
    369e:	61 50       	subi	r22, 0x01	; 1
    36a0:	70 40       	sbci	r23, 0x00	; 0
    36a2:	01 90       	ld	r0, Z+
    36a4:	01 10       	cpse	r0, r1
    36a6:	d8 f7       	brcc	.-10     	; 0x369e <strnlen+0x2>
    36a8:	80 95       	com	r24
    36aa:	90 95       	com	r25
    36ac:	8e 0f       	add	r24, r30
    36ae:	9f 1f       	adc	r25, r31
    36b0:	08 95       	ret

000036b2 <fputc>:
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	fb 01       	movw	r30, r22
    36bc:	23 81       	ldd	r18, Z+3	; 0x03
    36be:	21 fd       	sbrc	r18, 1
    36c0:	03 c0       	rjmp	.+6      	; 0x36c8 <fputc+0x16>
    36c2:	8f ef       	ldi	r24, 0xFF	; 255
    36c4:	9f ef       	ldi	r25, 0xFF	; 255
    36c6:	2c c0       	rjmp	.+88     	; 0x3720 <fputc+0x6e>
    36c8:	22 ff       	sbrs	r18, 2
    36ca:	16 c0       	rjmp	.+44     	; 0x36f8 <fputc+0x46>
    36cc:	46 81       	ldd	r20, Z+6	; 0x06
    36ce:	57 81       	ldd	r21, Z+7	; 0x07
    36d0:	24 81       	ldd	r18, Z+4	; 0x04
    36d2:	35 81       	ldd	r19, Z+5	; 0x05
    36d4:	42 17       	cp	r20, r18
    36d6:	53 07       	cpc	r21, r19
    36d8:	44 f4       	brge	.+16     	; 0x36ea <fputc+0x38>
    36da:	a0 81       	ld	r26, Z
    36dc:	b1 81       	ldd	r27, Z+1	; 0x01
    36de:	9d 01       	movw	r18, r26
    36e0:	2f 5f       	subi	r18, 0xFF	; 255
    36e2:	3f 4f       	sbci	r19, 0xFF	; 255
    36e4:	31 83       	std	Z+1, r19	; 0x01
    36e6:	20 83       	st	Z, r18
    36e8:	8c 93       	st	X, r24
    36ea:	26 81       	ldd	r18, Z+6	; 0x06
    36ec:	37 81       	ldd	r19, Z+7	; 0x07
    36ee:	2f 5f       	subi	r18, 0xFF	; 255
    36f0:	3f 4f       	sbci	r19, 0xFF	; 255
    36f2:	37 83       	std	Z+7, r19	; 0x07
    36f4:	26 83       	std	Z+6, r18	; 0x06
    36f6:	14 c0       	rjmp	.+40     	; 0x3720 <fputc+0x6e>
    36f8:	8b 01       	movw	r16, r22
    36fa:	ec 01       	movw	r28, r24
    36fc:	fb 01       	movw	r30, r22
    36fe:	00 84       	ldd	r0, Z+8	; 0x08
    3700:	f1 85       	ldd	r31, Z+9	; 0x09
    3702:	e0 2d       	mov	r30, r0
    3704:	19 95       	eicall
    3706:	89 2b       	or	r24, r25
    3708:	e1 f6       	brne	.-72     	; 0x36c2 <fputc+0x10>
    370a:	d8 01       	movw	r26, r16
    370c:	16 96       	adiw	r26, 0x06	; 6
    370e:	8d 91       	ld	r24, X+
    3710:	9c 91       	ld	r25, X
    3712:	17 97       	sbiw	r26, 0x07	; 7
    3714:	01 96       	adiw	r24, 0x01	; 1
    3716:	17 96       	adiw	r26, 0x07	; 7
    3718:	9c 93       	st	X, r25
    371a:	8e 93       	st	-X, r24
    371c:	16 97       	sbiw	r26, 0x06	; 6
    371e:	ce 01       	movw	r24, r28
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
    3728:	08 95       	ret

0000372a <__ultoa_invert>:
    372a:	fa 01       	movw	r30, r20
    372c:	aa 27       	eor	r26, r26
    372e:	28 30       	cpi	r18, 0x08	; 8
    3730:	51 f1       	breq	.+84     	; 0x3786 <__ultoa_invert+0x5c>
    3732:	20 31       	cpi	r18, 0x10	; 16
    3734:	81 f1       	breq	.+96     	; 0x3796 <__ultoa_invert+0x6c>
    3736:	e8 94       	clt
    3738:	6f 93       	push	r22
    373a:	6e 7f       	andi	r22, 0xFE	; 254
    373c:	6e 5f       	subi	r22, 0xFE	; 254
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    3740:	8f 4f       	sbci	r24, 0xFF	; 255
    3742:	9f 4f       	sbci	r25, 0xFF	; 255
    3744:	af 4f       	sbci	r26, 0xFF	; 255
    3746:	b1 e0       	ldi	r27, 0x01	; 1
    3748:	3e d0       	rcall	.+124    	; 0x37c6 <__ultoa_invert+0x9c>
    374a:	b4 e0       	ldi	r27, 0x04	; 4
    374c:	3c d0       	rcall	.+120    	; 0x37c6 <__ultoa_invert+0x9c>
    374e:	67 0f       	add	r22, r23
    3750:	78 1f       	adc	r23, r24
    3752:	89 1f       	adc	r24, r25
    3754:	9a 1f       	adc	r25, r26
    3756:	a1 1d       	adc	r26, r1
    3758:	68 0f       	add	r22, r24
    375a:	79 1f       	adc	r23, r25
    375c:	8a 1f       	adc	r24, r26
    375e:	91 1d       	adc	r25, r1
    3760:	a1 1d       	adc	r26, r1
    3762:	6a 0f       	add	r22, r26
    3764:	71 1d       	adc	r23, r1
    3766:	81 1d       	adc	r24, r1
    3768:	91 1d       	adc	r25, r1
    376a:	a1 1d       	adc	r26, r1
    376c:	20 d0       	rcall	.+64     	; 0x37ae <__ultoa_invert+0x84>
    376e:	09 f4       	brne	.+2      	; 0x3772 <__ultoa_invert+0x48>
    3770:	68 94       	set
    3772:	3f 91       	pop	r19
    3774:	2a e0       	ldi	r18, 0x0A	; 10
    3776:	26 9f       	mul	r18, r22
    3778:	11 24       	eor	r1, r1
    377a:	30 19       	sub	r19, r0
    377c:	30 5d       	subi	r19, 0xD0	; 208
    377e:	31 93       	st	Z+, r19
    3780:	de f6       	brtc	.-74     	; 0x3738 <__ultoa_invert+0xe>
    3782:	cf 01       	movw	r24, r30
    3784:	08 95       	ret
    3786:	46 2f       	mov	r20, r22
    3788:	47 70       	andi	r20, 0x07	; 7
    378a:	40 5d       	subi	r20, 0xD0	; 208
    378c:	41 93       	st	Z+, r20
    378e:	b3 e0       	ldi	r27, 0x03	; 3
    3790:	0f d0       	rcall	.+30     	; 0x37b0 <__ultoa_invert+0x86>
    3792:	c9 f7       	brne	.-14     	; 0x3786 <__ultoa_invert+0x5c>
    3794:	f6 cf       	rjmp	.-20     	; 0x3782 <__ultoa_invert+0x58>
    3796:	46 2f       	mov	r20, r22
    3798:	4f 70       	andi	r20, 0x0F	; 15
    379a:	40 5d       	subi	r20, 0xD0	; 208
    379c:	4a 33       	cpi	r20, 0x3A	; 58
    379e:	18 f0       	brcs	.+6      	; 0x37a6 <__ultoa_invert+0x7c>
    37a0:	49 5d       	subi	r20, 0xD9	; 217
    37a2:	31 fd       	sbrc	r19, 1
    37a4:	40 52       	subi	r20, 0x20	; 32
    37a6:	41 93       	st	Z+, r20
    37a8:	02 d0       	rcall	.+4      	; 0x37ae <__ultoa_invert+0x84>
    37aa:	a9 f7       	brne	.-22     	; 0x3796 <__ultoa_invert+0x6c>
    37ac:	ea cf       	rjmp	.-44     	; 0x3782 <__ultoa_invert+0x58>
    37ae:	b4 e0       	ldi	r27, 0x04	; 4
    37b0:	a6 95       	lsr	r26
    37b2:	97 95       	ror	r25
    37b4:	87 95       	ror	r24
    37b6:	77 95       	ror	r23
    37b8:	67 95       	ror	r22
    37ba:	ba 95       	dec	r27
    37bc:	c9 f7       	brne	.-14     	; 0x37b0 <__ultoa_invert+0x86>
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	61 05       	cpc	r22, r1
    37c2:	71 05       	cpc	r23, r1
    37c4:	08 95       	ret
    37c6:	9b 01       	movw	r18, r22
    37c8:	ac 01       	movw	r20, r24
    37ca:	0a 2e       	mov	r0, r26
    37cc:	06 94       	lsr	r0
    37ce:	57 95       	ror	r21
    37d0:	47 95       	ror	r20
    37d2:	37 95       	ror	r19
    37d4:	27 95       	ror	r18
    37d6:	ba 95       	dec	r27
    37d8:	c9 f7       	brne	.-14     	; 0x37cc <__ultoa_invert+0xa2>
    37da:	62 0f       	add	r22, r18
    37dc:	73 1f       	adc	r23, r19
    37de:	84 1f       	adc	r24, r20
    37e0:	95 1f       	adc	r25, r21
    37e2:	a0 1d       	adc	r26, r0
    37e4:	08 95       	ret

000037e6 <_exit>:
    37e6:	f8 94       	cli

000037e8 <__stop_program>:
    37e8:	ff cf       	rjmp	.-2      	; 0x37e8 <__stop_program>
