
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800200  0000394c  000039e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000394c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000266  0080036c  0080036c  00003b4c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003b4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c8  00000000  00000000  00003be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000161f6  00000000  00000000  000045b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036b5  00000000  00000000  0001a7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000519b  00000000  00000000  0001de5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f44  00000000  00000000  00022ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d59  00000000  00000000  00024f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a4ef  00000000  00000000  00028c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000978  00000000  00000000  00033184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	66 c6       	rjmp	.+3276   	; 0xcf2 <__vector_9>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__vector_25>
      68:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__vector_36>
      94:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z12printDataLCDv+0x2a0>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	7f 12       	cpse	r7, r31
     168:	82 12       	cpse	r8, r18
     16a:	71 12       	cpse	r7, r17
     16c:	75 12       	cpse	r7, r21
     16e:	7b 12       	cpse	r7, r27
     170:	b9 12       	cpse	r11, r25
     172:	86 12       	cpse	r8, r22
     174:	8a 12       	cpse	r8, r26
     176:	90 12       	cpse	r9, r16
     178:	94 12       	cpse	r9, r20
     17a:	98 12       	cpse	r9, r24
     17c:	9e 12       	cpse	r9, r30
     17e:	a2 12       	cpse	r10, r18
     180:	a6 12       	cpse	r10, r22
     182:	b9 12       	cpse	r11, r25
     184:	ac 12       	cpse	r10, r28
     186:	b0 12       	cpse	r11, r16
     188:	b4 12       	cpse	r11, r20

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
     290:	06 03       	mulsu	r16, r22
     292:	67 0f       	add	r22, r23
     294:	fc 0f       	add	r31, r28
     296:	a8 15       	cp	r26, r8

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	ec e4       	ldi	r30, 0x4C	; 76
     2b0:	f9 e3       	ldi	r31, 0x39	; 57
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	ac 36       	cpi	r26, 0x6C	; 108
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	25 e0       	ldi	r18, 0x05	; 5
     2c4:	ac e6       	ldi	r26, 0x6C	; 108
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	a2 3d       	cpi	r26, 0xD2	; 210
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__tablejump2__>
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 2a 10 	call	0x2054	; 0x2054 <main>
     2f6:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	serialWriting = NO;
	RS485_RX_ON
}
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	8a 01       	movw	r16, r20
     33a:	d2 2e       	mov	r13, r18
     33c:	ad b6       	in	r10, 0x3d	; 61
     33e:	be b6       	in	r11, 0x3e	; 62
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	82 1b       	sub	r24, r18
     346:	91 09       	sbc	r25, r1
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	9e bf       	out	0x3e, r25	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	62 2f       	mov	r22, r18
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 ad 0a 	call	0x155a	; 0x155a <__floatunsisf>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <pow>
     372:	2b 01       	movw	r4, r22
     374:	3c 01       	movw	r6, r24
     376:	b8 01       	movw	r22, r16
     378:	01 2e       	mov	r0, r17
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatsisf>
     384:	a3 01       	movw	r20, r6
     386:	92 01       	movw	r18, r4
     388:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__cmpsf2>
     38c:	87 fd       	sbrc	r24, 7
     38e:	0b c0       	rjmp	.+22     	; 0x3a6 <_Z8printLCDhhih+0x9c>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e8       	ldi	r20, 0x80	; 128
     396:	5f e3       	ldi	r21, 0x3F	; 63
     398:	c3 01       	movw	r24, r6
     39a:	b2 01       	movw	r22, r4
     39c:	0e 94 13 0a 	call	0x1426	; 0x1426 <__subsf3>
     3a0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fixsfsi>
     3a4:	8b 01       	movw	r16, r22
     3a6:	1f 92       	push	r1
     3a8:	df 92       	push	r13
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	6c 01       	movw	r12, r24
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 c9 19 	call	0x3392	; 0x3392 <sprintf>
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	df 92       	push	r13
     3c6:	cf 92       	push	r12
     3c8:	ff 92       	push	r15
     3ca:	ef 92       	push	r14
     3cc:	0e 94 c9 19 	call	0x3392	; 0x3392 <sprintf>
     3d0:	48 2d       	mov	r20, r8
     3d2:	69 2d       	mov	r22, r9
     3d4:	82 e7       	ldi	r24, 0x72	; 114
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3dc:	b7 01       	movw	r22, r14
     3de:	82 e7       	ldi	r24, 0x72	; 114
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     3e6:	8d b7       	in	r24, 0x3d	; 61
     3e8:	9e b7       	in	r25, 0x3e	; 62
     3ea:	0c 96       	adiw	r24, 0x0c	; 12
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	9e bf       	out	0x3e, r25	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	8d bf       	out	0x3d, r24	; 61
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	be be       	out	0x3e, r11	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	ad be       	out	0x3d, r10	; 61
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	4f 90       	pop	r4
     42a:	08 95       	ret

0000042c <_Z13setupSwitchesv>:
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	84 b9       	out	0x04, r24	; 4
     430:	84 b1       	in	r24, 0x04	; 4
     432:	88 7f       	andi	r24, 0xF8	; 248
     434:	84 b9       	out	0x04, r24	; 4
     436:	eb e6       	ldi	r30, 0x6B	; 107
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	87 60       	ori	r24, 0x07	; 7
     43e:	80 83       	st	Z, r24
     440:	e8 e6       	ldi	r30, 0x68	; 104
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	81 60       	ori	r24, 0x01	; 1
     448:	80 83       	st	Z, r24
     44a:	78 94       	sei
     44c:	08 95       	ret

0000044e <_Z13checkPositionhi>:
     44e:	83 30       	cpi	r24, 0x03	; 3
     450:	30 f4       	brcc	.+12     	; 0x45e <_Z13checkPositionhi+0x10>
     452:	cb 01       	movw	r24, r22
     454:	77 ff       	sbrs	r23, 7
     456:	1b c0       	rjmp	.+54     	; 0x48e <_Z13checkPositionhi+0x40>
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	18 c0       	rjmp	.+48     	; 0x48e <_Z13checkPositionhi+0x40>
     45e:	83 30       	cpi	r24, 0x03	; 3
     460:	69 f4       	brne	.+26     	; 0x47c <_Z13checkPositionhi+0x2e>
     462:	cb 01       	movw	r24, r22
     464:	61 15       	cp	r22, r1
     466:	78 4f       	sbci	r23, 0xF8	; 248
     468:	14 f4       	brge	.+4      	; 0x46e <_Z13checkPositionhi+0x20>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	98 ef       	ldi	r25, 0xF8	; 248
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	28 e0       	ldi	r18, 0x08	; 8
     472:	92 07       	cpc	r25, r18
     474:	ac f0       	brlt	.+42     	; 0x4a0 <_Z13checkPositionhi+0x52>
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	98 e0       	ldi	r25, 0x08	; 8
     47a:	08 95       	ret
     47c:	84 50       	subi	r24, 0x04	; 4
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	68 f4       	brcc	.+26     	; 0x49c <_Z13checkPositionhi+0x4e>
     482:	cb 01       	movw	r24, r22
     484:	64 3e       	cpi	r22, 0xE4	; 228
     486:	72 40       	sbci	r23, 0x02	; 2
     488:	14 f4       	brge	.+4      	; 0x48e <_Z13checkPositionhi+0x40>
     48a:	84 ee       	ldi	r24, 0xE4	; 228
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	85 3a       	cpi	r24, 0xA5	; 165
     490:	26 e0       	ldi	r18, 0x06	; 6
     492:	92 07       	cpc	r25, r18
     494:	2c f0       	brlt	.+10     	; 0x4a0 <_Z13checkPositionhi+0x52>
     496:	84 ea       	ldi	r24, 0xA4	; 164
     498:	96 e0       	ldi	r25, 0x06	; 6
     49a:	08 95       	ret
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	9f ef       	ldi	r25, 0xFF	; 255
     4a0:	08 95       	ret

000004a2 <_Z11printSerial6Stringi>:
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	eb 01       	movw	r28, r22
     4a8:	bc 01       	movw	r22, r24
     4aa:	87 ec       	ldi	r24, 0xC7	; 199
     4ac:	93 e0       	ldi	r25, 0x03	; 3
     4ae:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_ZN5Print5printERK6String>
     4b2:	6a e9       	ldi	r22, 0x9A	; 154
     4b4:	72 e0       	ldi	r23, 0x02	; 2
     4b6:	87 ec       	ldi	r24, 0xC7	; 199
     4b8:	93 e0       	ldi	r25, 0x03	; 3
     4ba:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     4be:	4a e0       	ldi	r20, 0x0A	; 10
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	be 01       	movw	r22, r28
     4c4:	87 ec       	ldi	r24, 0xC7	; 199
     4c6:	93 e0       	ldi	r25, 0x03	; 3
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	0c 94 40 11 	jmp	0x2280	; 0x2280 <_ZN5Print7printlnEii>

000004d0 <_Z12error_decodeh>:
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	e6 97       	sbiw	r28, 0x36	; 54
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	08 2f       	mov	r16, r24
     4f2:	60 e4       	ldi	r22, 0x40	; 64
     4f4:	73 e0       	ldi	r23, 0x03	; 3
     4f6:	ce 01       	movw	r24, r28
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	7c 01       	movw	r14, r24
     4fc:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
     500:	60 e4       	ldi	r22, 0x40	; 64
     502:	73 e0       	ldi	r23, 0x03	; 3
     504:	ce 01       	movw	r24, r28
     506:	07 96       	adiw	r24, 0x07	; 7
     508:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
     50c:	10 2f       	mov	r17, r16
     50e:	11 70       	andi	r17, 0x01	; 1
     510:	00 fd       	sbrc	r16, 0
     512:	03 c0       	rjmp	.+6      	; 0x51a <_Z12error_decodeh+0x4a>
     514:	60 e4       	ldi	r22, 0x40	; 64
     516:	73 e0       	ldi	r23, 0x03	; 3
     518:	02 c0       	rjmp	.+4      	; 0x51e <_Z12error_decodeh+0x4e>
     51a:	66 e1       	ldi	r22, 0x16	; 22
     51c:	72 e0       	ldi	r23, 0x02	; 2
     51e:	ce 01       	movw	r24, r28
     520:	0d 96       	adiw	r24, 0x0d	; 13
     522:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
     526:	11 11       	cpse	r17, r1
     528:	03 c0       	rjmp	.+6      	; 0x530 <_Z12error_decodeh+0x60>
     52a:	60 e4       	ldi	r22, 0x40	; 64
     52c:	73 e0       	ldi	r23, 0x03	; 3
     52e:	02 c0       	rjmp	.+4      	; 0x534 <_Z12error_decodeh+0x64>
     530:	6a e1       	ldi	r22, 0x1A	; 26
     532:	72 e0       	ldi	r23, 0x02	; 2
     534:	ce 01       	movw	r24, r28
     536:	43 96       	adiw	r24, 0x13	; 19
     538:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
     53c:	11 11       	cpse	r17, r1
     53e:	03 c0       	rjmp	.+6      	; 0x546 <_Z12error_decodeh+0x76>
     540:	60 e4       	ldi	r22, 0x40	; 64
     542:	73 e0       	ldi	r23, 0x03	; 3
     544:	02 c0       	rjmp	.+4      	; 0x54a <_Z12error_decodeh+0x7a>
     546:	6e e1       	ldi	r22, 0x1E	; 30
     548:	72 e0       	ldi	r23, 0x02	; 2
     54a:	ce 01       	movw	r24, r28
     54c:	49 96       	adiw	r24, 0x19	; 25
     54e:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
     552:	11 11       	cpse	r17, r1
     554:	03 c0       	rjmp	.+6      	; 0x55c <_Z12error_decodeh+0x8c>
     556:	60 e4       	ldi	r22, 0x40	; 64
     558:	73 e0       	ldi	r23, 0x03	; 3
     55a:	02 c0       	rjmp	.+4      	; 0x560 <_Z12error_decodeh+0x90>
     55c:	62 e2       	ldi	r22, 0x22	; 34
     55e:	72 e0       	ldi	r23, 0x02	; 2
     560:	ce 01       	movw	r24, r28
     562:	4f 96       	adiw	r24, 0x1f	; 31
     564:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
     568:	11 11       	cpse	r17, r1
     56a:	03 c0       	rjmp	.+6      	; 0x572 <_Z12error_decodeh+0xa2>
     56c:	60 e4       	ldi	r22, 0x40	; 64
     56e:	73 e0       	ldi	r23, 0x03	; 3
     570:	02 c0       	rjmp	.+4      	; 0x576 <_Z12error_decodeh+0xa6>
     572:	66 e2       	ldi	r22, 0x26	; 38
     574:	72 e0       	ldi	r23, 0x02	; 2
     576:	ce 01       	movw	r24, r28
     578:	85 96       	adiw	r24, 0x25	; 37
     57a:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
     57e:	60 e4       	ldi	r22, 0x40	; 64
     580:	73 e0       	ldi	r23, 0x03	; 3
     582:	ce 01       	movw	r24, r28
     584:	8b 96       	adiw	r24, 0x2b	; 43
     586:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
     58a:	67 01       	movw	r12, r14
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	10 e0       	ldi	r17, 0x00	; 0
     590:	b6 01       	movw	r22, r12
     592:	ce 01       	movw	r24, r28
     594:	c1 96       	adiw	r24, 0x31	; 49
     596:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN6StringC1ERKS_>
     59a:	b8 01       	movw	r22, r16
     59c:	ce 01       	movw	r24, r28
     59e:	c1 96       	adiw	r24, 0x31	; 49
     5a0:	80 df       	rcall	.-256    	; 0x4a2 <_Z11printSerial6Stringi>
     5a2:	ce 01       	movw	r24, r28
     5a4:	c1 96       	adiw	r24, 0x31	; 49
     5a6:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
     5aa:	0f 5f       	subi	r16, 0xFF	; 255
     5ac:	1f 4f       	sbci	r17, 0xFF	; 255
     5ae:	96 e0       	ldi	r25, 0x06	; 6
     5b0:	c9 0e       	add	r12, r25
     5b2:	d1 1c       	adc	r13, r1
     5b4:	08 30       	cpi	r16, 0x08	; 8
     5b6:	11 05       	cpc	r17, r1
     5b8:	59 f7       	brne	.-42     	; 0x590 <_Z12error_decodeh+0xc0>
     5ba:	8e 01       	movw	r16, r28
     5bc:	0f 5c       	subi	r16, 0xCF	; 207
     5be:	1f 4f       	sbci	r17, 0xFF	; 255
     5c0:	06 50       	subi	r16, 0x06	; 6
     5c2:	11 09       	sbc	r17, r1
     5c4:	c8 01       	movw	r24, r16
     5c6:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
     5ca:	e0 16       	cp	r14, r16
     5cc:	f1 06       	cpc	r15, r17
     5ce:	c1 f7       	brne	.-16     	; 0x5c0 <_Z12error_decodeh+0xf0>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	e6 96       	adiw	r28, 0x36	; 54
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	cf 90       	pop	r12
     5f0:	08 95       	ret

000005f2 <_Z8sumBytesPhh>:
     5f2:	38 2f       	mov	r19, r24
     5f4:	fc 01       	movw	r30, r24
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	2e 2f       	mov	r18, r30
     5fc:	23 1b       	sub	r18, r19
     5fe:	26 17       	cp	r18, r22
     600:	20 f4       	brcc	.+8      	; 0x60a <_Z8sumBytesPhh+0x18>
     602:	21 91       	ld	r18, Z+
     604:	82 0f       	add	r24, r18
     606:	91 1d       	adc	r25, r1
     608:	f8 cf       	rjmp	.-16     	; 0x5fa <_Z8sumBytesPhh+0x8>
     60a:	08 95       	ret

0000060c <_GLOBAL__sub_I_position_old>:
     60c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     610:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     614:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <currPos+0x1>
     618:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <currPos>
     61c:	24 e0       	ldi	r18, 0x04	; 4
     61e:	44 e1       	ldi	r20, 0x14	; 20
     620:	67 e2       	ldi	r22, 0x27	; 39
     622:	82 e7       	ldi	r24, 0x72	; 114
     624:	93 e0       	ldi	r25, 0x03	; 3
     626:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <_ZN17LiquidCrystal_I2CC1Ehhh>

0000062a <_Z11printBufferv>:
     62a:	6a e2       	ldi	r22, 0x2A	; 42
     62c:	72 e0       	ldi	r23, 0x02	; 2
     62e:	87 ec       	ldi	r24, 0xC7	; 199
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     636:	84 e6       	ldi	r24, 0x64	; 100
     638:	94 e0       	ldi	r25, 0x04	; 4
     63a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_ZN14HardwareSerial9availableEv>
     63e:	4a e0       	ldi	r20, 0x0A	; 10
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	bc 01       	movw	r22, r24
     644:	87 ec       	ldi	r24, 0xC7	; 199
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN5Print5printEii>
     64c:	65 e3       	ldi	r22, 0x35	; 53
     64e:	72 e0       	ldi	r23, 0x02	; 2
     650:	87 ec       	ldi	r24, 0xC7	; 199
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	0e 94 8c 10 	call	0x2118	; 0x2118 <_ZN5Print7printlnEPKc>
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <serialReading>
     65e:	84 e6       	ldi	r24, 0x64	; 100
     660:	94 e0       	ldi	r25, 0x04	; 4
     662:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_ZN14HardwareSerial9availableEv>
     666:	89 2b       	or	r24, r25
     668:	19 f1       	breq	.+70     	; 0x6b0 <_Z11printBufferv+0x86>
     66a:	84 e6       	ldi	r24, 0x64	; 100
     66c:	94 e0       	ldi	r25, 0x04	; 4
     66e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_ZN14HardwareSerial9availableEv>
     672:	4a e0       	ldi	r20, 0x0A	; 10
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	bc 01       	movw	r22, r24
     678:	87 ec       	ldi	r24, 0xC7	; 199
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN5Print5printEii>
     680:	6b e4       	ldi	r22, 0x4B	; 75
     682:	72 e0       	ldi	r23, 0x02	; 2
     684:	87 ec       	ldi	r24, 0xC7	; 199
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     68c:	84 e6       	ldi	r24, 0x64	; 100
     68e:	94 e0       	ldi	r25, 0x04	; 4
     690:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     694:	4a e0       	ldi	r20, 0x0A	; 10
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	bc 01       	movw	r22, r24
     69a:	87 ec       	ldi	r24, 0xC7	; 199
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN5Print7printlnEii>
     6a2:	61 e0       	ldi	r22, 0x01	; 1
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
     6ae:	d7 cf       	rjmp	.-82     	; 0x65e <_Z11printBufferv+0x34>
     6b0:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <serialReading>
     6b4:	6e e4       	ldi	r22, 0x4E	; 78
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	87 ec       	ldi	r24, 0xC7	; 199
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <_ZN5Print7printlnEPKc>

000006c0 <_Z12printDataLCDv>:
     6c0:	7f 92       	push	r7
     6c2:	8f 92       	push	r8
     6c4:	9f 92       	push	r9
     6c6:	af 92       	push	r10
     6c8:	bf 92       	push	r11
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	6a e0       	ldi	r22, 0x0A	; 10
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
     6e6:	84 e6       	ldi	r24, 0x64	; 100
     6e8:	94 e0       	ldi	r25, 0x04	; 4
     6ea:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_ZN14HardwareSerial9availableEv>
     6ee:	18 16       	cp	r1, r24
     6f0:	19 06       	cpc	r1, r25
     6f2:	0c f0       	brlt	.+2      	; 0x6f6 <_Z12printDataLCDv+0x36>
     6f4:	db c1       	rjmp	.+950    	; 0xaac <_Z12printDataLCDv+0x3ec>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <serialReading>
     6fc:	84 e6       	ldi	r24, 0x64	; 100
     6fe:	94 e0       	ldi	r25, 0x04	; 4
     700:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     704:	8f 3f       	cpi	r24, 0xFF	; 255
     706:	91 05       	cpc	r25, r1
     708:	09 f0       	breq	.+2      	; 0x70c <_Z12printDataLCDv+0x4c>
     70a:	d0 c1       	rjmp	.+928    	; 0xaac <_Z12printDataLCDv+0x3ec>
     70c:	84 e6       	ldi	r24, 0x64	; 100
     70e:	94 e0       	ldi	r25, 0x04	; 4
     710:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     714:	8f 3f       	cpi	r24, 0xFF	; 255
     716:	91 05       	cpc	r25, r1
     718:	09 f0       	breq	.+2      	; 0x71c <_Z12printDataLCDv+0x5c>
     71a:	c8 c1       	rjmp	.+912    	; 0xaac <_Z12printDataLCDv+0x3ec>
     71c:	84 e6       	ldi	r24, 0x64	; 100
     71e:	94 e0       	ldi	r25, 0x04	; 4
     720:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     724:	ec 01       	movw	r28, r24
     726:	b8 2e       	mov	r11, r24
     728:	2f ef       	ldi	r18, 0xFF	; 255
     72a:	82 17       	cp	r24, r18
     72c:	b9 f3       	breq	.-18     	; 0x71c <_Z12printDataLCDv+0x5c>
     72e:	84 e6       	ldi	r24, 0x64	; 100
     730:	94 e0       	ldi	r25, 0x04	; 4
     732:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     736:	08 2f       	mov	r16, r24
     738:	84 e6       	ldi	r24, 0x64	; 100
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     740:	18 2f       	mov	r17, r24
     742:	81 11       	cpse	r24, r1
     744:	02 c0       	rjmp	.+4      	; 0x74a <_Z12printDataLCDv+0x8a>
     746:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <error_byte_old>
     74a:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <error_byte_old>
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	66 e0       	ldi	r22, 0x06	; 6
     752:	82 e7       	ldi	r24, 0x72	; 114
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     75a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <error_counter>
     75e:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <error_counter+0x1>
     762:	11 11       	cpse	r17, r1
     764:	02 c0       	rjmp	.+4      	; 0x76a <_Z12printDataLCDv+0xaa>
     766:	00 97       	sbiw	r24, 0x00	; 0
     768:	11 f1       	breq	.+68     	; 0x7ae <_Z12printDataLCDv+0xee>
     76a:	8b 30       	cpi	r24, 0x0B	; 11
     76c:	91 05       	cpc	r25, r1
     76e:	14 f4       	brge	.+4      	; 0x774 <_Z12printDataLCDv+0xb4>
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	02 c0       	rjmp	.+4      	; 0x778 <_Z12printDataLCDv+0xb8>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <error_counter+0x1>
     77c:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <error_counter>
     780:	81 2f       	mov	r24, r17
     782:	a6 de       	rcall	.-692    	; 0x4d0 <_Z12error_decodeh>
     784:	6a e7       	ldi	r22, 0x7A	; 122
     786:	72 e0       	ldi	r23, 0x02	; 2
     788:	82 e7       	ldi	r24, 0x72	; 114
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     790:	4a e0       	ldi	r20, 0x0A	; 10
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	60 91 82 03 	lds	r22, 0x0382	; 0x800382 <error_byte_old>
     798:	82 e7       	ldi	r24, 0x72	; 114
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	0e 94 ef 10 	call	0x21de	; 0x21de <_ZN5Print5printEhi>
     7a0:	65 e8       	ldi	r22, 0x85	; 133
     7a2:	72 e0       	ldi	r23, 0x02	; 2
     7a4:	82 e7       	ldi	r24, 0x72	; 114
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     7ac:	58 c1       	rjmp	.+688    	; 0xa5e <_Z12printDataLCDv+0x39e>
     7ae:	6e e7       	ldi	r22, 0x7E	; 126
     7b0:	72 e0       	ldi	r23, 0x02	; 2
     7b2:	82 e7       	ldi	r24, 0x72	; 114
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     7ba:	03 30       	cpi	r16, 0x03	; 3
     7bc:	08 f4       	brcc	.+2      	; 0x7c0 <_Z12printDataLCDv+0x100>
     7be:	4f c1       	rjmp	.+670    	; 0xa5e <_Z12printDataLCDv+0x39e>
     7c0:	84 e6       	ldi	r24, 0x64	; 100
     7c2:	94 e0       	ldi	r25, 0x04	; 4
     7c4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     7c8:	8c 01       	movw	r16, r24
     7ca:	84 e6       	ldi	r24, 0x64	; 100
     7cc:	94 e0       	ldi	r25, 0x04	; 4
     7ce:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	38 2f       	mov	r19, r24
     7d8:	02 0f       	add	r16, r18
     7da:	13 1f       	adc	r17, r19
     7dc:	7e 01       	movw	r14, r28
     7de:	ff 24       	eor	r15, r15
     7e0:	3a e0       	ldi	r19, 0x0A	; 10
     7e2:	c3 9f       	mul	r28, r19
     7e4:	e0 01       	movw	r28, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	cd 57       	subi	r28, 0x7D	; 125
     7ea:	dc 4f       	sbci	r29, 0xFC	; 252
     7ec:	8d 81       	ldd	r24, Y+5	; 0x05
     7ee:	2b 81       	ldd	r18, Y+3	; 0x03
     7f0:	3c 81       	ldd	r19, Y+4	; 0x04
     7f2:	9e 81       	ldd	r25, Y+6	; 0x06
     7f4:	81 11       	cpse	r24, r1
     7f6:	08 c0       	rjmp	.+16     	; 0x808 <_Z12printDataLCDv+0x148>
     7f8:	a8 01       	movw	r20, r16
     7fa:	4c 59       	subi	r20, 0x9C	; 156
     7fc:	5f 4f       	sbci	r21, 0xFF	; 255
     7fe:	42 17       	cp	r20, r18
     800:	53 07       	cpc	r21, r19
     802:	44 f4       	brge	.+16     	; 0x814 <_Z12printDataLCDv+0x154>
     804:	9f 5f       	subi	r25, 0xFF	; 255
     806:	06 c0       	rjmp	.+12     	; 0x814 <_Z12printDataLCDv+0x154>
     808:	2c 59       	subi	r18, 0x9C	; 156
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
     80c:	20 17       	cp	r18, r16
     80e:	31 07       	cpc	r19, r17
     810:	0c f4       	brge	.+2      	; 0x814 <_Z12printDataLCDv+0x154>
     812:	91 50       	subi	r25, 0x01	; 1
     814:	8a e0       	ldi	r24, 0x0A	; 10
     816:	8e 9d       	mul	r24, r14
     818:	f0 01       	movw	r30, r0
     81a:	8f 9d       	mul	r24, r15
     81c:	f0 0d       	add	r31, r0
     81e:	11 24       	eor	r1, r1
     820:	ed 57       	subi	r30, 0x7D	; 125
     822:	fc 4f       	sbci	r31, 0xFC	; 252
     824:	96 83       	std	Z+6, r25	; 0x06
     826:	84 e6       	ldi	r24, 0x64	; 100
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     82e:	6c 01       	movw	r12, r24
     830:	84 e6       	ldi	r24, 0x64	; 100
     832:	94 e0       	ldi	r25, 0x04	; 4
     834:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	38 2f       	mov	r19, r24
     83e:	c2 0e       	add	r12, r18
     840:	d3 1e       	adc	r13, r19
     842:	84 e6       	ldi	r24, 0x64	; 100
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     84a:	ec 01       	movw	r28, r24
     84c:	84 e6       	ldi	r24, 0x64	; 100
     84e:	94 e0       	ldi	r25, 0x04	; 4
     850:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	38 2f       	mov	r19, r24
     85a:	c2 0f       	add	r28, r18
     85c:	d3 1f       	adc	r29, r19
     85e:	84 e6       	ldi	r24, 0x64	; 100
     860:	94 e0       	ldi	r25, 0x04	; 4
     862:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     866:	84 e6       	ldi	r24, 0x64	; 100
     868:	94 e0       	ldi	r25, 0x04	; 4
     86a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     86e:	84 e6       	ldi	r24, 0x64	; 100
     870:	94 e0       	ldi	r25, 0x04	; 4
     872:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     876:	84 e6       	ldi	r24, 0x64	; 100
     878:	94 e0       	ldi	r25, 0x04	; 4
     87a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     87e:	84 e6       	ldi	r24, 0x64	; 100
     880:	94 e0       	ldi	r25, 0x04	; 4
     882:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     886:	84 e6       	ldi	r24, 0x64	; 100
     888:	94 e0       	ldi	r25, 0x04	; 4
     88a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     88e:	84 e6       	ldi	r24, 0x64	; 100
     890:	94 e0       	ldi	r25, 0x04	; 4
     892:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     896:	84 e6       	ldi	r24, 0x64	; 100
     898:	94 e0       	ldi	r25, 0x04	; 4
     89a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     89e:	84 e6       	ldi	r24, 0x64	; 100
     8a0:	94 e0       	ldi	r25, 0x04	; 4
     8a2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     8a6:	c1 14       	cp	r12, r1
     8a8:	94 e0       	ldi	r25, 0x04	; 4
     8aa:	d9 06       	cpc	r13, r25
     8ac:	2c f0       	brlt	.+10     	; 0x8b8 <_Z12printDataLCDv+0x1f8>
     8ae:	e4 e0       	ldi	r30, 0x04	; 4
     8b0:	de 1a       	sub	r13, r30
     8b2:	77 24       	eor	r7, r7
     8b4:	73 94       	inc	r7
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <_Z12printDataLCDv+0x1fa>
     8b8:	71 2c       	mov	r7, r1
     8ba:	c1 15       	cp	r28, r1
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	df 07       	cpc	r29, r31
     8c0:	24 f0       	brlt	.+8      	; 0x8ca <_Z12printDataLCDv+0x20a>
     8c2:	d4 50       	subi	r29, 0x04	; 4
     8c4:	aa 24       	eor	r10, r10
     8c6:	a3 94       	inc	r10
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <_Z12printDataLCDv+0x20c>
     8ca:	a1 2c       	mov	r10, r1
     8cc:	2a e0       	ldi	r18, 0x0A	; 10
     8ce:	2e 9d       	mul	r18, r14
     8d0:	c0 01       	movw	r24, r0
     8d2:	2f 9d       	mul	r18, r15
     8d4:	90 0d       	add	r25, r0
     8d6:	11 24       	eor	r1, r1
     8d8:	9c 01       	movw	r18, r24
     8da:	2d 57       	subi	r18, 0x7D	; 125
     8dc:	3c 4f       	sbci	r19, 0xFC	; 252
     8de:	49 01       	movw	r8, r18
     8e0:	f9 01       	movw	r30, r18
     8e2:	75 82       	std	Z+5, r7	; 0x05
     8e4:	14 83       	std	Z+4, r17	; 0x04
     8e6:	03 83       	std	Z+3, r16	; 0x03
     8e8:	d2 87       	std	Z+10, r29	; 0x0a
     8ea:	c1 87       	std	Z+9, r28	; 0x09
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	a7 01       	movw	r20, r14
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	84 e0       	ldi	r24, 0x04	; 4
     8f4:	0a dd       	rcall	.-1516   	; 0x30a <_Z8printLCDhhih>
     8f6:	f4 01       	movw	r30, r8
     8f8:	82 81       	ldd	r24, Z+2	; 0x02
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	29 f0       	breq	.+10     	; 0x908 <_Z12printDataLCDv+0x248>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	31 f0       	breq	.+12     	; 0x90e <_Z12printDataLCDv+0x24e>
     902:	6b e6       	ldi	r22, 0x6B	; 107
     904:	72 e0       	ldi	r23, 0x02	; 2
     906:	05 c0       	rjmp	.+10     	; 0x912 <_Z12printDataLCDv+0x252>
     908:	60 e7       	ldi	r22, 0x70	; 112
     90a:	72 e0       	ldi	r23, 0x02	; 2
     90c:	02 c0       	rjmp	.+4      	; 0x912 <_Z12printDataLCDv+0x252>
     90e:	65 e7       	ldi	r22, 0x75	; 117
     910:	72 e0       	ldi	r23, 0x02	; 2
     912:	82 e7       	ldi	r24, 0x72	; 114
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     91a:	b8 01       	movw	r22, r16
     91c:	01 2e       	mov	r0, r17
     91e:	00 0c       	add	r0, r0
     920:	88 0b       	sbc	r24, r24
     922:	99 0b       	sbc	r25, r25
     924:	1c d6       	rcall	.+3128   	; 0x155e <__floatsisf>
     926:	28 e5       	ldi	r18, 0x58	; 88
     928:	39 e3       	ldi	r19, 0x39	; 57
     92a:	44 eb       	ldi	r20, 0xB4	; 180
     92c:	5d e3       	ldi	r21, 0x3D	; 61
     92e:	c7 d6       	rcall	.+3470   	; 0x16be <__mulsf3>
     930:	e3 d5       	rcall	.+3014   	; 0x14f8 <__fixsfsi>
     932:	24 e0       	ldi	r18, 0x04	; 4
     934:	ab 01       	movw	r20, r22
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	e7 dc       	rcall	.-1586   	; 0x30a <_Z8printLCDhhih>
     93c:	6f ed       	ldi	r22, 0xDF	; 223
     93e:	82 e7       	ldi	r24, 0x72	; 114
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN5Print5printEc>
     946:	2a e0       	ldi	r18, 0x0A	; 10
     948:	2e 9d       	mul	r18, r14
     94a:	c0 01       	movw	r24, r0
     94c:	2f 9d       	mul	r18, r15
     94e:	90 0d       	add	r25, r0
     950:	11 24       	eor	r1, r1
     952:	9c 01       	movw	r18, r24
     954:	2d 57       	subi	r18, 0x7D	; 125
     956:	3c 4f       	sbci	r19, 0xFC	; 252
     958:	49 01       	movw	r8, r18
     95a:	f9 01       	movw	r30, r18
     95c:	46 81       	ldd	r20, Z+6	; 0x06
     95e:	04 2e       	mov	r0, r20
     960:	00 0c       	add	r0, r0
     962:	55 0b       	sbc	r21, r21
     964:	23 e0       	ldi	r18, 0x03	; 3
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	8b e0       	ldi	r24, 0x0B	; 11
     96a:	cf dc       	rcall	.-1634   	; 0x30a <_Z8printLCDhhih>
     96c:	69 e8       	ldi	r22, 0x89	; 137
     96e:	72 e0       	ldi	r23, 0x02	; 2
     970:	82 e7       	ldi	r24, 0x72	; 114
     972:	93 e0       	ldi	r25, 0x03	; 3
     974:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     978:	f4 01       	movw	r30, r8
     97a:	63 81       	ldd	r22, Z+3	; 0x03
     97c:	74 81       	ldd	r23, Z+4	; 0x04
     97e:	07 2e       	mov	r0, r23
     980:	00 0c       	add	r0, r0
     982:	88 0b       	sbc	r24, r24
     984:	99 0b       	sbc	r25, r25
     986:	eb d5       	rcall	.+3030   	; 0x155e <__floatsisf>
     988:	28 e5       	ldi	r18, 0x58	; 88
     98a:	39 e3       	ldi	r19, 0x39	; 57
     98c:	44 eb       	ldi	r20, 0xB4	; 180
     98e:	5d e3       	ldi	r21, 0x3D	; 61
     990:	96 d6       	rcall	.+3372   	; 0x16be <__mulsf3>
     992:	b2 d5       	rcall	.+2916   	; 0x14f8 <__fixsfsi>
     994:	24 e0       	ldi	r18, 0x04	; 4
     996:	ab 01       	movw	r20, r22
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	8f e0       	ldi	r24, 0x0F	; 15
     99c:	b6 dc       	rcall	.-1684   	; 0x30a <_Z8printLCDhhih>
     99e:	6f ed       	ldi	r22, 0xDF	; 223
     9a0:	82 e7       	ldi	r24, 0x72	; 114
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN5Print5printEc>
     9a8:	24 e0       	ldi	r18, 0x04	; 4
     9aa:	a6 01       	movw	r20, r12
     9ac:	62 e0       	ldi	r22, 0x02	; 2
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	ac dc       	rcall	.-1704   	; 0x30a <_Z8printLCDhhih>
     9b2:	71 10       	cpse	r7, r1
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <_Z12printDataLCDv+0x2fa>
     9b6:	6f e7       	ldi	r22, 0x7F	; 127
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <_Z12printDataLCDv+0x2fc>
     9ba:	6e e7       	ldi	r22, 0x7E	; 126
     9bc:	82 e7       	ldi	r24, 0x72	; 114
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN5Print5printEc>
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	8e 9d       	mul	r24, r14
     9c8:	f0 01       	movw	r30, r0
     9ca:	8f 9d       	mul	r24, r15
     9cc:	f0 0d       	add	r31, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	ed 57       	subi	r30, 0x7D	; 125
     9d2:	fc 4f       	sbci	r31, 0xFC	; 252
     9d4:	47 81       	ldd	r20, Z+7	; 0x07
     9d6:	50 85       	ldd	r21, Z+8	; 0x08
     9d8:	24 e0       	ldi	r18, 0x04	; 4
     9da:	62 e0       	ldi	r22, 0x02	; 2
     9dc:	89 e0       	ldi	r24, 0x09	; 9
     9de:	95 dc       	rcall	.-1750   	; 0x30a <_Z8printLCDhhih>
     9e0:	40 91 c3 03 	lds	r20, 0x03C3	; 0x8003c3 <lastButtonPressed>
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	24 e0       	ldi	r18, 0x04	; 4
     9e8:	62 e0       	ldi	r22, 0x02	; 2
     9ea:	8e e0       	ldi	r24, 0x0E	; 14
     9ec:	8e dc       	rcall	.-1764   	; 0x30a <_Z8printLCDhhih>
     9ee:	40 91 c3 03 	lds	r20, 0x03C3	; 0x8003c3 <lastButtonPressed>
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	24 e0       	ldi	r18, 0x04	; 4
     9f6:	62 e0       	ldi	r22, 0x02	; 2
     9f8:	8e e0       	ldi	r24, 0x0E	; 14
     9fa:	87 dc       	rcall	.-1778   	; 0x30a <_Z8printLCDhhih>
     9fc:	60 91 c2 03 	lds	r22, 0x03C2	; 0x8003c2 <buttonsFlip+0x2>
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	4a e0       	ldi	r20, 0x0A	; 10
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	82 e7       	ldi	r24, 0x72	; 114
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN5Print5printEii>
     a0e:	60 91 c1 03 	lds	r22, 0x03C1	; 0x8003c1 <buttonsFlip+0x1>
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	4a e0       	ldi	r20, 0x0A	; 10
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	82 e7       	ldi	r24, 0x72	; 114
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN5Print5printEii>
     a20:	24 e0       	ldi	r18, 0x04	; 4
     a22:	ae 01       	movw	r20, r28
     a24:	63 e0       	ldi	r22, 0x03	; 3
     a26:	84 e0       	ldi	r24, 0x04	; 4
     a28:	70 dc       	rcall	.-1824   	; 0x30a <_Z8printLCDhhih>
     a2a:	a1 10       	cpse	r10, r1
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <_Z12printDataLCDv+0x372>
     a2e:	6f e7       	ldi	r22, 0x7F	; 127
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <_Z12printDataLCDv+0x374>
     a32:	6e e7       	ldi	r22, 0x7E	; 126
     a34:	82 e7       	ldi	r24, 0x72	; 114
     a36:	93 e0       	ldi	r25, 0x03	; 3
     a38:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN5Print5printEc>
     a3c:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <servoID_old>
     a40:	b8 12       	cpse	r11, r24
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <_Z12printDataLCDv+0x38e>
     a44:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <currPos>
     a48:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <currPos+0x1>
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <_Z12printDataLCDv+0x392>
     a4e:	90 2f       	mov	r25, r16
     a50:	81 2f       	mov	r24, r17
     a52:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <currPos>
     a56:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <currPos+0x1>
     a5a:	b0 92 c6 03 	sts	0x03C6, r11	; 0x8003c6 <servoID_old>
     a5e:	84 e6       	ldi	r24, 0x64	; 100
     a60:	94 e0       	ldi	r25, 0x04	; 4
     a62:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_ZN14HardwareSerial9availableEv>
     a66:	18 16       	cp	r1, r24
     a68:	19 06       	cpc	r1, r25
     a6a:	2c f4       	brge	.+10     	; 0xa76 <_Z12printDataLCDv+0x3b6>
     a6c:	84 e6       	ldi	r24, 0x64	; 100
     a6e:	94 e0       	ldi	r25, 0x04	; 4
     a70:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     a74:	f4 cf       	rjmp	.-24     	; 0xa5e <_Z12printDataLCDv+0x39e>
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
     a82:	40 91 7e 03 	lds	r20, 0x037E	; 0x80037e <cycle_counter>
     a86:	50 91 7f 03 	lds	r21, 0x037F	; 0x80037f <cycle_counter+0x1>
     a8a:	48 3e       	cpi	r20, 0xE8	; 232
     a8c:	f3 e0       	ldi	r31, 0x03	; 3
     a8e:	5f 07       	cpc	r21, r31
     a90:	1c f4       	brge	.+6      	; 0xa98 <_Z12printDataLCDv+0x3d8>
     a92:	4f 5f       	subi	r20, 0xFF	; 255
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <_Z12printDataLCDv+0x3dc>
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	50 93 7f 03 	sts	0x037F, r21	; 0x80037f <cycle_counter+0x1>
     aa0:	40 93 7e 03 	sts	0x037E, r20	; 0x80037e <cycle_counter>
     aa4:	24 e0       	ldi	r18, 0x04	; 4
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	80 e1       	ldi	r24, 0x10	; 16
     aaa:	2f dc       	rcall	.-1954   	; 0x30a <_Z8printLCDhhih>
     aac:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <serialReading>
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	cf 90       	pop	r12
     ac0:	bf 90       	pop	r11
     ac2:	af 90       	pop	r10
     ac4:	9f 90       	pop	r9
     ac6:	8f 90       	pop	r8
     ac8:	7f 90       	pop	r7
     aca:	08 95       	ret

00000acc <_Z10writeServohhPhh>:
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	18 2f       	mov	r17, r24
     ada:	d6 2f       	mov	r29, r22
     adc:	7a 01       	movw	r14, r20
     ade:	02 2f       	mov	r16, r18
     ae0:	c6 e0       	ldi	r28, 0x06	; 6
     ae2:	c6 0f       	add	r28, r22
     ae4:	c2 0f       	add	r28, r18
     ae6:	62 2f       	mov	r22, r18
     ae8:	ca 01       	movw	r24, r20
     aea:	83 dd       	rcall	.-1274   	; 0x5f2 <_Z8sumBytesPhh>
     aec:	c1 0f       	add	r28, r17
     aee:	8c 0f       	add	r24, r28
     af0:	c8 2f       	mov	r28, r24
     af2:	c0 95       	com	r28
     af4:	84 e6       	ldi	r24, 0x64	; 100
     af6:	94 e0       	ldi	r25, 0x04	; 4
     af8:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_ZN14HardwareSerial9availableEv>
     afc:	89 2b       	or	r24, r25
     afe:	29 f0       	breq	.+10     	; 0xb0a <_Z10writeServohhPhh+0x3e>
     b00:	84 e6       	ldi	r24, 0x64	; 100
     b02:	94 e0       	ldi	r25, 0x04	; 4
     b04:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial4readEv>
     b08:	f5 cf       	rjmp	.-22     	; 0xaf4 <_Z10writeServohhPhh+0x28>
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <digitalWrite>
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	83 e0       	ldi	r24, 0x03	; 3
     b16:	0e 94 f6 12 	call	0x25ec	; 0x25ec <digitalWrite>
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	84 e6       	ldi	r24, 0x64	; 100
     b2c:	94 e0       	ldi	r25, 0x04	; 4
     b2e:	e6 db       	rcall	.-2100   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     b30:	6f ef       	ldi	r22, 0xFF	; 255
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	84 e6       	ldi	r24, 0x64	; 100
     b36:	94 e0       	ldi	r25, 0x04	; 4
     b38:	e1 db       	rcall	.-2110   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     b3a:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <serialWriting>
     b3e:	88 23       	and	r24, r24
     b40:	39 f0       	breq	.+14     	; 0xb50 <_Z10writeServohhPhh+0x84>
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
     b4e:	f5 cf       	rjmp	.-22     	; 0xb3a <_Z10writeServohhPhh+0x6e>
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <serialWriting>
     b56:	61 2f       	mov	r22, r17
     b58:	84 e6       	ldi	r24, 0x64	; 100
     b5a:	94 e0       	ldi	r25, 0x04	; 4
     b5c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN14HardwareSerial5writeEh>
     b60:	10 e0       	ldi	r17, 0x00	; 0
     b62:	b8 01       	movw	r22, r16
     b64:	6d 5f       	subi	r22, 0xFD	; 253
     b66:	7f 4f       	sbci	r23, 0xFF	; 255
     b68:	84 e6       	ldi	r24, 0x64	; 100
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	c7 db       	rcall	.-2162   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     b6e:	63 e0       	ldi	r22, 0x03	; 3
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	84 e6       	ldi	r24, 0x64	; 100
     b74:	94 e0       	ldi	r25, 0x04	; 4
     b76:	c2 db       	rcall	.-2172   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     b78:	6d 2f       	mov	r22, r29
     b7a:	84 e6       	ldi	r24, 0x64	; 100
     b7c:	94 e0       	ldi	r25, 0x04	; 4
     b7e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN14HardwareSerial5writeEh>
     b82:	a8 01       	movw	r20, r16
     b84:	b7 01       	movw	r22, r14
     b86:	84 e6       	ldi	r24, 0x64	; 100
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN5Print5writeEPKhj>
     b8e:	6c 2f       	mov	r22, r28
     b90:	84 e6       	ldi	r24, 0x64	; 100
     b92:	94 e0       	ldi	r25, 0x04	; 4
     b94:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN14HardwareSerial5writeEh>
     b98:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <serialWriting>
     b9c:	84 e6       	ldi	r24, 0x64	; 100
     b9e:	94 e0       	ldi	r25, 0x04	; 4
     ba0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN14HardwareSerial5flushEv>
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	0e 94 f6 12 	call	0x25ec	; 0x25ec <digitalWrite>
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <digitalWrite>
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	0c 94 bf 11 	jmp	0x237e	; 0x237e <delay>

00000bcc <_Z9moveSpeedhii>:
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	00 d0       	rcall	.+0      	; 0xbdc <_Z9moveSpeedhii+0x10>
     bdc:	1f 92       	push	r1
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	18 2f       	mov	r17, r24
     be4:	d4 2e       	mov	r13, r20
     be6:	e5 2e       	mov	r14, r21
     be8:	32 dc       	rcall	.-1948   	; 0x44e <_Z13checkPositionhi>
     bea:	f8 2e       	mov	r15, r24
     bec:	09 2f       	mov	r16, r25
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	db 82       	std	Y+3, r13	; 0x03
     bf4:	ec 82       	std	Y+4, r14	; 0x04
     bf6:	24 e0       	ldi	r18, 0x04	; 4
     bf8:	ae 01       	movw	r20, r28
     bfa:	4f 5f       	subi	r20, 0xFF	; 255
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
     bfe:	6e e1       	ldi	r22, 0x1E	; 30
     c00:	81 2f       	mov	r24, r17
     c02:	64 df       	rcall	.-312    	; 0xacc <_Z10writeServohhPhh>
     c04:	f0 92 c4 03 	sts	0x03C4, r15	; 0x8003c4 <currPos>
     c08:	00 93 c5 03 	sts	0x03C5, r16	; 0x8003c5 <currPos+0x1>
     c0c:	8a e0       	ldi	r24, 0x0A	; 10
     c0e:	18 9f       	mul	r17, r24
     c10:	f0 01       	movw	r30, r0
     c12:	11 24       	eor	r1, r1
     c14:	ed 57       	subi	r30, 0x7D	; 125
     c16:	fc 4f       	sbci	r31, 0xFC	; 252
     c18:	f3 82       	std	Z+3, r15	; 0x03
     c1a:	04 83       	std	Z+4, r16	; 0x04
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	08 95       	ret

00000c34 <_Z14setTorqueLimithi>:
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	1f 92       	push	r1
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	69 83       	std	Y+1, r22	; 0x01
     c42:	7a 83       	std	Y+2, r23	; 0x02
     c44:	22 e0       	ldi	r18, 0x02	; 2
     c46:	ae 01       	movw	r20, r28
     c48:	4f 5f       	subi	r20, 0xFF	; 255
     c4a:	5f 4f       	sbci	r21, 0xFF	; 255
     c4c:	62 e2       	ldi	r22, 0x22	; 34
     c4e:	3e df       	rcall	.-388    	; 0xacc <_Z10writeServohhPhh>
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <_Z7setModehh>:
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	00 d0       	rcall	.+0      	; 0xc64 <_Z7setModehh+0xa>
     c64:	1f 92       	push	r1
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	18 2f       	mov	r17, r24
     c6c:	06 2f       	mov	r16, r22
     c6e:	61 30       	cpi	r22, 0x01	; 1
     c70:	29 f4       	brne	.+10     	; 0xc7c <_Z7setModehh+0x22>
     c72:	19 82       	std	Y+1, r1	; 0x01
     c74:	1a 82       	std	Y+2, r1	; 0x02
     c76:	1b 82       	std	Y+3, r1	; 0x03
     c78:	1c 82       	std	Y+4, r1	; 0x04
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <_Z7setModehh+0x32>
     c7c:	62 30       	cpi	r22, 0x02	; 2
     c7e:	81 f4       	brne	.+32     	; 0xca0 <_Z7setModehh+0x46>
     c80:	9f ef       	ldi	r25, 0xFF	; 255
     c82:	99 83       	std	Y+1, r25	; 0x01
     c84:	8f e0       	ldi	r24, 0x0F	; 15
     c86:	8a 83       	std	Y+2, r24	; 0x02
     c88:	9b 83       	std	Y+3, r25	; 0x03
     c8a:	8c 83       	std	Y+4, r24	; 0x04
     c8c:	24 e0       	ldi	r18, 0x04	; 4
     c8e:	ae 01       	movw	r20, r28
     c90:	4f 5f       	subi	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	66 e0       	ldi	r22, 0x06	; 6
     c96:	81 2f       	mov	r24, r17
     c98:	19 df       	rcall	.-462    	; 0xacc <_Z10writeServohhPhh>
     c9a:	16 30       	cpi	r17, 0x06	; 6
     c9c:	a0 f0       	brcs	.+40     	; 0xcc6 <_Z7setModehh+0x6c>
     c9e:	1a c0       	rjmp	.+52     	; 0xcd4 <_Z7setModehh+0x7a>
     ca0:	84 ee       	ldi	r24, 0xE4	; 228
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	8a 83       	std	Y+2, r24	; 0x02
     ca8:	84 ea       	ldi	r24, 0xA4	; 164
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	8c 83       	std	Y+4, r24	; 0x04
     cb0:	24 e0       	ldi	r18, 0x04	; 4
     cb2:	ae 01       	movw	r20, r28
     cb4:	4f 5f       	subi	r20, 0xFF	; 255
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	66 e0       	ldi	r22, 0x06	; 6
     cba:	81 2f       	mov	r24, r17
     cbc:	07 df       	rcall	.-498    	; 0xacc <_Z10writeServohhPhh>
     cbe:	16 30       	cpi	r17, 0x06	; 6
     cc0:	48 f4       	brcc	.+18     	; 0xcd4 <_Z7setModehh+0x7a>
     cc2:	03 30       	cpi	r16, 0x03	; 3
     cc4:	38 f4       	brcc	.+14     	; 0xcd4 <_Z7setModehh+0x7a>
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	18 9f       	mul	r17, r24
     cca:	f0 01       	movw	r30, r0
     ccc:	11 24       	eor	r1, r1
     cce:	ed 57       	subi	r30, 0x7D	; 125
     cd0:	fc 4f       	sbci	r31, 0xFC	; 252
     cd2:	02 83       	std	Z+2, r16	; 0x02
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <_Z12setModeWheelh>:
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	b8 cf       	rjmp	.-144    	; 0xc5a <_Z7setModehh>

00000cea <_Z12setModeJointh>:
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	b6 cf       	rjmp	.-148    	; 0xc5a <_Z7setModehh>

00000cee <_Z16setModeMultiTurnh>:
     cee:	62 e0       	ldi	r22, 0x02	; 2
     cf0:	b4 cf       	rjmp	.-152    	; 0xc5a <_Z7setModehh>

00000cf2 <__vector_9>:
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	0b b6       	in	r0, 0x3b	; 59
     cfe:	0f 92       	push	r0
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	cf 93       	push	r28
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
     d22:	c0 91 83 03 	lds	r28, 0x0383	; 0x800383 <arm>
     d26:	18 9b       	sbis	0x03, 0	; 3
     d28:	38 c0       	rjmp	.+112    	; 0xd9a <__vector_9+0xa8>
     d2a:	2f 9a       	sbi	0x05, 7	; 5
     d2c:	8a e0       	ldi	r24, 0x0A	; 10
     d2e:	c8 9f       	mul	r28, r24
     d30:	80 01       	movw	r16, r0
     d32:	11 24       	eor	r1, r1
     d34:	0d 57       	subi	r16, 0x7D	; 125
     d36:	1c 4f       	sbci	r17, 0xFC	; 252
     d38:	78 01       	movw	r14, r16
     d3a:	e3 e0       	ldi	r30, 0x03	; 3
     d3c:	ee 0e       	add	r14, r30
     d3e:	f1 1c       	adc	r15, r1
     d40:	09 5f       	subi	r16, 0xF9	; 249
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	18 9b       	sbis	0x03, 0	; 3
     d46:	20 c0       	rjmp	.+64     	; 0xd88 <__vector_9+0x96>
     d48:	f7 01       	movw	r30, r14
     d4a:	60 81       	ld	r22, Z
     d4c:	71 81       	ldd	r23, Z+1	; 0x01
     d4e:	61 50       	subi	r22, 0x01	; 1
     d50:	71 09       	sbc	r23, r1
     d52:	71 83       	std	Z+1, r23	; 0x01
     d54:	60 83       	st	Z, r22
     d56:	c3 30       	cpi	r28, 0x03	; 3
     d58:	40 f4       	brcc	.+16     	; 0xd6a <__vector_9+0x78>
     d5a:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <lastButtonPressed>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	21 f4       	brne	.+8      	; 0xd6a <__vector_9+0x78>
     d62:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <buttonsFlip+0x1>
     d66:	81 11       	cpse	r24, r1
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <__vector_9+0x80>
     d6a:	f8 01       	movw	r30, r16
     d6c:	40 81       	ld	r20, Z
     d6e:	51 81       	ldd	r21, Z+1	; 0x01
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <__vector_9+0x84>
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	8c 2f       	mov	r24, r28
     d78:	29 df       	rcall	.-430    	; 0xbcc <_Z9moveSpeedhii>
     d7a:	68 ec       	ldi	r22, 0xC8	; 200
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
     d86:	de cf       	rjmp	.-68     	; 0xd44 <__vector_9+0x52>
     d88:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <buttonsFlip+0x1>
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	89 27       	eor	r24, r25
     d90:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <buttonsFlip+0x1>
     d94:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <lastButtonPressed>
     d98:	2f 98       	cbi	0x05, 7	; 5
     d9a:	19 9b       	sbis	0x03, 1	; 3
     d9c:	3e c0       	rjmp	.+124    	; 0xe1a <__vector_9+0x128>
     d9e:	2f 9a       	sbi	0x05, 7	; 5
     da0:	fa e0       	ldi	r31, 0x0A	; 10
     da2:	cf 9f       	mul	r28, r31
     da4:	80 01       	movw	r16, r0
     da6:	11 24       	eor	r1, r1
     da8:	0d 57       	subi	r16, 0x7D	; 125
     daa:	1c 4f       	sbci	r17, 0xFC	; 252
     dac:	78 01       	movw	r14, r16
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	e8 0e       	add	r14, r24
     db2:	f1 1c       	adc	r15, r1
     db4:	09 5f       	subi	r16, 0xF9	; 249
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	19 9b       	sbis	0x03, 1	; 3
     dba:	25 c0       	rjmp	.+74     	; 0xe06 <__vector_9+0x114>
     dbc:	f7 01       	movw	r30, r14
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	6f 5f       	subi	r22, 0xFF	; 255
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	71 83       	std	Z+1, r23	; 0x01
     dc8:	60 83       	st	Z, r22
     dca:	c3 30       	cpi	r28, 0x03	; 3
     dcc:	68 f4       	brcc	.+26     	; 0xde8 <__vector_9+0xf6>
     dce:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <lastButtonPressed>
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	21 f4       	brne	.+8      	; 0xdde <__vector_9+0xec>
     dd6:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <buttonsFlip+0x2>
     dda:	81 11       	cpse	r24, r1
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <__vector_9+0xfe>
     dde:	f8 01       	movw	r30, r16
     de0:	40 81       	ld	r20, Z
     de2:	51 81       	ldd	r21, Z+1	; 0x01
     de4:	5c 5f       	subi	r21, 0xFC	; 252
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <__vector_9+0x102>
     de8:	f8 01       	movw	r30, r16
     dea:	40 81       	ld	r20, Z
     dec:	51 81       	ldd	r21, Z+1	; 0x01
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <__vector_9+0x102>
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	54 e0       	ldi	r21, 0x04	; 4
     df4:	8c 2f       	mov	r24, r28
     df6:	ea de       	rcall	.-556    	; 0xbcc <_Z9moveSpeedhii>
     df8:	68 ec       	ldi	r22, 0xC8	; 200
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
     e04:	d9 cf       	rjmp	.-78     	; 0xdb8 <__vector_9+0xc6>
     e06:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <buttonsFlip+0x2>
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	89 27       	eor	r24, r25
     e0e:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <buttonsFlip+0x2>
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <lastButtonPressed>
     e18:	2f 98       	cbi	0x05, 7	; 5
     e1a:	1a 9b       	sbis	0x03, 2	; 3
     e1c:	37 c0       	rjmp	.+110    	; 0xe8c <__vector_9+0x19a>
     e1e:	1f 9a       	sbi	0x03, 7	; 3
     e20:	64 e1       	ldi	r22, 0x14	; 20
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
     e2c:	1a 9b       	sbis	0x03, 2	; 3
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <__vector_9+0x148>
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	f7 cf       	rjmp	.-18     	; 0xe28 <__vector_9+0x136>
     e3a:	c3 30       	cpi	r28, 0x03	; 3
     e3c:	68 f4       	brcc	.+26     	; 0xe58 <__vector_9+0x166>
     e3e:	8a e0       	ldi	r24, 0x0A	; 10
     e40:	c8 9f       	mul	r28, r24
     e42:	f0 01       	movw	r30, r0
     e44:	11 24       	eor	r1, r1
     e46:	ed 57       	subi	r30, 0x7D	; 125
     e48:	fc 4f       	sbci	r31, 0xFC	; 252
     e4a:	63 81       	ldd	r22, Z+3	; 0x03
     e4c:	74 81       	ldd	r23, Z+4	; 0x04
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	8c 2f       	mov	r24, r28
     e54:	bb de       	rcall	.-650    	; 0xbcc <_Z9moveSpeedhii>
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <__vector_9+0x16a>
     e58:	c5 30       	cpi	r28, 0x05	; 5
     e5a:	18 f4       	brcc	.+6      	; 0xe62 <__vector_9+0x170>
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	8c 0f       	add	r24, r28
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <__vector_9+0x172>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <arm>
     e68:	84 30       	cpi	r24, 0x04	; 4
     e6a:	10 f0       	brcs	.+4      	; 0xe70 <__vector_9+0x17e>
     e6c:	3e df       	rcall	.-388    	; 0xcea <_Z12setModeJointh>
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <__vector_9+0x188>
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	11 f4       	brne	.+4      	; 0xe78 <__vector_9+0x186>
     e74:	3c df       	rcall	.-392    	; 0xcee <_Z16setModeMultiTurnh>
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <__vector_9+0x188>
     e78:	36 df       	rcall	.-404    	; 0xce6 <_Z12setModeWheelh>
     e7a:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <lastButtonPressed>
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	89 27       	eor	r24, r25
     e82:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <lastButtonPressed>
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <lastButtonPressed>
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	cf 91       	pop	r28
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	0f 90       	pop	r0
     eb0:	0b be       	out	0x3b, r0	; 59
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <_Z9readServohhh>:
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	08 2f       	mov	r16, r24
     ec6:	16 2f       	mov	r17, r22
     ec8:	d4 2f       	mov	r29, r20
     eca:	c6 e0       	ldi	r28, 0x06	; 6
     ecc:	c4 0f       	add	r28, r20
     ece:	c6 0f       	add	r28, r22
     ed0:	c8 0f       	add	r28, r24
     ed2:	c0 95       	com	r28
     ed4:	84 e6       	ldi	r24, 0x64	; 100
     ed6:	94 e0       	ldi	r25, 0x04	; 4
     ed8:	22 d6       	rcall	.+3140   	; 0x1b1e <_ZN14HardwareSerial9availableEv>
     eda:	89 2b       	or	r24, r25
     edc:	21 f0       	breq	.+8      	; 0xee6 <_Z9readServohhh+0x2a>
     ede:	84 e6       	ldi	r24, 0x64	; 100
     ee0:	94 e0       	ldi	r25, 0x04	; 4
     ee2:	37 d6       	rcall	.+3182   	; 0x1b52 <_ZN14HardwareSerial4readEv>
     ee4:	f7 cf       	rjmp	.-18     	; 0xed4 <_Z9readServohhh+0x18>
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	0e 94 f6 12 	call	0x25ec	; 0x25ec <digitalWrite>
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	0e 94 f6 12 	call	0x25ec	; 0x25ec <digitalWrite>
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
     f02:	6f ef       	ldi	r22, 0xFF	; 255
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	84 e6       	ldi	r24, 0x64	; 100
     f08:	94 e0       	ldi	r25, 0x04	; 4
     f0a:	f8 d9       	rcall	.-3088   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     f0c:	6f ef       	ldi	r22, 0xFF	; 255
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	84 e6       	ldi	r24, 0x64	; 100
     f12:	94 e0       	ldi	r25, 0x04	; 4
     f14:	f3 d9       	rcall	.-3098   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <serialWriting>
     f1c:	60 2f       	mov	r22, r16
     f1e:	84 e6       	ldi	r24, 0x64	; 100
     f20:	94 e0       	ldi	r25, 0x04	; 4
     f22:	97 d6       	rcall	.+3374   	; 0x1c52 <_ZN14HardwareSerial5writeEh>
     f24:	64 e0       	ldi	r22, 0x04	; 4
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	84 e6       	ldi	r24, 0x64	; 100
     f2a:	94 e0       	ldi	r25, 0x04	; 4
     f2c:	e7 d9       	rcall	.-3122   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     f2e:	62 e0       	ldi	r22, 0x02	; 2
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	84 e6       	ldi	r24, 0x64	; 100
     f34:	94 e0       	ldi	r25, 0x04	; 4
     f36:	e2 d9       	rcall	.-3132   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     f38:	61 2f       	mov	r22, r17
     f3a:	84 e6       	ldi	r24, 0x64	; 100
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	89 d6       	rcall	.+3346   	; 0x1c52 <_ZN14HardwareSerial5writeEh>
     f40:	6d 2f       	mov	r22, r29
     f42:	84 e6       	ldi	r24, 0x64	; 100
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	85 d6       	rcall	.+3338   	; 0x1c52 <_ZN14HardwareSerial5writeEh>
     f48:	6c 2f       	mov	r22, r28
     f4a:	84 e6       	ldi	r24, 0x64	; 100
     f4c:	94 e0       	ldi	r25, 0x04	; 4
     f4e:	81 d6       	rcall	.+3330   	; 0x1c52 <_ZN14HardwareSerial5writeEh>
     f50:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <serialWriting>
     f54:	84 e6       	ldi	r24, 0x64	; 100
     f56:	94 e0       	ldi	r25, 0x04	; 4
     f58:	c8 d6       	rcall	.+3472   	; 0x1cea <_ZN14HardwareSerial5flushEv>
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <digitalWrite>
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	0e 94 f6 12 	call	0x25ec	; 0x25ec <digitalWrite>
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	0c 94 bf 11 	jmp	0x237e	; 0x237e <delay>

00000f7e <_Z7getDatahh>:

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData) {
     f7e:	4f 92       	push	r4
     f80:	5f 92       	push	r5
     f82:	6f 92       	push	r6
     f84:	7f 92       	push	r7
     f86:	8f 92       	push	r8
     f88:	9f 92       	push	r9
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <_Z7getDatahh+0x22>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <_Z7getDatahh+0x24>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	
	readServo(id, ctrlData, 2);
     fa6:	42 e0       	ldi	r20, 0x02	; 2
     fa8:	89 df       	rcall	.-238    	; 0xebc <_Z9readServohhh>
	delay(10);
     faa:	6a e0       	ldi	r22, 0x0A	; 10
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 bf 11 	call	0x237e	; 0x237e <delay>
	serialReading = YES;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <serialReading>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
     fbc:	84 e6       	ldi	r24, 0x64	; 100
     fbe:	94 e0       	ldi	r25, 0x04	; 4
     fc0:	c8 d5       	rcall	.+2960   	; 0x1b52 <_ZN14HardwareSerial4readEv>
     fc2:	f8 2e       	mov	r15, r24
	//Serial1.availableForWrite();
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
     fc4:	84 e6       	ldi	r24, 0x64	; 100
     fc6:	94 e0       	ldi	r25, 0x04	; 4
     fc8:	c4 d5       	rcall	.+2952   	; 0x1b52 <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
     fca:	9f ef       	ldi	r25, 0xFF	; 255
     fcc:	f9 12       	cpse	r15, r25
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <_Z7getDatahh+0x5a>
     fd0:	ff 24       	eor	r15, r15
     fd2:	f3 94       	inc	r15
     fd4:	8f 3f       	cpi	r24, 0xFF	; 255
     fd6:	09 f0       	breq	.+2      	; 0xfda <_Z7getDatahh+0x5c>
     fd8:	f1 2c       	mov	r15, r1
	Serial.print("## Start 01: ");
     fda:	6f e8       	ldi	r22, 0x8F	; 143
     fdc:	72 e0       	ldi	r23, 0x02	; 2
     fde:	87 ec       	ldi	r24, 0xC7	; 199
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     fe6:	84 e6       	ldi	r24, 0x64	; 100
     fe8:	94 e0       	ldi	r25, 0x04	; 4
     fea:	99 d5       	rcall	.+2866   	; 0x1b1e <_ZN14HardwareSerial9availableEv>
     fec:	4a e0       	ldi	r20, 0x0A	; 10
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	bc 01       	movw	r22, r24
     ff2:	87 ec       	ldi	r24, 0xC7	; 199
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN5Print5printEii>
	Serial.println(" ####################");
     ffa:	65 e3       	ldi	r22, 0x35	; 53
     ffc:	72 e0       	ldi	r23, 0x02	; 2
     ffe:	87 ec       	ldi	r24, 0xC7	; 199
    1000:	93 e0       	ldi	r25, 0x03	; 3
    1002:	0e 94 8c 10 	call	0x2118	; 0x2118 <_ZN5Print7printlnEPKc>
	if (msgStarted) {
    1006:	ff 20       	and	r15, r15
    1008:	09 f4       	brne	.+2      	; 0x100c <_Z7getDatahh+0x8e>
		msgId = Serial1.read();
    100a:	9e c0       	rjmp	.+316    	; 0x1148 <_Z7getDatahh+0x1ca>
    100c:	84 e6       	ldi	r24, 0x64	; 100
    100e:	94 e0       	ldi	r25, 0x04	; 4
    1010:	a0 d5       	rcall	.+2880   	; 0x1b52 <_ZN14HardwareSerial4readEv>
    1012:	3c 01       	movw	r6, r24
		printSerial("Servo ID   ", msgId);
    1014:	6d e9       	ldi	r22, 0x9D	; 157
    1016:	72 e0       	ldi	r23, 0x02	; 2
    1018:	ce 01       	movw	r24, r28
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    1020:	b3 01       	movw	r22, r6
    1022:	77 27       	eor	r23, r23
    1024:	ce 01       	movw	r24, r28
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	3c da       	rcall	.-2952   	; 0x4a2 <_Z11printSerial6Stringi>
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		msgLength = Serial1.read();
    1032:	84 e6       	ldi	r24, 0x64	; 100
    1034:	94 e0       	ldi	r25, 0x04	; 4
    1036:	8d d5       	rcall	.+2842   	; 0x1b52 <_ZN14HardwareSerial4readEv>
    1038:	4c 01       	movw	r8, r24
		printSerial("Msg Length ", msgLength);
    103a:	69 ea       	ldi	r22, 0xA9	; 169
    103c:	72 e0       	ldi	r23, 0x02	; 2
    103e:	ce 01       	movw	r24, r28
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    1046:	b4 01       	movw	r22, r8
    1048:	77 27       	eor	r23, r23
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	29 da       	rcall	.-2990   	; 0x4a2 <_Z11printSerial6Stringi>
    1050:	ce 01       	movw	r24, r28
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		msgError = Serial1.read();
    1058:	84 e6       	ldi	r24, 0x64	; 100
    105a:	94 e0       	ldi	r25, 0x04	; 4
    105c:	7a d5       	rcall	.+2804   	; 0x1b52 <_ZN14HardwareSerial4readEv>
    105e:	6c 01       	movw	r12, r24
    1060:	98 2e       	mov	r9, r24
		printSerial("Msg Error  ", msgError);
    1062:	65 eb       	ldi	r22, 0xB5	; 181
    1064:	72 e0       	ldi	r23, 0x02	; 2
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    106e:	b6 01       	movw	r22, r12
    1070:	77 27       	eor	r23, r23
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	15 da       	rcall	.-3030   	; 0x4a2 <_Z11printSerial6Stringi>
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		msgData_1 = Serial1.read();
    1080:	84 e6       	ldi	r24, 0x64	; 100
    1082:	94 e0       	ldi	r25, 0x04	; 4
    1084:	66 d5       	rcall	.+2764   	; 0x1b52 <_ZN14HardwareSerial4readEv>
    1086:	5c 01       	movw	r10, r24
    1088:	2c 01       	movw	r4, r24
		printSerial("Msg Data L ", msgData_1);
    108a:	55 24       	eor	r5, r5
    108c:	61 ec       	ldi	r22, 0xC1	; 193
    108e:	72 e0       	ldi	r23, 0x02	; 2
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    1098:	b2 01       	movw	r22, r4
    109a:	ce 01       	movw	r24, r28
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	01 da       	rcall	.-3070   	; 0x4a2 <_Z11printSerial6Stringi>
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		msgData_2 = Serial1.read();
    10a8:	84 e6       	ldi	r24, 0x64	; 100
    10aa:	94 e0       	ldi	r25, 0x04	; 4
    10ac:	52 d5       	rcall	.+2724   	; 0x1b52 <_ZN14HardwareSerial4readEv>
    10ae:	7c 01       	movw	r14, r24
    10b0:	8c 01       	movw	r16, r24
		printSerial("Msg Data H ", msgData_2);
    10b2:	11 27       	eor	r17, r17
    10b4:	6d ec       	ldi	r22, 0xCD	; 205
    10b6:	72 e0       	ldi	r23, 0x02	; 2
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    10c0:	b8 01       	movw	r22, r16
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	ed d9       	rcall	.-3110   	; 0x4a2 <_Z11printSerial6Stringi>
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		msgData = msgData_1 + (msgData_2<<8);
    10d0:	10 2f       	mov	r17, r16
    10d2:	00 27       	eor	r16, r16
    10d4:	04 0d       	add	r16, r4
		printSerial("Msg Data   ", msgData);
    10d6:	15 1d       	adc	r17, r5
    10d8:	69 ed       	ldi	r22, 0xD9	; 217
    10da:	72 e0       	ldi	r23, 0x02	; 2
    10dc:	ce 01       	movw	r24, r28
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    10e4:	b8 01       	movw	r22, r16
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	db d9       	rcall	.-3146   	; 0x4a2 <_Z11printSerial6Stringi>
    10ec:	ce 01       	movw	r24, r28
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		msgChecksum = Serial1.read();
    10f4:	84 e6       	ldi	r24, 0x64	; 100
    10f6:	94 e0       	ldi	r25, 0x04	; 4
    10f8:	2c d5       	rcall	.+2648   	; 0x1b52 <_ZN14HardwareSerial4readEv>
    10fa:	2c 01       	movw	r4, r24
		printSerial("Checksum   ", msgChecksum);
    10fc:	65 ee       	ldi	r22, 0xE5	; 229
    10fe:	72 e0       	ldi	r23, 0x02	; 2
    1100:	ce 01       	movw	r24, r28
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    1108:	b2 01       	movw	r22, r4
    110a:	77 27       	eor	r23, r23
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	c8 d9       	rcall	.-3184   	; 0x4a2 <_Z11printSerial6Stringi>
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
    111a:	86 0c       	add	r8, r6
    111c:	c8 0c       	add	r12, r8
    111e:	ca 0c       	add	r12, r10
    1120:	ec 0c       	add	r14, r12
    1122:	e0 94       	com	r14
		printSerial("Checksum~  ", Checksum);
    1124:	61 ef       	ldi	r22, 0xF1	; 241
    1126:	72 e0       	ldi	r23, 0x02	; 2
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    1130:	6e 2d       	mov	r22, r14
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	ce 01       	movw	r24, r28
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	b4 d9       	rcall	.-3224   	; 0x4a2 <_Z11printSerial6Stringi>
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
    1142:	ff 24       	eor	r15, r15
    1144:	f3 94       	inc	r15
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData) {
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
    1146:	e4 10       	cpse	r14, r4
		printSerial("Checksum   ", msgChecksum);
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		printSerial("Checksum~  ", Checksum);
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
    1148:	f1 2c       	mov	r15, r1
    114a:	84 e6       	ldi	r24, 0x64	; 100
    114c:	94 e0       	ldi	r25, 0x04	; 4
    114e:	e7 d4       	rcall	.+2510   	; 0x1b1e <_ZN14HardwareSerial9availableEv>
    1150:	89 2b       	or	r24, r25
    1152:	21 f0       	breq	.+8      	; 0x115c <_Z7getDatahh+0x1de>
    1154:	84 e6       	ldi	r24, 0x64	; 100
    1156:	94 e0       	ldi	r25, 0x04	; 4
    1158:	fc d4       	rcall	.+2552   	; 0x1b52 <_ZN14HardwareSerial4readEv>
    115a:	f7 cf       	rjmp	.-18     	; 0x114a <_Z7getDatahh+0x1cc>
    115c:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <serialReading>
	serialReading = NO;
    1160:	ff 20       	and	r15, r15
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
    1162:	41 f0       	breq	.+16     	; 0x1174 <_Z7getDatahh+0x1f6>
    1164:	99 20       	and	r9, r9
    1166:	49 f0       	breq	.+18     	; 0x117a <_Z7getDatahh+0x1fc>
    1168:	89 2d       	mov	r24, r9
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	91 95       	neg	r25
    116e:	81 95       	neg	r24
    1170:	91 09       	sbc	r25, r1
    1172:	04 c0       	rjmp	.+8      	; 0x117c <_Z7getDatahh+0x1fe>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	01 c0       	rjmp	.+2      	; 0x117c <_Z7getDatahh+0x1fe>
    117a:	c8 01       	movw	r24, r16
    117c:	26 96       	adiw	r28, 0x06	; 6
}
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	bf 90       	pop	r11
    119a:	af 90       	pop	r10
    119c:	9f 90       	pop	r9
    119e:	8f 90       	pop	r8
    11a0:	7f 90       	pop	r7
    11a2:	6f 90       	pop	r6
    11a4:	5f 90       	pop	r5
    11a6:	4f 90       	pop	r4
    11a8:	08 95       	ret

000011aa <loop>:
    11aa:	0f 93       	push	r16
}

/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <loop+0xa>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <loop+0xc>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62

	readServo(arm.id, 0x24, 34);
    11ba:	42 e2       	ldi	r20, 0x22	; 34
    11bc:	64 e2       	ldi	r22, 0x24	; 36
    11be:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <arm>
    11c2:	7c de       	rcall	.-776    	; 0xebc <_Z9readServohhh>
	printDataLCD();
    11c4:	7d da       	rcall	.-2822   	; 0x6c0 <_Z12printDataLCDv>
    11c6:	68 e2       	ldi	r22, 0x28	; 40
	int new_reading;
	new_reading = getData(4, MX_PRESENT_LOAD_L);
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	d9 de       	rcall	.-590    	; 0xf7e <_Z7getDatahh>
    11cc:	18 16       	cp	r1, r24
	load_4 = new_reading > 0 ? new_reading : load_4; 
    11ce:	19 06       	cpc	r1, r25
    11d0:	1c f4       	brge	.+6      	; 0x11d8 <loop+0x2e>
    11d2:	28 2f       	mov	r18, r24
    11d4:	89 2f       	mov	r24, r25
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <loop+0x36>
    11d8:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <load_4>
    11dc:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <load_4+0x1>
    11e0:	20 93 6e 03 	sts	0x036E, r18	; 0x80036e <load_4>
    11e4:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <load_4+0x1>
	new_reading = getData(5, MX_PRESENT_LOAD_L);
    11e8:	68 e2       	ldi	r22, 0x28	; 40
    11ea:	85 e0       	ldi	r24, 0x05	; 5
    11ec:	c8 de       	rcall	.-624    	; 0xf7e <_Z7getDatahh>
    11ee:	18 16       	cp	r1, r24
	load_5 = new_reading > 0 ? new_reading : load_5; 
    11f0:	19 06       	cpc	r1, r25
    11f2:	1c f4       	brge	.+6      	; 0x11fa <loop+0x50>
    11f4:	28 2f       	mov	r18, r24
    11f6:	89 2f       	mov	r24, r25
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <loop+0x58>
    11fa:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <__data_end>
    11fe:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <__data_end+0x1>
    1202:	20 93 6c 03 	sts	0x036C, r18	; 0x80036c <__data_end>
    1206:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <__data_end+0x1>
    120a:	00 91 6e 03 	lds	r16, 0x036E	; 0x80036e <load_4>
	printSerial("Load 4: ", getRealValue(load_4));
    120e:	10 91 6f 03 	lds	r17, 0x036F	; 0x80036f <load_4+0x1>
    1212:	01 15       	cp	r16, r1
	sprintf(buffer, tmp, value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1214:	84 e0       	ldi	r24, 0x04	; 4
    1216:	18 07       	cpc	r17, r24
    1218:	0c f0       	brlt	.+2      	; 0x121c <loop+0x72>
    121a:	14 50       	subi	r17, 0x04	; 4
    121c:	6d ef       	ldi	r22, 0xFD	; 253
	int new_reading;
	new_reading = getData(4, MX_PRESENT_LOAD_L);
	load_4 = new_reading > 0 ? new_reading : load_4; 
	new_reading = getData(5, MX_PRESENT_LOAD_L);
	load_5 = new_reading > 0 ? new_reading : load_5; 
	printSerial("Load 4: ", getRealValue(load_4));
    121e:	72 e0       	ldi	r23, 0x02	; 2
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    1228:	b8 01       	movw	r22, r16
    122a:	ce 01       	movw	r24, r28
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	39 d9       	rcall	.-3470   	; 0x4a2 <_Z11printSerial6Stringi>
    1230:	ce 01       	movw	r24, r28
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
    1238:	00 91 6c 03 	lds	r16, 0x036C	; 0x80036c <__data_end>
	printSerial("Load 5: ", getRealValue(load_5));
    123c:	10 91 6d 03 	lds	r17, 0x036D	; 0x80036d <__data_end+0x1>
    1240:	01 15       	cp	r16, r1
	sprintf(buffer, tmp, value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	18 07       	cpc	r17, r24
    1246:	0c f0       	brlt	.+2      	; 0x124a <loop+0xa0>
    1248:	14 50       	subi	r17, 0x04	; 4
    124a:	66 e0       	ldi	r22, 0x06	; 6
	new_reading = getData(4, MX_PRESENT_LOAD_L);
	load_4 = new_reading > 0 ? new_reading : load_4; 
	new_reading = getData(5, MX_PRESENT_LOAD_L);
	load_5 = new_reading > 0 ? new_reading : load_5; 
	printSerial("Load 4: ", getRealValue(load_4));
	printSerial("Load 5: ", getRealValue(load_5));
    124c:	73 e0       	ldi	r23, 0x03	; 3
    124e:	ce 01       	movw	r24, r28
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    1256:	b8 01       	movw	r22, r16
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	22 d9       	rcall	.-3516   	; 0x4a2 <_Z11printSerial6Stringi>
    125e:	ce 01       	movw	r24, r28
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
    1266:	40 91 6e 03 	lds	r20, 0x036E	; 0x80036e <load_4>
	printLCD(10, 3, getRealValue(load_4), 4);
    126a:	50 91 6f 03 	lds	r21, 0x036F	; 0x80036f <load_4+0x1>
    126e:	41 15       	cp	r20, r1
	sprintf(buffer, tmp, value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1270:	84 e0       	ldi	r24, 0x04	; 4
    1272:	58 07       	cpc	r21, r24
    1274:	0c f0       	brlt	.+2      	; 0x1278 <loop+0xce>
    1276:	54 50       	subi	r21, 0x04	; 4
	load_4 = new_reading > 0 ? new_reading : load_4; 
	new_reading = getData(5, MX_PRESENT_LOAD_L);
	load_5 = new_reading > 0 ? new_reading : load_5; 
	printSerial("Load 4: ", getRealValue(load_4));
	printSerial("Load 5: ", getRealValue(load_5));
	printLCD(10, 3, getRealValue(load_4), 4);
    1278:	24 e0       	ldi	r18, 0x04	; 4
    127a:	63 e0       	ldi	r22, 0x03	; 3
    127c:	8a e0       	ldi	r24, 0x0A	; 10
    127e:	45 d8       	rcall	.-3958   	; 0x30a <_Z8printLCDhhih>
    1280:	40 91 6c 03 	lds	r20, 0x036C	; 0x80036c <__data_end>
	printLCD(15, 3, getRealValue(load_5), 4);
    1284:	50 91 6d 03 	lds	r21, 0x036D	; 0x80036d <__data_end+0x1>
    1288:	41 15       	cp	r20, r1
	sprintf(buffer, tmp, value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    128a:	84 e0       	ldi	r24, 0x04	; 4
    128c:	58 07       	cpc	r21, r24
    128e:	0c f0       	brlt	.+2      	; 0x1292 <loop+0xe8>
    1290:	54 50       	subi	r21, 0x04	; 4
	new_reading = getData(5, MX_PRESENT_LOAD_L);
	load_5 = new_reading > 0 ? new_reading : load_5; 
	printSerial("Load 4: ", getRealValue(load_4));
	printSerial("Load 5: ", getRealValue(load_5));
	printLCD(10, 3, getRealValue(load_4), 4);
	printLCD(15, 3, getRealValue(load_5), 4);
    1292:	24 e0       	ldi	r18, 0x04	; 4
    1294:	63 e0       	ldi	r22, 0x03	; 3
    1296:	8f e0       	ldi	r24, 0x0F	; 15
    1298:	38 d8       	rcall	.-3984   	; 0x30a <_Z8printLCDhhih>
    129a:	26 96       	adiw	r28, 0x06	; 6
	//printDataLCD();
	//delay(200);
}
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	08 95       	ret

000012b0 <setup>:
    12b0:	0f 93       	push	r16
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <setup+0xa>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <setup+0xc>
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
    12c0:	b5 d8       	rcall	.-3734   	; 0x42c <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
    12c2:	82 e7       	ldi	r24, 0x72	; 114
    12c4:	93 e0       	ldi	r25, 0x03	; 3
    12c6:	0e 94 ae 14 	call	0x295c	; 0x295c <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    12ca:	82 e7       	ldi	r24, 0x72	; 114
    12cc:	93 e0       	ldi	r25, 0x03	; 3
    12ce:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    12d2:	82 e7       	ldi	r24, 0x72	; 114
    12d4:	93 e0       	ldi	r25, 0x03	; 3
    12d6:	0e 94 18 14 	call	0x2830	; 0x2830 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	0e 94 ba 12 	call	0x2574	; 0x2574 <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
    12e2:	61 e0       	ldi	r22, 0x01	; 1
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	0e 94 ba 12 	call	0x2574	; 0x2574 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    12ea:	26 e0       	ldi	r18, 0x06	; 6
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	51 ee       	ldi	r21, 0xE1	; 225
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	87 ec       	ldi	r24, 0xC7	; 199
    12f6:	93 e0       	ldi	r25, 0x03	; 3
    12f8:	19 d5       	rcall	.+2610   	; 0x1d2c <_ZN14HardwareSerial5beginEmh>
    12fa:	26 e0       	ldi	r18, 0x06	; 6
    12fc:	47 e3       	ldi	r20, 0x37	; 55
    12fe:	5f ed       	ldi	r21, 0xDF	; 223
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	84 e6       	ldi	r24, 0x64	; 100
    1306:	94 e0       	ldi	r25, 0x04	; 4
    1308:	11 d5       	rcall	.+2594   	; 0x1d2c <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
    130a:	84 e6       	ldi	r24, 0x64	; 100
    130c:	94 e0       	ldi	r25, 0x04	; 4
    130e:	ed d4       	rcall	.+2522   	; 0x1cea <_ZN14HardwareSerial5flushEv>
    1310:	85 e0       	ldi	r24, 0x05	; 5
	arm.id = 5;
    1312:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <arm>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	e6 dc       	rcall	.-1588   	; 0xce6 <_Z12setModeWheelh>
	setModeWheel(2);
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	e4 dc       	rcall	.-1592   	; 0xce6 <_Z12setModeWheelh>
	setModeMultiTurn(3);
    131e:	83 e0       	ldi	r24, 0x03	; 3
    1320:	e6 dc       	rcall	.-1588   	; 0xcee <_Z16setModeMultiTurnh>
    1322:	84 e0       	ldi	r24, 0x04	; 4
	setModeJoint(4);
    1324:	e2 dc       	rcall	.-1596   	; 0xcea <_Z12setModeJointh>
    1326:	85 e0       	ldi	r24, 0x05	; 5
    1328:	e0 dc       	rcall	.-1600   	; 0xcea <_Z12setModeJointh>
	setModeJoint(5);
    132a:	84 ef       	ldi	r24, 0xF4	; 244
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <arm+0x12>
	/* Set the speeds of the servos */
	arm.servos[1].speed = 500;
    1332:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <arm+0x11>
    1336:	84 e6       	ldi	r24, 0x64	; 100
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <arm+0x1c>
	arm.servos[2].speed = 100;
    133e:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <arm+0x1b>
    1342:	8e e1       	ldi	r24, 0x1E	; 30
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <arm+0x26>
	arm.servos[3].speed = 30;
    134a:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <arm+0x25>
    134e:	8f e0       	ldi	r24, 0x0F	; 15
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <arm+0x30>
	arm.servos[4].speed = 15;
    1356:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <arm+0x2f>
    135a:	84 e1       	ldi	r24, 0x14	; 20
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <arm+0x3a>
	arm.servos[5].speed = 20;
    1362:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <arm+0x39>
    1366:	11 e0       	ldi	r17, 0x01	; 1
    1368:	6f ef       	ldi	r22, 0xFF	; 255
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    136a:	73 e0       	ldi	r23, 0x03	; 3
		setTorqueLimit(i, MAX_TORQUE);
    136c:	81 2f       	mov	r24, r17
    136e:	62 dc       	rcall	.-1852   	; 0xc34 <_Z14setTorqueLimithi>
    1370:	1f 5f       	subi	r17, 0xFF	; 255
    1372:	16 30       	cpi	r17, 0x06	; 6
    1374:	c9 f7       	brne	.-14     	; 0x1368 <setup+0xb8>
	arm.servos[2].speed = 100;
	arm.servos[3].speed = 30;
	arm.servos[4].speed = 15;
	arm.servos[5].speed = 20;
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	82 e7       	ldi	r24, 0x72	; 114
		setTorqueLimit(i, MAX_TORQUE);
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1382:	6f e0       	ldi	r22, 0x0F	; 15
    1384:	73 e0       	ldi	r23, 0x03	; 3
	lcd.print("sID:");
    1386:	82 e7       	ldi	r24, 0x72	; 114
    1388:	93 e0       	ldi	r25, 0x03	; 3
    138a:	bb d6       	rcall	.+3446   	; 0x2102 <_ZN5Print5printEPKc>
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	60 e0       	ldi	r22, 0x00	; 0
	lcd.setCursor(0,1);
    1390:	82 e7       	ldi	r24, 0x72	; 114
    1392:	93 e0       	ldi	r25, 0x03	; 3
    1394:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1398:	64 e1       	ldi	r22, 0x14	; 20
    139a:	73 e0       	ldi	r23, 0x03	; 3
	lcd.print("deg:");
    139c:	82 e7       	ldi	r24, 0x72	; 114
    139e:	93 e0       	ldi	r25, 0x03	; 3
    13a0:	b0 d6       	rcall	.+3424   	; 0x2102 <_ZN5Print5printEPKc>
    13a2:	42 e0       	ldi	r20, 0x02	; 2
    13a4:	60 e0       	ldi	r22, 0x00	; 0
	lcd.setCursor(0,2);
    13a6:	82 e7       	ldi	r24, 0x72	; 114
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    13ae:	69 e1       	ldi	r22, 0x19	; 25
    13b0:	73 e0       	ldi	r23, 0x03	; 3
	lcd.print("rpm:");
    13b2:	82 e7       	ldi	r24, 0x72	; 114
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	a5 d6       	rcall	.+3402   	; 0x2102 <_ZN5Print5printEPKc>
    13b8:	43 e0       	ldi	r20, 0x03	; 3
    13ba:	60 e0       	ldi	r22, 0x00	; 0
	lcd.setCursor(0,3);
    13bc:	82 e7       	ldi	r24, 0x72	; 114
    13be:	93 e0       	ldi	r25, 0x03	; 3
    13c0:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("ld%:");
    13c4:	6e e1       	ldi	r22, 0x1E	; 30
    13c6:	73 e0       	ldi	r23, 0x03	; 3
    13c8:	82 e7       	ldi	r24, 0x72	; 114
    13ca:	93 e0       	ldi	r25, 0x03	; 3
    13cc:	9a d6       	rcall	.+3380   	; 0x2102 <_ZN5Print5printEPKc>

	readServo(arm.id, 0x18, 8);
    13ce:	48 e0       	ldi	r20, 0x08	; 8
    13d0:	68 e1       	ldi	r22, 0x18	; 24
    13d2:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <arm>
    13d6:	72 dd       	rcall	.-1308   	; 0xebc <_Z9readServohhh>
	printBuffer();
    13d8:	28 d9       	rcall	.-3504   	; 0x62a <_Z11printBufferv>
    13da:	62 e0       	ldi	r22, 0x02	; 2
	delay(2);
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	cd d7       	rcall	.+3994   	; 0x237e <delay>
    13e4:	64 e4       	ldi	r22, 0x44	; 68
    13e6:	85 e0       	ldi	r24, 0x05	; 5
	int somthe = getData(5, MX_CURRENT_L);
    13e8:	ca dd       	rcall	.-1132   	; 0xf7e <_Z7getDatahh>
    13ea:	8c 01       	movw	r16, r24
    13ec:	81 15       	cp	r24, r1
	sprintf(buffer, tmp, value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    13ee:	94 40       	sbci	r25, 0x04	; 4
    13f0:	0c f0       	brlt	.+2      	; 0x13f4 <setup+0x144>
    13f2:	14 50       	subi	r17, 0x04	; 4
    13f4:	63 e2       	ldi	r22, 0x23	; 35
    13f6:	73 e0       	ldi	r23, 0x03	; 3

	readServo(arm.id, 0x18, 8);
	printBuffer();
	delay(2);
	int somthe = getData(5, MX_CURRENT_L);
	printSerial("return: ", getRealValue(somthe));
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN6StringC1EPKc>
    1400:	b8 01       	movw	r22, r16
    1402:	ce 01       	movw	r24, r28
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	4d d8       	rcall	.-3942   	; 0x4a2 <_Z11printSerial6Stringi>
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
    1410:	26 96       	adiw	r28, 0x06	; 6
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
	//printBuffer();
}
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <__subsf3>:
    1426:	50 58       	subi	r21, 0x80	; 128

00001428 <__addsf3>:
    1428:	bb 27       	eor	r27, r27
    142a:	aa 27       	eor	r26, r26
    142c:	0e d0       	rcall	.+28     	; 0x144a <__addsf3x>
    142e:	0d c1       	rjmp	.+538    	; 0x164a <__fp_round>
    1430:	fe d0       	rcall	.+508    	; 0x162e <__fp_pscA>
    1432:	30 f0       	brcs	.+12     	; 0x1440 <__addsf3+0x18>
    1434:	03 d1       	rcall	.+518    	; 0x163c <__fp_pscB>
    1436:	20 f0       	brcs	.+8      	; 0x1440 <__addsf3+0x18>
    1438:	31 f4       	brne	.+12     	; 0x1446 <__addsf3+0x1e>
    143a:	9f 3f       	cpi	r25, 0xFF	; 255
    143c:	11 f4       	brne	.+4      	; 0x1442 <__addsf3+0x1a>
    143e:	1e f4       	brtc	.+6      	; 0x1446 <__addsf3+0x1e>
    1440:	f3 c0       	rjmp	.+486    	; 0x1628 <__fp_nan>
    1442:	0e f4       	brtc	.+2      	; 0x1446 <__addsf3+0x1e>
    1444:	e0 95       	com	r30
    1446:	e7 fb       	bst	r30, 7
    1448:	e9 c0       	rjmp	.+466    	; 0x161c <__fp_inf>

0000144a <__addsf3x>:
    144a:	e9 2f       	mov	r30, r25
    144c:	0f d1       	rcall	.+542    	; 0x166c <__fp_split3>
    144e:	80 f3       	brcs	.-32     	; 0x1430 <__addsf3+0x8>
    1450:	ba 17       	cp	r27, r26
    1452:	62 07       	cpc	r22, r18
    1454:	73 07       	cpc	r23, r19
    1456:	84 07       	cpc	r24, r20
    1458:	95 07       	cpc	r25, r21
    145a:	18 f0       	brcs	.+6      	; 0x1462 <__addsf3x+0x18>
    145c:	71 f4       	brne	.+28     	; 0x147a <__addsf3x+0x30>
    145e:	9e f5       	brtc	.+102    	; 0x14c6 <__addsf3x+0x7c>
    1460:	27 c1       	rjmp	.+590    	; 0x16b0 <__fp_zero>
    1462:	0e f4       	brtc	.+2      	; 0x1466 <__addsf3x+0x1c>
    1464:	e0 95       	com	r30
    1466:	0b 2e       	mov	r0, r27
    1468:	ba 2f       	mov	r27, r26
    146a:	a0 2d       	mov	r26, r0
    146c:	0b 01       	movw	r0, r22
    146e:	b9 01       	movw	r22, r18
    1470:	90 01       	movw	r18, r0
    1472:	0c 01       	movw	r0, r24
    1474:	ca 01       	movw	r24, r20
    1476:	a0 01       	movw	r20, r0
    1478:	11 24       	eor	r1, r1
    147a:	ff 27       	eor	r31, r31
    147c:	59 1b       	sub	r21, r25
    147e:	99 f0       	breq	.+38     	; 0x14a6 <__addsf3x+0x5c>
    1480:	59 3f       	cpi	r21, 0xF9	; 249
    1482:	50 f4       	brcc	.+20     	; 0x1498 <__addsf3x+0x4e>
    1484:	50 3e       	cpi	r21, 0xE0	; 224
    1486:	68 f1       	brcs	.+90     	; 0x14e2 <__addsf3x+0x98>
    1488:	1a 16       	cp	r1, r26
    148a:	f0 40       	sbci	r31, 0x00	; 0
    148c:	a2 2f       	mov	r26, r18
    148e:	23 2f       	mov	r18, r19
    1490:	34 2f       	mov	r19, r20
    1492:	44 27       	eor	r20, r20
    1494:	58 5f       	subi	r21, 0xF8	; 248
    1496:	f3 cf       	rjmp	.-26     	; 0x147e <__addsf3x+0x34>
    1498:	46 95       	lsr	r20
    149a:	37 95       	ror	r19
    149c:	27 95       	ror	r18
    149e:	a7 95       	ror	r26
    14a0:	f0 40       	sbci	r31, 0x00	; 0
    14a2:	53 95       	inc	r21
    14a4:	c9 f7       	brne	.-14     	; 0x1498 <__addsf3x+0x4e>
    14a6:	7e f4       	brtc	.+30     	; 0x14c6 <__addsf3x+0x7c>
    14a8:	1f 16       	cp	r1, r31
    14aa:	ba 0b       	sbc	r27, r26
    14ac:	62 0b       	sbc	r22, r18
    14ae:	73 0b       	sbc	r23, r19
    14b0:	84 0b       	sbc	r24, r20
    14b2:	ba f0       	brmi	.+46     	; 0x14e2 <__addsf3x+0x98>
    14b4:	91 50       	subi	r25, 0x01	; 1
    14b6:	a1 f0       	breq	.+40     	; 0x14e0 <__addsf3x+0x96>
    14b8:	ff 0f       	add	r31, r31
    14ba:	bb 1f       	adc	r27, r27
    14bc:	66 1f       	adc	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	c2 f7       	brpl	.-16     	; 0x14b4 <__addsf3x+0x6a>
    14c4:	0e c0       	rjmp	.+28     	; 0x14e2 <__addsf3x+0x98>
    14c6:	ba 0f       	add	r27, r26
    14c8:	62 1f       	adc	r22, r18
    14ca:	73 1f       	adc	r23, r19
    14cc:	84 1f       	adc	r24, r20
    14ce:	48 f4       	brcc	.+18     	; 0x14e2 <__addsf3x+0x98>
    14d0:	87 95       	ror	r24
    14d2:	77 95       	ror	r23
    14d4:	67 95       	ror	r22
    14d6:	b7 95       	ror	r27
    14d8:	f7 95       	ror	r31
    14da:	9e 3f       	cpi	r25, 0xFE	; 254
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <__addsf3x+0x96>
    14de:	b3 cf       	rjmp	.-154    	; 0x1446 <__addsf3+0x1e>
    14e0:	93 95       	inc	r25
    14e2:	88 0f       	add	r24, r24
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <__addsf3x+0x9e>
    14e6:	99 27       	eor	r25, r25
    14e8:	ee 0f       	add	r30, r30
    14ea:	97 95       	ror	r25
    14ec:	87 95       	ror	r24
    14ee:	08 95       	ret

000014f0 <__cmpsf2>:
    14f0:	71 d0       	rcall	.+226    	; 0x15d4 <__fp_cmp>
    14f2:	08 f4       	brcc	.+2      	; 0x14f6 <__cmpsf2+0x6>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	08 95       	ret

000014f8 <__fixsfsi>:
    14f8:	04 d0       	rcall	.+8      	; 0x1502 <__fixunssfsi>
    14fa:	68 94       	set
    14fc:	b1 11       	cpse	r27, r1
    14fe:	d9 c0       	rjmp	.+434    	; 0x16b2 <__fp_szero>
    1500:	08 95       	ret

00001502 <__fixunssfsi>:
    1502:	bc d0       	rcall	.+376    	; 0x167c <__fp_splitA>
    1504:	88 f0       	brcs	.+34     	; 0x1528 <__fixunssfsi+0x26>
    1506:	9f 57       	subi	r25, 0x7F	; 127
    1508:	90 f0       	brcs	.+36     	; 0x152e <__fixunssfsi+0x2c>
    150a:	b9 2f       	mov	r27, r25
    150c:	99 27       	eor	r25, r25
    150e:	b7 51       	subi	r27, 0x17	; 23
    1510:	a0 f0       	brcs	.+40     	; 0x153a <__fixunssfsi+0x38>
    1512:	d1 f0       	breq	.+52     	; 0x1548 <__fixunssfsi+0x46>
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	1a f0       	brmi	.+6      	; 0x1524 <__fixunssfsi+0x22>
    151e:	ba 95       	dec	r27
    1520:	c9 f7       	brne	.-14     	; 0x1514 <__fixunssfsi+0x12>
    1522:	12 c0       	rjmp	.+36     	; 0x1548 <__fixunssfsi+0x46>
    1524:	b1 30       	cpi	r27, 0x01	; 1
    1526:	81 f0       	breq	.+32     	; 0x1548 <__fixunssfsi+0x46>
    1528:	c3 d0       	rcall	.+390    	; 0x16b0 <__fp_zero>
    152a:	b1 e0       	ldi	r27, 0x01	; 1
    152c:	08 95       	ret
    152e:	c0 c0       	rjmp	.+384    	; 0x16b0 <__fp_zero>
    1530:	67 2f       	mov	r22, r23
    1532:	78 2f       	mov	r23, r24
    1534:	88 27       	eor	r24, r24
    1536:	b8 5f       	subi	r27, 0xF8	; 248
    1538:	39 f0       	breq	.+14     	; 0x1548 <__fixunssfsi+0x46>
    153a:	b9 3f       	cpi	r27, 0xF9	; 249
    153c:	cc f3       	brlt	.-14     	; 0x1530 <__fixunssfsi+0x2e>
    153e:	86 95       	lsr	r24
    1540:	77 95       	ror	r23
    1542:	67 95       	ror	r22
    1544:	b3 95       	inc	r27
    1546:	d9 f7       	brne	.-10     	; 0x153e <__fixunssfsi+0x3c>
    1548:	3e f4       	brtc	.+14     	; 0x1558 <__fixunssfsi+0x56>
    154a:	90 95       	com	r25
    154c:	80 95       	com	r24
    154e:	70 95       	com	r23
    1550:	61 95       	neg	r22
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	08 95       	ret

0000155a <__floatunsisf>:
    155a:	e8 94       	clt
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <__floatsisf+0x12>

0000155e <__floatsisf>:
    155e:	97 fb       	bst	r25, 7
    1560:	3e f4       	brtc	.+14     	; 0x1570 <__floatsisf+0x12>
    1562:	90 95       	com	r25
    1564:	80 95       	com	r24
    1566:	70 95       	com	r23
    1568:	61 95       	neg	r22
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	8f 4f       	sbci	r24, 0xFF	; 255
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	99 23       	and	r25, r25
    1572:	a9 f0       	breq	.+42     	; 0x159e <__floatsisf+0x40>
    1574:	f9 2f       	mov	r31, r25
    1576:	96 e9       	ldi	r25, 0x96	; 150
    1578:	bb 27       	eor	r27, r27
    157a:	93 95       	inc	r25
    157c:	f6 95       	lsr	r31
    157e:	87 95       	ror	r24
    1580:	77 95       	ror	r23
    1582:	67 95       	ror	r22
    1584:	b7 95       	ror	r27
    1586:	f1 11       	cpse	r31, r1
    1588:	f8 cf       	rjmp	.-16     	; 0x157a <__floatsisf+0x1c>
    158a:	fa f4       	brpl	.+62     	; 0x15ca <__floatsisf+0x6c>
    158c:	bb 0f       	add	r27, r27
    158e:	11 f4       	brne	.+4      	; 0x1594 <__floatsisf+0x36>
    1590:	60 ff       	sbrs	r22, 0
    1592:	1b c0       	rjmp	.+54     	; 0x15ca <__floatsisf+0x6c>
    1594:	6f 5f       	subi	r22, 0xFF	; 255
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	8f 4f       	sbci	r24, 0xFF	; 255
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	16 c0       	rjmp	.+44     	; 0x15ca <__floatsisf+0x6c>
    159e:	88 23       	and	r24, r24
    15a0:	11 f0       	breq	.+4      	; 0x15a6 <__floatsisf+0x48>
    15a2:	96 e9       	ldi	r25, 0x96	; 150
    15a4:	11 c0       	rjmp	.+34     	; 0x15c8 <__floatsisf+0x6a>
    15a6:	77 23       	and	r23, r23
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <__floatsisf+0x54>
    15aa:	9e e8       	ldi	r25, 0x8E	; 142
    15ac:	87 2f       	mov	r24, r23
    15ae:	76 2f       	mov	r23, r22
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <__floatsisf+0x5e>
    15b2:	66 23       	and	r22, r22
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <__floatsisf+0x74>
    15b6:	96 e8       	ldi	r25, 0x86	; 134
    15b8:	86 2f       	mov	r24, r22
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	2a f0       	brmi	.+10     	; 0x15ca <__floatsisf+0x6c>
    15c0:	9a 95       	dec	r25
    15c2:	66 0f       	add	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	88 1f       	adc	r24, r24
    15c8:	da f7       	brpl	.-10     	; 0x15c0 <__floatsisf+0x62>
    15ca:	88 0f       	add	r24, r24
    15cc:	96 95       	lsr	r25
    15ce:	87 95       	ror	r24
    15d0:	97 f9       	bld	r25, 7
    15d2:	08 95       	ret

000015d4 <__fp_cmp>:
    15d4:	99 0f       	add	r25, r25
    15d6:	00 08       	sbc	r0, r0
    15d8:	55 0f       	add	r21, r21
    15da:	aa 0b       	sbc	r26, r26
    15dc:	e0 e8       	ldi	r30, 0x80	; 128
    15de:	fe ef       	ldi	r31, 0xFE	; 254
    15e0:	16 16       	cp	r1, r22
    15e2:	17 06       	cpc	r1, r23
    15e4:	e8 07       	cpc	r30, r24
    15e6:	f9 07       	cpc	r31, r25
    15e8:	c0 f0       	brcs	.+48     	; 0x161a <__fp_cmp+0x46>
    15ea:	12 16       	cp	r1, r18
    15ec:	13 06       	cpc	r1, r19
    15ee:	e4 07       	cpc	r30, r20
    15f0:	f5 07       	cpc	r31, r21
    15f2:	98 f0       	brcs	.+38     	; 0x161a <__fp_cmp+0x46>
    15f4:	62 1b       	sub	r22, r18
    15f6:	73 0b       	sbc	r23, r19
    15f8:	84 0b       	sbc	r24, r20
    15fa:	95 0b       	sbc	r25, r21
    15fc:	39 f4       	brne	.+14     	; 0x160c <__fp_cmp+0x38>
    15fe:	0a 26       	eor	r0, r26
    1600:	61 f0       	breq	.+24     	; 0x161a <__fp_cmp+0x46>
    1602:	23 2b       	or	r18, r19
    1604:	24 2b       	or	r18, r20
    1606:	25 2b       	or	r18, r21
    1608:	21 f4       	brne	.+8      	; 0x1612 <__fp_cmp+0x3e>
    160a:	08 95       	ret
    160c:	0a 26       	eor	r0, r26
    160e:	09 f4       	brne	.+2      	; 0x1612 <__fp_cmp+0x3e>
    1610:	a1 40       	sbci	r26, 0x01	; 1
    1612:	a6 95       	lsr	r26
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	81 1d       	adc	r24, r1
    1618:	81 1d       	adc	r24, r1
    161a:	08 95       	ret

0000161c <__fp_inf>:
    161c:	97 f9       	bld	r25, 7
    161e:	9f 67       	ori	r25, 0x7F	; 127
    1620:	80 e8       	ldi	r24, 0x80	; 128
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	08 95       	ret

00001628 <__fp_nan>:
    1628:	9f ef       	ldi	r25, 0xFF	; 255
    162a:	80 ec       	ldi	r24, 0xC0	; 192
    162c:	08 95       	ret

0000162e <__fp_pscA>:
    162e:	00 24       	eor	r0, r0
    1630:	0a 94       	dec	r0
    1632:	16 16       	cp	r1, r22
    1634:	17 06       	cpc	r1, r23
    1636:	18 06       	cpc	r1, r24
    1638:	09 06       	cpc	r0, r25
    163a:	08 95       	ret

0000163c <__fp_pscB>:
    163c:	00 24       	eor	r0, r0
    163e:	0a 94       	dec	r0
    1640:	12 16       	cp	r1, r18
    1642:	13 06       	cpc	r1, r19
    1644:	14 06       	cpc	r1, r20
    1646:	05 06       	cpc	r0, r21
    1648:	08 95       	ret

0000164a <__fp_round>:
    164a:	09 2e       	mov	r0, r25
    164c:	03 94       	inc	r0
    164e:	00 0c       	add	r0, r0
    1650:	11 f4       	brne	.+4      	; 0x1656 <__fp_round+0xc>
    1652:	88 23       	and	r24, r24
    1654:	52 f0       	brmi	.+20     	; 0x166a <__fp_round+0x20>
    1656:	bb 0f       	add	r27, r27
    1658:	40 f4       	brcc	.+16     	; 0x166a <__fp_round+0x20>
    165a:	bf 2b       	or	r27, r31
    165c:	11 f4       	brne	.+4      	; 0x1662 <__fp_round+0x18>
    165e:	60 ff       	sbrs	r22, 0
    1660:	04 c0       	rjmp	.+8      	; 0x166a <__fp_round+0x20>
    1662:	6f 5f       	subi	r22, 0xFF	; 255
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	8f 4f       	sbci	r24, 0xFF	; 255
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	08 95       	ret

0000166c <__fp_split3>:
    166c:	57 fd       	sbrc	r21, 7
    166e:	90 58       	subi	r25, 0x80	; 128
    1670:	44 0f       	add	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	59 f0       	breq	.+22     	; 0x168c <__fp_splitA+0x10>
    1676:	5f 3f       	cpi	r21, 0xFF	; 255
    1678:	71 f0       	breq	.+28     	; 0x1696 <__fp_splitA+0x1a>
    167a:	47 95       	ror	r20

0000167c <__fp_splitA>:
    167c:	88 0f       	add	r24, r24
    167e:	97 fb       	bst	r25, 7
    1680:	99 1f       	adc	r25, r25
    1682:	61 f0       	breq	.+24     	; 0x169c <__fp_splitA+0x20>
    1684:	9f 3f       	cpi	r25, 0xFF	; 255
    1686:	79 f0       	breq	.+30     	; 0x16a6 <__fp_splitA+0x2a>
    1688:	87 95       	ror	r24
    168a:	08 95       	ret
    168c:	12 16       	cp	r1, r18
    168e:	13 06       	cpc	r1, r19
    1690:	14 06       	cpc	r1, r20
    1692:	55 1f       	adc	r21, r21
    1694:	f2 cf       	rjmp	.-28     	; 0x167a <__fp_split3+0xe>
    1696:	46 95       	lsr	r20
    1698:	f1 df       	rcall	.-30     	; 0x167c <__fp_splitA>
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <__fp_splitA+0x30>
    169c:	16 16       	cp	r1, r22
    169e:	17 06       	cpc	r1, r23
    16a0:	18 06       	cpc	r1, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	f1 cf       	rjmp	.-30     	; 0x1688 <__fp_splitA+0xc>
    16a6:	86 95       	lsr	r24
    16a8:	71 05       	cpc	r23, r1
    16aa:	61 05       	cpc	r22, r1
    16ac:	08 94       	sec
    16ae:	08 95       	ret

000016b0 <__fp_zero>:
    16b0:	e8 94       	clt

000016b2 <__fp_szero>:
    16b2:	bb 27       	eor	r27, r27
    16b4:	66 27       	eor	r22, r22
    16b6:	77 27       	eor	r23, r23
    16b8:	cb 01       	movw	r24, r22
    16ba:	97 f9       	bld	r25, 7
    16bc:	08 95       	ret

000016be <__mulsf3>:
    16be:	0b d0       	rcall	.+22     	; 0x16d6 <__mulsf3x>
    16c0:	c4 cf       	rjmp	.-120    	; 0x164a <__fp_round>
    16c2:	b5 df       	rcall	.-150    	; 0x162e <__fp_pscA>
    16c4:	28 f0       	brcs	.+10     	; 0x16d0 <__mulsf3+0x12>
    16c6:	ba df       	rcall	.-140    	; 0x163c <__fp_pscB>
    16c8:	18 f0       	brcs	.+6      	; 0x16d0 <__mulsf3+0x12>
    16ca:	95 23       	and	r25, r21
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__mulsf3+0x12>
    16ce:	a6 cf       	rjmp	.-180    	; 0x161c <__fp_inf>
    16d0:	ab cf       	rjmp	.-170    	; 0x1628 <__fp_nan>
    16d2:	11 24       	eor	r1, r1
    16d4:	ee cf       	rjmp	.-36     	; 0x16b2 <__fp_szero>

000016d6 <__mulsf3x>:
    16d6:	ca df       	rcall	.-108    	; 0x166c <__fp_split3>
    16d8:	a0 f3       	brcs	.-24     	; 0x16c2 <__mulsf3+0x4>

000016da <__mulsf3_pse>:
    16da:	95 9f       	mul	r25, r21
    16dc:	d1 f3       	breq	.-12     	; 0x16d2 <__mulsf3+0x14>
    16de:	95 0f       	add	r25, r21
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	55 1f       	adc	r21, r21
    16e4:	62 9f       	mul	r22, r18
    16e6:	f0 01       	movw	r30, r0
    16e8:	72 9f       	mul	r23, r18
    16ea:	bb 27       	eor	r27, r27
    16ec:	f0 0d       	add	r31, r0
    16ee:	b1 1d       	adc	r27, r1
    16f0:	63 9f       	mul	r22, r19
    16f2:	aa 27       	eor	r26, r26
    16f4:	f0 0d       	add	r31, r0
    16f6:	b1 1d       	adc	r27, r1
    16f8:	aa 1f       	adc	r26, r26
    16fa:	64 9f       	mul	r22, r20
    16fc:	66 27       	eor	r22, r22
    16fe:	b0 0d       	add	r27, r0
    1700:	a1 1d       	adc	r26, r1
    1702:	66 1f       	adc	r22, r22
    1704:	82 9f       	mul	r24, r18
    1706:	22 27       	eor	r18, r18
    1708:	b0 0d       	add	r27, r0
    170a:	a1 1d       	adc	r26, r1
    170c:	62 1f       	adc	r22, r18
    170e:	73 9f       	mul	r23, r19
    1710:	b0 0d       	add	r27, r0
    1712:	a1 1d       	adc	r26, r1
    1714:	62 1f       	adc	r22, r18
    1716:	83 9f       	mul	r24, r19
    1718:	a0 0d       	add	r26, r0
    171a:	61 1d       	adc	r22, r1
    171c:	22 1f       	adc	r18, r18
    171e:	74 9f       	mul	r23, r20
    1720:	33 27       	eor	r19, r19
    1722:	a0 0d       	add	r26, r0
    1724:	61 1d       	adc	r22, r1
    1726:	23 1f       	adc	r18, r19
    1728:	84 9f       	mul	r24, r20
    172a:	60 0d       	add	r22, r0
    172c:	21 1d       	adc	r18, r1
    172e:	82 2f       	mov	r24, r18
    1730:	76 2f       	mov	r23, r22
    1732:	6a 2f       	mov	r22, r26
    1734:	11 24       	eor	r1, r1
    1736:	9f 57       	subi	r25, 0x7F	; 127
    1738:	50 40       	sbci	r21, 0x00	; 0
    173a:	8a f0       	brmi	.+34     	; 0x175e <__mulsf3_pse+0x84>
    173c:	e1 f0       	breq	.+56     	; 0x1776 <__mulsf3_pse+0x9c>
    173e:	88 23       	and	r24, r24
    1740:	4a f0       	brmi	.+18     	; 0x1754 <__mulsf3_pse+0x7a>
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	bb 1f       	adc	r27, r27
    1748:	66 1f       	adc	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	91 50       	subi	r25, 0x01	; 1
    1750:	50 40       	sbci	r21, 0x00	; 0
    1752:	a9 f7       	brne	.-22     	; 0x173e <__mulsf3_pse+0x64>
    1754:	9e 3f       	cpi	r25, 0xFE	; 254
    1756:	51 05       	cpc	r21, r1
    1758:	70 f0       	brcs	.+28     	; 0x1776 <__mulsf3_pse+0x9c>
    175a:	60 cf       	rjmp	.-320    	; 0x161c <__fp_inf>
    175c:	aa cf       	rjmp	.-172    	; 0x16b2 <__fp_szero>
    175e:	5f 3f       	cpi	r21, 0xFF	; 255
    1760:	ec f3       	brlt	.-6      	; 0x175c <__mulsf3_pse+0x82>
    1762:	98 3e       	cpi	r25, 0xE8	; 232
    1764:	dc f3       	brlt	.-10     	; 0x175c <__mulsf3_pse+0x82>
    1766:	86 95       	lsr	r24
    1768:	77 95       	ror	r23
    176a:	67 95       	ror	r22
    176c:	b7 95       	ror	r27
    176e:	f7 95       	ror	r31
    1770:	e7 95       	ror	r30
    1772:	9f 5f       	subi	r25, 0xFF	; 255
    1774:	c1 f7       	brne	.-16     	; 0x1766 <__mulsf3_pse+0x8c>
    1776:	fe 2b       	or	r31, r30
    1778:	88 0f       	add	r24, r24
    177a:	91 1d       	adc	r25, r1
    177c:	96 95       	lsr	r25
    177e:	87 95       	ror	r24
    1780:	97 f9       	bld	r25, 7
    1782:	08 95       	ret

00001784 <pow>:
    1784:	fa 01       	movw	r30, r20
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	30 96       	adiw	r30, 0x00	; 0
    178c:	21 05       	cpc	r18, r1
    178e:	31 05       	cpc	r19, r1
    1790:	99 f1       	breq	.+102    	; 0x17f8 <pow+0x74>
    1792:	61 15       	cp	r22, r1
    1794:	71 05       	cpc	r23, r1
    1796:	61 f4       	brne	.+24     	; 0x17b0 <pow+0x2c>
    1798:	80 38       	cpi	r24, 0x80	; 128
    179a:	bf e3       	ldi	r27, 0x3F	; 63
    179c:	9b 07       	cpc	r25, r27
    179e:	49 f1       	breq	.+82     	; 0x17f2 <pow+0x6e>
    17a0:	68 94       	set
    17a2:	90 38       	cpi	r25, 0x80	; 128
    17a4:	81 05       	cpc	r24, r1
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <pow+0x3c>
    17a8:	80 38       	cpi	r24, 0x80	; 128
    17aa:	bf ef       	ldi	r27, 0xFF	; 255
    17ac:	9b 07       	cpc	r25, r27
    17ae:	41 f0       	breq	.+16     	; 0x17c0 <pow+0x3c>
    17b0:	99 23       	and	r25, r25
    17b2:	42 f5       	brpl	.+80     	; 0x1804 <pow+0x80>
    17b4:	ff 3f       	cpi	r31, 0xFF	; 255
    17b6:	e1 05       	cpc	r30, r1
    17b8:	31 05       	cpc	r19, r1
    17ba:	21 05       	cpc	r18, r1
    17bc:	11 f1       	breq	.+68     	; 0x1802 <pow+0x7e>
    17be:	e8 94       	clt
    17c0:	08 94       	sec
    17c2:	e7 95       	ror	r30
    17c4:	d9 01       	movw	r26, r18
    17c6:	aa 23       	and	r26, r26
    17c8:	29 f4       	brne	.+10     	; 0x17d4 <pow+0x50>
    17ca:	ab 2f       	mov	r26, r27
    17cc:	be 2f       	mov	r27, r30
    17ce:	f8 5f       	subi	r31, 0xF8	; 248
    17d0:	d0 f3       	brcs	.-12     	; 0x17c6 <pow+0x42>
    17d2:	10 c0       	rjmp	.+32     	; 0x17f4 <pow+0x70>
    17d4:	ff 5f       	subi	r31, 0xFF	; 255
    17d6:	70 f4       	brcc	.+28     	; 0x17f4 <pow+0x70>
    17d8:	a6 95       	lsr	r26
    17da:	e0 f7       	brcc	.-8      	; 0x17d4 <pow+0x50>
    17dc:	f7 39       	cpi	r31, 0x97	; 151
    17de:	50 f0       	brcs	.+20     	; 0x17f4 <pow+0x70>
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <pow+0x64>
    17e2:	ff 3a       	cpi	r31, 0xAF	; 175
    17e4:	38 f4       	brcc	.+14     	; 0x17f4 <pow+0x70>
    17e6:	9f 77       	andi	r25, 0x7F	; 127
    17e8:	9f 93       	push	r25
    17ea:	0c d0       	rcall	.+24     	; 0x1804 <pow+0x80>
    17ec:	0f 90       	pop	r0
    17ee:	07 fc       	sbrc	r0, 7
    17f0:	90 58       	subi	r25, 0x80	; 128
    17f2:	08 95       	ret
    17f4:	3e f0       	brts	.+14     	; 0x1804 <pow+0x80>
    17f6:	18 cf       	rjmp	.-464    	; 0x1628 <__fp_nan>
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	80 e8       	ldi	r24, 0x80	; 128
    17fe:	9f e3       	ldi	r25, 0x3F	; 63
    1800:	08 95       	ret
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	9f 77       	andi	r25, 0x7F	; 127
    1806:	5f 93       	push	r21
    1808:	4f 93       	push	r20
    180a:	3f 93       	push	r19
    180c:	2f 93       	push	r18
    180e:	9e d0       	rcall	.+316    	; 0x194c <log>
    1810:	2f 91       	pop	r18
    1812:	3f 91       	pop	r19
    1814:	4f 91       	pop	r20
    1816:	5f 91       	pop	r21
    1818:	52 df       	rcall	.-348    	; 0x16be <__mulsf3>
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <exp>
    181c:	19 f4       	brne	.+6      	; 0x1824 <pow+0xa0>
    181e:	0e f0       	brts	.+2      	; 0x1822 <pow+0x9e>
    1820:	fd ce       	rjmp	.-518    	; 0x161c <__fp_inf>
    1822:	46 cf       	rjmp	.-372    	; 0x16b0 <__fp_zero>
    1824:	01 cf       	rjmp	.-510    	; 0x1628 <__fp_nan>

00001826 <exp>:
    1826:	2a df       	rcall	.-428    	; 0x167c <__fp_splitA>
    1828:	c8 f3       	brcs	.-14     	; 0x181c <pow+0x98>
    182a:	96 38       	cpi	r25, 0x86	; 134
    182c:	c0 f7       	brcc	.-16     	; 0x181e <pow+0x9a>
    182e:	07 f8       	bld	r0, 7
    1830:	0f 92       	push	r0
    1832:	e8 94       	clt
    1834:	2b e3       	ldi	r18, 0x3B	; 59
    1836:	3a ea       	ldi	r19, 0xAA	; 170
    1838:	48 eb       	ldi	r20, 0xB8	; 184
    183a:	5f e7       	ldi	r21, 0x7F	; 127
    183c:	4e df       	rcall	.-356    	; 0x16da <__mulsf3_pse>
    183e:	0f 92       	push	r0
    1840:	0f 92       	push	r0
    1842:	0f 92       	push	r0
    1844:	4d b7       	in	r20, 0x3d	; 61
    1846:	5e b7       	in	r21, 0x3e	; 62
    1848:	0f 92       	push	r0
    184a:	c0 d0       	rcall	.+384    	; 0x19cc <modf>
    184c:	e4 ee       	ldi	r30, 0xE4	; 228
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	16 d0       	rcall	.+44     	; 0x187e <__fp_powser>
    1852:	4f 91       	pop	r20
    1854:	5f 91       	pop	r21
    1856:	ef 91       	pop	r30
    1858:	ff 91       	pop	r31
    185a:	e5 95       	asr	r30
    185c:	ee 1f       	adc	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	49 f0       	breq	.+18     	; 0x1874 <exp+0x4e>
    1862:	fe 57       	subi	r31, 0x7E	; 126
    1864:	e0 68       	ori	r30, 0x80	; 128
    1866:	44 27       	eor	r20, r20
    1868:	ee 0f       	add	r30, r30
    186a:	44 1f       	adc	r20, r20
    186c:	fa 95       	dec	r31
    186e:	e1 f7       	brne	.-8      	; 0x1868 <exp+0x42>
    1870:	41 95       	neg	r20
    1872:	55 0b       	sbc	r21, r21
    1874:	32 d0       	rcall	.+100    	; 0x18da <ldexp>
    1876:	0f 90       	pop	r0
    1878:	07 fe       	sbrs	r0, 7
    187a:	26 c0       	rjmp	.+76     	; 0x18c8 <inverse>
    187c:	08 95       	ret

0000187e <__fp_powser>:
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	1f 93       	push	r17
    1884:	0f 93       	push	r16
    1886:	ff 92       	push	r15
    1888:	ef 92       	push	r14
    188a:	df 92       	push	r13
    188c:	7b 01       	movw	r14, r22
    188e:	8c 01       	movw	r16, r24
    1890:	68 94       	set
    1892:	05 c0       	rjmp	.+10     	; 0x189e <__fp_powser+0x20>
    1894:	da 2e       	mov	r13, r26
    1896:	ef 01       	movw	r28, r30
    1898:	1e df       	rcall	.-452    	; 0x16d6 <__mulsf3x>
    189a:	fe 01       	movw	r30, r28
    189c:	e8 94       	clt
    189e:	a5 91       	lpm	r26, Z+
    18a0:	25 91       	lpm	r18, Z+
    18a2:	35 91       	lpm	r19, Z+
    18a4:	45 91       	lpm	r20, Z+
    18a6:	55 91       	lpm	r21, Z+
    18a8:	ae f3       	brts	.-22     	; 0x1894 <__fp_powser+0x16>
    18aa:	ef 01       	movw	r28, r30
    18ac:	ce dd       	rcall	.-1124   	; 0x144a <__addsf3x>
    18ae:	fe 01       	movw	r30, r28
    18b0:	97 01       	movw	r18, r14
    18b2:	a8 01       	movw	r20, r16
    18b4:	da 94       	dec	r13
    18b6:	79 f7       	brne	.-34     	; 0x1896 <__fp_powser+0x18>
    18b8:	df 90       	pop	r13
    18ba:	ef 90       	pop	r14
    18bc:	ff 90       	pop	r15
    18be:	0f 91       	pop	r16
    18c0:	1f 91       	pop	r17
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <inverse>:
    18c8:	9b 01       	movw	r18, r22
    18ca:	ac 01       	movw	r20, r24
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	80 e8       	ldi	r24, 0x80	; 128
    18d2:	9f e3       	ldi	r25, 0x3F	; 63
    18d4:	ae c0       	rjmp	.+348    	; 0x1a32 <__divsf3>
    18d6:	a2 ce       	rjmp	.-700    	; 0x161c <__fp_inf>
    18d8:	14 c1       	rjmp	.+552    	; 0x1b02 <__fp_mpack>

000018da <ldexp>:
    18da:	d0 de       	rcall	.-608    	; 0x167c <__fp_splitA>
    18dc:	e8 f3       	brcs	.-6      	; 0x18d8 <inverse+0x10>
    18de:	99 23       	and	r25, r25
    18e0:	d9 f3       	breq	.-10     	; 0x18d8 <inverse+0x10>
    18e2:	94 0f       	add	r25, r20
    18e4:	51 1d       	adc	r21, r1
    18e6:	bb f3       	brvs	.-18     	; 0x18d6 <inverse+0xe>
    18e8:	91 50       	subi	r25, 0x01	; 1
    18ea:	50 40       	sbci	r21, 0x00	; 0
    18ec:	94 f0       	brlt	.+36     	; 0x1912 <ldexp+0x38>
    18ee:	59 f0       	breq	.+22     	; 0x1906 <ldexp+0x2c>
    18f0:	88 23       	and	r24, r24
    18f2:	32 f0       	brmi	.+12     	; 0x1900 <ldexp+0x26>
    18f4:	66 0f       	add	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	88 1f       	adc	r24, r24
    18fa:	91 50       	subi	r25, 0x01	; 1
    18fc:	50 40       	sbci	r21, 0x00	; 0
    18fe:	c1 f7       	brne	.-16     	; 0x18f0 <ldexp+0x16>
    1900:	9e 3f       	cpi	r25, 0xFE	; 254
    1902:	51 05       	cpc	r21, r1
    1904:	44 f7       	brge	.-48     	; 0x18d6 <inverse+0xe>
    1906:	88 0f       	add	r24, r24
    1908:	91 1d       	adc	r25, r1
    190a:	96 95       	lsr	r25
    190c:	87 95       	ror	r24
    190e:	97 f9       	bld	r25, 7
    1910:	08 95       	ret
    1912:	5f 3f       	cpi	r21, 0xFF	; 255
    1914:	ac f0       	brlt	.+42     	; 0x1940 <ldexp+0x66>
    1916:	98 3e       	cpi	r25, 0xE8	; 232
    1918:	9c f0       	brlt	.+38     	; 0x1940 <ldexp+0x66>
    191a:	bb 27       	eor	r27, r27
    191c:	86 95       	lsr	r24
    191e:	77 95       	ror	r23
    1920:	67 95       	ror	r22
    1922:	b7 95       	ror	r27
    1924:	08 f4       	brcc	.+2      	; 0x1928 <ldexp+0x4e>
    1926:	b1 60       	ori	r27, 0x01	; 1
    1928:	93 95       	inc	r25
    192a:	c1 f7       	brne	.-16     	; 0x191c <ldexp+0x42>
    192c:	bb 0f       	add	r27, r27
    192e:	58 f7       	brcc	.-42     	; 0x1906 <ldexp+0x2c>
    1930:	11 f4       	brne	.+4      	; 0x1936 <ldexp+0x5c>
    1932:	60 ff       	sbrs	r22, 0
    1934:	e8 cf       	rjmp	.-48     	; 0x1906 <ldexp+0x2c>
    1936:	6f 5f       	subi	r22, 0xFF	; 255
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	8f 4f       	sbci	r24, 0xFF	; 255
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	e3 cf       	rjmp	.-58     	; 0x1906 <ldexp+0x2c>
    1940:	b8 ce       	rjmp	.-656    	; 0x16b2 <__fp_szero>
    1942:	0e f0       	brts	.+2      	; 0x1946 <ldexp+0x6c>
    1944:	de c0       	rjmp	.+444    	; 0x1b02 <__fp_mpack>
    1946:	70 ce       	rjmp	.-800    	; 0x1628 <__fp_nan>
    1948:	68 94       	set
    194a:	68 ce       	rjmp	.-816    	; 0x161c <__fp_inf>

0000194c <log>:
    194c:	97 de       	rcall	.-722    	; 0x167c <__fp_splitA>
    194e:	c8 f3       	brcs	.-14     	; 0x1942 <ldexp+0x68>
    1950:	99 23       	and	r25, r25
    1952:	d1 f3       	breq	.-12     	; 0x1948 <ldexp+0x6e>
    1954:	c6 f3       	brts	.-16     	; 0x1946 <ldexp+0x6c>
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	1f 93       	push	r17
    195c:	0f 93       	push	r16
    195e:	ff 92       	push	r15
    1960:	c9 2f       	mov	r28, r25
    1962:	dd 27       	eor	r29, r29
    1964:	88 23       	and	r24, r24
    1966:	2a f0       	brmi	.+10     	; 0x1972 <log+0x26>
    1968:	21 97       	sbiw	r28, 0x01	; 1
    196a:	66 0f       	add	r22, r22
    196c:	77 1f       	adc	r23, r23
    196e:	88 1f       	adc	r24, r24
    1970:	da f7       	brpl	.-10     	; 0x1968 <log+0x1c>
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f eb       	ldi	r21, 0xBF	; 191
    197a:	9f e3       	ldi	r25, 0x3F	; 63
    197c:	88 39       	cpi	r24, 0x98	; 152
    197e:	20 f0       	brcs	.+8      	; 0x1988 <log+0x3c>
    1980:	80 3e       	cpi	r24, 0xE0	; 224
    1982:	30 f0       	brcs	.+12     	; 0x1990 <log+0x44>
    1984:	21 96       	adiw	r28, 0x01	; 1
    1986:	8f 77       	andi	r24, 0x7F	; 127
    1988:	4f dd       	rcall	.-1378   	; 0x1428 <__addsf3>
    198a:	ec e0       	ldi	r30, 0x0C	; 12
    198c:	f1 e0       	ldi	r31, 0x01	; 1
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <log+0x4a>
    1990:	4b dd       	rcall	.-1386   	; 0x1428 <__addsf3>
    1992:	e9 e3       	ldi	r30, 0x39	; 57
    1994:	f1 e0       	ldi	r31, 0x01	; 1
    1996:	73 df       	rcall	.-282    	; 0x187e <__fp_powser>
    1998:	8b 01       	movw	r16, r22
    199a:	be 01       	movw	r22, r28
    199c:	ec 01       	movw	r28, r24
    199e:	fb 2e       	mov	r15, r27
    19a0:	6f 57       	subi	r22, 0x7F	; 127
    19a2:	71 09       	sbc	r23, r1
    19a4:	75 95       	asr	r23
    19a6:	77 1f       	adc	r23, r23
    19a8:	88 0b       	sbc	r24, r24
    19aa:	99 0b       	sbc	r25, r25
    19ac:	d8 dd       	rcall	.-1104   	; 0x155e <__floatsisf>
    19ae:	28 e1       	ldi	r18, 0x18	; 24
    19b0:	32 e7       	ldi	r19, 0x72	; 114
    19b2:	41 e3       	ldi	r20, 0x31	; 49
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	8f de       	rcall	.-738    	; 0x16d6 <__mulsf3x>
    19b8:	af 2d       	mov	r26, r15
    19ba:	98 01       	movw	r18, r16
    19bc:	ae 01       	movw	r20, r28
    19be:	ff 90       	pop	r15
    19c0:	0f 91       	pop	r16
    19c2:	1f 91       	pop	r17
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	40 dd       	rcall	.-1408   	; 0x144a <__addsf3x>
    19ca:	3f ce       	rjmp	.-898    	; 0x164a <__fp_round>

000019cc <modf>:
    19cc:	fa 01       	movw	r30, r20
    19ce:	dc 01       	movw	r26, r24
    19d0:	aa 0f       	add	r26, r26
    19d2:	bb 1f       	adc	r27, r27
    19d4:	9b 01       	movw	r18, r22
    19d6:	ac 01       	movw	r20, r24
    19d8:	bf 57       	subi	r27, 0x7F	; 127
    19da:	28 f4       	brcc	.+10     	; 0x19e6 <modf+0x1a>
    19dc:	22 27       	eor	r18, r18
    19de:	33 27       	eor	r19, r19
    19e0:	44 27       	eor	r20, r20
    19e2:	50 78       	andi	r21, 0x80	; 128
    19e4:	1f c0       	rjmp	.+62     	; 0x1a24 <modf+0x58>
    19e6:	b7 51       	subi	r27, 0x17	; 23
    19e8:	88 f4       	brcc	.+34     	; 0x1a0c <modf+0x40>
    19ea:	ab 2f       	mov	r26, r27
    19ec:	00 24       	eor	r0, r0
    19ee:	46 95       	lsr	r20
    19f0:	37 95       	ror	r19
    19f2:	27 95       	ror	r18
    19f4:	01 1c       	adc	r0, r1
    19f6:	a3 95       	inc	r26
    19f8:	d2 f3       	brmi	.-12     	; 0x19ee <modf+0x22>
    19fa:	00 20       	and	r0, r0
    19fc:	69 f0       	breq	.+26     	; 0x1a18 <modf+0x4c>
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	44 1f       	adc	r20, r20
    1a04:	b3 95       	inc	r27
    1a06:	da f3       	brmi	.-10     	; 0x19fe <modf+0x32>
    1a08:	0d d0       	rcall	.+26     	; 0x1a24 <modf+0x58>
    1a0a:	0d cd       	rjmp	.-1510   	; 0x1426 <__subsf3>
    1a0c:	61 30       	cpi	r22, 0x01	; 1
    1a0e:	71 05       	cpc	r23, r1
    1a10:	a0 e8       	ldi	r26, 0x80	; 128
    1a12:	8a 07       	cpc	r24, r26
    1a14:	b9 46       	sbci	r27, 0x69	; 105
    1a16:	30 f4       	brcc	.+12     	; 0x1a24 <modf+0x58>
    1a18:	9b 01       	movw	r18, r22
    1a1a:	ac 01       	movw	r20, r24
    1a1c:	66 27       	eor	r22, r22
    1a1e:	77 27       	eor	r23, r23
    1a20:	88 27       	eor	r24, r24
    1a22:	90 78       	andi	r25, 0x80	; 128
    1a24:	30 96       	adiw	r30, 0x00	; 0
    1a26:	21 f0       	breq	.+8      	; 0x1a30 <modf+0x64>
    1a28:	20 83       	st	Z, r18
    1a2a:	31 83       	std	Z+1, r19	; 0x01
    1a2c:	42 83       	std	Z+2, r20	; 0x02
    1a2e:	53 83       	std	Z+3, r21	; 0x03
    1a30:	08 95       	ret

00001a32 <__divsf3>:
    1a32:	0c d0       	rcall	.+24     	; 0x1a4c <__divsf3x>
    1a34:	0a ce       	rjmp	.-1004   	; 0x164a <__fp_round>
    1a36:	02 de       	rcall	.-1020   	; 0x163c <__fp_pscB>
    1a38:	40 f0       	brcs	.+16     	; 0x1a4a <__divsf3+0x18>
    1a3a:	f9 dd       	rcall	.-1038   	; 0x162e <__fp_pscA>
    1a3c:	30 f0       	brcs	.+12     	; 0x1a4a <__divsf3+0x18>
    1a3e:	21 f4       	brne	.+8      	; 0x1a48 <__divsf3+0x16>
    1a40:	5f 3f       	cpi	r21, 0xFF	; 255
    1a42:	19 f0       	breq	.+6      	; 0x1a4a <__divsf3+0x18>
    1a44:	eb cd       	rjmp	.-1066   	; 0x161c <__fp_inf>
    1a46:	51 11       	cpse	r21, r1
    1a48:	34 ce       	rjmp	.-920    	; 0x16b2 <__fp_szero>
    1a4a:	ee cd       	rjmp	.-1060   	; 0x1628 <__fp_nan>

00001a4c <__divsf3x>:
    1a4c:	0f de       	rcall	.-994    	; 0x166c <__fp_split3>
    1a4e:	98 f3       	brcs	.-26     	; 0x1a36 <__divsf3+0x4>

00001a50 <__divsf3_pse>:
    1a50:	99 23       	and	r25, r25
    1a52:	c9 f3       	breq	.-14     	; 0x1a46 <__divsf3+0x14>
    1a54:	55 23       	and	r21, r21
    1a56:	b1 f3       	breq	.-20     	; 0x1a44 <__divsf3+0x12>
    1a58:	95 1b       	sub	r25, r21
    1a5a:	55 0b       	sbc	r21, r21
    1a5c:	bb 27       	eor	r27, r27
    1a5e:	aa 27       	eor	r26, r26
    1a60:	62 17       	cp	r22, r18
    1a62:	73 07       	cpc	r23, r19
    1a64:	84 07       	cpc	r24, r20
    1a66:	38 f0       	brcs	.+14     	; 0x1a76 <__divsf3_pse+0x26>
    1a68:	9f 5f       	subi	r25, 0xFF	; 255
    1a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6c:	22 0f       	add	r18, r18
    1a6e:	33 1f       	adc	r19, r19
    1a70:	44 1f       	adc	r20, r20
    1a72:	aa 1f       	adc	r26, r26
    1a74:	a9 f3       	breq	.-22     	; 0x1a60 <__divsf3_pse+0x10>
    1a76:	33 d0       	rcall	.+102    	; 0x1ade <__divsf3_pse+0x8e>
    1a78:	0e 2e       	mov	r0, r30
    1a7a:	3a f0       	brmi	.+14     	; 0x1a8a <__divsf3_pse+0x3a>
    1a7c:	e0 e8       	ldi	r30, 0x80	; 128
    1a7e:	30 d0       	rcall	.+96     	; 0x1ae0 <__divsf3_pse+0x90>
    1a80:	91 50       	subi	r25, 0x01	; 1
    1a82:	50 40       	sbci	r21, 0x00	; 0
    1a84:	e6 95       	lsr	r30
    1a86:	00 1c       	adc	r0, r0
    1a88:	ca f7       	brpl	.-14     	; 0x1a7c <__divsf3_pse+0x2c>
    1a8a:	29 d0       	rcall	.+82     	; 0x1ade <__divsf3_pse+0x8e>
    1a8c:	fe 2f       	mov	r31, r30
    1a8e:	27 d0       	rcall	.+78     	; 0x1ade <__divsf3_pse+0x8e>
    1a90:	66 0f       	add	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	bb 1f       	adc	r27, r27
    1a98:	26 17       	cp	r18, r22
    1a9a:	37 07       	cpc	r19, r23
    1a9c:	48 07       	cpc	r20, r24
    1a9e:	ab 07       	cpc	r26, r27
    1aa0:	b0 e8       	ldi	r27, 0x80	; 128
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <__divsf3_pse+0x56>
    1aa4:	bb 0b       	sbc	r27, r27
    1aa6:	80 2d       	mov	r24, r0
    1aa8:	bf 01       	movw	r22, r30
    1aaa:	ff 27       	eor	r31, r31
    1aac:	93 58       	subi	r25, 0x83	; 131
    1aae:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab0:	2a f0       	brmi	.+10     	; 0x1abc <__divsf3_pse+0x6c>
    1ab2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ab4:	51 05       	cpc	r21, r1
    1ab6:	68 f0       	brcs	.+26     	; 0x1ad2 <__divsf3_pse+0x82>
    1ab8:	b1 cd       	rjmp	.-1182   	; 0x161c <__fp_inf>
    1aba:	fb cd       	rjmp	.-1034   	; 0x16b2 <__fp_szero>
    1abc:	5f 3f       	cpi	r21, 0xFF	; 255
    1abe:	ec f3       	brlt	.-6      	; 0x1aba <__divsf3_pse+0x6a>
    1ac0:	98 3e       	cpi	r25, 0xE8	; 232
    1ac2:	dc f3       	brlt	.-10     	; 0x1aba <__divsf3_pse+0x6a>
    1ac4:	86 95       	lsr	r24
    1ac6:	77 95       	ror	r23
    1ac8:	67 95       	ror	r22
    1aca:	b7 95       	ror	r27
    1acc:	f7 95       	ror	r31
    1ace:	9f 5f       	subi	r25, 0xFF	; 255
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__divsf3_pse+0x74>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	91 1d       	adc	r25, r1
    1ad6:	96 95       	lsr	r25
    1ad8:	87 95       	ror	r24
    1ada:	97 f9       	bld	r25, 7
    1adc:	08 95       	ret
    1ade:	e1 e0       	ldi	r30, 0x01	; 1
    1ae0:	66 0f       	add	r22, r22
    1ae2:	77 1f       	adc	r23, r23
    1ae4:	88 1f       	adc	r24, r24
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	62 17       	cp	r22, r18
    1aea:	73 07       	cpc	r23, r19
    1aec:	84 07       	cpc	r24, r20
    1aee:	ba 07       	cpc	r27, r26
    1af0:	20 f0       	brcs	.+8      	; 0x1afa <__divsf3_pse+0xaa>
    1af2:	62 1b       	sub	r22, r18
    1af4:	73 0b       	sbc	r23, r19
    1af6:	84 0b       	sbc	r24, r20
    1af8:	ba 0b       	sbc	r27, r26
    1afa:	ee 1f       	adc	r30, r30
    1afc:	88 f7       	brcc	.-30     	; 0x1ae0 <__divsf3_pse+0x90>
    1afe:	e0 95       	com	r30
    1b00:	08 95       	ret

00001b02 <__fp_mpack>:
    1b02:	9f 3f       	cpi	r25, 0xFF	; 255
    1b04:	31 f0       	breq	.+12     	; 0x1b12 <__fp_mpack_finite+0xc>

00001b06 <__fp_mpack_finite>:
    1b06:	91 50       	subi	r25, 0x01	; 1
    1b08:	20 f4       	brcc	.+8      	; 0x1b12 <__fp_mpack_finite+0xc>
    1b0a:	87 95       	ror	r24
    1b0c:	77 95       	ror	r23
    1b0e:	67 95       	ror	r22
    1b10:	b7 95       	ror	r27
    1b12:	88 0f       	add	r24, r24
    1b14:	91 1d       	adc	r25, r1
    1b16:	96 95       	lsr	r25
    1b18:	87 95       	ror	r24
    1b1a:	97 f9       	bld	r25, 7
    1b1c:	08 95       	ret

00001b1e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1b1e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1b20:	91 8d       	ldd	r25, Z+25	; 0x19
    1b22:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b24:	89 2f       	mov	r24, r25
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	80 5c       	subi	r24, 0xC0	; 192
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	82 1b       	sub	r24, r18
    1b2e:	91 09       	sbc	r25, r1
}
    1b30:	8f 73       	andi	r24, 0x3F	; 63
    1b32:	99 27       	eor	r25, r25
    1b34:	08 95       	ret

00001b36 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1b36:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b38:	91 8d       	ldd	r25, Z+25	; 0x19
    1b3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b3c:	98 17       	cp	r25, r24
    1b3e:	31 f0       	breq	.+12     	; 0x1b4c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1b40:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b42:	e8 0f       	add	r30, r24
    1b44:	f1 1d       	adc	r31, r1
    1b46:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b4c:	8f ef       	ldi	r24, 0xFF	; 255
    1b4e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1b50:	08 95       	ret

00001b52 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1b52:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b54:	91 8d       	ldd	r25, Z+25	; 0x19
    1b56:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b58:	98 17       	cp	r25, r24
    1b5a:	61 f0       	breq	.+24     	; 0x1b74 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1b5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b5e:	df 01       	movw	r26, r30
    1b60:	a8 0f       	add	r26, r24
    1b62:	b1 1d       	adc	r27, r1
    1b64:	5d 96       	adiw	r26, 0x1d	; 29
    1b66:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1b68:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b6a:	9f 5f       	subi	r25, 0xFF	; 255
    1b6c:	9f 73       	andi	r25, 0x3F	; 63
    1b6e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1b78:	08 95       	ret

00001b7a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1b7e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1b80:	25 2f       	mov	r18, r21
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	84 2f       	mov	r24, r20
    1b86:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1b88:	82 1b       	sub	r24, r18
    1b8a:	93 0b       	sbc	r25, r19
    1b8c:	54 17       	cp	r21, r20
    1b8e:	10 f0       	brcs	.+4      	; 0x1b94 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1b90:	cf 96       	adiw	r24, 0x3f	; 63
    1b92:	08 95       	ret
  return tail - head - 1;
    1b94:	01 97       	sbiw	r24, 0x01	; 1
}
    1b96:	08 95       	ret

00001b98 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b98:	8e e5       	ldi	r24, 0x5E	; 94
    1b9a:	9f e0       	ldi	r25, 0x0F	; 15
    1b9c:	89 2b       	or	r24, r25
    1b9e:	39 f0       	breq	.+14     	; 0x1bae <_Z14serialEventRunv+0x16>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	89 2b       	or	r24, r25
    1ba6:	19 f0       	breq	.+6      	; 0x1bae <_Z14serialEventRunv+0x16>
    1ba8:	89 d1       	rcall	.+786    	; 0x1ebc <_Z17Serial0_availablev>
    1baa:	81 11       	cpse	r24, r1
    1bac:	24 c0       	rjmp	.+72     	; 0x1bf6 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1bae:	83 ef       	ldi	r24, 0xF3	; 243
    1bb0:	9f e0       	ldi	r25, 0x0F	; 15
    1bb2:	89 2b       	or	r24, r25
    1bb4:	39 f0       	breq	.+14     	; 0x1bc4 <_Z14serialEventRunv+0x2c>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	89 2b       	or	r24, r25
    1bbc:	19 f0       	breq	.+6      	; 0x1bc4 <_Z14serialEventRunv+0x2c>
    1bbe:	13 d2       	rcall	.+1062   	; 0x1fe6 <_Z17Serial1_availablev>
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	1c c0       	rjmp	.+56     	; 0x1bfc <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	89 2b       	or	r24, r25
    1bca:	41 f0       	breq	.+16     	; 0x1bdc <_Z14serialEventRunv+0x44>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	89 2b       	or	r24, r25
    1bd2:	21 f0       	breq	.+8      	; 0x1bdc <_Z14serialEventRunv+0x44>
    1bd4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1bd8:	81 11       	cpse	r24, r1
    1bda:	13 c0       	rjmp	.+38     	; 0x1c02 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	89 2b       	or	r24, r25
    1be2:	a1 f0       	breq	.+40     	; 0x1c0c <_Z14serialEventRunv+0x74>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	89 2b       	or	r24, r25
    1bea:	81 f0       	breq	.+32     	; 0x1c0c <_Z14serialEventRunv+0x74>
    1bec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	0a c0       	rjmp	.+20     	; 0x1c08 <_Z14serialEventRunv+0x70>
    1bf4:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1bf6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1bfa:	d9 cf       	rjmp	.-78     	; 0x1bae <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1bfc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1c00:	e1 cf       	rjmp	.-62     	; 0x1bc4 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1c02:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1c06:	ea cf       	rjmp	.-44     	; 0x1bdc <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1c08:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1c0c:	08 95       	ret

00001c0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1c0e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1c10:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c12:	df 01       	movw	r26, r30
    1c14:	a8 0f       	add	r26, r24
    1c16:	b1 1d       	adc	r27, r1
    1c18:	a3 5a       	subi	r26, 0xA3	; 163
    1c1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c1c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1c1e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	8f 73       	andi	r24, 0x3F	; 63
    1c26:	99 27       	eor	r25, r25
    1c28:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1c2a:	a6 89       	ldd	r26, Z+22	; 0x16
    1c2c:	b7 89       	ldd	r27, Z+23	; 0x17
    1c2e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1c30:	a0 89       	ldd	r26, Z+16	; 0x10
    1c32:	b1 89       	ldd	r27, Z+17	; 0x11
    1c34:	8c 91       	ld	r24, X
    1c36:	83 70       	andi	r24, 0x03	; 3
    1c38:	80 64       	ori	r24, 0x40	; 64
    1c3a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1c3c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c3e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c40:	98 13       	cpse	r25, r24
    1c42:	06 c0       	rjmp	.+12     	; 0x1c50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1c44:	02 88       	ldd	r0, Z+18	; 0x12
    1c46:	f3 89       	ldd	r31, Z+19	; 0x13
    1c48:	e0 2d       	mov	r30, r0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8f 7d       	andi	r24, 0xDF	; 223
    1c4e:	80 83       	st	Z, r24
    1c50:	08 95       	ret

00001c52 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	ec 01       	movw	r28, r24
  _written = true;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1c64:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c66:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c68:	98 13       	cpse	r25, r24
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <_ZN14HardwareSerial5writeEh+0x24>
    1c6c:	e8 89       	ldd	r30, Y+16	; 0x10
    1c6e:	f9 89       	ldd	r31, Y+17	; 0x11
    1c70:	80 81       	ld	r24, Z
    1c72:	85 fd       	sbrc	r24, 5
    1c74:	25 c0       	rjmp	.+74     	; 0x1cc0 <_ZN14HardwareSerial5writeEh+0x6e>
    1c76:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1c78:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1c7a:	10 e0       	ldi	r17, 0x00	; 0
    1c7c:	0f 5f       	subi	r16, 0xFF	; 255
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	0f 73       	andi	r16, 0x3F	; 63
    1c82:	11 27       	eor	r17, r17
    1c84:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1c86:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c88:	e8 12       	cpse	r14, r24
    1c8a:	0b c0       	rjmp	.+22     	; 0x1ca2 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	07 fc       	sbrc	r0, 7
    1c90:	fa cf       	rjmp	.-12     	; 0x1c86 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1c92:	e8 89       	ldd	r30, Y+16	; 0x10
    1c94:	f9 89       	ldd	r31, Y+17	; 0x11
    1c96:	80 81       	ld	r24, Z
    1c98:	85 ff       	sbrs	r24, 5
    1c9a:	f5 cf       	rjmp	.-22     	; 0x1c86 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	b7 df       	rcall	.-146    	; 0x1c0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ca0:	f2 cf       	rjmp	.-28     	; 0x1c86 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1ca2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e8 0f       	add	r30, r24
    1ca8:	f1 1d       	adc	r31, r1
    1caa:	e3 5a       	subi	r30, 0xA3	; 163
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1cb0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cb2:	f8 94       	cli
    _tx_buffer_head = i;
    1cb4:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1cb6:	ea 89       	ldd	r30, Y+18	; 0x12
    1cb8:	fb 89       	ldd	r31, Y+19	; 0x13
    1cba:	80 81       	ld	r24, Z
    1cbc:	80 62       	ori	r24, 0x20	; 32
    1cbe:	0a c0       	rjmp	.+20     	; 0x1cd4 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1cc0:	9f b7       	in	r25, 0x3f	; 63
    1cc2:	f8 94       	cli
      *_udr = c;
    1cc4:	ee 89       	ldd	r30, Y+22	; 0x16
    1cc6:	ff 89       	ldd	r31, Y+23	; 0x17
    1cc8:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1cca:	e8 89       	ldd	r30, Y+16	; 0x10
    1ccc:	f9 89       	ldd	r31, Y+17	; 0x11
    1cce:	80 81       	ld	r24, Z
    1cd0:	83 70       	andi	r24, 0x03	; 3
    1cd2:	80 64       	ori	r24, 0x40	; 64
    1cd4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1cd6:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	ff 90       	pop	r15
    1ce6:	ef 90       	pop	r14
    1ce8:	08 95       	ret

00001cea <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1cf0:	88 8d       	ldd	r24, Y+24	; 0x18
    1cf2:	88 23       	and	r24, r24
    1cf4:	c1 f0       	breq	.+48     	; 0x1d26 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1cf6:	ea 89       	ldd	r30, Y+18	; 0x12
    1cf8:	fb 89       	ldd	r31, Y+19	; 0x13
    1cfa:	80 81       	ld	r24, Z
    1cfc:	85 fd       	sbrc	r24, 5
    1cfe:	05 c0       	rjmp	.+10     	; 0x1d0a <_ZN14HardwareSerial5flushEv+0x20>
    1d00:	a8 89       	ldd	r26, Y+16	; 0x10
    1d02:	b9 89       	ldd	r27, Y+17	; 0x11
    1d04:	8c 91       	ld	r24, X
    1d06:	86 fd       	sbrc	r24, 6
    1d08:	0e c0       	rjmp	.+28     	; 0x1d26 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	07 fc       	sbrc	r0, 7
    1d0e:	f5 cf       	rjmp	.-22     	; 0x1cfa <_ZN14HardwareSerial5flushEv+0x10>
    1d10:	80 81       	ld	r24, Z
    1d12:	85 ff       	sbrs	r24, 5
    1d14:	f2 cf       	rjmp	.-28     	; 0x1cfa <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1d16:	a8 89       	ldd	r26, Y+16	; 0x10
    1d18:	b9 89       	ldd	r27, Y+17	; 0x11
    1d1a:	8c 91       	ld	r24, X
    1d1c:	85 ff       	sbrs	r24, 5
    1d1e:	ed cf       	rjmp	.-38     	; 0x1cfa <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1d20:	ce 01       	movw	r24, r28
    1d22:	75 df       	rcall	.-278    	; 0x1c0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d24:	e8 cf       	rjmp	.-48     	; 0x1cf6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	08 95       	ret

00001d2c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	ec 01       	movw	r28, r24
    1d3c:	6a 01       	movw	r12, r20
    1d3e:	7b 01       	movw	r14, r22
    1d40:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1d42:	e8 89       	ldd	r30, Y+16	; 0x10
    1d44:	f9 89       	ldd	r31, Y+17	; 0x11
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1d4a:	41 15       	cp	r20, r1
    1d4c:	51 4e       	sbci	r21, 0xE1	; 225
    1d4e:	61 05       	cpc	r22, r1
    1d50:	71 05       	cpc	r23, r1
    1d52:	b1 f0       	breq	.+44     	; 0x1d80 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	79 e0       	ldi	r23, 0x09	; 9
    1d58:	8d e3       	ldi	r24, 0x3D	; 61
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a7 01       	movw	r20, r14
    1d5e:	96 01       	movw	r18, r12
    1d60:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__udivmodsi4>
    1d64:	da 01       	movw	r26, r20
    1d66:	c9 01       	movw	r24, r18
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	a1 09       	sbc	r26, r1
    1d6c:	b1 09       	sbc	r27, r1
    1d6e:	b6 95       	lsr	r27
    1d70:	a7 95       	ror	r26
    1d72:	97 95       	ror	r25
    1d74:	87 95       	ror	r24
    1d76:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1d78:	21 15       	cp	r18, r1
    1d7a:	80 e1       	ldi	r24, 0x10	; 16
    1d7c:	38 07       	cpc	r19, r24
    1d7e:	a8 f0       	brcs	.+42     	; 0x1daa <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1d80:	e8 89       	ldd	r30, Y+16	; 0x10
    1d82:	f9 89       	ldd	r31, Y+17	; 0x11
    1d84:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1d86:	60 e8       	ldi	r22, 0x80	; 128
    1d88:	74 e8       	ldi	r23, 0x84	; 132
    1d8a:	8e e1       	ldi	r24, 0x1E	; 30
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a7 01       	movw	r20, r14
    1d90:	96 01       	movw	r18, r12
    1d92:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__udivmodsi4>
    1d96:	da 01       	movw	r26, r20
    1d98:	c9 01       	movw	r24, r18
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	a1 09       	sbc	r26, r1
    1d9e:	b1 09       	sbc	r27, r1
    1da0:	b6 95       	lsr	r27
    1da2:	a7 95       	ror	r26
    1da4:	97 95       	ror	r25
    1da6:	87 95       	ror	r24
    1da8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1daa:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dac:	fd 85       	ldd	r31, Y+13	; 0x0d
    1dae:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1db0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1db2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1db4:	20 83       	st	Z, r18

  _written = false;
    1db6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1db8:	ec 89       	ldd	r30, Y+20	; 0x14
    1dba:	fd 89       	ldd	r31, Y+21	; 0x15
    1dbc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1dbe:	ea 89       	ldd	r30, Y+18	; 0x12
    1dc0:	fb 89       	ldd	r31, Y+19	; 0x13
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 61       	ori	r24, 0x10	; 16
    1dc6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1dc8:	ea 89       	ldd	r30, Y+18	; 0x12
    1dca:	fb 89       	ldd	r31, Y+19	; 0x13
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 60       	ori	r24, 0x08	; 8
    1dd0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1dd2:	ea 89       	ldd	r30, Y+18	; 0x12
    1dd4:	fb 89       	ldd	r31, Y+19	; 0x13
    1dd6:	80 81       	ld	r24, Z
    1dd8:	80 68       	ori	r24, 0x80	; 128
    1dda:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1ddc:	ea 89       	ldd	r30, Y+18	; 0x12
    1dde:	fb 89       	ldd	r31, Y+19	; 0x13
    1de0:	80 81       	ld	r24, Z
    1de2:	8f 7d       	andi	r24, 0xDF	; 223
    1de4:	80 83       	st	Z, r24
}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	df 90       	pop	r13
    1df2:	cf 90       	pop	r12
    1df4:	08 95       	ret

00001df6 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	08 95       	ret

00001dfc <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1dfc:	08 95       	ret

00001dfe <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1dfe:	1f 92       	push	r1
    1e00:	0f 92       	push	r0
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	0f 92       	push	r0
    1e06:	11 24       	eor	r1, r1
    1e08:	0b b6       	in	r0, 0x3b	; 59
    1e0a:	0f 92       	push	r0
    1e0c:	2f 93       	push	r18
    1e0e:	8f 93       	push	r24
    1e10:	9f 93       	push	r25
    1e12:	ef 93       	push	r30
    1e14:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e16:	e0 91 d7 03 	lds	r30, 0x03D7	; 0x8003d7 <Serial+0x10>
    1e1a:	f0 91 d8 03 	lds	r31, 0x03D8	; 0x8003d8 <Serial+0x11>
    1e1e:	80 81       	ld	r24, Z
    1e20:	e0 91 dd 03 	lds	r30, 0x03DD	; 0x8003dd <Serial+0x16>
    1e24:	f0 91 de 03 	lds	r31, 0x03DE	; 0x8003de <Serial+0x17>
    1e28:	82 fd       	sbrc	r24, 2
    1e2a:	12 c0       	rjmp	.+36     	; 0x1e50 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1e2c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e2e:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <Serial+0x19>
    1e32:	8f 5f       	subi	r24, 0xFF	; 255
    1e34:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1e36:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <Serial+0x1a>
    1e3a:	82 17       	cp	r24, r18
    1e3c:	51 f0       	breq	.+20     	; 0x1e52 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1e3e:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <Serial+0x19>
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	e9 53       	subi	r30, 0x39	; 57
    1e46:	fc 4f       	sbci	r31, 0xFC	; 252
    1e48:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1e4a:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <Serial+0x19>
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1e50:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1e52:	ff 91       	pop	r31
    1e54:	ef 91       	pop	r30
    1e56:	9f 91       	pop	r25
    1e58:	8f 91       	pop	r24
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0b be       	out	0x3b, r0	; 59
    1e60:	0f 90       	pop	r0
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	0f 90       	pop	r0
    1e66:	1f 90       	pop	r1
    1e68:	18 95       	reti

00001e6a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1e6a:	1f 92       	push	r1
    1e6c:	0f 92       	push	r0
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	0f 92       	push	r0
    1e72:	11 24       	eor	r1, r1
    1e74:	0b b6       	in	r0, 0x3b	; 59
    1e76:	0f 92       	push	r0
    1e78:	2f 93       	push	r18
    1e7a:	3f 93       	push	r19
    1e7c:	4f 93       	push	r20
    1e7e:	5f 93       	push	r21
    1e80:	6f 93       	push	r22
    1e82:	7f 93       	push	r23
    1e84:	8f 93       	push	r24
    1e86:	9f 93       	push	r25
    1e88:	af 93       	push	r26
    1e8a:	bf 93       	push	r27
    1e8c:	ef 93       	push	r30
    1e8e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1e90:	87 ec       	ldi	r24, 0xC7	; 199
    1e92:	93 e0       	ldi	r25, 0x03	; 3
    1e94:	bc de       	rcall	.-648    	; 0x1c0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1e96:	ff 91       	pop	r31
    1e98:	ef 91       	pop	r30
    1e9a:	bf 91       	pop	r27
    1e9c:	af 91       	pop	r26
    1e9e:	9f 91       	pop	r25
    1ea0:	8f 91       	pop	r24
    1ea2:	7f 91       	pop	r23
    1ea4:	6f 91       	pop	r22
    1ea6:	5f 91       	pop	r21
    1ea8:	4f 91       	pop	r20
    1eaa:	3f 91       	pop	r19
    1eac:	2f 91       	pop	r18
    1eae:	0f 90       	pop	r0
    1eb0:	0b be       	out	0x3b, r0	; 59
    1eb2:	0f 90       	pop	r0
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	0f 90       	pop	r0
    1eb8:	1f 90       	pop	r1
    1eba:	18 95       	reti

00001ebc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1ebc:	87 ec       	ldi	r24, 0xC7	; 199
    1ebe:	93 e0       	ldi	r25, 0x03	; 3
    1ec0:	2e de       	rcall	.-932    	; 0x1b1e <_ZN14HardwareSerial9availableEv>
    1ec2:	21 e0       	ldi	r18, 0x01	; 1
    1ec4:	89 2b       	or	r24, r25
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <_Z17Serial0_availablev+0xe>
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
}
    1eca:	82 2f       	mov	r24, r18
    1ecc:	08 95       	ret

00001ece <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ece:	e7 ec       	ldi	r30, 0xC7	; 199
    1ed0:	f3 e0       	ldi	r31, 0x03	; 3
    1ed2:	13 82       	std	Z+3, r1	; 0x03
    1ed4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1ed6:	88 ee       	ldi	r24, 0xE8	; 232
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	84 83       	std	Z+4, r24	; 0x04
    1ee0:	95 83       	std	Z+5, r25	; 0x05
    1ee2:	a6 83       	std	Z+6, r26	; 0x06
    1ee4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1ee6:	80 e3       	ldi	r24, 0x30	; 48
    1ee8:	93 e0       	ldi	r25, 0x03	; 3
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
    1eee:	85 ec       	ldi	r24, 0xC5	; 197
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	95 87       	std	Z+13, r25	; 0x0d
    1ef4:	84 87       	std	Z+12, r24	; 0x0c
    1ef6:	84 ec       	ldi	r24, 0xC4	; 196
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	97 87       	std	Z+15, r25	; 0x0f
    1efc:	86 87       	std	Z+14, r24	; 0x0e
    1efe:	80 ec       	ldi	r24, 0xC0	; 192
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	91 8b       	std	Z+17, r25	; 0x11
    1f04:	80 8b       	std	Z+16, r24	; 0x10
    1f06:	81 ec       	ldi	r24, 0xC1	; 193
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	93 8b       	std	Z+19, r25	; 0x13
    1f0c:	82 8b       	std	Z+18, r24	; 0x12
    1f0e:	82 ec       	ldi	r24, 0xC2	; 194
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	95 8b       	std	Z+21, r25	; 0x15
    1f14:	84 8b       	std	Z+20, r24	; 0x14
    1f16:	86 ec       	ldi	r24, 0xC6	; 198
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	97 8b       	std	Z+23, r25	; 0x17
    1f1c:	86 8b       	std	Z+22, r24	; 0x16
    1f1e:	11 8e       	std	Z+25, r1	; 0x19
    1f20:	12 8e       	std	Z+26, r1	; 0x1a
    1f22:	13 8e       	std	Z+27, r1	; 0x1b
    1f24:	14 8e       	std	Z+28, r1	; 0x1c
    1f26:	08 95       	ret

00001f28 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1f28:	1f 92       	push	r1
    1f2a:	0f 92       	push	r0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	0f 92       	push	r0
    1f30:	11 24       	eor	r1, r1
    1f32:	0b b6       	in	r0, 0x3b	; 59
    1f34:	0f 92       	push	r0
    1f36:	2f 93       	push	r18
    1f38:	8f 93       	push	r24
    1f3a:	9f 93       	push	r25
    1f3c:	ef 93       	push	r30
    1f3e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1f40:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <Serial1+0x10>
    1f44:	f0 91 75 04 	lds	r31, 0x0475	; 0x800475 <Serial1+0x11>
    1f48:	80 81       	ld	r24, Z
    1f4a:	e0 91 7a 04 	lds	r30, 0x047A	; 0x80047a <Serial1+0x16>
    1f4e:	f0 91 7b 04 	lds	r31, 0x047B	; 0x80047b <Serial1+0x17>
    1f52:	82 fd       	sbrc	r24, 2
    1f54:	12 c0       	rjmp	.+36     	; 0x1f7a <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1f56:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1f58:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <Serial1+0x19>
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1f60:	20 91 7e 04 	lds	r18, 0x047E	; 0x80047e <Serial1+0x1a>
    1f64:	82 17       	cp	r24, r18
    1f66:	51 f0       	breq	.+20     	; 0x1f7c <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1f68:	e0 91 7d 04 	lds	r30, 0x047D	; 0x80047d <Serial1+0x19>
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	ec 59       	subi	r30, 0x9C	; 156
    1f70:	fb 4f       	sbci	r31, 0xFB	; 251
    1f72:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1f74:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <Serial1+0x19>
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1f7a:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1f7c:	ff 91       	pop	r31
    1f7e:	ef 91       	pop	r30
    1f80:	9f 91       	pop	r25
    1f82:	8f 91       	pop	r24
    1f84:	2f 91       	pop	r18
    1f86:	0f 90       	pop	r0
    1f88:	0b be       	out	0x3b, r0	; 59
    1f8a:	0f 90       	pop	r0
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	0f 90       	pop	r0
    1f90:	1f 90       	pop	r1
    1f92:	18 95       	reti

00001f94 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1f94:	1f 92       	push	r1
    1f96:	0f 92       	push	r0
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	0f 92       	push	r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	0b b6       	in	r0, 0x3b	; 59
    1fa0:	0f 92       	push	r0
    1fa2:	2f 93       	push	r18
    1fa4:	3f 93       	push	r19
    1fa6:	4f 93       	push	r20
    1fa8:	5f 93       	push	r21
    1faa:	6f 93       	push	r22
    1fac:	7f 93       	push	r23
    1fae:	8f 93       	push	r24
    1fb0:	9f 93       	push	r25
    1fb2:	af 93       	push	r26
    1fb4:	bf 93       	push	r27
    1fb6:	ef 93       	push	r30
    1fb8:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1fba:	84 e6       	ldi	r24, 0x64	; 100
    1fbc:	94 e0       	ldi	r25, 0x04	; 4
    1fbe:	27 de       	rcall	.-946    	; 0x1c0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1fc0:	ff 91       	pop	r31
    1fc2:	ef 91       	pop	r30
    1fc4:	bf 91       	pop	r27
    1fc6:	af 91       	pop	r26
    1fc8:	9f 91       	pop	r25
    1fca:	8f 91       	pop	r24
    1fcc:	7f 91       	pop	r23
    1fce:	6f 91       	pop	r22
    1fd0:	5f 91       	pop	r21
    1fd2:	4f 91       	pop	r20
    1fd4:	3f 91       	pop	r19
    1fd6:	2f 91       	pop	r18
    1fd8:	0f 90       	pop	r0
    1fda:	0b be       	out	0x3b, r0	; 59
    1fdc:	0f 90       	pop	r0
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	0f 90       	pop	r0
    1fe2:	1f 90       	pop	r1
    1fe4:	18 95       	reti

00001fe6 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1fe6:	84 e6       	ldi	r24, 0x64	; 100
    1fe8:	94 e0       	ldi	r25, 0x04	; 4
    1fea:	99 dd       	rcall	.-1230   	; 0x1b1e <_ZN14HardwareSerial9availableEv>
    1fec:	21 e0       	ldi	r18, 0x01	; 1
    1fee:	89 2b       	or	r24, r25
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <_Z17Serial1_availablev+0xe>
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
}
    1ff4:	82 2f       	mov	r24, r18
    1ff6:	08 95       	ret

00001ff8 <_GLOBAL__sub_I___vector_36>:
    1ff8:	e4 e6       	ldi	r30, 0x64	; 100
    1ffa:	f4 e0       	ldi	r31, 0x04	; 4
    1ffc:	13 82       	std	Z+3, r1	; 0x03
    1ffe:	12 82       	std	Z+2, r1	; 0x02
    2000:	88 ee       	ldi	r24, 0xE8	; 232
    2002:	93 e0       	ldi	r25, 0x03	; 3
    2004:	a0 e0       	ldi	r26, 0x00	; 0
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	84 83       	std	Z+4, r24	; 0x04
    200a:	95 83       	std	Z+5, r25	; 0x05
    200c:	a6 83       	std	Z+6, r26	; 0x06
    200e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2010:	80 e3       	ldi	r24, 0x30	; 48
    2012:	93 e0       	ldi	r25, 0x03	; 3
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
    2018:	8d ec       	ldi	r24, 0xCD	; 205
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	95 87       	std	Z+13, r25	; 0x0d
    201e:	84 87       	std	Z+12, r24	; 0x0c
    2020:	8c ec       	ldi	r24, 0xCC	; 204
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	97 87       	std	Z+15, r25	; 0x0f
    2026:	86 87       	std	Z+14, r24	; 0x0e
    2028:	88 ec       	ldi	r24, 0xC8	; 200
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	91 8b       	std	Z+17, r25	; 0x11
    202e:	80 8b       	std	Z+16, r24	; 0x10
    2030:	89 ec       	ldi	r24, 0xC9	; 201
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	93 8b       	std	Z+19, r25	; 0x13
    2036:	82 8b       	std	Z+18, r24	; 0x12
    2038:	8a ec       	ldi	r24, 0xCA	; 202
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	95 8b       	std	Z+21, r25	; 0x15
    203e:	84 8b       	std	Z+20, r24	; 0x14
    2040:	8e ec       	ldi	r24, 0xCE	; 206
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	97 8b       	std	Z+23, r25	; 0x17
    2046:	86 8b       	std	Z+22, r24	; 0x16
    2048:	11 8e       	std	Z+25, r1	; 0x19
    204a:	12 8e       	std	Z+26, r1	; 0x1a
    204c:	13 8e       	std	Z+27, r1	; 0x1b
    204e:	14 8e       	std	Z+28, r1	; 0x1c
    2050:	08 95       	ret

00002052 <initVariant>:
    2052:	08 95       	ret

00002054 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2054:	d8 d1       	rcall	.+944    	; 0x2406 <init>

	initVariant();
    2056:	fd df       	rcall	.-6      	; 0x2052 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2058:	2b d9       	rcall	.-3498   	; 0x12b0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    205a:	cc ec       	ldi	r28, 0xCC	; 204
    205c:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    205e:	a5 d8       	rcall	.-3766   	; 0x11aa <loop>
		if (serialEventRun) serialEventRun();
    2060:	20 97       	sbiw	r28, 0x00	; 0
    2062:	e9 f3       	breq	.-6      	; 0x205e <main+0xa>
    2064:	99 dd       	rcall	.-1230   	; 0x1b98 <_Z14serialEventRunv>
    2066:	fb cf       	rjmp	.-10     	; 0x205e <main+0xa>

00002068 <_ZN5Print5writeEPKhj>:
    2068:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    206a:	df 92       	push	r13
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	6c 01       	movw	r12, r24
    207a:	7a 01       	movw	r14, r20
    207c:	8b 01       	movw	r16, r22
    207e:	c0 e0       	ldi	r28, 0x00	; 0
    2080:	d0 e0       	ldi	r29, 0x00	; 0
    2082:	ce 15       	cp	r28, r14
    2084:	df 05       	cpc	r29, r15
    2086:	81 f0       	breq	.+32     	; 0x20a8 <_ZN5Print5writeEPKhj+0x40>
    2088:	d8 01       	movw	r26, r16
    208a:	6d 91       	ld	r22, X+
    208c:	8d 01       	movw	r16, r26
    208e:	d6 01       	movw	r26, r12
    2090:	ed 91       	ld	r30, X+
    2092:	fc 91       	ld	r31, X
    2094:	01 90       	ld	r0, Z+
    2096:	f0 81       	ld	r31, Z
    2098:	e0 2d       	mov	r30, r0
    209a:	c6 01       	movw	r24, r12
    209c:	19 95       	eicall
    209e:	89 2b       	or	r24, r25
    20a0:	11 f0       	breq	.+4      	; 0x20a6 <_ZN5Print5writeEPKhj+0x3e>
    20a2:	21 96       	adiw	r28, 0x01	; 1
    20a4:	ee cf       	rjmp	.-36     	; 0x2082 <_ZN5Print5writeEPKhj+0x1a>
    20a6:	7e 01       	movw	r14, r28
    20a8:	c7 01       	movw	r24, r14
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	df 90       	pop	r13
    20b8:	cf 90       	pop	r12
    20ba:	08 95       	ret

000020bc <_ZN5Print5writeEPKc>:
    20bc:	61 15       	cp	r22, r1
    20be:	71 05       	cpc	r23, r1
    20c0:	79 f0       	breq	.+30     	; 0x20e0 <_ZN5Print5writeEPKc+0x24>
    20c2:	fb 01       	movw	r30, r22
    20c4:	01 90       	ld	r0, Z+
    20c6:	00 20       	and	r0, r0
    20c8:	e9 f7       	brne	.-6      	; 0x20c4 <_ZN5Print5writeEPKc+0x8>
    20ca:	31 97       	sbiw	r30, 0x01	; 1
    20cc:	af 01       	movw	r20, r30
    20ce:	46 1b       	sub	r20, r22
    20d0:	57 0b       	sbc	r21, r23
    20d2:	dc 01       	movw	r26, r24
    20d4:	ed 91       	ld	r30, X+
    20d6:	fc 91       	ld	r31, X
    20d8:	02 80       	ldd	r0, Z+2	; 0x02
    20da:	f3 81       	ldd	r31, Z+3	; 0x03
    20dc:	e0 2d       	mov	r30, r0
    20de:	19 94       	eijmp
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	08 95       	ret

000020e6 <_ZN5Print5printERK6String>:
    20e6:	db 01       	movw	r26, r22
    20e8:	14 96       	adiw	r26, 0x04	; 4
    20ea:	4d 91       	ld	r20, X+
    20ec:	5c 91       	ld	r21, X
    20ee:	15 97       	sbiw	r26, 0x05	; 5
    20f0:	6d 91       	ld	r22, X+
    20f2:	7c 91       	ld	r23, X
    20f4:	dc 01       	movw	r26, r24
    20f6:	ed 91       	ld	r30, X+
    20f8:	fc 91       	ld	r31, X
    20fa:	02 80       	ldd	r0, Z+2	; 0x02
    20fc:	f3 81       	ldd	r31, Z+3	; 0x03
    20fe:	e0 2d       	mov	r30, r0
    2100:	19 94       	eijmp

00002102 <_ZN5Print5printEPKc>:
    2102:	dc cf       	rjmp	.-72     	; 0x20bc <_ZN5Print5writeEPKc>

00002104 <_ZN5Print5printEc>:
    2104:	dc 01       	movw	r26, r24
    2106:	ed 91       	ld	r30, X+
    2108:	fc 91       	ld	r31, X
    210a:	01 90       	ld	r0, Z+
    210c:	f0 81       	ld	r31, Z
    210e:	e0 2d       	mov	r30, r0
    2110:	19 94       	eijmp

00002112 <_ZN5Print7printlnEv>:
    2112:	6e e3       	ldi	r22, 0x3E	; 62
    2114:	73 e0       	ldi	r23, 0x03	; 3
    2116:	d2 cf       	rjmp	.-92     	; 0x20bc <_ZN5Print5writeEPKc>

00002118 <_ZN5Print7printlnEPKc>:
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	ec 01       	movw	r28, r24
    2122:	cc df       	rcall	.-104    	; 0x20bc <_ZN5Print5writeEPKc>
    2124:	8c 01       	movw	r16, r24
    2126:	ce 01       	movw	r24, r28
    2128:	f4 df       	rcall	.-24     	; 0x2112 <_ZN5Print7printlnEv>
    212a:	80 0f       	add	r24, r16
    212c:	91 1f       	adc	r25, r17
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	08 95       	ret

00002138 <_ZN5Print11printNumberEmh>:
    2138:	8f 92       	push	r8
    213a:	9f 92       	push	r9
    213c:	af 92       	push	r10
    213e:	bf 92       	push	r11
    2140:	ef 92       	push	r14
    2142:	ff 92       	push	r15
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	a1 97       	sbiw	r28, 0x21	; 33
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	7c 01       	movw	r14, r24
    215e:	fa 01       	movw	r30, r20
    2160:	cb 01       	movw	r24, r22
    2162:	19 a2       	std	Y+33, r1	; 0x21
    2164:	22 30       	cpi	r18, 0x02	; 2
    2166:	08 f4       	brcc	.+2      	; 0x216a <_ZN5Print11printNumberEmh+0x32>
    2168:	2a e0       	ldi	r18, 0x0A	; 10
    216a:	8e 01       	movw	r16, r28
    216c:	0f 5d       	subi	r16, 0xDF	; 223
    216e:	1f 4f       	sbci	r17, 0xFF	; 255
    2170:	82 2e       	mov	r8, r18
    2172:	91 2c       	mov	r9, r1
    2174:	a1 2c       	mov	r10, r1
    2176:	b1 2c       	mov	r11, r1
    2178:	bf 01       	movw	r22, r30
    217a:	a5 01       	movw	r20, r10
    217c:	94 01       	movw	r18, r8
    217e:	ce d6       	rcall	.+3484   	; 0x2f1c <__udivmodsi4>
    2180:	f9 01       	movw	r30, r18
    2182:	ca 01       	movw	r24, r20
    2184:	01 50       	subi	r16, 0x01	; 1
    2186:	11 09       	sbc	r17, r1
    2188:	6a 30       	cpi	r22, 0x0A	; 10
    218a:	10 f4       	brcc	.+4      	; 0x2190 <_ZN5Print11printNumberEmh+0x58>
    218c:	60 5d       	subi	r22, 0xD0	; 208
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <_ZN5Print11printNumberEmh+0x5a>
    2190:	69 5c       	subi	r22, 0xC9	; 201
    2192:	d8 01       	movw	r26, r16
    2194:	6c 93       	st	X, r22
    2196:	23 2b       	or	r18, r19
    2198:	24 2b       	or	r18, r20
    219a:	25 2b       	or	r18, r21
    219c:	69 f7       	brne	.-38     	; 0x2178 <_ZN5Print11printNumberEmh+0x40>
    219e:	b8 01       	movw	r22, r16
    21a0:	c7 01       	movw	r24, r14
    21a2:	8c df       	rcall	.-232    	; 0x20bc <_ZN5Print5writeEPKc>
    21a4:	a1 96       	adiw	r28, 0x21	; 33
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	bf 90       	pop	r11
    21be:	af 90       	pop	r10
    21c0:	9f 90       	pop	r9
    21c2:	8f 90       	pop	r8
    21c4:	08 95       	ret

000021c6 <_ZN5Print5printEmi>:
    21c6:	21 15       	cp	r18, r1
    21c8:	31 05       	cpc	r19, r1
    21ca:	41 f4       	brne	.+16     	; 0x21dc <_ZN5Print5printEmi+0x16>
    21cc:	dc 01       	movw	r26, r24
    21ce:	ed 91       	ld	r30, X+
    21d0:	fc 91       	ld	r31, X
    21d2:	01 90       	ld	r0, Z+
    21d4:	f0 81       	ld	r31, Z
    21d6:	e0 2d       	mov	r30, r0
    21d8:	64 2f       	mov	r22, r20
    21da:	19 94       	eijmp
    21dc:	ad cf       	rjmp	.-166    	; 0x2138 <_ZN5Print11printNumberEmh>

000021de <_ZN5Print5printEhi>:
    21de:	9a 01       	movw	r18, r20
    21e0:	46 2f       	mov	r20, r22
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	ee cf       	rjmp	.-36     	; 0x21c6 <_ZN5Print5printEmi>

000021ea <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    21ea:	cf 92       	push	r12
    21ec:	df 92       	push	r13
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
  if (base == 0) {
    21fa:	21 15       	cp	r18, r1
    21fc:	31 05       	cpc	r19, r1
    21fe:	81 f4       	brne	.+32     	; 0x2220 <__stack+0x21>
    return write(n);
    2200:	dc 01       	movw	r26, r24
    2202:	ed 91       	ld	r30, X+
    2204:	fc 91       	ld	r31, X
    2206:	01 90       	ld	r0, Z+
    2208:	f0 81       	ld	r31, Z
    220a:	e0 2d       	mov	r30, r0
    220c:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	1f 91       	pop	r17
    2214:	0f 91       	pop	r16
    2216:	ff 90       	pop	r15
    2218:	ef 90       	pop	r14
    221a:	df 90       	pop	r13
    221c:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    221e:	19 94       	eijmp
  } else if (base == 10) {
    2220:	2a 30       	cpi	r18, 0x0A	; 10
    2222:	31 05       	cpc	r19, r1
    2224:	f1 f4       	brne	.+60     	; 0x2262 <__stack+0x63>
    if (n < 0) {
    2226:	77 ff       	sbrs	r23, 7
    2228:	1b c0       	rjmp	.+54     	; 0x2260 <__stack+0x61>
    222a:	6a 01       	movw	r12, r20
    222c:	7b 01       	movw	r14, r22
    222e:	ec 01       	movw	r28, r24
      int t = print('-');
    2230:	6d e2       	ldi	r22, 0x2D	; 45
    2232:	68 df       	rcall	.-304    	; 0x2104 <_ZN5Print5printEc>
    2234:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2236:	44 27       	eor	r20, r20
    2238:	55 27       	eor	r21, r21
    223a:	ba 01       	movw	r22, r20
    223c:	4c 19       	sub	r20, r12
    223e:	5d 09       	sbc	r21, r13
    2240:	6e 09       	sbc	r22, r14
    2242:	7f 09       	sbc	r23, r15
    2244:	2a e0       	ldi	r18, 0x0A	; 10
    2246:	ce 01       	movw	r24, r28
    2248:	77 df       	rcall	.-274    	; 0x2138 <_ZN5Print11printNumberEmh>
    224a:	80 0f       	add	r24, r16
    224c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	ff 90       	pop	r15
    2258:	ef 90       	pop	r14
    225a:	df 90       	pop	r13
    225c:	cf 90       	pop	r12
    225e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2260:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2270:	cf 90       	pop	r12
    2272:	62 cf       	rjmp	.-316    	; 0x2138 <_ZN5Print11printNumberEmh>

00002274 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2274:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2276:	ab 01       	movw	r20, r22
    2278:	77 0f       	add	r23, r23
    227a:	66 0b       	sbc	r22, r22
    227c:	77 0b       	sbc	r23, r23
    227e:	b5 cf       	rjmp	.-150    	; 0x21ea <_ZN5Print5printEli>

00002280 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    228a:	f4 df       	rcall	.-24     	; 0x2274 <_ZN5Print5printEii>
    228c:	8c 01       	movw	r16, r24
  n += println();
    228e:	ce 01       	movw	r24, r28
    2290:	40 df       	rcall	.-384    	; 0x2112 <_ZN5Print7printlnEv>
  return n;
}
    2292:	80 0f       	add	r24, r16
    2294:	91 1f       	adc	r25, r17
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	1f 91       	pop	r17
    229c:	0f 91       	pop	r16
    229e:	08 95       	ret

000022a0 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    22a0:	1f 92       	push	r1
    22a2:	0f 92       	push	r0
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	0f 92       	push	r0
    22a8:	11 24       	eor	r1, r1
    22aa:	2f 93       	push	r18
    22ac:	3f 93       	push	r19
    22ae:	8f 93       	push	r24
    22b0:	9f 93       	push	r25
    22b2:	af 93       	push	r26
    22b4:	bf 93       	push	r27
    22b6:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <timer0_millis>
    22ba:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <timer0_millis+0x1>
    22be:	a0 91 04 05 	lds	r26, 0x0504	; 0x800504 <timer0_millis+0x2>
    22c2:	b0 91 05 05 	lds	r27, 0x0505	; 0x800505 <timer0_millis+0x3>
    22c6:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <timer0_fract>
    22ca:	23 e0       	ldi	r18, 0x03	; 3
    22cc:	23 0f       	add	r18, r19
    22ce:	2d 37       	cpi	r18, 0x7D	; 125
    22d0:	20 f4       	brcc	.+8      	; 0x22da <__vector_23+0x3a>
    22d2:	01 96       	adiw	r24, 0x01	; 1
    22d4:	a1 1d       	adc	r26, r1
    22d6:	b1 1d       	adc	r27, r1
    22d8:	05 c0       	rjmp	.+10     	; 0x22e4 <__vector_23+0x44>
    22da:	26 e8       	ldi	r18, 0x86	; 134
    22dc:	23 0f       	add	r18, r19
    22de:	02 96       	adiw	r24, 0x02	; 2
    22e0:	a1 1d       	adc	r26, r1
    22e2:	b1 1d       	adc	r27, r1
    22e4:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <timer0_fract>
    22e8:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <timer0_millis>
    22ec:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <timer0_millis+0x1>
    22f0:	a0 93 04 05 	sts	0x0504, r26	; 0x800504 <timer0_millis+0x2>
    22f4:	b0 93 05 05 	sts	0x0505, r27	; 0x800505 <timer0_millis+0x3>
    22f8:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <timer0_overflow_count>
    22fc:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <timer0_overflow_count+0x1>
    2300:	a0 91 08 05 	lds	r26, 0x0508	; 0x800508 <timer0_overflow_count+0x2>
    2304:	b0 91 09 05 	lds	r27, 0x0509	; 0x800509 <timer0_overflow_count+0x3>
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	a1 1d       	adc	r26, r1
    230c:	b1 1d       	adc	r27, r1
    230e:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <timer0_overflow_count>
    2312:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <timer0_overflow_count+0x1>
    2316:	a0 93 08 05 	sts	0x0508, r26	; 0x800508 <timer0_overflow_count+0x2>
    231a:	b0 93 09 05 	sts	0x0509, r27	; 0x800509 <timer0_overflow_count+0x3>
    231e:	bf 91       	pop	r27
    2320:	af 91       	pop	r26
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	3f 91       	pop	r19
    2328:	2f 91       	pop	r18
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti

00002334 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2334:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2336:	f8 94       	cli
	m = timer0_overflow_count;
    2338:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <timer0_overflow_count>
    233c:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <timer0_overflow_count+0x1>
    2340:	a0 91 08 05 	lds	r26, 0x0508	; 0x800508 <timer0_overflow_count+0x2>
    2344:	b0 91 09 05 	lds	r27, 0x0509	; 0x800509 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2348:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    234a:	a8 9b       	sbis	0x15, 0	; 21
    234c:	05 c0       	rjmp	.+10     	; 0x2358 <micros+0x24>
    234e:	2f 3f       	cpi	r18, 0xFF	; 255
    2350:	19 f0       	breq	.+6      	; 0x2358 <micros+0x24>
		m++;
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	a1 1d       	adc	r26, r1
    2356:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2358:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    235a:	ba 2f       	mov	r27, r26
    235c:	a9 2f       	mov	r26, r25
    235e:	98 2f       	mov	r25, r24
    2360:	88 27       	eor	r24, r24
    2362:	82 0f       	add	r24, r18
    2364:	91 1d       	adc	r25, r1
    2366:	a1 1d       	adc	r26, r1
    2368:	b1 1d       	adc	r27, r1
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	42 e0       	ldi	r20, 0x02	; 2
    2370:	66 0f       	add	r22, r22
    2372:	77 1f       	adc	r23, r23
    2374:	88 1f       	adc	r24, r24
    2376:	99 1f       	adc	r25, r25
    2378:	4a 95       	dec	r20
    237a:	d1 f7       	brne	.-12     	; 0x2370 <micros+0x3c>
}
    237c:	08 95       	ret

0000237e <delay>:

void delay(unsigned long ms)
{
    237e:	8f 92       	push	r8
    2380:	9f 92       	push	r9
    2382:	af 92       	push	r10
    2384:	bf 92       	push	r11
    2386:	cf 92       	push	r12
    2388:	df 92       	push	r13
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	6b 01       	movw	r12, r22
    2390:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2392:	d0 df       	rcall	.-96     	; 0x2334 <micros>
    2394:	4b 01       	movw	r8, r22
    2396:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2398:	c1 14       	cp	r12, r1
    239a:	d1 04       	cpc	r13, r1
    239c:	e1 04       	cpc	r14, r1
    239e:	f1 04       	cpc	r15, r1
		yield();
    23a0:	f1 f0       	breq	.+60     	; 0x23de <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    23a2:	d9 d3       	rcall	.+1970   	; 0x2b56 <yield>
    23a4:	c7 df       	rcall	.-114    	; 0x2334 <micros>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	88 19       	sub	r24, r8
    23ac:	99 09       	sbc	r25, r9
    23ae:	aa 09       	sbc	r26, r10
    23b0:	bb 09       	sbc	r27, r11
    23b2:	88 3e       	cpi	r24, 0xE8	; 232
    23b4:	93 40       	sbci	r25, 0x03	; 3
    23b6:	a1 05       	cpc	r26, r1
    23b8:	b1 05       	cpc	r27, r1
    23ba:	70 f3       	brcs	.-36     	; 0x2398 <delay+0x1a>
			ms--;
    23bc:	21 e0       	ldi	r18, 0x01	; 1
    23be:	c2 1a       	sub	r12, r18
    23c0:	d1 08       	sbc	r13, r1
    23c2:	e1 08       	sbc	r14, r1
    23c4:	f1 08       	sbc	r15, r1
			start += 1000;
    23c6:	88 ee       	ldi	r24, 0xE8	; 232
    23c8:	88 0e       	add	r8, r24
    23ca:	83 e0       	ldi	r24, 0x03	; 3
    23cc:	98 1e       	adc	r9, r24
    23ce:	a1 1c       	adc	r10, r1
    23d0:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    23d2:	c1 14       	cp	r12, r1
    23d4:	d1 04       	cpc	r13, r1
    23d6:	e1 04       	cpc	r14, r1
    23d8:	f1 04       	cpc	r15, r1
    23da:	21 f7       	brne	.-56     	; 0x23a4 <delay+0x26>
    23dc:	dd cf       	rjmp	.-70     	; 0x2398 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	df 90       	pop	r13
    23e4:	cf 90       	pop	r12
    23e6:	bf 90       	pop	r11
    23e8:	af 90       	pop	r10
    23ea:	9f 90       	pop	r9
    23ec:	8f 90       	pop	r8
    23ee:	08 95       	ret

000023f0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    23f0:	82 30       	cpi	r24, 0x02	; 2
    23f2:	91 05       	cpc	r25, r1
    23f4:	38 f0       	brcs	.+14     	; 0x2404 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    23fe:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <delayMicroseconds+0x10>
    2404:	08 95       	ret

00002406 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2406:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2408:	84 b5       	in	r24, 0x24	; 36
    240a:	82 60       	ori	r24, 0x02	; 2
    240c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    240e:	84 b5       	in	r24, 0x24	; 36
    2410:	81 60       	ori	r24, 0x01	; 1
    2412:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2414:	85 b5       	in	r24, 0x25	; 37
    2416:	82 60       	ori	r24, 0x02	; 2
    2418:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    241a:	85 b5       	in	r24, 0x25	; 37
    241c:	81 60       	ori	r24, 0x01	; 1
    241e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2420:	ee e6       	ldi	r30, 0x6E	; 110
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	81 60       	ori	r24, 0x01	; 1
    2428:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    242a:	e1 e8       	ldi	r30, 0x81	; 129
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2430:	80 81       	ld	r24, Z
    2432:	82 60       	ori	r24, 0x02	; 2
    2434:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2436:	80 81       	ld	r24, Z
    2438:	81 60       	ori	r24, 0x01	; 1
    243a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    243c:	e0 e8       	ldi	r30, 0x80	; 128
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	81 60       	ori	r24, 0x01	; 1
    2444:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2446:	e1 eb       	ldi	r30, 0xB1	; 177
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	84 60       	ori	r24, 0x04	; 4
    244e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2450:	e0 eb       	ldi	r30, 0xB0	; 176
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	81 60       	ori	r24, 0x01	; 1
    2458:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    245a:	e1 e9       	ldi	r30, 0x91	; 145
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	82 60       	ori	r24, 0x02	; 2
    2462:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2464:	80 81       	ld	r24, Z
    2466:	81 60       	ori	r24, 0x01	; 1
    2468:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    246a:	e0 e9       	ldi	r30, 0x90	; 144
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	81 60       	ori	r24, 0x01	; 1
    2472:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2474:	e1 ea       	ldi	r30, 0xA1	; 161
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	82 60       	ori	r24, 0x02	; 2
    247c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    247e:	80 81       	ld	r24, Z
    2480:	81 60       	ori	r24, 0x01	; 1
    2482:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2484:	e0 ea       	ldi	r30, 0xA0	; 160
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	81 60       	ori	r24, 0x01	; 1
    248c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    248e:	e1 e2       	ldi	r30, 0x21	; 33
    2490:	f1 e0       	ldi	r31, 0x01	; 1
    2492:	80 81       	ld	r24, Z
    2494:	82 60       	ori	r24, 0x02	; 2
    2496:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2498:	80 81       	ld	r24, Z
    249a:	81 60       	ori	r24, 0x01	; 1
    249c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    249e:	e0 e2       	ldi	r30, 0x20	; 32
    24a0:	f1 e0       	ldi	r31, 0x01	; 1
    24a2:	80 81       	ld	r24, Z
    24a4:	81 60       	ori	r24, 0x01	; 1
    24a6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    24a8:	ea e7       	ldi	r30, 0x7A	; 122
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	84 60       	ori	r24, 0x04	; 4
    24b0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    24b2:	80 81       	ld	r24, Z
    24b4:	82 60       	ori	r24, 0x02	; 2
    24b6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    24b8:	80 81       	ld	r24, Z
    24ba:	81 60       	ori	r24, 0x01	; 1
    24bc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    24be:	80 81       	ld	r24, Z
    24c0:	80 68       	ori	r24, 0x80	; 128
    24c2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    24c4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    24c8:	08 95       	ret

000024ca <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	fc 01       	movw	r30, r24
    24ce:	31 97       	sbiw	r30, 0x01	; 1
    24d0:	e2 31       	cpi	r30, 0x12	; 18
    24d2:	f1 05       	cpc	r31, r1
    24d4:	08 f0       	brcs	.+2      	; 0x24d8 <turnOffPWM+0xe>
    24d6:	4d c0       	rjmp	.+154    	; 0x2572 <turnOffPWM+0xa8>
    24d8:	88 27       	eor	r24, r24
    24da:	ed 54       	subi	r30, 0x4D	; 77
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	8f 4f       	sbci	r24, 0xFF	; 255
    24e0:	3f c5       	rjmp	.+2686   	; 0x2f60 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    24e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    24e6:	8f 77       	andi	r24, 0x7F	; 127
    24e8:	03 c0       	rjmp	.+6      	; 0x24f0 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24ea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    24ee:	8f 7d       	andi	r24, 0xDF	; 223
    24f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    24f4:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    24f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    24fa:	87 7f       	andi	r24, 0xF7	; 247
    24fc:	f9 cf       	rjmp	.-14     	; 0x24f0 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    24fe:	84 b5       	in	r24, 0x24	; 36
    2500:	8f 77       	andi	r24, 0x7F	; 127
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2504:	84 b5       	in	r24, 0x24	; 36
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	84 bd       	out	0x24, r24	; 36
    250a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    250c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2510:	8f 77       	andi	r24, 0x7F	; 127
    2512:	03 c0       	rjmp	.+6      	; 0x251a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2514:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2518:	8f 7d       	andi	r24, 0xDF	; 223
    251a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    251e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2520:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2524:	8f 77       	andi	r24, 0x7F	; 127
    2526:	07 c0       	rjmp	.+14     	; 0x2536 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2528:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    252c:	8f 7d       	andi	r24, 0xDF	; 223
    252e:	03 c0       	rjmp	.+6      	; 0x2536 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2530:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2534:	87 7f       	andi	r24, 0xF7	; 247
    2536:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    253a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    253c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2540:	8f 77       	andi	r24, 0x7F	; 127
    2542:	07 c0       	rjmp	.+14     	; 0x2552 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2544:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2548:	8f 7d       	andi	r24, 0xDF	; 223
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    254c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2550:	87 7f       	andi	r24, 0xF7	; 247
    2552:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2556:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2558:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    255c:	8f 77       	andi	r24, 0x7F	; 127
    255e:	07 c0       	rjmp	.+14     	; 0x256e <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2560:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2564:	8f 7d       	andi	r24, 0xDF	; 223
    2566:	03 c0       	rjmp	.+6      	; 0x256e <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2568:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    256c:	87 7f       	andi	r24, 0xF7	; 247
    256e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2572:	08 95       	ret

00002574 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	fc 01       	movw	r30, r24
    257c:	e0 53       	subi	r30, 0x30	; 48
    257e:	fe 4f       	sbci	r31, 0xFE	; 254
    2580:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2582:	fc 01       	movw	r30, r24
    2584:	ea 5e       	subi	r30, 0xEA	; 234
    2586:	fd 4f       	sbci	r31, 0xFD	; 253
    2588:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    258a:	88 23       	and	r24, r24
    258c:	61 f1       	breq	.+88     	; 0x25e6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	fc 01       	movw	r30, r24
    2596:	ea 58       	subi	r30, 0x8A	; 138
    2598:	fd 4f       	sbci	r31, 0xFD	; 253
    259a:	c5 91       	lpm	r28, Z+
    259c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    259e:	fc 01       	movw	r30, r24
    25a0:	e4 5a       	subi	r30, 0xA4	; 164
    25a2:	fd 4f       	sbci	r31, 0xFD	; 253
    25a4:	a5 91       	lpm	r26, Z+
    25a6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    25a8:	61 11       	cpse	r22, r1
    25aa:	09 c0       	rjmp	.+18     	; 0x25be <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    25ac:	9f b7       	in	r25, 0x3f	; 63
                cli();
    25ae:	f8 94       	cli
		*reg &= ~bit;
    25b0:	88 81       	ld	r24, Y
    25b2:	20 95       	com	r18
    25b4:	82 23       	and	r24, r18
    25b6:	88 83       	st	Y, r24
		*out &= ~bit;
    25b8:	ec 91       	ld	r30, X
    25ba:	2e 23       	and	r18, r30
    25bc:	0b c0       	rjmp	.+22     	; 0x25d4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    25be:	62 30       	cpi	r22, 0x02	; 2
    25c0:	61 f4       	brne	.+24     	; 0x25da <pinMode+0x66>
		uint8_t oldSREG = SREG;
    25c2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    25c4:	f8 94       	cli
		*reg &= ~bit;
    25c6:	88 81       	ld	r24, Y
    25c8:	32 2f       	mov	r19, r18
    25ca:	30 95       	com	r19
    25cc:	83 23       	and	r24, r19
    25ce:	88 83       	st	Y, r24
		*out |= bit;
    25d0:	ec 91       	ld	r30, X
    25d2:	2e 2b       	or	r18, r30
    25d4:	2c 93       	st	X, r18
		SREG = oldSREG;
    25d6:	9f bf       	out	0x3f, r25	; 63
    25d8:	06 c0       	rjmp	.+12     	; 0x25e6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    25da:	8f b7       	in	r24, 0x3f	; 63
                cli();
    25dc:	f8 94       	cli
		*reg |= bit;
    25de:	e8 81       	ld	r30, Y
    25e0:	2e 2b       	or	r18, r30
    25e2:	28 83       	st	Y, r18
		SREG = oldSREG;
    25e4:	8f bf       	out	0x3f, r24	; 63
	}
}
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	08 95       	ret

000025ec <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	f9 01       	movw	r30, r18
    25f8:	e6 57       	subi	r30, 0x76	; 118
    25fa:	fe 4f       	sbci	r31, 0xFE	; 254
    25fc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    25fe:	f9 01       	movw	r30, r18
    2600:	e0 53       	subi	r30, 0x30	; 48
    2602:	fe 4f       	sbci	r31, 0xFE	; 254
    2604:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2606:	f9 01       	movw	r30, r18
    2608:	ea 5e       	subi	r30, 0xEA	; 234
    260a:	fd 4f       	sbci	r31, 0xFD	; 253
    260c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    260e:	cc 23       	and	r28, r28
    2610:	b9 f0       	breq	.+46     	; 0x2640 <digitalWrite+0x54>
    2612:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2614:	81 11       	cpse	r24, r1
    2616:	59 df       	rcall	.-334    	; 0x24ca <turnOffPWM>

	out = portOutputRegister(port);
    2618:	ec 2f       	mov	r30, r28
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	e4 5a       	subi	r30, 0xA4	; 164
    2622:	fd 4f       	sbci	r31, 0xFD	; 253
    2624:	a5 91       	lpm	r26, Z+
    2626:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2628:	9f b7       	in	r25, 0x3f	; 63
	cli();
    262a:	f8 94       	cli

	if (val == LOW) {
    262c:	11 11       	cpse	r17, r1
    262e:	04 c0       	rjmp	.+8      	; 0x2638 <digitalWrite+0x4c>
		*out &= ~bit;
    2630:	8c 91       	ld	r24, X
    2632:	d0 95       	com	r29
    2634:	d8 23       	and	r29, r24
    2636:	02 c0       	rjmp	.+4      	; 0x263c <digitalWrite+0x50>
	} else {
		*out |= bit;
    2638:	ec 91       	ld	r30, X
    263a:	de 2b       	or	r29, r30
    263c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    263e:	9f bf       	out	0x3f, r25	; 63
}
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	08 95       	ret

00002648 <_ZN6StringD1Ev>:
	move(rval);
}
String::String(StringSumHelper &&rval)
{
	init();
	move(rval);
    2648:	fc 01       	movw	r30, r24
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	28 c5       	rjmp	.+2640   	; 0x30a0 <free>

00002650 <_ZN6String10invalidateEv>:
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	ec 01       	movw	r28, r24
    2656:	88 81       	ld	r24, Y
    2658:	99 81       	ldd	r25, Y+1	; 0x01
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	09 f0       	breq	.+2      	; 0x2660 <_ZN6String10invalidateEv+0x10>
    265e:	20 d5       	rcall	.+2624   	; 0x30a0 <free>
    2660:	19 82       	std	Y+1, r1	; 0x01
    2662:	18 82       	st	Y, r1
    2664:	1d 82       	std	Y+5, r1	; 0x05
    2666:	1c 82       	std	Y+4, r1	; 0x04
    2668:	1b 82       	std	Y+3, r1	; 0x03
    266a:	1a 82       	std	Y+2, r1	; 0x02
    266c:	df 91       	pop	r29
    266e:	cf 91       	pop	r28
    2670:	08 95       	ret

00002672 <_ZN6String12changeBufferEj>:
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	ec 01       	movw	r28, r24
    267c:	8b 01       	movw	r16, r22
    267e:	6f 5f       	subi	r22, 0xFF	; 255
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	88 81       	ld	r24, Y
    2684:	99 81       	ldd	r25, Y+1	; 0x01
    2686:	95 d5       	rcall	.+2858   	; 0x31b2 <realloc>
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	31 f0       	breq	.+12     	; 0x2698 <_ZN6String12changeBufferEj+0x26>
    268c:	99 83       	std	Y+1, r25	; 0x01
    268e:	88 83       	st	Y, r24
    2690:	1b 83       	std	Y+3, r17	; 0x03
    2692:	0a 83       	std	Y+2, r16	; 0x02
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	01 c0       	rjmp	.+2      	; 0x269a <_ZN6String12changeBufferEj+0x28>
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	08 95       	ret

000026a4 <_ZN6String7reserveEj>:
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	ec 01       	movw	r28, r24
    26aa:	88 81       	ld	r24, Y
    26ac:	99 81       	ldd	r25, Y+1	; 0x01
    26ae:	89 2b       	or	r24, r25
    26b0:	29 f0       	breq	.+10     	; 0x26bc <_ZN6String7reserveEj+0x18>
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
    26b6:	86 17       	cp	r24, r22
    26b8:	97 07       	cpc	r25, r23
    26ba:	58 f4       	brcc	.+22     	; 0x26d2 <_ZN6String7reserveEj+0x2e>
    26bc:	ce 01       	movw	r24, r28
    26be:	d9 df       	rcall	.-78     	; 0x2672 <_ZN6String12changeBufferEj>
    26c0:	88 23       	and	r24, r24
    26c2:	41 f0       	breq	.+16     	; 0x26d4 <_ZN6String7reserveEj+0x30>
    26c4:	8c 81       	ldd	r24, Y+4	; 0x04
    26c6:	9d 81       	ldd	r25, Y+5	; 0x05
    26c8:	89 2b       	or	r24, r25
    26ca:	19 f4       	brne	.+6      	; 0x26d2 <_ZN6String7reserveEj+0x2e>
    26cc:	e8 81       	ld	r30, Y
    26ce:	f9 81       	ldd	r31, Y+1	; 0x01
    26d0:	10 82       	st	Z, r1
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	08 95       	ret

000026da <_ZN6String4copyEPKcj>:
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	ec 01       	movw	r28, r24
    26e8:	7b 01       	movw	r14, r22
    26ea:	8a 01       	movw	r16, r20
    26ec:	ba 01       	movw	r22, r20
    26ee:	da df       	rcall	.-76     	; 0x26a4 <_ZN6String7reserveEj>
    26f0:	81 11       	cpse	r24, r1
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <_ZN6String4copyEPKcj+0x20>
    26f4:	ce 01       	movw	r24, r28
    26f6:	ac df       	rcall	.-168    	; 0x2650 <_ZN6String10invalidateEv>
    26f8:	06 c0       	rjmp	.+12     	; 0x2706 <_ZN6String4copyEPKcj+0x2c>
    26fa:	1d 83       	std	Y+5, r17	; 0x05
    26fc:	0c 83       	std	Y+4, r16	; 0x04
    26fe:	b7 01       	movw	r22, r14
    2700:	88 81       	ld	r24, Y
    2702:	99 81       	ldd	r25, Y+1	; 0x01
    2704:	3f d6       	rcall	.+3198   	; 0x3384 <strcpy>
    2706:	ce 01       	movw	r24, r28
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
    2714:	08 95       	ret

00002716 <_ZN6StringC1EPKc>:
    2716:	fc 01       	movw	r30, r24
    2718:	11 82       	std	Z+1, r1	; 0x01
    271a:	10 82       	st	Z, r1
    271c:	13 82       	std	Z+3, r1	; 0x03
    271e:	12 82       	std	Z+2, r1	; 0x02
    2720:	15 82       	std	Z+5, r1	; 0x05
    2722:	14 82       	std	Z+4, r1	; 0x04
    2724:	61 15       	cp	r22, r1
    2726:	71 05       	cpc	r23, r1
    2728:	49 f0       	breq	.+18     	; 0x273c <_ZN6StringC1EPKc+0x26>
    272a:	fb 01       	movw	r30, r22
    272c:	01 90       	ld	r0, Z+
    272e:	00 20       	and	r0, r0
    2730:	e9 f7       	brne	.-6      	; 0x272c <_ZN6StringC1EPKc+0x16>
    2732:	31 97       	sbiw	r30, 0x01	; 1
    2734:	af 01       	movw	r20, r30
    2736:	46 1b       	sub	r20, r22
    2738:	57 0b       	sbc	r21, r23
    273a:	cf cf       	rjmp	.-98     	; 0x26da <_ZN6String4copyEPKcj>
    273c:	08 95       	ret

0000273e <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	ec 01       	movw	r28, r24
    2744:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    2746:	86 17       	cp	r24, r22
    2748:	97 07       	cpc	r25, r23
    274a:	51 f0       	breq	.+20     	; 0x2760 <_ZN6StringaSERKS_+0x22>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	61 15       	cp	r22, r1
    2752:	71 05       	cpc	r23, r1
    2754:	21 f0       	breq	.+8      	; 0x275e <_ZN6StringaSERKS_+0x20>
    2756:	44 81       	ldd	r20, Z+4	; 0x04
    2758:	55 81       	ldd	r21, Z+5	; 0x05
    275a:	bf df       	rcall	.-130    	; 0x26da <_ZN6String4copyEPKcj>
    275c:	01 c0       	rjmp	.+2      	; 0x2760 <_ZN6StringaSERKS_+0x22>
	else invalidate();
    275e:	78 df       	rcall	.-272    	; 0x2650 <_ZN6String10invalidateEv>
    2760:	ce 01       	movw	r24, r28
	
	return *this;
}
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	08 95       	ret

00002768 <_ZN6StringC1ERKS_>:
    2768:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    276a:	11 82       	std	Z+1, r1	; 0x01
    276c:	10 82       	st	Z, r1
	capacity = 0;
    276e:	13 82       	std	Z+3, r1	; 0x03
    2770:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2772:	15 82       	std	Z+5, r1	; 0x05
    2774:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    2776:	e3 cf       	rjmp	.-58     	; 0x273e <_ZN6StringaSERKS_>

00002778 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    2778:	fc 01       	movw	r30, r24
    277a:	13 82       	std	Z+3, r1	; 0x03
    277c:	12 82       	std	Z+2, r1	; 0x02
    277e:	81 e5       	ldi	r24, 0x51	; 81
    2780:	93 e0       	ldi	r25, 0x03	; 3
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
    2786:	64 83       	std	Z+4, r22	; 0x04
    2788:	41 87       	std	Z+9, r20	; 0x09
    278a:	22 87       	std	Z+10, r18	; 0x0a
    278c:	13 86       	std	Z+11, r1	; 0x0b
    278e:	08 95       	ret

00002790 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	ec 01       	movw	r28, r24
    2798:	16 2f       	mov	r17, r22
    279a:	6c 81       	ldd	r22, Y+4	; 0x04
    279c:	8a e0       	ldi	r24, 0x0A	; 10
    279e:	95 e0       	ldi	r25, 0x05	; 5
    27a0:	b9 d1       	rcall	.+882    	; 0x2b14 <_ZN7TwoWire17beginTransmissionEh>
    27a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a4:	61 2b       	or	r22, r17
    27a6:	8a e0       	ldi	r24, 0x0A	; 10
    27a8:	95 e0       	ldi	r25, 0x05	; 5
    27aa:	67 d1       	rcall	.+718    	; 0x2a7a <_ZN7TwoWire5writeEh>
    27ac:	8a e0       	ldi	r24, 0x0A	; 10
    27ae:	95 e0       	ldi	r25, 0x05	; 5
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	1f 91       	pop	r17
    27b6:	ca c1       	rjmp	.+916    	; 0x2b4c <_ZN7TwoWire15endTransmissionEv>

000027b8 <_ZN17LiquidCrystal_I2C9backlightEv>:
    27b8:	28 e0       	ldi	r18, 0x08	; 8
    27ba:	fc 01       	movw	r30, r24
    27bc:	23 87       	std	Z+11, r18	; 0x0b
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	e7 cf       	rjmp	.-50     	; 0x2790 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000027c2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	8c 01       	movw	r16, r24
    27ca:	c6 2f       	mov	r28, r22
    27cc:	64 60       	ori	r22, 0x04	; 4
    27ce:	e0 df       	rcall	.-64     	; 0x2790 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	0d de       	rcall	.-998    	; 0x23f0 <delayMicroseconds>
    27d6:	6c 2f       	mov	r22, r28
    27d8:	6b 7f       	andi	r22, 0xFB	; 251
    27da:	c8 01       	movw	r24, r16
    27dc:	d9 df       	rcall	.-78     	; 0x2790 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    27de:	82 e3       	ldi	r24, 0x32	; 50
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	03 ce       	rjmp	.-1018   	; 0x23f0 <delayMicroseconds>

000027ea <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    27ea:	1f 93       	push	r17
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	ec 01       	movw	r28, r24
    27f2:	16 2f       	mov	r17, r22
    27f4:	cd df       	rcall	.-102    	; 0x2790 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    27f6:	61 2f       	mov	r22, r17
    27f8:	ce 01       	movw	r24, r28
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	e0 cf       	rjmp	.-64     	; 0x27c2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002802 <_ZN17LiquidCrystal_I2C4sendEhh>:
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	8c 01       	movw	r16, r24
    280c:	c6 2f       	mov	r28, r22
    280e:	d4 2f       	mov	r29, r20
    2810:	60 7f       	andi	r22, 0xF0	; 240
    2812:	64 2b       	or	r22, r20
    2814:	ea df       	rcall	.-44     	; 0x27ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2816:	80 e1       	ldi	r24, 0x10	; 16
    2818:	c8 9f       	mul	r28, r24
    281a:	b0 01       	movw	r22, r0
    281c:	11 24       	eor	r1, r1
    281e:	6d 2b       	or	r22, r29
    2820:	c8 01       	movw	r24, r16
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	df cf       	rjmp	.-66     	; 0x27ea <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000282c <_ZN17LiquidCrystal_I2C7commandEh>:
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	e9 cf       	rjmp	.-46     	; 0x2802 <_ZN17LiquidCrystal_I2C4sendEhh>

00002830 <_ZN17LiquidCrystal_I2C5clearEv>:
    2830:	61 e0       	ldi	r22, 0x01	; 1
    2832:	fc df       	rcall	.-8      	; 0x282c <_ZN17LiquidCrystal_I2C7commandEh>
    2834:	80 ed       	ldi	r24, 0xD0	; 208
    2836:	97 e0       	ldi	r25, 0x07	; 7
    2838:	db cd       	rjmp	.-1098   	; 0x23f0 <delayMicroseconds>

0000283a <_ZN17LiquidCrystal_I2C4homeEv>:
    283a:	62 e0       	ldi	r22, 0x02	; 2
    283c:	f7 df       	rcall	.-18     	; 0x282c <_ZN17LiquidCrystal_I2C7commandEh>
    283e:	80 ed       	ldi	r24, 0xD0	; 208
    2840:	97 e0       	ldi	r25, 0x07	; 7
    2842:	d6 cd       	rjmp	.-1108   	; 0x23f0 <delayMicroseconds>

00002844 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	28 97       	sbiw	r28, 0x08	; 8
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	9c 01       	movw	r18, r24
    285a:	88 e0       	ldi	r24, 0x08	; 8
    285c:	e8 e0       	ldi	r30, 0x08	; 8
    285e:	f2 e0       	ldi	r31, 0x02	; 2
    2860:	de 01       	movw	r26, r28
    2862:	11 96       	adiw	r26, 0x01	; 1
    2864:	01 90       	ld	r0, Z+
    2866:	0d 92       	st	X+, r0
    2868:	8a 95       	dec	r24
    286a:	e1 f7       	brne	.-8      	; 0x2864 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    286c:	f9 01       	movw	r30, r18
    286e:	80 85       	ldd	r24, Z+8	; 0x08
    2870:	84 17       	cp	r24, r20
    2872:	10 f4       	brcc	.+4      	; 0x2878 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2874:	4f ef       	ldi	r20, 0xFF	; 255
    2876:	48 0f       	add	r20, r24
    2878:	fe 01       	movw	r30, r28
    287a:	31 96       	adiw	r30, 0x01	; 1
    287c:	e4 0f       	add	r30, r20
    287e:	f1 1d       	adc	r31, r1
    2880:	e4 0f       	add	r30, r20
    2882:	f1 1d       	adc	r31, r1
    2884:	90 81       	ld	r25, Z
    2886:	69 0f       	add	r22, r25
    2888:	60 68       	ori	r22, 0x80	; 128
    288a:	c9 01       	movw	r24, r18
    288c:	28 96       	adiw	r28, 0x08	; 8
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	c7 cf       	rjmp	.-114    	; 0x282c <_ZN17LiquidCrystal_I2C7commandEh>

0000289e <_ZN17LiquidCrystal_I2C7displayEv>:
    289e:	fc 01       	movw	r30, r24
    28a0:	66 81       	ldd	r22, Z+6	; 0x06
    28a2:	26 2f       	mov	r18, r22
    28a4:	24 60       	ori	r18, 0x04	; 4
    28a6:	26 83       	std	Z+6, r18	; 0x06
    28a8:	6c 60       	ori	r22, 0x0C	; 12
    28aa:	c0 cf       	rjmp	.-128    	; 0x282c <_ZN17LiquidCrystal_I2C7commandEh>

000028ac <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	a9 df       	rcall	.-174    	; 0x2802 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	08 95       	ret

000028b6 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	ec 01       	movw	r28, r24
	if (lines > 1) {
    28bc:	42 30       	cpi	r20, 0x02	; 2
    28be:	18 f0       	brcs	.+6      	; 0x28c6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	88 60       	ori	r24, 0x08	; 8
    28c4:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    28c6:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    28c8:	22 23       	and	r18, r18
    28ca:	29 f0       	breq	.+10     	; 0x28d6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    28cc:	41 30       	cpi	r20, 0x01	; 1
    28ce:	19 f4       	brne	.+6      	; 0x28d6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	84 60       	ori	r24, 0x04	; 4
    28d4:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    28d6:	62 e3       	ldi	r22, 0x32	; 50
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	4f dd       	rcall	.-1378   	; 0x237e <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    28e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e2:	ce 01       	movw	r24, r28
    28e4:	55 df       	rcall	.-342    	; 0x2790 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    28e6:	68 ee       	ldi	r22, 0xE8	; 232
    28e8:	73 e0       	ldi	r23, 0x03	; 3
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	47 dd       	rcall	.-1394   	; 0x237e <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    28f0:	60 e3       	ldi	r22, 0x30	; 48
    28f2:	ce 01       	movw	r24, r28
    28f4:	7a df       	rcall	.-268    	; 0x27ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    28f6:	84 e9       	ldi	r24, 0x94	; 148
    28f8:	91 e1       	ldi	r25, 0x11	; 17
    28fa:	7a dd       	rcall	.-1292   	; 0x23f0 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    28fc:	60 e3       	ldi	r22, 0x30	; 48
    28fe:	ce 01       	movw	r24, r28
    2900:	74 df       	rcall	.-280    	; 0x27ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2902:	84 e9       	ldi	r24, 0x94	; 148
    2904:	91 e1       	ldi	r25, 0x11	; 17
    2906:	74 dd       	rcall	.-1304   	; 0x23f0 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2908:	60 e3       	ldi	r22, 0x30	; 48
    290a:	ce 01       	movw	r24, r28
    290c:	6e df       	rcall	.-292    	; 0x27ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    290e:	86 e9       	ldi	r24, 0x96	; 150
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	6e dd       	rcall	.-1316   	; 0x23f0 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2914:	60 e2       	ldi	r22, 0x20	; 32
    2916:	ce 01       	movw	r24, r28
    2918:	68 df       	rcall	.-304    	; 0x27ea <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    291a:	6d 81       	ldd	r22, Y+5	; 0x05
    291c:	60 62       	ori	r22, 0x20	; 32
    291e:	ce 01       	movw	r24, r28
    2920:	85 df       	rcall	.-246    	; 0x282c <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	8e 83       	std	Y+6, r24	; 0x06
	display();
    2926:	ce 01       	movw	r24, r28
    2928:	ba df       	rcall	.-140    	; 0x289e <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    292a:	ce 01       	movw	r24, r28
    292c:	81 df       	rcall	.-254    	; 0x2830 <_ZN17LiquidCrystal_I2C5clearEv>
    292e:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2930:	8f 83       	std	Y+7, r24	; 0x07
    2932:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    2934:	ce 01       	movw	r24, r28
    2936:	7a df       	rcall	.-268    	; 0x282c <_ZN17LiquidCrystal_I2C7commandEh>
    2938:	ce 01       	movw	r24, r28
    293a:	df 91       	pop	r29
	
	home();
    293c:	cf 91       	pop	r28
  
}
    293e:	7d cf       	rjmp	.-262    	; 0x283a <_ZN17LiquidCrystal_I2C4homeEv>

00002940 <_ZN17LiquidCrystal_I2C9init_privEv>:
    2940:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2942:	df 93       	push	r29
    2944:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    2946:	8a e0       	ldi	r24, 0x0A	; 10
    2948:	95 e0       	ldi	r25, 0x05	; 5
    294a:	d5 d0       	rcall	.+426    	; 0x2af6 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    294c:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	4a 85       	ldd	r20, Y+10	; 0x0a
    2952:	69 85       	ldd	r22, Y+9	; 0x09
    2954:	ce 01       	movw	r24, r28
}
    2956:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2958:	cf 91       	pop	r28
    295a:	ad cf       	rjmp	.-166    	; 0x28b6 <_ZN17LiquidCrystal_I2C5beginEhhh>

0000295c <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    295c:	f1 cf       	rjmp	.-30     	; 0x2940 <_ZN17LiquidCrystal_I2C9init_privEv>

0000295e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    295e:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <_ZN7TwoWire14rxBufferLengthE>
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	20 91 3f 05 	lds	r18, 0x053F	; 0x80053f <_ZN7TwoWire13rxBufferIndexE>
    2968:	82 1b       	sub	r24, r18
    296a:	91 09       	sbc	r25, r1
    296c:	08 95       	ret

0000296e <_ZN7TwoWire4readEv>:
    296e:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <_ZN7TwoWire13rxBufferIndexE>
    2972:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <_ZN7TwoWire14rxBufferLengthE>
    2976:	98 17       	cp	r25, r24
    2978:	50 f4       	brcc	.+20     	; 0x298e <_ZN7TwoWire4readEv+0x20>
    297a:	e9 2f       	mov	r30, r25
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	e0 5c       	subi	r30, 0xC0	; 192
    2980:	fa 4f       	sbci	r31, 0xFA	; 250
    2982:	20 81       	ld	r18, Z
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	9f 5f       	subi	r25, 0xFF	; 255
    2988:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <_ZN7TwoWire13rxBufferIndexE>
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <_ZN7TwoWire4readEv+0x24>
    298e:	2f ef       	ldi	r18, 0xFF	; 255
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	c9 01       	movw	r24, r18
    2994:	08 95       	ret

00002996 <_ZN7TwoWire4peekEv>:
    2996:	e0 91 3f 05 	lds	r30, 0x053F	; 0x80053f <_ZN7TwoWire13rxBufferIndexE>
    299a:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <_ZN7TwoWire14rxBufferLengthE>
    299e:	e8 17       	cp	r30, r24
    29a0:	30 f4       	brcc	.+12     	; 0x29ae <_ZN7TwoWire4peekEv+0x18>
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	e0 5c       	subi	r30, 0xC0	; 192
    29a6:	fa 4f       	sbci	r31, 0xFA	; 250
    29a8:	80 81       	ld	r24, Z
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	08 95       	ret
    29ae:	8f ef       	ldi	r24, 0xFF	; 255
    29b0:	9f ef       	ldi	r25, 0xFF	; 255
    29b2:	08 95       	ret

000029b4 <_ZN7TwoWire5flushEv>:
    29b4:	08 95       	ret

000029b6 <_ZN7TwoWire16onReceiveServiceEPhi>:
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	ec 01       	movw	r28, r24
    29bc:	e0 91 16 05 	lds	r30, 0x0516	; 0x800516 <_ZN7TwoWire14user_onReceiveE>
    29c0:	f0 91 17 05 	lds	r31, 0x0517	; 0x800517 <_ZN7TwoWire14user_onReceiveE+0x1>
    29c4:	30 97       	sbiw	r30, 0x00	; 0
    29c6:	f1 f0       	breq	.+60     	; 0x2a04 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    29c8:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <_ZN7TwoWire13rxBufferIndexE>
    29cc:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <_ZN7TwoWire14rxBufferLengthE>
    29d0:	98 17       	cp	r25, r24
    29d2:	c0 f0       	brcs	.+48     	; 0x2a04 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	29 2f       	mov	r18, r25
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	26 17       	cp	r18, r22
    29dc:	37 07       	cpc	r19, r23
    29de:	54 f4       	brge	.+20     	; 0x29f4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    29e0:	de 01       	movw	r26, r28
    29e2:	a2 0f       	add	r26, r18
    29e4:	b3 1f       	adc	r27, r19
    29e6:	4c 91       	ld	r20, X
    29e8:	d9 01       	movw	r26, r18
    29ea:	a0 5c       	subi	r26, 0xC0	; 192
    29ec:	ba 4f       	sbci	r27, 0xFA	; 250
    29ee:	4c 93       	st	X, r20
    29f0:	9f 5f       	subi	r25, 0xFF	; 255
    29f2:	f1 cf       	rjmp	.-30     	; 0x29d6 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    29f4:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <_ZN7TwoWire13rxBufferIndexE>
    29f8:	60 93 3e 05 	sts	0x053E, r22	; 0x80053e <_ZN7TwoWire14rxBufferLengthE>
    29fc:	cb 01       	movw	r24, r22
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	19 94       	eijmp
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	08 95       	ret

00002a0a <_ZN7TwoWire16onRequestServiceEv>:
    2a0a:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <_ZN7TwoWire14user_onRequestE>
    2a0e:	f0 91 19 05 	lds	r31, 0x0519	; 0x800519 <_ZN7TwoWire14user_onRequestE+0x1>
    2a12:	30 97       	sbiw	r30, 0x00	; 0
    2a14:	29 f0       	breq	.+10     	; 0x2a20 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2a16:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <_ZN7TwoWire13txBufferIndexE>
    2a1a:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <_ZN7TwoWire14txBufferLengthE>
    2a1e:	19 94       	eijmp
    2a20:	08 95       	ret

00002a22 <_ZN7TwoWire5writeEPKhj>:
    2a22:	cf 92       	push	r12
    2a24:	df 92       	push	r13
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	7c 01       	movw	r14, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	8a 01       	movw	r16, r20
    2a38:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <_ZN7TwoWire12transmittingE>
    2a3c:	22 23       	and	r18, r18
    2a3e:	89 f0       	breq	.+34     	; 0x2a62 <_ZN7TwoWire5writeEPKhj+0x40>
    2a40:	eb 01       	movw	r28, r22
    2a42:	6b 01       	movw	r12, r22
    2a44:	c4 0e       	add	r12, r20
    2a46:	d5 1e       	adc	r13, r21
    2a48:	cc 15       	cp	r28, r12
    2a4a:	dd 05       	cpc	r29, r13
    2a4c:	61 f0       	breq	.+24     	; 0x2a66 <_ZN7TwoWire5writeEPKhj+0x44>
    2a4e:	69 91       	ld	r22, Y+
    2a50:	d7 01       	movw	r26, r14
    2a52:	ed 91       	ld	r30, X+
    2a54:	fc 91       	ld	r31, X
    2a56:	01 90       	ld	r0, Z+
    2a58:	f0 81       	ld	r31, Z
    2a5a:	e0 2d       	mov	r30, r0
    2a5c:	c7 01       	movw	r24, r14
    2a5e:	19 95       	eicall
    2a60:	f3 cf       	rjmp	.-26     	; 0x2a48 <_ZN7TwoWire5writeEPKhj+0x26>
    2a62:	64 2f       	mov	r22, r20
    2a64:	eb d0       	rcall	.+470    	; 0x2c3c <twi_transmit>
    2a66:	c8 01       	movw	r24, r16
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	df 90       	pop	r13
    2a76:	cf 90       	pop	r12
    2a78:	08 95       	ret

00002a7a <_ZN7TwoWire5writeEh>:
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	1f 92       	push	r1
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	69 83       	std	Y+1, r22	; 0x01
    2a86:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <_ZN7TwoWire12transmittingE>
    2a8a:	22 23       	and	r18, r18
    2a8c:	d1 f0       	breq	.+52     	; 0x2ac2 <_ZN7TwoWire5writeEh+0x48>
    2a8e:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <_ZN7TwoWire14txBufferLengthE>
    2a92:	20 32       	cpi	r18, 0x20	; 32
    2a94:	40 f0       	brcs	.+16     	; 0x2aa6 <_ZN7TwoWire5writeEh+0x2c>
    2a96:	21 e0       	ldi	r18, 0x01	; 1
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	33 83       	std	Z+3, r19	; 0x03
    2a9e:	22 83       	std	Z+2, r18	; 0x02
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	14 c0       	rjmp	.+40     	; 0x2ace <_ZN7TwoWire5writeEh+0x54>
    2aa6:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <_ZN7TwoWire13txBufferIndexE>
    2aaa:	e8 2f       	mov	r30, r24
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	e3 5e       	subi	r30, 0xE3	; 227
    2ab0:	fa 4f       	sbci	r31, 0xFA	; 250
    2ab2:	99 81       	ldd	r25, Y+1	; 0x01
    2ab4:	90 83       	st	Z, r25
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <_ZN7TwoWire13txBufferIndexE>
    2abc:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <_ZN7TwoWire14txBufferLengthE>
    2ac0:	04 c0       	rjmp	.+8      	; 0x2aca <_ZN7TwoWire5writeEh+0x50>
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	01 96       	adiw	r24, 0x01	; 1
    2ac8:	b9 d0       	rcall	.+370    	; 0x2c3c <twi_transmit>
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	0f 90       	pop	r0
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	08 95       	ret

00002ad6 <_ZN7TwoWireC1Ev>:
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	13 82       	std	Z+3, r1	; 0x03
    2ada:	12 82       	std	Z+2, r1	; 0x02
    2adc:	88 ee       	ldi	r24, 0xE8	; 232
    2ade:	93 e0       	ldi	r25, 0x03	; 3
    2ae0:	a0 e0       	ldi	r26, 0x00	; 0
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	84 83       	std	Z+4, r24	; 0x04
    2ae6:	95 83       	std	Z+5, r25	; 0x05
    2ae8:	a6 83       	std	Z+6, r26	; 0x06
    2aea:	b7 83       	std	Z+7, r27	; 0x07
    2aec:	8d e5       	ldi	r24, 0x5D	; 93
    2aee:	93 e0       	ldi	r25, 0x03	; 3
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
    2af4:	08 95       	ret

00002af6 <_ZN7TwoWire5beginEv>:
    2af6:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <_ZN7TwoWire13rxBufferIndexE>
    2afa:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <_ZN7TwoWire14rxBufferLengthE>
    2afe:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <_ZN7TwoWire13txBufferIndexE>
    2b02:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <_ZN7TwoWire14txBufferLengthE>
    2b06:	28 d0       	rcall	.+80     	; 0x2b58 <twi_init>
    2b08:	85 e0       	ldi	r24, 0x05	; 5
    2b0a:	95 e1       	ldi	r25, 0x15	; 21
    2b0c:	c4 d0       	rcall	.+392    	; 0x2c96 <twi_attachSlaveTxEvent>
    2b0e:	8b ed       	ldi	r24, 0xDB	; 219
    2b10:	94 e1       	ldi	r25, 0x14	; 20
    2b12:	bc c0       	rjmp	.+376    	; 0x2c8c <twi_attachSlaveRxEvent>

00002b14 <_ZN7TwoWire17beginTransmissionEh>:
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <_ZN7TwoWire12transmittingE>
    2b1a:	60 93 3d 05 	sts	0x053D, r22	; 0x80053d <_ZN7TwoWire9txAddressE>
    2b1e:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <_ZN7TwoWire13txBufferIndexE>
    2b22:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <_ZN7TwoWire14txBufferLengthE>
    2b26:	08 95       	ret

00002b28 <_ZN7TwoWire15endTransmissionEh>:
    2b28:	0f 93       	push	r16
    2b2a:	06 2f       	mov	r16, r22
    2b2c:	21 e0       	ldi	r18, 0x01	; 1
    2b2e:	40 91 1b 05 	lds	r20, 0x051B	; 0x80051b <_ZN7TwoWire14txBufferLengthE>
    2b32:	6d e1       	ldi	r22, 0x1D	; 29
    2b34:	75 e0       	ldi	r23, 0x05	; 5
    2b36:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <_ZN7TwoWire9txAddressE>
    2b3a:	2a d0       	rcall	.+84     	; 0x2b90 <twi_writeTo>
    2b3c:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <_ZN7TwoWire13txBufferIndexE>
    2b40:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <_ZN7TwoWire14txBufferLengthE>
    2b44:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <_ZN7TwoWire12transmittingE>
    2b48:	0f 91       	pop	r16
    2b4a:	08 95       	ret

00002b4c <_ZN7TwoWire15endTransmissionEv>:
    2b4c:	61 e0       	ldi	r22, 0x01	; 1
    2b4e:	ec cf       	rjmp	.-40     	; 0x2b28 <_ZN7TwoWire15endTransmissionEh>

00002b50 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2b50:	8a e0       	ldi	r24, 0x0A	; 10
    2b52:	95 e0       	ldi	r25, 0x05	; 5
    2b54:	c0 cf       	rjmp	.-128    	; 0x2ad6 <_ZN7TwoWireC1Ev>

00002b56 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2b56:	08 95       	ret

00002b58 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2b58:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <twi_state>
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <twi_sendStop>
    2b62:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <twi_inRepStart>
    2b66:	61 e0       	ldi	r22, 0x01	; 1
    2b68:	84 e1       	ldi	r24, 0x14	; 20
    2b6a:	40 dd       	rcall	.-1408   	; 0x25ec <digitalWrite>
    2b6c:	61 e0       	ldi	r22, 0x01	; 1
    2b6e:	85 e1       	ldi	r24, 0x15	; 21
    2b70:	3d dd       	rcall	.-1414   	; 0x25ec <digitalWrite>
    2b72:	e9 eb       	ldi	r30, 0xB9	; 185
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8e 7f       	andi	r24, 0xFE	; 254
    2b7a:	80 83       	st	Z, r24
    2b7c:	80 81       	ld	r24, Z
    2b7e:	8d 7f       	andi	r24, 0xFD	; 253
    2b80:	80 83       	st	Z, r24
    2b82:	88 e4       	ldi	r24, 0x48	; 72
    2b84:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2b88:	85 e4       	ldi	r24, 0x45	; 69
    2b8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b8e:	08 95       	ret

00002b90 <twi_writeTo>:
    2b90:	0f 93       	push	r16
    2b92:	41 32       	cpi	r20, 0x21	; 33
    2b94:	08 f0       	brcs	.+2      	; 0x2b98 <twi_writeTo+0x8>
    2b96:	4a c0       	rjmp	.+148    	; 0x2c2c <twi_writeTo+0x9c>
    2b98:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <twi_state>
    2b9c:	91 11       	cpse	r25, r1
    2b9e:	fc cf       	rjmp	.-8      	; 0x2b98 <twi_writeTo+0x8>
    2ba0:	32 e0       	ldi	r19, 0x02	; 2
    2ba2:	30 93 cd 05 	sts	0x05CD, r19	; 0x8005cd <twi_state>
    2ba6:	00 93 cb 05 	sts	0x05CB, r16	; 0x8005cb <twi_sendStop>
    2baa:	3f ef       	ldi	r19, 0xFF	; 255
    2bac:	30 93 60 05 	sts	0x0560, r19	; 0x800560 <twi_error>
    2bb0:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <twi_masterBufferIndex>
    2bb4:	40 93 a4 05 	sts	0x05A4, r20	; 0x8005a4 <twi_masterBufferLength>
    2bb8:	56 2f       	mov	r21, r22
    2bba:	a6 ea       	ldi	r26, 0xA6	; 166
    2bbc:	b5 e0       	ldi	r27, 0x05	; 5
    2bbe:	fb 01       	movw	r30, r22
    2bc0:	3e 2f       	mov	r19, r30
    2bc2:	35 1b       	sub	r19, r21
    2bc4:	34 17       	cp	r19, r20
    2bc6:	18 f4       	brcc	.+6      	; 0x2bce <twi_writeTo+0x3e>
    2bc8:	31 91       	ld	r19, Z+
    2bca:	3d 93       	st	X+, r19
    2bcc:	f9 cf       	rjmp	.-14     	; 0x2bc0 <twi_writeTo+0x30>
    2bce:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <twi_slarw>
    2bd2:	30 91 cc 05 	lds	r19, 0x05CC	; 0x8005cc <twi_slarw>
    2bd6:	88 0f       	add	r24, r24
    2bd8:	83 2b       	or	r24, r19
    2bda:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <twi_slarw>
    2bde:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <twi_inRepStart>
    2be2:	81 30       	cpi	r24, 0x01	; 1
    2be4:	61 f4       	brne	.+24     	; 0x2bfe <twi_writeTo+0x6e>
    2be6:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <twi_inRepStart>
    2bea:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <twi_slarw>
    2bee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2bf2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2bf6:	83 fd       	sbrc	r24, 3
    2bf8:	f8 cf       	rjmp	.-16     	; 0x2bea <twi_writeTo+0x5a>
    2bfa:	85 ec       	ldi	r24, 0xC5	; 197
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <twi_writeTo+0x70>
    2bfe:	85 ee       	ldi	r24, 0xE5	; 229
    2c00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2c04:	22 23       	and	r18, r18
    2c06:	21 f0       	breq	.+8      	; 0x2c10 <twi_writeTo+0x80>
    2c08:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <twi_state>
    2c0c:	82 30       	cpi	r24, 0x02	; 2
    2c0e:	d1 f3       	breq	.-12     	; 0x2c04 <twi_writeTo+0x74>
    2c10:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_error>
    2c14:	8f 3f       	cpi	r24, 0xFF	; 255
    2c16:	79 f0       	breq	.+30     	; 0x2c36 <twi_writeTo+0xa6>
    2c18:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_error>
    2c1c:	80 32       	cpi	r24, 0x20	; 32
    2c1e:	41 f0       	breq	.+16     	; 0x2c30 <twi_writeTo+0xa0>
    2c20:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_error>
    2c24:	80 33       	cpi	r24, 0x30	; 48
    2c26:	31 f0       	breq	.+12     	; 0x2c34 <twi_writeTo+0xa4>
    2c28:	94 e0       	ldi	r25, 0x04	; 4
    2c2a:	05 c0       	rjmp	.+10     	; 0x2c36 <twi_writeTo+0xa6>
    2c2c:	91 e0       	ldi	r25, 0x01	; 1
    2c2e:	03 c0       	rjmp	.+6      	; 0x2c36 <twi_writeTo+0xa6>
    2c30:	92 e0       	ldi	r25, 0x02	; 2
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <twi_writeTo+0xa6>
    2c34:	93 e0       	ldi	r25, 0x03	; 3
    2c36:	89 2f       	mov	r24, r25
    2c38:	0f 91       	pop	r16
    2c3a:	08 95       	ret

00002c3c <twi_transmit>:
    2c3c:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <twi_txBufferLength>
    2c40:	26 2f       	mov	r18, r22
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	24 0f       	add	r18, r20
    2c46:	31 1d       	adc	r19, r1
    2c48:	21 32       	cpi	r18, 0x21	; 33
    2c4a:	31 05       	cpc	r19, r1
    2c4c:	dc f4       	brge	.+54     	; 0x2c84 <twi_transmit+0x48>
    2c4e:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <twi_state>
    2c52:	24 30       	cpi	r18, 0x04	; 4
    2c54:	c9 f4       	brne	.+50     	; 0x2c88 <twi_transmit+0x4c>
    2c56:	fc 01       	movw	r30, r24
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	86 17       	cp	r24, r22
    2c5e:	58 f4       	brcc	.+22     	; 0x2c76 <twi_transmit+0x3a>
    2c60:	30 91 82 05 	lds	r19, 0x0582	; 0x800582 <twi_txBufferLength>
    2c64:	21 91       	ld	r18, Z+
    2c66:	dc 01       	movw	r26, r24
    2c68:	ac 57       	subi	r26, 0x7C	; 124
    2c6a:	ba 4f       	sbci	r27, 0xFA	; 250
    2c6c:	a3 0f       	add	r26, r19
    2c6e:	b1 1d       	adc	r27, r1
    2c70:	2c 93       	st	X, r18
    2c72:	01 96       	adiw	r24, 0x01	; 1
    2c74:	f3 cf       	rjmp	.-26     	; 0x2c5c <twi_transmit+0x20>
    2c76:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <twi_txBufferLength>
    2c7a:	68 0f       	add	r22, r24
    2c7c:	60 93 82 05 	sts	0x0582, r22	; 0x800582 <twi_txBufferLength>
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	08 95       	ret
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	08 95       	ret
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	08 95       	ret

00002c8c <twi_attachSlaveRxEvent>:
    2c8c:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <twi_onSlaveReceive+0x1>
    2c90:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <twi_onSlaveReceive>
    2c94:	08 95       	ret

00002c96 <twi_attachSlaveTxEvent>:
    2c96:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <twi_onSlaveTransmit+0x1>
    2c9a:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <twi_onSlaveTransmit>
    2c9e:	08 95       	ret

00002ca0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2ca0:	85 ed       	ldi	r24, 0xD5	; 213
    2ca2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2ca6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2caa:	84 fd       	sbrc	r24, 4
    2cac:	fc cf       	rjmp	.-8      	; 0x2ca6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2cae:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <twi_state>
    2cb2:	08 95       	ret

00002cb4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2cb4:	85 ec       	ldi	r24, 0xC5	; 197
    2cb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2cba:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <twi_state>
    2cbe:	08 95       	ret

00002cc0 <__vector_39>:
}

ISR(TWI_vect)
{
    2cc0:	1f 92       	push	r1
    2cc2:	0f 92       	push	r0
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	0f 92       	push	r0
    2cc8:	11 24       	eor	r1, r1
    2cca:	0b b6       	in	r0, 0x3b	; 59
    2ccc:	0f 92       	push	r0
    2cce:	2f 93       	push	r18
    2cd0:	3f 93       	push	r19
    2cd2:	4f 93       	push	r20
    2cd4:	5f 93       	push	r21
    2cd6:	6f 93       	push	r22
    2cd8:	7f 93       	push	r23
    2cda:	8f 93       	push	r24
    2cdc:	9f 93       	push	r25
    2cde:	af 93       	push	r26
    2ce0:	bf 93       	push	r27
    2ce2:	ef 93       	push	r30
    2ce4:	ff 93       	push	r31
  switch(TW_STATUS){
    2ce6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2cea:	88 7f       	andi	r24, 0xF8	; 248
    2cec:	80 36       	cpi	r24, 0x60	; 96
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <__vector_39+0x32>
    2cf0:	9d c0       	rjmp	.+314    	; 0x2e2c <__vector_39+0x16c>
    2cf2:	70 f5       	brcc	.+92     	; 0x2d50 <__vector_39+0x90>
    2cf4:	88 32       	cpi	r24, 0x28	; 40
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <__vector_39+0x3a>
    2cf8:	5c c0       	rjmp	.+184    	; 0x2db2 <__vector_39+0xf2>
    2cfa:	90 f4       	brcc	.+36     	; 0x2d20 <__vector_39+0x60>
    2cfc:	80 31       	cpi	r24, 0x10	; 16
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <__vector_39+0x42>
    2d00:	55 c0       	rjmp	.+170    	; 0x2dac <__vector_39+0xec>
    2d02:	38 f4       	brcc	.+14     	; 0x2d12 <__vector_39+0x52>
    2d04:	88 23       	and	r24, r24
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <__vector_39+0x4a>
    2d08:	f3 c0       	rjmp	.+486    	; 0x2ef0 <__vector_39+0x230>
    2d0a:	88 30       	cpi	r24, 0x08	; 8
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <__vector_39+0x50>
    2d0e:	4e c0       	rjmp	.+156    	; 0x2dac <__vector_39+0xec>
    2d10:	f2 c0       	rjmp	.+484    	; 0x2ef6 <__vector_39+0x236>
    2d12:	88 31       	cpi	r24, 0x18	; 24
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <__vector_39+0x58>
    2d16:	4d c0       	rjmp	.+154    	; 0x2db2 <__vector_39+0xf2>
    2d18:	80 32       	cpi	r24, 0x20	; 32
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <__vector_39+0x5e>
    2d1c:	5e c0       	rjmp	.+188    	; 0x2dda <__vector_39+0x11a>
    2d1e:	eb c0       	rjmp	.+470    	; 0x2ef6 <__vector_39+0x236>
    2d20:	80 34       	cpi	r24, 0x40	; 64
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <__vector_39+0x66>
    2d24:	69 c0       	rjmp	.+210    	; 0x2df8 <__vector_39+0x138>
    2d26:	50 f4       	brcc	.+20     	; 0x2d3c <__vector_39+0x7c>
    2d28:	80 33       	cpi	r24, 0x30	; 48
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <__vector_39+0x6e>
    2d2c:	56 c0       	rjmp	.+172    	; 0x2dda <__vector_39+0x11a>
    2d2e:	88 33       	cpi	r24, 0x38	; 56
    2d30:	09 f0       	breq	.+2      	; 0x2d34 <__vector_39+0x74>
    2d32:	e1 c0       	rjmp	.+450    	; 0x2ef6 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2d34:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <twi_error>
      twi_releaseBus();
    2d38:	bd df       	rcall	.-134    	; 0x2cb4 <twi_releaseBus>
      break;
    2d3a:	dd c0       	rjmp	.+442    	; 0x2ef6 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2d3c:	80 35       	cpi	r24, 0x50	; 80
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <__vector_39+0x82>
    2d40:	4f c0       	rjmp	.+158    	; 0x2de0 <__vector_39+0x120>
    2d42:	88 35       	cpi	r24, 0x58	; 88
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <__vector_39+0x88>
    2d46:	5d c0       	rjmp	.+186    	; 0x2e02 <__vector_39+0x142>
    2d48:	88 34       	cpi	r24, 0x48	; 72
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <__vector_39+0x8e>
    2d4c:	d4 c0       	rjmp	.+424    	; 0x2ef6 <__vector_39+0x236>
    2d4e:	d2 c0       	rjmp	.+420    	; 0x2ef4 <__vector_39+0x234>
    2d50:	88 39       	cpi	r24, 0x98	; 152
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <__vector_39+0x96>
    2d54:	c3 c0       	rjmp	.+390    	; 0x2edc <__vector_39+0x21c>
    2d56:	a8 f4       	brcc	.+42     	; 0x2d82 <__vector_39+0xc2>
    2d58:	88 37       	cpi	r24, 0x78	; 120
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <__vector_39+0x9e>
    2d5c:	67 c0       	rjmp	.+206    	; 0x2e2c <__vector_39+0x16c>
    2d5e:	38 f4       	brcc	.+14     	; 0x2d6e <__vector_39+0xae>
    2d60:	88 36       	cpi	r24, 0x68	; 104
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <__vector_39+0xa6>
    2d64:	63 c0       	rjmp	.+198    	; 0x2e2c <__vector_39+0x16c>
    2d66:	80 37       	cpi	r24, 0x70	; 112
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <__vector_39+0xac>
    2d6a:	60 c0       	rjmp	.+192    	; 0x2e2c <__vector_39+0x16c>
    2d6c:	c4 c0       	rjmp	.+392    	; 0x2ef6 <__vector_39+0x236>
    2d6e:	88 38       	cpi	r24, 0x88	; 136
    2d70:	09 f4       	brne	.+2      	; 0x2d74 <__vector_39+0xb4>
    2d72:	b4 c0       	rjmp	.+360    	; 0x2edc <__vector_39+0x21c>
    2d74:	80 39       	cpi	r24, 0x90	; 144
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <__vector_39+0xba>
    2d78:	5f c0       	rjmp	.+190    	; 0x2e38 <__vector_39+0x178>
    2d7a:	80 38       	cpi	r24, 0x80	; 128
    2d7c:	09 f0       	breq	.+2      	; 0x2d80 <__vector_39+0xc0>
    2d7e:	bb c0       	rjmp	.+374    	; 0x2ef6 <__vector_39+0x236>
    2d80:	5b c0       	rjmp	.+182    	; 0x2e38 <__vector_39+0x178>
    2d82:	80 3b       	cpi	r24, 0xB0	; 176
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <__vector_39+0xc8>
    2d86:	82 c0       	rjmp	.+260    	; 0x2e8c <__vector_39+0x1cc>
    2d88:	38 f4       	brcc	.+14     	; 0x2d98 <__vector_39+0xd8>
    2d8a:	80 3a       	cpi	r24, 0xA0	; 160
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <__vector_39+0xd0>
    2d8e:	66 c0       	rjmp	.+204    	; 0x2e5c <__vector_39+0x19c>
    2d90:	88 3a       	cpi	r24, 0xA8	; 168
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <__vector_39+0xd6>
    2d94:	7b c0       	rjmp	.+246    	; 0x2e8c <__vector_39+0x1cc>
    2d96:	af c0       	rjmp	.+350    	; 0x2ef6 <__vector_39+0x236>
    2d98:	80 3c       	cpi	r24, 0xC0	; 192
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <__vector_39+0xde>
    2d9c:	a3 c0       	rjmp	.+326    	; 0x2ee4 <__vector_39+0x224>
    2d9e:	88 3c       	cpi	r24, 0xC8	; 200
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <__vector_39+0xe4>
    2da2:	a0 c0       	rjmp	.+320    	; 0x2ee4 <__vector_39+0x224>
    2da4:	88 3b       	cpi	r24, 0xB8	; 184
    2da6:	09 f4       	brne	.+2      	; 0x2daa <__vector_39+0xea>
    2da8:	86 c0       	rjmp	.+268    	; 0x2eb6 <__vector_39+0x1f6>
    2daa:	a5 c0       	rjmp	.+330    	; 0x2ef6 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2dac:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <twi_slarw>
    2db0:	10 c0       	rjmp	.+32     	; 0x2dd2 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2db2:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <twi_masterBufferIndex>
    2db6:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <twi_masterBufferLength>
    2dba:	98 17       	cp	r25, r24
    2dbc:	70 f5       	brcc	.+92     	; 0x2e1a <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2dbe:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <twi_masterBufferIndex>
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	8e 0f       	add	r24, r30
    2dc6:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <twi_masterBufferIndex>
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	ea 55       	subi	r30, 0x5A	; 90
    2dce:	fa 4f       	sbci	r31, 0xFA	; 250
    2dd0:	80 81       	ld	r24, Z
    2dd2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2dd6:	85 ec       	ldi	r24, 0xC5	; 197
    2dd8:	82 c0       	rjmp	.+260    	; 0x2ede <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2dda:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <twi_error>
    2dde:	8a c0       	rjmp	.+276    	; 0x2ef4 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2de0:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <twi_masterBufferIndex>
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	8e 0f       	add	r24, r30
    2de8:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <twi_masterBufferIndex>
    2dec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	ea 55       	subi	r30, 0x5A	; 90
    2df4:	fa 4f       	sbci	r31, 0xFA	; 250
    2df6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2df8:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <twi_masterBufferIndex>
    2dfc:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <twi_masterBufferLength>
    2e00:	6a c0       	rjmp	.+212    	; 0x2ed6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2e02:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <twi_masterBufferIndex>
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	8e 0f       	add	r24, r30
    2e0a:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <twi_masterBufferIndex>
    2e0e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	ea 55       	subi	r30, 0x5A	; 90
    2e16:	fa 4f       	sbci	r31, 0xFA	; 250
    2e18:	80 83       	st	Z, r24
	if (twi_sendStop)
    2e1a:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <twi_sendStop>
    2e1e:	81 11       	cpse	r24, r1
    2e20:	69 c0       	rjmp	.+210    	; 0x2ef4 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2e28:	84 ea       	ldi	r24, 0xA4	; 164
    2e2a:	5d c0       	rjmp	.+186    	; 0x2ee6 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2e2c:	83 e0       	ldi	r24, 0x03	; 3
    2e2e:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2e32:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <twi_rxBufferIndex>
    2e36:	cf cf       	rjmp	.-98     	; 0x2dd6 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e38:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <twi_rxBufferIndex>
    2e3c:	80 32       	cpi	r24, 0x20	; 32
    2e3e:	08 f0       	brcs	.+2      	; 0x2e42 <__vector_39+0x182>
    2e40:	4d c0       	rjmp	.+154    	; 0x2edc <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2e42:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <twi_rxBufferIndex>
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	8e 0f       	add	r24, r30
    2e4a:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <twi_rxBufferIndex>
    2e4e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	ee 59       	subi	r30, 0x9E	; 158
    2e56:	fa 4f       	sbci	r31, 0xFA	; 250
    2e58:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2e5a:	bd cf       	rjmp	.-134    	; 0x2dd6 <__vector_39+0x116>
    2e5c:	2b df       	rcall	.-426    	; 0x2cb4 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e5e:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <twi_rxBufferIndex>
    2e62:	80 32       	cpi	r24, 0x20	; 32
    2e64:	30 f4       	brcc	.+12     	; 0x2e72 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2e66:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <twi_rxBufferIndex>
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	ee 59       	subi	r30, 0x9E	; 158
    2e6e:	fa 4f       	sbci	r31, 0xFA	; 250
    2e70:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2e72:	60 91 61 05 	lds	r22, 0x0561	; 0x800561 <twi_rxBufferIndex>
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	e0 91 c6 05 	lds	r30, 0x05C6	; 0x8005c6 <twi_onSlaveReceive>
    2e7c:	f0 91 c7 05 	lds	r31, 0x05C7	; 0x8005c7 <twi_onSlaveReceive+0x1>
    2e80:	82 e6       	ldi	r24, 0x62	; 98
    2e82:	95 e0       	ldi	r25, 0x05	; 5
    2e84:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2e86:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <twi_rxBufferIndex>
      break;
    2e8a:	35 c0       	rjmp	.+106    	; 0x2ef6 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2e8c:	84 e0       	ldi	r24, 0x04	; 4
    2e8e:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2e92:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2e96:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2e9a:	e0 91 c8 05 	lds	r30, 0x05C8	; 0x8005c8 <twi_onSlaveTransmit>
    2e9e:	f0 91 c9 05 	lds	r31, 0x05C9	; 0x8005c9 <twi_onSlaveTransmit+0x1>
    2ea2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2ea4:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <twi_txBufferLength>
    2ea8:	81 11       	cpse	r24, r1
    2eaa:	05 c0       	rjmp	.+10     	; 0x2eb6 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2eb2:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2eb6:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <twi_txBufferIndex>
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	8e 0f       	add	r24, r30
    2ebe:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <twi_txBufferIndex>
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	ec 57       	subi	r30, 0x7C	; 124
    2ec6:	fa 4f       	sbci	r31, 0xFA	; 250
    2ec8:	80 81       	ld	r24, Z
    2eca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2ece:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <twi_txBufferIndex>
    2ed2:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <twi_txBufferLength>
    2ed6:	98 17       	cp	r25, r24
    2ed8:	08 f4       	brcc	.+2      	; 0x2edc <__vector_39+0x21c>
    2eda:	7d cf       	rjmp	.-262    	; 0x2dd6 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2edc:	85 e8       	ldi	r24, 0x85	; 133
    2ede:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ee2:	09 c0       	rjmp	.+18     	; 0x2ef6 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ee4:	85 ec       	ldi	r24, 0xC5	; 197
    2ee6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2eea:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <twi_state>
      break;
    2eee:	03 c0       	rjmp	.+6      	; 0x2ef6 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2ef0:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <twi_error>
      twi_stop();
    2ef4:	d5 de       	rcall	.-598    	; 0x2ca0 <twi_stop>
      break;
  }
}
    2ef6:	ff 91       	pop	r31
    2ef8:	ef 91       	pop	r30
    2efa:	bf 91       	pop	r27
    2efc:	af 91       	pop	r26
    2efe:	9f 91       	pop	r25
    2f00:	8f 91       	pop	r24
    2f02:	7f 91       	pop	r23
    2f04:	6f 91       	pop	r22
    2f06:	5f 91       	pop	r21
    2f08:	4f 91       	pop	r20
    2f0a:	3f 91       	pop	r19
    2f0c:	2f 91       	pop	r18
    2f0e:	0f 90       	pop	r0
    2f10:	0b be       	out	0x3b, r0	; 59
    2f12:	0f 90       	pop	r0
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	0f 90       	pop	r0
    2f18:	1f 90       	pop	r1
    2f1a:	18 95       	reti

00002f1c <__udivmodsi4>:
    2f1c:	a1 e2       	ldi	r26, 0x21	; 33
    2f1e:	1a 2e       	mov	r1, r26
    2f20:	aa 1b       	sub	r26, r26
    2f22:	bb 1b       	sub	r27, r27
    2f24:	fd 01       	movw	r30, r26
    2f26:	0d c0       	rjmp	.+26     	; 0x2f42 <__udivmodsi4_ep>

00002f28 <__udivmodsi4_loop>:
    2f28:	aa 1f       	adc	r26, r26
    2f2a:	bb 1f       	adc	r27, r27
    2f2c:	ee 1f       	adc	r30, r30
    2f2e:	ff 1f       	adc	r31, r31
    2f30:	a2 17       	cp	r26, r18
    2f32:	b3 07       	cpc	r27, r19
    2f34:	e4 07       	cpc	r30, r20
    2f36:	f5 07       	cpc	r31, r21
    2f38:	20 f0       	brcs	.+8      	; 0x2f42 <__udivmodsi4_ep>
    2f3a:	a2 1b       	sub	r26, r18
    2f3c:	b3 0b       	sbc	r27, r19
    2f3e:	e4 0b       	sbc	r30, r20
    2f40:	f5 0b       	sbc	r31, r21

00002f42 <__udivmodsi4_ep>:
    2f42:	66 1f       	adc	r22, r22
    2f44:	77 1f       	adc	r23, r23
    2f46:	88 1f       	adc	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	1a 94       	dec	r1
    2f4c:	69 f7       	brne	.-38     	; 0x2f28 <__udivmodsi4_loop>
    2f4e:	60 95       	com	r22
    2f50:	70 95       	com	r23
    2f52:	80 95       	com	r24
    2f54:	90 95       	com	r25
    2f56:	9b 01       	movw	r18, r22
    2f58:	ac 01       	movw	r20, r24
    2f5a:	bd 01       	movw	r22, r26
    2f5c:	cf 01       	movw	r24, r30
    2f5e:	08 95       	ret

00002f60 <__tablejump2__>:
    2f60:	ee 0f       	add	r30, r30
    2f62:	ff 1f       	adc	r31, r31
    2f64:	88 1f       	adc	r24, r24
    2f66:	8b bf       	out	0x3b, r24	; 59
    2f68:	07 90       	elpm	r0, Z+
    2f6a:	f6 91       	elpm	r31, Z
    2f6c:	e0 2d       	mov	r30, r0
    2f6e:	19 94       	eijmp

00002f70 <malloc>:
    2f70:	0f 93       	push	r16
    2f72:	1f 93       	push	r17
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    2f78:	82 30       	cpi	r24, 0x02	; 2
    2f7a:	91 05       	cpc	r25, r1
    2f7c:	10 f4       	brcc	.+4      	; 0x2f82 <malloc+0x12>
    2f7e:	82 e0       	ldi	r24, 0x02	; 2
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	e0 91 d0 05 	lds	r30, 0x05D0	; 0x8005d0 <__flp>
    2f86:	f0 91 d1 05 	lds	r31, 0x05D1	; 0x8005d1 <__flp+0x1>
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	a0 e0       	ldi	r26, 0x00	; 0
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	30 97       	sbiw	r30, 0x00	; 0
    2f94:	19 f1       	breq	.+70     	; 0x2fdc <malloc+0x6c>
    2f96:	40 81       	ld	r20, Z
    2f98:	51 81       	ldd	r21, Z+1	; 0x01
    2f9a:	02 81       	ldd	r16, Z+2	; 0x02
    2f9c:	13 81       	ldd	r17, Z+3	; 0x03
    2f9e:	48 17       	cp	r20, r24
    2fa0:	59 07       	cpc	r21, r25
    2fa2:	c8 f0       	brcs	.+50     	; 0x2fd6 <malloc+0x66>
    2fa4:	84 17       	cp	r24, r20
    2fa6:	95 07       	cpc	r25, r21
    2fa8:	69 f4       	brne	.+26     	; 0x2fc4 <malloc+0x54>
    2faa:	10 97       	sbiw	r26, 0x00	; 0
    2fac:	31 f0       	breq	.+12     	; 0x2fba <malloc+0x4a>
    2fae:	12 96       	adiw	r26, 0x02	; 2
    2fb0:	0c 93       	st	X, r16
    2fb2:	12 97       	sbiw	r26, 0x02	; 2
    2fb4:	13 96       	adiw	r26, 0x03	; 3
    2fb6:	1c 93       	st	X, r17
    2fb8:	27 c0       	rjmp	.+78     	; 0x3008 <malloc+0x98>
    2fba:	00 93 d0 05 	sts	0x05D0, r16	; 0x8005d0 <__flp>
    2fbe:	10 93 d1 05 	sts	0x05D1, r17	; 0x8005d1 <__flp+0x1>
    2fc2:	22 c0       	rjmp	.+68     	; 0x3008 <malloc+0x98>
    2fc4:	21 15       	cp	r18, r1
    2fc6:	31 05       	cpc	r19, r1
    2fc8:	19 f0       	breq	.+6      	; 0x2fd0 <malloc+0x60>
    2fca:	42 17       	cp	r20, r18
    2fcc:	53 07       	cpc	r21, r19
    2fce:	18 f4       	brcc	.+6      	; 0x2fd6 <malloc+0x66>
    2fd0:	9a 01       	movw	r18, r20
    2fd2:	bd 01       	movw	r22, r26
    2fd4:	ef 01       	movw	r28, r30
    2fd6:	df 01       	movw	r26, r30
    2fd8:	f8 01       	movw	r30, r16
    2fda:	db cf       	rjmp	.-74     	; 0x2f92 <malloc+0x22>
    2fdc:	21 15       	cp	r18, r1
    2fde:	31 05       	cpc	r19, r1
    2fe0:	f9 f0       	breq	.+62     	; 0x3020 <malloc+0xb0>
    2fe2:	28 1b       	sub	r18, r24
    2fe4:	39 0b       	sbc	r19, r25
    2fe6:	24 30       	cpi	r18, 0x04	; 4
    2fe8:	31 05       	cpc	r19, r1
    2fea:	80 f4       	brcc	.+32     	; 0x300c <malloc+0x9c>
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff0:	61 15       	cp	r22, r1
    2ff2:	71 05       	cpc	r23, r1
    2ff4:	21 f0       	breq	.+8      	; 0x2ffe <malloc+0x8e>
    2ff6:	fb 01       	movw	r30, r22
    2ff8:	93 83       	std	Z+3, r25	; 0x03
    2ffa:	82 83       	std	Z+2, r24	; 0x02
    2ffc:	04 c0       	rjmp	.+8      	; 0x3006 <malloc+0x96>
    2ffe:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <__flp+0x1>
    3002:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <__flp>
    3006:	fe 01       	movw	r30, r28
    3008:	32 96       	adiw	r30, 0x02	; 2
    300a:	44 c0       	rjmp	.+136    	; 0x3094 <malloc+0x124>
    300c:	fe 01       	movw	r30, r28
    300e:	e2 0f       	add	r30, r18
    3010:	f3 1f       	adc	r31, r19
    3012:	81 93       	st	Z+, r24
    3014:	91 93       	st	Z+, r25
    3016:	22 50       	subi	r18, 0x02	; 2
    3018:	31 09       	sbc	r19, r1
    301a:	39 83       	std	Y+1, r19	; 0x01
    301c:	28 83       	st	Y, r18
    301e:	3a c0       	rjmp	.+116    	; 0x3094 <malloc+0x124>
    3020:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <__brkval>
    3024:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <__brkval+0x1>
    3028:	23 2b       	or	r18, r19
    302a:	41 f4       	brne	.+16     	; 0x303c <malloc+0xcc>
    302c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3030:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3034:	30 93 cf 05 	sts	0x05CF, r19	; 0x8005cf <__brkval+0x1>
    3038:	20 93 ce 05 	sts	0x05CE, r18	; 0x8005ce <__brkval>
    303c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3040:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3044:	21 15       	cp	r18, r1
    3046:	31 05       	cpc	r19, r1
    3048:	41 f4       	brne	.+16     	; 0x305a <malloc+0xea>
    304a:	2d b7       	in	r18, 0x3d	; 61
    304c:	3e b7       	in	r19, 0x3e	; 62
    304e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3052:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3056:	24 1b       	sub	r18, r20
    3058:	35 0b       	sbc	r19, r21
    305a:	e0 91 ce 05 	lds	r30, 0x05CE	; 0x8005ce <__brkval>
    305e:	f0 91 cf 05 	lds	r31, 0x05CF	; 0x8005cf <__brkval+0x1>
    3062:	e2 17       	cp	r30, r18
    3064:	f3 07       	cpc	r31, r19
    3066:	a0 f4       	brcc	.+40     	; 0x3090 <malloc+0x120>
    3068:	2e 1b       	sub	r18, r30
    306a:	3f 0b       	sbc	r19, r31
    306c:	28 17       	cp	r18, r24
    306e:	39 07       	cpc	r19, r25
    3070:	78 f0       	brcs	.+30     	; 0x3090 <malloc+0x120>
    3072:	ac 01       	movw	r20, r24
    3074:	4e 5f       	subi	r20, 0xFE	; 254
    3076:	5f 4f       	sbci	r21, 0xFF	; 255
    3078:	24 17       	cp	r18, r20
    307a:	35 07       	cpc	r19, r21
    307c:	48 f0       	brcs	.+18     	; 0x3090 <malloc+0x120>
    307e:	4e 0f       	add	r20, r30
    3080:	5f 1f       	adc	r21, r31
    3082:	50 93 cf 05 	sts	0x05CF, r21	; 0x8005cf <__brkval+0x1>
    3086:	40 93 ce 05 	sts	0x05CE, r20	; 0x8005ce <__brkval>
    308a:	81 93       	st	Z+, r24
    308c:	91 93       	st	Z+, r25
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <malloc+0x124>
    3090:	e0 e0       	ldi	r30, 0x00	; 0
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	cf 01       	movw	r24, r30
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	08 95       	ret

000030a0 <free>:
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	09 f4       	brne	.+2      	; 0x30aa <free+0xa>
    30a8:	81 c0       	rjmp	.+258    	; 0x31ac <free+0x10c>
    30aa:	fc 01       	movw	r30, r24
    30ac:	32 97       	sbiw	r30, 0x02	; 2
    30ae:	13 82       	std	Z+3, r1	; 0x03
    30b0:	12 82       	std	Z+2, r1	; 0x02
    30b2:	a0 91 d0 05 	lds	r26, 0x05D0	; 0x8005d0 <__flp>
    30b6:	b0 91 d1 05 	lds	r27, 0x05D1	; 0x8005d1 <__flp+0x1>
    30ba:	10 97       	sbiw	r26, 0x00	; 0
    30bc:	81 f4       	brne	.+32     	; 0x30de <free+0x3e>
    30be:	20 81       	ld	r18, Z
    30c0:	31 81       	ldd	r19, Z+1	; 0x01
    30c2:	82 0f       	add	r24, r18
    30c4:	93 1f       	adc	r25, r19
    30c6:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <__brkval>
    30ca:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <__brkval+0x1>
    30ce:	28 17       	cp	r18, r24
    30d0:	39 07       	cpc	r19, r25
    30d2:	51 f5       	brne	.+84     	; 0x3128 <free+0x88>
    30d4:	f0 93 cf 05 	sts	0x05CF, r31	; 0x8005cf <__brkval+0x1>
    30d8:	e0 93 ce 05 	sts	0x05CE, r30	; 0x8005ce <__brkval>
    30dc:	67 c0       	rjmp	.+206    	; 0x31ac <free+0x10c>
    30de:	ed 01       	movw	r28, r26
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	ce 17       	cp	r28, r30
    30e6:	df 07       	cpc	r29, r31
    30e8:	40 f4       	brcc	.+16     	; 0x30fa <free+0x5a>
    30ea:	4a 81       	ldd	r20, Y+2	; 0x02
    30ec:	5b 81       	ldd	r21, Y+3	; 0x03
    30ee:	9e 01       	movw	r18, r28
    30f0:	41 15       	cp	r20, r1
    30f2:	51 05       	cpc	r21, r1
    30f4:	f1 f0       	breq	.+60     	; 0x3132 <free+0x92>
    30f6:	ea 01       	movw	r28, r20
    30f8:	f5 cf       	rjmp	.-22     	; 0x30e4 <free+0x44>
    30fa:	d3 83       	std	Z+3, r29	; 0x03
    30fc:	c2 83       	std	Z+2, r28	; 0x02
    30fe:	40 81       	ld	r20, Z
    3100:	51 81       	ldd	r21, Z+1	; 0x01
    3102:	84 0f       	add	r24, r20
    3104:	95 1f       	adc	r25, r21
    3106:	c8 17       	cp	r28, r24
    3108:	d9 07       	cpc	r29, r25
    310a:	59 f4       	brne	.+22     	; 0x3122 <free+0x82>
    310c:	88 81       	ld	r24, Y
    310e:	99 81       	ldd	r25, Y+1	; 0x01
    3110:	84 0f       	add	r24, r20
    3112:	95 1f       	adc	r25, r21
    3114:	02 96       	adiw	r24, 0x02	; 2
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	80 83       	st	Z, r24
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	9b 81       	ldd	r25, Y+3	; 0x03
    311e:	93 83       	std	Z+3, r25	; 0x03
    3120:	82 83       	std	Z+2, r24	; 0x02
    3122:	21 15       	cp	r18, r1
    3124:	31 05       	cpc	r19, r1
    3126:	29 f4       	brne	.+10     	; 0x3132 <free+0x92>
    3128:	f0 93 d1 05 	sts	0x05D1, r31	; 0x8005d1 <__flp+0x1>
    312c:	e0 93 d0 05 	sts	0x05D0, r30	; 0x8005d0 <__flp>
    3130:	3d c0       	rjmp	.+122    	; 0x31ac <free+0x10c>
    3132:	e9 01       	movw	r28, r18
    3134:	fb 83       	std	Y+3, r31	; 0x03
    3136:	ea 83       	std	Y+2, r30	; 0x02
    3138:	49 91       	ld	r20, Y+
    313a:	59 91       	ld	r21, Y+
    313c:	c4 0f       	add	r28, r20
    313e:	d5 1f       	adc	r29, r21
    3140:	ec 17       	cp	r30, r28
    3142:	fd 07       	cpc	r31, r29
    3144:	61 f4       	brne	.+24     	; 0x315e <free+0xbe>
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	84 0f       	add	r24, r20
    314c:	95 1f       	adc	r25, r21
    314e:	02 96       	adiw	r24, 0x02	; 2
    3150:	e9 01       	movw	r28, r18
    3152:	99 83       	std	Y+1, r25	; 0x01
    3154:	88 83       	st	Y, r24
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	9b 83       	std	Y+3, r25	; 0x03
    315c:	8a 83       	std	Y+2, r24	; 0x02
    315e:	e0 e0       	ldi	r30, 0x00	; 0
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	12 96       	adiw	r26, 0x02	; 2
    3164:	8d 91       	ld	r24, X+
    3166:	9c 91       	ld	r25, X
    3168:	13 97       	sbiw	r26, 0x03	; 3
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	19 f0       	breq	.+6      	; 0x3174 <free+0xd4>
    316e:	fd 01       	movw	r30, r26
    3170:	dc 01       	movw	r26, r24
    3172:	f7 cf       	rjmp	.-18     	; 0x3162 <free+0xc2>
    3174:	8d 91       	ld	r24, X+
    3176:	9c 91       	ld	r25, X
    3178:	11 97       	sbiw	r26, 0x01	; 1
    317a:	9d 01       	movw	r18, r26
    317c:	2e 5f       	subi	r18, 0xFE	; 254
    317e:	3f 4f       	sbci	r19, 0xFF	; 255
    3180:	82 0f       	add	r24, r18
    3182:	93 1f       	adc	r25, r19
    3184:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <__brkval>
    3188:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <__brkval+0x1>
    318c:	28 17       	cp	r18, r24
    318e:	39 07       	cpc	r19, r25
    3190:	69 f4       	brne	.+26     	; 0x31ac <free+0x10c>
    3192:	30 97       	sbiw	r30, 0x00	; 0
    3194:	29 f4       	brne	.+10     	; 0x31a0 <free+0x100>
    3196:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <__flp+0x1>
    319a:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <__flp>
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <free+0x104>
    31a0:	13 82       	std	Z+3, r1	; 0x03
    31a2:	12 82       	std	Z+2, r1	; 0x02
    31a4:	b0 93 cf 05 	sts	0x05CF, r27	; 0x8005cf <__brkval+0x1>
    31a8:	a0 93 ce 05 	sts	0x05CE, r26	; 0x8005ce <__brkval>
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	08 95       	ret

000031b2 <realloc>:
    31b2:	6f 92       	push	r6
    31b4:	7f 92       	push	r7
    31b6:	8f 92       	push	r8
    31b8:	9f 92       	push	r9
    31ba:	af 92       	push	r10
    31bc:	bf 92       	push	r11
    31be:	cf 92       	push	r12
    31c0:	df 92       	push	r13
    31c2:	ef 92       	push	r14
    31c4:	ff 92       	push	r15
    31c6:	0f 93       	push	r16
    31c8:	1f 93       	push	r17
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	81 f4       	brne	.+32     	; 0x31f2 <realloc+0x40>
    31d2:	cb 01       	movw	r24, r22
    31d4:	df 91       	pop	r29
    31d6:	cf 91       	pop	r28
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	df 90       	pop	r13
    31e2:	cf 90       	pop	r12
    31e4:	bf 90       	pop	r11
    31e6:	af 90       	pop	r10
    31e8:	9f 90       	pop	r9
    31ea:	8f 90       	pop	r8
    31ec:	7f 90       	pop	r7
    31ee:	6f 90       	pop	r6
    31f0:	bf ce       	rjmp	.-642    	; 0x2f70 <malloc>
    31f2:	fc 01       	movw	r30, r24
    31f4:	e6 0f       	add	r30, r22
    31f6:	f7 1f       	adc	r31, r23
    31f8:	9c 01       	movw	r18, r24
    31fa:	22 50       	subi	r18, 0x02	; 2
    31fc:	31 09       	sbc	r19, r1
    31fe:	e2 17       	cp	r30, r18
    3200:	f3 07       	cpc	r31, r19
    3202:	08 f4       	brcc	.+2      	; 0x3206 <realloc+0x54>
    3204:	a5 c0       	rjmp	.+330    	; 0x3350 <realloc+0x19e>
    3206:	ec 01       	movw	r28, r24
    3208:	d9 01       	movw	r26, r18
    320a:	0d 91       	ld	r16, X+
    320c:	1c 91       	ld	r17, X
    320e:	11 97       	sbiw	r26, 0x01	; 1
    3210:	06 17       	cp	r16, r22
    3212:	17 07       	cpc	r17, r23
    3214:	a8 f0       	brcs	.+42     	; 0x3240 <realloc+0x8e>
    3216:	05 30       	cpi	r16, 0x05	; 5
    3218:	11 05       	cpc	r17, r1
    321a:	08 f4       	brcc	.+2      	; 0x321e <realloc+0x6c>
    321c:	97 c0       	rjmp	.+302    	; 0x334c <realloc+0x19a>
    321e:	c8 01       	movw	r24, r16
    3220:	04 97       	sbiw	r24, 0x04	; 4
    3222:	86 17       	cp	r24, r22
    3224:	97 07       	cpc	r25, r23
    3226:	08 f4       	brcc	.+2      	; 0x322a <realloc+0x78>
    3228:	91 c0       	rjmp	.+290    	; 0x334c <realloc+0x19a>
    322a:	02 50       	subi	r16, 0x02	; 2
    322c:	11 09       	sbc	r17, r1
    322e:	06 1b       	sub	r16, r22
    3230:	17 0b       	sbc	r17, r23
    3232:	01 93       	st	Z+, r16
    3234:	11 93       	st	Z+, r17
    3236:	6d 93       	st	X+, r22
    3238:	7c 93       	st	X, r23
    323a:	cf 01       	movw	r24, r30
    323c:	31 df       	rcall	.-414    	; 0x30a0 <free>
    323e:	86 c0       	rjmp	.+268    	; 0x334c <realloc+0x19a>
    3240:	5b 01       	movw	r10, r22
    3242:	a0 1a       	sub	r10, r16
    3244:	b1 0a       	sbc	r11, r17
    3246:	4c 01       	movw	r8, r24
    3248:	80 0e       	add	r8, r16
    324a:	91 1e       	adc	r9, r17
    324c:	a0 91 d0 05 	lds	r26, 0x05D0	; 0x8005d0 <__flp>
    3250:	b0 91 d1 05 	lds	r27, 0x05D1	; 0x8005d1 <__flp+0x1>
    3254:	61 2c       	mov	r6, r1
    3256:	71 2c       	mov	r7, r1
    3258:	e1 2c       	mov	r14, r1
    325a:	f1 2c       	mov	r15, r1
    325c:	10 97       	sbiw	r26, 0x00	; 0
    325e:	09 f4       	brne	.+2      	; 0x3262 <realloc+0xb0>
    3260:	46 c0       	rjmp	.+140    	; 0x32ee <realloc+0x13c>
    3262:	8d 91       	ld	r24, X+
    3264:	9c 91       	ld	r25, X
    3266:	11 97       	sbiw	r26, 0x01	; 1
    3268:	a8 15       	cp	r26, r8
    326a:	b9 05       	cpc	r27, r9
    326c:	b1 f5       	brne	.+108    	; 0x32da <realloc+0x128>
    326e:	6c 01       	movw	r12, r24
    3270:	42 e0       	ldi	r20, 0x02	; 2
    3272:	c4 0e       	add	r12, r20
    3274:	d1 1c       	adc	r13, r1
    3276:	ca 14       	cp	r12, r10
    3278:	db 04       	cpc	r13, r11
    327a:	78 f1       	brcs	.+94     	; 0x32da <realloc+0x128>
    327c:	4c 01       	movw	r8, r24
    327e:	8a 18       	sub	r8, r10
    3280:	9b 08       	sbc	r9, r11
    3282:	64 01       	movw	r12, r8
    3284:	42 e0       	ldi	r20, 0x02	; 2
    3286:	c4 0e       	add	r12, r20
    3288:	d1 1c       	adc	r13, r1
    328a:	12 96       	adiw	r26, 0x02	; 2
    328c:	bc 90       	ld	r11, X
    328e:	12 97       	sbiw	r26, 0x02	; 2
    3290:	13 96       	adiw	r26, 0x03	; 3
    3292:	ac 91       	ld	r26, X
    3294:	b5 e0       	ldi	r27, 0x05	; 5
    3296:	cb 16       	cp	r12, r27
    3298:	d1 04       	cpc	r13, r1
    329a:	40 f0       	brcs	.+16     	; 0x32ac <realloc+0xfa>
    329c:	b2 82       	std	Z+2, r11	; 0x02
    329e:	a3 83       	std	Z+3, r26	; 0x03
    32a0:	91 82       	std	Z+1, r9	; 0x01
    32a2:	80 82       	st	Z, r8
    32a4:	d9 01       	movw	r26, r18
    32a6:	6d 93       	st	X+, r22
    32a8:	7c 93       	st	X, r23
    32aa:	09 c0       	rjmp	.+18     	; 0x32be <realloc+0x10c>
    32ac:	0e 5f       	subi	r16, 0xFE	; 254
    32ae:	1f 4f       	sbci	r17, 0xFF	; 255
    32b0:	80 0f       	add	r24, r16
    32b2:	91 1f       	adc	r25, r17
    32b4:	f9 01       	movw	r30, r18
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	80 83       	st	Z, r24
    32ba:	eb 2d       	mov	r30, r11
    32bc:	fa 2f       	mov	r31, r26
    32be:	e1 14       	cp	r14, r1
    32c0:	f1 04       	cpc	r15, r1
    32c2:	31 f0       	breq	.+12     	; 0x32d0 <realloc+0x11e>
    32c4:	d7 01       	movw	r26, r14
    32c6:	13 96       	adiw	r26, 0x03	; 3
    32c8:	fc 93       	st	X, r31
    32ca:	ee 93       	st	-X, r30
    32cc:	12 97       	sbiw	r26, 0x02	; 2
    32ce:	3e c0       	rjmp	.+124    	; 0x334c <realloc+0x19a>
    32d0:	f0 93 d1 05 	sts	0x05D1, r31	; 0x8005d1 <__flp+0x1>
    32d4:	e0 93 d0 05 	sts	0x05D0, r30	; 0x8005d0 <__flp>
    32d8:	39 c0       	rjmp	.+114    	; 0x334c <realloc+0x19a>
    32da:	68 16       	cp	r6, r24
    32dc:	79 06       	cpc	r7, r25
    32de:	08 f4       	brcc	.+2      	; 0x32e2 <realloc+0x130>
    32e0:	3c 01       	movw	r6, r24
    32e2:	7d 01       	movw	r14, r26
    32e4:	12 96       	adiw	r26, 0x02	; 2
    32e6:	0d 90       	ld	r0, X+
    32e8:	bc 91       	ld	r27, X
    32ea:	a0 2d       	mov	r26, r0
    32ec:	b7 cf       	rjmp	.-146    	; 0x325c <realloc+0xaa>
    32ee:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <__brkval>
    32f2:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <__brkval+0x1>
    32f6:	88 16       	cp	r8, r24
    32f8:	99 06       	cpc	r9, r25
    32fa:	e1 f4       	brne	.+56     	; 0x3334 <realloc+0x182>
    32fc:	66 16       	cp	r6, r22
    32fe:	77 06       	cpc	r7, r23
    3300:	c8 f4       	brcc	.+50     	; 0x3334 <realloc+0x182>
    3302:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3306:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	41 f4       	brne	.+16     	; 0x331e <realloc+0x16c>
    330e:	8d b7       	in	r24, 0x3d	; 61
    3310:	9e b7       	in	r25, 0x3e	; 62
    3312:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3316:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    331a:	84 1b       	sub	r24, r20
    331c:	95 0b       	sbc	r25, r21
    331e:	e8 17       	cp	r30, r24
    3320:	f9 07       	cpc	r31, r25
    3322:	b0 f4       	brcc	.+44     	; 0x3350 <realloc+0x19e>
    3324:	f0 93 cf 05 	sts	0x05CF, r31	; 0x8005cf <__brkval+0x1>
    3328:	e0 93 ce 05 	sts	0x05CE, r30	; 0x8005ce <__brkval>
    332c:	f9 01       	movw	r30, r18
    332e:	71 83       	std	Z+1, r23	; 0x01
    3330:	60 83       	st	Z, r22
    3332:	0c c0       	rjmp	.+24     	; 0x334c <realloc+0x19a>
    3334:	cb 01       	movw	r24, r22
    3336:	1c de       	rcall	.-968    	; 0x2f70 <malloc>
    3338:	7c 01       	movw	r14, r24
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	49 f0       	breq	.+18     	; 0x3350 <realloc+0x19e>
    333e:	a8 01       	movw	r20, r16
    3340:	be 01       	movw	r22, r28
    3342:	17 d0       	rcall	.+46     	; 0x3372 <memcpy>
    3344:	ce 01       	movw	r24, r28
    3346:	ac de       	rcall	.-680    	; 0x30a0 <free>
    3348:	c7 01       	movw	r24, r14
    334a:	04 c0       	rjmp	.+8      	; 0x3354 <realloc+0x1a2>
    334c:	ce 01       	movw	r24, r28
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <realloc+0x1a2>
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	ef 90       	pop	r14
    3360:	df 90       	pop	r13
    3362:	cf 90       	pop	r12
    3364:	bf 90       	pop	r11
    3366:	af 90       	pop	r10
    3368:	9f 90       	pop	r9
    336a:	8f 90       	pop	r8
    336c:	7f 90       	pop	r7
    336e:	6f 90       	pop	r6
    3370:	08 95       	ret

00003372 <memcpy>:
    3372:	fb 01       	movw	r30, r22
    3374:	dc 01       	movw	r26, r24
    3376:	02 c0       	rjmp	.+4      	; 0x337c <memcpy+0xa>
    3378:	01 90       	ld	r0, Z+
    337a:	0d 92       	st	X+, r0
    337c:	41 50       	subi	r20, 0x01	; 1
    337e:	50 40       	sbci	r21, 0x00	; 0
    3380:	d8 f7       	brcc	.-10     	; 0x3378 <memcpy+0x6>
    3382:	08 95       	ret

00003384 <strcpy>:
    3384:	fb 01       	movw	r30, r22
    3386:	dc 01       	movw	r26, r24
    3388:	01 90       	ld	r0, Z+
    338a:	0d 92       	st	X+, r0
    338c:	00 20       	and	r0, r0
    338e:	e1 f7       	brne	.-8      	; 0x3388 <strcpy+0x4>
    3390:	08 95       	ret

00003392 <sprintf>:
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	cf 93       	push	r28
    3398:	df 93       	push	r29
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	2e 97       	sbiw	r28, 0x0e	; 14
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	0e 89       	ldd	r16, Y+22	; 0x16
    33ac:	1f 89       	ldd	r17, Y+23	; 0x17
    33ae:	86 e0       	ldi	r24, 0x06	; 6
    33b0:	8c 83       	std	Y+4, r24	; 0x04
    33b2:	1a 83       	std	Y+2, r17	; 0x02
    33b4:	09 83       	std	Y+1, r16	; 0x01
    33b6:	8f ef       	ldi	r24, 0xFF	; 255
    33b8:	9f e7       	ldi	r25, 0x7F	; 127
    33ba:	9e 83       	std	Y+6, r25	; 0x06
    33bc:	8d 83       	std	Y+5, r24	; 0x05
    33be:	ae 01       	movw	r20, r28
    33c0:	46 5e       	subi	r20, 0xE6	; 230
    33c2:	5f 4f       	sbci	r21, 0xFF	; 255
    33c4:	68 8d       	ldd	r22, Y+24	; 0x18
    33c6:	79 8d       	ldd	r23, Y+25	; 0x19
    33c8:	ce 01       	movw	r24, r28
    33ca:	01 96       	adiw	r24, 0x01	; 1
    33cc:	10 d0       	rcall	.+32     	; 0x33ee <vfprintf>
    33ce:	ef 81       	ldd	r30, Y+7	; 0x07
    33d0:	f8 85       	ldd	r31, Y+8	; 0x08
    33d2:	e0 0f       	add	r30, r16
    33d4:	f1 1f       	adc	r31, r17
    33d6:	10 82       	st	Z, r1
    33d8:	2e 96       	adiw	r28, 0x0e	; 14
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	de bf       	out	0x3e, r29	; 62
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	cd bf       	out	0x3d, r28	; 61
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	08 95       	ret

000033ee <vfprintf>:
    33ee:	2f 92       	push	r2
    33f0:	3f 92       	push	r3
    33f2:	4f 92       	push	r4
    33f4:	5f 92       	push	r5
    33f6:	6f 92       	push	r6
    33f8:	7f 92       	push	r7
    33fa:	8f 92       	push	r8
    33fc:	9f 92       	push	r9
    33fe:	af 92       	push	r10
    3400:	bf 92       	push	r11
    3402:	cf 92       	push	r12
    3404:	df 92       	push	r13
    3406:	ef 92       	push	r14
    3408:	ff 92       	push	r15
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	cf 93       	push	r28
    3410:	df 93       	push	r29
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
    3416:	2b 97       	sbiw	r28, 0x0b	; 11
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	6c 01       	movw	r12, r24
    3424:	7b 01       	movw	r14, r22
    3426:	8a 01       	movw	r16, r20
    3428:	fc 01       	movw	r30, r24
    342a:	17 82       	std	Z+7, r1	; 0x07
    342c:	16 82       	std	Z+6, r1	; 0x06
    342e:	83 81       	ldd	r24, Z+3	; 0x03
    3430:	81 ff       	sbrs	r24, 1
    3432:	bf c1       	rjmp	.+894    	; 0x37b2 <vfprintf+0x3c4>
    3434:	ce 01       	movw	r24, r28
    3436:	01 96       	adiw	r24, 0x01	; 1
    3438:	3c 01       	movw	r6, r24
    343a:	f6 01       	movw	r30, r12
    343c:	93 81       	ldd	r25, Z+3	; 0x03
    343e:	f7 01       	movw	r30, r14
    3440:	93 fd       	sbrc	r25, 3
    3442:	85 91       	lpm	r24, Z+
    3444:	93 ff       	sbrs	r25, 3
    3446:	81 91       	ld	r24, Z+
    3448:	7f 01       	movw	r14, r30
    344a:	88 23       	and	r24, r24
    344c:	09 f4       	brne	.+2      	; 0x3450 <vfprintf+0x62>
    344e:	ad c1       	rjmp	.+858    	; 0x37aa <vfprintf+0x3bc>
    3450:	85 32       	cpi	r24, 0x25	; 37
    3452:	39 f4       	brne	.+14     	; 0x3462 <vfprintf+0x74>
    3454:	93 fd       	sbrc	r25, 3
    3456:	85 91       	lpm	r24, Z+
    3458:	93 ff       	sbrs	r25, 3
    345a:	81 91       	ld	r24, Z+
    345c:	7f 01       	movw	r14, r30
    345e:	85 32       	cpi	r24, 0x25	; 37
    3460:	21 f4       	brne	.+8      	; 0x346a <vfprintf+0x7c>
    3462:	b6 01       	movw	r22, r12
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	d6 d1       	rcall	.+940    	; 0x3814 <fputc>
    3468:	e8 cf       	rjmp	.-48     	; 0x343a <vfprintf+0x4c>
    346a:	91 2c       	mov	r9, r1
    346c:	21 2c       	mov	r2, r1
    346e:	31 2c       	mov	r3, r1
    3470:	ff e1       	ldi	r31, 0x1F	; 31
    3472:	f3 15       	cp	r31, r3
    3474:	d8 f0       	brcs	.+54     	; 0x34ac <vfprintf+0xbe>
    3476:	8b 32       	cpi	r24, 0x2B	; 43
    3478:	79 f0       	breq	.+30     	; 0x3498 <vfprintf+0xaa>
    347a:	38 f4       	brcc	.+14     	; 0x348a <vfprintf+0x9c>
    347c:	80 32       	cpi	r24, 0x20	; 32
    347e:	79 f0       	breq	.+30     	; 0x349e <vfprintf+0xb0>
    3480:	83 32       	cpi	r24, 0x23	; 35
    3482:	a1 f4       	brne	.+40     	; 0x34ac <vfprintf+0xbe>
    3484:	23 2d       	mov	r18, r3
    3486:	20 61       	ori	r18, 0x10	; 16
    3488:	1d c0       	rjmp	.+58     	; 0x34c4 <vfprintf+0xd6>
    348a:	8d 32       	cpi	r24, 0x2D	; 45
    348c:	61 f0       	breq	.+24     	; 0x34a6 <vfprintf+0xb8>
    348e:	80 33       	cpi	r24, 0x30	; 48
    3490:	69 f4       	brne	.+26     	; 0x34ac <vfprintf+0xbe>
    3492:	23 2d       	mov	r18, r3
    3494:	21 60       	ori	r18, 0x01	; 1
    3496:	16 c0       	rjmp	.+44     	; 0x34c4 <vfprintf+0xd6>
    3498:	83 2d       	mov	r24, r3
    349a:	82 60       	ori	r24, 0x02	; 2
    349c:	38 2e       	mov	r3, r24
    349e:	e3 2d       	mov	r30, r3
    34a0:	e4 60       	ori	r30, 0x04	; 4
    34a2:	3e 2e       	mov	r3, r30
    34a4:	2a c0       	rjmp	.+84     	; 0x34fa <vfprintf+0x10c>
    34a6:	f3 2d       	mov	r31, r3
    34a8:	f8 60       	ori	r31, 0x08	; 8
    34aa:	1d c0       	rjmp	.+58     	; 0x34e6 <vfprintf+0xf8>
    34ac:	37 fc       	sbrc	r3, 7
    34ae:	2d c0       	rjmp	.+90     	; 0x350a <vfprintf+0x11c>
    34b0:	20 ed       	ldi	r18, 0xD0	; 208
    34b2:	28 0f       	add	r18, r24
    34b4:	2a 30       	cpi	r18, 0x0A	; 10
    34b6:	40 f0       	brcs	.+16     	; 0x34c8 <vfprintf+0xda>
    34b8:	8e 32       	cpi	r24, 0x2E	; 46
    34ba:	b9 f4       	brne	.+46     	; 0x34ea <vfprintf+0xfc>
    34bc:	36 fc       	sbrc	r3, 6
    34be:	75 c1       	rjmp	.+746    	; 0x37aa <vfprintf+0x3bc>
    34c0:	23 2d       	mov	r18, r3
    34c2:	20 64       	ori	r18, 0x40	; 64
    34c4:	32 2e       	mov	r3, r18
    34c6:	19 c0       	rjmp	.+50     	; 0x34fa <vfprintf+0x10c>
    34c8:	36 fe       	sbrs	r3, 6
    34ca:	06 c0       	rjmp	.+12     	; 0x34d8 <vfprintf+0xea>
    34cc:	8a e0       	ldi	r24, 0x0A	; 10
    34ce:	98 9e       	mul	r9, r24
    34d0:	20 0d       	add	r18, r0
    34d2:	11 24       	eor	r1, r1
    34d4:	92 2e       	mov	r9, r18
    34d6:	11 c0       	rjmp	.+34     	; 0x34fa <vfprintf+0x10c>
    34d8:	ea e0       	ldi	r30, 0x0A	; 10
    34da:	2e 9e       	mul	r2, r30
    34dc:	20 0d       	add	r18, r0
    34de:	11 24       	eor	r1, r1
    34e0:	22 2e       	mov	r2, r18
    34e2:	f3 2d       	mov	r31, r3
    34e4:	f0 62       	ori	r31, 0x20	; 32
    34e6:	3f 2e       	mov	r3, r31
    34e8:	08 c0       	rjmp	.+16     	; 0x34fa <vfprintf+0x10c>
    34ea:	8c 36       	cpi	r24, 0x6C	; 108
    34ec:	21 f4       	brne	.+8      	; 0x34f6 <vfprintf+0x108>
    34ee:	83 2d       	mov	r24, r3
    34f0:	80 68       	ori	r24, 0x80	; 128
    34f2:	38 2e       	mov	r3, r24
    34f4:	02 c0       	rjmp	.+4      	; 0x34fa <vfprintf+0x10c>
    34f6:	88 36       	cpi	r24, 0x68	; 104
    34f8:	41 f4       	brne	.+16     	; 0x350a <vfprintf+0x11c>
    34fa:	f7 01       	movw	r30, r14
    34fc:	93 fd       	sbrc	r25, 3
    34fe:	85 91       	lpm	r24, Z+
    3500:	93 ff       	sbrs	r25, 3
    3502:	81 91       	ld	r24, Z+
    3504:	7f 01       	movw	r14, r30
    3506:	81 11       	cpse	r24, r1
    3508:	b3 cf       	rjmp	.-154    	; 0x3470 <vfprintf+0x82>
    350a:	98 2f       	mov	r25, r24
    350c:	9f 7d       	andi	r25, 0xDF	; 223
    350e:	95 54       	subi	r25, 0x45	; 69
    3510:	93 30       	cpi	r25, 0x03	; 3
    3512:	28 f4       	brcc	.+10     	; 0x351e <vfprintf+0x130>
    3514:	0c 5f       	subi	r16, 0xFC	; 252
    3516:	1f 4f       	sbci	r17, 0xFF	; 255
    3518:	9f e3       	ldi	r25, 0x3F	; 63
    351a:	99 83       	std	Y+1, r25	; 0x01
    351c:	0d c0       	rjmp	.+26     	; 0x3538 <vfprintf+0x14a>
    351e:	83 36       	cpi	r24, 0x63	; 99
    3520:	31 f0       	breq	.+12     	; 0x352e <vfprintf+0x140>
    3522:	83 37       	cpi	r24, 0x73	; 115
    3524:	71 f0       	breq	.+28     	; 0x3542 <vfprintf+0x154>
    3526:	83 35       	cpi	r24, 0x53	; 83
    3528:	09 f0       	breq	.+2      	; 0x352c <vfprintf+0x13e>
    352a:	55 c0       	rjmp	.+170    	; 0x35d6 <vfprintf+0x1e8>
    352c:	20 c0       	rjmp	.+64     	; 0x356e <vfprintf+0x180>
    352e:	f8 01       	movw	r30, r16
    3530:	80 81       	ld	r24, Z
    3532:	89 83       	std	Y+1, r24	; 0x01
    3534:	0e 5f       	subi	r16, 0xFE	; 254
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	88 24       	eor	r8, r8
    353a:	83 94       	inc	r8
    353c:	91 2c       	mov	r9, r1
    353e:	53 01       	movw	r10, r6
    3540:	12 c0       	rjmp	.+36     	; 0x3566 <vfprintf+0x178>
    3542:	28 01       	movw	r4, r16
    3544:	f2 e0       	ldi	r31, 0x02	; 2
    3546:	4f 0e       	add	r4, r31
    3548:	51 1c       	adc	r5, r1
    354a:	f8 01       	movw	r30, r16
    354c:	a0 80       	ld	r10, Z
    354e:	b1 80       	ldd	r11, Z+1	; 0x01
    3550:	36 fe       	sbrs	r3, 6
    3552:	03 c0       	rjmp	.+6      	; 0x355a <vfprintf+0x16c>
    3554:	69 2d       	mov	r22, r9
    3556:	70 e0       	ldi	r23, 0x00	; 0
    3558:	02 c0       	rjmp	.+4      	; 0x355e <vfprintf+0x170>
    355a:	6f ef       	ldi	r22, 0xFF	; 255
    355c:	7f ef       	ldi	r23, 0xFF	; 255
    355e:	c5 01       	movw	r24, r10
    3560:	4e d1       	rcall	.+668    	; 0x37fe <strnlen>
    3562:	4c 01       	movw	r8, r24
    3564:	82 01       	movw	r16, r4
    3566:	f3 2d       	mov	r31, r3
    3568:	ff 77       	andi	r31, 0x7F	; 127
    356a:	3f 2e       	mov	r3, r31
    356c:	15 c0       	rjmp	.+42     	; 0x3598 <vfprintf+0x1aa>
    356e:	28 01       	movw	r4, r16
    3570:	22 e0       	ldi	r18, 0x02	; 2
    3572:	42 0e       	add	r4, r18
    3574:	51 1c       	adc	r5, r1
    3576:	f8 01       	movw	r30, r16
    3578:	a0 80       	ld	r10, Z
    357a:	b1 80       	ldd	r11, Z+1	; 0x01
    357c:	36 fe       	sbrs	r3, 6
    357e:	03 c0       	rjmp	.+6      	; 0x3586 <vfprintf+0x198>
    3580:	69 2d       	mov	r22, r9
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	02 c0       	rjmp	.+4      	; 0x358a <vfprintf+0x19c>
    3586:	6f ef       	ldi	r22, 0xFF	; 255
    3588:	7f ef       	ldi	r23, 0xFF	; 255
    358a:	c5 01       	movw	r24, r10
    358c:	2d d1       	rcall	.+602    	; 0x37e8 <strnlen_P>
    358e:	4c 01       	movw	r8, r24
    3590:	f3 2d       	mov	r31, r3
    3592:	f0 68       	ori	r31, 0x80	; 128
    3594:	3f 2e       	mov	r3, r31
    3596:	82 01       	movw	r16, r4
    3598:	33 fc       	sbrc	r3, 3
    359a:	19 c0       	rjmp	.+50     	; 0x35ce <vfprintf+0x1e0>
    359c:	82 2d       	mov	r24, r2
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	88 16       	cp	r8, r24
    35a2:	99 06       	cpc	r9, r25
    35a4:	a0 f4       	brcc	.+40     	; 0x35ce <vfprintf+0x1e0>
    35a6:	b6 01       	movw	r22, r12
    35a8:	80 e2       	ldi	r24, 0x20	; 32
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	33 d1       	rcall	.+614    	; 0x3814 <fputc>
    35ae:	2a 94       	dec	r2
    35b0:	f5 cf       	rjmp	.-22     	; 0x359c <vfprintf+0x1ae>
    35b2:	f5 01       	movw	r30, r10
    35b4:	37 fc       	sbrc	r3, 7
    35b6:	85 91       	lpm	r24, Z+
    35b8:	37 fe       	sbrs	r3, 7
    35ba:	81 91       	ld	r24, Z+
    35bc:	5f 01       	movw	r10, r30
    35be:	b6 01       	movw	r22, r12
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	28 d1       	rcall	.+592    	; 0x3814 <fputc>
    35c4:	21 10       	cpse	r2, r1
    35c6:	2a 94       	dec	r2
    35c8:	21 e0       	ldi	r18, 0x01	; 1
    35ca:	82 1a       	sub	r8, r18
    35cc:	91 08       	sbc	r9, r1
    35ce:	81 14       	cp	r8, r1
    35d0:	91 04       	cpc	r9, r1
    35d2:	79 f7       	brne	.-34     	; 0x35b2 <vfprintf+0x1c4>
    35d4:	e1 c0       	rjmp	.+450    	; 0x3798 <vfprintf+0x3aa>
    35d6:	84 36       	cpi	r24, 0x64	; 100
    35d8:	11 f0       	breq	.+4      	; 0x35de <vfprintf+0x1f0>
    35da:	89 36       	cpi	r24, 0x69	; 105
    35dc:	39 f5       	brne	.+78     	; 0x362c <vfprintf+0x23e>
    35de:	f8 01       	movw	r30, r16
    35e0:	37 fe       	sbrs	r3, 7
    35e2:	07 c0       	rjmp	.+14     	; 0x35f2 <vfprintf+0x204>
    35e4:	60 81       	ld	r22, Z
    35e6:	71 81       	ldd	r23, Z+1	; 0x01
    35e8:	82 81       	ldd	r24, Z+2	; 0x02
    35ea:	93 81       	ldd	r25, Z+3	; 0x03
    35ec:	0c 5f       	subi	r16, 0xFC	; 252
    35ee:	1f 4f       	sbci	r17, 0xFF	; 255
    35f0:	08 c0       	rjmp	.+16     	; 0x3602 <vfprintf+0x214>
    35f2:	60 81       	ld	r22, Z
    35f4:	71 81       	ldd	r23, Z+1	; 0x01
    35f6:	07 2e       	mov	r0, r23
    35f8:	00 0c       	add	r0, r0
    35fa:	88 0b       	sbc	r24, r24
    35fc:	99 0b       	sbc	r25, r25
    35fe:	0e 5f       	subi	r16, 0xFE	; 254
    3600:	1f 4f       	sbci	r17, 0xFF	; 255
    3602:	f3 2d       	mov	r31, r3
    3604:	ff 76       	andi	r31, 0x6F	; 111
    3606:	3f 2e       	mov	r3, r31
    3608:	97 ff       	sbrs	r25, 7
    360a:	09 c0       	rjmp	.+18     	; 0x361e <vfprintf+0x230>
    360c:	90 95       	com	r25
    360e:	80 95       	com	r24
    3610:	70 95       	com	r23
    3612:	61 95       	neg	r22
    3614:	7f 4f       	sbci	r23, 0xFF	; 255
    3616:	8f 4f       	sbci	r24, 0xFF	; 255
    3618:	9f 4f       	sbci	r25, 0xFF	; 255
    361a:	f0 68       	ori	r31, 0x80	; 128
    361c:	3f 2e       	mov	r3, r31
    361e:	2a e0       	ldi	r18, 0x0A	; 10
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	a3 01       	movw	r20, r6
    3624:	33 d1       	rcall	.+614    	; 0x388c <__ultoa_invert>
    3626:	88 2e       	mov	r8, r24
    3628:	86 18       	sub	r8, r6
    362a:	44 c0       	rjmp	.+136    	; 0x36b4 <vfprintf+0x2c6>
    362c:	85 37       	cpi	r24, 0x75	; 117
    362e:	31 f4       	brne	.+12     	; 0x363c <vfprintf+0x24e>
    3630:	23 2d       	mov	r18, r3
    3632:	2f 7e       	andi	r18, 0xEF	; 239
    3634:	b2 2e       	mov	r11, r18
    3636:	2a e0       	ldi	r18, 0x0A	; 10
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	25 c0       	rjmp	.+74     	; 0x3686 <vfprintf+0x298>
    363c:	93 2d       	mov	r25, r3
    363e:	99 7f       	andi	r25, 0xF9	; 249
    3640:	b9 2e       	mov	r11, r25
    3642:	8f 36       	cpi	r24, 0x6F	; 111
    3644:	c1 f0       	breq	.+48     	; 0x3676 <vfprintf+0x288>
    3646:	18 f4       	brcc	.+6      	; 0x364e <vfprintf+0x260>
    3648:	88 35       	cpi	r24, 0x58	; 88
    364a:	79 f0       	breq	.+30     	; 0x366a <vfprintf+0x27c>
    364c:	ae c0       	rjmp	.+348    	; 0x37aa <vfprintf+0x3bc>
    364e:	80 37       	cpi	r24, 0x70	; 112
    3650:	19 f0       	breq	.+6      	; 0x3658 <vfprintf+0x26a>
    3652:	88 37       	cpi	r24, 0x78	; 120
    3654:	21 f0       	breq	.+8      	; 0x365e <vfprintf+0x270>
    3656:	a9 c0       	rjmp	.+338    	; 0x37aa <vfprintf+0x3bc>
    3658:	e9 2f       	mov	r30, r25
    365a:	e0 61       	ori	r30, 0x10	; 16
    365c:	be 2e       	mov	r11, r30
    365e:	b4 fe       	sbrs	r11, 4
    3660:	0d c0       	rjmp	.+26     	; 0x367c <vfprintf+0x28e>
    3662:	fb 2d       	mov	r31, r11
    3664:	f4 60       	ori	r31, 0x04	; 4
    3666:	bf 2e       	mov	r11, r31
    3668:	09 c0       	rjmp	.+18     	; 0x367c <vfprintf+0x28e>
    366a:	34 fe       	sbrs	r3, 4
    366c:	0a c0       	rjmp	.+20     	; 0x3682 <vfprintf+0x294>
    366e:	29 2f       	mov	r18, r25
    3670:	26 60       	ori	r18, 0x06	; 6
    3672:	b2 2e       	mov	r11, r18
    3674:	06 c0       	rjmp	.+12     	; 0x3682 <vfprintf+0x294>
    3676:	28 e0       	ldi	r18, 0x08	; 8
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	05 c0       	rjmp	.+10     	; 0x3686 <vfprintf+0x298>
    367c:	20 e1       	ldi	r18, 0x10	; 16
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	02 c0       	rjmp	.+4      	; 0x3686 <vfprintf+0x298>
    3682:	20 e1       	ldi	r18, 0x10	; 16
    3684:	32 e0       	ldi	r19, 0x02	; 2
    3686:	f8 01       	movw	r30, r16
    3688:	b7 fe       	sbrs	r11, 7
    368a:	07 c0       	rjmp	.+14     	; 0x369a <vfprintf+0x2ac>
    368c:	60 81       	ld	r22, Z
    368e:	71 81       	ldd	r23, Z+1	; 0x01
    3690:	82 81       	ldd	r24, Z+2	; 0x02
    3692:	93 81       	ldd	r25, Z+3	; 0x03
    3694:	0c 5f       	subi	r16, 0xFC	; 252
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	06 c0       	rjmp	.+12     	; 0x36a6 <vfprintf+0x2b8>
    369a:	60 81       	ld	r22, Z
    369c:	71 81       	ldd	r23, Z+1	; 0x01
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	0e 5f       	subi	r16, 0xFE	; 254
    36a4:	1f 4f       	sbci	r17, 0xFF	; 255
    36a6:	a3 01       	movw	r20, r6
    36a8:	f1 d0       	rcall	.+482    	; 0x388c <__ultoa_invert>
    36aa:	88 2e       	mov	r8, r24
    36ac:	86 18       	sub	r8, r6
    36ae:	fb 2d       	mov	r31, r11
    36b0:	ff 77       	andi	r31, 0x7F	; 127
    36b2:	3f 2e       	mov	r3, r31
    36b4:	36 fe       	sbrs	r3, 6
    36b6:	0d c0       	rjmp	.+26     	; 0x36d2 <vfprintf+0x2e4>
    36b8:	23 2d       	mov	r18, r3
    36ba:	2e 7f       	andi	r18, 0xFE	; 254
    36bc:	a2 2e       	mov	r10, r18
    36be:	89 14       	cp	r8, r9
    36c0:	58 f4       	brcc	.+22     	; 0x36d8 <vfprintf+0x2ea>
    36c2:	34 fe       	sbrs	r3, 4
    36c4:	0b c0       	rjmp	.+22     	; 0x36dc <vfprintf+0x2ee>
    36c6:	32 fc       	sbrc	r3, 2
    36c8:	09 c0       	rjmp	.+18     	; 0x36dc <vfprintf+0x2ee>
    36ca:	83 2d       	mov	r24, r3
    36cc:	8e 7e       	andi	r24, 0xEE	; 238
    36ce:	a8 2e       	mov	r10, r24
    36d0:	05 c0       	rjmp	.+10     	; 0x36dc <vfprintf+0x2ee>
    36d2:	b8 2c       	mov	r11, r8
    36d4:	a3 2c       	mov	r10, r3
    36d6:	03 c0       	rjmp	.+6      	; 0x36de <vfprintf+0x2f0>
    36d8:	b8 2c       	mov	r11, r8
    36da:	01 c0       	rjmp	.+2      	; 0x36de <vfprintf+0x2f0>
    36dc:	b9 2c       	mov	r11, r9
    36de:	a4 fe       	sbrs	r10, 4
    36e0:	0f c0       	rjmp	.+30     	; 0x3700 <vfprintf+0x312>
    36e2:	fe 01       	movw	r30, r28
    36e4:	e8 0d       	add	r30, r8
    36e6:	f1 1d       	adc	r31, r1
    36e8:	80 81       	ld	r24, Z
    36ea:	80 33       	cpi	r24, 0x30	; 48
    36ec:	21 f4       	brne	.+8      	; 0x36f6 <vfprintf+0x308>
    36ee:	9a 2d       	mov	r25, r10
    36f0:	99 7e       	andi	r25, 0xE9	; 233
    36f2:	a9 2e       	mov	r10, r25
    36f4:	09 c0       	rjmp	.+18     	; 0x3708 <vfprintf+0x31a>
    36f6:	a2 fe       	sbrs	r10, 2
    36f8:	06 c0       	rjmp	.+12     	; 0x3706 <vfprintf+0x318>
    36fa:	b3 94       	inc	r11
    36fc:	b3 94       	inc	r11
    36fe:	04 c0       	rjmp	.+8      	; 0x3708 <vfprintf+0x31a>
    3700:	8a 2d       	mov	r24, r10
    3702:	86 78       	andi	r24, 0x86	; 134
    3704:	09 f0       	breq	.+2      	; 0x3708 <vfprintf+0x31a>
    3706:	b3 94       	inc	r11
    3708:	a3 fc       	sbrc	r10, 3
    370a:	10 c0       	rjmp	.+32     	; 0x372c <vfprintf+0x33e>
    370c:	a0 fe       	sbrs	r10, 0
    370e:	06 c0       	rjmp	.+12     	; 0x371c <vfprintf+0x32e>
    3710:	b2 14       	cp	r11, r2
    3712:	80 f4       	brcc	.+32     	; 0x3734 <vfprintf+0x346>
    3714:	28 0c       	add	r2, r8
    3716:	92 2c       	mov	r9, r2
    3718:	9b 18       	sub	r9, r11
    371a:	0d c0       	rjmp	.+26     	; 0x3736 <vfprintf+0x348>
    371c:	b2 14       	cp	r11, r2
    371e:	58 f4       	brcc	.+22     	; 0x3736 <vfprintf+0x348>
    3720:	b6 01       	movw	r22, r12
    3722:	80 e2       	ldi	r24, 0x20	; 32
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	76 d0       	rcall	.+236    	; 0x3814 <fputc>
    3728:	b3 94       	inc	r11
    372a:	f8 cf       	rjmp	.-16     	; 0x371c <vfprintf+0x32e>
    372c:	b2 14       	cp	r11, r2
    372e:	18 f4       	brcc	.+6      	; 0x3736 <vfprintf+0x348>
    3730:	2b 18       	sub	r2, r11
    3732:	02 c0       	rjmp	.+4      	; 0x3738 <vfprintf+0x34a>
    3734:	98 2c       	mov	r9, r8
    3736:	21 2c       	mov	r2, r1
    3738:	a4 fe       	sbrs	r10, 4
    373a:	0f c0       	rjmp	.+30     	; 0x375a <vfprintf+0x36c>
    373c:	b6 01       	movw	r22, r12
    373e:	80 e3       	ldi	r24, 0x30	; 48
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	68 d0       	rcall	.+208    	; 0x3814 <fputc>
    3744:	a2 fe       	sbrs	r10, 2
    3746:	16 c0       	rjmp	.+44     	; 0x3774 <vfprintf+0x386>
    3748:	a1 fc       	sbrc	r10, 1
    374a:	03 c0       	rjmp	.+6      	; 0x3752 <vfprintf+0x364>
    374c:	88 e7       	ldi	r24, 0x78	; 120
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	02 c0       	rjmp	.+4      	; 0x3756 <vfprintf+0x368>
    3752:	88 e5       	ldi	r24, 0x58	; 88
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	b6 01       	movw	r22, r12
    3758:	0c c0       	rjmp	.+24     	; 0x3772 <vfprintf+0x384>
    375a:	8a 2d       	mov	r24, r10
    375c:	86 78       	andi	r24, 0x86	; 134
    375e:	51 f0       	breq	.+20     	; 0x3774 <vfprintf+0x386>
    3760:	a1 fe       	sbrs	r10, 1
    3762:	02 c0       	rjmp	.+4      	; 0x3768 <vfprintf+0x37a>
    3764:	8b e2       	ldi	r24, 0x2B	; 43
    3766:	01 c0       	rjmp	.+2      	; 0x376a <vfprintf+0x37c>
    3768:	80 e2       	ldi	r24, 0x20	; 32
    376a:	a7 fc       	sbrc	r10, 7
    376c:	8d e2       	ldi	r24, 0x2D	; 45
    376e:	b6 01       	movw	r22, r12
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	50 d0       	rcall	.+160    	; 0x3814 <fputc>
    3774:	89 14       	cp	r8, r9
    3776:	30 f4       	brcc	.+12     	; 0x3784 <vfprintf+0x396>
    3778:	b6 01       	movw	r22, r12
    377a:	80 e3       	ldi	r24, 0x30	; 48
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	4a d0       	rcall	.+148    	; 0x3814 <fputc>
    3780:	9a 94       	dec	r9
    3782:	f8 cf       	rjmp	.-16     	; 0x3774 <vfprintf+0x386>
    3784:	8a 94       	dec	r8
    3786:	f3 01       	movw	r30, r6
    3788:	e8 0d       	add	r30, r8
    378a:	f1 1d       	adc	r31, r1
    378c:	80 81       	ld	r24, Z
    378e:	b6 01       	movw	r22, r12
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	40 d0       	rcall	.+128    	; 0x3814 <fputc>
    3794:	81 10       	cpse	r8, r1
    3796:	f6 cf       	rjmp	.-20     	; 0x3784 <vfprintf+0x396>
    3798:	22 20       	and	r2, r2
    379a:	09 f4       	brne	.+2      	; 0x379e <vfprintf+0x3b0>
    379c:	4e ce       	rjmp	.-868    	; 0x343a <vfprintf+0x4c>
    379e:	b6 01       	movw	r22, r12
    37a0:	80 e2       	ldi	r24, 0x20	; 32
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	37 d0       	rcall	.+110    	; 0x3814 <fputc>
    37a6:	2a 94       	dec	r2
    37a8:	f7 cf       	rjmp	.-18     	; 0x3798 <vfprintf+0x3aa>
    37aa:	f6 01       	movw	r30, r12
    37ac:	86 81       	ldd	r24, Z+6	; 0x06
    37ae:	97 81       	ldd	r25, Z+7	; 0x07
    37b0:	02 c0       	rjmp	.+4      	; 0x37b6 <vfprintf+0x3c8>
    37b2:	8f ef       	ldi	r24, 0xFF	; 255
    37b4:	9f ef       	ldi	r25, 0xFF	; 255
    37b6:	2b 96       	adiw	r28, 0x0b	; 11
    37b8:	0f b6       	in	r0, 0x3f	; 63
    37ba:	f8 94       	cli
    37bc:	de bf       	out	0x3e, r29	; 62
    37be:	0f be       	out	0x3f, r0	; 63
    37c0:	cd bf       	out	0x3d, r28	; 61
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	1f 91       	pop	r17
    37c8:	0f 91       	pop	r16
    37ca:	ff 90       	pop	r15
    37cc:	ef 90       	pop	r14
    37ce:	df 90       	pop	r13
    37d0:	cf 90       	pop	r12
    37d2:	bf 90       	pop	r11
    37d4:	af 90       	pop	r10
    37d6:	9f 90       	pop	r9
    37d8:	8f 90       	pop	r8
    37da:	7f 90       	pop	r7
    37dc:	6f 90       	pop	r6
    37de:	5f 90       	pop	r5
    37e0:	4f 90       	pop	r4
    37e2:	3f 90       	pop	r3
    37e4:	2f 90       	pop	r2
    37e6:	08 95       	ret

000037e8 <strnlen_P>:
    37e8:	fc 01       	movw	r30, r24
    37ea:	05 90       	lpm	r0, Z+
    37ec:	61 50       	subi	r22, 0x01	; 1
    37ee:	70 40       	sbci	r23, 0x00	; 0
    37f0:	01 10       	cpse	r0, r1
    37f2:	d8 f7       	brcc	.-10     	; 0x37ea <strnlen_P+0x2>
    37f4:	80 95       	com	r24
    37f6:	90 95       	com	r25
    37f8:	8e 0f       	add	r24, r30
    37fa:	9f 1f       	adc	r25, r31
    37fc:	08 95       	ret

000037fe <strnlen>:
    37fe:	fc 01       	movw	r30, r24
    3800:	61 50       	subi	r22, 0x01	; 1
    3802:	70 40       	sbci	r23, 0x00	; 0
    3804:	01 90       	ld	r0, Z+
    3806:	01 10       	cpse	r0, r1
    3808:	d8 f7       	brcc	.-10     	; 0x3800 <strnlen+0x2>
    380a:	80 95       	com	r24
    380c:	90 95       	com	r25
    380e:	8e 0f       	add	r24, r30
    3810:	9f 1f       	adc	r25, r31
    3812:	08 95       	ret

00003814 <fputc>:
    3814:	0f 93       	push	r16
    3816:	1f 93       	push	r17
    3818:	cf 93       	push	r28
    381a:	df 93       	push	r29
    381c:	fb 01       	movw	r30, r22
    381e:	23 81       	ldd	r18, Z+3	; 0x03
    3820:	21 fd       	sbrc	r18, 1
    3822:	03 c0       	rjmp	.+6      	; 0x382a <fputc+0x16>
    3824:	8f ef       	ldi	r24, 0xFF	; 255
    3826:	9f ef       	ldi	r25, 0xFF	; 255
    3828:	2c c0       	rjmp	.+88     	; 0x3882 <fputc+0x6e>
    382a:	22 ff       	sbrs	r18, 2
    382c:	16 c0       	rjmp	.+44     	; 0x385a <fputc+0x46>
    382e:	46 81       	ldd	r20, Z+6	; 0x06
    3830:	57 81       	ldd	r21, Z+7	; 0x07
    3832:	24 81       	ldd	r18, Z+4	; 0x04
    3834:	35 81       	ldd	r19, Z+5	; 0x05
    3836:	42 17       	cp	r20, r18
    3838:	53 07       	cpc	r21, r19
    383a:	44 f4       	brge	.+16     	; 0x384c <fputc+0x38>
    383c:	a0 81       	ld	r26, Z
    383e:	b1 81       	ldd	r27, Z+1	; 0x01
    3840:	9d 01       	movw	r18, r26
    3842:	2f 5f       	subi	r18, 0xFF	; 255
    3844:	3f 4f       	sbci	r19, 0xFF	; 255
    3846:	31 83       	std	Z+1, r19	; 0x01
    3848:	20 83       	st	Z, r18
    384a:	8c 93       	st	X, r24
    384c:	26 81       	ldd	r18, Z+6	; 0x06
    384e:	37 81       	ldd	r19, Z+7	; 0x07
    3850:	2f 5f       	subi	r18, 0xFF	; 255
    3852:	3f 4f       	sbci	r19, 0xFF	; 255
    3854:	37 83       	std	Z+7, r19	; 0x07
    3856:	26 83       	std	Z+6, r18	; 0x06
    3858:	14 c0       	rjmp	.+40     	; 0x3882 <fputc+0x6e>
    385a:	8b 01       	movw	r16, r22
    385c:	ec 01       	movw	r28, r24
    385e:	fb 01       	movw	r30, r22
    3860:	00 84       	ldd	r0, Z+8	; 0x08
    3862:	f1 85       	ldd	r31, Z+9	; 0x09
    3864:	e0 2d       	mov	r30, r0
    3866:	19 95       	eicall
    3868:	89 2b       	or	r24, r25
    386a:	e1 f6       	brne	.-72     	; 0x3824 <fputc+0x10>
    386c:	d8 01       	movw	r26, r16
    386e:	16 96       	adiw	r26, 0x06	; 6
    3870:	8d 91       	ld	r24, X+
    3872:	9c 91       	ld	r25, X
    3874:	17 97       	sbiw	r26, 0x07	; 7
    3876:	01 96       	adiw	r24, 0x01	; 1
    3878:	17 96       	adiw	r26, 0x07	; 7
    387a:	9c 93       	st	X, r25
    387c:	8e 93       	st	-X, r24
    387e:	16 97       	sbiw	r26, 0x06	; 6
    3880:	ce 01       	movw	r24, r28
    3882:	df 91       	pop	r29
    3884:	cf 91       	pop	r28
    3886:	1f 91       	pop	r17
    3888:	0f 91       	pop	r16
    388a:	08 95       	ret

0000388c <__ultoa_invert>:
    388c:	fa 01       	movw	r30, r20
    388e:	aa 27       	eor	r26, r26
    3890:	28 30       	cpi	r18, 0x08	; 8
    3892:	51 f1       	breq	.+84     	; 0x38e8 <__ultoa_invert+0x5c>
    3894:	20 31       	cpi	r18, 0x10	; 16
    3896:	81 f1       	breq	.+96     	; 0x38f8 <__ultoa_invert+0x6c>
    3898:	e8 94       	clt
    389a:	6f 93       	push	r22
    389c:	6e 7f       	andi	r22, 0xFE	; 254
    389e:	6e 5f       	subi	r22, 0xFE	; 254
    38a0:	7f 4f       	sbci	r23, 0xFF	; 255
    38a2:	8f 4f       	sbci	r24, 0xFF	; 255
    38a4:	9f 4f       	sbci	r25, 0xFF	; 255
    38a6:	af 4f       	sbci	r26, 0xFF	; 255
    38a8:	b1 e0       	ldi	r27, 0x01	; 1
    38aa:	3e d0       	rcall	.+124    	; 0x3928 <__ultoa_invert+0x9c>
    38ac:	b4 e0       	ldi	r27, 0x04	; 4
    38ae:	3c d0       	rcall	.+120    	; 0x3928 <__ultoa_invert+0x9c>
    38b0:	67 0f       	add	r22, r23
    38b2:	78 1f       	adc	r23, r24
    38b4:	89 1f       	adc	r24, r25
    38b6:	9a 1f       	adc	r25, r26
    38b8:	a1 1d       	adc	r26, r1
    38ba:	68 0f       	add	r22, r24
    38bc:	79 1f       	adc	r23, r25
    38be:	8a 1f       	adc	r24, r26
    38c0:	91 1d       	adc	r25, r1
    38c2:	a1 1d       	adc	r26, r1
    38c4:	6a 0f       	add	r22, r26
    38c6:	71 1d       	adc	r23, r1
    38c8:	81 1d       	adc	r24, r1
    38ca:	91 1d       	adc	r25, r1
    38cc:	a1 1d       	adc	r26, r1
    38ce:	20 d0       	rcall	.+64     	; 0x3910 <__ultoa_invert+0x84>
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <__ultoa_invert+0x48>
    38d2:	68 94       	set
    38d4:	3f 91       	pop	r19
    38d6:	2a e0       	ldi	r18, 0x0A	; 10
    38d8:	26 9f       	mul	r18, r22
    38da:	11 24       	eor	r1, r1
    38dc:	30 19       	sub	r19, r0
    38de:	30 5d       	subi	r19, 0xD0	; 208
    38e0:	31 93       	st	Z+, r19
    38e2:	de f6       	brtc	.-74     	; 0x389a <__ultoa_invert+0xe>
    38e4:	cf 01       	movw	r24, r30
    38e6:	08 95       	ret
    38e8:	46 2f       	mov	r20, r22
    38ea:	47 70       	andi	r20, 0x07	; 7
    38ec:	40 5d       	subi	r20, 0xD0	; 208
    38ee:	41 93       	st	Z+, r20
    38f0:	b3 e0       	ldi	r27, 0x03	; 3
    38f2:	0f d0       	rcall	.+30     	; 0x3912 <__ultoa_invert+0x86>
    38f4:	c9 f7       	brne	.-14     	; 0x38e8 <__ultoa_invert+0x5c>
    38f6:	f6 cf       	rjmp	.-20     	; 0x38e4 <__ultoa_invert+0x58>
    38f8:	46 2f       	mov	r20, r22
    38fa:	4f 70       	andi	r20, 0x0F	; 15
    38fc:	40 5d       	subi	r20, 0xD0	; 208
    38fe:	4a 33       	cpi	r20, 0x3A	; 58
    3900:	18 f0       	brcs	.+6      	; 0x3908 <__ultoa_invert+0x7c>
    3902:	49 5d       	subi	r20, 0xD9	; 217
    3904:	31 fd       	sbrc	r19, 1
    3906:	40 52       	subi	r20, 0x20	; 32
    3908:	41 93       	st	Z+, r20
    390a:	02 d0       	rcall	.+4      	; 0x3910 <__ultoa_invert+0x84>
    390c:	a9 f7       	brne	.-22     	; 0x38f8 <__ultoa_invert+0x6c>
    390e:	ea cf       	rjmp	.-44     	; 0x38e4 <__ultoa_invert+0x58>
    3910:	b4 e0       	ldi	r27, 0x04	; 4
    3912:	a6 95       	lsr	r26
    3914:	97 95       	ror	r25
    3916:	87 95       	ror	r24
    3918:	77 95       	ror	r23
    391a:	67 95       	ror	r22
    391c:	ba 95       	dec	r27
    391e:	c9 f7       	brne	.-14     	; 0x3912 <__ultoa_invert+0x86>
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	61 05       	cpc	r22, r1
    3924:	71 05       	cpc	r23, r1
    3926:	08 95       	ret
    3928:	9b 01       	movw	r18, r22
    392a:	ac 01       	movw	r20, r24
    392c:	0a 2e       	mov	r0, r26
    392e:	06 94       	lsr	r0
    3930:	57 95       	ror	r21
    3932:	47 95       	ror	r20
    3934:	37 95       	ror	r19
    3936:	27 95       	ror	r18
    3938:	ba 95       	dec	r27
    393a:	c9 f7       	brne	.-14     	; 0x392e <__ultoa_invert+0xa2>
    393c:	62 0f       	add	r22, r18
    393e:	73 1f       	adc	r23, r19
    3940:	84 1f       	adc	r24, r20
    3942:	95 1f       	adc	r25, r21
    3944:	a0 1d       	adc	r26, r0
    3946:	08 95       	ret

00003948 <_exit>:
    3948:	f8 94       	cli

0000394a <__stop_program>:
    394a:	ff cf       	rjmp	.-2      	; 0x394a <__stop_program>
