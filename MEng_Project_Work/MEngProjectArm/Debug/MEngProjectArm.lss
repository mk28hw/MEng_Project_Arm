
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800200  00003b82  00003c16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000268  0080032e  0080032e  00003d44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003d44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003da0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009d8  00000000  00000000  00003de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001670d  00000000  00000000  000047b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036d1  00000000  00000000  0001aec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000052b1  00000000  00000000  0001e596  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f8c  00000000  00000000  00023848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e06  00000000  00000000  000257d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a706  00000000  00000000  000295da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000988  00000000  00000000  00033ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	8b c6       	rjmp	.+3350   	; 0xd3c <__vector_9>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 17 12 	jmp	0x242e	; 0x242e <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__vector_25>
      68:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__vector_36>
      94:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z12printDataLCDv+0x1e8>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	46 13       	cpse	r20, r22
     168:	49 13       	cpse	r20, r25
     16a:	38 13       	cpse	r19, r24
     16c:	3c 13       	cpse	r19, r28
     16e:	42 13       	cpse	r20, r18
     170:	80 13       	cpse	r24, r16
     172:	4d 13       	cpse	r20, r29
     174:	51 13       	cpse	r21, r17
     176:	57 13       	cpse	r21, r23
     178:	5b 13       	cpse	r21, r27
     17a:	5f 13       	cpse	r21, r31
     17c:	65 13       	cpse	r22, r21
     17e:	69 13       	cpse	r22, r25
     180:	6d 13       	cpse	r22, r29
     182:	80 13       	cpse	r24, r16
     184:	73 13       	cpse	r23, r19
     186:	77 13       	cpse	r23, r23
     188:	7b 13       	cpse	r23, r27

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
     290:	62 03       	mulsu	r22, r18
     292:	1e 10       	cpse	r1, r14
     294:	b3 10       	cpse	r11, r3
     296:	c3 16       	cp	r12, r19

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	e2 e8       	ldi	r30, 0x82	; 130
     2b0:	fb e3       	ldi	r31, 0x3B	; 59
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	ae 32       	cpi	r26, 0x2E	; 46
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	25 e0       	ldi	r18, 0x05	; 5
     2c4:	ae e2       	ldi	r26, 0x2E	; 46
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	a6 39       	cpi	r26, 0x96	; 150
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 cb 18 	call	0x3196	; 0x3196 <__tablejump2__>
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <main>
     2f6:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	serialWriting = NO;
	RS485_RX_ON
}
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	8a 01       	movw	r16, r20
     33a:	d2 2e       	mov	r13, r18
     33c:	ad b6       	in	r10, 0x3d	; 61
     33e:	be b6       	in	r11, 0x3e	; 62
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	82 1b       	sub	r24, r18
     346:	91 09       	sbc	r25, r1
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	9e bf       	out	0x3e, r25	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	62 2f       	mov	r22, r18
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__floatunsisf>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <pow>
     372:	2b 01       	movw	r4, r22
     374:	3c 01       	movw	r6, r24
     376:	b8 01       	movw	r22, r16
     378:	01 2e       	mov	r0, r17
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__floatsisf>
     384:	a3 01       	movw	r20, r6
     386:	92 01       	movw	r18, r4
     388:	0e 94 2f 0b 	call	0x165e	; 0x165e <__cmpsf2>
     38c:	87 fd       	sbrc	r24, 7
     38e:	0b c0       	rjmp	.+22     	; 0x3a6 <_Z8printLCDhhih+0x9c>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e8       	ldi	r20, 0x80	; 128
     396:	5f e3       	ldi	r21, 0x3F	; 63
     398:	c3 01       	movw	r24, r6
     39a:	b2 01       	movw	r22, r4
     39c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__subsf3>
     3a0:	0e 94 33 0b 	call	0x1666	; 0x1666 <__fixsfsi>
     3a4:	8b 01       	movw	r16, r22
     3a6:	1f 92       	push	r1
     3a8:	df 92       	push	r13
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	6c 01       	movw	r12, r24
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <sprintf>
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	df 92       	push	r13
     3c6:	cf 92       	push	r12
     3c8:	ff 92       	push	r15
     3ca:	ef 92       	push	r14
     3cc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <sprintf>
     3d0:	48 2d       	mov	r20, r8
     3d2:	69 2d       	mov	r22, r9
     3d4:	86 e3       	ldi	r24, 0x36	; 54
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3dc:	b7 01       	movw	r22, r14
     3de:	86 e3       	ldi	r24, 0x36	; 54
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN5Print5printEPKc>
     3e6:	8d b7       	in	r24, 0x3d	; 61
     3e8:	9e b7       	in	r25, 0x3e	; 62
     3ea:	0c 96       	adiw	r24, 0x0c	; 12
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	9e bf       	out	0x3e, r25	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	8d bf       	out	0x3d, r24	; 61
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	be be       	out	0x3e, r11	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	ad be       	out	0x3d, r10	; 61
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	4f 90       	pop	r4
     42a:	08 95       	ret

0000042c <_Z9padNumberih>:
     42c:	8f 92       	push	r8
     42e:	9f 92       	push	r9
     430:	af 92       	push	r10
     432:	bf 92       	push	r11
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	00 d0       	rcall	.+0      	; 0x446 <_Z9padNumberih+0x1a>
     446:	1f 92       	push	r1
     448:	1f 92       	push	r1
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	7c 01       	movw	r14, r24
     450:	96 2e       	mov	r9, r22
     452:	87 2e       	mov	r8, r23
     454:	ad b6       	in	r10, 0x3d	; 61
     456:	be b6       	in	r11, 0x3e	; 62
     458:	8d b7       	in	r24, 0x3d	; 61
     45a:	9e b7       	in	r25, 0x3e	; 62
     45c:	84 1b       	sub	r24, r20
     45e:	91 09       	sbc	r25, r1
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	9e bf       	out	0x3e, r25	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	8d bf       	out	0x3d, r24	; 61
     46a:	0d b7       	in	r16, 0x3d	; 61
     46c:	1e b7       	in	r17, 0x3e	; 62
     46e:	0f 5f       	subi	r16, 0xFF	; 255
     470:	1f 4f       	sbci	r17, 0xFF	; 255
     472:	1f 92       	push	r1
     474:	4f 93       	push	r20
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	9f 93       	push	r25
     47c:	8f 93       	push	r24
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	6c 01       	movw	r12, r24
     484:	9f 93       	push	r25
     486:	8f 93       	push	r24
     488:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <sprintf>
     48c:	8f 92       	push	r8
     48e:	9f 92       	push	r9
     490:	df 92       	push	r13
     492:	cf 92       	push	r12
     494:	1f 93       	push	r17
     496:	0f 93       	push	r16
     498:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <sprintf>
     49c:	b8 01       	movw	r22, r16
     49e:	c7 01       	movw	r24, r14
     4a0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
     4a4:	8d b7       	in	r24, 0x3d	; 61
     4a6:	9e b7       	in	r25, 0x3e	; 62
     4a8:	0c 96       	adiw	r24, 0x0c	; 12
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	9e bf       	out	0x3e, r25	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	8d bf       	out	0x3d, r24	; 61
     4b4:	c7 01       	movw	r24, r14
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	be be       	out	0x3e, r11	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	ad be       	out	0x3d, r10	; 61
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	bf 90       	pop	r11
     4dc:	af 90       	pop	r10
     4de:	9f 90       	pop	r9
     4e0:	8f 90       	pop	r8
     4e2:	08 95       	ret

000004e4 <_Z13setupSwitchesv>:
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	84 b9       	out	0x04, r24	; 4
     4e8:	84 b1       	in	r24, 0x04	; 4
     4ea:	88 7f       	andi	r24, 0xF8	; 248
     4ec:	84 b9       	out	0x04, r24	; 4
     4ee:	eb e6       	ldi	r30, 0x6B	; 107
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	87 60       	ori	r24, 0x07	; 7
     4f6:	80 83       	st	Z, r24
     4f8:	e8 e6       	ldi	r30, 0x68	; 104
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	80 83       	st	Z, r24
     502:	78 94       	sei
     504:	08 95       	ret

00000506 <_Z13checkPositionhi>:
     506:	83 30       	cpi	r24, 0x03	; 3
     508:	30 f4       	brcc	.+12     	; 0x516 <_Z13checkPositionhi+0x10>
     50a:	cb 01       	movw	r24, r22
     50c:	77 ff       	sbrs	r23, 7
     50e:	1b c0       	rjmp	.+54     	; 0x546 <_Z13checkPositionhi+0x40>
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	18 c0       	rjmp	.+48     	; 0x546 <_Z13checkPositionhi+0x40>
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	69 f4       	brne	.+26     	; 0x534 <_Z13checkPositionhi+0x2e>
     51a:	cb 01       	movw	r24, r22
     51c:	61 15       	cp	r22, r1
     51e:	78 4f       	sbci	r23, 0xF8	; 248
     520:	14 f4       	brge	.+4      	; 0x526 <_Z13checkPositionhi+0x20>
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	98 ef       	ldi	r25, 0xF8	; 248
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	28 e0       	ldi	r18, 0x08	; 8
     52a:	92 07       	cpc	r25, r18
     52c:	ac f0       	brlt	.+42     	; 0x558 <_Z13checkPositionhi+0x52>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	98 e0       	ldi	r25, 0x08	; 8
     532:	08 95       	ret
     534:	84 50       	subi	r24, 0x04	; 4
     536:	82 30       	cpi	r24, 0x02	; 2
     538:	68 f4       	brcc	.+26     	; 0x554 <_Z13checkPositionhi+0x4e>
     53a:	cb 01       	movw	r24, r22
     53c:	64 3e       	cpi	r22, 0xE4	; 228
     53e:	72 40       	sbci	r23, 0x02	; 2
     540:	14 f4       	brge	.+4      	; 0x546 <_Z13checkPositionhi+0x40>
     542:	84 ee       	ldi	r24, 0xE4	; 228
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	85 3a       	cpi	r24, 0xA5	; 165
     548:	26 e0       	ldi	r18, 0x06	; 6
     54a:	92 07       	cpc	r25, r18
     54c:	2c f0       	brlt	.+10     	; 0x558 <_Z13checkPositionhi+0x52>
     54e:	84 ea       	ldi	r24, 0xA4	; 164
     550:	96 e0       	ldi	r25, 0x06	; 6
     552:	08 95       	ret
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	9f ef       	ldi	r25, 0xFF	; 255
     558:	08 95       	ret

0000055a <_Z11printSerial6Stringi>:
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	eb 01       	movw	r28, r22
     560:	bc 01       	movw	r22, r24
     562:	8b e8       	ldi	r24, 0x8B	; 139
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN5Print5printERK6String>
     56a:	6e ec       	ldi	r22, 0xCE	; 206
     56c:	72 e0       	ldi	r23, 0x02	; 2
     56e:	8b e8       	ldi	r24, 0x8B	; 139
     570:	93 e0       	ldi	r25, 0x03	; 3
     572:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN5Print5printEPKc>
     576:	4a e0       	ldi	r20, 0x0A	; 10
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	be 01       	movw	r22, r28
     57c:	8b e8       	ldi	r24, 0x8B	; 139
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	0c 94 07 12 	jmp	0x240e	; 0x240e <_ZN5Print7printlnEii>

00000588 <_Z12error_decodeh>:
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	e6 97       	sbiw	r28, 0x36	; 54
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	08 2f       	mov	r16, r24
     5aa:	62 e0       	ldi	r22, 0x02	; 2
     5ac:	73 e0       	ldi	r23, 0x03	; 3
     5ae:	ce 01       	movw	r24, r28
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	7c 01       	movw	r14, r24
     5b4:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
     5b8:	62 e0       	ldi	r22, 0x02	; 2
     5ba:	73 e0       	ldi	r23, 0x03	; 3
     5bc:	ce 01       	movw	r24, r28
     5be:	07 96       	adiw	r24, 0x07	; 7
     5c0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
     5c4:	10 2f       	mov	r17, r16
     5c6:	11 70       	andi	r17, 0x01	; 1
     5c8:	00 fd       	sbrc	r16, 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <_Z12error_decodeh+0x4a>
     5cc:	62 e0       	ldi	r22, 0x02	; 2
     5ce:	73 e0       	ldi	r23, 0x03	; 3
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <_Z12error_decodeh+0x4e>
     5d2:	66 e1       	ldi	r22, 0x16	; 22
     5d4:	72 e0       	ldi	r23, 0x02	; 2
     5d6:	ce 01       	movw	r24, r28
     5d8:	0d 96       	adiw	r24, 0x0d	; 13
     5da:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
     5de:	11 11       	cpse	r17, r1
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <_Z12error_decodeh+0x60>
     5e2:	62 e0       	ldi	r22, 0x02	; 2
     5e4:	73 e0       	ldi	r23, 0x03	; 3
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <_Z12error_decodeh+0x64>
     5e8:	6a e1       	ldi	r22, 0x1A	; 26
     5ea:	72 e0       	ldi	r23, 0x02	; 2
     5ec:	ce 01       	movw	r24, r28
     5ee:	43 96       	adiw	r24, 0x13	; 19
     5f0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
     5f4:	11 11       	cpse	r17, r1
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <_Z12error_decodeh+0x76>
     5f8:	62 e0       	ldi	r22, 0x02	; 2
     5fa:	73 e0       	ldi	r23, 0x03	; 3
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <_Z12error_decodeh+0x7a>
     5fe:	6e e1       	ldi	r22, 0x1E	; 30
     600:	72 e0       	ldi	r23, 0x02	; 2
     602:	ce 01       	movw	r24, r28
     604:	49 96       	adiw	r24, 0x19	; 25
     606:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
     60a:	11 11       	cpse	r17, r1
     60c:	03 c0       	rjmp	.+6      	; 0x614 <_Z12error_decodeh+0x8c>
     60e:	62 e0       	ldi	r22, 0x02	; 2
     610:	73 e0       	ldi	r23, 0x03	; 3
     612:	02 c0       	rjmp	.+4      	; 0x618 <_Z12error_decodeh+0x90>
     614:	62 e2       	ldi	r22, 0x22	; 34
     616:	72 e0       	ldi	r23, 0x02	; 2
     618:	ce 01       	movw	r24, r28
     61a:	4f 96       	adiw	r24, 0x1f	; 31
     61c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
     620:	11 11       	cpse	r17, r1
     622:	03 c0       	rjmp	.+6      	; 0x62a <_Z12error_decodeh+0xa2>
     624:	62 e0       	ldi	r22, 0x02	; 2
     626:	73 e0       	ldi	r23, 0x03	; 3
     628:	02 c0       	rjmp	.+4      	; 0x62e <_Z12error_decodeh+0xa6>
     62a:	66 e2       	ldi	r22, 0x26	; 38
     62c:	72 e0       	ldi	r23, 0x02	; 2
     62e:	ce 01       	movw	r24, r28
     630:	85 96       	adiw	r24, 0x25	; 37
     632:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
     636:	62 e0       	ldi	r22, 0x02	; 2
     638:	73 e0       	ldi	r23, 0x03	; 3
     63a:	ce 01       	movw	r24, r28
     63c:	8b 96       	adiw	r24, 0x2b	; 43
     63e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
     642:	67 01       	movw	r12, r14
     644:	00 e0       	ldi	r16, 0x00	; 0
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	b6 01       	movw	r22, r12
     64a:	ce 01       	movw	r24, r28
     64c:	c1 96       	adiw	r24, 0x31	; 49
     64e:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN6StringC1ERKS_>
     652:	b8 01       	movw	r22, r16
     654:	ce 01       	movw	r24, r28
     656:	c1 96       	adiw	r24, 0x31	; 49
     658:	80 df       	rcall	.-256    	; 0x55a <_Z11printSerial6Stringi>
     65a:	ce 01       	movw	r24, r28
     65c:	c1 96       	adiw	r24, 0x31	; 49
     65e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
     662:	0f 5f       	subi	r16, 0xFF	; 255
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	96 e0       	ldi	r25, 0x06	; 6
     668:	c9 0e       	add	r12, r25
     66a:	d1 1c       	adc	r13, r1
     66c:	08 30       	cpi	r16, 0x08	; 8
     66e:	11 05       	cpc	r17, r1
     670:	59 f7       	brne	.-42     	; 0x648 <_Z12error_decodeh+0xc0>
     672:	8e 01       	movw	r16, r28
     674:	0f 5c       	subi	r16, 0xCF	; 207
     676:	1f 4f       	sbci	r17, 0xFF	; 255
     678:	06 50       	subi	r16, 0x06	; 6
     67a:	11 09       	sbc	r17, r1
     67c:	c8 01       	movw	r24, r16
     67e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
     682:	e0 16       	cp	r14, r16
     684:	f1 06       	cpc	r15, r17
     686:	c1 f7       	brne	.-16     	; 0x678 <_Z12error_decodeh+0xf0>
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	e6 96       	adiw	r28, 0x36	; 54
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	08 95       	ret

000006aa <_Z8sumBytesPhh>:
     6aa:	38 2f       	mov	r19, r24
     6ac:	fc 01       	movw	r30, r24
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	2e 2f       	mov	r18, r30
     6b4:	23 1b       	sub	r18, r19
     6b6:	26 17       	cp	r18, r22
     6b8:	20 f4       	brcc	.+8      	; 0x6c2 <_Z8sumBytesPhh+0x18>
     6ba:	21 91       	ld	r18, Z+
     6bc:	82 0f       	add	r24, r18
     6be:	91 1d       	adc	r25, r1
     6c0:	f8 cf       	rjmp	.-16     	; 0x6b2 <_Z8sumBytesPhh+0x8>
     6c2:	08 95       	ret

000006c4 <_GLOBAL__sub_I_position_old>:
     6c4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     6c8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     6cc:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <currPos+0x1>
     6d0:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <currPos>
     6d4:	24 e0       	ldi	r18, 0x04	; 4
     6d6:	44 e1       	ldi	r20, 0x14	; 20
     6d8:	67 e2       	ldi	r22, 0x27	; 39
     6da:	86 e3       	ldi	r24, 0x36	; 54
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <_ZN17LiquidCrystal_I2CC1Ehhh>

000006e2 <_Z11printBufferv>:
     6e2:	6a e2       	ldi	r22, 0x2A	; 42
     6e4:	72 e0       	ldi	r23, 0x02	; 2
     6e6:	8b e8       	ldi	r24, 0x8B	; 139
     6e8:	93 e0       	ldi	r25, 0x03	; 3
     6ea:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN5Print5printEPKc>
     6ee:	88 e2       	ldi	r24, 0x28	; 40
     6f0:	94 e0       	ldi	r25, 0x04	; 4
     6f2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN14HardwareSerial9availableEv>
     6f6:	4a e0       	ldi	r20, 0x0A	; 10
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	bc 01       	movw	r22, r24
     6fc:	8b e8       	ldi	r24, 0x8B	; 139
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN5Print5printEii>
     704:	65 e3       	ldi	r22, 0x35	; 53
     706:	72 e0       	ldi	r23, 0x02	; 2
     708:	8b e8       	ldi	r24, 0x8B	; 139
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <_ZN5Print7printlnEPKc>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <serialReading>
     716:	88 e2       	ldi	r24, 0x28	; 40
     718:	94 e0       	ldi	r25, 0x04	; 4
     71a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN14HardwareSerial9availableEv>
     71e:	89 2b       	or	r24, r25
     720:	19 f1       	breq	.+70     	; 0x768 <_Z11printBufferv+0x86>
     722:	88 e2       	ldi	r24, 0x28	; 40
     724:	94 e0       	ldi	r25, 0x04	; 4
     726:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN14HardwareSerial9availableEv>
     72a:	4a e0       	ldi	r20, 0x0A	; 10
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	bc 01       	movw	r22, r24
     730:	8b e8       	ldi	r24, 0x8B	; 139
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN5Print5printEii>
     738:	6b e4       	ldi	r22, 0x4B	; 75
     73a:	72 e0       	ldi	r23, 0x02	; 2
     73c:	8b e8       	ldi	r24, 0x8B	; 139
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN5Print5printEPKc>
     744:	88 e2       	ldi	r24, 0x28	; 40
     746:	94 e0       	ldi	r25, 0x04	; 4
     748:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     74c:	4a e0       	ldi	r20, 0x0A	; 10
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	bc 01       	movw	r22, r24
     752:	8b e8       	ldi	r24, 0x8B	; 139
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	0e 94 07 12 	call	0x240e	; 0x240e <_ZN5Print7printlnEii>
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     766:	d7 cf       	rjmp	.-82     	; 0x716 <_Z11printBufferv+0x34>
     768:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <serialReading>
     76c:	6e e4       	ldi	r22, 0x4E	; 78
     76e:	72 e0       	ldi	r23, 0x02	; 2
     770:	8b e8       	ldi	r24, 0x8B	; 139
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <_ZN5Print7printlnEPKc>

00000778 <_Z12printDataLCDv>:
     778:	7f 92       	push	r7
     77a:	8f 92       	push	r8
     77c:	9f 92       	push	r9
     77e:	af 92       	push	r10
     780:	bf 92       	push	r11
     782:	cf 92       	push	r12
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	6a e0       	ldi	r22, 0x0A	; 10
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     79e:	88 e2       	ldi	r24, 0x28	; 40
     7a0:	94 e0       	ldi	r25, 0x04	; 4
     7a2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN14HardwareSerial9availableEv>
     7a6:	18 16       	cp	r1, r24
     7a8:	19 06       	cpc	r1, r25
     7aa:	0c f0       	brlt	.+2      	; 0x7ae <_Z12printDataLCDv+0x36>
     7ac:	a3 c1       	rjmp	.+838    	; 0xaf4 <_Z12printDataLCDv+0x37c>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <serialReading>
     7b4:	88 e2       	ldi	r24, 0x28	; 40
     7b6:	94 e0       	ldi	r25, 0x04	; 4
     7b8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     7bc:	8f 3f       	cpi	r24, 0xFF	; 255
     7be:	91 05       	cpc	r25, r1
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <_Z12printDataLCDv+0x4c>
     7c2:	98 c1       	rjmp	.+816    	; 0xaf4 <_Z12printDataLCDv+0x37c>
     7c4:	88 e2       	ldi	r24, 0x28	; 40
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     7cc:	8f 3f       	cpi	r24, 0xFF	; 255
     7ce:	91 05       	cpc	r25, r1
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <_Z12printDataLCDv+0x5c>
     7d2:	90 c1       	rjmp	.+800    	; 0xaf4 <_Z12printDataLCDv+0x37c>
     7d4:	88 e2       	ldi	r24, 0x28	; 40
     7d6:	94 e0       	ldi	r25, 0x04	; 4
     7d8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     7dc:	ec 01       	movw	r28, r24
     7de:	b8 2e       	mov	r11, r24
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	82 17       	cp	r24, r18
     7e4:	b9 f3       	breq	.-18     	; 0x7d4 <_Z12printDataLCDv+0x5c>
     7e6:	88 e2       	ldi	r24, 0x28	; 40
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     7ee:	08 2f       	mov	r16, r24
     7f0:	88 e2       	ldi	r24, 0x28	; 40
     7f2:	94 e0       	ldi	r25, 0x04	; 4
     7f4:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     7f8:	18 2f       	mov	r17, r24
     7fa:	81 11       	cpse	r24, r1
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <_Z12printDataLCDv+0x8a>
     7fe:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <error_byte_old>
     802:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <error_byte_old>
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	66 e0       	ldi	r22, 0x06	; 6
     80a:	86 e3       	ldi	r24, 0x36	; 54
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN17LiquidCrystal_I2C9setCursorEhh>
     812:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <error_counter>
     816:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <error_counter+0x1>
     81a:	11 11       	cpse	r17, r1
     81c:	02 c0       	rjmp	.+4      	; 0x822 <_Z12printDataLCDv+0xaa>
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	11 f1       	breq	.+68     	; 0x866 <_Z12printDataLCDv+0xee>
     822:	8b 30       	cpi	r24, 0x0B	; 11
     824:	91 05       	cpc	r25, r1
     826:	14 f4       	brge	.+4      	; 0x82c <_Z12printDataLCDv+0xb4>
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	02 c0       	rjmp	.+4      	; 0x830 <_Z12printDataLCDv+0xb8>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <error_counter+0x1>
     834:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <error_counter>
     838:	81 2f       	mov	r24, r17
     83a:	a6 de       	rcall	.-692    	; 0x588 <_Z12error_decodeh>
     83c:	6a e7       	ldi	r22, 0x7A	; 122
     83e:	72 e0       	ldi	r23, 0x02	; 2
     840:	86 e3       	ldi	r24, 0x36	; 54
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN5Print5printEPKc>
     848:	4a e0       	ldi	r20, 0x0A	; 10
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	60 91 46 03 	lds	r22, 0x0346	; 0x800346 <error_byte_old>
     850:	86 e3       	ldi	r24, 0x36	; 54
     852:	93 e0       	ldi	r25, 0x03	; 3
     854:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN5Print5printEhi>
     858:	65 e8       	ldi	r22, 0x85	; 133
     85a:	72 e0       	ldi	r23, 0x02	; 2
     85c:	86 e3       	ldi	r24, 0x36	; 54
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN5Print5printEPKc>
     864:	21 c1       	rjmp	.+578    	; 0xaa8 <_Z12printDataLCDv+0x330>
     866:	6e e7       	ldi	r22, 0x7E	; 126
     868:	72 e0       	ldi	r23, 0x02	; 2
     86a:	86 e3       	ldi	r24, 0x36	; 54
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN5Print5printEPKc>
     872:	03 30       	cpi	r16, 0x03	; 3
     874:	08 f4       	brcc	.+2      	; 0x878 <_Z12printDataLCDv+0x100>
     876:	18 c1       	rjmp	.+560    	; 0xaa8 <_Z12printDataLCDv+0x330>
     878:	88 e2       	ldi	r24, 0x28	; 40
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     880:	8c 01       	movw	r16, r24
     882:	88 e2       	ldi	r24, 0x28	; 40
     884:	94 e0       	ldi	r25, 0x04	; 4
     886:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	38 2f       	mov	r19, r24
     890:	02 0f       	add	r16, r18
     892:	13 1f       	adc	r17, r19
     894:	7e 01       	movw	r14, r28
     896:	ff 24       	eor	r15, r15
     898:	3a e0       	ldi	r19, 0x0A	; 10
     89a:	c3 9f       	mul	r28, r19
     89c:	e0 01       	movw	r28, r0
     89e:	11 24       	eor	r1, r1
     8a0:	c9 5b       	subi	r28, 0xB9	; 185
     8a2:	dc 4f       	sbci	r29, 0xFC	; 252
     8a4:	8d 81       	ldd	r24, Y+5	; 0x05
     8a6:	2b 81       	ldd	r18, Y+3	; 0x03
     8a8:	3c 81       	ldd	r19, Y+4	; 0x04
     8aa:	9e 81       	ldd	r25, Y+6	; 0x06
     8ac:	81 11       	cpse	r24, r1
     8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <_Z12printDataLCDv+0x148>
     8b0:	a8 01       	movw	r20, r16
     8b2:	4c 59       	subi	r20, 0x9C	; 156
     8b4:	5f 4f       	sbci	r21, 0xFF	; 255
     8b6:	42 17       	cp	r20, r18
     8b8:	53 07       	cpc	r21, r19
     8ba:	44 f4       	brge	.+16     	; 0x8cc <_Z12printDataLCDv+0x154>
     8bc:	9f 5f       	subi	r25, 0xFF	; 255
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <_Z12printDataLCDv+0x154>
     8c0:	2c 59       	subi	r18, 0x9C	; 156
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	20 17       	cp	r18, r16
     8c6:	31 07       	cpc	r19, r17
     8c8:	0c f4       	brge	.+2      	; 0x8cc <_Z12printDataLCDv+0x154>
     8ca:	91 50       	subi	r25, 0x01	; 1
     8cc:	8a e0       	ldi	r24, 0x0A	; 10
     8ce:	8e 9d       	mul	r24, r14
     8d0:	f0 01       	movw	r30, r0
     8d2:	8f 9d       	mul	r24, r15
     8d4:	f0 0d       	add	r31, r0
     8d6:	11 24       	eor	r1, r1
     8d8:	e9 5b       	subi	r30, 0xB9	; 185
     8da:	fc 4f       	sbci	r31, 0xFC	; 252
     8dc:	96 83       	std	Z+6, r25	; 0x06
     8de:	88 e2       	ldi	r24, 0x28	; 40
     8e0:	94 e0       	ldi	r25, 0x04	; 4
     8e2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     8e6:	6c 01       	movw	r12, r24
     8e8:	88 e2       	ldi	r24, 0x28	; 40
     8ea:	94 e0       	ldi	r25, 0x04	; 4
     8ec:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	38 2f       	mov	r19, r24
     8f6:	c2 0e       	add	r12, r18
     8f8:	d3 1e       	adc	r13, r19
     8fa:	88 e2       	ldi	r24, 0x28	; 40
     8fc:	94 e0       	ldi	r25, 0x04	; 4
     8fe:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     902:	ec 01       	movw	r28, r24
     904:	88 e2       	ldi	r24, 0x28	; 40
     906:	94 e0       	ldi	r25, 0x04	; 4
     908:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	38 2f       	mov	r19, r24
     912:	c2 0f       	add	r28, r18
     914:	d3 1f       	adc	r29, r19
     916:	88 e2       	ldi	r24, 0x28	; 40
     918:	94 e0       	ldi	r25, 0x04	; 4
     91a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     91e:	88 e2       	ldi	r24, 0x28	; 40
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     926:	88 e2       	ldi	r24, 0x28	; 40
     928:	94 e0       	ldi	r25, 0x04	; 4
     92a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     92e:	88 e2       	ldi	r24, 0x28	; 40
     930:	94 e0       	ldi	r25, 0x04	; 4
     932:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     936:	88 e2       	ldi	r24, 0x28	; 40
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     93e:	88 e2       	ldi	r24, 0x28	; 40
     940:	94 e0       	ldi	r25, 0x04	; 4
     942:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     946:	88 e2       	ldi	r24, 0x28	; 40
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     94e:	88 e2       	ldi	r24, 0x28	; 40
     950:	94 e0       	ldi	r25, 0x04	; 4
     952:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     956:	88 e2       	ldi	r24, 0x28	; 40
     958:	94 e0       	ldi	r25, 0x04	; 4
     95a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     95e:	c1 14       	cp	r12, r1
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	d9 06       	cpc	r13, r25
     964:	2c f0       	brlt	.+10     	; 0x970 <_Z12printDataLCDv+0x1f8>
     966:	e4 e0       	ldi	r30, 0x04	; 4
     968:	de 1a       	sub	r13, r30
     96a:	77 24       	eor	r7, r7
     96c:	73 94       	inc	r7
     96e:	01 c0       	rjmp	.+2      	; 0x972 <_Z12printDataLCDv+0x1fa>
     970:	71 2c       	mov	r7, r1
     972:	c1 15       	cp	r28, r1
     974:	f4 e0       	ldi	r31, 0x04	; 4
     976:	df 07       	cpc	r29, r31
     978:	24 f0       	brlt	.+8      	; 0x982 <_Z12printDataLCDv+0x20a>
     97a:	d4 50       	subi	r29, 0x04	; 4
     97c:	aa 24       	eor	r10, r10
     97e:	a3 94       	inc	r10
     980:	01 c0       	rjmp	.+2      	; 0x984 <_Z12printDataLCDv+0x20c>
     982:	a1 2c       	mov	r10, r1
     984:	2a e0       	ldi	r18, 0x0A	; 10
     986:	2e 9d       	mul	r18, r14
     988:	c0 01       	movw	r24, r0
     98a:	2f 9d       	mul	r18, r15
     98c:	90 0d       	add	r25, r0
     98e:	11 24       	eor	r1, r1
     990:	9c 01       	movw	r18, r24
     992:	29 5b       	subi	r18, 0xB9	; 185
     994:	3c 4f       	sbci	r19, 0xFC	; 252
     996:	49 01       	movw	r8, r18
     998:	f9 01       	movw	r30, r18
     99a:	75 82       	std	Z+5, r7	; 0x05
     99c:	14 83       	std	Z+4, r17	; 0x04
     99e:	03 83       	std	Z+3, r16	; 0x03
     9a0:	d2 87       	std	Z+10, r29	; 0x0a
     9a2:	c1 87       	std	Z+9, r28	; 0x09
     9a4:	21 e0       	ldi	r18, 0x01	; 1
     9a6:	a7 01       	movw	r20, r14
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	84 e0       	ldi	r24, 0x04	; 4
     9ac:	ae dc       	rcall	.-1700   	; 0x30a <_Z8printLCDhhih>
     9ae:	f4 01       	movw	r30, r8
     9b0:	82 81       	ldd	r24, Z+2	; 0x02
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	29 f0       	breq	.+10     	; 0x9c0 <_Z12printDataLCDv+0x248>
     9b6:	82 30       	cpi	r24, 0x02	; 2
     9b8:	31 f0       	breq	.+12     	; 0x9c6 <_Z12printDataLCDv+0x24e>
     9ba:	6b e6       	ldi	r22, 0x6B	; 107
     9bc:	72 e0       	ldi	r23, 0x02	; 2
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <_Z12printDataLCDv+0x252>
     9c0:	60 e7       	ldi	r22, 0x70	; 112
     9c2:	72 e0       	ldi	r23, 0x02	; 2
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <_Z12printDataLCDv+0x252>
     9c6:	65 e7       	ldi	r22, 0x75	; 117
     9c8:	72 e0       	ldi	r23, 0x02	; 2
     9ca:	86 e3       	ldi	r24, 0x36	; 54
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN5Print5printEPKc>
     9d2:	2a e0       	ldi	r18, 0x0A	; 10
     9d4:	2e 9d       	mul	r18, r14
     9d6:	c0 01       	movw	r24, r0
     9d8:	2f 9d       	mul	r18, r15
     9da:	90 0d       	add	r25, r0
     9dc:	11 24       	eor	r1, r1
     9de:	9c 01       	movw	r18, r24
     9e0:	29 5b       	subi	r18, 0xB9	; 185
     9e2:	3c 4f       	sbci	r19, 0xFC	; 252
     9e4:	49 01       	movw	r8, r18
     9e6:	f9 01       	movw	r30, r18
     9e8:	63 81       	ldd	r22, Z+3	; 0x03
     9ea:	74 81       	ldd	r23, Z+4	; 0x04
     9ec:	07 2e       	mov	r0, r23
     9ee:	00 0c       	add	r0, r0
     9f0:	88 0b       	sbc	r24, r24
     9f2:	99 0b       	sbc	r25, r25
     9f4:	6b d6       	rcall	.+3286   	; 0x16cc <__floatsisf>
     9f6:	28 e5       	ldi	r18, 0x58	; 88
     9f8:	39 e3       	ldi	r19, 0x39	; 57
     9fa:	44 eb       	ldi	r20, 0xB4	; 180
     9fc:	5d e3       	ldi	r21, 0x3D	; 61
     9fe:	16 d7       	rcall	.+3628   	; 0x182c <__mulsf3>
     a00:	32 d6       	rcall	.+3172   	; 0x1666 <__fixsfsi>
     a02:	24 e0       	ldi	r18, 0x04	; 4
     a04:	ab 01       	movw	r20, r22
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	84 e0       	ldi	r24, 0x04	; 4
     a0a:	7f dc       	rcall	.-1794   	; 0x30a <_Z8printLCDhhih>
     a0c:	6f ed       	ldi	r22, 0xDF	; 223
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	93 e0       	ldi	r25, 0x03	; 3
     a12:	0e 94 39 11 	call	0x2272	; 0x2272 <_ZN5Print5printEc>
     a16:	f4 01       	movw	r30, r8
     a18:	46 81       	ldd	r20, Z+6	; 0x06
     a1a:	04 2e       	mov	r0, r20
     a1c:	00 0c       	add	r0, r0
     a1e:	55 0b       	sbc	r21, r21
     a20:	23 e0       	ldi	r18, 0x03	; 3
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	8a e0       	ldi	r24, 0x0A	; 10
     a26:	71 dc       	rcall	.-1822   	; 0x30a <_Z8printLCDhhih>
     a28:	68 e1       	ldi	r22, 0x18	; 24
     a2a:	72 e0       	ldi	r23, 0x02	; 2
     a2c:	86 e3       	ldi	r24, 0x36	; 54
     a2e:	93 e0       	ldi	r25, 0x03	; 3
     a30:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN5Print5printEPKc>
     a34:	24 e0       	ldi	r18, 0x04	; 4
     a36:	a6 01       	movw	r20, r12
     a38:	62 e0       	ldi	r22, 0x02	; 2
     a3a:	84 e0       	ldi	r24, 0x04	; 4
     a3c:	66 dc       	rcall	.-1844   	; 0x30a <_Z8printLCDhhih>
     a3e:	71 10       	cpse	r7, r1
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <_Z12printDataLCDv+0x2ce>
     a42:	6f e7       	ldi	r22, 0x7F	; 127
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <_Z12printDataLCDv+0x2d0>
     a46:	6e e7       	ldi	r22, 0x7E	; 126
     a48:	86 e3       	ldi	r24, 0x36	; 54
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	0e 94 39 11 	call	0x2272	; 0x2272 <_ZN5Print5printEc>
     a50:	8a e0       	ldi	r24, 0x0A	; 10
     a52:	8e 9d       	mul	r24, r14
     a54:	f0 01       	movw	r30, r0
     a56:	8f 9d       	mul	r24, r15
     a58:	f0 0d       	add	r31, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	e9 5b       	subi	r30, 0xB9	; 185
     a5e:	fc 4f       	sbci	r31, 0xFC	; 252
     a60:	47 81       	ldd	r20, Z+7	; 0x07
     a62:	50 85       	ldd	r21, Z+8	; 0x08
     a64:	24 e0       	ldi	r18, 0x04	; 4
     a66:	62 e0       	ldi	r22, 0x02	; 2
     a68:	50 dc       	rcall	.-1888   	; 0x30a <_Z8printLCDhhih>
     a6a:	24 e0       	ldi	r18, 0x04	; 4
     a6c:	ae 01       	movw	r20, r28
     a6e:	63 e0       	ldi	r22, 0x03	; 3
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	4b dc       	rcall	.-1898   	; 0x30a <_Z8printLCDhhih>
     a74:	a1 10       	cpse	r10, r1
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <_Z12printDataLCDv+0x304>
     a78:	6f e7       	ldi	r22, 0x7F	; 127
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <_Z12printDataLCDv+0x306>
     a7c:	6e e7       	ldi	r22, 0x7E	; 126
     a7e:	86 e3       	ldi	r24, 0x36	; 54
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 39 11 	call	0x2272	; 0x2272 <_ZN5Print5printEc>
     a86:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <servoID_old>
     a8a:	b8 12       	cpse	r11, r24
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <_Z12printDataLCDv+0x320>
     a8e:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <currPos>
     a92:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <currPos+0x1>
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <_Z12printDataLCDv+0x324>
     a98:	90 2f       	mov	r25, r16
     a9a:	81 2f       	mov	r24, r17
     a9c:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <currPos>
     aa0:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <currPos+0x1>
     aa4:	b0 92 8a 03 	sts	0x038A, r11	; 0x80038a <servoID_old>
     aa8:	88 e2       	ldi	r24, 0x28	; 40
     aaa:	94 e0       	ldi	r25, 0x04	; 4
     aac:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN14HardwareSerial9availableEv>
     ab0:	18 16       	cp	r1, r24
     ab2:	19 06       	cpc	r1, r25
     ab4:	2c f4       	brge	.+10     	; 0xac0 <_Z12printDataLCDv+0x348>
     ab6:	88 e2       	ldi	r24, 0x28	; 40
     ab8:	94 e0       	ldi	r25, 0x04	; 4
     aba:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     abe:	f4 cf       	rjmp	.-24     	; 0xaa8 <_Z12printDataLCDv+0x330>
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     acc:	40 91 42 03 	lds	r20, 0x0342	; 0x800342 <cycle_counter>
     ad0:	50 91 43 03 	lds	r21, 0x0343	; 0x800343 <cycle_counter+0x1>
     ad4:	44 36       	cpi	r20, 0x64	; 100
     ad6:	51 05       	cpc	r21, r1
     ad8:	1c f4       	brge	.+6      	; 0xae0 <_Z12printDataLCDv+0x368>
     ada:	4f 5f       	subi	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <_Z12printDataLCDv+0x36c>
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	50 93 43 03 	sts	0x0343, r21	; 0x800343 <cycle_counter+0x1>
     ae8:	40 93 42 03 	sts	0x0342, r20	; 0x800342 <cycle_counter>
     aec:	23 e0       	ldi	r18, 0x03	; 3
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	81 e1       	ldi	r24, 0x11	; 17
     af2:	0b dc       	rcall	.-2026   	; 0x30a <_Z8printLCDhhih>
     af4:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <serialReading>
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	bf 90       	pop	r11
     b0a:	af 90       	pop	r10
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	7f 90       	pop	r7
     b12:	08 95       	ret

00000b14 <_Z10writeServohhPhh>:
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	18 2f       	mov	r17, r24
     b22:	d6 2f       	mov	r29, r22
     b24:	7a 01       	movw	r14, r20
     b26:	02 2f       	mov	r16, r18
     b28:	c6 e0       	ldi	r28, 0x06	; 6
     b2a:	c6 0f       	add	r28, r22
     b2c:	c2 0f       	add	r28, r18
     b2e:	62 2f       	mov	r22, r18
     b30:	ca 01       	movw	r24, r20
     b32:	bb dd       	rcall	.-1162   	; 0x6aa <_Z8sumBytesPhh>
     b34:	c1 0f       	add	r28, r17
     b36:	8c 0f       	add	r24, r28
     b38:	c8 2f       	mov	r28, r24
     b3a:	c0 95       	com	r28
     b3c:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <serialWriting>
     b40:	88 23       	and	r24, r24
     b42:	39 f0       	breq	.+14     	; 0xb52 <_Z10writeServohhPhh+0x3e>
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     b50:	f5 cf       	rjmp	.-22     	; 0xb3c <_Z10writeServohhPhh+0x28>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <serialWriting>
     b58:	88 e2       	ldi	r24, 0x28	; 40
     b5a:	94 e0       	ldi	r25, 0x04	; 4
     b5c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN14HardwareSerial9availableEv>
     b60:	89 2b       	or	r24, r25
     b62:	29 f0       	breq	.+10     	; 0xb6e <_Z10writeServohhPhh+0x5a>
     b64:	88 e2       	ldi	r24, 0x28	; 40
     b66:	94 e0       	ldi	r25, 0x04	; 4
     b68:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     b6c:	f5 cf       	rjmp	.-22     	; 0xb58 <_Z10writeServohhPhh+0x44>
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	0e 94 bd 13 	call	0x277a	; 0x277a <digitalWrite>
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	0e 94 bd 13 	call	0x277a	; 0x277a <digitalWrite>
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     b8a:	6f ef       	ldi	r22, 0xFF	; 255
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	88 e2       	ldi	r24, 0x28	; 40
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	b4 db       	rcall	.-2200   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     b94:	6f ef       	ldi	r22, 0xFF	; 255
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	88 e2       	ldi	r24, 0x28	; 40
     b9a:	94 e0       	ldi	r25, 0x04	; 4
     b9c:	af db       	rcall	.-2210   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     b9e:	61 2f       	mov	r22, r17
     ba0:	88 e2       	ldi	r24, 0x28	; 40
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN14HardwareSerial5writeEh>
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	b8 01       	movw	r22, r16
     bac:	6d 5f       	subi	r22, 0xFD	; 253
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	88 e2       	ldi	r24, 0x28	; 40
     bb2:	94 e0       	ldi	r25, 0x04	; 4
     bb4:	a3 db       	rcall	.-2234   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	88 e2       	ldi	r24, 0x28	; 40
     bbc:	94 e0       	ldi	r25, 0x04	; 4
     bbe:	9e db       	rcall	.-2244   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     bc0:	6d 2f       	mov	r22, r29
     bc2:	88 e2       	ldi	r24, 0x28	; 40
     bc4:	94 e0       	ldi	r25, 0x04	; 4
     bc6:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN14HardwareSerial5writeEh>
     bca:	a8 01       	movw	r20, r16
     bcc:	b7 01       	movw	r22, r14
     bce:	88 e2       	ldi	r24, 0x28	; 40
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN5Print5writeEPKhj>
     bd6:	6c 2f       	mov	r22, r28
     bd8:	88 e2       	ldi	r24, 0x28	; 40
     bda:	94 e0       	ldi	r25, 0x04	; 4
     bdc:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN14HardwareSerial5writeEh>
     be0:	88 e2       	ldi	r24, 0x28	; 40
     be2:	94 e0       	ldi	r25, 0x04	; 4
     be4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN14HardwareSerial5flushEv>
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	0e 94 bd 13 	call	0x277a	; 0x277a <digitalWrite>
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	0e 94 bd 13 	call	0x277a	; 0x277a <digitalWrite>
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     c04:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <serialWriting>
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	08 95       	ret

00000c16 <_Z9moveSpeedhii>:
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <_Z9moveSpeedhii+0x10>
     c26:	1f 92       	push	r1
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	18 2f       	mov	r17, r24
     c2e:	d4 2e       	mov	r13, r20
     c30:	e5 2e       	mov	r14, r21
     c32:	69 dc       	rcall	.-1838   	; 0x506 <_Z13checkPositionhi>
     c34:	f8 2e       	mov	r15, r24
     c36:	09 2f       	mov	r16, r25
     c38:	89 83       	std	Y+1, r24	; 0x01
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	db 82       	std	Y+3, r13	; 0x03
     c3e:	ec 82       	std	Y+4, r14	; 0x04
     c40:	24 e0       	ldi	r18, 0x04	; 4
     c42:	ae 01       	movw	r20, r28
     c44:	4f 5f       	subi	r20, 0xFF	; 255
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	6e e1       	ldi	r22, 0x1E	; 30
     c4a:	81 2f       	mov	r24, r17
     c4c:	63 df       	rcall	.-314    	; 0xb14 <_Z10writeServohhPhh>
     c4e:	f0 92 88 03 	sts	0x0388, r15	; 0x800388 <currPos>
     c52:	00 93 89 03 	sts	0x0389, r16	; 0x800389 <currPos+0x1>
     c56:	8a e0       	ldi	r24, 0x0A	; 10
     c58:	18 9f       	mul	r17, r24
     c5a:	f0 01       	movw	r30, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	e9 5b       	subi	r30, 0xB9	; 185
     c60:	fc 4f       	sbci	r31, 0xFC	; 252
     c62:	f3 82       	std	Z+3, r15	; 0x03
     c64:	04 83       	std	Z+4, r16	; 0x04
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	08 95       	ret

00000c7e <_Z14setTorqueLimithi>:
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	1f 92       	push	r1
     c84:	1f 92       	push	r1
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	69 83       	std	Y+1, r22	; 0x01
     c8c:	7a 83       	std	Y+2, r23	; 0x02
     c8e:	22 e0       	ldi	r18, 0x02	; 2
     c90:	ae 01       	movw	r20, r28
     c92:	4f 5f       	subi	r20, 0xFF	; 255
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	62 e2       	ldi	r22, 0x22	; 34
     c98:	3d df       	rcall	.-390    	; 0xb14 <_Z10writeServohhPhh>
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <_Z7setModehh>:
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	00 d0       	rcall	.+0      	; 0xcae <_Z7setModehh+0xa>
     cae:	1f 92       	push	r1
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	18 2f       	mov	r17, r24
     cb6:	06 2f       	mov	r16, r22
     cb8:	61 30       	cpi	r22, 0x01	; 1
     cba:	29 f4       	brne	.+10     	; 0xcc6 <_Z7setModehh+0x22>
     cbc:	19 82       	std	Y+1, r1	; 0x01
     cbe:	1a 82       	std	Y+2, r1	; 0x02
     cc0:	1b 82       	std	Y+3, r1	; 0x03
     cc2:	1c 82       	std	Y+4, r1	; 0x04
     cc4:	08 c0       	rjmp	.+16     	; 0xcd6 <_Z7setModehh+0x32>
     cc6:	62 30       	cpi	r22, 0x02	; 2
     cc8:	81 f4       	brne	.+32     	; 0xcea <_Z7setModehh+0x46>
     cca:	9f ef       	ldi	r25, 0xFF	; 255
     ccc:	99 83       	std	Y+1, r25	; 0x01
     cce:	8f e0       	ldi	r24, 0x0F	; 15
     cd0:	8a 83       	std	Y+2, r24	; 0x02
     cd2:	9b 83       	std	Y+3, r25	; 0x03
     cd4:	8c 83       	std	Y+4, r24	; 0x04
     cd6:	24 e0       	ldi	r18, 0x04	; 4
     cd8:	ae 01       	movw	r20, r28
     cda:	4f 5f       	subi	r20, 0xFF	; 255
     cdc:	5f 4f       	sbci	r21, 0xFF	; 255
     cde:	66 e0       	ldi	r22, 0x06	; 6
     ce0:	81 2f       	mov	r24, r17
     ce2:	18 df       	rcall	.-464    	; 0xb14 <_Z10writeServohhPhh>
     ce4:	16 30       	cpi	r17, 0x06	; 6
     ce6:	a0 f0       	brcs	.+40     	; 0xd10 <_Z7setModehh+0x6c>
     ce8:	1a c0       	rjmp	.+52     	; 0xd1e <_Z7setModehh+0x7a>
     cea:	84 ee       	ldi	r24, 0xE4	; 228
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	8a 83       	std	Y+2, r24	; 0x02
     cf2:	84 ea       	ldi	r24, 0xA4	; 164
     cf4:	8b 83       	std	Y+3, r24	; 0x03
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	8c 83       	std	Y+4, r24	; 0x04
     cfa:	24 e0       	ldi	r18, 0x04	; 4
     cfc:	ae 01       	movw	r20, r28
     cfe:	4f 5f       	subi	r20, 0xFF	; 255
     d00:	5f 4f       	sbci	r21, 0xFF	; 255
     d02:	66 e0       	ldi	r22, 0x06	; 6
     d04:	81 2f       	mov	r24, r17
     d06:	06 df       	rcall	.-500    	; 0xb14 <_Z10writeServohhPhh>
     d08:	16 30       	cpi	r17, 0x06	; 6
     d0a:	48 f4       	brcc	.+18     	; 0xd1e <_Z7setModehh+0x7a>
     d0c:	03 30       	cpi	r16, 0x03	; 3
     d0e:	38 f4       	brcc	.+14     	; 0xd1e <_Z7setModehh+0x7a>
     d10:	8a e0       	ldi	r24, 0x0A	; 10
     d12:	18 9f       	mul	r17, r24
     d14:	f0 01       	movw	r30, r0
     d16:	11 24       	eor	r1, r1
     d18:	e9 5b       	subi	r30, 0xB9	; 185
     d1a:	fc 4f       	sbci	r31, 0xFC	; 252
     d1c:	02 83       	std	Z+2, r16	; 0x02
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <_Z12setModeWheelh>:
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	b8 cf       	rjmp	.-144    	; 0xca4 <_Z7setModehh>

00000d34 <_Z12setModeJointh>:
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	b6 cf       	rjmp	.-148    	; 0xca4 <_Z7setModehh>

00000d38 <_Z16setModeMultiTurnh>:
     d38:	62 e0       	ldi	r22, 0x02	; 2
     d3a:	b4 cf       	rjmp	.-152    	; 0xca4 <_Z7setModehh>

00000d3c <__vector_9>:
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	0b b6       	in	r0, 0x3b	; 59
     d48:	0f 92       	push	r0
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	cf 93       	push	r28
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
     d6c:	c0 91 47 03 	lds	r28, 0x0347	; 0x800347 <arm>
     d70:	18 9b       	sbis	0x03, 0	; 3
     d72:	38 c0       	rjmp	.+112    	; 0xde4 <__vector_9+0xa8>
     d74:	2f 9a       	sbi	0x05, 7	; 5
     d76:	8a e0       	ldi	r24, 0x0A	; 10
     d78:	c8 9f       	mul	r28, r24
     d7a:	80 01       	movw	r16, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	09 5b       	subi	r16, 0xB9	; 185
     d80:	1c 4f       	sbci	r17, 0xFC	; 252
     d82:	78 01       	movw	r14, r16
     d84:	e3 e0       	ldi	r30, 0x03	; 3
     d86:	ee 0e       	add	r14, r30
     d88:	f1 1c       	adc	r15, r1
     d8a:	09 5f       	subi	r16, 0xF9	; 249
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	18 9b       	sbis	0x03, 0	; 3
     d90:	20 c0       	rjmp	.+64     	; 0xdd2 <__vector_9+0x96>
     d92:	f7 01       	movw	r30, r14
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	61 50       	subi	r22, 0x01	; 1
     d9a:	71 09       	sbc	r23, r1
     d9c:	71 83       	std	Z+1, r23	; 0x01
     d9e:	60 83       	st	Z, r22
     da0:	c3 30       	cpi	r28, 0x03	; 3
     da2:	40 f4       	brcc	.+16     	; 0xdb4 <__vector_9+0x78>
     da4:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <lastButtonPressed>
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	21 f4       	brne	.+8      	; 0xdb4 <__vector_9+0x78>
     dac:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <buttonsFlip+0x1>
     db0:	81 11       	cpse	r24, r1
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <__vector_9+0x80>
     db4:	f8 01       	movw	r30, r16
     db6:	40 81       	ld	r20, Z
     db8:	51 81       	ldd	r21, Z+1	; 0x01
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <__vector_9+0x84>
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	8c 2f       	mov	r24, r28
     dc2:	29 df       	rcall	.-430    	; 0xc16 <_Z9moveSpeedhii>
     dc4:	68 ec       	ldi	r22, 0xC8	; 200
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     dd0:	de cf       	rjmp	.-68     	; 0xd8e <__vector_9+0x52>
     dd2:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <buttonsFlip+0x1>
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	89 27       	eor	r24, r25
     dda:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <buttonsFlip+0x1>
     dde:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <lastButtonPressed>
     de2:	2f 98       	cbi	0x05, 7	; 5
     de4:	19 9b       	sbis	0x03, 1	; 3
     de6:	3e c0       	rjmp	.+124    	; 0xe64 <__vector_9+0x128>
     de8:	2f 9a       	sbi	0x05, 7	; 5
     dea:	fa e0       	ldi	r31, 0x0A	; 10
     dec:	cf 9f       	mul	r28, r31
     dee:	80 01       	movw	r16, r0
     df0:	11 24       	eor	r1, r1
     df2:	09 5b       	subi	r16, 0xB9	; 185
     df4:	1c 4f       	sbci	r17, 0xFC	; 252
     df6:	78 01       	movw	r14, r16
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	e8 0e       	add	r14, r24
     dfc:	f1 1c       	adc	r15, r1
     dfe:	09 5f       	subi	r16, 0xF9	; 249
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	19 9b       	sbis	0x03, 1	; 3
     e04:	25 c0       	rjmp	.+74     	; 0xe50 <__vector_9+0x114>
     e06:	f7 01       	movw	r30, r14
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	71 83       	std	Z+1, r23	; 0x01
     e12:	60 83       	st	Z, r22
     e14:	c3 30       	cpi	r28, 0x03	; 3
     e16:	68 f4       	brcc	.+26     	; 0xe32 <__vector_9+0xf6>
     e18:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <lastButtonPressed>
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	21 f4       	brne	.+8      	; 0xe28 <__vector_9+0xec>
     e20:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <buttonsFlip+0x2>
     e24:	81 11       	cpse	r24, r1
     e26:	09 c0       	rjmp	.+18     	; 0xe3a <__vector_9+0xfe>
     e28:	f8 01       	movw	r30, r16
     e2a:	40 81       	ld	r20, Z
     e2c:	51 81       	ldd	r21, Z+1	; 0x01
     e2e:	5c 5f       	subi	r21, 0xFC	; 252
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <__vector_9+0x102>
     e32:	f8 01       	movw	r30, r16
     e34:	40 81       	ld	r20, Z
     e36:	51 81       	ldd	r21, Z+1	; 0x01
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <__vector_9+0x102>
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	54 e0       	ldi	r21, 0x04	; 4
     e3e:	8c 2f       	mov	r24, r28
     e40:	ea de       	rcall	.-556    	; 0xc16 <_Z9moveSpeedhii>
     e42:	68 ec       	ldi	r22, 0xC8	; 200
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     e4e:	d9 cf       	rjmp	.-78     	; 0xe02 <__vector_9+0xc6>
     e50:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <buttonsFlip+0x2>
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 27       	eor	r24, r25
     e58:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <buttonsFlip+0x2>
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <lastButtonPressed>
     e62:	2f 98       	cbi	0x05, 7	; 5
     e64:	1a 9b       	sbis	0x03, 2	; 3
     e66:	39 c0       	rjmp	.+114    	; 0xeda <__vector_9+0x19e>
     e68:	1f 9a       	sbi	0x03, 7	; 3
     e6a:	1a 9b       	sbis	0x03, 2	; 3
     e6c:	07 c0       	rjmp	.+14     	; 0xe7c <__vector_9+0x140>
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     e7a:	f7 cf       	rjmp	.-18     	; 0xe6a <__vector_9+0x12e>
     e7c:	64 e1       	ldi	r22, 0x14	; 20
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     e88:	c3 30       	cpi	r28, 0x03	; 3
     e8a:	68 f4       	brcc	.+26     	; 0xea6 <__vector_9+0x16a>
     e8c:	8a e0       	ldi	r24, 0x0A	; 10
     e8e:	c8 9f       	mul	r28, r24
     e90:	f0 01       	movw	r30, r0
     e92:	11 24       	eor	r1, r1
     e94:	e9 5b       	subi	r30, 0xB9	; 185
     e96:	fc 4f       	sbci	r31, 0xFC	; 252
     e98:	63 81       	ldd	r22, Z+3	; 0x03
     e9a:	74 81       	ldd	r23, Z+4	; 0x04
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	8c 2f       	mov	r24, r28
     ea2:	b9 de       	rcall	.-654    	; 0xc16 <_Z9moveSpeedhii>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <__vector_9+0x16e>
     ea6:	c5 30       	cpi	r28, 0x05	; 5
     ea8:	18 f4       	brcc	.+6      	; 0xeb0 <__vector_9+0x174>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	8c 0f       	add	r24, r28
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <__vector_9+0x176>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <arm>
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	10 f0       	brcs	.+4      	; 0xebe <__vector_9+0x182>
     eba:	3c df       	rcall	.-392    	; 0xd34 <_Z12setModeJointh>
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <__vector_9+0x18c>
     ebe:	83 30       	cpi	r24, 0x03	; 3
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__vector_9+0x18a>
     ec2:	3a df       	rcall	.-396    	; 0xd38 <_Z16setModeMultiTurnh>
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <__vector_9+0x18c>
     ec6:	34 df       	rcall	.-408    	; 0xd30 <_Z12setModeWheelh>
     ec8:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <lastButtonPressed>
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	89 27       	eor	r24, r25
     ed0:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <lastButtonPressed>
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <lastButtonPressed>
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	cf 91       	pop	r28
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	0f 90       	pop	r0
     efe:	0b be       	out	0x3b, r0	; 59
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <_Z9readServohhh>:
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	08 2f       	mov	r16, r24
     f14:	16 2f       	mov	r17, r22
     f16:	d4 2f       	mov	r29, r20
     f18:	c6 e0       	ldi	r28, 0x06	; 6
     f1a:	c4 0f       	add	r28, r20
     f1c:	c6 0f       	add	r28, r22
     f1e:	c8 0f       	add	r28, r24
     f20:	c0 95       	com	r28
     f22:	88 e2       	ldi	r24, 0x28	; 40
     f24:	94 e0       	ldi	r25, 0x04	; 4
     f26:	b2 d6       	rcall	.+3428   	; 0x1c8c <_ZN14HardwareSerial9availableEv>
     f28:	89 2b       	or	r24, r25
     f2a:	21 f0       	breq	.+8      	; 0xf34 <_Z9readServohhh+0x2a>
     f2c:	88 e2       	ldi	r24, 0x28	; 40
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	c7 d6       	rcall	.+3470   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
     f32:	f7 cf       	rjmp	.-18     	; 0xf22 <_Z9readServohhh+0x18>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	0e 94 bd 13 	call	0x277a	; 0x277a <digitalWrite>
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	0e 94 bd 13 	call	0x277a	; 0x277a <digitalWrite>
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
     f50:	6f ef       	ldi	r22, 0xFF	; 255
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	88 e2       	ldi	r24, 0x28	; 40
     f56:	94 e0       	ldi	r25, 0x04	; 4
     f58:	d1 d9       	rcall	.-3166   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     f5a:	6f ef       	ldi	r22, 0xFF	; 255
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	88 e2       	ldi	r24, 0x28	; 40
     f60:	94 e0       	ldi	r25, 0x04	; 4
     f62:	cc d9       	rcall	.-3176   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <serialWriting>
     f6a:	60 2f       	mov	r22, r16
     f6c:	88 e2       	ldi	r24, 0x28	; 40
     f6e:	94 e0       	ldi	r25, 0x04	; 4
     f70:	27 d7       	rcall	.+3662   	; 0x1dc0 <_ZN14HardwareSerial5writeEh>
     f72:	64 e0       	ldi	r22, 0x04	; 4
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	88 e2       	ldi	r24, 0x28	; 40
     f78:	94 e0       	ldi	r25, 0x04	; 4
     f7a:	c0 d9       	rcall	.-3200   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     f7c:	62 e0       	ldi	r22, 0x02	; 2
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	88 e2       	ldi	r24, 0x28	; 40
     f82:	94 e0       	ldi	r25, 0x04	; 4
     f84:	bb d9       	rcall	.-3210   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     f86:	61 2f       	mov	r22, r17
     f88:	88 e2       	ldi	r24, 0x28	; 40
     f8a:	94 e0       	ldi	r25, 0x04	; 4
     f8c:	19 d7       	rcall	.+3634   	; 0x1dc0 <_ZN14HardwareSerial5writeEh>
     f8e:	6d 2f       	mov	r22, r29
     f90:	88 e2       	ldi	r24, 0x28	; 40
     f92:	94 e0       	ldi	r25, 0x04	; 4
     f94:	15 d7       	rcall	.+3626   	; 0x1dc0 <_ZN14HardwareSerial5writeEh>
     f96:	6c 2f       	mov	r22, r28
     f98:	88 e2       	ldi	r24, 0x28	; 40
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	11 d7       	rcall	.+3618   	; 0x1dc0 <_ZN14HardwareSerial5writeEh>
     f9e:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <serialWriting>
     fa2:	88 e2       	ldi	r24, 0x28	; 40
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	58 d7       	rcall	.+3760   	; 0x1e58 <_ZN14HardwareSerial5flushEv>
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	0e 94 bd 13 	call	0x277a	; 0x277a <digitalWrite>
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	83 e0       	ldi	r24, 0x03	; 3
     fb4:	0e 94 bd 13 	call	0x277a	; 0x277a <digitalWrite>
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	0c 94 86 12 	jmp	0x250c	; 0x250c <delay>

00000fcc <_Z7getDatahh>:
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData) {
     fcc:	6f 92       	push	r6
     fce:	7f 92       	push	r7
     fd0:	8f 92       	push	r8
     fd2:	9f 92       	push	r9
     fd4:	af 92       	push	r10
     fd6:	bf 92       	push	r11
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	62 97       	sbiw	r28, 0x12	; 18
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	f8 2e       	mov	r15, r24
     ffa:	e6 2e       	mov	r14, r22
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
     ffc:	62 e0       	ldi	r22, 0x02	; 2
     ffe:	73 e0       	ldi	r23, 0x03	; 3
    1000:	ce 01       	movw	r24, r28
    1002:	0d 96       	adiw	r24, 0x0d	; 13
    1004:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
	
	readServo(id, ctrlData, 2);
    1008:	42 e0       	ldi	r20, 0x02	; 2
    100a:	6e 2d       	mov	r22, r14
    100c:	8f 2d       	mov	r24, r15
    100e:	7d df       	rcall	.-262    	; 0xf0a <_Z9readServohhh>
	delay(10);
    1010:	6a e0       	ldi	r22, 0x0A	; 10
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 86 12 	call	0x250c	; 0x250c <delay>
	serialReading = YES;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <serialReading>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
    1022:	88 e2       	ldi	r24, 0x28	; 40
    1024:	94 e0       	ldi	r25, 0x04	; 4
    1026:	4c d6       	rcall	.+3224   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
    1028:	f8 2e       	mov	r15, r24
	//Serial1.availableForWrite();
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
    102a:	88 e2       	ldi	r24, 0x28	; 40
    102c:	94 e0       	ldi	r25, 0x04	; 4
    102e:	48 d6       	rcall	.+3216   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
    1030:	9f ef       	ldi	r25, 0xFF	; 255
    1032:	f9 12       	cpse	r15, r25
    1034:	02 c0       	rjmp	.+4      	; 0x103a <_Z7getDatahh+0x6e>
    1036:	8f 3f       	cpi	r24, 0xFF	; 255
    1038:	09 f1       	breq	.+66     	; 0x107c <_Z7getDatahh+0xb0>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6); //6
		//printSerial("Checksum~  ", Checksum);
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
    103a:	e1 2c       	mov	r14, r1
    103c:	88 e2       	ldi	r24, 0x28	; 40
    103e:	94 e0       	ldi	r25, 0x04	; 4
    1040:	25 d6       	rcall	.+3146   	; 0x1c8c <_ZN14HardwareSerial9availableEv>
    1042:	89 2b       	or	r24, r25
    1044:	21 f0       	breq	.+8      	; 0x104e <_Z7getDatahh+0x82>
    1046:	88 e2       	ldi	r24, 0x28	; 40
    1048:	94 e0       	ldi	r25, 0x04	; 4
    104a:	3a d6       	rcall	.+3188   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
    104c:	f7 cf       	rjmp	.-18     	; 0x103c <_Z7getDatahh+0x70>
	serialReading = NO;
    104e:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <serialReading>
	Serial.println(line);
    1052:	be 01       	movw	r22, r28
    1054:	63 5f       	subi	r22, 0xF3	; 243
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	8b e8       	ldi	r24, 0x8B	; 139
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	0e 94 43 11 	call	0x2286	; 0x2286 <_ZN5Print7printlnERK6String>
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
    1060:	ee 20       	and	r14, r14
    1062:	49 f0       	breq	.+18     	; 0x1076 <_Z7getDatahh+0xaa>
    1064:	bb 20       	and	r11, r11
    1066:	09 f4       	brne	.+2      	; 0x106a <_Z7getDatahh+0x9e>
    1068:	09 c1       	rjmp	.+530    	; 0x127c <_Z7getDatahh+0x2b0>
    106a:	0b 2d       	mov	r16, r11
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	11 95       	neg	r17
    1070:	01 95       	neg	r16
    1072:	11 09       	sbc	r17, r1
    1074:	03 c1       	rjmp	.+518    	; 0x127c <_Z7getDatahh+0x2b0>
    1076:	01 e0       	ldi	r16, 0x01	; 1
    1078:	1f ef       	ldi	r17, 0xFF	; 255
	msgStarted = startOne && startTwo ? YES : NO;
	//Serial.print("## Start 01: ");
	//Serial.print(Serial1.available());
	//Serial.println(" ####################");
	if (msgStarted) {
		msgId = Serial1.read();
    107a:	00 c1       	rjmp	.+512    	; 0x127c <_Z7getDatahh+0x2b0>
    107c:	88 e2       	ldi	r24, 0x28	; 40
    107e:	94 e0       	ldi	r25, 0x04	; 4
    1080:	1f d6       	rcall	.+3134   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
		line = "ID:" + padNumber(msgId, 6);	//1
    1082:	3c 01       	movw	r6, r24
    1084:	bc 01       	movw	r22, r24
    1086:	77 27       	eor	r23, r23
    1088:	46 e0       	ldi	r20, 0x06	; 6
    108a:	ce 01       	movw	r24, r28
    108c:	07 96       	adiw	r24, 0x07	; 7
    108e:	ce d9       	rcall	.-3172   	; 0x42c <_Z9padNumberih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1090:	62 ed       	ldi	r22, 0xD2	; 210
    1092:	72 e0       	ldi	r23, 0x02	; 2
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
    109c:	be 01       	movw	r22, r28
    109e:	69 5f       	subi	r22, 0xF9	; 249
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	ce 01       	movw	r24, r28
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	0e 94 af 14 	call	0x295e	; 0x295e <_ZplRK15StringSumHelperRK6String>
    10aa:	bc 01       	movw	r22, r24
    10ac:	ce 01       	movw	r24, r28
    10ae:	0d 96       	adiw	r24, 0x0d	; 13
    10b0:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
    10bc:	ce 01       	movw	r24, r28
    10be:	07 96       	adiw	r24, 0x07	; 7
    10c0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
		//printSerial("Servo ID   ", msgId);
		msgLength = Serial1.read();
    10c4:	88 e2       	ldi	r24, 0x28	; 40
    10c6:	94 e0       	ldi	r25, 0x04	; 4
    10c8:	fb d5       	rcall	.+3062   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
		line = line + ", MsgLegth:" + padNumber(msgLength, 6);   //2
    10ca:	5c 01       	movw	r10, r24
    10cc:	bc 01       	movw	r22, r24
    10ce:	77 27       	eor	r23, r23
    10d0:	46 e0       	ldi	r20, 0x06	; 6
    10d2:	ce 01       	movw	r24, r28
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	aa d9       	rcall	.-3244   	; 0x42c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    10d8:	be 01       	movw	r22, r28
    10da:	63 5f       	subi	r22, 0xF3	; 243
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	ce 01       	movw	r24, r28
    10e0:	07 96       	adiw	r24, 0x07	; 7
    10e2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN6StringC1ERKS_>
    10e6:	69 e8       	ldi	r22, 0x89	; 137
    10e8:	72 e0       	ldi	r23, 0x02	; 2
    10ea:	ce 01       	movw	r24, r28
    10ec:	07 96       	adiw	r24, 0x07	; 7
    10ee:	0e 94 c0 14 	call	0x2980	; 0x2980 <_ZplRK15StringSumHelperPKc>
    10f2:	be 01       	movw	r22, r28
    10f4:	6f 5f       	subi	r22, 0xFF	; 255
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	0e 94 af 14 	call	0x295e	; 0x295e <_ZplRK15StringSumHelperRK6String>
    10fc:	bc 01       	movw	r22, r24
    10fe:	ce 01       	movw	r24, r28
    1100:	0d 96       	adiw	r24, 0x0d	; 13
    1102:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1106:	ce 01       	movw	r24, r28
    1108:	07 96       	adiw	r24, 0x07	; 7
    110a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
    110e:	ce 01       	movw	r24, r28
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
		//printSerial("Msg Length ", msgLength);
		msgError = Serial1.read();
    1116:	88 e2       	ldi	r24, 0x28	; 40
    1118:	94 e0       	ldi	r25, 0x04	; 4
    111a:	d2 d5       	rcall	.+2980   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
    111c:	6c 01       	movw	r12, r24
		line = line + ", Error:" + padNumber(msgError, 6);    //3
    111e:	b8 2e       	mov	r11, r24
    1120:	bc 01       	movw	r22, r24
    1122:	77 27       	eor	r23, r23
    1124:	46 e0       	ldi	r20, 0x06	; 6
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	80 d9       	rcall	.-3328   	; 0x42c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    112c:	be 01       	movw	r22, r28
    112e:	63 5f       	subi	r22, 0xF3	; 243
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	ce 01       	movw	r24, r28
    1134:	07 96       	adiw	r24, 0x07	; 7
    1136:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN6StringC1ERKS_>
    113a:	65 e9       	ldi	r22, 0x95	; 149
    113c:	72 e0       	ldi	r23, 0x02	; 2
    113e:	ce 01       	movw	r24, r28
    1140:	07 96       	adiw	r24, 0x07	; 7
    1142:	0e 94 c0 14 	call	0x2980	; 0x2980 <_ZplRK15StringSumHelperPKc>
    1146:	be 01       	movw	r22, r28
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	0e 94 af 14 	call	0x295e	; 0x295e <_ZplRK15StringSumHelperRK6String>
    1150:	bc 01       	movw	r22, r24
    1152:	ce 01       	movw	r24, r28
    1154:	0d 96       	adiw	r24, 0x0d	; 13
    1156:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    115a:	ce 01       	movw	r24, r28
    115c:	07 96       	adiw	r24, 0x07	; 7
    115e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
		//printSerial("Msg Error  ", msgError);
		msgData_1 = Serial1.read();
    1166:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
    116a:	88 e2       	ldi	r24, 0x28	; 40
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	a8 d5       	rcall	.+2896   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
		//printSerial("Msg Data L ", msgData_1);
		msgData_2 = Serial1.read();
    1170:	f8 2e       	mov	r15, r24
    1172:	88 e2       	ldi	r24, 0x28	; 40
    1174:	94 e0       	ldi	r25, 0x04	; 4
    1176:	a4 d5       	rcall	.+2888   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
	response = sprintf(tmp, "%%%dd", padding);
	response = sprintf(buffer, tmp, value);
	return buffer;
}

int combineBytes(uint8_t byte_1, uint8_t byte_2) { return byte_1 + (byte_2<<8); }
    1178:	e8 2e       	mov	r14, r24
    117a:	98 2e       	mov	r9, r24
    117c:	81 2c       	mov	r8, r1
    117e:	84 01       	movw	r16, r8
    1180:	0f 0d       	add	r16, r15
		msgData_1 = Serial1.read();
		//printSerial("Msg Data L ", msgData_1);
		msgData_2 = Serial1.read();
		//printSerial("Msg Data H ", msgData_2);
		msgData = combineBytes(msgData_1, msgData_2);
		line = line + ", Data:" + padNumber(msgData, 6);		//4
    1182:	11 1d       	adc	r17, r1
    1184:	46 e0       	ldi	r20, 0x06	; 6
    1186:	b8 01       	movw	r22, r16
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	4f d9       	rcall	.-3426   	; 0x42c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    118e:	be 01       	movw	r22, r28
    1190:	63 5f       	subi	r22, 0xF3	; 243
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	ce 01       	movw	r24, r28
    1196:	07 96       	adiw	r24, 0x07	; 7
    1198:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN6StringC1ERKS_>
    119c:	6e e9       	ldi	r22, 0x9E	; 158
    119e:	72 e0       	ldi	r23, 0x02	; 2
    11a0:	ce 01       	movw	r24, r28
    11a2:	07 96       	adiw	r24, 0x07	; 7
    11a4:	0e 94 c0 14 	call	0x2980	; 0x2980 <_ZplRK15StringSumHelperPKc>
    11a8:	be 01       	movw	r22, r28
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	0e 94 af 14 	call	0x295e	; 0x295e <_ZplRK15StringSumHelperRK6String>
    11b2:	bc 01       	movw	r22, r24
    11b4:	ce 01       	movw	r24, r28
    11b6:	0d 96       	adiw	r24, 0x0d	; 13
    11b8:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    11bc:	ce 01       	movw	r24, r28
    11be:	07 96       	adiw	r24, 0x07	; 7
    11c0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
    11c4:	ce 01       	movw	r24, r28
    11c6:	01 96       	adiw	r24, 0x01	; 1
		//printSerial("Msg Data   ", msgData);
		msgChecksum = Serial1.read();
    11c8:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
    11cc:	88 e2       	ldi	r24, 0x28	; 40
    11ce:	94 e0       	ldi	r25, 0x04	; 4
    11d0:	77 d5       	rcall	.+2798   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //5
    11d2:	4c 01       	movw	r8, r24
    11d4:	bc 01       	movw	r22, r24
    11d6:	77 27       	eor	r23, r23
    11d8:	46 e0       	ldi	r20, 0x06	; 6
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	26 d9       	rcall	.-3508   	; 0x42c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    11e0:	be 01       	movw	r22, r28
    11e2:	63 5f       	subi	r22, 0xF3	; 243
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	ce 01       	movw	r24, r28
    11e8:	07 96       	adiw	r24, 0x07	; 7
    11ea:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN6StringC1ERKS_>
    11ee:	66 ea       	ldi	r22, 0xA6	; 166
    11f0:	72 e0       	ldi	r23, 0x02	; 2
    11f2:	ce 01       	movw	r24, r28
    11f4:	07 96       	adiw	r24, 0x07	; 7
    11f6:	0e 94 c0 14 	call	0x2980	; 0x2980 <_ZplRK15StringSumHelperPKc>
    11fa:	be 01       	movw	r22, r28
    11fc:	6f 5f       	subi	r22, 0xFF	; 255
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	0e 94 af 14 	call	0x295e	; 0x295e <_ZplRK15StringSumHelperRK6String>
    1204:	bc 01       	movw	r22, r24
    1206:	ce 01       	movw	r24, r28
    1208:	0d 96       	adiw	r24, 0x0d	; 13
    120a:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    120e:	ce 01       	movw	r24, r28
    1210:	07 96       	adiw	r24, 0x07	; 7
    1212:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
		//printSerial("Checksum   ", msgChecksum);
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
    121e:	a6 0c       	add	r10, r6
    1220:	ca 0c       	add	r12, r10
    1222:	fc 0c       	add	r15, r12
    1224:	fe 0c       	add	r15, r14
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6); //6
    1226:	f0 94       	com	r15
    1228:	6f 2d       	mov	r22, r15
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	46 e0       	ldi	r20, 0x06	; 6
    122e:	ce 01       	movw	r24, r28
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	fc d8       	rcall	.-3592   	; 0x42c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1234:	be 01       	movw	r22, r28
    1236:	63 5f       	subi	r22, 0xF3	; 243
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	ce 01       	movw	r24, r28
    123c:	07 96       	adiw	r24, 0x07	; 7
    123e:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN6StringC1ERKS_>
    1242:	65 eb       	ldi	r22, 0xB5	; 181
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	ce 01       	movw	r24, r28
    1248:	07 96       	adiw	r24, 0x07	; 7
    124a:	0e 94 c0 14 	call	0x2980	; 0x2980 <_ZplRK15StringSumHelperPKc>
    124e:	be 01       	movw	r22, r28
    1250:	6f 5f       	subi	r22, 0xFF	; 255
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	0e 94 af 14 	call	0x295e	; 0x295e <_ZplRK15StringSumHelperRK6String>
    1258:	bc 01       	movw	r22, r24
    125a:	ce 01       	movw	r24, r28
    125c:	0d 96       	adiw	r24, 0x0d	; 13
    125e:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1262:	ce 01       	movw	r24, r28
    1264:	07 96       	adiw	r24, 0x07	; 7
    1266:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
		//printSerial("Checksum~  ", Checksum);
		msgOK = msgChecksum == Checksum ? YES : NO;
    1272:	ee 24       	eor	r14, r14
    1274:	e3 94       	inc	r14
    1276:	f8 10       	cpse	r15, r8
    1278:	e0 ce       	rjmp	.-576    	; 0x103a <_Z7getDatahh+0x6e>
    127a:	e0 ce       	rjmp	.-576    	; 0x103c <_Z7getDatahh+0x70>
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
    127c:	ce 01       	movw	r24, r28
    127e:	0d 96       	adiw	r24, 0x0d	; 13
    1280:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
	Serial.println(line);
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
}
    1284:	c8 01       	movw	r24, r16
    1286:	62 96       	adiw	r28, 0x12	; 18
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11
    12a4:	af 90       	pop	r10
    12a6:	9f 90       	pop	r9
    12a8:	8f 90       	pop	r8
    12aa:	7f 90       	pop	r7
    12ac:	6f 90       	pop	r6
    12ae:	08 95       	ret

000012b0 <loop>:
}

/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
	int incomingByte = 0;
	readServo(arm.id, 0x24, 34);
    12b4:	42 e2       	ldi	r20, 0x22	; 34
    12b6:	64 e2       	ldi	r22, 0x24	; 36
    12b8:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <arm>
    12bc:	26 de       	rcall	.-948    	; 0xf0a <_Z9readServohhh>
	printDataLCD();
    12be:	5c da       	rcall	.-2888   	; 0x778 <_Z12printDataLCDv>
    12c0:	68 e2       	ldi	r22, 0x28	; 40
	int new_reading;
	bool new_direction;
	int speedo;
	
	/* Load 4  - Reading */
	new_reading = getData(4, MX_PRESENT_LOAD_L);
    12c2:	84 e0       	ldi	r24, 0x04	; 4
    12c4:	83 de       	rcall	.-762    	; 0xfcc <_Z7getDatahh>
    12c6:	18 16       	cp	r1, r24
	if (new_reading > 0) {
    12c8:	19 06       	cpc	r1, r25
    12ca:	8c f4       	brge	.+34     	; 0x12ee <loop+0x3e>
    12cc:	21 e0       	ldi	r18, 0x01	; 1
		load_4_dir = getDirection(new_reading);
    12ce:	81 15       	cp	r24, r1
    12d0:	34 e0       	ldi	r19, 0x04	; 4
    12d2:	93 07       	cpc	r25, r19
    12d4:	0c f4       	brge	.+2      	; 0x12d8 <loop+0x28>
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	20 93 2f 03 	sts	0x032F, r18	; 0x80032f <load_4_dir>
    12dc:	81 15       	cp	r24, r1
	sprintf(buffer, tmp, value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    12de:	24 e0       	ldi	r18, 0x04	; 4
    12e0:	92 07       	cpc	r25, r18
    12e2:	0c f0       	brlt	.+2      	; 0x12e6 <loop+0x36>
    12e4:	94 50       	subi	r25, 0x04	; 4
    12e6:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <load_4+0x1>
	
	/* Load 4  - Reading */
	new_reading = getData(4, MX_PRESENT_LOAD_L);
	if (new_reading > 0) {
		load_4_dir = getDirection(new_reading);
		load_4 = getRealValue(new_reading);
    12ea:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <load_4>
    12ee:	40 91 32 03 	lds	r20, 0x0332	; 0x800332 <load_4>
	} else { // use the old values
		load_4_dir = load_4_dir;
		load_4 = load_4; 
	}
	/* Load 4  - Controlling */
	if (load_4 > 30) {
    12f2:	50 91 33 03 	lds	r21, 0x0333	; 0x800333 <load_4+0x1>
    12f6:	4f 31       	cpi	r20, 0x1F	; 31
    12f8:	51 05       	cpc	r21, r1
    12fa:	70 f0       	brcs	.+28     	; 0x1318 <loop+0x68>
    12fc:	4b 3f       	cpi	r20, 0xFB	; 251
		speedo = load_4 < 30 ? 0
			: load_4 > 250 ? 500 : 2*load_4;
    12fe:	51 05       	cpc	r21, r1
    1300:	18 f4       	brcc	.+6      	; 0x1308 <loop+0x58>
    1302:	44 0f       	add	r20, r20
    1304:	55 1f       	adc	r21, r21
    1306:	02 c0       	rjmp	.+4      	; 0x130c <loop+0x5c>
    1308:	44 ef       	ldi	r20, 0xF4	; 244
    130a:	51 e0       	ldi	r21, 0x01	; 1
    130c:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <load_4_dir>
		if (load_4_dir) {
    1310:	81 11       	cpse	r24, r1
    1312:	04 c0       	rjmp	.+8      	; 0x131c <loop+0x6c>
    1314:	5c 5f       	subi	r21, 0xFC	; 252
			//printLCD(18, 2, 2, 2);
			speedo = speedo;
		} else {
			speedo = 0x0400 + speedo;
    1316:	02 c0       	rjmp	.+4      	; 0x131c <loop+0x6c>
    1318:	40 e0       	ldi	r20, 0x00	; 0
		}
		moveSpeed(1, 100, speedo);
	} else {
		moveSpeed(1, 100, 0);
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	64 e6       	ldi	r22, 0x64	; 100
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	79 dc       	rcall	.-1806   	; 0xc16 <_Z9moveSpeedhii>
	}
	
	/* Load 5 */
	new_reading = getData(5, MX_PRESENT_LOAD_L);
    1324:	68 e2       	ldi	r22, 0x28	; 40
    1326:	85 e0       	ldi	r24, 0x05	; 5
    1328:	51 de       	rcall	.-862    	; 0xfcc <_Z7getDatahh>
    132a:	18 16       	cp	r1, r24
	if (new_reading > 0) {
    132c:	19 06       	cpc	r1, r25
    132e:	8c f4       	brge	.+34     	; 0x1352 <loop+0xa2>
    1330:	21 e0       	ldi	r18, 0x01	; 1
		load_5_dir = getDirection(new_reading);
    1332:	81 15       	cp	r24, r1
    1334:	34 e0       	ldi	r19, 0x04	; 4
    1336:	93 07       	cpc	r25, r19
    1338:	0c f4       	brge	.+2      	; 0x133c <loop+0x8c>
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	20 93 2e 03 	sts	0x032E, r18	; 0x80032e <__data_end>
    1340:	81 15       	cp	r24, r1
	sprintf(buffer, tmp, value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1342:	24 e0       	ldi	r18, 0x04	; 4
    1344:	92 07       	cpc	r25, r18
    1346:	0c f0       	brlt	.+2      	; 0x134a <loop+0x9a>
    1348:	94 50       	subi	r25, 0x04	; 4
    134a:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <load_5+0x1>
	
	/* Load 5 */
	new_reading = getData(5, MX_PRESENT_LOAD_L);
	if (new_reading > 0) {
		load_5_dir = getDirection(new_reading);
		load_5 = getRealValue(new_reading);
    134e:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <load_5>
    1352:	40 91 30 03 	lds	r20, 0x0330	; 0x800330 <load_5>
	} else { // use the old values
		load_5_dir = load_5_dir;
		load_5 = load_5;
	}
	/* Load 5  - Controlling */
	if (load_5 > 30) {
    1356:	50 91 31 03 	lds	r21, 0x0331	; 0x800331 <load_5+0x1>
    135a:	4f 31       	cpi	r20, 0x1F	; 31
    135c:	51 05       	cpc	r21, r1
    135e:	70 f0       	brcs	.+28     	; 0x137c <loop+0xcc>
    1360:	4b 3f       	cpi	r20, 0xFB	; 251
		speedo = load_5 < 30 ? 0
			: load_5 > 250 ? 500 : 2*load_5;
    1362:	51 05       	cpc	r21, r1
    1364:	18 f4       	brcc	.+6      	; 0x136c <loop+0xbc>
    1366:	44 0f       	add	r20, r20
    1368:	55 1f       	adc	r21, r21
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <loop+0xc0>
    136c:	44 ef       	ldi	r20, 0xF4	; 244
    136e:	51 e0       	ldi	r21, 0x01	; 1
    1370:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <__data_end>
		if (load_5_dir) {
    1374:	81 11       	cpse	r24, r1
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <loop+0xd0>
    1378:	5c 5f       	subi	r21, 0xFC	; 252
			//printLCD(18, 2, 2, 2);
			speedo = speedo;
		} else {
			speedo = 0x0400 + speedo;
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <loop+0xd0>
    137c:	40 e0       	ldi	r20, 0x00	; 0
		}
		moveSpeed(2, 100, speedo);
	} else {
		moveSpeed(2, 100, 0);
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	64 e6       	ldi	r22, 0x64	; 100
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	47 dc       	rcall	.-1906   	; 0xc16 <_Z9moveSpeedhii>
    1388:	40 91 32 03 	lds	r20, 0x0332	; 0x800332 <load_4>
	}	
	
	printLCD(10, 3, load_4, 4);
    138c:	50 91 33 03 	lds	r21, 0x0333	; 0x800333 <load_4+0x1>
    1390:	24 e0       	ldi	r18, 0x04	; 4
    1392:	63 e0       	ldi	r22, 0x03	; 3
    1394:	8a e0       	ldi	r24, 0x0A	; 10
    1396:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    139a:	40 91 30 03 	lds	r20, 0x0330	; 0x800330 <load_5>
	printLCD(15, 3, load_5, 4);
    139e:	50 91 31 03 	lds	r21, 0x0331	; 0x800331 <load_5+0x1>
    13a2:	24 e0       	ldi	r18, 0x04	; 4
    13a4:	63 e0       	ldi	r22, 0x03	; 3
    13a6:	8f e0       	ldi	r24, 0x0F	; 15
    13a8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
	/* Reading Serial */
	if (Serial.available() > 0) {
    13ac:	8b e8       	ldi	r24, 0x8B	; 139
    13ae:	93 e0       	ldi	r25, 0x03	; 3
    13b0:	6d d4       	rcall	.+2266   	; 0x1c8c <_ZN14HardwareSerial9availableEv>
    13b2:	18 16       	cp	r1, r24
    13b4:	19 06       	cpc	r1, r25
    13b6:	7c f5       	brge	.+94     	; 0x1416 <loop+0x166>
    13b8:	41 e0       	ldi	r20, 0x01	; 1
		// read the incoming byte:
		lcd.setCursor(15, 1);
    13ba:	6f e0       	ldi	r22, 0x0F	; 15
    13bc:	86 e3       	ldi	r24, 0x36	; 54
    13be:	93 e0       	ldi	r25, 0x03	; 3
    13c0:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN17LiquidCrystal_I2C9setCursorEhh>
    13c4:	4a e0       	ldi	r20, 0x0A	; 10
		lcd.print(incomingByte, 10);
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	86 e3       	ldi	r24, 0x36	; 54
    13ce:	93 e0       	ldi	r25, 0x03	; 3
    13d0:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN5Print5printEii>
		incomingByte = Serial.read();
    13d4:	8b e8       	ldi	r24, 0x8B	; 139
    13d6:	93 e0       	ldi	r25, 0x03	; 3
    13d8:	73 d4       	rcall	.+2278   	; 0x1cc0 <_ZN14HardwareSerial4readEv>
    13da:	ec 01       	movw	r28, r24

		// say what you got:
		Serial.print("I received: ");
    13dc:	64 ec       	ldi	r22, 0xC4	; 196
    13de:	72 e0       	ldi	r23, 0x02	; 2
    13e0:	8b e8       	ldi	r24, 0x8B	; 139
    13e2:	93 e0       	ldi	r25, 0x03	; 3
    13e4:	45 d7       	rcall	.+3722   	; 0x2270 <_ZN5Print5printEPKc>
    13e6:	4a e0       	ldi	r20, 0x0A	; 10
		Serial.println(incomingByte, DEC);
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	be 01       	movw	r22, r28
    13ec:	8b e8       	ldi	r24, 0x8B	; 139
    13ee:	93 e0       	ldi	r25, 0x03	; 3
    13f0:	0e 94 07 12 	call	0x240e	; 0x240e <_ZN5Print7printlnEii>
    13f4:	42 e0       	ldi	r20, 0x02	; 2
		lcd.setCursor(15, 2);
    13f6:	6f e0       	ldi	r22, 0x0F	; 15
    13f8:	86 e3       	ldi	r24, 0x36	; 54
    13fa:	93 e0       	ldi	r25, 0x03	; 3
    13fc:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1400:	ae 01       	movw	r20, r28
		//lcd.print((String)incomingByte);
		lcd.print((unsigned long)incomingByte, 10);
    1402:	dd 0f       	add	r29, r29
    1404:	66 0b       	sbc	r22, r22
    1406:	77 0b       	sbc	r23, r23
    1408:	2a e0       	ldi	r18, 0x0A	; 10
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	86 e3       	ldi	r24, 0x36	; 54
    140e:	93 e0       	ldi	r25, 0x03	; 3
	}
	//printDataLCD();
	//delay(200);
}
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
		// say what you got:
		Serial.print("I received: ");
		Serial.println(incomingByte, DEC);
		lcd.setCursor(15, 2);
		//lcd.print((String)incomingByte);
		lcd.print((unsigned long)incomingByte, 10);
    1414:	9f c7       	rjmp	.+3902   	; 0x2354 <_ZN5Print5printEmi>
    1416:	df 91       	pop	r29
	}
	//printDataLCD();
	//delay(200);
}
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <setup>:
    141c:	0f 93       	push	r16
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	00 d0       	rcall	.+0      	; 0x1426 <setup+0xa>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <setup+0xc>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
    142c:	5b d8       	rcall	.-3914   	; 0x4e4 <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
    142e:	86 e3       	ldi	r24, 0x36	; 54
    1430:	93 e0       	ldi	r25, 0x03	; 3
    1432:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    1436:	86 e3       	ldi	r24, 0x36	; 54
    1438:	93 e0       	ldi	r25, 0x03	; 3
    143a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    143e:	86 e3       	ldi	r24, 0x36	; 54
    1440:	93 e0       	ldi	r25, 0x03	; 3
    1442:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	0e 94 81 13 	call	0x2702	; 0x2702 <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	0e 94 81 13 	call	0x2702	; 0x2702 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1456:	26 e0       	ldi	r18, 0x06	; 6
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	51 ee       	ldi	r21, 0xE1	; 225
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	8b e8       	ldi	r24, 0x8B	; 139
    1462:	93 e0       	ldi	r25, 0x03	; 3
    1464:	1a d5       	rcall	.+2612   	; 0x1e9a <_ZN14HardwareSerial5beginEmh>
    1466:	26 e0       	ldi	r18, 0x06	; 6
    1468:	47 e3       	ldi	r20, 0x37	; 55
    146a:	5f ed       	ldi	r21, 0xDF	; 223
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	88 e2       	ldi	r24, 0x28	; 40
    1472:	94 e0       	ldi	r25, 0x04	; 4
    1474:	12 d5       	rcall	.+2596   	; 0x1e9a <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
    1476:	88 e2       	ldi	r24, 0x28	; 40
    1478:	94 e0       	ldi	r25, 0x04	; 4
    147a:	ee d4       	rcall	.+2524   	; 0x1e58 <_ZN14HardwareSerial5flushEv>
	arm.id = 5;
    147c:	85 e0       	ldi	r24, 0x05	; 5
    147e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <arm>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
    1482:	81 e0       	ldi	r24, 0x01	; 1
	setModeWheel(2);
    1484:	55 dc       	rcall	.-1878   	; 0xd30 <_Z12setModeWheelh>
    1486:	82 e0       	ldi	r24, 0x02	; 2
	setModeMultiTurn(3);
    1488:	53 dc       	rcall	.-1882   	; 0xd30 <_Z12setModeWheelh>
    148a:	83 e0       	ldi	r24, 0x03	; 3
	setModeJoint(4);
    148c:	55 dc       	rcall	.-1878   	; 0xd38 <_Z16setModeMultiTurnh>
    148e:	84 e0       	ldi	r24, 0x04	; 4
    1490:	51 dc       	rcall	.-1886   	; 0xd34 <_Z12setModeJointh>
	setModeJoint(5);
    1492:	85 e0       	ldi	r24, 0x05	; 5
    1494:	4f dc       	rcall	.-1890   	; 0xd34 <_Z12setModeJointh>
    1496:	84 ef       	ldi	r24, 0xF4	; 244
	/* Set the speeds of the servos */
	arm.servos[1].speed = 500;
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <arm+0x12>
    149e:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <arm+0x11>
    14a2:	84 e6       	ldi	r24, 0x64	; 100
	arm.servos[2].speed = 100;
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <arm+0x1c>
    14aa:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <arm+0x1b>
    14ae:	8e e1       	ldi	r24, 0x1E	; 30
	arm.servos[3].speed = 30;
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <arm+0x26>
    14b6:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <arm+0x25>
    14ba:	8f e0       	ldi	r24, 0x0F	; 15
	arm.servos[4].speed = 15;
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <arm+0x30>
    14c2:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <arm+0x2f>
    14c6:	84 e1       	ldi	r24, 0x14	; 20
	arm.servos[5].speed = 20;
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <arm+0x3a>
    14ce:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <arm+0x39>
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    14d2:	11 e0       	ldi	r17, 0x01	; 1
		setTorqueLimit(i, MAX_TORQUE);
    14d4:	6f ef       	ldi	r22, 0xFF	; 255
    14d6:	73 e0       	ldi	r23, 0x03	; 3
    14d8:	81 2f       	mov	r24, r17
    14da:	d1 db       	rcall	.-2142   	; 0xc7e <_Z14setTorqueLimithi>
    14dc:	1f 5f       	subi	r17, 0xFF	; 255
	arm.servos[2].speed = 100;
	arm.servos[3].speed = 30;
	arm.servos[4].speed = 15;
	arm.servos[5].speed = 20;
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    14de:	16 30       	cpi	r17, 0x06	; 6
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <setup+0xb8>
    14e2:	40 e0       	ldi	r20, 0x00	; 0
		setTorqueLimit(i, MAX_TORQUE);
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	86 e3       	ldi	r24, 0x36	; 54
    14e8:	93 e0       	ldi	r25, 0x03	; 3
    14ea:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("sID:");
    14ee:	61 ed       	ldi	r22, 0xD1	; 209
    14f0:	72 e0       	ldi	r23, 0x02	; 2
    14f2:	86 e3       	ldi	r24, 0x36	; 54
    14f4:	93 e0       	ldi	r25, 0x03	; 3
    14f6:	bc d6       	rcall	.+3448   	; 0x2270 <_ZN5Print5printEPKc>
    14f8:	41 e0       	ldi	r20, 0x01	; 1
	lcd.setCursor(0,1);
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	86 e3       	ldi	r24, 0x36	; 54
    14fe:	93 e0       	ldi	r25, 0x03	; 3
    1500:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("deg:");
    1504:	66 ed       	ldi	r22, 0xD6	; 214
    1506:	72 e0       	ldi	r23, 0x02	; 2
    1508:	86 e3       	ldi	r24, 0x36	; 54
    150a:	93 e0       	ldi	r25, 0x03	; 3
    150c:	b1 d6       	rcall	.+3426   	; 0x2270 <_ZN5Print5printEPKc>
	lcd.setCursor(0,2);
    150e:	42 e0       	ldi	r20, 0x02	; 2
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	86 e3       	ldi	r24, 0x36	; 54
    1514:	93 e0       	ldi	r25, 0x03	; 3
    1516:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("rpm:");
    151a:	6b ed       	ldi	r22, 0xDB	; 219
    151c:	72 e0       	ldi	r23, 0x02	; 2
    151e:	86 e3       	ldi	r24, 0x36	; 54
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	a6 d6       	rcall	.+3404   	; 0x2270 <_ZN5Print5printEPKc>
	lcd.setCursor(0,3);
    1524:	43 e0       	ldi	r20, 0x03	; 3
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	86 e3       	ldi	r24, 0x36	; 54
    152a:	93 e0       	ldi	r25, 0x03	; 3
	lcd.print("ld%:");
    152c:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1530:	60 ee       	ldi	r22, 0xE0	; 224
    1532:	72 e0       	ldi	r23, 0x02	; 2
    1534:	86 e3       	ldi	r24, 0x36	; 54

	readServo(arm.id, 0x18, 8);
    1536:	93 e0       	ldi	r25, 0x03	; 3
    1538:	9b d6       	rcall	.+3382   	; 0x2270 <_ZN5Print5printEPKc>
    153a:	48 e0       	ldi	r20, 0x08	; 8
    153c:	68 e1       	ldi	r22, 0x18	; 24
    153e:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <arm>
	printBuffer();
    1542:	e3 dc       	rcall	.-1594   	; 0xf0a <_Z9readServohhh>
	delay(2);
    1544:	ce d8       	rcall	.-3684   	; 0x6e2 <_Z11printBufferv>
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	de d7       	rcall	.+4028   	; 0x250c <delay>
	int somthe = getData(5, MX_CURRENT_L);
    1550:	64 e4       	ldi	r22, 0x44	; 68
    1552:	85 e0       	ldi	r24, 0x05	; 5
    1554:	3b dd       	rcall	.-1418   	; 0xfcc <_Z7getDatahh>
    1556:	8c 01       	movw	r16, r24
	sprintf(buffer, tmp, value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1558:	81 15       	cp	r24, r1
    155a:	94 40       	sbci	r25, 0x04	; 4
    155c:	0c f0       	brlt	.+2      	; 0x1560 <setup+0x144>
    155e:	14 50       	subi	r17, 0x04	; 4
    1560:	65 ee       	ldi	r22, 0xE5	; 229

	readServo(arm.id, 0x18, 8);
	printBuffer();
	delay(2);
	int somthe = getData(5, MX_CURRENT_L);
	printSerial("return: ", getRealValue(somthe));
    1562:	72 e0       	ldi	r23, 0x02	; 2
    1564:	ce 01       	movw	r24, r28
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN6StringC1EPKc>
    156c:	b8 01       	movw	r22, r16
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z11printSerial6Stringi>
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN6StringD1Ev>
    157e:	26 96       	adiw	r28, 0x06	; 6
	//printBuffer();
}
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <__subsf3>:
    1594:	50 58       	subi	r21, 0x80	; 128

00001596 <__addsf3>:
    1596:	bb 27       	eor	r27, r27
    1598:	aa 27       	eor	r26, r26
    159a:	0e d0       	rcall	.+28     	; 0x15b8 <__addsf3x>
    159c:	0d c1       	rjmp	.+538    	; 0x17b8 <__fp_round>
    159e:	fe d0       	rcall	.+508    	; 0x179c <__fp_pscA>
    15a0:	30 f0       	brcs	.+12     	; 0x15ae <__addsf3+0x18>
    15a2:	03 d1       	rcall	.+518    	; 0x17aa <__fp_pscB>
    15a4:	20 f0       	brcs	.+8      	; 0x15ae <__addsf3+0x18>
    15a6:	31 f4       	brne	.+12     	; 0x15b4 <__addsf3+0x1e>
    15a8:	9f 3f       	cpi	r25, 0xFF	; 255
    15aa:	11 f4       	brne	.+4      	; 0x15b0 <__addsf3+0x1a>
    15ac:	1e f4       	brtc	.+6      	; 0x15b4 <__addsf3+0x1e>
    15ae:	f3 c0       	rjmp	.+486    	; 0x1796 <__fp_nan>
    15b0:	0e f4       	brtc	.+2      	; 0x15b4 <__addsf3+0x1e>
    15b2:	e0 95       	com	r30
    15b4:	e7 fb       	bst	r30, 7
    15b6:	e9 c0       	rjmp	.+466    	; 0x178a <__fp_inf>

000015b8 <__addsf3x>:
    15b8:	e9 2f       	mov	r30, r25
    15ba:	0f d1       	rcall	.+542    	; 0x17da <__fp_split3>
    15bc:	80 f3       	brcs	.-32     	; 0x159e <__addsf3+0x8>
    15be:	ba 17       	cp	r27, r26
    15c0:	62 07       	cpc	r22, r18
    15c2:	73 07       	cpc	r23, r19
    15c4:	84 07       	cpc	r24, r20
    15c6:	95 07       	cpc	r25, r21
    15c8:	18 f0       	brcs	.+6      	; 0x15d0 <__addsf3x+0x18>
    15ca:	71 f4       	brne	.+28     	; 0x15e8 <__addsf3x+0x30>
    15cc:	9e f5       	brtc	.+102    	; 0x1634 <__addsf3x+0x7c>
    15ce:	27 c1       	rjmp	.+590    	; 0x181e <__fp_zero>
    15d0:	0e f4       	brtc	.+2      	; 0x15d4 <__addsf3x+0x1c>
    15d2:	e0 95       	com	r30
    15d4:	0b 2e       	mov	r0, r27
    15d6:	ba 2f       	mov	r27, r26
    15d8:	a0 2d       	mov	r26, r0
    15da:	0b 01       	movw	r0, r22
    15dc:	b9 01       	movw	r22, r18
    15de:	90 01       	movw	r18, r0
    15e0:	0c 01       	movw	r0, r24
    15e2:	ca 01       	movw	r24, r20
    15e4:	a0 01       	movw	r20, r0
    15e6:	11 24       	eor	r1, r1
    15e8:	ff 27       	eor	r31, r31
    15ea:	59 1b       	sub	r21, r25
    15ec:	99 f0       	breq	.+38     	; 0x1614 <__addsf3x+0x5c>
    15ee:	59 3f       	cpi	r21, 0xF9	; 249
    15f0:	50 f4       	brcc	.+20     	; 0x1606 <__addsf3x+0x4e>
    15f2:	50 3e       	cpi	r21, 0xE0	; 224
    15f4:	68 f1       	brcs	.+90     	; 0x1650 <__addsf3x+0x98>
    15f6:	1a 16       	cp	r1, r26
    15f8:	f0 40       	sbci	r31, 0x00	; 0
    15fa:	a2 2f       	mov	r26, r18
    15fc:	23 2f       	mov	r18, r19
    15fe:	34 2f       	mov	r19, r20
    1600:	44 27       	eor	r20, r20
    1602:	58 5f       	subi	r21, 0xF8	; 248
    1604:	f3 cf       	rjmp	.-26     	; 0x15ec <__addsf3x+0x34>
    1606:	46 95       	lsr	r20
    1608:	37 95       	ror	r19
    160a:	27 95       	ror	r18
    160c:	a7 95       	ror	r26
    160e:	f0 40       	sbci	r31, 0x00	; 0
    1610:	53 95       	inc	r21
    1612:	c9 f7       	brne	.-14     	; 0x1606 <__addsf3x+0x4e>
    1614:	7e f4       	brtc	.+30     	; 0x1634 <__addsf3x+0x7c>
    1616:	1f 16       	cp	r1, r31
    1618:	ba 0b       	sbc	r27, r26
    161a:	62 0b       	sbc	r22, r18
    161c:	73 0b       	sbc	r23, r19
    161e:	84 0b       	sbc	r24, r20
    1620:	ba f0       	brmi	.+46     	; 0x1650 <__addsf3x+0x98>
    1622:	91 50       	subi	r25, 0x01	; 1
    1624:	a1 f0       	breq	.+40     	; 0x164e <__addsf3x+0x96>
    1626:	ff 0f       	add	r31, r31
    1628:	bb 1f       	adc	r27, r27
    162a:	66 1f       	adc	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	88 1f       	adc	r24, r24
    1630:	c2 f7       	brpl	.-16     	; 0x1622 <__addsf3x+0x6a>
    1632:	0e c0       	rjmp	.+28     	; 0x1650 <__addsf3x+0x98>
    1634:	ba 0f       	add	r27, r26
    1636:	62 1f       	adc	r22, r18
    1638:	73 1f       	adc	r23, r19
    163a:	84 1f       	adc	r24, r20
    163c:	48 f4       	brcc	.+18     	; 0x1650 <__addsf3x+0x98>
    163e:	87 95       	ror	r24
    1640:	77 95       	ror	r23
    1642:	67 95       	ror	r22
    1644:	b7 95       	ror	r27
    1646:	f7 95       	ror	r31
    1648:	9e 3f       	cpi	r25, 0xFE	; 254
    164a:	08 f0       	brcs	.+2      	; 0x164e <__addsf3x+0x96>
    164c:	b3 cf       	rjmp	.-154    	; 0x15b4 <__addsf3+0x1e>
    164e:	93 95       	inc	r25
    1650:	88 0f       	add	r24, r24
    1652:	08 f0       	brcs	.+2      	; 0x1656 <__addsf3x+0x9e>
    1654:	99 27       	eor	r25, r25
    1656:	ee 0f       	add	r30, r30
    1658:	97 95       	ror	r25
    165a:	87 95       	ror	r24
    165c:	08 95       	ret

0000165e <__cmpsf2>:
    165e:	71 d0       	rcall	.+226    	; 0x1742 <__fp_cmp>
    1660:	08 f4       	brcc	.+2      	; 0x1664 <__cmpsf2+0x6>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	08 95       	ret

00001666 <__fixsfsi>:
    1666:	04 d0       	rcall	.+8      	; 0x1670 <__fixunssfsi>
    1668:	68 94       	set
    166a:	b1 11       	cpse	r27, r1
    166c:	d9 c0       	rjmp	.+434    	; 0x1820 <__fp_szero>
    166e:	08 95       	ret

00001670 <__fixunssfsi>:
    1670:	bc d0       	rcall	.+376    	; 0x17ea <__fp_splitA>
    1672:	88 f0       	brcs	.+34     	; 0x1696 <__fixunssfsi+0x26>
    1674:	9f 57       	subi	r25, 0x7F	; 127
    1676:	90 f0       	brcs	.+36     	; 0x169c <__fixunssfsi+0x2c>
    1678:	b9 2f       	mov	r27, r25
    167a:	99 27       	eor	r25, r25
    167c:	b7 51       	subi	r27, 0x17	; 23
    167e:	a0 f0       	brcs	.+40     	; 0x16a8 <__fixunssfsi+0x38>
    1680:	d1 f0       	breq	.+52     	; 0x16b6 <__fixunssfsi+0x46>
    1682:	66 0f       	add	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	88 1f       	adc	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	1a f0       	brmi	.+6      	; 0x1692 <__fixunssfsi+0x22>
    168c:	ba 95       	dec	r27
    168e:	c9 f7       	brne	.-14     	; 0x1682 <__fixunssfsi+0x12>
    1690:	12 c0       	rjmp	.+36     	; 0x16b6 <__fixunssfsi+0x46>
    1692:	b1 30       	cpi	r27, 0x01	; 1
    1694:	81 f0       	breq	.+32     	; 0x16b6 <__fixunssfsi+0x46>
    1696:	c3 d0       	rcall	.+390    	; 0x181e <__fp_zero>
    1698:	b1 e0       	ldi	r27, 0x01	; 1
    169a:	08 95       	ret
    169c:	c0 c0       	rjmp	.+384    	; 0x181e <__fp_zero>
    169e:	67 2f       	mov	r22, r23
    16a0:	78 2f       	mov	r23, r24
    16a2:	88 27       	eor	r24, r24
    16a4:	b8 5f       	subi	r27, 0xF8	; 248
    16a6:	39 f0       	breq	.+14     	; 0x16b6 <__fixunssfsi+0x46>
    16a8:	b9 3f       	cpi	r27, 0xF9	; 249
    16aa:	cc f3       	brlt	.-14     	; 0x169e <__fixunssfsi+0x2e>
    16ac:	86 95       	lsr	r24
    16ae:	77 95       	ror	r23
    16b0:	67 95       	ror	r22
    16b2:	b3 95       	inc	r27
    16b4:	d9 f7       	brne	.-10     	; 0x16ac <__fixunssfsi+0x3c>
    16b6:	3e f4       	brtc	.+14     	; 0x16c6 <__fixunssfsi+0x56>
    16b8:	90 95       	com	r25
    16ba:	80 95       	com	r24
    16bc:	70 95       	com	r23
    16be:	61 95       	neg	r22
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	8f 4f       	sbci	r24, 0xFF	; 255
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	08 95       	ret

000016c8 <__floatunsisf>:
    16c8:	e8 94       	clt
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <__floatsisf+0x12>

000016cc <__floatsisf>:
    16cc:	97 fb       	bst	r25, 7
    16ce:	3e f4       	brtc	.+14     	; 0x16de <__floatsisf+0x12>
    16d0:	90 95       	com	r25
    16d2:	80 95       	com	r24
    16d4:	70 95       	com	r23
    16d6:	61 95       	neg	r22
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	8f 4f       	sbci	r24, 0xFF	; 255
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	99 23       	and	r25, r25
    16e0:	a9 f0       	breq	.+42     	; 0x170c <__floatsisf+0x40>
    16e2:	f9 2f       	mov	r31, r25
    16e4:	96 e9       	ldi	r25, 0x96	; 150
    16e6:	bb 27       	eor	r27, r27
    16e8:	93 95       	inc	r25
    16ea:	f6 95       	lsr	r31
    16ec:	87 95       	ror	r24
    16ee:	77 95       	ror	r23
    16f0:	67 95       	ror	r22
    16f2:	b7 95       	ror	r27
    16f4:	f1 11       	cpse	r31, r1
    16f6:	f8 cf       	rjmp	.-16     	; 0x16e8 <__floatsisf+0x1c>
    16f8:	fa f4       	brpl	.+62     	; 0x1738 <__floatsisf+0x6c>
    16fa:	bb 0f       	add	r27, r27
    16fc:	11 f4       	brne	.+4      	; 0x1702 <__floatsisf+0x36>
    16fe:	60 ff       	sbrs	r22, 0
    1700:	1b c0       	rjmp	.+54     	; 0x1738 <__floatsisf+0x6c>
    1702:	6f 5f       	subi	r22, 0xFF	; 255
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	8f 4f       	sbci	r24, 0xFF	; 255
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	16 c0       	rjmp	.+44     	; 0x1738 <__floatsisf+0x6c>
    170c:	88 23       	and	r24, r24
    170e:	11 f0       	breq	.+4      	; 0x1714 <__floatsisf+0x48>
    1710:	96 e9       	ldi	r25, 0x96	; 150
    1712:	11 c0       	rjmp	.+34     	; 0x1736 <__floatsisf+0x6a>
    1714:	77 23       	and	r23, r23
    1716:	21 f0       	breq	.+8      	; 0x1720 <__floatsisf+0x54>
    1718:	9e e8       	ldi	r25, 0x8E	; 142
    171a:	87 2f       	mov	r24, r23
    171c:	76 2f       	mov	r23, r22
    171e:	05 c0       	rjmp	.+10     	; 0x172a <__floatsisf+0x5e>
    1720:	66 23       	and	r22, r22
    1722:	71 f0       	breq	.+28     	; 0x1740 <__floatsisf+0x74>
    1724:	96 e8       	ldi	r25, 0x86	; 134
    1726:	86 2f       	mov	r24, r22
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	2a f0       	brmi	.+10     	; 0x1738 <__floatsisf+0x6c>
    172e:	9a 95       	dec	r25
    1730:	66 0f       	add	r22, r22
    1732:	77 1f       	adc	r23, r23
    1734:	88 1f       	adc	r24, r24
    1736:	da f7       	brpl	.-10     	; 0x172e <__floatsisf+0x62>
    1738:	88 0f       	add	r24, r24
    173a:	96 95       	lsr	r25
    173c:	87 95       	ror	r24
    173e:	97 f9       	bld	r25, 7
    1740:	08 95       	ret

00001742 <__fp_cmp>:
    1742:	99 0f       	add	r25, r25
    1744:	00 08       	sbc	r0, r0
    1746:	55 0f       	add	r21, r21
    1748:	aa 0b       	sbc	r26, r26
    174a:	e0 e8       	ldi	r30, 0x80	; 128
    174c:	fe ef       	ldi	r31, 0xFE	; 254
    174e:	16 16       	cp	r1, r22
    1750:	17 06       	cpc	r1, r23
    1752:	e8 07       	cpc	r30, r24
    1754:	f9 07       	cpc	r31, r25
    1756:	c0 f0       	brcs	.+48     	; 0x1788 <__fp_cmp+0x46>
    1758:	12 16       	cp	r1, r18
    175a:	13 06       	cpc	r1, r19
    175c:	e4 07       	cpc	r30, r20
    175e:	f5 07       	cpc	r31, r21
    1760:	98 f0       	brcs	.+38     	; 0x1788 <__fp_cmp+0x46>
    1762:	62 1b       	sub	r22, r18
    1764:	73 0b       	sbc	r23, r19
    1766:	84 0b       	sbc	r24, r20
    1768:	95 0b       	sbc	r25, r21
    176a:	39 f4       	brne	.+14     	; 0x177a <__fp_cmp+0x38>
    176c:	0a 26       	eor	r0, r26
    176e:	61 f0       	breq	.+24     	; 0x1788 <__fp_cmp+0x46>
    1770:	23 2b       	or	r18, r19
    1772:	24 2b       	or	r18, r20
    1774:	25 2b       	or	r18, r21
    1776:	21 f4       	brne	.+8      	; 0x1780 <__fp_cmp+0x3e>
    1778:	08 95       	ret
    177a:	0a 26       	eor	r0, r26
    177c:	09 f4       	brne	.+2      	; 0x1780 <__fp_cmp+0x3e>
    177e:	a1 40       	sbci	r26, 0x01	; 1
    1780:	a6 95       	lsr	r26
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	81 1d       	adc	r24, r1
    1786:	81 1d       	adc	r24, r1
    1788:	08 95       	ret

0000178a <__fp_inf>:
    178a:	97 f9       	bld	r25, 7
    178c:	9f 67       	ori	r25, 0x7F	; 127
    178e:	80 e8       	ldi	r24, 0x80	; 128
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	08 95       	ret

00001796 <__fp_nan>:
    1796:	9f ef       	ldi	r25, 0xFF	; 255
    1798:	80 ec       	ldi	r24, 0xC0	; 192
    179a:	08 95       	ret

0000179c <__fp_pscA>:
    179c:	00 24       	eor	r0, r0
    179e:	0a 94       	dec	r0
    17a0:	16 16       	cp	r1, r22
    17a2:	17 06       	cpc	r1, r23
    17a4:	18 06       	cpc	r1, r24
    17a6:	09 06       	cpc	r0, r25
    17a8:	08 95       	ret

000017aa <__fp_pscB>:
    17aa:	00 24       	eor	r0, r0
    17ac:	0a 94       	dec	r0
    17ae:	12 16       	cp	r1, r18
    17b0:	13 06       	cpc	r1, r19
    17b2:	14 06       	cpc	r1, r20
    17b4:	05 06       	cpc	r0, r21
    17b6:	08 95       	ret

000017b8 <__fp_round>:
    17b8:	09 2e       	mov	r0, r25
    17ba:	03 94       	inc	r0
    17bc:	00 0c       	add	r0, r0
    17be:	11 f4       	brne	.+4      	; 0x17c4 <__fp_round+0xc>
    17c0:	88 23       	and	r24, r24
    17c2:	52 f0       	brmi	.+20     	; 0x17d8 <__fp_round+0x20>
    17c4:	bb 0f       	add	r27, r27
    17c6:	40 f4       	brcc	.+16     	; 0x17d8 <__fp_round+0x20>
    17c8:	bf 2b       	or	r27, r31
    17ca:	11 f4       	brne	.+4      	; 0x17d0 <__fp_round+0x18>
    17cc:	60 ff       	sbrs	r22, 0
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <__fp_round+0x20>
    17d0:	6f 5f       	subi	r22, 0xFF	; 255
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	8f 4f       	sbci	r24, 0xFF	; 255
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	08 95       	ret

000017da <__fp_split3>:
    17da:	57 fd       	sbrc	r21, 7
    17dc:	90 58       	subi	r25, 0x80	; 128
    17de:	44 0f       	add	r20, r20
    17e0:	55 1f       	adc	r21, r21
    17e2:	59 f0       	breq	.+22     	; 0x17fa <__fp_splitA+0x10>
    17e4:	5f 3f       	cpi	r21, 0xFF	; 255
    17e6:	71 f0       	breq	.+28     	; 0x1804 <__fp_splitA+0x1a>
    17e8:	47 95       	ror	r20

000017ea <__fp_splitA>:
    17ea:	88 0f       	add	r24, r24
    17ec:	97 fb       	bst	r25, 7
    17ee:	99 1f       	adc	r25, r25
    17f0:	61 f0       	breq	.+24     	; 0x180a <__fp_splitA+0x20>
    17f2:	9f 3f       	cpi	r25, 0xFF	; 255
    17f4:	79 f0       	breq	.+30     	; 0x1814 <__fp_splitA+0x2a>
    17f6:	87 95       	ror	r24
    17f8:	08 95       	ret
    17fa:	12 16       	cp	r1, r18
    17fc:	13 06       	cpc	r1, r19
    17fe:	14 06       	cpc	r1, r20
    1800:	55 1f       	adc	r21, r21
    1802:	f2 cf       	rjmp	.-28     	; 0x17e8 <__fp_split3+0xe>
    1804:	46 95       	lsr	r20
    1806:	f1 df       	rcall	.-30     	; 0x17ea <__fp_splitA>
    1808:	08 c0       	rjmp	.+16     	; 0x181a <__fp_splitA+0x30>
    180a:	16 16       	cp	r1, r22
    180c:	17 06       	cpc	r1, r23
    180e:	18 06       	cpc	r1, r24
    1810:	99 1f       	adc	r25, r25
    1812:	f1 cf       	rjmp	.-30     	; 0x17f6 <__fp_splitA+0xc>
    1814:	86 95       	lsr	r24
    1816:	71 05       	cpc	r23, r1
    1818:	61 05       	cpc	r22, r1
    181a:	08 94       	sec
    181c:	08 95       	ret

0000181e <__fp_zero>:
    181e:	e8 94       	clt

00001820 <__fp_szero>:
    1820:	bb 27       	eor	r27, r27
    1822:	66 27       	eor	r22, r22
    1824:	77 27       	eor	r23, r23
    1826:	cb 01       	movw	r24, r22
    1828:	97 f9       	bld	r25, 7
    182a:	08 95       	ret

0000182c <__mulsf3>:
    182c:	0b d0       	rcall	.+22     	; 0x1844 <__mulsf3x>
    182e:	c4 cf       	rjmp	.-120    	; 0x17b8 <__fp_round>
    1830:	b5 df       	rcall	.-150    	; 0x179c <__fp_pscA>
    1832:	28 f0       	brcs	.+10     	; 0x183e <__mulsf3+0x12>
    1834:	ba df       	rcall	.-140    	; 0x17aa <__fp_pscB>
    1836:	18 f0       	brcs	.+6      	; 0x183e <__mulsf3+0x12>
    1838:	95 23       	and	r25, r21
    183a:	09 f0       	breq	.+2      	; 0x183e <__mulsf3+0x12>
    183c:	a6 cf       	rjmp	.-180    	; 0x178a <__fp_inf>
    183e:	ab cf       	rjmp	.-170    	; 0x1796 <__fp_nan>
    1840:	11 24       	eor	r1, r1
    1842:	ee cf       	rjmp	.-36     	; 0x1820 <__fp_szero>

00001844 <__mulsf3x>:
    1844:	ca df       	rcall	.-108    	; 0x17da <__fp_split3>
    1846:	a0 f3       	brcs	.-24     	; 0x1830 <__mulsf3+0x4>

00001848 <__mulsf3_pse>:
    1848:	95 9f       	mul	r25, r21
    184a:	d1 f3       	breq	.-12     	; 0x1840 <__mulsf3+0x14>
    184c:	95 0f       	add	r25, r21
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	55 1f       	adc	r21, r21
    1852:	62 9f       	mul	r22, r18
    1854:	f0 01       	movw	r30, r0
    1856:	72 9f       	mul	r23, r18
    1858:	bb 27       	eor	r27, r27
    185a:	f0 0d       	add	r31, r0
    185c:	b1 1d       	adc	r27, r1
    185e:	63 9f       	mul	r22, r19
    1860:	aa 27       	eor	r26, r26
    1862:	f0 0d       	add	r31, r0
    1864:	b1 1d       	adc	r27, r1
    1866:	aa 1f       	adc	r26, r26
    1868:	64 9f       	mul	r22, r20
    186a:	66 27       	eor	r22, r22
    186c:	b0 0d       	add	r27, r0
    186e:	a1 1d       	adc	r26, r1
    1870:	66 1f       	adc	r22, r22
    1872:	82 9f       	mul	r24, r18
    1874:	22 27       	eor	r18, r18
    1876:	b0 0d       	add	r27, r0
    1878:	a1 1d       	adc	r26, r1
    187a:	62 1f       	adc	r22, r18
    187c:	73 9f       	mul	r23, r19
    187e:	b0 0d       	add	r27, r0
    1880:	a1 1d       	adc	r26, r1
    1882:	62 1f       	adc	r22, r18
    1884:	83 9f       	mul	r24, r19
    1886:	a0 0d       	add	r26, r0
    1888:	61 1d       	adc	r22, r1
    188a:	22 1f       	adc	r18, r18
    188c:	74 9f       	mul	r23, r20
    188e:	33 27       	eor	r19, r19
    1890:	a0 0d       	add	r26, r0
    1892:	61 1d       	adc	r22, r1
    1894:	23 1f       	adc	r18, r19
    1896:	84 9f       	mul	r24, r20
    1898:	60 0d       	add	r22, r0
    189a:	21 1d       	adc	r18, r1
    189c:	82 2f       	mov	r24, r18
    189e:	76 2f       	mov	r23, r22
    18a0:	6a 2f       	mov	r22, r26
    18a2:	11 24       	eor	r1, r1
    18a4:	9f 57       	subi	r25, 0x7F	; 127
    18a6:	50 40       	sbci	r21, 0x00	; 0
    18a8:	8a f0       	brmi	.+34     	; 0x18cc <__mulsf3_pse+0x84>
    18aa:	e1 f0       	breq	.+56     	; 0x18e4 <__mulsf3_pse+0x9c>
    18ac:	88 23       	and	r24, r24
    18ae:	4a f0       	brmi	.+18     	; 0x18c2 <__mulsf3_pse+0x7a>
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	bb 1f       	adc	r27, r27
    18b6:	66 1f       	adc	r22, r22
    18b8:	77 1f       	adc	r23, r23
    18ba:	88 1f       	adc	r24, r24
    18bc:	91 50       	subi	r25, 0x01	; 1
    18be:	50 40       	sbci	r21, 0x00	; 0
    18c0:	a9 f7       	brne	.-22     	; 0x18ac <__mulsf3_pse+0x64>
    18c2:	9e 3f       	cpi	r25, 0xFE	; 254
    18c4:	51 05       	cpc	r21, r1
    18c6:	70 f0       	brcs	.+28     	; 0x18e4 <__mulsf3_pse+0x9c>
    18c8:	60 cf       	rjmp	.-320    	; 0x178a <__fp_inf>
    18ca:	aa cf       	rjmp	.-172    	; 0x1820 <__fp_szero>
    18cc:	5f 3f       	cpi	r21, 0xFF	; 255
    18ce:	ec f3       	brlt	.-6      	; 0x18ca <__mulsf3_pse+0x82>
    18d0:	98 3e       	cpi	r25, 0xE8	; 232
    18d2:	dc f3       	brlt	.-10     	; 0x18ca <__mulsf3_pse+0x82>
    18d4:	86 95       	lsr	r24
    18d6:	77 95       	ror	r23
    18d8:	67 95       	ror	r22
    18da:	b7 95       	ror	r27
    18dc:	f7 95       	ror	r31
    18de:	e7 95       	ror	r30
    18e0:	9f 5f       	subi	r25, 0xFF	; 255
    18e2:	c1 f7       	brne	.-16     	; 0x18d4 <__mulsf3_pse+0x8c>
    18e4:	fe 2b       	or	r31, r30
    18e6:	88 0f       	add	r24, r24
    18e8:	91 1d       	adc	r25, r1
    18ea:	96 95       	lsr	r25
    18ec:	87 95       	ror	r24
    18ee:	97 f9       	bld	r25, 7
    18f0:	08 95       	ret

000018f2 <pow>:
    18f2:	fa 01       	movw	r30, r20
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	30 96       	adiw	r30, 0x00	; 0
    18fa:	21 05       	cpc	r18, r1
    18fc:	31 05       	cpc	r19, r1
    18fe:	99 f1       	breq	.+102    	; 0x1966 <pow+0x74>
    1900:	61 15       	cp	r22, r1
    1902:	71 05       	cpc	r23, r1
    1904:	61 f4       	brne	.+24     	; 0x191e <pow+0x2c>
    1906:	80 38       	cpi	r24, 0x80	; 128
    1908:	bf e3       	ldi	r27, 0x3F	; 63
    190a:	9b 07       	cpc	r25, r27
    190c:	49 f1       	breq	.+82     	; 0x1960 <pow+0x6e>
    190e:	68 94       	set
    1910:	90 38       	cpi	r25, 0x80	; 128
    1912:	81 05       	cpc	r24, r1
    1914:	61 f0       	breq	.+24     	; 0x192e <pow+0x3c>
    1916:	80 38       	cpi	r24, 0x80	; 128
    1918:	bf ef       	ldi	r27, 0xFF	; 255
    191a:	9b 07       	cpc	r25, r27
    191c:	41 f0       	breq	.+16     	; 0x192e <pow+0x3c>
    191e:	99 23       	and	r25, r25
    1920:	42 f5       	brpl	.+80     	; 0x1972 <pow+0x80>
    1922:	ff 3f       	cpi	r31, 0xFF	; 255
    1924:	e1 05       	cpc	r30, r1
    1926:	31 05       	cpc	r19, r1
    1928:	21 05       	cpc	r18, r1
    192a:	11 f1       	breq	.+68     	; 0x1970 <pow+0x7e>
    192c:	e8 94       	clt
    192e:	08 94       	sec
    1930:	e7 95       	ror	r30
    1932:	d9 01       	movw	r26, r18
    1934:	aa 23       	and	r26, r26
    1936:	29 f4       	brne	.+10     	; 0x1942 <pow+0x50>
    1938:	ab 2f       	mov	r26, r27
    193a:	be 2f       	mov	r27, r30
    193c:	f8 5f       	subi	r31, 0xF8	; 248
    193e:	d0 f3       	brcs	.-12     	; 0x1934 <pow+0x42>
    1940:	10 c0       	rjmp	.+32     	; 0x1962 <pow+0x70>
    1942:	ff 5f       	subi	r31, 0xFF	; 255
    1944:	70 f4       	brcc	.+28     	; 0x1962 <pow+0x70>
    1946:	a6 95       	lsr	r26
    1948:	e0 f7       	brcc	.-8      	; 0x1942 <pow+0x50>
    194a:	f7 39       	cpi	r31, 0x97	; 151
    194c:	50 f0       	brcs	.+20     	; 0x1962 <pow+0x70>
    194e:	19 f0       	breq	.+6      	; 0x1956 <pow+0x64>
    1950:	ff 3a       	cpi	r31, 0xAF	; 175
    1952:	38 f4       	brcc	.+14     	; 0x1962 <pow+0x70>
    1954:	9f 77       	andi	r25, 0x7F	; 127
    1956:	9f 93       	push	r25
    1958:	0c d0       	rcall	.+24     	; 0x1972 <pow+0x80>
    195a:	0f 90       	pop	r0
    195c:	07 fc       	sbrc	r0, 7
    195e:	90 58       	subi	r25, 0x80	; 128
    1960:	08 95       	ret
    1962:	3e f0       	brts	.+14     	; 0x1972 <pow+0x80>
    1964:	18 cf       	rjmp	.-464    	; 0x1796 <__fp_nan>
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	80 e8       	ldi	r24, 0x80	; 128
    196c:	9f e3       	ldi	r25, 0x3F	; 63
    196e:	08 95       	ret
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	9f 77       	andi	r25, 0x7F	; 127
    1974:	5f 93       	push	r21
    1976:	4f 93       	push	r20
    1978:	3f 93       	push	r19
    197a:	2f 93       	push	r18
    197c:	9e d0       	rcall	.+316    	; 0x1aba <log>
    197e:	2f 91       	pop	r18
    1980:	3f 91       	pop	r19
    1982:	4f 91       	pop	r20
    1984:	5f 91       	pop	r21
    1986:	52 df       	rcall	.-348    	; 0x182c <__mulsf3>
    1988:	05 c0       	rjmp	.+10     	; 0x1994 <exp>
    198a:	19 f4       	brne	.+6      	; 0x1992 <pow+0xa0>
    198c:	0e f0       	brts	.+2      	; 0x1990 <pow+0x9e>
    198e:	fd ce       	rjmp	.-518    	; 0x178a <__fp_inf>
    1990:	46 cf       	rjmp	.-372    	; 0x181e <__fp_zero>
    1992:	01 cf       	rjmp	.-510    	; 0x1796 <__fp_nan>

00001994 <exp>:
    1994:	2a df       	rcall	.-428    	; 0x17ea <__fp_splitA>
    1996:	c8 f3       	brcs	.-14     	; 0x198a <pow+0x98>
    1998:	96 38       	cpi	r25, 0x86	; 134
    199a:	c0 f7       	brcc	.-16     	; 0x198c <pow+0x9a>
    199c:	07 f8       	bld	r0, 7
    199e:	0f 92       	push	r0
    19a0:	e8 94       	clt
    19a2:	2b e3       	ldi	r18, 0x3B	; 59
    19a4:	3a ea       	ldi	r19, 0xAA	; 170
    19a6:	48 eb       	ldi	r20, 0xB8	; 184
    19a8:	5f e7       	ldi	r21, 0x7F	; 127
    19aa:	4e df       	rcall	.-356    	; 0x1848 <__mulsf3_pse>
    19ac:	0f 92       	push	r0
    19ae:	0f 92       	push	r0
    19b0:	0f 92       	push	r0
    19b2:	4d b7       	in	r20, 0x3d	; 61
    19b4:	5e b7       	in	r21, 0x3e	; 62
    19b6:	0f 92       	push	r0
    19b8:	c0 d0       	rcall	.+384    	; 0x1b3a <modf>
    19ba:	e4 ee       	ldi	r30, 0xE4	; 228
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	16 d0       	rcall	.+44     	; 0x19ec <__fp_powser>
    19c0:	4f 91       	pop	r20
    19c2:	5f 91       	pop	r21
    19c4:	ef 91       	pop	r30
    19c6:	ff 91       	pop	r31
    19c8:	e5 95       	asr	r30
    19ca:	ee 1f       	adc	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	49 f0       	breq	.+18     	; 0x19e2 <exp+0x4e>
    19d0:	fe 57       	subi	r31, 0x7E	; 126
    19d2:	e0 68       	ori	r30, 0x80	; 128
    19d4:	44 27       	eor	r20, r20
    19d6:	ee 0f       	add	r30, r30
    19d8:	44 1f       	adc	r20, r20
    19da:	fa 95       	dec	r31
    19dc:	e1 f7       	brne	.-8      	; 0x19d6 <exp+0x42>
    19de:	41 95       	neg	r20
    19e0:	55 0b       	sbc	r21, r21
    19e2:	32 d0       	rcall	.+100    	; 0x1a48 <ldexp>
    19e4:	0f 90       	pop	r0
    19e6:	07 fe       	sbrs	r0, 7
    19e8:	26 c0       	rjmp	.+76     	; 0x1a36 <inverse>
    19ea:	08 95       	ret

000019ec <__fp_powser>:
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	1f 93       	push	r17
    19f2:	0f 93       	push	r16
    19f4:	ff 92       	push	r15
    19f6:	ef 92       	push	r14
    19f8:	df 92       	push	r13
    19fa:	7b 01       	movw	r14, r22
    19fc:	8c 01       	movw	r16, r24
    19fe:	68 94       	set
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <__fp_powser+0x20>
    1a02:	da 2e       	mov	r13, r26
    1a04:	ef 01       	movw	r28, r30
    1a06:	1e df       	rcall	.-452    	; 0x1844 <__mulsf3x>
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e8 94       	clt
    1a0c:	a5 91       	lpm	r26, Z+
    1a0e:	25 91       	lpm	r18, Z+
    1a10:	35 91       	lpm	r19, Z+
    1a12:	45 91       	lpm	r20, Z+
    1a14:	55 91       	lpm	r21, Z+
    1a16:	ae f3       	brts	.-22     	; 0x1a02 <__fp_powser+0x16>
    1a18:	ef 01       	movw	r28, r30
    1a1a:	ce dd       	rcall	.-1124   	; 0x15b8 <__addsf3x>
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	97 01       	movw	r18, r14
    1a20:	a8 01       	movw	r20, r16
    1a22:	da 94       	dec	r13
    1a24:	79 f7       	brne	.-34     	; 0x1a04 <__fp_powser+0x18>
    1a26:	df 90       	pop	r13
    1a28:	ef 90       	pop	r14
    1a2a:	ff 90       	pop	r15
    1a2c:	0f 91       	pop	r16
    1a2e:	1f 91       	pop	r17
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <inverse>:
    1a36:	9b 01       	movw	r18, r22
    1a38:	ac 01       	movw	r20, r24
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	80 e8       	ldi	r24, 0x80	; 128
    1a40:	9f e3       	ldi	r25, 0x3F	; 63
    1a42:	ae c0       	rjmp	.+348    	; 0x1ba0 <__divsf3>
    1a44:	a2 ce       	rjmp	.-700    	; 0x178a <__fp_inf>
    1a46:	14 c1       	rjmp	.+552    	; 0x1c70 <__fp_mpack>

00001a48 <ldexp>:
    1a48:	d0 de       	rcall	.-608    	; 0x17ea <__fp_splitA>
    1a4a:	e8 f3       	brcs	.-6      	; 0x1a46 <inverse+0x10>
    1a4c:	99 23       	and	r25, r25
    1a4e:	d9 f3       	breq	.-10     	; 0x1a46 <inverse+0x10>
    1a50:	94 0f       	add	r25, r20
    1a52:	51 1d       	adc	r21, r1
    1a54:	bb f3       	brvs	.-18     	; 0x1a44 <inverse+0xe>
    1a56:	91 50       	subi	r25, 0x01	; 1
    1a58:	50 40       	sbci	r21, 0x00	; 0
    1a5a:	94 f0       	brlt	.+36     	; 0x1a80 <ldexp+0x38>
    1a5c:	59 f0       	breq	.+22     	; 0x1a74 <ldexp+0x2c>
    1a5e:	88 23       	and	r24, r24
    1a60:	32 f0       	brmi	.+12     	; 0x1a6e <ldexp+0x26>
    1a62:	66 0f       	add	r22, r22
    1a64:	77 1f       	adc	r23, r23
    1a66:	88 1f       	adc	r24, r24
    1a68:	91 50       	subi	r25, 0x01	; 1
    1a6a:	50 40       	sbci	r21, 0x00	; 0
    1a6c:	c1 f7       	brne	.-16     	; 0x1a5e <ldexp+0x16>
    1a6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a70:	51 05       	cpc	r21, r1
    1a72:	44 f7       	brge	.-48     	; 0x1a44 <inverse+0xe>
    1a74:	88 0f       	add	r24, r24
    1a76:	91 1d       	adc	r25, r1
    1a78:	96 95       	lsr	r25
    1a7a:	87 95       	ror	r24
    1a7c:	97 f9       	bld	r25, 7
    1a7e:	08 95       	ret
    1a80:	5f 3f       	cpi	r21, 0xFF	; 255
    1a82:	ac f0       	brlt	.+42     	; 0x1aae <ldexp+0x66>
    1a84:	98 3e       	cpi	r25, 0xE8	; 232
    1a86:	9c f0       	brlt	.+38     	; 0x1aae <ldexp+0x66>
    1a88:	bb 27       	eor	r27, r27
    1a8a:	86 95       	lsr	r24
    1a8c:	77 95       	ror	r23
    1a8e:	67 95       	ror	r22
    1a90:	b7 95       	ror	r27
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <ldexp+0x4e>
    1a94:	b1 60       	ori	r27, 0x01	; 1
    1a96:	93 95       	inc	r25
    1a98:	c1 f7       	brne	.-16     	; 0x1a8a <ldexp+0x42>
    1a9a:	bb 0f       	add	r27, r27
    1a9c:	58 f7       	brcc	.-42     	; 0x1a74 <ldexp+0x2c>
    1a9e:	11 f4       	brne	.+4      	; 0x1aa4 <ldexp+0x5c>
    1aa0:	60 ff       	sbrs	r22, 0
    1aa2:	e8 cf       	rjmp	.-48     	; 0x1a74 <ldexp+0x2c>
    1aa4:	6f 5f       	subi	r22, 0xFF	; 255
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	e3 cf       	rjmp	.-58     	; 0x1a74 <ldexp+0x2c>
    1aae:	b8 ce       	rjmp	.-656    	; 0x1820 <__fp_szero>
    1ab0:	0e f0       	brts	.+2      	; 0x1ab4 <ldexp+0x6c>
    1ab2:	de c0       	rjmp	.+444    	; 0x1c70 <__fp_mpack>
    1ab4:	70 ce       	rjmp	.-800    	; 0x1796 <__fp_nan>
    1ab6:	68 94       	set
    1ab8:	68 ce       	rjmp	.-816    	; 0x178a <__fp_inf>

00001aba <log>:
    1aba:	97 de       	rcall	.-722    	; 0x17ea <__fp_splitA>
    1abc:	c8 f3       	brcs	.-14     	; 0x1ab0 <ldexp+0x68>
    1abe:	99 23       	and	r25, r25
    1ac0:	d1 f3       	breq	.-12     	; 0x1ab6 <ldexp+0x6e>
    1ac2:	c6 f3       	brts	.-16     	; 0x1ab4 <ldexp+0x6c>
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	1f 93       	push	r17
    1aca:	0f 93       	push	r16
    1acc:	ff 92       	push	r15
    1ace:	c9 2f       	mov	r28, r25
    1ad0:	dd 27       	eor	r29, r29
    1ad2:	88 23       	and	r24, r24
    1ad4:	2a f0       	brmi	.+10     	; 0x1ae0 <log+0x26>
    1ad6:	21 97       	sbiw	r28, 0x01	; 1
    1ad8:	66 0f       	add	r22, r22
    1ada:	77 1f       	adc	r23, r23
    1adc:	88 1f       	adc	r24, r24
    1ade:	da f7       	brpl	.-10     	; 0x1ad6 <log+0x1c>
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f eb       	ldi	r21, 0xBF	; 191
    1ae8:	9f e3       	ldi	r25, 0x3F	; 63
    1aea:	88 39       	cpi	r24, 0x98	; 152
    1aec:	20 f0       	brcs	.+8      	; 0x1af6 <log+0x3c>
    1aee:	80 3e       	cpi	r24, 0xE0	; 224
    1af0:	30 f0       	brcs	.+12     	; 0x1afe <log+0x44>
    1af2:	21 96       	adiw	r28, 0x01	; 1
    1af4:	8f 77       	andi	r24, 0x7F	; 127
    1af6:	4f dd       	rcall	.-1378   	; 0x1596 <__addsf3>
    1af8:	ec e0       	ldi	r30, 0x0C	; 12
    1afa:	f1 e0       	ldi	r31, 0x01	; 1
    1afc:	03 c0       	rjmp	.+6      	; 0x1b04 <log+0x4a>
    1afe:	4b dd       	rcall	.-1386   	; 0x1596 <__addsf3>
    1b00:	e9 e3       	ldi	r30, 0x39	; 57
    1b02:	f1 e0       	ldi	r31, 0x01	; 1
    1b04:	73 df       	rcall	.-282    	; 0x19ec <__fp_powser>
    1b06:	8b 01       	movw	r16, r22
    1b08:	be 01       	movw	r22, r28
    1b0a:	ec 01       	movw	r28, r24
    1b0c:	fb 2e       	mov	r15, r27
    1b0e:	6f 57       	subi	r22, 0x7F	; 127
    1b10:	71 09       	sbc	r23, r1
    1b12:	75 95       	asr	r23
    1b14:	77 1f       	adc	r23, r23
    1b16:	88 0b       	sbc	r24, r24
    1b18:	99 0b       	sbc	r25, r25
    1b1a:	d8 dd       	rcall	.-1104   	; 0x16cc <__floatsisf>
    1b1c:	28 e1       	ldi	r18, 0x18	; 24
    1b1e:	32 e7       	ldi	r19, 0x72	; 114
    1b20:	41 e3       	ldi	r20, 0x31	; 49
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	8f de       	rcall	.-738    	; 0x1844 <__mulsf3x>
    1b26:	af 2d       	mov	r26, r15
    1b28:	98 01       	movw	r18, r16
    1b2a:	ae 01       	movw	r20, r28
    1b2c:	ff 90       	pop	r15
    1b2e:	0f 91       	pop	r16
    1b30:	1f 91       	pop	r17
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	40 dd       	rcall	.-1408   	; 0x15b8 <__addsf3x>
    1b38:	3f ce       	rjmp	.-898    	; 0x17b8 <__fp_round>

00001b3a <modf>:
    1b3a:	fa 01       	movw	r30, r20
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	aa 0f       	add	r26, r26
    1b40:	bb 1f       	adc	r27, r27
    1b42:	9b 01       	movw	r18, r22
    1b44:	ac 01       	movw	r20, r24
    1b46:	bf 57       	subi	r27, 0x7F	; 127
    1b48:	28 f4       	brcc	.+10     	; 0x1b54 <modf+0x1a>
    1b4a:	22 27       	eor	r18, r18
    1b4c:	33 27       	eor	r19, r19
    1b4e:	44 27       	eor	r20, r20
    1b50:	50 78       	andi	r21, 0x80	; 128
    1b52:	1f c0       	rjmp	.+62     	; 0x1b92 <modf+0x58>
    1b54:	b7 51       	subi	r27, 0x17	; 23
    1b56:	88 f4       	brcc	.+34     	; 0x1b7a <modf+0x40>
    1b58:	ab 2f       	mov	r26, r27
    1b5a:	00 24       	eor	r0, r0
    1b5c:	46 95       	lsr	r20
    1b5e:	37 95       	ror	r19
    1b60:	27 95       	ror	r18
    1b62:	01 1c       	adc	r0, r1
    1b64:	a3 95       	inc	r26
    1b66:	d2 f3       	brmi	.-12     	; 0x1b5c <modf+0x22>
    1b68:	00 20       	and	r0, r0
    1b6a:	69 f0       	breq	.+26     	; 0x1b86 <modf+0x4c>
    1b6c:	22 0f       	add	r18, r18
    1b6e:	33 1f       	adc	r19, r19
    1b70:	44 1f       	adc	r20, r20
    1b72:	b3 95       	inc	r27
    1b74:	da f3       	brmi	.-10     	; 0x1b6c <modf+0x32>
    1b76:	0d d0       	rcall	.+26     	; 0x1b92 <modf+0x58>
    1b78:	0d cd       	rjmp	.-1510   	; 0x1594 <__subsf3>
    1b7a:	61 30       	cpi	r22, 0x01	; 1
    1b7c:	71 05       	cpc	r23, r1
    1b7e:	a0 e8       	ldi	r26, 0x80	; 128
    1b80:	8a 07       	cpc	r24, r26
    1b82:	b9 46       	sbci	r27, 0x69	; 105
    1b84:	30 f4       	brcc	.+12     	; 0x1b92 <modf+0x58>
    1b86:	9b 01       	movw	r18, r22
    1b88:	ac 01       	movw	r20, r24
    1b8a:	66 27       	eor	r22, r22
    1b8c:	77 27       	eor	r23, r23
    1b8e:	88 27       	eor	r24, r24
    1b90:	90 78       	andi	r25, 0x80	; 128
    1b92:	30 96       	adiw	r30, 0x00	; 0
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <modf+0x64>
    1b96:	20 83       	st	Z, r18
    1b98:	31 83       	std	Z+1, r19	; 0x01
    1b9a:	42 83       	std	Z+2, r20	; 0x02
    1b9c:	53 83       	std	Z+3, r21	; 0x03
    1b9e:	08 95       	ret

00001ba0 <__divsf3>:
    1ba0:	0c d0       	rcall	.+24     	; 0x1bba <__divsf3x>
    1ba2:	0a ce       	rjmp	.-1004   	; 0x17b8 <__fp_round>
    1ba4:	02 de       	rcall	.-1020   	; 0x17aa <__fp_pscB>
    1ba6:	40 f0       	brcs	.+16     	; 0x1bb8 <__divsf3+0x18>
    1ba8:	f9 dd       	rcall	.-1038   	; 0x179c <__fp_pscA>
    1baa:	30 f0       	brcs	.+12     	; 0x1bb8 <__divsf3+0x18>
    1bac:	21 f4       	brne	.+8      	; 0x1bb6 <__divsf3+0x16>
    1bae:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb0:	19 f0       	breq	.+6      	; 0x1bb8 <__divsf3+0x18>
    1bb2:	eb cd       	rjmp	.-1066   	; 0x178a <__fp_inf>
    1bb4:	51 11       	cpse	r21, r1
    1bb6:	34 ce       	rjmp	.-920    	; 0x1820 <__fp_szero>
    1bb8:	ee cd       	rjmp	.-1060   	; 0x1796 <__fp_nan>

00001bba <__divsf3x>:
    1bba:	0f de       	rcall	.-994    	; 0x17da <__fp_split3>
    1bbc:	98 f3       	brcs	.-26     	; 0x1ba4 <__divsf3+0x4>

00001bbe <__divsf3_pse>:
    1bbe:	99 23       	and	r25, r25
    1bc0:	c9 f3       	breq	.-14     	; 0x1bb4 <__divsf3+0x14>
    1bc2:	55 23       	and	r21, r21
    1bc4:	b1 f3       	breq	.-20     	; 0x1bb2 <__divsf3+0x12>
    1bc6:	95 1b       	sub	r25, r21
    1bc8:	55 0b       	sbc	r21, r21
    1bca:	bb 27       	eor	r27, r27
    1bcc:	aa 27       	eor	r26, r26
    1bce:	62 17       	cp	r22, r18
    1bd0:	73 07       	cpc	r23, r19
    1bd2:	84 07       	cpc	r24, r20
    1bd4:	38 f0       	brcs	.+14     	; 0x1be4 <__divsf3_pse+0x26>
    1bd6:	9f 5f       	subi	r25, 0xFF	; 255
    1bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bda:	22 0f       	add	r18, r18
    1bdc:	33 1f       	adc	r19, r19
    1bde:	44 1f       	adc	r20, r20
    1be0:	aa 1f       	adc	r26, r26
    1be2:	a9 f3       	breq	.-22     	; 0x1bce <__divsf3_pse+0x10>
    1be4:	33 d0       	rcall	.+102    	; 0x1c4c <__divsf3_pse+0x8e>
    1be6:	0e 2e       	mov	r0, r30
    1be8:	3a f0       	brmi	.+14     	; 0x1bf8 <__divsf3_pse+0x3a>
    1bea:	e0 e8       	ldi	r30, 0x80	; 128
    1bec:	30 d0       	rcall	.+96     	; 0x1c4e <__divsf3_pse+0x90>
    1bee:	91 50       	subi	r25, 0x01	; 1
    1bf0:	50 40       	sbci	r21, 0x00	; 0
    1bf2:	e6 95       	lsr	r30
    1bf4:	00 1c       	adc	r0, r0
    1bf6:	ca f7       	brpl	.-14     	; 0x1bea <__divsf3_pse+0x2c>
    1bf8:	29 d0       	rcall	.+82     	; 0x1c4c <__divsf3_pse+0x8e>
    1bfa:	fe 2f       	mov	r31, r30
    1bfc:	27 d0       	rcall	.+78     	; 0x1c4c <__divsf3_pse+0x8e>
    1bfe:	66 0f       	add	r22, r22
    1c00:	77 1f       	adc	r23, r23
    1c02:	88 1f       	adc	r24, r24
    1c04:	bb 1f       	adc	r27, r27
    1c06:	26 17       	cp	r18, r22
    1c08:	37 07       	cpc	r19, r23
    1c0a:	48 07       	cpc	r20, r24
    1c0c:	ab 07       	cpc	r26, r27
    1c0e:	b0 e8       	ldi	r27, 0x80	; 128
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <__divsf3_pse+0x56>
    1c12:	bb 0b       	sbc	r27, r27
    1c14:	80 2d       	mov	r24, r0
    1c16:	bf 01       	movw	r22, r30
    1c18:	ff 27       	eor	r31, r31
    1c1a:	93 58       	subi	r25, 0x83	; 131
    1c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1e:	2a f0       	brmi	.+10     	; 0x1c2a <__divsf3_pse+0x6c>
    1c20:	9e 3f       	cpi	r25, 0xFE	; 254
    1c22:	51 05       	cpc	r21, r1
    1c24:	68 f0       	brcs	.+26     	; 0x1c40 <__divsf3_pse+0x82>
    1c26:	b1 cd       	rjmp	.-1182   	; 0x178a <__fp_inf>
    1c28:	fb cd       	rjmp	.-1034   	; 0x1820 <__fp_szero>
    1c2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c2c:	ec f3       	brlt	.-6      	; 0x1c28 <__divsf3_pse+0x6a>
    1c2e:	98 3e       	cpi	r25, 0xE8	; 232
    1c30:	dc f3       	brlt	.-10     	; 0x1c28 <__divsf3_pse+0x6a>
    1c32:	86 95       	lsr	r24
    1c34:	77 95       	ror	r23
    1c36:	67 95       	ror	r22
    1c38:	b7 95       	ror	r27
    1c3a:	f7 95       	ror	r31
    1c3c:	9f 5f       	subi	r25, 0xFF	; 255
    1c3e:	c9 f7       	brne	.-14     	; 0x1c32 <__divsf3_pse+0x74>
    1c40:	88 0f       	add	r24, r24
    1c42:	91 1d       	adc	r25, r1
    1c44:	96 95       	lsr	r25
    1c46:	87 95       	ror	r24
    1c48:	97 f9       	bld	r25, 7
    1c4a:	08 95       	ret
    1c4c:	e1 e0       	ldi	r30, 0x01	; 1
    1c4e:	66 0f       	add	r22, r22
    1c50:	77 1f       	adc	r23, r23
    1c52:	88 1f       	adc	r24, r24
    1c54:	bb 1f       	adc	r27, r27
    1c56:	62 17       	cp	r22, r18
    1c58:	73 07       	cpc	r23, r19
    1c5a:	84 07       	cpc	r24, r20
    1c5c:	ba 07       	cpc	r27, r26
    1c5e:	20 f0       	brcs	.+8      	; 0x1c68 <__divsf3_pse+0xaa>
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	84 0b       	sbc	r24, r20
    1c66:	ba 0b       	sbc	r27, r26
    1c68:	ee 1f       	adc	r30, r30
    1c6a:	88 f7       	brcc	.-30     	; 0x1c4e <__divsf3_pse+0x90>
    1c6c:	e0 95       	com	r30
    1c6e:	08 95       	ret

00001c70 <__fp_mpack>:
    1c70:	9f 3f       	cpi	r25, 0xFF	; 255
    1c72:	31 f0       	breq	.+12     	; 0x1c80 <__fp_mpack_finite+0xc>

00001c74 <__fp_mpack_finite>:
    1c74:	91 50       	subi	r25, 0x01	; 1
    1c76:	20 f4       	brcc	.+8      	; 0x1c80 <__fp_mpack_finite+0xc>
    1c78:	87 95       	ror	r24
    1c7a:	77 95       	ror	r23
    1c7c:	67 95       	ror	r22
    1c7e:	b7 95       	ror	r27
    1c80:	88 0f       	add	r24, r24
    1c82:	91 1d       	adc	r25, r1
    1c84:	96 95       	lsr	r25
    1c86:	87 95       	ror	r24
    1c88:	97 f9       	bld	r25, 7
    1c8a:	08 95       	ret

00001c8c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1c8c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1c8e:	91 8d       	ldd	r25, Z+25	; 0x19
    1c90:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c92:	89 2f       	mov	r24, r25
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	80 5c       	subi	r24, 0xC0	; 192
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	82 1b       	sub	r24, r18
    1c9c:	91 09       	sbc	r25, r1
}
    1c9e:	8f 73       	andi	r24, 0x3F	; 63
    1ca0:	99 27       	eor	r25, r25
    1ca2:	08 95       	ret

00001ca4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1ca4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1ca6:	91 8d       	ldd	r25, Z+25	; 0x19
    1ca8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1caa:	98 17       	cp	r25, r24
    1cac:	31 f0       	breq	.+12     	; 0x1cba <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1cae:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cb0:	e8 0f       	add	r30, r24
    1cb2:	f1 1d       	adc	r31, r1
    1cb4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1cbe:	08 95       	ret

00001cc0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1cc0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1cc2:	91 8d       	ldd	r25, Z+25	; 0x19
    1cc4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cc6:	98 17       	cp	r25, r24
    1cc8:	61 f0       	breq	.+24     	; 0x1ce2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1cca:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ccc:	df 01       	movw	r26, r30
    1cce:	a8 0f       	add	r26, r24
    1cd0:	b1 1d       	adc	r27, r1
    1cd2:	5d 96       	adiw	r26, 0x1d	; 29
    1cd4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1cd6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cd8:	9f 5f       	subi	r25, 0xFF	; 255
    1cda:	9f 73       	andi	r25, 0x3F	; 63
    1cdc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1ce6:	08 95       	ret

00001ce8 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1ce8:	fc 01       	movw	r30, r24
    1cea:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1cec:	44 8d       	ldd	r20, Z+28	; 0x1c
    1cee:	25 2f       	mov	r18, r21
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	84 2f       	mov	r24, r20
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1cf6:	82 1b       	sub	r24, r18
    1cf8:	93 0b       	sbc	r25, r19
    1cfa:	54 17       	cp	r21, r20
    1cfc:	10 f0       	brcs	.+4      	; 0x1d02 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1cfe:	cf 96       	adiw	r24, 0x3f	; 63
    1d00:	08 95       	ret
  return tail - head - 1;
    1d02:	01 97       	sbiw	r24, 0x01	; 1
}
    1d04:	08 95       	ret

00001d06 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1d06:	85 e1       	ldi	r24, 0x15	; 21
    1d08:	90 e1       	ldi	r25, 0x10	; 16
    1d0a:	89 2b       	or	r24, r25
    1d0c:	39 f0       	breq	.+14     	; 0x1d1c <_Z14serialEventRunv+0x16>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	89 2b       	or	r24, r25
    1d14:	19 f0       	breq	.+6      	; 0x1d1c <_Z14serialEventRunv+0x16>
    1d16:	89 d1       	rcall	.+786    	; 0x202a <_Z17Serial0_availablev>
    1d18:	81 11       	cpse	r24, r1
    1d1a:	24 c0       	rjmp	.+72     	; 0x1d64 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1d1c:	8a ea       	ldi	r24, 0xAA	; 170
    1d1e:	90 e1       	ldi	r25, 0x10	; 16
    1d20:	89 2b       	or	r24, r25
    1d22:	39 f0       	breq	.+14     	; 0x1d32 <_Z14serialEventRunv+0x2c>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	89 2b       	or	r24, r25
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <_Z14serialEventRunv+0x2c>
    1d2c:	13 d2       	rcall	.+1062   	; 0x2154 <_Z17Serial1_availablev>
    1d2e:	81 11       	cpse	r24, r1
    1d30:	1c c0       	rjmp	.+56     	; 0x1d6a <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	89 2b       	or	r24, r25
    1d38:	41 f0       	breq	.+16     	; 0x1d4a <_Z14serialEventRunv+0x44>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	89 2b       	or	r24, r25
    1d40:	21 f0       	breq	.+8      	; 0x1d4a <_Z14serialEventRunv+0x44>
    1d42:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1d46:	81 11       	cpse	r24, r1
    1d48:	13 c0       	rjmp	.+38     	; 0x1d70 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	89 2b       	or	r24, r25
    1d50:	a1 f0       	breq	.+40     	; 0x1d7a <_Z14serialEventRunv+0x74>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	89 2b       	or	r24, r25
    1d58:	81 f0       	breq	.+32     	; 0x1d7a <_Z14serialEventRunv+0x74>
    1d5a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1d5e:	81 11       	cpse	r24, r1
    1d60:	0a c0       	rjmp	.+20     	; 0x1d76 <_Z14serialEventRunv+0x70>
    1d62:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1d64:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1d68:	d9 cf       	rjmp	.-78     	; 0x1d1c <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1d6a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1d6e:	e1 cf       	rjmp	.-62     	; 0x1d32 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1d70:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1d74:	ea cf       	rjmp	.-44     	; 0x1d4a <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1d76:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1d7a:	08 95       	ret

00001d7c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1d7c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1d7e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d80:	df 01       	movw	r26, r30
    1d82:	a8 0f       	add	r26, r24
    1d84:	b1 1d       	adc	r27, r1
    1d86:	a3 5a       	subi	r26, 0xA3	; 163
    1d88:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1d8c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	8f 73       	andi	r24, 0x3F	; 63
    1d94:	99 27       	eor	r25, r25
    1d96:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1d98:	a6 89       	ldd	r26, Z+22	; 0x16
    1d9a:	b7 89       	ldd	r27, Z+23	; 0x17
    1d9c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1d9e:	a0 89       	ldd	r26, Z+16	; 0x10
    1da0:	b1 89       	ldd	r27, Z+17	; 0x11
    1da2:	8c 91       	ld	r24, X
    1da4:	83 70       	andi	r24, 0x03	; 3
    1da6:	80 64       	ori	r24, 0x40	; 64
    1da8:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1daa:	93 8d       	ldd	r25, Z+27	; 0x1b
    1dac:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dae:	98 13       	cpse	r25, r24
    1db0:	06 c0       	rjmp	.+12     	; 0x1dbe <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1db2:	02 88       	ldd	r0, Z+18	; 0x12
    1db4:	f3 89       	ldd	r31, Z+19	; 0x13
    1db6:	e0 2d       	mov	r30, r0
    1db8:	80 81       	ld	r24, Z
    1dba:	8f 7d       	andi	r24, 0xDF	; 223
    1dbc:	80 83       	st	Z, r24
    1dbe:	08 95       	ret

00001dc0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	ec 01       	movw	r28, r24
  _written = true;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1dd2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dd4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dd6:	98 13       	cpse	r25, r24
    1dd8:	05 c0       	rjmp	.+10     	; 0x1de4 <_ZN14HardwareSerial5writeEh+0x24>
    1dda:	e8 89       	ldd	r30, Y+16	; 0x10
    1ddc:	f9 89       	ldd	r31, Y+17	; 0x11
    1dde:	80 81       	ld	r24, Z
    1de0:	85 fd       	sbrc	r24, 5
    1de2:	25 c0       	rjmp	.+74     	; 0x1e2e <_ZN14HardwareSerial5writeEh+0x6e>
    1de4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1de6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1de8:	10 e0       	ldi	r17, 0x00	; 0
    1dea:	0f 5f       	subi	r16, 0xFF	; 255
    1dec:	1f 4f       	sbci	r17, 0xFF	; 255
    1dee:	0f 73       	andi	r16, 0x3F	; 63
    1df0:	11 27       	eor	r17, r17
    1df2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1df4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1df6:	e8 12       	cpse	r14, r24
    1df8:	0b c0       	rjmp	.+22     	; 0x1e10 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	07 fc       	sbrc	r0, 7
    1dfe:	fa cf       	rjmp	.-12     	; 0x1df4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1e00:	e8 89       	ldd	r30, Y+16	; 0x10
    1e02:	f9 89       	ldd	r31, Y+17	; 0x11
    1e04:	80 81       	ld	r24, Z
    1e06:	85 ff       	sbrs	r24, 5
    1e08:	f5 cf       	rjmp	.-22     	; 0x1df4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	b7 df       	rcall	.-146    	; 0x1d7c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e0e:	f2 cf       	rjmp	.-28     	; 0x1df4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e12:	fe 01       	movw	r30, r28
    1e14:	e8 0f       	add	r30, r24
    1e16:	f1 1d       	adc	r31, r1
    1e18:	e3 5a       	subi	r30, 0xA3	; 163
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e1e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e20:	f8 94       	cli
    _tx_buffer_head = i;
    1e22:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1e24:	ea 89       	ldd	r30, Y+18	; 0x12
    1e26:	fb 89       	ldd	r31, Y+19	; 0x13
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 62       	ori	r24, 0x20	; 32
    1e2c:	0a c0       	rjmp	.+20     	; 0x1e42 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e2e:	9f b7       	in	r25, 0x3f	; 63
    1e30:	f8 94       	cli
      *_udr = c;
    1e32:	ee 89       	ldd	r30, Y+22	; 0x16
    1e34:	ff 89       	ldd	r31, Y+23	; 0x17
    1e36:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1e38:	e8 89       	ldd	r30, Y+16	; 0x10
    1e3a:	f9 89       	ldd	r31, Y+17	; 0x11
    1e3c:	80 81       	ld	r24, Z
    1e3e:	83 70       	andi	r24, 0x03	; 3
    1e40:	80 64       	ori	r24, 0x40	; 64
    1e42:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e44:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	08 95       	ret

00001e58 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1e5e:	88 8d       	ldd	r24, Y+24	; 0x18
    1e60:	88 23       	and	r24, r24
    1e62:	c1 f0       	breq	.+48     	; 0x1e94 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1e64:	ea 89       	ldd	r30, Y+18	; 0x12
    1e66:	fb 89       	ldd	r31, Y+19	; 0x13
    1e68:	80 81       	ld	r24, Z
    1e6a:	85 fd       	sbrc	r24, 5
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <_ZN14HardwareSerial5flushEv+0x20>
    1e6e:	a8 89       	ldd	r26, Y+16	; 0x10
    1e70:	b9 89       	ldd	r27, Y+17	; 0x11
    1e72:	8c 91       	ld	r24, X
    1e74:	86 fd       	sbrc	r24, 6
    1e76:	0e c0       	rjmp	.+28     	; 0x1e94 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	07 fc       	sbrc	r0, 7
    1e7c:	f5 cf       	rjmp	.-22     	; 0x1e68 <_ZN14HardwareSerial5flushEv+0x10>
    1e7e:	80 81       	ld	r24, Z
    1e80:	85 ff       	sbrs	r24, 5
    1e82:	f2 cf       	rjmp	.-28     	; 0x1e68 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1e84:	a8 89       	ldd	r26, Y+16	; 0x10
    1e86:	b9 89       	ldd	r27, Y+17	; 0x11
    1e88:	8c 91       	ld	r24, X
    1e8a:	85 ff       	sbrs	r24, 5
    1e8c:	ed cf       	rjmp	.-38     	; 0x1e68 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1e8e:	ce 01       	movw	r24, r28
    1e90:	75 df       	rcall	.-278    	; 0x1d7c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e92:	e8 cf       	rjmp	.-48     	; 0x1e64 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	08 95       	ret

00001e9a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	ec 01       	movw	r28, r24
    1eaa:	6a 01       	movw	r12, r20
    1eac:	7b 01       	movw	r14, r22
    1eae:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1eb0:	e8 89       	ldd	r30, Y+16	; 0x10
    1eb2:	f9 89       	ldd	r31, Y+17	; 0x11
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1eb8:	41 15       	cp	r20, r1
    1eba:	51 4e       	sbci	r21, 0xE1	; 225
    1ebc:	61 05       	cpc	r22, r1
    1ebe:	71 05       	cpc	r23, r1
    1ec0:	b1 f0       	breq	.+44     	; 0x1eee <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	79 e0       	ldi	r23, 0x09	; 9
    1ec6:	8d e3       	ldi	r24, 0x3D	; 61
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a7 01       	movw	r20, r14
    1ecc:	96 01       	movw	r18, r12
    1ece:	0e 94 a9 18 	call	0x3152	; 0x3152 <__udivmodsi4>
    1ed2:	da 01       	movw	r26, r20
    1ed4:	c9 01       	movw	r24, r18
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	a1 09       	sbc	r26, r1
    1eda:	b1 09       	sbc	r27, r1
    1edc:	b6 95       	lsr	r27
    1ede:	a7 95       	ror	r26
    1ee0:	97 95       	ror	r25
    1ee2:	87 95       	ror	r24
    1ee4:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ee6:	21 15       	cp	r18, r1
    1ee8:	80 e1       	ldi	r24, 0x10	; 16
    1eea:	38 07       	cpc	r19, r24
    1eec:	a8 f0       	brcs	.+42     	; 0x1f18 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1eee:	e8 89       	ldd	r30, Y+16	; 0x10
    1ef0:	f9 89       	ldd	r31, Y+17	; 0x11
    1ef2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1ef4:	60 e8       	ldi	r22, 0x80	; 128
    1ef6:	74 e8       	ldi	r23, 0x84	; 132
    1ef8:	8e e1       	ldi	r24, 0x1E	; 30
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a7 01       	movw	r20, r14
    1efe:	96 01       	movw	r18, r12
    1f00:	0e 94 a9 18 	call	0x3152	; 0x3152 <__udivmodsi4>
    1f04:	da 01       	movw	r26, r20
    1f06:	c9 01       	movw	r24, r18
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	a1 09       	sbc	r26, r1
    1f0c:	b1 09       	sbc	r27, r1
    1f0e:	b6 95       	lsr	r27
    1f10:	a7 95       	ror	r26
    1f12:	97 95       	ror	r25
    1f14:	87 95       	ror	r24
    1f16:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1f18:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f1a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1f1c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1f1e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f20:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f22:	20 83       	st	Z, r18

  _written = false;
    1f24:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1f26:	ec 89       	ldd	r30, Y+20	; 0x14
    1f28:	fd 89       	ldd	r31, Y+21	; 0x15
    1f2a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1f2c:	ea 89       	ldd	r30, Y+18	; 0x12
    1f2e:	fb 89       	ldd	r31, Y+19	; 0x13
    1f30:	80 81       	ld	r24, Z
    1f32:	80 61       	ori	r24, 0x10	; 16
    1f34:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1f36:	ea 89       	ldd	r30, Y+18	; 0x12
    1f38:	fb 89       	ldd	r31, Y+19	; 0x13
    1f3a:	80 81       	ld	r24, Z
    1f3c:	88 60       	ori	r24, 0x08	; 8
    1f3e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1f40:	ea 89       	ldd	r30, Y+18	; 0x12
    1f42:	fb 89       	ldd	r31, Y+19	; 0x13
    1f44:	80 81       	ld	r24, Z
    1f46:	80 68       	ori	r24, 0x80	; 128
    1f48:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1f4a:	ea 89       	ldd	r30, Y+18	; 0x12
    1f4c:	fb 89       	ldd	r31, Y+19	; 0x13
    1f4e:	80 81       	ld	r24, Z
    1f50:	8f 7d       	andi	r24, 0xDF	; 223
    1f52:	80 83       	st	Z, r24
}
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	ff 90       	pop	r15
    1f5c:	ef 90       	pop	r14
    1f5e:	df 90       	pop	r13
    1f60:	cf 90       	pop	r12
    1f62:	08 95       	ret

00001f64 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	08 95       	ret

00001f6a <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1f6a:	08 95       	ret

00001f6c <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1f6c:	1f 92       	push	r1
    1f6e:	0f 92       	push	r0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	0b b6       	in	r0, 0x3b	; 59
    1f78:	0f 92       	push	r0
    1f7a:	2f 93       	push	r18
    1f7c:	8f 93       	push	r24
    1f7e:	9f 93       	push	r25
    1f80:	ef 93       	push	r30
    1f82:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1f84:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <Serial+0x10>
    1f88:	f0 91 9c 03 	lds	r31, 0x039C	; 0x80039c <Serial+0x11>
    1f8c:	80 81       	ld	r24, Z
    1f8e:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <Serial+0x16>
    1f92:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <Serial+0x17>
    1f96:	82 fd       	sbrc	r24, 2
    1f98:	12 c0       	rjmp	.+36     	; 0x1fbe <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1f9a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1f9c:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <Serial+0x19>
    1fa0:	8f 5f       	subi	r24, 0xFF	; 255
    1fa2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1fa4:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <Serial+0x1a>
    1fa8:	82 17       	cp	r24, r18
    1faa:	51 f0       	breq	.+20     	; 0x1fc0 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1fac:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <Serial+0x19>
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	e5 57       	subi	r30, 0x75	; 117
    1fb4:	fc 4f       	sbci	r31, 0xFC	; 252
    1fb6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1fb8:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <Serial+0x19>
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1fbe:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1fc0:	ff 91       	pop	r31
    1fc2:	ef 91       	pop	r30
    1fc4:	9f 91       	pop	r25
    1fc6:	8f 91       	pop	r24
    1fc8:	2f 91       	pop	r18
    1fca:	0f 90       	pop	r0
    1fcc:	0b be       	out	0x3b, r0	; 59
    1fce:	0f 90       	pop	r0
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	0f 90       	pop	r0
    1fd4:	1f 90       	pop	r1
    1fd6:	18 95       	reti

00001fd8 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1fd8:	1f 92       	push	r1
    1fda:	0f 92       	push	r0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	0f 92       	push	r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	0b b6       	in	r0, 0x3b	; 59
    1fe4:	0f 92       	push	r0
    1fe6:	2f 93       	push	r18
    1fe8:	3f 93       	push	r19
    1fea:	4f 93       	push	r20
    1fec:	5f 93       	push	r21
    1fee:	6f 93       	push	r22
    1ff0:	7f 93       	push	r23
    1ff2:	8f 93       	push	r24
    1ff4:	9f 93       	push	r25
    1ff6:	af 93       	push	r26
    1ff8:	bf 93       	push	r27
    1ffa:	ef 93       	push	r30
    1ffc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1ffe:	8b e8       	ldi	r24, 0x8B	; 139
    2000:	93 e0       	ldi	r25, 0x03	; 3
    2002:	bc de       	rcall	.-648    	; 0x1d7c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2004:	ff 91       	pop	r31
    2006:	ef 91       	pop	r30
    2008:	bf 91       	pop	r27
    200a:	af 91       	pop	r26
    200c:	9f 91       	pop	r25
    200e:	8f 91       	pop	r24
    2010:	7f 91       	pop	r23
    2012:	6f 91       	pop	r22
    2014:	5f 91       	pop	r21
    2016:	4f 91       	pop	r20
    2018:	3f 91       	pop	r19
    201a:	2f 91       	pop	r18
    201c:	0f 90       	pop	r0
    201e:	0b be       	out	0x3b, r0	; 59
    2020:	0f 90       	pop	r0
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	0f 90       	pop	r0
    2026:	1f 90       	pop	r1
    2028:	18 95       	reti

0000202a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    202a:	8b e8       	ldi	r24, 0x8B	; 139
    202c:	93 e0       	ldi	r25, 0x03	; 3
    202e:	2e de       	rcall	.-932    	; 0x1c8c <_ZN14HardwareSerial9availableEv>
    2030:	21 e0       	ldi	r18, 0x01	; 1
    2032:	89 2b       	or	r24, r25
    2034:	09 f4       	brne	.+2      	; 0x2038 <_Z17Serial0_availablev+0xe>
    2036:	20 e0       	ldi	r18, 0x00	; 0
}
    2038:	82 2f       	mov	r24, r18
    203a:	08 95       	ret

0000203c <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    203c:	eb e8       	ldi	r30, 0x8B	; 139
    203e:	f3 e0       	ldi	r31, 0x03	; 3
    2040:	13 82       	std	Z+3, r1	; 0x03
    2042:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2044:	88 ee       	ldi	r24, 0xE8	; 232
    2046:	93 e0       	ldi	r25, 0x03	; 3
    2048:	a0 e0       	ldi	r26, 0x00	; 0
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	84 83       	std	Z+4, r24	; 0x04
    204e:	95 83       	std	Z+5, r25	; 0x05
    2050:	a6 83       	std	Z+6, r26	; 0x06
    2052:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2054:	82 ef       	ldi	r24, 0xF2	; 242
    2056:	92 e0       	ldi	r25, 0x02	; 2
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	80 83       	st	Z, r24
    205c:	85 ec       	ldi	r24, 0xC5	; 197
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	95 87       	std	Z+13, r25	; 0x0d
    2062:	84 87       	std	Z+12, r24	; 0x0c
    2064:	84 ec       	ldi	r24, 0xC4	; 196
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	97 87       	std	Z+15, r25	; 0x0f
    206a:	86 87       	std	Z+14, r24	; 0x0e
    206c:	80 ec       	ldi	r24, 0xC0	; 192
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	91 8b       	std	Z+17, r25	; 0x11
    2072:	80 8b       	std	Z+16, r24	; 0x10
    2074:	81 ec       	ldi	r24, 0xC1	; 193
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	93 8b       	std	Z+19, r25	; 0x13
    207a:	82 8b       	std	Z+18, r24	; 0x12
    207c:	82 ec       	ldi	r24, 0xC2	; 194
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	95 8b       	std	Z+21, r25	; 0x15
    2082:	84 8b       	std	Z+20, r24	; 0x14
    2084:	86 ec       	ldi	r24, 0xC6	; 198
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	97 8b       	std	Z+23, r25	; 0x17
    208a:	86 8b       	std	Z+22, r24	; 0x16
    208c:	11 8e       	std	Z+25, r1	; 0x19
    208e:	12 8e       	std	Z+26, r1	; 0x1a
    2090:	13 8e       	std	Z+27, r1	; 0x1b
    2092:	14 8e       	std	Z+28, r1	; 0x1c
    2094:	08 95       	ret

00002096 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2096:	1f 92       	push	r1
    2098:	0f 92       	push	r0
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	0f 92       	push	r0
    209e:	11 24       	eor	r1, r1
    20a0:	0b b6       	in	r0, 0x3b	; 59
    20a2:	0f 92       	push	r0
    20a4:	2f 93       	push	r18
    20a6:	8f 93       	push	r24
    20a8:	9f 93       	push	r25
    20aa:	ef 93       	push	r30
    20ac:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    20ae:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <Serial1+0x10>
    20b2:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <Serial1+0x11>
    20b6:	80 81       	ld	r24, Z
    20b8:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <Serial1+0x16>
    20bc:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <Serial1+0x17>
    20c0:	82 fd       	sbrc	r24, 2
    20c2:	12 c0       	rjmp	.+36     	; 0x20e8 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    20c4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    20c6:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <Serial1+0x19>
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    20ce:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <Serial1+0x1a>
    20d2:	82 17       	cp	r24, r18
    20d4:	51 f0       	breq	.+20     	; 0x20ea <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    20d6:	e0 91 41 04 	lds	r30, 0x0441	; 0x800441 <Serial1+0x19>
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	e8 5d       	subi	r30, 0xD8	; 216
    20de:	fb 4f       	sbci	r31, 0xFB	; 251
    20e0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    20e2:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <Serial1+0x19>
    20e6:	01 c0       	rjmp	.+2      	; 0x20ea <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    20e8:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    20ea:	ff 91       	pop	r31
    20ec:	ef 91       	pop	r30
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	2f 91       	pop	r18
    20f4:	0f 90       	pop	r0
    20f6:	0b be       	out	0x3b, r0	; 59
    20f8:	0f 90       	pop	r0
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	0f 90       	pop	r0
    20fe:	1f 90       	pop	r1
    2100:	18 95       	reti

00002102 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2102:	1f 92       	push	r1
    2104:	0f 92       	push	r0
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	0f 92       	push	r0
    210a:	11 24       	eor	r1, r1
    210c:	0b b6       	in	r0, 0x3b	; 59
    210e:	0f 92       	push	r0
    2110:	2f 93       	push	r18
    2112:	3f 93       	push	r19
    2114:	4f 93       	push	r20
    2116:	5f 93       	push	r21
    2118:	6f 93       	push	r22
    211a:	7f 93       	push	r23
    211c:	8f 93       	push	r24
    211e:	9f 93       	push	r25
    2120:	af 93       	push	r26
    2122:	bf 93       	push	r27
    2124:	ef 93       	push	r30
    2126:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    2128:	88 e2       	ldi	r24, 0x28	; 40
    212a:	94 e0       	ldi	r25, 0x04	; 4
    212c:	27 de       	rcall	.-946    	; 0x1d7c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    212e:	ff 91       	pop	r31
    2130:	ef 91       	pop	r30
    2132:	bf 91       	pop	r27
    2134:	af 91       	pop	r26
    2136:	9f 91       	pop	r25
    2138:	8f 91       	pop	r24
    213a:	7f 91       	pop	r23
    213c:	6f 91       	pop	r22
    213e:	5f 91       	pop	r21
    2140:	4f 91       	pop	r20
    2142:	3f 91       	pop	r19
    2144:	2f 91       	pop	r18
    2146:	0f 90       	pop	r0
    2148:	0b be       	out	0x3b, r0	; 59
    214a:	0f 90       	pop	r0
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	0f 90       	pop	r0
    2150:	1f 90       	pop	r1
    2152:	18 95       	reti

00002154 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    2154:	88 e2       	ldi	r24, 0x28	; 40
    2156:	94 e0       	ldi	r25, 0x04	; 4
    2158:	99 dd       	rcall	.-1230   	; 0x1c8c <_ZN14HardwareSerial9availableEv>
    215a:	21 e0       	ldi	r18, 0x01	; 1
    215c:	89 2b       	or	r24, r25
    215e:	09 f4       	brne	.+2      	; 0x2162 <_Z17Serial1_availablev+0xe>
    2160:	20 e0       	ldi	r18, 0x00	; 0
}
    2162:	82 2f       	mov	r24, r18
    2164:	08 95       	ret

00002166 <_GLOBAL__sub_I___vector_36>:
    2166:	e8 e2       	ldi	r30, 0x28	; 40
    2168:	f4 e0       	ldi	r31, 0x04	; 4
    216a:	13 82       	std	Z+3, r1	; 0x03
    216c:	12 82       	std	Z+2, r1	; 0x02
    216e:	88 ee       	ldi	r24, 0xE8	; 232
    2170:	93 e0       	ldi	r25, 0x03	; 3
    2172:	a0 e0       	ldi	r26, 0x00	; 0
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	84 83       	std	Z+4, r24	; 0x04
    2178:	95 83       	std	Z+5, r25	; 0x05
    217a:	a6 83       	std	Z+6, r26	; 0x06
    217c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    217e:	82 ef       	ldi	r24, 0xF2	; 242
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24
    2186:	8d ec       	ldi	r24, 0xCD	; 205
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	95 87       	std	Z+13, r25	; 0x0d
    218c:	84 87       	std	Z+12, r24	; 0x0c
    218e:	8c ec       	ldi	r24, 0xCC	; 204
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	97 87       	std	Z+15, r25	; 0x0f
    2194:	86 87       	std	Z+14, r24	; 0x0e
    2196:	88 ec       	ldi	r24, 0xC8	; 200
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	91 8b       	std	Z+17, r25	; 0x11
    219c:	80 8b       	std	Z+16, r24	; 0x10
    219e:	89 ec       	ldi	r24, 0xC9	; 201
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	93 8b       	std	Z+19, r25	; 0x13
    21a4:	82 8b       	std	Z+18, r24	; 0x12
    21a6:	8a ec       	ldi	r24, 0xCA	; 202
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	95 8b       	std	Z+21, r25	; 0x15
    21ac:	84 8b       	std	Z+20, r24	; 0x14
    21ae:	8e ec       	ldi	r24, 0xCE	; 206
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	97 8b       	std	Z+23, r25	; 0x17
    21b4:	86 8b       	std	Z+22, r24	; 0x16
    21b6:	11 8e       	std	Z+25, r1	; 0x19
    21b8:	12 8e       	std	Z+26, r1	; 0x1a
    21ba:	13 8e       	std	Z+27, r1	; 0x1b
    21bc:	14 8e       	std	Z+28, r1	; 0x1c
    21be:	08 95       	ret

000021c0 <initVariant>:
    21c0:	08 95       	ret

000021c2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    21c2:	e8 d1       	rcall	.+976    	; 0x2594 <init>

	initVariant();
    21c4:	fd df       	rcall	.-6      	; 0x21c0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    21c6:	2a d9       	rcall	.-3500   	; 0x141c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    21c8:	c3 e8       	ldi	r28, 0x83	; 131
    21ca:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    21cc:	71 d8       	rcall	.-3870   	; 0x12b0 <loop>
		if (serialEventRun) serialEventRun();
    21ce:	20 97       	sbiw	r28, 0x00	; 0
    21d0:	e9 f3       	breq	.-6      	; 0x21cc <main+0xa>
    21d2:	99 dd       	rcall	.-1230   	; 0x1d06 <_Z14serialEventRunv>
    21d4:	fb cf       	rjmp	.-10     	; 0x21cc <main+0xa>

000021d6 <_ZN5Print5writeEPKhj>:
    21d6:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	6c 01       	movw	r12, r24
    21e8:	7a 01       	movw	r14, r20
    21ea:	8b 01       	movw	r16, r22
    21ec:	c0 e0       	ldi	r28, 0x00	; 0
    21ee:	d0 e0       	ldi	r29, 0x00	; 0
    21f0:	ce 15       	cp	r28, r14
    21f2:	df 05       	cpc	r29, r15
    21f4:	81 f0       	breq	.+32     	; 0x2216 <__stack+0x17>
    21f6:	d8 01       	movw	r26, r16
    21f8:	6d 91       	ld	r22, X+
    21fa:	8d 01       	movw	r16, r26
    21fc:	d6 01       	movw	r26, r12
    21fe:	ed 91       	ld	r30, X+
    2200:	fc 91       	ld	r31, X
    2202:	01 90       	ld	r0, Z+
    2204:	f0 81       	ld	r31, Z
    2206:	e0 2d       	mov	r30, r0
    2208:	c6 01       	movw	r24, r12
    220a:	19 95       	eicall
    220c:	89 2b       	or	r24, r25
    220e:	11 f0       	breq	.+4      	; 0x2214 <__stack+0x15>
    2210:	21 96       	adiw	r28, 0x01	; 1
    2212:	ee cf       	rjmp	.-36     	; 0x21f0 <_ZN5Print5writeEPKhj+0x1a>
    2214:	7e 01       	movw	r14, r28
    2216:	c7 01       	movw	r24, r14
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	df 90       	pop	r13
    2226:	cf 90       	pop	r12
    2228:	08 95       	ret

0000222a <_ZN5Print5writeEPKc>:
    222a:	61 15       	cp	r22, r1
    222c:	71 05       	cpc	r23, r1
    222e:	79 f0       	breq	.+30     	; 0x224e <_ZN5Print5writeEPKc+0x24>
    2230:	fb 01       	movw	r30, r22
    2232:	01 90       	ld	r0, Z+
    2234:	00 20       	and	r0, r0
    2236:	e9 f7       	brne	.-6      	; 0x2232 <_ZN5Print5writeEPKc+0x8>
    2238:	31 97       	sbiw	r30, 0x01	; 1
    223a:	af 01       	movw	r20, r30
    223c:	46 1b       	sub	r20, r22
    223e:	57 0b       	sbc	r21, r23
    2240:	dc 01       	movw	r26, r24
    2242:	ed 91       	ld	r30, X+
    2244:	fc 91       	ld	r31, X
    2246:	02 80       	ldd	r0, Z+2	; 0x02
    2248:	f3 81       	ldd	r31, Z+3	; 0x03
    224a:	e0 2d       	mov	r30, r0
    224c:	19 94       	eijmp
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	08 95       	ret

00002254 <_ZN5Print5printERK6String>:
    2254:	db 01       	movw	r26, r22
    2256:	14 96       	adiw	r26, 0x04	; 4
    2258:	4d 91       	ld	r20, X+
    225a:	5c 91       	ld	r21, X
    225c:	15 97       	sbiw	r26, 0x05	; 5
    225e:	6d 91       	ld	r22, X+
    2260:	7c 91       	ld	r23, X
    2262:	dc 01       	movw	r26, r24
    2264:	ed 91       	ld	r30, X+
    2266:	fc 91       	ld	r31, X
    2268:	02 80       	ldd	r0, Z+2	; 0x02
    226a:	f3 81       	ldd	r31, Z+3	; 0x03
    226c:	e0 2d       	mov	r30, r0
    226e:	19 94       	eijmp

00002270 <_ZN5Print5printEPKc>:
    2270:	dc cf       	rjmp	.-72     	; 0x222a <_ZN5Print5writeEPKc>

00002272 <_ZN5Print5printEc>:
    2272:	dc 01       	movw	r26, r24
    2274:	ed 91       	ld	r30, X+
    2276:	fc 91       	ld	r31, X
    2278:	01 90       	ld	r0, Z+
    227a:	f0 81       	ld	r31, Z
    227c:	e0 2d       	mov	r30, r0
    227e:	19 94       	eijmp

00002280 <_ZN5Print7printlnEv>:
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	73 e0       	ldi	r23, 0x03	; 3
    2284:	d2 cf       	rjmp	.-92     	; 0x222a <_ZN5Print5writeEPKc>

00002286 <_ZN5Print7printlnERK6String>:
    2286:	0f 93       	push	r16
    2288:	1f 93       	push	r17
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	ec 01       	movw	r28, r24
    2290:	e1 df       	rcall	.-62     	; 0x2254 <_ZN5Print5printERK6String>
    2292:	8c 01       	movw	r16, r24
    2294:	ce 01       	movw	r24, r28
    2296:	f4 df       	rcall	.-24     	; 0x2280 <_ZN5Print7printlnEv>
    2298:	80 0f       	add	r24, r16
    229a:	91 1f       	adc	r25, r17
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	08 95       	ret

000022a6 <_ZN5Print7printlnEPKc>:
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	ec 01       	movw	r28, r24
    22b0:	bc df       	rcall	.-136    	; 0x222a <_ZN5Print5writeEPKc>
    22b2:	8c 01       	movw	r16, r24
    22b4:	ce 01       	movw	r24, r28
    22b6:	e4 df       	rcall	.-56     	; 0x2280 <_ZN5Print7printlnEv>
    22b8:	80 0f       	add	r24, r16
    22ba:	91 1f       	adc	r25, r17
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	08 95       	ret

000022c6 <_ZN5Print11printNumberEmh>:
    22c6:	8f 92       	push	r8
    22c8:	9f 92       	push	r9
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	ef 92       	push	r14
    22d0:	ff 92       	push	r15
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	a1 97       	sbiw	r28, 0x21	; 33
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	7c 01       	movw	r14, r24
    22ec:	fa 01       	movw	r30, r20
    22ee:	cb 01       	movw	r24, r22
    22f0:	19 a2       	std	Y+33, r1	; 0x21
    22f2:	22 30       	cpi	r18, 0x02	; 2
    22f4:	08 f4       	brcc	.+2      	; 0x22f8 <_ZN5Print11printNumberEmh+0x32>
    22f6:	2a e0       	ldi	r18, 0x0A	; 10
    22f8:	8e 01       	movw	r16, r28
    22fa:	0f 5d       	subi	r16, 0xDF	; 223
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	82 2e       	mov	r8, r18
    2300:	91 2c       	mov	r9, r1
    2302:	a1 2c       	mov	r10, r1
    2304:	b1 2c       	mov	r11, r1
    2306:	bf 01       	movw	r22, r30
    2308:	a5 01       	movw	r20, r10
    230a:	94 01       	movw	r18, r8
    230c:	22 d7       	rcall	.+3652   	; 0x3152 <__udivmodsi4>
    230e:	f9 01       	movw	r30, r18
    2310:	ca 01       	movw	r24, r20
    2312:	01 50       	subi	r16, 0x01	; 1
    2314:	11 09       	sbc	r17, r1
    2316:	6a 30       	cpi	r22, 0x0A	; 10
    2318:	10 f4       	brcc	.+4      	; 0x231e <_ZN5Print11printNumberEmh+0x58>
    231a:	60 5d       	subi	r22, 0xD0	; 208
    231c:	01 c0       	rjmp	.+2      	; 0x2320 <_ZN5Print11printNumberEmh+0x5a>
    231e:	69 5c       	subi	r22, 0xC9	; 201
    2320:	d8 01       	movw	r26, r16
    2322:	6c 93       	st	X, r22
    2324:	23 2b       	or	r18, r19
    2326:	24 2b       	or	r18, r20
    2328:	25 2b       	or	r18, r21
    232a:	69 f7       	brne	.-38     	; 0x2306 <_ZN5Print11printNumberEmh+0x40>
    232c:	b8 01       	movw	r22, r16
    232e:	c7 01       	movw	r24, r14
    2330:	7c df       	rcall	.-264    	; 0x222a <_ZN5Print5writeEPKc>
    2332:	a1 96       	adiw	r28, 0x21	; 33
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	bf 90       	pop	r11
    234c:	af 90       	pop	r10
    234e:	9f 90       	pop	r9
    2350:	8f 90       	pop	r8
    2352:	08 95       	ret

00002354 <_ZN5Print5printEmi>:
    2354:	21 15       	cp	r18, r1
    2356:	31 05       	cpc	r19, r1
    2358:	41 f4       	brne	.+16     	; 0x236a <_ZN5Print5printEmi+0x16>
    235a:	dc 01       	movw	r26, r24
    235c:	ed 91       	ld	r30, X+
    235e:	fc 91       	ld	r31, X
    2360:	01 90       	ld	r0, Z+
    2362:	f0 81       	ld	r31, Z
    2364:	e0 2d       	mov	r30, r0
    2366:	64 2f       	mov	r22, r20
    2368:	19 94       	eijmp
    236a:	ad cf       	rjmp	.-166    	; 0x22c6 <_ZN5Print11printNumberEmh>

0000236c <_ZN5Print5printEhi>:
    236c:	9a 01       	movw	r18, r20
    236e:	46 2f       	mov	r20, r22
    2370:	50 e0       	ldi	r21, 0x00	; 0
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	ee cf       	rjmp	.-36     	; 0x2354 <_ZN5Print5printEmi>

00002378 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2378:	cf 92       	push	r12
    237a:	df 92       	push	r13
    237c:	ef 92       	push	r14
    237e:	ff 92       	push	r15
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
  if (base == 0) {
    2388:	21 15       	cp	r18, r1
    238a:	31 05       	cpc	r19, r1
    238c:	81 f4       	brne	.+32     	; 0x23ae <_ZN5Print5printEli+0x36>
    return write(n);
    238e:	dc 01       	movw	r26, r24
    2390:	ed 91       	ld	r30, X+
    2392:	fc 91       	ld	r31, X
    2394:	01 90       	ld	r0, Z+
    2396:	f0 81       	ld	r31, Z
    2398:	e0 2d       	mov	r30, r0
    239a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	ff 90       	pop	r15
    23a6:	ef 90       	pop	r14
    23a8:	df 90       	pop	r13
    23aa:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    23ac:	19 94       	eijmp
  } else if (base == 10) {
    23ae:	2a 30       	cpi	r18, 0x0A	; 10
    23b0:	31 05       	cpc	r19, r1
    23b2:	f1 f4       	brne	.+60     	; 0x23f0 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    23b4:	77 ff       	sbrs	r23, 7
    23b6:	1b c0       	rjmp	.+54     	; 0x23ee <_ZN5Print5printEli+0x76>
    23b8:	6a 01       	movw	r12, r20
    23ba:	7b 01       	movw	r14, r22
    23bc:	ec 01       	movw	r28, r24
      int t = print('-');
    23be:	6d e2       	ldi	r22, 0x2D	; 45
    23c0:	58 df       	rcall	.-336    	; 0x2272 <_ZN5Print5printEc>
    23c2:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    23c4:	44 27       	eor	r20, r20
    23c6:	55 27       	eor	r21, r21
    23c8:	ba 01       	movw	r22, r20
    23ca:	4c 19       	sub	r20, r12
    23cc:	5d 09       	sbc	r21, r13
    23ce:	6e 09       	sbc	r22, r14
    23d0:	7f 09       	sbc	r23, r15
    23d2:	2a e0       	ldi	r18, 0x0A	; 10
    23d4:	ce 01       	movw	r24, r28
    23d6:	77 df       	rcall	.-274    	; 0x22c6 <_ZN5Print11printNumberEmh>
    23d8:	80 0f       	add	r24, r16
    23da:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	df 90       	pop	r13
    23ea:	cf 90       	pop	r12
    23ec:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    23ee:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	ef 90       	pop	r14
    23fc:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    23fe:	cf 90       	pop	r12
    2400:	62 cf       	rjmp	.-316    	; 0x22c6 <_ZN5Print11printNumberEmh>

00002402 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2402:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2404:	ab 01       	movw	r20, r22
    2406:	77 0f       	add	r23, r23
    2408:	66 0b       	sbc	r22, r22
    240a:	77 0b       	sbc	r23, r23
    240c:	b5 cf       	rjmp	.-150    	; 0x2378 <_ZN5Print5printEli>

0000240e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2418:	f4 df       	rcall	.-24     	; 0x2402 <_ZN5Print5printEii>
    241a:	8c 01       	movw	r16, r24
  n += println();
    241c:	ce 01       	movw	r24, r28
    241e:	30 df       	rcall	.-416    	; 0x2280 <_ZN5Print7printlnEv>
  return n;
}
    2420:	80 0f       	add	r24, r16
    2422:	91 1f       	adc	r25, r17
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	08 95       	ret

0000242e <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    242e:	1f 92       	push	r1
    2430:	0f 92       	push	r0
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	0f 92       	push	r0
    2436:	11 24       	eor	r1, r1
    2438:	2f 93       	push	r18
    243a:	3f 93       	push	r19
    243c:	8f 93       	push	r24
    243e:	9f 93       	push	r25
    2440:	af 93       	push	r26
    2442:	bf 93       	push	r27
    2444:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <timer0_millis>
    2448:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <timer0_millis+0x1>
    244c:	a0 91 c8 04 	lds	r26, 0x04C8	; 0x8004c8 <timer0_millis+0x2>
    2450:	b0 91 c9 04 	lds	r27, 0x04C9	; 0x8004c9 <timer0_millis+0x3>
    2454:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <timer0_fract>
    2458:	23 e0       	ldi	r18, 0x03	; 3
    245a:	23 0f       	add	r18, r19
    245c:	2d 37       	cpi	r18, 0x7D	; 125
    245e:	20 f4       	brcc	.+8      	; 0x2468 <__vector_23+0x3a>
    2460:	01 96       	adiw	r24, 0x01	; 1
    2462:	a1 1d       	adc	r26, r1
    2464:	b1 1d       	adc	r27, r1
    2466:	05 c0       	rjmp	.+10     	; 0x2472 <__vector_23+0x44>
    2468:	26 e8       	ldi	r18, 0x86	; 134
    246a:	23 0f       	add	r18, r19
    246c:	02 96       	adiw	r24, 0x02	; 2
    246e:	a1 1d       	adc	r26, r1
    2470:	b1 1d       	adc	r27, r1
    2472:	20 93 c5 04 	sts	0x04C5, r18	; 0x8004c5 <timer0_fract>
    2476:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <timer0_millis>
    247a:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <timer0_millis+0x1>
    247e:	a0 93 c8 04 	sts	0x04C8, r26	; 0x8004c8 <timer0_millis+0x2>
    2482:	b0 93 c9 04 	sts	0x04C9, r27	; 0x8004c9 <timer0_millis+0x3>
    2486:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <timer0_overflow_count>
    248a:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <timer0_overflow_count+0x1>
    248e:	a0 91 cc 04 	lds	r26, 0x04CC	; 0x8004cc <timer0_overflow_count+0x2>
    2492:	b0 91 cd 04 	lds	r27, 0x04CD	; 0x8004cd <timer0_overflow_count+0x3>
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	a1 1d       	adc	r26, r1
    249a:	b1 1d       	adc	r27, r1
    249c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <timer0_overflow_count>
    24a0:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <timer0_overflow_count+0x1>
    24a4:	a0 93 cc 04 	sts	0x04CC, r26	; 0x8004cc <timer0_overflow_count+0x2>
    24a8:	b0 93 cd 04 	sts	0x04CD, r27	; 0x8004cd <timer0_overflow_count+0x3>
    24ac:	bf 91       	pop	r27
    24ae:	af 91       	pop	r26
    24b0:	9f 91       	pop	r25
    24b2:	8f 91       	pop	r24
    24b4:	3f 91       	pop	r19
    24b6:	2f 91       	pop	r18
    24b8:	0f 90       	pop	r0
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	0f 90       	pop	r0
    24be:	1f 90       	pop	r1
    24c0:	18 95       	reti

000024c2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    24c2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    24c4:	f8 94       	cli
	m = timer0_overflow_count;
    24c6:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <timer0_overflow_count>
    24ca:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <timer0_overflow_count+0x1>
    24ce:	a0 91 cc 04 	lds	r26, 0x04CC	; 0x8004cc <timer0_overflow_count+0x2>
    24d2:	b0 91 cd 04 	lds	r27, 0x04CD	; 0x8004cd <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    24d6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    24d8:	a8 9b       	sbis	0x15, 0	; 21
    24da:	05 c0       	rjmp	.+10     	; 0x24e6 <micros+0x24>
    24dc:	2f 3f       	cpi	r18, 0xFF	; 255
    24de:	19 f0       	breq	.+6      	; 0x24e6 <micros+0x24>
		m++;
    24e0:	01 96       	adiw	r24, 0x01	; 1
    24e2:	a1 1d       	adc	r26, r1
    24e4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    24e6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    24e8:	ba 2f       	mov	r27, r26
    24ea:	a9 2f       	mov	r26, r25
    24ec:	98 2f       	mov	r25, r24
    24ee:	88 27       	eor	r24, r24
    24f0:	82 0f       	add	r24, r18
    24f2:	91 1d       	adc	r25, r1
    24f4:	a1 1d       	adc	r26, r1
    24f6:	b1 1d       	adc	r27, r1
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	42 e0       	ldi	r20, 0x02	; 2
    24fe:	66 0f       	add	r22, r22
    2500:	77 1f       	adc	r23, r23
    2502:	88 1f       	adc	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	4a 95       	dec	r20
    2508:	d1 f7       	brne	.-12     	; 0x24fe <micros+0x3c>
}
    250a:	08 95       	ret

0000250c <delay>:

void delay(unsigned long ms)
{
    250c:	8f 92       	push	r8
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	6b 01       	movw	r12, r22
    251e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2520:	d0 df       	rcall	.-96     	; 0x24c2 <micros>
    2522:	4b 01       	movw	r8, r22
    2524:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2526:	c1 14       	cp	r12, r1
    2528:	d1 04       	cpc	r13, r1
    252a:	e1 04       	cpc	r14, r1
    252c:	f1 04       	cpc	r15, r1
		yield();
    252e:	f1 f0       	breq	.+60     	; 0x256c <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2530:	2d d4       	rcall	.+2138   	; 0x2d8c <yield>
    2532:	c7 df       	rcall	.-114    	; 0x24c2 <micros>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	88 19       	sub	r24, r8
    253a:	99 09       	sbc	r25, r9
    253c:	aa 09       	sbc	r26, r10
    253e:	bb 09       	sbc	r27, r11
    2540:	88 3e       	cpi	r24, 0xE8	; 232
    2542:	93 40       	sbci	r25, 0x03	; 3
    2544:	a1 05       	cpc	r26, r1
    2546:	b1 05       	cpc	r27, r1
    2548:	70 f3       	brcs	.-36     	; 0x2526 <delay+0x1a>
			ms--;
    254a:	21 e0       	ldi	r18, 0x01	; 1
    254c:	c2 1a       	sub	r12, r18
    254e:	d1 08       	sbc	r13, r1
    2550:	e1 08       	sbc	r14, r1
    2552:	f1 08       	sbc	r15, r1
			start += 1000;
    2554:	88 ee       	ldi	r24, 0xE8	; 232
    2556:	88 0e       	add	r8, r24
    2558:	83 e0       	ldi	r24, 0x03	; 3
    255a:	98 1e       	adc	r9, r24
    255c:	a1 1c       	adc	r10, r1
    255e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2560:	c1 14       	cp	r12, r1
    2562:	d1 04       	cpc	r13, r1
    2564:	e1 04       	cpc	r14, r1
    2566:	f1 04       	cpc	r15, r1
    2568:	21 f7       	brne	.-56     	; 0x2532 <delay+0x26>
    256a:	dd cf       	rjmp	.-70     	; 0x2526 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    256c:	ff 90       	pop	r15
    256e:	ef 90       	pop	r14
    2570:	df 90       	pop	r13
    2572:	cf 90       	pop	r12
    2574:	bf 90       	pop	r11
    2576:	af 90       	pop	r10
    2578:	9f 90       	pop	r9
    257a:	8f 90       	pop	r8
    257c:	08 95       	ret

0000257e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	91 05       	cpc	r25, r1
    2582:	38 f0       	brcs	.+14     	; 0x2592 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    258c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <delayMicroseconds+0x10>
    2592:	08 95       	ret

00002594 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2594:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2596:	84 b5       	in	r24, 0x24	; 36
    2598:	82 60       	ori	r24, 0x02	; 2
    259a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    259c:	84 b5       	in	r24, 0x24	; 36
    259e:	81 60       	ori	r24, 0x01	; 1
    25a0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    25a2:	85 b5       	in	r24, 0x25	; 37
    25a4:	82 60       	ori	r24, 0x02	; 2
    25a6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    25a8:	85 b5       	in	r24, 0x25	; 37
    25aa:	81 60       	ori	r24, 0x01	; 1
    25ac:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    25ae:	ee e6       	ldi	r30, 0x6E	; 110
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	81 60       	ori	r24, 0x01	; 1
    25b6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    25b8:	e1 e8       	ldi	r30, 0x81	; 129
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    25be:	80 81       	ld	r24, Z
    25c0:	82 60       	ori	r24, 0x02	; 2
    25c2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    25c4:	80 81       	ld	r24, Z
    25c6:	81 60       	ori	r24, 0x01	; 1
    25c8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    25ca:	e0 e8       	ldi	r30, 0x80	; 128
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	81 60       	ori	r24, 0x01	; 1
    25d2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    25d4:	e1 eb       	ldi	r30, 0xB1	; 177
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	84 60       	ori	r24, 0x04	; 4
    25dc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    25de:	e0 eb       	ldi	r30, 0xB0	; 176
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	81 60       	ori	r24, 0x01	; 1
    25e6:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    25e8:	e1 e9       	ldi	r30, 0x91	; 145
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	82 60       	ori	r24, 0x02	; 2
    25f0:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    25f2:	80 81       	ld	r24, Z
    25f4:	81 60       	ori	r24, 0x01	; 1
    25f6:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    25f8:	e0 e9       	ldi	r30, 0x90	; 144
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	81 60       	ori	r24, 0x01	; 1
    2600:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2602:	e1 ea       	ldi	r30, 0xA1	; 161
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	82 60       	ori	r24, 0x02	; 2
    260a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    260c:	80 81       	ld	r24, Z
    260e:	81 60       	ori	r24, 0x01	; 1
    2610:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2612:	e0 ea       	ldi	r30, 0xA0	; 160
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	81 60       	ori	r24, 0x01	; 1
    261a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    261c:	e1 e2       	ldi	r30, 0x21	; 33
    261e:	f1 e0       	ldi	r31, 0x01	; 1
    2620:	80 81       	ld	r24, Z
    2622:	82 60       	ori	r24, 0x02	; 2
    2624:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2626:	80 81       	ld	r24, Z
    2628:	81 60       	ori	r24, 0x01	; 1
    262a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    262c:	e0 e2       	ldi	r30, 0x20	; 32
    262e:	f1 e0       	ldi	r31, 0x01	; 1
    2630:	80 81       	ld	r24, Z
    2632:	81 60       	ori	r24, 0x01	; 1
    2634:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2636:	ea e7       	ldi	r30, 0x7A	; 122
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	84 60       	ori	r24, 0x04	; 4
    263e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2640:	80 81       	ld	r24, Z
    2642:	82 60       	ori	r24, 0x02	; 2
    2644:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2646:	80 81       	ld	r24, Z
    2648:	81 60       	ori	r24, 0x01	; 1
    264a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    264c:	80 81       	ld	r24, Z
    264e:	80 68       	ori	r24, 0x80	; 128
    2650:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2652:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    2656:	08 95       	ret

00002658 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	fc 01       	movw	r30, r24
    265c:	31 97       	sbiw	r30, 0x01	; 1
    265e:	e2 31       	cpi	r30, 0x12	; 18
    2660:	f1 05       	cpc	r31, r1
    2662:	08 f0       	brcs	.+2      	; 0x2666 <turnOffPWM+0xe>
    2664:	4d c0       	rjmp	.+154    	; 0x2700 <turnOffPWM+0xa8>
    2666:	88 27       	eor	r24, r24
    2668:	ed 54       	subi	r30, 0x4D	; 77
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	8f 4f       	sbci	r24, 0xFF	; 255
    266e:	93 c5       	rjmp	.+2854   	; 0x3196 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2670:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2674:	8f 77       	andi	r24, 0x7F	; 127
    2676:	03 c0       	rjmp	.+6      	; 0x267e <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2678:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    267c:	8f 7d       	andi	r24, 0xDF	; 223
    267e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2682:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2684:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2688:	87 7f       	andi	r24, 0xF7	; 247
    268a:	f9 cf       	rjmp	.-14     	; 0x267e <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    268c:	84 b5       	in	r24, 0x24	; 36
    268e:	8f 77       	andi	r24, 0x7F	; 127
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2692:	84 b5       	in	r24, 0x24	; 36
    2694:	8f 7d       	andi	r24, 0xDF	; 223
    2696:	84 bd       	out	0x24, r24	; 36
    2698:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    269a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    269e:	8f 77       	andi	r24, 0x7F	; 127
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    26a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    26a6:	8f 7d       	andi	r24, 0xDF	; 223
    26a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    26ac:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    26ae:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    26b2:	8f 77       	andi	r24, 0x7F	; 127
    26b4:	07 c0       	rjmp	.+14     	; 0x26c4 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    26b6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    26ba:	8f 7d       	andi	r24, 0xDF	; 223
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    26be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    26c2:	87 7f       	andi	r24, 0xF7	; 247
    26c4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    26c8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    26ca:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    26ce:	8f 77       	andi	r24, 0x7F	; 127
    26d0:	07 c0       	rjmp	.+14     	; 0x26e0 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    26d2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    26d6:	8f 7d       	andi	r24, 0xDF	; 223
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    26da:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    26de:	87 7f       	andi	r24, 0xF7	; 247
    26e0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    26e4:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    26e6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    26ea:	8f 77       	andi	r24, 0x7F	; 127
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    26ee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    26f2:	8f 7d       	andi	r24, 0xDF	; 223
    26f4:	03 c0       	rjmp	.+6      	; 0x26fc <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    26f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    26fa:	87 7f       	andi	r24, 0xF7	; 247
    26fc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2700:	08 95       	ret

00002702 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	fc 01       	movw	r30, r24
    270a:	e0 53       	subi	r30, 0x30	; 48
    270c:	fe 4f       	sbci	r31, 0xFE	; 254
    270e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2710:	fc 01       	movw	r30, r24
    2712:	ea 5e       	subi	r30, 0xEA	; 234
    2714:	fd 4f       	sbci	r31, 0xFD	; 253
    2716:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2718:	88 23       	and	r24, r24
    271a:	61 f1       	breq	.+88     	; 0x2774 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	fc 01       	movw	r30, r24
    2724:	ea 58       	subi	r30, 0x8A	; 138
    2726:	fd 4f       	sbci	r31, 0xFD	; 253
    2728:	c5 91       	lpm	r28, Z+
    272a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    272c:	fc 01       	movw	r30, r24
    272e:	e4 5a       	subi	r30, 0xA4	; 164
    2730:	fd 4f       	sbci	r31, 0xFD	; 253
    2732:	a5 91       	lpm	r26, Z+
    2734:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2736:	61 11       	cpse	r22, r1
    2738:	09 c0       	rjmp	.+18     	; 0x274c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    273a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    273c:	f8 94       	cli
		*reg &= ~bit;
    273e:	88 81       	ld	r24, Y
    2740:	20 95       	com	r18
    2742:	82 23       	and	r24, r18
    2744:	88 83       	st	Y, r24
		*out &= ~bit;
    2746:	ec 91       	ld	r30, X
    2748:	2e 23       	and	r18, r30
    274a:	0b c0       	rjmp	.+22     	; 0x2762 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    274c:	62 30       	cpi	r22, 0x02	; 2
    274e:	61 f4       	brne	.+24     	; 0x2768 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2750:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2752:	f8 94       	cli
		*reg &= ~bit;
    2754:	88 81       	ld	r24, Y
    2756:	32 2f       	mov	r19, r18
    2758:	30 95       	com	r19
    275a:	83 23       	and	r24, r19
    275c:	88 83       	st	Y, r24
		*out |= bit;
    275e:	ec 91       	ld	r30, X
    2760:	2e 2b       	or	r18, r30
    2762:	2c 93       	st	X, r18
		SREG = oldSREG;
    2764:	9f bf       	out	0x3f, r25	; 63
    2766:	06 c0       	rjmp	.+12     	; 0x2774 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2768:	8f b7       	in	r24, 0x3f	; 63
                cli();
    276a:	f8 94       	cli
		*reg |= bit;
    276c:	e8 81       	ld	r30, Y
    276e:	2e 2b       	or	r18, r30
    2770:	28 83       	st	Y, r18
		SREG = oldSREG;
    2772:	8f bf       	out	0x3f, r24	; 63
	}
}
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	f9 01       	movw	r30, r18
    2786:	e6 57       	subi	r30, 0x76	; 118
    2788:	fe 4f       	sbci	r31, 0xFE	; 254
    278a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    278c:	f9 01       	movw	r30, r18
    278e:	e0 53       	subi	r30, 0x30	; 48
    2790:	fe 4f       	sbci	r31, 0xFE	; 254
    2792:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2794:	f9 01       	movw	r30, r18
    2796:	ea 5e       	subi	r30, 0xEA	; 234
    2798:	fd 4f       	sbci	r31, 0xFD	; 253
    279a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    279c:	cc 23       	and	r28, r28
    279e:	b9 f0       	breq	.+46     	; 0x27ce <digitalWrite+0x54>
    27a0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    27a2:	81 11       	cpse	r24, r1
    27a4:	59 df       	rcall	.-334    	; 0x2658 <turnOffPWM>

	out = portOutputRegister(port);
    27a6:	ec 2f       	mov	r30, r28
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	ee 0f       	add	r30, r30
    27ac:	ff 1f       	adc	r31, r31
    27ae:	e4 5a       	subi	r30, 0xA4	; 164
    27b0:	fd 4f       	sbci	r31, 0xFD	; 253
    27b2:	a5 91       	lpm	r26, Z+
    27b4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    27b6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    27b8:	f8 94       	cli

	if (val == LOW) {
    27ba:	11 11       	cpse	r17, r1
    27bc:	04 c0       	rjmp	.+8      	; 0x27c6 <digitalWrite+0x4c>
		*out &= ~bit;
    27be:	8c 91       	ld	r24, X
    27c0:	d0 95       	com	r29
    27c2:	d8 23       	and	r29, r24
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <digitalWrite+0x50>
	} else {
		*out |= bit;
    27c6:	ec 91       	ld	r30, X
    27c8:	de 2b       	or	r29, r30
    27ca:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    27cc:	9f bf       	out	0x3f, r25	; 63
}
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	1f 91       	pop	r17
    27d4:	08 95       	ret

000027d6 <_ZN6StringD1Ev>:
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    27d6:	fc 01       	movw	r30, r24
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	7c c5       	rjmp	.+2808   	; 0x32d6 <free>

000027de <_ZN6String10invalidateEv>:
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	ec 01       	movw	r28, r24
    27e4:	88 81       	ld	r24, Y
    27e6:	99 81       	ldd	r25, Y+1	; 0x01
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	09 f0       	breq	.+2      	; 0x27ee <_ZN6String10invalidateEv+0x10>
    27ec:	74 d5       	rcall	.+2792   	; 0x32d6 <free>
    27ee:	19 82       	std	Y+1, r1	; 0x01
    27f0:	18 82       	st	Y, r1
    27f2:	1d 82       	std	Y+5, r1	; 0x05
    27f4:	1c 82       	std	Y+4, r1	; 0x04
    27f6:	1b 82       	std	Y+3, r1	; 0x03
    27f8:	1a 82       	std	Y+2, r1	; 0x02
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	08 95       	ret

00002800 <_ZN6String12changeBufferEj>:
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	cf 93       	push	r28
    2806:	df 93       	push	r29
    2808:	ec 01       	movw	r28, r24
    280a:	8b 01       	movw	r16, r22
    280c:	6f 5f       	subi	r22, 0xFF	; 255
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	88 81       	ld	r24, Y
    2812:	99 81       	ldd	r25, Y+1	; 0x01
    2814:	e9 d5       	rcall	.+3026   	; 0x33e8 <realloc>
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	31 f0       	breq	.+12     	; 0x2826 <_ZN6String12changeBufferEj+0x26>
    281a:	99 83       	std	Y+1, r25	; 0x01
    281c:	88 83       	st	Y, r24
    281e:	1b 83       	std	Y+3, r17	; 0x03
    2820:	0a 83       	std	Y+2, r16	; 0x02
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	01 c0       	rjmp	.+2      	; 0x2828 <_ZN6String12changeBufferEj+0x28>
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	08 95       	ret

00002832 <_ZN6String7reserveEj>:
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	ec 01       	movw	r28, r24
    2838:	88 81       	ld	r24, Y
    283a:	99 81       	ldd	r25, Y+1	; 0x01
    283c:	89 2b       	or	r24, r25
    283e:	29 f0       	breq	.+10     	; 0x284a <_ZN6String7reserveEj+0x18>
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	9b 81       	ldd	r25, Y+3	; 0x03
    2844:	86 17       	cp	r24, r22
    2846:	97 07       	cpc	r25, r23
    2848:	58 f4       	brcc	.+22     	; 0x2860 <_ZN6String7reserveEj+0x2e>
    284a:	ce 01       	movw	r24, r28
    284c:	d9 df       	rcall	.-78     	; 0x2800 <_ZN6String12changeBufferEj>
    284e:	88 23       	and	r24, r24
    2850:	41 f0       	breq	.+16     	; 0x2862 <_ZN6String7reserveEj+0x30>
    2852:	8c 81       	ldd	r24, Y+4	; 0x04
    2854:	9d 81       	ldd	r25, Y+5	; 0x05
    2856:	89 2b       	or	r24, r25
    2858:	19 f4       	brne	.+6      	; 0x2860 <_ZN6String7reserveEj+0x2e>
    285a:	e8 81       	ld	r30, Y
    285c:	f9 81       	ldd	r31, Y+1	; 0x01
    285e:	10 82       	st	Z, r1
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	08 95       	ret

00002868 <_ZN6String4copyEPKcj>:
    2868:	ef 92       	push	r14
    286a:	ff 92       	push	r15
    286c:	0f 93       	push	r16
    286e:	1f 93       	push	r17
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	ec 01       	movw	r28, r24
    2876:	7b 01       	movw	r14, r22
    2878:	8a 01       	movw	r16, r20
    287a:	ba 01       	movw	r22, r20
    287c:	da df       	rcall	.-76     	; 0x2832 <_ZN6String7reserveEj>
    287e:	81 11       	cpse	r24, r1
    2880:	03 c0       	rjmp	.+6      	; 0x2888 <_ZN6String4copyEPKcj+0x20>
    2882:	ce 01       	movw	r24, r28
    2884:	ac df       	rcall	.-168    	; 0x27de <_ZN6String10invalidateEv>
    2886:	06 c0       	rjmp	.+12     	; 0x2894 <_ZN6String4copyEPKcj+0x2c>
    2888:	1d 83       	std	Y+5, r17	; 0x05
    288a:	0c 83       	std	Y+4, r16	; 0x04
    288c:	b7 01       	movw	r22, r14
    288e:	88 81       	ld	r24, Y
    2890:	99 81       	ldd	r25, Y+1	; 0x01
    2892:	93 d6       	rcall	.+3366   	; 0x35ba <strcpy>
    2894:	ce 01       	movw	r24, r28
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	ff 90       	pop	r15
    28a0:	ef 90       	pop	r14
    28a2:	08 95       	ret

000028a4 <_ZN6StringC1EPKc>:
    28a4:	fc 01       	movw	r30, r24
    28a6:	11 82       	std	Z+1, r1	; 0x01
    28a8:	10 82       	st	Z, r1
    28aa:	13 82       	std	Z+3, r1	; 0x03
    28ac:	12 82       	std	Z+2, r1	; 0x02
    28ae:	15 82       	std	Z+5, r1	; 0x05
    28b0:	14 82       	std	Z+4, r1	; 0x04
    28b2:	61 15       	cp	r22, r1
    28b4:	71 05       	cpc	r23, r1
    28b6:	49 f0       	breq	.+18     	; 0x28ca <_ZN6StringC1EPKc+0x26>
    28b8:	fb 01       	movw	r30, r22
    28ba:	01 90       	ld	r0, Z+
    28bc:	00 20       	and	r0, r0
    28be:	e9 f7       	brne	.-6      	; 0x28ba <_ZN6StringC1EPKc+0x16>
    28c0:	31 97       	sbiw	r30, 0x01	; 1
    28c2:	af 01       	movw	r20, r30
    28c4:	46 1b       	sub	r20, r22
    28c6:	57 0b       	sbc	r21, r23
    28c8:	cf cf       	rjmp	.-98     	; 0x2868 <_ZN6String4copyEPKcj>
    28ca:	08 95       	ret

000028cc <_ZN6StringaSERKS_>:
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	ec 01       	movw	r28, r24
    28d2:	fb 01       	movw	r30, r22
    28d4:	86 17       	cp	r24, r22
    28d6:	97 07       	cpc	r25, r23
    28d8:	51 f0       	breq	.+20     	; 0x28ee <_ZN6StringaSERKS_+0x22>
    28da:	60 81       	ld	r22, Z
    28dc:	71 81       	ldd	r23, Z+1	; 0x01
    28de:	61 15       	cp	r22, r1
    28e0:	71 05       	cpc	r23, r1
    28e2:	21 f0       	breq	.+8      	; 0x28ec <_ZN6StringaSERKS_+0x20>
    28e4:	44 81       	ldd	r20, Z+4	; 0x04
    28e6:	55 81       	ldd	r21, Z+5	; 0x05
    28e8:	bf df       	rcall	.-130    	; 0x2868 <_ZN6String4copyEPKcj>
    28ea:	01 c0       	rjmp	.+2      	; 0x28ee <_ZN6StringaSERKS_+0x22>
    28ec:	78 df       	rcall	.-272    	; 0x27de <_ZN6String10invalidateEv>
    28ee:	ce 01       	movw	r24, r28
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	08 95       	ret

000028f6 <_ZN6StringC1ERKS_>:
    28f6:	fc 01       	movw	r30, r24
    28f8:	11 82       	std	Z+1, r1	; 0x01
    28fa:	10 82       	st	Z, r1
    28fc:	13 82       	std	Z+3, r1	; 0x03
    28fe:	12 82       	std	Z+2, r1	; 0x02
    2900:	15 82       	std	Z+5, r1	; 0x05
    2902:	14 82       	std	Z+4, r1	; 0x04
    2904:	e3 cf       	rjmp	.-58     	; 0x28cc <_ZN6StringaSERKS_>

00002906 <_ZN6String6concatEPKcj>:
    2906:	ef 92       	push	r14
    2908:	ff 92       	push	r15
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	cf 93       	push	r28
    2910:	df 93       	push	r29
    2912:	61 15       	cp	r22, r1
    2914:	71 05       	cpc	r23, r1
    2916:	11 f4       	brne	.+4      	; 0x291c <_ZN6String6concatEPKcj+0x16>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	1a c0       	rjmp	.+52     	; 0x2950 <_ZN6String6concatEPKcj+0x4a>
    291c:	41 15       	cp	r20, r1
    291e:	51 05       	cpc	r21, r1
    2920:	b1 f0       	breq	.+44     	; 0x294e <_ZN6String6concatEPKcj+0x48>
    2922:	7b 01       	movw	r14, r22
    2924:	ec 01       	movw	r28, r24
    2926:	8c 81       	ldd	r24, Y+4	; 0x04
    2928:	9d 81       	ldd	r25, Y+5	; 0x05
    292a:	8a 01       	movw	r16, r20
    292c:	08 0f       	add	r16, r24
    292e:	19 1f       	adc	r17, r25
    2930:	b8 01       	movw	r22, r16
    2932:	ce 01       	movw	r24, r28
    2934:	7e df       	rcall	.-260    	; 0x2832 <_ZN6String7reserveEj>
    2936:	88 23       	and	r24, r24
    2938:	79 f3       	breq	.-34     	; 0x2918 <_ZN6String6concatEPKcj+0x12>
    293a:	28 81       	ld	r18, Y
    293c:	39 81       	ldd	r19, Y+1	; 0x01
    293e:	8c 81       	ldd	r24, Y+4	; 0x04
    2940:	9d 81       	ldd	r25, Y+5	; 0x05
    2942:	b7 01       	movw	r22, r14
    2944:	82 0f       	add	r24, r18
    2946:	93 1f       	adc	r25, r19
    2948:	38 d6       	rcall	.+3184   	; 0x35ba <strcpy>
    294a:	1d 83       	std	Y+5, r17	; 0x05
    294c:	0c 83       	std	Y+4, r16	; 0x04
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
    295c:	08 95       	ret

0000295e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    2964:	fb 01       	movw	r30, r22
    2966:	44 81       	ldd	r20, Z+4	; 0x04
    2968:	55 81       	ldd	r21, Z+5	; 0x05
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	cb df       	rcall	.-106    	; 0x2906 <_ZN6String6concatEPKcj>
    2970:	81 11       	cpse	r24, r1
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <_ZplRK15StringSumHelperRK6String+0x1a>
    2974:	ce 01       	movw	r24, r28
    2976:	33 df       	rcall	.-410    	; 0x27de <_ZN6String10invalidateEv>
	return a;
}
    2978:	ce 01       	movw	r24, r28
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	08 95       	ret

00002980 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    2986:	61 15       	cp	r22, r1
    2988:	71 05       	cpc	r23, r1
    298a:	59 f0       	breq	.+22     	; 0x29a2 <_ZplRK15StringSumHelperPKc+0x22>
    298c:	fb 01       	movw	r30, r22
    298e:	01 90       	ld	r0, Z+
    2990:	00 20       	and	r0, r0
    2992:	e9 f7       	brne	.-6      	; 0x298e <_ZplRK15StringSumHelperPKc+0xe>
    2994:	31 97       	sbiw	r30, 0x01	; 1
    2996:	af 01       	movw	r20, r30
    2998:	46 1b       	sub	r20, r22
    299a:	57 0b       	sbc	r21, r23
    299c:	b4 df       	rcall	.-152    	; 0x2906 <_ZN6String6concatEPKcj>
    299e:	81 11       	cpse	r24, r1
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <_ZplRK15StringSumHelperPKc+0x26>
    29a2:	ce 01       	movw	r24, r28
    29a4:	1c df       	rcall	.-456    	; 0x27de <_ZN6String10invalidateEv>
	return a;
}
    29a6:	ce 01       	movw	r24, r28
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	08 95       	ret

000029ae <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    29ae:	fc 01       	movw	r30, r24
    29b0:	13 82       	std	Z+3, r1	; 0x03
    29b2:	12 82       	std	Z+2, r1	; 0x02
    29b4:	83 e1       	ldi	r24, 0x13	; 19
    29b6:	93 e0       	ldi	r25, 0x03	; 3
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	80 83       	st	Z, r24
    29bc:	64 83       	std	Z+4, r22	; 0x04
    29be:	41 87       	std	Z+9, r20	; 0x09
    29c0:	22 87       	std	Z+10, r18	; 0x0a
    29c2:	13 86       	std	Z+11, r1	; 0x0b
    29c4:	08 95       	ret

000029c6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	ec 01       	movw	r28, r24
    29ce:	16 2f       	mov	r17, r22
    29d0:	6c 81       	ldd	r22, Y+4	; 0x04
    29d2:	8e ec       	ldi	r24, 0xCE	; 206
    29d4:	94 e0       	ldi	r25, 0x04	; 4
    29d6:	b9 d1       	rcall	.+882    	; 0x2d4a <_ZN7TwoWire17beginTransmissionEh>
    29d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29da:	61 2b       	or	r22, r17
    29dc:	8e ec       	ldi	r24, 0xCE	; 206
    29de:	94 e0       	ldi	r25, 0x04	; 4
    29e0:	67 d1       	rcall	.+718    	; 0x2cb0 <_ZN7TwoWire5writeEh>
    29e2:	8e ec       	ldi	r24, 0xCE	; 206
    29e4:	94 e0       	ldi	r25, 0x04	; 4
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	ca c1       	rjmp	.+916    	; 0x2d82 <_ZN7TwoWire15endTransmissionEv>

000029ee <_ZN17LiquidCrystal_I2C9backlightEv>:
    29ee:	28 e0       	ldi	r18, 0x08	; 8
    29f0:	fc 01       	movw	r30, r24
    29f2:	23 87       	std	Z+11, r18	; 0x0b
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	e7 cf       	rjmp	.-50     	; 0x29c6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000029f8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	8c 01       	movw	r16, r24
    2a00:	c6 2f       	mov	r28, r22
    2a02:	64 60       	ori	r22, 0x04	; 4
    2a04:	e0 df       	rcall	.-64     	; 0x29c6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	b9 dd       	rcall	.-1166   	; 0x257e <delayMicroseconds>
    2a0c:	6c 2f       	mov	r22, r28
    2a0e:	6b 7f       	andi	r22, 0xFB	; 251
    2a10:	c8 01       	movw	r24, r16
    2a12:	d9 df       	rcall	.-78     	; 0x29c6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2a14:	82 e3       	ldi	r24, 0x32	; 50
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	cf 91       	pop	r28
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	af cd       	rjmp	.-1186   	; 0x257e <delayMicroseconds>

00002a20 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	ec 01       	movw	r28, r24
    2a28:	16 2f       	mov	r17, r22
    2a2a:	cd df       	rcall	.-102    	; 0x29c6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2a2c:	61 2f       	mov	r22, r17
    2a2e:	ce 01       	movw	r24, r28
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	1f 91       	pop	r17
    2a36:	e0 cf       	rjmp	.-64     	; 0x29f8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002a38 <_ZN17LiquidCrystal_I2C4sendEhh>:
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	8c 01       	movw	r16, r24
    2a42:	c6 2f       	mov	r28, r22
    2a44:	d4 2f       	mov	r29, r20
    2a46:	60 7f       	andi	r22, 0xF0	; 240
    2a48:	64 2b       	or	r22, r20
    2a4a:	ea df       	rcall	.-44     	; 0x2a20 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2a4c:	80 e1       	ldi	r24, 0x10	; 16
    2a4e:	c8 9f       	mul	r28, r24
    2a50:	b0 01       	movw	r22, r0
    2a52:	11 24       	eor	r1, r1
    2a54:	6d 2b       	or	r22, r29
    2a56:	c8 01       	movw	r24, r16
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	df cf       	rjmp	.-66     	; 0x2a20 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002a62 <_ZN17LiquidCrystal_I2C7commandEh>:
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	e9 cf       	rjmp	.-46     	; 0x2a38 <_ZN17LiquidCrystal_I2C4sendEhh>

00002a66 <_ZN17LiquidCrystal_I2C5clearEv>:
    2a66:	61 e0       	ldi	r22, 0x01	; 1
    2a68:	fc df       	rcall	.-8      	; 0x2a62 <_ZN17LiquidCrystal_I2C7commandEh>
    2a6a:	80 ed       	ldi	r24, 0xD0	; 208
    2a6c:	97 e0       	ldi	r25, 0x07	; 7
    2a6e:	87 cd       	rjmp	.-1266   	; 0x257e <delayMicroseconds>

00002a70 <_ZN17LiquidCrystal_I2C4homeEv>:
    2a70:	62 e0       	ldi	r22, 0x02	; 2
    2a72:	f7 df       	rcall	.-18     	; 0x2a62 <_ZN17LiquidCrystal_I2C7commandEh>
    2a74:	80 ed       	ldi	r24, 0xD0	; 208
    2a76:	97 e0       	ldi	r25, 0x07	; 7
    2a78:	82 cd       	rjmp	.-1276   	; 0x257e <delayMicroseconds>

00002a7a <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	28 97       	sbiw	r28, 0x08	; 8
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	9c 01       	movw	r18, r24
    2a90:	88 e0       	ldi	r24, 0x08	; 8
    2a92:	e8 e0       	ldi	r30, 0x08	; 8
    2a94:	f2 e0       	ldi	r31, 0x02	; 2
    2a96:	de 01       	movw	r26, r28
    2a98:	11 96       	adiw	r26, 0x01	; 1
    2a9a:	01 90       	ld	r0, Z+
    2a9c:	0d 92       	st	X+, r0
    2a9e:	8a 95       	dec	r24
    2aa0:	e1 f7       	brne	.-8      	; 0x2a9a <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2aa2:	f9 01       	movw	r30, r18
    2aa4:	80 85       	ldd	r24, Z+8	; 0x08
    2aa6:	84 17       	cp	r24, r20
    2aa8:	10 f4       	brcc	.+4      	; 0x2aae <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2aaa:	4f ef       	ldi	r20, 0xFF	; 255
    2aac:	48 0f       	add	r20, r24
    2aae:	fe 01       	movw	r30, r28
    2ab0:	31 96       	adiw	r30, 0x01	; 1
    2ab2:	e4 0f       	add	r30, r20
    2ab4:	f1 1d       	adc	r31, r1
    2ab6:	e4 0f       	add	r30, r20
    2ab8:	f1 1d       	adc	r31, r1
    2aba:	90 81       	ld	r25, Z
    2abc:	69 0f       	add	r22, r25
    2abe:	60 68       	ori	r22, 0x80	; 128
    2ac0:	c9 01       	movw	r24, r18
    2ac2:	28 96       	adiw	r28, 0x08	; 8
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	c7 cf       	rjmp	.-114    	; 0x2a62 <_ZN17LiquidCrystal_I2C7commandEh>

00002ad4 <_ZN17LiquidCrystal_I2C7displayEv>:
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	66 81       	ldd	r22, Z+6	; 0x06
    2ad8:	26 2f       	mov	r18, r22
    2ada:	24 60       	ori	r18, 0x04	; 4
    2adc:	26 83       	std	Z+6, r18	; 0x06
    2ade:	6c 60       	ori	r22, 0x0C	; 12
    2ae0:	c0 cf       	rjmp	.-128    	; 0x2a62 <_ZN17LiquidCrystal_I2C7commandEh>

00002ae2 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    2ae2:	41 e0       	ldi	r20, 0x01	; 1
    2ae4:	a9 df       	rcall	.-174    	; 0x2a38 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	08 95       	ret

00002aec <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2af2:	42 30       	cpi	r20, 0x02	; 2
    2af4:	18 f0       	brcs	.+6      	; 0x2afc <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	88 60       	ori	r24, 0x08	; 8
    2afa:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    2afc:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    2afe:	22 23       	and	r18, r18
    2b00:	29 f0       	breq	.+10     	; 0x2b0c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    2b02:	41 30       	cpi	r20, 0x01	; 1
    2b04:	19 f4       	brne	.+6      	; 0x2b0c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	84 60       	ori	r24, 0x04	; 4
    2b0a:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2b0c:	62 e3       	ldi	r22, 0x32	; 50
    2b0e:	70 e0       	ldi	r23, 0x00	; 0
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	fb dc       	rcall	.-1546   	; 0x250c <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b18:	ce 01       	movw	r24, r28
    2b1a:	55 df       	rcall	.-342    	; 0x29c6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    2b1c:	68 ee       	ldi	r22, 0xE8	; 232
    2b1e:	73 e0       	ldi	r23, 0x03	; 3
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	f3 dc       	rcall	.-1562   	; 0x250c <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2b26:	60 e3       	ldi	r22, 0x30	; 48
    2b28:	ce 01       	movw	r24, r28
    2b2a:	7a df       	rcall	.-268    	; 0x2a20 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2b2c:	84 e9       	ldi	r24, 0x94	; 148
    2b2e:	91 e1       	ldi	r25, 0x11	; 17
    2b30:	26 dd       	rcall	.-1460   	; 0x257e <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2b32:	60 e3       	ldi	r22, 0x30	; 48
    2b34:	ce 01       	movw	r24, r28
    2b36:	74 df       	rcall	.-280    	; 0x2a20 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2b38:	84 e9       	ldi	r24, 0x94	; 148
    2b3a:	91 e1       	ldi	r25, 0x11	; 17
    2b3c:	20 dd       	rcall	.-1472   	; 0x257e <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2b3e:	60 e3       	ldi	r22, 0x30	; 48
    2b40:	ce 01       	movw	r24, r28
    2b42:	6e df       	rcall	.-292    	; 0x2a20 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    2b44:	86 e9       	ldi	r24, 0x96	; 150
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	1a dd       	rcall	.-1484   	; 0x257e <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2b4a:	60 e2       	ldi	r22, 0x20	; 32
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	68 df       	rcall	.-304    	; 0x2a20 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2b50:	6d 81       	ldd	r22, Y+5	; 0x05
    2b52:	60 62       	ori	r22, 0x20	; 32
    2b54:	ce 01       	movw	r24, r28
    2b56:	85 df       	rcall	.-246    	; 0x2a62 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2b58:	84 e0       	ldi	r24, 0x04	; 4
    2b5a:	8e 83       	std	Y+6, r24	; 0x06
	display();
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	ba df       	rcall	.-140    	; 0x2ad4 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2b60:	ce 01       	movw	r24, r28
    2b62:	81 df       	rcall	.-254    	; 0x2a66 <_ZN17LiquidCrystal_I2C5clearEv>
    2b64:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2b66:	8f 83       	std	Y+7, r24	; 0x07
    2b68:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	7a df       	rcall	.-268    	; 0x2a62 <_ZN17LiquidCrystal_I2C7commandEh>
    2b6e:	ce 01       	movw	r24, r28
    2b70:	df 91       	pop	r29
	
	home();
    2b72:	cf 91       	pop	r28
  
}
    2b74:	7d cf       	rjmp	.-262    	; 0x2a70 <_ZN17LiquidCrystal_I2C4homeEv>

00002b76 <_ZN17LiquidCrystal_I2C9init_privEv>:
    2b76:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2b78:	df 93       	push	r29
    2b7a:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    2b7c:	8e ec       	ldi	r24, 0xCE	; 206
    2b7e:	94 e0       	ldi	r25, 0x04	; 4
    2b80:	d5 d0       	rcall	.+426    	; 0x2d2c <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2b82:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b88:	69 85       	ldd	r22, Y+9	; 0x09
    2b8a:	ce 01       	movw	r24, r28
}
    2b8c:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2b8e:	cf 91       	pop	r28
    2b90:	ad cf       	rjmp	.-166    	; 0x2aec <_ZN17LiquidCrystal_I2C5beginEhhh>

00002b92 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2b92:	f1 cf       	rjmp	.-30     	; 0x2b76 <_ZN17LiquidCrystal_I2C9init_privEv>

00002b94 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2b94:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN7TwoWire14rxBufferLengthE>
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <_ZN7TwoWire13rxBufferIndexE>
    2b9e:	82 1b       	sub	r24, r18
    2ba0:	91 09       	sbc	r25, r1
    2ba2:	08 95       	ret

00002ba4 <_ZN7TwoWire4readEv>:
    2ba4:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <_ZN7TwoWire13rxBufferIndexE>
    2ba8:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN7TwoWire14rxBufferLengthE>
    2bac:	98 17       	cp	r25, r24
    2bae:	50 f4       	brcc	.+20     	; 0x2bc4 <_ZN7TwoWire4readEv+0x20>
    2bb0:	e9 2f       	mov	r30, r25
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	ec 5f       	subi	r30, 0xFC	; 252
    2bb6:	fa 4f       	sbci	r31, 0xFA	; 250
    2bb8:	20 81       	ld	r18, Z
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	9f 5f       	subi	r25, 0xFF	; 255
    2bbe:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <_ZN7TwoWire13rxBufferIndexE>
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <_ZN7TwoWire4readEv+0x24>
    2bc4:	2f ef       	ldi	r18, 0xFF	; 255
    2bc6:	3f ef       	ldi	r19, 0xFF	; 255
    2bc8:	c9 01       	movw	r24, r18
    2bca:	08 95       	ret

00002bcc <_ZN7TwoWire4peekEv>:
    2bcc:	e0 91 03 05 	lds	r30, 0x0503	; 0x800503 <_ZN7TwoWire13rxBufferIndexE>
    2bd0:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN7TwoWire14rxBufferLengthE>
    2bd4:	e8 17       	cp	r30, r24
    2bd6:	30 f4       	brcc	.+12     	; 0x2be4 <_ZN7TwoWire4peekEv+0x18>
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	ec 5f       	subi	r30, 0xFC	; 252
    2bdc:	fa 4f       	sbci	r31, 0xFA	; 250
    2bde:	80 81       	ld	r24, Z
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	08 95       	ret
    2be4:	8f ef       	ldi	r24, 0xFF	; 255
    2be6:	9f ef       	ldi	r25, 0xFF	; 255
    2be8:	08 95       	ret

00002bea <_ZN7TwoWire5flushEv>:
    2bea:	08 95       	ret

00002bec <_ZN7TwoWire16onReceiveServiceEPhi>:
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	ec 01       	movw	r28, r24
    2bf2:	e0 91 da 04 	lds	r30, 0x04DA	; 0x8004da <_ZN7TwoWire14user_onReceiveE>
    2bf6:	f0 91 db 04 	lds	r31, 0x04DB	; 0x8004db <_ZN7TwoWire14user_onReceiveE+0x1>
    2bfa:	30 97       	sbiw	r30, 0x00	; 0
    2bfc:	f1 f0       	breq	.+60     	; 0x2c3a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2bfe:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <_ZN7TwoWire13rxBufferIndexE>
    2c02:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN7TwoWire14rxBufferLengthE>
    2c06:	98 17       	cp	r25, r24
    2c08:	c0 f0       	brcs	.+48     	; 0x2c3a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	29 2f       	mov	r18, r25
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	26 17       	cp	r18, r22
    2c12:	37 07       	cpc	r19, r23
    2c14:	54 f4       	brge	.+20     	; 0x2c2a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2c16:	de 01       	movw	r26, r28
    2c18:	a2 0f       	add	r26, r18
    2c1a:	b3 1f       	adc	r27, r19
    2c1c:	4c 91       	ld	r20, X
    2c1e:	d9 01       	movw	r26, r18
    2c20:	ac 5f       	subi	r26, 0xFC	; 252
    2c22:	ba 4f       	sbci	r27, 0xFA	; 250
    2c24:	4c 93       	st	X, r20
    2c26:	9f 5f       	subi	r25, 0xFF	; 255
    2c28:	f1 cf       	rjmp	.-30     	; 0x2c0c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2c2a:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZN7TwoWire13rxBufferIndexE>
    2c2e:	60 93 02 05 	sts	0x0502, r22	; 0x800502 <_ZN7TwoWire14rxBufferLengthE>
    2c32:	cb 01       	movw	r24, r22
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	19 94       	eijmp
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	08 95       	ret

00002c40 <_ZN7TwoWire16onRequestServiceEv>:
    2c40:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <_ZN7TwoWire14user_onRequestE>
    2c44:	f0 91 dd 04 	lds	r31, 0x04DD	; 0x8004dd <_ZN7TwoWire14user_onRequestE+0x1>
    2c48:	30 97       	sbiw	r30, 0x00	; 0
    2c4a:	29 f0       	breq	.+10     	; 0x2c56 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2c4c:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <_ZN7TwoWire13txBufferIndexE>
    2c50:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <_ZN7TwoWire14txBufferLengthE>
    2c54:	19 94       	eijmp
    2c56:	08 95       	ret

00002c58 <_ZN7TwoWire5writeEPKhj>:
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	7c 01       	movw	r14, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	8a 01       	movw	r16, r20
    2c6e:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <_ZN7TwoWire12transmittingE>
    2c72:	22 23       	and	r18, r18
    2c74:	89 f0       	breq	.+34     	; 0x2c98 <_ZN7TwoWire5writeEPKhj+0x40>
    2c76:	eb 01       	movw	r28, r22
    2c78:	6b 01       	movw	r12, r22
    2c7a:	c4 0e       	add	r12, r20
    2c7c:	d5 1e       	adc	r13, r21
    2c7e:	cc 15       	cp	r28, r12
    2c80:	dd 05       	cpc	r29, r13
    2c82:	61 f0       	breq	.+24     	; 0x2c9c <_ZN7TwoWire5writeEPKhj+0x44>
    2c84:	69 91       	ld	r22, Y+
    2c86:	d7 01       	movw	r26, r14
    2c88:	ed 91       	ld	r30, X+
    2c8a:	fc 91       	ld	r31, X
    2c8c:	01 90       	ld	r0, Z+
    2c8e:	f0 81       	ld	r31, Z
    2c90:	e0 2d       	mov	r30, r0
    2c92:	c7 01       	movw	r24, r14
    2c94:	19 95       	eicall
    2c96:	f3 cf       	rjmp	.-26     	; 0x2c7e <_ZN7TwoWire5writeEPKhj+0x26>
    2c98:	64 2f       	mov	r22, r20
    2c9a:	eb d0       	rcall	.+470    	; 0x2e72 <twi_transmit>
    2c9c:	c8 01       	movw	r24, r16
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	df 90       	pop	r13
    2cac:	cf 90       	pop	r12
    2cae:	08 95       	ret

00002cb0 <_ZN7TwoWire5writeEh>:
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	1f 92       	push	r1
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	69 83       	std	Y+1, r22	; 0x01
    2cbc:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <_ZN7TwoWire12transmittingE>
    2cc0:	22 23       	and	r18, r18
    2cc2:	d1 f0       	breq	.+52     	; 0x2cf8 <_ZN7TwoWire5writeEh+0x48>
    2cc4:	20 91 df 04 	lds	r18, 0x04DF	; 0x8004df <_ZN7TwoWire14txBufferLengthE>
    2cc8:	20 32       	cpi	r18, 0x20	; 32
    2cca:	40 f0       	brcs	.+16     	; 0x2cdc <_ZN7TwoWire5writeEh+0x2c>
    2ccc:	21 e0       	ldi	r18, 0x01	; 1
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	33 83       	std	Z+3, r19	; 0x03
    2cd4:	22 83       	std	Z+2, r18	; 0x02
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	14 c0       	rjmp	.+40     	; 0x2d04 <_ZN7TwoWire5writeEh+0x54>
    2cdc:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <_ZN7TwoWire13txBufferIndexE>
    2ce0:	e8 2f       	mov	r30, r24
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	ef 51       	subi	r30, 0x1F	; 31
    2ce6:	fb 4f       	sbci	r31, 0xFB	; 251
    2ce8:	99 81       	ldd	r25, Y+1	; 0x01
    2cea:	90 83       	st	Z, r25
    2cec:	8f 5f       	subi	r24, 0xFF	; 255
    2cee:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <_ZN7TwoWire13txBufferIndexE>
    2cf2:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <_ZN7TwoWire14txBufferLengthE>
    2cf6:	04 c0       	rjmp	.+8      	; 0x2d00 <_ZN7TwoWire5writeEh+0x50>
    2cf8:	61 e0       	ldi	r22, 0x01	; 1
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	b9 d0       	rcall	.+370    	; 0x2e72 <twi_transmit>
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0f 90       	pop	r0
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	08 95       	ret

00002d0c <_ZN7TwoWireC1Ev>:
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	13 82       	std	Z+3, r1	; 0x03
    2d10:	12 82       	std	Z+2, r1	; 0x02
    2d12:	88 ee       	ldi	r24, 0xE8	; 232
    2d14:	93 e0       	ldi	r25, 0x03	; 3
    2d16:	a0 e0       	ldi	r26, 0x00	; 0
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	84 83       	std	Z+4, r24	; 0x04
    2d1c:	95 83       	std	Z+5, r25	; 0x05
    2d1e:	a6 83       	std	Z+6, r26	; 0x06
    2d20:	b7 83       	std	Z+7, r27	; 0x07
    2d22:	8f e1       	ldi	r24, 0x1F	; 31
    2d24:	93 e0       	ldi	r25, 0x03	; 3
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	80 83       	st	Z, r24
    2d2a:	08 95       	ret

00002d2c <_ZN7TwoWire5beginEv>:
    2d2c:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZN7TwoWire13rxBufferIndexE>
    2d30:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN7TwoWire14rxBufferLengthE>
    2d34:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <_ZN7TwoWire13txBufferIndexE>
    2d38:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <_ZN7TwoWire14txBufferLengthE>
    2d3c:	28 d0       	rcall	.+80     	; 0x2d8e <twi_init>
    2d3e:	80 e2       	ldi	r24, 0x20	; 32
    2d40:	96 e1       	ldi	r25, 0x16	; 22
    2d42:	c4 d0       	rcall	.+392    	; 0x2ecc <twi_attachSlaveTxEvent>
    2d44:	86 ef       	ldi	r24, 0xF6	; 246
    2d46:	95 e1       	ldi	r25, 0x15	; 21
    2d48:	bc c0       	rjmp	.+376    	; 0x2ec2 <twi_attachSlaveRxEvent>

00002d4a <_ZN7TwoWire17beginTransmissionEh>:
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <_ZN7TwoWire12transmittingE>
    2d50:	60 93 01 05 	sts	0x0501, r22	; 0x800501 <_ZN7TwoWire9txAddressE>
    2d54:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <_ZN7TwoWire13txBufferIndexE>
    2d58:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <_ZN7TwoWire14txBufferLengthE>
    2d5c:	08 95       	ret

00002d5e <_ZN7TwoWire15endTransmissionEh>:
    2d5e:	0f 93       	push	r16
    2d60:	06 2f       	mov	r16, r22
    2d62:	21 e0       	ldi	r18, 0x01	; 1
    2d64:	40 91 df 04 	lds	r20, 0x04DF	; 0x8004df <_ZN7TwoWire14txBufferLengthE>
    2d68:	61 ee       	ldi	r22, 0xE1	; 225
    2d6a:	74 e0       	ldi	r23, 0x04	; 4
    2d6c:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN7TwoWire9txAddressE>
    2d70:	2a d0       	rcall	.+84     	; 0x2dc6 <twi_writeTo>
    2d72:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <_ZN7TwoWire13txBufferIndexE>
    2d76:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <_ZN7TwoWire14txBufferLengthE>
    2d7a:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <_ZN7TwoWire12transmittingE>
    2d7e:	0f 91       	pop	r16
    2d80:	08 95       	ret

00002d82 <_ZN7TwoWire15endTransmissionEv>:
    2d82:	61 e0       	ldi	r22, 0x01	; 1
    2d84:	ec cf       	rjmp	.-40     	; 0x2d5e <_ZN7TwoWire15endTransmissionEh>

00002d86 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2d86:	8e ec       	ldi	r24, 0xCE	; 206
    2d88:	94 e0       	ldi	r25, 0x04	; 4
    2d8a:	c0 cf       	rjmp	.-128    	; 0x2d0c <_ZN7TwoWireC1Ev>

00002d8c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2d8c:	08 95       	ret

00002d8e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d8e:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <twi_state>
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_sendStop>
    2d98:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <twi_inRepStart>
    2d9c:	61 e0       	ldi	r22, 0x01	; 1
    2d9e:	84 e1       	ldi	r24, 0x14	; 20
    2da0:	ec dc       	rcall	.-1576   	; 0x277a <digitalWrite>
    2da2:	61 e0       	ldi	r22, 0x01	; 1
    2da4:	85 e1       	ldi	r24, 0x15	; 21
    2da6:	e9 dc       	rcall	.-1582   	; 0x277a <digitalWrite>
    2da8:	e9 eb       	ldi	r30, 0xB9	; 185
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	8e 7f       	andi	r24, 0xFE	; 254
    2db0:	80 83       	st	Z, r24
    2db2:	80 81       	ld	r24, Z
    2db4:	8d 7f       	andi	r24, 0xFD	; 253
    2db6:	80 83       	st	Z, r24
    2db8:	88 e4       	ldi	r24, 0x48	; 72
    2dba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2dbe:	85 e4       	ldi	r24, 0x45	; 69
    2dc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2dc4:	08 95       	ret

00002dc6 <twi_writeTo>:
    2dc6:	0f 93       	push	r16
    2dc8:	41 32       	cpi	r20, 0x21	; 33
    2dca:	08 f0       	brcs	.+2      	; 0x2dce <twi_writeTo+0x8>
    2dcc:	4a c0       	rjmp	.+148    	; 0x2e62 <twi_writeTo+0x9c>
    2dce:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <twi_state>
    2dd2:	91 11       	cpse	r25, r1
    2dd4:	fc cf       	rjmp	.-8      	; 0x2dce <twi_writeTo+0x8>
    2dd6:	32 e0       	ldi	r19, 0x02	; 2
    2dd8:	30 93 91 05 	sts	0x0591, r19	; 0x800591 <twi_state>
    2ddc:	00 93 8f 05 	sts	0x058F, r16	; 0x80058f <twi_sendStop>
    2de0:	3f ef       	ldi	r19, 0xFF	; 255
    2de2:	30 93 24 05 	sts	0x0524, r19	; 0x800524 <twi_error>
    2de6:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <twi_masterBufferIndex>
    2dea:	40 93 68 05 	sts	0x0568, r20	; 0x800568 <twi_masterBufferLength>
    2dee:	56 2f       	mov	r21, r22
    2df0:	aa e6       	ldi	r26, 0x6A	; 106
    2df2:	b5 e0       	ldi	r27, 0x05	; 5
    2df4:	fb 01       	movw	r30, r22
    2df6:	3e 2f       	mov	r19, r30
    2df8:	35 1b       	sub	r19, r21
    2dfa:	34 17       	cp	r19, r20
    2dfc:	18 f4       	brcc	.+6      	; 0x2e04 <twi_writeTo+0x3e>
    2dfe:	31 91       	ld	r19, Z+
    2e00:	3d 93       	st	X+, r19
    2e02:	f9 cf       	rjmp	.-14     	; 0x2df6 <twi_writeTo+0x30>
    2e04:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <twi_slarw>
    2e08:	30 91 90 05 	lds	r19, 0x0590	; 0x800590 <twi_slarw>
    2e0c:	88 0f       	add	r24, r24
    2e0e:	83 2b       	or	r24, r19
    2e10:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <twi_slarw>
    2e14:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_inRepStart>
    2e18:	81 30       	cpi	r24, 0x01	; 1
    2e1a:	61 f4       	brne	.+24     	; 0x2e34 <twi_writeTo+0x6e>
    2e1c:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <twi_inRepStart>
    2e20:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <twi_slarw>
    2e24:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2e28:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e2c:	83 fd       	sbrc	r24, 3
    2e2e:	f8 cf       	rjmp	.-16     	; 0x2e20 <twi_writeTo+0x5a>
    2e30:	85 ec       	ldi	r24, 0xC5	; 197
    2e32:	01 c0       	rjmp	.+2      	; 0x2e36 <twi_writeTo+0x70>
    2e34:	85 ee       	ldi	r24, 0xE5	; 229
    2e36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e3a:	22 23       	and	r18, r18
    2e3c:	21 f0       	breq	.+8      	; 0x2e46 <twi_writeTo+0x80>
    2e3e:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <twi_state>
    2e42:	82 30       	cpi	r24, 0x02	; 2
    2e44:	d1 f3       	breq	.-12     	; 0x2e3a <twi_writeTo+0x74>
    2e46:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <twi_error>
    2e4a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e4c:	79 f0       	breq	.+30     	; 0x2e6c <twi_writeTo+0xa6>
    2e4e:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <twi_error>
    2e52:	80 32       	cpi	r24, 0x20	; 32
    2e54:	41 f0       	breq	.+16     	; 0x2e66 <twi_writeTo+0xa0>
    2e56:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <twi_error>
    2e5a:	80 33       	cpi	r24, 0x30	; 48
    2e5c:	31 f0       	breq	.+12     	; 0x2e6a <twi_writeTo+0xa4>
    2e5e:	94 e0       	ldi	r25, 0x04	; 4
    2e60:	05 c0       	rjmp	.+10     	; 0x2e6c <twi_writeTo+0xa6>
    2e62:	91 e0       	ldi	r25, 0x01	; 1
    2e64:	03 c0       	rjmp	.+6      	; 0x2e6c <twi_writeTo+0xa6>
    2e66:	92 e0       	ldi	r25, 0x02	; 2
    2e68:	01 c0       	rjmp	.+2      	; 0x2e6c <twi_writeTo+0xa6>
    2e6a:	93 e0       	ldi	r25, 0x03	; 3
    2e6c:	89 2f       	mov	r24, r25
    2e6e:	0f 91       	pop	r16
    2e70:	08 95       	ret

00002e72 <twi_transmit>:
    2e72:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <twi_txBufferLength>
    2e76:	26 2f       	mov	r18, r22
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	24 0f       	add	r18, r20
    2e7c:	31 1d       	adc	r19, r1
    2e7e:	21 32       	cpi	r18, 0x21	; 33
    2e80:	31 05       	cpc	r19, r1
    2e82:	dc f4       	brge	.+54     	; 0x2eba <twi_transmit+0x48>
    2e84:	20 91 91 05 	lds	r18, 0x0591	; 0x800591 <twi_state>
    2e88:	24 30       	cpi	r18, 0x04	; 4
    2e8a:	c9 f4       	brne	.+50     	; 0x2ebe <twi_transmit+0x4c>
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	86 17       	cp	r24, r22
    2e94:	58 f4       	brcc	.+22     	; 0x2eac <twi_transmit+0x3a>
    2e96:	30 91 46 05 	lds	r19, 0x0546	; 0x800546 <twi_txBufferLength>
    2e9a:	21 91       	ld	r18, Z+
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	a8 5b       	subi	r26, 0xB8	; 184
    2ea0:	ba 4f       	sbci	r27, 0xFA	; 250
    2ea2:	a3 0f       	add	r26, r19
    2ea4:	b1 1d       	adc	r27, r1
    2ea6:	2c 93       	st	X, r18
    2ea8:	01 96       	adiw	r24, 0x01	; 1
    2eaa:	f3 cf       	rjmp	.-26     	; 0x2e92 <twi_transmit+0x20>
    2eac:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <twi_txBufferLength>
    2eb0:	68 0f       	add	r22, r24
    2eb2:	60 93 46 05 	sts	0x0546, r22	; 0x800546 <twi_txBufferLength>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	08 95       	ret
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	08 95       	ret
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	08 95       	ret

00002ec2 <twi_attachSlaveRxEvent>:
    2ec2:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <twi_onSlaveReceive+0x1>
    2ec6:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <twi_onSlaveReceive>
    2eca:	08 95       	ret

00002ecc <twi_attachSlaveTxEvent>:
    2ecc:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <twi_onSlaveTransmit+0x1>
    2ed0:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <twi_onSlaveTransmit>
    2ed4:	08 95       	ret

00002ed6 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2ed6:	85 ed       	ldi	r24, 0xD5	; 213
    2ed8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2edc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ee0:	84 fd       	sbrc	r24, 4
    2ee2:	fc cf       	rjmp	.-8      	; 0x2edc <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ee4:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <twi_state>
    2ee8:	08 95       	ret

00002eea <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2eea:	85 ec       	ldi	r24, 0xC5	; 197
    2eec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2ef0:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <twi_state>
    2ef4:	08 95       	ret

00002ef6 <__vector_39>:
}

ISR(TWI_vect)
{
    2ef6:	1f 92       	push	r1
    2ef8:	0f 92       	push	r0
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	0f 92       	push	r0
    2efe:	11 24       	eor	r1, r1
    2f00:	0b b6       	in	r0, 0x3b	; 59
    2f02:	0f 92       	push	r0
    2f04:	2f 93       	push	r18
    2f06:	3f 93       	push	r19
    2f08:	4f 93       	push	r20
    2f0a:	5f 93       	push	r21
    2f0c:	6f 93       	push	r22
    2f0e:	7f 93       	push	r23
    2f10:	8f 93       	push	r24
    2f12:	9f 93       	push	r25
    2f14:	af 93       	push	r26
    2f16:	bf 93       	push	r27
    2f18:	ef 93       	push	r30
    2f1a:	ff 93       	push	r31
  switch(TW_STATUS){
    2f1c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2f20:	88 7f       	andi	r24, 0xF8	; 248
    2f22:	80 36       	cpi	r24, 0x60	; 96
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <__vector_39+0x32>
    2f26:	9d c0       	rjmp	.+314    	; 0x3062 <__vector_39+0x16c>
    2f28:	70 f5       	brcc	.+92     	; 0x2f86 <__vector_39+0x90>
    2f2a:	88 32       	cpi	r24, 0x28	; 40
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <__vector_39+0x3a>
    2f2e:	5c c0       	rjmp	.+184    	; 0x2fe8 <__vector_39+0xf2>
    2f30:	90 f4       	brcc	.+36     	; 0x2f56 <__vector_39+0x60>
    2f32:	80 31       	cpi	r24, 0x10	; 16
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <__vector_39+0x42>
    2f36:	55 c0       	rjmp	.+170    	; 0x2fe2 <__vector_39+0xec>
    2f38:	38 f4       	brcc	.+14     	; 0x2f48 <__vector_39+0x52>
    2f3a:	88 23       	and	r24, r24
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <__vector_39+0x4a>
    2f3e:	f3 c0       	rjmp	.+486    	; 0x3126 <__vector_39+0x230>
    2f40:	88 30       	cpi	r24, 0x08	; 8
    2f42:	09 f4       	brne	.+2      	; 0x2f46 <__vector_39+0x50>
    2f44:	4e c0       	rjmp	.+156    	; 0x2fe2 <__vector_39+0xec>
    2f46:	f2 c0       	rjmp	.+484    	; 0x312c <__vector_39+0x236>
    2f48:	88 31       	cpi	r24, 0x18	; 24
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <__vector_39+0x58>
    2f4c:	4d c0       	rjmp	.+154    	; 0x2fe8 <__vector_39+0xf2>
    2f4e:	80 32       	cpi	r24, 0x20	; 32
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <__vector_39+0x5e>
    2f52:	5e c0       	rjmp	.+188    	; 0x3010 <__vector_39+0x11a>
    2f54:	eb c0       	rjmp	.+470    	; 0x312c <__vector_39+0x236>
    2f56:	80 34       	cpi	r24, 0x40	; 64
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <__vector_39+0x66>
    2f5a:	69 c0       	rjmp	.+210    	; 0x302e <__vector_39+0x138>
    2f5c:	50 f4       	brcc	.+20     	; 0x2f72 <__vector_39+0x7c>
    2f5e:	80 33       	cpi	r24, 0x30	; 48
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <__vector_39+0x6e>
    2f62:	56 c0       	rjmp	.+172    	; 0x3010 <__vector_39+0x11a>
    2f64:	88 33       	cpi	r24, 0x38	; 56
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <__vector_39+0x74>
    2f68:	e1 c0       	rjmp	.+450    	; 0x312c <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f6a:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <twi_error>
      twi_releaseBus();
    2f6e:	bd df       	rcall	.-134    	; 0x2eea <twi_releaseBus>
      break;
    2f70:	dd c0       	rjmp	.+442    	; 0x312c <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f72:	80 35       	cpi	r24, 0x50	; 80
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <__vector_39+0x82>
    2f76:	4f c0       	rjmp	.+158    	; 0x3016 <__vector_39+0x120>
    2f78:	88 35       	cpi	r24, 0x58	; 88
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <__vector_39+0x88>
    2f7c:	5d c0       	rjmp	.+186    	; 0x3038 <__vector_39+0x142>
    2f7e:	88 34       	cpi	r24, 0x48	; 72
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <__vector_39+0x8e>
    2f82:	d4 c0       	rjmp	.+424    	; 0x312c <__vector_39+0x236>
    2f84:	d2 c0       	rjmp	.+420    	; 0x312a <__vector_39+0x234>
    2f86:	88 39       	cpi	r24, 0x98	; 152
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <__vector_39+0x96>
    2f8a:	c3 c0       	rjmp	.+390    	; 0x3112 <__vector_39+0x21c>
    2f8c:	a8 f4       	brcc	.+42     	; 0x2fb8 <__vector_39+0xc2>
    2f8e:	88 37       	cpi	r24, 0x78	; 120
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <__vector_39+0x9e>
    2f92:	67 c0       	rjmp	.+206    	; 0x3062 <__vector_39+0x16c>
    2f94:	38 f4       	brcc	.+14     	; 0x2fa4 <__vector_39+0xae>
    2f96:	88 36       	cpi	r24, 0x68	; 104
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <__vector_39+0xa6>
    2f9a:	63 c0       	rjmp	.+198    	; 0x3062 <__vector_39+0x16c>
    2f9c:	80 37       	cpi	r24, 0x70	; 112
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <__vector_39+0xac>
    2fa0:	60 c0       	rjmp	.+192    	; 0x3062 <__vector_39+0x16c>
    2fa2:	c4 c0       	rjmp	.+392    	; 0x312c <__vector_39+0x236>
    2fa4:	88 38       	cpi	r24, 0x88	; 136
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <__vector_39+0xb4>
    2fa8:	b4 c0       	rjmp	.+360    	; 0x3112 <__vector_39+0x21c>
    2faa:	80 39       	cpi	r24, 0x90	; 144
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <__vector_39+0xba>
    2fae:	5f c0       	rjmp	.+190    	; 0x306e <__vector_39+0x178>
    2fb0:	80 38       	cpi	r24, 0x80	; 128
    2fb2:	09 f0       	breq	.+2      	; 0x2fb6 <__vector_39+0xc0>
    2fb4:	bb c0       	rjmp	.+374    	; 0x312c <__vector_39+0x236>
    2fb6:	5b c0       	rjmp	.+182    	; 0x306e <__vector_39+0x178>
    2fb8:	80 3b       	cpi	r24, 0xB0	; 176
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <__vector_39+0xc8>
    2fbc:	82 c0       	rjmp	.+260    	; 0x30c2 <__vector_39+0x1cc>
    2fbe:	38 f4       	brcc	.+14     	; 0x2fce <__vector_39+0xd8>
    2fc0:	80 3a       	cpi	r24, 0xA0	; 160
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <__vector_39+0xd0>
    2fc4:	66 c0       	rjmp	.+204    	; 0x3092 <__vector_39+0x19c>
    2fc6:	88 3a       	cpi	r24, 0xA8	; 168
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <__vector_39+0xd6>
    2fca:	7b c0       	rjmp	.+246    	; 0x30c2 <__vector_39+0x1cc>
    2fcc:	af c0       	rjmp	.+350    	; 0x312c <__vector_39+0x236>
    2fce:	80 3c       	cpi	r24, 0xC0	; 192
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <__vector_39+0xde>
    2fd2:	a3 c0       	rjmp	.+326    	; 0x311a <__vector_39+0x224>
    2fd4:	88 3c       	cpi	r24, 0xC8	; 200
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <__vector_39+0xe4>
    2fd8:	a0 c0       	rjmp	.+320    	; 0x311a <__vector_39+0x224>
    2fda:	88 3b       	cpi	r24, 0xB8	; 184
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <__vector_39+0xea>
    2fde:	86 c0       	rjmp	.+268    	; 0x30ec <__vector_39+0x1f6>
    2fe0:	a5 c0       	rjmp	.+330    	; 0x312c <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2fe2:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <twi_slarw>
    2fe6:	10 c0       	rjmp	.+32     	; 0x3008 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2fe8:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <twi_masterBufferIndex>
    2fec:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <twi_masterBufferLength>
    2ff0:	98 17       	cp	r25, r24
    2ff2:	70 f5       	brcc	.+92     	; 0x3050 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2ff4:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <twi_masterBufferIndex>
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	8e 0f       	add	r24, r30
    2ffc:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_masterBufferIndex>
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	e6 59       	subi	r30, 0x96	; 150
    3004:	fa 4f       	sbci	r31, 0xFA	; 250
    3006:	80 81       	ld	r24, Z
    3008:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    300c:	85 ec       	ldi	r24, 0xC5	; 197
    300e:	82 c0       	rjmp	.+260    	; 0x3114 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3010:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <twi_error>
    3014:	8a c0       	rjmp	.+276    	; 0x312a <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3016:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <twi_masterBufferIndex>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	8e 0f       	add	r24, r30
    301e:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_masterBufferIndex>
    3022:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	e6 59       	subi	r30, 0x96	; 150
    302a:	fa 4f       	sbci	r31, 0xFA	; 250
    302c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    302e:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <twi_masterBufferIndex>
    3032:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <twi_masterBufferLength>
    3036:	6a c0       	rjmp	.+212    	; 0x310c <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3038:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <twi_masterBufferIndex>
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	8e 0f       	add	r24, r30
    3040:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_masterBufferIndex>
    3044:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	e6 59       	subi	r30, 0x96	; 150
    304c:	fa 4f       	sbci	r31, 0xFA	; 250
    304e:	80 83       	st	Z, r24
	if (twi_sendStop)
    3050:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_sendStop>
    3054:	81 11       	cpse	r24, r1
    3056:	69 c0       	rjmp	.+210    	; 0x312a <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    305e:	84 ea       	ldi	r24, 0xA4	; 164
    3060:	5d c0       	rjmp	.+186    	; 0x311c <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3062:	83 e0       	ldi	r24, 0x03	; 3
    3064:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3068:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <twi_rxBufferIndex>
    306c:	cf cf       	rjmp	.-98     	; 0x300c <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    306e:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <twi_rxBufferIndex>
    3072:	80 32       	cpi	r24, 0x20	; 32
    3074:	08 f0       	brcs	.+2      	; 0x3078 <__vector_39+0x182>
    3076:	4d c0       	rjmp	.+154    	; 0x3112 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3078:	e0 91 25 05 	lds	r30, 0x0525	; 0x800525 <twi_rxBufferIndex>
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	8e 0f       	add	r24, r30
    3080:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <twi_rxBufferIndex>
    3084:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	ea 5d       	subi	r30, 0xDA	; 218
    308c:	fa 4f       	sbci	r31, 0xFA	; 250
    308e:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3090:	bd cf       	rjmp	.-134    	; 0x300c <__vector_39+0x116>
    3092:	2b df       	rcall	.-426    	; 0x2eea <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3094:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <twi_rxBufferIndex>
    3098:	80 32       	cpi	r24, 0x20	; 32
    309a:	30 f4       	brcc	.+12     	; 0x30a8 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    309c:	e0 91 25 05 	lds	r30, 0x0525	; 0x800525 <twi_rxBufferIndex>
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	ea 5d       	subi	r30, 0xDA	; 218
    30a4:	fa 4f       	sbci	r31, 0xFA	; 250
    30a6:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    30a8:	60 91 25 05 	lds	r22, 0x0525	; 0x800525 <twi_rxBufferIndex>
    30ac:	70 e0       	ldi	r23, 0x00	; 0
    30ae:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <twi_onSlaveReceive>
    30b2:	f0 91 8b 05 	lds	r31, 0x058B	; 0x80058b <twi_onSlaveReceive+0x1>
    30b6:	86 e2       	ldi	r24, 0x26	; 38
    30b8:	95 e0       	ldi	r25, 0x05	; 5
    30ba:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    30bc:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <twi_rxBufferIndex>
      break;
    30c0:	35 c0       	rjmp	.+106    	; 0x312c <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    30c2:	84 e0       	ldi	r24, 0x04	; 4
    30c4:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    30c8:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    30cc:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    30d0:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <twi_onSlaveTransmit>
    30d4:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <twi_onSlaveTransmit+0x1>
    30d8:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    30da:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <twi_txBufferLength>
    30de:	81 11       	cpse	r24, r1
    30e0:	05 c0       	rjmp	.+10     	; 0x30ec <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    30e8:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    30ec:	e0 91 47 05 	lds	r30, 0x0547	; 0x800547 <twi_txBufferIndex>
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	8e 0f       	add	r24, r30
    30f4:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <twi_txBufferIndex>
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	e8 5b       	subi	r30, 0xB8	; 184
    30fc:	fa 4f       	sbci	r31, 0xFA	; 250
    30fe:	80 81       	ld	r24, Z
    3100:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3104:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <twi_txBufferIndex>
    3108:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <twi_txBufferLength>
    310c:	98 17       	cp	r25, r24
    310e:	08 f4       	brcc	.+2      	; 0x3112 <__vector_39+0x21c>
    3110:	7d cf       	rjmp	.-262    	; 0x300c <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3112:	85 e8       	ldi	r24, 0x85	; 133
    3114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3118:	09 c0       	rjmp	.+18     	; 0x312c <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    311a:	85 ec       	ldi	r24, 0xC5	; 197
    311c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3120:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <twi_state>
      break;
    3124:	03 c0       	rjmp	.+6      	; 0x312c <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3126:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <twi_error>
      twi_stop();
    312a:	d5 de       	rcall	.-598    	; 0x2ed6 <twi_stop>
      break;
  }
}
    312c:	ff 91       	pop	r31
    312e:	ef 91       	pop	r30
    3130:	bf 91       	pop	r27
    3132:	af 91       	pop	r26
    3134:	9f 91       	pop	r25
    3136:	8f 91       	pop	r24
    3138:	7f 91       	pop	r23
    313a:	6f 91       	pop	r22
    313c:	5f 91       	pop	r21
    313e:	4f 91       	pop	r20
    3140:	3f 91       	pop	r19
    3142:	2f 91       	pop	r18
    3144:	0f 90       	pop	r0
    3146:	0b be       	out	0x3b, r0	; 59
    3148:	0f 90       	pop	r0
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	0f 90       	pop	r0
    314e:	1f 90       	pop	r1
    3150:	18 95       	reti

00003152 <__udivmodsi4>:
    3152:	a1 e2       	ldi	r26, 0x21	; 33
    3154:	1a 2e       	mov	r1, r26
    3156:	aa 1b       	sub	r26, r26
    3158:	bb 1b       	sub	r27, r27
    315a:	fd 01       	movw	r30, r26
    315c:	0d c0       	rjmp	.+26     	; 0x3178 <__udivmodsi4_ep>

0000315e <__udivmodsi4_loop>:
    315e:	aa 1f       	adc	r26, r26
    3160:	bb 1f       	adc	r27, r27
    3162:	ee 1f       	adc	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	a2 17       	cp	r26, r18
    3168:	b3 07       	cpc	r27, r19
    316a:	e4 07       	cpc	r30, r20
    316c:	f5 07       	cpc	r31, r21
    316e:	20 f0       	brcs	.+8      	; 0x3178 <__udivmodsi4_ep>
    3170:	a2 1b       	sub	r26, r18
    3172:	b3 0b       	sbc	r27, r19
    3174:	e4 0b       	sbc	r30, r20
    3176:	f5 0b       	sbc	r31, r21

00003178 <__udivmodsi4_ep>:
    3178:	66 1f       	adc	r22, r22
    317a:	77 1f       	adc	r23, r23
    317c:	88 1f       	adc	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	1a 94       	dec	r1
    3182:	69 f7       	brne	.-38     	; 0x315e <__udivmodsi4_loop>
    3184:	60 95       	com	r22
    3186:	70 95       	com	r23
    3188:	80 95       	com	r24
    318a:	90 95       	com	r25
    318c:	9b 01       	movw	r18, r22
    318e:	ac 01       	movw	r20, r24
    3190:	bd 01       	movw	r22, r26
    3192:	cf 01       	movw	r24, r30
    3194:	08 95       	ret

00003196 <__tablejump2__>:
    3196:	ee 0f       	add	r30, r30
    3198:	ff 1f       	adc	r31, r31
    319a:	88 1f       	adc	r24, r24
    319c:	8b bf       	out	0x3b, r24	; 59
    319e:	07 90       	elpm	r0, Z+
    31a0:	f6 91       	elpm	r31, Z
    31a2:	e0 2d       	mov	r30, r0
    31a4:	19 94       	eijmp

000031a6 <malloc>:
    31a6:	0f 93       	push	r16
    31a8:	1f 93       	push	r17
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	82 30       	cpi	r24, 0x02	; 2
    31b0:	91 05       	cpc	r25, r1
    31b2:	10 f4       	brcc	.+4      	; 0x31b8 <malloc+0x12>
    31b4:	82 e0       	ldi	r24, 0x02	; 2
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	e0 91 94 05 	lds	r30, 0x0594	; 0x800594 <__flp>
    31bc:	f0 91 95 05 	lds	r31, 0x0595	; 0x800595 <__flp+0x1>
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	a0 e0       	ldi	r26, 0x00	; 0
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	30 97       	sbiw	r30, 0x00	; 0
    31ca:	19 f1       	breq	.+70     	; 0x3212 <malloc+0x6c>
    31cc:	40 81       	ld	r20, Z
    31ce:	51 81       	ldd	r21, Z+1	; 0x01
    31d0:	02 81       	ldd	r16, Z+2	; 0x02
    31d2:	13 81       	ldd	r17, Z+3	; 0x03
    31d4:	48 17       	cp	r20, r24
    31d6:	59 07       	cpc	r21, r25
    31d8:	c8 f0       	brcs	.+50     	; 0x320c <malloc+0x66>
    31da:	84 17       	cp	r24, r20
    31dc:	95 07       	cpc	r25, r21
    31de:	69 f4       	brne	.+26     	; 0x31fa <malloc+0x54>
    31e0:	10 97       	sbiw	r26, 0x00	; 0
    31e2:	31 f0       	breq	.+12     	; 0x31f0 <malloc+0x4a>
    31e4:	12 96       	adiw	r26, 0x02	; 2
    31e6:	0c 93       	st	X, r16
    31e8:	12 97       	sbiw	r26, 0x02	; 2
    31ea:	13 96       	adiw	r26, 0x03	; 3
    31ec:	1c 93       	st	X, r17
    31ee:	27 c0       	rjmp	.+78     	; 0x323e <malloc+0x98>
    31f0:	00 93 94 05 	sts	0x0594, r16	; 0x800594 <__flp>
    31f4:	10 93 95 05 	sts	0x0595, r17	; 0x800595 <__flp+0x1>
    31f8:	22 c0       	rjmp	.+68     	; 0x323e <malloc+0x98>
    31fa:	21 15       	cp	r18, r1
    31fc:	31 05       	cpc	r19, r1
    31fe:	19 f0       	breq	.+6      	; 0x3206 <malloc+0x60>
    3200:	42 17       	cp	r20, r18
    3202:	53 07       	cpc	r21, r19
    3204:	18 f4       	brcc	.+6      	; 0x320c <malloc+0x66>
    3206:	9a 01       	movw	r18, r20
    3208:	bd 01       	movw	r22, r26
    320a:	ef 01       	movw	r28, r30
    320c:	df 01       	movw	r26, r30
    320e:	f8 01       	movw	r30, r16
    3210:	db cf       	rjmp	.-74     	; 0x31c8 <malloc+0x22>
    3212:	21 15       	cp	r18, r1
    3214:	31 05       	cpc	r19, r1
    3216:	f9 f0       	breq	.+62     	; 0x3256 <malloc+0xb0>
    3218:	28 1b       	sub	r18, r24
    321a:	39 0b       	sbc	r19, r25
    321c:	24 30       	cpi	r18, 0x04	; 4
    321e:	31 05       	cpc	r19, r1
    3220:	80 f4       	brcc	.+32     	; 0x3242 <malloc+0x9c>
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	9b 81       	ldd	r25, Y+3	; 0x03
    3226:	61 15       	cp	r22, r1
    3228:	71 05       	cpc	r23, r1
    322a:	21 f0       	breq	.+8      	; 0x3234 <malloc+0x8e>
    322c:	fb 01       	movw	r30, r22
    322e:	93 83       	std	Z+3, r25	; 0x03
    3230:	82 83       	std	Z+2, r24	; 0x02
    3232:	04 c0       	rjmp	.+8      	; 0x323c <malloc+0x96>
    3234:	90 93 95 05 	sts	0x0595, r25	; 0x800595 <__flp+0x1>
    3238:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <__flp>
    323c:	fe 01       	movw	r30, r28
    323e:	32 96       	adiw	r30, 0x02	; 2
    3240:	44 c0       	rjmp	.+136    	; 0x32ca <malloc+0x124>
    3242:	fe 01       	movw	r30, r28
    3244:	e2 0f       	add	r30, r18
    3246:	f3 1f       	adc	r31, r19
    3248:	81 93       	st	Z+, r24
    324a:	91 93       	st	Z+, r25
    324c:	22 50       	subi	r18, 0x02	; 2
    324e:	31 09       	sbc	r19, r1
    3250:	39 83       	std	Y+1, r19	; 0x01
    3252:	28 83       	st	Y, r18
    3254:	3a c0       	rjmp	.+116    	; 0x32ca <malloc+0x124>
    3256:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <__brkval>
    325a:	30 91 93 05 	lds	r19, 0x0593	; 0x800593 <__brkval+0x1>
    325e:	23 2b       	or	r18, r19
    3260:	41 f4       	brne	.+16     	; 0x3272 <malloc+0xcc>
    3262:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3266:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    326a:	30 93 93 05 	sts	0x0593, r19	; 0x800593 <__brkval+0x1>
    326e:	20 93 92 05 	sts	0x0592, r18	; 0x800592 <__brkval>
    3272:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3276:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    327a:	21 15       	cp	r18, r1
    327c:	31 05       	cpc	r19, r1
    327e:	41 f4       	brne	.+16     	; 0x3290 <malloc+0xea>
    3280:	2d b7       	in	r18, 0x3d	; 61
    3282:	3e b7       	in	r19, 0x3e	; 62
    3284:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3288:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    328c:	24 1b       	sub	r18, r20
    328e:	35 0b       	sbc	r19, r21
    3290:	e0 91 92 05 	lds	r30, 0x0592	; 0x800592 <__brkval>
    3294:	f0 91 93 05 	lds	r31, 0x0593	; 0x800593 <__brkval+0x1>
    3298:	e2 17       	cp	r30, r18
    329a:	f3 07       	cpc	r31, r19
    329c:	a0 f4       	brcc	.+40     	; 0x32c6 <malloc+0x120>
    329e:	2e 1b       	sub	r18, r30
    32a0:	3f 0b       	sbc	r19, r31
    32a2:	28 17       	cp	r18, r24
    32a4:	39 07       	cpc	r19, r25
    32a6:	78 f0       	brcs	.+30     	; 0x32c6 <malloc+0x120>
    32a8:	ac 01       	movw	r20, r24
    32aa:	4e 5f       	subi	r20, 0xFE	; 254
    32ac:	5f 4f       	sbci	r21, 0xFF	; 255
    32ae:	24 17       	cp	r18, r20
    32b0:	35 07       	cpc	r19, r21
    32b2:	48 f0       	brcs	.+18     	; 0x32c6 <malloc+0x120>
    32b4:	4e 0f       	add	r20, r30
    32b6:	5f 1f       	adc	r21, r31
    32b8:	50 93 93 05 	sts	0x0593, r21	; 0x800593 <__brkval+0x1>
    32bc:	40 93 92 05 	sts	0x0592, r20	; 0x800592 <__brkval>
    32c0:	81 93       	st	Z+, r24
    32c2:	91 93       	st	Z+, r25
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <malloc+0x124>
    32c6:	e0 e0       	ldi	r30, 0x00	; 0
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	cf 01       	movw	r24, r30
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	1f 91       	pop	r17
    32d2:	0f 91       	pop	r16
    32d4:	08 95       	ret

000032d6 <free>:
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <free+0xa>
    32de:	81 c0       	rjmp	.+258    	; 0x33e2 <free+0x10c>
    32e0:	fc 01       	movw	r30, r24
    32e2:	32 97       	sbiw	r30, 0x02	; 2
    32e4:	13 82       	std	Z+3, r1	; 0x03
    32e6:	12 82       	std	Z+2, r1	; 0x02
    32e8:	a0 91 94 05 	lds	r26, 0x0594	; 0x800594 <__flp>
    32ec:	b0 91 95 05 	lds	r27, 0x0595	; 0x800595 <__flp+0x1>
    32f0:	10 97       	sbiw	r26, 0x00	; 0
    32f2:	81 f4       	brne	.+32     	; 0x3314 <free+0x3e>
    32f4:	20 81       	ld	r18, Z
    32f6:	31 81       	ldd	r19, Z+1	; 0x01
    32f8:	82 0f       	add	r24, r18
    32fa:	93 1f       	adc	r25, r19
    32fc:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <__brkval>
    3300:	30 91 93 05 	lds	r19, 0x0593	; 0x800593 <__brkval+0x1>
    3304:	28 17       	cp	r18, r24
    3306:	39 07       	cpc	r19, r25
    3308:	51 f5       	brne	.+84     	; 0x335e <free+0x88>
    330a:	f0 93 93 05 	sts	0x0593, r31	; 0x800593 <__brkval+0x1>
    330e:	e0 93 92 05 	sts	0x0592, r30	; 0x800592 <__brkval>
    3312:	67 c0       	rjmp	.+206    	; 0x33e2 <free+0x10c>
    3314:	ed 01       	movw	r28, r26
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	ce 17       	cp	r28, r30
    331c:	df 07       	cpc	r29, r31
    331e:	40 f4       	brcc	.+16     	; 0x3330 <free+0x5a>
    3320:	4a 81       	ldd	r20, Y+2	; 0x02
    3322:	5b 81       	ldd	r21, Y+3	; 0x03
    3324:	9e 01       	movw	r18, r28
    3326:	41 15       	cp	r20, r1
    3328:	51 05       	cpc	r21, r1
    332a:	f1 f0       	breq	.+60     	; 0x3368 <free+0x92>
    332c:	ea 01       	movw	r28, r20
    332e:	f5 cf       	rjmp	.-22     	; 0x331a <free+0x44>
    3330:	d3 83       	std	Z+3, r29	; 0x03
    3332:	c2 83       	std	Z+2, r28	; 0x02
    3334:	40 81       	ld	r20, Z
    3336:	51 81       	ldd	r21, Z+1	; 0x01
    3338:	84 0f       	add	r24, r20
    333a:	95 1f       	adc	r25, r21
    333c:	c8 17       	cp	r28, r24
    333e:	d9 07       	cpc	r29, r25
    3340:	59 f4       	brne	.+22     	; 0x3358 <free+0x82>
    3342:	88 81       	ld	r24, Y
    3344:	99 81       	ldd	r25, Y+1	; 0x01
    3346:	84 0f       	add	r24, r20
    3348:	95 1f       	adc	r25, r21
    334a:	02 96       	adiw	r24, 0x02	; 2
    334c:	91 83       	std	Z+1, r25	; 0x01
    334e:	80 83       	st	Z, r24
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	9b 81       	ldd	r25, Y+3	; 0x03
    3354:	93 83       	std	Z+3, r25	; 0x03
    3356:	82 83       	std	Z+2, r24	; 0x02
    3358:	21 15       	cp	r18, r1
    335a:	31 05       	cpc	r19, r1
    335c:	29 f4       	brne	.+10     	; 0x3368 <free+0x92>
    335e:	f0 93 95 05 	sts	0x0595, r31	; 0x800595 <__flp+0x1>
    3362:	e0 93 94 05 	sts	0x0594, r30	; 0x800594 <__flp>
    3366:	3d c0       	rjmp	.+122    	; 0x33e2 <free+0x10c>
    3368:	e9 01       	movw	r28, r18
    336a:	fb 83       	std	Y+3, r31	; 0x03
    336c:	ea 83       	std	Y+2, r30	; 0x02
    336e:	49 91       	ld	r20, Y+
    3370:	59 91       	ld	r21, Y+
    3372:	c4 0f       	add	r28, r20
    3374:	d5 1f       	adc	r29, r21
    3376:	ec 17       	cp	r30, r28
    3378:	fd 07       	cpc	r31, r29
    337a:	61 f4       	brne	.+24     	; 0x3394 <free+0xbe>
    337c:	80 81       	ld	r24, Z
    337e:	91 81       	ldd	r25, Z+1	; 0x01
    3380:	84 0f       	add	r24, r20
    3382:	95 1f       	adc	r25, r21
    3384:	02 96       	adiw	r24, 0x02	; 2
    3386:	e9 01       	movw	r28, r18
    3388:	99 83       	std	Y+1, r25	; 0x01
    338a:	88 83       	st	Y, r24
    338c:	82 81       	ldd	r24, Z+2	; 0x02
    338e:	93 81       	ldd	r25, Z+3	; 0x03
    3390:	9b 83       	std	Y+3, r25	; 0x03
    3392:	8a 83       	std	Y+2, r24	; 0x02
    3394:	e0 e0       	ldi	r30, 0x00	; 0
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	12 96       	adiw	r26, 0x02	; 2
    339a:	8d 91       	ld	r24, X+
    339c:	9c 91       	ld	r25, X
    339e:	13 97       	sbiw	r26, 0x03	; 3
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	19 f0       	breq	.+6      	; 0x33aa <free+0xd4>
    33a4:	fd 01       	movw	r30, r26
    33a6:	dc 01       	movw	r26, r24
    33a8:	f7 cf       	rjmp	.-18     	; 0x3398 <free+0xc2>
    33aa:	8d 91       	ld	r24, X+
    33ac:	9c 91       	ld	r25, X
    33ae:	11 97       	sbiw	r26, 0x01	; 1
    33b0:	9d 01       	movw	r18, r26
    33b2:	2e 5f       	subi	r18, 0xFE	; 254
    33b4:	3f 4f       	sbci	r19, 0xFF	; 255
    33b6:	82 0f       	add	r24, r18
    33b8:	93 1f       	adc	r25, r19
    33ba:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <__brkval>
    33be:	30 91 93 05 	lds	r19, 0x0593	; 0x800593 <__brkval+0x1>
    33c2:	28 17       	cp	r18, r24
    33c4:	39 07       	cpc	r19, r25
    33c6:	69 f4       	brne	.+26     	; 0x33e2 <free+0x10c>
    33c8:	30 97       	sbiw	r30, 0x00	; 0
    33ca:	29 f4       	brne	.+10     	; 0x33d6 <free+0x100>
    33cc:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <__flp+0x1>
    33d0:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <__flp>
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <free+0x104>
    33d6:	13 82       	std	Z+3, r1	; 0x03
    33d8:	12 82       	std	Z+2, r1	; 0x02
    33da:	b0 93 93 05 	sts	0x0593, r27	; 0x800593 <__brkval+0x1>
    33de:	a0 93 92 05 	sts	0x0592, r26	; 0x800592 <__brkval>
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	08 95       	ret

000033e8 <realloc>:
    33e8:	6f 92       	push	r6
    33ea:	7f 92       	push	r7
    33ec:	8f 92       	push	r8
    33ee:	9f 92       	push	r9
    33f0:	af 92       	push	r10
    33f2:	bf 92       	push	r11
    33f4:	cf 92       	push	r12
    33f6:	df 92       	push	r13
    33f8:	ef 92       	push	r14
    33fa:	ff 92       	push	r15
    33fc:	0f 93       	push	r16
    33fe:	1f 93       	push	r17
    3400:	cf 93       	push	r28
    3402:	df 93       	push	r29
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	81 f4       	brne	.+32     	; 0x3428 <realloc+0x40>
    3408:	cb 01       	movw	r24, r22
    340a:	df 91       	pop	r29
    340c:	cf 91       	pop	r28
    340e:	1f 91       	pop	r17
    3410:	0f 91       	pop	r16
    3412:	ff 90       	pop	r15
    3414:	ef 90       	pop	r14
    3416:	df 90       	pop	r13
    3418:	cf 90       	pop	r12
    341a:	bf 90       	pop	r11
    341c:	af 90       	pop	r10
    341e:	9f 90       	pop	r9
    3420:	8f 90       	pop	r8
    3422:	7f 90       	pop	r7
    3424:	6f 90       	pop	r6
    3426:	bf ce       	rjmp	.-642    	; 0x31a6 <malloc>
    3428:	fc 01       	movw	r30, r24
    342a:	e6 0f       	add	r30, r22
    342c:	f7 1f       	adc	r31, r23
    342e:	9c 01       	movw	r18, r24
    3430:	22 50       	subi	r18, 0x02	; 2
    3432:	31 09       	sbc	r19, r1
    3434:	e2 17       	cp	r30, r18
    3436:	f3 07       	cpc	r31, r19
    3438:	08 f4       	brcc	.+2      	; 0x343c <realloc+0x54>
    343a:	a5 c0       	rjmp	.+330    	; 0x3586 <realloc+0x19e>
    343c:	ec 01       	movw	r28, r24
    343e:	d9 01       	movw	r26, r18
    3440:	0d 91       	ld	r16, X+
    3442:	1c 91       	ld	r17, X
    3444:	11 97       	sbiw	r26, 0x01	; 1
    3446:	06 17       	cp	r16, r22
    3448:	17 07       	cpc	r17, r23
    344a:	a8 f0       	brcs	.+42     	; 0x3476 <realloc+0x8e>
    344c:	05 30       	cpi	r16, 0x05	; 5
    344e:	11 05       	cpc	r17, r1
    3450:	08 f4       	brcc	.+2      	; 0x3454 <realloc+0x6c>
    3452:	97 c0       	rjmp	.+302    	; 0x3582 <realloc+0x19a>
    3454:	c8 01       	movw	r24, r16
    3456:	04 97       	sbiw	r24, 0x04	; 4
    3458:	86 17       	cp	r24, r22
    345a:	97 07       	cpc	r25, r23
    345c:	08 f4       	brcc	.+2      	; 0x3460 <realloc+0x78>
    345e:	91 c0       	rjmp	.+290    	; 0x3582 <realloc+0x19a>
    3460:	02 50       	subi	r16, 0x02	; 2
    3462:	11 09       	sbc	r17, r1
    3464:	06 1b       	sub	r16, r22
    3466:	17 0b       	sbc	r17, r23
    3468:	01 93       	st	Z+, r16
    346a:	11 93       	st	Z+, r17
    346c:	6d 93       	st	X+, r22
    346e:	7c 93       	st	X, r23
    3470:	cf 01       	movw	r24, r30
    3472:	31 df       	rcall	.-414    	; 0x32d6 <free>
    3474:	86 c0       	rjmp	.+268    	; 0x3582 <realloc+0x19a>
    3476:	5b 01       	movw	r10, r22
    3478:	a0 1a       	sub	r10, r16
    347a:	b1 0a       	sbc	r11, r17
    347c:	4c 01       	movw	r8, r24
    347e:	80 0e       	add	r8, r16
    3480:	91 1e       	adc	r9, r17
    3482:	a0 91 94 05 	lds	r26, 0x0594	; 0x800594 <__flp>
    3486:	b0 91 95 05 	lds	r27, 0x0595	; 0x800595 <__flp+0x1>
    348a:	61 2c       	mov	r6, r1
    348c:	71 2c       	mov	r7, r1
    348e:	e1 2c       	mov	r14, r1
    3490:	f1 2c       	mov	r15, r1
    3492:	10 97       	sbiw	r26, 0x00	; 0
    3494:	09 f4       	brne	.+2      	; 0x3498 <realloc+0xb0>
    3496:	46 c0       	rjmp	.+140    	; 0x3524 <realloc+0x13c>
    3498:	8d 91       	ld	r24, X+
    349a:	9c 91       	ld	r25, X
    349c:	11 97       	sbiw	r26, 0x01	; 1
    349e:	a8 15       	cp	r26, r8
    34a0:	b9 05       	cpc	r27, r9
    34a2:	b1 f5       	brne	.+108    	; 0x3510 <realloc+0x128>
    34a4:	6c 01       	movw	r12, r24
    34a6:	42 e0       	ldi	r20, 0x02	; 2
    34a8:	c4 0e       	add	r12, r20
    34aa:	d1 1c       	adc	r13, r1
    34ac:	ca 14       	cp	r12, r10
    34ae:	db 04       	cpc	r13, r11
    34b0:	78 f1       	brcs	.+94     	; 0x3510 <realloc+0x128>
    34b2:	4c 01       	movw	r8, r24
    34b4:	8a 18       	sub	r8, r10
    34b6:	9b 08       	sbc	r9, r11
    34b8:	64 01       	movw	r12, r8
    34ba:	42 e0       	ldi	r20, 0x02	; 2
    34bc:	c4 0e       	add	r12, r20
    34be:	d1 1c       	adc	r13, r1
    34c0:	12 96       	adiw	r26, 0x02	; 2
    34c2:	bc 90       	ld	r11, X
    34c4:	12 97       	sbiw	r26, 0x02	; 2
    34c6:	13 96       	adiw	r26, 0x03	; 3
    34c8:	ac 91       	ld	r26, X
    34ca:	b5 e0       	ldi	r27, 0x05	; 5
    34cc:	cb 16       	cp	r12, r27
    34ce:	d1 04       	cpc	r13, r1
    34d0:	40 f0       	brcs	.+16     	; 0x34e2 <realloc+0xfa>
    34d2:	b2 82       	std	Z+2, r11	; 0x02
    34d4:	a3 83       	std	Z+3, r26	; 0x03
    34d6:	91 82       	std	Z+1, r9	; 0x01
    34d8:	80 82       	st	Z, r8
    34da:	d9 01       	movw	r26, r18
    34dc:	6d 93       	st	X+, r22
    34de:	7c 93       	st	X, r23
    34e0:	09 c0       	rjmp	.+18     	; 0x34f4 <realloc+0x10c>
    34e2:	0e 5f       	subi	r16, 0xFE	; 254
    34e4:	1f 4f       	sbci	r17, 0xFF	; 255
    34e6:	80 0f       	add	r24, r16
    34e8:	91 1f       	adc	r25, r17
    34ea:	f9 01       	movw	r30, r18
    34ec:	91 83       	std	Z+1, r25	; 0x01
    34ee:	80 83       	st	Z, r24
    34f0:	eb 2d       	mov	r30, r11
    34f2:	fa 2f       	mov	r31, r26
    34f4:	e1 14       	cp	r14, r1
    34f6:	f1 04       	cpc	r15, r1
    34f8:	31 f0       	breq	.+12     	; 0x3506 <realloc+0x11e>
    34fa:	d7 01       	movw	r26, r14
    34fc:	13 96       	adiw	r26, 0x03	; 3
    34fe:	fc 93       	st	X, r31
    3500:	ee 93       	st	-X, r30
    3502:	12 97       	sbiw	r26, 0x02	; 2
    3504:	3e c0       	rjmp	.+124    	; 0x3582 <realloc+0x19a>
    3506:	f0 93 95 05 	sts	0x0595, r31	; 0x800595 <__flp+0x1>
    350a:	e0 93 94 05 	sts	0x0594, r30	; 0x800594 <__flp>
    350e:	39 c0       	rjmp	.+114    	; 0x3582 <realloc+0x19a>
    3510:	68 16       	cp	r6, r24
    3512:	79 06       	cpc	r7, r25
    3514:	08 f4       	brcc	.+2      	; 0x3518 <realloc+0x130>
    3516:	3c 01       	movw	r6, r24
    3518:	7d 01       	movw	r14, r26
    351a:	12 96       	adiw	r26, 0x02	; 2
    351c:	0d 90       	ld	r0, X+
    351e:	bc 91       	ld	r27, X
    3520:	a0 2d       	mov	r26, r0
    3522:	b7 cf       	rjmp	.-146    	; 0x3492 <realloc+0xaa>
    3524:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <__brkval>
    3528:	90 91 93 05 	lds	r25, 0x0593	; 0x800593 <__brkval+0x1>
    352c:	88 16       	cp	r8, r24
    352e:	99 06       	cpc	r9, r25
    3530:	e1 f4       	brne	.+56     	; 0x356a <realloc+0x182>
    3532:	66 16       	cp	r6, r22
    3534:	77 06       	cpc	r7, r23
    3536:	c8 f4       	brcc	.+50     	; 0x356a <realloc+0x182>
    3538:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    353c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	41 f4       	brne	.+16     	; 0x3554 <realloc+0x16c>
    3544:	8d b7       	in	r24, 0x3d	; 61
    3546:	9e b7       	in	r25, 0x3e	; 62
    3548:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    354c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3550:	84 1b       	sub	r24, r20
    3552:	95 0b       	sbc	r25, r21
    3554:	e8 17       	cp	r30, r24
    3556:	f9 07       	cpc	r31, r25
    3558:	b0 f4       	brcc	.+44     	; 0x3586 <realloc+0x19e>
    355a:	f0 93 93 05 	sts	0x0593, r31	; 0x800593 <__brkval+0x1>
    355e:	e0 93 92 05 	sts	0x0592, r30	; 0x800592 <__brkval>
    3562:	f9 01       	movw	r30, r18
    3564:	71 83       	std	Z+1, r23	; 0x01
    3566:	60 83       	st	Z, r22
    3568:	0c c0       	rjmp	.+24     	; 0x3582 <realloc+0x19a>
    356a:	cb 01       	movw	r24, r22
    356c:	1c de       	rcall	.-968    	; 0x31a6 <malloc>
    356e:	7c 01       	movw	r14, r24
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	49 f0       	breq	.+18     	; 0x3586 <realloc+0x19e>
    3574:	a8 01       	movw	r20, r16
    3576:	be 01       	movw	r22, r28
    3578:	17 d0       	rcall	.+46     	; 0x35a8 <memcpy>
    357a:	ce 01       	movw	r24, r28
    357c:	ac de       	rcall	.-680    	; 0x32d6 <free>
    357e:	c7 01       	movw	r24, r14
    3580:	04 c0       	rjmp	.+8      	; 0x358a <realloc+0x1a2>
    3582:	ce 01       	movw	r24, r28
    3584:	02 c0       	rjmp	.+4      	; 0x358a <realloc+0x1a2>
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	ff 90       	pop	r15
    3594:	ef 90       	pop	r14
    3596:	df 90       	pop	r13
    3598:	cf 90       	pop	r12
    359a:	bf 90       	pop	r11
    359c:	af 90       	pop	r10
    359e:	9f 90       	pop	r9
    35a0:	8f 90       	pop	r8
    35a2:	7f 90       	pop	r7
    35a4:	6f 90       	pop	r6
    35a6:	08 95       	ret

000035a8 <memcpy>:
    35a8:	fb 01       	movw	r30, r22
    35aa:	dc 01       	movw	r26, r24
    35ac:	02 c0       	rjmp	.+4      	; 0x35b2 <memcpy+0xa>
    35ae:	01 90       	ld	r0, Z+
    35b0:	0d 92       	st	X+, r0
    35b2:	41 50       	subi	r20, 0x01	; 1
    35b4:	50 40       	sbci	r21, 0x00	; 0
    35b6:	d8 f7       	brcc	.-10     	; 0x35ae <memcpy+0x6>
    35b8:	08 95       	ret

000035ba <strcpy>:
    35ba:	fb 01       	movw	r30, r22
    35bc:	dc 01       	movw	r26, r24
    35be:	01 90       	ld	r0, Z+
    35c0:	0d 92       	st	X+, r0
    35c2:	00 20       	and	r0, r0
    35c4:	e1 f7       	brne	.-8      	; 0x35be <strcpy+0x4>
    35c6:	08 95       	ret

000035c8 <sprintf>:
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	2e 97       	sbiw	r28, 0x0e	; 14
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	0e 89       	ldd	r16, Y+22	; 0x16
    35e2:	1f 89       	ldd	r17, Y+23	; 0x17
    35e4:	86 e0       	ldi	r24, 0x06	; 6
    35e6:	8c 83       	std	Y+4, r24	; 0x04
    35e8:	1a 83       	std	Y+2, r17	; 0x02
    35ea:	09 83       	std	Y+1, r16	; 0x01
    35ec:	8f ef       	ldi	r24, 0xFF	; 255
    35ee:	9f e7       	ldi	r25, 0x7F	; 127
    35f0:	9e 83       	std	Y+6, r25	; 0x06
    35f2:	8d 83       	std	Y+5, r24	; 0x05
    35f4:	ae 01       	movw	r20, r28
    35f6:	46 5e       	subi	r20, 0xE6	; 230
    35f8:	5f 4f       	sbci	r21, 0xFF	; 255
    35fa:	68 8d       	ldd	r22, Y+24	; 0x18
    35fc:	79 8d       	ldd	r23, Y+25	; 0x19
    35fe:	ce 01       	movw	r24, r28
    3600:	01 96       	adiw	r24, 0x01	; 1
    3602:	10 d0       	rcall	.+32     	; 0x3624 <vfprintf>
    3604:	ef 81       	ldd	r30, Y+7	; 0x07
    3606:	f8 85       	ldd	r31, Y+8	; 0x08
    3608:	e0 0f       	add	r30, r16
    360a:	f1 1f       	adc	r31, r17
    360c:	10 82       	st	Z, r1
    360e:	2e 96       	adiw	r28, 0x0e	; 14
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	08 95       	ret

00003624 <vfprintf>:
    3624:	2f 92       	push	r2
    3626:	3f 92       	push	r3
    3628:	4f 92       	push	r4
    362a:	5f 92       	push	r5
    362c:	6f 92       	push	r6
    362e:	7f 92       	push	r7
    3630:	8f 92       	push	r8
    3632:	9f 92       	push	r9
    3634:	af 92       	push	r10
    3636:	bf 92       	push	r11
    3638:	cf 92       	push	r12
    363a:	df 92       	push	r13
    363c:	ef 92       	push	r14
    363e:	ff 92       	push	r15
    3640:	0f 93       	push	r16
    3642:	1f 93       	push	r17
    3644:	cf 93       	push	r28
    3646:	df 93       	push	r29
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	2b 97       	sbiw	r28, 0x0b	; 11
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	6c 01       	movw	r12, r24
    365a:	7b 01       	movw	r14, r22
    365c:	8a 01       	movw	r16, r20
    365e:	fc 01       	movw	r30, r24
    3660:	17 82       	std	Z+7, r1	; 0x07
    3662:	16 82       	std	Z+6, r1	; 0x06
    3664:	83 81       	ldd	r24, Z+3	; 0x03
    3666:	81 ff       	sbrs	r24, 1
    3668:	bf c1       	rjmp	.+894    	; 0x39e8 <vfprintf+0x3c4>
    366a:	ce 01       	movw	r24, r28
    366c:	01 96       	adiw	r24, 0x01	; 1
    366e:	3c 01       	movw	r6, r24
    3670:	f6 01       	movw	r30, r12
    3672:	93 81       	ldd	r25, Z+3	; 0x03
    3674:	f7 01       	movw	r30, r14
    3676:	93 fd       	sbrc	r25, 3
    3678:	85 91       	lpm	r24, Z+
    367a:	93 ff       	sbrs	r25, 3
    367c:	81 91       	ld	r24, Z+
    367e:	7f 01       	movw	r14, r30
    3680:	88 23       	and	r24, r24
    3682:	09 f4       	brne	.+2      	; 0x3686 <vfprintf+0x62>
    3684:	ad c1       	rjmp	.+858    	; 0x39e0 <vfprintf+0x3bc>
    3686:	85 32       	cpi	r24, 0x25	; 37
    3688:	39 f4       	brne	.+14     	; 0x3698 <vfprintf+0x74>
    368a:	93 fd       	sbrc	r25, 3
    368c:	85 91       	lpm	r24, Z+
    368e:	93 ff       	sbrs	r25, 3
    3690:	81 91       	ld	r24, Z+
    3692:	7f 01       	movw	r14, r30
    3694:	85 32       	cpi	r24, 0x25	; 37
    3696:	21 f4       	brne	.+8      	; 0x36a0 <vfprintf+0x7c>
    3698:	b6 01       	movw	r22, r12
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	d6 d1       	rcall	.+940    	; 0x3a4a <fputc>
    369e:	e8 cf       	rjmp	.-48     	; 0x3670 <vfprintf+0x4c>
    36a0:	91 2c       	mov	r9, r1
    36a2:	21 2c       	mov	r2, r1
    36a4:	31 2c       	mov	r3, r1
    36a6:	ff e1       	ldi	r31, 0x1F	; 31
    36a8:	f3 15       	cp	r31, r3
    36aa:	d8 f0       	brcs	.+54     	; 0x36e2 <vfprintf+0xbe>
    36ac:	8b 32       	cpi	r24, 0x2B	; 43
    36ae:	79 f0       	breq	.+30     	; 0x36ce <vfprintf+0xaa>
    36b0:	38 f4       	brcc	.+14     	; 0x36c0 <vfprintf+0x9c>
    36b2:	80 32       	cpi	r24, 0x20	; 32
    36b4:	79 f0       	breq	.+30     	; 0x36d4 <vfprintf+0xb0>
    36b6:	83 32       	cpi	r24, 0x23	; 35
    36b8:	a1 f4       	brne	.+40     	; 0x36e2 <vfprintf+0xbe>
    36ba:	23 2d       	mov	r18, r3
    36bc:	20 61       	ori	r18, 0x10	; 16
    36be:	1d c0       	rjmp	.+58     	; 0x36fa <vfprintf+0xd6>
    36c0:	8d 32       	cpi	r24, 0x2D	; 45
    36c2:	61 f0       	breq	.+24     	; 0x36dc <vfprintf+0xb8>
    36c4:	80 33       	cpi	r24, 0x30	; 48
    36c6:	69 f4       	brne	.+26     	; 0x36e2 <vfprintf+0xbe>
    36c8:	23 2d       	mov	r18, r3
    36ca:	21 60       	ori	r18, 0x01	; 1
    36cc:	16 c0       	rjmp	.+44     	; 0x36fa <vfprintf+0xd6>
    36ce:	83 2d       	mov	r24, r3
    36d0:	82 60       	ori	r24, 0x02	; 2
    36d2:	38 2e       	mov	r3, r24
    36d4:	e3 2d       	mov	r30, r3
    36d6:	e4 60       	ori	r30, 0x04	; 4
    36d8:	3e 2e       	mov	r3, r30
    36da:	2a c0       	rjmp	.+84     	; 0x3730 <vfprintf+0x10c>
    36dc:	f3 2d       	mov	r31, r3
    36de:	f8 60       	ori	r31, 0x08	; 8
    36e0:	1d c0       	rjmp	.+58     	; 0x371c <vfprintf+0xf8>
    36e2:	37 fc       	sbrc	r3, 7
    36e4:	2d c0       	rjmp	.+90     	; 0x3740 <vfprintf+0x11c>
    36e6:	20 ed       	ldi	r18, 0xD0	; 208
    36e8:	28 0f       	add	r18, r24
    36ea:	2a 30       	cpi	r18, 0x0A	; 10
    36ec:	40 f0       	brcs	.+16     	; 0x36fe <vfprintf+0xda>
    36ee:	8e 32       	cpi	r24, 0x2E	; 46
    36f0:	b9 f4       	brne	.+46     	; 0x3720 <vfprintf+0xfc>
    36f2:	36 fc       	sbrc	r3, 6
    36f4:	75 c1       	rjmp	.+746    	; 0x39e0 <vfprintf+0x3bc>
    36f6:	23 2d       	mov	r18, r3
    36f8:	20 64       	ori	r18, 0x40	; 64
    36fa:	32 2e       	mov	r3, r18
    36fc:	19 c0       	rjmp	.+50     	; 0x3730 <vfprintf+0x10c>
    36fe:	36 fe       	sbrs	r3, 6
    3700:	06 c0       	rjmp	.+12     	; 0x370e <vfprintf+0xea>
    3702:	8a e0       	ldi	r24, 0x0A	; 10
    3704:	98 9e       	mul	r9, r24
    3706:	20 0d       	add	r18, r0
    3708:	11 24       	eor	r1, r1
    370a:	92 2e       	mov	r9, r18
    370c:	11 c0       	rjmp	.+34     	; 0x3730 <vfprintf+0x10c>
    370e:	ea e0       	ldi	r30, 0x0A	; 10
    3710:	2e 9e       	mul	r2, r30
    3712:	20 0d       	add	r18, r0
    3714:	11 24       	eor	r1, r1
    3716:	22 2e       	mov	r2, r18
    3718:	f3 2d       	mov	r31, r3
    371a:	f0 62       	ori	r31, 0x20	; 32
    371c:	3f 2e       	mov	r3, r31
    371e:	08 c0       	rjmp	.+16     	; 0x3730 <vfprintf+0x10c>
    3720:	8c 36       	cpi	r24, 0x6C	; 108
    3722:	21 f4       	brne	.+8      	; 0x372c <vfprintf+0x108>
    3724:	83 2d       	mov	r24, r3
    3726:	80 68       	ori	r24, 0x80	; 128
    3728:	38 2e       	mov	r3, r24
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <vfprintf+0x10c>
    372c:	88 36       	cpi	r24, 0x68	; 104
    372e:	41 f4       	brne	.+16     	; 0x3740 <vfprintf+0x11c>
    3730:	f7 01       	movw	r30, r14
    3732:	93 fd       	sbrc	r25, 3
    3734:	85 91       	lpm	r24, Z+
    3736:	93 ff       	sbrs	r25, 3
    3738:	81 91       	ld	r24, Z+
    373a:	7f 01       	movw	r14, r30
    373c:	81 11       	cpse	r24, r1
    373e:	b3 cf       	rjmp	.-154    	; 0x36a6 <vfprintf+0x82>
    3740:	98 2f       	mov	r25, r24
    3742:	9f 7d       	andi	r25, 0xDF	; 223
    3744:	95 54       	subi	r25, 0x45	; 69
    3746:	93 30       	cpi	r25, 0x03	; 3
    3748:	28 f4       	brcc	.+10     	; 0x3754 <vfprintf+0x130>
    374a:	0c 5f       	subi	r16, 0xFC	; 252
    374c:	1f 4f       	sbci	r17, 0xFF	; 255
    374e:	9f e3       	ldi	r25, 0x3F	; 63
    3750:	99 83       	std	Y+1, r25	; 0x01
    3752:	0d c0       	rjmp	.+26     	; 0x376e <vfprintf+0x14a>
    3754:	83 36       	cpi	r24, 0x63	; 99
    3756:	31 f0       	breq	.+12     	; 0x3764 <vfprintf+0x140>
    3758:	83 37       	cpi	r24, 0x73	; 115
    375a:	71 f0       	breq	.+28     	; 0x3778 <vfprintf+0x154>
    375c:	83 35       	cpi	r24, 0x53	; 83
    375e:	09 f0       	breq	.+2      	; 0x3762 <vfprintf+0x13e>
    3760:	55 c0       	rjmp	.+170    	; 0x380c <vfprintf+0x1e8>
    3762:	20 c0       	rjmp	.+64     	; 0x37a4 <vfprintf+0x180>
    3764:	f8 01       	movw	r30, r16
    3766:	80 81       	ld	r24, Z
    3768:	89 83       	std	Y+1, r24	; 0x01
    376a:	0e 5f       	subi	r16, 0xFE	; 254
    376c:	1f 4f       	sbci	r17, 0xFF	; 255
    376e:	88 24       	eor	r8, r8
    3770:	83 94       	inc	r8
    3772:	91 2c       	mov	r9, r1
    3774:	53 01       	movw	r10, r6
    3776:	12 c0       	rjmp	.+36     	; 0x379c <vfprintf+0x178>
    3778:	28 01       	movw	r4, r16
    377a:	f2 e0       	ldi	r31, 0x02	; 2
    377c:	4f 0e       	add	r4, r31
    377e:	51 1c       	adc	r5, r1
    3780:	f8 01       	movw	r30, r16
    3782:	a0 80       	ld	r10, Z
    3784:	b1 80       	ldd	r11, Z+1	; 0x01
    3786:	36 fe       	sbrs	r3, 6
    3788:	03 c0       	rjmp	.+6      	; 0x3790 <vfprintf+0x16c>
    378a:	69 2d       	mov	r22, r9
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <vfprintf+0x170>
    3790:	6f ef       	ldi	r22, 0xFF	; 255
    3792:	7f ef       	ldi	r23, 0xFF	; 255
    3794:	c5 01       	movw	r24, r10
    3796:	4e d1       	rcall	.+668    	; 0x3a34 <strnlen>
    3798:	4c 01       	movw	r8, r24
    379a:	82 01       	movw	r16, r4
    379c:	f3 2d       	mov	r31, r3
    379e:	ff 77       	andi	r31, 0x7F	; 127
    37a0:	3f 2e       	mov	r3, r31
    37a2:	15 c0       	rjmp	.+42     	; 0x37ce <vfprintf+0x1aa>
    37a4:	28 01       	movw	r4, r16
    37a6:	22 e0       	ldi	r18, 0x02	; 2
    37a8:	42 0e       	add	r4, r18
    37aa:	51 1c       	adc	r5, r1
    37ac:	f8 01       	movw	r30, r16
    37ae:	a0 80       	ld	r10, Z
    37b0:	b1 80       	ldd	r11, Z+1	; 0x01
    37b2:	36 fe       	sbrs	r3, 6
    37b4:	03 c0       	rjmp	.+6      	; 0x37bc <vfprintf+0x198>
    37b6:	69 2d       	mov	r22, r9
    37b8:	70 e0       	ldi	r23, 0x00	; 0
    37ba:	02 c0       	rjmp	.+4      	; 0x37c0 <vfprintf+0x19c>
    37bc:	6f ef       	ldi	r22, 0xFF	; 255
    37be:	7f ef       	ldi	r23, 0xFF	; 255
    37c0:	c5 01       	movw	r24, r10
    37c2:	2d d1       	rcall	.+602    	; 0x3a1e <strnlen_P>
    37c4:	4c 01       	movw	r8, r24
    37c6:	f3 2d       	mov	r31, r3
    37c8:	f0 68       	ori	r31, 0x80	; 128
    37ca:	3f 2e       	mov	r3, r31
    37cc:	82 01       	movw	r16, r4
    37ce:	33 fc       	sbrc	r3, 3
    37d0:	19 c0       	rjmp	.+50     	; 0x3804 <vfprintf+0x1e0>
    37d2:	82 2d       	mov	r24, r2
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	88 16       	cp	r8, r24
    37d8:	99 06       	cpc	r9, r25
    37da:	a0 f4       	brcc	.+40     	; 0x3804 <vfprintf+0x1e0>
    37dc:	b6 01       	movw	r22, r12
    37de:	80 e2       	ldi	r24, 0x20	; 32
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	33 d1       	rcall	.+614    	; 0x3a4a <fputc>
    37e4:	2a 94       	dec	r2
    37e6:	f5 cf       	rjmp	.-22     	; 0x37d2 <vfprintf+0x1ae>
    37e8:	f5 01       	movw	r30, r10
    37ea:	37 fc       	sbrc	r3, 7
    37ec:	85 91       	lpm	r24, Z+
    37ee:	37 fe       	sbrs	r3, 7
    37f0:	81 91       	ld	r24, Z+
    37f2:	5f 01       	movw	r10, r30
    37f4:	b6 01       	movw	r22, r12
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	28 d1       	rcall	.+592    	; 0x3a4a <fputc>
    37fa:	21 10       	cpse	r2, r1
    37fc:	2a 94       	dec	r2
    37fe:	21 e0       	ldi	r18, 0x01	; 1
    3800:	82 1a       	sub	r8, r18
    3802:	91 08       	sbc	r9, r1
    3804:	81 14       	cp	r8, r1
    3806:	91 04       	cpc	r9, r1
    3808:	79 f7       	brne	.-34     	; 0x37e8 <vfprintf+0x1c4>
    380a:	e1 c0       	rjmp	.+450    	; 0x39ce <vfprintf+0x3aa>
    380c:	84 36       	cpi	r24, 0x64	; 100
    380e:	11 f0       	breq	.+4      	; 0x3814 <vfprintf+0x1f0>
    3810:	89 36       	cpi	r24, 0x69	; 105
    3812:	39 f5       	brne	.+78     	; 0x3862 <vfprintf+0x23e>
    3814:	f8 01       	movw	r30, r16
    3816:	37 fe       	sbrs	r3, 7
    3818:	07 c0       	rjmp	.+14     	; 0x3828 <vfprintf+0x204>
    381a:	60 81       	ld	r22, Z
    381c:	71 81       	ldd	r23, Z+1	; 0x01
    381e:	82 81       	ldd	r24, Z+2	; 0x02
    3820:	93 81       	ldd	r25, Z+3	; 0x03
    3822:	0c 5f       	subi	r16, 0xFC	; 252
    3824:	1f 4f       	sbci	r17, 0xFF	; 255
    3826:	08 c0       	rjmp	.+16     	; 0x3838 <vfprintf+0x214>
    3828:	60 81       	ld	r22, Z
    382a:	71 81       	ldd	r23, Z+1	; 0x01
    382c:	07 2e       	mov	r0, r23
    382e:	00 0c       	add	r0, r0
    3830:	88 0b       	sbc	r24, r24
    3832:	99 0b       	sbc	r25, r25
    3834:	0e 5f       	subi	r16, 0xFE	; 254
    3836:	1f 4f       	sbci	r17, 0xFF	; 255
    3838:	f3 2d       	mov	r31, r3
    383a:	ff 76       	andi	r31, 0x6F	; 111
    383c:	3f 2e       	mov	r3, r31
    383e:	97 ff       	sbrs	r25, 7
    3840:	09 c0       	rjmp	.+18     	; 0x3854 <vfprintf+0x230>
    3842:	90 95       	com	r25
    3844:	80 95       	com	r24
    3846:	70 95       	com	r23
    3848:	61 95       	neg	r22
    384a:	7f 4f       	sbci	r23, 0xFF	; 255
    384c:	8f 4f       	sbci	r24, 0xFF	; 255
    384e:	9f 4f       	sbci	r25, 0xFF	; 255
    3850:	f0 68       	ori	r31, 0x80	; 128
    3852:	3f 2e       	mov	r3, r31
    3854:	2a e0       	ldi	r18, 0x0A	; 10
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	a3 01       	movw	r20, r6
    385a:	33 d1       	rcall	.+614    	; 0x3ac2 <__ultoa_invert>
    385c:	88 2e       	mov	r8, r24
    385e:	86 18       	sub	r8, r6
    3860:	44 c0       	rjmp	.+136    	; 0x38ea <vfprintf+0x2c6>
    3862:	85 37       	cpi	r24, 0x75	; 117
    3864:	31 f4       	brne	.+12     	; 0x3872 <vfprintf+0x24e>
    3866:	23 2d       	mov	r18, r3
    3868:	2f 7e       	andi	r18, 0xEF	; 239
    386a:	b2 2e       	mov	r11, r18
    386c:	2a e0       	ldi	r18, 0x0A	; 10
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	25 c0       	rjmp	.+74     	; 0x38bc <vfprintf+0x298>
    3872:	93 2d       	mov	r25, r3
    3874:	99 7f       	andi	r25, 0xF9	; 249
    3876:	b9 2e       	mov	r11, r25
    3878:	8f 36       	cpi	r24, 0x6F	; 111
    387a:	c1 f0       	breq	.+48     	; 0x38ac <vfprintf+0x288>
    387c:	18 f4       	brcc	.+6      	; 0x3884 <vfprintf+0x260>
    387e:	88 35       	cpi	r24, 0x58	; 88
    3880:	79 f0       	breq	.+30     	; 0x38a0 <vfprintf+0x27c>
    3882:	ae c0       	rjmp	.+348    	; 0x39e0 <vfprintf+0x3bc>
    3884:	80 37       	cpi	r24, 0x70	; 112
    3886:	19 f0       	breq	.+6      	; 0x388e <vfprintf+0x26a>
    3888:	88 37       	cpi	r24, 0x78	; 120
    388a:	21 f0       	breq	.+8      	; 0x3894 <vfprintf+0x270>
    388c:	a9 c0       	rjmp	.+338    	; 0x39e0 <vfprintf+0x3bc>
    388e:	e9 2f       	mov	r30, r25
    3890:	e0 61       	ori	r30, 0x10	; 16
    3892:	be 2e       	mov	r11, r30
    3894:	b4 fe       	sbrs	r11, 4
    3896:	0d c0       	rjmp	.+26     	; 0x38b2 <vfprintf+0x28e>
    3898:	fb 2d       	mov	r31, r11
    389a:	f4 60       	ori	r31, 0x04	; 4
    389c:	bf 2e       	mov	r11, r31
    389e:	09 c0       	rjmp	.+18     	; 0x38b2 <vfprintf+0x28e>
    38a0:	34 fe       	sbrs	r3, 4
    38a2:	0a c0       	rjmp	.+20     	; 0x38b8 <vfprintf+0x294>
    38a4:	29 2f       	mov	r18, r25
    38a6:	26 60       	ori	r18, 0x06	; 6
    38a8:	b2 2e       	mov	r11, r18
    38aa:	06 c0       	rjmp	.+12     	; 0x38b8 <vfprintf+0x294>
    38ac:	28 e0       	ldi	r18, 0x08	; 8
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	05 c0       	rjmp	.+10     	; 0x38bc <vfprintf+0x298>
    38b2:	20 e1       	ldi	r18, 0x10	; 16
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <vfprintf+0x298>
    38b8:	20 e1       	ldi	r18, 0x10	; 16
    38ba:	32 e0       	ldi	r19, 0x02	; 2
    38bc:	f8 01       	movw	r30, r16
    38be:	b7 fe       	sbrs	r11, 7
    38c0:	07 c0       	rjmp	.+14     	; 0x38d0 <vfprintf+0x2ac>
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	0c 5f       	subi	r16, 0xFC	; 252
    38cc:	1f 4f       	sbci	r17, 0xFF	; 255
    38ce:	06 c0       	rjmp	.+12     	; 0x38dc <vfprintf+0x2b8>
    38d0:	60 81       	ld	r22, Z
    38d2:	71 81       	ldd	r23, Z+1	; 0x01
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	0e 5f       	subi	r16, 0xFE	; 254
    38da:	1f 4f       	sbci	r17, 0xFF	; 255
    38dc:	a3 01       	movw	r20, r6
    38de:	f1 d0       	rcall	.+482    	; 0x3ac2 <__ultoa_invert>
    38e0:	88 2e       	mov	r8, r24
    38e2:	86 18       	sub	r8, r6
    38e4:	fb 2d       	mov	r31, r11
    38e6:	ff 77       	andi	r31, 0x7F	; 127
    38e8:	3f 2e       	mov	r3, r31
    38ea:	36 fe       	sbrs	r3, 6
    38ec:	0d c0       	rjmp	.+26     	; 0x3908 <vfprintf+0x2e4>
    38ee:	23 2d       	mov	r18, r3
    38f0:	2e 7f       	andi	r18, 0xFE	; 254
    38f2:	a2 2e       	mov	r10, r18
    38f4:	89 14       	cp	r8, r9
    38f6:	58 f4       	brcc	.+22     	; 0x390e <vfprintf+0x2ea>
    38f8:	34 fe       	sbrs	r3, 4
    38fa:	0b c0       	rjmp	.+22     	; 0x3912 <vfprintf+0x2ee>
    38fc:	32 fc       	sbrc	r3, 2
    38fe:	09 c0       	rjmp	.+18     	; 0x3912 <vfprintf+0x2ee>
    3900:	83 2d       	mov	r24, r3
    3902:	8e 7e       	andi	r24, 0xEE	; 238
    3904:	a8 2e       	mov	r10, r24
    3906:	05 c0       	rjmp	.+10     	; 0x3912 <vfprintf+0x2ee>
    3908:	b8 2c       	mov	r11, r8
    390a:	a3 2c       	mov	r10, r3
    390c:	03 c0       	rjmp	.+6      	; 0x3914 <vfprintf+0x2f0>
    390e:	b8 2c       	mov	r11, r8
    3910:	01 c0       	rjmp	.+2      	; 0x3914 <vfprintf+0x2f0>
    3912:	b9 2c       	mov	r11, r9
    3914:	a4 fe       	sbrs	r10, 4
    3916:	0f c0       	rjmp	.+30     	; 0x3936 <vfprintf+0x312>
    3918:	fe 01       	movw	r30, r28
    391a:	e8 0d       	add	r30, r8
    391c:	f1 1d       	adc	r31, r1
    391e:	80 81       	ld	r24, Z
    3920:	80 33       	cpi	r24, 0x30	; 48
    3922:	21 f4       	brne	.+8      	; 0x392c <vfprintf+0x308>
    3924:	9a 2d       	mov	r25, r10
    3926:	99 7e       	andi	r25, 0xE9	; 233
    3928:	a9 2e       	mov	r10, r25
    392a:	09 c0       	rjmp	.+18     	; 0x393e <vfprintf+0x31a>
    392c:	a2 fe       	sbrs	r10, 2
    392e:	06 c0       	rjmp	.+12     	; 0x393c <vfprintf+0x318>
    3930:	b3 94       	inc	r11
    3932:	b3 94       	inc	r11
    3934:	04 c0       	rjmp	.+8      	; 0x393e <vfprintf+0x31a>
    3936:	8a 2d       	mov	r24, r10
    3938:	86 78       	andi	r24, 0x86	; 134
    393a:	09 f0       	breq	.+2      	; 0x393e <vfprintf+0x31a>
    393c:	b3 94       	inc	r11
    393e:	a3 fc       	sbrc	r10, 3
    3940:	10 c0       	rjmp	.+32     	; 0x3962 <vfprintf+0x33e>
    3942:	a0 fe       	sbrs	r10, 0
    3944:	06 c0       	rjmp	.+12     	; 0x3952 <vfprintf+0x32e>
    3946:	b2 14       	cp	r11, r2
    3948:	80 f4       	brcc	.+32     	; 0x396a <vfprintf+0x346>
    394a:	28 0c       	add	r2, r8
    394c:	92 2c       	mov	r9, r2
    394e:	9b 18       	sub	r9, r11
    3950:	0d c0       	rjmp	.+26     	; 0x396c <vfprintf+0x348>
    3952:	b2 14       	cp	r11, r2
    3954:	58 f4       	brcc	.+22     	; 0x396c <vfprintf+0x348>
    3956:	b6 01       	movw	r22, r12
    3958:	80 e2       	ldi	r24, 0x20	; 32
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	76 d0       	rcall	.+236    	; 0x3a4a <fputc>
    395e:	b3 94       	inc	r11
    3960:	f8 cf       	rjmp	.-16     	; 0x3952 <vfprintf+0x32e>
    3962:	b2 14       	cp	r11, r2
    3964:	18 f4       	brcc	.+6      	; 0x396c <vfprintf+0x348>
    3966:	2b 18       	sub	r2, r11
    3968:	02 c0       	rjmp	.+4      	; 0x396e <vfprintf+0x34a>
    396a:	98 2c       	mov	r9, r8
    396c:	21 2c       	mov	r2, r1
    396e:	a4 fe       	sbrs	r10, 4
    3970:	0f c0       	rjmp	.+30     	; 0x3990 <vfprintf+0x36c>
    3972:	b6 01       	movw	r22, r12
    3974:	80 e3       	ldi	r24, 0x30	; 48
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	68 d0       	rcall	.+208    	; 0x3a4a <fputc>
    397a:	a2 fe       	sbrs	r10, 2
    397c:	16 c0       	rjmp	.+44     	; 0x39aa <vfprintf+0x386>
    397e:	a1 fc       	sbrc	r10, 1
    3980:	03 c0       	rjmp	.+6      	; 0x3988 <vfprintf+0x364>
    3982:	88 e7       	ldi	r24, 0x78	; 120
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	02 c0       	rjmp	.+4      	; 0x398c <vfprintf+0x368>
    3988:	88 e5       	ldi	r24, 0x58	; 88
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	b6 01       	movw	r22, r12
    398e:	0c c0       	rjmp	.+24     	; 0x39a8 <vfprintf+0x384>
    3990:	8a 2d       	mov	r24, r10
    3992:	86 78       	andi	r24, 0x86	; 134
    3994:	51 f0       	breq	.+20     	; 0x39aa <vfprintf+0x386>
    3996:	a1 fe       	sbrs	r10, 1
    3998:	02 c0       	rjmp	.+4      	; 0x399e <vfprintf+0x37a>
    399a:	8b e2       	ldi	r24, 0x2B	; 43
    399c:	01 c0       	rjmp	.+2      	; 0x39a0 <vfprintf+0x37c>
    399e:	80 e2       	ldi	r24, 0x20	; 32
    39a0:	a7 fc       	sbrc	r10, 7
    39a2:	8d e2       	ldi	r24, 0x2D	; 45
    39a4:	b6 01       	movw	r22, r12
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	50 d0       	rcall	.+160    	; 0x3a4a <fputc>
    39aa:	89 14       	cp	r8, r9
    39ac:	30 f4       	brcc	.+12     	; 0x39ba <vfprintf+0x396>
    39ae:	b6 01       	movw	r22, r12
    39b0:	80 e3       	ldi	r24, 0x30	; 48
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	4a d0       	rcall	.+148    	; 0x3a4a <fputc>
    39b6:	9a 94       	dec	r9
    39b8:	f8 cf       	rjmp	.-16     	; 0x39aa <vfprintf+0x386>
    39ba:	8a 94       	dec	r8
    39bc:	f3 01       	movw	r30, r6
    39be:	e8 0d       	add	r30, r8
    39c0:	f1 1d       	adc	r31, r1
    39c2:	80 81       	ld	r24, Z
    39c4:	b6 01       	movw	r22, r12
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	40 d0       	rcall	.+128    	; 0x3a4a <fputc>
    39ca:	81 10       	cpse	r8, r1
    39cc:	f6 cf       	rjmp	.-20     	; 0x39ba <vfprintf+0x396>
    39ce:	22 20       	and	r2, r2
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <vfprintf+0x3b0>
    39d2:	4e ce       	rjmp	.-868    	; 0x3670 <vfprintf+0x4c>
    39d4:	b6 01       	movw	r22, r12
    39d6:	80 e2       	ldi	r24, 0x20	; 32
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	37 d0       	rcall	.+110    	; 0x3a4a <fputc>
    39dc:	2a 94       	dec	r2
    39de:	f7 cf       	rjmp	.-18     	; 0x39ce <vfprintf+0x3aa>
    39e0:	f6 01       	movw	r30, r12
    39e2:	86 81       	ldd	r24, Z+6	; 0x06
    39e4:	97 81       	ldd	r25, Z+7	; 0x07
    39e6:	02 c0       	rjmp	.+4      	; 0x39ec <vfprintf+0x3c8>
    39e8:	8f ef       	ldi	r24, 0xFF	; 255
    39ea:	9f ef       	ldi	r25, 0xFF	; 255
    39ec:	2b 96       	adiw	r28, 0x0b	; 11
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	ff 90       	pop	r15
    3a02:	ef 90       	pop	r14
    3a04:	df 90       	pop	r13
    3a06:	cf 90       	pop	r12
    3a08:	bf 90       	pop	r11
    3a0a:	af 90       	pop	r10
    3a0c:	9f 90       	pop	r9
    3a0e:	8f 90       	pop	r8
    3a10:	7f 90       	pop	r7
    3a12:	6f 90       	pop	r6
    3a14:	5f 90       	pop	r5
    3a16:	4f 90       	pop	r4
    3a18:	3f 90       	pop	r3
    3a1a:	2f 90       	pop	r2
    3a1c:	08 95       	ret

00003a1e <strnlen_P>:
    3a1e:	fc 01       	movw	r30, r24
    3a20:	05 90       	lpm	r0, Z+
    3a22:	61 50       	subi	r22, 0x01	; 1
    3a24:	70 40       	sbci	r23, 0x00	; 0
    3a26:	01 10       	cpse	r0, r1
    3a28:	d8 f7       	brcc	.-10     	; 0x3a20 <strnlen_P+0x2>
    3a2a:	80 95       	com	r24
    3a2c:	90 95       	com	r25
    3a2e:	8e 0f       	add	r24, r30
    3a30:	9f 1f       	adc	r25, r31
    3a32:	08 95       	ret

00003a34 <strnlen>:
    3a34:	fc 01       	movw	r30, r24
    3a36:	61 50       	subi	r22, 0x01	; 1
    3a38:	70 40       	sbci	r23, 0x00	; 0
    3a3a:	01 90       	ld	r0, Z+
    3a3c:	01 10       	cpse	r0, r1
    3a3e:	d8 f7       	brcc	.-10     	; 0x3a36 <strnlen+0x2>
    3a40:	80 95       	com	r24
    3a42:	90 95       	com	r25
    3a44:	8e 0f       	add	r24, r30
    3a46:	9f 1f       	adc	r25, r31
    3a48:	08 95       	ret

00003a4a <fputc>:
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	fb 01       	movw	r30, r22
    3a54:	23 81       	ldd	r18, Z+3	; 0x03
    3a56:	21 fd       	sbrc	r18, 1
    3a58:	03 c0       	rjmp	.+6      	; 0x3a60 <fputc+0x16>
    3a5a:	8f ef       	ldi	r24, 0xFF	; 255
    3a5c:	9f ef       	ldi	r25, 0xFF	; 255
    3a5e:	2c c0       	rjmp	.+88     	; 0x3ab8 <fputc+0x6e>
    3a60:	22 ff       	sbrs	r18, 2
    3a62:	16 c0       	rjmp	.+44     	; 0x3a90 <fputc+0x46>
    3a64:	46 81       	ldd	r20, Z+6	; 0x06
    3a66:	57 81       	ldd	r21, Z+7	; 0x07
    3a68:	24 81       	ldd	r18, Z+4	; 0x04
    3a6a:	35 81       	ldd	r19, Z+5	; 0x05
    3a6c:	42 17       	cp	r20, r18
    3a6e:	53 07       	cpc	r21, r19
    3a70:	44 f4       	brge	.+16     	; 0x3a82 <fputc+0x38>
    3a72:	a0 81       	ld	r26, Z
    3a74:	b1 81       	ldd	r27, Z+1	; 0x01
    3a76:	9d 01       	movw	r18, r26
    3a78:	2f 5f       	subi	r18, 0xFF	; 255
    3a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7c:	31 83       	std	Z+1, r19	; 0x01
    3a7e:	20 83       	st	Z, r18
    3a80:	8c 93       	st	X, r24
    3a82:	26 81       	ldd	r18, Z+6	; 0x06
    3a84:	37 81       	ldd	r19, Z+7	; 0x07
    3a86:	2f 5f       	subi	r18, 0xFF	; 255
    3a88:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8a:	37 83       	std	Z+7, r19	; 0x07
    3a8c:	26 83       	std	Z+6, r18	; 0x06
    3a8e:	14 c0       	rjmp	.+40     	; 0x3ab8 <fputc+0x6e>
    3a90:	8b 01       	movw	r16, r22
    3a92:	ec 01       	movw	r28, r24
    3a94:	fb 01       	movw	r30, r22
    3a96:	00 84       	ldd	r0, Z+8	; 0x08
    3a98:	f1 85       	ldd	r31, Z+9	; 0x09
    3a9a:	e0 2d       	mov	r30, r0
    3a9c:	19 95       	eicall
    3a9e:	89 2b       	or	r24, r25
    3aa0:	e1 f6       	brne	.-72     	; 0x3a5a <fputc+0x10>
    3aa2:	d8 01       	movw	r26, r16
    3aa4:	16 96       	adiw	r26, 0x06	; 6
    3aa6:	8d 91       	ld	r24, X+
    3aa8:	9c 91       	ld	r25, X
    3aaa:	17 97       	sbiw	r26, 0x07	; 7
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	17 96       	adiw	r26, 0x07	; 7
    3ab0:	9c 93       	st	X, r25
    3ab2:	8e 93       	st	-X, r24
    3ab4:	16 97       	sbiw	r26, 0x06	; 6
    3ab6:	ce 01       	movw	r24, r28
    3ab8:	df 91       	pop	r29
    3aba:	cf 91       	pop	r28
    3abc:	1f 91       	pop	r17
    3abe:	0f 91       	pop	r16
    3ac0:	08 95       	ret

00003ac2 <__ultoa_invert>:
    3ac2:	fa 01       	movw	r30, r20
    3ac4:	aa 27       	eor	r26, r26
    3ac6:	28 30       	cpi	r18, 0x08	; 8
    3ac8:	51 f1       	breq	.+84     	; 0x3b1e <__ultoa_invert+0x5c>
    3aca:	20 31       	cpi	r18, 0x10	; 16
    3acc:	81 f1       	breq	.+96     	; 0x3b2e <__ultoa_invert+0x6c>
    3ace:	e8 94       	clt
    3ad0:	6f 93       	push	r22
    3ad2:	6e 7f       	andi	r22, 0xFE	; 254
    3ad4:	6e 5f       	subi	r22, 0xFE	; 254
    3ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    3ada:	9f 4f       	sbci	r25, 0xFF	; 255
    3adc:	af 4f       	sbci	r26, 0xFF	; 255
    3ade:	b1 e0       	ldi	r27, 0x01	; 1
    3ae0:	3e d0       	rcall	.+124    	; 0x3b5e <__ultoa_invert+0x9c>
    3ae2:	b4 e0       	ldi	r27, 0x04	; 4
    3ae4:	3c d0       	rcall	.+120    	; 0x3b5e <__ultoa_invert+0x9c>
    3ae6:	67 0f       	add	r22, r23
    3ae8:	78 1f       	adc	r23, r24
    3aea:	89 1f       	adc	r24, r25
    3aec:	9a 1f       	adc	r25, r26
    3aee:	a1 1d       	adc	r26, r1
    3af0:	68 0f       	add	r22, r24
    3af2:	79 1f       	adc	r23, r25
    3af4:	8a 1f       	adc	r24, r26
    3af6:	91 1d       	adc	r25, r1
    3af8:	a1 1d       	adc	r26, r1
    3afa:	6a 0f       	add	r22, r26
    3afc:	71 1d       	adc	r23, r1
    3afe:	81 1d       	adc	r24, r1
    3b00:	91 1d       	adc	r25, r1
    3b02:	a1 1d       	adc	r26, r1
    3b04:	20 d0       	rcall	.+64     	; 0x3b46 <__ultoa_invert+0x84>
    3b06:	09 f4       	brne	.+2      	; 0x3b0a <__ultoa_invert+0x48>
    3b08:	68 94       	set
    3b0a:	3f 91       	pop	r19
    3b0c:	2a e0       	ldi	r18, 0x0A	; 10
    3b0e:	26 9f       	mul	r18, r22
    3b10:	11 24       	eor	r1, r1
    3b12:	30 19       	sub	r19, r0
    3b14:	30 5d       	subi	r19, 0xD0	; 208
    3b16:	31 93       	st	Z+, r19
    3b18:	de f6       	brtc	.-74     	; 0x3ad0 <__ultoa_invert+0xe>
    3b1a:	cf 01       	movw	r24, r30
    3b1c:	08 95       	ret
    3b1e:	46 2f       	mov	r20, r22
    3b20:	47 70       	andi	r20, 0x07	; 7
    3b22:	40 5d       	subi	r20, 0xD0	; 208
    3b24:	41 93       	st	Z+, r20
    3b26:	b3 e0       	ldi	r27, 0x03	; 3
    3b28:	0f d0       	rcall	.+30     	; 0x3b48 <__ultoa_invert+0x86>
    3b2a:	c9 f7       	brne	.-14     	; 0x3b1e <__ultoa_invert+0x5c>
    3b2c:	f6 cf       	rjmp	.-20     	; 0x3b1a <__ultoa_invert+0x58>
    3b2e:	46 2f       	mov	r20, r22
    3b30:	4f 70       	andi	r20, 0x0F	; 15
    3b32:	40 5d       	subi	r20, 0xD0	; 208
    3b34:	4a 33       	cpi	r20, 0x3A	; 58
    3b36:	18 f0       	brcs	.+6      	; 0x3b3e <__ultoa_invert+0x7c>
    3b38:	49 5d       	subi	r20, 0xD9	; 217
    3b3a:	31 fd       	sbrc	r19, 1
    3b3c:	40 52       	subi	r20, 0x20	; 32
    3b3e:	41 93       	st	Z+, r20
    3b40:	02 d0       	rcall	.+4      	; 0x3b46 <__ultoa_invert+0x84>
    3b42:	a9 f7       	brne	.-22     	; 0x3b2e <__ultoa_invert+0x6c>
    3b44:	ea cf       	rjmp	.-44     	; 0x3b1a <__ultoa_invert+0x58>
    3b46:	b4 e0       	ldi	r27, 0x04	; 4
    3b48:	a6 95       	lsr	r26
    3b4a:	97 95       	ror	r25
    3b4c:	87 95       	ror	r24
    3b4e:	77 95       	ror	r23
    3b50:	67 95       	ror	r22
    3b52:	ba 95       	dec	r27
    3b54:	c9 f7       	brne	.-14     	; 0x3b48 <__ultoa_invert+0x86>
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	61 05       	cpc	r22, r1
    3b5a:	71 05       	cpc	r23, r1
    3b5c:	08 95       	ret
    3b5e:	9b 01       	movw	r18, r22
    3b60:	ac 01       	movw	r20, r24
    3b62:	0a 2e       	mov	r0, r26
    3b64:	06 94       	lsr	r0
    3b66:	57 95       	ror	r21
    3b68:	47 95       	ror	r20
    3b6a:	37 95       	ror	r19
    3b6c:	27 95       	ror	r18
    3b6e:	ba 95       	dec	r27
    3b70:	c9 f7       	brne	.-14     	; 0x3b64 <__ultoa_invert+0xa2>
    3b72:	62 0f       	add	r22, r18
    3b74:	73 1f       	adc	r23, r19
    3b76:	84 1f       	adc	r24, r20
    3b78:	95 1f       	adc	r25, r21
    3b7a:	a0 1d       	adc	r26, r0
    3b7c:	08 95       	ret

00003b7e <_exit>:
    3b7e:	f8 94       	cli

00003b80 <__stop_program>:
    3b80:	ff cf       	rjmp	.-2      	; 0x3b80 <__stop_program>
