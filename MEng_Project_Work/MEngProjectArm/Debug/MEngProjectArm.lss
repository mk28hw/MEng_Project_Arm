
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00003bec  00003c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003bec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026a  00800324  00800324  00003da4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003da4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e0  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000167e5  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000370c  00000000  00000000  0001b005  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005346  00000000  00000000  0001e711  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f9c  00000000  00000000  00023a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e42  00000000  00000000  000259f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a778  00000000  00000000  00029836  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  00033fae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	a6 c6       	rjmp	.+3404   	; 0xd72 <__vector_9>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_25>
      68:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__vector_36>
      94:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z12printDataLCDv+0x1c4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	7b 13       	cpse	r23, r27
     168:	7e 13       	cpse	r23, r30
     16a:	6d 13       	cpse	r22, r29
     16c:	71 13       	cpse	r23, r17
     16e:	77 13       	cpse	r23, r23
     170:	b5 13       	cpse	r27, r21
     172:	82 13       	cpse	r24, r18
     174:	86 13       	cpse	r24, r22
     176:	8c 13       	cpse	r24, r28
     178:	90 13       	cpse	r25, r16
     17a:	94 13       	cpse	r25, r20
     17c:	9a 13       	cpse	r25, r26
     17e:	9e 13       	cpse	r25, r30
     180:	a2 13       	cpse	r26, r18
     182:	b5 13       	cpse	r27, r21
     184:	a8 13       	cpse	r26, r24
     186:	ac 13       	cpse	r26, r28
     188:	b0 13       	cpse	r27, r16

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
     290:	72 03       	mulsu	r23, r18
     292:	53 10       	cpse	r5, r3
     294:	e8 10       	cpse	r14, r8
     296:	f8 16       	cp	r15, r24

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	ec ee       	ldi	r30, 0xEC	; 236
     2b0:	fb e3       	ldi	r31, 0x3B	; 59
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a4 32       	cpi	r26, 0x24	; 36
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	25 e0       	ldi	r18, 0x05	; 5
     2c4:	a4 e2       	ldi	r26, 0x24	; 36
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	ae 38       	cpi	r26, 0x8E	; 142
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 00 19 	call	0x3200	; 0x3200 <__tablejump2__>
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 16 11 	call	0x222c	; 0x222c <main>
     2f6:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	serialWriting = NO;
	RS485_RX_ON
}
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	8a 01       	movw	r16, r20
     33a:	d2 2e       	mov	r13, r18
     33c:	ad b6       	in	r10, 0x3d	; 61
     33e:	be b6       	in	r11, 0x3e	; 62
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	82 1b       	sub	r24, r18
     346:	91 09       	sbc	r25, r1
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	9e bf       	out	0x3e, r25	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	62 2f       	mov	r22, r18
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 99 0b 	call	0x1732	; 0x1732 <__floatunsisf>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	0e 94 ae 0c 	call	0x195c	; 0x195c <pow>
     372:	2b 01       	movw	r4, r22
     374:	3c 01       	movw	r6, r24
     376:	b8 01       	movw	r22, r16
     378:	01 2e       	mov	r0, r17
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__floatsisf>
     384:	a3 01       	movw	r20, r6
     386:	92 01       	movw	r18, r4
     388:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__cmpsf2>
     38c:	87 fd       	sbrc	r24, 7
     38e:	0b c0       	rjmp	.+22     	; 0x3a6 <_Z8printLCDhhih+0x9c>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e8       	ldi	r20, 0x80	; 128
     396:	5f e3       	ldi	r21, 0x3F	; 63
     398:	c3 01       	movw	r24, r6
     39a:	b2 01       	movw	r22, r4
     39c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__subsf3>
     3a0:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__fixsfsi>
     3a4:	8b 01       	movw	r16, r22
     3a6:	1f 92       	push	r1
     3a8:	df 92       	push	r13
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	6c 01       	movw	r12, r24
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 19 1b 	call	0x3632	; 0x3632 <sprintf>
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	df 92       	push	r13
     3c6:	cf 92       	push	r12
     3c8:	ff 92       	push	r15
     3ca:	ef 92       	push	r14
     3cc:	0e 94 19 1b 	call	0x3632	; 0x3632 <sprintf>
     3d0:	48 2d       	mov	r20, r8
     3d2:	69 2d       	mov	r22, r9
     3d4:	8d e2       	ldi	r24, 0x2D	; 45
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3dc:	b7 01       	movw	r22, r14
     3de:	8d e2       	ldi	r24, 0x2D	; 45
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN5Print5printEPKc>
     3e6:	8d b7       	in	r24, 0x3d	; 61
     3e8:	9e b7       	in	r25, 0x3e	; 62
     3ea:	0c 96       	adiw	r24, 0x0c	; 12
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	9e bf       	out	0x3e, r25	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	8d bf       	out	0x3d, r24	; 61
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	be be       	out	0x3e, r11	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	ad be       	out	0x3d, r10	; 61
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	4f 90       	pop	r4
     42a:	08 95       	ret

0000042c <_Z8printLCDhhPKc>:
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ea 01       	movw	r28, r20
     432:	46 2f       	mov	r20, r22
     434:	68 2f       	mov	r22, r24
     436:	8d e2       	ldi	r24, 0x2D	; 45
     438:	93 e0       	ldi	r25, 0x03	; 3
     43a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     43e:	be 01       	movw	r22, r28
     440:	8d e2       	ldi	r24, 0x2D	; 45
     442:	93 e0       	ldi	r25, 0x03	; 3
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	0c 94 6d 11 	jmp	0x22da	; 0x22da <_ZN5Print5printEPKc>

0000044c <_Z9padNumberih>:
     44c:	8f 92       	push	r8
     44e:	9f 92       	push	r9
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	00 d0       	rcall	.+0      	; 0x466 <_Z9padNumberih+0x1a>
     466:	1f 92       	push	r1
     468:	1f 92       	push	r1
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	7c 01       	movw	r14, r24
     470:	96 2e       	mov	r9, r22
     472:	87 2e       	mov	r8, r23
     474:	ad b6       	in	r10, 0x3d	; 61
     476:	be b6       	in	r11, 0x3e	; 62
     478:	8d b7       	in	r24, 0x3d	; 61
     47a:	9e b7       	in	r25, 0x3e	; 62
     47c:	84 1b       	sub	r24, r20
     47e:	91 09       	sbc	r25, r1
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	9e bf       	out	0x3e, r25	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	8d bf       	out	0x3d, r24	; 61
     48a:	0d b7       	in	r16, 0x3d	; 61
     48c:	1e b7       	in	r17, 0x3e	; 62
     48e:	0f 5f       	subi	r16, 0xFF	; 255
     490:	1f 4f       	sbci	r17, 0xFF	; 255
     492:	1f 92       	push	r1
     494:	4f 93       	push	r20
     496:	80 e1       	ldi	r24, 0x10	; 16
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	ce 01       	movw	r24, r28
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	6c 01       	movw	r12, r24
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	0e 94 19 1b 	call	0x3632	; 0x3632 <sprintf>
     4ac:	8f 92       	push	r8
     4ae:	9f 92       	push	r9
     4b0:	df 92       	push	r13
     4b2:	cf 92       	push	r12
     4b4:	1f 93       	push	r17
     4b6:	0f 93       	push	r16
     4b8:	0e 94 19 1b 	call	0x3632	; 0x3632 <sprintf>
     4bc:	b8 01       	movw	r22, r16
     4be:	c7 01       	movw	r24, r14
     4c0:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
     4c4:	8d b7       	in	r24, 0x3d	; 61
     4c6:	9e b7       	in	r25, 0x3e	; 62
     4c8:	0c 96       	adiw	r24, 0x0c	; 12
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	9e bf       	out	0x3e, r25	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	8d bf       	out	0x3d, r24	; 61
     4d4:	c7 01       	movw	r24, r14
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	be be       	out	0x3e, r11	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	ad be       	out	0x3d, r10	; 61
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	bf 90       	pop	r11
     4fc:	af 90       	pop	r10
     4fe:	9f 90       	pop	r9
     500:	8f 90       	pop	r8
     502:	08 95       	ret

00000504 <_Z13setupSwitchesv>:
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	84 b9       	out	0x04, r24	; 4
     508:	84 b1       	in	r24, 0x04	; 4
     50a:	88 7f       	andi	r24, 0xF8	; 248
     50c:	84 b9       	out	0x04, r24	; 4
     50e:	eb e6       	ldi	r30, 0x6B	; 107
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	87 60       	ori	r24, 0x07	; 7
     516:	80 83       	st	Z, r24
     518:	e8 e6       	ldi	r30, 0x68	; 104
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	81 60       	ori	r24, 0x01	; 1
     520:	80 83       	st	Z, r24
     522:	78 94       	sei
     524:	08 95       	ret

00000526 <_Z13checkPositionhi>:
     526:	83 30       	cpi	r24, 0x03	; 3
     528:	30 f4       	brcc	.+12     	; 0x536 <_Z13checkPositionhi+0x10>
     52a:	cb 01       	movw	r24, r22
     52c:	77 ff       	sbrs	r23, 7
     52e:	1b c0       	rjmp	.+54     	; 0x566 <_Z13checkPositionhi+0x40>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	18 c0       	rjmp	.+48     	; 0x566 <_Z13checkPositionhi+0x40>
     536:	83 30       	cpi	r24, 0x03	; 3
     538:	69 f4       	brne	.+26     	; 0x554 <_Z13checkPositionhi+0x2e>
     53a:	cb 01       	movw	r24, r22
     53c:	61 15       	cp	r22, r1
     53e:	78 4f       	sbci	r23, 0xF8	; 248
     540:	14 f4       	brge	.+4      	; 0x546 <_Z13checkPositionhi+0x20>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	98 ef       	ldi	r25, 0xF8	; 248
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	28 e0       	ldi	r18, 0x08	; 8
     54a:	92 07       	cpc	r25, r18
     54c:	ac f0       	brlt	.+42     	; 0x578 <_Z13checkPositionhi+0x52>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	98 e0       	ldi	r25, 0x08	; 8
     552:	08 95       	ret
     554:	84 50       	subi	r24, 0x04	; 4
     556:	82 30       	cpi	r24, 0x02	; 2
     558:	68 f4       	brcc	.+26     	; 0x574 <_Z13checkPositionhi+0x4e>
     55a:	cb 01       	movw	r24, r22
     55c:	64 3e       	cpi	r22, 0xE4	; 228
     55e:	72 40       	sbci	r23, 0x02	; 2
     560:	14 f4       	brge	.+4      	; 0x566 <_Z13checkPositionhi+0x40>
     562:	84 ee       	ldi	r24, 0xE4	; 228
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	85 3a       	cpi	r24, 0xA5	; 165
     568:	26 e0       	ldi	r18, 0x06	; 6
     56a:	92 07       	cpc	r25, r18
     56c:	2c f0       	brlt	.+10     	; 0x578 <_Z13checkPositionhi+0x52>
     56e:	84 ea       	ldi	r24, 0xA4	; 164
     570:	96 e0       	ldi	r25, 0x06	; 6
     572:	08 95       	ret
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	9f ef       	ldi	r25, 0xFF	; 255
     578:	08 95       	ret

0000057a <_Z11printSerial6Stringi>:
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	eb 01       	movw	r28, r22
     580:	bc 01       	movw	r22, r24
     582:	83 e8       	ldi	r24, 0x83	; 131
     584:	93 e0       	ldi	r25, 0x03	; 3
     586:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN5Print5printERK6String>
     58a:	62 ee       	ldi	r22, 0xE2	; 226
     58c:	72 e0       	ldi	r23, 0x02	; 2
     58e:	83 e8       	ldi	r24, 0x83	; 131
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN5Print5printEPKc>
     596:	4a e0       	ldi	r20, 0x0A	; 10
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	be 01       	movw	r22, r28
     59c:	83 e8       	ldi	r24, 0x83	; 131
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <_ZN5Print7printlnEii>

000005a8 <_Z12error_decodeh>:
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	e6 97       	sbiw	r28, 0x36	; 54
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	08 2f       	mov	r16, r24
     5ca:	69 ef       	ldi	r22, 0xF9	; 249
     5cc:	72 e0       	ldi	r23, 0x02	; 2
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	7c 01       	movw	r14, r24
     5d4:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
     5d8:	69 ef       	ldi	r22, 0xF9	; 249
     5da:	72 e0       	ldi	r23, 0x02	; 2
     5dc:	ce 01       	movw	r24, r28
     5de:	07 96       	adiw	r24, 0x07	; 7
     5e0:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
     5e4:	10 2f       	mov	r17, r16
     5e6:	11 70       	andi	r17, 0x01	; 1
     5e8:	00 fd       	sbrc	r16, 0
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <_Z12error_decodeh+0x4a>
     5ec:	69 ef       	ldi	r22, 0xF9	; 249
     5ee:	72 e0       	ldi	r23, 0x02	; 2
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <_Z12error_decodeh+0x4e>
     5f2:	66 e1       	ldi	r22, 0x16	; 22
     5f4:	72 e0       	ldi	r23, 0x02	; 2
     5f6:	ce 01       	movw	r24, r28
     5f8:	0d 96       	adiw	r24, 0x0d	; 13
     5fa:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
     5fe:	11 11       	cpse	r17, r1
     600:	03 c0       	rjmp	.+6      	; 0x608 <_Z12error_decodeh+0x60>
     602:	69 ef       	ldi	r22, 0xF9	; 249
     604:	72 e0       	ldi	r23, 0x02	; 2
     606:	02 c0       	rjmp	.+4      	; 0x60c <_Z12error_decodeh+0x64>
     608:	6a e1       	ldi	r22, 0x1A	; 26
     60a:	72 e0       	ldi	r23, 0x02	; 2
     60c:	ce 01       	movw	r24, r28
     60e:	43 96       	adiw	r24, 0x13	; 19
     610:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
     614:	11 11       	cpse	r17, r1
     616:	03 c0       	rjmp	.+6      	; 0x61e <_Z12error_decodeh+0x76>
     618:	69 ef       	ldi	r22, 0xF9	; 249
     61a:	72 e0       	ldi	r23, 0x02	; 2
     61c:	02 c0       	rjmp	.+4      	; 0x622 <_Z12error_decodeh+0x7a>
     61e:	6e e1       	ldi	r22, 0x1E	; 30
     620:	72 e0       	ldi	r23, 0x02	; 2
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
     62a:	11 11       	cpse	r17, r1
     62c:	03 c0       	rjmp	.+6      	; 0x634 <_Z12error_decodeh+0x8c>
     62e:	69 ef       	ldi	r22, 0xF9	; 249
     630:	72 e0       	ldi	r23, 0x02	; 2
     632:	02 c0       	rjmp	.+4      	; 0x638 <_Z12error_decodeh+0x90>
     634:	62 e2       	ldi	r22, 0x22	; 34
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	ce 01       	movw	r24, r28
     63a:	4f 96       	adiw	r24, 0x1f	; 31
     63c:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
     640:	11 11       	cpse	r17, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <_Z12error_decodeh+0xa2>
     644:	69 ef       	ldi	r22, 0xF9	; 249
     646:	72 e0       	ldi	r23, 0x02	; 2
     648:	02 c0       	rjmp	.+4      	; 0x64e <_Z12error_decodeh+0xa6>
     64a:	66 e2       	ldi	r22, 0x26	; 38
     64c:	72 e0       	ldi	r23, 0x02	; 2
     64e:	ce 01       	movw	r24, r28
     650:	85 96       	adiw	r24, 0x25	; 37
     652:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
     656:	69 ef       	ldi	r22, 0xF9	; 249
     658:	72 e0       	ldi	r23, 0x02	; 2
     65a:	ce 01       	movw	r24, r28
     65c:	8b 96       	adiw	r24, 0x2b	; 43
     65e:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
     662:	67 01       	movw	r12, r14
     664:	00 e0       	ldi	r16, 0x00	; 0
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	b6 01       	movw	r22, r12
     66a:	ce 01       	movw	r24, r28
     66c:	c1 96       	adiw	r24, 0x31	; 49
     66e:	0e 94 b0 14 	call	0x2960	; 0x2960 <_ZN6StringC1ERKS_>
     672:	b8 01       	movw	r22, r16
     674:	ce 01       	movw	r24, r28
     676:	c1 96       	adiw	r24, 0x31	; 49
     678:	80 df       	rcall	.-256    	; 0x57a <_Z11printSerial6Stringi>
     67a:	ce 01       	movw	r24, r28
     67c:	c1 96       	adiw	r24, 0x31	; 49
     67e:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
     682:	0f 5f       	subi	r16, 0xFF	; 255
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	96 e0       	ldi	r25, 0x06	; 6
     688:	c9 0e       	add	r12, r25
     68a:	d1 1c       	adc	r13, r1
     68c:	08 30       	cpi	r16, 0x08	; 8
     68e:	11 05       	cpc	r17, r1
     690:	59 f7       	brne	.-42     	; 0x668 <_Z12error_decodeh+0xc0>
     692:	8e 01       	movw	r16, r28
     694:	0f 5c       	subi	r16, 0xCF	; 207
     696:	1f 4f       	sbci	r17, 0xFF	; 255
     698:	06 50       	subi	r16, 0x06	; 6
     69a:	11 09       	sbc	r17, r1
     69c:	c8 01       	movw	r24, r16
     69e:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
     6a2:	e0 16       	cp	r14, r16
     6a4:	f1 06       	cpc	r15, r17
     6a6:	c1 f7       	brne	.-16     	; 0x698 <_Z12error_decodeh+0xf0>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	e6 96       	adiw	r28, 0x36	; 54
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	08 95       	ret

000006ca <_Z8sumBytesPhh>:
     6ca:	38 2f       	mov	r19, r24
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	2e 2f       	mov	r18, r30
     6d4:	23 1b       	sub	r18, r19
     6d6:	26 17       	cp	r18, r22
     6d8:	20 f4       	brcc	.+8      	; 0x6e2 <_Z8sumBytesPhh+0x18>
     6da:	21 91       	ld	r18, Z+
     6dc:	82 0f       	add	r24, r18
     6de:	91 1d       	adc	r25, r1
     6e0:	f8 cf       	rjmp	.-16     	; 0x6d2 <_Z8sumBytesPhh+0x8>
     6e2:	08 95       	ret

000006e4 <_GLOBAL__sub_I_position_old>:
     6e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     6e8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     6ec:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <currPos+0x1>
     6f0:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <currPos>
     6f4:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <arm+0x1>
     6f8:	24 e0       	ldi	r18, 0x04	; 4
     6fa:	44 e1       	ldi	r20, 0x14	; 20
     6fc:	67 e2       	ldi	r22, 0x27	; 39
     6fe:	8d e2       	ldi	r24, 0x2D	; 45
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <_ZN17LiquidCrystal_I2CC1Ehhh>

00000706 <_Z11printBufferv>:
     706:	6a e2       	ldi	r22, 0x2A	; 42
     708:	72 e0       	ldi	r23, 0x02	; 2
     70a:	83 e8       	ldi	r24, 0x83	; 131
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN5Print5printEPKc>
     712:	80 e2       	ldi	r24, 0x20	; 32
     714:	94 e0       	ldi	r25, 0x04	; 4
     716:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
     71a:	4a e0       	ldi	r20, 0x0A	; 10
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	bc 01       	movw	r22, r24
     720:	83 e8       	ldi	r24, 0x83	; 131
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN5Print5printEii>
     728:	65 e3       	ldi	r22, 0x35	; 53
     72a:	72 e0       	ldi	r23, 0x02	; 2
     72c:	83 e8       	ldi	r24, 0x83	; 131
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZN5Print7printlnEPKc>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <serialReading>
     73a:	80 e2       	ldi	r24, 0x20	; 32
     73c:	94 e0       	ldi	r25, 0x04	; 4
     73e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
     742:	89 2b       	or	r24, r25
     744:	19 f1       	breq	.+70     	; 0x78c <_Z11printBufferv+0x86>
     746:	80 e2       	ldi	r24, 0x20	; 32
     748:	94 e0       	ldi	r25, 0x04	; 4
     74a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
     74e:	4a e0       	ldi	r20, 0x0A	; 10
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	bc 01       	movw	r22, r24
     754:	83 e8       	ldi	r24, 0x83	; 131
     756:	93 e0       	ldi	r25, 0x03	; 3
     758:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN5Print5printEii>
     75c:	6b e4       	ldi	r22, 0x4B	; 75
     75e:	72 e0       	ldi	r23, 0x02	; 2
     760:	83 e8       	ldi	r24, 0x83	; 131
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN5Print5printEPKc>
     768:	80 e2       	ldi	r24, 0x20	; 32
     76a:	94 e0       	ldi	r25, 0x04	; 4
     76c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     770:	4a e0       	ldi	r20, 0x0A	; 10
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	bc 01       	movw	r22, r24
     776:	83 e8       	ldi	r24, 0x83	; 131
     778:	93 e0       	ldi	r25, 0x03	; 3
     77a:	0e 94 3c 12 	call	0x2478	; 0x2478 <_ZN5Print7printlnEii>
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     78a:	d7 cf       	rjmp	.-82     	; 0x73a <_Z11printBufferv+0x34>
     78c:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <serialReading>
     790:	6e e4       	ldi	r22, 0x4E	; 78
     792:	72 e0       	ldi	r23, 0x02	; 2
     794:	83 e8       	ldi	r24, 0x83	; 131
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	0c 94 88 11 	jmp	0x2310	; 0x2310 <_ZN5Print7printlnEPKc>

0000079c <_Z12printDataLCDv>:
     79c:	7f 92       	push	r7
     79e:	8f 92       	push	r8
     7a0:	9f 92       	push	r9
     7a2:	af 92       	push	r10
     7a4:	bf 92       	push	r11
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	6a e0       	ldi	r22, 0x0A	; 10
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     7c2:	80 e2       	ldi	r24, 0x20	; 32
     7c4:	94 e0       	ldi	r25, 0x04	; 4
     7c6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
     7ca:	18 16       	cp	r1, r24
     7cc:	19 06       	cpc	r1, r25
     7ce:	0c f0       	brlt	.+2      	; 0x7d2 <_Z12printDataLCDv+0x36>
     7d0:	ac c1       	rjmp	.+856    	; 0xb2a <_Z12printDataLCDv+0x38e>
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <serialReading>
     7d8:	80 e2       	ldi	r24, 0x20	; 32
     7da:	94 e0       	ldi	r25, 0x04	; 4
     7dc:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     7e0:	8f 3f       	cpi	r24, 0xFF	; 255
     7e2:	91 05       	cpc	r25, r1
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <_Z12printDataLCDv+0x4c>
     7e6:	a1 c1       	rjmp	.+834    	; 0xb2a <_Z12printDataLCDv+0x38e>
     7e8:	80 e2       	ldi	r24, 0x20	; 32
     7ea:	94 e0       	ldi	r25, 0x04	; 4
     7ec:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     7f0:	8f 3f       	cpi	r24, 0xFF	; 255
     7f2:	91 05       	cpc	r25, r1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <_Z12printDataLCDv+0x5c>
     7f6:	99 c1       	rjmp	.+818    	; 0xb2a <_Z12printDataLCDv+0x38e>
     7f8:	80 e2       	ldi	r24, 0x20	; 32
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     800:	ec 01       	movw	r28, r24
     802:	b8 2e       	mov	r11, r24
     804:	2f ef       	ldi	r18, 0xFF	; 255
     806:	82 17       	cp	r24, r18
     808:	b9 f3       	breq	.-18     	; 0x7f8 <_Z12printDataLCDv+0x5c>
     80a:	80 e2       	ldi	r24, 0x20	; 32
     80c:	94 e0       	ldi	r25, 0x04	; 4
     80e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     812:	08 2f       	mov	r16, r24
     814:	80 e2       	ldi	r24, 0x20	; 32
     816:	94 e0       	ldi	r25, 0x04	; 4
     818:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     81c:	18 2f       	mov	r17, r24
     81e:	81 11       	cpse	r24, r1
     820:	02 c0       	rjmp	.+4      	; 0x826 <_Z12printDataLCDv+0x8a>
     822:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <error_byte_old>
     826:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <error_byte_old>
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	66 e0       	ldi	r22, 0x06	; 6
     82e:	8d e2       	ldi	r24, 0x2D	; 45
     830:	93 e0       	ldi	r25, 0x03	; 3
     832:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     836:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <error_counter>
     83a:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <error_counter+0x1>
     83e:	11 11       	cpse	r17, r1
     840:	02 c0       	rjmp	.+4      	; 0x846 <_Z12printDataLCDv+0xaa>
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	11 f1       	breq	.+68     	; 0x88a <_Z12printDataLCDv+0xee>
     846:	8b 30       	cpi	r24, 0x0B	; 11
     848:	91 05       	cpc	r25, r1
     84a:	14 f4       	brge	.+4      	; 0x850 <_Z12printDataLCDv+0xb4>
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	02 c0       	rjmp	.+4      	; 0x854 <_Z12printDataLCDv+0xb8>
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <error_counter+0x1>
     858:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <error_counter>
     85c:	81 2f       	mov	r24, r17
     85e:	a4 de       	rcall	.-696    	; 0x5a8 <_Z12error_decodeh>
     860:	6a e7       	ldi	r22, 0x7A	; 122
     862:	72 e0       	ldi	r23, 0x02	; 2
     864:	8d e2       	ldi	r24, 0x2D	; 45
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN5Print5printEPKc>
     86c:	4a e0       	ldi	r20, 0x0A	; 10
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	60 91 3d 03 	lds	r22, 0x033D	; 0x80033d <error_byte_old>
     874:	8d e2       	ldi	r24, 0x2D	; 45
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <_ZN5Print5printEhi>
     87c:	65 e8       	ldi	r22, 0x85	; 133
     87e:	72 e0       	ldi	r23, 0x02	; 2
     880:	8d e2       	ldi	r24, 0x2D	; 45
     882:	93 e0       	ldi	r25, 0x03	; 3
     884:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN5Print5printEPKc>
     888:	2a c1       	rjmp	.+596    	; 0xade <_Z12printDataLCDv+0x342>
     88a:	6e e7       	ldi	r22, 0x7E	; 126
     88c:	72 e0       	ldi	r23, 0x02	; 2
     88e:	8d e2       	ldi	r24, 0x2D	; 45
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN5Print5printEPKc>
     896:	03 30       	cpi	r16, 0x03	; 3
     898:	08 f4       	brcc	.+2      	; 0x89c <_Z12printDataLCDv+0x100>
     89a:	21 c1       	rjmp	.+578    	; 0xade <_Z12printDataLCDv+0x342>
     89c:	80 e2       	ldi	r24, 0x20	; 32
     89e:	94 e0       	ldi	r25, 0x04	; 4
     8a0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     8a4:	8c 01       	movw	r16, r24
     8a6:	80 e2       	ldi	r24, 0x20	; 32
     8a8:	94 e0       	ldi	r25, 0x04	; 4
     8aa:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	38 2f       	mov	r19, r24
     8b4:	02 0f       	add	r16, r18
     8b6:	13 1f       	adc	r17, r19
     8b8:	7e 01       	movw	r14, r28
     8ba:	ff 24       	eor	r15, r15
     8bc:	3a e0       	ldi	r19, 0x0A	; 10
     8be:	c3 9f       	mul	r28, r19
     8c0:	e0 01       	movw	r28, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	c2 5c       	subi	r28, 0xC2	; 194
     8c6:	dc 4f       	sbci	r29, 0xFC	; 252
     8c8:	8e 81       	ldd	r24, Y+6	; 0x06
     8ca:	2c 81       	ldd	r18, Y+4	; 0x04
     8cc:	3d 81       	ldd	r19, Y+5	; 0x05
     8ce:	9f 81       	ldd	r25, Y+7	; 0x07
     8d0:	81 11       	cpse	r24, r1
     8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <_Z12printDataLCDv+0x148>
     8d4:	a8 01       	movw	r20, r16
     8d6:	4c 59       	subi	r20, 0x9C	; 156
     8d8:	5f 4f       	sbci	r21, 0xFF	; 255
     8da:	42 17       	cp	r20, r18
     8dc:	53 07       	cpc	r21, r19
     8de:	44 f4       	brge	.+16     	; 0x8f0 <_Z12printDataLCDv+0x154>
     8e0:	9f 5f       	subi	r25, 0xFF	; 255
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <_Z12printDataLCDv+0x154>
     8e4:	2c 59       	subi	r18, 0x9C	; 156
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	20 17       	cp	r18, r16
     8ea:	31 07       	cpc	r19, r17
     8ec:	0c f4       	brge	.+2      	; 0x8f0 <_Z12printDataLCDv+0x154>
     8ee:	91 50       	subi	r25, 0x01	; 1
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	8e 9d       	mul	r24, r14
     8f4:	f0 01       	movw	r30, r0
     8f6:	8f 9d       	mul	r24, r15
     8f8:	f0 0d       	add	r31, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	e2 5c       	subi	r30, 0xC2	; 194
     8fe:	fc 4f       	sbci	r31, 0xFC	; 252
     900:	97 83       	std	Z+7, r25	; 0x07
     902:	80 e2       	ldi	r24, 0x20	; 32
     904:	94 e0       	ldi	r25, 0x04	; 4
     906:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     90a:	6c 01       	movw	r12, r24
     90c:	80 e2       	ldi	r24, 0x20	; 32
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	38 2f       	mov	r19, r24
     91a:	c2 0e       	add	r12, r18
     91c:	d3 1e       	adc	r13, r19
     91e:	80 e2       	ldi	r24, 0x20	; 32
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     926:	ec 01       	movw	r28, r24
     928:	80 e2       	ldi	r24, 0x20	; 32
     92a:	94 e0       	ldi	r25, 0x04	; 4
     92c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	38 2f       	mov	r19, r24
     936:	c2 0f       	add	r28, r18
     938:	d3 1f       	adc	r29, r19
     93a:	80 e2       	ldi	r24, 0x20	; 32
     93c:	94 e0       	ldi	r25, 0x04	; 4
     93e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     942:	80 e2       	ldi	r24, 0x20	; 32
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     94a:	80 e2       	ldi	r24, 0x20	; 32
     94c:	94 e0       	ldi	r25, 0x04	; 4
     94e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     952:	80 e2       	ldi	r24, 0x20	; 32
     954:	94 e0       	ldi	r25, 0x04	; 4
     956:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     95a:	80 e2       	ldi	r24, 0x20	; 32
     95c:	94 e0       	ldi	r25, 0x04	; 4
     95e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     962:	80 e2       	ldi	r24, 0x20	; 32
     964:	94 e0       	ldi	r25, 0x04	; 4
     966:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     96a:	80 e2       	ldi	r24, 0x20	; 32
     96c:	94 e0       	ldi	r25, 0x04	; 4
     96e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     972:	80 e2       	ldi	r24, 0x20	; 32
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     97a:	80 e2       	ldi	r24, 0x20	; 32
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     982:	c1 14       	cp	r12, r1
     984:	54 e0       	ldi	r21, 0x04	; 4
     986:	d5 06       	cpc	r13, r21
     988:	2c f0       	brlt	.+10     	; 0x994 <_Z12printDataLCDv+0x1f8>
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	d8 1a       	sub	r13, r24
     98e:	77 24       	eor	r7, r7
     990:	73 94       	inc	r7
     992:	01 c0       	rjmp	.+2      	; 0x996 <_Z12printDataLCDv+0x1fa>
     994:	71 2c       	mov	r7, r1
     996:	c1 15       	cp	r28, r1
     998:	94 e0       	ldi	r25, 0x04	; 4
     99a:	d9 07       	cpc	r29, r25
     99c:	24 f0       	brlt	.+8      	; 0x9a6 <_Z12printDataLCDv+0x20a>
     99e:	d4 50       	subi	r29, 0x04	; 4
     9a0:	aa 24       	eor	r10, r10
     9a2:	a3 94       	inc	r10
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <_Z12printDataLCDv+0x20c>
     9a6:	a1 2c       	mov	r10, r1
     9a8:	8a e0       	ldi	r24, 0x0A	; 10
     9aa:	8e 9d       	mul	r24, r14
     9ac:	90 01       	movw	r18, r0
     9ae:	8f 9d       	mul	r24, r15
     9b0:	30 0d       	add	r19, r0
     9b2:	11 24       	eor	r1, r1
     9b4:	f9 01       	movw	r30, r18
     9b6:	e2 5c       	subi	r30, 0xC2	; 194
     9b8:	fc 4f       	sbci	r31, 0xFC	; 252
     9ba:	4f 01       	movw	r8, r30
     9bc:	76 82       	std	Z+6, r7	; 0x06
     9be:	15 83       	std	Z+5, r17	; 0x05
     9c0:	04 83       	std	Z+4, r16	; 0x04
     9c2:	97 01       	movw	r18, r14
     9c4:	2f 5f       	subi	r18, 0xFF	; 255
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	82 9f       	mul	r24, r18
     9ca:	f0 01       	movw	r30, r0
     9cc:	83 9f       	mul	r24, r19
     9ce:	f0 0d       	add	r31, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	e2 5c       	subi	r30, 0xC2	; 194
     9d4:	fc 4f       	sbci	r31, 0xFC	; 252
     9d6:	d1 83       	std	Z+1, r29	; 0x01
     9d8:	c0 83       	st	Z, r28
     9da:	21 e0       	ldi	r18, 0x01	; 1
     9dc:	a7 01       	movw	r20, r14
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	84 e0       	ldi	r24, 0x04	; 4
     9e2:	93 dc       	rcall	.-1754   	; 0x30a <_Z8printLCDhhih>
     9e4:	f4 01       	movw	r30, r8
     9e6:	83 81       	ldd	r24, Z+3	; 0x03
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	29 f0       	breq	.+10     	; 0x9f6 <_Z12printDataLCDv+0x25a>
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	31 f0       	breq	.+12     	; 0x9fc <_Z12printDataLCDv+0x260>
     9f0:	6b e6       	ldi	r22, 0x6B	; 107
     9f2:	72 e0       	ldi	r23, 0x02	; 2
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <_Z12printDataLCDv+0x264>
     9f6:	60 e7       	ldi	r22, 0x70	; 112
     9f8:	72 e0       	ldi	r23, 0x02	; 2
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <_Z12printDataLCDv+0x264>
     9fc:	65 e7       	ldi	r22, 0x75	; 117
     9fe:	72 e0       	ldi	r23, 0x02	; 2
     a00:	8d e2       	ldi	r24, 0x2D	; 45
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN5Print5printEPKc>
     a08:	2a e0       	ldi	r18, 0x0A	; 10
     a0a:	2e 9d       	mul	r18, r14
     a0c:	c0 01       	movw	r24, r0
     a0e:	2f 9d       	mul	r18, r15
     a10:	90 0d       	add	r25, r0
     a12:	11 24       	eor	r1, r1
     a14:	9c 01       	movw	r18, r24
     a16:	22 5c       	subi	r18, 0xC2	; 194
     a18:	3c 4f       	sbci	r19, 0xFC	; 252
     a1a:	49 01       	movw	r8, r18
     a1c:	f9 01       	movw	r30, r18
     a1e:	64 81       	ldd	r22, Z+4	; 0x04
     a20:	75 81       	ldd	r23, Z+5	; 0x05
     a22:	07 2e       	mov	r0, r23
     a24:	00 0c       	add	r0, r0
     a26:	88 0b       	sbc	r24, r24
     a28:	99 0b       	sbc	r25, r25
     a2a:	85 d6       	rcall	.+3338   	; 0x1736 <__floatsisf>
     a2c:	28 e5       	ldi	r18, 0x58	; 88
     a2e:	39 e3       	ldi	r19, 0x39	; 57
     a30:	44 eb       	ldi	r20, 0xB4	; 180
     a32:	5d e3       	ldi	r21, 0x3D	; 61
     a34:	30 d7       	rcall	.+3680   	; 0x1896 <__mulsf3>
     a36:	4c d6       	rcall	.+3224   	; 0x16d0 <__fixsfsi>
     a38:	24 e0       	ldi	r18, 0x04	; 4
     a3a:	ab 01       	movw	r20, r22
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	64 dc       	rcall	.-1848   	; 0x30a <_Z8printLCDhhih>
     a42:	6f ed       	ldi	r22, 0xDF	; 223
     a44:	8d e2       	ldi	r24, 0x2D	; 45
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN5Print5printEc>
     a4c:	f4 01       	movw	r30, r8
     a4e:	47 81       	ldd	r20, Z+7	; 0x07
     a50:	04 2e       	mov	r0, r20
     a52:	00 0c       	add	r0, r0
     a54:	55 0b       	sbc	r21, r21
     a56:	23 e0       	ldi	r18, 0x03	; 3
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	8a e0       	ldi	r24, 0x0A	; 10
     a5c:	56 dc       	rcall	.-1876   	; 0x30a <_Z8printLCDhhih>
     a5e:	68 e1       	ldi	r22, 0x18	; 24
     a60:	72 e0       	ldi	r23, 0x02	; 2
     a62:	8d e2       	ldi	r24, 0x2D	; 45
     a64:	93 e0       	ldi	r25, 0x03	; 3
     a66:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN5Print5printEPKc>
     a6a:	24 e0       	ldi	r18, 0x04	; 4
     a6c:	a6 01       	movw	r20, r12
     a6e:	62 e0       	ldi	r22, 0x02	; 2
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	4b dc       	rcall	.-1898   	; 0x30a <_Z8printLCDhhih>
     a74:	71 10       	cpse	r7, r1
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <_Z12printDataLCDv+0x2e0>
     a78:	6f e7       	ldi	r22, 0x7F	; 127
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <_Z12printDataLCDv+0x2e2>
     a7c:	6e e7       	ldi	r22, 0x7E	; 126
     a7e:	8d e2       	ldi	r24, 0x2D	; 45
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN5Print5printEc>
     a86:	8a e0       	ldi	r24, 0x0A	; 10
     a88:	8e 9d       	mul	r24, r14
     a8a:	f0 01       	movw	r30, r0
     a8c:	8f 9d       	mul	r24, r15
     a8e:	f0 0d       	add	r31, r0
     a90:	11 24       	eor	r1, r1
     a92:	e2 5c       	subi	r30, 0xC2	; 194
     a94:	fc 4f       	sbci	r31, 0xFC	; 252
     a96:	40 85       	ldd	r20, Z+8	; 0x08
     a98:	51 85       	ldd	r21, Z+9	; 0x09
     a9a:	24 e0       	ldi	r18, 0x04	; 4
     a9c:	62 e0       	ldi	r22, 0x02	; 2
     a9e:	35 dc       	rcall	.-1942   	; 0x30a <_Z8printLCDhhih>
     aa0:	24 e0       	ldi	r18, 0x04	; 4
     aa2:	ae 01       	movw	r20, r28
     aa4:	63 e0       	ldi	r22, 0x03	; 3
     aa6:	84 e0       	ldi	r24, 0x04	; 4
     aa8:	30 dc       	rcall	.-1952   	; 0x30a <_Z8printLCDhhih>
     aaa:	a1 10       	cpse	r10, r1
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <_Z12printDataLCDv+0x316>
     aae:	6f e7       	ldi	r22, 0x7F	; 127
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <_Z12printDataLCDv+0x318>
     ab2:	6e e7       	ldi	r22, 0x7E	; 126
     ab4:	8d e2       	ldi	r24, 0x2D	; 45
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN5Print5printEc>
     abc:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <servoID_old>
     ac0:	b8 12       	cpse	r11, r24
     ac2:	05 c0       	rjmp	.+10     	; 0xace <_Z12printDataLCDv+0x332>
     ac4:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <currPos>
     ac8:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <currPos+0x1>
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <_Z12printDataLCDv+0x336>
     ace:	90 2f       	mov	r25, r16
     ad0:	81 2f       	mov	r24, r17
     ad2:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <currPos>
     ad6:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <currPos+0x1>
     ada:	b0 92 82 03 	sts	0x0382, r11	; 0x800382 <servoID_old>
     ade:	80 e2       	ldi	r24, 0x20	; 32
     ae0:	94 e0       	ldi	r25, 0x04	; 4
     ae2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
     ae6:	18 16       	cp	r1, r24
     ae8:	19 06       	cpc	r1, r25
     aea:	2c f4       	brge	.+10     	; 0xaf6 <_Z12printDataLCDv+0x35a>
     aec:	80 e2       	ldi	r24, 0x20	; 32
     aee:	94 e0       	ldi	r25, 0x04	; 4
     af0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     af4:	f4 cf       	rjmp	.-24     	; 0xade <_Z12printDataLCDv+0x342>
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     b02:	40 91 39 03 	lds	r20, 0x0339	; 0x800339 <cycle_counter>
     b06:	50 91 3a 03 	lds	r21, 0x033A	; 0x80033a <cycle_counter+0x1>
     b0a:	49 30       	cpi	r20, 0x09	; 9
     b0c:	51 05       	cpc	r21, r1
     b0e:	1c f4       	brge	.+6      	; 0xb16 <_Z12printDataLCDv+0x37a>
     b10:	4f 5f       	subi	r20, 0xFF	; 255
     b12:	5f 4f       	sbci	r21, 0xFF	; 255
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <_Z12printDataLCDv+0x37e>
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	50 93 3a 03 	sts	0x033A, r21	; 0x80033a <cycle_counter+0x1>
     b1e:	40 93 39 03 	sts	0x0339, r20	; 0x800339 <cycle_counter>
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	82 e1       	ldi	r24, 0x12	; 18
     b28:	f0 db       	rcall	.-2080   	; 0x30a <_Z8printLCDhhih>
     b2a:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <serialReading>
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	bf 90       	pop	r11
     b40:	af 90       	pop	r10
     b42:	9f 90       	pop	r9
     b44:	8f 90       	pop	r8
     b46:	7f 90       	pop	r7
     b48:	08 95       	ret

00000b4a <_Z10writeServohhPhh>:
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	18 2f       	mov	r17, r24
     b58:	d6 2f       	mov	r29, r22
     b5a:	7a 01       	movw	r14, r20
     b5c:	02 2f       	mov	r16, r18
     b5e:	c6 e0       	ldi	r28, 0x06	; 6
     b60:	c6 0f       	add	r28, r22
     b62:	c2 0f       	add	r28, r18
     b64:	62 2f       	mov	r22, r18
     b66:	ca 01       	movw	r24, r20
     b68:	b0 dd       	rcall	.-1184   	; 0x6ca <_Z8sumBytesPhh>
     b6a:	c1 0f       	add	r28, r17
     b6c:	8c 0f       	add	r24, r28
     b6e:	c8 2f       	mov	r28, r24
     b70:	c0 95       	com	r28
     b72:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <serialWriting>
     b76:	88 23       	and	r24, r24
     b78:	39 f0       	breq	.+14     	; 0xb88 <_Z10writeServohhPhh+0x3e>
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     b86:	f5 cf       	rjmp	.-22     	; 0xb72 <_Z10writeServohhPhh+0x28>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <serialWriting>
     b8e:	80 e2       	ldi	r24, 0x20	; 32
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
     b96:	89 2b       	or	r24, r25
     b98:	29 f0       	breq	.+10     	; 0xba4 <_Z10writeServohhPhh+0x5a>
     b9a:	80 e2       	ldi	r24, 0x20	; 32
     b9c:	94 e0       	ldi	r25, 0x04	; 4
     b9e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN14HardwareSerial4readEv>
     ba2:	f5 cf       	rjmp	.-22     	; 0xb8e <_Z10writeServohhPhh+0x44>
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <digitalWrite>
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <digitalWrite>
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     bc0:	6f ef       	ldi	r22, 0xFF	; 255
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	80 e2       	ldi	r24, 0x20	; 32
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	99 db       	rcall	.-2254   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     bca:	6f ef       	ldi	r22, 0xFF	; 255
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 e2       	ldi	r24, 0x20	; 32
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	94 db       	rcall	.-2264   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     bd4:	61 2f       	mov	r22, r17
     bd6:	80 e2       	ldi	r24, 0x20	; 32
     bd8:	94 e0       	ldi	r25, 0x04	; 4
     bda:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_ZN14HardwareSerial5writeEh>
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	b8 01       	movw	r22, r16
     be2:	6d 5f       	subi	r22, 0xFD	; 253
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	80 e2       	ldi	r24, 0x20	; 32
     be8:	94 e0       	ldi	r25, 0x04	; 4
     bea:	88 db       	rcall	.-2288   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     bec:	63 e0       	ldi	r22, 0x03	; 3
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e2       	ldi	r24, 0x20	; 32
     bf2:	94 e0       	ldi	r25, 0x04	; 4
     bf4:	83 db       	rcall	.-2298   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     bf6:	6d 2f       	mov	r22, r29
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	94 e0       	ldi	r25, 0x04	; 4
     bfc:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_ZN14HardwareSerial5writeEh>
     c00:	a8 01       	movw	r20, r16
     c02:	b7 01       	movw	r22, r14
     c04:	80 e2       	ldi	r24, 0x20	; 32
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	0e 94 20 11 	call	0x2240	; 0x2240 <_ZN5Print5writeEPKhj>
     c0c:	6c 2f       	mov	r22, r28
     c0e:	80 e2       	ldi	r24, 0x20	; 32
     c10:	94 e0       	ldi	r25, 0x04	; 4
     c12:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_ZN14HardwareSerial5writeEh>
     c16:	80 e2       	ldi	r24, 0x20	; 32
     c18:	94 e0       	ldi	r25, 0x04	; 4
     c1a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_ZN14HardwareSerial5flushEv>
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <digitalWrite>
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <digitalWrite>
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     c3a:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <serialWriting>
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	08 95       	ret

00000c4c <_Z9moveSpeedhii>:
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <_Z9moveSpeedhii+0x10>
     c5c:	1f 92       	push	r1
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	18 2f       	mov	r17, r24
     c64:	d4 2e       	mov	r13, r20
     c66:	e5 2e       	mov	r14, r21
     c68:	5e dc       	rcall	.-1860   	; 0x526 <_Z13checkPositionhi>
     c6a:	f8 2e       	mov	r15, r24
     c6c:	09 2f       	mov	r16, r25
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	db 82       	std	Y+3, r13	; 0x03
     c74:	ec 82       	std	Y+4, r14	; 0x04
     c76:	24 e0       	ldi	r18, 0x04	; 4
     c78:	ae 01       	movw	r20, r28
     c7a:	4f 5f       	subi	r20, 0xFF	; 255
     c7c:	5f 4f       	sbci	r21, 0xFF	; 255
     c7e:	6e e1       	ldi	r22, 0x1E	; 30
     c80:	81 2f       	mov	r24, r17
     c82:	63 df       	rcall	.-314    	; 0xb4a <_Z10writeServohhPhh>
     c84:	f0 92 80 03 	sts	0x0380, r15	; 0x800380 <currPos>
     c88:	00 93 81 03 	sts	0x0381, r16	; 0x800381 <currPos+0x1>
     c8c:	8a e0       	ldi	r24, 0x0A	; 10
     c8e:	18 9f       	mul	r17, r24
     c90:	f0 01       	movw	r30, r0
     c92:	11 24       	eor	r1, r1
     c94:	e2 5c       	subi	r30, 0xC2	; 194
     c96:	fc 4f       	sbci	r31, 0xFC	; 252
     c98:	f4 82       	std	Z+4, r15	; 0x04
     c9a:	05 83       	std	Z+5, r16	; 0x05
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	08 95       	ret

00000cb4 <_Z14setTorqueLimithi>:
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	1f 92       	push	r1
     cba:	1f 92       	push	r1
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	69 83       	std	Y+1, r22	; 0x01
     cc2:	7a 83       	std	Y+2, r23	; 0x02
     cc4:	22 e0       	ldi	r18, 0x02	; 2
     cc6:	ae 01       	movw	r20, r28
     cc8:	4f 5f       	subi	r20, 0xFF	; 255
     cca:	5f 4f       	sbci	r21, 0xFF	; 255
     ccc:	62 e2       	ldi	r22, 0x22	; 34
     cce:	3d df       	rcall	.-390    	; 0xb4a <_Z10writeServohhPhh>
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <_Z7setModehh>:
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <_Z7setModehh+0xa>
     ce4:	1f 92       	push	r1
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	18 2f       	mov	r17, r24
     cec:	06 2f       	mov	r16, r22
     cee:	61 30       	cpi	r22, 0x01	; 1
     cf0:	29 f4       	brne	.+10     	; 0xcfc <_Z7setModehh+0x22>
     cf2:	19 82       	std	Y+1, r1	; 0x01
     cf4:	1a 82       	std	Y+2, r1	; 0x02
     cf6:	1b 82       	std	Y+3, r1	; 0x03
     cf8:	1c 82       	std	Y+4, r1	; 0x04
     cfa:	08 c0       	rjmp	.+16     	; 0xd0c <_Z7setModehh+0x32>
     cfc:	62 30       	cpi	r22, 0x02	; 2
     cfe:	81 f4       	brne	.+32     	; 0xd20 <_Z7setModehh+0x46>
     d00:	9f ef       	ldi	r25, 0xFF	; 255
     d02:	99 83       	std	Y+1, r25	; 0x01
     d04:	8f e0       	ldi	r24, 0x0F	; 15
     d06:	8a 83       	std	Y+2, r24	; 0x02
     d08:	9b 83       	std	Y+3, r25	; 0x03
     d0a:	8c 83       	std	Y+4, r24	; 0x04
     d0c:	24 e0       	ldi	r18, 0x04	; 4
     d0e:	ae 01       	movw	r20, r28
     d10:	4f 5f       	subi	r20, 0xFF	; 255
     d12:	5f 4f       	sbci	r21, 0xFF	; 255
     d14:	66 e0       	ldi	r22, 0x06	; 6
     d16:	81 2f       	mov	r24, r17
     d18:	18 df       	rcall	.-464    	; 0xb4a <_Z10writeServohhPhh>
     d1a:	16 30       	cpi	r17, 0x06	; 6
     d1c:	a0 f0       	brcs	.+40     	; 0xd46 <_Z7setModehh+0x6c>
     d1e:	1a c0       	rjmp	.+52     	; 0xd54 <_Z7setModehh+0x7a>
     d20:	84 ee       	ldi	r24, 0xE4	; 228
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	8a 83       	std	Y+2, r24	; 0x02
     d28:	84 ea       	ldi	r24, 0xA4	; 164
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	86 e0       	ldi	r24, 0x06	; 6
     d2e:	8c 83       	std	Y+4, r24	; 0x04
     d30:	24 e0       	ldi	r18, 0x04	; 4
     d32:	ae 01       	movw	r20, r28
     d34:	4f 5f       	subi	r20, 0xFF	; 255
     d36:	5f 4f       	sbci	r21, 0xFF	; 255
     d38:	66 e0       	ldi	r22, 0x06	; 6
     d3a:	81 2f       	mov	r24, r17
     d3c:	06 df       	rcall	.-500    	; 0xb4a <_Z10writeServohhPhh>
     d3e:	16 30       	cpi	r17, 0x06	; 6
     d40:	48 f4       	brcc	.+18     	; 0xd54 <_Z7setModehh+0x7a>
     d42:	03 30       	cpi	r16, 0x03	; 3
     d44:	38 f4       	brcc	.+14     	; 0xd54 <_Z7setModehh+0x7a>
     d46:	8a e0       	ldi	r24, 0x0A	; 10
     d48:	18 9f       	mul	r17, r24
     d4a:	f0 01       	movw	r30, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	e2 5c       	subi	r30, 0xC2	; 194
     d50:	fc 4f       	sbci	r31, 0xFC	; 252
     d52:	03 83       	std	Z+3, r16	; 0x03
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	08 95       	ret

00000d66 <_Z12setModeWheelh>:
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	b8 cf       	rjmp	.-144    	; 0xcda <_Z7setModehh>

00000d6a <_Z12setModeJointh>:
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	b6 cf       	rjmp	.-148    	; 0xcda <_Z7setModehh>

00000d6e <_Z16setModeMultiTurnh>:
     d6e:	62 e0       	ldi	r22, 0x02	; 2
     d70:	b4 cf       	rjmp	.-152    	; 0xcda <_Z7setModehh>

00000d72 <__vector_9>:
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	0b b6       	in	r0, 0x3b	; 59
     d7e:	0f 92       	push	r0
     d80:	ef 92       	push	r14
     d82:	ff 92       	push	r15
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	cf 93       	push	r28
     d9e:	ef 93       	push	r30
     da0:	ff 93       	push	r31
     da2:	c0 91 3e 03 	lds	r28, 0x033E	; 0x80033e <arm>
     da6:	18 9b       	sbis	0x03, 0	; 3
     da8:	38 c0       	rjmp	.+112    	; 0xe1a <__vector_9+0xa8>
     daa:	2f 9a       	sbi	0x05, 7	; 5
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	c8 9f       	mul	r28, r24
     db0:	80 01       	movw	r16, r0
     db2:	11 24       	eor	r1, r1
     db4:	02 5c       	subi	r16, 0xC2	; 194
     db6:	1c 4f       	sbci	r17, 0xFC	; 252
     db8:	78 01       	movw	r14, r16
     dba:	e4 e0       	ldi	r30, 0x04	; 4
     dbc:	ee 0e       	add	r14, r30
     dbe:	f1 1c       	adc	r15, r1
     dc0:	08 5f       	subi	r16, 0xF8	; 248
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	18 9b       	sbis	0x03, 0	; 3
     dc6:	20 c0       	rjmp	.+64     	; 0xe08 <__vector_9+0x96>
     dc8:	f7 01       	movw	r30, r14
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	61 50       	subi	r22, 0x01	; 1
     dd0:	71 09       	sbc	r23, r1
     dd2:	71 83       	std	Z+1, r23	; 0x01
     dd4:	60 83       	st	Z, r22
     dd6:	c3 30       	cpi	r28, 0x03	; 3
     dd8:	40 f4       	brcc	.+16     	; 0xdea <__vector_9+0x78>
     dda:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <lastButtonPressed>
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	21 f4       	brne	.+8      	; 0xdea <__vector_9+0x78>
     de2:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <buttonsFlip+0x1>
     de6:	81 11       	cpse	r24, r1
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <__vector_9+0x80>
     dea:	f8 01       	movw	r30, r16
     dec:	40 81       	ld	r20, Z
     dee:	51 81       	ldd	r21, Z+1	; 0x01
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <__vector_9+0x84>
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	8c 2f       	mov	r24, r28
     df8:	29 df       	rcall	.-430    	; 0xc4c <_Z9moveSpeedhii>
     dfa:	68 ec       	ldi	r22, 0xC8	; 200
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     e06:	de cf       	rjmp	.-68     	; 0xdc4 <__vector_9+0x52>
     e08:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <buttonsFlip+0x1>
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	89 27       	eor	r24, r25
     e10:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <buttonsFlip+0x1>
     e14:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <lastButtonPressed>
     e18:	2f 98       	cbi	0x05, 7	; 5
     e1a:	19 9b       	sbis	0x03, 1	; 3
     e1c:	3e c0       	rjmp	.+124    	; 0xe9a <__vector_9+0x128>
     e1e:	2f 9a       	sbi	0x05, 7	; 5
     e20:	fa e0       	ldi	r31, 0x0A	; 10
     e22:	cf 9f       	mul	r28, r31
     e24:	80 01       	movw	r16, r0
     e26:	11 24       	eor	r1, r1
     e28:	02 5c       	subi	r16, 0xC2	; 194
     e2a:	1c 4f       	sbci	r17, 0xFC	; 252
     e2c:	78 01       	movw	r14, r16
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	e8 0e       	add	r14, r24
     e32:	f1 1c       	adc	r15, r1
     e34:	08 5f       	subi	r16, 0xF8	; 248
     e36:	1f 4f       	sbci	r17, 0xFF	; 255
     e38:	19 9b       	sbis	0x03, 1	; 3
     e3a:	25 c0       	rjmp	.+74     	; 0xe86 <__vector_9+0x114>
     e3c:	f7 01       	movw	r30, r14
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	6f 5f       	subi	r22, 0xFF	; 255
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	71 83       	std	Z+1, r23	; 0x01
     e48:	60 83       	st	Z, r22
     e4a:	c3 30       	cpi	r28, 0x03	; 3
     e4c:	68 f4       	brcc	.+26     	; 0xe68 <__vector_9+0xf6>
     e4e:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <lastButtonPressed>
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	21 f4       	brne	.+8      	; 0xe5e <__vector_9+0xec>
     e56:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <buttonsFlip+0x2>
     e5a:	81 11       	cpse	r24, r1
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <__vector_9+0xfe>
     e5e:	f8 01       	movw	r30, r16
     e60:	40 81       	ld	r20, Z
     e62:	51 81       	ldd	r21, Z+1	; 0x01
     e64:	5c 5f       	subi	r21, 0xFC	; 252
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <__vector_9+0x102>
     e68:	f8 01       	movw	r30, r16
     e6a:	40 81       	ld	r20, Z
     e6c:	51 81       	ldd	r21, Z+1	; 0x01
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <__vector_9+0x102>
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	54 e0       	ldi	r21, 0x04	; 4
     e74:	8c 2f       	mov	r24, r28
     e76:	ea de       	rcall	.-556    	; 0xc4c <_Z9moveSpeedhii>
     e78:	68 ec       	ldi	r22, 0xC8	; 200
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     e84:	d9 cf       	rjmp	.-78     	; 0xe38 <__vector_9+0xc6>
     e86:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <buttonsFlip+0x2>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	89 27       	eor	r24, r25
     e8e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <buttonsFlip+0x2>
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <lastButtonPressed>
     e98:	2f 98       	cbi	0x05, 7	; 5
     e9a:	1a 9b       	sbis	0x03, 2	; 3
     e9c:	47 c0       	rjmp	.+142    	; 0xf2c <__vector_9+0x1ba>
     e9e:	1f 9a       	sbi	0x03, 7	; 3
     ea0:	00 e0       	ldi	r16, 0x00	; 0
     ea2:	10 e0       	ldi	r17, 0x00	; 0
     ea4:	1a 9b       	sbis	0x03, 2	; 3
     ea6:	09 c0       	rjmp	.+18     	; 0xeba <__vector_9+0x148>
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     eb4:	0f 5f       	subi	r16, 0xFF	; 255
     eb6:	1f 4f       	sbci	r17, 0xFF	; 255
     eb8:	f5 cf       	rjmp	.-22     	; 0xea4 <__vector_9+0x132>
     eba:	09 3e       	cpi	r16, 0xE9	; 233
     ebc:	13 40       	sbci	r17, 0x03	; 3
     ebe:	38 f0       	brcs	.+14     	; 0xece <__vector_9+0x15c>
     ec0:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <__data_end>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	89 27       	eor	r24, r25
     ec8:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <__data_end>
     ecc:	20 c0       	rjmp	.+64     	; 0xf0e <__vector_9+0x19c>
     ece:	c3 30       	cpi	r28, 0x03	; 3
     ed0:	68 f4       	brcc	.+26     	; 0xeec <__vector_9+0x17a>
     ed2:	8a e0       	ldi	r24, 0x0A	; 10
     ed4:	c8 9f       	mul	r28, r24
     ed6:	f0 01       	movw	r30, r0
     ed8:	11 24       	eor	r1, r1
     eda:	e2 5c       	subi	r30, 0xC2	; 194
     edc:	fc 4f       	sbci	r31, 0xFC	; 252
     ede:	64 81       	ldd	r22, Z+4	; 0x04
     ee0:	75 81       	ldd	r23, Z+5	; 0x05
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	8c 2f       	mov	r24, r28
     ee8:	b1 de       	rcall	.-670    	; 0xc4c <_Z9moveSpeedhii>
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <__vector_9+0x17e>
     eec:	c5 30       	cpi	r28, 0x05	; 5
     eee:	18 f4       	brcc	.+6      	; 0xef6 <__vector_9+0x184>
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	8c 0f       	add	r24, r28
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <__vector_9+0x186>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <arm>
     efc:	84 30       	cpi	r24, 0x04	; 4
     efe:	10 f0       	brcs	.+4      	; 0xf04 <__vector_9+0x192>
     f00:	34 df       	rcall	.-408    	; 0xd6a <_Z12setModeJointh>
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <__vector_9+0x19c>
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	11 f4       	brne	.+4      	; 0xf0c <__vector_9+0x19a>
     f08:	32 df       	rcall	.-412    	; 0xd6e <_Z16setModeMultiTurnh>
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <__vector_9+0x19c>
     f0c:	2c df       	rcall	.-424    	; 0xd66 <_Z12setModeWheelh>
     f0e:	64 e1       	ldi	r22, 0x14	; 20
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     f1a:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <lastButtonPressed>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	89 27       	eor	r24, r25
     f22:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <lastButtonPressed>
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <lastButtonPressed>
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	cf 91       	pop	r28
     f32:	bf 91       	pop	r27
     f34:	af 91       	pop	r26
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	7f 91       	pop	r23
     f3c:	6f 91       	pop	r22
     f3e:	5f 91       	pop	r21
     f40:	4f 91       	pop	r20
     f42:	3f 91       	pop	r19
     f44:	2f 91       	pop	r18
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	0f 90       	pop	r0
     f50:	0b be       	out	0x3b, r0	; 59
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <_Z9readServohhh>:
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	08 2f       	mov	r16, r24
     f66:	16 2f       	mov	r17, r22
     f68:	d4 2f       	mov	r29, r20
     f6a:	c6 e0       	ldi	r28, 0x06	; 6
     f6c:	c4 0f       	add	r28, r20
     f6e:	c6 0f       	add	r28, r22
     f70:	c8 0f       	add	r28, r24
     f72:	c0 95       	com	r28
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	94 e0       	ldi	r25, 0x04	; 4
     f78:	be d6       	rcall	.+3452   	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
     f7a:	89 2b       	or	r24, r25
     f7c:	21 f0       	breq	.+8      	; 0xf86 <_Z9readServohhh+0x2a>
     f7e:	80 e2       	ldi	r24, 0x20	; 32
     f80:	94 e0       	ldi	r25, 0x04	; 4
     f82:	d3 d6       	rcall	.+3494   	; 0x1d2a <_ZN14HardwareSerial4readEv>
     f84:	f7 cf       	rjmp	.-18     	; 0xf74 <_Z9readServohhh+0x18>
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <digitalWrite>
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <digitalWrite>
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     fa2:	6f ef       	ldi	r22, 0xFF	; 255
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 e2       	ldi	r24, 0x20	; 32
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	a8 d9       	rcall	.-3248   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     fac:	6f ef       	ldi	r22, 0xFF	; 255
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	80 e2       	ldi	r24, 0x20	; 32
     fb2:	94 e0       	ldi	r25, 0x04	; 4
     fb4:	a3 d9       	rcall	.-3258   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     fb6:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <serialWriting>
     fba:	81 11       	cpse	r24, r1
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <_Z9readServohhh+0x6a>
     fbe:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <serialReading>
     fc2:	88 23       	and	r24, r24
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <_Z9readServohhh+0x78>
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
     fd2:	f1 cf       	rjmp	.-30     	; 0xfb6 <_Z9readServohhh+0x5a>
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <serialWriting>
     fda:	60 2f       	mov	r22, r16
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	94 e0       	ldi	r25, 0x04	; 4
     fe0:	24 d7       	rcall	.+3656   	; 0x1e2a <_ZN14HardwareSerial5writeEh>
     fe2:	64 e0       	ldi	r22, 0x04	; 4
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	80 e2       	ldi	r24, 0x20	; 32
     fe8:	94 e0       	ldi	r25, 0x04	; 4
     fea:	88 d9       	rcall	.-3312   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     fec:	62 e0       	ldi	r22, 0x02	; 2
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	94 e0       	ldi	r25, 0x04	; 4
     ff4:	83 d9       	rcall	.-3322   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     ff6:	61 2f       	mov	r22, r17
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	94 e0       	ldi	r25, 0x04	; 4
     ffc:	16 d7       	rcall	.+3628   	; 0x1e2a <_ZN14HardwareSerial5writeEh>
     ffe:	6d 2f       	mov	r22, r29
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	94 e0       	ldi	r25, 0x04	; 4
    1004:	12 d7       	rcall	.+3620   	; 0x1e2a <_ZN14HardwareSerial5writeEh>
    1006:	6c 2f       	mov	r22, r28
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	94 e0       	ldi	r25, 0x04	; 4
    100c:	0e d7       	rcall	.+3612   	; 0x1e2a <_ZN14HardwareSerial5writeEh>
    100e:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <serialWriting>
    1012:	80 e2       	ldi	r24, 0x20	; 32
    1014:	94 e0       	ldi	r25, 0x04	; 4
    1016:	55 d7       	rcall	.+3754   	; 0x1ec2 <_ZN14HardwareSerial5flushEv>
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <digitalWrite>
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <digitalWrite>
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <delay>

0000103c <_Z7getDatahh>:
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData) {
    103c:	6f 92       	push	r6
    103e:	7f 92       	push	r7
    1040:	8f 92       	push	r8
    1042:	9f 92       	push	r9
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	62 97       	sbiw	r28, 0x12	; 18
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	f8 2e       	mov	r15, r24
    106a:	e6 2e       	mov	r14, r22
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
    106c:	69 ef       	ldi	r22, 0xF9	; 249
    106e:	72 e0       	ldi	r23, 0x02	; 2
    1070:	ce 01       	movw	r24, r28
    1072:	0d 96       	adiw	r24, 0x0d	; 13
    1074:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
	
	readServo(id, ctrlData, 2);
    1078:	42 e0       	ldi	r20, 0x02	; 2
    107a:	6e 2d       	mov	r22, r14
    107c:	8f 2d       	mov	r24, r15
    107e:	6e df       	rcall	.-292    	; 0xf5c <_Z9readServohhh>
	delay(10);
    1080:	6a e0       	ldi	r22, 0x0A	; 10
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 bb 12 	call	0x2576	; 0x2576 <delay>
	serialReading = YES;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <serialReading>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
    1092:	80 e2       	ldi	r24, 0x20	; 32
    1094:	94 e0       	ldi	r25, 0x04	; 4
    1096:	49 d6       	rcall	.+3218   	; 0x1d2a <_ZN14HardwareSerial4readEv>
    1098:	f8 2e       	mov	r15, r24
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
    109a:	80 e2       	ldi	r24, 0x20	; 32
    109c:	94 e0       	ldi	r25, 0x04	; 4
    109e:	45 d6       	rcall	.+3210   	; 0x1d2a <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	f9 12       	cpse	r15, r25
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <_Z7getDatahh+0x6e>
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	09 f1       	breq	.+66     	; 0x10ec <_Z7getDatahh+0xb0>
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //5
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//6
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
    10aa:	e1 2c       	mov	r14, r1
    10ac:	80 e2       	ldi	r24, 0x20	; 32
    10ae:	94 e0       	ldi	r25, 0x04	; 4
    10b0:	22 d6       	rcall	.+3140   	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
    10b2:	89 2b       	or	r24, r25
    10b4:	21 f0       	breq	.+8      	; 0x10be <_Z7getDatahh+0x82>
    10b6:	80 e2       	ldi	r24, 0x20	; 32
    10b8:	94 e0       	ldi	r25, 0x04	; 4
    10ba:	37 d6       	rcall	.+3182   	; 0x1d2a <_ZN14HardwareSerial4readEv>
    10bc:	f7 cf       	rjmp	.-18     	; 0x10ac <_Z7getDatahh+0x70>
	serialReading = NO;
    10be:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <serialReading>
	Serial.println(line);
    10c2:	be 01       	movw	r22, r28
    10c4:	63 5f       	subi	r22, 0xF3	; 243
    10c6:	7f 4f       	sbci	r23, 0xFF	; 255
    10c8:	83 e8       	ldi	r24, 0x83	; 131
    10ca:	93 e0       	ldi	r25, 0x03	; 3
    10cc:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN5Print7printlnERK6String>
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
    10d0:	ee 20       	and	r14, r14
    10d2:	49 f0       	breq	.+18     	; 0x10e6 <_Z7getDatahh+0xaa>
    10d4:	bb 20       	and	r11, r11
    10d6:	09 f4       	brne	.+2      	; 0x10da <_Z7getDatahh+0x9e>
    10d8:	09 c1       	rjmp	.+530    	; 0x12ec <_Z7getDatahh+0x2b0>
    10da:	0b 2d       	mov	r16, r11
    10dc:	10 e0       	ldi	r17, 0x00	; 0
    10de:	11 95       	neg	r17
    10e0:	01 95       	neg	r16
    10e2:	11 09       	sbc	r17, r1
    10e4:	03 c1       	rjmp	.+518    	; 0x12ec <_Z7getDatahh+0x2b0>
    10e6:	01 e0       	ldi	r16, 0x01	; 1
    10e8:	1f ef       	ldi	r17, 0xFF	; 255
	msgByte = Serial1.read();									// 02 : Start 2/2
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
	if (msgStarted) {
		msgId = Serial1.read();
    10ea:	00 c1       	rjmp	.+512    	; 0x12ec <_Z7getDatahh+0x2b0>
    10ec:	80 e2       	ldi	r24, 0x20	; 32
    10ee:	94 e0       	ldi	r25, 0x04	; 4
    10f0:	1c d6       	rcall	.+3128   	; 0x1d2a <_ZN14HardwareSerial4readEv>
		line = "ID:" + padNumber(msgId, 6);							//1
    10f2:	3c 01       	movw	r6, r24
    10f4:	bc 01       	movw	r22, r24
    10f6:	77 27       	eor	r23, r23
    10f8:	46 e0       	ldi	r20, 0x06	; 6
    10fa:	ce 01       	movw	r24, r28
    10fc:	07 96       	adiw	r24, 0x07	; 7
    10fe:	a6 d9       	rcall	.-3252   	; 0x44c <_Z9padNumberih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1100:	69 ec       	ldi	r22, 0xC9	; 201
    1102:	72 e0       	ldi	r23, 0x02	; 2
    1104:	ce 01       	movw	r24, r28
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
    110c:	be 01       	movw	r22, r28
    110e:	69 5f       	subi	r22, 0xF9	; 249
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZplRK15StringSumHelperRK6String>
    111a:	bc 01       	movw	r22, r24
    111c:	ce 01       	movw	r24, r28
    111e:	0d 96       	adiw	r24, 0x0d	; 13
    1120:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1124:	ce 01       	movw	r24, r28
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
    112c:	ce 01       	movw	r24, r28
    112e:	07 96       	adiw	r24, 0x07	; 7
    1130:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
		msgLength = Serial1.read();
    1134:	80 e2       	ldi	r24, 0x20	; 32
    1136:	94 e0       	ldi	r25, 0x04	; 4
    1138:	f8 d5       	rcall	.+3056   	; 0x1d2a <_ZN14HardwareSerial4readEv>
		line = line + ", MsgLegth:" + padNumber(msgLength, 6);		//2
    113a:	5c 01       	movw	r10, r24
    113c:	bc 01       	movw	r22, r24
    113e:	77 27       	eor	r23, r23
    1140:	46 e0       	ldi	r20, 0x06	; 6
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	82 d9       	rcall	.-3324   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1148:	be 01       	movw	r22, r28
    114a:	63 5f       	subi	r22, 0xF3	; 243
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	ce 01       	movw	r24, r28
    1150:	07 96       	adiw	r24, 0x07	; 7
    1152:	0e 94 b0 14 	call	0x2960	; 0x2960 <_ZN6StringC1ERKS_>
    1156:	69 e8       	ldi	r22, 0x89	; 137
    1158:	72 e0       	ldi	r23, 0x02	; 2
    115a:	ce 01       	movw	r24, r28
    115c:	07 96       	adiw	r24, 0x07	; 7
    115e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_ZplRK15StringSumHelperPKc>
    1162:	be 01       	movw	r22, r28
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZplRK15StringSumHelperRK6String>
    116c:	bc 01       	movw	r22, r24
    116e:	ce 01       	movw	r24, r28
    1170:	0d 96       	adiw	r24, 0x0d	; 13
    1172:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1176:	ce 01       	movw	r24, r28
    1178:	07 96       	adiw	r24, 0x07	; 7
    117a:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
		msgError = Serial1.read();
    1186:	80 e2       	ldi	r24, 0x20	; 32
    1188:	94 e0       	ldi	r25, 0x04	; 4
    118a:	cf d5       	rcall	.+2974   	; 0x1d2a <_ZN14HardwareSerial4readEv>
    118c:	6c 01       	movw	r12, r24
		line = line + ", Error:" + padNumber(msgError, 6);			//3
    118e:	b8 2e       	mov	r11, r24
    1190:	bc 01       	movw	r22, r24
    1192:	77 27       	eor	r23, r23
    1194:	46 e0       	ldi	r20, 0x06	; 6
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	58 d9       	rcall	.-3408   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    119c:	be 01       	movw	r22, r28
    119e:	63 5f       	subi	r22, 0xF3	; 243
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	ce 01       	movw	r24, r28
    11a4:	07 96       	adiw	r24, 0x07	; 7
    11a6:	0e 94 b0 14 	call	0x2960	; 0x2960 <_ZN6StringC1ERKS_>
    11aa:	65 e9       	ldi	r22, 0x95	; 149
    11ac:	72 e0       	ldi	r23, 0x02	; 2
    11ae:	ce 01       	movw	r24, r28
    11b0:	07 96       	adiw	r24, 0x07	; 7
    11b2:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_ZplRK15StringSumHelperPKc>
    11b6:	be 01       	movw	r22, r28
    11b8:	6f 5f       	subi	r22, 0xFF	; 255
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZplRK15StringSumHelperRK6String>
    11c0:	bc 01       	movw	r22, r24
    11c2:	ce 01       	movw	r24, r28
    11c4:	0d 96       	adiw	r24, 0x0d	; 13
    11c6:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    11ca:	ce 01       	movw	r24, r28
    11cc:	07 96       	adiw	r24, 0x07	; 7
    11ce:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
		msgData_1 = Serial1.read();
    11d6:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
    11da:	80 e2       	ldi	r24, 0x20	; 32
    11dc:	94 e0       	ldi	r25, 0x04	; 4
    11de:	a5 d5       	rcall	.+2890   	; 0x1d2a <_ZN14HardwareSerial4readEv>
		msgData_2 = Serial1.read();
    11e0:	f8 2e       	mov	r15, r24
    11e2:	80 e2       	ldi	r24, 0x20	; 32
    11e4:	94 e0       	ldi	r25, 0x04	; 4
    11e6:	a1 d5       	rcall	.+2882   	; 0x1d2a <_ZN14HardwareSerial4readEv>
	response = sprintf(tmp, "%%%dd", padding);
	response = sprintf(buffer, tmp, value);
	return buffer;
}

int combineBytes(uint8_t byte_1, uint8_t byte_2) { return byte_1 + (byte_2<<8); }
    11e8:	e8 2e       	mov	r14, r24
    11ea:	98 2e       	mov	r9, r24
    11ec:	81 2c       	mov	r8, r1
    11ee:	84 01       	movw	r16, r8
    11f0:	0f 0d       	add	r16, r15
		msgError = Serial1.read();
		line = line + ", Error:" + padNumber(msgError, 6);			//3
		msgData_1 = Serial1.read();
		msgData_2 = Serial1.read();
		msgData = combineBytes(msgData_1, msgData_2);
		line = line + ", Data:" + padNumber(msgData, 6);			//4
    11f2:	11 1d       	adc	r17, r1
    11f4:	46 e0       	ldi	r20, 0x06	; 6
    11f6:	b8 01       	movw	r22, r16
    11f8:	ce 01       	movw	r24, r28
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	27 d9       	rcall	.-3506   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    11fe:	be 01       	movw	r22, r28
    1200:	63 5f       	subi	r22, 0xF3	; 243
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	ce 01       	movw	r24, r28
    1206:	07 96       	adiw	r24, 0x07	; 7
    1208:	0e 94 b0 14 	call	0x2960	; 0x2960 <_ZN6StringC1ERKS_>
    120c:	6e e9       	ldi	r22, 0x9E	; 158
    120e:	72 e0       	ldi	r23, 0x02	; 2
    1210:	ce 01       	movw	r24, r28
    1212:	07 96       	adiw	r24, 0x07	; 7
    1214:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_ZplRK15StringSumHelperPKc>
    1218:	be 01       	movw	r22, r28
    121a:	6f 5f       	subi	r22, 0xFF	; 255
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZplRK15StringSumHelperRK6String>
    1222:	bc 01       	movw	r22, r24
    1224:	ce 01       	movw	r24, r28
    1226:	0d 96       	adiw	r24, 0x0d	; 13
    1228:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    122c:	ce 01       	movw	r24, r28
    122e:	07 96       	adiw	r24, 0x07	; 7
    1230:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
		msgChecksum = Serial1.read();
    1238:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	94 e0       	ldi	r25, 0x04	; 4
    1240:	74 d5       	rcall	.+2792   	; 0x1d2a <_ZN14HardwareSerial4readEv>
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //5
    1242:	4c 01       	movw	r8, r24
    1244:	bc 01       	movw	r22, r24
    1246:	77 27       	eor	r23, r23
    1248:	46 e0       	ldi	r20, 0x06	; 6
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	fe d8       	rcall	.-3588   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1250:	be 01       	movw	r22, r28
    1252:	63 5f       	subi	r22, 0xF3	; 243
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	ce 01       	movw	r24, r28
    1258:	07 96       	adiw	r24, 0x07	; 7
    125a:	0e 94 b0 14 	call	0x2960	; 0x2960 <_ZN6StringC1ERKS_>
    125e:	66 ea       	ldi	r22, 0xA6	; 166
    1260:	72 e0       	ldi	r23, 0x02	; 2
    1262:	ce 01       	movw	r24, r28
    1264:	07 96       	adiw	r24, 0x07	; 7
    1266:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_ZplRK15StringSumHelperPKc>
    126a:	be 01       	movw	r22, r28
    126c:	6f 5f       	subi	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZplRK15StringSumHelperRK6String>
    1274:	bc 01       	movw	r22, r24
    1276:	ce 01       	movw	r24, r28
    1278:	0d 96       	adiw	r24, 0x0d	; 13
    127a:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    127e:	ce 01       	movw	r24, r28
    1280:	07 96       	adiw	r24, 0x07	; 7
    1282:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
    128e:	a6 0c       	add	r10, r6
    1290:	ca 0c       	add	r12, r10
    1292:	fc 0c       	add	r15, r12
    1294:	fe 0c       	add	r15, r14
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//6
    1296:	f0 94       	com	r15
    1298:	6f 2d       	mov	r22, r15
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	46 e0       	ldi	r20, 0x06	; 6
    129e:	ce 01       	movw	r24, r28
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	d4 d8       	rcall	.-3672   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    12a4:	be 01       	movw	r22, r28
    12a6:	63 5f       	subi	r22, 0xF3	; 243
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	ce 01       	movw	r24, r28
    12ac:	07 96       	adiw	r24, 0x07	; 7
    12ae:	0e 94 b0 14 	call	0x2960	; 0x2960 <_ZN6StringC1ERKS_>
    12b2:	65 eb       	ldi	r22, 0xB5	; 181
    12b4:	72 e0       	ldi	r23, 0x02	; 2
    12b6:	ce 01       	movw	r24, r28
    12b8:	07 96       	adiw	r24, 0x07	; 7
    12ba:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_ZplRK15StringSumHelperPKc>
    12be:	be 01       	movw	r22, r28
    12c0:	6f 5f       	subi	r22, 0xFF	; 255
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZplRK15StringSumHelperRK6String>
    12c8:	bc 01       	movw	r22, r24
    12ca:	ce 01       	movw	r24, r28
    12cc:	0d 96       	adiw	r24, 0x0d	; 13
    12ce:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    12d2:	ce 01       	movw	r24, r28
    12d4:	07 96       	adiw	r24, 0x07	; 7
    12d6:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
    12da:	ce 01       	movw	r24, r28
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
    12e2:	ee 24       	eor	r14, r14
    12e4:	e3 94       	inc	r14
    12e6:	f8 10       	cpse	r15, r8
    12e8:	e0 ce       	rjmp	.-576    	; 0x10aa <_Z7getDatahh+0x6e>
    12ea:	e0 ce       	rjmp	.-576    	; 0x10ac <_Z7getDatahh+0x70>
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
    12ec:	ce 01       	movw	r24, r28
    12ee:	0d 96       	adiw	r24, 0x0d	; 13
    12f0:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
	Serial.println(line);
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
}
    12f4:	c8 01       	movw	r24, r16
    12f6:	62 96       	adiw	r28, 0x12	; 18
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	bf 90       	pop	r11
    1314:	af 90       	pop	r10
    1316:	9f 90       	pop	r9
    1318:	8f 90       	pop	r8
    131a:	7f 90       	pop	r7
    131c:	6f 90       	pop	r6
    131e:	08 95       	ret

00001320 <loop>:
/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {
	int incomingByte = 0;
	readServo(arm.id, 0x24, 34);
    1320:	42 e2       	ldi	r20, 0x22	; 34
    1322:	64 e2       	ldi	r22, 0x24	; 36
    1324:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <arm>
    1328:	19 de       	rcall	.-974    	; 0xf5c <_Z9readServohhh>
	printDataLCD();
    132a:	38 da       	rcall	.-2960   	; 0x79c <_Z12printDataLCDv>
    132c:	68 e2       	ldi	r22, 0x28	; 40
	int new_reading;
	bool new_direction;
	int speedo;
	/* Load 4  - Reading */
	new_reading = getData(4, MX_PRESENT_LOAD_L);
    132e:	84 e0       	ldi	r24, 0x04	; 4
    1330:	85 de       	rcall	.-758    	; 0x103c <_Z7getDatahh>
    1332:	18 16       	cp	r1, r24
	if (new_reading > 0) {
    1334:	19 06       	cpc	r1, r25
    1336:	8c f4       	brge	.+34     	; 0x135a <loop+0x3a>
    1338:	21 e0       	ldi	r18, 0x01	; 1
		load_4_dir = getDirection(new_reading);
    133a:	81 15       	cp	r24, r1
    133c:	34 e0       	ldi	r19, 0x04	; 4
    133e:	93 07       	cpc	r25, r19
    1340:	0c f4       	brge	.+2      	; 0x1344 <loop+0x24>
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	20 93 26 03 	sts	0x0326, r18	; 0x800326 <load_4_dir>
    1348:	81 15       	cp	r24, r1
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    134a:	24 e0       	ldi	r18, 0x04	; 4
    134c:	92 07       	cpc	r25, r18
    134e:	0c f0       	brlt	.+2      	; 0x1352 <loop+0x32>
    1350:	94 50       	subi	r25, 0x04	; 4
    1352:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <load_4+0x1>
	int speedo;
	/* Load 4  - Reading */
	new_reading = getData(4, MX_PRESENT_LOAD_L);
	if (new_reading > 0) {
		load_4_dir = getDirection(new_reading);
		load_4 = getRealValue(new_reading);
    1356:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <load_4>
	} else { // use the old values
		load_4_dir = load_4_dir;
		load_4 = load_4; 
	}
	/* Load 5 - Reading */
	new_reading = getData(5, MX_PRESENT_LOAD_L);
    135a:	68 e2       	ldi	r22, 0x28	; 40
    135c:	85 e0       	ldi	r24, 0x05	; 5
    135e:	6e de       	rcall	.-804    	; 0x103c <_Z7getDatahh>
    1360:	18 16       	cp	r1, r24
	if (new_reading > 0) {
    1362:	19 06       	cpc	r1, r25
    1364:	8c f4       	brge	.+34     	; 0x1388 <loop+0x68>
    1366:	21 e0       	ldi	r18, 0x01	; 1
		load_5_dir = getDirection(new_reading);
    1368:	81 15       	cp	r24, r1
    136a:	34 e0       	ldi	r19, 0x04	; 4
    136c:	93 07       	cpc	r25, r19
    136e:	0c f4       	brge	.+2      	; 0x1372 <loop+0x52>
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	20 93 25 03 	sts	0x0325, r18	; 0x800325 <load_5_dir>
    1376:	81 15       	cp	r24, r1
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1378:	24 e0       	ldi	r18, 0x04	; 4
    137a:	92 07       	cpc	r25, r18
    137c:	0c f0       	brlt	.+2      	; 0x1380 <loop+0x60>
    137e:	94 50       	subi	r25, 0x04	; 4
    1380:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <load_5+0x1>
	}
	/* Load 5 - Reading */
	new_reading = getData(5, MX_PRESENT_LOAD_L);
	if (new_reading > 0) {
		load_5_dir = getDirection(new_reading);
		load_5 = getRealValue(new_reading);
    1384:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <load_5>
    1388:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <__data_end>
	} else { // use the old values
		load_5_dir = load_5_dir;
		load_5 = load_5;
	}
	if (autoBalanceOn) {
    138c:	88 23       	and	r24, r24
    138e:	b1 f1       	breq	.+108    	; 0x13fc <loop+0xdc>
    1390:	40 91 29 03 	lds	r20, 0x0329	; 0x800329 <load_4>
		/* Load 4  - Controlling */
		speedo = load_4 < 30
    1394:	50 91 2a 03 	lds	r21, 0x032A	; 0x80032a <load_4+0x1>
    1398:	4e 31       	cpi	r20, 0x1E	; 30
			? 0
			: load_4 > 250
				? 500
				: load_4<<1;
    139a:	51 05       	cpc	r21, r1
    139c:	30 f0       	brcs	.+12     	; 0x13aa <loop+0x8a>
    139e:	4b 3f       	cpi	r20, 0xFB	; 251
    13a0:	51 05       	cpc	r21, r1
    13a2:	30 f4       	brcc	.+12     	; 0x13b0 <loop+0x90>
    13a4:	44 0f       	add	r20, r20
    13a6:	55 1f       	adc	r21, r21
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <loop+0x94>
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <loop+0x94>
    13b0:	44 ef       	ldi	r20, 0xF4	; 244
    13b2:	51 e0       	ldi	r21, 0x01	; 1
    13b4:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <load_4_dir>
		moveSpeed(1, 100, load_4_dir ? speedo : 0x0400 + speedo);
    13b8:	81 11       	cpse	r24, r1
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <loop+0x9e>
    13bc:	5c 5f       	subi	r21, 0xFC	; 252
    13be:	64 e6       	ldi	r22, 0x64	; 100
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	43 dc       	rcall	.-1914   	; 0xc4c <_Z9moveSpeedhii>
    13c6:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <load_5>

		/* Load 5  - Controlling */
		speedo = load_5 < 30
    13ca:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <load_5+0x1>
    13ce:	4e 31       	cpi	r20, 0x1E	; 30
			? 0
			: load_5 > 250
				? 500
				: load_5<<1;
    13d0:	51 05       	cpc	r21, r1
    13d2:	30 f0       	brcs	.+12     	; 0x13e0 <loop+0xc0>
    13d4:	4b 3f       	cpi	r20, 0xFB	; 251
    13d6:	51 05       	cpc	r21, r1
    13d8:	30 f4       	brcc	.+12     	; 0x13e6 <loop+0xc6>
    13da:	44 0f       	add	r20, r20
    13dc:	55 1f       	adc	r21, r21
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <loop+0xca>
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <loop+0xca>
    13e6:	44 ef       	ldi	r20, 0xF4	; 244
    13e8:	51 e0       	ldi	r21, 0x01	; 1
    13ea:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <load_5_dir>
		moveSpeed(2, 100, load_5_dir ? speedo : 0x0400 + speedo);
    13ee:	81 11       	cpse	r24, r1
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <loop+0xd4>
    13f2:	5c 5f       	subi	r21, 0xFC	; 252
    13f4:	64 e6       	ldi	r22, 0x64	; 100
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	28 dc       	rcall	.-1968   	; 0xc4c <_Z9moveSpeedhii>
    13fc:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <arm+0x1>
	
	} else { /* if (autoBalanceOn) */
		//moveSpeed(1, 100, 0);
		//moveSpeed(2, 100, 0);
	}
	if (!arm.autoBalance == autoBalanceOn) {
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	89 27       	eor	r24, r25
    1404:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <__data_end>
    1408:	89 13       	cpse	r24, r25
    140a:	1e c0       	rjmp	.+60     	; 0x1448 <loop+0x128>
    140c:	81 11       	cpse	r24, r1
		printLCD(19, 0, autoBalanceOn ? "A" : "M" );
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <loop+0xf6>
    1410:	46 ec       	ldi	r20, 0xC6	; 198
    1412:	52 e0       	ldi	r21, 0x02	; 2
    1414:	02 c0       	rjmp	.+4      	; 0x141a <loop+0xfa>
    1416:	44 ec       	ldi	r20, 0xC4	; 196
    1418:	52 e0       	ldi	r21, 0x02	; 2
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	83 e1       	ldi	r24, 0x13	; 19
    141e:	06 d8       	rcall	.-4084   	; 0x42c <_Z8printLCDhhPKc>
    1420:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <__data_end>
		if (!autoBalanceOn) {
    1424:	81 11       	cpse	r24, r1
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <loop+0x120>
			moveSpeed(1, 100, 0x0400);
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	54 e0       	ldi	r21, 0x04	; 4
    142c:	64 e6       	ldi	r22, 0x64	; 100
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	0c dc       	rcall	.-2024   	; 0xc4c <_Z9moveSpeedhii>
			moveSpeed(2, 100, 0x0400);
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	54 e0       	ldi	r21, 0x04	; 4
    1438:	64 e6       	ldi	r22, 0x64	; 100
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	06 dc       	rcall	.-2036   	; 0xc4c <_Z9moveSpeedhii>
    1440:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <__data_end>
		}
		arm.autoBalance = autoBalanceOn;
    1444:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <arm+0x1>
    1448:	40 91 29 03 	lds	r20, 0x0329	; 0x800329 <load_4>
	}
	printLCD(10, 3, load_4, 4);
    144c:	50 91 2a 03 	lds	r21, 0x032A	; 0x80032a <load_4+0x1>
    1450:	24 e0       	ldi	r18, 0x04	; 4
    1452:	63 e0       	ldi	r22, 0x03	; 3
    1454:	8a e0       	ldi	r24, 0x0A	; 10
    1456:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    145a:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <load_5>
	printLCD(15, 3, load_5, 4);
    145e:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <load_5+0x1>
    1462:	24 e0       	ldi	r18, 0x04	; 4
    1464:	63 e0       	ldi	r22, 0x03	; 3
    1466:	8f e0       	ldi	r24, 0x0F	; 15
    1468:	0c 94 85 01 	jmp	0x30a	; 0x30a <_Z8printLCDhhih>

0000146c <setup>:
    146c:	0f 93       	push	r16
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	00 d0       	rcall	.+0      	; 0x1476 <setup+0xa>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <setup+0xc>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
    147c:	43 d8       	rcall	.-3962   	; 0x504 <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
    147e:	8d e2       	ldi	r24, 0x2D	; 45
    1480:	93 e0       	ldi	r25, 0x03	; 3
    1482:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    1486:	8d e2       	ldi	r24, 0x2D	; 45
    1488:	93 e0       	ldi	r25, 0x03	; 3
    148a:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    148e:	8d e2       	ldi	r24, 0x2D	; 45
    1490:	93 e0       	ldi	r25, 0x03	; 3
    1492:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	0e 94 b6 13 	call	0x276c	; 0x276c <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	0e 94 b6 13 	call	0x276c	; 0x276c <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    14a6:	26 e0       	ldi	r18, 0x06	; 6
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	51 ee       	ldi	r21, 0xE1	; 225
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	83 e8       	ldi	r24, 0x83	; 131
    14b2:	93 e0       	ldi	r25, 0x03	; 3
    14b4:	27 d5       	rcall	.+2638   	; 0x1f04 <_ZN14HardwareSerial5beginEmh>
    14b6:	26 e0       	ldi	r18, 0x06	; 6
    14b8:	47 e3       	ldi	r20, 0x37	; 55
    14ba:	5f ed       	ldi	r21, 0xDF	; 223
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	80 e2       	ldi	r24, 0x20	; 32
    14c2:	94 e0       	ldi	r25, 0x04	; 4
    14c4:	1f d5       	rcall	.+2622   	; 0x1f04 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
    14c6:	80 e2       	ldi	r24, 0x20	; 32
    14c8:	94 e0       	ldi	r25, 0x04	; 4
    14ca:	fb d4       	rcall	.+2550   	; 0x1ec2 <_ZN14HardwareSerial5flushEv>
	arm.id = 5;
    14cc:	85 e0       	ldi	r24, 0x05	; 5
    14ce:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <arm>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
	setModeWheel(2);
    14d4:	48 dc       	rcall	.-1904   	; 0xd66 <_Z12setModeWheelh>
    14d6:	82 e0       	ldi	r24, 0x02	; 2
	setModeMultiTurn(3);
    14d8:	46 dc       	rcall	.-1908   	; 0xd66 <_Z12setModeWheelh>
    14da:	83 e0       	ldi	r24, 0x03	; 3
	setModeJoint(4);
    14dc:	48 dc       	rcall	.-1904   	; 0xd6e <_Z16setModeMultiTurnh>
    14de:	84 e0       	ldi	r24, 0x04	; 4
    14e0:	44 dc       	rcall	.-1912   	; 0xd6a <_Z12setModeJointh>
	setModeJoint(5);
    14e2:	85 e0       	ldi	r24, 0x05	; 5
    14e4:	42 dc       	rcall	.-1916   	; 0xd6a <_Z12setModeJointh>
    14e6:	84 ef       	ldi	r24, 0xF4	; 244
	/* Set the speeds of the servos */
	arm.servos[1].speed = 500;
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <arm+0x13>
    14ee:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <arm+0x12>
    14f2:	84 e6       	ldi	r24, 0x64	; 100
	arm.servos[2].speed = 100;
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <arm+0x1d>
    14fa:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <arm+0x1c>
    14fe:	8e e1       	ldi	r24, 0x1E	; 30
	arm.servos[3].speed = 30;
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <arm+0x27>
    1506:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <arm+0x26>
    150a:	8f e0       	ldi	r24, 0x0F	; 15
	arm.servos[4].speed = 15;
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <arm+0x31>
    1512:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <arm+0x30>
    1516:	84 e1       	ldi	r24, 0x14	; 20
	arm.servos[5].speed = 20;
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <arm+0x3b>
    151e:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <arm+0x3a>
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    1522:	11 e0       	ldi	r17, 0x01	; 1
		setTorqueLimit(i, MAX_TORQUE);
    1524:	6f ef       	ldi	r22, 0xFF	; 255
    1526:	73 e0       	ldi	r23, 0x03	; 3
    1528:	81 2f       	mov	r24, r17
    152a:	c4 db       	rcall	.-2168   	; 0xcb4 <_Z14setTorqueLimithi>
    152c:	1f 5f       	subi	r17, 0xFF	; 255
	arm.servos[2].speed = 100;
	arm.servos[3].speed = 30;
	arm.servos[4].speed = 15;
	arm.servos[5].speed = 20;
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    152e:	16 30       	cpi	r17, 0x06	; 6
    1530:	c9 f7       	brne	.-14     	; 0x1524 <setup+0xb8>
    1532:	40 e0       	ldi	r20, 0x00	; 0
		setTorqueLimit(i, MAX_TORQUE);
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	8d e2       	ldi	r24, 0x2D	; 45
    1538:	93 e0       	ldi	r25, 0x03	; 3
    153a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("sID:");
    153e:	68 ec       	ldi	r22, 0xC8	; 200
    1540:	72 e0       	ldi	r23, 0x02	; 2
    1542:	8d e2       	ldi	r24, 0x2D	; 45
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	c9 d6       	rcall	.+3474   	; 0x22da <_ZN5Print5printEPKc>
    1548:	41 e0       	ldi	r20, 0x01	; 1
	lcd.setCursor(0,1);
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	8d e2       	ldi	r24, 0x2D	; 45
    154e:	93 e0       	ldi	r25, 0x03	; 3
    1550:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("deg:");
    1554:	6d ec       	ldi	r22, 0xCD	; 205
    1556:	72 e0       	ldi	r23, 0x02	; 2
    1558:	8d e2       	ldi	r24, 0x2D	; 45
    155a:	93 e0       	ldi	r25, 0x03	; 3
    155c:	be d6       	rcall	.+3452   	; 0x22da <_ZN5Print5printEPKc>
	lcd.setCursor(0,2);
    155e:	42 e0       	ldi	r20, 0x02	; 2
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	8d e2       	ldi	r24, 0x2D	; 45
    1564:	93 e0       	ldi	r25, 0x03	; 3
    1566:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("rpm:");
    156a:	62 ed       	ldi	r22, 0xD2	; 210
    156c:	72 e0       	ldi	r23, 0x02	; 2
    156e:	8d e2       	ldi	r24, 0x2D	; 45
    1570:	93 e0       	ldi	r25, 0x03	; 3
    1572:	b3 d6       	rcall	.+3430   	; 0x22da <_ZN5Print5printEPKc>
	lcd.setCursor(0,3);
    1574:	43 e0       	ldi	r20, 0x03	; 3
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	8d e2       	ldi	r24, 0x2D	; 45
    157a:	93 e0       	ldi	r25, 0x03	; 3
	lcd.print("ld%:");
    157c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1580:	67 ed       	ldi	r22, 0xD7	; 215
    1582:	72 e0       	ldi	r23, 0x02	; 2
    1584:	8d e2       	ldi	r24, 0x2D	; 45

	readServo(arm.id, 0x18, 8);
    1586:	93 e0       	ldi	r25, 0x03	; 3
    1588:	a8 d6       	rcall	.+3408   	; 0x22da <_ZN5Print5printEPKc>
    158a:	48 e0       	ldi	r20, 0x08	; 8
    158c:	68 e1       	ldi	r22, 0x18	; 24
    158e:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <arm>
	printBuffer();
    1592:	e4 dc       	rcall	.-1592   	; 0xf5c <_Z9readServohhh>
	delay(2);
    1594:	b8 d8       	rcall	.-3728   	; 0x706 <_Z11printBufferv>
    1596:	62 e0       	ldi	r22, 0x02	; 2
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	eb d7       	rcall	.+4054   	; 0x2576 <delay>
	int somthe = getData(5, MX_CURRENT_L);
    15a0:	64 e4       	ldi	r22, 0x44	; 68
    15a2:	85 e0       	ldi	r24, 0x05	; 5
    15a4:	4b dd       	rcall	.-1386   	; 0x103c <_Z7getDatahh>
    15a6:	8c 01       	movw	r16, r24
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    15a8:	81 15       	cp	r24, r1
    15aa:	94 40       	sbci	r25, 0x04	; 4
    15ac:	0c f0       	brlt	.+2      	; 0x15b0 <setup+0x144>
    15ae:	14 50       	subi	r17, 0x04	; 4
    15b0:	6c ed       	ldi	r22, 0xDC	; 220

	readServo(arm.id, 0x18, 8);
	printBuffer();
	delay(2);
	int somthe = getData(5, MX_CURRENT_L);
	printSerial("return: ", getRealValue(somthe));
    15b2:	72 e0       	ldi	r23, 0x02	; 2
    15b4:	ce 01       	movw	r24, r28
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN6StringC1EPKc>
    15bc:	b8 01       	movw	r22, r16
    15be:	ce 01       	movw	r24, r28
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	0e 94 bd 02 	call	0x57a	; 0x57a <_Z11printSerial6Stringi>
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN6StringD1Ev>
    15ce:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <__data_end>
	printLCD(19, 0, autoBalanceOn ? "A" : "M" );
    15d2:	81 11       	cpse	r24, r1
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <setup+0x170>
    15d6:	46 ec       	ldi	r20, 0xC6	; 198
    15d8:	52 e0       	ldi	r21, 0x02	; 2
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <setup+0x174>
    15dc:	44 ec       	ldi	r20, 0xC4	; 196
    15de:	52 e0       	ldi	r21, 0x02	; 2
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	83 e1       	ldi	r24, 0x13	; 19
    15e4:	0e 94 16 02 	call	0x42c	; 0x42c <_Z8printLCDhhPKc>
    15e8:	26 96       	adiw	r28, 0x06	; 6
	//printBuffer();
}
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	08 95       	ret

000015fe <__subsf3>:
    15fe:	50 58       	subi	r21, 0x80	; 128

00001600 <__addsf3>:
    1600:	bb 27       	eor	r27, r27
    1602:	aa 27       	eor	r26, r26
    1604:	0e d0       	rcall	.+28     	; 0x1622 <__addsf3x>
    1606:	0d c1       	rjmp	.+538    	; 0x1822 <__fp_round>
    1608:	fe d0       	rcall	.+508    	; 0x1806 <__fp_pscA>
    160a:	30 f0       	brcs	.+12     	; 0x1618 <__addsf3+0x18>
    160c:	03 d1       	rcall	.+518    	; 0x1814 <__fp_pscB>
    160e:	20 f0       	brcs	.+8      	; 0x1618 <__addsf3+0x18>
    1610:	31 f4       	brne	.+12     	; 0x161e <__addsf3+0x1e>
    1612:	9f 3f       	cpi	r25, 0xFF	; 255
    1614:	11 f4       	brne	.+4      	; 0x161a <__addsf3+0x1a>
    1616:	1e f4       	brtc	.+6      	; 0x161e <__addsf3+0x1e>
    1618:	f3 c0       	rjmp	.+486    	; 0x1800 <__fp_nan>
    161a:	0e f4       	brtc	.+2      	; 0x161e <__addsf3+0x1e>
    161c:	e0 95       	com	r30
    161e:	e7 fb       	bst	r30, 7
    1620:	e9 c0       	rjmp	.+466    	; 0x17f4 <__fp_inf>

00001622 <__addsf3x>:
    1622:	e9 2f       	mov	r30, r25
    1624:	0f d1       	rcall	.+542    	; 0x1844 <__fp_split3>
    1626:	80 f3       	brcs	.-32     	; 0x1608 <__addsf3+0x8>
    1628:	ba 17       	cp	r27, r26
    162a:	62 07       	cpc	r22, r18
    162c:	73 07       	cpc	r23, r19
    162e:	84 07       	cpc	r24, r20
    1630:	95 07       	cpc	r25, r21
    1632:	18 f0       	brcs	.+6      	; 0x163a <__addsf3x+0x18>
    1634:	71 f4       	brne	.+28     	; 0x1652 <__addsf3x+0x30>
    1636:	9e f5       	brtc	.+102    	; 0x169e <__addsf3x+0x7c>
    1638:	27 c1       	rjmp	.+590    	; 0x1888 <__fp_zero>
    163a:	0e f4       	brtc	.+2      	; 0x163e <__addsf3x+0x1c>
    163c:	e0 95       	com	r30
    163e:	0b 2e       	mov	r0, r27
    1640:	ba 2f       	mov	r27, r26
    1642:	a0 2d       	mov	r26, r0
    1644:	0b 01       	movw	r0, r22
    1646:	b9 01       	movw	r22, r18
    1648:	90 01       	movw	r18, r0
    164a:	0c 01       	movw	r0, r24
    164c:	ca 01       	movw	r24, r20
    164e:	a0 01       	movw	r20, r0
    1650:	11 24       	eor	r1, r1
    1652:	ff 27       	eor	r31, r31
    1654:	59 1b       	sub	r21, r25
    1656:	99 f0       	breq	.+38     	; 0x167e <__addsf3x+0x5c>
    1658:	59 3f       	cpi	r21, 0xF9	; 249
    165a:	50 f4       	brcc	.+20     	; 0x1670 <__addsf3x+0x4e>
    165c:	50 3e       	cpi	r21, 0xE0	; 224
    165e:	68 f1       	brcs	.+90     	; 0x16ba <__addsf3x+0x98>
    1660:	1a 16       	cp	r1, r26
    1662:	f0 40       	sbci	r31, 0x00	; 0
    1664:	a2 2f       	mov	r26, r18
    1666:	23 2f       	mov	r18, r19
    1668:	34 2f       	mov	r19, r20
    166a:	44 27       	eor	r20, r20
    166c:	58 5f       	subi	r21, 0xF8	; 248
    166e:	f3 cf       	rjmp	.-26     	; 0x1656 <__addsf3x+0x34>
    1670:	46 95       	lsr	r20
    1672:	37 95       	ror	r19
    1674:	27 95       	ror	r18
    1676:	a7 95       	ror	r26
    1678:	f0 40       	sbci	r31, 0x00	; 0
    167a:	53 95       	inc	r21
    167c:	c9 f7       	brne	.-14     	; 0x1670 <__addsf3x+0x4e>
    167e:	7e f4       	brtc	.+30     	; 0x169e <__addsf3x+0x7c>
    1680:	1f 16       	cp	r1, r31
    1682:	ba 0b       	sbc	r27, r26
    1684:	62 0b       	sbc	r22, r18
    1686:	73 0b       	sbc	r23, r19
    1688:	84 0b       	sbc	r24, r20
    168a:	ba f0       	brmi	.+46     	; 0x16ba <__addsf3x+0x98>
    168c:	91 50       	subi	r25, 0x01	; 1
    168e:	a1 f0       	breq	.+40     	; 0x16b8 <__addsf3x+0x96>
    1690:	ff 0f       	add	r31, r31
    1692:	bb 1f       	adc	r27, r27
    1694:	66 1f       	adc	r22, r22
    1696:	77 1f       	adc	r23, r23
    1698:	88 1f       	adc	r24, r24
    169a:	c2 f7       	brpl	.-16     	; 0x168c <__addsf3x+0x6a>
    169c:	0e c0       	rjmp	.+28     	; 0x16ba <__addsf3x+0x98>
    169e:	ba 0f       	add	r27, r26
    16a0:	62 1f       	adc	r22, r18
    16a2:	73 1f       	adc	r23, r19
    16a4:	84 1f       	adc	r24, r20
    16a6:	48 f4       	brcc	.+18     	; 0x16ba <__addsf3x+0x98>
    16a8:	87 95       	ror	r24
    16aa:	77 95       	ror	r23
    16ac:	67 95       	ror	r22
    16ae:	b7 95       	ror	r27
    16b0:	f7 95       	ror	r31
    16b2:	9e 3f       	cpi	r25, 0xFE	; 254
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <__addsf3x+0x96>
    16b6:	b3 cf       	rjmp	.-154    	; 0x161e <__addsf3+0x1e>
    16b8:	93 95       	inc	r25
    16ba:	88 0f       	add	r24, r24
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <__addsf3x+0x9e>
    16be:	99 27       	eor	r25, r25
    16c0:	ee 0f       	add	r30, r30
    16c2:	97 95       	ror	r25
    16c4:	87 95       	ror	r24
    16c6:	08 95       	ret

000016c8 <__cmpsf2>:
    16c8:	71 d0       	rcall	.+226    	; 0x17ac <__fp_cmp>
    16ca:	08 f4       	brcc	.+2      	; 0x16ce <__cmpsf2+0x6>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	08 95       	ret

000016d0 <__fixsfsi>:
    16d0:	04 d0       	rcall	.+8      	; 0x16da <__fixunssfsi>
    16d2:	68 94       	set
    16d4:	b1 11       	cpse	r27, r1
    16d6:	d9 c0       	rjmp	.+434    	; 0x188a <__fp_szero>
    16d8:	08 95       	ret

000016da <__fixunssfsi>:
    16da:	bc d0       	rcall	.+376    	; 0x1854 <__fp_splitA>
    16dc:	88 f0       	brcs	.+34     	; 0x1700 <__fixunssfsi+0x26>
    16de:	9f 57       	subi	r25, 0x7F	; 127
    16e0:	90 f0       	brcs	.+36     	; 0x1706 <__fixunssfsi+0x2c>
    16e2:	b9 2f       	mov	r27, r25
    16e4:	99 27       	eor	r25, r25
    16e6:	b7 51       	subi	r27, 0x17	; 23
    16e8:	a0 f0       	brcs	.+40     	; 0x1712 <__fixunssfsi+0x38>
    16ea:	d1 f0       	breq	.+52     	; 0x1720 <__fixunssfsi+0x46>
    16ec:	66 0f       	add	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	88 1f       	adc	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	1a f0       	brmi	.+6      	; 0x16fc <__fixunssfsi+0x22>
    16f6:	ba 95       	dec	r27
    16f8:	c9 f7       	brne	.-14     	; 0x16ec <__fixunssfsi+0x12>
    16fa:	12 c0       	rjmp	.+36     	; 0x1720 <__fixunssfsi+0x46>
    16fc:	b1 30       	cpi	r27, 0x01	; 1
    16fe:	81 f0       	breq	.+32     	; 0x1720 <__fixunssfsi+0x46>
    1700:	c3 d0       	rcall	.+390    	; 0x1888 <__fp_zero>
    1702:	b1 e0       	ldi	r27, 0x01	; 1
    1704:	08 95       	ret
    1706:	c0 c0       	rjmp	.+384    	; 0x1888 <__fp_zero>
    1708:	67 2f       	mov	r22, r23
    170a:	78 2f       	mov	r23, r24
    170c:	88 27       	eor	r24, r24
    170e:	b8 5f       	subi	r27, 0xF8	; 248
    1710:	39 f0       	breq	.+14     	; 0x1720 <__fixunssfsi+0x46>
    1712:	b9 3f       	cpi	r27, 0xF9	; 249
    1714:	cc f3       	brlt	.-14     	; 0x1708 <__fixunssfsi+0x2e>
    1716:	86 95       	lsr	r24
    1718:	77 95       	ror	r23
    171a:	67 95       	ror	r22
    171c:	b3 95       	inc	r27
    171e:	d9 f7       	brne	.-10     	; 0x1716 <__fixunssfsi+0x3c>
    1720:	3e f4       	brtc	.+14     	; 0x1730 <__fixunssfsi+0x56>
    1722:	90 95       	com	r25
    1724:	80 95       	com	r24
    1726:	70 95       	com	r23
    1728:	61 95       	neg	r22
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	8f 4f       	sbci	r24, 0xFF	; 255
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	08 95       	ret

00001732 <__floatunsisf>:
    1732:	e8 94       	clt
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <__floatsisf+0x12>

00001736 <__floatsisf>:
    1736:	97 fb       	bst	r25, 7
    1738:	3e f4       	brtc	.+14     	; 0x1748 <__floatsisf+0x12>
    173a:	90 95       	com	r25
    173c:	80 95       	com	r24
    173e:	70 95       	com	r23
    1740:	61 95       	neg	r22
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
    1744:	8f 4f       	sbci	r24, 0xFF	; 255
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	99 23       	and	r25, r25
    174a:	a9 f0       	breq	.+42     	; 0x1776 <__floatsisf+0x40>
    174c:	f9 2f       	mov	r31, r25
    174e:	96 e9       	ldi	r25, 0x96	; 150
    1750:	bb 27       	eor	r27, r27
    1752:	93 95       	inc	r25
    1754:	f6 95       	lsr	r31
    1756:	87 95       	ror	r24
    1758:	77 95       	ror	r23
    175a:	67 95       	ror	r22
    175c:	b7 95       	ror	r27
    175e:	f1 11       	cpse	r31, r1
    1760:	f8 cf       	rjmp	.-16     	; 0x1752 <__floatsisf+0x1c>
    1762:	fa f4       	brpl	.+62     	; 0x17a2 <__floatsisf+0x6c>
    1764:	bb 0f       	add	r27, r27
    1766:	11 f4       	brne	.+4      	; 0x176c <__floatsisf+0x36>
    1768:	60 ff       	sbrs	r22, 0
    176a:	1b c0       	rjmp	.+54     	; 0x17a2 <__floatsisf+0x6c>
    176c:	6f 5f       	subi	r22, 0xFF	; 255
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	8f 4f       	sbci	r24, 0xFF	; 255
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	16 c0       	rjmp	.+44     	; 0x17a2 <__floatsisf+0x6c>
    1776:	88 23       	and	r24, r24
    1778:	11 f0       	breq	.+4      	; 0x177e <__floatsisf+0x48>
    177a:	96 e9       	ldi	r25, 0x96	; 150
    177c:	11 c0       	rjmp	.+34     	; 0x17a0 <__floatsisf+0x6a>
    177e:	77 23       	and	r23, r23
    1780:	21 f0       	breq	.+8      	; 0x178a <__floatsisf+0x54>
    1782:	9e e8       	ldi	r25, 0x8E	; 142
    1784:	87 2f       	mov	r24, r23
    1786:	76 2f       	mov	r23, r22
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <__floatsisf+0x5e>
    178a:	66 23       	and	r22, r22
    178c:	71 f0       	breq	.+28     	; 0x17aa <__floatsisf+0x74>
    178e:	96 e8       	ldi	r25, 0x86	; 134
    1790:	86 2f       	mov	r24, r22
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	2a f0       	brmi	.+10     	; 0x17a2 <__floatsisf+0x6c>
    1798:	9a 95       	dec	r25
    179a:	66 0f       	add	r22, r22
    179c:	77 1f       	adc	r23, r23
    179e:	88 1f       	adc	r24, r24
    17a0:	da f7       	brpl	.-10     	; 0x1798 <__floatsisf+0x62>
    17a2:	88 0f       	add	r24, r24
    17a4:	96 95       	lsr	r25
    17a6:	87 95       	ror	r24
    17a8:	97 f9       	bld	r25, 7
    17aa:	08 95       	ret

000017ac <__fp_cmp>:
    17ac:	99 0f       	add	r25, r25
    17ae:	00 08       	sbc	r0, r0
    17b0:	55 0f       	add	r21, r21
    17b2:	aa 0b       	sbc	r26, r26
    17b4:	e0 e8       	ldi	r30, 0x80	; 128
    17b6:	fe ef       	ldi	r31, 0xFE	; 254
    17b8:	16 16       	cp	r1, r22
    17ba:	17 06       	cpc	r1, r23
    17bc:	e8 07       	cpc	r30, r24
    17be:	f9 07       	cpc	r31, r25
    17c0:	c0 f0       	brcs	.+48     	; 0x17f2 <__fp_cmp+0x46>
    17c2:	12 16       	cp	r1, r18
    17c4:	13 06       	cpc	r1, r19
    17c6:	e4 07       	cpc	r30, r20
    17c8:	f5 07       	cpc	r31, r21
    17ca:	98 f0       	brcs	.+38     	; 0x17f2 <__fp_cmp+0x46>
    17cc:	62 1b       	sub	r22, r18
    17ce:	73 0b       	sbc	r23, r19
    17d0:	84 0b       	sbc	r24, r20
    17d2:	95 0b       	sbc	r25, r21
    17d4:	39 f4       	brne	.+14     	; 0x17e4 <__fp_cmp+0x38>
    17d6:	0a 26       	eor	r0, r26
    17d8:	61 f0       	breq	.+24     	; 0x17f2 <__fp_cmp+0x46>
    17da:	23 2b       	or	r18, r19
    17dc:	24 2b       	or	r18, r20
    17de:	25 2b       	or	r18, r21
    17e0:	21 f4       	brne	.+8      	; 0x17ea <__fp_cmp+0x3e>
    17e2:	08 95       	ret
    17e4:	0a 26       	eor	r0, r26
    17e6:	09 f4       	brne	.+2      	; 0x17ea <__fp_cmp+0x3e>
    17e8:	a1 40       	sbci	r26, 0x01	; 1
    17ea:	a6 95       	lsr	r26
    17ec:	8f ef       	ldi	r24, 0xFF	; 255
    17ee:	81 1d       	adc	r24, r1
    17f0:	81 1d       	adc	r24, r1
    17f2:	08 95       	ret

000017f4 <__fp_inf>:
    17f4:	97 f9       	bld	r25, 7
    17f6:	9f 67       	ori	r25, 0x7F	; 127
    17f8:	80 e8       	ldi	r24, 0x80	; 128
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	08 95       	ret

00001800 <__fp_nan>:
    1800:	9f ef       	ldi	r25, 0xFF	; 255
    1802:	80 ec       	ldi	r24, 0xC0	; 192
    1804:	08 95       	ret

00001806 <__fp_pscA>:
    1806:	00 24       	eor	r0, r0
    1808:	0a 94       	dec	r0
    180a:	16 16       	cp	r1, r22
    180c:	17 06       	cpc	r1, r23
    180e:	18 06       	cpc	r1, r24
    1810:	09 06       	cpc	r0, r25
    1812:	08 95       	ret

00001814 <__fp_pscB>:
    1814:	00 24       	eor	r0, r0
    1816:	0a 94       	dec	r0
    1818:	12 16       	cp	r1, r18
    181a:	13 06       	cpc	r1, r19
    181c:	14 06       	cpc	r1, r20
    181e:	05 06       	cpc	r0, r21
    1820:	08 95       	ret

00001822 <__fp_round>:
    1822:	09 2e       	mov	r0, r25
    1824:	03 94       	inc	r0
    1826:	00 0c       	add	r0, r0
    1828:	11 f4       	brne	.+4      	; 0x182e <__fp_round+0xc>
    182a:	88 23       	and	r24, r24
    182c:	52 f0       	brmi	.+20     	; 0x1842 <__fp_round+0x20>
    182e:	bb 0f       	add	r27, r27
    1830:	40 f4       	brcc	.+16     	; 0x1842 <__fp_round+0x20>
    1832:	bf 2b       	or	r27, r31
    1834:	11 f4       	brne	.+4      	; 0x183a <__fp_round+0x18>
    1836:	60 ff       	sbrs	r22, 0
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <__fp_round+0x20>
    183a:	6f 5f       	subi	r22, 0xFF	; 255
    183c:	7f 4f       	sbci	r23, 0xFF	; 255
    183e:	8f 4f       	sbci	r24, 0xFF	; 255
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	08 95       	ret

00001844 <__fp_split3>:
    1844:	57 fd       	sbrc	r21, 7
    1846:	90 58       	subi	r25, 0x80	; 128
    1848:	44 0f       	add	r20, r20
    184a:	55 1f       	adc	r21, r21
    184c:	59 f0       	breq	.+22     	; 0x1864 <__fp_splitA+0x10>
    184e:	5f 3f       	cpi	r21, 0xFF	; 255
    1850:	71 f0       	breq	.+28     	; 0x186e <__fp_splitA+0x1a>
    1852:	47 95       	ror	r20

00001854 <__fp_splitA>:
    1854:	88 0f       	add	r24, r24
    1856:	97 fb       	bst	r25, 7
    1858:	99 1f       	adc	r25, r25
    185a:	61 f0       	breq	.+24     	; 0x1874 <__fp_splitA+0x20>
    185c:	9f 3f       	cpi	r25, 0xFF	; 255
    185e:	79 f0       	breq	.+30     	; 0x187e <__fp_splitA+0x2a>
    1860:	87 95       	ror	r24
    1862:	08 95       	ret
    1864:	12 16       	cp	r1, r18
    1866:	13 06       	cpc	r1, r19
    1868:	14 06       	cpc	r1, r20
    186a:	55 1f       	adc	r21, r21
    186c:	f2 cf       	rjmp	.-28     	; 0x1852 <__fp_split3+0xe>
    186e:	46 95       	lsr	r20
    1870:	f1 df       	rcall	.-30     	; 0x1854 <__fp_splitA>
    1872:	08 c0       	rjmp	.+16     	; 0x1884 <__fp_splitA+0x30>
    1874:	16 16       	cp	r1, r22
    1876:	17 06       	cpc	r1, r23
    1878:	18 06       	cpc	r1, r24
    187a:	99 1f       	adc	r25, r25
    187c:	f1 cf       	rjmp	.-30     	; 0x1860 <__fp_splitA+0xc>
    187e:	86 95       	lsr	r24
    1880:	71 05       	cpc	r23, r1
    1882:	61 05       	cpc	r22, r1
    1884:	08 94       	sec
    1886:	08 95       	ret

00001888 <__fp_zero>:
    1888:	e8 94       	clt

0000188a <__fp_szero>:
    188a:	bb 27       	eor	r27, r27
    188c:	66 27       	eor	r22, r22
    188e:	77 27       	eor	r23, r23
    1890:	cb 01       	movw	r24, r22
    1892:	97 f9       	bld	r25, 7
    1894:	08 95       	ret

00001896 <__mulsf3>:
    1896:	0b d0       	rcall	.+22     	; 0x18ae <__mulsf3x>
    1898:	c4 cf       	rjmp	.-120    	; 0x1822 <__fp_round>
    189a:	b5 df       	rcall	.-150    	; 0x1806 <__fp_pscA>
    189c:	28 f0       	brcs	.+10     	; 0x18a8 <__mulsf3+0x12>
    189e:	ba df       	rcall	.-140    	; 0x1814 <__fp_pscB>
    18a0:	18 f0       	brcs	.+6      	; 0x18a8 <__mulsf3+0x12>
    18a2:	95 23       	and	r25, r21
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <__mulsf3+0x12>
    18a6:	a6 cf       	rjmp	.-180    	; 0x17f4 <__fp_inf>
    18a8:	ab cf       	rjmp	.-170    	; 0x1800 <__fp_nan>
    18aa:	11 24       	eor	r1, r1
    18ac:	ee cf       	rjmp	.-36     	; 0x188a <__fp_szero>

000018ae <__mulsf3x>:
    18ae:	ca df       	rcall	.-108    	; 0x1844 <__fp_split3>
    18b0:	a0 f3       	brcs	.-24     	; 0x189a <__mulsf3+0x4>

000018b2 <__mulsf3_pse>:
    18b2:	95 9f       	mul	r25, r21
    18b4:	d1 f3       	breq	.-12     	; 0x18aa <__mulsf3+0x14>
    18b6:	95 0f       	add	r25, r21
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	55 1f       	adc	r21, r21
    18bc:	62 9f       	mul	r22, r18
    18be:	f0 01       	movw	r30, r0
    18c0:	72 9f       	mul	r23, r18
    18c2:	bb 27       	eor	r27, r27
    18c4:	f0 0d       	add	r31, r0
    18c6:	b1 1d       	adc	r27, r1
    18c8:	63 9f       	mul	r22, r19
    18ca:	aa 27       	eor	r26, r26
    18cc:	f0 0d       	add	r31, r0
    18ce:	b1 1d       	adc	r27, r1
    18d0:	aa 1f       	adc	r26, r26
    18d2:	64 9f       	mul	r22, r20
    18d4:	66 27       	eor	r22, r22
    18d6:	b0 0d       	add	r27, r0
    18d8:	a1 1d       	adc	r26, r1
    18da:	66 1f       	adc	r22, r22
    18dc:	82 9f       	mul	r24, r18
    18de:	22 27       	eor	r18, r18
    18e0:	b0 0d       	add	r27, r0
    18e2:	a1 1d       	adc	r26, r1
    18e4:	62 1f       	adc	r22, r18
    18e6:	73 9f       	mul	r23, r19
    18e8:	b0 0d       	add	r27, r0
    18ea:	a1 1d       	adc	r26, r1
    18ec:	62 1f       	adc	r22, r18
    18ee:	83 9f       	mul	r24, r19
    18f0:	a0 0d       	add	r26, r0
    18f2:	61 1d       	adc	r22, r1
    18f4:	22 1f       	adc	r18, r18
    18f6:	74 9f       	mul	r23, r20
    18f8:	33 27       	eor	r19, r19
    18fa:	a0 0d       	add	r26, r0
    18fc:	61 1d       	adc	r22, r1
    18fe:	23 1f       	adc	r18, r19
    1900:	84 9f       	mul	r24, r20
    1902:	60 0d       	add	r22, r0
    1904:	21 1d       	adc	r18, r1
    1906:	82 2f       	mov	r24, r18
    1908:	76 2f       	mov	r23, r22
    190a:	6a 2f       	mov	r22, r26
    190c:	11 24       	eor	r1, r1
    190e:	9f 57       	subi	r25, 0x7F	; 127
    1910:	50 40       	sbci	r21, 0x00	; 0
    1912:	8a f0       	brmi	.+34     	; 0x1936 <__mulsf3_pse+0x84>
    1914:	e1 f0       	breq	.+56     	; 0x194e <__mulsf3_pse+0x9c>
    1916:	88 23       	and	r24, r24
    1918:	4a f0       	brmi	.+18     	; 0x192c <__mulsf3_pse+0x7a>
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	bb 1f       	adc	r27, r27
    1920:	66 1f       	adc	r22, r22
    1922:	77 1f       	adc	r23, r23
    1924:	88 1f       	adc	r24, r24
    1926:	91 50       	subi	r25, 0x01	; 1
    1928:	50 40       	sbci	r21, 0x00	; 0
    192a:	a9 f7       	brne	.-22     	; 0x1916 <__mulsf3_pse+0x64>
    192c:	9e 3f       	cpi	r25, 0xFE	; 254
    192e:	51 05       	cpc	r21, r1
    1930:	70 f0       	brcs	.+28     	; 0x194e <__mulsf3_pse+0x9c>
    1932:	60 cf       	rjmp	.-320    	; 0x17f4 <__fp_inf>
    1934:	aa cf       	rjmp	.-172    	; 0x188a <__fp_szero>
    1936:	5f 3f       	cpi	r21, 0xFF	; 255
    1938:	ec f3       	brlt	.-6      	; 0x1934 <__mulsf3_pse+0x82>
    193a:	98 3e       	cpi	r25, 0xE8	; 232
    193c:	dc f3       	brlt	.-10     	; 0x1934 <__mulsf3_pse+0x82>
    193e:	86 95       	lsr	r24
    1940:	77 95       	ror	r23
    1942:	67 95       	ror	r22
    1944:	b7 95       	ror	r27
    1946:	f7 95       	ror	r31
    1948:	e7 95       	ror	r30
    194a:	9f 5f       	subi	r25, 0xFF	; 255
    194c:	c1 f7       	brne	.-16     	; 0x193e <__mulsf3_pse+0x8c>
    194e:	fe 2b       	or	r31, r30
    1950:	88 0f       	add	r24, r24
    1952:	91 1d       	adc	r25, r1
    1954:	96 95       	lsr	r25
    1956:	87 95       	ror	r24
    1958:	97 f9       	bld	r25, 7
    195a:	08 95       	ret

0000195c <pow>:
    195c:	fa 01       	movw	r30, r20
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	30 96       	adiw	r30, 0x00	; 0
    1964:	21 05       	cpc	r18, r1
    1966:	31 05       	cpc	r19, r1
    1968:	99 f1       	breq	.+102    	; 0x19d0 <pow+0x74>
    196a:	61 15       	cp	r22, r1
    196c:	71 05       	cpc	r23, r1
    196e:	61 f4       	brne	.+24     	; 0x1988 <pow+0x2c>
    1970:	80 38       	cpi	r24, 0x80	; 128
    1972:	bf e3       	ldi	r27, 0x3F	; 63
    1974:	9b 07       	cpc	r25, r27
    1976:	49 f1       	breq	.+82     	; 0x19ca <pow+0x6e>
    1978:	68 94       	set
    197a:	90 38       	cpi	r25, 0x80	; 128
    197c:	81 05       	cpc	r24, r1
    197e:	61 f0       	breq	.+24     	; 0x1998 <pow+0x3c>
    1980:	80 38       	cpi	r24, 0x80	; 128
    1982:	bf ef       	ldi	r27, 0xFF	; 255
    1984:	9b 07       	cpc	r25, r27
    1986:	41 f0       	breq	.+16     	; 0x1998 <pow+0x3c>
    1988:	99 23       	and	r25, r25
    198a:	42 f5       	brpl	.+80     	; 0x19dc <pow+0x80>
    198c:	ff 3f       	cpi	r31, 0xFF	; 255
    198e:	e1 05       	cpc	r30, r1
    1990:	31 05       	cpc	r19, r1
    1992:	21 05       	cpc	r18, r1
    1994:	11 f1       	breq	.+68     	; 0x19da <pow+0x7e>
    1996:	e8 94       	clt
    1998:	08 94       	sec
    199a:	e7 95       	ror	r30
    199c:	d9 01       	movw	r26, r18
    199e:	aa 23       	and	r26, r26
    19a0:	29 f4       	brne	.+10     	; 0x19ac <pow+0x50>
    19a2:	ab 2f       	mov	r26, r27
    19a4:	be 2f       	mov	r27, r30
    19a6:	f8 5f       	subi	r31, 0xF8	; 248
    19a8:	d0 f3       	brcs	.-12     	; 0x199e <pow+0x42>
    19aa:	10 c0       	rjmp	.+32     	; 0x19cc <pow+0x70>
    19ac:	ff 5f       	subi	r31, 0xFF	; 255
    19ae:	70 f4       	brcc	.+28     	; 0x19cc <pow+0x70>
    19b0:	a6 95       	lsr	r26
    19b2:	e0 f7       	brcc	.-8      	; 0x19ac <pow+0x50>
    19b4:	f7 39       	cpi	r31, 0x97	; 151
    19b6:	50 f0       	brcs	.+20     	; 0x19cc <pow+0x70>
    19b8:	19 f0       	breq	.+6      	; 0x19c0 <pow+0x64>
    19ba:	ff 3a       	cpi	r31, 0xAF	; 175
    19bc:	38 f4       	brcc	.+14     	; 0x19cc <pow+0x70>
    19be:	9f 77       	andi	r25, 0x7F	; 127
    19c0:	9f 93       	push	r25
    19c2:	0c d0       	rcall	.+24     	; 0x19dc <pow+0x80>
    19c4:	0f 90       	pop	r0
    19c6:	07 fc       	sbrc	r0, 7
    19c8:	90 58       	subi	r25, 0x80	; 128
    19ca:	08 95       	ret
    19cc:	3e f0       	brts	.+14     	; 0x19dc <pow+0x80>
    19ce:	18 cf       	rjmp	.-464    	; 0x1800 <__fp_nan>
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	80 e8       	ldi	r24, 0x80	; 128
    19d6:	9f e3       	ldi	r25, 0x3F	; 63
    19d8:	08 95       	ret
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	9f 77       	andi	r25, 0x7F	; 127
    19de:	5f 93       	push	r21
    19e0:	4f 93       	push	r20
    19e2:	3f 93       	push	r19
    19e4:	2f 93       	push	r18
    19e6:	9e d0       	rcall	.+316    	; 0x1b24 <log>
    19e8:	2f 91       	pop	r18
    19ea:	3f 91       	pop	r19
    19ec:	4f 91       	pop	r20
    19ee:	5f 91       	pop	r21
    19f0:	52 df       	rcall	.-348    	; 0x1896 <__mulsf3>
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <exp>
    19f4:	19 f4       	brne	.+6      	; 0x19fc <pow+0xa0>
    19f6:	0e f0       	brts	.+2      	; 0x19fa <pow+0x9e>
    19f8:	fd ce       	rjmp	.-518    	; 0x17f4 <__fp_inf>
    19fa:	46 cf       	rjmp	.-372    	; 0x1888 <__fp_zero>
    19fc:	01 cf       	rjmp	.-510    	; 0x1800 <__fp_nan>

000019fe <exp>:
    19fe:	2a df       	rcall	.-428    	; 0x1854 <__fp_splitA>
    1a00:	c8 f3       	brcs	.-14     	; 0x19f4 <pow+0x98>
    1a02:	96 38       	cpi	r25, 0x86	; 134
    1a04:	c0 f7       	brcc	.-16     	; 0x19f6 <pow+0x9a>
    1a06:	07 f8       	bld	r0, 7
    1a08:	0f 92       	push	r0
    1a0a:	e8 94       	clt
    1a0c:	2b e3       	ldi	r18, 0x3B	; 59
    1a0e:	3a ea       	ldi	r19, 0xAA	; 170
    1a10:	48 eb       	ldi	r20, 0xB8	; 184
    1a12:	5f e7       	ldi	r21, 0x7F	; 127
    1a14:	4e df       	rcall	.-356    	; 0x18b2 <__mulsf3_pse>
    1a16:	0f 92       	push	r0
    1a18:	0f 92       	push	r0
    1a1a:	0f 92       	push	r0
    1a1c:	4d b7       	in	r20, 0x3d	; 61
    1a1e:	5e b7       	in	r21, 0x3e	; 62
    1a20:	0f 92       	push	r0
    1a22:	c0 d0       	rcall	.+384    	; 0x1ba4 <modf>
    1a24:	e4 ee       	ldi	r30, 0xE4	; 228
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	16 d0       	rcall	.+44     	; 0x1a56 <__fp_powser>
    1a2a:	4f 91       	pop	r20
    1a2c:	5f 91       	pop	r21
    1a2e:	ef 91       	pop	r30
    1a30:	ff 91       	pop	r31
    1a32:	e5 95       	asr	r30
    1a34:	ee 1f       	adc	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	49 f0       	breq	.+18     	; 0x1a4c <exp+0x4e>
    1a3a:	fe 57       	subi	r31, 0x7E	; 126
    1a3c:	e0 68       	ori	r30, 0x80	; 128
    1a3e:	44 27       	eor	r20, r20
    1a40:	ee 0f       	add	r30, r30
    1a42:	44 1f       	adc	r20, r20
    1a44:	fa 95       	dec	r31
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <exp+0x42>
    1a48:	41 95       	neg	r20
    1a4a:	55 0b       	sbc	r21, r21
    1a4c:	32 d0       	rcall	.+100    	; 0x1ab2 <ldexp>
    1a4e:	0f 90       	pop	r0
    1a50:	07 fe       	sbrs	r0, 7
    1a52:	26 c0       	rjmp	.+76     	; 0x1aa0 <inverse>
    1a54:	08 95       	ret

00001a56 <__fp_powser>:
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	1f 93       	push	r17
    1a5c:	0f 93       	push	r16
    1a5e:	ff 92       	push	r15
    1a60:	ef 92       	push	r14
    1a62:	df 92       	push	r13
    1a64:	7b 01       	movw	r14, r22
    1a66:	8c 01       	movw	r16, r24
    1a68:	68 94       	set
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <__fp_powser+0x20>
    1a6c:	da 2e       	mov	r13, r26
    1a6e:	ef 01       	movw	r28, r30
    1a70:	1e df       	rcall	.-452    	; 0x18ae <__mulsf3x>
    1a72:	fe 01       	movw	r30, r28
    1a74:	e8 94       	clt
    1a76:	a5 91       	lpm	r26, Z+
    1a78:	25 91       	lpm	r18, Z+
    1a7a:	35 91       	lpm	r19, Z+
    1a7c:	45 91       	lpm	r20, Z+
    1a7e:	55 91       	lpm	r21, Z+
    1a80:	ae f3       	brts	.-22     	; 0x1a6c <__fp_powser+0x16>
    1a82:	ef 01       	movw	r28, r30
    1a84:	ce dd       	rcall	.-1124   	; 0x1622 <__addsf3x>
    1a86:	fe 01       	movw	r30, r28
    1a88:	97 01       	movw	r18, r14
    1a8a:	a8 01       	movw	r20, r16
    1a8c:	da 94       	dec	r13
    1a8e:	79 f7       	brne	.-34     	; 0x1a6e <__fp_powser+0x18>
    1a90:	df 90       	pop	r13
    1a92:	ef 90       	pop	r14
    1a94:	ff 90       	pop	r15
    1a96:	0f 91       	pop	r16
    1a98:	1f 91       	pop	r17
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <inverse>:
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	80 e8       	ldi	r24, 0x80	; 128
    1aaa:	9f e3       	ldi	r25, 0x3F	; 63
    1aac:	ae c0       	rjmp	.+348    	; 0x1c0a <__divsf3>
    1aae:	a2 ce       	rjmp	.-700    	; 0x17f4 <__fp_inf>
    1ab0:	14 c1       	rjmp	.+552    	; 0x1cda <__fp_mpack>

00001ab2 <ldexp>:
    1ab2:	d0 de       	rcall	.-608    	; 0x1854 <__fp_splitA>
    1ab4:	e8 f3       	brcs	.-6      	; 0x1ab0 <inverse+0x10>
    1ab6:	99 23       	and	r25, r25
    1ab8:	d9 f3       	breq	.-10     	; 0x1ab0 <inverse+0x10>
    1aba:	94 0f       	add	r25, r20
    1abc:	51 1d       	adc	r21, r1
    1abe:	bb f3       	brvs	.-18     	; 0x1aae <inverse+0xe>
    1ac0:	91 50       	subi	r25, 0x01	; 1
    1ac2:	50 40       	sbci	r21, 0x00	; 0
    1ac4:	94 f0       	brlt	.+36     	; 0x1aea <ldexp+0x38>
    1ac6:	59 f0       	breq	.+22     	; 0x1ade <ldexp+0x2c>
    1ac8:	88 23       	and	r24, r24
    1aca:	32 f0       	brmi	.+12     	; 0x1ad8 <ldexp+0x26>
    1acc:	66 0f       	add	r22, r22
    1ace:	77 1f       	adc	r23, r23
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	91 50       	subi	r25, 0x01	; 1
    1ad4:	50 40       	sbci	r21, 0x00	; 0
    1ad6:	c1 f7       	brne	.-16     	; 0x1ac8 <ldexp+0x16>
    1ad8:	9e 3f       	cpi	r25, 0xFE	; 254
    1ada:	51 05       	cpc	r21, r1
    1adc:	44 f7       	brge	.-48     	; 0x1aae <inverse+0xe>
    1ade:	88 0f       	add	r24, r24
    1ae0:	91 1d       	adc	r25, r1
    1ae2:	96 95       	lsr	r25
    1ae4:	87 95       	ror	r24
    1ae6:	97 f9       	bld	r25, 7
    1ae8:	08 95       	ret
    1aea:	5f 3f       	cpi	r21, 0xFF	; 255
    1aec:	ac f0       	brlt	.+42     	; 0x1b18 <ldexp+0x66>
    1aee:	98 3e       	cpi	r25, 0xE8	; 232
    1af0:	9c f0       	brlt	.+38     	; 0x1b18 <ldexp+0x66>
    1af2:	bb 27       	eor	r27, r27
    1af4:	86 95       	lsr	r24
    1af6:	77 95       	ror	r23
    1af8:	67 95       	ror	r22
    1afa:	b7 95       	ror	r27
    1afc:	08 f4       	brcc	.+2      	; 0x1b00 <ldexp+0x4e>
    1afe:	b1 60       	ori	r27, 0x01	; 1
    1b00:	93 95       	inc	r25
    1b02:	c1 f7       	brne	.-16     	; 0x1af4 <ldexp+0x42>
    1b04:	bb 0f       	add	r27, r27
    1b06:	58 f7       	brcc	.-42     	; 0x1ade <ldexp+0x2c>
    1b08:	11 f4       	brne	.+4      	; 0x1b0e <ldexp+0x5c>
    1b0a:	60 ff       	sbrs	r22, 0
    1b0c:	e8 cf       	rjmp	.-48     	; 0x1ade <ldexp+0x2c>
    1b0e:	6f 5f       	subi	r22, 0xFF	; 255
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	8f 4f       	sbci	r24, 0xFF	; 255
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	e3 cf       	rjmp	.-58     	; 0x1ade <ldexp+0x2c>
    1b18:	b8 ce       	rjmp	.-656    	; 0x188a <__fp_szero>
    1b1a:	0e f0       	brts	.+2      	; 0x1b1e <ldexp+0x6c>
    1b1c:	de c0       	rjmp	.+444    	; 0x1cda <__fp_mpack>
    1b1e:	70 ce       	rjmp	.-800    	; 0x1800 <__fp_nan>
    1b20:	68 94       	set
    1b22:	68 ce       	rjmp	.-816    	; 0x17f4 <__fp_inf>

00001b24 <log>:
    1b24:	97 de       	rcall	.-722    	; 0x1854 <__fp_splitA>
    1b26:	c8 f3       	brcs	.-14     	; 0x1b1a <ldexp+0x68>
    1b28:	99 23       	and	r25, r25
    1b2a:	d1 f3       	breq	.-12     	; 0x1b20 <ldexp+0x6e>
    1b2c:	c6 f3       	brts	.-16     	; 0x1b1e <ldexp+0x6c>
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	1f 93       	push	r17
    1b34:	0f 93       	push	r16
    1b36:	ff 92       	push	r15
    1b38:	c9 2f       	mov	r28, r25
    1b3a:	dd 27       	eor	r29, r29
    1b3c:	88 23       	and	r24, r24
    1b3e:	2a f0       	brmi	.+10     	; 0x1b4a <log+0x26>
    1b40:	21 97       	sbiw	r28, 0x01	; 1
    1b42:	66 0f       	add	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	da f7       	brpl	.-10     	; 0x1b40 <log+0x1c>
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	5f eb       	ldi	r21, 0xBF	; 191
    1b52:	9f e3       	ldi	r25, 0x3F	; 63
    1b54:	88 39       	cpi	r24, 0x98	; 152
    1b56:	20 f0       	brcs	.+8      	; 0x1b60 <log+0x3c>
    1b58:	80 3e       	cpi	r24, 0xE0	; 224
    1b5a:	30 f0       	brcs	.+12     	; 0x1b68 <log+0x44>
    1b5c:	21 96       	adiw	r28, 0x01	; 1
    1b5e:	8f 77       	andi	r24, 0x7F	; 127
    1b60:	4f dd       	rcall	.-1378   	; 0x1600 <__addsf3>
    1b62:	ec e0       	ldi	r30, 0x0C	; 12
    1b64:	f1 e0       	ldi	r31, 0x01	; 1
    1b66:	03 c0       	rjmp	.+6      	; 0x1b6e <log+0x4a>
    1b68:	4b dd       	rcall	.-1386   	; 0x1600 <__addsf3>
    1b6a:	e9 e3       	ldi	r30, 0x39	; 57
    1b6c:	f1 e0       	ldi	r31, 0x01	; 1
    1b6e:	73 df       	rcall	.-282    	; 0x1a56 <__fp_powser>
    1b70:	8b 01       	movw	r16, r22
    1b72:	be 01       	movw	r22, r28
    1b74:	ec 01       	movw	r28, r24
    1b76:	fb 2e       	mov	r15, r27
    1b78:	6f 57       	subi	r22, 0x7F	; 127
    1b7a:	71 09       	sbc	r23, r1
    1b7c:	75 95       	asr	r23
    1b7e:	77 1f       	adc	r23, r23
    1b80:	88 0b       	sbc	r24, r24
    1b82:	99 0b       	sbc	r25, r25
    1b84:	d8 dd       	rcall	.-1104   	; 0x1736 <__floatsisf>
    1b86:	28 e1       	ldi	r18, 0x18	; 24
    1b88:	32 e7       	ldi	r19, 0x72	; 114
    1b8a:	41 e3       	ldi	r20, 0x31	; 49
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	8f de       	rcall	.-738    	; 0x18ae <__mulsf3x>
    1b90:	af 2d       	mov	r26, r15
    1b92:	98 01       	movw	r18, r16
    1b94:	ae 01       	movw	r20, r28
    1b96:	ff 90       	pop	r15
    1b98:	0f 91       	pop	r16
    1b9a:	1f 91       	pop	r17
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	40 dd       	rcall	.-1408   	; 0x1622 <__addsf3x>
    1ba2:	3f ce       	rjmp	.-898    	; 0x1822 <__fp_round>

00001ba4 <modf>:
    1ba4:	fa 01       	movw	r30, r20
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	aa 0f       	add	r26, r26
    1baa:	bb 1f       	adc	r27, r27
    1bac:	9b 01       	movw	r18, r22
    1bae:	ac 01       	movw	r20, r24
    1bb0:	bf 57       	subi	r27, 0x7F	; 127
    1bb2:	28 f4       	brcc	.+10     	; 0x1bbe <modf+0x1a>
    1bb4:	22 27       	eor	r18, r18
    1bb6:	33 27       	eor	r19, r19
    1bb8:	44 27       	eor	r20, r20
    1bba:	50 78       	andi	r21, 0x80	; 128
    1bbc:	1f c0       	rjmp	.+62     	; 0x1bfc <modf+0x58>
    1bbe:	b7 51       	subi	r27, 0x17	; 23
    1bc0:	88 f4       	brcc	.+34     	; 0x1be4 <modf+0x40>
    1bc2:	ab 2f       	mov	r26, r27
    1bc4:	00 24       	eor	r0, r0
    1bc6:	46 95       	lsr	r20
    1bc8:	37 95       	ror	r19
    1bca:	27 95       	ror	r18
    1bcc:	01 1c       	adc	r0, r1
    1bce:	a3 95       	inc	r26
    1bd0:	d2 f3       	brmi	.-12     	; 0x1bc6 <modf+0x22>
    1bd2:	00 20       	and	r0, r0
    1bd4:	69 f0       	breq	.+26     	; 0x1bf0 <modf+0x4c>
    1bd6:	22 0f       	add	r18, r18
    1bd8:	33 1f       	adc	r19, r19
    1bda:	44 1f       	adc	r20, r20
    1bdc:	b3 95       	inc	r27
    1bde:	da f3       	brmi	.-10     	; 0x1bd6 <modf+0x32>
    1be0:	0d d0       	rcall	.+26     	; 0x1bfc <modf+0x58>
    1be2:	0d cd       	rjmp	.-1510   	; 0x15fe <__subsf3>
    1be4:	61 30       	cpi	r22, 0x01	; 1
    1be6:	71 05       	cpc	r23, r1
    1be8:	a0 e8       	ldi	r26, 0x80	; 128
    1bea:	8a 07       	cpc	r24, r26
    1bec:	b9 46       	sbci	r27, 0x69	; 105
    1bee:	30 f4       	brcc	.+12     	; 0x1bfc <modf+0x58>
    1bf0:	9b 01       	movw	r18, r22
    1bf2:	ac 01       	movw	r20, r24
    1bf4:	66 27       	eor	r22, r22
    1bf6:	77 27       	eor	r23, r23
    1bf8:	88 27       	eor	r24, r24
    1bfa:	90 78       	andi	r25, 0x80	; 128
    1bfc:	30 96       	adiw	r30, 0x00	; 0
    1bfe:	21 f0       	breq	.+8      	; 0x1c08 <modf+0x64>
    1c00:	20 83       	st	Z, r18
    1c02:	31 83       	std	Z+1, r19	; 0x01
    1c04:	42 83       	std	Z+2, r20	; 0x02
    1c06:	53 83       	std	Z+3, r21	; 0x03
    1c08:	08 95       	ret

00001c0a <__divsf3>:
    1c0a:	0c d0       	rcall	.+24     	; 0x1c24 <__divsf3x>
    1c0c:	0a ce       	rjmp	.-1004   	; 0x1822 <__fp_round>
    1c0e:	02 de       	rcall	.-1020   	; 0x1814 <__fp_pscB>
    1c10:	40 f0       	brcs	.+16     	; 0x1c22 <__divsf3+0x18>
    1c12:	f9 dd       	rcall	.-1038   	; 0x1806 <__fp_pscA>
    1c14:	30 f0       	brcs	.+12     	; 0x1c22 <__divsf3+0x18>
    1c16:	21 f4       	brne	.+8      	; 0x1c20 <__divsf3+0x16>
    1c18:	5f 3f       	cpi	r21, 0xFF	; 255
    1c1a:	19 f0       	breq	.+6      	; 0x1c22 <__divsf3+0x18>
    1c1c:	eb cd       	rjmp	.-1066   	; 0x17f4 <__fp_inf>
    1c1e:	51 11       	cpse	r21, r1
    1c20:	34 ce       	rjmp	.-920    	; 0x188a <__fp_szero>
    1c22:	ee cd       	rjmp	.-1060   	; 0x1800 <__fp_nan>

00001c24 <__divsf3x>:
    1c24:	0f de       	rcall	.-994    	; 0x1844 <__fp_split3>
    1c26:	98 f3       	brcs	.-26     	; 0x1c0e <__divsf3+0x4>

00001c28 <__divsf3_pse>:
    1c28:	99 23       	and	r25, r25
    1c2a:	c9 f3       	breq	.-14     	; 0x1c1e <__divsf3+0x14>
    1c2c:	55 23       	and	r21, r21
    1c2e:	b1 f3       	breq	.-20     	; 0x1c1c <__divsf3+0x12>
    1c30:	95 1b       	sub	r25, r21
    1c32:	55 0b       	sbc	r21, r21
    1c34:	bb 27       	eor	r27, r27
    1c36:	aa 27       	eor	r26, r26
    1c38:	62 17       	cp	r22, r18
    1c3a:	73 07       	cpc	r23, r19
    1c3c:	84 07       	cpc	r24, r20
    1c3e:	38 f0       	brcs	.+14     	; 0x1c4e <__divsf3_pse+0x26>
    1c40:	9f 5f       	subi	r25, 0xFF	; 255
    1c42:	5f 4f       	sbci	r21, 0xFF	; 255
    1c44:	22 0f       	add	r18, r18
    1c46:	33 1f       	adc	r19, r19
    1c48:	44 1f       	adc	r20, r20
    1c4a:	aa 1f       	adc	r26, r26
    1c4c:	a9 f3       	breq	.-22     	; 0x1c38 <__divsf3_pse+0x10>
    1c4e:	33 d0       	rcall	.+102    	; 0x1cb6 <__divsf3_pse+0x8e>
    1c50:	0e 2e       	mov	r0, r30
    1c52:	3a f0       	brmi	.+14     	; 0x1c62 <__divsf3_pse+0x3a>
    1c54:	e0 e8       	ldi	r30, 0x80	; 128
    1c56:	30 d0       	rcall	.+96     	; 0x1cb8 <__divsf3_pse+0x90>
    1c58:	91 50       	subi	r25, 0x01	; 1
    1c5a:	50 40       	sbci	r21, 0x00	; 0
    1c5c:	e6 95       	lsr	r30
    1c5e:	00 1c       	adc	r0, r0
    1c60:	ca f7       	brpl	.-14     	; 0x1c54 <__divsf3_pse+0x2c>
    1c62:	29 d0       	rcall	.+82     	; 0x1cb6 <__divsf3_pse+0x8e>
    1c64:	fe 2f       	mov	r31, r30
    1c66:	27 d0       	rcall	.+78     	; 0x1cb6 <__divsf3_pse+0x8e>
    1c68:	66 0f       	add	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	bb 1f       	adc	r27, r27
    1c70:	26 17       	cp	r18, r22
    1c72:	37 07       	cpc	r19, r23
    1c74:	48 07       	cpc	r20, r24
    1c76:	ab 07       	cpc	r26, r27
    1c78:	b0 e8       	ldi	r27, 0x80	; 128
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <__divsf3_pse+0x56>
    1c7c:	bb 0b       	sbc	r27, r27
    1c7e:	80 2d       	mov	r24, r0
    1c80:	bf 01       	movw	r22, r30
    1c82:	ff 27       	eor	r31, r31
    1c84:	93 58       	subi	r25, 0x83	; 131
    1c86:	5f 4f       	sbci	r21, 0xFF	; 255
    1c88:	2a f0       	brmi	.+10     	; 0x1c94 <__divsf3_pse+0x6c>
    1c8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c8c:	51 05       	cpc	r21, r1
    1c8e:	68 f0       	brcs	.+26     	; 0x1caa <__divsf3_pse+0x82>
    1c90:	b1 cd       	rjmp	.-1182   	; 0x17f4 <__fp_inf>
    1c92:	fb cd       	rjmp	.-1034   	; 0x188a <__fp_szero>
    1c94:	5f 3f       	cpi	r21, 0xFF	; 255
    1c96:	ec f3       	brlt	.-6      	; 0x1c92 <__divsf3_pse+0x6a>
    1c98:	98 3e       	cpi	r25, 0xE8	; 232
    1c9a:	dc f3       	brlt	.-10     	; 0x1c92 <__divsf3_pse+0x6a>
    1c9c:	86 95       	lsr	r24
    1c9e:	77 95       	ror	r23
    1ca0:	67 95       	ror	r22
    1ca2:	b7 95       	ror	r27
    1ca4:	f7 95       	ror	r31
    1ca6:	9f 5f       	subi	r25, 0xFF	; 255
    1ca8:	c9 f7       	brne	.-14     	; 0x1c9c <__divsf3_pse+0x74>
    1caa:	88 0f       	add	r24, r24
    1cac:	91 1d       	adc	r25, r1
    1cae:	96 95       	lsr	r25
    1cb0:	87 95       	ror	r24
    1cb2:	97 f9       	bld	r25, 7
    1cb4:	08 95       	ret
    1cb6:	e1 e0       	ldi	r30, 0x01	; 1
    1cb8:	66 0f       	add	r22, r22
    1cba:	77 1f       	adc	r23, r23
    1cbc:	88 1f       	adc	r24, r24
    1cbe:	bb 1f       	adc	r27, r27
    1cc0:	62 17       	cp	r22, r18
    1cc2:	73 07       	cpc	r23, r19
    1cc4:	84 07       	cpc	r24, r20
    1cc6:	ba 07       	cpc	r27, r26
    1cc8:	20 f0       	brcs	.+8      	; 0x1cd2 <__divsf3_pse+0xaa>
    1cca:	62 1b       	sub	r22, r18
    1ccc:	73 0b       	sbc	r23, r19
    1cce:	84 0b       	sbc	r24, r20
    1cd0:	ba 0b       	sbc	r27, r26
    1cd2:	ee 1f       	adc	r30, r30
    1cd4:	88 f7       	brcc	.-30     	; 0x1cb8 <__divsf3_pse+0x90>
    1cd6:	e0 95       	com	r30
    1cd8:	08 95       	ret

00001cda <__fp_mpack>:
    1cda:	9f 3f       	cpi	r25, 0xFF	; 255
    1cdc:	31 f0       	breq	.+12     	; 0x1cea <__fp_mpack_finite+0xc>

00001cde <__fp_mpack_finite>:
    1cde:	91 50       	subi	r25, 0x01	; 1
    1ce0:	20 f4       	brcc	.+8      	; 0x1cea <__fp_mpack_finite+0xc>
    1ce2:	87 95       	ror	r24
    1ce4:	77 95       	ror	r23
    1ce6:	67 95       	ror	r22
    1ce8:	b7 95       	ror	r27
    1cea:	88 0f       	add	r24, r24
    1cec:	91 1d       	adc	r25, r1
    1cee:	96 95       	lsr	r25
    1cf0:	87 95       	ror	r24
    1cf2:	97 f9       	bld	r25, 7
    1cf4:	08 95       	ret

00001cf6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1cf6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1cf8:	91 8d       	ldd	r25, Z+25	; 0x19
    1cfa:	22 8d       	ldd	r18, Z+26	; 0x1a
    1cfc:	89 2f       	mov	r24, r25
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	80 5c       	subi	r24, 0xC0	; 192
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	82 1b       	sub	r24, r18
    1d06:	91 09       	sbc	r25, r1
}
    1d08:	8f 73       	andi	r24, 0x3F	; 63
    1d0a:	99 27       	eor	r25, r25
    1d0c:	08 95       	ret

00001d0e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1d0e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1d10:	91 8d       	ldd	r25, Z+25	; 0x19
    1d12:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d14:	98 17       	cp	r25, r24
    1d16:	31 f0       	breq	.+12     	; 0x1d24 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1d18:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d1a:	e8 0f       	add	r30, r24
    1d1c:	f1 1d       	adc	r31, r1
    1d1e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1d28:	08 95       	ret

00001d2a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1d2a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1d2c:	91 8d       	ldd	r25, Z+25	; 0x19
    1d2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d30:	98 17       	cp	r25, r24
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1d34:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d36:	df 01       	movw	r26, r30
    1d38:	a8 0f       	add	r26, r24
    1d3a:	b1 1d       	adc	r27, r1
    1d3c:	5d 96       	adiw	r26, 0x1d	; 29
    1d3e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1d40:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d42:	9f 5f       	subi	r25, 0xFF	; 255
    1d44:	9f 73       	andi	r25, 0x3F	; 63
    1d46:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1d50:	08 95       	ret

00001d52 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1d52:	fc 01       	movw	r30, r24
    1d54:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1d56:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d58:	25 2f       	mov	r18, r21
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	84 2f       	mov	r24, r20
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1d60:	82 1b       	sub	r24, r18
    1d62:	93 0b       	sbc	r25, r19
    1d64:	54 17       	cp	r21, r20
    1d66:	10 f0       	brcs	.+4      	; 0x1d6c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1d68:	cf 96       	adiw	r24, 0x3f	; 63
    1d6a:	08 95       	ret
  return tail - head - 1;
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
}
    1d6e:	08 95       	ret

00001d70 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1d70:	8a e4       	ldi	r24, 0x4A	; 74
    1d72:	90 e1       	ldi	r25, 0x10	; 16
    1d74:	89 2b       	or	r24, r25
    1d76:	39 f0       	breq	.+14     	; 0x1d86 <_Z14serialEventRunv+0x16>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	89 2b       	or	r24, r25
    1d7e:	19 f0       	breq	.+6      	; 0x1d86 <_Z14serialEventRunv+0x16>
    1d80:	89 d1       	rcall	.+786    	; 0x2094 <_Z17Serial0_availablev>
    1d82:	81 11       	cpse	r24, r1
    1d84:	24 c0       	rjmp	.+72     	; 0x1dce <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1d86:	8f ed       	ldi	r24, 0xDF	; 223
    1d88:	90 e1       	ldi	r25, 0x10	; 16
    1d8a:	89 2b       	or	r24, r25
    1d8c:	39 f0       	breq	.+14     	; 0x1d9c <_Z14serialEventRunv+0x2c>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	89 2b       	or	r24, r25
    1d94:	19 f0       	breq	.+6      	; 0x1d9c <_Z14serialEventRunv+0x2c>
    1d96:	13 d2       	rcall	.+1062   	; 0x21be <_Z17Serial1_availablev>
    1d98:	81 11       	cpse	r24, r1
    1d9a:	1c c0       	rjmp	.+56     	; 0x1dd4 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	89 2b       	or	r24, r25
    1da2:	41 f0       	breq	.+16     	; 0x1db4 <_Z14serialEventRunv+0x44>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	89 2b       	or	r24, r25
    1daa:	21 f0       	breq	.+8      	; 0x1db4 <_Z14serialEventRunv+0x44>
    1dac:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1db0:	81 11       	cpse	r24, r1
    1db2:	13 c0       	rjmp	.+38     	; 0x1dda <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	89 2b       	or	r24, r25
    1dba:	a1 f0       	breq	.+40     	; 0x1de4 <_Z14serialEventRunv+0x74>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	89 2b       	or	r24, r25
    1dc2:	81 f0       	breq	.+32     	; 0x1de4 <_Z14serialEventRunv+0x74>
    1dc4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1dc8:	81 11       	cpse	r24, r1
    1dca:	0a c0       	rjmp	.+20     	; 0x1de0 <_Z14serialEventRunv+0x70>
    1dcc:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1dce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1dd2:	d9 cf       	rjmp	.-78     	; 0x1d86 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1dd4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1dd8:	e1 cf       	rjmp	.-62     	; 0x1d9c <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1dda:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1dde:	ea cf       	rjmp	.-44     	; 0x1db4 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1de0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1de4:	08 95       	ret

00001de6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1de6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1de8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dea:	df 01       	movw	r26, r30
    1dec:	a8 0f       	add	r26, r24
    1dee:	b1 1d       	adc	r27, r1
    1df0:	a3 5a       	subi	r26, 0xA3	; 163
    1df2:	bf 4f       	sbci	r27, 0xFF	; 255
    1df4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1df6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	01 96       	adiw	r24, 0x01	; 1
    1dfc:	8f 73       	andi	r24, 0x3F	; 63
    1dfe:	99 27       	eor	r25, r25
    1e00:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1e02:	a6 89       	ldd	r26, Z+22	; 0x16
    1e04:	b7 89       	ldd	r27, Z+23	; 0x17
    1e06:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1e08:	a0 89       	ldd	r26, Z+16	; 0x10
    1e0a:	b1 89       	ldd	r27, Z+17	; 0x11
    1e0c:	8c 91       	ld	r24, X
    1e0e:	83 70       	andi	r24, 0x03	; 3
    1e10:	80 64       	ori	r24, 0x40	; 64
    1e12:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1e14:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e16:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e18:	98 13       	cpse	r25, r24
    1e1a:	06 c0       	rjmp	.+12     	; 0x1e28 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1e1c:	02 88       	ldd	r0, Z+18	; 0x12
    1e1e:	f3 89       	ldd	r31, Z+19	; 0x13
    1e20:	e0 2d       	mov	r30, r0
    1e22:	80 81       	ld	r24, Z
    1e24:	8f 7d       	andi	r24, 0xDF	; 223
    1e26:	80 83       	st	Z, r24
    1e28:	08 95       	ret

00001e2a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1e2a:	ef 92       	push	r14
    1e2c:	ff 92       	push	r15
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	ec 01       	movw	r28, r24
  _written = true;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1e3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e40:	98 13       	cpse	r25, r24
    1e42:	05 c0       	rjmp	.+10     	; 0x1e4e <_ZN14HardwareSerial5writeEh+0x24>
    1e44:	e8 89       	ldd	r30, Y+16	; 0x10
    1e46:	f9 89       	ldd	r31, Y+17	; 0x11
    1e48:	80 81       	ld	r24, Z
    1e4a:	85 fd       	sbrc	r24, 5
    1e4c:	25 c0       	rjmp	.+74     	; 0x1e98 <_ZN14HardwareSerial5writeEh+0x6e>
    1e4e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1e50:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1e52:	10 e0       	ldi	r17, 0x00	; 0
    1e54:	0f 5f       	subi	r16, 0xFF	; 255
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	0f 73       	andi	r16, 0x3F	; 63
    1e5a:	11 27       	eor	r17, r17
    1e5c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1e5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e60:	e8 12       	cpse	r14, r24
    1e62:	0b c0       	rjmp	.+22     	; 0x1e7a <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	07 fc       	sbrc	r0, 7
    1e68:	fa cf       	rjmp	.-12     	; 0x1e5e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1e6a:	e8 89       	ldd	r30, Y+16	; 0x10
    1e6c:	f9 89       	ldd	r31, Y+17	; 0x11
    1e6e:	80 81       	ld	r24, Z
    1e70:	85 ff       	sbrs	r24, 5
    1e72:	f5 cf       	rjmp	.-22     	; 0x1e5e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1e74:	ce 01       	movw	r24, r28
    1e76:	b7 df       	rcall	.-146    	; 0x1de6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e78:	f2 cf       	rjmp	.-28     	; 0x1e5e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e8 0f       	add	r30, r24
    1e80:	f1 1d       	adc	r31, r1
    1e82:	e3 5a       	subi	r30, 0xA3	; 163
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e88:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e8a:	f8 94       	cli
    _tx_buffer_head = i;
    1e8c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1e8e:	ea 89       	ldd	r30, Y+18	; 0x12
    1e90:	fb 89       	ldd	r31, Y+19	; 0x13
    1e92:	80 81       	ld	r24, Z
    1e94:	80 62       	ori	r24, 0x20	; 32
    1e96:	0a c0       	rjmp	.+20     	; 0x1eac <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e98:	9f b7       	in	r25, 0x3f	; 63
    1e9a:	f8 94       	cli
      *_udr = c;
    1e9c:	ee 89       	ldd	r30, Y+22	; 0x16
    1e9e:	ff 89       	ldd	r31, Y+23	; 0x17
    1ea0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1ea2:	e8 89       	ldd	r30, Y+16	; 0x10
    1ea4:	f9 89       	ldd	r31, Y+17	; 0x11
    1ea6:	80 81       	ld	r24, Z
    1ea8:	83 70       	andi	r24, 0x03	; 3
    1eaa:	80 64       	ori	r24, 0x40	; 64
    1eac:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1eae:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	08 95       	ret

00001ec2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1ec8:	88 8d       	ldd	r24, Y+24	; 0x18
    1eca:	88 23       	and	r24, r24
    1ecc:	c1 f0       	breq	.+48     	; 0x1efe <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1ece:	ea 89       	ldd	r30, Y+18	; 0x12
    1ed0:	fb 89       	ldd	r31, Y+19	; 0x13
    1ed2:	80 81       	ld	r24, Z
    1ed4:	85 fd       	sbrc	r24, 5
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <_ZN14HardwareSerial5flushEv+0x20>
    1ed8:	a8 89       	ldd	r26, Y+16	; 0x10
    1eda:	b9 89       	ldd	r27, Y+17	; 0x11
    1edc:	8c 91       	ld	r24, X
    1ede:	86 fd       	sbrc	r24, 6
    1ee0:	0e c0       	rjmp	.+28     	; 0x1efe <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	07 fc       	sbrc	r0, 7
    1ee6:	f5 cf       	rjmp	.-22     	; 0x1ed2 <_ZN14HardwareSerial5flushEv+0x10>
    1ee8:	80 81       	ld	r24, Z
    1eea:	85 ff       	sbrs	r24, 5
    1eec:	f2 cf       	rjmp	.-28     	; 0x1ed2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1eee:	a8 89       	ldd	r26, Y+16	; 0x10
    1ef0:	b9 89       	ldd	r27, Y+17	; 0x11
    1ef2:	8c 91       	ld	r24, X
    1ef4:	85 ff       	sbrs	r24, 5
    1ef6:	ed cf       	rjmp	.-38     	; 0x1ed2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1ef8:	ce 01       	movw	r24, r28
    1efa:	75 df       	rcall	.-278    	; 0x1de6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1efc:	e8 cf       	rjmp	.-48     	; 0x1ece <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	08 95       	ret

00001f04 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	ec 01       	movw	r28, r24
    1f14:	6a 01       	movw	r12, r20
    1f16:	7b 01       	movw	r14, r22
    1f18:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1f1a:	e8 89       	ldd	r30, Y+16	; 0x10
    1f1c:	f9 89       	ldd	r31, Y+17	; 0x11
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1f22:	41 15       	cp	r20, r1
    1f24:	51 4e       	sbci	r21, 0xE1	; 225
    1f26:	61 05       	cpc	r22, r1
    1f28:	71 05       	cpc	r23, r1
    1f2a:	b1 f0       	breq	.+44     	; 0x1f58 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	79 e0       	ldi	r23, 0x09	; 9
    1f30:	8d e3       	ldi	r24, 0x3D	; 61
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a7 01       	movw	r20, r14
    1f36:	96 01       	movw	r18, r12
    1f38:	0e 94 de 18 	call	0x31bc	; 0x31bc <__udivmodsi4>
    1f3c:	da 01       	movw	r26, r20
    1f3e:	c9 01       	movw	r24, r18
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	a1 09       	sbc	r26, r1
    1f44:	b1 09       	sbc	r27, r1
    1f46:	b6 95       	lsr	r27
    1f48:	a7 95       	ror	r26
    1f4a:	97 95       	ror	r25
    1f4c:	87 95       	ror	r24
    1f4e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1f50:	21 15       	cp	r18, r1
    1f52:	80 e1       	ldi	r24, 0x10	; 16
    1f54:	38 07       	cpc	r19, r24
    1f56:	a8 f0       	brcs	.+42     	; 0x1f82 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1f58:	e8 89       	ldd	r30, Y+16	; 0x10
    1f5a:	f9 89       	ldd	r31, Y+17	; 0x11
    1f5c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1f5e:	60 e8       	ldi	r22, 0x80	; 128
    1f60:	74 e8       	ldi	r23, 0x84	; 132
    1f62:	8e e1       	ldi	r24, 0x1E	; 30
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a7 01       	movw	r20, r14
    1f68:	96 01       	movw	r18, r12
    1f6a:	0e 94 de 18 	call	0x31bc	; 0x31bc <__udivmodsi4>
    1f6e:	da 01       	movw	r26, r20
    1f70:	c9 01       	movw	r24, r18
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	a1 09       	sbc	r26, r1
    1f76:	b1 09       	sbc	r27, r1
    1f78:	b6 95       	lsr	r27
    1f7a:	a7 95       	ror	r26
    1f7c:	97 95       	ror	r25
    1f7e:	87 95       	ror	r24
    1f80:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1f82:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f84:	fd 85       	ldd	r31, Y+13	; 0x0d
    1f86:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1f88:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f8a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f8c:	20 83       	st	Z, r18

  _written = false;
    1f8e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1f90:	ec 89       	ldd	r30, Y+20	; 0x14
    1f92:	fd 89       	ldd	r31, Y+21	; 0x15
    1f94:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1f96:	ea 89       	ldd	r30, Y+18	; 0x12
    1f98:	fb 89       	ldd	r31, Y+19	; 0x13
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 61       	ori	r24, 0x10	; 16
    1f9e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1fa0:	ea 89       	ldd	r30, Y+18	; 0x12
    1fa2:	fb 89       	ldd	r31, Y+19	; 0x13
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 60       	ori	r24, 0x08	; 8
    1fa8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1faa:	ea 89       	ldd	r30, Y+18	; 0x12
    1fac:	fb 89       	ldd	r31, Y+19	; 0x13
    1fae:	80 81       	ld	r24, Z
    1fb0:	80 68       	ori	r24, 0x80	; 128
    1fb2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1fb4:	ea 89       	ldd	r30, Y+18	; 0x12
    1fb6:	fb 89       	ldd	r31, Y+19	; 0x13
    1fb8:	80 81       	ld	r24, Z
    1fba:	8f 7d       	andi	r24, 0xDF	; 223
    1fbc:	80 83       	st	Z, r24
}
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	ff 90       	pop	r15
    1fc6:	ef 90       	pop	r14
    1fc8:	df 90       	pop	r13
    1fca:	cf 90       	pop	r12
    1fcc:	08 95       	ret

00001fce <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	08 95       	ret

00001fd4 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1fd4:	08 95       	ret

00001fd6 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	0b b6       	in	r0, 0x3b	; 59
    1fe2:	0f 92       	push	r0
    1fe4:	2f 93       	push	r18
    1fe6:	8f 93       	push	r24
    1fe8:	9f 93       	push	r25
    1fea:	ef 93       	push	r30
    1fec:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1fee:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <Serial+0x10>
    1ff2:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <Serial+0x11>
    1ff6:	80 81       	ld	r24, Z
    1ff8:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <Serial+0x16>
    1ffc:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <Serial+0x17>
    2000:	82 fd       	sbrc	r24, 2
    2002:	12 c0       	rjmp	.+36     	; 0x2028 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2004:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2006:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <Serial+0x19>
    200a:	8f 5f       	subi	r24, 0xFF	; 255
    200c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    200e:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <Serial+0x1a>
    2012:	82 17       	cp	r24, r18
    2014:	51 f0       	breq	.+20     	; 0x202a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    2016:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <Serial+0x19>
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	ed 57       	subi	r30, 0x7D	; 125
    201e:	fc 4f       	sbci	r31, 0xFC	; 252
    2020:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2022:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <Serial+0x19>
    2026:	01 c0       	rjmp	.+2      	; 0x202a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2028:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    202a:	ff 91       	pop	r31
    202c:	ef 91       	pop	r30
    202e:	9f 91       	pop	r25
    2030:	8f 91       	pop	r24
    2032:	2f 91       	pop	r18
    2034:	0f 90       	pop	r0
    2036:	0b be       	out	0x3b, r0	; 59
    2038:	0f 90       	pop	r0
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	0f 90       	pop	r0
    203e:	1f 90       	pop	r1
    2040:	18 95       	reti

00002042 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2042:	1f 92       	push	r1
    2044:	0f 92       	push	r0
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	0f 92       	push	r0
    204a:	11 24       	eor	r1, r1
    204c:	0b b6       	in	r0, 0x3b	; 59
    204e:	0f 92       	push	r0
    2050:	2f 93       	push	r18
    2052:	3f 93       	push	r19
    2054:	4f 93       	push	r20
    2056:	5f 93       	push	r21
    2058:	6f 93       	push	r22
    205a:	7f 93       	push	r23
    205c:	8f 93       	push	r24
    205e:	9f 93       	push	r25
    2060:	af 93       	push	r26
    2062:	bf 93       	push	r27
    2064:	ef 93       	push	r30
    2066:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2068:	83 e8       	ldi	r24, 0x83	; 131
    206a:	93 e0       	ldi	r25, 0x03	; 3
    206c:	bc de       	rcall	.-648    	; 0x1de6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    206e:	ff 91       	pop	r31
    2070:	ef 91       	pop	r30
    2072:	bf 91       	pop	r27
    2074:	af 91       	pop	r26
    2076:	9f 91       	pop	r25
    2078:	8f 91       	pop	r24
    207a:	7f 91       	pop	r23
    207c:	6f 91       	pop	r22
    207e:	5f 91       	pop	r21
    2080:	4f 91       	pop	r20
    2082:	3f 91       	pop	r19
    2084:	2f 91       	pop	r18
    2086:	0f 90       	pop	r0
    2088:	0b be       	out	0x3b, r0	; 59
    208a:	0f 90       	pop	r0
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	0f 90       	pop	r0
    2090:	1f 90       	pop	r1
    2092:	18 95       	reti

00002094 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2094:	83 e8       	ldi	r24, 0x83	; 131
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	2e de       	rcall	.-932    	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
    209a:	21 e0       	ldi	r18, 0x01	; 1
    209c:	89 2b       	or	r24, r25
    209e:	09 f4       	brne	.+2      	; 0x20a2 <_Z17Serial0_availablev+0xe>
    20a0:	20 e0       	ldi	r18, 0x00	; 0
}
    20a2:	82 2f       	mov	r24, r18
    20a4:	08 95       	ret

000020a6 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    20a6:	e3 e8       	ldi	r30, 0x83	; 131
    20a8:	f3 e0       	ldi	r31, 0x03	; 3
    20aa:	13 82       	std	Z+3, r1	; 0x03
    20ac:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    20ae:	88 ee       	ldi	r24, 0xE8	; 232
    20b0:	93 e0       	ldi	r25, 0x03	; 3
    20b2:	a0 e0       	ldi	r26, 0x00	; 0
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	84 83       	std	Z+4, r24	; 0x04
    20b8:	95 83       	std	Z+5, r25	; 0x05
    20ba:	a6 83       	std	Z+6, r26	; 0x06
    20bc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    20be:	89 ee       	ldi	r24, 0xE9	; 233
    20c0:	92 e0       	ldi	r25, 0x02	; 2
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
    20c6:	85 ec       	ldi	r24, 0xC5	; 197
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	95 87       	std	Z+13, r25	; 0x0d
    20cc:	84 87       	std	Z+12, r24	; 0x0c
    20ce:	84 ec       	ldi	r24, 0xC4	; 196
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	97 87       	std	Z+15, r25	; 0x0f
    20d4:	86 87       	std	Z+14, r24	; 0x0e
    20d6:	80 ec       	ldi	r24, 0xC0	; 192
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	91 8b       	std	Z+17, r25	; 0x11
    20dc:	80 8b       	std	Z+16, r24	; 0x10
    20de:	81 ec       	ldi	r24, 0xC1	; 193
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	93 8b       	std	Z+19, r25	; 0x13
    20e4:	82 8b       	std	Z+18, r24	; 0x12
    20e6:	82 ec       	ldi	r24, 0xC2	; 194
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	95 8b       	std	Z+21, r25	; 0x15
    20ec:	84 8b       	std	Z+20, r24	; 0x14
    20ee:	86 ec       	ldi	r24, 0xC6	; 198
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	97 8b       	std	Z+23, r25	; 0x17
    20f4:	86 8b       	std	Z+22, r24	; 0x16
    20f6:	11 8e       	std	Z+25, r1	; 0x19
    20f8:	12 8e       	std	Z+26, r1	; 0x1a
    20fa:	13 8e       	std	Z+27, r1	; 0x1b
    20fc:	14 8e       	std	Z+28, r1	; 0x1c
    20fe:	08 95       	ret

00002100 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2100:	1f 92       	push	r1
    2102:	0f 92       	push	r0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	0f 92       	push	r0
    2108:	11 24       	eor	r1, r1
    210a:	0b b6       	in	r0, 0x3b	; 59
    210c:	0f 92       	push	r0
    210e:	2f 93       	push	r18
    2110:	8f 93       	push	r24
    2112:	9f 93       	push	r25
    2114:	ef 93       	push	r30
    2116:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2118:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <Serial1+0x10>
    211c:	f0 91 31 04 	lds	r31, 0x0431	; 0x800431 <Serial1+0x11>
    2120:	80 81       	ld	r24, Z
    2122:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <Serial1+0x16>
    2126:	f0 91 37 04 	lds	r31, 0x0437	; 0x800437 <Serial1+0x17>
    212a:	82 fd       	sbrc	r24, 2
    212c:	12 c0       	rjmp	.+36     	; 0x2152 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    212e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2130:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <Serial1+0x19>
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2138:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <Serial1+0x1a>
    213c:	82 17       	cp	r24, r18
    213e:	51 f0       	breq	.+20     	; 0x2154 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    2140:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <Serial1+0x19>
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	e0 5e       	subi	r30, 0xE0	; 224
    2148:	fb 4f       	sbci	r31, 0xFB	; 251
    214a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    214c:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <Serial1+0x19>
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2152:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    2154:	ff 91       	pop	r31
    2156:	ef 91       	pop	r30
    2158:	9f 91       	pop	r25
    215a:	8f 91       	pop	r24
    215c:	2f 91       	pop	r18
    215e:	0f 90       	pop	r0
    2160:	0b be       	out	0x3b, r0	; 59
    2162:	0f 90       	pop	r0
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	0f 90       	pop	r0
    2168:	1f 90       	pop	r1
    216a:	18 95       	reti

0000216c <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    216c:	1f 92       	push	r1
    216e:	0f 92       	push	r0
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	0f 92       	push	r0
    2174:	11 24       	eor	r1, r1
    2176:	0b b6       	in	r0, 0x3b	; 59
    2178:	0f 92       	push	r0
    217a:	2f 93       	push	r18
    217c:	3f 93       	push	r19
    217e:	4f 93       	push	r20
    2180:	5f 93       	push	r21
    2182:	6f 93       	push	r22
    2184:	7f 93       	push	r23
    2186:	8f 93       	push	r24
    2188:	9f 93       	push	r25
    218a:	af 93       	push	r26
    218c:	bf 93       	push	r27
    218e:	ef 93       	push	r30
    2190:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    2192:	80 e2       	ldi	r24, 0x20	; 32
    2194:	94 e0       	ldi	r25, 0x04	; 4
    2196:	27 de       	rcall	.-946    	; 0x1de6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2198:	ff 91       	pop	r31
    219a:	ef 91       	pop	r30
    219c:	bf 91       	pop	r27
    219e:	af 91       	pop	r26
    21a0:	9f 91       	pop	r25
    21a2:	8f 91       	pop	r24
    21a4:	7f 91       	pop	r23
    21a6:	6f 91       	pop	r22
    21a8:	5f 91       	pop	r21
    21aa:	4f 91       	pop	r20
    21ac:	3f 91       	pop	r19
    21ae:	2f 91       	pop	r18
    21b0:	0f 90       	pop	r0
    21b2:	0b be       	out	0x3b, r0	; 59
    21b4:	0f 90       	pop	r0
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	0f 90       	pop	r0
    21ba:	1f 90       	pop	r1
    21bc:	18 95       	reti

000021be <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    21be:	80 e2       	ldi	r24, 0x20	; 32
    21c0:	94 e0       	ldi	r25, 0x04	; 4
    21c2:	99 dd       	rcall	.-1230   	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
    21c4:	21 e0       	ldi	r18, 0x01	; 1
    21c6:	89 2b       	or	r24, r25
    21c8:	09 f4       	brne	.+2      	; 0x21cc <_Z17Serial1_availablev+0xe>
    21ca:	20 e0       	ldi	r18, 0x00	; 0
}
    21cc:	82 2f       	mov	r24, r18
    21ce:	08 95       	ret

000021d0 <_GLOBAL__sub_I___vector_36>:
    21d0:	e0 e2       	ldi	r30, 0x20	; 32
    21d2:	f4 e0       	ldi	r31, 0x04	; 4
    21d4:	13 82       	std	Z+3, r1	; 0x03
    21d6:	12 82       	std	Z+2, r1	; 0x02
    21d8:	88 ee       	ldi	r24, 0xE8	; 232
    21da:	93 e0       	ldi	r25, 0x03	; 3
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	84 83       	std	Z+4, r24	; 0x04
    21e2:	95 83       	std	Z+5, r25	; 0x05
    21e4:	a6 83       	std	Z+6, r26	; 0x06
    21e6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    21e8:	89 ee       	ldi	r24, 0xE9	; 233
    21ea:	92 e0       	ldi	r25, 0x02	; 2
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
    21f0:	8d ec       	ldi	r24, 0xCD	; 205
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	95 87       	std	Z+13, r25	; 0x0d
    21f6:	84 87       	std	Z+12, r24	; 0x0c
    21f8:	8c ec       	ldi	r24, 0xCC	; 204
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	97 87       	std	Z+15, r25	; 0x0f
    21fe:	86 87       	std	Z+14, r24	; 0x0e
    2200:	88 ec       	ldi	r24, 0xC8	; 200
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	91 8b       	std	Z+17, r25	; 0x11
    2206:	80 8b       	std	Z+16, r24	; 0x10
    2208:	89 ec       	ldi	r24, 0xC9	; 201
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	93 8b       	std	Z+19, r25	; 0x13
    220e:	82 8b       	std	Z+18, r24	; 0x12
    2210:	8a ec       	ldi	r24, 0xCA	; 202
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	95 8b       	std	Z+21, r25	; 0x15
    2216:	84 8b       	std	Z+20, r24	; 0x14
    2218:	8e ec       	ldi	r24, 0xCE	; 206
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	97 8b       	std	Z+23, r25	; 0x17
    221e:	86 8b       	std	Z+22, r24	; 0x16
    2220:	11 8e       	std	Z+25, r1	; 0x19
    2222:	12 8e       	std	Z+26, r1	; 0x1a
    2224:	13 8e       	std	Z+27, r1	; 0x1b
    2226:	14 8e       	std	Z+28, r1	; 0x1c
    2228:	08 95       	ret

0000222a <initVariant>:
    222a:	08 95       	ret

0000222c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    222c:	e8 d1       	rcall	.+976    	; 0x25fe <init>

	initVariant();
    222e:	fd df       	rcall	.-6      	; 0x222a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2230:	1d d9       	rcall	.-3526   	; 0x146c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2232:	c8 eb       	ldi	r28, 0xB8	; 184
    2234:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    2236:	74 d8       	rcall	.-3864   	; 0x1320 <loop>
		if (serialEventRun) serialEventRun();
    2238:	20 97       	sbiw	r28, 0x00	; 0
    223a:	e9 f3       	breq	.-6      	; 0x2236 <main+0xa>
    223c:	99 dd       	rcall	.-1230   	; 0x1d70 <_Z14serialEventRunv>
    223e:	fb cf       	rjmp	.-10     	; 0x2236 <main+0xa>

00002240 <_ZN5Print5writeEPKhj>:
    2240:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	6c 01       	movw	r12, r24
    2252:	7a 01       	movw	r14, r20
    2254:	8b 01       	movw	r16, r22
    2256:	c0 e0       	ldi	r28, 0x00	; 0
    2258:	d0 e0       	ldi	r29, 0x00	; 0
    225a:	ce 15       	cp	r28, r14
    225c:	df 05       	cpc	r29, r15
    225e:	81 f0       	breq	.+32     	; 0x2280 <_ZN5Print5writeEPKhj+0x40>
    2260:	d8 01       	movw	r26, r16
    2262:	6d 91       	ld	r22, X+
    2264:	8d 01       	movw	r16, r26
    2266:	d6 01       	movw	r26, r12
    2268:	ed 91       	ld	r30, X+
    226a:	fc 91       	ld	r31, X
    226c:	01 90       	ld	r0, Z+
    226e:	f0 81       	ld	r31, Z
    2270:	e0 2d       	mov	r30, r0
    2272:	c6 01       	movw	r24, r12
    2274:	19 95       	eicall
    2276:	89 2b       	or	r24, r25
    2278:	11 f0       	breq	.+4      	; 0x227e <_ZN5Print5writeEPKhj+0x3e>
    227a:	21 96       	adiw	r28, 0x01	; 1
    227c:	ee cf       	rjmp	.-36     	; 0x225a <_ZN5Print5writeEPKhj+0x1a>
    227e:	7e 01       	movw	r14, r28
    2280:	c7 01       	movw	r24, r14
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	08 95       	ret

00002294 <_ZN5Print5writeEPKc>:
    2294:	61 15       	cp	r22, r1
    2296:	71 05       	cpc	r23, r1
    2298:	79 f0       	breq	.+30     	; 0x22b8 <_ZN5Print5writeEPKc+0x24>
    229a:	fb 01       	movw	r30, r22
    229c:	01 90       	ld	r0, Z+
    229e:	00 20       	and	r0, r0
    22a0:	e9 f7       	brne	.-6      	; 0x229c <_ZN5Print5writeEPKc+0x8>
    22a2:	31 97       	sbiw	r30, 0x01	; 1
    22a4:	af 01       	movw	r20, r30
    22a6:	46 1b       	sub	r20, r22
    22a8:	57 0b       	sbc	r21, r23
    22aa:	dc 01       	movw	r26, r24
    22ac:	ed 91       	ld	r30, X+
    22ae:	fc 91       	ld	r31, X
    22b0:	02 80       	ldd	r0, Z+2	; 0x02
    22b2:	f3 81       	ldd	r31, Z+3	; 0x03
    22b4:	e0 2d       	mov	r30, r0
    22b6:	19 94       	eijmp
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	08 95       	ret

000022be <_ZN5Print5printERK6String>:
    22be:	db 01       	movw	r26, r22
    22c0:	14 96       	adiw	r26, 0x04	; 4
    22c2:	4d 91       	ld	r20, X+
    22c4:	5c 91       	ld	r21, X
    22c6:	15 97       	sbiw	r26, 0x05	; 5
    22c8:	6d 91       	ld	r22, X+
    22ca:	7c 91       	ld	r23, X
    22cc:	dc 01       	movw	r26, r24
    22ce:	ed 91       	ld	r30, X+
    22d0:	fc 91       	ld	r31, X
    22d2:	02 80       	ldd	r0, Z+2	; 0x02
    22d4:	f3 81       	ldd	r31, Z+3	; 0x03
    22d6:	e0 2d       	mov	r30, r0
    22d8:	19 94       	eijmp

000022da <_ZN5Print5printEPKc>:
    22da:	dc cf       	rjmp	.-72     	; 0x2294 <_ZN5Print5writeEPKc>

000022dc <_ZN5Print5printEc>:
    22dc:	dc 01       	movw	r26, r24
    22de:	ed 91       	ld	r30, X+
    22e0:	fc 91       	ld	r31, X
    22e2:	01 90       	ld	r0, Z+
    22e4:	f0 81       	ld	r31, Z
    22e6:	e0 2d       	mov	r30, r0
    22e8:	19 94       	eijmp

000022ea <_ZN5Print7printlnEv>:
    22ea:	67 ef       	ldi	r22, 0xF7	; 247
    22ec:	72 e0       	ldi	r23, 0x02	; 2
    22ee:	d2 cf       	rjmp	.-92     	; 0x2294 <_ZN5Print5writeEPKc>

000022f0 <_ZN5Print7printlnERK6String>:
    22f0:	0f 93       	push	r16
    22f2:	1f 93       	push	r17
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	ec 01       	movw	r28, r24
    22fa:	e1 df       	rcall	.-62     	; 0x22be <_ZN5Print5printERK6String>
    22fc:	8c 01       	movw	r16, r24
    22fe:	ce 01       	movw	r24, r28
    2300:	f4 df       	rcall	.-24     	; 0x22ea <_ZN5Print7printlnEv>
    2302:	80 0f       	add	r24, r16
    2304:	91 1f       	adc	r25, r17
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	1f 91       	pop	r17
    230c:	0f 91       	pop	r16
    230e:	08 95       	ret

00002310 <_ZN5Print7printlnEPKc>:
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	ec 01       	movw	r28, r24
    231a:	bc df       	rcall	.-136    	; 0x2294 <_ZN5Print5writeEPKc>
    231c:	8c 01       	movw	r16, r24
    231e:	ce 01       	movw	r24, r28
    2320:	e4 df       	rcall	.-56     	; 0x22ea <_ZN5Print7printlnEv>
    2322:	80 0f       	add	r24, r16
    2324:	91 1f       	adc	r25, r17
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	08 95       	ret

00002330 <_ZN5Print11printNumberEmh>:
    2330:	8f 92       	push	r8
    2332:	9f 92       	push	r9
    2334:	af 92       	push	r10
    2336:	bf 92       	push	r11
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	a1 97       	sbiw	r28, 0x21	; 33
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	7c 01       	movw	r14, r24
    2356:	fa 01       	movw	r30, r20
    2358:	cb 01       	movw	r24, r22
    235a:	19 a2       	std	Y+33, r1	; 0x21
    235c:	22 30       	cpi	r18, 0x02	; 2
    235e:	08 f4       	brcc	.+2      	; 0x2362 <_ZN5Print11printNumberEmh+0x32>
    2360:	2a e0       	ldi	r18, 0x0A	; 10
    2362:	8e 01       	movw	r16, r28
    2364:	0f 5d       	subi	r16, 0xDF	; 223
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	82 2e       	mov	r8, r18
    236a:	91 2c       	mov	r9, r1
    236c:	a1 2c       	mov	r10, r1
    236e:	b1 2c       	mov	r11, r1
    2370:	bf 01       	movw	r22, r30
    2372:	a5 01       	movw	r20, r10
    2374:	94 01       	movw	r18, r8
    2376:	22 d7       	rcall	.+3652   	; 0x31bc <__udivmodsi4>
    2378:	f9 01       	movw	r30, r18
    237a:	ca 01       	movw	r24, r20
    237c:	01 50       	subi	r16, 0x01	; 1
    237e:	11 09       	sbc	r17, r1
    2380:	6a 30       	cpi	r22, 0x0A	; 10
    2382:	10 f4       	brcc	.+4      	; 0x2388 <_ZN5Print11printNumberEmh+0x58>
    2384:	60 5d       	subi	r22, 0xD0	; 208
    2386:	01 c0       	rjmp	.+2      	; 0x238a <_ZN5Print11printNumberEmh+0x5a>
    2388:	69 5c       	subi	r22, 0xC9	; 201
    238a:	d8 01       	movw	r26, r16
    238c:	6c 93       	st	X, r22
    238e:	23 2b       	or	r18, r19
    2390:	24 2b       	or	r18, r20
    2392:	25 2b       	or	r18, r21
    2394:	69 f7       	brne	.-38     	; 0x2370 <_ZN5Print11printNumberEmh+0x40>
    2396:	b8 01       	movw	r22, r16
    2398:	c7 01       	movw	r24, r14
    239a:	7c df       	rcall	.-264    	; 0x2294 <_ZN5Print5writeEPKc>
    239c:	a1 96       	adiw	r28, 0x21	; 33
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	bf 90       	pop	r11
    23b6:	af 90       	pop	r10
    23b8:	9f 90       	pop	r9
    23ba:	8f 90       	pop	r8
    23bc:	08 95       	ret

000023be <_ZN5Print5printEmi>:
    23be:	21 15       	cp	r18, r1
    23c0:	31 05       	cpc	r19, r1
    23c2:	41 f4       	brne	.+16     	; 0x23d4 <_ZN5Print5printEmi+0x16>
    23c4:	dc 01       	movw	r26, r24
    23c6:	ed 91       	ld	r30, X+
    23c8:	fc 91       	ld	r31, X
    23ca:	01 90       	ld	r0, Z+
    23cc:	f0 81       	ld	r31, Z
    23ce:	e0 2d       	mov	r30, r0
    23d0:	64 2f       	mov	r22, r20
    23d2:	19 94       	eijmp
    23d4:	ad cf       	rjmp	.-166    	; 0x2330 <_ZN5Print11printNumberEmh>

000023d6 <_ZN5Print5printEhi>:
    23d6:	9a 01       	movw	r18, r20
    23d8:	46 2f       	mov	r20, r22
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	ee cf       	rjmp	.-36     	; 0x23be <_ZN5Print5printEmi>

000023e2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    23e2:	cf 92       	push	r12
    23e4:	df 92       	push	r13
    23e6:	ef 92       	push	r14
    23e8:	ff 92       	push	r15
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
  if (base == 0) {
    23f2:	21 15       	cp	r18, r1
    23f4:	31 05       	cpc	r19, r1
    23f6:	81 f4       	brne	.+32     	; 0x2418 <_ZN5Print5printEli+0x36>
    return write(n);
    23f8:	dc 01       	movw	r26, r24
    23fa:	ed 91       	ld	r30, X+
    23fc:	fc 91       	ld	r31, X
    23fe:	01 90       	ld	r0, Z+
    2400:	f0 81       	ld	r31, Z
    2402:	e0 2d       	mov	r30, r0
    2404:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	ff 90       	pop	r15
    2410:	ef 90       	pop	r14
    2412:	df 90       	pop	r13
    2414:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2416:	19 94       	eijmp
  } else if (base == 10) {
    2418:	2a 30       	cpi	r18, 0x0A	; 10
    241a:	31 05       	cpc	r19, r1
    241c:	f1 f4       	brne	.+60     	; 0x245a <_ZN5Print5printEli+0x78>
    if (n < 0) {
    241e:	77 ff       	sbrs	r23, 7
    2420:	1b c0       	rjmp	.+54     	; 0x2458 <_ZN5Print5printEli+0x76>
    2422:	6a 01       	movw	r12, r20
    2424:	7b 01       	movw	r14, r22
    2426:	ec 01       	movw	r28, r24
      int t = print('-');
    2428:	6d e2       	ldi	r22, 0x2D	; 45
    242a:	58 df       	rcall	.-336    	; 0x22dc <_ZN5Print5printEc>
    242c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    242e:	44 27       	eor	r20, r20
    2430:	55 27       	eor	r21, r21
    2432:	ba 01       	movw	r22, r20
    2434:	4c 19       	sub	r20, r12
    2436:	5d 09       	sbc	r21, r13
    2438:	6e 09       	sbc	r22, r14
    243a:	7f 09       	sbc	r23, r15
    243c:	2a e0       	ldi	r18, 0x0A	; 10
    243e:	ce 01       	movw	r24, r28
    2440:	77 df       	rcall	.-274    	; 0x2330 <_ZN5Print11printNumberEmh>
    2442:	80 0f       	add	r24, r16
    2444:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2458:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	ff 90       	pop	r15
    2464:	ef 90       	pop	r14
    2466:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2468:	cf 90       	pop	r12
    246a:	62 cf       	rjmp	.-316    	; 0x2330 <_ZN5Print11printNumberEmh>

0000246c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    246c:	9a 01       	movw	r18, r20
  return print((long) n, base);
    246e:	ab 01       	movw	r20, r22
    2470:	77 0f       	add	r23, r23
    2472:	66 0b       	sbc	r22, r22
    2474:	77 0b       	sbc	r23, r23
    2476:	b5 cf       	rjmp	.-150    	; 0x23e2 <_ZN5Print5printEli>

00002478 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2482:	f4 df       	rcall	.-24     	; 0x246c <_ZN5Print5printEii>
    2484:	8c 01       	movw	r16, r24
  n += println();
    2486:	ce 01       	movw	r24, r28
    2488:	30 df       	rcall	.-416    	; 0x22ea <_ZN5Print7printlnEv>
  return n;
}
    248a:	80 0f       	add	r24, r16
    248c:	91 1f       	adc	r25, r17
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	08 95       	ret

00002498 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2498:	1f 92       	push	r1
    249a:	0f 92       	push	r0
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	0f 92       	push	r0
    24a0:	11 24       	eor	r1, r1
    24a2:	2f 93       	push	r18
    24a4:	3f 93       	push	r19
    24a6:	8f 93       	push	r24
    24a8:	9f 93       	push	r25
    24aa:	af 93       	push	r26
    24ac:	bf 93       	push	r27
    24ae:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <timer0_millis>
    24b2:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <timer0_millis+0x1>
    24b6:	a0 91 c0 04 	lds	r26, 0x04C0	; 0x8004c0 <timer0_millis+0x2>
    24ba:	b0 91 c1 04 	lds	r27, 0x04C1	; 0x8004c1 <timer0_millis+0x3>
    24be:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <timer0_fract>
    24c2:	23 e0       	ldi	r18, 0x03	; 3
    24c4:	23 0f       	add	r18, r19
    24c6:	2d 37       	cpi	r18, 0x7D	; 125
    24c8:	20 f4       	brcc	.+8      	; 0x24d2 <__vector_23+0x3a>
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	a1 1d       	adc	r26, r1
    24ce:	b1 1d       	adc	r27, r1
    24d0:	05 c0       	rjmp	.+10     	; 0x24dc <__vector_23+0x44>
    24d2:	26 e8       	ldi	r18, 0x86	; 134
    24d4:	23 0f       	add	r18, r19
    24d6:	02 96       	adiw	r24, 0x02	; 2
    24d8:	a1 1d       	adc	r26, r1
    24da:	b1 1d       	adc	r27, r1
    24dc:	20 93 bd 04 	sts	0x04BD, r18	; 0x8004bd <timer0_fract>
    24e0:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <timer0_millis>
    24e4:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <timer0_millis+0x1>
    24e8:	a0 93 c0 04 	sts	0x04C0, r26	; 0x8004c0 <timer0_millis+0x2>
    24ec:	b0 93 c1 04 	sts	0x04C1, r27	; 0x8004c1 <timer0_millis+0x3>
    24f0:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <timer0_overflow_count>
    24f4:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <timer0_overflow_count+0x1>
    24f8:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <timer0_overflow_count+0x2>
    24fc:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <timer0_overflow_count+0x3>
    2500:	01 96       	adiw	r24, 0x01	; 1
    2502:	a1 1d       	adc	r26, r1
    2504:	b1 1d       	adc	r27, r1
    2506:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <timer0_overflow_count>
    250a:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <timer0_overflow_count+0x1>
    250e:	a0 93 c4 04 	sts	0x04C4, r26	; 0x8004c4 <timer0_overflow_count+0x2>
    2512:	b0 93 c5 04 	sts	0x04C5, r27	; 0x8004c5 <timer0_overflow_count+0x3>
    2516:	bf 91       	pop	r27
    2518:	af 91       	pop	r26
    251a:	9f 91       	pop	r25
    251c:	8f 91       	pop	r24
    251e:	3f 91       	pop	r19
    2520:	2f 91       	pop	r18
    2522:	0f 90       	pop	r0
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	0f 90       	pop	r0
    2528:	1f 90       	pop	r1
    252a:	18 95       	reti

0000252c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    252c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    252e:	f8 94       	cli
	m = timer0_overflow_count;
    2530:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <timer0_overflow_count>
    2534:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <timer0_overflow_count+0x1>
    2538:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <timer0_overflow_count+0x2>
    253c:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2540:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2542:	a8 9b       	sbis	0x15, 0	; 21
    2544:	05 c0       	rjmp	.+10     	; 0x2550 <micros+0x24>
    2546:	2f 3f       	cpi	r18, 0xFF	; 255
    2548:	19 f0       	breq	.+6      	; 0x2550 <micros+0x24>
		m++;
    254a:	01 96       	adiw	r24, 0x01	; 1
    254c:	a1 1d       	adc	r26, r1
    254e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2550:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2552:	ba 2f       	mov	r27, r26
    2554:	a9 2f       	mov	r26, r25
    2556:	98 2f       	mov	r25, r24
    2558:	88 27       	eor	r24, r24
    255a:	82 0f       	add	r24, r18
    255c:	91 1d       	adc	r25, r1
    255e:	a1 1d       	adc	r26, r1
    2560:	b1 1d       	adc	r27, r1
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	42 e0       	ldi	r20, 0x02	; 2
    2568:	66 0f       	add	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	88 1f       	adc	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	4a 95       	dec	r20
    2572:	d1 f7       	brne	.-12     	; 0x2568 <micros+0x3c>
}
    2574:	08 95       	ret

00002576 <delay>:

void delay(unsigned long ms)
{
    2576:	8f 92       	push	r8
    2578:	9f 92       	push	r9
    257a:	af 92       	push	r10
    257c:	bf 92       	push	r11
    257e:	cf 92       	push	r12
    2580:	df 92       	push	r13
    2582:	ef 92       	push	r14
    2584:	ff 92       	push	r15
    2586:	6b 01       	movw	r12, r22
    2588:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    258a:	d0 df       	rcall	.-96     	; 0x252c <micros>
    258c:	4b 01       	movw	r8, r22
    258e:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2590:	c1 14       	cp	r12, r1
    2592:	d1 04       	cpc	r13, r1
    2594:	e1 04       	cpc	r14, r1
    2596:	f1 04       	cpc	r15, r1
		yield();
    2598:	f1 f0       	breq	.+60     	; 0x25d6 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    259a:	2d d4       	rcall	.+2138   	; 0x2df6 <yield>
    259c:	c7 df       	rcall	.-114    	; 0x252c <micros>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	88 19       	sub	r24, r8
    25a4:	99 09       	sbc	r25, r9
    25a6:	aa 09       	sbc	r26, r10
    25a8:	bb 09       	sbc	r27, r11
    25aa:	88 3e       	cpi	r24, 0xE8	; 232
    25ac:	93 40       	sbci	r25, 0x03	; 3
    25ae:	a1 05       	cpc	r26, r1
    25b0:	b1 05       	cpc	r27, r1
    25b2:	70 f3       	brcs	.-36     	; 0x2590 <delay+0x1a>
			ms--;
    25b4:	21 e0       	ldi	r18, 0x01	; 1
    25b6:	c2 1a       	sub	r12, r18
    25b8:	d1 08       	sbc	r13, r1
    25ba:	e1 08       	sbc	r14, r1
    25bc:	f1 08       	sbc	r15, r1
			start += 1000;
    25be:	88 ee       	ldi	r24, 0xE8	; 232
    25c0:	88 0e       	add	r8, r24
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	98 1e       	adc	r9, r24
    25c6:	a1 1c       	adc	r10, r1
    25c8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    25ca:	c1 14       	cp	r12, r1
    25cc:	d1 04       	cpc	r13, r1
    25ce:	e1 04       	cpc	r14, r1
    25d0:	f1 04       	cpc	r15, r1
    25d2:	21 f7       	brne	.-56     	; 0x259c <delay+0x26>
    25d4:	dd cf       	rjmp	.-70     	; 0x2590 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	cf 90       	pop	r12
    25de:	bf 90       	pop	r11
    25e0:	af 90       	pop	r10
    25e2:	9f 90       	pop	r9
    25e4:	8f 90       	pop	r8
    25e6:	08 95       	ret

000025e8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    25e8:	82 30       	cpi	r24, 0x02	; 2
    25ea:	91 05       	cpc	r25, r1
    25ec:	38 f0       	brcs	.+14     	; 0x25fc <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    25f6:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <delayMicroseconds+0x10>
    25fc:	08 95       	ret

000025fe <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    25fe:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2600:	84 b5       	in	r24, 0x24	; 36
    2602:	82 60       	ori	r24, 0x02	; 2
    2604:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2606:	84 b5       	in	r24, 0x24	; 36
    2608:	81 60       	ori	r24, 0x01	; 1
    260a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    260c:	85 b5       	in	r24, 0x25	; 37
    260e:	82 60       	ori	r24, 0x02	; 2
    2610:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2612:	85 b5       	in	r24, 0x25	; 37
    2614:	81 60       	ori	r24, 0x01	; 1
    2616:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2618:	ee e6       	ldi	r30, 0x6E	; 110
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	81 60       	ori	r24, 0x01	; 1
    2620:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2622:	e1 e8       	ldi	r30, 0x81	; 129
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2628:	80 81       	ld	r24, Z
    262a:	82 60       	ori	r24, 0x02	; 2
    262c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    262e:	80 81       	ld	r24, Z
    2630:	81 60       	ori	r24, 0x01	; 1
    2632:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2634:	e0 e8       	ldi	r30, 0x80	; 128
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	81 60       	ori	r24, 0x01	; 1
    263c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    263e:	e1 eb       	ldi	r30, 0xB1	; 177
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	84 60       	ori	r24, 0x04	; 4
    2646:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2648:	e0 eb       	ldi	r30, 0xB0	; 176
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	81 60       	ori	r24, 0x01	; 1
    2650:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2652:	e1 e9       	ldi	r30, 0x91	; 145
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	82 60       	ori	r24, 0x02	; 2
    265a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    265c:	80 81       	ld	r24, Z
    265e:	81 60       	ori	r24, 0x01	; 1
    2660:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2662:	e0 e9       	ldi	r30, 0x90	; 144
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	81 60       	ori	r24, 0x01	; 1
    266a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    266c:	e1 ea       	ldi	r30, 0xA1	; 161
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	82 60       	ori	r24, 0x02	; 2
    2674:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2676:	80 81       	ld	r24, Z
    2678:	81 60       	ori	r24, 0x01	; 1
    267a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    267c:	e0 ea       	ldi	r30, 0xA0	; 160
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	81 60       	ori	r24, 0x01	; 1
    2684:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2686:	e1 e2       	ldi	r30, 0x21	; 33
    2688:	f1 e0       	ldi	r31, 0x01	; 1
    268a:	80 81       	ld	r24, Z
    268c:	82 60       	ori	r24, 0x02	; 2
    268e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2690:	80 81       	ld	r24, Z
    2692:	81 60       	ori	r24, 0x01	; 1
    2694:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2696:	e0 e2       	ldi	r30, 0x20	; 32
    2698:	f1 e0       	ldi	r31, 0x01	; 1
    269a:	80 81       	ld	r24, Z
    269c:	81 60       	ori	r24, 0x01	; 1
    269e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    26a0:	ea e7       	ldi	r30, 0x7A	; 122
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	84 60       	ori	r24, 0x04	; 4
    26a8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    26aa:	80 81       	ld	r24, Z
    26ac:	82 60       	ori	r24, 0x02	; 2
    26ae:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    26b0:	80 81       	ld	r24, Z
    26b2:	81 60       	ori	r24, 0x01	; 1
    26b4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    26b6:	80 81       	ld	r24, Z
    26b8:	80 68       	ori	r24, 0x80	; 128
    26ba:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    26bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    26c0:	08 95       	ret

000026c2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	fc 01       	movw	r30, r24
    26c6:	31 97       	sbiw	r30, 0x01	; 1
    26c8:	e2 31       	cpi	r30, 0x12	; 18
    26ca:	f1 05       	cpc	r31, r1
    26cc:	08 f0       	brcs	.+2      	; 0x26d0 <turnOffPWM+0xe>
    26ce:	4d c0       	rjmp	.+154    	; 0x276a <turnOffPWM+0xa8>
    26d0:	88 27       	eor	r24, r24
    26d2:	ed 54       	subi	r30, 0x4D	; 77
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	8f 4f       	sbci	r24, 0xFF	; 255
    26d8:	93 c5       	rjmp	.+2854   	; 0x3200 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    26da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    26de:	8f 77       	andi	r24, 0x7F	; 127
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    26e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    26e6:	8f 7d       	andi	r24, 0xDF	; 223
    26e8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    26ec:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    26ee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    26f2:	87 7f       	andi	r24, 0xF7	; 247
    26f4:	f9 cf       	rjmp	.-14     	; 0x26e8 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    26f6:	84 b5       	in	r24, 0x24	; 36
    26f8:	8f 77       	andi	r24, 0x7F	; 127
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    26fc:	84 b5       	in	r24, 0x24	; 36
    26fe:	8f 7d       	andi	r24, 0xDF	; 223
    2700:	84 bd       	out	0x24, r24	; 36
    2702:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2704:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2708:	8f 77       	andi	r24, 0x7F	; 127
    270a:	03 c0       	rjmp	.+6      	; 0x2712 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    270c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2710:	8f 7d       	andi	r24, 0xDF	; 223
    2712:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2716:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2718:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    271c:	8f 77       	andi	r24, 0x7F	; 127
    271e:	07 c0       	rjmp	.+14     	; 0x272e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2720:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2724:	8f 7d       	andi	r24, 0xDF	; 223
    2726:	03 c0       	rjmp	.+6      	; 0x272e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2728:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    272c:	87 7f       	andi	r24, 0xF7	; 247
    272e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2732:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2734:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2738:	8f 77       	andi	r24, 0x7F	; 127
    273a:	07 c0       	rjmp	.+14     	; 0x274a <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    273c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2740:	8f 7d       	andi	r24, 0xDF	; 223
    2742:	03 c0       	rjmp	.+6      	; 0x274a <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2744:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2748:	87 7f       	andi	r24, 0xF7	; 247
    274a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    274e:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2750:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2754:	8f 77       	andi	r24, 0x7F	; 127
    2756:	07 c0       	rjmp	.+14     	; 0x2766 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2758:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    275c:	8f 7d       	andi	r24, 0xDF	; 223
    275e:	03 c0       	rjmp	.+6      	; 0x2766 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2760:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2764:	87 7f       	andi	r24, 0xF7	; 247
    2766:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    276a:	08 95       	ret

0000276c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	fc 01       	movw	r30, r24
    2774:	e0 53       	subi	r30, 0x30	; 48
    2776:	fe 4f       	sbci	r31, 0xFE	; 254
    2778:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    277a:	fc 01       	movw	r30, r24
    277c:	ea 5e       	subi	r30, 0xEA	; 234
    277e:	fd 4f       	sbci	r31, 0xFD	; 253
    2780:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2782:	88 23       	and	r24, r24
    2784:	61 f1       	breq	.+88     	; 0x27de <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	fc 01       	movw	r30, r24
    278e:	ea 58       	subi	r30, 0x8A	; 138
    2790:	fd 4f       	sbci	r31, 0xFD	; 253
    2792:	c5 91       	lpm	r28, Z+
    2794:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2796:	fc 01       	movw	r30, r24
    2798:	e4 5a       	subi	r30, 0xA4	; 164
    279a:	fd 4f       	sbci	r31, 0xFD	; 253
    279c:	a5 91       	lpm	r26, Z+
    279e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    27a0:	61 11       	cpse	r22, r1
    27a2:	09 c0       	rjmp	.+18     	; 0x27b6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    27a4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    27a6:	f8 94       	cli
		*reg &= ~bit;
    27a8:	88 81       	ld	r24, Y
    27aa:	20 95       	com	r18
    27ac:	82 23       	and	r24, r18
    27ae:	88 83       	st	Y, r24
		*out &= ~bit;
    27b0:	ec 91       	ld	r30, X
    27b2:	2e 23       	and	r18, r30
    27b4:	0b c0       	rjmp	.+22     	; 0x27cc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    27b6:	62 30       	cpi	r22, 0x02	; 2
    27b8:	61 f4       	brne	.+24     	; 0x27d2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    27ba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    27bc:	f8 94       	cli
		*reg &= ~bit;
    27be:	88 81       	ld	r24, Y
    27c0:	32 2f       	mov	r19, r18
    27c2:	30 95       	com	r19
    27c4:	83 23       	and	r24, r19
    27c6:	88 83       	st	Y, r24
		*out |= bit;
    27c8:	ec 91       	ld	r30, X
    27ca:	2e 2b       	or	r18, r30
    27cc:	2c 93       	st	X, r18
		SREG = oldSREG;
    27ce:	9f bf       	out	0x3f, r25	; 63
    27d0:	06 c0       	rjmp	.+12     	; 0x27de <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    27d2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    27d4:	f8 94       	cli
		*reg |= bit;
    27d6:	e8 81       	ld	r30, Y
    27d8:	2e 2b       	or	r18, r30
    27da:	28 83       	st	Y, r18
		SREG = oldSREG;
    27dc:	8f bf       	out	0x3f, r24	; 63
	}
}
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	08 95       	ret

000027e4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	f9 01       	movw	r30, r18
    27f0:	e6 57       	subi	r30, 0x76	; 118
    27f2:	fe 4f       	sbci	r31, 0xFE	; 254
    27f4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    27f6:	f9 01       	movw	r30, r18
    27f8:	e0 53       	subi	r30, 0x30	; 48
    27fa:	fe 4f       	sbci	r31, 0xFE	; 254
    27fc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    27fe:	f9 01       	movw	r30, r18
    2800:	ea 5e       	subi	r30, 0xEA	; 234
    2802:	fd 4f       	sbci	r31, 0xFD	; 253
    2804:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2806:	cc 23       	and	r28, r28
    2808:	b9 f0       	breq	.+46     	; 0x2838 <digitalWrite+0x54>
    280a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    280c:	81 11       	cpse	r24, r1
    280e:	59 df       	rcall	.-334    	; 0x26c2 <turnOffPWM>

	out = portOutputRegister(port);
    2810:	ec 2f       	mov	r30, r28
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	ee 0f       	add	r30, r30
    2816:	ff 1f       	adc	r31, r31
    2818:	e4 5a       	subi	r30, 0xA4	; 164
    281a:	fd 4f       	sbci	r31, 0xFD	; 253
    281c:	a5 91       	lpm	r26, Z+
    281e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2820:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2822:	f8 94       	cli

	if (val == LOW) {
    2824:	11 11       	cpse	r17, r1
    2826:	04 c0       	rjmp	.+8      	; 0x2830 <digitalWrite+0x4c>
		*out &= ~bit;
    2828:	8c 91       	ld	r24, X
    282a:	d0 95       	com	r29
    282c:	d8 23       	and	r29, r24
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <digitalWrite+0x50>
	} else {
		*out |= bit;
    2830:	ec 91       	ld	r30, X
    2832:	de 2b       	or	r29, r30
    2834:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2836:	9f bf       	out	0x3f, r25	; 63
}
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	08 95       	ret

00002840 <_ZN6StringD1Ev>:
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    2840:	fc 01       	movw	r30, r24
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	7c c5       	rjmp	.+2808   	; 0x3340 <free>

00002848 <_ZN6String10invalidateEv>:
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	ec 01       	movw	r28, r24
    284e:	88 81       	ld	r24, Y
    2850:	99 81       	ldd	r25, Y+1	; 0x01
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	09 f0       	breq	.+2      	; 0x2858 <_ZN6String10invalidateEv+0x10>
    2856:	74 d5       	rcall	.+2792   	; 0x3340 <free>
    2858:	19 82       	std	Y+1, r1	; 0x01
    285a:	18 82       	st	Y, r1
    285c:	1d 82       	std	Y+5, r1	; 0x05
    285e:	1c 82       	std	Y+4, r1	; 0x04
    2860:	1b 82       	std	Y+3, r1	; 0x03
    2862:	1a 82       	std	Y+2, r1	; 0x02
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	08 95       	ret

0000286a <_ZN6String12changeBufferEj>:
    286a:	0f 93       	push	r16
    286c:	1f 93       	push	r17
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
    2872:	ec 01       	movw	r28, r24
    2874:	8b 01       	movw	r16, r22
    2876:	6f 5f       	subi	r22, 0xFF	; 255
    2878:	7f 4f       	sbci	r23, 0xFF	; 255
    287a:	88 81       	ld	r24, Y
    287c:	99 81       	ldd	r25, Y+1	; 0x01
    287e:	e9 d5       	rcall	.+3026   	; 0x3452 <realloc>
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	31 f0       	breq	.+12     	; 0x2890 <_ZN6String12changeBufferEj+0x26>
    2884:	99 83       	std	Y+1, r25	; 0x01
    2886:	88 83       	st	Y, r24
    2888:	1b 83       	std	Y+3, r17	; 0x03
    288a:	0a 83       	std	Y+2, r16	; 0x02
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	01 c0       	rjmp	.+2      	; 0x2892 <_ZN6String12changeBufferEj+0x28>
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	08 95       	ret

0000289c <_ZN6String7reserveEj>:
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	ec 01       	movw	r28, r24
    28a2:	88 81       	ld	r24, Y
    28a4:	99 81       	ldd	r25, Y+1	; 0x01
    28a6:	89 2b       	or	r24, r25
    28a8:	29 f0       	breq	.+10     	; 0x28b4 <_ZN6String7reserveEj+0x18>
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	9b 81       	ldd	r25, Y+3	; 0x03
    28ae:	86 17       	cp	r24, r22
    28b0:	97 07       	cpc	r25, r23
    28b2:	58 f4       	brcc	.+22     	; 0x28ca <_ZN6String7reserveEj+0x2e>
    28b4:	ce 01       	movw	r24, r28
    28b6:	d9 df       	rcall	.-78     	; 0x286a <_ZN6String12changeBufferEj>
    28b8:	88 23       	and	r24, r24
    28ba:	41 f0       	breq	.+16     	; 0x28cc <_ZN6String7reserveEj+0x30>
    28bc:	8c 81       	ldd	r24, Y+4	; 0x04
    28be:	9d 81       	ldd	r25, Y+5	; 0x05
    28c0:	89 2b       	or	r24, r25
    28c2:	19 f4       	brne	.+6      	; 0x28ca <_ZN6String7reserveEj+0x2e>
    28c4:	e8 81       	ld	r30, Y
    28c6:	f9 81       	ldd	r31, Y+1	; 0x01
    28c8:	10 82       	st	Z, r1
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	08 95       	ret

000028d2 <_ZN6String4copyEPKcj>:
    28d2:	ef 92       	push	r14
    28d4:	ff 92       	push	r15
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	ec 01       	movw	r28, r24
    28e0:	7b 01       	movw	r14, r22
    28e2:	8a 01       	movw	r16, r20
    28e4:	ba 01       	movw	r22, r20
    28e6:	da df       	rcall	.-76     	; 0x289c <_ZN6String7reserveEj>
    28e8:	81 11       	cpse	r24, r1
    28ea:	03 c0       	rjmp	.+6      	; 0x28f2 <_ZN6String4copyEPKcj+0x20>
    28ec:	ce 01       	movw	r24, r28
    28ee:	ac df       	rcall	.-168    	; 0x2848 <_ZN6String10invalidateEv>
    28f0:	06 c0       	rjmp	.+12     	; 0x28fe <_ZN6String4copyEPKcj+0x2c>
    28f2:	1d 83       	std	Y+5, r17	; 0x05
    28f4:	0c 83       	std	Y+4, r16	; 0x04
    28f6:	b7 01       	movw	r22, r14
    28f8:	88 81       	ld	r24, Y
    28fa:	99 81       	ldd	r25, Y+1	; 0x01
    28fc:	93 d6       	rcall	.+3366   	; 0x3624 <strcpy>
    28fe:	ce 01       	movw	r24, r28
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	08 95       	ret

0000290e <_ZN6StringC1EPKc>:
    290e:	fc 01       	movw	r30, r24
    2910:	11 82       	std	Z+1, r1	; 0x01
    2912:	10 82       	st	Z, r1
    2914:	13 82       	std	Z+3, r1	; 0x03
    2916:	12 82       	std	Z+2, r1	; 0x02
    2918:	15 82       	std	Z+5, r1	; 0x05
    291a:	14 82       	std	Z+4, r1	; 0x04
    291c:	61 15       	cp	r22, r1
    291e:	71 05       	cpc	r23, r1
    2920:	49 f0       	breq	.+18     	; 0x2934 <_ZN6StringC1EPKc+0x26>
    2922:	fb 01       	movw	r30, r22
    2924:	01 90       	ld	r0, Z+
    2926:	00 20       	and	r0, r0
    2928:	e9 f7       	brne	.-6      	; 0x2924 <_ZN6StringC1EPKc+0x16>
    292a:	31 97       	sbiw	r30, 0x01	; 1
    292c:	af 01       	movw	r20, r30
    292e:	46 1b       	sub	r20, r22
    2930:	57 0b       	sbc	r21, r23
    2932:	cf cf       	rjmp	.-98     	; 0x28d2 <_ZN6String4copyEPKcj>
    2934:	08 95       	ret

00002936 <_ZN6StringaSERKS_>:
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	ec 01       	movw	r28, r24
    293c:	fb 01       	movw	r30, r22
    293e:	86 17       	cp	r24, r22
    2940:	97 07       	cpc	r25, r23
    2942:	51 f0       	breq	.+20     	; 0x2958 <_ZN6StringaSERKS_+0x22>
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	61 15       	cp	r22, r1
    294a:	71 05       	cpc	r23, r1
    294c:	21 f0       	breq	.+8      	; 0x2956 <_ZN6StringaSERKS_+0x20>
    294e:	44 81       	ldd	r20, Z+4	; 0x04
    2950:	55 81       	ldd	r21, Z+5	; 0x05
    2952:	bf df       	rcall	.-130    	; 0x28d2 <_ZN6String4copyEPKcj>
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <_ZN6StringaSERKS_+0x22>
    2956:	78 df       	rcall	.-272    	; 0x2848 <_ZN6String10invalidateEv>
    2958:	ce 01       	movw	r24, r28
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	08 95       	ret

00002960 <_ZN6StringC1ERKS_>:
    2960:	fc 01       	movw	r30, r24
    2962:	11 82       	std	Z+1, r1	; 0x01
    2964:	10 82       	st	Z, r1
    2966:	13 82       	std	Z+3, r1	; 0x03
    2968:	12 82       	std	Z+2, r1	; 0x02
    296a:	15 82       	std	Z+5, r1	; 0x05
    296c:	14 82       	std	Z+4, r1	; 0x04
    296e:	e3 cf       	rjmp	.-58     	; 0x2936 <_ZN6StringaSERKS_>

00002970 <_ZN6String6concatEPKcj>:
    2970:	ef 92       	push	r14
    2972:	ff 92       	push	r15
    2974:	0f 93       	push	r16
    2976:	1f 93       	push	r17
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	61 15       	cp	r22, r1
    297e:	71 05       	cpc	r23, r1
    2980:	11 f4       	brne	.+4      	; 0x2986 <_ZN6String6concatEPKcj+0x16>
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	1a c0       	rjmp	.+52     	; 0x29ba <_ZN6String6concatEPKcj+0x4a>
    2986:	41 15       	cp	r20, r1
    2988:	51 05       	cpc	r21, r1
    298a:	b1 f0       	breq	.+44     	; 0x29b8 <_ZN6String6concatEPKcj+0x48>
    298c:	7b 01       	movw	r14, r22
    298e:	ec 01       	movw	r28, r24
    2990:	8c 81       	ldd	r24, Y+4	; 0x04
    2992:	9d 81       	ldd	r25, Y+5	; 0x05
    2994:	8a 01       	movw	r16, r20
    2996:	08 0f       	add	r16, r24
    2998:	19 1f       	adc	r17, r25
    299a:	b8 01       	movw	r22, r16
    299c:	ce 01       	movw	r24, r28
    299e:	7e df       	rcall	.-260    	; 0x289c <_ZN6String7reserveEj>
    29a0:	88 23       	and	r24, r24
    29a2:	79 f3       	breq	.-34     	; 0x2982 <_ZN6String6concatEPKcj+0x12>
    29a4:	28 81       	ld	r18, Y
    29a6:	39 81       	ldd	r19, Y+1	; 0x01
    29a8:	8c 81       	ldd	r24, Y+4	; 0x04
    29aa:	9d 81       	ldd	r25, Y+5	; 0x05
    29ac:	b7 01       	movw	r22, r14
    29ae:	82 0f       	add	r24, r18
    29b0:	93 1f       	adc	r25, r19
    29b2:	38 d6       	rcall	.+3184   	; 0x3624 <strcpy>
    29b4:	1d 83       	std	Y+5, r17	; 0x05
    29b6:	0c 83       	std	Y+4, r16	; 0x04
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	ff 90       	pop	r15
    29c4:	ef 90       	pop	r14
    29c6:	08 95       	ret

000029c8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    29ce:	fb 01       	movw	r30, r22
    29d0:	44 81       	ldd	r20, Z+4	; 0x04
    29d2:	55 81       	ldd	r21, Z+5	; 0x05
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	cb df       	rcall	.-106    	; 0x2970 <_ZN6String6concatEPKcj>
    29da:	81 11       	cpse	r24, r1
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <_ZplRK15StringSumHelperRK6String+0x1a>
    29de:	ce 01       	movw	r24, r28
    29e0:	33 df       	rcall	.-410    	; 0x2848 <_ZN6String10invalidateEv>
	return a;
}
    29e2:	ce 01       	movw	r24, r28
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	08 95       	ret

000029ea <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    29f0:	61 15       	cp	r22, r1
    29f2:	71 05       	cpc	r23, r1
    29f4:	59 f0       	breq	.+22     	; 0x2a0c <_ZplRK15StringSumHelperPKc+0x22>
    29f6:	fb 01       	movw	r30, r22
    29f8:	01 90       	ld	r0, Z+
    29fa:	00 20       	and	r0, r0
    29fc:	e9 f7       	brne	.-6      	; 0x29f8 <_ZplRK15StringSumHelperPKc+0xe>
    29fe:	31 97       	sbiw	r30, 0x01	; 1
    2a00:	af 01       	movw	r20, r30
    2a02:	46 1b       	sub	r20, r22
    2a04:	57 0b       	sbc	r21, r23
    2a06:	b4 df       	rcall	.-152    	; 0x2970 <_ZN6String6concatEPKcj>
    2a08:	81 11       	cpse	r24, r1
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <_ZplRK15StringSumHelperPKc+0x26>
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	1c df       	rcall	.-456    	; 0x2848 <_ZN6String10invalidateEv>
	return a;
}
    2a10:	ce 01       	movw	r24, r28
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	08 95       	ret

00002a18 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    2a18:	fc 01       	movw	r30, r24
    2a1a:	13 82       	std	Z+3, r1	; 0x03
    2a1c:	12 82       	std	Z+2, r1	; 0x02
    2a1e:	8a e0       	ldi	r24, 0x0A	; 10
    2a20:	93 e0       	ldi	r25, 0x03	; 3
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
    2a26:	64 83       	std	Z+4, r22	; 0x04
    2a28:	41 87       	std	Z+9, r20	; 0x09
    2a2a:	22 87       	std	Z+10, r18	; 0x0a
    2a2c:	13 86       	std	Z+11, r1	; 0x0b
    2a2e:	08 95       	ret

00002a30 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2a30:	1f 93       	push	r17
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	ec 01       	movw	r28, r24
    2a38:	16 2f       	mov	r17, r22
    2a3a:	6c 81       	ldd	r22, Y+4	; 0x04
    2a3c:	86 ec       	ldi	r24, 0xC6	; 198
    2a3e:	94 e0       	ldi	r25, 0x04	; 4
    2a40:	b9 d1       	rcall	.+882    	; 0x2db4 <_ZN7TwoWire17beginTransmissionEh>
    2a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a44:	61 2b       	or	r22, r17
    2a46:	86 ec       	ldi	r24, 0xC6	; 198
    2a48:	94 e0       	ldi	r25, 0x04	; 4
    2a4a:	67 d1       	rcall	.+718    	; 0x2d1a <_ZN7TwoWire5writeEh>
    2a4c:	86 ec       	ldi	r24, 0xC6	; 198
    2a4e:	94 e0       	ldi	r25, 0x04	; 4
    2a50:	df 91       	pop	r29
    2a52:	cf 91       	pop	r28
    2a54:	1f 91       	pop	r17
    2a56:	ca c1       	rjmp	.+916    	; 0x2dec <_ZN7TwoWire15endTransmissionEv>

00002a58 <_ZN17LiquidCrystal_I2C9backlightEv>:
    2a58:	28 e0       	ldi	r18, 0x08	; 8
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	23 87       	std	Z+11, r18	; 0x0b
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	e7 cf       	rjmp	.-50     	; 0x2a30 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002a62 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2a62:	0f 93       	push	r16
    2a64:	1f 93       	push	r17
    2a66:	cf 93       	push	r28
    2a68:	8c 01       	movw	r16, r24
    2a6a:	c6 2f       	mov	r28, r22
    2a6c:	64 60       	ori	r22, 0x04	; 4
    2a6e:	e0 df       	rcall	.-64     	; 0x2a30 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	b9 dd       	rcall	.-1166   	; 0x25e8 <delayMicroseconds>
    2a76:	6c 2f       	mov	r22, r28
    2a78:	6b 7f       	andi	r22, 0xFB	; 251
    2a7a:	c8 01       	movw	r24, r16
    2a7c:	d9 df       	rcall	.-78     	; 0x2a30 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2a7e:	82 e3       	ldi	r24, 0x32	; 50
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	cf 91       	pop	r28
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	af cd       	rjmp	.-1186   	; 0x25e8 <delayMicroseconds>

00002a8a <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	ec 01       	movw	r28, r24
    2a92:	16 2f       	mov	r17, r22
    2a94:	cd df       	rcall	.-102    	; 0x2a30 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2a96:	61 2f       	mov	r22, r17
    2a98:	ce 01       	movw	r24, r28
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	e0 cf       	rjmp	.-64     	; 0x2a62 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002aa2 <_ZN17LiquidCrystal_I2C4sendEhh>:
    2aa2:	0f 93       	push	r16
    2aa4:	1f 93       	push	r17
    2aa6:	cf 93       	push	r28
    2aa8:	df 93       	push	r29
    2aaa:	8c 01       	movw	r16, r24
    2aac:	c6 2f       	mov	r28, r22
    2aae:	d4 2f       	mov	r29, r20
    2ab0:	60 7f       	andi	r22, 0xF0	; 240
    2ab2:	64 2b       	or	r22, r20
    2ab4:	ea df       	rcall	.-44     	; 0x2a8a <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2ab6:	80 e1       	ldi	r24, 0x10	; 16
    2ab8:	c8 9f       	mul	r28, r24
    2aba:	b0 01       	movw	r22, r0
    2abc:	11 24       	eor	r1, r1
    2abe:	6d 2b       	or	r22, r29
    2ac0:	c8 01       	movw	r24, r16
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	1f 91       	pop	r17
    2ac8:	0f 91       	pop	r16
    2aca:	df cf       	rjmp	.-66     	; 0x2a8a <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002acc <_ZN17LiquidCrystal_I2C7commandEh>:
    2acc:	40 e0       	ldi	r20, 0x00	; 0
    2ace:	e9 cf       	rjmp	.-46     	; 0x2aa2 <_ZN17LiquidCrystal_I2C4sendEhh>

00002ad0 <_ZN17LiquidCrystal_I2C5clearEv>:
    2ad0:	61 e0       	ldi	r22, 0x01	; 1
    2ad2:	fc df       	rcall	.-8      	; 0x2acc <_ZN17LiquidCrystal_I2C7commandEh>
    2ad4:	80 ed       	ldi	r24, 0xD0	; 208
    2ad6:	97 e0       	ldi	r25, 0x07	; 7
    2ad8:	87 cd       	rjmp	.-1266   	; 0x25e8 <delayMicroseconds>

00002ada <_ZN17LiquidCrystal_I2C4homeEv>:
    2ada:	62 e0       	ldi	r22, 0x02	; 2
    2adc:	f7 df       	rcall	.-18     	; 0x2acc <_ZN17LiquidCrystal_I2C7commandEh>
    2ade:	80 ed       	ldi	r24, 0xD0	; 208
    2ae0:	97 e0       	ldi	r25, 0x07	; 7
    2ae2:	82 cd       	rjmp	.-1276   	; 0x25e8 <delayMicroseconds>

00002ae4 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	28 97       	sbiw	r28, 0x08	; 8
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	9c 01       	movw	r18, r24
    2afa:	88 e0       	ldi	r24, 0x08	; 8
    2afc:	e8 e0       	ldi	r30, 0x08	; 8
    2afe:	f2 e0       	ldi	r31, 0x02	; 2
    2b00:	de 01       	movw	r26, r28
    2b02:	11 96       	adiw	r26, 0x01	; 1
    2b04:	01 90       	ld	r0, Z+
    2b06:	0d 92       	st	X+, r0
    2b08:	8a 95       	dec	r24
    2b0a:	e1 f7       	brne	.-8      	; 0x2b04 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2b0c:	f9 01       	movw	r30, r18
    2b0e:	80 85       	ldd	r24, Z+8	; 0x08
    2b10:	84 17       	cp	r24, r20
    2b12:	10 f4       	brcc	.+4      	; 0x2b18 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2b14:	4f ef       	ldi	r20, 0xFF	; 255
    2b16:	48 0f       	add	r20, r24
    2b18:	fe 01       	movw	r30, r28
    2b1a:	31 96       	adiw	r30, 0x01	; 1
    2b1c:	e4 0f       	add	r30, r20
    2b1e:	f1 1d       	adc	r31, r1
    2b20:	e4 0f       	add	r30, r20
    2b22:	f1 1d       	adc	r31, r1
    2b24:	90 81       	ld	r25, Z
    2b26:	69 0f       	add	r22, r25
    2b28:	60 68       	ori	r22, 0x80	; 128
    2b2a:	c9 01       	movw	r24, r18
    2b2c:	28 96       	adiw	r28, 0x08	; 8
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	c7 cf       	rjmp	.-114    	; 0x2acc <_ZN17LiquidCrystal_I2C7commandEh>

00002b3e <_ZN17LiquidCrystal_I2C7displayEv>:
    2b3e:	fc 01       	movw	r30, r24
    2b40:	66 81       	ldd	r22, Z+6	; 0x06
    2b42:	26 2f       	mov	r18, r22
    2b44:	24 60       	ori	r18, 0x04	; 4
    2b46:	26 83       	std	Z+6, r18	; 0x06
    2b48:	6c 60       	ori	r22, 0x0C	; 12
    2b4a:	c0 cf       	rjmp	.-128    	; 0x2acc <_ZN17LiquidCrystal_I2C7commandEh>

00002b4c <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    2b4c:	41 e0       	ldi	r20, 0x01	; 1
    2b4e:	a9 df       	rcall	.-174    	; 0x2aa2 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	08 95       	ret

00002b56 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2b5c:	42 30       	cpi	r20, 0x02	; 2
    2b5e:	18 f0       	brcs	.+6      	; 0x2b66 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2b60:	8d 81       	ldd	r24, Y+5	; 0x05
    2b62:	88 60       	ori	r24, 0x08	; 8
    2b64:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    2b66:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    2b68:	22 23       	and	r18, r18
    2b6a:	29 f0       	breq	.+10     	; 0x2b76 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    2b6c:	41 30       	cpi	r20, 0x01	; 1
    2b6e:	19 f4       	brne	.+6      	; 0x2b76 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	84 60       	ori	r24, 0x04	; 4
    2b74:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2b76:	62 e3       	ldi	r22, 0x32	; 50
    2b78:	70 e0       	ldi	r23, 0x00	; 0
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	fb dc       	rcall	.-1546   	; 0x2576 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b82:	ce 01       	movw	r24, r28
    2b84:	55 df       	rcall	.-342    	; 0x2a30 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    2b86:	68 ee       	ldi	r22, 0xE8	; 232
    2b88:	73 e0       	ldi	r23, 0x03	; 3
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	f3 dc       	rcall	.-1562   	; 0x2576 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2b90:	60 e3       	ldi	r22, 0x30	; 48
    2b92:	ce 01       	movw	r24, r28
    2b94:	7a df       	rcall	.-268    	; 0x2a8a <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2b96:	84 e9       	ldi	r24, 0x94	; 148
    2b98:	91 e1       	ldi	r25, 0x11	; 17
    2b9a:	26 dd       	rcall	.-1460   	; 0x25e8 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2b9c:	60 e3       	ldi	r22, 0x30	; 48
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	74 df       	rcall	.-280    	; 0x2a8a <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2ba2:	84 e9       	ldi	r24, 0x94	; 148
    2ba4:	91 e1       	ldi	r25, 0x11	; 17
    2ba6:	20 dd       	rcall	.-1472   	; 0x25e8 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2ba8:	60 e3       	ldi	r22, 0x30	; 48
    2baa:	ce 01       	movw	r24, r28
    2bac:	6e df       	rcall	.-292    	; 0x2a8a <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    2bae:	86 e9       	ldi	r24, 0x96	; 150
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	1a dd       	rcall	.-1484   	; 0x25e8 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2bb4:	60 e2       	ldi	r22, 0x20	; 32
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	68 df       	rcall	.-304    	; 0x2a8a <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2bba:	6d 81       	ldd	r22, Y+5	; 0x05
    2bbc:	60 62       	ori	r22, 0x20	; 32
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	85 df       	rcall	.-246    	; 0x2acc <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2bc2:	84 e0       	ldi	r24, 0x04	; 4
    2bc4:	8e 83       	std	Y+6, r24	; 0x06
	display();
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	ba df       	rcall	.-140    	; 0x2b3e <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2bca:	ce 01       	movw	r24, r28
    2bcc:	81 df       	rcall	.-254    	; 0x2ad0 <_ZN17LiquidCrystal_I2C5clearEv>
    2bce:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2bd0:	8f 83       	std	Y+7, r24	; 0x07
    2bd2:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	7a df       	rcall	.-268    	; 0x2acc <_ZN17LiquidCrystal_I2C7commandEh>
    2bd8:	ce 01       	movw	r24, r28
    2bda:	df 91       	pop	r29
	
	home();
    2bdc:	cf 91       	pop	r28
  
}
    2bde:	7d cf       	rjmp	.-262    	; 0x2ada <_ZN17LiquidCrystal_I2C4homeEv>

00002be0 <_ZN17LiquidCrystal_I2C9init_privEv>:
    2be0:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2be2:	df 93       	push	r29
    2be4:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    2be6:	86 ec       	ldi	r24, 0xC6	; 198
    2be8:	94 e0       	ldi	r25, 0x04	; 4
    2bea:	d5 d0       	rcall	.+426    	; 0x2d96 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2bec:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	4a 85       	ldd	r20, Y+10	; 0x0a
    2bf2:	69 85       	ldd	r22, Y+9	; 0x09
    2bf4:	ce 01       	movw	r24, r28
}
    2bf6:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2bf8:	cf 91       	pop	r28
    2bfa:	ad cf       	rjmp	.-166    	; 0x2b56 <_ZN17LiquidCrystal_I2C5beginEhhh>

00002bfc <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2bfc:	f1 cf       	rjmp	.-30     	; 0x2be0 <_ZN17LiquidCrystal_I2C9init_privEv>

00002bfe <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2bfe:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c08:	82 1b       	sub	r24, r18
    2c0a:	91 09       	sbc	r25, r1
    2c0c:	08 95       	ret

00002c0e <_ZN7TwoWire4readEv>:
    2c0e:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c12:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2c16:	98 17       	cp	r25, r24
    2c18:	50 f4       	brcc	.+20     	; 0x2c2e <_ZN7TwoWire4readEv+0x20>
    2c1a:	e9 2f       	mov	r30, r25
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	e4 50       	subi	r30, 0x04	; 4
    2c20:	fb 4f       	sbci	r31, 0xFB	; 251
    2c22:	20 81       	ld	r18, Z
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	9f 5f       	subi	r25, 0xFF	; 255
    2c28:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <_ZN7TwoWire4readEv+0x24>
    2c2e:	2f ef       	ldi	r18, 0xFF	; 255
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	c9 01       	movw	r24, r18
    2c34:	08 95       	ret

00002c36 <_ZN7TwoWire4peekEv>:
    2c36:	e0 91 fb 04 	lds	r30, 0x04FB	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c3a:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2c3e:	e8 17       	cp	r30, r24
    2c40:	30 f4       	brcc	.+12     	; 0x2c4e <_ZN7TwoWire4peekEv+0x18>
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	e4 50       	subi	r30, 0x04	; 4
    2c46:	fb 4f       	sbci	r31, 0xFB	; 251
    2c48:	80 81       	ld	r24, Z
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	08 95       	ret
    2c4e:	8f ef       	ldi	r24, 0xFF	; 255
    2c50:	9f ef       	ldi	r25, 0xFF	; 255
    2c52:	08 95       	ret

00002c54 <_ZN7TwoWire5flushEv>:
    2c54:	08 95       	ret

00002c56 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	ec 01       	movw	r28, r24
    2c5c:	e0 91 d2 04 	lds	r30, 0x04D2	; 0x8004d2 <_ZN7TwoWire14user_onReceiveE>
    2c60:	f0 91 d3 04 	lds	r31, 0x04D3	; 0x8004d3 <_ZN7TwoWire14user_onReceiveE+0x1>
    2c64:	30 97       	sbiw	r30, 0x00	; 0
    2c66:	f1 f0       	breq	.+60     	; 0x2ca4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2c68:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c6c:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2c70:	98 17       	cp	r25, r24
    2c72:	c0 f0       	brcs	.+48     	; 0x2ca4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	29 2f       	mov	r18, r25
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	26 17       	cp	r18, r22
    2c7c:	37 07       	cpc	r19, r23
    2c7e:	54 f4       	brge	.+20     	; 0x2c94 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2c80:	de 01       	movw	r26, r28
    2c82:	a2 0f       	add	r26, r18
    2c84:	b3 1f       	adc	r27, r19
    2c86:	4c 91       	ld	r20, X
    2c88:	d9 01       	movw	r26, r18
    2c8a:	a4 50       	subi	r26, 0x04	; 4
    2c8c:	bb 4f       	sbci	r27, 0xFB	; 251
    2c8e:	4c 93       	st	X, r20
    2c90:	9f 5f       	subi	r25, 0xFF	; 255
    2c92:	f1 cf       	rjmp	.-30     	; 0x2c76 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2c94:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c98:	60 93 fa 04 	sts	0x04FA, r22	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	19 94       	eijmp
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	08 95       	ret

00002caa <_ZN7TwoWire16onRequestServiceEv>:
    2caa:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <_ZN7TwoWire14user_onRequestE>
    2cae:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <_ZN7TwoWire14user_onRequestE+0x1>
    2cb2:	30 97       	sbiw	r30, 0x00	; 0
    2cb4:	29 f0       	breq	.+10     	; 0x2cc0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2cb6:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2cba:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2cbe:	19 94       	eijmp
    2cc0:	08 95       	ret

00002cc2 <_ZN7TwoWire5writeEPKhj>:
    2cc2:	cf 92       	push	r12
    2cc4:	df 92       	push	r13
    2cc6:	ef 92       	push	r14
    2cc8:	ff 92       	push	r15
    2cca:	0f 93       	push	r16
    2ccc:	1f 93       	push	r17
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	7c 01       	movw	r14, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	8a 01       	movw	r16, r20
    2cd8:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <_ZN7TwoWire12transmittingE>
    2cdc:	22 23       	and	r18, r18
    2cde:	89 f0       	breq	.+34     	; 0x2d02 <_ZN7TwoWire5writeEPKhj+0x40>
    2ce0:	eb 01       	movw	r28, r22
    2ce2:	6b 01       	movw	r12, r22
    2ce4:	c4 0e       	add	r12, r20
    2ce6:	d5 1e       	adc	r13, r21
    2ce8:	cc 15       	cp	r28, r12
    2cea:	dd 05       	cpc	r29, r13
    2cec:	61 f0       	breq	.+24     	; 0x2d06 <_ZN7TwoWire5writeEPKhj+0x44>
    2cee:	69 91       	ld	r22, Y+
    2cf0:	d7 01       	movw	r26, r14
    2cf2:	ed 91       	ld	r30, X+
    2cf4:	fc 91       	ld	r31, X
    2cf6:	01 90       	ld	r0, Z+
    2cf8:	f0 81       	ld	r31, Z
    2cfa:	e0 2d       	mov	r30, r0
    2cfc:	c7 01       	movw	r24, r14
    2cfe:	19 95       	eicall
    2d00:	f3 cf       	rjmp	.-26     	; 0x2ce8 <_ZN7TwoWire5writeEPKhj+0x26>
    2d02:	64 2f       	mov	r22, r20
    2d04:	eb d0       	rcall	.+470    	; 0x2edc <twi_transmit>
    2d06:	c8 01       	movw	r24, r16
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	1f 91       	pop	r17
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	df 90       	pop	r13
    2d16:	cf 90       	pop	r12
    2d18:	08 95       	ret

00002d1a <_ZN7TwoWire5writeEh>:
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	1f 92       	push	r1
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	69 83       	std	Y+1, r22	; 0x01
    2d26:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <_ZN7TwoWire12transmittingE>
    2d2a:	22 23       	and	r18, r18
    2d2c:	d1 f0       	breq	.+52     	; 0x2d62 <_ZN7TwoWire5writeEh+0x48>
    2d2e:	20 91 d7 04 	lds	r18, 0x04D7	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2d32:	20 32       	cpi	r18, 0x20	; 32
    2d34:	40 f0       	brcs	.+16     	; 0x2d46 <_ZN7TwoWire5writeEh+0x2c>
    2d36:	21 e0       	ldi	r18, 0x01	; 1
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	33 83       	std	Z+3, r19	; 0x03
    2d3e:	22 83       	std	Z+2, r18	; 0x02
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	14 c0       	rjmp	.+40     	; 0x2d6e <_ZN7TwoWire5writeEh+0x54>
    2d46:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2d4a:	e8 2f       	mov	r30, r24
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	e7 52       	subi	r30, 0x27	; 39
    2d50:	fb 4f       	sbci	r31, 0xFB	; 251
    2d52:	99 81       	ldd	r25, Y+1	; 0x01
    2d54:	90 83       	st	Z, r25
    2d56:	8f 5f       	subi	r24, 0xFF	; 255
    2d58:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2d5c:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <_ZN7TwoWire5writeEh+0x50>
    2d62:	61 e0       	ldi	r22, 0x01	; 1
    2d64:	ce 01       	movw	r24, r28
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	b9 d0       	rcall	.+370    	; 0x2edc <twi_transmit>
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	0f 90       	pop	r0
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	08 95       	ret

00002d76 <_ZN7TwoWireC1Ev>:
    2d76:	fc 01       	movw	r30, r24
    2d78:	13 82       	std	Z+3, r1	; 0x03
    2d7a:	12 82       	std	Z+2, r1	; 0x02
    2d7c:	88 ee       	ldi	r24, 0xE8	; 232
    2d7e:	93 e0       	ldi	r25, 0x03	; 3
    2d80:	a0 e0       	ldi	r26, 0x00	; 0
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	84 83       	std	Z+4, r24	; 0x04
    2d86:	95 83       	std	Z+5, r25	; 0x05
    2d88:	a6 83       	std	Z+6, r26	; 0x06
    2d8a:	b7 83       	std	Z+7, r27	; 0x07
    2d8c:	86 e1       	ldi	r24, 0x16	; 22
    2d8e:	93 e0       	ldi	r25, 0x03	; 3
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	80 83       	st	Z, r24
    2d94:	08 95       	ret

00002d96 <_ZN7TwoWire5beginEv>:
    2d96:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2d9a:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2d9e:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2da2:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2da6:	28 d0       	rcall	.+80     	; 0x2df8 <twi_init>
    2da8:	85 e5       	ldi	r24, 0x55	; 85
    2daa:	96 e1       	ldi	r25, 0x16	; 22
    2dac:	c4 d0       	rcall	.+392    	; 0x2f36 <twi_attachSlaveTxEvent>
    2dae:	8b e2       	ldi	r24, 0x2B	; 43
    2db0:	96 e1       	ldi	r25, 0x16	; 22
    2db2:	bc c0       	rjmp	.+376    	; 0x2f2c <twi_attachSlaveRxEvent>

00002db4 <_ZN7TwoWire17beginTransmissionEh>:
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <_ZN7TwoWire12transmittingE>
    2dba:	60 93 f9 04 	sts	0x04F9, r22	; 0x8004f9 <_ZN7TwoWire9txAddressE>
    2dbe:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2dc2:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2dc6:	08 95       	ret

00002dc8 <_ZN7TwoWire15endTransmissionEh>:
    2dc8:	0f 93       	push	r16
    2dca:	06 2f       	mov	r16, r22
    2dcc:	21 e0       	ldi	r18, 0x01	; 1
    2dce:	40 91 d7 04 	lds	r20, 0x04D7	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2dd2:	69 ed       	ldi	r22, 0xD9	; 217
    2dd4:	74 e0       	ldi	r23, 0x04	; 4
    2dd6:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <_ZN7TwoWire9txAddressE>
    2dda:	2a d0       	rcall	.+84     	; 0x2e30 <twi_writeTo>
    2ddc:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2de0:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2de4:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <_ZN7TwoWire12transmittingE>
    2de8:	0f 91       	pop	r16
    2dea:	08 95       	ret

00002dec <_ZN7TwoWire15endTransmissionEv>:
    2dec:	61 e0       	ldi	r22, 0x01	; 1
    2dee:	ec cf       	rjmp	.-40     	; 0x2dc8 <_ZN7TwoWire15endTransmissionEh>

00002df0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2df0:	86 ec       	ldi	r24, 0xC6	; 198
    2df2:	94 e0       	ldi	r25, 0x04	; 4
    2df4:	c0 cf       	rjmp	.-128    	; 0x2d76 <_ZN7TwoWireC1Ev>

00002df6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2df6:	08 95       	ret

00002df8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2df8:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <twi_state>
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <twi_sendStop>
    2e02:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <twi_inRepStart>
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	84 e1       	ldi	r24, 0x14	; 20
    2e0a:	ec dc       	rcall	.-1576   	; 0x27e4 <digitalWrite>
    2e0c:	61 e0       	ldi	r22, 0x01	; 1
    2e0e:	85 e1       	ldi	r24, 0x15	; 21
    2e10:	e9 dc       	rcall	.-1582   	; 0x27e4 <digitalWrite>
    2e12:	e9 eb       	ldi	r30, 0xB9	; 185
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	8e 7f       	andi	r24, 0xFE	; 254
    2e1a:	80 83       	st	Z, r24
    2e1c:	80 81       	ld	r24, Z
    2e1e:	8d 7f       	andi	r24, 0xFD	; 253
    2e20:	80 83       	st	Z, r24
    2e22:	88 e4       	ldi	r24, 0x48	; 72
    2e24:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2e28:	85 e4       	ldi	r24, 0x45	; 69
    2e2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e2e:	08 95       	ret

00002e30 <twi_writeTo>:
    2e30:	0f 93       	push	r16
    2e32:	41 32       	cpi	r20, 0x21	; 33
    2e34:	08 f0       	brcs	.+2      	; 0x2e38 <twi_writeTo+0x8>
    2e36:	4a c0       	rjmp	.+148    	; 0x2ecc <twi_writeTo+0x9c>
    2e38:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <twi_state>
    2e3c:	91 11       	cpse	r25, r1
    2e3e:	fc cf       	rjmp	.-8      	; 0x2e38 <twi_writeTo+0x8>
    2e40:	32 e0       	ldi	r19, 0x02	; 2
    2e42:	30 93 89 05 	sts	0x0589, r19	; 0x800589 <twi_state>
    2e46:	00 93 87 05 	sts	0x0587, r16	; 0x800587 <twi_sendStop>
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	30 93 1c 05 	sts	0x051C, r19	; 0x80051c <twi_error>
    2e50:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <twi_masterBufferIndex>
    2e54:	40 93 60 05 	sts	0x0560, r20	; 0x800560 <twi_masterBufferLength>
    2e58:	56 2f       	mov	r21, r22
    2e5a:	a2 e6       	ldi	r26, 0x62	; 98
    2e5c:	b5 e0       	ldi	r27, 0x05	; 5
    2e5e:	fb 01       	movw	r30, r22
    2e60:	3e 2f       	mov	r19, r30
    2e62:	35 1b       	sub	r19, r21
    2e64:	34 17       	cp	r19, r20
    2e66:	18 f4       	brcc	.+6      	; 0x2e6e <twi_writeTo+0x3e>
    2e68:	31 91       	ld	r19, Z+
    2e6a:	3d 93       	st	X+, r19
    2e6c:	f9 cf       	rjmp	.-14     	; 0x2e60 <twi_writeTo+0x30>
    2e6e:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <twi_slarw>
    2e72:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <twi_slarw>
    2e76:	88 0f       	add	r24, r24
    2e78:	83 2b       	or	r24, r19
    2e7a:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <twi_slarw>
    2e7e:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <twi_inRepStart>
    2e82:	81 30       	cpi	r24, 0x01	; 1
    2e84:	61 f4       	brne	.+24     	; 0x2e9e <twi_writeTo+0x6e>
    2e86:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <twi_inRepStart>
    2e8a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <twi_slarw>
    2e8e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2e92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e96:	83 fd       	sbrc	r24, 3
    2e98:	f8 cf       	rjmp	.-16     	; 0x2e8a <twi_writeTo+0x5a>
    2e9a:	85 ec       	ldi	r24, 0xC5	; 197
    2e9c:	01 c0       	rjmp	.+2      	; 0x2ea0 <twi_writeTo+0x70>
    2e9e:	85 ee       	ldi	r24, 0xE5	; 229
    2ea0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ea4:	22 23       	and	r18, r18
    2ea6:	21 f0       	breq	.+8      	; 0x2eb0 <twi_writeTo+0x80>
    2ea8:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <twi_state>
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	d1 f3       	breq	.-12     	; 0x2ea4 <twi_writeTo+0x74>
    2eb0:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_error>
    2eb4:	8f 3f       	cpi	r24, 0xFF	; 255
    2eb6:	79 f0       	breq	.+30     	; 0x2ed6 <twi_writeTo+0xa6>
    2eb8:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_error>
    2ebc:	80 32       	cpi	r24, 0x20	; 32
    2ebe:	41 f0       	breq	.+16     	; 0x2ed0 <twi_writeTo+0xa0>
    2ec0:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_error>
    2ec4:	80 33       	cpi	r24, 0x30	; 48
    2ec6:	31 f0       	breq	.+12     	; 0x2ed4 <twi_writeTo+0xa4>
    2ec8:	94 e0       	ldi	r25, 0x04	; 4
    2eca:	05 c0       	rjmp	.+10     	; 0x2ed6 <twi_writeTo+0xa6>
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	03 c0       	rjmp	.+6      	; 0x2ed6 <twi_writeTo+0xa6>
    2ed0:	92 e0       	ldi	r25, 0x02	; 2
    2ed2:	01 c0       	rjmp	.+2      	; 0x2ed6 <twi_writeTo+0xa6>
    2ed4:	93 e0       	ldi	r25, 0x03	; 3
    2ed6:	89 2f       	mov	r24, r25
    2ed8:	0f 91       	pop	r16
    2eda:	08 95       	ret

00002edc <twi_transmit>:
    2edc:	40 91 3e 05 	lds	r20, 0x053E	; 0x80053e <twi_txBufferLength>
    2ee0:	26 2f       	mov	r18, r22
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	24 0f       	add	r18, r20
    2ee6:	31 1d       	adc	r19, r1
    2ee8:	21 32       	cpi	r18, 0x21	; 33
    2eea:	31 05       	cpc	r19, r1
    2eec:	dc f4       	brge	.+54     	; 0x2f24 <twi_transmit+0x48>
    2eee:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <twi_state>
    2ef2:	24 30       	cpi	r18, 0x04	; 4
    2ef4:	c9 f4       	brne	.+50     	; 0x2f28 <twi_transmit+0x4c>
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	86 17       	cp	r24, r22
    2efe:	58 f4       	brcc	.+22     	; 0x2f16 <twi_transmit+0x3a>
    2f00:	30 91 3e 05 	lds	r19, 0x053E	; 0x80053e <twi_txBufferLength>
    2f04:	21 91       	ld	r18, Z+
    2f06:	dc 01       	movw	r26, r24
    2f08:	a0 5c       	subi	r26, 0xC0	; 192
    2f0a:	ba 4f       	sbci	r27, 0xFA	; 250
    2f0c:	a3 0f       	add	r26, r19
    2f0e:	b1 1d       	adc	r27, r1
    2f10:	2c 93       	st	X, r18
    2f12:	01 96       	adiw	r24, 0x01	; 1
    2f14:	f3 cf       	rjmp	.-26     	; 0x2efc <twi_transmit+0x20>
    2f16:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <twi_txBufferLength>
    2f1a:	68 0f       	add	r22, r24
    2f1c:	60 93 3e 05 	sts	0x053E, r22	; 0x80053e <twi_txBufferLength>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	08 95       	ret
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	08 95       	ret
    2f28:	82 e0       	ldi	r24, 0x02	; 2
    2f2a:	08 95       	ret

00002f2c <twi_attachSlaveRxEvent>:
    2f2c:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <twi_onSlaveReceive+0x1>
    2f30:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <twi_onSlaveReceive>
    2f34:	08 95       	ret

00002f36 <twi_attachSlaveTxEvent>:
    2f36:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <twi_onSlaveTransmit+0x1>
    2f3a:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <twi_onSlaveTransmit>
    2f3e:	08 95       	ret

00002f40 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2f40:	85 ed       	ldi	r24, 0xD5	; 213
    2f42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2f46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2f4a:	84 fd       	sbrc	r24, 4
    2f4c:	fc cf       	rjmp	.-8      	; 0x2f46 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2f4e:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <twi_state>
    2f52:	08 95       	ret

00002f54 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2f54:	85 ec       	ldi	r24, 0xC5	; 197
    2f56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2f5a:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <twi_state>
    2f5e:	08 95       	ret

00002f60 <__vector_39>:
}

ISR(TWI_vect)
{
    2f60:	1f 92       	push	r1
    2f62:	0f 92       	push	r0
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	0f 92       	push	r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	0b b6       	in	r0, 0x3b	; 59
    2f6c:	0f 92       	push	r0
    2f6e:	2f 93       	push	r18
    2f70:	3f 93       	push	r19
    2f72:	4f 93       	push	r20
    2f74:	5f 93       	push	r21
    2f76:	6f 93       	push	r22
    2f78:	7f 93       	push	r23
    2f7a:	8f 93       	push	r24
    2f7c:	9f 93       	push	r25
    2f7e:	af 93       	push	r26
    2f80:	bf 93       	push	r27
    2f82:	ef 93       	push	r30
    2f84:	ff 93       	push	r31
  switch(TW_STATUS){
    2f86:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2f8a:	88 7f       	andi	r24, 0xF8	; 248
    2f8c:	80 36       	cpi	r24, 0x60	; 96
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <__vector_39+0x32>
    2f90:	9d c0       	rjmp	.+314    	; 0x30cc <__vector_39+0x16c>
    2f92:	70 f5       	brcc	.+92     	; 0x2ff0 <__vector_39+0x90>
    2f94:	88 32       	cpi	r24, 0x28	; 40
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <__vector_39+0x3a>
    2f98:	5c c0       	rjmp	.+184    	; 0x3052 <__vector_39+0xf2>
    2f9a:	90 f4       	brcc	.+36     	; 0x2fc0 <__vector_39+0x60>
    2f9c:	80 31       	cpi	r24, 0x10	; 16
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <__vector_39+0x42>
    2fa0:	55 c0       	rjmp	.+170    	; 0x304c <__vector_39+0xec>
    2fa2:	38 f4       	brcc	.+14     	; 0x2fb2 <__vector_39+0x52>
    2fa4:	88 23       	and	r24, r24
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <__vector_39+0x4a>
    2fa8:	f3 c0       	rjmp	.+486    	; 0x3190 <__vector_39+0x230>
    2faa:	88 30       	cpi	r24, 0x08	; 8
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <__vector_39+0x50>
    2fae:	4e c0       	rjmp	.+156    	; 0x304c <__vector_39+0xec>
    2fb0:	f2 c0       	rjmp	.+484    	; 0x3196 <__vector_39+0x236>
    2fb2:	88 31       	cpi	r24, 0x18	; 24
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <__vector_39+0x58>
    2fb6:	4d c0       	rjmp	.+154    	; 0x3052 <__vector_39+0xf2>
    2fb8:	80 32       	cpi	r24, 0x20	; 32
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <__vector_39+0x5e>
    2fbc:	5e c0       	rjmp	.+188    	; 0x307a <__vector_39+0x11a>
    2fbe:	eb c0       	rjmp	.+470    	; 0x3196 <__vector_39+0x236>
    2fc0:	80 34       	cpi	r24, 0x40	; 64
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <__vector_39+0x66>
    2fc4:	69 c0       	rjmp	.+210    	; 0x3098 <__vector_39+0x138>
    2fc6:	50 f4       	brcc	.+20     	; 0x2fdc <__vector_39+0x7c>
    2fc8:	80 33       	cpi	r24, 0x30	; 48
    2fca:	09 f4       	brne	.+2      	; 0x2fce <__vector_39+0x6e>
    2fcc:	56 c0       	rjmp	.+172    	; 0x307a <__vector_39+0x11a>
    2fce:	88 33       	cpi	r24, 0x38	; 56
    2fd0:	09 f0       	breq	.+2      	; 0x2fd4 <__vector_39+0x74>
    2fd2:	e1 c0       	rjmp	.+450    	; 0x3196 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2fd4:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <twi_error>
      twi_releaseBus();
    2fd8:	bd df       	rcall	.-134    	; 0x2f54 <twi_releaseBus>
      break;
    2fda:	dd c0       	rjmp	.+442    	; 0x3196 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2fdc:	80 35       	cpi	r24, 0x50	; 80
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <__vector_39+0x82>
    2fe0:	4f c0       	rjmp	.+158    	; 0x3080 <__vector_39+0x120>
    2fe2:	88 35       	cpi	r24, 0x58	; 88
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <__vector_39+0x88>
    2fe6:	5d c0       	rjmp	.+186    	; 0x30a2 <__vector_39+0x142>
    2fe8:	88 34       	cpi	r24, 0x48	; 72
    2fea:	09 f0       	breq	.+2      	; 0x2fee <__vector_39+0x8e>
    2fec:	d4 c0       	rjmp	.+424    	; 0x3196 <__vector_39+0x236>
    2fee:	d2 c0       	rjmp	.+420    	; 0x3194 <__vector_39+0x234>
    2ff0:	88 39       	cpi	r24, 0x98	; 152
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <__vector_39+0x96>
    2ff4:	c3 c0       	rjmp	.+390    	; 0x317c <__vector_39+0x21c>
    2ff6:	a8 f4       	brcc	.+42     	; 0x3022 <__vector_39+0xc2>
    2ff8:	88 37       	cpi	r24, 0x78	; 120
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <__vector_39+0x9e>
    2ffc:	67 c0       	rjmp	.+206    	; 0x30cc <__vector_39+0x16c>
    2ffe:	38 f4       	brcc	.+14     	; 0x300e <__vector_39+0xae>
    3000:	88 36       	cpi	r24, 0x68	; 104
    3002:	09 f4       	brne	.+2      	; 0x3006 <__vector_39+0xa6>
    3004:	63 c0       	rjmp	.+198    	; 0x30cc <__vector_39+0x16c>
    3006:	80 37       	cpi	r24, 0x70	; 112
    3008:	09 f4       	brne	.+2      	; 0x300c <__vector_39+0xac>
    300a:	60 c0       	rjmp	.+192    	; 0x30cc <__vector_39+0x16c>
    300c:	c4 c0       	rjmp	.+392    	; 0x3196 <__vector_39+0x236>
    300e:	88 38       	cpi	r24, 0x88	; 136
    3010:	09 f4       	brne	.+2      	; 0x3014 <__vector_39+0xb4>
    3012:	b4 c0       	rjmp	.+360    	; 0x317c <__vector_39+0x21c>
    3014:	80 39       	cpi	r24, 0x90	; 144
    3016:	09 f4       	brne	.+2      	; 0x301a <__vector_39+0xba>
    3018:	5f c0       	rjmp	.+190    	; 0x30d8 <__vector_39+0x178>
    301a:	80 38       	cpi	r24, 0x80	; 128
    301c:	09 f0       	breq	.+2      	; 0x3020 <__vector_39+0xc0>
    301e:	bb c0       	rjmp	.+374    	; 0x3196 <__vector_39+0x236>
    3020:	5b c0       	rjmp	.+182    	; 0x30d8 <__vector_39+0x178>
    3022:	80 3b       	cpi	r24, 0xB0	; 176
    3024:	09 f4       	brne	.+2      	; 0x3028 <__vector_39+0xc8>
    3026:	82 c0       	rjmp	.+260    	; 0x312c <__vector_39+0x1cc>
    3028:	38 f4       	brcc	.+14     	; 0x3038 <__vector_39+0xd8>
    302a:	80 3a       	cpi	r24, 0xA0	; 160
    302c:	09 f4       	brne	.+2      	; 0x3030 <__vector_39+0xd0>
    302e:	66 c0       	rjmp	.+204    	; 0x30fc <__vector_39+0x19c>
    3030:	88 3a       	cpi	r24, 0xA8	; 168
    3032:	09 f4       	brne	.+2      	; 0x3036 <__vector_39+0xd6>
    3034:	7b c0       	rjmp	.+246    	; 0x312c <__vector_39+0x1cc>
    3036:	af c0       	rjmp	.+350    	; 0x3196 <__vector_39+0x236>
    3038:	80 3c       	cpi	r24, 0xC0	; 192
    303a:	09 f4       	brne	.+2      	; 0x303e <__vector_39+0xde>
    303c:	a3 c0       	rjmp	.+326    	; 0x3184 <__vector_39+0x224>
    303e:	88 3c       	cpi	r24, 0xC8	; 200
    3040:	09 f4       	brne	.+2      	; 0x3044 <__vector_39+0xe4>
    3042:	a0 c0       	rjmp	.+320    	; 0x3184 <__vector_39+0x224>
    3044:	88 3b       	cpi	r24, 0xB8	; 184
    3046:	09 f4       	brne	.+2      	; 0x304a <__vector_39+0xea>
    3048:	86 c0       	rjmp	.+268    	; 0x3156 <__vector_39+0x1f6>
    304a:	a5 c0       	rjmp	.+330    	; 0x3196 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    304c:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <twi_slarw>
    3050:	10 c0       	rjmp	.+32     	; 0x3072 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3052:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <twi_masterBufferIndex>
    3056:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_masterBufferLength>
    305a:	98 17       	cp	r25, r24
    305c:	70 f5       	brcc	.+92     	; 0x30ba <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    305e:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <twi_masterBufferIndex>
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	8e 0f       	add	r24, r30
    3066:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <twi_masterBufferIndex>
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	ee 59       	subi	r30, 0x9E	; 158
    306e:	fa 4f       	sbci	r31, 0xFA	; 250
    3070:	80 81       	ld	r24, Z
    3072:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3076:	85 ec       	ldi	r24, 0xC5	; 197
    3078:	82 c0       	rjmp	.+260    	; 0x317e <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    307a:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <twi_error>
    307e:	8a c0       	rjmp	.+276    	; 0x3194 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3080:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <twi_masterBufferIndex>
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	8e 0f       	add	r24, r30
    3088:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <twi_masterBufferIndex>
    308c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	ee 59       	subi	r30, 0x9E	; 158
    3094:	fa 4f       	sbci	r31, 0xFA	; 250
    3096:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3098:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <twi_masterBufferIndex>
    309c:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_masterBufferLength>
    30a0:	6a c0       	rjmp	.+212    	; 0x3176 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    30a2:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <twi_masterBufferIndex>
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	8e 0f       	add	r24, r30
    30aa:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <twi_masterBufferIndex>
    30ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	ee 59       	subi	r30, 0x9E	; 158
    30b6:	fa 4f       	sbci	r31, 0xFA	; 250
    30b8:	80 83       	st	Z, r24
	if (twi_sendStop)
    30ba:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <twi_sendStop>
    30be:	81 11       	cpse	r24, r1
    30c0:	69 c0       	rjmp	.+210    	; 0x3194 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    30c8:	84 ea       	ldi	r24, 0xA4	; 164
    30ca:	5d c0       	rjmp	.+186    	; 0x3186 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    30cc:	83 e0       	ldi	r24, 0x03	; 3
    30ce:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    30d2:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <twi_rxBufferIndex>
    30d6:	cf cf       	rjmp	.-98     	; 0x3076 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30d8:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <twi_rxBufferIndex>
    30dc:	80 32       	cpi	r24, 0x20	; 32
    30de:	08 f0       	brcs	.+2      	; 0x30e2 <__vector_39+0x182>
    30e0:	4d c0       	rjmp	.+154    	; 0x317c <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    30e2:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <twi_rxBufferIndex>
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	8e 0f       	add	r24, r30
    30ea:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <twi_rxBufferIndex>
    30ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	e2 5e       	subi	r30, 0xE2	; 226
    30f6:	fa 4f       	sbci	r31, 0xFA	; 250
    30f8:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    30fa:	bd cf       	rjmp	.-134    	; 0x3076 <__vector_39+0x116>
    30fc:	2b df       	rcall	.-426    	; 0x2f54 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30fe:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <twi_rxBufferIndex>
    3102:	80 32       	cpi	r24, 0x20	; 32
    3104:	30 f4       	brcc	.+12     	; 0x3112 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3106:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <twi_rxBufferIndex>
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	e2 5e       	subi	r30, 0xE2	; 226
    310e:	fa 4f       	sbci	r31, 0xFA	; 250
    3110:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3112:	60 91 1d 05 	lds	r22, 0x051D	; 0x80051d <twi_rxBufferIndex>
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <twi_onSlaveReceive>
    311c:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <twi_onSlaveReceive+0x1>
    3120:	8e e1       	ldi	r24, 0x1E	; 30
    3122:	95 e0       	ldi	r25, 0x05	; 5
    3124:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3126:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <twi_rxBufferIndex>
      break;
    312a:	35 c0       	rjmp	.+106    	; 0x3196 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    312c:	84 e0       	ldi	r24, 0x04	; 4
    312e:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3132:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3136:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    313a:	e0 91 84 05 	lds	r30, 0x0584	; 0x800584 <twi_onSlaveTransmit>
    313e:	f0 91 85 05 	lds	r31, 0x0585	; 0x800585 <twi_onSlaveTransmit+0x1>
    3142:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3144:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <twi_txBufferLength>
    3148:	81 11       	cpse	r24, r1
    314a:	05 c0       	rjmp	.+10     	; 0x3156 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3152:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3156:	e0 91 3f 05 	lds	r30, 0x053F	; 0x80053f <twi_txBufferIndex>
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	8e 0f       	add	r24, r30
    315e:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <twi_txBufferIndex>
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	e0 5c       	subi	r30, 0xC0	; 192
    3166:	fa 4f       	sbci	r31, 0xFA	; 250
    3168:	80 81       	ld	r24, Z
    316a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    316e:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <twi_txBufferIndex>
    3172:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <twi_txBufferLength>
    3176:	98 17       	cp	r25, r24
    3178:	08 f4       	brcc	.+2      	; 0x317c <__vector_39+0x21c>
    317a:	7d cf       	rjmp	.-262    	; 0x3076 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    317c:	85 e8       	ldi	r24, 0x85	; 133
    317e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3182:	09 c0       	rjmp	.+18     	; 0x3196 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3184:	85 ec       	ldi	r24, 0xC5	; 197
    3186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    318a:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <twi_state>
      break;
    318e:	03 c0       	rjmp	.+6      	; 0x3196 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3190:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <twi_error>
      twi_stop();
    3194:	d5 de       	rcall	.-598    	; 0x2f40 <twi_stop>
      break;
  }
}
    3196:	ff 91       	pop	r31
    3198:	ef 91       	pop	r30
    319a:	bf 91       	pop	r27
    319c:	af 91       	pop	r26
    319e:	9f 91       	pop	r25
    31a0:	8f 91       	pop	r24
    31a2:	7f 91       	pop	r23
    31a4:	6f 91       	pop	r22
    31a6:	5f 91       	pop	r21
    31a8:	4f 91       	pop	r20
    31aa:	3f 91       	pop	r19
    31ac:	2f 91       	pop	r18
    31ae:	0f 90       	pop	r0
    31b0:	0b be       	out	0x3b, r0	; 59
    31b2:	0f 90       	pop	r0
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	0f 90       	pop	r0
    31b8:	1f 90       	pop	r1
    31ba:	18 95       	reti

000031bc <__udivmodsi4>:
    31bc:	a1 e2       	ldi	r26, 0x21	; 33
    31be:	1a 2e       	mov	r1, r26
    31c0:	aa 1b       	sub	r26, r26
    31c2:	bb 1b       	sub	r27, r27
    31c4:	fd 01       	movw	r30, r26
    31c6:	0d c0       	rjmp	.+26     	; 0x31e2 <__udivmodsi4_ep>

000031c8 <__udivmodsi4_loop>:
    31c8:	aa 1f       	adc	r26, r26
    31ca:	bb 1f       	adc	r27, r27
    31cc:	ee 1f       	adc	r30, r30
    31ce:	ff 1f       	adc	r31, r31
    31d0:	a2 17       	cp	r26, r18
    31d2:	b3 07       	cpc	r27, r19
    31d4:	e4 07       	cpc	r30, r20
    31d6:	f5 07       	cpc	r31, r21
    31d8:	20 f0       	brcs	.+8      	; 0x31e2 <__udivmodsi4_ep>
    31da:	a2 1b       	sub	r26, r18
    31dc:	b3 0b       	sbc	r27, r19
    31de:	e4 0b       	sbc	r30, r20
    31e0:	f5 0b       	sbc	r31, r21

000031e2 <__udivmodsi4_ep>:
    31e2:	66 1f       	adc	r22, r22
    31e4:	77 1f       	adc	r23, r23
    31e6:	88 1f       	adc	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	1a 94       	dec	r1
    31ec:	69 f7       	brne	.-38     	; 0x31c8 <__udivmodsi4_loop>
    31ee:	60 95       	com	r22
    31f0:	70 95       	com	r23
    31f2:	80 95       	com	r24
    31f4:	90 95       	com	r25
    31f6:	9b 01       	movw	r18, r22
    31f8:	ac 01       	movw	r20, r24
    31fa:	bd 01       	movw	r22, r26
    31fc:	cf 01       	movw	r24, r30
    31fe:	08 95       	ret

00003200 <__tablejump2__>:
    3200:	ee 0f       	add	r30, r30
    3202:	ff 1f       	adc	r31, r31
    3204:	88 1f       	adc	r24, r24
    3206:	8b bf       	out	0x3b, r24	; 59
    3208:	07 90       	elpm	r0, Z+
    320a:	f6 91       	elpm	r31, Z
    320c:	e0 2d       	mov	r30, r0
    320e:	19 94       	eijmp

00003210 <malloc>:
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	82 30       	cpi	r24, 0x02	; 2
    321a:	91 05       	cpc	r25, r1
    321c:	10 f4       	brcc	.+4      	; 0x3222 <malloc+0x12>
    321e:	82 e0       	ldi	r24, 0x02	; 2
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <__flp>
    3226:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <__flp+0x1>
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	a0 e0       	ldi	r26, 0x00	; 0
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	30 97       	sbiw	r30, 0x00	; 0
    3234:	19 f1       	breq	.+70     	; 0x327c <malloc+0x6c>
    3236:	40 81       	ld	r20, Z
    3238:	51 81       	ldd	r21, Z+1	; 0x01
    323a:	02 81       	ldd	r16, Z+2	; 0x02
    323c:	13 81       	ldd	r17, Z+3	; 0x03
    323e:	48 17       	cp	r20, r24
    3240:	59 07       	cpc	r21, r25
    3242:	c8 f0       	brcs	.+50     	; 0x3276 <malloc+0x66>
    3244:	84 17       	cp	r24, r20
    3246:	95 07       	cpc	r25, r21
    3248:	69 f4       	brne	.+26     	; 0x3264 <malloc+0x54>
    324a:	10 97       	sbiw	r26, 0x00	; 0
    324c:	31 f0       	breq	.+12     	; 0x325a <malloc+0x4a>
    324e:	12 96       	adiw	r26, 0x02	; 2
    3250:	0c 93       	st	X, r16
    3252:	12 97       	sbiw	r26, 0x02	; 2
    3254:	13 96       	adiw	r26, 0x03	; 3
    3256:	1c 93       	st	X, r17
    3258:	27 c0       	rjmp	.+78     	; 0x32a8 <malloc+0x98>
    325a:	00 93 8c 05 	sts	0x058C, r16	; 0x80058c <__flp>
    325e:	10 93 8d 05 	sts	0x058D, r17	; 0x80058d <__flp+0x1>
    3262:	22 c0       	rjmp	.+68     	; 0x32a8 <malloc+0x98>
    3264:	21 15       	cp	r18, r1
    3266:	31 05       	cpc	r19, r1
    3268:	19 f0       	breq	.+6      	; 0x3270 <malloc+0x60>
    326a:	42 17       	cp	r20, r18
    326c:	53 07       	cpc	r21, r19
    326e:	18 f4       	brcc	.+6      	; 0x3276 <malloc+0x66>
    3270:	9a 01       	movw	r18, r20
    3272:	bd 01       	movw	r22, r26
    3274:	ef 01       	movw	r28, r30
    3276:	df 01       	movw	r26, r30
    3278:	f8 01       	movw	r30, r16
    327a:	db cf       	rjmp	.-74     	; 0x3232 <malloc+0x22>
    327c:	21 15       	cp	r18, r1
    327e:	31 05       	cpc	r19, r1
    3280:	f9 f0       	breq	.+62     	; 0x32c0 <malloc+0xb0>
    3282:	28 1b       	sub	r18, r24
    3284:	39 0b       	sbc	r19, r25
    3286:	24 30       	cpi	r18, 0x04	; 4
    3288:	31 05       	cpc	r19, r1
    328a:	80 f4       	brcc	.+32     	; 0x32ac <malloc+0x9c>
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	9b 81       	ldd	r25, Y+3	; 0x03
    3290:	61 15       	cp	r22, r1
    3292:	71 05       	cpc	r23, r1
    3294:	21 f0       	breq	.+8      	; 0x329e <malloc+0x8e>
    3296:	fb 01       	movw	r30, r22
    3298:	93 83       	std	Z+3, r25	; 0x03
    329a:	82 83       	std	Z+2, r24	; 0x02
    329c:	04 c0       	rjmp	.+8      	; 0x32a6 <malloc+0x96>
    329e:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <__flp+0x1>
    32a2:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <__flp>
    32a6:	fe 01       	movw	r30, r28
    32a8:	32 96       	adiw	r30, 0x02	; 2
    32aa:	44 c0       	rjmp	.+136    	; 0x3334 <malloc+0x124>
    32ac:	fe 01       	movw	r30, r28
    32ae:	e2 0f       	add	r30, r18
    32b0:	f3 1f       	adc	r31, r19
    32b2:	81 93       	st	Z+, r24
    32b4:	91 93       	st	Z+, r25
    32b6:	22 50       	subi	r18, 0x02	; 2
    32b8:	31 09       	sbc	r19, r1
    32ba:	39 83       	std	Y+1, r19	; 0x01
    32bc:	28 83       	st	Y, r18
    32be:	3a c0       	rjmp	.+116    	; 0x3334 <malloc+0x124>
    32c0:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <__brkval>
    32c4:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <__brkval+0x1>
    32c8:	23 2b       	or	r18, r19
    32ca:	41 f4       	brne	.+16     	; 0x32dc <malloc+0xcc>
    32cc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    32d0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    32d4:	30 93 8b 05 	sts	0x058B, r19	; 0x80058b <__brkval+0x1>
    32d8:	20 93 8a 05 	sts	0x058A, r18	; 0x80058a <__brkval>
    32dc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    32e0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    32e4:	21 15       	cp	r18, r1
    32e6:	31 05       	cpc	r19, r1
    32e8:	41 f4       	brne	.+16     	; 0x32fa <malloc+0xea>
    32ea:	2d b7       	in	r18, 0x3d	; 61
    32ec:	3e b7       	in	r19, 0x3e	; 62
    32ee:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    32f2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    32f6:	24 1b       	sub	r18, r20
    32f8:	35 0b       	sbc	r19, r21
    32fa:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <__brkval>
    32fe:	f0 91 8b 05 	lds	r31, 0x058B	; 0x80058b <__brkval+0x1>
    3302:	e2 17       	cp	r30, r18
    3304:	f3 07       	cpc	r31, r19
    3306:	a0 f4       	brcc	.+40     	; 0x3330 <malloc+0x120>
    3308:	2e 1b       	sub	r18, r30
    330a:	3f 0b       	sbc	r19, r31
    330c:	28 17       	cp	r18, r24
    330e:	39 07       	cpc	r19, r25
    3310:	78 f0       	brcs	.+30     	; 0x3330 <malloc+0x120>
    3312:	ac 01       	movw	r20, r24
    3314:	4e 5f       	subi	r20, 0xFE	; 254
    3316:	5f 4f       	sbci	r21, 0xFF	; 255
    3318:	24 17       	cp	r18, r20
    331a:	35 07       	cpc	r19, r21
    331c:	48 f0       	brcs	.+18     	; 0x3330 <malloc+0x120>
    331e:	4e 0f       	add	r20, r30
    3320:	5f 1f       	adc	r21, r31
    3322:	50 93 8b 05 	sts	0x058B, r21	; 0x80058b <__brkval+0x1>
    3326:	40 93 8a 05 	sts	0x058A, r20	; 0x80058a <__brkval>
    332a:	81 93       	st	Z+, r24
    332c:	91 93       	st	Z+, r25
    332e:	02 c0       	rjmp	.+4      	; 0x3334 <malloc+0x124>
    3330:	e0 e0       	ldi	r30, 0x00	; 0
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	cf 01       	movw	r24, r30
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	1f 91       	pop	r17
    333c:	0f 91       	pop	r16
    333e:	08 95       	ret

00003340 <free>:
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	00 97       	sbiw	r24, 0x00	; 0
    3346:	09 f4       	brne	.+2      	; 0x334a <free+0xa>
    3348:	81 c0       	rjmp	.+258    	; 0x344c <free+0x10c>
    334a:	fc 01       	movw	r30, r24
    334c:	32 97       	sbiw	r30, 0x02	; 2
    334e:	13 82       	std	Z+3, r1	; 0x03
    3350:	12 82       	std	Z+2, r1	; 0x02
    3352:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <__flp>
    3356:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <__flp+0x1>
    335a:	10 97       	sbiw	r26, 0x00	; 0
    335c:	81 f4       	brne	.+32     	; 0x337e <free+0x3e>
    335e:	20 81       	ld	r18, Z
    3360:	31 81       	ldd	r19, Z+1	; 0x01
    3362:	82 0f       	add	r24, r18
    3364:	93 1f       	adc	r25, r19
    3366:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <__brkval>
    336a:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <__brkval+0x1>
    336e:	28 17       	cp	r18, r24
    3370:	39 07       	cpc	r19, r25
    3372:	51 f5       	brne	.+84     	; 0x33c8 <free+0x88>
    3374:	f0 93 8b 05 	sts	0x058B, r31	; 0x80058b <__brkval+0x1>
    3378:	e0 93 8a 05 	sts	0x058A, r30	; 0x80058a <__brkval>
    337c:	67 c0       	rjmp	.+206    	; 0x344c <free+0x10c>
    337e:	ed 01       	movw	r28, r26
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	ce 17       	cp	r28, r30
    3386:	df 07       	cpc	r29, r31
    3388:	40 f4       	brcc	.+16     	; 0x339a <free+0x5a>
    338a:	4a 81       	ldd	r20, Y+2	; 0x02
    338c:	5b 81       	ldd	r21, Y+3	; 0x03
    338e:	9e 01       	movw	r18, r28
    3390:	41 15       	cp	r20, r1
    3392:	51 05       	cpc	r21, r1
    3394:	f1 f0       	breq	.+60     	; 0x33d2 <free+0x92>
    3396:	ea 01       	movw	r28, r20
    3398:	f5 cf       	rjmp	.-22     	; 0x3384 <free+0x44>
    339a:	d3 83       	std	Z+3, r29	; 0x03
    339c:	c2 83       	std	Z+2, r28	; 0x02
    339e:	40 81       	ld	r20, Z
    33a0:	51 81       	ldd	r21, Z+1	; 0x01
    33a2:	84 0f       	add	r24, r20
    33a4:	95 1f       	adc	r25, r21
    33a6:	c8 17       	cp	r28, r24
    33a8:	d9 07       	cpc	r29, r25
    33aa:	59 f4       	brne	.+22     	; 0x33c2 <free+0x82>
    33ac:	88 81       	ld	r24, Y
    33ae:	99 81       	ldd	r25, Y+1	; 0x01
    33b0:	84 0f       	add	r24, r20
    33b2:	95 1f       	adc	r25, r21
    33b4:	02 96       	adiw	r24, 0x02	; 2
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	80 83       	st	Z, r24
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	9b 81       	ldd	r25, Y+3	; 0x03
    33be:	93 83       	std	Z+3, r25	; 0x03
    33c0:	82 83       	std	Z+2, r24	; 0x02
    33c2:	21 15       	cp	r18, r1
    33c4:	31 05       	cpc	r19, r1
    33c6:	29 f4       	brne	.+10     	; 0x33d2 <free+0x92>
    33c8:	f0 93 8d 05 	sts	0x058D, r31	; 0x80058d <__flp+0x1>
    33cc:	e0 93 8c 05 	sts	0x058C, r30	; 0x80058c <__flp>
    33d0:	3d c0       	rjmp	.+122    	; 0x344c <free+0x10c>
    33d2:	e9 01       	movw	r28, r18
    33d4:	fb 83       	std	Y+3, r31	; 0x03
    33d6:	ea 83       	std	Y+2, r30	; 0x02
    33d8:	49 91       	ld	r20, Y+
    33da:	59 91       	ld	r21, Y+
    33dc:	c4 0f       	add	r28, r20
    33de:	d5 1f       	adc	r29, r21
    33e0:	ec 17       	cp	r30, r28
    33e2:	fd 07       	cpc	r31, r29
    33e4:	61 f4       	brne	.+24     	; 0x33fe <free+0xbe>
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	84 0f       	add	r24, r20
    33ec:	95 1f       	adc	r25, r21
    33ee:	02 96       	adiw	r24, 0x02	; 2
    33f0:	e9 01       	movw	r28, r18
    33f2:	99 83       	std	Y+1, r25	; 0x01
    33f4:	88 83       	st	Y, r24
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	93 81       	ldd	r25, Z+3	; 0x03
    33fa:	9b 83       	std	Y+3, r25	; 0x03
    33fc:	8a 83       	std	Y+2, r24	; 0x02
    33fe:	e0 e0       	ldi	r30, 0x00	; 0
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	12 96       	adiw	r26, 0x02	; 2
    3404:	8d 91       	ld	r24, X+
    3406:	9c 91       	ld	r25, X
    3408:	13 97       	sbiw	r26, 0x03	; 3
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	19 f0       	breq	.+6      	; 0x3414 <free+0xd4>
    340e:	fd 01       	movw	r30, r26
    3410:	dc 01       	movw	r26, r24
    3412:	f7 cf       	rjmp	.-18     	; 0x3402 <free+0xc2>
    3414:	8d 91       	ld	r24, X+
    3416:	9c 91       	ld	r25, X
    3418:	11 97       	sbiw	r26, 0x01	; 1
    341a:	9d 01       	movw	r18, r26
    341c:	2e 5f       	subi	r18, 0xFE	; 254
    341e:	3f 4f       	sbci	r19, 0xFF	; 255
    3420:	82 0f       	add	r24, r18
    3422:	93 1f       	adc	r25, r19
    3424:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <__brkval>
    3428:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <__brkval+0x1>
    342c:	28 17       	cp	r18, r24
    342e:	39 07       	cpc	r19, r25
    3430:	69 f4       	brne	.+26     	; 0x344c <free+0x10c>
    3432:	30 97       	sbiw	r30, 0x00	; 0
    3434:	29 f4       	brne	.+10     	; 0x3440 <free+0x100>
    3436:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <__flp+0x1>
    343a:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <__flp>
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <free+0x104>
    3440:	13 82       	std	Z+3, r1	; 0x03
    3442:	12 82       	std	Z+2, r1	; 0x02
    3444:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <__brkval+0x1>
    3448:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <__brkval>
    344c:	df 91       	pop	r29
    344e:	cf 91       	pop	r28
    3450:	08 95       	ret

00003452 <realloc>:
    3452:	6f 92       	push	r6
    3454:	7f 92       	push	r7
    3456:	8f 92       	push	r8
    3458:	9f 92       	push	r9
    345a:	af 92       	push	r10
    345c:	bf 92       	push	r11
    345e:	cf 92       	push	r12
    3460:	df 92       	push	r13
    3462:	ef 92       	push	r14
    3464:	ff 92       	push	r15
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	81 f4       	brne	.+32     	; 0x3492 <realloc+0x40>
    3472:	cb 01       	movw	r24, r22
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	ff 90       	pop	r15
    347e:	ef 90       	pop	r14
    3480:	df 90       	pop	r13
    3482:	cf 90       	pop	r12
    3484:	bf 90       	pop	r11
    3486:	af 90       	pop	r10
    3488:	9f 90       	pop	r9
    348a:	8f 90       	pop	r8
    348c:	7f 90       	pop	r7
    348e:	6f 90       	pop	r6
    3490:	bf ce       	rjmp	.-642    	; 0x3210 <malloc>
    3492:	fc 01       	movw	r30, r24
    3494:	e6 0f       	add	r30, r22
    3496:	f7 1f       	adc	r31, r23
    3498:	9c 01       	movw	r18, r24
    349a:	22 50       	subi	r18, 0x02	; 2
    349c:	31 09       	sbc	r19, r1
    349e:	e2 17       	cp	r30, r18
    34a0:	f3 07       	cpc	r31, r19
    34a2:	08 f4       	brcc	.+2      	; 0x34a6 <realloc+0x54>
    34a4:	a5 c0       	rjmp	.+330    	; 0x35f0 <realloc+0x19e>
    34a6:	ec 01       	movw	r28, r24
    34a8:	d9 01       	movw	r26, r18
    34aa:	0d 91       	ld	r16, X+
    34ac:	1c 91       	ld	r17, X
    34ae:	11 97       	sbiw	r26, 0x01	; 1
    34b0:	06 17       	cp	r16, r22
    34b2:	17 07       	cpc	r17, r23
    34b4:	a8 f0       	brcs	.+42     	; 0x34e0 <realloc+0x8e>
    34b6:	05 30       	cpi	r16, 0x05	; 5
    34b8:	11 05       	cpc	r17, r1
    34ba:	08 f4       	brcc	.+2      	; 0x34be <realloc+0x6c>
    34bc:	97 c0       	rjmp	.+302    	; 0x35ec <realloc+0x19a>
    34be:	c8 01       	movw	r24, r16
    34c0:	04 97       	sbiw	r24, 0x04	; 4
    34c2:	86 17       	cp	r24, r22
    34c4:	97 07       	cpc	r25, r23
    34c6:	08 f4       	brcc	.+2      	; 0x34ca <realloc+0x78>
    34c8:	91 c0       	rjmp	.+290    	; 0x35ec <realloc+0x19a>
    34ca:	02 50       	subi	r16, 0x02	; 2
    34cc:	11 09       	sbc	r17, r1
    34ce:	06 1b       	sub	r16, r22
    34d0:	17 0b       	sbc	r17, r23
    34d2:	01 93       	st	Z+, r16
    34d4:	11 93       	st	Z+, r17
    34d6:	6d 93       	st	X+, r22
    34d8:	7c 93       	st	X, r23
    34da:	cf 01       	movw	r24, r30
    34dc:	31 df       	rcall	.-414    	; 0x3340 <free>
    34de:	86 c0       	rjmp	.+268    	; 0x35ec <realloc+0x19a>
    34e0:	5b 01       	movw	r10, r22
    34e2:	a0 1a       	sub	r10, r16
    34e4:	b1 0a       	sbc	r11, r17
    34e6:	4c 01       	movw	r8, r24
    34e8:	80 0e       	add	r8, r16
    34ea:	91 1e       	adc	r9, r17
    34ec:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <__flp>
    34f0:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <__flp+0x1>
    34f4:	61 2c       	mov	r6, r1
    34f6:	71 2c       	mov	r7, r1
    34f8:	e1 2c       	mov	r14, r1
    34fa:	f1 2c       	mov	r15, r1
    34fc:	10 97       	sbiw	r26, 0x00	; 0
    34fe:	09 f4       	brne	.+2      	; 0x3502 <realloc+0xb0>
    3500:	46 c0       	rjmp	.+140    	; 0x358e <realloc+0x13c>
    3502:	8d 91       	ld	r24, X+
    3504:	9c 91       	ld	r25, X
    3506:	11 97       	sbiw	r26, 0x01	; 1
    3508:	a8 15       	cp	r26, r8
    350a:	b9 05       	cpc	r27, r9
    350c:	b1 f5       	brne	.+108    	; 0x357a <realloc+0x128>
    350e:	6c 01       	movw	r12, r24
    3510:	42 e0       	ldi	r20, 0x02	; 2
    3512:	c4 0e       	add	r12, r20
    3514:	d1 1c       	adc	r13, r1
    3516:	ca 14       	cp	r12, r10
    3518:	db 04       	cpc	r13, r11
    351a:	78 f1       	brcs	.+94     	; 0x357a <realloc+0x128>
    351c:	4c 01       	movw	r8, r24
    351e:	8a 18       	sub	r8, r10
    3520:	9b 08       	sbc	r9, r11
    3522:	64 01       	movw	r12, r8
    3524:	42 e0       	ldi	r20, 0x02	; 2
    3526:	c4 0e       	add	r12, r20
    3528:	d1 1c       	adc	r13, r1
    352a:	12 96       	adiw	r26, 0x02	; 2
    352c:	bc 90       	ld	r11, X
    352e:	12 97       	sbiw	r26, 0x02	; 2
    3530:	13 96       	adiw	r26, 0x03	; 3
    3532:	ac 91       	ld	r26, X
    3534:	b5 e0       	ldi	r27, 0x05	; 5
    3536:	cb 16       	cp	r12, r27
    3538:	d1 04       	cpc	r13, r1
    353a:	40 f0       	brcs	.+16     	; 0x354c <realloc+0xfa>
    353c:	b2 82       	std	Z+2, r11	; 0x02
    353e:	a3 83       	std	Z+3, r26	; 0x03
    3540:	91 82       	std	Z+1, r9	; 0x01
    3542:	80 82       	st	Z, r8
    3544:	d9 01       	movw	r26, r18
    3546:	6d 93       	st	X+, r22
    3548:	7c 93       	st	X, r23
    354a:	09 c0       	rjmp	.+18     	; 0x355e <realloc+0x10c>
    354c:	0e 5f       	subi	r16, 0xFE	; 254
    354e:	1f 4f       	sbci	r17, 0xFF	; 255
    3550:	80 0f       	add	r24, r16
    3552:	91 1f       	adc	r25, r17
    3554:	f9 01       	movw	r30, r18
    3556:	91 83       	std	Z+1, r25	; 0x01
    3558:	80 83       	st	Z, r24
    355a:	eb 2d       	mov	r30, r11
    355c:	fa 2f       	mov	r31, r26
    355e:	e1 14       	cp	r14, r1
    3560:	f1 04       	cpc	r15, r1
    3562:	31 f0       	breq	.+12     	; 0x3570 <realloc+0x11e>
    3564:	d7 01       	movw	r26, r14
    3566:	13 96       	adiw	r26, 0x03	; 3
    3568:	fc 93       	st	X, r31
    356a:	ee 93       	st	-X, r30
    356c:	12 97       	sbiw	r26, 0x02	; 2
    356e:	3e c0       	rjmp	.+124    	; 0x35ec <realloc+0x19a>
    3570:	f0 93 8d 05 	sts	0x058D, r31	; 0x80058d <__flp+0x1>
    3574:	e0 93 8c 05 	sts	0x058C, r30	; 0x80058c <__flp>
    3578:	39 c0       	rjmp	.+114    	; 0x35ec <realloc+0x19a>
    357a:	68 16       	cp	r6, r24
    357c:	79 06       	cpc	r7, r25
    357e:	08 f4       	brcc	.+2      	; 0x3582 <realloc+0x130>
    3580:	3c 01       	movw	r6, r24
    3582:	7d 01       	movw	r14, r26
    3584:	12 96       	adiw	r26, 0x02	; 2
    3586:	0d 90       	ld	r0, X+
    3588:	bc 91       	ld	r27, X
    358a:	a0 2d       	mov	r26, r0
    358c:	b7 cf       	rjmp	.-146    	; 0x34fc <realloc+0xaa>
    358e:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <__brkval>
    3592:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <__brkval+0x1>
    3596:	88 16       	cp	r8, r24
    3598:	99 06       	cpc	r9, r25
    359a:	e1 f4       	brne	.+56     	; 0x35d4 <realloc+0x182>
    359c:	66 16       	cp	r6, r22
    359e:	77 06       	cpc	r7, r23
    35a0:	c8 f4       	brcc	.+50     	; 0x35d4 <realloc+0x182>
    35a2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    35a6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	41 f4       	brne	.+16     	; 0x35be <realloc+0x16c>
    35ae:	8d b7       	in	r24, 0x3d	; 61
    35b0:	9e b7       	in	r25, 0x3e	; 62
    35b2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    35b6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    35ba:	84 1b       	sub	r24, r20
    35bc:	95 0b       	sbc	r25, r21
    35be:	e8 17       	cp	r30, r24
    35c0:	f9 07       	cpc	r31, r25
    35c2:	b0 f4       	brcc	.+44     	; 0x35f0 <realloc+0x19e>
    35c4:	f0 93 8b 05 	sts	0x058B, r31	; 0x80058b <__brkval+0x1>
    35c8:	e0 93 8a 05 	sts	0x058A, r30	; 0x80058a <__brkval>
    35cc:	f9 01       	movw	r30, r18
    35ce:	71 83       	std	Z+1, r23	; 0x01
    35d0:	60 83       	st	Z, r22
    35d2:	0c c0       	rjmp	.+24     	; 0x35ec <realloc+0x19a>
    35d4:	cb 01       	movw	r24, r22
    35d6:	1c de       	rcall	.-968    	; 0x3210 <malloc>
    35d8:	7c 01       	movw	r14, r24
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	49 f0       	breq	.+18     	; 0x35f0 <realloc+0x19e>
    35de:	a8 01       	movw	r20, r16
    35e0:	be 01       	movw	r22, r28
    35e2:	17 d0       	rcall	.+46     	; 0x3612 <memcpy>
    35e4:	ce 01       	movw	r24, r28
    35e6:	ac de       	rcall	.-680    	; 0x3340 <free>
    35e8:	c7 01       	movw	r24, r14
    35ea:	04 c0       	rjmp	.+8      	; 0x35f4 <realloc+0x1a2>
    35ec:	ce 01       	movw	r24, r28
    35ee:	02 c0       	rjmp	.+4      	; 0x35f4 <realloc+0x1a2>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	df 91       	pop	r29
    35f6:	cf 91       	pop	r28
    35f8:	1f 91       	pop	r17
    35fa:	0f 91       	pop	r16
    35fc:	ff 90       	pop	r15
    35fe:	ef 90       	pop	r14
    3600:	df 90       	pop	r13
    3602:	cf 90       	pop	r12
    3604:	bf 90       	pop	r11
    3606:	af 90       	pop	r10
    3608:	9f 90       	pop	r9
    360a:	8f 90       	pop	r8
    360c:	7f 90       	pop	r7
    360e:	6f 90       	pop	r6
    3610:	08 95       	ret

00003612 <memcpy>:
    3612:	fb 01       	movw	r30, r22
    3614:	dc 01       	movw	r26, r24
    3616:	02 c0       	rjmp	.+4      	; 0x361c <memcpy+0xa>
    3618:	01 90       	ld	r0, Z+
    361a:	0d 92       	st	X+, r0
    361c:	41 50       	subi	r20, 0x01	; 1
    361e:	50 40       	sbci	r21, 0x00	; 0
    3620:	d8 f7       	brcc	.-10     	; 0x3618 <memcpy+0x6>
    3622:	08 95       	ret

00003624 <strcpy>:
    3624:	fb 01       	movw	r30, r22
    3626:	dc 01       	movw	r26, r24
    3628:	01 90       	ld	r0, Z+
    362a:	0d 92       	st	X+, r0
    362c:	00 20       	and	r0, r0
    362e:	e1 f7       	brne	.-8      	; 0x3628 <strcpy+0x4>
    3630:	08 95       	ret

00003632 <sprintf>:
    3632:	0f 93       	push	r16
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	2e 97       	sbiw	r28, 0x0e	; 14
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	0e 89       	ldd	r16, Y+22	; 0x16
    364c:	1f 89       	ldd	r17, Y+23	; 0x17
    364e:	86 e0       	ldi	r24, 0x06	; 6
    3650:	8c 83       	std	Y+4, r24	; 0x04
    3652:	1a 83       	std	Y+2, r17	; 0x02
    3654:	09 83       	std	Y+1, r16	; 0x01
    3656:	8f ef       	ldi	r24, 0xFF	; 255
    3658:	9f e7       	ldi	r25, 0x7F	; 127
    365a:	9e 83       	std	Y+6, r25	; 0x06
    365c:	8d 83       	std	Y+5, r24	; 0x05
    365e:	ae 01       	movw	r20, r28
    3660:	46 5e       	subi	r20, 0xE6	; 230
    3662:	5f 4f       	sbci	r21, 0xFF	; 255
    3664:	68 8d       	ldd	r22, Y+24	; 0x18
    3666:	79 8d       	ldd	r23, Y+25	; 0x19
    3668:	ce 01       	movw	r24, r28
    366a:	01 96       	adiw	r24, 0x01	; 1
    366c:	10 d0       	rcall	.+32     	; 0x368e <vfprintf>
    366e:	ef 81       	ldd	r30, Y+7	; 0x07
    3670:	f8 85       	ldd	r31, Y+8	; 0x08
    3672:	e0 0f       	add	r30, r16
    3674:	f1 1f       	adc	r31, r17
    3676:	10 82       	st	Z, r1
    3678:	2e 96       	adiw	r28, 0x0e	; 14
    367a:	0f b6       	in	r0, 0x3f	; 63
    367c:	f8 94       	cli
    367e:	de bf       	out	0x3e, r29	; 62
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	cd bf       	out	0x3d, r28	; 61
    3684:	df 91       	pop	r29
    3686:	cf 91       	pop	r28
    3688:	1f 91       	pop	r17
    368a:	0f 91       	pop	r16
    368c:	08 95       	ret

0000368e <vfprintf>:
    368e:	2f 92       	push	r2
    3690:	3f 92       	push	r3
    3692:	4f 92       	push	r4
    3694:	5f 92       	push	r5
    3696:	6f 92       	push	r6
    3698:	7f 92       	push	r7
    369a:	8f 92       	push	r8
    369c:	9f 92       	push	r9
    369e:	af 92       	push	r10
    36a0:	bf 92       	push	r11
    36a2:	cf 92       	push	r12
    36a4:	df 92       	push	r13
    36a6:	ef 92       	push	r14
    36a8:	ff 92       	push	r15
    36aa:	0f 93       	push	r16
    36ac:	1f 93       	push	r17
    36ae:	cf 93       	push	r28
    36b0:	df 93       	push	r29
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62
    36b6:	2b 97       	sbiw	r28, 0x0b	; 11
    36b8:	0f b6       	in	r0, 0x3f	; 63
    36ba:	f8 94       	cli
    36bc:	de bf       	out	0x3e, r29	; 62
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	cd bf       	out	0x3d, r28	; 61
    36c2:	6c 01       	movw	r12, r24
    36c4:	7b 01       	movw	r14, r22
    36c6:	8a 01       	movw	r16, r20
    36c8:	fc 01       	movw	r30, r24
    36ca:	17 82       	std	Z+7, r1	; 0x07
    36cc:	16 82       	std	Z+6, r1	; 0x06
    36ce:	83 81       	ldd	r24, Z+3	; 0x03
    36d0:	81 ff       	sbrs	r24, 1
    36d2:	bf c1       	rjmp	.+894    	; 0x3a52 <vfprintf+0x3c4>
    36d4:	ce 01       	movw	r24, r28
    36d6:	01 96       	adiw	r24, 0x01	; 1
    36d8:	3c 01       	movw	r6, r24
    36da:	f6 01       	movw	r30, r12
    36dc:	93 81       	ldd	r25, Z+3	; 0x03
    36de:	f7 01       	movw	r30, r14
    36e0:	93 fd       	sbrc	r25, 3
    36e2:	85 91       	lpm	r24, Z+
    36e4:	93 ff       	sbrs	r25, 3
    36e6:	81 91       	ld	r24, Z+
    36e8:	7f 01       	movw	r14, r30
    36ea:	88 23       	and	r24, r24
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <vfprintf+0x62>
    36ee:	ad c1       	rjmp	.+858    	; 0x3a4a <vfprintf+0x3bc>
    36f0:	85 32       	cpi	r24, 0x25	; 37
    36f2:	39 f4       	brne	.+14     	; 0x3702 <vfprintf+0x74>
    36f4:	93 fd       	sbrc	r25, 3
    36f6:	85 91       	lpm	r24, Z+
    36f8:	93 ff       	sbrs	r25, 3
    36fa:	81 91       	ld	r24, Z+
    36fc:	7f 01       	movw	r14, r30
    36fe:	85 32       	cpi	r24, 0x25	; 37
    3700:	21 f4       	brne	.+8      	; 0x370a <vfprintf+0x7c>
    3702:	b6 01       	movw	r22, r12
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	d6 d1       	rcall	.+940    	; 0x3ab4 <fputc>
    3708:	e8 cf       	rjmp	.-48     	; 0x36da <vfprintf+0x4c>
    370a:	91 2c       	mov	r9, r1
    370c:	21 2c       	mov	r2, r1
    370e:	31 2c       	mov	r3, r1
    3710:	ff e1       	ldi	r31, 0x1F	; 31
    3712:	f3 15       	cp	r31, r3
    3714:	d8 f0       	brcs	.+54     	; 0x374c <vfprintf+0xbe>
    3716:	8b 32       	cpi	r24, 0x2B	; 43
    3718:	79 f0       	breq	.+30     	; 0x3738 <vfprintf+0xaa>
    371a:	38 f4       	brcc	.+14     	; 0x372a <vfprintf+0x9c>
    371c:	80 32       	cpi	r24, 0x20	; 32
    371e:	79 f0       	breq	.+30     	; 0x373e <vfprintf+0xb0>
    3720:	83 32       	cpi	r24, 0x23	; 35
    3722:	a1 f4       	brne	.+40     	; 0x374c <vfprintf+0xbe>
    3724:	23 2d       	mov	r18, r3
    3726:	20 61       	ori	r18, 0x10	; 16
    3728:	1d c0       	rjmp	.+58     	; 0x3764 <vfprintf+0xd6>
    372a:	8d 32       	cpi	r24, 0x2D	; 45
    372c:	61 f0       	breq	.+24     	; 0x3746 <vfprintf+0xb8>
    372e:	80 33       	cpi	r24, 0x30	; 48
    3730:	69 f4       	brne	.+26     	; 0x374c <vfprintf+0xbe>
    3732:	23 2d       	mov	r18, r3
    3734:	21 60       	ori	r18, 0x01	; 1
    3736:	16 c0       	rjmp	.+44     	; 0x3764 <vfprintf+0xd6>
    3738:	83 2d       	mov	r24, r3
    373a:	82 60       	ori	r24, 0x02	; 2
    373c:	38 2e       	mov	r3, r24
    373e:	e3 2d       	mov	r30, r3
    3740:	e4 60       	ori	r30, 0x04	; 4
    3742:	3e 2e       	mov	r3, r30
    3744:	2a c0       	rjmp	.+84     	; 0x379a <vfprintf+0x10c>
    3746:	f3 2d       	mov	r31, r3
    3748:	f8 60       	ori	r31, 0x08	; 8
    374a:	1d c0       	rjmp	.+58     	; 0x3786 <vfprintf+0xf8>
    374c:	37 fc       	sbrc	r3, 7
    374e:	2d c0       	rjmp	.+90     	; 0x37aa <vfprintf+0x11c>
    3750:	20 ed       	ldi	r18, 0xD0	; 208
    3752:	28 0f       	add	r18, r24
    3754:	2a 30       	cpi	r18, 0x0A	; 10
    3756:	40 f0       	brcs	.+16     	; 0x3768 <vfprintf+0xda>
    3758:	8e 32       	cpi	r24, 0x2E	; 46
    375a:	b9 f4       	brne	.+46     	; 0x378a <vfprintf+0xfc>
    375c:	36 fc       	sbrc	r3, 6
    375e:	75 c1       	rjmp	.+746    	; 0x3a4a <vfprintf+0x3bc>
    3760:	23 2d       	mov	r18, r3
    3762:	20 64       	ori	r18, 0x40	; 64
    3764:	32 2e       	mov	r3, r18
    3766:	19 c0       	rjmp	.+50     	; 0x379a <vfprintf+0x10c>
    3768:	36 fe       	sbrs	r3, 6
    376a:	06 c0       	rjmp	.+12     	; 0x3778 <vfprintf+0xea>
    376c:	8a e0       	ldi	r24, 0x0A	; 10
    376e:	98 9e       	mul	r9, r24
    3770:	20 0d       	add	r18, r0
    3772:	11 24       	eor	r1, r1
    3774:	92 2e       	mov	r9, r18
    3776:	11 c0       	rjmp	.+34     	; 0x379a <vfprintf+0x10c>
    3778:	ea e0       	ldi	r30, 0x0A	; 10
    377a:	2e 9e       	mul	r2, r30
    377c:	20 0d       	add	r18, r0
    377e:	11 24       	eor	r1, r1
    3780:	22 2e       	mov	r2, r18
    3782:	f3 2d       	mov	r31, r3
    3784:	f0 62       	ori	r31, 0x20	; 32
    3786:	3f 2e       	mov	r3, r31
    3788:	08 c0       	rjmp	.+16     	; 0x379a <vfprintf+0x10c>
    378a:	8c 36       	cpi	r24, 0x6C	; 108
    378c:	21 f4       	brne	.+8      	; 0x3796 <vfprintf+0x108>
    378e:	83 2d       	mov	r24, r3
    3790:	80 68       	ori	r24, 0x80	; 128
    3792:	38 2e       	mov	r3, r24
    3794:	02 c0       	rjmp	.+4      	; 0x379a <vfprintf+0x10c>
    3796:	88 36       	cpi	r24, 0x68	; 104
    3798:	41 f4       	brne	.+16     	; 0x37aa <vfprintf+0x11c>
    379a:	f7 01       	movw	r30, r14
    379c:	93 fd       	sbrc	r25, 3
    379e:	85 91       	lpm	r24, Z+
    37a0:	93 ff       	sbrs	r25, 3
    37a2:	81 91       	ld	r24, Z+
    37a4:	7f 01       	movw	r14, r30
    37a6:	81 11       	cpse	r24, r1
    37a8:	b3 cf       	rjmp	.-154    	; 0x3710 <vfprintf+0x82>
    37aa:	98 2f       	mov	r25, r24
    37ac:	9f 7d       	andi	r25, 0xDF	; 223
    37ae:	95 54       	subi	r25, 0x45	; 69
    37b0:	93 30       	cpi	r25, 0x03	; 3
    37b2:	28 f4       	brcc	.+10     	; 0x37be <vfprintf+0x130>
    37b4:	0c 5f       	subi	r16, 0xFC	; 252
    37b6:	1f 4f       	sbci	r17, 0xFF	; 255
    37b8:	9f e3       	ldi	r25, 0x3F	; 63
    37ba:	99 83       	std	Y+1, r25	; 0x01
    37bc:	0d c0       	rjmp	.+26     	; 0x37d8 <vfprintf+0x14a>
    37be:	83 36       	cpi	r24, 0x63	; 99
    37c0:	31 f0       	breq	.+12     	; 0x37ce <vfprintf+0x140>
    37c2:	83 37       	cpi	r24, 0x73	; 115
    37c4:	71 f0       	breq	.+28     	; 0x37e2 <vfprintf+0x154>
    37c6:	83 35       	cpi	r24, 0x53	; 83
    37c8:	09 f0       	breq	.+2      	; 0x37cc <vfprintf+0x13e>
    37ca:	55 c0       	rjmp	.+170    	; 0x3876 <vfprintf+0x1e8>
    37cc:	20 c0       	rjmp	.+64     	; 0x380e <vfprintf+0x180>
    37ce:	f8 01       	movw	r30, r16
    37d0:	80 81       	ld	r24, Z
    37d2:	89 83       	std	Y+1, r24	; 0x01
    37d4:	0e 5f       	subi	r16, 0xFE	; 254
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	88 24       	eor	r8, r8
    37da:	83 94       	inc	r8
    37dc:	91 2c       	mov	r9, r1
    37de:	53 01       	movw	r10, r6
    37e0:	12 c0       	rjmp	.+36     	; 0x3806 <vfprintf+0x178>
    37e2:	28 01       	movw	r4, r16
    37e4:	f2 e0       	ldi	r31, 0x02	; 2
    37e6:	4f 0e       	add	r4, r31
    37e8:	51 1c       	adc	r5, r1
    37ea:	f8 01       	movw	r30, r16
    37ec:	a0 80       	ld	r10, Z
    37ee:	b1 80       	ldd	r11, Z+1	; 0x01
    37f0:	36 fe       	sbrs	r3, 6
    37f2:	03 c0       	rjmp	.+6      	; 0x37fa <vfprintf+0x16c>
    37f4:	69 2d       	mov	r22, r9
    37f6:	70 e0       	ldi	r23, 0x00	; 0
    37f8:	02 c0       	rjmp	.+4      	; 0x37fe <vfprintf+0x170>
    37fa:	6f ef       	ldi	r22, 0xFF	; 255
    37fc:	7f ef       	ldi	r23, 0xFF	; 255
    37fe:	c5 01       	movw	r24, r10
    3800:	4e d1       	rcall	.+668    	; 0x3a9e <strnlen>
    3802:	4c 01       	movw	r8, r24
    3804:	82 01       	movw	r16, r4
    3806:	f3 2d       	mov	r31, r3
    3808:	ff 77       	andi	r31, 0x7F	; 127
    380a:	3f 2e       	mov	r3, r31
    380c:	15 c0       	rjmp	.+42     	; 0x3838 <vfprintf+0x1aa>
    380e:	28 01       	movw	r4, r16
    3810:	22 e0       	ldi	r18, 0x02	; 2
    3812:	42 0e       	add	r4, r18
    3814:	51 1c       	adc	r5, r1
    3816:	f8 01       	movw	r30, r16
    3818:	a0 80       	ld	r10, Z
    381a:	b1 80       	ldd	r11, Z+1	; 0x01
    381c:	36 fe       	sbrs	r3, 6
    381e:	03 c0       	rjmp	.+6      	; 0x3826 <vfprintf+0x198>
    3820:	69 2d       	mov	r22, r9
    3822:	70 e0       	ldi	r23, 0x00	; 0
    3824:	02 c0       	rjmp	.+4      	; 0x382a <vfprintf+0x19c>
    3826:	6f ef       	ldi	r22, 0xFF	; 255
    3828:	7f ef       	ldi	r23, 0xFF	; 255
    382a:	c5 01       	movw	r24, r10
    382c:	2d d1       	rcall	.+602    	; 0x3a88 <strnlen_P>
    382e:	4c 01       	movw	r8, r24
    3830:	f3 2d       	mov	r31, r3
    3832:	f0 68       	ori	r31, 0x80	; 128
    3834:	3f 2e       	mov	r3, r31
    3836:	82 01       	movw	r16, r4
    3838:	33 fc       	sbrc	r3, 3
    383a:	19 c0       	rjmp	.+50     	; 0x386e <vfprintf+0x1e0>
    383c:	82 2d       	mov	r24, r2
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	88 16       	cp	r8, r24
    3842:	99 06       	cpc	r9, r25
    3844:	a0 f4       	brcc	.+40     	; 0x386e <vfprintf+0x1e0>
    3846:	b6 01       	movw	r22, r12
    3848:	80 e2       	ldi	r24, 0x20	; 32
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	33 d1       	rcall	.+614    	; 0x3ab4 <fputc>
    384e:	2a 94       	dec	r2
    3850:	f5 cf       	rjmp	.-22     	; 0x383c <vfprintf+0x1ae>
    3852:	f5 01       	movw	r30, r10
    3854:	37 fc       	sbrc	r3, 7
    3856:	85 91       	lpm	r24, Z+
    3858:	37 fe       	sbrs	r3, 7
    385a:	81 91       	ld	r24, Z+
    385c:	5f 01       	movw	r10, r30
    385e:	b6 01       	movw	r22, r12
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	28 d1       	rcall	.+592    	; 0x3ab4 <fputc>
    3864:	21 10       	cpse	r2, r1
    3866:	2a 94       	dec	r2
    3868:	21 e0       	ldi	r18, 0x01	; 1
    386a:	82 1a       	sub	r8, r18
    386c:	91 08       	sbc	r9, r1
    386e:	81 14       	cp	r8, r1
    3870:	91 04       	cpc	r9, r1
    3872:	79 f7       	brne	.-34     	; 0x3852 <vfprintf+0x1c4>
    3874:	e1 c0       	rjmp	.+450    	; 0x3a38 <vfprintf+0x3aa>
    3876:	84 36       	cpi	r24, 0x64	; 100
    3878:	11 f0       	breq	.+4      	; 0x387e <vfprintf+0x1f0>
    387a:	89 36       	cpi	r24, 0x69	; 105
    387c:	39 f5       	brne	.+78     	; 0x38cc <vfprintf+0x23e>
    387e:	f8 01       	movw	r30, r16
    3880:	37 fe       	sbrs	r3, 7
    3882:	07 c0       	rjmp	.+14     	; 0x3892 <vfprintf+0x204>
    3884:	60 81       	ld	r22, Z
    3886:	71 81       	ldd	r23, Z+1	; 0x01
    3888:	82 81       	ldd	r24, Z+2	; 0x02
    388a:	93 81       	ldd	r25, Z+3	; 0x03
    388c:	0c 5f       	subi	r16, 0xFC	; 252
    388e:	1f 4f       	sbci	r17, 0xFF	; 255
    3890:	08 c0       	rjmp	.+16     	; 0x38a2 <vfprintf+0x214>
    3892:	60 81       	ld	r22, Z
    3894:	71 81       	ldd	r23, Z+1	; 0x01
    3896:	07 2e       	mov	r0, r23
    3898:	00 0c       	add	r0, r0
    389a:	88 0b       	sbc	r24, r24
    389c:	99 0b       	sbc	r25, r25
    389e:	0e 5f       	subi	r16, 0xFE	; 254
    38a0:	1f 4f       	sbci	r17, 0xFF	; 255
    38a2:	f3 2d       	mov	r31, r3
    38a4:	ff 76       	andi	r31, 0x6F	; 111
    38a6:	3f 2e       	mov	r3, r31
    38a8:	97 ff       	sbrs	r25, 7
    38aa:	09 c0       	rjmp	.+18     	; 0x38be <vfprintf+0x230>
    38ac:	90 95       	com	r25
    38ae:	80 95       	com	r24
    38b0:	70 95       	com	r23
    38b2:	61 95       	neg	r22
    38b4:	7f 4f       	sbci	r23, 0xFF	; 255
    38b6:	8f 4f       	sbci	r24, 0xFF	; 255
    38b8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ba:	f0 68       	ori	r31, 0x80	; 128
    38bc:	3f 2e       	mov	r3, r31
    38be:	2a e0       	ldi	r18, 0x0A	; 10
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	a3 01       	movw	r20, r6
    38c4:	33 d1       	rcall	.+614    	; 0x3b2c <__ultoa_invert>
    38c6:	88 2e       	mov	r8, r24
    38c8:	86 18       	sub	r8, r6
    38ca:	44 c0       	rjmp	.+136    	; 0x3954 <vfprintf+0x2c6>
    38cc:	85 37       	cpi	r24, 0x75	; 117
    38ce:	31 f4       	brne	.+12     	; 0x38dc <vfprintf+0x24e>
    38d0:	23 2d       	mov	r18, r3
    38d2:	2f 7e       	andi	r18, 0xEF	; 239
    38d4:	b2 2e       	mov	r11, r18
    38d6:	2a e0       	ldi	r18, 0x0A	; 10
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	25 c0       	rjmp	.+74     	; 0x3926 <vfprintf+0x298>
    38dc:	93 2d       	mov	r25, r3
    38de:	99 7f       	andi	r25, 0xF9	; 249
    38e0:	b9 2e       	mov	r11, r25
    38e2:	8f 36       	cpi	r24, 0x6F	; 111
    38e4:	c1 f0       	breq	.+48     	; 0x3916 <vfprintf+0x288>
    38e6:	18 f4       	brcc	.+6      	; 0x38ee <vfprintf+0x260>
    38e8:	88 35       	cpi	r24, 0x58	; 88
    38ea:	79 f0       	breq	.+30     	; 0x390a <vfprintf+0x27c>
    38ec:	ae c0       	rjmp	.+348    	; 0x3a4a <vfprintf+0x3bc>
    38ee:	80 37       	cpi	r24, 0x70	; 112
    38f0:	19 f0       	breq	.+6      	; 0x38f8 <vfprintf+0x26a>
    38f2:	88 37       	cpi	r24, 0x78	; 120
    38f4:	21 f0       	breq	.+8      	; 0x38fe <vfprintf+0x270>
    38f6:	a9 c0       	rjmp	.+338    	; 0x3a4a <vfprintf+0x3bc>
    38f8:	e9 2f       	mov	r30, r25
    38fa:	e0 61       	ori	r30, 0x10	; 16
    38fc:	be 2e       	mov	r11, r30
    38fe:	b4 fe       	sbrs	r11, 4
    3900:	0d c0       	rjmp	.+26     	; 0x391c <vfprintf+0x28e>
    3902:	fb 2d       	mov	r31, r11
    3904:	f4 60       	ori	r31, 0x04	; 4
    3906:	bf 2e       	mov	r11, r31
    3908:	09 c0       	rjmp	.+18     	; 0x391c <vfprintf+0x28e>
    390a:	34 fe       	sbrs	r3, 4
    390c:	0a c0       	rjmp	.+20     	; 0x3922 <vfprintf+0x294>
    390e:	29 2f       	mov	r18, r25
    3910:	26 60       	ori	r18, 0x06	; 6
    3912:	b2 2e       	mov	r11, r18
    3914:	06 c0       	rjmp	.+12     	; 0x3922 <vfprintf+0x294>
    3916:	28 e0       	ldi	r18, 0x08	; 8
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	05 c0       	rjmp	.+10     	; 0x3926 <vfprintf+0x298>
    391c:	20 e1       	ldi	r18, 0x10	; 16
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <vfprintf+0x298>
    3922:	20 e1       	ldi	r18, 0x10	; 16
    3924:	32 e0       	ldi	r19, 0x02	; 2
    3926:	f8 01       	movw	r30, r16
    3928:	b7 fe       	sbrs	r11, 7
    392a:	07 c0       	rjmp	.+14     	; 0x393a <vfprintf+0x2ac>
    392c:	60 81       	ld	r22, Z
    392e:	71 81       	ldd	r23, Z+1	; 0x01
    3930:	82 81       	ldd	r24, Z+2	; 0x02
    3932:	93 81       	ldd	r25, Z+3	; 0x03
    3934:	0c 5f       	subi	r16, 0xFC	; 252
    3936:	1f 4f       	sbci	r17, 0xFF	; 255
    3938:	06 c0       	rjmp	.+12     	; 0x3946 <vfprintf+0x2b8>
    393a:	60 81       	ld	r22, Z
    393c:	71 81       	ldd	r23, Z+1	; 0x01
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	0e 5f       	subi	r16, 0xFE	; 254
    3944:	1f 4f       	sbci	r17, 0xFF	; 255
    3946:	a3 01       	movw	r20, r6
    3948:	f1 d0       	rcall	.+482    	; 0x3b2c <__ultoa_invert>
    394a:	88 2e       	mov	r8, r24
    394c:	86 18       	sub	r8, r6
    394e:	fb 2d       	mov	r31, r11
    3950:	ff 77       	andi	r31, 0x7F	; 127
    3952:	3f 2e       	mov	r3, r31
    3954:	36 fe       	sbrs	r3, 6
    3956:	0d c0       	rjmp	.+26     	; 0x3972 <vfprintf+0x2e4>
    3958:	23 2d       	mov	r18, r3
    395a:	2e 7f       	andi	r18, 0xFE	; 254
    395c:	a2 2e       	mov	r10, r18
    395e:	89 14       	cp	r8, r9
    3960:	58 f4       	brcc	.+22     	; 0x3978 <vfprintf+0x2ea>
    3962:	34 fe       	sbrs	r3, 4
    3964:	0b c0       	rjmp	.+22     	; 0x397c <vfprintf+0x2ee>
    3966:	32 fc       	sbrc	r3, 2
    3968:	09 c0       	rjmp	.+18     	; 0x397c <vfprintf+0x2ee>
    396a:	83 2d       	mov	r24, r3
    396c:	8e 7e       	andi	r24, 0xEE	; 238
    396e:	a8 2e       	mov	r10, r24
    3970:	05 c0       	rjmp	.+10     	; 0x397c <vfprintf+0x2ee>
    3972:	b8 2c       	mov	r11, r8
    3974:	a3 2c       	mov	r10, r3
    3976:	03 c0       	rjmp	.+6      	; 0x397e <vfprintf+0x2f0>
    3978:	b8 2c       	mov	r11, r8
    397a:	01 c0       	rjmp	.+2      	; 0x397e <vfprintf+0x2f0>
    397c:	b9 2c       	mov	r11, r9
    397e:	a4 fe       	sbrs	r10, 4
    3980:	0f c0       	rjmp	.+30     	; 0x39a0 <vfprintf+0x312>
    3982:	fe 01       	movw	r30, r28
    3984:	e8 0d       	add	r30, r8
    3986:	f1 1d       	adc	r31, r1
    3988:	80 81       	ld	r24, Z
    398a:	80 33       	cpi	r24, 0x30	; 48
    398c:	21 f4       	brne	.+8      	; 0x3996 <vfprintf+0x308>
    398e:	9a 2d       	mov	r25, r10
    3990:	99 7e       	andi	r25, 0xE9	; 233
    3992:	a9 2e       	mov	r10, r25
    3994:	09 c0       	rjmp	.+18     	; 0x39a8 <vfprintf+0x31a>
    3996:	a2 fe       	sbrs	r10, 2
    3998:	06 c0       	rjmp	.+12     	; 0x39a6 <vfprintf+0x318>
    399a:	b3 94       	inc	r11
    399c:	b3 94       	inc	r11
    399e:	04 c0       	rjmp	.+8      	; 0x39a8 <vfprintf+0x31a>
    39a0:	8a 2d       	mov	r24, r10
    39a2:	86 78       	andi	r24, 0x86	; 134
    39a4:	09 f0       	breq	.+2      	; 0x39a8 <vfprintf+0x31a>
    39a6:	b3 94       	inc	r11
    39a8:	a3 fc       	sbrc	r10, 3
    39aa:	10 c0       	rjmp	.+32     	; 0x39cc <vfprintf+0x33e>
    39ac:	a0 fe       	sbrs	r10, 0
    39ae:	06 c0       	rjmp	.+12     	; 0x39bc <vfprintf+0x32e>
    39b0:	b2 14       	cp	r11, r2
    39b2:	80 f4       	brcc	.+32     	; 0x39d4 <vfprintf+0x346>
    39b4:	28 0c       	add	r2, r8
    39b6:	92 2c       	mov	r9, r2
    39b8:	9b 18       	sub	r9, r11
    39ba:	0d c0       	rjmp	.+26     	; 0x39d6 <vfprintf+0x348>
    39bc:	b2 14       	cp	r11, r2
    39be:	58 f4       	brcc	.+22     	; 0x39d6 <vfprintf+0x348>
    39c0:	b6 01       	movw	r22, r12
    39c2:	80 e2       	ldi	r24, 0x20	; 32
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	76 d0       	rcall	.+236    	; 0x3ab4 <fputc>
    39c8:	b3 94       	inc	r11
    39ca:	f8 cf       	rjmp	.-16     	; 0x39bc <vfprintf+0x32e>
    39cc:	b2 14       	cp	r11, r2
    39ce:	18 f4       	brcc	.+6      	; 0x39d6 <vfprintf+0x348>
    39d0:	2b 18       	sub	r2, r11
    39d2:	02 c0       	rjmp	.+4      	; 0x39d8 <vfprintf+0x34a>
    39d4:	98 2c       	mov	r9, r8
    39d6:	21 2c       	mov	r2, r1
    39d8:	a4 fe       	sbrs	r10, 4
    39da:	0f c0       	rjmp	.+30     	; 0x39fa <vfprintf+0x36c>
    39dc:	b6 01       	movw	r22, r12
    39de:	80 e3       	ldi	r24, 0x30	; 48
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	68 d0       	rcall	.+208    	; 0x3ab4 <fputc>
    39e4:	a2 fe       	sbrs	r10, 2
    39e6:	16 c0       	rjmp	.+44     	; 0x3a14 <vfprintf+0x386>
    39e8:	a1 fc       	sbrc	r10, 1
    39ea:	03 c0       	rjmp	.+6      	; 0x39f2 <vfprintf+0x364>
    39ec:	88 e7       	ldi	r24, 0x78	; 120
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	02 c0       	rjmp	.+4      	; 0x39f6 <vfprintf+0x368>
    39f2:	88 e5       	ldi	r24, 0x58	; 88
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	b6 01       	movw	r22, r12
    39f8:	0c c0       	rjmp	.+24     	; 0x3a12 <vfprintf+0x384>
    39fa:	8a 2d       	mov	r24, r10
    39fc:	86 78       	andi	r24, 0x86	; 134
    39fe:	51 f0       	breq	.+20     	; 0x3a14 <vfprintf+0x386>
    3a00:	a1 fe       	sbrs	r10, 1
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <vfprintf+0x37a>
    3a04:	8b e2       	ldi	r24, 0x2B	; 43
    3a06:	01 c0       	rjmp	.+2      	; 0x3a0a <vfprintf+0x37c>
    3a08:	80 e2       	ldi	r24, 0x20	; 32
    3a0a:	a7 fc       	sbrc	r10, 7
    3a0c:	8d e2       	ldi	r24, 0x2D	; 45
    3a0e:	b6 01       	movw	r22, r12
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	50 d0       	rcall	.+160    	; 0x3ab4 <fputc>
    3a14:	89 14       	cp	r8, r9
    3a16:	30 f4       	brcc	.+12     	; 0x3a24 <vfprintf+0x396>
    3a18:	b6 01       	movw	r22, r12
    3a1a:	80 e3       	ldi	r24, 0x30	; 48
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	4a d0       	rcall	.+148    	; 0x3ab4 <fputc>
    3a20:	9a 94       	dec	r9
    3a22:	f8 cf       	rjmp	.-16     	; 0x3a14 <vfprintf+0x386>
    3a24:	8a 94       	dec	r8
    3a26:	f3 01       	movw	r30, r6
    3a28:	e8 0d       	add	r30, r8
    3a2a:	f1 1d       	adc	r31, r1
    3a2c:	80 81       	ld	r24, Z
    3a2e:	b6 01       	movw	r22, r12
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	40 d0       	rcall	.+128    	; 0x3ab4 <fputc>
    3a34:	81 10       	cpse	r8, r1
    3a36:	f6 cf       	rjmp	.-20     	; 0x3a24 <vfprintf+0x396>
    3a38:	22 20       	and	r2, r2
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <vfprintf+0x3b0>
    3a3c:	4e ce       	rjmp	.-868    	; 0x36da <vfprintf+0x4c>
    3a3e:	b6 01       	movw	r22, r12
    3a40:	80 e2       	ldi	r24, 0x20	; 32
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	37 d0       	rcall	.+110    	; 0x3ab4 <fputc>
    3a46:	2a 94       	dec	r2
    3a48:	f7 cf       	rjmp	.-18     	; 0x3a38 <vfprintf+0x3aa>
    3a4a:	f6 01       	movw	r30, r12
    3a4c:	86 81       	ldd	r24, Z+6	; 0x06
    3a4e:	97 81       	ldd	r25, Z+7	; 0x07
    3a50:	02 c0       	rjmp	.+4      	; 0x3a56 <vfprintf+0x3c8>
    3a52:	8f ef       	ldi	r24, 0xFF	; 255
    3a54:	9f ef       	ldi	r25, 0xFF	; 255
    3a56:	2b 96       	adiw	r28, 0x0b	; 11
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	de bf       	out	0x3e, r29	; 62
    3a5e:	0f be       	out	0x3f, r0	; 63
    3a60:	cd bf       	out	0x3d, r28	; 61
    3a62:	df 91       	pop	r29
    3a64:	cf 91       	pop	r28
    3a66:	1f 91       	pop	r17
    3a68:	0f 91       	pop	r16
    3a6a:	ff 90       	pop	r15
    3a6c:	ef 90       	pop	r14
    3a6e:	df 90       	pop	r13
    3a70:	cf 90       	pop	r12
    3a72:	bf 90       	pop	r11
    3a74:	af 90       	pop	r10
    3a76:	9f 90       	pop	r9
    3a78:	8f 90       	pop	r8
    3a7a:	7f 90       	pop	r7
    3a7c:	6f 90       	pop	r6
    3a7e:	5f 90       	pop	r5
    3a80:	4f 90       	pop	r4
    3a82:	3f 90       	pop	r3
    3a84:	2f 90       	pop	r2
    3a86:	08 95       	ret

00003a88 <strnlen_P>:
    3a88:	fc 01       	movw	r30, r24
    3a8a:	05 90       	lpm	r0, Z+
    3a8c:	61 50       	subi	r22, 0x01	; 1
    3a8e:	70 40       	sbci	r23, 0x00	; 0
    3a90:	01 10       	cpse	r0, r1
    3a92:	d8 f7       	brcc	.-10     	; 0x3a8a <strnlen_P+0x2>
    3a94:	80 95       	com	r24
    3a96:	90 95       	com	r25
    3a98:	8e 0f       	add	r24, r30
    3a9a:	9f 1f       	adc	r25, r31
    3a9c:	08 95       	ret

00003a9e <strnlen>:
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	61 50       	subi	r22, 0x01	; 1
    3aa2:	70 40       	sbci	r23, 0x00	; 0
    3aa4:	01 90       	ld	r0, Z+
    3aa6:	01 10       	cpse	r0, r1
    3aa8:	d8 f7       	brcc	.-10     	; 0x3aa0 <strnlen+0x2>
    3aaa:	80 95       	com	r24
    3aac:	90 95       	com	r25
    3aae:	8e 0f       	add	r24, r30
    3ab0:	9f 1f       	adc	r25, r31
    3ab2:	08 95       	ret

00003ab4 <fputc>:
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	fb 01       	movw	r30, r22
    3abe:	23 81       	ldd	r18, Z+3	; 0x03
    3ac0:	21 fd       	sbrc	r18, 1
    3ac2:	03 c0       	rjmp	.+6      	; 0x3aca <fputc+0x16>
    3ac4:	8f ef       	ldi	r24, 0xFF	; 255
    3ac6:	9f ef       	ldi	r25, 0xFF	; 255
    3ac8:	2c c0       	rjmp	.+88     	; 0x3b22 <fputc+0x6e>
    3aca:	22 ff       	sbrs	r18, 2
    3acc:	16 c0       	rjmp	.+44     	; 0x3afa <fputc+0x46>
    3ace:	46 81       	ldd	r20, Z+6	; 0x06
    3ad0:	57 81       	ldd	r21, Z+7	; 0x07
    3ad2:	24 81       	ldd	r18, Z+4	; 0x04
    3ad4:	35 81       	ldd	r19, Z+5	; 0x05
    3ad6:	42 17       	cp	r20, r18
    3ad8:	53 07       	cpc	r21, r19
    3ada:	44 f4       	brge	.+16     	; 0x3aec <fputc+0x38>
    3adc:	a0 81       	ld	r26, Z
    3ade:	b1 81       	ldd	r27, Z+1	; 0x01
    3ae0:	9d 01       	movw	r18, r26
    3ae2:	2f 5f       	subi	r18, 0xFF	; 255
    3ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae6:	31 83       	std	Z+1, r19	; 0x01
    3ae8:	20 83       	st	Z, r18
    3aea:	8c 93       	st	X, r24
    3aec:	26 81       	ldd	r18, Z+6	; 0x06
    3aee:	37 81       	ldd	r19, Z+7	; 0x07
    3af0:	2f 5f       	subi	r18, 0xFF	; 255
    3af2:	3f 4f       	sbci	r19, 0xFF	; 255
    3af4:	37 83       	std	Z+7, r19	; 0x07
    3af6:	26 83       	std	Z+6, r18	; 0x06
    3af8:	14 c0       	rjmp	.+40     	; 0x3b22 <fputc+0x6e>
    3afa:	8b 01       	movw	r16, r22
    3afc:	ec 01       	movw	r28, r24
    3afe:	fb 01       	movw	r30, r22
    3b00:	00 84       	ldd	r0, Z+8	; 0x08
    3b02:	f1 85       	ldd	r31, Z+9	; 0x09
    3b04:	e0 2d       	mov	r30, r0
    3b06:	19 95       	eicall
    3b08:	89 2b       	or	r24, r25
    3b0a:	e1 f6       	brne	.-72     	; 0x3ac4 <fputc+0x10>
    3b0c:	d8 01       	movw	r26, r16
    3b0e:	16 96       	adiw	r26, 0x06	; 6
    3b10:	8d 91       	ld	r24, X+
    3b12:	9c 91       	ld	r25, X
    3b14:	17 97       	sbiw	r26, 0x07	; 7
    3b16:	01 96       	adiw	r24, 0x01	; 1
    3b18:	17 96       	adiw	r26, 0x07	; 7
    3b1a:	9c 93       	st	X, r25
    3b1c:	8e 93       	st	-X, r24
    3b1e:	16 97       	sbiw	r26, 0x06	; 6
    3b20:	ce 01       	movw	r24, r28
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	1f 91       	pop	r17
    3b28:	0f 91       	pop	r16
    3b2a:	08 95       	ret

00003b2c <__ultoa_invert>:
    3b2c:	fa 01       	movw	r30, r20
    3b2e:	aa 27       	eor	r26, r26
    3b30:	28 30       	cpi	r18, 0x08	; 8
    3b32:	51 f1       	breq	.+84     	; 0x3b88 <__ultoa_invert+0x5c>
    3b34:	20 31       	cpi	r18, 0x10	; 16
    3b36:	81 f1       	breq	.+96     	; 0x3b98 <__ultoa_invert+0x6c>
    3b38:	e8 94       	clt
    3b3a:	6f 93       	push	r22
    3b3c:	6e 7f       	andi	r22, 0xFE	; 254
    3b3e:	6e 5f       	subi	r22, 0xFE	; 254
    3b40:	7f 4f       	sbci	r23, 0xFF	; 255
    3b42:	8f 4f       	sbci	r24, 0xFF	; 255
    3b44:	9f 4f       	sbci	r25, 0xFF	; 255
    3b46:	af 4f       	sbci	r26, 0xFF	; 255
    3b48:	b1 e0       	ldi	r27, 0x01	; 1
    3b4a:	3e d0       	rcall	.+124    	; 0x3bc8 <__ultoa_invert+0x9c>
    3b4c:	b4 e0       	ldi	r27, 0x04	; 4
    3b4e:	3c d0       	rcall	.+120    	; 0x3bc8 <__ultoa_invert+0x9c>
    3b50:	67 0f       	add	r22, r23
    3b52:	78 1f       	adc	r23, r24
    3b54:	89 1f       	adc	r24, r25
    3b56:	9a 1f       	adc	r25, r26
    3b58:	a1 1d       	adc	r26, r1
    3b5a:	68 0f       	add	r22, r24
    3b5c:	79 1f       	adc	r23, r25
    3b5e:	8a 1f       	adc	r24, r26
    3b60:	91 1d       	adc	r25, r1
    3b62:	a1 1d       	adc	r26, r1
    3b64:	6a 0f       	add	r22, r26
    3b66:	71 1d       	adc	r23, r1
    3b68:	81 1d       	adc	r24, r1
    3b6a:	91 1d       	adc	r25, r1
    3b6c:	a1 1d       	adc	r26, r1
    3b6e:	20 d0       	rcall	.+64     	; 0x3bb0 <__ultoa_invert+0x84>
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <__ultoa_invert+0x48>
    3b72:	68 94       	set
    3b74:	3f 91       	pop	r19
    3b76:	2a e0       	ldi	r18, 0x0A	; 10
    3b78:	26 9f       	mul	r18, r22
    3b7a:	11 24       	eor	r1, r1
    3b7c:	30 19       	sub	r19, r0
    3b7e:	30 5d       	subi	r19, 0xD0	; 208
    3b80:	31 93       	st	Z+, r19
    3b82:	de f6       	brtc	.-74     	; 0x3b3a <__ultoa_invert+0xe>
    3b84:	cf 01       	movw	r24, r30
    3b86:	08 95       	ret
    3b88:	46 2f       	mov	r20, r22
    3b8a:	47 70       	andi	r20, 0x07	; 7
    3b8c:	40 5d       	subi	r20, 0xD0	; 208
    3b8e:	41 93       	st	Z+, r20
    3b90:	b3 e0       	ldi	r27, 0x03	; 3
    3b92:	0f d0       	rcall	.+30     	; 0x3bb2 <__ultoa_invert+0x86>
    3b94:	c9 f7       	brne	.-14     	; 0x3b88 <__ultoa_invert+0x5c>
    3b96:	f6 cf       	rjmp	.-20     	; 0x3b84 <__ultoa_invert+0x58>
    3b98:	46 2f       	mov	r20, r22
    3b9a:	4f 70       	andi	r20, 0x0F	; 15
    3b9c:	40 5d       	subi	r20, 0xD0	; 208
    3b9e:	4a 33       	cpi	r20, 0x3A	; 58
    3ba0:	18 f0       	brcs	.+6      	; 0x3ba8 <__ultoa_invert+0x7c>
    3ba2:	49 5d       	subi	r20, 0xD9	; 217
    3ba4:	31 fd       	sbrc	r19, 1
    3ba6:	40 52       	subi	r20, 0x20	; 32
    3ba8:	41 93       	st	Z+, r20
    3baa:	02 d0       	rcall	.+4      	; 0x3bb0 <__ultoa_invert+0x84>
    3bac:	a9 f7       	brne	.-22     	; 0x3b98 <__ultoa_invert+0x6c>
    3bae:	ea cf       	rjmp	.-44     	; 0x3b84 <__ultoa_invert+0x58>
    3bb0:	b4 e0       	ldi	r27, 0x04	; 4
    3bb2:	a6 95       	lsr	r26
    3bb4:	97 95       	ror	r25
    3bb6:	87 95       	ror	r24
    3bb8:	77 95       	ror	r23
    3bba:	67 95       	ror	r22
    3bbc:	ba 95       	dec	r27
    3bbe:	c9 f7       	brne	.-14     	; 0x3bb2 <__ultoa_invert+0x86>
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	61 05       	cpc	r22, r1
    3bc4:	71 05       	cpc	r23, r1
    3bc6:	08 95       	ret
    3bc8:	9b 01       	movw	r18, r22
    3bca:	ac 01       	movw	r20, r24
    3bcc:	0a 2e       	mov	r0, r26
    3bce:	06 94       	lsr	r0
    3bd0:	57 95       	ror	r21
    3bd2:	47 95       	ror	r20
    3bd4:	37 95       	ror	r19
    3bd6:	27 95       	ror	r18
    3bd8:	ba 95       	dec	r27
    3bda:	c9 f7       	brne	.-14     	; 0x3bce <__ultoa_invert+0xa2>
    3bdc:	62 0f       	add	r22, r18
    3bde:	73 1f       	adc	r23, r19
    3be0:	84 1f       	adc	r24, r20
    3be2:	95 1f       	adc	r25, r21
    3be4:	a0 1d       	adc	r26, r0
    3be6:	08 95       	ret

00003be8 <_exit>:
    3be8:	f8 94       	cli

00003bea <__stop_program>:
    3bea:	ff cf       	rjmp	.-2      	; 0x3bea <__stop_program>
