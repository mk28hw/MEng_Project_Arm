
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018e  00800200  000044c8  0000455c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000044c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000027c  0080038e  0080038e  000046ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000046ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009f8  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017963  00000000  00000000  00005180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000371b  00000000  00000000  0001cae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005719  00000000  00000000  000201fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000208c  00000000  00000000  00025918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003ed7  00000000  00000000  000279a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ae73  00000000  00000000  0002b87b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a8  00000000  00000000  000366ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	fb c6       	rjmp	.+3574   	; 0xe1c <__vector_9>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__vector_25>
      68:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__vector_36>
      94:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z12printDataLCDv+0xda>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	e9 17       	cp	r30, r25
     168:	ec 17       	cp	r30, r28
     16a:	db 17       	cp	r29, r27
     16c:	df 17       	cp	r29, r31
     16e:	e5 17       	cp	r30, r21
     170:	23 18       	sub	r2, r3
     172:	f0 17       	cp	r31, r16
     174:	f4 17       	cp	r31, r20
     176:	fa 17       	cp	r31, r26
     178:	fe 17       	cp	r31, r30
     17a:	02 18       	sub	r0, r2
     17c:	08 18       	sub	r0, r8
     17e:	0c 18       	sub	r0, r12
     180:	10 18       	sub	r1, r0
     182:	23 18       	sub	r2, r3
     184:	16 18       	sub	r1, r6
     186:	1a 18       	sub	r1, r10
     188:	1e 18       	sub	r1, r14

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
     290:	e7 03       	fmuls	r22, r23
     292:	b4 14       	cp	r11, r4
     294:	49 15       	cp	r20, r9
     296:	66 1b       	sub	r22, r22

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	e8 ec       	ldi	r30, 0xC8	; 200
     2b0:	f4 e4       	ldi	r31, 0x44	; 68
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	ae 38       	cpi	r26, 0x8E	; 142
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	26 e0       	ldi	r18, 0x06	; 6
     2c4:	ae e8       	ldi	r26, 0x8E	; 142
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	aa 30       	cpi	r26, 0x0A	; 10
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__tablejump2__>
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 77 15 	call	0x2aee	; 0x2aee <main>
     2f6:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	serialWriting = NO;
	RS485_RX_ON
}
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	d2 2e       	mov	r13, r18
     33a:	ad b6       	in	r10, 0x3d	; 61
     33c:	be b6       	in	r11, 0x3e	; 62
     33e:	8d b7       	in	r24, 0x3d	; 61
     340:	9e b7       	in	r25, 0x3e	; 62
     342:	82 1b       	sub	r24, r18
     344:	91 09       	sbc	r25, r1
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	9e bf       	out	0x3e, r25	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	8d bf       	out	0x3d, r24	; 61
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	7c 01       	movw	r14, r24
     354:	8a 01       	movw	r16, r20
     356:	57 ff       	sbrs	r21, 7
     358:	02 c0       	rjmp	.+4      	; 0x35e <_Z8printLCDhhih+0x54>
     35a:	00 e0       	ldi	r16, 0x00	; 0
     35c:	10 e0       	ldi	r17, 0x00	; 0
     35e:	6d 2d       	mov	r22, r13
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatunsisf>
     36a:	9b 01       	movw	r18, r22
     36c:	ac 01       	movw	r20, r24
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	80 e2       	ldi	r24, 0x20	; 32
     374:	91 e4       	ldi	r25, 0x41	; 65
     376:	0e 94 0f 11 	call	0x221e	; 0x221e <pow>
     37a:	2b 01       	movw	r4, r22
     37c:	3c 01       	movw	r6, r24
     37e:	b8 01       	movw	r22, r16
     380:	01 2e       	mov	r0, r17
     382:	00 0c       	add	r0, r0
     384:	88 0b       	sbc	r24, r24
     386:	99 0b       	sbc	r25, r25
     388:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__floatsisf>
     38c:	a3 01       	movw	r20, r6
     38e:	92 01       	movw	r18, r4
     390:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__cmpsf2>
     394:	87 fd       	sbrc	r24, 7
     396:	0b c0       	rjmp	.+22     	; 0x3ae <_Z8printLCDhhih+0xa4>
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	40 e8       	ldi	r20, 0x80	; 128
     39e:	5f e3       	ldi	r21, 0x3F	; 63
     3a0:	c3 01       	movw	r24, r6
     3a2:	b2 01       	movw	r22, r4
     3a4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__subsf3>
     3a8:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__fixsfsi>
     3ac:	8b 01       	movw	r16, r22
     3ae:	1f 92       	push	r1
     3b0:	df 92       	push	r13
     3b2:	8a e1       	ldi	r24, 0x1A	; 26
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	9f 93       	push	r25
     3b8:	8f 93       	push	r24
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	6c 01       	movw	r12, r24
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <sprintf>
     3c8:	1f 93       	push	r17
     3ca:	0f 93       	push	r16
     3cc:	df 92       	push	r13
     3ce:	cf 92       	push	r12
     3d0:	ff 92       	push	r15
     3d2:	ef 92       	push	r14
     3d4:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <sprintf>
     3d8:	48 2d       	mov	r20, r8
     3da:	69 2d       	mov	r22, r9
     3dc:	87 e9       	ldi	r24, 0x97	; 151
     3de:	93 e0       	ldi	r25, 0x03	; 3
     3e0:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3e4:	b7 01       	movw	r22, r14
     3e6:	87 e9       	ldi	r24, 0x97	; 151
     3e8:	93 e0       	ldi	r25, 0x03	; 3
     3ea:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN5Print5printEPKc>
     3ee:	8d b7       	in	r24, 0x3d	; 61
     3f0:	9e b7       	in	r25, 0x3e	; 62
     3f2:	0c 96       	adiw	r24, 0x0c	; 12
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	9e bf       	out	0x3e, r25	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	8d bf       	out	0x3d, r24	; 61
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	be be       	out	0x3e, r11	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	ad be       	out	0x3d, r10	; 61
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	9f 90       	pop	r9
     428:	8f 90       	pop	r8
     42a:	7f 90       	pop	r7
     42c:	6f 90       	pop	r6
     42e:	5f 90       	pop	r5
     430:	4f 90       	pop	r4
     432:	08 95       	ret

00000434 <_Z8printLCDhhPKc>:
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ea 01       	movw	r28, r20
     43a:	46 2f       	mov	r20, r22
     43c:	68 2f       	mov	r22, r24
     43e:	87 e9       	ldi	r24, 0x97	; 151
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     446:	be 01       	movw	r22, r28
     448:	87 e9       	ldi	r24, 0x97	; 151
     44a:	93 e0       	ldi	r25, 0x03	; 3
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <_ZN5Print5printEPKc>

00000454 <_Z9padNumberih>:
     454:	8f 92       	push	r8
     456:	9f 92       	push	r9
     458:	af 92       	push	r10
     45a:	bf 92       	push	r11
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	00 d0       	rcall	.+0      	; 0x46e <_Z9padNumberih+0x1a>
     46e:	1f 92       	push	r1
     470:	1f 92       	push	r1
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	7c 01       	movw	r14, r24
     478:	96 2e       	mov	r9, r22
     47a:	87 2e       	mov	r8, r23
     47c:	ad b6       	in	r10, 0x3d	; 61
     47e:	be b6       	in	r11, 0x3e	; 62
     480:	8d b7       	in	r24, 0x3d	; 61
     482:	9e b7       	in	r25, 0x3e	; 62
     484:	84 1b       	sub	r24, r20
     486:	91 09       	sbc	r25, r1
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	9e bf       	out	0x3e, r25	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	8d bf       	out	0x3d, r24	; 61
     492:	0d b7       	in	r16, 0x3d	; 61
     494:	1e b7       	in	r17, 0x3e	; 62
     496:	0f 5f       	subi	r16, 0xFF	; 255
     498:	1f 4f       	sbci	r17, 0xFF	; 255
     49a:	1f 92       	push	r1
     49c:	4f 93       	push	r20
     49e:	8a e1       	ldi	r24, 0x1A	; 26
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	6c 01       	movw	r12, r24
     4ac:	9f 93       	push	r25
     4ae:	8f 93       	push	r24
     4b0:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <sprintf>
     4b4:	8f 92       	push	r8
     4b6:	9f 92       	push	r9
     4b8:	df 92       	push	r13
     4ba:	cf 92       	push	r12
     4bc:	1f 93       	push	r17
     4be:	0f 93       	push	r16
     4c0:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <sprintf>
     4c4:	b8 01       	movw	r22, r16
     4c6:	c7 01       	movw	r24, r14
     4c8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
     4cc:	8d b7       	in	r24, 0x3d	; 61
     4ce:	9e b7       	in	r25, 0x3e	; 62
     4d0:	0c 96       	adiw	r24, 0x0c	; 12
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	9e bf       	out	0x3e, r25	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	8d bf       	out	0x3d, r24	; 61
     4dc:	c7 01       	movw	r24, r14
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	be be       	out	0x3e, r11	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	ad be       	out	0x3d, r10	; 61
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	cf 90       	pop	r12
     502:	bf 90       	pop	r11
     504:	af 90       	pop	r10
     506:	9f 90       	pop	r9
     508:	8f 90       	pop	r8
     50a:	08 95       	ret

0000050c <_Z13setupSwitchesv>:
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	84 b9       	out	0x04, r24	; 4
     510:	84 b1       	in	r24, 0x04	; 4
     512:	88 7f       	andi	r24, 0xF8	; 248
     514:	84 b9       	out	0x04, r24	; 4
     516:	eb e6       	ldi	r30, 0x6B	; 107
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	87 60       	ori	r24, 0x07	; 7
     51e:	80 83       	st	Z, r24
     520:	e8 e6       	ldi	r30, 0x68	; 104
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	81 60       	ori	r24, 0x01	; 1
     528:	80 83       	st	Z, r24
     52a:	78 94       	sei
     52c:	08 95       	ret

0000052e <_Z13checkPositionhi>:
     52e:	83 30       	cpi	r24, 0x03	; 3
     530:	30 f4       	brcc	.+12     	; 0x53e <_Z13checkPositionhi+0x10>
     532:	cb 01       	movw	r24, r22
     534:	77 ff       	sbrs	r23, 7
     536:	1b c0       	rjmp	.+54     	; 0x56e <_Z13checkPositionhi+0x40>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	18 c0       	rjmp	.+48     	; 0x56e <_Z13checkPositionhi+0x40>
     53e:	83 30       	cpi	r24, 0x03	; 3
     540:	69 f4       	brne	.+26     	; 0x55c <_Z13checkPositionhi+0x2e>
     542:	cb 01       	movw	r24, r22
     544:	61 15       	cp	r22, r1
     546:	78 4f       	sbci	r23, 0xF8	; 248
     548:	14 f4       	brge	.+4      	; 0x54e <_Z13checkPositionhi+0x20>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	98 ef       	ldi	r25, 0xF8	; 248
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	28 e0       	ldi	r18, 0x08	; 8
     552:	92 07       	cpc	r25, r18
     554:	ac f0       	brlt	.+42     	; 0x580 <_Z13checkPositionhi+0x52>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	98 e0       	ldi	r25, 0x08	; 8
     55a:	08 95       	ret
     55c:	84 50       	subi	r24, 0x04	; 4
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	68 f4       	brcc	.+26     	; 0x57c <_Z13checkPositionhi+0x4e>
     562:	cb 01       	movw	r24, r22
     564:	64 3e       	cpi	r22, 0xE4	; 228
     566:	72 40       	sbci	r23, 0x02	; 2
     568:	14 f4       	brge	.+4      	; 0x56e <_Z13checkPositionhi+0x40>
     56a:	84 ee       	ldi	r24, 0xE4	; 228
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	85 3a       	cpi	r24, 0xA5	; 165
     570:	26 e0       	ldi	r18, 0x06	; 6
     572:	92 07       	cpc	r25, r18
     574:	2c f0       	brlt	.+10     	; 0x580 <_Z13checkPositionhi+0x52>
     576:	84 ea       	ldi	r24, 0xA4	; 164
     578:	96 e0       	ldi	r25, 0x06	; 6
     57a:	08 95       	ret
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	9f ef       	ldi	r25, 0xFF	; 255
     580:	08 95       	ret

00000582 <_Z11printSerial6Stringi>:
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	eb 01       	movw	r28, r22
     588:	bc 01       	movw	r22, r24
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	93 e0       	ldi	r25, 0x03	; 3
     58e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN5Print5printERK6String>
     592:	6b e4       	ldi	r22, 0x4B	; 75
     594:	73 e0       	ldi	r23, 0x03	; 3
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN5Print5printEPKc>
     59e:	4a e0       	ldi	r20, 0x0A	; 10
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	be 01       	movw	r22, r28
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	93 e0       	ldi	r25, 0x03	; 3
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <_ZN5Print7printlnEii>

000005b0 <_Z12error_decodeh>:
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	e6 97       	sbiw	r28, 0x36	; 54
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	08 2f       	mov	r16, r24
     5d2:	62 e6       	ldi	r22, 0x62	; 98
     5d4:	73 e0       	ldi	r23, 0x03	; 3
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	7c 01       	movw	r14, r24
     5dc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
     5e0:	62 e6       	ldi	r22, 0x62	; 98
     5e2:	73 e0       	ldi	r23, 0x03	; 3
     5e4:	ce 01       	movw	r24, r28
     5e6:	07 96       	adiw	r24, 0x07	; 7
     5e8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
     5ec:	10 2f       	mov	r17, r16
     5ee:	11 70       	andi	r17, 0x01	; 1
     5f0:	00 fd       	sbrc	r16, 0
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <_Z12error_decodeh+0x4a>
     5f4:	62 e6       	ldi	r22, 0x62	; 98
     5f6:	73 e0       	ldi	r23, 0x03	; 3
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <_Z12error_decodeh+0x4e>
     5fa:	60 e2       	ldi	r22, 0x20	; 32
     5fc:	72 e0       	ldi	r23, 0x02	; 2
     5fe:	ce 01       	movw	r24, r28
     600:	0d 96       	adiw	r24, 0x0d	; 13
     602:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
     606:	11 11       	cpse	r17, r1
     608:	03 c0       	rjmp	.+6      	; 0x610 <_Z12error_decodeh+0x60>
     60a:	62 e6       	ldi	r22, 0x62	; 98
     60c:	73 e0       	ldi	r23, 0x03	; 3
     60e:	02 c0       	rjmp	.+4      	; 0x614 <_Z12error_decodeh+0x64>
     610:	64 e2       	ldi	r22, 0x24	; 36
     612:	72 e0       	ldi	r23, 0x02	; 2
     614:	ce 01       	movw	r24, r28
     616:	43 96       	adiw	r24, 0x13	; 19
     618:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
     61c:	11 11       	cpse	r17, r1
     61e:	03 c0       	rjmp	.+6      	; 0x626 <_Z12error_decodeh+0x76>
     620:	62 e6       	ldi	r22, 0x62	; 98
     622:	73 e0       	ldi	r23, 0x03	; 3
     624:	02 c0       	rjmp	.+4      	; 0x62a <_Z12error_decodeh+0x7a>
     626:	68 e2       	ldi	r22, 0x28	; 40
     628:	72 e0       	ldi	r23, 0x02	; 2
     62a:	ce 01       	movw	r24, r28
     62c:	49 96       	adiw	r24, 0x19	; 25
     62e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
     632:	11 11       	cpse	r17, r1
     634:	03 c0       	rjmp	.+6      	; 0x63c <_Z12error_decodeh+0x8c>
     636:	62 e6       	ldi	r22, 0x62	; 98
     638:	73 e0       	ldi	r23, 0x03	; 3
     63a:	02 c0       	rjmp	.+4      	; 0x640 <_Z12error_decodeh+0x90>
     63c:	6c e2       	ldi	r22, 0x2C	; 44
     63e:	72 e0       	ldi	r23, 0x02	; 2
     640:	ce 01       	movw	r24, r28
     642:	4f 96       	adiw	r24, 0x1f	; 31
     644:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
     648:	11 11       	cpse	r17, r1
     64a:	03 c0       	rjmp	.+6      	; 0x652 <_Z12error_decodeh+0xa2>
     64c:	62 e6       	ldi	r22, 0x62	; 98
     64e:	73 e0       	ldi	r23, 0x03	; 3
     650:	02 c0       	rjmp	.+4      	; 0x656 <_Z12error_decodeh+0xa6>
     652:	60 e3       	ldi	r22, 0x30	; 48
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	ce 01       	movw	r24, r28
     658:	85 96       	adiw	r24, 0x25	; 37
     65a:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
     65e:	62 e6       	ldi	r22, 0x62	; 98
     660:	73 e0       	ldi	r23, 0x03	; 3
     662:	ce 01       	movw	r24, r28
     664:	8b 96       	adiw	r24, 0x2b	; 43
     666:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
     66a:	67 01       	movw	r12, r14
     66c:	00 e0       	ldi	r16, 0x00	; 0
     66e:	10 e0       	ldi	r17, 0x00	; 0
     670:	b6 01       	movw	r22, r12
     672:	ce 01       	movw	r24, r28
     674:	c1 96       	adiw	r24, 0x31	; 49
     676:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
     67a:	b8 01       	movw	r22, r16
     67c:	ce 01       	movw	r24, r28
     67e:	c1 96       	adiw	r24, 0x31	; 49
     680:	80 df       	rcall	.-256    	; 0x582 <_Z11printSerial6Stringi>
     682:	ce 01       	movw	r24, r28
     684:	c1 96       	adiw	r24, 0x31	; 49
     686:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
     68a:	0f 5f       	subi	r16, 0xFF	; 255
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
     68e:	96 e0       	ldi	r25, 0x06	; 6
     690:	c9 0e       	add	r12, r25
     692:	d1 1c       	adc	r13, r1
     694:	08 30       	cpi	r16, 0x08	; 8
     696:	11 05       	cpc	r17, r1
     698:	59 f7       	brne	.-42     	; 0x670 <_Z12error_decodeh+0xc0>
     69a:	8e 01       	movw	r16, r28
     69c:	0f 5c       	subi	r16, 0xCF	; 207
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	06 50       	subi	r16, 0x06	; 6
     6a2:	11 09       	sbc	r17, r1
     6a4:	c8 01       	movw	r24, r16
     6a6:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
     6aa:	e0 16       	cp	r14, r16
     6ac:	f1 06       	cpc	r15, r17
     6ae:	c1 f7       	brne	.-16     	; 0x6a0 <_Z12error_decodeh+0xf0>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	e6 96       	adiw	r28, 0x36	; 54
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	08 95       	ret

000006d2 <_Z12combineToCSVPih>:
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	2c 97       	sbiw	r28, 0x0c	; 12
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	7c 01       	movw	r14, r24
     6f4:	c4 2e       	mov	r12, r20
     6f6:	fb 01       	movw	r30, r22
     6f8:	61 91       	ld	r22, Z+
     6fa:	71 91       	ld	r23, Z+
     6fc:	8f 01       	movw	r16, r30
     6fe:	4a e0       	ldi	r20, 0x0A	; 10
     700:	a9 de       	rcall	.-686    	; 0x454 <_Z9padNumberih>
     702:	dd 24       	eor	r13, r13
     704:	d3 94       	inc	r13
     706:	dc 14       	cp	r13, r12
     708:	30 f5       	brcc	.+76     	; 0x756 <_Z12combineToCSVPih+0x84>
     70a:	f8 01       	movw	r30, r16
     70c:	61 91       	ld	r22, Z+
     70e:	71 91       	ld	r23, Z+
     710:	8f 01       	movw	r16, r30
     712:	46 e0       	ldi	r20, 0x06	; 6
     714:	ce 01       	movw	r24, r28
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	9d de       	rcall	.-710    	; 0x454 <_Z9padNumberih>
     71a:	b7 01       	movw	r22, r14
     71c:	ce 01       	movw	r24, r28
     71e:	07 96       	adiw	r24, 0x07	; 7
     720:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
     724:	64 e3       	ldi	r22, 0x34	; 52
     726:	72 e0       	ldi	r23, 0x02	; 2
     728:	ce 01       	movw	r24, r28
     72a:	07 96       	adiw	r24, 0x07	; 7
     72c:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
     730:	be 01       	movw	r22, r28
     732:	6f 5f       	subi	r22, 0xFF	; 255
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
     73a:	bc 01       	movw	r22, r24
     73c:	c7 01       	movw	r24, r14
     73e:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
     742:	ce 01       	movw	r24, r28
     744:	07 96       	adiw	r24, 0x07	; 7
     746:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
     74a:	ce 01       	movw	r24, r28
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
     752:	d3 94       	inc	r13
     754:	d8 cf       	rjmp	.-80     	; 0x706 <_Z12combineToCSVPih+0x34>
     756:	c7 01       	movw	r24, r14
     758:	2c 96       	adiw	r28, 0x0c	; 12
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	08 95       	ret

00000776 <_Z16dumpDataToSerialPih>:
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	00 d0       	rcall	.+0      	; 0x77c <_Z16dumpDataToSerialPih+0x6>
     77c:	00 d0       	rcall	.+0      	; 0x77e <_Z16dumpDataToSerialPih+0x8>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	46 2f       	mov	r20, r22
     784:	bc 01       	movw	r22, r24
     786:	ce 01       	movw	r24, r28
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	a3 df       	rcall	.-186    	; 0x6d2 <_Z12combineToCSVPih>
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	93 e0       	ldi	r25, 0x03	; 3
     796:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_ZN5Print7printlnERK6String>
     79a:	ce 01       	movw	r24, r28
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
     7a2:	26 96       	adiw	r28, 0x06	; 6
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <_Z8sumBytesPhh>:
     7b4:	38 2f       	mov	r19, r24
     7b6:	fc 01       	movw	r30, r24
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	2e 2f       	mov	r18, r30
     7be:	23 1b       	sub	r18, r19
     7c0:	26 17       	cp	r18, r22
     7c2:	20 f4       	brcc	.+8      	; 0x7cc <_Z8sumBytesPhh+0x18>
     7c4:	21 91       	ld	r18, Z+
     7c6:	82 0f       	add	r24, r18
     7c8:	91 1d       	adc	r25, r1
     7ca:	f8 cf       	rjmp	.-16     	; 0x7bc <_Z8sumBytesPhh+0x8>
     7cc:	08 95       	ret

000007ce <_GLOBAL__sub_I_position_old>:
     7ce:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     7d2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     7d6:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <currPos+0x1>
     7da:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <currPos>
     7de:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <arm+0x1>
     7e2:	24 e1       	ldi	r18, 0x14	; 20
     7e4:	44 e0       	ldi	r20, 0x04	; 4
     7e6:	67 e2       	ldi	r22, 0x27	; 39
     7e8:	87 e9       	ldi	r24, 0x97	; 151
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <_ZN17LiquidCrystal_I2CC1Ehhh>

000007f0 <_Z11printBufferv>:
     7f0:	66 e3       	ldi	r22, 0x36	; 54
     7f2:	72 e0       	ldi	r23, 0x02	; 2
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN5Print5printEPKc>
     7fc:	8c e9       	ldi	r24, 0x9C	; 156
     7fe:	94 e0       	ldi	r25, 0x04	; 4
     800:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN14HardwareSerial9availableEv>
     804:	4a e0       	ldi	r20, 0x0A	; 10
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	bc 01       	movw	r22, r24
     80a:	8f ef       	ldi	r24, 0xFF	; 255
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_ZN5Print5printEii>
     812:	61 e4       	ldi	r22, 0x41	; 65
     814:	72 e0       	ldi	r23, 0x02	; 2
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	93 e0       	ldi	r25, 0x03	; 3
     81a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print7printlnEPKc>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <serialReading>
     824:	8c e9       	ldi	r24, 0x9C	; 156
     826:	94 e0       	ldi	r25, 0x04	; 4
     828:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN14HardwareSerial9availableEv>
     82c:	89 2b       	or	r24, r25
     82e:	19 f1       	breq	.+70     	; 0x876 <_Z11printBufferv+0x86>
     830:	8c e9       	ldi	r24, 0x9C	; 156
     832:	94 e0       	ldi	r25, 0x04	; 4
     834:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN14HardwareSerial9availableEv>
     838:	4a e0       	ldi	r20, 0x0A	; 10
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	bc 01       	movw	r22, r24
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_ZN5Print5printEii>
     846:	67 e5       	ldi	r22, 0x57	; 87
     848:	72 e0       	ldi	r23, 0x02	; 2
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN5Print5printEPKc>
     852:	8c e9       	ldi	r24, 0x9C	; 156
     854:	94 e0       	ldi	r25, 0x04	; 4
     856:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     85a:	4a e0       	ldi	r20, 0x0A	; 10
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	bc 01       	movw	r22, r24
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN5Print7printlnEii>
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
     874:	d7 cf       	rjmp	.-82     	; 0x824 <_Z11printBufferv+0x34>
     876:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <serialReading>
     87a:	6a e5       	ldi	r22, 0x5A	; 90
     87c:	72 e0       	ldi	r23, 0x02	; 2
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	93 e0       	ldi	r25, 0x03	; 3
     882:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <_ZN5Print7printlnEPKc>

00000886 <_Z12printDataLCDv>:
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	6a e0       	ldi	r22, 0x0A	; 10
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
     8aa:	8c e9       	ldi	r24, 0x9C	; 156
     8ac:	94 e0       	ldi	r25, 0x04	; 4
     8ae:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN14HardwareSerial9availableEv>
     8b2:	18 16       	cp	r1, r24
     8b4:	19 06       	cpc	r1, r25
     8b6:	0c f0       	brlt	.+2      	; 0x8ba <_Z12printDataLCDv+0x34>
     8b8:	83 c1       	rjmp	.+774    	; 0xbc0 <_Z12printDataLCDv+0x33a>
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <serialReading>
     8c0:	8c e9       	ldi	r24, 0x9C	; 156
     8c2:	94 e0       	ldi	r25, 0x04	; 4
     8c4:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	91 05       	cpc	r25, r1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <_Z12printDataLCDv+0x4a>
     8ce:	78 c1       	rjmp	.+752    	; 0xbc0 <_Z12printDataLCDv+0x33a>
     8d0:	8c e9       	ldi	r24, 0x9C	; 156
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     8d8:	8f 3f       	cpi	r24, 0xFF	; 255
     8da:	91 05       	cpc	r25, r1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <_Z12printDataLCDv+0x5a>
     8de:	70 c1       	rjmp	.+736    	; 0xbc0 <_Z12printDataLCDv+0x33a>
     8e0:	8c e9       	ldi	r24, 0x9C	; 156
     8e2:	94 e0       	ldi	r25, 0x04	; 4
     8e4:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     8e8:	ec 01       	movw	r28, r24
     8ea:	b8 2e       	mov	r11, r24
     8ec:	2f ef       	ldi	r18, 0xFF	; 255
     8ee:	82 17       	cp	r24, r18
     8f0:	b9 f3       	breq	.-18     	; 0x8e0 <_Z12printDataLCDv+0x5a>
     8f2:	8c e9       	ldi	r24, 0x9C	; 156
     8f4:	94 e0       	ldi	r25, 0x04	; 4
     8f6:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     8fa:	08 2f       	mov	r16, r24
     8fc:	8c e9       	ldi	r24, 0x9C	; 156
     8fe:	94 e0       	ldi	r25, 0x04	; 4
     900:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     904:	18 2f       	mov	r17, r24
     906:	81 11       	cpse	r24, r1
     908:	02 c0       	rjmp	.+4      	; 0x90e <_Z12printDataLCDv+0x88>
     90a:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <error_byte_old>
     90e:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <error_byte_old>
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	66 e0       	ldi	r22, 0x06	; 6
     916:	87 e9       	ldi	r24, 0x97	; 151
     918:	93 e0       	ldi	r25, 0x03	; 3
     91a:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     91e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <error_counter>
     922:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <error_counter+0x1>
     926:	11 11       	cpse	r17, r1
     928:	02 c0       	rjmp	.+4      	; 0x92e <_Z12printDataLCDv+0xa8>
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	11 f1       	breq	.+68     	; 0x972 <_Z12printDataLCDv+0xec>
     92e:	8b 30       	cpi	r24, 0x0B	; 11
     930:	91 05       	cpc	r25, r1
     932:	14 f4       	brge	.+4      	; 0x938 <_Z12printDataLCDv+0xb2>
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	02 c0       	rjmp	.+4      	; 0x93c <_Z12printDataLCDv+0xb6>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <error_counter+0x1>
     940:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <error_counter>
     944:	81 2f       	mov	r24, r17
     946:	34 de       	rcall	.-920    	; 0x5b0 <_Z12error_decodeh>
     948:	66 e8       	ldi	r22, 0x86	; 134
     94a:	72 e0       	ldi	r23, 0x02	; 2
     94c:	87 e9       	ldi	r24, 0x97	; 151
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN5Print5printEPKc>
     954:	4a e0       	ldi	r20, 0x0A	; 10
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 91 a7 03 	lds	r22, 0x03A7	; 0x8003a7 <error_byte_old>
     95c:	87 e9       	ldi	r24, 0x97	; 151
     95e:	93 e0       	ldi	r25, 0x03	; 3
     960:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN5Print5printEhi>
     964:	6a e8       	ldi	r22, 0x8A	; 138
     966:	72 e0       	ldi	r23, 0x02	; 2
     968:	87 e9       	ldi	r24, 0x97	; 151
     96a:	93 e0       	ldi	r25, 0x03	; 3
     96c:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN5Print5printEPKc>
     970:	01 c1       	rjmp	.+514    	; 0xb74 <_Z12printDataLCDv+0x2ee>
     972:	03 30       	cpi	r16, 0x03	; 3
     974:	08 f4       	brcc	.+2      	; 0x978 <_Z12printDataLCDv+0xf2>
     976:	fe c0       	rjmp	.+508    	; 0xb74 <_Z12printDataLCDv+0x2ee>
     978:	8c e9       	ldi	r24, 0x9C	; 156
     97a:	94 e0       	ldi	r25, 0x04	; 4
     97c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     980:	8c 01       	movw	r16, r24
     982:	8c e9       	ldi	r24, 0x9C	; 156
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	38 2f       	mov	r19, r24
     990:	02 0f       	add	r16, r18
     992:	13 1f       	adc	r17, r19
     994:	7e 01       	movw	r14, r28
     996:	ff 24       	eor	r15, r15
     998:	3d e0       	ldi	r19, 0x0D	; 13
     99a:	c3 9f       	mul	r28, r19
     99c:	e0 01       	movw	r28, r0
     99e:	11 24       	eor	r1, r1
     9a0:	c8 55       	subi	r28, 0x58	; 88
     9a2:	dc 4f       	sbci	r29, 0xFC	; 252
     9a4:	8e 81       	ldd	r24, Y+6	; 0x06
     9a6:	2c 81       	ldd	r18, Y+4	; 0x04
     9a8:	3d 81       	ldd	r19, Y+5	; 0x05
     9aa:	9f 81       	ldd	r25, Y+7	; 0x07
     9ac:	81 11       	cpse	r24, r1
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <_Z12printDataLCDv+0x13a>
     9b0:	a8 01       	movw	r20, r16
     9b2:	4c 59       	subi	r20, 0x9C	; 156
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	42 17       	cp	r20, r18
     9b8:	53 07       	cpc	r21, r19
     9ba:	44 f4       	brge	.+16     	; 0x9cc <_Z12printDataLCDv+0x146>
     9bc:	9f 5f       	subi	r25, 0xFF	; 255
     9be:	06 c0       	rjmp	.+12     	; 0x9cc <_Z12printDataLCDv+0x146>
     9c0:	2c 59       	subi	r18, 0x9C	; 156
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	20 17       	cp	r18, r16
     9c6:	31 07       	cpc	r19, r17
     9c8:	0c f4       	brge	.+2      	; 0x9cc <_Z12printDataLCDv+0x146>
     9ca:	91 50       	subi	r25, 0x01	; 1
     9cc:	8d e0       	ldi	r24, 0x0D	; 13
     9ce:	8e 9d       	mul	r24, r14
     9d0:	f0 01       	movw	r30, r0
     9d2:	8f 9d       	mul	r24, r15
     9d4:	f0 0d       	add	r31, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	e8 55       	subi	r30, 0x58	; 88
     9da:	fc 4f       	sbci	r31, 0xFC	; 252
     9dc:	97 83       	std	Z+7, r25	; 0x07
     9de:	8c e9       	ldi	r24, 0x9C	; 156
     9e0:	94 e0       	ldi	r25, 0x04	; 4
     9e2:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     9e6:	4c 01       	movw	r8, r24
     9e8:	8c e9       	ldi	r24, 0x9C	; 156
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	38 2f       	mov	r19, r24
     9f6:	82 0e       	add	r8, r18
     9f8:	93 1e       	adc	r9, r19
     9fa:	8c e9       	ldi	r24, 0x9C	; 156
     9fc:	94 e0       	ldi	r25, 0x04	; 4
     9fe:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a02:	ec 01       	movw	r28, r24
     a04:	8c e9       	ldi	r24, 0x9C	; 156
     a06:	94 e0       	ldi	r25, 0x04	; 4
     a08:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	38 2f       	mov	r19, r24
     a12:	c2 0f       	add	r28, r18
     a14:	d3 1f       	adc	r29, r19
     a16:	8c e9       	ldi	r24, 0x9C	; 156
     a18:	94 e0       	ldi	r25, 0x04	; 4
     a1a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a1e:	8c e9       	ldi	r24, 0x9C	; 156
     a20:	94 e0       	ldi	r25, 0x04	; 4
     a22:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a26:	8c e9       	ldi	r24, 0x9C	; 156
     a28:	94 e0       	ldi	r25, 0x04	; 4
     a2a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a2e:	8c e9       	ldi	r24, 0x9C	; 156
     a30:	94 e0       	ldi	r25, 0x04	; 4
     a32:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a36:	8c e9       	ldi	r24, 0x9C	; 156
     a38:	94 e0       	ldi	r25, 0x04	; 4
     a3a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a3e:	8c e9       	ldi	r24, 0x9C	; 156
     a40:	94 e0       	ldi	r25, 0x04	; 4
     a42:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a46:	8c e9       	ldi	r24, 0x9C	; 156
     a48:	94 e0       	ldi	r25, 0x04	; 4
     a4a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a4e:	8c e9       	ldi	r24, 0x9C	; 156
     a50:	94 e0       	ldi	r25, 0x04	; 4
     a52:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a56:	8c e9       	ldi	r24, 0x9C	; 156
     a58:	94 e0       	ldi	r25, 0x04	; 4
     a5a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	81 14       	cp	r8, r1
     a62:	54 e0       	ldi	r21, 0x04	; 4
     a64:	95 06       	cpc	r9, r21
     a66:	0c f4       	brge	.+2      	; 0xa6a <_Z12printDataLCDv+0x1e4>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	c1 15       	cp	r28, r1
     a6c:	94 e0       	ldi	r25, 0x04	; 4
     a6e:	d9 07       	cpc	r29, r25
     a70:	24 f0       	brlt	.+8      	; 0xa7a <_Z12printDataLCDv+0x1f4>
     a72:	d4 50       	subi	r29, 0x04	; 4
     a74:	aa 24       	eor	r10, r10
     a76:	a3 94       	inc	r10
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <_Z12printDataLCDv+0x1f6>
     a7a:	a1 2c       	mov	r10, r1
     a7c:	9d e0       	ldi	r25, 0x0D	; 13
     a7e:	9e 9d       	mul	r25, r14
     a80:	90 01       	movw	r18, r0
     a82:	9f 9d       	mul	r25, r15
     a84:	30 0d       	add	r19, r0
     a86:	11 24       	eor	r1, r1
     a88:	f9 01       	movw	r30, r18
     a8a:	e8 55       	subi	r30, 0x58	; 88
     a8c:	fc 4f       	sbci	r31, 0xFC	; 252
     a8e:	6f 01       	movw	r12, r30
     a90:	86 83       	std	Z+6, r24	; 0x06
     a92:	15 83       	std	Z+5, r17	; 0x05
     a94:	04 83       	std	Z+4, r16	; 0x04
     a96:	d3 87       	std	Z+11, r29	; 0x0b
     a98:	c2 87       	std	Z+10, r28	; 0x0a
     a9a:	21 e0       	ldi	r18, 0x01	; 1
     a9c:	a7 01       	movw	r20, r14
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	33 dc       	rcall	.-1946   	; 0x30a <_Z8printLCDhhih>
     aa4:	f6 01       	movw	r30, r12
     aa6:	83 81       	ldd	r24, Z+3	; 0x03
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	29 f0       	breq	.+10     	; 0xab6 <_Z12printDataLCDv+0x230>
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	31 f0       	breq	.+12     	; 0xabc <_Z12printDataLCDv+0x236>
     ab0:	67 e7       	ldi	r22, 0x77	; 119
     ab2:	72 e0       	ldi	r23, 0x02	; 2
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <_Z12printDataLCDv+0x23a>
     ab6:	6c e7       	ldi	r22, 0x7C	; 124
     ab8:	72 e0       	ldi	r23, 0x02	; 2
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <_Z12printDataLCDv+0x23a>
     abc:	61 e8       	ldi	r22, 0x81	; 129
     abe:	72 e0       	ldi	r23, 0x02	; 2
     ac0:	87 e9       	ldi	r24, 0x97	; 151
     ac2:	93 e0       	ldi	r25, 0x03	; 3
     ac4:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN5Print5printEPKc>
     ac8:	2d e0       	ldi	r18, 0x0D	; 13
     aca:	2e 9d       	mul	r18, r14
     acc:	c0 01       	movw	r24, r0
     ace:	2f 9d       	mul	r18, r15
     ad0:	90 0d       	add	r25, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	9c 01       	movw	r18, r24
     ad6:	28 55       	subi	r18, 0x58	; 88
     ad8:	3c 4f       	sbci	r19, 0xFC	; 252
     ada:	79 01       	movw	r14, r18
     adc:	f9 01       	movw	r30, r18
     ade:	64 81       	ldd	r22, Z+4	; 0x04
     ae0:	75 81       	ldd	r23, Z+5	; 0x05
     ae2:	07 2e       	mov	r0, r23
     ae4:	00 0c       	add	r0, r0
     ae6:	88 0b       	sbc	r24, r24
     ae8:	99 0b       	sbc	r25, r25
     aea:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__floatsisf>
     aee:	28 e5       	ldi	r18, 0x58	; 88
     af0:	39 e3       	ldi	r19, 0x39	; 57
     af2:	44 eb       	ldi	r20, 0xB4	; 180
     af4:	5d e3       	ldi	r21, 0x3D	; 61
     af6:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     afa:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__fixsfsi>
     afe:	24 e0       	ldi	r18, 0x04	; 4
     b00:	ab 01       	movw	r20, r22
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	01 dc       	rcall	.-2046   	; 0x30a <_Z8printLCDhhih>
     b08:	6f ed       	ldi	r22, 0xDF	; 223
     b0a:	87 e9       	ldi	r24, 0x97	; 151
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN5Print5printEc>
     b12:	f7 01       	movw	r30, r14
     b14:	40 85       	ldd	r20, Z+8	; 0x08
     b16:	51 85       	ldd	r21, Z+9	; 0x09
     b18:	24 e0       	ldi	r18, 0x04	; 4
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	83 e0       	ldi	r24, 0x03	; 3
     b1e:	f5 db       	rcall	.-2070   	; 0x30a <_Z8printLCDhhih>
     b20:	81 14       	cp	r8, r1
     b22:	f4 e0       	ldi	r31, 0x04	; 4
     b24:	9f 06       	cpc	r9, r31
     b26:	14 f4       	brge	.+4      	; 0xb2c <_Z12printDataLCDv+0x2a6>
     b28:	6f e7       	ldi	r22, 0x7F	; 127
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <_Z12printDataLCDv+0x2a8>
     b2c:	6e e7       	ldi	r22, 0x7E	; 126
     b2e:	87 e9       	ldi	r24, 0x97	; 151
     b30:	93 e0       	ldi	r25, 0x03	; 3
     b32:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN5Print5printEc>
     b36:	24 e0       	ldi	r18, 0x04	; 4
     b38:	ae 01       	movw	r20, r28
     b3a:	63 e0       	ldi	r22, 0x03	; 3
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	e5 db       	rcall	.-2102   	; 0x30a <_Z8printLCDhhih>
     b40:	a1 10       	cpse	r10, r1
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <_Z12printDataLCDv+0x2c2>
     b44:	6f e7       	ldi	r22, 0x7F	; 127
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <_Z12printDataLCDv+0x2c4>
     b48:	6e e7       	ldi	r22, 0x7E	; 126
     b4a:	87 e9       	ldi	r24, 0x97	; 151
     b4c:	93 e0       	ldi	r25, 0x03	; 3
     b4e:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN5Print5printEc>
     b52:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <servoID_old>
     b56:	b8 12       	cpse	r11, r24
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <_Z12printDataLCDv+0x2de>
     b5a:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <currPos>
     b5e:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <currPos+0x1>
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <_Z12printDataLCDv+0x2e2>
     b64:	90 2f       	mov	r25, r16
     b66:	81 2f       	mov	r24, r17
     b68:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <currPos>
     b6c:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <currPos+0x1>
     b70:	b0 92 fe 03 	sts	0x03FE, r11	; 0x8003fe <servoID_old>
     b74:	8c e9       	ldi	r24, 0x9C	; 156
     b76:	94 e0       	ldi	r25, 0x04	; 4
     b78:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN14HardwareSerial9availableEv>
     b7c:	18 16       	cp	r1, r24
     b7e:	19 06       	cpc	r1, r25
     b80:	2c f4       	brge	.+10     	; 0xb8c <_Z12printDataLCDv+0x306>
     b82:	8c e9       	ldi	r24, 0x9C	; 156
     b84:	94 e0       	ldi	r25, 0x04	; 4
     b86:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     b8a:	f4 cf       	rjmp	.-24     	; 0xb74 <_Z12printDataLCDv+0x2ee>
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
     b98:	40 91 a3 03 	lds	r20, 0x03A3	; 0x8003a3 <cycle_counter>
     b9c:	50 91 a4 03 	lds	r21, 0x03A4	; 0x8003a4 <cycle_counter+0x1>
     ba0:	49 30       	cpi	r20, 0x09	; 9
     ba2:	51 05       	cpc	r21, r1
     ba4:	1c f4       	brge	.+6      	; 0xbac <_Z12printDataLCDv+0x326>
     ba6:	4f 5f       	subi	r20, 0xFF	; 255
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <_Z12printDataLCDv+0x32a>
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	50 93 a4 03 	sts	0x03A4, r21	; 0x8003a4 <cycle_counter+0x1>
     bb4:	40 93 a3 03 	sts	0x03A3, r20	; 0x8003a3 <cycle_counter>
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	82 e1       	ldi	r24, 0x12	; 18
     bbe:	a5 db       	rcall	.-2230   	; 0x30a <_Z8printLCDhhih>
     bc0:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <serialReading>
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	bf 90       	pop	r11
     bd6:	af 90       	pop	r10
     bd8:	9f 90       	pop	r9
     bda:	8f 90       	pop	r8
     bdc:	08 95       	ret

00000bde <_Z10writeServohhPhh>:
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	18 2f       	mov	r17, r24
     bec:	d6 2f       	mov	r29, r22
     bee:	7a 01       	movw	r14, r20
     bf0:	02 2f       	mov	r16, r18
     bf2:	c6 e0       	ldi	r28, 0x06	; 6
     bf4:	c6 0f       	add	r28, r22
     bf6:	c2 0f       	add	r28, r18
     bf8:	62 2f       	mov	r22, r18
     bfa:	ca 01       	movw	r24, r20
     bfc:	db dd       	rcall	.-1098   	; 0x7b4 <_Z8sumBytesPhh>
     bfe:	c1 0f       	add	r28, r17
     c00:	8c 0f       	add	r24, r28
     c02:	c8 2f       	mov	r28, r24
     c04:	c0 95       	com	r28
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <serialWriting>
     c0c:	8c e9       	ldi	r24, 0x9C	; 156
     c0e:	94 e0       	ldi	r25, 0x04	; 4
     c10:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN14HardwareSerial9availableEv>
     c14:	89 2b       	or	r24, r25
     c16:	29 f0       	breq	.+10     	; 0xc22 <_Z10writeServohhPhh+0x44>
     c18:	8c e9       	ldi	r24, 0x9C	; 156
     c1a:	94 e0       	ldi	r25, 0x04	; 4
     c1c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
     c20:	f5 cf       	rjmp	.-22     	; 0xc0c <_Z10writeServohhPhh+0x2e>
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	0e 94 60 18 	call	0x30c0	; 0x30c0 <digitalWrite>
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	0e 94 60 18 	call	0x30c0	; 0x30c0 <digitalWrite>
     c32:	65 e0       	ldi	r22, 0x05	; 5
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
     c3e:	6f ef       	ldi	r22, 0xFF	; 255
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	8c e9       	ldi	r24, 0x9C	; 156
     c44:	94 e0       	ldi	r25, 0x04	; 4
     c46:	5a db       	rcall	.-2380   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     c48:	6f ef       	ldi	r22, 0xFF	; 255
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	8c e9       	ldi	r24, 0x9C	; 156
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	55 db       	rcall	.-2390   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     c52:	61 2f       	mov	r22, r17
     c54:	8c e9       	ldi	r24, 0x9C	; 156
     c56:	94 e0       	ldi	r25, 0x04	; 4
     c58:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN14HardwareSerial5writeEh>
     c5c:	10 e0       	ldi	r17, 0x00	; 0
     c5e:	b8 01       	movw	r22, r16
     c60:	6d 5f       	subi	r22, 0xFD	; 253
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	8c e9       	ldi	r24, 0x9C	; 156
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	49 db       	rcall	.-2414   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     c6a:	63 e0       	ldi	r22, 0x03	; 3
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	8c e9       	ldi	r24, 0x9C	; 156
     c70:	94 e0       	ldi	r25, 0x04	; 4
     c72:	44 db       	rcall	.-2424   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     c74:	6d 2f       	mov	r22, r29
     c76:	8c e9       	ldi	r24, 0x9C	; 156
     c78:	94 e0       	ldi	r25, 0x04	; 4
     c7a:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN14HardwareSerial5writeEh>
     c7e:	a8 01       	movw	r20, r16
     c80:	b7 01       	movw	r22, r14
     c82:	8c e9       	ldi	r24, 0x9C	; 156
     c84:	94 e0       	ldi	r25, 0x04	; 4
     c86:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN5Print5writeEPKhj>
     c8a:	6c 2f       	mov	r22, r28
     c8c:	8c e9       	ldi	r24, 0x9C	; 156
     c8e:	94 e0       	ldi	r25, 0x04	; 4
     c90:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN14HardwareSerial5writeEh>
     c94:	8c e9       	ldi	r24, 0x9C	; 156
     c96:	94 e0       	ldi	r25, 0x04	; 4
     c98:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZN14HardwareSerial5flushEv>
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	0e 94 60 18 	call	0x30c0	; 0x30c0 <digitalWrite>
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	0e 94 60 18 	call	0x30c0	; 0x30c0 <digitalWrite>
     cac:	65 e0       	ldi	r22, 0x05	; 5
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
     cb8:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <serialWriting>
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	08 95       	ret

00000cca <_Z9moveSpeedhii>:
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	00 d0       	rcall	.+0      	; 0xcda <_Z9moveSpeedhii+0x10>
     cda:	1f 92       	push	r1
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	18 2f       	mov	r17, r24
     ce2:	7a 01       	movw	r14, r20
     ce4:	24 dc       	rcall	.-1976   	; 0x52e <_Z13checkPositionhi>
     ce6:	d8 2e       	mov	r13, r24
     ce8:	09 2f       	mov	r16, r25
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	eb 82       	std	Y+3, r14	; 0x03
     cf0:	fc 82       	std	Y+4, r15	; 0x04
     cf2:	24 e0       	ldi	r18, 0x04	; 4
     cf4:	ae 01       	movw	r20, r28
     cf6:	4f 5f       	subi	r20, 0xFF	; 255
     cf8:	5f 4f       	sbci	r21, 0xFF	; 255
     cfa:	6e e1       	ldi	r22, 0x1E	; 30
     cfc:	81 2f       	mov	r24, r17
     cfe:	6f df       	rcall	.-290    	; 0xbde <_Z10writeServohhPhh>
     d00:	21 2f       	mov	r18, r17
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	8d e0       	ldi	r24, 0x0D	; 13
     d06:	18 9f       	mul	r17, r24
     d08:	f0 01       	movw	r30, r0
     d0a:	11 24       	eor	r1, r1
     d0c:	e8 55       	subi	r30, 0x58	; 88
     d0e:	fc 4f       	sbci	r31, 0xFC	; 252
     d10:	d4 82       	std	Z+4, r13	; 0x04
     d12:	05 83       	std	Z+5, r16	; 0x05
     d14:	e1 14       	cp	r14, r1
     d16:	94 e0       	ldi	r25, 0x04	; 4
     d18:	f9 06       	cpc	r15, r25
     d1a:	1c f0       	brlt	.+6      	; 0xd22 <_Z9moveSpeedhii+0x58>
     d1c:	c7 01       	movw	r24, r14
     d1e:	94 50       	subi	r25, 0x04	; 4
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <_Z9moveSpeedhii+0x5a>
     d22:	c7 01       	movw	r24, r14
     d24:	4d e0       	ldi	r20, 0x0D	; 13
     d26:	42 9f       	mul	r20, r18
     d28:	f0 01       	movw	r30, r0
     d2a:	43 9f       	mul	r20, r19
     d2c:	f0 0d       	add	r31, r0
     d2e:	11 24       	eor	r1, r1
     d30:	e8 55       	subi	r30, 0x58	; 88
     d32:	fc 4f       	sbci	r31, 0xFC	; 252
     d34:	91 87       	std	Z+9, r25	; 0x09
     d36:	80 87       	std	Z+8, r24	; 0x08
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	e1 14       	cp	r14, r1
     d3c:	94 e0       	ldi	r25, 0x04	; 4
     d3e:	f9 06       	cpc	r15, r25
     d40:	0c f4       	brge	.+2      	; 0xd44 <_Z9moveSpeedhii+0x7a>
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	86 83       	std	Z+6, r24	; 0x06
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	08 95       	ret

00000d5e <_Z14setTorqueLimithi>:
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	1f 92       	push	r1
     d64:	1f 92       	push	r1
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	69 83       	std	Y+1, r22	; 0x01
     d6c:	7a 83       	std	Y+2, r23	; 0x02
     d6e:	22 e0       	ldi	r18, 0x02	; 2
     d70:	ae 01       	movw	r20, r28
     d72:	4f 5f       	subi	r20, 0xFF	; 255
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	62 e2       	ldi	r22, 0x22	; 34
     d78:	32 df       	rcall	.-412    	; 0xbde <_Z10writeServohhPhh>
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <_Z7setModehh>:
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <_Z7setModehh+0xa>
     d8e:	1f 92       	push	r1
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	18 2f       	mov	r17, r24
     d96:	06 2f       	mov	r16, r22
     d98:	61 30       	cpi	r22, 0x01	; 1
     d9a:	29 f4       	brne	.+10     	; 0xda6 <_Z7setModehh+0x22>
     d9c:	19 82       	std	Y+1, r1	; 0x01
     d9e:	1a 82       	std	Y+2, r1	; 0x02
     da0:	1b 82       	std	Y+3, r1	; 0x03
     da2:	1c 82       	std	Y+4, r1	; 0x04
     da4:	08 c0       	rjmp	.+16     	; 0xdb6 <_Z7setModehh+0x32>
     da6:	62 30       	cpi	r22, 0x02	; 2
     da8:	81 f4       	brne	.+32     	; 0xdca <_Z7setModehh+0x46>
     daa:	9f ef       	ldi	r25, 0xFF	; 255
     dac:	99 83       	std	Y+1, r25	; 0x01
     dae:	8f e0       	ldi	r24, 0x0F	; 15
     db0:	8a 83       	std	Y+2, r24	; 0x02
     db2:	9b 83       	std	Y+3, r25	; 0x03
     db4:	8c 83       	std	Y+4, r24	; 0x04
     db6:	24 e0       	ldi	r18, 0x04	; 4
     db8:	ae 01       	movw	r20, r28
     dba:	4f 5f       	subi	r20, 0xFF	; 255
     dbc:	5f 4f       	sbci	r21, 0xFF	; 255
     dbe:	66 e0       	ldi	r22, 0x06	; 6
     dc0:	81 2f       	mov	r24, r17
     dc2:	0d df       	rcall	.-486    	; 0xbde <_Z10writeServohhPhh>
     dc4:	16 30       	cpi	r17, 0x06	; 6
     dc6:	a0 f0       	brcs	.+40     	; 0xdf0 <_Z7setModehh+0x6c>
     dc8:	1a c0       	rjmp	.+52     	; 0xdfe <_Z7setModehh+0x7a>
     dca:	84 ee       	ldi	r24, 0xE4	; 228
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	8a 83       	std	Y+2, r24	; 0x02
     dd2:	84 ea       	ldi	r24, 0xA4	; 164
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	86 e0       	ldi	r24, 0x06	; 6
     dd8:	8c 83       	std	Y+4, r24	; 0x04
     dda:	24 e0       	ldi	r18, 0x04	; 4
     ddc:	ae 01       	movw	r20, r28
     dde:	4f 5f       	subi	r20, 0xFF	; 255
     de0:	5f 4f       	sbci	r21, 0xFF	; 255
     de2:	66 e0       	ldi	r22, 0x06	; 6
     de4:	81 2f       	mov	r24, r17
     de6:	fb de       	rcall	.-522    	; 0xbde <_Z10writeServohhPhh>
     de8:	16 30       	cpi	r17, 0x06	; 6
     dea:	48 f4       	brcc	.+18     	; 0xdfe <_Z7setModehh+0x7a>
     dec:	03 30       	cpi	r16, 0x03	; 3
     dee:	38 f4       	brcc	.+14     	; 0xdfe <_Z7setModehh+0x7a>
     df0:	8d e0       	ldi	r24, 0x0D	; 13
     df2:	18 9f       	mul	r17, r24
     df4:	f0 01       	movw	r30, r0
     df6:	11 24       	eor	r1, r1
     df8:	e8 55       	subi	r30, 0x58	; 88
     dfa:	fc 4f       	sbci	r31, 0xFC	; 252
     dfc:	03 83       	std	Z+3, r16	; 0x03
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	08 95       	ret

00000e10 <_Z12setModeWheelh>:
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	b8 cf       	rjmp	.-144    	; 0xd84 <_Z7setModehh>

00000e14 <_Z12setModeJointh>:
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	b6 cf       	rjmp	.-148    	; 0xd84 <_Z7setModehh>

00000e18 <_Z16setModeMultiTurnh>:
     e18:	62 e0       	ldi	r22, 0x02	; 2
     e1a:	b4 cf       	rjmp	.-152    	; 0xd84 <_Z7setModehh>

00000e1c <__vector_9>:
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	0b b6       	in	r0, 0x3b	; 59
     e28:	0f 92       	push	r0
     e2a:	cf 92       	push	r12
     e2c:	df 92       	push	r13
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	cf 93       	push	r28
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <arm>
     e54:	18 9b       	sbis	0x03, 0	; 3
     e56:	41 c0       	rjmp	.+130    	; 0xeda <__vector_9+0xbe>
     e58:	2f 9a       	sbi	0x05, 7	; 5
     e5a:	8d e0       	ldi	r24, 0x0D	; 13
     e5c:	c8 9f       	mul	r28, r24
     e5e:	80 01       	movw	r16, r0
     e60:	11 24       	eor	r1, r1
     e62:	08 55       	subi	r16, 0x58	; 88
     e64:	1c 4f       	sbci	r17, 0xFC	; 252
     e66:	78 01       	movw	r14, r16
     e68:	e4 e0       	ldi	r30, 0x04	; 4
     e6a:	ee 0e       	add	r14, r30
     e6c:	f1 1c       	adc	r15, r1
     e6e:	08 5f       	subi	r16, 0xF8	; 248
     e70:	1f 4f       	sbci	r17, 0xFF	; 255
     e72:	94 ef       	ldi	r25, 0xF4	; 244
     e74:	c9 2e       	mov	r12, r25
     e76:	dd 24       	eor	r13, r13
     e78:	d3 94       	inc	r13
     e7a:	18 9b       	sbis	0x03, 0	; 3
     e7c:	25 c0       	rjmp	.+74     	; 0xec8 <__vector_9+0xac>
     e7e:	f7 01       	movw	r30, r14
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	61 50       	subi	r22, 0x01	; 1
     e86:	71 09       	sbc	r23, r1
     e88:	71 83       	std	Z+1, r23	; 0x01
     e8a:	60 83       	st	Z, r22
     e8c:	f8 01       	movw	r30, r16
     e8e:	c3 30       	cpi	r28, 0x03	; 3
     e90:	68 f4       	brcc	.+26     	; 0xeac <__vector_9+0x90>
     e92:	d1 82       	std	Z+1, r13	; 0x01
     e94:	c0 82       	st	Z, r12
     e96:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <lastButtonPressed>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	51 f4       	brne	.+20     	; 0xeb2 <__vector_9+0x96>
     e9e:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <buttonsFlip+0x1>
     ea2:	88 23       	and	r24, r24
     ea4:	31 f0       	breq	.+12     	; 0xeb2 <__vector_9+0x96>
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <__vector_9+0x9a>
     eac:	40 81       	ld	r20, Z
     eae:	51 81       	ldd	r21, Z+1	; 0x01
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <__vector_9+0x9a>
     eb2:	44 ef       	ldi	r20, 0xF4	; 244
     eb4:	51 e0       	ldi	r21, 0x01	; 1
     eb6:	8c 2f       	mov	r24, r28
     eb8:	08 df       	rcall	.-496    	; 0xcca <_Z9moveSpeedhii>
     eba:	68 ec       	ldi	r22, 0xC8	; 200
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
     ec6:	d9 cf       	rjmp	.-78     	; 0xe7a <__vector_9+0x5e>
     ec8:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <buttonsFlip+0x1>
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	89 27       	eor	r24, r25
     ed0:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <buttonsFlip+0x1>
     ed4:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <lastButtonPressed>
     ed8:	2f 98       	cbi	0x05, 7	; 5
     eda:	19 9b       	sbis	0x03, 1	; 3
     edc:	42 c0       	rjmp	.+132    	; 0xf62 <__vector_9+0x146>
     ede:	2f 9a       	sbi	0x05, 7	; 5
     ee0:	fd e0       	ldi	r31, 0x0D	; 13
     ee2:	cf 9f       	mul	r28, r31
     ee4:	80 01       	movw	r16, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	08 55       	subi	r16, 0x58	; 88
     eea:	1c 4f       	sbci	r17, 0xFC	; 252
     eec:	78 01       	movw	r14, r16
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	e8 0e       	add	r14, r24
     ef2:	f1 1c       	adc	r15, r1
     ef4:	08 5f       	subi	r16, 0xF8	; 248
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	84 ef       	ldi	r24, 0xF4	; 244
     efa:	c8 2e       	mov	r12, r24
     efc:	dd 24       	eor	r13, r13
     efe:	d3 94       	inc	r13
     f00:	19 9b       	sbis	0x03, 1	; 3
     f02:	25 c0       	rjmp	.+74     	; 0xf4e <__vector_9+0x132>
     f04:	f7 01       	movw	r30, r14
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	6f 5f       	subi	r22, 0xFF	; 255
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	71 83       	std	Z+1, r23	; 0x01
     f10:	60 83       	st	Z, r22
     f12:	f8 01       	movw	r30, r16
     f14:	c3 30       	cpi	r28, 0x03	; 3
     f16:	68 f4       	brcc	.+26     	; 0xf32 <__vector_9+0x116>
     f18:	d1 82       	std	Z+1, r13	; 0x01
     f1a:	c0 82       	st	Z, r12
     f1c:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <lastButtonPressed>
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	51 f4       	brne	.+20     	; 0xf38 <__vector_9+0x11c>
     f24:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <buttonsFlip+0x2>
     f28:	88 23       	and	r24, r24
     f2a:	31 f0       	breq	.+12     	; 0xf38 <__vector_9+0x11c>
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	54 e0       	ldi	r21, 0x04	; 4
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <__vector_9+0x120>
     f32:	40 81       	ld	r20, Z
     f34:	51 81       	ldd	r21, Z+1	; 0x01
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <__vector_9+0x120>
     f38:	44 ef       	ldi	r20, 0xF4	; 244
     f3a:	55 e0       	ldi	r21, 0x05	; 5
     f3c:	8c 2f       	mov	r24, r28
     f3e:	c5 de       	rcall	.-630    	; 0xcca <_Z9moveSpeedhii>
     f40:	68 ec       	ldi	r22, 0xC8	; 200
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
     f4c:	d9 cf       	rjmp	.-78     	; 0xf00 <__vector_9+0xe4>
     f4e:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <buttonsFlip+0x2>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	89 27       	eor	r24, r25
     f56:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <buttonsFlip+0x2>
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <lastButtonPressed>
     f60:	2f 98       	cbi	0x05, 7	; 5
     f62:	1a 9b       	sbis	0x03, 2	; 3
     f64:	47 c0       	rjmp	.+142    	; 0xff4 <__vector_9+0x1d8>
     f66:	1f 9a       	sbi	0x03, 7	; 3
     f68:	00 e0       	ldi	r16, 0x00	; 0
     f6a:	10 e0       	ldi	r17, 0x00	; 0
     f6c:	1a 9b       	sbis	0x03, 2	; 3
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <__vector_9+0x166>
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
     f7c:	0f 5f       	subi	r16, 0xFF	; 255
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	f5 cf       	rjmp	.-22     	; 0xf6c <__vector_9+0x150>
     f82:	09 3e       	cpi	r16, 0xE9	; 233
     f84:	13 40       	sbci	r17, 0x03	; 3
     f86:	38 f0       	brcs	.+14     	; 0xf96 <__vector_9+0x17a>
     f88:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <autoBalanceOn>
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	89 27       	eor	r24, r25
     f90:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <autoBalanceOn>
     f94:	20 c0       	rjmp	.+64     	; 0xfd6 <__vector_9+0x1ba>
     f96:	c3 30       	cpi	r28, 0x03	; 3
     f98:	68 f4       	brcc	.+26     	; 0xfb4 <__vector_9+0x198>
     f9a:	8d e0       	ldi	r24, 0x0D	; 13
     f9c:	c8 9f       	mul	r28, r24
     f9e:	f0 01       	movw	r30, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	e8 55       	subi	r30, 0x58	; 88
     fa4:	fc 4f       	sbci	r31, 0xFC	; 252
     fa6:	64 81       	ldd	r22, Z+4	; 0x04
     fa8:	75 81       	ldd	r23, Z+5	; 0x05
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	8c 2f       	mov	r24, r28
     fb0:	8c de       	rcall	.-744    	; 0xcca <_Z9moveSpeedhii>
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <__vector_9+0x19c>
     fb4:	c5 30       	cpi	r28, 0x05	; 5
     fb6:	18 f4       	brcc	.+6      	; 0xfbe <__vector_9+0x1a2>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	8c 0f       	add	r24, r28
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <__vector_9+0x1a4>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <arm>
     fc4:	84 30       	cpi	r24, 0x04	; 4
     fc6:	10 f0       	brcs	.+4      	; 0xfcc <__vector_9+0x1b0>
     fc8:	25 df       	rcall	.-438    	; 0xe14 <_Z12setModeJointh>
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <__vector_9+0x1ba>
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	11 f4       	brne	.+4      	; 0xfd4 <__vector_9+0x1b8>
     fd0:	23 df       	rcall	.-442    	; 0xe18 <_Z16setModeMultiTurnh>
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <__vector_9+0x1ba>
     fd4:	1d df       	rcall	.-454    	; 0xe10 <_Z12setModeWheelh>
     fd6:	64 e1       	ldi	r22, 0x14	; 20
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
     fe2:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <lastButtonPressed>
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 27       	eor	r24, r25
     fea:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <lastButtonPressed>
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <lastButtonPressed>
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	cf 91       	pop	r28
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	0f 90       	pop	r0
    101c:	0b be       	out	0x3b, r0	; 59
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <_Z9readServohhh>:
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	08 2f       	mov	r16, r24
    1032:	16 2f       	mov	r17, r22
    1034:	d4 2f       	mov	r29, r20
    1036:	c6 e0       	ldi	r28, 0x06	; 6
    1038:	c4 0f       	add	r28, r20
    103a:	c6 0f       	add	r28, r22
    103c:	c8 0f       	add	r28, r24
    103e:	c0 95       	com	r28
    1040:	8c e9       	ldi	r24, 0x9C	; 156
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN14HardwareSerial9availableEv>
    1048:	89 2b       	or	r24, r25
    104a:	29 f0       	breq	.+10     	; 0x1056 <_Z9readServohhh+0x2e>
    104c:	8c e9       	ldi	r24, 0x9C	; 156
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    1054:	f5 cf       	rjmp	.-22     	; 0x1040 <_Z9readServohhh+0x18>
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	0e 94 60 18 	call	0x30c0	; 0x30c0 <digitalWrite>
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	0e 94 60 18 	call	0x30c0	; 0x30c0 <digitalWrite>
    1066:	65 e0       	ldi	r22, 0x05	; 5
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
    1072:	6f ef       	ldi	r22, 0xFF	; 255
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	8c e9       	ldi	r24, 0x9C	; 156
    1078:	94 e0       	ldi	r25, 0x04	; 4
    107a:	40 d9       	rcall	.-3456   	; 0x2fc <_ZN14HardwareSerial5writeEi>
    107c:	6f ef       	ldi	r22, 0xFF	; 255
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	8c e9       	ldi	r24, 0x9C	; 156
    1082:	94 e0       	ldi	r25, 0x04	; 4
    1084:	3b d9       	rcall	.-3466   	; 0x2fc <_ZN14HardwareSerial5writeEi>
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <serialWriting>
    108c:	60 2f       	mov	r22, r16
    108e:	8c e9       	ldi	r24, 0x9C	; 156
    1090:	94 e0       	ldi	r25, 0x04	; 4
    1092:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN14HardwareSerial5writeEh>
    1096:	64 e0       	ldi	r22, 0x04	; 4
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	8c e9       	ldi	r24, 0x9C	; 156
    109c:	94 e0       	ldi	r25, 0x04	; 4
    109e:	2e d9       	rcall	.-3492   	; 0x2fc <_ZN14HardwareSerial5writeEi>
    10a0:	62 e0       	ldi	r22, 0x02	; 2
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	8c e9       	ldi	r24, 0x9C	; 156
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	29 d9       	rcall	.-3502   	; 0x2fc <_ZN14HardwareSerial5writeEi>
    10aa:	61 2f       	mov	r22, r17
    10ac:	8c e9       	ldi	r24, 0x9C	; 156
    10ae:	94 e0       	ldi	r25, 0x04	; 4
    10b0:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN14HardwareSerial5writeEh>
    10b4:	6d 2f       	mov	r22, r29
    10b6:	8c e9       	ldi	r24, 0x9C	; 156
    10b8:	94 e0       	ldi	r25, 0x04	; 4
    10ba:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN14HardwareSerial5writeEh>
    10be:	6c 2f       	mov	r22, r28
    10c0:	8c e9       	ldi	r24, 0x9C	; 156
    10c2:	94 e0       	ldi	r25, 0x04	; 4
    10c4:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN14HardwareSerial5writeEh>
    10c8:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <serialWriting>
    10cc:	8c e9       	ldi	r24, 0x9C	; 156
    10ce:	94 e0       	ldi	r25, 0x04	; 4
    10d0:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZN14HardwareSerial5flushEv>
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	0e 94 60 18 	call	0x30c0	; 0x30c0 <digitalWrite>
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	0e 94 60 18 	call	0x30c0	; 0x30c0 <digitalWrite>
    10e4:	65 e0       	ldi	r22, 0x05	; 5
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <delay>

000010f8 <_Z7getDatahh>:
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData) {
    10f8:	6f 92       	push	r6
    10fa:	7f 92       	push	r7
    10fc:	8f 92       	push	r8
    10fe:	9f 92       	push	r9
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	62 97       	sbiw	r28, 0x12	; 18
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	f8 2e       	mov	r15, r24
    1126:	e6 2e       	mov	r14, r22
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
    1128:	62 e6       	ldi	r22, 0x62	; 98
    112a:	73 e0       	ldi	r23, 0x03	; 3
    112c:	ce 01       	movw	r24, r28
    112e:	0d 96       	adiw	r24, 0x0d	; 13
    1130:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
	
	readServo(id, ctrlData, 2);
    1134:	42 e0       	ldi	r20, 0x02	; 2
    1136:	6e 2d       	mov	r22, r14
    1138:	8f 2d       	mov	r24, r15
    113a:	76 df       	rcall	.-276    	; 0x1028 <_Z9readServohhh>
	delay(10);
    113c:	6a e0       	ldi	r22, 0x0A	; 10
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
	serialReading = YES;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <serialReading>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
    114e:	8c e9       	ldi	r24, 0x9C	; 156
    1150:	94 e0       	ldi	r25, 0x04	; 4
    1152:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    1156:	f8 2e       	mov	r15, r24
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
    1158:	8c e9       	ldi	r24, 0x9C	; 156
    115a:	94 e0       	ldi	r25, 0x04	; 4
    115c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
    1160:	9f ef       	ldi	r25, 0xFF	; 255
    1162:	f9 12       	cpse	r15, r25
    1164:	02 c0       	rjmp	.+4      	; 0x116a <_Z7getDatahh+0x72>
    1166:	8f 3f       	cpi	r24, 0xFF	; 255
    1168:	e1 f0       	breq	.+56     	; 0x11a2 <_Z7getDatahh+0xaa>
	Serial.println(value);
}
/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData) {
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
    116a:	e1 2c       	mov	r14, r1
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //5
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//6
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
    116c:	8c e9       	ldi	r24, 0x9C	; 156
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN14HardwareSerial9availableEv>
    1174:	89 2b       	or	r24, r25
    1176:	29 f0       	breq	.+10     	; 0x1182 <_Z7getDatahh+0x8a>
    1178:	8c e9       	ldi	r24, 0x9C	; 156
    117a:	94 e0       	ldi	r25, 0x04	; 4
    117c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    1180:	f5 cf       	rjmp	.-22     	; 0x116c <_Z7getDatahh+0x74>
	serialReading = NO;
    1182:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <serialReading>
	//Serial.println(line);
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
    1186:	ee 20       	and	r14, r14
    1188:	49 f0       	breq	.+18     	; 0x119c <_Z7getDatahh+0xa4>
    118a:	bb 20       	and	r11, r11
    118c:	09 f4       	brne	.+2      	; 0x1190 <_Z7getDatahh+0x98>
    118e:	0f c1       	rjmp	.+542    	; 0x13ae <_Z7getDatahh+0x2b6>
    1190:	0b 2d       	mov	r16, r11
    1192:	10 e0       	ldi	r17, 0x00	; 0
    1194:	11 95       	neg	r17
    1196:	01 95       	neg	r16
    1198:	11 09       	sbc	r17, r1
    119a:	09 c1       	rjmp	.+530    	; 0x13ae <_Z7getDatahh+0x2b6>
    119c:	01 e0       	ldi	r16, 0x01	; 1
    119e:	1f ef       	ldi	r17, 0xFF	; 255
    11a0:	06 c1       	rjmp	.+524    	; 0x13ae <_Z7getDatahh+0x2b6>
	msgByte = Serial1.read();									// 02 : Start 2/2
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
	if (msgStarted) {
		msgId = Serial1.read();
    11a2:	8c e9       	ldi	r24, 0x9C	; 156
    11a4:	94 e0       	ldi	r25, 0x04	; 4
    11a6:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    11aa:	3c 01       	movw	r6, r24
		line = "ID:" + padNumber(msgId, 6);							//1
    11ac:	bc 01       	movw	r22, r24
    11ae:	77 27       	eor	r23, r23
    11b0:	46 e0       	ldi	r20, 0x06	; 6
    11b2:	ce 01       	movw	r24, r28
    11b4:	07 96       	adiw	r24, 0x07	; 7
    11b6:	4e d9       	rcall	.-3428   	; 0x454 <_Z9padNumberih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    11b8:	6e e8       	ldi	r22, 0x8E	; 142
    11ba:	72 e0       	ldi	r23, 0x02	; 2
    11bc:	ce 01       	movw	r24, r28
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
    11c4:	be 01       	movw	r22, r28
    11c6:	69 5f       	subi	r22, 0xF9	; 249
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	ce 01       	movw	r24, r28
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    11d2:	bc 01       	movw	r22, r24
    11d4:	ce 01       	movw	r24, r28
    11d6:	0d 96       	adiw	r24, 0x0d	; 13
    11d8:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    11e4:	ce 01       	movw	r24, r28
    11e6:	07 96       	adiw	r24, 0x07	; 7
    11e8:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgLength = Serial1.read();
    11ec:	8c e9       	ldi	r24, 0x9C	; 156
    11ee:	94 e0       	ldi	r25, 0x04	; 4
    11f0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    11f4:	5c 01       	movw	r10, r24
		line = line + ", MsgLegth:" + padNumber(msgLength, 6);		//2
    11f6:	bc 01       	movw	r22, r24
    11f8:	77 27       	eor	r23, r23
    11fa:	46 e0       	ldi	r20, 0x06	; 6
    11fc:	ce 01       	movw	r24, r28
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	29 d9       	rcall	.-3502   	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1202:	be 01       	movw	r22, r28
    1204:	63 5f       	subi	r22, 0xF3	; 243
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	ce 01       	movw	r24, r28
    120a:	07 96       	adiw	r24, 0x07	; 7
    120c:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    1210:	62 e9       	ldi	r22, 0x92	; 146
    1212:	72 e0       	ldi	r23, 0x02	; 2
    1214:	ce 01       	movw	r24, r28
    1216:	07 96       	adiw	r24, 0x07	; 7
    1218:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    121c:	be 01       	movw	r22, r28
    121e:	6f 5f       	subi	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    1226:	bc 01       	movw	r22, r24
    1228:	ce 01       	movw	r24, r28
    122a:	0d 96       	adiw	r24, 0x0d	; 13
    122c:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1230:	ce 01       	movw	r24, r28
    1232:	07 96       	adiw	r24, 0x07	; 7
    1234:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgError = Serial1.read();
    1240:	8c e9       	ldi	r24, 0x9C	; 156
    1242:	94 e0       	ldi	r25, 0x04	; 4
    1244:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    1248:	6c 01       	movw	r12, r24
    124a:	b8 2e       	mov	r11, r24
		line = line + ", Error:" + padNumber(msgError, 6);			//3
    124c:	bc 01       	movw	r22, r24
    124e:	77 27       	eor	r23, r23
    1250:	46 e0       	ldi	r20, 0x06	; 6
    1252:	ce 01       	movw	r24, r28
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	fe d8       	rcall	.-3588   	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1258:	be 01       	movw	r22, r28
    125a:	63 5f       	subi	r22, 0xF3	; 243
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	ce 01       	movw	r24, r28
    1260:	07 96       	adiw	r24, 0x07	; 7
    1262:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    1266:	6e e9       	ldi	r22, 0x9E	; 158
    1268:	72 e0       	ldi	r23, 0x02	; 2
    126a:	ce 01       	movw	r24, r28
    126c:	07 96       	adiw	r24, 0x07	; 7
    126e:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    1272:	be 01       	movw	r22, r28
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    127c:	bc 01       	movw	r22, r24
    127e:	ce 01       	movw	r24, r28
    1280:	0d 96       	adiw	r24, 0x0d	; 13
    1282:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1286:	ce 01       	movw	r24, r28
    1288:	07 96       	adiw	r24, 0x07	; 7
    128a:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    128e:	ce 01       	movw	r24, r28
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		if (msgError!=0) { 
			//Serial.println(line);  
			//return -msgError; 
		}
		msgData_1 = Serial1.read();
    1296:	8c e9       	ldi	r24, 0x9C	; 156
    1298:	94 e0       	ldi	r25, 0x04	; 4
    129a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    129e:	f8 2e       	mov	r15, r24
		msgData_2 = Serial1.read();
    12a0:	8c e9       	ldi	r24, 0x9C	; 156
    12a2:	94 e0       	ldi	r25, 0x04	; 4
    12a4:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    12a8:	e8 2e       	mov	r14, r24
	response = sprintf(tmp, "%%%dd", padding);
	response = sprintf(buffer, tmp, value);
	return buffer;
}

int combineBytes(uint8_t byte_1, uint8_t byte_2) { return byte_1 + (byte_2<<8); }
    12aa:	98 2e       	mov	r9, r24
    12ac:	81 2c       	mov	r8, r1
    12ae:	84 01       	movw	r16, r8
    12b0:	0f 0d       	add	r16, r15
    12b2:	11 1d       	adc	r17, r1
			//return -msgError; 
		}
		msgData_1 = Serial1.read();
		msgData_2 = Serial1.read();
		msgData = combineBytes(msgData_1, msgData_2);
		line = line + ", Data:" + padNumber(msgData, 6);			//4
    12b4:	46 e0       	ldi	r20, 0x06	; 6
    12b6:	b8 01       	movw	r22, r16
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	cb d8       	rcall	.-3690   	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    12be:	be 01       	movw	r22, r28
    12c0:	63 5f       	subi	r22, 0xF3	; 243
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	ce 01       	movw	r24, r28
    12c6:	07 96       	adiw	r24, 0x07	; 7
    12c8:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    12cc:	67 ea       	ldi	r22, 0xA7	; 167
    12ce:	72 e0       	ldi	r23, 0x02	; 2
    12d0:	ce 01       	movw	r24, r28
    12d2:	07 96       	adiw	r24, 0x07	; 7
    12d4:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    12d8:	be 01       	movw	r22, r28
    12da:	6f 5f       	subi	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    12e2:	bc 01       	movw	r22, r24
    12e4:	ce 01       	movw	r24, r28
    12e6:	0d 96       	adiw	r24, 0x0d	; 13
    12e8:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    12ec:	ce 01       	movw	r24, r28
    12ee:	07 96       	adiw	r24, 0x07	; 7
    12f0:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    12f4:	ce 01       	movw	r24, r28
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgChecksum = Serial1.read();
    12fc:	8c e9       	ldi	r24, 0x9C	; 156
    12fe:	94 e0       	ldi	r25, 0x04	; 4
    1300:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    1304:	4c 01       	movw	r8, r24
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //5
    1306:	bc 01       	movw	r22, r24
    1308:	77 27       	eor	r23, r23
    130a:	46 e0       	ldi	r20, 0x06	; 6
    130c:	ce 01       	movw	r24, r28
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	a1 d8       	rcall	.-3774   	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1312:	be 01       	movw	r22, r28
    1314:	63 5f       	subi	r22, 0xF3	; 243
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	ce 01       	movw	r24, r28
    131a:	07 96       	adiw	r24, 0x07	; 7
    131c:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    1320:	6f ea       	ldi	r22, 0xAF	; 175
    1322:	72 e0       	ldi	r23, 0x02	; 2
    1324:	ce 01       	movw	r24, r28
    1326:	07 96       	adiw	r24, 0x07	; 7
    1328:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    132c:	be 01       	movw	r22, r28
    132e:	6f 5f       	subi	r22, 0xFF	; 255
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    1336:	bc 01       	movw	r22, r24
    1338:	ce 01       	movw	r24, r28
    133a:	0d 96       	adiw	r24, 0x0d	; 13
    133c:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1340:	ce 01       	movw	r24, r28
    1342:	07 96       	adiw	r24, 0x07	; 7
    1344:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
    1350:	a6 0c       	add	r10, r6
    1352:	ca 0c       	add	r12, r10
    1354:	fc 0c       	add	r15, r12
    1356:	fe 0c       	add	r15, r14
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//6
    1358:	f0 94       	com	r15
    135a:	6f 2d       	mov	r22, r15
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	46 e0       	ldi	r20, 0x06	; 6
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	77 d8       	rcall	.-3858   	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1366:	be 01       	movw	r22, r28
    1368:	63 5f       	subi	r22, 0xF3	; 243
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	ce 01       	movw	r24, r28
    136e:	07 96       	adiw	r24, 0x07	; 7
    1370:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    1374:	6e eb       	ldi	r22, 0xBE	; 190
    1376:	72 e0       	ldi	r23, 0x02	; 2
    1378:	ce 01       	movw	r24, r28
    137a:	07 96       	adiw	r24, 0x07	; 7
    137c:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    1380:	be 01       	movw	r22, r28
    1382:	6f 5f       	subi	r22, 0xFF	; 255
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    138a:	bc 01       	movw	r22, r24
    138c:	ce 01       	movw	r24, r28
    138e:	0d 96       	adiw	r24, 0x0d	; 13
    1390:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1394:	ce 01       	movw	r24, r28
    1396:	07 96       	adiw	r24, 0x07	; 7
    1398:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    139c:	ce 01       	movw	r24, r28
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
    13a4:	ee 24       	eor	r14, r14
    13a6:	e3 94       	inc	r14
    13a8:	f8 10       	cpse	r15, r8
    13aa:	df ce       	rjmp	.-578    	; 0x116a <_Z7getDatahh+0x72>
    13ac:	df ce       	rjmp	.-578    	; 0x116c <_Z7getDatahh+0x74>
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
    13ae:	ce 01       	movw	r24, r28
    13b0:	0d 96       	adiw	r24, 0x0d	; 13
    13b2:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
	//Serial.println(line);
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
}
    13b6:	c8 01       	movw	r24, r16
    13b8:	62 96       	adiw	r28, 0x12	; 18
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	bf 90       	pop	r11
    13d6:	af 90       	pop	r10
    13d8:	9f 90       	pop	r9
    13da:	8f 90       	pop	r8
    13dc:	7f 90       	pop	r7
    13de:	6f 90       	pop	r6
    13e0:	08 95       	ret

000013e2 <_Z11getMoreDatahh>:

/* Request and Capture data from servo with given ID */
int getMoreData(uint8_t id, uint8_t ctrlData) {
    13e2:	2f 92       	push	r2
    13e4:	3f 92       	push	r3
    13e6:	4f 92       	push	r4
    13e8:	5f 92       	push	r5
    13ea:	6f 92       	push	r6
    13ec:	7f 92       	push	r7
    13ee:	8f 92       	push	r8
    13f0:	9f 92       	push	r9
    13f2:	af 92       	push	r10
    13f4:	bf 92       	push	r11
    13f6:	cf 92       	push	r12
    13f8:	df 92       	push	r13
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	6a 97       	sbiw	r28, 0x1a	; 26
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	f8 2e       	mov	r15, r24
    1418:	16 2f       	mov	r17, r22
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum;
	uint8_t msgData_1, msgData_2,  msgData_3, msgData_4, msgData_5, msgData_6;
	int msgData;
	String line;
    141a:	62 e6       	ldi	r22, 0x62	; 98
    141c:	73 e0       	ldi	r23, 0x03	; 3
    141e:	ce 01       	movw	r24, r28
    1420:	0d 96       	adiw	r24, 0x0d	; 13
    1422:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
	
	readServo(id, ctrlData, 6);
    1426:	46 e0       	ldi	r20, 0x06	; 6
    1428:	61 2f       	mov	r22, r17
    142a:	8f 2d       	mov	r24, r15
    142c:	fd dd       	rcall	.-1030   	; 0x1028 <_Z9readServohhh>
	delay(10);
    142e:	6a e0       	ldi	r22, 0x0A	; 10
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
	serialReading = YES;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <serialReading>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
    1440:	8c e9       	ldi	r24, 0x9C	; 156
    1442:	94 e0       	ldi	r25, 0x04	; 4
    1444:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    1448:	18 2f       	mov	r17, r24
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
    144a:	8c e9       	ldi	r24, 0x9C	; 156
    144c:	94 e0       	ldi	r25, 0x04	; 4
    144e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
    1452:	1f 3f       	cpi	r17, 0xFF	; 255
    1454:	09 f0       	breq	.+2      	; 0x1458 <_Z11getMoreDatahh+0x76>
    1456:	6d c1       	rjmp	.+730    	; 0x1732 <_Z11getMoreDatahh+0x350>
    1458:	8f 3f       	cpi	r24, 0xFF	; 255
    145a:	09 f0       	breq	.+2      	; 0x145e <_Z11getMoreDatahh+0x7c>
    145c:	6a c1       	rjmp	.+724    	; 0x1732 <_Z11getMoreDatahh+0x350>
	if (msgStarted) {
		msgId = Serial1.read();
    145e:	8c e9       	ldi	r24, 0x9C	; 156
    1460:	94 e0       	ldi	r25, 0x04	; 4
    1462:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    1466:	2c 01       	movw	r4, r24
		line = "ID:" + padNumber(msgId, 6);							//1
    1468:	bc 01       	movw	r22, r24
    146a:	77 27       	eor	r23, r23
    146c:	46 e0       	ldi	r20, 0x06	; 6
    146e:	ce 01       	movw	r24, r28
    1470:	07 96       	adiw	r24, 0x07	; 7
    1472:	0e 94 2a 02 	call	0x454	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1476:	6e e8       	ldi	r22, 0x8E	; 142
    1478:	72 e0       	ldi	r23, 0x02	; 2
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
    1482:	be 01       	movw	r22, r28
    1484:	69 5f       	subi	r22, 0xF9	; 249
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    1490:	bc 01       	movw	r22, r24
    1492:	ce 01       	movw	r24, r28
    1494:	0d 96       	adiw	r24, 0x0d	; 13
    1496:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    149a:	ce 01       	movw	r24, r28
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    14a2:	ce 01       	movw	r24, r28
    14a4:	07 96       	adiw	r24, 0x07	; 7
    14a6:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgLength = Serial1.read();
    14aa:	8c e9       	ldi	r24, 0x9C	; 156
    14ac:	94 e0       	ldi	r25, 0x04	; 4
    14ae:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    14b2:	5c 01       	movw	r10, r24
		line = line + ", MsgLegth:" + padNumber(msgLength, 6);		//2
    14b4:	bc 01       	movw	r22, r24
    14b6:	77 27       	eor	r23, r23
    14b8:	46 e0       	ldi	r20, 0x06	; 6
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	0e 94 2a 02 	call	0x454	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    14c2:	be 01       	movw	r22, r28
    14c4:	63 5f       	subi	r22, 0xF3	; 243
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	ce 01       	movw	r24, r28
    14ca:	07 96       	adiw	r24, 0x07	; 7
    14cc:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    14d0:	62 e9       	ldi	r22, 0x92	; 146
    14d2:	72 e0       	ldi	r23, 0x02	; 2
    14d4:	ce 01       	movw	r24, r28
    14d6:	07 96       	adiw	r24, 0x07	; 7
    14d8:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    14dc:	be 01       	movw	r22, r28
    14de:	6f 5f       	subi	r22, 0xFF	; 255
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    14e6:	bc 01       	movw	r22, r24
    14e8:	ce 01       	movw	r24, r28
    14ea:	0d 96       	adiw	r24, 0x0d	; 13
    14ec:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    14f0:	ce 01       	movw	r24, r28
    14f2:	07 96       	adiw	r24, 0x07	; 7
    14f4:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    14f8:	ce 01       	movw	r24, r28
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgError = Serial1.read();
    1500:	8c e9       	ldi	r24, 0x9C	; 156
    1502:	94 e0       	ldi	r25, 0x04	; 4
    1504:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    1508:	1c 01       	movw	r2, r24
    150a:	e8 2e       	mov	r14, r24
		line = line + ", Error:" + padNumber(msgError, 6);			//3
    150c:	bc 01       	movw	r22, r24
    150e:	77 27       	eor	r23, r23
    1510:	46 e0       	ldi	r20, 0x06	; 6
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	0e 94 2a 02 	call	0x454	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    151a:	be 01       	movw	r22, r28
    151c:	63 5f       	subi	r22, 0xF3	; 243
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	ce 01       	movw	r24, r28
    1522:	07 96       	adiw	r24, 0x07	; 7
    1524:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    1528:	6e e9       	ldi	r22, 0x9E	; 158
    152a:	72 e0       	ldi	r23, 0x02	; 2
    152c:	ce 01       	movw	r24, r28
    152e:	07 96       	adiw	r24, 0x07	; 7
    1530:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    1534:	be 01       	movw	r22, r28
    1536:	6f 5f       	subi	r22, 0xFF	; 255
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    153e:	bc 01       	movw	r22, r24
    1540:	ce 01       	movw	r24, r28
    1542:	0d 96       	adiw	r24, 0x0d	; 13
    1544:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1548:	ce 01       	movw	r24, r28
    154a:	07 96       	adiw	r24, 0x07	; 7
    154c:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    1550:	ce 01       	movw	r24, r28
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		if (msgError!=0) { 
			//Serial.println(line);  
			//return -msgError; 
		}

		msgData_1 = Serial1.read();
    1558:	8c e9       	ldi	r24, 0x9C	; 156
    155a:	94 e0       	ldi	r25, 0x04	; 4
    155c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    1560:	6c 01       	movw	r12, r24
		msgData_2 = Serial1.read();
    1562:	8c e9       	ldi	r24, 0x9C	; 156
    1564:	94 e0       	ldi	r25, 0x04	; 4
    1566:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    156a:	b8 2e       	mov	r11, r24
    156c:	46 01       	movw	r8, r12
    156e:	99 24       	eor	r9, r9
		line = line + ", Posi:" + padNumber(msgData_1, 6);			//4
    1570:	46 e0       	ldi	r20, 0x06	; 6
    1572:	b4 01       	movw	r22, r8
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	0e 94 2a 02 	call	0x454	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    157c:	be 01       	movw	r22, r28
    157e:	63 5f       	subi	r22, 0xF3	; 243
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	ce 01       	movw	r24, r28
    1584:	07 96       	adiw	r24, 0x07	; 7
    1586:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    158a:	6d ec       	ldi	r22, 0xCD	; 205
    158c:	72 e0       	ldi	r23, 0x02	; 2
    158e:	ce 01       	movw	r24, r28
    1590:	07 96       	adiw	r24, 0x07	; 7
    1592:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    1596:	be 01       	movw	r22, r28
    1598:	6f 5f       	subi	r22, 0xFF	; 255
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    15a0:	bc 01       	movw	r22, r24
    15a2:	ce 01       	movw	r24, r28
    15a4:	0d 96       	adiw	r24, 0x0d	; 13
    15a6:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    15aa:	ce 01       	movw	r24, r28
    15ac:	07 96       	adiw	r24, 0x07	; 7
    15ae:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgData_3 = Serial1.read();
    15ba:	8c e9       	ldi	r24, 0x9C	; 156
    15bc:	94 e0       	ldi	r25, 0x04	; 4
    15be:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    15c2:	8c 01       	movw	r16, r24
		msgData_4 = Serial1.read();
    15c4:	8c e9       	ldi	r24, 0x9C	; 156
    15c6:	94 e0       	ldi	r25, 0x04	; 4
    15c8:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN14HardwareSerial4readEv>
    15cc:	d8 2e       	mov	r13, r24
    15ce:	38 01       	movw	r6, r16
    15d0:	77 24       	eor	r7, r7
		line = line + ", Sped:" + padNumber(msgData_3, 6);			//5
    15d2:	46 e0       	ldi	r20, 0x06	; 6
    15d4:	b3 01       	movw	r22, r6
    15d6:	ce 01       	movw	r24, r28
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	0e 94 2a 02 	call	0x454	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    15de:	be 01       	movw	r22, r28
    15e0:	63 5f       	subi	r22, 0xF3	; 243
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	ce 01       	movw	r24, r28
    15e6:	07 96       	adiw	r24, 0x07	; 7
    15e8:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    15ec:	65 ed       	ldi	r22, 0xD5	; 213
    15ee:	72 e0       	ldi	r23, 0x02	; 2
    15f0:	ce 01       	movw	r24, r28
    15f2:	07 96       	adiw	r24, 0x07	; 7
    15f4:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    15f8:	be 01       	movw	r22, r28
    15fa:	6f 5f       	subi	r22, 0xFF	; 255
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    1602:	bc 01       	movw	r22, r24
    1604:	ce 01       	movw	r24, r28
    1606:	0d 96       	adiw	r24, 0x0d	; 13
    1608:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    160c:	ce 01       	movw	r24, r28
    160e:	07 96       	adiw	r24, 0x07	; 7
    1610:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgData_5 = Serial1.read();
    161c:	8c e9       	ldi	r24, 0x9C	; 156
    161e:	94 e0       	ldi	r25, 0x04	; 4
    1620:	e5 d7       	rcall	.+4042   	; 0x25ec <_ZN14HardwareSerial4readEv>
    1622:	58 2e       	mov	r5, r24
		msgData_6 = Serial1.read();
    1624:	8c e9       	ldi	r24, 0x9C	; 156
    1626:	94 e0       	ldi	r25, 0x04	; 4
    1628:	e1 d7       	rcall	.+4034   	; 0x25ec <_ZN14HardwareSerial4readEv>
    162a:	18 2f       	mov	r17, r24
		line = line + ", Load:" + padNumber(msgData, 6);			//6
    162c:	46 e0       	ldi	r20, 0x06	; 6
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	ce 01       	movw	r24, r28
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	0e 94 2a 02 	call	0x454	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    163a:	be 01       	movw	r22, r28
    163c:	63 5f       	subi	r22, 0xF3	; 243
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	ce 01       	movw	r24, r28
    1642:	07 96       	adiw	r24, 0x07	; 7
    1644:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    1648:	6d ed       	ldi	r22, 0xDD	; 221
    164a:	72 e0       	ldi	r23, 0x02	; 2
    164c:	ce 01       	movw	r24, r28
    164e:	07 96       	adiw	r24, 0x07	; 7
    1650:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    1654:	be 01       	movw	r22, r28
    1656:	6f 5f       	subi	r22, 0xFF	; 255
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    165e:	bc 01       	movw	r22, r24
    1660:	ce 01       	movw	r24, r28
    1662:	0d 96       	adiw	r24, 0x0d	; 13
    1664:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1668:	ce 01       	movw	r24, r28
    166a:	07 96       	adiw	r24, 0x07	; 7
    166c:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    1670:	ce 01       	movw	r24, r28
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgChecksum = Serial1.read();
    1678:	8c e9       	ldi	r24, 0x9C	; 156
    167a:	94 e0       	ldi	r25, 0x04	; 4
    167c:	b7 d7       	rcall	.+3950   	; 0x25ec <_ZN14HardwareSerial4readEv>
    167e:	9c 8b       	std	Y+20, r25	; 0x14
    1680:	8b 8b       	std	Y+19, r24	; 0x13
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //7
    1682:	bc 01       	movw	r22, r24
    1684:	77 27       	eor	r23, r23
    1686:	46 e0       	ldi	r20, 0x06	; 6
    1688:	ce 01       	movw	r24, r28
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	0e 94 2a 02 	call	0x454	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1690:	be 01       	movw	r22, r28
    1692:	63 5f       	subi	r22, 0xF3	; 243
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	ce 01       	movw	r24, r28
    1698:	07 96       	adiw	r24, 0x07	; 7
    169a:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    169e:	6f ea       	ldi	r22, 0xAF	; 175
    16a0:	72 e0       	ldi	r23, 0x02	; 2
    16a2:	ce 01       	movw	r24, r28
    16a4:	07 96       	adiw	r24, 0x07	; 7
    16a6:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    16aa:	be 01       	movw	r22, r28
    16ac:	6f 5f       	subi	r22, 0xFF	; 255
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    16b4:	bc 01       	movw	r22, r24
    16b6:	ce 01       	movw	r24, r28
    16b8:	0d 96       	adiw	r24, 0x0d	; 13
    16ba:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    16be:	ce 01       	movw	r24, r28
    16c0:	07 96       	adiw	r24, 0x07	; 7
    16c2:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    16c6:	ce 01       	movw	r24, r28
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2 + msgData_3 + msgData_4 + msgData_5 + msgData_6);
    16ce:	a4 0c       	add	r10, r4
    16d0:	2a 0c       	add	r2, r10
    16d2:	c2 0c       	add	r12, r2
    16d4:	cb 0c       	add	r12, r11
    16d6:	0c 0d       	add	r16, r12
    16d8:	0d 0d       	add	r16, r13
    16da:	05 0d       	add	r16, r5
    16dc:	01 0f       	add	r16, r17
    16de:	00 95       	com	r16
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//8
    16e0:	60 2f       	mov	r22, r16
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	46 e0       	ldi	r20, 0x06	; 6
    16e6:	ce 01       	movw	r24, r28
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	0e 94 2a 02 	call	0x454	; 0x454 <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    16ee:	be 01       	movw	r22, r28
    16f0:	63 5f       	subi	r22, 0xF3	; 243
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	ce 01       	movw	r24, r28
    16f6:	07 96       	adiw	r24, 0x07	; 7
    16f8:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN6StringC1ERKS_>
    16fc:	6e eb       	ldi	r22, 0xBE	; 190
    16fe:	72 e0       	ldi	r23, 0x02	; 2
    1700:	ce 01       	movw	r24, r28
    1702:	07 96       	adiw	r24, 0x07	; 7
    1704:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZplRK15StringSumHelperPKc>
    1708:	be 01       	movw	r22, r28
    170a:	6f 5f       	subi	r22, 0xFF	; 255
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZplRK15StringSumHelperRK6String>
    1712:	bc 01       	movw	r22, r24
    1714:	ce 01       	movw	r24, r28
    1716:	0d 96       	adiw	r24, 0x0d	; 13
    1718:	0e 94 09 19 	call	0x3212	; 0x3212 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    171c:	ce 01       	movw	r24, r28
    171e:	07 96       	adiw	r24, 0x07	; 7
    1720:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    1724:	ce 01       	movw	r24, r28
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
		if (msgOK) {
    172c:	8b 89       	ldd	r24, Y+19	; 0x13
    172e:	08 17       	cp	r16, r24
    1730:	d9 f0       	breq	.+54     	; 0x1768 <_Z11getMoreDatahh+0x386>
}

/* Request and Capture data from servo with given ID */
int getMoreData(uint8_t id, uint8_t ctrlData) {
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
    1732:	f1 2c       	mov	r15, r1
			msgData = combineBytes(msgData_5, msgData_6);
			arm.servos[id].load = getRealValue(msgData);
			arm.servos[id].loadDirection = getDirection(msgData);
		}
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
    1734:	8c e9       	ldi	r24, 0x9C	; 156
    1736:	94 e0       	ldi	r25, 0x04	; 4
    1738:	3f d7       	rcall	.+3710   	; 0x25b8 <_ZN14HardwareSerial9availableEv>
    173a:	8c 01       	movw	r16, r24
    173c:	89 2b       	or	r24, r25
    173e:	21 f0       	breq	.+8      	; 0x1748 <_Z11getMoreDatahh+0x366>
    1740:	8c e9       	ldi	r24, 0x9C	; 156
    1742:	94 e0       	ldi	r25, 0x04	; 4
    1744:	53 d7       	rcall	.+3750   	; 0x25ec <_ZN14HardwareSerial4readEv>
    1746:	f6 cf       	rjmp	.-20     	; 0x1734 <_Z11getMoreDatahh+0x352>
	serialReading = NO;
    1748:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <serialReading>
	//Serial.println(line);
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : 0 : -255;
    174c:	ff 20       	and	r15, r15
    174e:	49 f0       	breq	.+18     	; 0x1762 <_Z11getMoreDatahh+0x380>
    1750:	ee 20       	and	r14, r14
    1752:	09 f4       	brne	.+2      	; 0x1756 <_Z11getMoreDatahh+0x374>
    1754:	58 c0       	rjmp	.+176    	; 0x1806 <_Z11getMoreDatahh+0x424>
    1756:	f1 2c       	mov	r15, r1
    1758:	00 27       	eor	r16, r16
    175a:	11 27       	eor	r17, r17
    175c:	0e 19       	sub	r16, r14
    175e:	1f 09       	sbc	r17, r15
    1760:	52 c0       	rjmp	.+164    	; 0x1806 <_Z11getMoreDatahh+0x424>
    1762:	01 e0       	ldi	r16, 0x01	; 1
    1764:	1f ef       	ldi	r17, 0xFF	; 255
    1766:	4f c0       	rjmp	.+158    	; 0x1806 <_Z11getMoreDatahh+0x424>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2 + msgData_3 + msgData_4 + msgData_5 + msgData_6);
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//8
		msgOK = msgChecksum == Checksum ? YES : NO;
		if (msgOK) {
			msgData = combineBytes(msgData_1, msgData_2);
			arm.servos[id].position = msgData;
    1768:	2f 2d       	mov	r18, r15
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	4d e0       	ldi	r20, 0x0D	; 13
    176e:	f4 9e       	mul	r15, r20
    1770:	f0 01       	movw	r30, r0
    1772:	11 24       	eor	r1, r1
    1774:	e8 55       	subi	r30, 0x58	; 88
    1776:	fc 4f       	sbci	r31, 0xFC	; 252
    1778:	be 8a       	std	Y+22, r11	; 0x16
    177a:	1d 8a       	std	Y+21, r1	; 0x15
    177c:	8d 89       	ldd	r24, Y+21	; 0x15
    177e:	9e 89       	ldd	r25, Y+22	; 0x16
    1780:	88 0e       	add	r8, r24
    1782:	99 1e       	adc	r9, r25
    1784:	95 82       	std	Z+5, r9	; 0x05
    1786:	84 82       	std	Z+4, r8	; 0x04
	response = sprintf(tmp, "%%%dd", padding);
	response = sprintf(buffer, tmp, value);
	return buffer;
}

int combineBytes(uint8_t byte_1, uint8_t byte_2) { return byte_1 + (byte_2<<8); }
    1788:	d8 8e       	std	Y+24, r13	; 0x18
    178a:	1f 8a       	std	Y+23, r1	; 0x17
    178c:	8f 89       	ldd	r24, Y+23	; 0x17
    178e:	98 8d       	ldd	r25, Y+24	; 0x18
    1790:	86 0d       	add	r24, r6
    1792:	97 1d       	adc	r25, r7
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1794:	81 15       	cp	r24, r1
    1796:	44 e0       	ldi	r20, 0x04	; 4
    1798:	94 07       	cpc	r25, r20
    179a:	1c f0       	brlt	.+6      	; 0x17a2 <_Z11getMoreDatahh+0x3c0>
    179c:	ac 01       	movw	r20, r24
    179e:	54 50       	subi	r21, 0x04	; 4
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <_Z11getMoreDatahh+0x3c2>
    17a2:	ac 01       	movw	r20, r24
		msgOK = msgChecksum == Checksum ? YES : NO;
		if (msgOK) {
			msgData = combineBytes(msgData_1, msgData_2);
			arm.servos[id].position = msgData;
			msgData = combineBytes(msgData_3, msgData_4);
			arm.servos[id].speed = getRealValue(msgData);
    17a4:	6d e0       	ldi	r22, 0x0D	; 13
    17a6:	62 9f       	mul	r22, r18
    17a8:	f0 01       	movw	r30, r0
    17aa:	63 9f       	mul	r22, r19
    17ac:	f0 0d       	add	r31, r0
    17ae:	11 24       	eor	r1, r1
    17b0:	e8 55       	subi	r30, 0x58	; 88
    17b2:	fc 4f       	sbci	r31, 0xFC	; 252
    17b4:	51 87       	std	Z+9, r21	; 0x09
    17b6:	40 87       	std	Z+8, r20	; 0x08
			arm.servos[id].direction = getDirection(msgData);
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	81 15       	cp	r24, r1
    17bc:	94 40       	sbci	r25, 0x04	; 4
    17be:	0c f4       	brge	.+2      	; 0x17c2 <_Z11getMoreDatahh+0x3e0>
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	46 83       	std	Z+6, r20	; 0x06
	response = sprintf(tmp, "%%%dd", padding);
	response = sprintf(buffer, tmp, value);
	return buffer;
}

int combineBytes(uint8_t byte_1, uint8_t byte_2) { return byte_1 + (byte_2<<8); }
    17c4:	1a 8f       	std	Y+26, r17	; 0x1a
    17c6:	19 8e       	std	Y+25, r1	; 0x19
    17c8:	89 8d       	ldd	r24, Y+25	; 0x19
    17ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17cc:	85 0d       	add	r24, r5
    17ce:	91 1d       	adc	r25, r1
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    17d0:	81 15       	cp	r24, r1
    17d2:	44 e0       	ldi	r20, 0x04	; 4
    17d4:	94 07       	cpc	r25, r20
    17d6:	1c f0       	brlt	.+6      	; 0x17de <_Z11getMoreDatahh+0x3fc>
    17d8:	ac 01       	movw	r20, r24
    17da:	54 50       	subi	r21, 0x04	; 4
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <_Z11getMoreDatahh+0x3fe>
    17de:	ac 01       	movw	r20, r24
			arm.servos[id].position = msgData;
			msgData = combineBytes(msgData_3, msgData_4);
			arm.servos[id].speed = getRealValue(msgData);
			arm.servos[id].direction = getDirection(msgData);
			msgData = combineBytes(msgData_5, msgData_6);
			arm.servos[id].load = getRealValue(msgData);
    17e0:	6d e0       	ldi	r22, 0x0D	; 13
    17e2:	62 9f       	mul	r22, r18
    17e4:	f0 01       	movw	r30, r0
    17e6:	63 9f       	mul	r22, r19
    17e8:	f0 0d       	add	r31, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	e8 55       	subi	r30, 0x58	; 88
    17ee:	fc 4f       	sbci	r31, 0xFC	; 252
    17f0:	53 87       	std	Z+11, r21	; 0x0b
    17f2:	42 87       	std	Z+10, r20	; 0x0a
			arm.servos[id].loadDirection = getDirection(msgData);
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	81 15       	cp	r24, r1
    17f8:	94 40       	sbci	r25, 0x04	; 4
    17fa:	0c f4       	brge	.+2      	; 0x17fe <_Z11getMoreDatahh+0x41c>
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	24 87       	std	Z+12, r18	; 0x0c
		line = line + ", Load:" + padNumber(msgData, 6);			//6
		msgChecksum = Serial1.read();
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //7
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2 + msgData_3 + msgData_4 + msgData_5 + msgData_6);
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//8
		msgOK = msgChecksum == Checksum ? YES : NO;
    1800:	ff 24       	eor	r15, r15
    1802:	f3 94       	inc	r15
    1804:	97 cf       	rjmp	.-210    	; 0x1734 <_Z11getMoreDatahh+0x352>
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum;
	uint8_t msgData_1, msgData_2,  msgData_3, msgData_4, msgData_5, msgData_6;
	int msgData;
	String line;
    1806:	ce 01       	movw	r24, r28
    1808:	0d 96       	adiw	r24, 0x0d	; 13
    180a:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
	//Serial.println(line);
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : 0 : -255;
}
    180e:	c8 01       	movw	r24, r16
    1810:	6a 96       	adiw	r28, 0x1a	; 26
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	df 90       	pop	r13
    182a:	cf 90       	pop	r12
    182c:	bf 90       	pop	r11
    182e:	af 90       	pop	r10
    1830:	9f 90       	pop	r9
    1832:	8f 90       	pop	r8
    1834:	7f 90       	pop	r7
    1836:	6f 90       	pop	r6
    1838:	5f 90       	pop	r5
    183a:	4f 90       	pop	r4
    183c:	3f 90       	pop	r3
    183e:	2f 90       	pop	r2
    1840:	08 95       	ret

00001842 <loop>:
}

/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {
    1842:	0f 93       	push	r16
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	6a 97       	sbiw	r28, 0x1a	; 26
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
	int incomingByte = 0;
	readServo(arm.id, 0x24, 34);
    185a:	42 e2       	ldi	r20, 0x22	; 34
    185c:	64 e2       	ldi	r22, 0x24	; 36
    185e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <arm>
    1862:	e2 db       	rcall	.-2108   	; 0x1028 <_Z9readServohhh>
	printDataLCD();
    1864:	10 d8       	rcall	.-4064   	; 0x886 <_Z12printDataLCDv>
    1866:	64 e2       	ldi	r22, 0x24	; 36
	bool new_direction;
	int speedo;
	/* Load 4  - Reading */
	//new_reading = getData(4, MX_PRESENT_LOAD_L);
	//printSerial("Loop: ", speedo);
	new_reading = getMoreData(4, MX_PRESENT_POSITION_L);
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	bb dd       	rcall	.-1162   	; 0x13e2 <_Z11getMoreDatahh>
    186c:	64 e2       	ldi	r22, 0x24	; 36
		load_4_dir = load_4_dir;
		load_4 = load_4; 
	}
	/* Load 5 - Reading */
	//new_reading = getData(5, MX_PRESENT_LOAD_L);
	new_reading = getMoreData(5, MX_PRESENT_POSITION_L);
    186e:	85 e0       	ldi	r24, 0x05	; 5
    1870:	b8 dd       	rcall	.-1168   	; 0x13e2 <_Z11getMoreDatahh>
    1872:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <autoBalanceOn>
		//load_5 = arm.servos[5].load;
	} else { // use the old values
		load_5_dir = load_5_dir;
		load_5 = load_5;
	}
	if (autoBalanceOn) {
    1876:	88 23       	and	r24, r24
    1878:	41 f1       	breq	.+80     	; 0x18ca <loop+0x88>
    187a:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <arm+0x3e>
			? 0
			: arm.servos[4].load > 250
				? 1000
				: arm.servos[4].load<<2;
		*/
		speedo = arm.servos[4].load < 35 ? 0 : 500;
    187e:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <arm+0x3f>
    1882:	83 97       	sbiw	r24, 0x23	; 35
    1884:	1c f0       	brlt	.+6      	; 0x188c <loop+0x4a>
    1886:	44 ef       	ldi	r20, 0xF4	; 244
    1888:	51 e0       	ldi	r21, 0x01	; 1
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <loop+0x4e>
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <arm+0x40>
		moveSpeed(1, 100, arm.servos[4].loadDirection ? speedo : 0x0400 + speedo);
    1894:	81 11       	cpse	r24, r1
    1896:	01 c0       	rjmp	.+2      	; 0x189a <loop+0x58>
    1898:	5c 5f       	subi	r21, 0xFC	; 252
    189a:	64 e6       	ldi	r22, 0x64	; 100
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	14 da       	rcall	.-3032   	; 0xcca <_Z9moveSpeedhii>
    18a2:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <arm+0x4b>
			? 0
			: arm.servos[5].load > 250
				? 1000
				: arm.servos[5].load<<2;
				*/
		speedo = arm.servos[5].load < 35 ? 0 : 500;
    18a6:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <arm+0x4c>
    18aa:	83 97       	sbiw	r24, 0x23	; 35
    18ac:	1c f0       	brlt	.+6      	; 0x18b4 <loop+0x72>
    18ae:	44 ef       	ldi	r20, 0xF4	; 244
    18b0:	51 e0       	ldi	r21, 0x01	; 1
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <loop+0x76>
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <arm+0x4d>
		moveSpeed(2, 100, arm.servos[5].loadDirection ? speedo : 0x0400 + speedo);
    18bc:	81 11       	cpse	r24, r1
    18be:	01 c0       	rjmp	.+2      	; 0x18c2 <loop+0x80>
    18c0:	5c 5f       	subi	r21, 0xFC	; 252
    18c2:	64 e6       	ldi	r22, 0x64	; 100
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	00 da       	rcall	.-3072   	; 0xcca <_Z9moveSpeedhii>
    18ca:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <arm+0x1>
	
	} else { /* if (autoBalanceOn) */
		//moveSpeed(1, 100, 0);
		//moveSpeed(2, 100, 0);
	}
	if (!arm.autoBalance == autoBalanceOn) {
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	89 27       	eor	r24, r25
    18d2:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <autoBalanceOn>
    18d6:	89 13       	cpse	r24, r25
    18d8:	2d c0       	rjmp	.+90     	; 0x1934 <loop+0xf2>
    18da:	81 11       	cpse	r24, r1
		printLCD(19, 0, autoBalanceOn ? "A" : "M" );
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <loop+0xa2>
    18de:	47 ee       	ldi	r20, 0xE7	; 231
    18e0:	52 e0       	ldi	r21, 0x02	; 2
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <loop+0xa6>
    18e4:	45 ee       	ldi	r20, 0xE5	; 229
    18e6:	52 e0       	ldi	r21, 0x02	; 2
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	83 e1       	ldi	r24, 0x13	; 19
    18ec:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
    18f0:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <autoBalanceOn>
		if (!autoBalanceOn) {
    18f4:	81 11       	cpse	r24, r1
    18f6:	1a c0       	rjmp	.+52     	; 0x192c <loop+0xea>
    18f8:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <load_4_dir>
			moveSpeed(1, 100, load_4_dir ? 0 : 0x04000);
    18fc:	81 11       	cpse	r24, r1
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <loop+0xc4>
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e4       	ldi	r21, 0x40	; 64
    1904:	02 c0       	rjmp	.+4      	; 0x190a <loop+0xc8>
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	64 e6       	ldi	r22, 0x64	; 100
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	dc d9       	rcall	.-3144   	; 0xcca <_Z9moveSpeedhii>
    1912:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <load_5_dir>
			moveSpeed(2, 100, load_5_dir ? 0 : 0x04000);
    1916:	81 11       	cpse	r24, r1
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <loop+0xde>
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	50 e4       	ldi	r21, 0x40	; 64
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <loop+0xe2>
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	64 e6       	ldi	r22, 0x64	; 100
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	cf d9       	rcall	.-3170   	; 0xcca <_Z9moveSpeedhii>
		}
		arm.autoBalance = autoBalanceOn;
    192c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <autoBalanceOn>
    1930:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <arm+0x1>
	}
	new_reading = getData(1, MX_PRESENT_SPEED_L);
    1934:	66 e2       	ldi	r22, 0x26	; 38
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	df db       	rcall	.-2114   	; 0x10f8 <_Z7getDatahh>
    193a:	97 fd       	sbrc	r25, 7
	//printSerial("Three: ", new_reading);
	if (new_reading>=0) {
    193c:	13 c0       	rjmp	.+38     	; 0x1964 <loop+0x122>
    193e:	81 15       	cp	r24, r1
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1940:	24 e0       	ldi	r18, 0x04	; 4
    1942:	92 07       	cpc	r25, r18
    1944:	1c f0       	brlt	.+6      	; 0x194c <loop+0x10a>
    1946:	9c 01       	movw	r18, r24
    1948:	34 50       	subi	r19, 0x04	; 4
    194a:	01 c0       	rjmp	.+2      	; 0x194e <loop+0x10c>
    194c:	9c 01       	movw	r18, r24
    194e:	30 93 be 03 	sts	0x03BE, r19	; 0x8003be <arm+0x16>
		arm.autoBalance = autoBalanceOn;
	}
	new_reading = getData(1, MX_PRESENT_SPEED_L);
	//printSerial("Three: ", new_reading);
	if (new_reading>=0) {
		arm.servos[1].speed = getRealValue(new_reading);
    1952:	20 93 bd 03 	sts	0x03BD, r18	; 0x8003bd <arm+0x15>
    1956:	21 e0       	ldi	r18, 0x01	; 1
		arm.servos[1].direction = getDirection(new_reading);
    1958:	81 15       	cp	r24, r1
    195a:	94 40       	sbci	r25, 0x04	; 4
    195c:	0c f4       	brge	.+2      	; 0x1960 <loop+0x11e>
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	20 93 bb 03 	sts	0x03BB, r18	; 0x8003bb <arm+0x13>
	}
	new_reading = getData(2, MX_PRESENT_SPEED_L);
    1964:	66 e2       	ldi	r22, 0x26	; 38
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	c7 db       	rcall	.-2162   	; 0x10f8 <_Z7getDatahh>
    196a:	97 fd       	sbrc	r25, 7
	//printSerial("Four: ", new_reading);
	if (new_reading>=0) {
    196c:	13 c0       	rjmp	.+38     	; 0x1994 <loop+0x152>
    196e:	81 15       	cp	r24, r1
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1970:	24 e0       	ldi	r18, 0x04	; 4
    1972:	92 07       	cpc	r25, r18
    1974:	1c f0       	brlt	.+6      	; 0x197c <loop+0x13a>
    1976:	9c 01       	movw	r18, r24
    1978:	34 50       	subi	r19, 0x04	; 4
    197a:	01 c0       	rjmp	.+2      	; 0x197e <loop+0x13c>
    197c:	9c 01       	movw	r18, r24
    197e:	30 93 cb 03 	sts	0x03CB, r19	; 0x8003cb <arm+0x23>
		arm.servos[1].direction = getDirection(new_reading);
	}
	new_reading = getData(2, MX_PRESENT_SPEED_L);
	//printSerial("Four: ", new_reading);
	if (new_reading>=0) {
		arm.servos[2].speed = getRealValue(new_reading);
    1982:	20 93 ca 03 	sts	0x03CA, r18	; 0x8003ca <arm+0x22>
    1986:	21 e0       	ldi	r18, 0x01	; 1
		arm.servos[2].direction = getDirection(new_reading);
    1988:	81 15       	cp	r24, r1
    198a:	94 40       	sbci	r25, 0x04	; 4
    198c:	0c f4       	brge	.+2      	; 0x1990 <loop+0x14e>
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	20 93 c8 03 	sts	0x03C8, r18	; 0x8003c8 <arm+0x20>
	}
	new_reading = getData(4, MX_CURRENT_L);
    1994:	64 e4       	ldi	r22, 0x44	; 68
    1996:	84 e0       	ldi	r24, 0x04	; 4
    1998:	af db       	rcall	.-2210   	; 0x10f8 <_Z7getDatahh>
	//printSerial("Current: ", new_reading);
	if (new_reading>=0) {
    199a:	97 fd       	sbrc	r25, 7
    199c:	11 c0       	rjmp	.+34     	; 0x19c0 <loop+0x17e>
		arm.servos[4].current = 4.5*(new_reading-2048);
    199e:	bc 01       	movw	r22, r24
    19a0:	78 50       	subi	r23, 0x08	; 8
    19a2:	07 2e       	mov	r0, r23
    19a4:	00 0c       	add	r0, r0
    19a6:	88 0b       	sbc	r24, r24
    19a8:	99 0b       	sbc	r25, r25
    19aa:	26 d3       	rcall	.+1612   	; 0x1ff8 <__floatsisf>
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e9       	ldi	r20, 0x90	; 144
    19b2:	50 e4       	ldi	r21, 0x40	; 64
    19b4:	d1 d3       	rcall	.+1954   	; 0x2158 <__mulsf3>
    19b6:	ed d2       	rcall	.+1498   	; 0x1f92 <__fixsfsi>
    19b8:	70 93 ea 03 	sts	0x03EA, r23	; 0x8003ea <arm+0x42>
    19bc:	60 93 e9 03 	sts	0x03E9, r22	; 0x8003e9 <arm+0x41>
	}
	new_reading = getData(5, MX_CURRENT_L);
    19c0:	64 e4       	ldi	r22, 0x44	; 68
    19c2:	85 e0       	ldi	r24, 0x05	; 5
    19c4:	99 db       	rcall	.-2254   	; 0x10f8 <_Z7getDatahh>
	//printSerial("Current: ", new_reading);
	if (new_reading>=0) {
    19c6:	97 fd       	sbrc	r25, 7
		arm.servos[5].current = 4.5*(new_reading-2048);
    19c8:	11 c0       	rjmp	.+34     	; 0x19ec <loop+0x1aa>
    19ca:	bc 01       	movw	r22, r24
    19cc:	78 50       	subi	r23, 0x08	; 8
    19ce:	07 2e       	mov	r0, r23
    19d0:	00 0c       	add	r0, r0
    19d2:	88 0b       	sbc	r24, r24
    19d4:	99 0b       	sbc	r25, r25
    19d6:	10 d3       	rcall	.+1568   	; 0x1ff8 <__floatsisf>
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e9       	ldi	r20, 0x90	; 144
    19de:	50 e4       	ldi	r21, 0x40	; 64
    19e0:	bb d3       	rcall	.+1910   	; 0x2158 <__mulsf3>
    19e2:	d7 d2       	rcall	.+1454   	; 0x1f92 <__fixsfsi>
    19e4:	70 93 f7 03 	sts	0x03F7, r23	; 0x8003f7 <arm+0x4f>
    19e8:	60 93 f6 03 	sts	0x03F6, r22	; 0x8003f6 <arm+0x4e>
    19ec:	40 91 e9 03 	lds	r20, 0x03E9	; 0x8003e9 <arm+0x41>
	}
	printLCD(LCD_COL2, 0, arm.servos[4].current, 4);
    19f0:	50 91 ea 03 	lds	r21, 0x03EA	; 0x8003ea <arm+0x42>
    19f4:	24 e0       	ldi	r18, 0x04	; 4
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	88 e0       	ldi	r24, 0x08	; 8
    19fa:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    19fe:	40 91 f6 03 	lds	r20, 0x03F6	; 0x8003f6 <arm+0x4e>
	printLCD(LCD_COL3, 0, arm.servos[5].current, 4);
    1a02:	50 91 f7 03 	lds	r21, 0x03F7	; 0x8003f7 <arm+0x4f>
    1a06:	24 e0       	ldi	r18, 0x04	; 4
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	8d e0       	ldi	r24, 0x0D	; 13
    1a0c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
	printLCD(LCD_COL2, 1, arm.servos[4].position*MX_PRESENT_POSITION_DEGREE, 4);
    1a10:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <arm+0x38>
    1a14:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <arm+0x39>
    1a18:	07 2e       	mov	r0, r23
    1a1a:	00 0c       	add	r0, r0
    1a1c:	88 0b       	sbc	r24, r24
    1a1e:	99 0b       	sbc	r25, r25
    1a20:	eb d2       	rcall	.+1494   	; 0x1ff8 <__floatsisf>
    1a22:	28 e5       	ldi	r18, 0x58	; 88
    1a24:	39 e3       	ldi	r19, 0x39	; 57
    1a26:	44 eb       	ldi	r20, 0xB4	; 180
    1a28:	5d e3       	ldi	r21, 0x3D	; 61
    1a2a:	96 d3       	rcall	.+1836   	; 0x2158 <__mulsf3>
    1a2c:	b2 d2       	rcall	.+1380   	; 0x1f92 <__fixsfsi>
    1a2e:	24 e0       	ldi	r18, 0x04	; 4
    1a30:	ab 01       	movw	r20, r22
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	88 e0       	ldi	r24, 0x08	; 8
    1a36:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
	lcd.print((char)CH_DEG);
    1a3a:	6f ed       	ldi	r22, 0xDF	; 223
    1a3c:	87 e9       	ldi	r24, 0x97	; 151
    1a3e:	93 e0       	ldi	r25, 0x03	; 3
    1a40:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN5Print5printEc>
	printLCD(LCD_COL3, 1, arm.servos[5].position*MX_PRESENT_POSITION_DEGREE, 4);
    1a44:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <arm+0x45>
    1a48:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <arm+0x46>
    1a4c:	07 2e       	mov	r0, r23
    1a4e:	00 0c       	add	r0, r0
    1a50:	88 0b       	sbc	r24, r24
    1a52:	99 0b       	sbc	r25, r25
    1a54:	d1 d2       	rcall	.+1442   	; 0x1ff8 <__floatsisf>
    1a56:	28 e5       	ldi	r18, 0x58	; 88
    1a58:	39 e3       	ldi	r19, 0x39	; 57
    1a5a:	44 eb       	ldi	r20, 0xB4	; 180
    1a5c:	5d e3       	ldi	r21, 0x3D	; 61
    1a5e:	7c d3       	rcall	.+1784   	; 0x2158 <__mulsf3>
    1a60:	98 d2       	rcall	.+1328   	; 0x1f92 <__fixsfsi>
    1a62:	24 e0       	ldi	r18, 0x04	; 4
    1a64:	ab 01       	movw	r20, r22
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	8d e0       	ldi	r24, 0x0D	; 13
    1a6a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    1a6e:	6f ed       	ldi	r22, 0xDF	; 223
    1a70:	87 e9       	ldi	r24, 0x97	; 151
    1a72:	93 e0       	ldi	r25, 0x03	; 3
	lcd.print((char)CH_DEG);
    1a74:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN5Print5printEc>
    1a78:	40 91 bd 03 	lds	r20, 0x03BD	; 0x8003bd <arm+0x15>
    1a7c:	50 91 be 03 	lds	r21, 0x03BE	; 0x8003be <arm+0x16>
	printLCD(LCD_COL2, 2, arm.servos[1].speed, 4);
    1a80:	24 e0       	ldi	r18, 0x04	; 4
    1a82:	62 e0       	ldi	r22, 0x02	; 2
    1a84:	88 e0       	ldi	r24, 0x08	; 8
    1a86:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    1a8a:	40 91 ca 03 	lds	r20, 0x03CA	; 0x8003ca <arm+0x22>
    1a8e:	50 91 cb 03 	lds	r21, 0x03CB	; 0x8003cb <arm+0x23>
	printLCD(LCD_COL3, 2, arm.servos[2].speed, 4);
    1a92:	24 e0       	ldi	r18, 0x04	; 4
    1a94:	62 e0       	ldi	r22, 0x02	; 2
    1a96:	8d e0       	ldi	r24, 0x0D	; 13
    1a98:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    1a9c:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <arm+0x3e>
    1aa0:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <arm+0x3f>
	printLCD(LCD_COL2, 3, arm.servos[4].load, 4);
    1aa4:	24 e0       	ldi	r18, 0x04	; 4
    1aa6:	63 e0       	ldi	r22, 0x03	; 3
    1aa8:	88 e0       	ldi	r24, 0x08	; 8
    1aaa:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    1aae:	40 91 f3 03 	lds	r20, 0x03F3	; 0x8003f3 <arm+0x4b>
    1ab2:	50 91 f4 03 	lds	r21, 0x03F4	; 0x8003f4 <arm+0x4c>
	printLCD(LCD_COL3, 3, arm.servos[5].load, 4);
    1ab6:	24 e0       	ldi	r18, 0x04	; 4
    1ab8:	63 e0       	ldi	r22, 0x03	; 3
    1aba:	8d e0       	ldi	r24, 0x0D	; 13
    1abc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    1ac0:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <millis>
    1ac4:	00 91 8e 03 	lds	r16, 0x038E	; 0x80038e <__data_end>
	uint8_t number = 13;
	uint32_t timo = millis();
    1ac8:	10 91 8f 03 	lds	r17, 0x038F	; 0x80038f <__data_end+0x1>
		arm.servos[5].load,
		arm.servos[5].loadDirection,
		arm.servos[5].current,
		arm.servos[2].speed,
		arm.servos[2].direction
	};
    1acc:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <__data_end+0x2>
    1ad0:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <__data_end+0x3>
    1ad4:	60 1b       	sub	r22, r16
    1ad6:	71 0b       	sbc	r23, r17
    1ad8:	82 0b       	sbc	r24, r18
    1ada:	93 0b       	sbc	r25, r19
    1adc:	24 e6       	ldi	r18, 0x64	; 100
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodsi4>
    1ae8:	3a 83       	std	Y+2, r19	; 0x02
    1aea:	29 83       	std	Y+1, r18	; 0x01
    1aec:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <arm+0x38>
    1af0:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <arm+0x39>
    1af4:	9c 83       	std	Y+4, r25	; 0x04
    1af6:	8b 83       	std	Y+3, r24	; 0x03
    1af8:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <arm+0x3e>
    1afc:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <arm+0x3f>
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <arm+0x40>
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	98 87       	std	Y+8, r25	; 0x08
    1b0c:	8f 83       	std	Y+7, r24	; 0x07
    1b0e:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <arm+0x41>
    1b12:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <arm+0x42>
    1b16:	9a 87       	std	Y+10, r25	; 0x0a
    1b18:	89 87       	std	Y+9, r24	; 0x09
    1b1a:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <arm+0x15>
    1b1e:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <arm+0x16>
    1b22:	9c 87       	std	Y+12, r25	; 0x0c
    1b24:	8b 87       	std	Y+11, r24	; 0x0b
    1b26:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <arm+0x13>
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9e 87       	std	Y+14, r25	; 0x0e
    1b2e:	8d 87       	std	Y+13, r24	; 0x0d
    1b30:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <arm+0x45>
    1b34:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <arm+0x46>
    1b38:	98 8b       	std	Y+16, r25	; 0x10
    1b3a:	8f 87       	std	Y+15, r24	; 0x0f
    1b3c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <arm+0x4b>
    1b40:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <arm+0x4c>
    1b44:	9a 8b       	std	Y+18, r25	; 0x12
    1b46:	89 8b       	std	Y+17, r24	; 0x11
    1b48:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <arm+0x4d>
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9c 8b       	std	Y+20, r25	; 0x14
    1b50:	8b 8b       	std	Y+19, r24	; 0x13
    1b52:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <arm+0x4e>
    1b56:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <arm+0x4f>
    1b5a:	9e 8b       	std	Y+22, r25	; 0x16
    1b5c:	8d 8b       	std	Y+21, r24	; 0x15
    1b5e:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <arm+0x22>
    1b62:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <arm+0x23>
    1b66:	98 8f       	std	Y+24, r25	; 0x18
    1b68:	8f 8b       	std	Y+23, r24	; 0x17
    1b6a:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <arm+0x20>
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9a 8f       	std	Y+26, r25	; 0x1a
    1b72:	89 8f       	std	Y+25, r24	; 0x19
    1b74:	6d e0       	ldi	r22, 0x0D	; 13
    1b76:	ce 01       	movw	r24, r28
    1b78:	01 96       	adiw	r24, 0x01	; 1
	dumpDataToSerial(data, number);
    1b7a:	0e 94 bb 03 	call	0x776	; 0x776 <_Z16dumpDataToSerialPih>
    1b7e:	6a 96       	adiw	r28, 0x1a	; 26
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
		lcd.print((unsigned long)incomingByte, 10);
	}
	*/
	//printDataLCD();
	//delay(200);
}
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	08 95       	ret

00001b94 <setup>:
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
    1b9a:	df 93       	push	r29
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	2a 97       	sbiw	r28, 0x0a	; 10
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
    1bac:	0e 94 86 02 	call	0x50c	; 0x50c <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
    1bb0:	87 e9       	ldi	r24, 0x97	; 151
    1bb2:	93 e0       	ldi	r25, 0x03	; 3
    1bb4:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    1bb8:	87 e9       	ldi	r24, 0x97	; 151
    1bba:	93 e0       	ldi	r25, 0x03	; 3
    1bbc:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    1bc0:	87 e9       	ldi	r24, 0x97	; 151
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	0e 94 d6 19 	call	0x33ac	; 0x33ac <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	0e 94 24 18 	call	0x3048	; 0x3048 <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	0e 94 24 18 	call	0x3048	; 0x3048 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1bd8:	26 e0       	ldi	r18, 0x06	; 6
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	51 ee       	ldi	r21, 0xE1	; 225
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	8f ef       	ldi	r24, 0xFF	; 255
    1be4:	93 e0       	ldi	r25, 0x03	; 3
    1be6:	ef d5       	rcall	.+3038   	; 0x27c6 <_ZN14HardwareSerial5beginEmh>
    1be8:	26 e0       	ldi	r18, 0x06	; 6
    1bea:	47 e3       	ldi	r20, 0x37	; 55
    1bec:	5f ed       	ldi	r21, 0xDF	; 223
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	8c e9       	ldi	r24, 0x9C	; 156
    1bf4:	94 e0       	ldi	r25, 0x04	; 4
    1bf6:	e7 d5       	rcall	.+3022   	; 0x27c6 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
    1bf8:	8c e9       	ldi	r24, 0x9C	; 156
    1bfa:	94 e0       	ldi	r25, 0x04	; 4
    1bfc:	c3 d5       	rcall	.+2950   	; 0x2784 <_ZN14HardwareSerial5flushEv>
	arm.id = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <arm>
	/* Angle Limits Setup (Servo Modes) */
	printLCD(0, 0, "Set Angle Limits" );
    1c04:	49 ee       	ldi	r20, 0xE9	; 233
    1c06:	52 e0       	ldi	r21, 0x02	; 2
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
	printLCD(18, 0, "OK" );
    1c10:	4a ef       	ldi	r20, 0xFA	; 250
    1c12:	52 e0       	ldi	r21, 0x02	; 2
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	82 e1       	ldi	r24, 0x12	; 18
    1c18:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
	setModeWheel(1);
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
	setModeWheel(2);
    1c1e:	f8 d8       	rcall	.-3600   	; 0xe10 <_Z12setModeWheelh>
    1c20:	82 e0       	ldi	r24, 0x02	; 2
	setModeMultiTurn(3);
    1c22:	f6 d8       	rcall	.-3604   	; 0xe10 <_Z12setModeWheelh>
    1c24:	83 e0       	ldi	r24, 0x03	; 3
	setModeJoint(4);
    1c26:	f8 d8       	rcall	.-3600   	; 0xe18 <_Z16setModeMultiTurnh>
    1c28:	84 e0       	ldi	r24, 0x04	; 4
    1c2a:	f4 d8       	rcall	.-3608   	; 0xe14 <_Z12setModeJointh>
	setModeJoint(5);
    1c2c:	85 e0       	ldi	r24, 0x05	; 5
    1c2e:	f2 d8       	rcall	.-3612   	; 0xe14 <_Z12setModeJointh>
    1c30:	64 ef       	ldi	r22, 0xF4	; 244
	delay(500);
    1c32:	71 e0       	ldi	r23, 0x01	; 1
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
    1c3c:	4a ef       	ldi	r20, 0xFA	; 250
	printLCD(18, 0, "OK" );
    1c3e:	52 e0       	ldi	r21, 0x02	; 2
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	82 e1       	ldi	r24, 0x12	; 18
    1c44:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
    1c48:	4d ef       	ldi	r20, 0xFD	; 253
	/* Set the speeds of the servos */
	printLCD(0, 1, "Set Speeds" );
    1c4a:	52 e0       	ldi	r21, 0x02	; 2
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
    1c54:	84 ef       	ldi	r24, 0xF4	; 244
	arm.servos[1].speed = 500;
    1c56:	91 e0       	ldi	r25, 0x01	; 1
    1c58:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <arm+0x16>
    1c5c:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <arm+0x15>
    1c60:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <arm+0x23>
	arm.servos[2].speed = 500;
    1c64:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <arm+0x22>
    1c68:	8e e1       	ldi	r24, 0x1E	; 30
	arm.servos[3].speed = 30;
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <arm+0x30>
    1c70:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <arm+0x2f>
    1c74:	8f e0       	ldi	r24, 0x0F	; 15
	arm.servos[4].speed = 15;
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <arm+0x3d>
    1c7c:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <arm+0x3c>
    1c80:	84 e1       	ldi	r24, 0x14	; 20
	arm.servos[5].speed = 20;
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <arm+0x4a>
    1c88:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <arm+0x49>
    1c8c:	64 ef       	ldi	r22, 0xF4	; 244
	delay(500);
    1c8e:	71 e0       	ldi	r23, 0x01	; 1
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
    1c98:	4a ef       	ldi	r20, 0xFA	; 250
	printLCD(18, 1, "OK" );
    1c9a:	52 e0       	ldi	r21, 0x02	; 2
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	82 e1       	ldi	r24, 0x12	; 18
    1ca0:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
    1ca4:	48 e0       	ldi	r20, 0x08	; 8
	/* Enable Toques for Joints (4 and 5) */
	printLCD(0, 2, "Set Torques" );
    1ca6:	53 e0       	ldi	r21, 0x03	; 3
    1ca8:	62 e0       	ldi	r22, 0x02	; 2
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
	for (uint8_t i=1; i<6; i++) {
    1cb0:	11 e0       	ldi	r17, 0x01	; 1
		setTorqueLimit(i, MAX_TORQUE);
    1cb2:	6f ef       	ldi	r22, 0xFF	; 255
    1cb4:	73 e0       	ldi	r23, 0x03	; 3
    1cb6:	81 2f       	mov	r24, r17
    1cb8:	52 d8       	rcall	.-3932   	; 0xd5e <_Z14setTorqueLimithi>
    1cba:	1f 5f       	subi	r17, 0xFF	; 255
	arm.servos[5].speed = 20;
	delay(500);
	printLCD(18, 1, "OK" );
	/* Enable Toques for Joints (4 and 5) */
	printLCD(0, 2, "Set Torques" );
	for (uint8_t i=1; i<6; i++) {
    1cbc:	16 30       	cpi	r17, 0x06	; 6
    1cbe:	c9 f7       	brne	.-14     	; 0x1cb2 <setup+0x11e>
    1cc0:	64 ef       	ldi	r22, 0xF4	; 244
		setTorqueLimit(i, MAX_TORQUE);
	}
	delay(500);
    1cc2:	71 e0       	ldi	r23, 0x01	; 1
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
    1ccc:	4a ef       	ldi	r20, 0xFA	; 250
	printLCD(18, 2, "OK" );
    1cce:	52 e0       	ldi	r21, 0x02	; 2
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	82 e1       	ldi	r24, 0x12	; 18
    1cd4:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
    1cd8:	44 e1       	ldi	r20, 0x14	; 20
	printLCD(0, 3, "Update Angles " );
    1cda:	53 e0       	ldi	r21, 0x03	; 3
    1cdc:	63 e0       	ldi	r22, 0x03	; 3
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
	arm.servos[4].position = getData(4, MX_PRESENT_POSITION_L);
    1ce4:	64 e2       	ldi	r22, 0x24	; 36
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	07 da       	rcall	.-3058   	; 0x10f8 <_Z7getDatahh>
    1cea:	8c 01       	movw	r16, r24
    1cec:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <arm+0x39>
    1cf0:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <arm+0x38>
    1cf4:	63 e2       	ldi	r22, 0x23	; 35
	printSerial("position 4", arm.servos[4].position);
    1cf6:	73 e0       	ldi	r23, 0x03	; 3
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
    1d00:	b8 01       	movw	r22, r16
    1d02:	ce 01       	movw	r24, r28
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	0e 94 c1 02 	call	0x582	; 0x582 <_Z11printSerial6Stringi>
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    1d12:	64 e6       	ldi	r22, 0x64	; 100
	delay(100);
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
    1d1e:	4a e0       	ldi	r20, 0x0A	; 10
	Serial.print(4);
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	64 e0       	ldi	r22, 0x04	; 4
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	93 e0       	ldi	r25, 0x03	; 3
    1d2a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_ZN5Print5printEii>
	arm.servos[5].position = getData(5, MX_PRESENT_POSITION_L);
    1d2e:	64 e2       	ldi	r22, 0x24	; 36
    1d30:	85 e0       	ldi	r24, 0x05	; 5
    1d32:	e2 d9       	rcall	.-3132   	; 0x10f8 <_Z7getDatahh>
    1d34:	8c 01       	movw	r16, r24
    1d36:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <arm+0x46>
    1d3a:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <arm+0x45>
    1d3e:	6e e2       	ldi	r22, 0x2E	; 46
	printSerial("position 5", arm.servos[5].position);
    1d40:	73 e0       	ldi	r23, 0x03	; 3
    1d42:	ce 01       	movw	r24, r28
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
    1d4a:	b8 01       	movw	r22, r16
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	0e 94 c1 02 	call	0x582	; 0x582 <_Z11printSerial6Stringi>
    1d54:	ce 01       	movw	r24, r28
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    1d5c:	64 e6       	ldi	r22, 0x64	; 100
	delay(100);
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
	Serial.print(5);
    1d68:	4a e0       	ldi	r20, 0x0A	; 10
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	65 e0       	ldi	r22, 0x05	; 5
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	93 e0       	ldi	r25, 0x03	; 3
    1d74:	dd d7       	rcall	.+4026   	; 0x2d30 <_ZN5Print5printEii>
    1d76:	40 91 e4 03 	lds	r20, 0x03E4	; 0x8003e4 <arm+0x3c>
	moveSpeed(4, arm.servos[4].position, arm.servos[4].speed);
    1d7a:	50 91 e5 03 	lds	r21, 0x03E5	; 0x8003e5 <arm+0x3d>
    1d7e:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <arm+0x38>
    1d82:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <arm+0x39>
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	0e 94 65 06 	call	0xcca	; 0xcca <_Z9moveSpeedhii>
    1d8c:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <arm+0x49>
	moveSpeed(5, arm.servos[5].position, arm.servos[5].speed);
    1d90:	50 91 f2 03 	lds	r21, 0x03F2	; 0x8003f2 <arm+0x4a>
    1d94:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <arm+0x45>
    1d98:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <arm+0x46>
    1d9c:	85 e0       	ldi	r24, 0x05	; 5
    1d9e:	0e 94 65 06 	call	0xcca	; 0xcca <_Z9moveSpeedhii>
    1da2:	64 e6       	ldi	r22, 0x64	; 100
	delay(100);
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
    1dae:	4a ef       	ldi	r20, 0xFA	; 250
	printLCD(18, 3, "OK" );
    1db0:	52 e0       	ldi	r21, 0x02	; 2
    1db2:	63 e0       	ldi	r22, 0x03	; 3
    1db4:	82 e1       	ldi	r24, 0x12	; 18
    1db6:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
    1dba:	87 e9       	ldi	r24, 0x97	; 151
	/* LCD Setup */
	lcd.clear();
    1dbc:	93 e0       	ldi	r25, 0x03	; 3
    1dbe:	0e 94 d6 19 	call	0x33ac	; 0x33ac <_ZN17LiquidCrystal_I2C5clearEv>
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
	lcd.setCursor(0,0);
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	87 e9       	ldi	r24, 0x97	; 151
    1dc8:	93 e0       	ldi	r25, 0x03	; 3
    1dca:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("ID:");
    1dce:	6e e8       	ldi	r22, 0x8E	; 142
    1dd0:	72 e0       	ldi	r23, 0x02	; 2
    1dd2:	87 e9       	ldi	r24, 0x97	; 151
    1dd4:	93 e0       	ldi	r25, 0x03	; 3
    1dd6:	e3 d6       	rcall	.+3526   	; 0x2b9e <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	87 e9       	ldi	r24, 0x97	; 151
    1dde:	93 e0       	ldi	r25, 0x03	; 3
    1de0:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("an:");
    1de4:	69 e3       	ldi	r22, 0x39	; 57
    1de6:	73 e0       	ldi	r23, 0x03	; 3
    1de8:	87 e9       	ldi	r24, 0x97	; 151
    1dea:	93 e0       	ldi	r25, 0x03	; 3
    1dec:	d8 d6       	rcall	.+3504   	; 0x2b9e <_ZN5Print5printEPKc>
	lcd.setCursor(0,2);
    1dee:	42 e0       	ldi	r20, 0x02	; 2
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	87 e9       	ldi	r24, 0x97	; 151
    1df4:	93 e0       	ldi	r25, 0x03	; 3
    1df6:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("sp:");
    1dfa:	6d e3       	ldi	r22, 0x3D	; 61
    1dfc:	73 e0       	ldi	r23, 0x03	; 3
    1dfe:	87 e9       	ldi	r24, 0x97	; 151
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	cd d6       	rcall	.+3482   	; 0x2b9e <_ZN5Print5printEPKc>
	lcd.setCursor(0,3);
    1e04:	43 e0       	ldi	r20, 0x03	; 3
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	87 e9       	ldi	r24, 0x97	; 151
    1e0a:	93 e0       	ldi	r25, 0x03	; 3
    1e0c:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("ld:");
    1e10:	61 e4       	ldi	r22, 0x41	; 65
    1e12:	73 e0       	ldi	r23, 0x03	; 3
    1e14:	87 e9       	ldi	r24, 0x97	; 151
    1e16:	93 e0       	ldi	r25, 0x03	; 3
    1e18:	c2 d6       	rcall	.+3460   	; 0x2b9e <_ZN5Print5printEPKc>

	readServo(arm.id, 0x18, 8);
    1e1a:	48 e0       	ldi	r20, 0x08	; 8
    1e1c:	68 e1       	ldi	r22, 0x18	; 24
    1e1e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <arm>
    1e22:	02 d9       	rcall	.-3580   	; 0x1028 <_Z9readServohhh>
	printBuffer();
    1e24:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z11printBufferv>
	delay(2);
    1e28:	62 e0       	ldi	r22, 0x02	; 2
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 29 17 	call	0x2e52	; 0x2e52 <delay>
	int somthe = getData(5, MX_CURRENT_L);
    1e34:	64 e4       	ldi	r22, 0x44	; 68
    1e36:	85 e0       	ldi	r24, 0x05	; 5
    1e38:	5f d9       	rcall	.-3394   	; 0x10f8 <_Z7getDatahh>
    1e3a:	8c 01       	movw	r16, r24
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1e3c:	81 15       	cp	r24, r1
    1e3e:	94 40       	sbci	r25, 0x04	; 4
    1e40:	0c f0       	brlt	.+2      	; 0x1e44 <setup+0x2b0>
    1e42:	14 50       	subi	r17, 0x04	; 4
    1e44:	65 e4       	ldi	r22, 0x45	; 69

	readServo(arm.id, 0x18, 8);
	printBuffer();
	delay(2);
	int somthe = getData(5, MX_CURRENT_L);
	printSerial("return: ", getRealValue(somthe));
    1e46:	73 e0       	ldi	r23, 0x03	; 3
    1e48:	ce 01       	movw	r24, r28
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <_ZN6StringC1EPKc>
    1e50:	b8 01       	movw	r22, r16
    1e52:	ce 01       	movw	r24, r28
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	0e 94 c1 02 	call	0x582	; 0x582 <_Z11printSerial6Stringi>
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN6StringD1Ev>
    1e62:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <autoBalanceOn>
	printLCD(19, 0, autoBalanceOn ? "A" : "M" );
    1e66:	81 11       	cpse	r24, r1
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <setup+0x2dc>
    1e6a:	47 ee       	ldi	r20, 0xE7	; 231
    1e6c:	52 e0       	ldi	r21, 0x02	; 2
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <setup+0x2e0>
    1e70:	45 ee       	ldi	r20, 0xE5	; 229
    1e72:	52 e0       	ldi	r21, 0x02	; 2
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	83 e1       	ldi	r24, 0x13	; 19
    1e78:	0e 94 1a 02 	call	0x434	; 0x434 <_Z8printLCDhhPKc>
	//printBuffer();
	int sss[] = {(int)12,(int)34,(int)234,34,21};
    1e7c:	8a e0       	ldi	r24, 0x0A	; 10
    1e7e:	e8 e0       	ldi	r30, 0x08	; 8
    1e80:	f2 e0       	ldi	r31, 0x02	; 2
    1e82:	de 01       	movw	r26, r28
    1e84:	11 96       	adiw	r26, 0x01	; 1
    1e86:	01 90       	ld	r0, Z+
    1e88:	0d 92       	st	X+, r0
    1e8a:	8a 95       	dec	r24
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <setup+0x2f2>
	dumpDataToSerial(sss, 5);
    1e8e:	65 e0       	ldi	r22, 0x05	; 5
    1e90:	ce 01       	movw	r24, r28
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	0e 94 bb 03 	call	0x776	; 0x776 <_Z16dumpDataToSerialPih>
	timo_start = millis();
    1e98:	ab d7       	rcall	.+3926   	; 0x2df0 <millis>
    1e9a:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <__data_end>
    1e9e:	70 93 8f 03 	sts	0x038F, r23	; 0x80038f <__data_end+0x1>
    1ea2:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <__data_end+0x2>
    1ea6:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <__data_end+0x3>
    1eaa:	2a 96       	adiw	r28, 0x0a	; 10
}
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	08 95       	ret

00001ec0 <__subsf3>:
    1ec0:	50 58       	subi	r21, 0x80	; 128

00001ec2 <__addsf3>:
    1ec2:	bb 27       	eor	r27, r27
    1ec4:	aa 27       	eor	r26, r26
    1ec6:	0e d0       	rcall	.+28     	; 0x1ee4 <__addsf3x>
    1ec8:	0d c1       	rjmp	.+538    	; 0x20e4 <__fp_round>
    1eca:	fe d0       	rcall	.+508    	; 0x20c8 <__fp_pscA>
    1ecc:	30 f0       	brcs	.+12     	; 0x1eda <__addsf3+0x18>
    1ece:	03 d1       	rcall	.+518    	; 0x20d6 <__fp_pscB>
    1ed0:	20 f0       	brcs	.+8      	; 0x1eda <__addsf3+0x18>
    1ed2:	31 f4       	brne	.+12     	; 0x1ee0 <__addsf3+0x1e>
    1ed4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ed6:	11 f4       	brne	.+4      	; 0x1edc <__addsf3+0x1a>
    1ed8:	1e f4       	brtc	.+6      	; 0x1ee0 <__addsf3+0x1e>
    1eda:	f3 c0       	rjmp	.+486    	; 0x20c2 <__fp_nan>
    1edc:	0e f4       	brtc	.+2      	; 0x1ee0 <__addsf3+0x1e>
    1ede:	e0 95       	com	r30
    1ee0:	e7 fb       	bst	r30, 7
    1ee2:	e9 c0       	rjmp	.+466    	; 0x20b6 <__fp_inf>

00001ee4 <__addsf3x>:
    1ee4:	e9 2f       	mov	r30, r25
    1ee6:	0f d1       	rcall	.+542    	; 0x2106 <__fp_split3>
    1ee8:	80 f3       	brcs	.-32     	; 0x1eca <__addsf3+0x8>
    1eea:	ba 17       	cp	r27, r26
    1eec:	62 07       	cpc	r22, r18
    1eee:	73 07       	cpc	r23, r19
    1ef0:	84 07       	cpc	r24, r20
    1ef2:	95 07       	cpc	r25, r21
    1ef4:	18 f0       	brcs	.+6      	; 0x1efc <__addsf3x+0x18>
    1ef6:	71 f4       	brne	.+28     	; 0x1f14 <__addsf3x+0x30>
    1ef8:	9e f5       	brtc	.+102    	; 0x1f60 <__addsf3x+0x7c>
    1efa:	27 c1       	rjmp	.+590    	; 0x214a <__fp_zero>
    1efc:	0e f4       	brtc	.+2      	; 0x1f00 <__addsf3x+0x1c>
    1efe:	e0 95       	com	r30
    1f00:	0b 2e       	mov	r0, r27
    1f02:	ba 2f       	mov	r27, r26
    1f04:	a0 2d       	mov	r26, r0
    1f06:	0b 01       	movw	r0, r22
    1f08:	b9 01       	movw	r22, r18
    1f0a:	90 01       	movw	r18, r0
    1f0c:	0c 01       	movw	r0, r24
    1f0e:	ca 01       	movw	r24, r20
    1f10:	a0 01       	movw	r20, r0
    1f12:	11 24       	eor	r1, r1
    1f14:	ff 27       	eor	r31, r31
    1f16:	59 1b       	sub	r21, r25
    1f18:	99 f0       	breq	.+38     	; 0x1f40 <__addsf3x+0x5c>
    1f1a:	59 3f       	cpi	r21, 0xF9	; 249
    1f1c:	50 f4       	brcc	.+20     	; 0x1f32 <__addsf3x+0x4e>
    1f1e:	50 3e       	cpi	r21, 0xE0	; 224
    1f20:	68 f1       	brcs	.+90     	; 0x1f7c <__addsf3x+0x98>
    1f22:	1a 16       	cp	r1, r26
    1f24:	f0 40       	sbci	r31, 0x00	; 0
    1f26:	a2 2f       	mov	r26, r18
    1f28:	23 2f       	mov	r18, r19
    1f2a:	34 2f       	mov	r19, r20
    1f2c:	44 27       	eor	r20, r20
    1f2e:	58 5f       	subi	r21, 0xF8	; 248
    1f30:	f3 cf       	rjmp	.-26     	; 0x1f18 <__addsf3x+0x34>
    1f32:	46 95       	lsr	r20
    1f34:	37 95       	ror	r19
    1f36:	27 95       	ror	r18
    1f38:	a7 95       	ror	r26
    1f3a:	f0 40       	sbci	r31, 0x00	; 0
    1f3c:	53 95       	inc	r21
    1f3e:	c9 f7       	brne	.-14     	; 0x1f32 <__addsf3x+0x4e>
    1f40:	7e f4       	brtc	.+30     	; 0x1f60 <__addsf3x+0x7c>
    1f42:	1f 16       	cp	r1, r31
    1f44:	ba 0b       	sbc	r27, r26
    1f46:	62 0b       	sbc	r22, r18
    1f48:	73 0b       	sbc	r23, r19
    1f4a:	84 0b       	sbc	r24, r20
    1f4c:	ba f0       	brmi	.+46     	; 0x1f7c <__addsf3x+0x98>
    1f4e:	91 50       	subi	r25, 0x01	; 1
    1f50:	a1 f0       	breq	.+40     	; 0x1f7a <__addsf3x+0x96>
    1f52:	ff 0f       	add	r31, r31
    1f54:	bb 1f       	adc	r27, r27
    1f56:	66 1f       	adc	r22, r22
    1f58:	77 1f       	adc	r23, r23
    1f5a:	88 1f       	adc	r24, r24
    1f5c:	c2 f7       	brpl	.-16     	; 0x1f4e <__addsf3x+0x6a>
    1f5e:	0e c0       	rjmp	.+28     	; 0x1f7c <__addsf3x+0x98>
    1f60:	ba 0f       	add	r27, r26
    1f62:	62 1f       	adc	r22, r18
    1f64:	73 1f       	adc	r23, r19
    1f66:	84 1f       	adc	r24, r20
    1f68:	48 f4       	brcc	.+18     	; 0x1f7c <__addsf3x+0x98>
    1f6a:	87 95       	ror	r24
    1f6c:	77 95       	ror	r23
    1f6e:	67 95       	ror	r22
    1f70:	b7 95       	ror	r27
    1f72:	f7 95       	ror	r31
    1f74:	9e 3f       	cpi	r25, 0xFE	; 254
    1f76:	08 f0       	brcs	.+2      	; 0x1f7a <__addsf3x+0x96>
    1f78:	b3 cf       	rjmp	.-154    	; 0x1ee0 <__addsf3+0x1e>
    1f7a:	93 95       	inc	r25
    1f7c:	88 0f       	add	r24, r24
    1f7e:	08 f0       	brcs	.+2      	; 0x1f82 <__addsf3x+0x9e>
    1f80:	99 27       	eor	r25, r25
    1f82:	ee 0f       	add	r30, r30
    1f84:	97 95       	ror	r25
    1f86:	87 95       	ror	r24
    1f88:	08 95       	ret

00001f8a <__cmpsf2>:
    1f8a:	71 d0       	rcall	.+226    	; 0x206e <__fp_cmp>
    1f8c:	08 f4       	brcc	.+2      	; 0x1f90 <__cmpsf2+0x6>
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	08 95       	ret

00001f92 <__fixsfsi>:
    1f92:	04 d0       	rcall	.+8      	; 0x1f9c <__fixunssfsi>
    1f94:	68 94       	set
    1f96:	b1 11       	cpse	r27, r1
    1f98:	d9 c0       	rjmp	.+434    	; 0x214c <__fp_szero>
    1f9a:	08 95       	ret

00001f9c <__fixunssfsi>:
    1f9c:	bc d0       	rcall	.+376    	; 0x2116 <__fp_splitA>
    1f9e:	88 f0       	brcs	.+34     	; 0x1fc2 <__fixunssfsi+0x26>
    1fa0:	9f 57       	subi	r25, 0x7F	; 127
    1fa2:	90 f0       	brcs	.+36     	; 0x1fc8 <__fixunssfsi+0x2c>
    1fa4:	b9 2f       	mov	r27, r25
    1fa6:	99 27       	eor	r25, r25
    1fa8:	b7 51       	subi	r27, 0x17	; 23
    1faa:	a0 f0       	brcs	.+40     	; 0x1fd4 <__fixunssfsi+0x38>
    1fac:	d1 f0       	breq	.+52     	; 0x1fe2 <__fixunssfsi+0x46>
    1fae:	66 0f       	add	r22, r22
    1fb0:	77 1f       	adc	r23, r23
    1fb2:	88 1f       	adc	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	1a f0       	brmi	.+6      	; 0x1fbe <__fixunssfsi+0x22>
    1fb8:	ba 95       	dec	r27
    1fba:	c9 f7       	brne	.-14     	; 0x1fae <__fixunssfsi+0x12>
    1fbc:	12 c0       	rjmp	.+36     	; 0x1fe2 <__fixunssfsi+0x46>
    1fbe:	b1 30       	cpi	r27, 0x01	; 1
    1fc0:	81 f0       	breq	.+32     	; 0x1fe2 <__fixunssfsi+0x46>
    1fc2:	c3 d0       	rcall	.+390    	; 0x214a <__fp_zero>
    1fc4:	b1 e0       	ldi	r27, 0x01	; 1
    1fc6:	08 95       	ret
    1fc8:	c0 c0       	rjmp	.+384    	; 0x214a <__fp_zero>
    1fca:	67 2f       	mov	r22, r23
    1fcc:	78 2f       	mov	r23, r24
    1fce:	88 27       	eor	r24, r24
    1fd0:	b8 5f       	subi	r27, 0xF8	; 248
    1fd2:	39 f0       	breq	.+14     	; 0x1fe2 <__fixunssfsi+0x46>
    1fd4:	b9 3f       	cpi	r27, 0xF9	; 249
    1fd6:	cc f3       	brlt	.-14     	; 0x1fca <__fixunssfsi+0x2e>
    1fd8:	86 95       	lsr	r24
    1fda:	77 95       	ror	r23
    1fdc:	67 95       	ror	r22
    1fde:	b3 95       	inc	r27
    1fe0:	d9 f7       	brne	.-10     	; 0x1fd8 <__fixunssfsi+0x3c>
    1fe2:	3e f4       	brtc	.+14     	; 0x1ff2 <__fixunssfsi+0x56>
    1fe4:	90 95       	com	r25
    1fe6:	80 95       	com	r24
    1fe8:	70 95       	com	r23
    1fea:	61 95       	neg	r22
    1fec:	7f 4f       	sbci	r23, 0xFF	; 255
    1fee:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff2:	08 95       	ret

00001ff4 <__floatunsisf>:
    1ff4:	e8 94       	clt
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <__floatsisf+0x12>

00001ff8 <__floatsisf>:
    1ff8:	97 fb       	bst	r25, 7
    1ffa:	3e f4       	brtc	.+14     	; 0x200a <__floatsisf+0x12>
    1ffc:	90 95       	com	r25
    1ffe:	80 95       	com	r24
    2000:	70 95       	com	r23
    2002:	61 95       	neg	r22
    2004:	7f 4f       	sbci	r23, 0xFF	; 255
    2006:	8f 4f       	sbci	r24, 0xFF	; 255
    2008:	9f 4f       	sbci	r25, 0xFF	; 255
    200a:	99 23       	and	r25, r25
    200c:	a9 f0       	breq	.+42     	; 0x2038 <__floatsisf+0x40>
    200e:	f9 2f       	mov	r31, r25
    2010:	96 e9       	ldi	r25, 0x96	; 150
    2012:	bb 27       	eor	r27, r27
    2014:	93 95       	inc	r25
    2016:	f6 95       	lsr	r31
    2018:	87 95       	ror	r24
    201a:	77 95       	ror	r23
    201c:	67 95       	ror	r22
    201e:	b7 95       	ror	r27
    2020:	f1 11       	cpse	r31, r1
    2022:	f8 cf       	rjmp	.-16     	; 0x2014 <__floatsisf+0x1c>
    2024:	fa f4       	brpl	.+62     	; 0x2064 <__floatsisf+0x6c>
    2026:	bb 0f       	add	r27, r27
    2028:	11 f4       	brne	.+4      	; 0x202e <__floatsisf+0x36>
    202a:	60 ff       	sbrs	r22, 0
    202c:	1b c0       	rjmp	.+54     	; 0x2064 <__floatsisf+0x6c>
    202e:	6f 5f       	subi	r22, 0xFF	; 255
    2030:	7f 4f       	sbci	r23, 0xFF	; 255
    2032:	8f 4f       	sbci	r24, 0xFF	; 255
    2034:	9f 4f       	sbci	r25, 0xFF	; 255
    2036:	16 c0       	rjmp	.+44     	; 0x2064 <__floatsisf+0x6c>
    2038:	88 23       	and	r24, r24
    203a:	11 f0       	breq	.+4      	; 0x2040 <__floatsisf+0x48>
    203c:	96 e9       	ldi	r25, 0x96	; 150
    203e:	11 c0       	rjmp	.+34     	; 0x2062 <__floatsisf+0x6a>
    2040:	77 23       	and	r23, r23
    2042:	21 f0       	breq	.+8      	; 0x204c <__floatsisf+0x54>
    2044:	9e e8       	ldi	r25, 0x8E	; 142
    2046:	87 2f       	mov	r24, r23
    2048:	76 2f       	mov	r23, r22
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <__floatsisf+0x5e>
    204c:	66 23       	and	r22, r22
    204e:	71 f0       	breq	.+28     	; 0x206c <__floatsisf+0x74>
    2050:	96 e8       	ldi	r25, 0x86	; 134
    2052:	86 2f       	mov	r24, r22
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	2a f0       	brmi	.+10     	; 0x2064 <__floatsisf+0x6c>
    205a:	9a 95       	dec	r25
    205c:	66 0f       	add	r22, r22
    205e:	77 1f       	adc	r23, r23
    2060:	88 1f       	adc	r24, r24
    2062:	da f7       	brpl	.-10     	; 0x205a <__floatsisf+0x62>
    2064:	88 0f       	add	r24, r24
    2066:	96 95       	lsr	r25
    2068:	87 95       	ror	r24
    206a:	97 f9       	bld	r25, 7
    206c:	08 95       	ret

0000206e <__fp_cmp>:
    206e:	99 0f       	add	r25, r25
    2070:	00 08       	sbc	r0, r0
    2072:	55 0f       	add	r21, r21
    2074:	aa 0b       	sbc	r26, r26
    2076:	e0 e8       	ldi	r30, 0x80	; 128
    2078:	fe ef       	ldi	r31, 0xFE	; 254
    207a:	16 16       	cp	r1, r22
    207c:	17 06       	cpc	r1, r23
    207e:	e8 07       	cpc	r30, r24
    2080:	f9 07       	cpc	r31, r25
    2082:	c0 f0       	brcs	.+48     	; 0x20b4 <__fp_cmp+0x46>
    2084:	12 16       	cp	r1, r18
    2086:	13 06       	cpc	r1, r19
    2088:	e4 07       	cpc	r30, r20
    208a:	f5 07       	cpc	r31, r21
    208c:	98 f0       	brcs	.+38     	; 0x20b4 <__fp_cmp+0x46>
    208e:	62 1b       	sub	r22, r18
    2090:	73 0b       	sbc	r23, r19
    2092:	84 0b       	sbc	r24, r20
    2094:	95 0b       	sbc	r25, r21
    2096:	39 f4       	brne	.+14     	; 0x20a6 <__fp_cmp+0x38>
    2098:	0a 26       	eor	r0, r26
    209a:	61 f0       	breq	.+24     	; 0x20b4 <__fp_cmp+0x46>
    209c:	23 2b       	or	r18, r19
    209e:	24 2b       	or	r18, r20
    20a0:	25 2b       	or	r18, r21
    20a2:	21 f4       	brne	.+8      	; 0x20ac <__fp_cmp+0x3e>
    20a4:	08 95       	ret
    20a6:	0a 26       	eor	r0, r26
    20a8:	09 f4       	brne	.+2      	; 0x20ac <__fp_cmp+0x3e>
    20aa:	a1 40       	sbci	r26, 0x01	; 1
    20ac:	a6 95       	lsr	r26
    20ae:	8f ef       	ldi	r24, 0xFF	; 255
    20b0:	81 1d       	adc	r24, r1
    20b2:	81 1d       	adc	r24, r1
    20b4:	08 95       	ret

000020b6 <__fp_inf>:
    20b6:	97 f9       	bld	r25, 7
    20b8:	9f 67       	ori	r25, 0x7F	; 127
    20ba:	80 e8       	ldi	r24, 0x80	; 128
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	08 95       	ret

000020c2 <__fp_nan>:
    20c2:	9f ef       	ldi	r25, 0xFF	; 255
    20c4:	80 ec       	ldi	r24, 0xC0	; 192
    20c6:	08 95       	ret

000020c8 <__fp_pscA>:
    20c8:	00 24       	eor	r0, r0
    20ca:	0a 94       	dec	r0
    20cc:	16 16       	cp	r1, r22
    20ce:	17 06       	cpc	r1, r23
    20d0:	18 06       	cpc	r1, r24
    20d2:	09 06       	cpc	r0, r25
    20d4:	08 95       	ret

000020d6 <__fp_pscB>:
    20d6:	00 24       	eor	r0, r0
    20d8:	0a 94       	dec	r0
    20da:	12 16       	cp	r1, r18
    20dc:	13 06       	cpc	r1, r19
    20de:	14 06       	cpc	r1, r20
    20e0:	05 06       	cpc	r0, r21
    20e2:	08 95       	ret

000020e4 <__fp_round>:
    20e4:	09 2e       	mov	r0, r25
    20e6:	03 94       	inc	r0
    20e8:	00 0c       	add	r0, r0
    20ea:	11 f4       	brne	.+4      	; 0x20f0 <__fp_round+0xc>
    20ec:	88 23       	and	r24, r24
    20ee:	52 f0       	brmi	.+20     	; 0x2104 <__fp_round+0x20>
    20f0:	bb 0f       	add	r27, r27
    20f2:	40 f4       	brcc	.+16     	; 0x2104 <__fp_round+0x20>
    20f4:	bf 2b       	or	r27, r31
    20f6:	11 f4       	brne	.+4      	; 0x20fc <__fp_round+0x18>
    20f8:	60 ff       	sbrs	r22, 0
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <__fp_round+0x20>
    20fc:	6f 5f       	subi	r22, 0xFF	; 255
    20fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2100:	8f 4f       	sbci	r24, 0xFF	; 255
    2102:	9f 4f       	sbci	r25, 0xFF	; 255
    2104:	08 95       	ret

00002106 <__fp_split3>:
    2106:	57 fd       	sbrc	r21, 7
    2108:	90 58       	subi	r25, 0x80	; 128
    210a:	44 0f       	add	r20, r20
    210c:	55 1f       	adc	r21, r21
    210e:	59 f0       	breq	.+22     	; 0x2126 <__fp_splitA+0x10>
    2110:	5f 3f       	cpi	r21, 0xFF	; 255
    2112:	71 f0       	breq	.+28     	; 0x2130 <__fp_splitA+0x1a>
    2114:	47 95       	ror	r20

00002116 <__fp_splitA>:
    2116:	88 0f       	add	r24, r24
    2118:	97 fb       	bst	r25, 7
    211a:	99 1f       	adc	r25, r25
    211c:	61 f0       	breq	.+24     	; 0x2136 <__fp_splitA+0x20>
    211e:	9f 3f       	cpi	r25, 0xFF	; 255
    2120:	79 f0       	breq	.+30     	; 0x2140 <__fp_splitA+0x2a>
    2122:	87 95       	ror	r24
    2124:	08 95       	ret
    2126:	12 16       	cp	r1, r18
    2128:	13 06       	cpc	r1, r19
    212a:	14 06       	cpc	r1, r20
    212c:	55 1f       	adc	r21, r21
    212e:	f2 cf       	rjmp	.-28     	; 0x2114 <__fp_split3+0xe>
    2130:	46 95       	lsr	r20
    2132:	f1 df       	rcall	.-30     	; 0x2116 <__fp_splitA>
    2134:	08 c0       	rjmp	.+16     	; 0x2146 <__fp_splitA+0x30>
    2136:	16 16       	cp	r1, r22
    2138:	17 06       	cpc	r1, r23
    213a:	18 06       	cpc	r1, r24
    213c:	99 1f       	adc	r25, r25
    213e:	f1 cf       	rjmp	.-30     	; 0x2122 <__fp_splitA+0xc>
    2140:	86 95       	lsr	r24
    2142:	71 05       	cpc	r23, r1
    2144:	61 05       	cpc	r22, r1
    2146:	08 94       	sec
    2148:	08 95       	ret

0000214a <__fp_zero>:
    214a:	e8 94       	clt

0000214c <__fp_szero>:
    214c:	bb 27       	eor	r27, r27
    214e:	66 27       	eor	r22, r22
    2150:	77 27       	eor	r23, r23
    2152:	cb 01       	movw	r24, r22
    2154:	97 f9       	bld	r25, 7
    2156:	08 95       	ret

00002158 <__mulsf3>:
    2158:	0b d0       	rcall	.+22     	; 0x2170 <__mulsf3x>
    215a:	c4 cf       	rjmp	.-120    	; 0x20e4 <__fp_round>
    215c:	b5 df       	rcall	.-150    	; 0x20c8 <__fp_pscA>
    215e:	28 f0       	brcs	.+10     	; 0x216a <__mulsf3+0x12>
    2160:	ba df       	rcall	.-140    	; 0x20d6 <__fp_pscB>
    2162:	18 f0       	brcs	.+6      	; 0x216a <__mulsf3+0x12>
    2164:	95 23       	and	r25, r21
    2166:	09 f0       	breq	.+2      	; 0x216a <__mulsf3+0x12>
    2168:	a6 cf       	rjmp	.-180    	; 0x20b6 <__fp_inf>
    216a:	ab cf       	rjmp	.-170    	; 0x20c2 <__fp_nan>
    216c:	11 24       	eor	r1, r1
    216e:	ee cf       	rjmp	.-36     	; 0x214c <__fp_szero>

00002170 <__mulsf3x>:
    2170:	ca df       	rcall	.-108    	; 0x2106 <__fp_split3>
    2172:	a0 f3       	brcs	.-24     	; 0x215c <__mulsf3+0x4>

00002174 <__mulsf3_pse>:
    2174:	95 9f       	mul	r25, r21
    2176:	d1 f3       	breq	.-12     	; 0x216c <__mulsf3+0x14>
    2178:	95 0f       	add	r25, r21
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	55 1f       	adc	r21, r21
    217e:	62 9f       	mul	r22, r18
    2180:	f0 01       	movw	r30, r0
    2182:	72 9f       	mul	r23, r18
    2184:	bb 27       	eor	r27, r27
    2186:	f0 0d       	add	r31, r0
    2188:	b1 1d       	adc	r27, r1
    218a:	63 9f       	mul	r22, r19
    218c:	aa 27       	eor	r26, r26
    218e:	f0 0d       	add	r31, r0
    2190:	b1 1d       	adc	r27, r1
    2192:	aa 1f       	adc	r26, r26
    2194:	64 9f       	mul	r22, r20
    2196:	66 27       	eor	r22, r22
    2198:	b0 0d       	add	r27, r0
    219a:	a1 1d       	adc	r26, r1
    219c:	66 1f       	adc	r22, r22
    219e:	82 9f       	mul	r24, r18
    21a0:	22 27       	eor	r18, r18
    21a2:	b0 0d       	add	r27, r0
    21a4:	a1 1d       	adc	r26, r1
    21a6:	62 1f       	adc	r22, r18
    21a8:	73 9f       	mul	r23, r19
    21aa:	b0 0d       	add	r27, r0
    21ac:	a1 1d       	adc	r26, r1
    21ae:	62 1f       	adc	r22, r18
    21b0:	83 9f       	mul	r24, r19
    21b2:	a0 0d       	add	r26, r0
    21b4:	61 1d       	adc	r22, r1
    21b6:	22 1f       	adc	r18, r18
    21b8:	74 9f       	mul	r23, r20
    21ba:	33 27       	eor	r19, r19
    21bc:	a0 0d       	add	r26, r0
    21be:	61 1d       	adc	r22, r1
    21c0:	23 1f       	adc	r18, r19
    21c2:	84 9f       	mul	r24, r20
    21c4:	60 0d       	add	r22, r0
    21c6:	21 1d       	adc	r18, r1
    21c8:	82 2f       	mov	r24, r18
    21ca:	76 2f       	mov	r23, r22
    21cc:	6a 2f       	mov	r22, r26
    21ce:	11 24       	eor	r1, r1
    21d0:	9f 57       	subi	r25, 0x7F	; 127
    21d2:	50 40       	sbci	r21, 0x00	; 0
    21d4:	8a f0       	brmi	.+34     	; 0x21f8 <__mulsf3_pse+0x84>
    21d6:	e1 f0       	breq	.+56     	; 0x2210 <__stack+0x11>
    21d8:	88 23       	and	r24, r24
    21da:	4a f0       	brmi	.+18     	; 0x21ee <__mulsf3_pse+0x7a>
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	bb 1f       	adc	r27, r27
    21e2:	66 1f       	adc	r22, r22
    21e4:	77 1f       	adc	r23, r23
    21e6:	88 1f       	adc	r24, r24
    21e8:	91 50       	subi	r25, 0x01	; 1
    21ea:	50 40       	sbci	r21, 0x00	; 0
    21ec:	a9 f7       	brne	.-22     	; 0x21d8 <__mulsf3_pse+0x64>
    21ee:	9e 3f       	cpi	r25, 0xFE	; 254
    21f0:	51 05       	cpc	r21, r1
    21f2:	70 f0       	brcs	.+28     	; 0x2210 <__stack+0x11>
    21f4:	60 cf       	rjmp	.-320    	; 0x20b6 <__fp_inf>
    21f6:	aa cf       	rjmp	.-172    	; 0x214c <__fp_szero>
    21f8:	5f 3f       	cpi	r21, 0xFF	; 255
    21fa:	ec f3       	brlt	.-6      	; 0x21f6 <__mulsf3_pse+0x82>
    21fc:	98 3e       	cpi	r25, 0xE8	; 232
    21fe:	dc f3       	brlt	.-10     	; 0x21f6 <__mulsf3_pse+0x82>
    2200:	86 95       	lsr	r24
    2202:	77 95       	ror	r23
    2204:	67 95       	ror	r22
    2206:	b7 95       	ror	r27
    2208:	f7 95       	ror	r31
    220a:	e7 95       	ror	r30
    220c:	9f 5f       	subi	r25, 0xFF	; 255
    220e:	c1 f7       	brne	.-16     	; 0x2200 <__stack+0x1>
    2210:	fe 2b       	or	r31, r30
    2212:	88 0f       	add	r24, r24
    2214:	91 1d       	adc	r25, r1
    2216:	96 95       	lsr	r25
    2218:	87 95       	ror	r24
    221a:	97 f9       	bld	r25, 7
    221c:	08 95       	ret

0000221e <pow>:
    221e:	fa 01       	movw	r30, r20
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	30 96       	adiw	r30, 0x00	; 0
    2226:	21 05       	cpc	r18, r1
    2228:	31 05       	cpc	r19, r1
    222a:	99 f1       	breq	.+102    	; 0x2292 <pow+0x74>
    222c:	61 15       	cp	r22, r1
    222e:	71 05       	cpc	r23, r1
    2230:	61 f4       	brne	.+24     	; 0x224a <pow+0x2c>
    2232:	80 38       	cpi	r24, 0x80	; 128
    2234:	bf e3       	ldi	r27, 0x3F	; 63
    2236:	9b 07       	cpc	r25, r27
    2238:	49 f1       	breq	.+82     	; 0x228c <pow+0x6e>
    223a:	68 94       	set
    223c:	90 38       	cpi	r25, 0x80	; 128
    223e:	81 05       	cpc	r24, r1
    2240:	61 f0       	breq	.+24     	; 0x225a <pow+0x3c>
    2242:	80 38       	cpi	r24, 0x80	; 128
    2244:	bf ef       	ldi	r27, 0xFF	; 255
    2246:	9b 07       	cpc	r25, r27
    2248:	41 f0       	breq	.+16     	; 0x225a <pow+0x3c>
    224a:	99 23       	and	r25, r25
    224c:	42 f5       	brpl	.+80     	; 0x229e <pow+0x80>
    224e:	ff 3f       	cpi	r31, 0xFF	; 255
    2250:	e1 05       	cpc	r30, r1
    2252:	31 05       	cpc	r19, r1
    2254:	21 05       	cpc	r18, r1
    2256:	11 f1       	breq	.+68     	; 0x229c <pow+0x7e>
    2258:	e8 94       	clt
    225a:	08 94       	sec
    225c:	e7 95       	ror	r30
    225e:	d9 01       	movw	r26, r18
    2260:	aa 23       	and	r26, r26
    2262:	29 f4       	brne	.+10     	; 0x226e <pow+0x50>
    2264:	ab 2f       	mov	r26, r27
    2266:	be 2f       	mov	r27, r30
    2268:	f8 5f       	subi	r31, 0xF8	; 248
    226a:	d0 f3       	brcs	.-12     	; 0x2260 <pow+0x42>
    226c:	10 c0       	rjmp	.+32     	; 0x228e <pow+0x70>
    226e:	ff 5f       	subi	r31, 0xFF	; 255
    2270:	70 f4       	brcc	.+28     	; 0x228e <pow+0x70>
    2272:	a6 95       	lsr	r26
    2274:	e0 f7       	brcc	.-8      	; 0x226e <pow+0x50>
    2276:	f7 39       	cpi	r31, 0x97	; 151
    2278:	50 f0       	brcs	.+20     	; 0x228e <pow+0x70>
    227a:	19 f0       	breq	.+6      	; 0x2282 <pow+0x64>
    227c:	ff 3a       	cpi	r31, 0xAF	; 175
    227e:	38 f4       	brcc	.+14     	; 0x228e <pow+0x70>
    2280:	9f 77       	andi	r25, 0x7F	; 127
    2282:	9f 93       	push	r25
    2284:	0c d0       	rcall	.+24     	; 0x229e <pow+0x80>
    2286:	0f 90       	pop	r0
    2288:	07 fc       	sbrc	r0, 7
    228a:	90 58       	subi	r25, 0x80	; 128
    228c:	08 95       	ret
    228e:	3e f0       	brts	.+14     	; 0x229e <pow+0x80>
    2290:	18 cf       	rjmp	.-464    	; 0x20c2 <__fp_nan>
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	80 e8       	ldi	r24, 0x80	; 128
    2298:	9f e3       	ldi	r25, 0x3F	; 63
    229a:	08 95       	ret
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	9f 77       	andi	r25, 0x7F	; 127
    22a0:	5f 93       	push	r21
    22a2:	4f 93       	push	r20
    22a4:	3f 93       	push	r19
    22a6:	2f 93       	push	r18
    22a8:	9e d0       	rcall	.+316    	; 0x23e6 <log>
    22aa:	2f 91       	pop	r18
    22ac:	3f 91       	pop	r19
    22ae:	4f 91       	pop	r20
    22b0:	5f 91       	pop	r21
    22b2:	52 df       	rcall	.-348    	; 0x2158 <__mulsf3>
    22b4:	05 c0       	rjmp	.+10     	; 0x22c0 <exp>
    22b6:	19 f4       	brne	.+6      	; 0x22be <pow+0xa0>
    22b8:	0e f0       	brts	.+2      	; 0x22bc <pow+0x9e>
    22ba:	fd ce       	rjmp	.-518    	; 0x20b6 <__fp_inf>
    22bc:	46 cf       	rjmp	.-372    	; 0x214a <__fp_zero>
    22be:	01 cf       	rjmp	.-510    	; 0x20c2 <__fp_nan>

000022c0 <exp>:
    22c0:	2a df       	rcall	.-428    	; 0x2116 <__fp_splitA>
    22c2:	c8 f3       	brcs	.-14     	; 0x22b6 <pow+0x98>
    22c4:	96 38       	cpi	r25, 0x86	; 134
    22c6:	c0 f7       	brcc	.-16     	; 0x22b8 <pow+0x9a>
    22c8:	07 f8       	bld	r0, 7
    22ca:	0f 92       	push	r0
    22cc:	e8 94       	clt
    22ce:	2b e3       	ldi	r18, 0x3B	; 59
    22d0:	3a ea       	ldi	r19, 0xAA	; 170
    22d2:	48 eb       	ldi	r20, 0xB8	; 184
    22d4:	5f e7       	ldi	r21, 0x7F	; 127
    22d6:	4e df       	rcall	.-356    	; 0x2174 <__mulsf3_pse>
    22d8:	0f 92       	push	r0
    22da:	0f 92       	push	r0
    22dc:	0f 92       	push	r0
    22de:	4d b7       	in	r20, 0x3d	; 61
    22e0:	5e b7       	in	r21, 0x3e	; 62
    22e2:	0f 92       	push	r0
    22e4:	c0 d0       	rcall	.+384    	; 0x2466 <modf>
    22e6:	e4 ee       	ldi	r30, 0xE4	; 228
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	16 d0       	rcall	.+44     	; 0x2318 <__fp_powser>
    22ec:	4f 91       	pop	r20
    22ee:	5f 91       	pop	r21
    22f0:	ef 91       	pop	r30
    22f2:	ff 91       	pop	r31
    22f4:	e5 95       	asr	r30
    22f6:	ee 1f       	adc	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	49 f0       	breq	.+18     	; 0x230e <exp+0x4e>
    22fc:	fe 57       	subi	r31, 0x7E	; 126
    22fe:	e0 68       	ori	r30, 0x80	; 128
    2300:	44 27       	eor	r20, r20
    2302:	ee 0f       	add	r30, r30
    2304:	44 1f       	adc	r20, r20
    2306:	fa 95       	dec	r31
    2308:	e1 f7       	brne	.-8      	; 0x2302 <exp+0x42>
    230a:	41 95       	neg	r20
    230c:	55 0b       	sbc	r21, r21
    230e:	32 d0       	rcall	.+100    	; 0x2374 <ldexp>
    2310:	0f 90       	pop	r0
    2312:	07 fe       	sbrs	r0, 7
    2314:	26 c0       	rjmp	.+76     	; 0x2362 <inverse>
    2316:	08 95       	ret

00002318 <__fp_powser>:
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	1f 93       	push	r17
    231e:	0f 93       	push	r16
    2320:	ff 92       	push	r15
    2322:	ef 92       	push	r14
    2324:	df 92       	push	r13
    2326:	7b 01       	movw	r14, r22
    2328:	8c 01       	movw	r16, r24
    232a:	68 94       	set
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <__fp_powser+0x20>
    232e:	da 2e       	mov	r13, r26
    2330:	ef 01       	movw	r28, r30
    2332:	1e df       	rcall	.-452    	; 0x2170 <__mulsf3x>
    2334:	fe 01       	movw	r30, r28
    2336:	e8 94       	clt
    2338:	a5 91       	lpm	r26, Z+
    233a:	25 91       	lpm	r18, Z+
    233c:	35 91       	lpm	r19, Z+
    233e:	45 91       	lpm	r20, Z+
    2340:	55 91       	lpm	r21, Z+
    2342:	ae f3       	brts	.-22     	; 0x232e <__fp_powser+0x16>
    2344:	ef 01       	movw	r28, r30
    2346:	ce dd       	rcall	.-1124   	; 0x1ee4 <__addsf3x>
    2348:	fe 01       	movw	r30, r28
    234a:	97 01       	movw	r18, r14
    234c:	a8 01       	movw	r20, r16
    234e:	da 94       	dec	r13
    2350:	79 f7       	brne	.-34     	; 0x2330 <__fp_powser+0x18>
    2352:	df 90       	pop	r13
    2354:	ef 90       	pop	r14
    2356:	ff 90       	pop	r15
    2358:	0f 91       	pop	r16
    235a:	1f 91       	pop	r17
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <inverse>:
    2362:	9b 01       	movw	r18, r22
    2364:	ac 01       	movw	r20, r24
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	80 e8       	ldi	r24, 0x80	; 128
    236c:	9f e3       	ldi	r25, 0x3F	; 63
    236e:	ae c0       	rjmp	.+348    	; 0x24cc <__divsf3>
    2370:	a2 ce       	rjmp	.-700    	; 0x20b6 <__fp_inf>
    2372:	14 c1       	rjmp	.+552    	; 0x259c <__fp_mpack>

00002374 <ldexp>:
    2374:	d0 de       	rcall	.-608    	; 0x2116 <__fp_splitA>
    2376:	e8 f3       	brcs	.-6      	; 0x2372 <inverse+0x10>
    2378:	99 23       	and	r25, r25
    237a:	d9 f3       	breq	.-10     	; 0x2372 <inverse+0x10>
    237c:	94 0f       	add	r25, r20
    237e:	51 1d       	adc	r21, r1
    2380:	bb f3       	brvs	.-18     	; 0x2370 <inverse+0xe>
    2382:	91 50       	subi	r25, 0x01	; 1
    2384:	50 40       	sbci	r21, 0x00	; 0
    2386:	94 f0       	brlt	.+36     	; 0x23ac <ldexp+0x38>
    2388:	59 f0       	breq	.+22     	; 0x23a0 <ldexp+0x2c>
    238a:	88 23       	and	r24, r24
    238c:	32 f0       	brmi	.+12     	; 0x239a <ldexp+0x26>
    238e:	66 0f       	add	r22, r22
    2390:	77 1f       	adc	r23, r23
    2392:	88 1f       	adc	r24, r24
    2394:	91 50       	subi	r25, 0x01	; 1
    2396:	50 40       	sbci	r21, 0x00	; 0
    2398:	c1 f7       	brne	.-16     	; 0x238a <ldexp+0x16>
    239a:	9e 3f       	cpi	r25, 0xFE	; 254
    239c:	51 05       	cpc	r21, r1
    239e:	44 f7       	brge	.-48     	; 0x2370 <inverse+0xe>
    23a0:	88 0f       	add	r24, r24
    23a2:	91 1d       	adc	r25, r1
    23a4:	96 95       	lsr	r25
    23a6:	87 95       	ror	r24
    23a8:	97 f9       	bld	r25, 7
    23aa:	08 95       	ret
    23ac:	5f 3f       	cpi	r21, 0xFF	; 255
    23ae:	ac f0       	brlt	.+42     	; 0x23da <ldexp+0x66>
    23b0:	98 3e       	cpi	r25, 0xE8	; 232
    23b2:	9c f0       	brlt	.+38     	; 0x23da <ldexp+0x66>
    23b4:	bb 27       	eor	r27, r27
    23b6:	86 95       	lsr	r24
    23b8:	77 95       	ror	r23
    23ba:	67 95       	ror	r22
    23bc:	b7 95       	ror	r27
    23be:	08 f4       	brcc	.+2      	; 0x23c2 <ldexp+0x4e>
    23c0:	b1 60       	ori	r27, 0x01	; 1
    23c2:	93 95       	inc	r25
    23c4:	c1 f7       	brne	.-16     	; 0x23b6 <ldexp+0x42>
    23c6:	bb 0f       	add	r27, r27
    23c8:	58 f7       	brcc	.-42     	; 0x23a0 <ldexp+0x2c>
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <ldexp+0x5c>
    23cc:	60 ff       	sbrs	r22, 0
    23ce:	e8 cf       	rjmp	.-48     	; 0x23a0 <ldexp+0x2c>
    23d0:	6f 5f       	subi	r22, 0xFF	; 255
    23d2:	7f 4f       	sbci	r23, 0xFF	; 255
    23d4:	8f 4f       	sbci	r24, 0xFF	; 255
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	e3 cf       	rjmp	.-58     	; 0x23a0 <ldexp+0x2c>
    23da:	b8 ce       	rjmp	.-656    	; 0x214c <__fp_szero>
    23dc:	0e f0       	brts	.+2      	; 0x23e0 <ldexp+0x6c>
    23de:	de c0       	rjmp	.+444    	; 0x259c <__fp_mpack>
    23e0:	70 ce       	rjmp	.-800    	; 0x20c2 <__fp_nan>
    23e2:	68 94       	set
    23e4:	68 ce       	rjmp	.-816    	; 0x20b6 <__fp_inf>

000023e6 <log>:
    23e6:	97 de       	rcall	.-722    	; 0x2116 <__fp_splitA>
    23e8:	c8 f3       	brcs	.-14     	; 0x23dc <ldexp+0x68>
    23ea:	99 23       	and	r25, r25
    23ec:	d1 f3       	breq	.-12     	; 0x23e2 <ldexp+0x6e>
    23ee:	c6 f3       	brts	.-16     	; 0x23e0 <ldexp+0x6c>
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	1f 93       	push	r17
    23f6:	0f 93       	push	r16
    23f8:	ff 92       	push	r15
    23fa:	c9 2f       	mov	r28, r25
    23fc:	dd 27       	eor	r29, r29
    23fe:	88 23       	and	r24, r24
    2400:	2a f0       	brmi	.+10     	; 0x240c <log+0x26>
    2402:	21 97       	sbiw	r28, 0x01	; 1
    2404:	66 0f       	add	r22, r22
    2406:	77 1f       	adc	r23, r23
    2408:	88 1f       	adc	r24, r24
    240a:	da f7       	brpl	.-10     	; 0x2402 <log+0x1c>
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e8       	ldi	r20, 0x80	; 128
    2412:	5f eb       	ldi	r21, 0xBF	; 191
    2414:	9f e3       	ldi	r25, 0x3F	; 63
    2416:	88 39       	cpi	r24, 0x98	; 152
    2418:	20 f0       	brcs	.+8      	; 0x2422 <log+0x3c>
    241a:	80 3e       	cpi	r24, 0xE0	; 224
    241c:	30 f0       	brcs	.+12     	; 0x242a <log+0x44>
    241e:	21 96       	adiw	r28, 0x01	; 1
    2420:	8f 77       	andi	r24, 0x7F	; 127
    2422:	4f dd       	rcall	.-1378   	; 0x1ec2 <__addsf3>
    2424:	ec e0       	ldi	r30, 0x0C	; 12
    2426:	f1 e0       	ldi	r31, 0x01	; 1
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <log+0x4a>
    242a:	4b dd       	rcall	.-1386   	; 0x1ec2 <__addsf3>
    242c:	e9 e3       	ldi	r30, 0x39	; 57
    242e:	f1 e0       	ldi	r31, 0x01	; 1
    2430:	73 df       	rcall	.-282    	; 0x2318 <__fp_powser>
    2432:	8b 01       	movw	r16, r22
    2434:	be 01       	movw	r22, r28
    2436:	ec 01       	movw	r28, r24
    2438:	fb 2e       	mov	r15, r27
    243a:	6f 57       	subi	r22, 0x7F	; 127
    243c:	71 09       	sbc	r23, r1
    243e:	75 95       	asr	r23
    2440:	77 1f       	adc	r23, r23
    2442:	88 0b       	sbc	r24, r24
    2444:	99 0b       	sbc	r25, r25
    2446:	d8 dd       	rcall	.-1104   	; 0x1ff8 <__floatsisf>
    2448:	28 e1       	ldi	r18, 0x18	; 24
    244a:	32 e7       	ldi	r19, 0x72	; 114
    244c:	41 e3       	ldi	r20, 0x31	; 49
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	8f de       	rcall	.-738    	; 0x2170 <__mulsf3x>
    2452:	af 2d       	mov	r26, r15
    2454:	98 01       	movw	r18, r16
    2456:	ae 01       	movw	r20, r28
    2458:	ff 90       	pop	r15
    245a:	0f 91       	pop	r16
    245c:	1f 91       	pop	r17
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	40 dd       	rcall	.-1408   	; 0x1ee4 <__addsf3x>
    2464:	3f ce       	rjmp	.-898    	; 0x20e4 <__fp_round>

00002466 <modf>:
    2466:	fa 01       	movw	r30, r20
    2468:	dc 01       	movw	r26, r24
    246a:	aa 0f       	add	r26, r26
    246c:	bb 1f       	adc	r27, r27
    246e:	9b 01       	movw	r18, r22
    2470:	ac 01       	movw	r20, r24
    2472:	bf 57       	subi	r27, 0x7F	; 127
    2474:	28 f4       	brcc	.+10     	; 0x2480 <modf+0x1a>
    2476:	22 27       	eor	r18, r18
    2478:	33 27       	eor	r19, r19
    247a:	44 27       	eor	r20, r20
    247c:	50 78       	andi	r21, 0x80	; 128
    247e:	1f c0       	rjmp	.+62     	; 0x24be <modf+0x58>
    2480:	b7 51       	subi	r27, 0x17	; 23
    2482:	88 f4       	brcc	.+34     	; 0x24a6 <modf+0x40>
    2484:	ab 2f       	mov	r26, r27
    2486:	00 24       	eor	r0, r0
    2488:	46 95       	lsr	r20
    248a:	37 95       	ror	r19
    248c:	27 95       	ror	r18
    248e:	01 1c       	adc	r0, r1
    2490:	a3 95       	inc	r26
    2492:	d2 f3       	brmi	.-12     	; 0x2488 <modf+0x22>
    2494:	00 20       	and	r0, r0
    2496:	69 f0       	breq	.+26     	; 0x24b2 <modf+0x4c>
    2498:	22 0f       	add	r18, r18
    249a:	33 1f       	adc	r19, r19
    249c:	44 1f       	adc	r20, r20
    249e:	b3 95       	inc	r27
    24a0:	da f3       	brmi	.-10     	; 0x2498 <modf+0x32>
    24a2:	0d d0       	rcall	.+26     	; 0x24be <modf+0x58>
    24a4:	0d cd       	rjmp	.-1510   	; 0x1ec0 <__subsf3>
    24a6:	61 30       	cpi	r22, 0x01	; 1
    24a8:	71 05       	cpc	r23, r1
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	8a 07       	cpc	r24, r26
    24ae:	b9 46       	sbci	r27, 0x69	; 105
    24b0:	30 f4       	brcc	.+12     	; 0x24be <modf+0x58>
    24b2:	9b 01       	movw	r18, r22
    24b4:	ac 01       	movw	r20, r24
    24b6:	66 27       	eor	r22, r22
    24b8:	77 27       	eor	r23, r23
    24ba:	88 27       	eor	r24, r24
    24bc:	90 78       	andi	r25, 0x80	; 128
    24be:	30 96       	adiw	r30, 0x00	; 0
    24c0:	21 f0       	breq	.+8      	; 0x24ca <modf+0x64>
    24c2:	20 83       	st	Z, r18
    24c4:	31 83       	std	Z+1, r19	; 0x01
    24c6:	42 83       	std	Z+2, r20	; 0x02
    24c8:	53 83       	std	Z+3, r21	; 0x03
    24ca:	08 95       	ret

000024cc <__divsf3>:
    24cc:	0c d0       	rcall	.+24     	; 0x24e6 <__divsf3x>
    24ce:	0a ce       	rjmp	.-1004   	; 0x20e4 <__fp_round>
    24d0:	02 de       	rcall	.-1020   	; 0x20d6 <__fp_pscB>
    24d2:	40 f0       	brcs	.+16     	; 0x24e4 <__divsf3+0x18>
    24d4:	f9 dd       	rcall	.-1038   	; 0x20c8 <__fp_pscA>
    24d6:	30 f0       	brcs	.+12     	; 0x24e4 <__divsf3+0x18>
    24d8:	21 f4       	brne	.+8      	; 0x24e2 <__divsf3+0x16>
    24da:	5f 3f       	cpi	r21, 0xFF	; 255
    24dc:	19 f0       	breq	.+6      	; 0x24e4 <__divsf3+0x18>
    24de:	eb cd       	rjmp	.-1066   	; 0x20b6 <__fp_inf>
    24e0:	51 11       	cpse	r21, r1
    24e2:	34 ce       	rjmp	.-920    	; 0x214c <__fp_szero>
    24e4:	ee cd       	rjmp	.-1060   	; 0x20c2 <__fp_nan>

000024e6 <__divsf3x>:
    24e6:	0f de       	rcall	.-994    	; 0x2106 <__fp_split3>
    24e8:	98 f3       	brcs	.-26     	; 0x24d0 <__divsf3+0x4>

000024ea <__divsf3_pse>:
    24ea:	99 23       	and	r25, r25
    24ec:	c9 f3       	breq	.-14     	; 0x24e0 <__divsf3+0x14>
    24ee:	55 23       	and	r21, r21
    24f0:	b1 f3       	breq	.-20     	; 0x24de <__divsf3+0x12>
    24f2:	95 1b       	sub	r25, r21
    24f4:	55 0b       	sbc	r21, r21
    24f6:	bb 27       	eor	r27, r27
    24f8:	aa 27       	eor	r26, r26
    24fa:	62 17       	cp	r22, r18
    24fc:	73 07       	cpc	r23, r19
    24fe:	84 07       	cpc	r24, r20
    2500:	38 f0       	brcs	.+14     	; 0x2510 <__divsf3_pse+0x26>
    2502:	9f 5f       	subi	r25, 0xFF	; 255
    2504:	5f 4f       	sbci	r21, 0xFF	; 255
    2506:	22 0f       	add	r18, r18
    2508:	33 1f       	adc	r19, r19
    250a:	44 1f       	adc	r20, r20
    250c:	aa 1f       	adc	r26, r26
    250e:	a9 f3       	breq	.-22     	; 0x24fa <__divsf3_pse+0x10>
    2510:	33 d0       	rcall	.+102    	; 0x2578 <__divsf3_pse+0x8e>
    2512:	0e 2e       	mov	r0, r30
    2514:	3a f0       	brmi	.+14     	; 0x2524 <__divsf3_pse+0x3a>
    2516:	e0 e8       	ldi	r30, 0x80	; 128
    2518:	30 d0       	rcall	.+96     	; 0x257a <__divsf3_pse+0x90>
    251a:	91 50       	subi	r25, 0x01	; 1
    251c:	50 40       	sbci	r21, 0x00	; 0
    251e:	e6 95       	lsr	r30
    2520:	00 1c       	adc	r0, r0
    2522:	ca f7       	brpl	.-14     	; 0x2516 <__divsf3_pse+0x2c>
    2524:	29 d0       	rcall	.+82     	; 0x2578 <__divsf3_pse+0x8e>
    2526:	fe 2f       	mov	r31, r30
    2528:	27 d0       	rcall	.+78     	; 0x2578 <__divsf3_pse+0x8e>
    252a:	66 0f       	add	r22, r22
    252c:	77 1f       	adc	r23, r23
    252e:	88 1f       	adc	r24, r24
    2530:	bb 1f       	adc	r27, r27
    2532:	26 17       	cp	r18, r22
    2534:	37 07       	cpc	r19, r23
    2536:	48 07       	cpc	r20, r24
    2538:	ab 07       	cpc	r26, r27
    253a:	b0 e8       	ldi	r27, 0x80	; 128
    253c:	09 f0       	breq	.+2      	; 0x2540 <__divsf3_pse+0x56>
    253e:	bb 0b       	sbc	r27, r27
    2540:	80 2d       	mov	r24, r0
    2542:	bf 01       	movw	r22, r30
    2544:	ff 27       	eor	r31, r31
    2546:	93 58       	subi	r25, 0x83	; 131
    2548:	5f 4f       	sbci	r21, 0xFF	; 255
    254a:	2a f0       	brmi	.+10     	; 0x2556 <__divsf3_pse+0x6c>
    254c:	9e 3f       	cpi	r25, 0xFE	; 254
    254e:	51 05       	cpc	r21, r1
    2550:	68 f0       	brcs	.+26     	; 0x256c <__divsf3_pse+0x82>
    2552:	b1 cd       	rjmp	.-1182   	; 0x20b6 <__fp_inf>
    2554:	fb cd       	rjmp	.-1034   	; 0x214c <__fp_szero>
    2556:	5f 3f       	cpi	r21, 0xFF	; 255
    2558:	ec f3       	brlt	.-6      	; 0x2554 <__divsf3_pse+0x6a>
    255a:	98 3e       	cpi	r25, 0xE8	; 232
    255c:	dc f3       	brlt	.-10     	; 0x2554 <__divsf3_pse+0x6a>
    255e:	86 95       	lsr	r24
    2560:	77 95       	ror	r23
    2562:	67 95       	ror	r22
    2564:	b7 95       	ror	r27
    2566:	f7 95       	ror	r31
    2568:	9f 5f       	subi	r25, 0xFF	; 255
    256a:	c9 f7       	brne	.-14     	; 0x255e <__divsf3_pse+0x74>
    256c:	88 0f       	add	r24, r24
    256e:	91 1d       	adc	r25, r1
    2570:	96 95       	lsr	r25
    2572:	87 95       	ror	r24
    2574:	97 f9       	bld	r25, 7
    2576:	08 95       	ret
    2578:	e1 e0       	ldi	r30, 0x01	; 1
    257a:	66 0f       	add	r22, r22
    257c:	77 1f       	adc	r23, r23
    257e:	88 1f       	adc	r24, r24
    2580:	bb 1f       	adc	r27, r27
    2582:	62 17       	cp	r22, r18
    2584:	73 07       	cpc	r23, r19
    2586:	84 07       	cpc	r24, r20
    2588:	ba 07       	cpc	r27, r26
    258a:	20 f0       	brcs	.+8      	; 0x2594 <__divsf3_pse+0xaa>
    258c:	62 1b       	sub	r22, r18
    258e:	73 0b       	sbc	r23, r19
    2590:	84 0b       	sbc	r24, r20
    2592:	ba 0b       	sbc	r27, r26
    2594:	ee 1f       	adc	r30, r30
    2596:	88 f7       	brcc	.-30     	; 0x257a <__divsf3_pse+0x90>
    2598:	e0 95       	com	r30
    259a:	08 95       	ret

0000259c <__fp_mpack>:
    259c:	9f 3f       	cpi	r25, 0xFF	; 255
    259e:	31 f0       	breq	.+12     	; 0x25ac <__fp_mpack_finite+0xc>

000025a0 <__fp_mpack_finite>:
    25a0:	91 50       	subi	r25, 0x01	; 1
    25a2:	20 f4       	brcc	.+8      	; 0x25ac <__fp_mpack_finite+0xc>
    25a4:	87 95       	ror	r24
    25a6:	77 95       	ror	r23
    25a8:	67 95       	ror	r22
    25aa:	b7 95       	ror	r27
    25ac:	88 0f       	add	r24, r24
    25ae:	91 1d       	adc	r25, r1
    25b0:	96 95       	lsr	r25
    25b2:	87 95       	ror	r24
    25b4:	97 f9       	bld	r25, 7
    25b6:	08 95       	ret

000025b8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    25b8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    25ba:	91 8d       	ldd	r25, Z+25	; 0x19
    25bc:	22 8d       	ldd	r18, Z+26	; 0x1a
    25be:	89 2f       	mov	r24, r25
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	80 5c       	subi	r24, 0xC0	; 192
    25c4:	9f 4f       	sbci	r25, 0xFF	; 255
    25c6:	82 1b       	sub	r24, r18
    25c8:	91 09       	sbc	r25, r1
}
    25ca:	8f 73       	andi	r24, 0x3F	; 63
    25cc:	99 27       	eor	r25, r25
    25ce:	08 95       	ret

000025d0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    25d0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    25d2:	91 8d       	ldd	r25, Z+25	; 0x19
    25d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    25d6:	98 17       	cp	r25, r24
    25d8:	31 f0       	breq	.+12     	; 0x25e6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    25da:	82 8d       	ldd	r24, Z+26	; 0x1a
    25dc:	e8 0f       	add	r30, r24
    25de:	f1 1d       	adc	r31, r1
    25e0:	85 8d       	ldd	r24, Z+29	; 0x1d
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    25ea:	08 95       	ret

000025ec <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    25ec:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    25ee:	91 8d       	ldd	r25, Z+25	; 0x19
    25f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    25f2:	98 17       	cp	r25, r24
    25f4:	61 f0       	breq	.+24     	; 0x260e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    25f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    25f8:	df 01       	movw	r26, r30
    25fa:	a8 0f       	add	r26, r24
    25fc:	b1 1d       	adc	r27, r1
    25fe:	5d 96       	adiw	r26, 0x1d	; 29
    2600:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2602:	92 8d       	ldd	r25, Z+26	; 0x1a
    2604:	9f 5f       	subi	r25, 0xFF	; 255
    2606:	9f 73       	andi	r25, 0x3F	; 63
    2608:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    260e:	8f ef       	ldi	r24, 0xFF	; 255
    2610:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2612:	08 95       	ret

00002614 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2614:	fc 01       	movw	r30, r24
    2616:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2618:	44 8d       	ldd	r20, Z+28	; 0x1c
    261a:	25 2f       	mov	r18, r21
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	84 2f       	mov	r24, r20
    2620:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2622:	82 1b       	sub	r24, r18
    2624:	93 0b       	sbc	r25, r19
    2626:	54 17       	cp	r21, r20
    2628:	10 f0       	brcs	.+4      	; 0x262e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    262a:	cf 96       	adiw	r24, 0x3f	; 63
    262c:	08 95       	ret
  return tail - head - 1;
    262e:	01 97       	sbiw	r24, 0x01	; 1
}
    2630:	08 95       	ret

00002632 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2632:	8b ea       	ldi	r24, 0xAB	; 171
    2634:	94 e1       	ldi	r25, 0x14	; 20
    2636:	89 2b       	or	r24, r25
    2638:	39 f0       	breq	.+14     	; 0x2648 <_Z14serialEventRunv+0x16>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	89 2b       	or	r24, r25
    2640:	19 f0       	breq	.+6      	; 0x2648 <_Z14serialEventRunv+0x16>
    2642:	89 d1       	rcall	.+786    	; 0x2956 <_Z17Serial0_availablev>
    2644:	81 11       	cpse	r24, r1
    2646:	24 c0       	rjmp	.+72     	; 0x2690 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2648:	80 e4       	ldi	r24, 0x40	; 64
    264a:	95 e1       	ldi	r25, 0x15	; 21
    264c:	89 2b       	or	r24, r25
    264e:	39 f0       	breq	.+14     	; 0x265e <_Z14serialEventRunv+0x2c>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	89 2b       	or	r24, r25
    2656:	19 f0       	breq	.+6      	; 0x265e <_Z14serialEventRunv+0x2c>
    2658:	13 d2       	rcall	.+1062   	; 0x2a80 <_Z17Serial1_availablev>
    265a:	81 11       	cpse	r24, r1
    265c:	1c c0       	rjmp	.+56     	; 0x2696 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	89 2b       	or	r24, r25
    2664:	41 f0       	breq	.+16     	; 0x2676 <_Z14serialEventRunv+0x44>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	89 2b       	or	r24, r25
    266c:	21 f0       	breq	.+8      	; 0x2676 <_Z14serialEventRunv+0x44>
    266e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2672:	81 11       	cpse	r24, r1
    2674:	13 c0       	rjmp	.+38     	; 0x269c <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	89 2b       	or	r24, r25
    267c:	a1 f0       	breq	.+40     	; 0x26a6 <_Z14serialEventRunv+0x74>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	89 2b       	or	r24, r25
    2684:	81 f0       	breq	.+32     	; 0x26a6 <_Z14serialEventRunv+0x74>
    2686:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    268a:	81 11       	cpse	r24, r1
    268c:	0a c0       	rjmp	.+20     	; 0x26a2 <_Z14serialEventRunv+0x70>
    268e:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2690:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2694:	d9 cf       	rjmp	.-78     	; 0x2648 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2696:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    269a:	e1 cf       	rjmp	.-62     	; 0x265e <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    269c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    26a0:	ea cf       	rjmp	.-44     	; 0x2676 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    26a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    26a6:	08 95       	ret

000026a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    26a8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    26aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    26ac:	df 01       	movw	r26, r30
    26ae:	a8 0f       	add	r26, r24
    26b0:	b1 1d       	adc	r27, r1
    26b2:	a3 5a       	subi	r26, 0xA3	; 163
    26b4:	bf 4f       	sbci	r27, 0xFF	; 255
    26b6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    26b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	8f 73       	andi	r24, 0x3F	; 63
    26c0:	99 27       	eor	r25, r25
    26c2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    26c4:	a6 89       	ldd	r26, Z+22	; 0x16
    26c6:	b7 89       	ldd	r27, Z+23	; 0x17
    26c8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    26ca:	a0 89       	ldd	r26, Z+16	; 0x10
    26cc:	b1 89       	ldd	r27, Z+17	; 0x11
    26ce:	8c 91       	ld	r24, X
    26d0:	83 70       	andi	r24, 0x03	; 3
    26d2:	80 64       	ori	r24, 0x40	; 64
    26d4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    26d6:	93 8d       	ldd	r25, Z+27	; 0x1b
    26d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    26da:	98 13       	cpse	r25, r24
    26dc:	06 c0       	rjmp	.+12     	; 0x26ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    26de:	02 88       	ldd	r0, Z+18	; 0x12
    26e0:	f3 89       	ldd	r31, Z+19	; 0x13
    26e2:	e0 2d       	mov	r30, r0
    26e4:	80 81       	ld	r24, Z
    26e6:	8f 7d       	andi	r24, 0xDF	; 223
    26e8:	80 83       	st	Z, r24
    26ea:	08 95       	ret

000026ec <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    26ec:	ef 92       	push	r14
    26ee:	ff 92       	push	r15
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	ec 01       	movw	r28, r24
  _written = true;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    26fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2700:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2702:	98 13       	cpse	r25, r24
    2704:	05 c0       	rjmp	.+10     	; 0x2710 <_ZN14HardwareSerial5writeEh+0x24>
    2706:	e8 89       	ldd	r30, Y+16	; 0x10
    2708:	f9 89       	ldd	r31, Y+17	; 0x11
    270a:	80 81       	ld	r24, Z
    270c:	85 fd       	sbrc	r24, 5
    270e:	25 c0       	rjmp	.+74     	; 0x275a <_ZN14HardwareSerial5writeEh+0x6e>
    2710:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2712:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2714:	10 e0       	ldi	r17, 0x00	; 0
    2716:	0f 5f       	subi	r16, 0xFF	; 255
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	0f 73       	andi	r16, 0x3F	; 63
    271c:	11 27       	eor	r17, r17
    271e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2720:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2722:	e8 12       	cpse	r14, r24
    2724:	0b c0       	rjmp	.+22     	; 0x273c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	07 fc       	sbrc	r0, 7
    272a:	fa cf       	rjmp	.-12     	; 0x2720 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    272c:	e8 89       	ldd	r30, Y+16	; 0x10
    272e:	f9 89       	ldd	r31, Y+17	; 0x11
    2730:	80 81       	ld	r24, Z
    2732:	85 ff       	sbrs	r24, 5
    2734:	f5 cf       	rjmp	.-22     	; 0x2720 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2736:	ce 01       	movw	r24, r28
    2738:	b7 df       	rcall	.-146    	; 0x26a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    273a:	f2 cf       	rjmp	.-28     	; 0x2720 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    273c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273e:	fe 01       	movw	r30, r28
    2740:	e8 0f       	add	r30, r24
    2742:	f1 1d       	adc	r31, r1
    2744:	e3 5a       	subi	r30, 0xA3	; 163
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    274a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    274c:	f8 94       	cli
    _tx_buffer_head = i;
    274e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2750:	ea 89       	ldd	r30, Y+18	; 0x12
    2752:	fb 89       	ldd	r31, Y+19	; 0x13
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	0a c0       	rjmp	.+20     	; 0x276e <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    275a:	9f b7       	in	r25, 0x3f	; 63
    275c:	f8 94       	cli
      *_udr = c;
    275e:	ee 89       	ldd	r30, Y+22	; 0x16
    2760:	ff 89       	ldd	r31, Y+23	; 0x17
    2762:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2764:	e8 89       	ldd	r30, Y+16	; 0x10
    2766:	f9 89       	ldd	r31, Y+17	; 0x11
    2768:	80 81       	ld	r24, Z
    276a:	83 70       	andi	r24, 0x03	; 3
    276c:	80 64       	ori	r24, 0x40	; 64
    276e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2770:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	08 95       	ret

00002784 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    278a:	88 8d       	ldd	r24, Y+24	; 0x18
    278c:	88 23       	and	r24, r24
    278e:	c1 f0       	breq	.+48     	; 0x27c0 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2790:	ea 89       	ldd	r30, Y+18	; 0x12
    2792:	fb 89       	ldd	r31, Y+19	; 0x13
    2794:	80 81       	ld	r24, Z
    2796:	85 fd       	sbrc	r24, 5
    2798:	05 c0       	rjmp	.+10     	; 0x27a4 <_ZN14HardwareSerial5flushEv+0x20>
    279a:	a8 89       	ldd	r26, Y+16	; 0x10
    279c:	b9 89       	ldd	r27, Y+17	; 0x11
    279e:	8c 91       	ld	r24, X
    27a0:	86 fd       	sbrc	r24, 6
    27a2:	0e c0       	rjmp	.+28     	; 0x27c0 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	07 fc       	sbrc	r0, 7
    27a8:	f5 cf       	rjmp	.-22     	; 0x2794 <_ZN14HardwareSerial5flushEv+0x10>
    27aa:	80 81       	ld	r24, Z
    27ac:	85 ff       	sbrs	r24, 5
    27ae:	f2 cf       	rjmp	.-28     	; 0x2794 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    27b0:	a8 89       	ldd	r26, Y+16	; 0x10
    27b2:	b9 89       	ldd	r27, Y+17	; 0x11
    27b4:	8c 91       	ld	r24, X
    27b6:	85 ff       	sbrs	r24, 5
    27b8:	ed cf       	rjmp	.-38     	; 0x2794 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    27ba:	ce 01       	movw	r24, r28
    27bc:	75 df       	rcall	.-278    	; 0x26a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    27be:	e8 cf       	rjmp	.-48     	; 0x2790 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	08 95       	ret

000027c6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    27c6:	cf 92       	push	r12
    27c8:	df 92       	push	r13
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	1f 93       	push	r17
    27d0:	cf 93       	push	r28
    27d2:	df 93       	push	r29
    27d4:	ec 01       	movw	r28, r24
    27d6:	6a 01       	movw	r12, r20
    27d8:	7b 01       	movw	r14, r22
    27da:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    27dc:	e8 89       	ldd	r30, Y+16	; 0x10
    27de:	f9 89       	ldd	r31, Y+17	; 0x11
    27e0:	82 e0       	ldi	r24, 0x02	; 2
    27e2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    27e4:	41 15       	cp	r20, r1
    27e6:	51 4e       	sbci	r21, 0xE1	; 225
    27e8:	61 05       	cpc	r22, r1
    27ea:	71 05       	cpc	r23, r1
    27ec:	b1 f0       	breq	.+44     	; 0x281a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	79 e0       	ldi	r23, 0x09	; 9
    27f2:	8d e3       	ldi	r24, 0x3D	; 61
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a7 01       	movw	r20, r14
    27f8:	96 01       	movw	r18, r12
    27fa:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodsi4>
    27fe:	da 01       	movw	r26, r20
    2800:	c9 01       	movw	r24, r18
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	a1 09       	sbc	r26, r1
    2806:	b1 09       	sbc	r27, r1
    2808:	b6 95       	lsr	r27
    280a:	a7 95       	ror	r26
    280c:	97 95       	ror	r25
    280e:	87 95       	ror	r24
    2810:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2812:	21 15       	cp	r18, r1
    2814:	80 e1       	ldi	r24, 0x10	; 16
    2816:	38 07       	cpc	r19, r24
    2818:	a8 f0       	brcs	.+42     	; 0x2844 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    281a:	e8 89       	ldd	r30, Y+16	; 0x10
    281c:	f9 89       	ldd	r31, Y+17	; 0x11
    281e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2820:	60 e8       	ldi	r22, 0x80	; 128
    2822:	74 e8       	ldi	r23, 0x84	; 132
    2824:	8e e1       	ldi	r24, 0x1E	; 30
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a7 01       	movw	r20, r14
    282a:	96 01       	movw	r18, r12
    282c:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodsi4>
    2830:	da 01       	movw	r26, r20
    2832:	c9 01       	movw	r24, r18
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	a1 09       	sbc	r26, r1
    2838:	b1 09       	sbc	r27, r1
    283a:	b6 95       	lsr	r27
    283c:	a7 95       	ror	r26
    283e:	97 95       	ror	r25
    2840:	87 95       	ror	r24
    2842:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2844:	ec 85       	ldd	r30, Y+12	; 0x0c
    2846:	fd 85       	ldd	r31, Y+13	; 0x0d
    2848:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    284a:	ee 85       	ldd	r30, Y+14	; 0x0e
    284c:	ff 85       	ldd	r31, Y+15	; 0x0f
    284e:	20 83       	st	Z, r18

  _written = false;
    2850:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2852:	ec 89       	ldd	r30, Y+20	; 0x14
    2854:	fd 89       	ldd	r31, Y+21	; 0x15
    2856:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2858:	ea 89       	ldd	r30, Y+18	; 0x12
    285a:	fb 89       	ldd	r31, Y+19	; 0x13
    285c:	80 81       	ld	r24, Z
    285e:	80 61       	ori	r24, 0x10	; 16
    2860:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2862:	ea 89       	ldd	r30, Y+18	; 0x12
    2864:	fb 89       	ldd	r31, Y+19	; 0x13
    2866:	80 81       	ld	r24, Z
    2868:	88 60       	ori	r24, 0x08	; 8
    286a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    286c:	ea 89       	ldd	r30, Y+18	; 0x12
    286e:	fb 89       	ldd	r31, Y+19	; 0x13
    2870:	80 81       	ld	r24, Z
    2872:	80 68       	ori	r24, 0x80	; 128
    2874:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2876:	ea 89       	ldd	r30, Y+18	; 0x12
    2878:	fb 89       	ldd	r31, Y+19	; 0x13
    287a:	80 81       	ld	r24, Z
    287c:	8f 7d       	andi	r24, 0xDF	; 223
    287e:	80 83       	st	Z, r24
}
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	ff 90       	pop	r15
    2888:	ef 90       	pop	r14
    288a:	df 90       	pop	r13
    288c:	cf 90       	pop	r12
    288e:	08 95       	ret

00002890 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	08 95       	ret

00002896 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2896:	08 95       	ret

00002898 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2898:	1f 92       	push	r1
    289a:	0f 92       	push	r0
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	0f 92       	push	r0
    28a0:	11 24       	eor	r1, r1
    28a2:	0b b6       	in	r0, 0x3b	; 59
    28a4:	0f 92       	push	r0
    28a6:	2f 93       	push	r18
    28a8:	8f 93       	push	r24
    28aa:	9f 93       	push	r25
    28ac:	ef 93       	push	r30
    28ae:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    28b0:	e0 91 0f 04 	lds	r30, 0x040F	; 0x80040f <Serial+0x10>
    28b4:	f0 91 10 04 	lds	r31, 0x0410	; 0x800410 <Serial+0x11>
    28b8:	80 81       	ld	r24, Z
    28ba:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <Serial+0x16>
    28be:	f0 91 16 04 	lds	r31, 0x0416	; 0x800416 <Serial+0x17>
    28c2:	82 fd       	sbrc	r24, 2
    28c4:	12 c0       	rjmp	.+36     	; 0x28ea <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    28c6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    28c8:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <Serial+0x19>
    28cc:	8f 5f       	subi	r24, 0xFF	; 255
    28ce:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    28d0:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <Serial+0x1a>
    28d4:	82 17       	cp	r24, r18
    28d6:	51 f0       	breq	.+20     	; 0x28ec <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    28d8:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <Serial+0x19>
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	e1 50       	subi	r30, 0x01	; 1
    28e0:	fc 4f       	sbci	r31, 0xFC	; 252
    28e2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    28e4:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <Serial+0x19>
    28e8:	01 c0       	rjmp	.+2      	; 0x28ec <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    28ea:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    28ec:	ff 91       	pop	r31
    28ee:	ef 91       	pop	r30
    28f0:	9f 91       	pop	r25
    28f2:	8f 91       	pop	r24
    28f4:	2f 91       	pop	r18
    28f6:	0f 90       	pop	r0
    28f8:	0b be       	out	0x3b, r0	; 59
    28fa:	0f 90       	pop	r0
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	0f 90       	pop	r0
    2900:	1f 90       	pop	r1
    2902:	18 95       	reti

00002904 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2904:	1f 92       	push	r1
    2906:	0f 92       	push	r0
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	0f 92       	push	r0
    290c:	11 24       	eor	r1, r1
    290e:	0b b6       	in	r0, 0x3b	; 59
    2910:	0f 92       	push	r0
    2912:	2f 93       	push	r18
    2914:	3f 93       	push	r19
    2916:	4f 93       	push	r20
    2918:	5f 93       	push	r21
    291a:	6f 93       	push	r22
    291c:	7f 93       	push	r23
    291e:	8f 93       	push	r24
    2920:	9f 93       	push	r25
    2922:	af 93       	push	r26
    2924:	bf 93       	push	r27
    2926:	ef 93       	push	r30
    2928:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    292a:	8f ef       	ldi	r24, 0xFF	; 255
    292c:	93 e0       	ldi	r25, 0x03	; 3
    292e:	bc de       	rcall	.-648    	; 0x26a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2930:	ff 91       	pop	r31
    2932:	ef 91       	pop	r30
    2934:	bf 91       	pop	r27
    2936:	af 91       	pop	r26
    2938:	9f 91       	pop	r25
    293a:	8f 91       	pop	r24
    293c:	7f 91       	pop	r23
    293e:	6f 91       	pop	r22
    2940:	5f 91       	pop	r21
    2942:	4f 91       	pop	r20
    2944:	3f 91       	pop	r19
    2946:	2f 91       	pop	r18
    2948:	0f 90       	pop	r0
    294a:	0b be       	out	0x3b, r0	; 59
    294c:	0f 90       	pop	r0
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	0f 90       	pop	r0
    2952:	1f 90       	pop	r1
    2954:	18 95       	reti

00002956 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2956:	8f ef       	ldi	r24, 0xFF	; 255
    2958:	93 e0       	ldi	r25, 0x03	; 3
    295a:	2e de       	rcall	.-932    	; 0x25b8 <_ZN14HardwareSerial9availableEv>
    295c:	21 e0       	ldi	r18, 0x01	; 1
    295e:	89 2b       	or	r24, r25
    2960:	09 f4       	brne	.+2      	; 0x2964 <_Z17Serial0_availablev+0xe>
    2962:	20 e0       	ldi	r18, 0x00	; 0
}
    2964:	82 2f       	mov	r24, r18
    2966:	08 95       	ret

00002968 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2968:	ef ef       	ldi	r30, 0xFF	; 255
    296a:	f3 e0       	ldi	r31, 0x03	; 3
    296c:	13 82       	std	Z+3, r1	; 0x03
    296e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2970:	88 ee       	ldi	r24, 0xE8	; 232
    2972:	93 e0       	ldi	r25, 0x03	; 3
    2974:	a0 e0       	ldi	r26, 0x00	; 0
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	84 83       	std	Z+4, r24	; 0x04
    297a:	95 83       	std	Z+5, r25	; 0x05
    297c:	a6 83       	std	Z+6, r26	; 0x06
    297e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2980:	82 e5       	ldi	r24, 0x52	; 82
    2982:	93 e0       	ldi	r25, 0x03	; 3
    2984:	91 83       	std	Z+1, r25	; 0x01
    2986:	80 83       	st	Z, r24
    2988:	85 ec       	ldi	r24, 0xC5	; 197
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	95 87       	std	Z+13, r25	; 0x0d
    298e:	84 87       	std	Z+12, r24	; 0x0c
    2990:	84 ec       	ldi	r24, 0xC4	; 196
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	97 87       	std	Z+15, r25	; 0x0f
    2996:	86 87       	std	Z+14, r24	; 0x0e
    2998:	80 ec       	ldi	r24, 0xC0	; 192
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	91 8b       	std	Z+17, r25	; 0x11
    299e:	80 8b       	std	Z+16, r24	; 0x10
    29a0:	81 ec       	ldi	r24, 0xC1	; 193
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	93 8b       	std	Z+19, r25	; 0x13
    29a6:	82 8b       	std	Z+18, r24	; 0x12
    29a8:	82 ec       	ldi	r24, 0xC2	; 194
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	95 8b       	std	Z+21, r25	; 0x15
    29ae:	84 8b       	std	Z+20, r24	; 0x14
    29b0:	86 ec       	ldi	r24, 0xC6	; 198
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	97 8b       	std	Z+23, r25	; 0x17
    29b6:	86 8b       	std	Z+22, r24	; 0x16
    29b8:	11 8e       	std	Z+25, r1	; 0x19
    29ba:	12 8e       	std	Z+26, r1	; 0x1a
    29bc:	13 8e       	std	Z+27, r1	; 0x1b
    29be:	14 8e       	std	Z+28, r1	; 0x1c
    29c0:	08 95       	ret

000029c2 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    29c2:	1f 92       	push	r1
    29c4:	0f 92       	push	r0
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	0f 92       	push	r0
    29ca:	11 24       	eor	r1, r1
    29cc:	0b b6       	in	r0, 0x3b	; 59
    29ce:	0f 92       	push	r0
    29d0:	2f 93       	push	r18
    29d2:	8f 93       	push	r24
    29d4:	9f 93       	push	r25
    29d6:	ef 93       	push	r30
    29d8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    29da:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <Serial1+0x10>
    29de:	f0 91 ad 04 	lds	r31, 0x04AD	; 0x8004ad <Serial1+0x11>
    29e2:	80 81       	ld	r24, Z
    29e4:	e0 91 b2 04 	lds	r30, 0x04B2	; 0x8004b2 <Serial1+0x16>
    29e8:	f0 91 b3 04 	lds	r31, 0x04B3	; 0x8004b3 <Serial1+0x17>
    29ec:	82 fd       	sbrc	r24, 2
    29ee:	12 c0       	rjmp	.+36     	; 0x2a14 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    29f0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    29f2:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <Serial1+0x19>
    29f6:	8f 5f       	subi	r24, 0xFF	; 255
    29f8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    29fa:	20 91 b6 04 	lds	r18, 0x04B6	; 0x8004b6 <Serial1+0x1a>
    29fe:	82 17       	cp	r24, r18
    2a00:	51 f0       	breq	.+20     	; 0x2a16 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    2a02:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <Serial1+0x19>
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	e4 56       	subi	r30, 0x64	; 100
    2a0a:	fb 4f       	sbci	r31, 0xFB	; 251
    2a0c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2a0e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <Serial1+0x19>
    2a12:	01 c0       	rjmp	.+2      	; 0x2a16 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2a14:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    2a16:	ff 91       	pop	r31
    2a18:	ef 91       	pop	r30
    2a1a:	9f 91       	pop	r25
    2a1c:	8f 91       	pop	r24
    2a1e:	2f 91       	pop	r18
    2a20:	0f 90       	pop	r0
    2a22:	0b be       	out	0x3b, r0	; 59
    2a24:	0f 90       	pop	r0
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	0f 90       	pop	r0
    2a2a:	1f 90       	pop	r1
    2a2c:	18 95       	reti

00002a2e <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2a2e:	1f 92       	push	r1
    2a30:	0f 92       	push	r0
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	0f 92       	push	r0
    2a36:	11 24       	eor	r1, r1
    2a38:	0b b6       	in	r0, 0x3b	; 59
    2a3a:	0f 92       	push	r0
    2a3c:	2f 93       	push	r18
    2a3e:	3f 93       	push	r19
    2a40:	4f 93       	push	r20
    2a42:	5f 93       	push	r21
    2a44:	6f 93       	push	r22
    2a46:	7f 93       	push	r23
    2a48:	8f 93       	push	r24
    2a4a:	9f 93       	push	r25
    2a4c:	af 93       	push	r26
    2a4e:	bf 93       	push	r27
    2a50:	ef 93       	push	r30
    2a52:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    2a54:	8c e9       	ldi	r24, 0x9C	; 156
    2a56:	94 e0       	ldi	r25, 0x04	; 4
    2a58:	27 de       	rcall	.-946    	; 0x26a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2a5a:	ff 91       	pop	r31
    2a5c:	ef 91       	pop	r30
    2a5e:	bf 91       	pop	r27
    2a60:	af 91       	pop	r26
    2a62:	9f 91       	pop	r25
    2a64:	8f 91       	pop	r24
    2a66:	7f 91       	pop	r23
    2a68:	6f 91       	pop	r22
    2a6a:	5f 91       	pop	r21
    2a6c:	4f 91       	pop	r20
    2a6e:	3f 91       	pop	r19
    2a70:	2f 91       	pop	r18
    2a72:	0f 90       	pop	r0
    2a74:	0b be       	out	0x3b, r0	; 59
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    2a80:	8c e9       	ldi	r24, 0x9C	; 156
    2a82:	94 e0       	ldi	r25, 0x04	; 4
    2a84:	99 dd       	rcall	.-1230   	; 0x25b8 <_ZN14HardwareSerial9availableEv>
    2a86:	21 e0       	ldi	r18, 0x01	; 1
    2a88:	89 2b       	or	r24, r25
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <_Z17Serial1_availablev+0xe>
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
}
    2a8e:	82 2f       	mov	r24, r18
    2a90:	08 95       	ret

00002a92 <_GLOBAL__sub_I___vector_36>:
    2a92:	ec e9       	ldi	r30, 0x9C	; 156
    2a94:	f4 e0       	ldi	r31, 0x04	; 4
    2a96:	13 82       	std	Z+3, r1	; 0x03
    2a98:	12 82       	std	Z+2, r1	; 0x02
    2a9a:	88 ee       	ldi	r24, 0xE8	; 232
    2a9c:	93 e0       	ldi	r25, 0x03	; 3
    2a9e:	a0 e0       	ldi	r26, 0x00	; 0
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	84 83       	std	Z+4, r24	; 0x04
    2aa4:	95 83       	std	Z+5, r25	; 0x05
    2aa6:	a6 83       	std	Z+6, r26	; 0x06
    2aa8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2aaa:	82 e5       	ldi	r24, 0x52	; 82
    2aac:	93 e0       	ldi	r25, 0x03	; 3
    2aae:	91 83       	std	Z+1, r25	; 0x01
    2ab0:	80 83       	st	Z, r24
    2ab2:	8d ec       	ldi	r24, 0xCD	; 205
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	95 87       	std	Z+13, r25	; 0x0d
    2ab8:	84 87       	std	Z+12, r24	; 0x0c
    2aba:	8c ec       	ldi	r24, 0xCC	; 204
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	97 87       	std	Z+15, r25	; 0x0f
    2ac0:	86 87       	std	Z+14, r24	; 0x0e
    2ac2:	88 ec       	ldi	r24, 0xC8	; 200
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	91 8b       	std	Z+17, r25	; 0x11
    2ac8:	80 8b       	std	Z+16, r24	; 0x10
    2aca:	89 ec       	ldi	r24, 0xC9	; 201
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	93 8b       	std	Z+19, r25	; 0x13
    2ad0:	82 8b       	std	Z+18, r24	; 0x12
    2ad2:	8a ec       	ldi	r24, 0xCA	; 202
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	95 8b       	std	Z+21, r25	; 0x15
    2ad8:	84 8b       	std	Z+20, r24	; 0x14
    2ada:	8e ec       	ldi	r24, 0xCE	; 206
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	97 8b       	std	Z+23, r25	; 0x17
    2ae0:	86 8b       	std	Z+22, r24	; 0x16
    2ae2:	11 8e       	std	Z+25, r1	; 0x19
    2ae4:	12 8e       	std	Z+26, r1	; 0x1a
    2ae6:	13 8e       	std	Z+27, r1	; 0x1b
    2ae8:	14 8e       	std	Z+28, r1	; 0x1c
    2aea:	08 95       	ret

00002aec <initVariant>:
    2aec:	08 95       	ret

00002aee <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2aee:	f5 d1       	rcall	.+1002   	; 0x2eda <init>

	initVariant();
    2af0:	fd df       	rcall	.-6      	; 0x2aec <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2af2:	50 d8       	rcall	.-3936   	; 0x1b94 <setup>
    2af4:	c9 e1       	ldi	r28, 0x19	; 25
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2af6:	d3 e1       	ldi	r29, 0x13	; 19
    2af8:	0e 94 21 0c 	call	0x1842	; 0x1842 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    2afc:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    2afe:	e1 f3       	breq	.-8      	; 0x2af8 <main+0xa>
    2b00:	98 dd       	rcall	.-1232   	; 0x2632 <_Z14serialEventRunv>
    2b02:	fa cf       	rjmp	.-12     	; 0x2af8 <main+0xa>

00002b04 <_ZN5Print5writeEPKhj>:
    2b04:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2b06:	df 92       	push	r13
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	6c 01       	movw	r12, r24
    2b16:	7a 01       	movw	r14, r20
    2b18:	8b 01       	movw	r16, r22
    2b1a:	c0 e0       	ldi	r28, 0x00	; 0
    2b1c:	d0 e0       	ldi	r29, 0x00	; 0
    2b1e:	ce 15       	cp	r28, r14
    2b20:	df 05       	cpc	r29, r15
    2b22:	81 f0       	breq	.+32     	; 0x2b44 <_ZN5Print5writeEPKhj+0x40>
    2b24:	d8 01       	movw	r26, r16
    2b26:	6d 91       	ld	r22, X+
    2b28:	8d 01       	movw	r16, r26
    2b2a:	d6 01       	movw	r26, r12
    2b2c:	ed 91       	ld	r30, X+
    2b2e:	fc 91       	ld	r31, X
    2b30:	01 90       	ld	r0, Z+
    2b32:	f0 81       	ld	r31, Z
    2b34:	e0 2d       	mov	r30, r0
    2b36:	c6 01       	movw	r24, r12
    2b38:	19 95       	eicall
    2b3a:	89 2b       	or	r24, r25
    2b3c:	11 f0       	breq	.+4      	; 0x2b42 <_ZN5Print5writeEPKhj+0x3e>
    2b3e:	21 96       	adiw	r28, 0x01	; 1
    2b40:	ee cf       	rjmp	.-36     	; 0x2b1e <_ZN5Print5writeEPKhj+0x1a>
    2b42:	7e 01       	movw	r14, r28
    2b44:	c7 01       	movw	r24, r14
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	ff 90       	pop	r15
    2b50:	ef 90       	pop	r14
    2b52:	df 90       	pop	r13
    2b54:	cf 90       	pop	r12
    2b56:	08 95       	ret

00002b58 <_ZN5Print5writeEPKc>:
    2b58:	61 15       	cp	r22, r1
    2b5a:	71 05       	cpc	r23, r1
    2b5c:	79 f0       	breq	.+30     	; 0x2b7c <_ZN5Print5writeEPKc+0x24>
    2b5e:	fb 01       	movw	r30, r22
    2b60:	01 90       	ld	r0, Z+
    2b62:	00 20       	and	r0, r0
    2b64:	e9 f7       	brne	.-6      	; 0x2b60 <_ZN5Print5writeEPKc+0x8>
    2b66:	31 97       	sbiw	r30, 0x01	; 1
    2b68:	af 01       	movw	r20, r30
    2b6a:	46 1b       	sub	r20, r22
    2b6c:	57 0b       	sbc	r21, r23
    2b6e:	dc 01       	movw	r26, r24
    2b70:	ed 91       	ld	r30, X+
    2b72:	fc 91       	ld	r31, X
    2b74:	02 80       	ldd	r0, Z+2	; 0x02
    2b76:	f3 81       	ldd	r31, Z+3	; 0x03
    2b78:	e0 2d       	mov	r30, r0
    2b7a:	19 94       	eijmp
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	08 95       	ret

00002b82 <_ZN5Print5printERK6String>:
    2b82:	db 01       	movw	r26, r22
    2b84:	14 96       	adiw	r26, 0x04	; 4
    2b86:	4d 91       	ld	r20, X+
    2b88:	5c 91       	ld	r21, X
    2b8a:	15 97       	sbiw	r26, 0x05	; 5
    2b8c:	6d 91       	ld	r22, X+
    2b8e:	7c 91       	ld	r23, X
    2b90:	dc 01       	movw	r26, r24
    2b92:	ed 91       	ld	r30, X+
    2b94:	fc 91       	ld	r31, X
    2b96:	02 80       	ldd	r0, Z+2	; 0x02
    2b98:	f3 81       	ldd	r31, Z+3	; 0x03
    2b9a:	e0 2d       	mov	r30, r0
    2b9c:	19 94       	eijmp

00002b9e <_ZN5Print5printEPKc>:
    2b9e:	dc cf       	rjmp	.-72     	; 0x2b58 <_ZN5Print5writeEPKc>

00002ba0 <_ZN5Print5printEc>:
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	ed 91       	ld	r30, X+
    2ba4:	fc 91       	ld	r31, X
    2ba6:	01 90       	ld	r0, Z+
    2ba8:	f0 81       	ld	r31, Z
    2baa:	e0 2d       	mov	r30, r0
    2bac:	19 94       	eijmp

00002bae <_ZN5Print7printlnEv>:
    2bae:	60 e6       	ldi	r22, 0x60	; 96
    2bb0:	73 e0       	ldi	r23, 0x03	; 3
    2bb2:	d2 cf       	rjmp	.-92     	; 0x2b58 <_ZN5Print5writeEPKc>

00002bb4 <_ZN5Print7printlnERK6String>:
    2bb4:	0f 93       	push	r16
    2bb6:	1f 93       	push	r17
    2bb8:	cf 93       	push	r28
    2bba:	df 93       	push	r29
    2bbc:	ec 01       	movw	r28, r24
    2bbe:	e1 df       	rcall	.-62     	; 0x2b82 <_ZN5Print5printERK6String>
    2bc0:	8c 01       	movw	r16, r24
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	f4 df       	rcall	.-24     	; 0x2bae <_ZN5Print7printlnEv>
    2bc6:	80 0f       	add	r24, r16
    2bc8:	91 1f       	adc	r25, r17
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	08 95       	ret

00002bd4 <_ZN5Print7printlnEPKc>:
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	ec 01       	movw	r28, r24
    2bde:	bc df       	rcall	.-136    	; 0x2b58 <_ZN5Print5writeEPKc>
    2be0:	8c 01       	movw	r16, r24
    2be2:	ce 01       	movw	r24, r28
    2be4:	e4 df       	rcall	.-56     	; 0x2bae <_ZN5Print7printlnEv>
    2be6:	80 0f       	add	r24, r16
    2be8:	91 1f       	adc	r25, r17
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	1f 91       	pop	r17
    2bf0:	0f 91       	pop	r16
    2bf2:	08 95       	ret

00002bf4 <_ZN5Print11printNumberEmh>:
    2bf4:	8f 92       	push	r8
    2bf6:	9f 92       	push	r9
    2bf8:	af 92       	push	r10
    2bfa:	bf 92       	push	r11
    2bfc:	ef 92       	push	r14
    2bfe:	ff 92       	push	r15
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	a1 97       	sbiw	r28, 0x21	; 33
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	7c 01       	movw	r14, r24
    2c1a:	fa 01       	movw	r30, r20
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	19 a2       	std	Y+33, r1	; 0x21
    2c20:	22 30       	cpi	r18, 0x02	; 2
    2c22:	08 f4       	brcc	.+2      	; 0x2c26 <_ZN5Print11printNumberEmh+0x32>
    2c24:	2a e0       	ldi	r18, 0x0A	; 10
    2c26:	8e 01       	movw	r16, r28
    2c28:	0f 5d       	subi	r16, 0xDF	; 223
    2c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2c:	82 2e       	mov	r8, r18
    2c2e:	91 2c       	mov	r9, r1
    2c30:	a1 2c       	mov	r10, r1
    2c32:	b1 2c       	mov	r11, r1
    2c34:	bf 01       	movw	r22, r30
    2c36:	a5 01       	movw	r20, r10
    2c38:	94 01       	movw	r18, r8
    2c3a:	2e d7       	rcall	.+3676   	; 0x3a98 <__udivmodsi4>
    2c3c:	f9 01       	movw	r30, r18
    2c3e:	ca 01       	movw	r24, r20
    2c40:	01 50       	subi	r16, 0x01	; 1
    2c42:	11 09       	sbc	r17, r1
    2c44:	6a 30       	cpi	r22, 0x0A	; 10
    2c46:	10 f4       	brcc	.+4      	; 0x2c4c <_ZN5Print11printNumberEmh+0x58>
    2c48:	60 5d       	subi	r22, 0xD0	; 208
    2c4a:	01 c0       	rjmp	.+2      	; 0x2c4e <_ZN5Print11printNumberEmh+0x5a>
    2c4c:	69 5c       	subi	r22, 0xC9	; 201
    2c4e:	d8 01       	movw	r26, r16
    2c50:	6c 93       	st	X, r22
    2c52:	23 2b       	or	r18, r19
    2c54:	24 2b       	or	r18, r20
    2c56:	25 2b       	or	r18, r21
    2c58:	69 f7       	brne	.-38     	; 0x2c34 <_ZN5Print11printNumberEmh+0x40>
    2c5a:	b8 01       	movw	r22, r16
    2c5c:	c7 01       	movw	r24, r14
    2c5e:	7c df       	rcall	.-264    	; 0x2b58 <_ZN5Print5writeEPKc>
    2c60:	a1 96       	adiw	r28, 0x21	; 33
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	ff 90       	pop	r15
    2c76:	ef 90       	pop	r14
    2c78:	bf 90       	pop	r11
    2c7a:	af 90       	pop	r10
    2c7c:	9f 90       	pop	r9
    2c7e:	8f 90       	pop	r8
    2c80:	08 95       	ret

00002c82 <_ZN5Print5printEmi>:
    2c82:	21 15       	cp	r18, r1
    2c84:	31 05       	cpc	r19, r1
    2c86:	41 f4       	brne	.+16     	; 0x2c98 <_ZN5Print5printEmi+0x16>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	ed 91       	ld	r30, X+
    2c8c:	fc 91       	ld	r31, X
    2c8e:	01 90       	ld	r0, Z+
    2c90:	f0 81       	ld	r31, Z
    2c92:	e0 2d       	mov	r30, r0
    2c94:	64 2f       	mov	r22, r20
    2c96:	19 94       	eijmp
    2c98:	ad cf       	rjmp	.-166    	; 0x2bf4 <_ZN5Print11printNumberEmh>

00002c9a <_ZN5Print5printEhi>:
    2c9a:	9a 01       	movw	r18, r20
    2c9c:	46 2f       	mov	r20, r22
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	ee cf       	rjmp	.-36     	; 0x2c82 <_ZN5Print5printEmi>

00002ca6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2ca6:	cf 92       	push	r12
    2ca8:	df 92       	push	r13
    2caa:	ef 92       	push	r14
    2cac:	ff 92       	push	r15
    2cae:	0f 93       	push	r16
    2cb0:	1f 93       	push	r17
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
  if (base == 0) {
    2cb6:	21 15       	cp	r18, r1
    2cb8:	31 05       	cpc	r19, r1
    2cba:	81 f4       	brne	.+32     	; 0x2cdc <_ZN5Print5printEli+0x36>
    return write(n);
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	ed 91       	ld	r30, X+
    2cc0:	fc 91       	ld	r31, X
    2cc2:	01 90       	ld	r0, Z+
    2cc4:	f0 81       	ld	r31, Z
    2cc6:	e0 2d       	mov	r30, r0
    2cc8:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2cda:	19 94       	eijmp
  } else if (base == 10) {
    2cdc:	2a 30       	cpi	r18, 0x0A	; 10
    2cde:	31 05       	cpc	r19, r1
    2ce0:	f1 f4       	brne	.+60     	; 0x2d1e <_ZN5Print5printEli+0x78>
    if (n < 0) {
    2ce2:	77 ff       	sbrs	r23, 7
    2ce4:	1b c0       	rjmp	.+54     	; 0x2d1c <_ZN5Print5printEli+0x76>
    2ce6:	6a 01       	movw	r12, r20
    2ce8:	7b 01       	movw	r14, r22
    2cea:	ec 01       	movw	r28, r24
      int t = print('-');
    2cec:	6d e2       	ldi	r22, 0x2D	; 45
    2cee:	58 df       	rcall	.-336    	; 0x2ba0 <_ZN5Print5printEc>
    2cf0:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2cf2:	44 27       	eor	r20, r20
    2cf4:	55 27       	eor	r21, r21
    2cf6:	ba 01       	movw	r22, r20
    2cf8:	4c 19       	sub	r20, r12
    2cfa:	5d 09       	sbc	r21, r13
    2cfc:	6e 09       	sbc	r22, r14
    2cfe:	7f 09       	sbc	r23, r15
    2d00:	2a e0       	ldi	r18, 0x0A	; 10
    2d02:	ce 01       	movw	r24, r28
    2d04:	77 df       	rcall	.-274    	; 0x2bf4 <_ZN5Print11printNumberEmh>
    2d06:	80 0f       	add	r24, r16
    2d08:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	ff 90       	pop	r15
    2d14:	ef 90       	pop	r14
    2d16:	df 90       	pop	r13
    2d18:	cf 90       	pop	r12
    2d1a:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2d1c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	1f 91       	pop	r17
    2d24:	0f 91       	pop	r16
    2d26:	ff 90       	pop	r15
    2d28:	ef 90       	pop	r14
    2d2a:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2d2c:	cf 90       	pop	r12
    2d2e:	62 cf       	rjmp	.-316    	; 0x2bf4 <_ZN5Print11printNumberEmh>

00002d30 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2d30:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2d32:	ab 01       	movw	r20, r22
    2d34:	77 0f       	add	r23, r23
    2d36:	66 0b       	sbc	r22, r22
    2d38:	77 0b       	sbc	r23, r23
    2d3a:	b5 cf       	rjmp	.-150    	; 0x2ca6 <_ZN5Print5printEli>

00002d3c <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2d3c:	0f 93       	push	r16
    2d3e:	1f 93       	push	r17
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
    2d44:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2d46:	f4 df       	rcall	.-24     	; 0x2d30 <_ZN5Print5printEii>
    2d48:	8c 01       	movw	r16, r24
  n += println();
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	30 df       	rcall	.-416    	; 0x2bae <_ZN5Print7printlnEv>
  return n;
}
    2d4e:	80 0f       	add	r24, r16
    2d50:	91 1f       	adc	r25, r17
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	1f 91       	pop	r17
    2d58:	0f 91       	pop	r16
    2d5a:	08 95       	ret

00002d5c <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2d5c:	1f 92       	push	r1
    2d5e:	0f 92       	push	r0
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	0f 92       	push	r0
    2d64:	11 24       	eor	r1, r1
    2d66:	2f 93       	push	r18
    2d68:	3f 93       	push	r19
    2d6a:	8f 93       	push	r24
    2d6c:	9f 93       	push	r25
    2d6e:	af 93       	push	r26
    2d70:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2d72:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <timer0_millis>
    2d76:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <timer0_millis+0x1>
    2d7a:	a0 91 3c 05 	lds	r26, 0x053C	; 0x80053c <timer0_millis+0x2>
    2d7e:	b0 91 3d 05 	lds	r27, 0x053D	; 0x80053d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2d82:	30 91 39 05 	lds	r19, 0x0539	; 0x800539 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2d86:	23 e0       	ldi	r18, 0x03	; 3
    2d88:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2d8a:	2d 37       	cpi	r18, 0x7D	; 125
    2d8c:	20 f4       	brcc	.+8      	; 0x2d96 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	a1 1d       	adc	r26, r1
    2d92:	b1 1d       	adc	r27, r1
    2d94:	05 c0       	rjmp	.+10     	; 0x2da0 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2d96:	26 e8       	ldi	r18, 0x86	; 134
    2d98:	23 0f       	add	r18, r19
		m += 1;
    2d9a:	02 96       	adiw	r24, 0x02	; 2
    2d9c:	a1 1d       	adc	r26, r1
    2d9e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2da0:	20 93 39 05 	sts	0x0539, r18	; 0x800539 <timer0_fract>
	timer0_millis = m;
    2da4:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <timer0_millis>
    2da8:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <timer0_millis+0x1>
    2dac:	a0 93 3c 05 	sts	0x053C, r26	; 0x80053c <timer0_millis+0x2>
    2db0:	b0 93 3d 05 	sts	0x053D, r27	; 0x80053d <timer0_millis+0x3>
	timer0_overflow_count++;
    2db4:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <timer0_overflow_count>
    2db8:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <timer0_overflow_count+0x1>
    2dbc:	a0 91 40 05 	lds	r26, 0x0540	; 0x800540 <timer0_overflow_count+0x2>
    2dc0:	b0 91 41 05 	lds	r27, 0x0541	; 0x800541 <timer0_overflow_count+0x3>
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	a1 1d       	adc	r26, r1
    2dc8:	b1 1d       	adc	r27, r1
    2dca:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <timer0_overflow_count>
    2dce:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <timer0_overflow_count+0x1>
    2dd2:	a0 93 40 05 	sts	0x0540, r26	; 0x800540 <timer0_overflow_count+0x2>
    2dd6:	b0 93 41 05 	sts	0x0541, r27	; 0x800541 <timer0_overflow_count+0x3>
}
    2dda:	bf 91       	pop	r27
    2ddc:	af 91       	pop	r26
    2dde:	9f 91       	pop	r25
    2de0:	8f 91       	pop	r24
    2de2:	3f 91       	pop	r19
    2de4:	2f 91       	pop	r18
    2de6:	0f 90       	pop	r0
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	0f 90       	pop	r0
    2dec:	1f 90       	pop	r1
    2dee:	18 95       	reti

00002df0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2df0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2df2:	f8 94       	cli
	m = timer0_millis;
    2df4:	60 91 3a 05 	lds	r22, 0x053A	; 0x80053a <timer0_millis>
    2df8:	70 91 3b 05 	lds	r23, 0x053B	; 0x80053b <timer0_millis+0x1>
    2dfc:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <timer0_millis+0x2>
    2e00:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <timer0_millis+0x3>
	SREG = oldSREG;
    2e04:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2e06:	08 95       	ret

00002e08 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2e08:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2e0a:	f8 94       	cli
	m = timer0_overflow_count;
    2e0c:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <timer0_overflow_count>
    2e10:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <timer0_overflow_count+0x1>
    2e14:	a0 91 40 05 	lds	r26, 0x0540	; 0x800540 <timer0_overflow_count+0x2>
    2e18:	b0 91 41 05 	lds	r27, 0x0541	; 0x800541 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2e1c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2e1e:	a8 9b       	sbis	0x15, 0	; 21
    2e20:	05 c0       	rjmp	.+10     	; 0x2e2c <micros+0x24>
    2e22:	2f 3f       	cpi	r18, 0xFF	; 255
    2e24:	19 f0       	breq	.+6      	; 0x2e2c <micros+0x24>
		m++;
    2e26:	01 96       	adiw	r24, 0x01	; 1
    2e28:	a1 1d       	adc	r26, r1
    2e2a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2e2c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2e2e:	ba 2f       	mov	r27, r26
    2e30:	a9 2f       	mov	r26, r25
    2e32:	98 2f       	mov	r25, r24
    2e34:	88 27       	eor	r24, r24
    2e36:	82 0f       	add	r24, r18
    2e38:	91 1d       	adc	r25, r1
    2e3a:	a1 1d       	adc	r26, r1
    2e3c:	b1 1d       	adc	r27, r1
    2e3e:	bc 01       	movw	r22, r24
    2e40:	cd 01       	movw	r24, r26
    2e42:	42 e0       	ldi	r20, 0x02	; 2
    2e44:	66 0f       	add	r22, r22
    2e46:	77 1f       	adc	r23, r23
    2e48:	88 1f       	adc	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	4a 95       	dec	r20
    2e4e:	d1 f7       	brne	.-12     	; 0x2e44 <micros+0x3c>
}
    2e50:	08 95       	ret

00002e52 <delay>:

void delay(unsigned long ms)
{
    2e52:	8f 92       	push	r8
    2e54:	9f 92       	push	r9
    2e56:	af 92       	push	r10
    2e58:	bf 92       	push	r11
    2e5a:	cf 92       	push	r12
    2e5c:	df 92       	push	r13
    2e5e:	ef 92       	push	r14
    2e60:	ff 92       	push	r15
    2e62:	6b 01       	movw	r12, r22
    2e64:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2e66:	d0 df       	rcall	.-96     	; 0x2e08 <micros>
    2e68:	4b 01       	movw	r8, r22
    2e6a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2e6c:	c1 14       	cp	r12, r1
    2e6e:	d1 04       	cpc	r13, r1
    2e70:	e1 04       	cpc	r14, r1
    2e72:	f1 04       	cpc	r15, r1
		yield();
    2e74:	f1 f0       	breq	.+60     	; 0x2eb2 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2e76:	2d d4       	rcall	.+2138   	; 0x36d2 <yield>
    2e78:	c7 df       	rcall	.-114    	; 0x2e08 <micros>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	88 19       	sub	r24, r8
    2e80:	99 09       	sbc	r25, r9
    2e82:	aa 09       	sbc	r26, r10
    2e84:	bb 09       	sbc	r27, r11
    2e86:	88 3e       	cpi	r24, 0xE8	; 232
    2e88:	93 40       	sbci	r25, 0x03	; 3
    2e8a:	a1 05       	cpc	r26, r1
    2e8c:	b1 05       	cpc	r27, r1
    2e8e:	70 f3       	brcs	.-36     	; 0x2e6c <delay+0x1a>
			ms--;
    2e90:	21 e0       	ldi	r18, 0x01	; 1
    2e92:	c2 1a       	sub	r12, r18
    2e94:	d1 08       	sbc	r13, r1
    2e96:	e1 08       	sbc	r14, r1
    2e98:	f1 08       	sbc	r15, r1
			start += 1000;
    2e9a:	88 ee       	ldi	r24, 0xE8	; 232
    2e9c:	88 0e       	add	r8, r24
    2e9e:	83 e0       	ldi	r24, 0x03	; 3
    2ea0:	98 1e       	adc	r9, r24
    2ea2:	a1 1c       	adc	r10, r1
    2ea4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2ea6:	c1 14       	cp	r12, r1
    2ea8:	d1 04       	cpc	r13, r1
    2eaa:	e1 04       	cpc	r14, r1
    2eac:	f1 04       	cpc	r15, r1
    2eae:	21 f7       	brne	.-56     	; 0x2e78 <delay+0x26>
    2eb0:	dd cf       	rjmp	.-70     	; 0x2e6c <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    2eb2:	ff 90       	pop	r15
    2eb4:	ef 90       	pop	r14
    2eb6:	df 90       	pop	r13
    2eb8:	cf 90       	pop	r12
    2eba:	bf 90       	pop	r11
    2ebc:	af 90       	pop	r10
    2ebe:	9f 90       	pop	r9
    2ec0:	8f 90       	pop	r8
    2ec2:	08 95       	ret

00002ec4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2ec4:	82 30       	cpi	r24, 0x02	; 2
    2ec6:	91 05       	cpc	r25, r1
    2ec8:	38 f0       	brcs	.+14     	; 0x2ed8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2ed2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <delayMicroseconds+0x10>
    2ed8:	08 95       	ret

00002eda <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2eda:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2edc:	84 b5       	in	r24, 0x24	; 36
    2ede:	82 60       	ori	r24, 0x02	; 2
    2ee0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2ee2:	84 b5       	in	r24, 0x24	; 36
    2ee4:	81 60       	ori	r24, 0x01	; 1
    2ee6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2ee8:	85 b5       	in	r24, 0x25	; 37
    2eea:	82 60       	ori	r24, 0x02	; 2
    2eec:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2eee:	85 b5       	in	r24, 0x25	; 37
    2ef0:	81 60       	ori	r24, 0x01	; 1
    2ef2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2ef4:	ee e6       	ldi	r30, 0x6E	; 110
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	81 60       	ori	r24, 0x01	; 1
    2efc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2efe:	e1 e8       	ldi	r30, 0x81	; 129
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2f04:	80 81       	ld	r24, Z
    2f06:	82 60       	ori	r24, 0x02	; 2
    2f08:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2f0a:	80 81       	ld	r24, Z
    2f0c:	81 60       	ori	r24, 0x01	; 1
    2f0e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2f10:	e0 e8       	ldi	r30, 0x80	; 128
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	81 60       	ori	r24, 0x01	; 1
    2f18:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2f1a:	e1 eb       	ldi	r30, 0xB1	; 177
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	84 60       	ori	r24, 0x04	; 4
    2f22:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2f24:	e0 eb       	ldi	r30, 0xB0	; 176
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	81 60       	ori	r24, 0x01	; 1
    2f2c:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2f2e:	e1 e9       	ldi	r30, 0x91	; 145
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	82 60       	ori	r24, 0x02	; 2
    2f36:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2f38:	80 81       	ld	r24, Z
    2f3a:	81 60       	ori	r24, 0x01	; 1
    2f3c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2f3e:	e0 e9       	ldi	r30, 0x90	; 144
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	81 60       	ori	r24, 0x01	; 1
    2f46:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2f48:	e1 ea       	ldi	r30, 0xA1	; 161
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	82 60       	ori	r24, 0x02	; 2
    2f50:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2f52:	80 81       	ld	r24, Z
    2f54:	81 60       	ori	r24, 0x01	; 1
    2f56:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2f58:	e0 ea       	ldi	r30, 0xA0	; 160
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	81 60       	ori	r24, 0x01	; 1
    2f60:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2f62:	e1 e2       	ldi	r30, 0x21	; 33
    2f64:	f1 e0       	ldi	r31, 0x01	; 1
    2f66:	80 81       	ld	r24, Z
    2f68:	82 60       	ori	r24, 0x02	; 2
    2f6a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2f6c:	80 81       	ld	r24, Z
    2f6e:	81 60       	ori	r24, 0x01	; 1
    2f70:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2f72:	e0 e2       	ldi	r30, 0x20	; 32
    2f74:	f1 e0       	ldi	r31, 0x01	; 1
    2f76:	80 81       	ld	r24, Z
    2f78:	81 60       	ori	r24, 0x01	; 1
    2f7a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2f7c:	ea e7       	ldi	r30, 0x7A	; 122
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	84 60       	ori	r24, 0x04	; 4
    2f84:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2f86:	80 81       	ld	r24, Z
    2f88:	82 60       	ori	r24, 0x02	; 2
    2f8a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2f8c:	80 81       	ld	r24, Z
    2f8e:	81 60       	ori	r24, 0x01	; 1
    2f90:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2f92:	80 81       	ld	r24, Z
    2f94:	80 68       	ori	r24, 0x80	; 128
    2f96:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2f98:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    2f9c:	08 95       	ret

00002f9e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	31 97       	sbiw	r30, 0x01	; 1
    2fa4:	e2 31       	cpi	r30, 0x12	; 18
    2fa6:	f1 05       	cpc	r31, r1
    2fa8:	08 f0       	brcs	.+2      	; 0x2fac <turnOffPWM+0xe>
    2faa:	4d c0       	rjmp	.+154    	; 0x3046 <turnOffPWM+0xa8>
    2fac:	88 27       	eor	r24, r24
    2fae:	ed 54       	subi	r30, 0x4D	; 77
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    2fb4:	93 c5       	rjmp	.+2854   	; 0x3adc <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2fb6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2fba:	8f 77       	andi	r24, 0x7F	; 127
    2fbc:	03 c0       	rjmp	.+6      	; 0x2fc4 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2fbe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2fc2:	8f 7d       	andi	r24, 0xDF	; 223
    2fc4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2fc8:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2fca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2fce:	87 7f       	andi	r24, 0xF7	; 247
    2fd0:	f9 cf       	rjmp	.-14     	; 0x2fc4 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2fd2:	84 b5       	in	r24, 0x24	; 36
    2fd4:	8f 77       	andi	r24, 0x7F	; 127
    2fd6:	02 c0       	rjmp	.+4      	; 0x2fdc <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2fd8:	84 b5       	in	r24, 0x24	; 36
    2fda:	8f 7d       	andi	r24, 0xDF	; 223
    2fdc:	84 bd       	out	0x24, r24	; 36
    2fde:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2fe0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2fe4:	8f 77       	andi	r24, 0x7F	; 127
    2fe6:	03 c0       	rjmp	.+6      	; 0x2fee <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2fe8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2fec:	8f 7d       	andi	r24, 0xDF	; 223
    2fee:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2ff2:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2ff4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2ff8:	8f 77       	andi	r24, 0x7F	; 127
    2ffa:	07 c0       	rjmp	.+14     	; 0x300a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2ffc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    3000:	8f 7d       	andi	r24, 0xDF	; 223
    3002:	03 c0       	rjmp	.+6      	; 0x300a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3004:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    3008:	87 7f       	andi	r24, 0xF7	; 247
    300a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    300e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    3010:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3014:	8f 77       	andi	r24, 0x7F	; 127
    3016:	07 c0       	rjmp	.+14     	; 0x3026 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3018:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    301c:	8f 7d       	andi	r24, 0xDF	; 223
    301e:	03 c0       	rjmp	.+6      	; 0x3026 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    3020:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3024:	87 7f       	andi	r24, 0xF7	; 247
    3026:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    302a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    302c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3030:	8f 77       	andi	r24, 0x7F	; 127
    3032:	07 c0       	rjmp	.+14     	; 0x3042 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    3034:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3038:	8f 7d       	andi	r24, 0xDF	; 223
    303a:	03 c0       	rjmp	.+6      	; 0x3042 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    303c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3040:	87 7f       	andi	r24, 0xF7	; 247
    3042:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3046:	08 95       	ret

00003048 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	fc 01       	movw	r30, r24
    3050:	e0 53       	subi	r30, 0x30	; 48
    3052:	fe 4f       	sbci	r31, 0xFE	; 254
    3054:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3056:	fc 01       	movw	r30, r24
    3058:	ea 5e       	subi	r30, 0xEA	; 234
    305a:	fd 4f       	sbci	r31, 0xFD	; 253
    305c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    305e:	88 23       	and	r24, r24
    3060:	61 f1       	breq	.+88     	; 0x30ba <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	88 0f       	add	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	fc 01       	movw	r30, r24
    306a:	ea 58       	subi	r30, 0x8A	; 138
    306c:	fd 4f       	sbci	r31, 0xFD	; 253
    306e:	c5 91       	lpm	r28, Z+
    3070:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3072:	fc 01       	movw	r30, r24
    3074:	e4 5a       	subi	r30, 0xA4	; 164
    3076:	fd 4f       	sbci	r31, 0xFD	; 253
    3078:	a5 91       	lpm	r26, Z+
    307a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    307c:	61 11       	cpse	r22, r1
    307e:	09 c0       	rjmp	.+18     	; 0x3092 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3080:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3082:	f8 94       	cli
		*reg &= ~bit;
    3084:	88 81       	ld	r24, Y
    3086:	20 95       	com	r18
    3088:	82 23       	and	r24, r18
    308a:	88 83       	st	Y, r24
		*out &= ~bit;
    308c:	ec 91       	ld	r30, X
    308e:	2e 23       	and	r18, r30
    3090:	0b c0       	rjmp	.+22     	; 0x30a8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3092:	62 30       	cpi	r22, 0x02	; 2
    3094:	61 f4       	brne	.+24     	; 0x30ae <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3096:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3098:	f8 94       	cli
		*reg &= ~bit;
    309a:	88 81       	ld	r24, Y
    309c:	32 2f       	mov	r19, r18
    309e:	30 95       	com	r19
    30a0:	83 23       	and	r24, r19
    30a2:	88 83       	st	Y, r24
		*out |= bit;
    30a4:	ec 91       	ld	r30, X
    30a6:	2e 2b       	or	r18, r30
    30a8:	2c 93       	st	X, r18
		SREG = oldSREG;
    30aa:	9f bf       	out	0x3f, r25	; 63
    30ac:	06 c0       	rjmp	.+12     	; 0x30ba <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    30ae:	8f b7       	in	r24, 0x3f	; 63
                cli();
    30b0:	f8 94       	cli
		*reg |= bit;
    30b2:	e8 81       	ld	r30, Y
    30b4:	2e 2b       	or	r18, r30
    30b6:	28 83       	st	Y, r18
		SREG = oldSREG;
    30b8:	8f bf       	out	0x3f, r24	; 63
	}
}
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	08 95       	ret

000030c0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    30c0:	1f 93       	push	r17
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    30c6:	28 2f       	mov	r18, r24
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	f9 01       	movw	r30, r18
    30cc:	e6 57       	subi	r30, 0x76	; 118
    30ce:	fe 4f       	sbci	r31, 0xFE	; 254
    30d0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    30d2:	f9 01       	movw	r30, r18
    30d4:	e0 53       	subi	r30, 0x30	; 48
    30d6:	fe 4f       	sbci	r31, 0xFE	; 254
    30d8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    30da:	f9 01       	movw	r30, r18
    30dc:	ea 5e       	subi	r30, 0xEA	; 234
    30de:	fd 4f       	sbci	r31, 0xFD	; 253
    30e0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    30e2:	cc 23       	and	r28, r28
    30e4:	b9 f0       	breq	.+46     	; 0x3114 <digitalWrite+0x54>
    30e6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    30e8:	81 11       	cpse	r24, r1
    30ea:	59 df       	rcall	.-334    	; 0x2f9e <turnOffPWM>

	out = portOutputRegister(port);
    30ec:	ec 2f       	mov	r30, r28
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	ee 0f       	add	r30, r30
    30f2:	ff 1f       	adc	r31, r31
    30f4:	e4 5a       	subi	r30, 0xA4	; 164
    30f6:	fd 4f       	sbci	r31, 0xFD	; 253
    30f8:	a5 91       	lpm	r26, Z+
    30fa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    30fc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    30fe:	f8 94       	cli

	if (val == LOW) {
    3100:	11 11       	cpse	r17, r1
    3102:	04 c0       	rjmp	.+8      	; 0x310c <digitalWrite+0x4c>
		*out &= ~bit;
    3104:	8c 91       	ld	r24, X
    3106:	d0 95       	com	r29
    3108:	d8 23       	and	r29, r24
    310a:	02 c0       	rjmp	.+4      	; 0x3110 <digitalWrite+0x50>
	} else {
		*out |= bit;
    310c:	ec 91       	ld	r30, X
    310e:	de 2b       	or	r29, r30
    3110:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3112:	9f bf       	out	0x3f, r25	; 63
}
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	1f 91       	pop	r17
    311a:	08 95       	ret

0000311c <_ZN6StringD1Ev>:
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    311c:	fc 01       	movw	r30, r24
    311e:	80 81       	ld	r24, Z
    3120:	91 81       	ldd	r25, Z+1	; 0x01
    3122:	7c c5       	rjmp	.+2808   	; 0x3c1c <free>

00003124 <_ZN6String10invalidateEv>:
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29
    3128:	ec 01       	movw	r28, r24
    312a:	88 81       	ld	r24, Y
    312c:	99 81       	ldd	r25, Y+1	; 0x01
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	09 f0       	breq	.+2      	; 0x3134 <_ZN6String10invalidateEv+0x10>
    3132:	74 d5       	rcall	.+2792   	; 0x3c1c <free>
    3134:	19 82       	std	Y+1, r1	; 0x01
    3136:	18 82       	st	Y, r1
    3138:	1d 82       	std	Y+5, r1	; 0x05
    313a:	1c 82       	std	Y+4, r1	; 0x04
    313c:	1b 82       	std	Y+3, r1	; 0x03
    313e:	1a 82       	std	Y+2, r1	; 0x02
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	08 95       	ret

00003146 <_ZN6String12changeBufferEj>:
    3146:	0f 93       	push	r16
    3148:	1f 93       	push	r17
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    314e:	ec 01       	movw	r28, r24
    3150:	8b 01       	movw	r16, r22
    3152:	6f 5f       	subi	r22, 0xFF	; 255
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	88 81       	ld	r24, Y
    3158:	99 81       	ldd	r25, Y+1	; 0x01
    315a:	e9 d5       	rcall	.+3026   	; 0x3d2e <realloc>
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	31 f0       	breq	.+12     	; 0x316c <_ZN6String12changeBufferEj+0x26>
    3160:	99 83       	std	Y+1, r25	; 0x01
    3162:	88 83       	st	Y, r24
    3164:	1b 83       	std	Y+3, r17	; 0x03
    3166:	0a 83       	std	Y+2, r16	; 0x02
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	01 c0       	rjmp	.+2      	; 0x316e <_ZN6String12changeBufferEj+0x28>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	08 95       	ret

00003178 <_ZN6String7reserveEj>:
    3178:	cf 93       	push	r28
    317a:	df 93       	push	r29
    317c:	ec 01       	movw	r28, r24
    317e:	88 81       	ld	r24, Y
    3180:	99 81       	ldd	r25, Y+1	; 0x01
    3182:	89 2b       	or	r24, r25
    3184:	29 f0       	breq	.+10     	; 0x3190 <_ZN6String7reserveEj+0x18>
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	9b 81       	ldd	r25, Y+3	; 0x03
    318a:	86 17       	cp	r24, r22
    318c:	97 07       	cpc	r25, r23
    318e:	58 f4       	brcc	.+22     	; 0x31a6 <_ZN6String7reserveEj+0x2e>
    3190:	ce 01       	movw	r24, r28
    3192:	d9 df       	rcall	.-78     	; 0x3146 <_ZN6String12changeBufferEj>
    3194:	88 23       	and	r24, r24
    3196:	41 f0       	breq	.+16     	; 0x31a8 <_ZN6String7reserveEj+0x30>
    3198:	8c 81       	ldd	r24, Y+4	; 0x04
    319a:	9d 81       	ldd	r25, Y+5	; 0x05
    319c:	89 2b       	or	r24, r25
    319e:	19 f4       	brne	.+6      	; 0x31a6 <_ZN6String7reserveEj+0x2e>
    31a0:	e8 81       	ld	r30, Y
    31a2:	f9 81       	ldd	r31, Y+1	; 0x01
    31a4:	10 82       	st	Z, r1
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	df 91       	pop	r29
    31aa:	cf 91       	pop	r28
    31ac:	08 95       	ret

000031ae <_ZN6String4copyEPKcj>:
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
    31ba:	ec 01       	movw	r28, r24
    31bc:	7b 01       	movw	r14, r22
    31be:	8a 01       	movw	r16, r20
    31c0:	ba 01       	movw	r22, r20
    31c2:	da df       	rcall	.-76     	; 0x3178 <_ZN6String7reserveEj>
    31c4:	81 11       	cpse	r24, r1
    31c6:	03 c0       	rjmp	.+6      	; 0x31ce <_ZN6String4copyEPKcj+0x20>
    31c8:	ce 01       	movw	r24, r28
    31ca:	ac df       	rcall	.-168    	; 0x3124 <_ZN6String10invalidateEv>
    31cc:	06 c0       	rjmp	.+12     	; 0x31da <_ZN6String4copyEPKcj+0x2c>
    31ce:	1d 83       	std	Y+5, r17	; 0x05
    31d0:	0c 83       	std	Y+4, r16	; 0x04
    31d2:	b7 01       	movw	r22, r14
    31d4:	88 81       	ld	r24, Y
    31d6:	99 81       	ldd	r25, Y+1	; 0x01
    31d8:	93 d6       	rcall	.+3366   	; 0x3f00 <strcpy>
    31da:	ce 01       	movw	r24, r28
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	1f 91       	pop	r17
    31e2:	0f 91       	pop	r16
    31e4:	ff 90       	pop	r15
    31e6:	ef 90       	pop	r14
    31e8:	08 95       	ret

000031ea <_ZN6StringC1EPKc>:
    31ea:	fc 01       	movw	r30, r24
    31ec:	11 82       	std	Z+1, r1	; 0x01
    31ee:	10 82       	st	Z, r1
    31f0:	13 82       	std	Z+3, r1	; 0x03
    31f2:	12 82       	std	Z+2, r1	; 0x02
    31f4:	15 82       	std	Z+5, r1	; 0x05
    31f6:	14 82       	std	Z+4, r1	; 0x04
    31f8:	61 15       	cp	r22, r1
    31fa:	71 05       	cpc	r23, r1
    31fc:	49 f0       	breq	.+18     	; 0x3210 <_ZN6StringC1EPKc+0x26>
    31fe:	fb 01       	movw	r30, r22
    3200:	01 90       	ld	r0, Z+
    3202:	00 20       	and	r0, r0
    3204:	e9 f7       	brne	.-6      	; 0x3200 <_ZN6StringC1EPKc+0x16>
    3206:	31 97       	sbiw	r30, 0x01	; 1
    3208:	af 01       	movw	r20, r30
    320a:	46 1b       	sub	r20, r22
    320c:	57 0b       	sbc	r21, r23
    320e:	cf cf       	rjmp	.-98     	; 0x31ae <_ZN6String4copyEPKcj>
    3210:	08 95       	ret

00003212 <_ZN6StringaSERKS_>:
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	ec 01       	movw	r28, r24
    3218:	fb 01       	movw	r30, r22
    321a:	86 17       	cp	r24, r22
    321c:	97 07       	cpc	r25, r23
    321e:	51 f0       	breq	.+20     	; 0x3234 <_ZN6StringaSERKS_+0x22>
    3220:	60 81       	ld	r22, Z
    3222:	71 81       	ldd	r23, Z+1	; 0x01
    3224:	61 15       	cp	r22, r1
    3226:	71 05       	cpc	r23, r1
    3228:	21 f0       	breq	.+8      	; 0x3232 <_ZN6StringaSERKS_+0x20>
    322a:	44 81       	ldd	r20, Z+4	; 0x04
    322c:	55 81       	ldd	r21, Z+5	; 0x05
    322e:	bf df       	rcall	.-130    	; 0x31ae <_ZN6String4copyEPKcj>
    3230:	01 c0       	rjmp	.+2      	; 0x3234 <_ZN6StringaSERKS_+0x22>
    3232:	78 df       	rcall	.-272    	; 0x3124 <_ZN6String10invalidateEv>
    3234:	ce 01       	movw	r24, r28
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	08 95       	ret

0000323c <_ZN6StringC1ERKS_>:
    323c:	fc 01       	movw	r30, r24
    323e:	11 82       	std	Z+1, r1	; 0x01
    3240:	10 82       	st	Z, r1
    3242:	13 82       	std	Z+3, r1	; 0x03
    3244:	12 82       	std	Z+2, r1	; 0x02
    3246:	15 82       	std	Z+5, r1	; 0x05
    3248:	14 82       	std	Z+4, r1	; 0x04
    324a:	e3 cf       	rjmp	.-58     	; 0x3212 <_ZN6StringaSERKS_>

0000324c <_ZN6String6concatEPKcj>:
    324c:	ef 92       	push	r14
    324e:	ff 92       	push	r15
    3250:	0f 93       	push	r16
    3252:	1f 93       	push	r17
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
    3258:	61 15       	cp	r22, r1
    325a:	71 05       	cpc	r23, r1
    325c:	11 f4       	brne	.+4      	; 0x3262 <_ZN6String6concatEPKcj+0x16>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	1a c0       	rjmp	.+52     	; 0x3296 <_ZN6String6concatEPKcj+0x4a>
    3262:	41 15       	cp	r20, r1
    3264:	51 05       	cpc	r21, r1
    3266:	b1 f0       	breq	.+44     	; 0x3294 <_ZN6String6concatEPKcj+0x48>
    3268:	7b 01       	movw	r14, r22
    326a:	ec 01       	movw	r28, r24
    326c:	8c 81       	ldd	r24, Y+4	; 0x04
    326e:	9d 81       	ldd	r25, Y+5	; 0x05
    3270:	8a 01       	movw	r16, r20
    3272:	08 0f       	add	r16, r24
    3274:	19 1f       	adc	r17, r25
    3276:	b8 01       	movw	r22, r16
    3278:	ce 01       	movw	r24, r28
    327a:	7e df       	rcall	.-260    	; 0x3178 <_ZN6String7reserveEj>
    327c:	88 23       	and	r24, r24
    327e:	79 f3       	breq	.-34     	; 0x325e <_ZN6String6concatEPKcj+0x12>
    3280:	28 81       	ld	r18, Y
    3282:	39 81       	ldd	r19, Y+1	; 0x01
    3284:	8c 81       	ldd	r24, Y+4	; 0x04
    3286:	9d 81       	ldd	r25, Y+5	; 0x05
    3288:	b7 01       	movw	r22, r14
    328a:	82 0f       	add	r24, r18
    328c:	93 1f       	adc	r25, r19
    328e:	38 d6       	rcall	.+3184   	; 0x3f00 <strcpy>
    3290:	1d 83       	std	Y+5, r17	; 0x05
    3292:	0c 83       	std	Y+4, r16	; 0x04
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	ef 90       	pop	r14
    32a2:	08 95       	ret

000032a4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    32aa:	fb 01       	movw	r30, r22
    32ac:	44 81       	ldd	r20, Z+4	; 0x04
    32ae:	55 81       	ldd	r21, Z+5	; 0x05
    32b0:	60 81       	ld	r22, Z
    32b2:	71 81       	ldd	r23, Z+1	; 0x01
    32b4:	cb df       	rcall	.-106    	; 0x324c <_ZN6String6concatEPKcj>
    32b6:	81 11       	cpse	r24, r1
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <_ZplRK15StringSumHelperRK6String+0x1a>
    32ba:	ce 01       	movw	r24, r28
    32bc:	33 df       	rcall	.-410    	; 0x3124 <_ZN6String10invalidateEv>
	return a;
}
    32be:	ce 01       	movw	r24, r28
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	08 95       	ret

000032c6 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    32cc:	61 15       	cp	r22, r1
    32ce:	71 05       	cpc	r23, r1
    32d0:	59 f0       	breq	.+22     	; 0x32e8 <_ZplRK15StringSumHelperPKc+0x22>
    32d2:	fb 01       	movw	r30, r22
    32d4:	01 90       	ld	r0, Z+
    32d6:	00 20       	and	r0, r0
    32d8:	e9 f7       	brne	.-6      	; 0x32d4 <_ZplRK15StringSumHelperPKc+0xe>
    32da:	31 97       	sbiw	r30, 0x01	; 1
    32dc:	af 01       	movw	r20, r30
    32de:	46 1b       	sub	r20, r22
    32e0:	57 0b       	sbc	r21, r23
    32e2:	b4 df       	rcall	.-152    	; 0x324c <_ZN6String6concatEPKcj>
    32e4:	81 11       	cpse	r24, r1
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <_ZplRK15StringSumHelperPKc+0x26>
    32e8:	ce 01       	movw	r24, r28
    32ea:	1c df       	rcall	.-456    	; 0x3124 <_ZN6String10invalidateEv>
	return a;
}
    32ec:	ce 01       	movw	r24, r28
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret

000032f4 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    32f4:	fc 01       	movw	r30, r24
    32f6:	13 82       	std	Z+3, r1	; 0x03
    32f8:	12 82       	std	Z+2, r1	; 0x02
    32fa:	83 e7       	ldi	r24, 0x73	; 115
    32fc:	93 e0       	ldi	r25, 0x03	; 3
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
    3302:	64 83       	std	Z+4, r22	; 0x04
    3304:	41 87       	std	Z+9, r20	; 0x09
    3306:	22 87       	std	Z+10, r18	; 0x0a
    3308:	13 86       	std	Z+11, r1	; 0x0b
    330a:	08 95       	ret

0000330c <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    330c:	1f 93       	push	r17
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	ec 01       	movw	r28, r24
    3314:	16 2f       	mov	r17, r22
    3316:	6c 81       	ldd	r22, Y+4	; 0x04
    3318:	82 e4       	ldi	r24, 0x42	; 66
    331a:	95 e0       	ldi	r25, 0x05	; 5
    331c:	b9 d1       	rcall	.+882    	; 0x3690 <_ZN7TwoWire17beginTransmissionEh>
    331e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3320:	61 2b       	or	r22, r17
    3322:	82 e4       	ldi	r24, 0x42	; 66
    3324:	95 e0       	ldi	r25, 0x05	; 5
    3326:	67 d1       	rcall	.+718    	; 0x35f6 <_ZN7TwoWire5writeEh>
    3328:	82 e4       	ldi	r24, 0x42	; 66
    332a:	95 e0       	ldi	r25, 0x05	; 5
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	ca c1       	rjmp	.+916    	; 0x36c8 <_ZN7TwoWire15endTransmissionEv>

00003334 <_ZN17LiquidCrystal_I2C9backlightEv>:
    3334:	28 e0       	ldi	r18, 0x08	; 8
    3336:	fc 01       	movw	r30, r24
    3338:	23 87       	std	Z+11, r18	; 0x0b
    333a:	60 e0       	ldi	r22, 0x00	; 0
    333c:	e7 cf       	rjmp	.-50     	; 0x330c <_ZN17LiquidCrystal_I2C13expanderWriteEh>

0000333e <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
    3342:	cf 93       	push	r28
    3344:	8c 01       	movw	r16, r24
    3346:	c6 2f       	mov	r28, r22
    3348:	64 60       	ori	r22, 0x04	; 4
    334a:	e0 df       	rcall	.-64     	; 0x330c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	b9 dd       	rcall	.-1166   	; 0x2ec4 <delayMicroseconds>
    3352:	6c 2f       	mov	r22, r28
    3354:	6b 7f       	andi	r22, 0xFB	; 251
    3356:	c8 01       	movw	r24, r16
    3358:	d9 df       	rcall	.-78     	; 0x330c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    335a:	82 e3       	ldi	r24, 0x32	; 50
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	cf 91       	pop	r28
    3360:	1f 91       	pop	r17
    3362:	0f 91       	pop	r16
    3364:	af cd       	rjmp	.-1186   	; 0x2ec4 <delayMicroseconds>

00003366 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    3366:	1f 93       	push	r17
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	ec 01       	movw	r28, r24
    336e:	16 2f       	mov	r17, r22
    3370:	cd df       	rcall	.-102    	; 0x330c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    3372:	61 2f       	mov	r22, r17
    3374:	ce 01       	movw	r24, r28
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	1f 91       	pop	r17
    337c:	e0 cf       	rjmp	.-64     	; 0x333e <_ZN17LiquidCrystal_I2C11pulseEnableEh>

0000337e <_ZN17LiquidCrystal_I2C4sendEhh>:
    337e:	0f 93       	push	r16
    3380:	1f 93       	push	r17
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29
    3386:	8c 01       	movw	r16, r24
    3388:	c6 2f       	mov	r28, r22
    338a:	d4 2f       	mov	r29, r20
    338c:	60 7f       	andi	r22, 0xF0	; 240
    338e:	64 2b       	or	r22, r20
    3390:	ea df       	rcall	.-44     	; 0x3366 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    3392:	80 e1       	ldi	r24, 0x10	; 16
    3394:	c8 9f       	mul	r28, r24
    3396:	b0 01       	movw	r22, r0
    3398:	11 24       	eor	r1, r1
    339a:	6d 2b       	or	r22, r29
    339c:	c8 01       	movw	r24, r16
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	1f 91       	pop	r17
    33a4:	0f 91       	pop	r16
    33a6:	df cf       	rjmp	.-66     	; 0x3366 <_ZN17LiquidCrystal_I2C10write4bitsEh>

000033a8 <_ZN17LiquidCrystal_I2C7commandEh>:
    33a8:	40 e0       	ldi	r20, 0x00	; 0
    33aa:	e9 cf       	rjmp	.-46     	; 0x337e <_ZN17LiquidCrystal_I2C4sendEhh>

000033ac <_ZN17LiquidCrystal_I2C5clearEv>:
    33ac:	61 e0       	ldi	r22, 0x01	; 1
    33ae:	fc df       	rcall	.-8      	; 0x33a8 <_ZN17LiquidCrystal_I2C7commandEh>
    33b0:	80 ed       	ldi	r24, 0xD0	; 208
    33b2:	97 e0       	ldi	r25, 0x07	; 7
    33b4:	87 cd       	rjmp	.-1266   	; 0x2ec4 <delayMicroseconds>

000033b6 <_ZN17LiquidCrystal_I2C4homeEv>:
    33b6:	62 e0       	ldi	r22, 0x02	; 2
    33b8:	f7 df       	rcall	.-18     	; 0x33a8 <_ZN17LiquidCrystal_I2C7commandEh>
    33ba:	80 ed       	ldi	r24, 0xD0	; 208
    33bc:	97 e0       	ldi	r25, 0x07	; 7
    33be:	82 cd       	rjmp	.-1276   	; 0x2ec4 <delayMicroseconds>

000033c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
    33c8:	28 97       	sbiw	r28, 0x08	; 8
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	9c 01       	movw	r18, r24
    33d6:	88 e0       	ldi	r24, 0x08	; 8
    33d8:	e2 e1       	ldi	r30, 0x12	; 18
    33da:	f2 e0       	ldi	r31, 0x02	; 2
    33dc:	de 01       	movw	r26, r28
    33de:	11 96       	adiw	r26, 0x01	; 1
    33e0:	01 90       	ld	r0, Z+
    33e2:	0d 92       	st	X+, r0
    33e4:	8a 95       	dec	r24
    33e6:	e1 f7       	brne	.-8      	; 0x33e0 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    33e8:	f9 01       	movw	r30, r18
    33ea:	80 85       	ldd	r24, Z+8	; 0x08
    33ec:	84 17       	cp	r24, r20
    33ee:	10 f4       	brcc	.+4      	; 0x33f4 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    33f0:	4f ef       	ldi	r20, 0xFF	; 255
    33f2:	48 0f       	add	r20, r24
    33f4:	fe 01       	movw	r30, r28
    33f6:	31 96       	adiw	r30, 0x01	; 1
    33f8:	e4 0f       	add	r30, r20
    33fa:	f1 1d       	adc	r31, r1
    33fc:	e4 0f       	add	r30, r20
    33fe:	f1 1d       	adc	r31, r1
    3400:	90 81       	ld	r25, Z
    3402:	69 0f       	add	r22, r25
    3404:	60 68       	ori	r22, 0x80	; 128
    3406:	c9 01       	movw	r24, r18
    3408:	28 96       	adiw	r28, 0x08	; 8
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
    3414:	df 91       	pop	r29
    3416:	cf 91       	pop	r28
    3418:	c7 cf       	rjmp	.-114    	; 0x33a8 <_ZN17LiquidCrystal_I2C7commandEh>

0000341a <_ZN17LiquidCrystal_I2C7displayEv>:
    341a:	fc 01       	movw	r30, r24
    341c:	66 81       	ldd	r22, Z+6	; 0x06
    341e:	26 2f       	mov	r18, r22
    3420:	24 60       	ori	r18, 0x04	; 4
    3422:	26 83       	std	Z+6, r18	; 0x06
    3424:	6c 60       	ori	r22, 0x0C	; 12
    3426:	c0 cf       	rjmp	.-128    	; 0x33a8 <_ZN17LiquidCrystal_I2C7commandEh>

00003428 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    3428:	41 e0       	ldi	r20, 0x01	; 1
    342a:	a9 df       	rcall	.-174    	; 0x337e <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	08 95       	ret

00003432 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	ec 01       	movw	r28, r24
	if (lines > 1) {
    3438:	42 30       	cpi	r20, 0x02	; 2
    343a:	18 f0       	brcs	.+6      	; 0x3442 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	88 60       	ori	r24, 0x08	; 8
    3440:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    3442:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    3444:	22 23       	and	r18, r18
    3446:	29 f0       	breq	.+10     	; 0x3452 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    3448:	41 30       	cpi	r20, 0x01	; 1
    344a:	19 f4       	brne	.+6      	; 0x3452 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	84 60       	ori	r24, 0x04	; 4
    3450:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    3452:	62 e3       	ldi	r22, 0x32	; 50
    3454:	70 e0       	ldi	r23, 0x00	; 0
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	fb dc       	rcall	.-1546   	; 0x2e52 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    345c:	6b 85       	ldd	r22, Y+11	; 0x0b
    345e:	ce 01       	movw	r24, r28
    3460:	55 df       	rcall	.-342    	; 0x330c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    3462:	68 ee       	ldi	r22, 0xE8	; 232
    3464:	73 e0       	ldi	r23, 0x03	; 3
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	f3 dc       	rcall	.-1562   	; 0x2e52 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    346c:	60 e3       	ldi	r22, 0x30	; 48
    346e:	ce 01       	movw	r24, r28
    3470:	7a df       	rcall	.-268    	; 0x3366 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    3472:	84 e9       	ldi	r24, 0x94	; 148
    3474:	91 e1       	ldi	r25, 0x11	; 17
    3476:	26 dd       	rcall	.-1460   	; 0x2ec4 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    3478:	60 e3       	ldi	r22, 0x30	; 48
    347a:	ce 01       	movw	r24, r28
    347c:	74 df       	rcall	.-280    	; 0x3366 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    347e:	84 e9       	ldi	r24, 0x94	; 148
    3480:	91 e1       	ldi	r25, 0x11	; 17
    3482:	20 dd       	rcall	.-1472   	; 0x2ec4 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    3484:	60 e3       	ldi	r22, 0x30	; 48
    3486:	ce 01       	movw	r24, r28
    3488:	6e df       	rcall	.-292    	; 0x3366 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    348a:	86 e9       	ldi	r24, 0x96	; 150
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	1a dd       	rcall	.-1484   	; 0x2ec4 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    3490:	60 e2       	ldi	r22, 0x20	; 32
    3492:	ce 01       	movw	r24, r28
    3494:	68 df       	rcall	.-304    	; 0x3366 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    3496:	6d 81       	ldd	r22, Y+5	; 0x05
    3498:	60 62       	ori	r22, 0x20	; 32
    349a:	ce 01       	movw	r24, r28
    349c:	85 df       	rcall	.-246    	; 0x33a8 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    349e:	84 e0       	ldi	r24, 0x04	; 4
    34a0:	8e 83       	std	Y+6, r24	; 0x06
	display();
    34a2:	ce 01       	movw	r24, r28
    34a4:	ba df       	rcall	.-140    	; 0x341a <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    34a6:	ce 01       	movw	r24, r28
    34a8:	81 df       	rcall	.-254    	; 0x33ac <_ZN17LiquidCrystal_I2C5clearEv>
    34aa:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    34ac:	8f 83       	std	Y+7, r24	; 0x07
    34ae:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    34b0:	ce 01       	movw	r24, r28
    34b2:	7a df       	rcall	.-268    	; 0x33a8 <_ZN17LiquidCrystal_I2C7commandEh>
    34b4:	ce 01       	movw	r24, r28
    34b6:	df 91       	pop	r29
	
	home();
    34b8:	cf 91       	pop	r28
  
}
    34ba:	7d cf       	rjmp	.-262    	; 0x33b6 <_ZN17LiquidCrystal_I2C4homeEv>

000034bc <_ZN17LiquidCrystal_I2C9init_privEv>:
    34bc:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    34be:	df 93       	push	r29
    34c0:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    34c2:	82 e4       	ldi	r24, 0x42	; 66
    34c4:	95 e0       	ldi	r25, 0x05	; 5
    34c6:	d5 d0       	rcall	.+426    	; 0x3672 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    34c8:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	4a 85       	ldd	r20, Y+10	; 0x0a
    34ce:	69 85       	ldd	r22, Y+9	; 0x09
    34d0:	ce 01       	movw	r24, r28
}
    34d2:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    34d4:	cf 91       	pop	r28
    34d6:	ad cf       	rjmp	.-166    	; 0x3432 <_ZN17LiquidCrystal_I2C5beginEhhh>

000034d8 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    34d8:	f1 cf       	rjmp	.-30     	; 0x34bc <_ZN17LiquidCrystal_I2C9init_privEv>

000034da <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    34da:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ZN7TwoWire14rxBufferLengthE>
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <_ZN7TwoWire13rxBufferIndexE>
    34e4:	82 1b       	sub	r24, r18
    34e6:	91 09       	sbc	r25, r1
    34e8:	08 95       	ret

000034ea <_ZN7TwoWire4readEv>:
    34ea:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ZN7TwoWire13rxBufferIndexE>
    34ee:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ZN7TwoWire14rxBufferLengthE>
    34f2:	98 17       	cp	r25, r24
    34f4:	50 f4       	brcc	.+20     	; 0x350a <_ZN7TwoWire4readEv+0x20>
    34f6:	e9 2f       	mov	r30, r25
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	e8 58       	subi	r30, 0x88	; 136
    34fc:	fa 4f       	sbci	r31, 0xFA	; 250
    34fe:	20 81       	ld	r18, Z
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	9f 5f       	subi	r25, 0xFF	; 255
    3504:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <_ZN7TwoWire13rxBufferIndexE>
    3508:	02 c0       	rjmp	.+4      	; 0x350e <_ZN7TwoWire4readEv+0x24>
    350a:	2f ef       	ldi	r18, 0xFF	; 255
    350c:	3f ef       	ldi	r19, 0xFF	; 255
    350e:	c9 01       	movw	r24, r18
    3510:	08 95       	ret

00003512 <_ZN7TwoWire4peekEv>:
    3512:	e0 91 77 05 	lds	r30, 0x0577	; 0x800577 <_ZN7TwoWire13rxBufferIndexE>
    3516:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ZN7TwoWire14rxBufferLengthE>
    351a:	e8 17       	cp	r30, r24
    351c:	30 f4       	brcc	.+12     	; 0x352a <_ZN7TwoWire4peekEv+0x18>
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	e8 58       	subi	r30, 0x88	; 136
    3522:	fa 4f       	sbci	r31, 0xFA	; 250
    3524:	80 81       	ld	r24, Z
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	08 95       	ret
    352a:	8f ef       	ldi	r24, 0xFF	; 255
    352c:	9f ef       	ldi	r25, 0xFF	; 255
    352e:	08 95       	ret

00003530 <_ZN7TwoWire5flushEv>:
    3530:	08 95       	ret

00003532 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	ec 01       	movw	r28, r24
    3538:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <_ZN7TwoWire14user_onReceiveE>
    353c:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <_ZN7TwoWire14user_onReceiveE+0x1>
    3540:	30 97       	sbiw	r30, 0x00	; 0
    3542:	f1 f0       	breq	.+60     	; 0x3580 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3544:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ZN7TwoWire13rxBufferIndexE>
    3548:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ZN7TwoWire14rxBufferLengthE>
    354c:	98 17       	cp	r25, r24
    354e:	c0 f0       	brcs	.+48     	; 0x3580 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	29 2f       	mov	r18, r25
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	26 17       	cp	r18, r22
    3558:	37 07       	cpc	r19, r23
    355a:	54 f4       	brge	.+20     	; 0x3570 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    355c:	de 01       	movw	r26, r28
    355e:	a2 0f       	add	r26, r18
    3560:	b3 1f       	adc	r27, r19
    3562:	4c 91       	ld	r20, X
    3564:	d9 01       	movw	r26, r18
    3566:	a8 58       	subi	r26, 0x88	; 136
    3568:	ba 4f       	sbci	r27, 0xFA	; 250
    356a:	4c 93       	st	X, r20
    356c:	9f 5f       	subi	r25, 0xFF	; 255
    356e:	f1 cf       	rjmp	.-30     	; 0x3552 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3570:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <_ZN7TwoWire13rxBufferIndexE>
    3574:	60 93 76 05 	sts	0x0576, r22	; 0x800576 <_ZN7TwoWire14rxBufferLengthE>
    3578:	cb 01       	movw	r24, r22
    357a:	df 91       	pop	r29
    357c:	cf 91       	pop	r28
    357e:	19 94       	eijmp
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret

00003586 <_ZN7TwoWire16onRequestServiceEv>:
    3586:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <_ZN7TwoWire14user_onRequestE>
    358a:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <_ZN7TwoWire14user_onRequestE+0x1>
    358e:	30 97       	sbiw	r30, 0x00	; 0
    3590:	29 f0       	breq	.+10     	; 0x359c <_ZN7TwoWire16onRequestServiceEv+0x16>
    3592:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <_ZN7TwoWire13txBufferIndexE>
    3596:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <_ZN7TwoWire14txBufferLengthE>
    359a:	19 94       	eijmp
    359c:	08 95       	ret

0000359e <_ZN7TwoWire5writeEPKhj>:
    359e:	cf 92       	push	r12
    35a0:	df 92       	push	r13
    35a2:	ef 92       	push	r14
    35a4:	ff 92       	push	r15
    35a6:	0f 93       	push	r16
    35a8:	1f 93       	push	r17
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	7c 01       	movw	r14, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	8a 01       	movw	r16, r20
    35b4:	20 91 52 05 	lds	r18, 0x0552	; 0x800552 <_ZN7TwoWire12transmittingE>
    35b8:	22 23       	and	r18, r18
    35ba:	89 f0       	breq	.+34     	; 0x35de <_ZN7TwoWire5writeEPKhj+0x40>
    35bc:	eb 01       	movw	r28, r22
    35be:	6b 01       	movw	r12, r22
    35c0:	c4 0e       	add	r12, r20
    35c2:	d5 1e       	adc	r13, r21
    35c4:	cc 15       	cp	r28, r12
    35c6:	dd 05       	cpc	r29, r13
    35c8:	61 f0       	breq	.+24     	; 0x35e2 <_ZN7TwoWire5writeEPKhj+0x44>
    35ca:	69 91       	ld	r22, Y+
    35cc:	d7 01       	movw	r26, r14
    35ce:	ed 91       	ld	r30, X+
    35d0:	fc 91       	ld	r31, X
    35d2:	01 90       	ld	r0, Z+
    35d4:	f0 81       	ld	r31, Z
    35d6:	e0 2d       	mov	r30, r0
    35d8:	c7 01       	movw	r24, r14
    35da:	19 95       	eicall
    35dc:	f3 cf       	rjmp	.-26     	; 0x35c4 <_ZN7TwoWire5writeEPKhj+0x26>
    35de:	64 2f       	mov	r22, r20
    35e0:	eb d0       	rcall	.+470    	; 0x37b8 <twi_transmit>
    35e2:	c8 01       	movw	r24, r16
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	1f 91       	pop	r17
    35ea:	0f 91       	pop	r16
    35ec:	ff 90       	pop	r15
    35ee:	ef 90       	pop	r14
    35f0:	df 90       	pop	r13
    35f2:	cf 90       	pop	r12
    35f4:	08 95       	ret

000035f6 <_ZN7TwoWire5writeEh>:
    35f6:	cf 93       	push	r28
    35f8:	df 93       	push	r29
    35fa:	1f 92       	push	r1
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	69 83       	std	Y+1, r22	; 0x01
    3602:	20 91 52 05 	lds	r18, 0x0552	; 0x800552 <_ZN7TwoWire12transmittingE>
    3606:	22 23       	and	r18, r18
    3608:	d1 f0       	breq	.+52     	; 0x363e <_ZN7TwoWire5writeEh+0x48>
    360a:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <_ZN7TwoWire14txBufferLengthE>
    360e:	20 32       	cpi	r18, 0x20	; 32
    3610:	40 f0       	brcs	.+16     	; 0x3622 <_ZN7TwoWire5writeEh+0x2c>
    3612:	21 e0       	ldi	r18, 0x01	; 1
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	fc 01       	movw	r30, r24
    3618:	33 83       	std	Z+3, r19	; 0x03
    361a:	22 83       	std	Z+2, r18	; 0x02
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	14 c0       	rjmp	.+40     	; 0x364a <_ZN7TwoWire5writeEh+0x54>
    3622:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <_ZN7TwoWire13txBufferIndexE>
    3626:	e8 2f       	mov	r30, r24
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	eb 5a       	subi	r30, 0xAB	; 171
    362c:	fa 4f       	sbci	r31, 0xFA	; 250
    362e:	99 81       	ldd	r25, Y+1	; 0x01
    3630:	90 83       	st	Z, r25
    3632:	8f 5f       	subi	r24, 0xFF	; 255
    3634:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <_ZN7TwoWire13txBufferIndexE>
    3638:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <_ZN7TwoWire14txBufferLengthE>
    363c:	04 c0       	rjmp	.+8      	; 0x3646 <_ZN7TwoWire5writeEh+0x50>
    363e:	61 e0       	ldi	r22, 0x01	; 1
    3640:	ce 01       	movw	r24, r28
    3642:	01 96       	adiw	r24, 0x01	; 1
    3644:	b9 d0       	rcall	.+370    	; 0x37b8 <twi_transmit>
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	0f 90       	pop	r0
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	08 95       	ret

00003652 <_ZN7TwoWireC1Ev>:
    3652:	fc 01       	movw	r30, r24
    3654:	13 82       	std	Z+3, r1	; 0x03
    3656:	12 82       	std	Z+2, r1	; 0x02
    3658:	88 ee       	ldi	r24, 0xE8	; 232
    365a:	93 e0       	ldi	r25, 0x03	; 3
    365c:	a0 e0       	ldi	r26, 0x00	; 0
    365e:	b0 e0       	ldi	r27, 0x00	; 0
    3660:	84 83       	std	Z+4, r24	; 0x04
    3662:	95 83       	std	Z+5, r25	; 0x05
    3664:	a6 83       	std	Z+6, r26	; 0x06
    3666:	b7 83       	std	Z+7, r27	; 0x07
    3668:	8f e7       	ldi	r24, 0x7F	; 127
    366a:	93 e0       	ldi	r25, 0x03	; 3
    366c:	91 83       	std	Z+1, r25	; 0x01
    366e:	80 83       	st	Z, r24
    3670:	08 95       	ret

00003672 <_ZN7TwoWire5beginEv>:
    3672:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <_ZN7TwoWire13rxBufferIndexE>
    3676:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <_ZN7TwoWire14rxBufferLengthE>
    367a:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <_ZN7TwoWire13txBufferIndexE>
    367e:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <_ZN7TwoWire14txBufferLengthE>
    3682:	28 d0       	rcall	.+80     	; 0x36d4 <twi_init>
    3684:	83 ec       	ldi	r24, 0xC3	; 195
    3686:	9a e1       	ldi	r25, 0x1A	; 26
    3688:	c4 d0       	rcall	.+392    	; 0x3812 <twi_attachSlaveTxEvent>
    368a:	89 e9       	ldi	r24, 0x99	; 153
    368c:	9a e1       	ldi	r25, 0x1A	; 26
    368e:	bc c0       	rjmp	.+376    	; 0x3808 <twi_attachSlaveRxEvent>

00003690 <_ZN7TwoWire17beginTransmissionEh>:
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <_ZN7TwoWire12transmittingE>
    3696:	60 93 75 05 	sts	0x0575, r22	; 0x800575 <_ZN7TwoWire9txAddressE>
    369a:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <_ZN7TwoWire13txBufferIndexE>
    369e:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <_ZN7TwoWire14txBufferLengthE>
    36a2:	08 95       	ret

000036a4 <_ZN7TwoWire15endTransmissionEh>:
    36a4:	0f 93       	push	r16
    36a6:	06 2f       	mov	r16, r22
    36a8:	21 e0       	ldi	r18, 0x01	; 1
    36aa:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <_ZN7TwoWire14txBufferLengthE>
    36ae:	65 e5       	ldi	r22, 0x55	; 85
    36b0:	75 e0       	ldi	r23, 0x05	; 5
    36b2:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <_ZN7TwoWire9txAddressE>
    36b6:	2a d0       	rcall	.+84     	; 0x370c <twi_writeTo>
    36b8:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <_ZN7TwoWire13txBufferIndexE>
    36bc:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <_ZN7TwoWire14txBufferLengthE>
    36c0:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <_ZN7TwoWire12transmittingE>
    36c4:	0f 91       	pop	r16
    36c6:	08 95       	ret

000036c8 <_ZN7TwoWire15endTransmissionEv>:
    36c8:	61 e0       	ldi	r22, 0x01	; 1
    36ca:	ec cf       	rjmp	.-40     	; 0x36a4 <_ZN7TwoWire15endTransmissionEh>

000036cc <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    36cc:	82 e4       	ldi	r24, 0x42	; 66
    36ce:	95 e0       	ldi	r25, 0x05	; 5
    36d0:	c0 cf       	rjmp	.-128    	; 0x3652 <_ZN7TwoWireC1Ev>

000036d2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    36d2:	08 95       	ret

000036d4 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    36d4:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <twi_state>
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <twi_sendStop>
    36de:	10 92 02 06 	sts	0x0602, r1	; 0x800602 <twi_inRepStart>
    36e2:	61 e0       	ldi	r22, 0x01	; 1
    36e4:	84 e1       	ldi	r24, 0x14	; 20
    36e6:	ec dc       	rcall	.-1576   	; 0x30c0 <digitalWrite>
    36e8:	61 e0       	ldi	r22, 0x01	; 1
    36ea:	85 e1       	ldi	r24, 0x15	; 21
    36ec:	e9 dc       	rcall	.-1582   	; 0x30c0 <digitalWrite>
    36ee:	e9 eb       	ldi	r30, 0xB9	; 185
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	8e 7f       	andi	r24, 0xFE	; 254
    36f6:	80 83       	st	Z, r24
    36f8:	80 81       	ld	r24, Z
    36fa:	8d 7f       	andi	r24, 0xFD	; 253
    36fc:	80 83       	st	Z, r24
    36fe:	88 e4       	ldi	r24, 0x48	; 72
    3700:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3704:	85 e4       	ldi	r24, 0x45	; 69
    3706:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    370a:	08 95       	ret

0000370c <twi_writeTo>:
    370c:	0f 93       	push	r16
    370e:	41 32       	cpi	r20, 0x21	; 33
    3710:	08 f0       	brcs	.+2      	; 0x3714 <twi_writeTo+0x8>
    3712:	4a c0       	rjmp	.+148    	; 0x37a8 <twi_writeTo+0x9c>
    3714:	90 91 05 06 	lds	r25, 0x0605	; 0x800605 <twi_state>
    3718:	91 11       	cpse	r25, r1
    371a:	fc cf       	rjmp	.-8      	; 0x3714 <twi_writeTo+0x8>
    371c:	32 e0       	ldi	r19, 0x02	; 2
    371e:	30 93 05 06 	sts	0x0605, r19	; 0x800605 <twi_state>
    3722:	00 93 03 06 	sts	0x0603, r16	; 0x800603 <twi_sendStop>
    3726:	3f ef       	ldi	r19, 0xFF	; 255
    3728:	30 93 98 05 	sts	0x0598, r19	; 0x800598 <twi_error>
    372c:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <twi_masterBufferIndex>
    3730:	40 93 dc 05 	sts	0x05DC, r20	; 0x8005dc <twi_masterBufferLength>
    3734:	56 2f       	mov	r21, r22
    3736:	ae ed       	ldi	r26, 0xDE	; 222
    3738:	b5 e0       	ldi	r27, 0x05	; 5
    373a:	fb 01       	movw	r30, r22
    373c:	3e 2f       	mov	r19, r30
    373e:	35 1b       	sub	r19, r21
    3740:	34 17       	cp	r19, r20
    3742:	18 f4       	brcc	.+6      	; 0x374a <twi_writeTo+0x3e>
    3744:	31 91       	ld	r19, Z+
    3746:	3d 93       	st	X+, r19
    3748:	f9 cf       	rjmp	.-14     	; 0x373c <twi_writeTo+0x30>
    374a:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <twi_slarw>
    374e:	30 91 04 06 	lds	r19, 0x0604	; 0x800604 <twi_slarw>
    3752:	88 0f       	add	r24, r24
    3754:	83 2b       	or	r24, r19
    3756:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <twi_slarw>
    375a:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <twi_inRepStart>
    375e:	81 30       	cpi	r24, 0x01	; 1
    3760:	61 f4       	brne	.+24     	; 0x377a <twi_writeTo+0x6e>
    3762:	10 92 02 06 	sts	0x0602, r1	; 0x800602 <twi_inRepStart>
    3766:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <twi_slarw>
    376a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    376e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3772:	83 fd       	sbrc	r24, 3
    3774:	f8 cf       	rjmp	.-16     	; 0x3766 <twi_writeTo+0x5a>
    3776:	85 ec       	ldi	r24, 0xC5	; 197
    3778:	01 c0       	rjmp	.+2      	; 0x377c <twi_writeTo+0x70>
    377a:	85 ee       	ldi	r24, 0xE5	; 229
    377c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3780:	22 23       	and	r18, r18
    3782:	21 f0       	breq	.+8      	; 0x378c <twi_writeTo+0x80>
    3784:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <twi_state>
    3788:	82 30       	cpi	r24, 0x02	; 2
    378a:	d1 f3       	breq	.-12     	; 0x3780 <twi_writeTo+0x74>
    378c:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <twi_error>
    3790:	8f 3f       	cpi	r24, 0xFF	; 255
    3792:	79 f0       	breq	.+30     	; 0x37b2 <twi_writeTo+0xa6>
    3794:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <twi_error>
    3798:	80 32       	cpi	r24, 0x20	; 32
    379a:	41 f0       	breq	.+16     	; 0x37ac <twi_writeTo+0xa0>
    379c:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <twi_error>
    37a0:	80 33       	cpi	r24, 0x30	; 48
    37a2:	31 f0       	breq	.+12     	; 0x37b0 <twi_writeTo+0xa4>
    37a4:	94 e0       	ldi	r25, 0x04	; 4
    37a6:	05 c0       	rjmp	.+10     	; 0x37b2 <twi_writeTo+0xa6>
    37a8:	91 e0       	ldi	r25, 0x01	; 1
    37aa:	03 c0       	rjmp	.+6      	; 0x37b2 <twi_writeTo+0xa6>
    37ac:	92 e0       	ldi	r25, 0x02	; 2
    37ae:	01 c0       	rjmp	.+2      	; 0x37b2 <twi_writeTo+0xa6>
    37b0:	93 e0       	ldi	r25, 0x03	; 3
    37b2:	89 2f       	mov	r24, r25
    37b4:	0f 91       	pop	r16
    37b6:	08 95       	ret

000037b8 <twi_transmit>:
    37b8:	40 91 ba 05 	lds	r20, 0x05BA	; 0x8005ba <twi_txBufferLength>
    37bc:	26 2f       	mov	r18, r22
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	24 0f       	add	r18, r20
    37c2:	31 1d       	adc	r19, r1
    37c4:	21 32       	cpi	r18, 0x21	; 33
    37c6:	31 05       	cpc	r19, r1
    37c8:	dc f4       	brge	.+54     	; 0x3800 <twi_transmit+0x48>
    37ca:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <twi_state>
    37ce:	24 30       	cpi	r18, 0x04	; 4
    37d0:	c9 f4       	brne	.+50     	; 0x3804 <twi_transmit+0x4c>
    37d2:	fc 01       	movw	r30, r24
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	86 17       	cp	r24, r22
    37da:	58 f4       	brcc	.+22     	; 0x37f2 <twi_transmit+0x3a>
    37dc:	30 91 ba 05 	lds	r19, 0x05BA	; 0x8005ba <twi_txBufferLength>
    37e0:	21 91       	ld	r18, Z+
    37e2:	dc 01       	movw	r26, r24
    37e4:	a4 54       	subi	r26, 0x44	; 68
    37e6:	ba 4f       	sbci	r27, 0xFA	; 250
    37e8:	a3 0f       	add	r26, r19
    37ea:	b1 1d       	adc	r27, r1
    37ec:	2c 93       	st	X, r18
    37ee:	01 96       	adiw	r24, 0x01	; 1
    37f0:	f3 cf       	rjmp	.-26     	; 0x37d8 <twi_transmit+0x20>
    37f2:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <twi_txBufferLength>
    37f6:	68 0f       	add	r22, r24
    37f8:	60 93 ba 05 	sts	0x05BA, r22	; 0x8005ba <twi_txBufferLength>
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	08 95       	ret
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	08 95       	ret
    3804:	82 e0       	ldi	r24, 0x02	; 2
    3806:	08 95       	ret

00003808 <twi_attachSlaveRxEvent>:
    3808:	90 93 ff 05 	sts	0x05FF, r25	; 0x8005ff <twi_onSlaveReceive+0x1>
    380c:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <twi_onSlaveReceive>
    3810:	08 95       	ret

00003812 <twi_attachSlaveTxEvent>:
    3812:	90 93 01 06 	sts	0x0601, r25	; 0x800601 <twi_onSlaveTransmit+0x1>
    3816:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <twi_onSlaveTransmit>
    381a:	08 95       	ret

0000381c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    381c:	85 ed       	ldi	r24, 0xD5	; 213
    381e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3822:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3826:	84 fd       	sbrc	r24, 4
    3828:	fc cf       	rjmp	.-8      	; 0x3822 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    382a:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <twi_state>
    382e:	08 95       	ret

00003830 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3830:	85 ec       	ldi	r24, 0xC5	; 197
    3832:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    3836:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <twi_state>
    383a:	08 95       	ret

0000383c <__vector_39>:
}

ISR(TWI_vect)
{
    383c:	1f 92       	push	r1
    383e:	0f 92       	push	r0
    3840:	0f b6       	in	r0, 0x3f	; 63
    3842:	0f 92       	push	r0
    3844:	11 24       	eor	r1, r1
    3846:	0b b6       	in	r0, 0x3b	; 59
    3848:	0f 92       	push	r0
    384a:	2f 93       	push	r18
    384c:	3f 93       	push	r19
    384e:	4f 93       	push	r20
    3850:	5f 93       	push	r21
    3852:	6f 93       	push	r22
    3854:	7f 93       	push	r23
    3856:	8f 93       	push	r24
    3858:	9f 93       	push	r25
    385a:	af 93       	push	r26
    385c:	bf 93       	push	r27
    385e:	ef 93       	push	r30
    3860:	ff 93       	push	r31
  switch(TW_STATUS){
    3862:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3866:	88 7f       	andi	r24, 0xF8	; 248
    3868:	80 36       	cpi	r24, 0x60	; 96
    386a:	09 f4       	brne	.+2      	; 0x386e <__vector_39+0x32>
    386c:	9d c0       	rjmp	.+314    	; 0x39a8 <__vector_39+0x16c>
    386e:	70 f5       	brcc	.+92     	; 0x38cc <__vector_39+0x90>
    3870:	88 32       	cpi	r24, 0x28	; 40
    3872:	09 f4       	brne	.+2      	; 0x3876 <__vector_39+0x3a>
    3874:	5c c0       	rjmp	.+184    	; 0x392e <__vector_39+0xf2>
    3876:	90 f4       	brcc	.+36     	; 0x389c <__vector_39+0x60>
    3878:	80 31       	cpi	r24, 0x10	; 16
    387a:	09 f4       	brne	.+2      	; 0x387e <__vector_39+0x42>
    387c:	55 c0       	rjmp	.+170    	; 0x3928 <__vector_39+0xec>
    387e:	38 f4       	brcc	.+14     	; 0x388e <__vector_39+0x52>
    3880:	88 23       	and	r24, r24
    3882:	09 f4       	brne	.+2      	; 0x3886 <__vector_39+0x4a>
    3884:	f3 c0       	rjmp	.+486    	; 0x3a6c <__vector_39+0x230>
    3886:	88 30       	cpi	r24, 0x08	; 8
    3888:	09 f4       	brne	.+2      	; 0x388c <__vector_39+0x50>
    388a:	4e c0       	rjmp	.+156    	; 0x3928 <__vector_39+0xec>
    388c:	f2 c0       	rjmp	.+484    	; 0x3a72 <__vector_39+0x236>
    388e:	88 31       	cpi	r24, 0x18	; 24
    3890:	09 f4       	brne	.+2      	; 0x3894 <__vector_39+0x58>
    3892:	4d c0       	rjmp	.+154    	; 0x392e <__vector_39+0xf2>
    3894:	80 32       	cpi	r24, 0x20	; 32
    3896:	09 f4       	brne	.+2      	; 0x389a <__vector_39+0x5e>
    3898:	5e c0       	rjmp	.+188    	; 0x3956 <__vector_39+0x11a>
    389a:	eb c0       	rjmp	.+470    	; 0x3a72 <__vector_39+0x236>
    389c:	80 34       	cpi	r24, 0x40	; 64
    389e:	09 f4       	brne	.+2      	; 0x38a2 <__vector_39+0x66>
    38a0:	69 c0       	rjmp	.+210    	; 0x3974 <__vector_39+0x138>
    38a2:	50 f4       	brcc	.+20     	; 0x38b8 <__vector_39+0x7c>
    38a4:	80 33       	cpi	r24, 0x30	; 48
    38a6:	09 f4       	brne	.+2      	; 0x38aa <__vector_39+0x6e>
    38a8:	56 c0       	rjmp	.+172    	; 0x3956 <__vector_39+0x11a>
    38aa:	88 33       	cpi	r24, 0x38	; 56
    38ac:	09 f0       	breq	.+2      	; 0x38b0 <__vector_39+0x74>
    38ae:	e1 c0       	rjmp	.+450    	; 0x3a72 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    38b0:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <twi_error>
      twi_releaseBus();
    38b4:	bd df       	rcall	.-134    	; 0x3830 <twi_releaseBus>
      break;
    38b6:	dd c0       	rjmp	.+442    	; 0x3a72 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    38b8:	80 35       	cpi	r24, 0x50	; 80
    38ba:	09 f4       	brne	.+2      	; 0x38be <__vector_39+0x82>
    38bc:	4f c0       	rjmp	.+158    	; 0x395c <__vector_39+0x120>
    38be:	88 35       	cpi	r24, 0x58	; 88
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <__vector_39+0x88>
    38c2:	5d c0       	rjmp	.+186    	; 0x397e <__vector_39+0x142>
    38c4:	88 34       	cpi	r24, 0x48	; 72
    38c6:	09 f0       	breq	.+2      	; 0x38ca <__vector_39+0x8e>
    38c8:	d4 c0       	rjmp	.+424    	; 0x3a72 <__vector_39+0x236>
    38ca:	d2 c0       	rjmp	.+420    	; 0x3a70 <__vector_39+0x234>
    38cc:	88 39       	cpi	r24, 0x98	; 152
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <__vector_39+0x96>
    38d0:	c3 c0       	rjmp	.+390    	; 0x3a58 <__vector_39+0x21c>
    38d2:	a8 f4       	brcc	.+42     	; 0x38fe <__vector_39+0xc2>
    38d4:	88 37       	cpi	r24, 0x78	; 120
    38d6:	09 f4       	brne	.+2      	; 0x38da <__vector_39+0x9e>
    38d8:	67 c0       	rjmp	.+206    	; 0x39a8 <__vector_39+0x16c>
    38da:	38 f4       	brcc	.+14     	; 0x38ea <__vector_39+0xae>
    38dc:	88 36       	cpi	r24, 0x68	; 104
    38de:	09 f4       	brne	.+2      	; 0x38e2 <__vector_39+0xa6>
    38e0:	63 c0       	rjmp	.+198    	; 0x39a8 <__vector_39+0x16c>
    38e2:	80 37       	cpi	r24, 0x70	; 112
    38e4:	09 f4       	brne	.+2      	; 0x38e8 <__vector_39+0xac>
    38e6:	60 c0       	rjmp	.+192    	; 0x39a8 <__vector_39+0x16c>
    38e8:	c4 c0       	rjmp	.+392    	; 0x3a72 <__vector_39+0x236>
    38ea:	88 38       	cpi	r24, 0x88	; 136
    38ec:	09 f4       	brne	.+2      	; 0x38f0 <__vector_39+0xb4>
    38ee:	b4 c0       	rjmp	.+360    	; 0x3a58 <__vector_39+0x21c>
    38f0:	80 39       	cpi	r24, 0x90	; 144
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <__vector_39+0xba>
    38f4:	5f c0       	rjmp	.+190    	; 0x39b4 <__vector_39+0x178>
    38f6:	80 38       	cpi	r24, 0x80	; 128
    38f8:	09 f0       	breq	.+2      	; 0x38fc <__vector_39+0xc0>
    38fa:	bb c0       	rjmp	.+374    	; 0x3a72 <__vector_39+0x236>
    38fc:	5b c0       	rjmp	.+182    	; 0x39b4 <__vector_39+0x178>
    38fe:	80 3b       	cpi	r24, 0xB0	; 176
    3900:	09 f4       	brne	.+2      	; 0x3904 <__vector_39+0xc8>
    3902:	82 c0       	rjmp	.+260    	; 0x3a08 <__vector_39+0x1cc>
    3904:	38 f4       	brcc	.+14     	; 0x3914 <__vector_39+0xd8>
    3906:	80 3a       	cpi	r24, 0xA0	; 160
    3908:	09 f4       	brne	.+2      	; 0x390c <__vector_39+0xd0>
    390a:	66 c0       	rjmp	.+204    	; 0x39d8 <__vector_39+0x19c>
    390c:	88 3a       	cpi	r24, 0xA8	; 168
    390e:	09 f4       	brne	.+2      	; 0x3912 <__vector_39+0xd6>
    3910:	7b c0       	rjmp	.+246    	; 0x3a08 <__vector_39+0x1cc>
    3912:	af c0       	rjmp	.+350    	; 0x3a72 <__vector_39+0x236>
    3914:	80 3c       	cpi	r24, 0xC0	; 192
    3916:	09 f4       	brne	.+2      	; 0x391a <__vector_39+0xde>
    3918:	a3 c0       	rjmp	.+326    	; 0x3a60 <__vector_39+0x224>
    391a:	88 3c       	cpi	r24, 0xC8	; 200
    391c:	09 f4       	brne	.+2      	; 0x3920 <__vector_39+0xe4>
    391e:	a0 c0       	rjmp	.+320    	; 0x3a60 <__vector_39+0x224>
    3920:	88 3b       	cpi	r24, 0xB8	; 184
    3922:	09 f4       	brne	.+2      	; 0x3926 <__vector_39+0xea>
    3924:	86 c0       	rjmp	.+268    	; 0x3a32 <__vector_39+0x1f6>
    3926:	a5 c0       	rjmp	.+330    	; 0x3a72 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3928:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <twi_slarw>
    392c:	10 c0       	rjmp	.+32     	; 0x394e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    392e:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <twi_masterBufferIndex>
    3932:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <twi_masterBufferLength>
    3936:	98 17       	cp	r25, r24
    3938:	70 f5       	brcc	.+92     	; 0x3996 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    393a:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <twi_masterBufferIndex>
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	8e 0f       	add	r24, r30
    3942:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <twi_masterBufferIndex>
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	e2 52       	subi	r30, 0x22	; 34
    394a:	fa 4f       	sbci	r31, 0xFA	; 250
    394c:	80 81       	ld	r24, Z
    394e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3952:	85 ec       	ldi	r24, 0xC5	; 197
    3954:	82 c0       	rjmp	.+260    	; 0x3a5a <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3956:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <twi_error>
    395a:	8a c0       	rjmp	.+276    	; 0x3a70 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    395c:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <twi_masterBufferIndex>
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	8e 0f       	add	r24, r30
    3964:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <twi_masterBufferIndex>
    3968:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	e2 52       	subi	r30, 0x22	; 34
    3970:	fa 4f       	sbci	r31, 0xFA	; 250
    3972:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3974:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <twi_masterBufferIndex>
    3978:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <twi_masterBufferLength>
    397c:	6a c0       	rjmp	.+212    	; 0x3a52 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    397e:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <twi_masterBufferIndex>
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	8e 0f       	add	r24, r30
    3986:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <twi_masterBufferIndex>
    398a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	e2 52       	subi	r30, 0x22	; 34
    3992:	fa 4f       	sbci	r31, 0xFA	; 250
    3994:	80 83       	st	Z, r24
	if (twi_sendStop)
    3996:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <twi_sendStop>
    399a:	81 11       	cpse	r24, r1
    399c:	69 c0       	rjmp	.+210    	; 0x3a70 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    39a4:	84 ea       	ldi	r24, 0xA4	; 164
    39a6:	5d c0       	rjmp	.+186    	; 0x3a62 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    39a8:	83 e0       	ldi	r24, 0x03	; 3
    39aa:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    39ae:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <twi_rxBufferIndex>
    39b2:	cf cf       	rjmp	.-98     	; 0x3952 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    39b4:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <twi_rxBufferIndex>
    39b8:	80 32       	cpi	r24, 0x20	; 32
    39ba:	08 f0       	brcs	.+2      	; 0x39be <__vector_39+0x182>
    39bc:	4d c0       	rjmp	.+154    	; 0x3a58 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    39be:	e0 91 99 05 	lds	r30, 0x0599	; 0x800599 <twi_rxBufferIndex>
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	8e 0f       	add	r24, r30
    39c6:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <twi_rxBufferIndex>
    39ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	e6 56       	subi	r30, 0x66	; 102
    39d2:	fa 4f       	sbci	r31, 0xFA	; 250
    39d4:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    39d6:	bd cf       	rjmp	.-134    	; 0x3952 <__vector_39+0x116>
    39d8:	2b df       	rcall	.-426    	; 0x3830 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    39da:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <twi_rxBufferIndex>
    39de:	80 32       	cpi	r24, 0x20	; 32
    39e0:	30 f4       	brcc	.+12     	; 0x39ee <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    39e2:	e0 91 99 05 	lds	r30, 0x0599	; 0x800599 <twi_rxBufferIndex>
    39e6:	f0 e0       	ldi	r31, 0x00	; 0
    39e8:	e6 56       	subi	r30, 0x66	; 102
    39ea:	fa 4f       	sbci	r31, 0xFA	; 250
    39ec:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    39ee:	60 91 99 05 	lds	r22, 0x0599	; 0x800599 <twi_rxBufferIndex>
    39f2:	70 e0       	ldi	r23, 0x00	; 0
    39f4:	e0 91 fe 05 	lds	r30, 0x05FE	; 0x8005fe <twi_onSlaveReceive>
    39f8:	f0 91 ff 05 	lds	r31, 0x05FF	; 0x8005ff <twi_onSlaveReceive+0x1>
    39fc:	8a e9       	ldi	r24, 0x9A	; 154
    39fe:	95 e0       	ldi	r25, 0x05	; 5
    3a00:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3a02:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <twi_rxBufferIndex>
      break;
    3a06:	35 c0       	rjmp	.+106    	; 0x3a72 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3a08:	84 e0       	ldi	r24, 0x04	; 4
    3a0a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3a0e:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3a12:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3a16:	e0 91 00 06 	lds	r30, 0x0600	; 0x800600 <twi_onSlaveTransmit>
    3a1a:	f0 91 01 06 	lds	r31, 0x0601	; 0x800601 <twi_onSlaveTransmit+0x1>
    3a1e:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3a20:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <twi_txBufferLength>
    3a24:	81 11       	cpse	r24, r1
    3a26:	05 c0       	rjmp	.+10     	; 0x3a32 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3a2e:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3a32:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <twi_txBufferIndex>
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	8e 0f       	add	r24, r30
    3a3a:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <twi_txBufferIndex>
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	e4 54       	subi	r30, 0x44	; 68
    3a42:	fa 4f       	sbci	r31, 0xFA	; 250
    3a44:	80 81       	ld	r24, Z
    3a46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3a4a:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <twi_txBufferIndex>
    3a4e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <twi_txBufferLength>
    3a52:	98 17       	cp	r25, r24
    3a54:	08 f4       	brcc	.+2      	; 0x3a58 <__vector_39+0x21c>
    3a56:	7d cf       	rjmp	.-262    	; 0x3952 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3a58:	85 e8       	ldi	r24, 0x85	; 133
    3a5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a5e:	09 c0       	rjmp	.+18     	; 0x3a72 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3a60:	85 ec       	ldi	r24, 0xC5	; 197
    3a62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3a66:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <twi_state>
      break;
    3a6a:	03 c0       	rjmp	.+6      	; 0x3a72 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3a6c:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <twi_error>
      twi_stop();
    3a70:	d5 de       	rcall	.-598    	; 0x381c <twi_stop>
      break;
  }
}
    3a72:	ff 91       	pop	r31
    3a74:	ef 91       	pop	r30
    3a76:	bf 91       	pop	r27
    3a78:	af 91       	pop	r26
    3a7a:	9f 91       	pop	r25
    3a7c:	8f 91       	pop	r24
    3a7e:	7f 91       	pop	r23
    3a80:	6f 91       	pop	r22
    3a82:	5f 91       	pop	r21
    3a84:	4f 91       	pop	r20
    3a86:	3f 91       	pop	r19
    3a88:	2f 91       	pop	r18
    3a8a:	0f 90       	pop	r0
    3a8c:	0b be       	out	0x3b, r0	; 59
    3a8e:	0f 90       	pop	r0
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	0f 90       	pop	r0
    3a94:	1f 90       	pop	r1
    3a96:	18 95       	reti

00003a98 <__udivmodsi4>:
    3a98:	a1 e2       	ldi	r26, 0x21	; 33
    3a9a:	1a 2e       	mov	r1, r26
    3a9c:	aa 1b       	sub	r26, r26
    3a9e:	bb 1b       	sub	r27, r27
    3aa0:	fd 01       	movw	r30, r26
    3aa2:	0d c0       	rjmp	.+26     	; 0x3abe <__udivmodsi4_ep>

00003aa4 <__udivmodsi4_loop>:
    3aa4:	aa 1f       	adc	r26, r26
    3aa6:	bb 1f       	adc	r27, r27
    3aa8:	ee 1f       	adc	r30, r30
    3aaa:	ff 1f       	adc	r31, r31
    3aac:	a2 17       	cp	r26, r18
    3aae:	b3 07       	cpc	r27, r19
    3ab0:	e4 07       	cpc	r30, r20
    3ab2:	f5 07       	cpc	r31, r21
    3ab4:	20 f0       	brcs	.+8      	; 0x3abe <__udivmodsi4_ep>
    3ab6:	a2 1b       	sub	r26, r18
    3ab8:	b3 0b       	sbc	r27, r19
    3aba:	e4 0b       	sbc	r30, r20
    3abc:	f5 0b       	sbc	r31, r21

00003abe <__udivmodsi4_ep>:
    3abe:	66 1f       	adc	r22, r22
    3ac0:	77 1f       	adc	r23, r23
    3ac2:	88 1f       	adc	r24, r24
    3ac4:	99 1f       	adc	r25, r25
    3ac6:	1a 94       	dec	r1
    3ac8:	69 f7       	brne	.-38     	; 0x3aa4 <__udivmodsi4_loop>
    3aca:	60 95       	com	r22
    3acc:	70 95       	com	r23
    3ace:	80 95       	com	r24
    3ad0:	90 95       	com	r25
    3ad2:	9b 01       	movw	r18, r22
    3ad4:	ac 01       	movw	r20, r24
    3ad6:	bd 01       	movw	r22, r26
    3ad8:	cf 01       	movw	r24, r30
    3ada:	08 95       	ret

00003adc <__tablejump2__>:
    3adc:	ee 0f       	add	r30, r30
    3ade:	ff 1f       	adc	r31, r31
    3ae0:	88 1f       	adc	r24, r24
    3ae2:	8b bf       	out	0x3b, r24	; 59
    3ae4:	07 90       	elpm	r0, Z+
    3ae6:	f6 91       	elpm	r31, Z
    3ae8:	e0 2d       	mov	r30, r0
    3aea:	19 94       	eijmp

00003aec <malloc>:
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	cf 93       	push	r28
    3af2:	df 93       	push	r29
    3af4:	82 30       	cpi	r24, 0x02	; 2
    3af6:	91 05       	cpc	r25, r1
    3af8:	10 f4       	brcc	.+4      	; 0x3afe <malloc+0x12>
    3afa:	82 e0       	ldi	r24, 0x02	; 2
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <__flp>
    3b02:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <__flp+0x1>
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	a0 e0       	ldi	r26, 0x00	; 0
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	30 97       	sbiw	r30, 0x00	; 0
    3b10:	19 f1       	breq	.+70     	; 0x3b58 <malloc+0x6c>
    3b12:	40 81       	ld	r20, Z
    3b14:	51 81       	ldd	r21, Z+1	; 0x01
    3b16:	02 81       	ldd	r16, Z+2	; 0x02
    3b18:	13 81       	ldd	r17, Z+3	; 0x03
    3b1a:	48 17       	cp	r20, r24
    3b1c:	59 07       	cpc	r21, r25
    3b1e:	c8 f0       	brcs	.+50     	; 0x3b52 <malloc+0x66>
    3b20:	84 17       	cp	r24, r20
    3b22:	95 07       	cpc	r25, r21
    3b24:	69 f4       	brne	.+26     	; 0x3b40 <malloc+0x54>
    3b26:	10 97       	sbiw	r26, 0x00	; 0
    3b28:	31 f0       	breq	.+12     	; 0x3b36 <malloc+0x4a>
    3b2a:	12 96       	adiw	r26, 0x02	; 2
    3b2c:	0c 93       	st	X, r16
    3b2e:	12 97       	sbiw	r26, 0x02	; 2
    3b30:	13 96       	adiw	r26, 0x03	; 3
    3b32:	1c 93       	st	X, r17
    3b34:	27 c0       	rjmp	.+78     	; 0x3b84 <malloc+0x98>
    3b36:	00 93 08 06 	sts	0x0608, r16	; 0x800608 <__flp>
    3b3a:	10 93 09 06 	sts	0x0609, r17	; 0x800609 <__flp+0x1>
    3b3e:	22 c0       	rjmp	.+68     	; 0x3b84 <malloc+0x98>
    3b40:	21 15       	cp	r18, r1
    3b42:	31 05       	cpc	r19, r1
    3b44:	19 f0       	breq	.+6      	; 0x3b4c <malloc+0x60>
    3b46:	42 17       	cp	r20, r18
    3b48:	53 07       	cpc	r21, r19
    3b4a:	18 f4       	brcc	.+6      	; 0x3b52 <malloc+0x66>
    3b4c:	9a 01       	movw	r18, r20
    3b4e:	bd 01       	movw	r22, r26
    3b50:	ef 01       	movw	r28, r30
    3b52:	df 01       	movw	r26, r30
    3b54:	f8 01       	movw	r30, r16
    3b56:	db cf       	rjmp	.-74     	; 0x3b0e <malloc+0x22>
    3b58:	21 15       	cp	r18, r1
    3b5a:	31 05       	cpc	r19, r1
    3b5c:	f9 f0       	breq	.+62     	; 0x3b9c <malloc+0xb0>
    3b5e:	28 1b       	sub	r18, r24
    3b60:	39 0b       	sbc	r19, r25
    3b62:	24 30       	cpi	r18, 0x04	; 4
    3b64:	31 05       	cpc	r19, r1
    3b66:	80 f4       	brcc	.+32     	; 0x3b88 <malloc+0x9c>
    3b68:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6c:	61 15       	cp	r22, r1
    3b6e:	71 05       	cpc	r23, r1
    3b70:	21 f0       	breq	.+8      	; 0x3b7a <malloc+0x8e>
    3b72:	fb 01       	movw	r30, r22
    3b74:	93 83       	std	Z+3, r25	; 0x03
    3b76:	82 83       	std	Z+2, r24	; 0x02
    3b78:	04 c0       	rjmp	.+8      	; 0x3b82 <malloc+0x96>
    3b7a:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <__flp+0x1>
    3b7e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__flp>
    3b82:	fe 01       	movw	r30, r28
    3b84:	32 96       	adiw	r30, 0x02	; 2
    3b86:	44 c0       	rjmp	.+136    	; 0x3c10 <malloc+0x124>
    3b88:	fe 01       	movw	r30, r28
    3b8a:	e2 0f       	add	r30, r18
    3b8c:	f3 1f       	adc	r31, r19
    3b8e:	81 93       	st	Z+, r24
    3b90:	91 93       	st	Z+, r25
    3b92:	22 50       	subi	r18, 0x02	; 2
    3b94:	31 09       	sbc	r19, r1
    3b96:	39 83       	std	Y+1, r19	; 0x01
    3b98:	28 83       	st	Y, r18
    3b9a:	3a c0       	rjmp	.+116    	; 0x3c10 <malloc+0x124>
    3b9c:	20 91 06 06 	lds	r18, 0x0606	; 0x800606 <__brkval>
    3ba0:	30 91 07 06 	lds	r19, 0x0607	; 0x800607 <__brkval+0x1>
    3ba4:	23 2b       	or	r18, r19
    3ba6:	41 f4       	brne	.+16     	; 0x3bb8 <malloc+0xcc>
    3ba8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3bac:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3bb0:	30 93 07 06 	sts	0x0607, r19	; 0x800607 <__brkval+0x1>
    3bb4:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <__brkval>
    3bb8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3bbc:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3bc0:	21 15       	cp	r18, r1
    3bc2:	31 05       	cpc	r19, r1
    3bc4:	41 f4       	brne	.+16     	; 0x3bd6 <malloc+0xea>
    3bc6:	2d b7       	in	r18, 0x3d	; 61
    3bc8:	3e b7       	in	r19, 0x3e	; 62
    3bca:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3bce:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3bd2:	24 1b       	sub	r18, r20
    3bd4:	35 0b       	sbc	r19, r21
    3bd6:	e0 91 06 06 	lds	r30, 0x0606	; 0x800606 <__brkval>
    3bda:	f0 91 07 06 	lds	r31, 0x0607	; 0x800607 <__brkval+0x1>
    3bde:	e2 17       	cp	r30, r18
    3be0:	f3 07       	cpc	r31, r19
    3be2:	a0 f4       	brcc	.+40     	; 0x3c0c <malloc+0x120>
    3be4:	2e 1b       	sub	r18, r30
    3be6:	3f 0b       	sbc	r19, r31
    3be8:	28 17       	cp	r18, r24
    3bea:	39 07       	cpc	r19, r25
    3bec:	78 f0       	brcs	.+30     	; 0x3c0c <malloc+0x120>
    3bee:	ac 01       	movw	r20, r24
    3bf0:	4e 5f       	subi	r20, 0xFE	; 254
    3bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bf4:	24 17       	cp	r18, r20
    3bf6:	35 07       	cpc	r19, r21
    3bf8:	48 f0       	brcs	.+18     	; 0x3c0c <malloc+0x120>
    3bfa:	4e 0f       	add	r20, r30
    3bfc:	5f 1f       	adc	r21, r31
    3bfe:	50 93 07 06 	sts	0x0607, r21	; 0x800607 <__brkval+0x1>
    3c02:	40 93 06 06 	sts	0x0606, r20	; 0x800606 <__brkval>
    3c06:	81 93       	st	Z+, r24
    3c08:	91 93       	st	Z+, r25
    3c0a:	02 c0       	rjmp	.+4      	; 0x3c10 <malloc+0x124>
    3c0c:	e0 e0       	ldi	r30, 0x00	; 0
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	cf 01       	movw	r24, r30
    3c12:	df 91       	pop	r29
    3c14:	cf 91       	pop	r28
    3c16:	1f 91       	pop	r17
    3c18:	0f 91       	pop	r16
    3c1a:	08 95       	ret

00003c1c <free>:
    3c1c:	cf 93       	push	r28
    3c1e:	df 93       	push	r29
    3c20:	00 97       	sbiw	r24, 0x00	; 0
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <free+0xa>
    3c24:	81 c0       	rjmp	.+258    	; 0x3d28 <free+0x10c>
    3c26:	fc 01       	movw	r30, r24
    3c28:	32 97       	sbiw	r30, 0x02	; 2
    3c2a:	13 82       	std	Z+3, r1	; 0x03
    3c2c:	12 82       	std	Z+2, r1	; 0x02
    3c2e:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <__flp>
    3c32:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <__flp+0x1>
    3c36:	10 97       	sbiw	r26, 0x00	; 0
    3c38:	81 f4       	brne	.+32     	; 0x3c5a <free+0x3e>
    3c3a:	20 81       	ld	r18, Z
    3c3c:	31 81       	ldd	r19, Z+1	; 0x01
    3c3e:	82 0f       	add	r24, r18
    3c40:	93 1f       	adc	r25, r19
    3c42:	20 91 06 06 	lds	r18, 0x0606	; 0x800606 <__brkval>
    3c46:	30 91 07 06 	lds	r19, 0x0607	; 0x800607 <__brkval+0x1>
    3c4a:	28 17       	cp	r18, r24
    3c4c:	39 07       	cpc	r19, r25
    3c4e:	51 f5       	brne	.+84     	; 0x3ca4 <free+0x88>
    3c50:	f0 93 07 06 	sts	0x0607, r31	; 0x800607 <__brkval+0x1>
    3c54:	e0 93 06 06 	sts	0x0606, r30	; 0x800606 <__brkval>
    3c58:	67 c0       	rjmp	.+206    	; 0x3d28 <free+0x10c>
    3c5a:	ed 01       	movw	r28, r26
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	ce 17       	cp	r28, r30
    3c62:	df 07       	cpc	r29, r31
    3c64:	40 f4       	brcc	.+16     	; 0x3c76 <free+0x5a>
    3c66:	4a 81       	ldd	r20, Y+2	; 0x02
    3c68:	5b 81       	ldd	r21, Y+3	; 0x03
    3c6a:	9e 01       	movw	r18, r28
    3c6c:	41 15       	cp	r20, r1
    3c6e:	51 05       	cpc	r21, r1
    3c70:	f1 f0       	breq	.+60     	; 0x3cae <free+0x92>
    3c72:	ea 01       	movw	r28, r20
    3c74:	f5 cf       	rjmp	.-22     	; 0x3c60 <free+0x44>
    3c76:	d3 83       	std	Z+3, r29	; 0x03
    3c78:	c2 83       	std	Z+2, r28	; 0x02
    3c7a:	40 81       	ld	r20, Z
    3c7c:	51 81       	ldd	r21, Z+1	; 0x01
    3c7e:	84 0f       	add	r24, r20
    3c80:	95 1f       	adc	r25, r21
    3c82:	c8 17       	cp	r28, r24
    3c84:	d9 07       	cpc	r29, r25
    3c86:	59 f4       	brne	.+22     	; 0x3c9e <free+0x82>
    3c88:	88 81       	ld	r24, Y
    3c8a:	99 81       	ldd	r25, Y+1	; 0x01
    3c8c:	84 0f       	add	r24, r20
    3c8e:	95 1f       	adc	r25, r21
    3c90:	02 96       	adiw	r24, 0x02	; 2
    3c92:	91 83       	std	Z+1, r25	; 0x01
    3c94:	80 83       	st	Z, r24
    3c96:	8a 81       	ldd	r24, Y+2	; 0x02
    3c98:	9b 81       	ldd	r25, Y+3	; 0x03
    3c9a:	93 83       	std	Z+3, r25	; 0x03
    3c9c:	82 83       	std	Z+2, r24	; 0x02
    3c9e:	21 15       	cp	r18, r1
    3ca0:	31 05       	cpc	r19, r1
    3ca2:	29 f4       	brne	.+10     	; 0x3cae <free+0x92>
    3ca4:	f0 93 09 06 	sts	0x0609, r31	; 0x800609 <__flp+0x1>
    3ca8:	e0 93 08 06 	sts	0x0608, r30	; 0x800608 <__flp>
    3cac:	3d c0       	rjmp	.+122    	; 0x3d28 <free+0x10c>
    3cae:	e9 01       	movw	r28, r18
    3cb0:	fb 83       	std	Y+3, r31	; 0x03
    3cb2:	ea 83       	std	Y+2, r30	; 0x02
    3cb4:	49 91       	ld	r20, Y+
    3cb6:	59 91       	ld	r21, Y+
    3cb8:	c4 0f       	add	r28, r20
    3cba:	d5 1f       	adc	r29, r21
    3cbc:	ec 17       	cp	r30, r28
    3cbe:	fd 07       	cpc	r31, r29
    3cc0:	61 f4       	brne	.+24     	; 0x3cda <free+0xbe>
    3cc2:	80 81       	ld	r24, Z
    3cc4:	91 81       	ldd	r25, Z+1	; 0x01
    3cc6:	84 0f       	add	r24, r20
    3cc8:	95 1f       	adc	r25, r21
    3cca:	02 96       	adiw	r24, 0x02	; 2
    3ccc:	e9 01       	movw	r28, r18
    3cce:	99 83       	std	Y+1, r25	; 0x01
    3cd0:	88 83       	st	Y, r24
    3cd2:	82 81       	ldd	r24, Z+2	; 0x02
    3cd4:	93 81       	ldd	r25, Z+3	; 0x03
    3cd6:	9b 83       	std	Y+3, r25	; 0x03
    3cd8:	8a 83       	std	Y+2, r24	; 0x02
    3cda:	e0 e0       	ldi	r30, 0x00	; 0
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	12 96       	adiw	r26, 0x02	; 2
    3ce0:	8d 91       	ld	r24, X+
    3ce2:	9c 91       	ld	r25, X
    3ce4:	13 97       	sbiw	r26, 0x03	; 3
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	19 f0       	breq	.+6      	; 0x3cf0 <free+0xd4>
    3cea:	fd 01       	movw	r30, r26
    3cec:	dc 01       	movw	r26, r24
    3cee:	f7 cf       	rjmp	.-18     	; 0x3cde <free+0xc2>
    3cf0:	8d 91       	ld	r24, X+
    3cf2:	9c 91       	ld	r25, X
    3cf4:	11 97       	sbiw	r26, 0x01	; 1
    3cf6:	9d 01       	movw	r18, r26
    3cf8:	2e 5f       	subi	r18, 0xFE	; 254
    3cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfc:	82 0f       	add	r24, r18
    3cfe:	93 1f       	adc	r25, r19
    3d00:	20 91 06 06 	lds	r18, 0x0606	; 0x800606 <__brkval>
    3d04:	30 91 07 06 	lds	r19, 0x0607	; 0x800607 <__brkval+0x1>
    3d08:	28 17       	cp	r18, r24
    3d0a:	39 07       	cpc	r19, r25
    3d0c:	69 f4       	brne	.+26     	; 0x3d28 <free+0x10c>
    3d0e:	30 97       	sbiw	r30, 0x00	; 0
    3d10:	29 f4       	brne	.+10     	; 0x3d1c <free+0x100>
    3d12:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <__flp+0x1>
    3d16:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__flp>
    3d1a:	02 c0       	rjmp	.+4      	; 0x3d20 <free+0x104>
    3d1c:	13 82       	std	Z+3, r1	; 0x03
    3d1e:	12 82       	std	Z+2, r1	; 0x02
    3d20:	b0 93 07 06 	sts	0x0607, r27	; 0x800607 <__brkval+0x1>
    3d24:	a0 93 06 06 	sts	0x0606, r26	; 0x800606 <__brkval>
    3d28:	df 91       	pop	r29
    3d2a:	cf 91       	pop	r28
    3d2c:	08 95       	ret

00003d2e <realloc>:
    3d2e:	6f 92       	push	r6
    3d30:	7f 92       	push	r7
    3d32:	8f 92       	push	r8
    3d34:	9f 92       	push	r9
    3d36:	af 92       	push	r10
    3d38:	bf 92       	push	r11
    3d3a:	cf 92       	push	r12
    3d3c:	df 92       	push	r13
    3d3e:	ef 92       	push	r14
    3d40:	ff 92       	push	r15
    3d42:	0f 93       	push	r16
    3d44:	1f 93       	push	r17
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	81 f4       	brne	.+32     	; 0x3d6e <realloc+0x40>
    3d4e:	cb 01       	movw	r24, r22
    3d50:	df 91       	pop	r29
    3d52:	cf 91       	pop	r28
    3d54:	1f 91       	pop	r17
    3d56:	0f 91       	pop	r16
    3d58:	ff 90       	pop	r15
    3d5a:	ef 90       	pop	r14
    3d5c:	df 90       	pop	r13
    3d5e:	cf 90       	pop	r12
    3d60:	bf 90       	pop	r11
    3d62:	af 90       	pop	r10
    3d64:	9f 90       	pop	r9
    3d66:	8f 90       	pop	r8
    3d68:	7f 90       	pop	r7
    3d6a:	6f 90       	pop	r6
    3d6c:	bf ce       	rjmp	.-642    	; 0x3aec <malloc>
    3d6e:	fc 01       	movw	r30, r24
    3d70:	e6 0f       	add	r30, r22
    3d72:	f7 1f       	adc	r31, r23
    3d74:	9c 01       	movw	r18, r24
    3d76:	22 50       	subi	r18, 0x02	; 2
    3d78:	31 09       	sbc	r19, r1
    3d7a:	e2 17       	cp	r30, r18
    3d7c:	f3 07       	cpc	r31, r19
    3d7e:	08 f4       	brcc	.+2      	; 0x3d82 <realloc+0x54>
    3d80:	a5 c0       	rjmp	.+330    	; 0x3ecc <realloc+0x19e>
    3d82:	ec 01       	movw	r28, r24
    3d84:	d9 01       	movw	r26, r18
    3d86:	0d 91       	ld	r16, X+
    3d88:	1c 91       	ld	r17, X
    3d8a:	11 97       	sbiw	r26, 0x01	; 1
    3d8c:	06 17       	cp	r16, r22
    3d8e:	17 07       	cpc	r17, r23
    3d90:	a8 f0       	brcs	.+42     	; 0x3dbc <realloc+0x8e>
    3d92:	05 30       	cpi	r16, 0x05	; 5
    3d94:	11 05       	cpc	r17, r1
    3d96:	08 f4       	brcc	.+2      	; 0x3d9a <realloc+0x6c>
    3d98:	97 c0       	rjmp	.+302    	; 0x3ec8 <realloc+0x19a>
    3d9a:	c8 01       	movw	r24, r16
    3d9c:	04 97       	sbiw	r24, 0x04	; 4
    3d9e:	86 17       	cp	r24, r22
    3da0:	97 07       	cpc	r25, r23
    3da2:	08 f4       	brcc	.+2      	; 0x3da6 <realloc+0x78>
    3da4:	91 c0       	rjmp	.+290    	; 0x3ec8 <realloc+0x19a>
    3da6:	02 50       	subi	r16, 0x02	; 2
    3da8:	11 09       	sbc	r17, r1
    3daa:	06 1b       	sub	r16, r22
    3dac:	17 0b       	sbc	r17, r23
    3dae:	01 93       	st	Z+, r16
    3db0:	11 93       	st	Z+, r17
    3db2:	6d 93       	st	X+, r22
    3db4:	7c 93       	st	X, r23
    3db6:	cf 01       	movw	r24, r30
    3db8:	31 df       	rcall	.-414    	; 0x3c1c <free>
    3dba:	86 c0       	rjmp	.+268    	; 0x3ec8 <realloc+0x19a>
    3dbc:	5b 01       	movw	r10, r22
    3dbe:	a0 1a       	sub	r10, r16
    3dc0:	b1 0a       	sbc	r11, r17
    3dc2:	4c 01       	movw	r8, r24
    3dc4:	80 0e       	add	r8, r16
    3dc6:	91 1e       	adc	r9, r17
    3dc8:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <__flp>
    3dcc:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <__flp+0x1>
    3dd0:	61 2c       	mov	r6, r1
    3dd2:	71 2c       	mov	r7, r1
    3dd4:	e1 2c       	mov	r14, r1
    3dd6:	f1 2c       	mov	r15, r1
    3dd8:	10 97       	sbiw	r26, 0x00	; 0
    3dda:	09 f4       	brne	.+2      	; 0x3dde <realloc+0xb0>
    3ddc:	46 c0       	rjmp	.+140    	; 0x3e6a <realloc+0x13c>
    3dde:	8d 91       	ld	r24, X+
    3de0:	9c 91       	ld	r25, X
    3de2:	11 97       	sbiw	r26, 0x01	; 1
    3de4:	a8 15       	cp	r26, r8
    3de6:	b9 05       	cpc	r27, r9
    3de8:	b1 f5       	brne	.+108    	; 0x3e56 <realloc+0x128>
    3dea:	6c 01       	movw	r12, r24
    3dec:	42 e0       	ldi	r20, 0x02	; 2
    3dee:	c4 0e       	add	r12, r20
    3df0:	d1 1c       	adc	r13, r1
    3df2:	ca 14       	cp	r12, r10
    3df4:	db 04       	cpc	r13, r11
    3df6:	78 f1       	brcs	.+94     	; 0x3e56 <realloc+0x128>
    3df8:	4c 01       	movw	r8, r24
    3dfa:	8a 18       	sub	r8, r10
    3dfc:	9b 08       	sbc	r9, r11
    3dfe:	64 01       	movw	r12, r8
    3e00:	42 e0       	ldi	r20, 0x02	; 2
    3e02:	c4 0e       	add	r12, r20
    3e04:	d1 1c       	adc	r13, r1
    3e06:	12 96       	adiw	r26, 0x02	; 2
    3e08:	bc 90       	ld	r11, X
    3e0a:	12 97       	sbiw	r26, 0x02	; 2
    3e0c:	13 96       	adiw	r26, 0x03	; 3
    3e0e:	ac 91       	ld	r26, X
    3e10:	b5 e0       	ldi	r27, 0x05	; 5
    3e12:	cb 16       	cp	r12, r27
    3e14:	d1 04       	cpc	r13, r1
    3e16:	40 f0       	brcs	.+16     	; 0x3e28 <realloc+0xfa>
    3e18:	b2 82       	std	Z+2, r11	; 0x02
    3e1a:	a3 83       	std	Z+3, r26	; 0x03
    3e1c:	91 82       	std	Z+1, r9	; 0x01
    3e1e:	80 82       	st	Z, r8
    3e20:	d9 01       	movw	r26, r18
    3e22:	6d 93       	st	X+, r22
    3e24:	7c 93       	st	X, r23
    3e26:	09 c0       	rjmp	.+18     	; 0x3e3a <realloc+0x10c>
    3e28:	0e 5f       	subi	r16, 0xFE	; 254
    3e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e2c:	80 0f       	add	r24, r16
    3e2e:	91 1f       	adc	r25, r17
    3e30:	f9 01       	movw	r30, r18
    3e32:	91 83       	std	Z+1, r25	; 0x01
    3e34:	80 83       	st	Z, r24
    3e36:	eb 2d       	mov	r30, r11
    3e38:	fa 2f       	mov	r31, r26
    3e3a:	e1 14       	cp	r14, r1
    3e3c:	f1 04       	cpc	r15, r1
    3e3e:	31 f0       	breq	.+12     	; 0x3e4c <realloc+0x11e>
    3e40:	d7 01       	movw	r26, r14
    3e42:	13 96       	adiw	r26, 0x03	; 3
    3e44:	fc 93       	st	X, r31
    3e46:	ee 93       	st	-X, r30
    3e48:	12 97       	sbiw	r26, 0x02	; 2
    3e4a:	3e c0       	rjmp	.+124    	; 0x3ec8 <realloc+0x19a>
    3e4c:	f0 93 09 06 	sts	0x0609, r31	; 0x800609 <__flp+0x1>
    3e50:	e0 93 08 06 	sts	0x0608, r30	; 0x800608 <__flp>
    3e54:	39 c0       	rjmp	.+114    	; 0x3ec8 <realloc+0x19a>
    3e56:	68 16       	cp	r6, r24
    3e58:	79 06       	cpc	r7, r25
    3e5a:	08 f4       	brcc	.+2      	; 0x3e5e <realloc+0x130>
    3e5c:	3c 01       	movw	r6, r24
    3e5e:	7d 01       	movw	r14, r26
    3e60:	12 96       	adiw	r26, 0x02	; 2
    3e62:	0d 90       	ld	r0, X+
    3e64:	bc 91       	ld	r27, X
    3e66:	a0 2d       	mov	r26, r0
    3e68:	b7 cf       	rjmp	.-146    	; 0x3dd8 <realloc+0xaa>
    3e6a:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__brkval>
    3e6e:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <__brkval+0x1>
    3e72:	88 16       	cp	r8, r24
    3e74:	99 06       	cpc	r9, r25
    3e76:	e1 f4       	brne	.+56     	; 0x3eb0 <realloc+0x182>
    3e78:	66 16       	cp	r6, r22
    3e7a:	77 06       	cpc	r7, r23
    3e7c:	c8 f4       	brcc	.+50     	; 0x3eb0 <realloc+0x182>
    3e7e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3e82:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	41 f4       	brne	.+16     	; 0x3e9a <realloc+0x16c>
    3e8a:	8d b7       	in	r24, 0x3d	; 61
    3e8c:	9e b7       	in	r25, 0x3e	; 62
    3e8e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3e92:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3e96:	84 1b       	sub	r24, r20
    3e98:	95 0b       	sbc	r25, r21
    3e9a:	e8 17       	cp	r30, r24
    3e9c:	f9 07       	cpc	r31, r25
    3e9e:	b0 f4       	brcc	.+44     	; 0x3ecc <realloc+0x19e>
    3ea0:	f0 93 07 06 	sts	0x0607, r31	; 0x800607 <__brkval+0x1>
    3ea4:	e0 93 06 06 	sts	0x0606, r30	; 0x800606 <__brkval>
    3ea8:	f9 01       	movw	r30, r18
    3eaa:	71 83       	std	Z+1, r23	; 0x01
    3eac:	60 83       	st	Z, r22
    3eae:	0c c0       	rjmp	.+24     	; 0x3ec8 <realloc+0x19a>
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	1c de       	rcall	.-968    	; 0x3aec <malloc>
    3eb4:	7c 01       	movw	r14, r24
    3eb6:	00 97       	sbiw	r24, 0x00	; 0
    3eb8:	49 f0       	breq	.+18     	; 0x3ecc <realloc+0x19e>
    3eba:	a8 01       	movw	r20, r16
    3ebc:	be 01       	movw	r22, r28
    3ebe:	17 d0       	rcall	.+46     	; 0x3eee <memcpy>
    3ec0:	ce 01       	movw	r24, r28
    3ec2:	ac de       	rcall	.-680    	; 0x3c1c <free>
    3ec4:	c7 01       	movw	r24, r14
    3ec6:	04 c0       	rjmp	.+8      	; 0x3ed0 <realloc+0x1a2>
    3ec8:	ce 01       	movw	r24, r28
    3eca:	02 c0       	rjmp	.+4      	; 0x3ed0 <realloc+0x1a2>
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	1f 91       	pop	r17
    3ed6:	0f 91       	pop	r16
    3ed8:	ff 90       	pop	r15
    3eda:	ef 90       	pop	r14
    3edc:	df 90       	pop	r13
    3ede:	cf 90       	pop	r12
    3ee0:	bf 90       	pop	r11
    3ee2:	af 90       	pop	r10
    3ee4:	9f 90       	pop	r9
    3ee6:	8f 90       	pop	r8
    3ee8:	7f 90       	pop	r7
    3eea:	6f 90       	pop	r6
    3eec:	08 95       	ret

00003eee <memcpy>:
    3eee:	fb 01       	movw	r30, r22
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	02 c0       	rjmp	.+4      	; 0x3ef8 <memcpy+0xa>
    3ef4:	01 90       	ld	r0, Z+
    3ef6:	0d 92       	st	X+, r0
    3ef8:	41 50       	subi	r20, 0x01	; 1
    3efa:	50 40       	sbci	r21, 0x00	; 0
    3efc:	d8 f7       	brcc	.-10     	; 0x3ef4 <memcpy+0x6>
    3efe:	08 95       	ret

00003f00 <strcpy>:
    3f00:	fb 01       	movw	r30, r22
    3f02:	dc 01       	movw	r26, r24
    3f04:	01 90       	ld	r0, Z+
    3f06:	0d 92       	st	X+, r0
    3f08:	00 20       	and	r0, r0
    3f0a:	e1 f7       	brne	.-8      	; 0x3f04 <strcpy+0x4>
    3f0c:	08 95       	ret

00003f0e <sprintf>:
    3f0e:	0f 93       	push	r16
    3f10:	1f 93       	push	r17
    3f12:	cf 93       	push	r28
    3f14:	df 93       	push	r29
    3f16:	cd b7       	in	r28, 0x3d	; 61
    3f18:	de b7       	in	r29, 0x3e	; 62
    3f1a:	2e 97       	sbiw	r28, 0x0e	; 14
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	0e 89       	ldd	r16, Y+22	; 0x16
    3f28:	1f 89       	ldd	r17, Y+23	; 0x17
    3f2a:	86 e0       	ldi	r24, 0x06	; 6
    3f2c:	8c 83       	std	Y+4, r24	; 0x04
    3f2e:	1a 83       	std	Y+2, r17	; 0x02
    3f30:	09 83       	std	Y+1, r16	; 0x01
    3f32:	8f ef       	ldi	r24, 0xFF	; 255
    3f34:	9f e7       	ldi	r25, 0x7F	; 127
    3f36:	9e 83       	std	Y+6, r25	; 0x06
    3f38:	8d 83       	std	Y+5, r24	; 0x05
    3f3a:	ae 01       	movw	r20, r28
    3f3c:	46 5e       	subi	r20, 0xE6	; 230
    3f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f40:	68 8d       	ldd	r22, Y+24	; 0x18
    3f42:	79 8d       	ldd	r23, Y+25	; 0x19
    3f44:	ce 01       	movw	r24, r28
    3f46:	01 96       	adiw	r24, 0x01	; 1
    3f48:	10 d0       	rcall	.+32     	; 0x3f6a <vfprintf>
    3f4a:	ef 81       	ldd	r30, Y+7	; 0x07
    3f4c:	f8 85       	ldd	r31, Y+8	; 0x08
    3f4e:	e0 0f       	add	r30, r16
    3f50:	f1 1f       	adc	r31, r17
    3f52:	10 82       	st	Z, r1
    3f54:	2e 96       	adiw	r28, 0x0e	; 14
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	f8 94       	cli
    3f5a:	de bf       	out	0x3e, r29	; 62
    3f5c:	0f be       	out	0x3f, r0	; 63
    3f5e:	cd bf       	out	0x3d, r28	; 61
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	08 95       	ret

00003f6a <vfprintf>:
    3f6a:	2f 92       	push	r2
    3f6c:	3f 92       	push	r3
    3f6e:	4f 92       	push	r4
    3f70:	5f 92       	push	r5
    3f72:	6f 92       	push	r6
    3f74:	7f 92       	push	r7
    3f76:	8f 92       	push	r8
    3f78:	9f 92       	push	r9
    3f7a:	af 92       	push	r10
    3f7c:	bf 92       	push	r11
    3f7e:	cf 92       	push	r12
    3f80:	df 92       	push	r13
    3f82:	ef 92       	push	r14
    3f84:	ff 92       	push	r15
    3f86:	0f 93       	push	r16
    3f88:	1f 93       	push	r17
    3f8a:	cf 93       	push	r28
    3f8c:	df 93       	push	r29
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	2b 97       	sbiw	r28, 0x0b	; 11
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	6c 01       	movw	r12, r24
    3fa0:	7b 01       	movw	r14, r22
    3fa2:	8a 01       	movw	r16, r20
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	17 82       	std	Z+7, r1	; 0x07
    3fa8:	16 82       	std	Z+6, r1	; 0x06
    3faa:	83 81       	ldd	r24, Z+3	; 0x03
    3fac:	81 ff       	sbrs	r24, 1
    3fae:	bf c1       	rjmp	.+894    	; 0x432e <vfprintf+0x3c4>
    3fb0:	ce 01       	movw	r24, r28
    3fb2:	01 96       	adiw	r24, 0x01	; 1
    3fb4:	3c 01       	movw	r6, r24
    3fb6:	f6 01       	movw	r30, r12
    3fb8:	93 81       	ldd	r25, Z+3	; 0x03
    3fba:	f7 01       	movw	r30, r14
    3fbc:	93 fd       	sbrc	r25, 3
    3fbe:	85 91       	lpm	r24, Z+
    3fc0:	93 ff       	sbrs	r25, 3
    3fc2:	81 91       	ld	r24, Z+
    3fc4:	7f 01       	movw	r14, r30
    3fc6:	88 23       	and	r24, r24
    3fc8:	09 f4       	brne	.+2      	; 0x3fcc <vfprintf+0x62>
    3fca:	ad c1       	rjmp	.+858    	; 0x4326 <vfprintf+0x3bc>
    3fcc:	85 32       	cpi	r24, 0x25	; 37
    3fce:	39 f4       	brne	.+14     	; 0x3fde <vfprintf+0x74>
    3fd0:	93 fd       	sbrc	r25, 3
    3fd2:	85 91       	lpm	r24, Z+
    3fd4:	93 ff       	sbrs	r25, 3
    3fd6:	81 91       	ld	r24, Z+
    3fd8:	7f 01       	movw	r14, r30
    3fda:	85 32       	cpi	r24, 0x25	; 37
    3fdc:	21 f4       	brne	.+8      	; 0x3fe6 <vfprintf+0x7c>
    3fde:	b6 01       	movw	r22, r12
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	d6 d1       	rcall	.+940    	; 0x4390 <fputc>
    3fe4:	e8 cf       	rjmp	.-48     	; 0x3fb6 <vfprintf+0x4c>
    3fe6:	91 2c       	mov	r9, r1
    3fe8:	21 2c       	mov	r2, r1
    3fea:	31 2c       	mov	r3, r1
    3fec:	ff e1       	ldi	r31, 0x1F	; 31
    3fee:	f3 15       	cp	r31, r3
    3ff0:	d8 f0       	brcs	.+54     	; 0x4028 <vfprintf+0xbe>
    3ff2:	8b 32       	cpi	r24, 0x2B	; 43
    3ff4:	79 f0       	breq	.+30     	; 0x4014 <vfprintf+0xaa>
    3ff6:	38 f4       	brcc	.+14     	; 0x4006 <vfprintf+0x9c>
    3ff8:	80 32       	cpi	r24, 0x20	; 32
    3ffa:	79 f0       	breq	.+30     	; 0x401a <vfprintf+0xb0>
    3ffc:	83 32       	cpi	r24, 0x23	; 35
    3ffe:	a1 f4       	brne	.+40     	; 0x4028 <vfprintf+0xbe>
    4000:	23 2d       	mov	r18, r3
    4002:	20 61       	ori	r18, 0x10	; 16
    4004:	1d c0       	rjmp	.+58     	; 0x4040 <vfprintf+0xd6>
    4006:	8d 32       	cpi	r24, 0x2D	; 45
    4008:	61 f0       	breq	.+24     	; 0x4022 <vfprintf+0xb8>
    400a:	80 33       	cpi	r24, 0x30	; 48
    400c:	69 f4       	brne	.+26     	; 0x4028 <vfprintf+0xbe>
    400e:	23 2d       	mov	r18, r3
    4010:	21 60       	ori	r18, 0x01	; 1
    4012:	16 c0       	rjmp	.+44     	; 0x4040 <vfprintf+0xd6>
    4014:	83 2d       	mov	r24, r3
    4016:	82 60       	ori	r24, 0x02	; 2
    4018:	38 2e       	mov	r3, r24
    401a:	e3 2d       	mov	r30, r3
    401c:	e4 60       	ori	r30, 0x04	; 4
    401e:	3e 2e       	mov	r3, r30
    4020:	2a c0       	rjmp	.+84     	; 0x4076 <vfprintf+0x10c>
    4022:	f3 2d       	mov	r31, r3
    4024:	f8 60       	ori	r31, 0x08	; 8
    4026:	1d c0       	rjmp	.+58     	; 0x4062 <vfprintf+0xf8>
    4028:	37 fc       	sbrc	r3, 7
    402a:	2d c0       	rjmp	.+90     	; 0x4086 <vfprintf+0x11c>
    402c:	20 ed       	ldi	r18, 0xD0	; 208
    402e:	28 0f       	add	r18, r24
    4030:	2a 30       	cpi	r18, 0x0A	; 10
    4032:	40 f0       	brcs	.+16     	; 0x4044 <vfprintf+0xda>
    4034:	8e 32       	cpi	r24, 0x2E	; 46
    4036:	b9 f4       	brne	.+46     	; 0x4066 <vfprintf+0xfc>
    4038:	36 fc       	sbrc	r3, 6
    403a:	75 c1       	rjmp	.+746    	; 0x4326 <vfprintf+0x3bc>
    403c:	23 2d       	mov	r18, r3
    403e:	20 64       	ori	r18, 0x40	; 64
    4040:	32 2e       	mov	r3, r18
    4042:	19 c0       	rjmp	.+50     	; 0x4076 <vfprintf+0x10c>
    4044:	36 fe       	sbrs	r3, 6
    4046:	06 c0       	rjmp	.+12     	; 0x4054 <vfprintf+0xea>
    4048:	8a e0       	ldi	r24, 0x0A	; 10
    404a:	98 9e       	mul	r9, r24
    404c:	20 0d       	add	r18, r0
    404e:	11 24       	eor	r1, r1
    4050:	92 2e       	mov	r9, r18
    4052:	11 c0       	rjmp	.+34     	; 0x4076 <vfprintf+0x10c>
    4054:	ea e0       	ldi	r30, 0x0A	; 10
    4056:	2e 9e       	mul	r2, r30
    4058:	20 0d       	add	r18, r0
    405a:	11 24       	eor	r1, r1
    405c:	22 2e       	mov	r2, r18
    405e:	f3 2d       	mov	r31, r3
    4060:	f0 62       	ori	r31, 0x20	; 32
    4062:	3f 2e       	mov	r3, r31
    4064:	08 c0       	rjmp	.+16     	; 0x4076 <vfprintf+0x10c>
    4066:	8c 36       	cpi	r24, 0x6C	; 108
    4068:	21 f4       	brne	.+8      	; 0x4072 <vfprintf+0x108>
    406a:	83 2d       	mov	r24, r3
    406c:	80 68       	ori	r24, 0x80	; 128
    406e:	38 2e       	mov	r3, r24
    4070:	02 c0       	rjmp	.+4      	; 0x4076 <vfprintf+0x10c>
    4072:	88 36       	cpi	r24, 0x68	; 104
    4074:	41 f4       	brne	.+16     	; 0x4086 <vfprintf+0x11c>
    4076:	f7 01       	movw	r30, r14
    4078:	93 fd       	sbrc	r25, 3
    407a:	85 91       	lpm	r24, Z+
    407c:	93 ff       	sbrs	r25, 3
    407e:	81 91       	ld	r24, Z+
    4080:	7f 01       	movw	r14, r30
    4082:	81 11       	cpse	r24, r1
    4084:	b3 cf       	rjmp	.-154    	; 0x3fec <vfprintf+0x82>
    4086:	98 2f       	mov	r25, r24
    4088:	9f 7d       	andi	r25, 0xDF	; 223
    408a:	95 54       	subi	r25, 0x45	; 69
    408c:	93 30       	cpi	r25, 0x03	; 3
    408e:	28 f4       	brcc	.+10     	; 0x409a <vfprintf+0x130>
    4090:	0c 5f       	subi	r16, 0xFC	; 252
    4092:	1f 4f       	sbci	r17, 0xFF	; 255
    4094:	9f e3       	ldi	r25, 0x3F	; 63
    4096:	99 83       	std	Y+1, r25	; 0x01
    4098:	0d c0       	rjmp	.+26     	; 0x40b4 <vfprintf+0x14a>
    409a:	83 36       	cpi	r24, 0x63	; 99
    409c:	31 f0       	breq	.+12     	; 0x40aa <vfprintf+0x140>
    409e:	83 37       	cpi	r24, 0x73	; 115
    40a0:	71 f0       	breq	.+28     	; 0x40be <vfprintf+0x154>
    40a2:	83 35       	cpi	r24, 0x53	; 83
    40a4:	09 f0       	breq	.+2      	; 0x40a8 <vfprintf+0x13e>
    40a6:	55 c0       	rjmp	.+170    	; 0x4152 <vfprintf+0x1e8>
    40a8:	20 c0       	rjmp	.+64     	; 0x40ea <vfprintf+0x180>
    40aa:	f8 01       	movw	r30, r16
    40ac:	80 81       	ld	r24, Z
    40ae:	89 83       	std	Y+1, r24	; 0x01
    40b0:	0e 5f       	subi	r16, 0xFE	; 254
    40b2:	1f 4f       	sbci	r17, 0xFF	; 255
    40b4:	88 24       	eor	r8, r8
    40b6:	83 94       	inc	r8
    40b8:	91 2c       	mov	r9, r1
    40ba:	53 01       	movw	r10, r6
    40bc:	12 c0       	rjmp	.+36     	; 0x40e2 <vfprintf+0x178>
    40be:	28 01       	movw	r4, r16
    40c0:	f2 e0       	ldi	r31, 0x02	; 2
    40c2:	4f 0e       	add	r4, r31
    40c4:	51 1c       	adc	r5, r1
    40c6:	f8 01       	movw	r30, r16
    40c8:	a0 80       	ld	r10, Z
    40ca:	b1 80       	ldd	r11, Z+1	; 0x01
    40cc:	36 fe       	sbrs	r3, 6
    40ce:	03 c0       	rjmp	.+6      	; 0x40d6 <vfprintf+0x16c>
    40d0:	69 2d       	mov	r22, r9
    40d2:	70 e0       	ldi	r23, 0x00	; 0
    40d4:	02 c0       	rjmp	.+4      	; 0x40da <vfprintf+0x170>
    40d6:	6f ef       	ldi	r22, 0xFF	; 255
    40d8:	7f ef       	ldi	r23, 0xFF	; 255
    40da:	c5 01       	movw	r24, r10
    40dc:	4e d1       	rcall	.+668    	; 0x437a <strnlen>
    40de:	4c 01       	movw	r8, r24
    40e0:	82 01       	movw	r16, r4
    40e2:	f3 2d       	mov	r31, r3
    40e4:	ff 77       	andi	r31, 0x7F	; 127
    40e6:	3f 2e       	mov	r3, r31
    40e8:	15 c0       	rjmp	.+42     	; 0x4114 <vfprintf+0x1aa>
    40ea:	28 01       	movw	r4, r16
    40ec:	22 e0       	ldi	r18, 0x02	; 2
    40ee:	42 0e       	add	r4, r18
    40f0:	51 1c       	adc	r5, r1
    40f2:	f8 01       	movw	r30, r16
    40f4:	a0 80       	ld	r10, Z
    40f6:	b1 80       	ldd	r11, Z+1	; 0x01
    40f8:	36 fe       	sbrs	r3, 6
    40fa:	03 c0       	rjmp	.+6      	; 0x4102 <vfprintf+0x198>
    40fc:	69 2d       	mov	r22, r9
    40fe:	70 e0       	ldi	r23, 0x00	; 0
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <vfprintf+0x19c>
    4102:	6f ef       	ldi	r22, 0xFF	; 255
    4104:	7f ef       	ldi	r23, 0xFF	; 255
    4106:	c5 01       	movw	r24, r10
    4108:	2d d1       	rcall	.+602    	; 0x4364 <strnlen_P>
    410a:	4c 01       	movw	r8, r24
    410c:	f3 2d       	mov	r31, r3
    410e:	f0 68       	ori	r31, 0x80	; 128
    4110:	3f 2e       	mov	r3, r31
    4112:	82 01       	movw	r16, r4
    4114:	33 fc       	sbrc	r3, 3
    4116:	19 c0       	rjmp	.+50     	; 0x414a <vfprintf+0x1e0>
    4118:	82 2d       	mov	r24, r2
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	88 16       	cp	r8, r24
    411e:	99 06       	cpc	r9, r25
    4120:	a0 f4       	brcc	.+40     	; 0x414a <vfprintf+0x1e0>
    4122:	b6 01       	movw	r22, r12
    4124:	80 e2       	ldi	r24, 0x20	; 32
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	33 d1       	rcall	.+614    	; 0x4390 <fputc>
    412a:	2a 94       	dec	r2
    412c:	f5 cf       	rjmp	.-22     	; 0x4118 <vfprintf+0x1ae>
    412e:	f5 01       	movw	r30, r10
    4130:	37 fc       	sbrc	r3, 7
    4132:	85 91       	lpm	r24, Z+
    4134:	37 fe       	sbrs	r3, 7
    4136:	81 91       	ld	r24, Z+
    4138:	5f 01       	movw	r10, r30
    413a:	b6 01       	movw	r22, r12
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	28 d1       	rcall	.+592    	; 0x4390 <fputc>
    4140:	21 10       	cpse	r2, r1
    4142:	2a 94       	dec	r2
    4144:	21 e0       	ldi	r18, 0x01	; 1
    4146:	82 1a       	sub	r8, r18
    4148:	91 08       	sbc	r9, r1
    414a:	81 14       	cp	r8, r1
    414c:	91 04       	cpc	r9, r1
    414e:	79 f7       	brne	.-34     	; 0x412e <vfprintf+0x1c4>
    4150:	e1 c0       	rjmp	.+450    	; 0x4314 <vfprintf+0x3aa>
    4152:	84 36       	cpi	r24, 0x64	; 100
    4154:	11 f0       	breq	.+4      	; 0x415a <vfprintf+0x1f0>
    4156:	89 36       	cpi	r24, 0x69	; 105
    4158:	39 f5       	brne	.+78     	; 0x41a8 <vfprintf+0x23e>
    415a:	f8 01       	movw	r30, r16
    415c:	37 fe       	sbrs	r3, 7
    415e:	07 c0       	rjmp	.+14     	; 0x416e <vfprintf+0x204>
    4160:	60 81       	ld	r22, Z
    4162:	71 81       	ldd	r23, Z+1	; 0x01
    4164:	82 81       	ldd	r24, Z+2	; 0x02
    4166:	93 81       	ldd	r25, Z+3	; 0x03
    4168:	0c 5f       	subi	r16, 0xFC	; 252
    416a:	1f 4f       	sbci	r17, 0xFF	; 255
    416c:	08 c0       	rjmp	.+16     	; 0x417e <vfprintf+0x214>
    416e:	60 81       	ld	r22, Z
    4170:	71 81       	ldd	r23, Z+1	; 0x01
    4172:	07 2e       	mov	r0, r23
    4174:	00 0c       	add	r0, r0
    4176:	88 0b       	sbc	r24, r24
    4178:	99 0b       	sbc	r25, r25
    417a:	0e 5f       	subi	r16, 0xFE	; 254
    417c:	1f 4f       	sbci	r17, 0xFF	; 255
    417e:	f3 2d       	mov	r31, r3
    4180:	ff 76       	andi	r31, 0x6F	; 111
    4182:	3f 2e       	mov	r3, r31
    4184:	97 ff       	sbrs	r25, 7
    4186:	09 c0       	rjmp	.+18     	; 0x419a <vfprintf+0x230>
    4188:	90 95       	com	r25
    418a:	80 95       	com	r24
    418c:	70 95       	com	r23
    418e:	61 95       	neg	r22
    4190:	7f 4f       	sbci	r23, 0xFF	; 255
    4192:	8f 4f       	sbci	r24, 0xFF	; 255
    4194:	9f 4f       	sbci	r25, 0xFF	; 255
    4196:	f0 68       	ori	r31, 0x80	; 128
    4198:	3f 2e       	mov	r3, r31
    419a:	2a e0       	ldi	r18, 0x0A	; 10
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	a3 01       	movw	r20, r6
    41a0:	33 d1       	rcall	.+614    	; 0x4408 <__ultoa_invert>
    41a2:	88 2e       	mov	r8, r24
    41a4:	86 18       	sub	r8, r6
    41a6:	44 c0       	rjmp	.+136    	; 0x4230 <vfprintf+0x2c6>
    41a8:	85 37       	cpi	r24, 0x75	; 117
    41aa:	31 f4       	brne	.+12     	; 0x41b8 <vfprintf+0x24e>
    41ac:	23 2d       	mov	r18, r3
    41ae:	2f 7e       	andi	r18, 0xEF	; 239
    41b0:	b2 2e       	mov	r11, r18
    41b2:	2a e0       	ldi	r18, 0x0A	; 10
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	25 c0       	rjmp	.+74     	; 0x4202 <vfprintf+0x298>
    41b8:	93 2d       	mov	r25, r3
    41ba:	99 7f       	andi	r25, 0xF9	; 249
    41bc:	b9 2e       	mov	r11, r25
    41be:	8f 36       	cpi	r24, 0x6F	; 111
    41c0:	c1 f0       	breq	.+48     	; 0x41f2 <vfprintf+0x288>
    41c2:	18 f4       	brcc	.+6      	; 0x41ca <vfprintf+0x260>
    41c4:	88 35       	cpi	r24, 0x58	; 88
    41c6:	79 f0       	breq	.+30     	; 0x41e6 <vfprintf+0x27c>
    41c8:	ae c0       	rjmp	.+348    	; 0x4326 <vfprintf+0x3bc>
    41ca:	80 37       	cpi	r24, 0x70	; 112
    41cc:	19 f0       	breq	.+6      	; 0x41d4 <vfprintf+0x26a>
    41ce:	88 37       	cpi	r24, 0x78	; 120
    41d0:	21 f0       	breq	.+8      	; 0x41da <vfprintf+0x270>
    41d2:	a9 c0       	rjmp	.+338    	; 0x4326 <vfprintf+0x3bc>
    41d4:	e9 2f       	mov	r30, r25
    41d6:	e0 61       	ori	r30, 0x10	; 16
    41d8:	be 2e       	mov	r11, r30
    41da:	b4 fe       	sbrs	r11, 4
    41dc:	0d c0       	rjmp	.+26     	; 0x41f8 <vfprintf+0x28e>
    41de:	fb 2d       	mov	r31, r11
    41e0:	f4 60       	ori	r31, 0x04	; 4
    41e2:	bf 2e       	mov	r11, r31
    41e4:	09 c0       	rjmp	.+18     	; 0x41f8 <vfprintf+0x28e>
    41e6:	34 fe       	sbrs	r3, 4
    41e8:	0a c0       	rjmp	.+20     	; 0x41fe <vfprintf+0x294>
    41ea:	29 2f       	mov	r18, r25
    41ec:	26 60       	ori	r18, 0x06	; 6
    41ee:	b2 2e       	mov	r11, r18
    41f0:	06 c0       	rjmp	.+12     	; 0x41fe <vfprintf+0x294>
    41f2:	28 e0       	ldi	r18, 0x08	; 8
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	05 c0       	rjmp	.+10     	; 0x4202 <vfprintf+0x298>
    41f8:	20 e1       	ldi	r18, 0x10	; 16
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	02 c0       	rjmp	.+4      	; 0x4202 <vfprintf+0x298>
    41fe:	20 e1       	ldi	r18, 0x10	; 16
    4200:	32 e0       	ldi	r19, 0x02	; 2
    4202:	f8 01       	movw	r30, r16
    4204:	b7 fe       	sbrs	r11, 7
    4206:	07 c0       	rjmp	.+14     	; 0x4216 <vfprintf+0x2ac>
    4208:	60 81       	ld	r22, Z
    420a:	71 81       	ldd	r23, Z+1	; 0x01
    420c:	82 81       	ldd	r24, Z+2	; 0x02
    420e:	93 81       	ldd	r25, Z+3	; 0x03
    4210:	0c 5f       	subi	r16, 0xFC	; 252
    4212:	1f 4f       	sbci	r17, 0xFF	; 255
    4214:	06 c0       	rjmp	.+12     	; 0x4222 <vfprintf+0x2b8>
    4216:	60 81       	ld	r22, Z
    4218:	71 81       	ldd	r23, Z+1	; 0x01
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	0e 5f       	subi	r16, 0xFE	; 254
    4220:	1f 4f       	sbci	r17, 0xFF	; 255
    4222:	a3 01       	movw	r20, r6
    4224:	f1 d0       	rcall	.+482    	; 0x4408 <__ultoa_invert>
    4226:	88 2e       	mov	r8, r24
    4228:	86 18       	sub	r8, r6
    422a:	fb 2d       	mov	r31, r11
    422c:	ff 77       	andi	r31, 0x7F	; 127
    422e:	3f 2e       	mov	r3, r31
    4230:	36 fe       	sbrs	r3, 6
    4232:	0d c0       	rjmp	.+26     	; 0x424e <vfprintf+0x2e4>
    4234:	23 2d       	mov	r18, r3
    4236:	2e 7f       	andi	r18, 0xFE	; 254
    4238:	a2 2e       	mov	r10, r18
    423a:	89 14       	cp	r8, r9
    423c:	58 f4       	brcc	.+22     	; 0x4254 <vfprintf+0x2ea>
    423e:	34 fe       	sbrs	r3, 4
    4240:	0b c0       	rjmp	.+22     	; 0x4258 <vfprintf+0x2ee>
    4242:	32 fc       	sbrc	r3, 2
    4244:	09 c0       	rjmp	.+18     	; 0x4258 <vfprintf+0x2ee>
    4246:	83 2d       	mov	r24, r3
    4248:	8e 7e       	andi	r24, 0xEE	; 238
    424a:	a8 2e       	mov	r10, r24
    424c:	05 c0       	rjmp	.+10     	; 0x4258 <vfprintf+0x2ee>
    424e:	b8 2c       	mov	r11, r8
    4250:	a3 2c       	mov	r10, r3
    4252:	03 c0       	rjmp	.+6      	; 0x425a <vfprintf+0x2f0>
    4254:	b8 2c       	mov	r11, r8
    4256:	01 c0       	rjmp	.+2      	; 0x425a <vfprintf+0x2f0>
    4258:	b9 2c       	mov	r11, r9
    425a:	a4 fe       	sbrs	r10, 4
    425c:	0f c0       	rjmp	.+30     	; 0x427c <vfprintf+0x312>
    425e:	fe 01       	movw	r30, r28
    4260:	e8 0d       	add	r30, r8
    4262:	f1 1d       	adc	r31, r1
    4264:	80 81       	ld	r24, Z
    4266:	80 33       	cpi	r24, 0x30	; 48
    4268:	21 f4       	brne	.+8      	; 0x4272 <vfprintf+0x308>
    426a:	9a 2d       	mov	r25, r10
    426c:	99 7e       	andi	r25, 0xE9	; 233
    426e:	a9 2e       	mov	r10, r25
    4270:	09 c0       	rjmp	.+18     	; 0x4284 <vfprintf+0x31a>
    4272:	a2 fe       	sbrs	r10, 2
    4274:	06 c0       	rjmp	.+12     	; 0x4282 <vfprintf+0x318>
    4276:	b3 94       	inc	r11
    4278:	b3 94       	inc	r11
    427a:	04 c0       	rjmp	.+8      	; 0x4284 <vfprintf+0x31a>
    427c:	8a 2d       	mov	r24, r10
    427e:	86 78       	andi	r24, 0x86	; 134
    4280:	09 f0       	breq	.+2      	; 0x4284 <vfprintf+0x31a>
    4282:	b3 94       	inc	r11
    4284:	a3 fc       	sbrc	r10, 3
    4286:	10 c0       	rjmp	.+32     	; 0x42a8 <vfprintf+0x33e>
    4288:	a0 fe       	sbrs	r10, 0
    428a:	06 c0       	rjmp	.+12     	; 0x4298 <vfprintf+0x32e>
    428c:	b2 14       	cp	r11, r2
    428e:	80 f4       	brcc	.+32     	; 0x42b0 <vfprintf+0x346>
    4290:	28 0c       	add	r2, r8
    4292:	92 2c       	mov	r9, r2
    4294:	9b 18       	sub	r9, r11
    4296:	0d c0       	rjmp	.+26     	; 0x42b2 <vfprintf+0x348>
    4298:	b2 14       	cp	r11, r2
    429a:	58 f4       	brcc	.+22     	; 0x42b2 <vfprintf+0x348>
    429c:	b6 01       	movw	r22, r12
    429e:	80 e2       	ldi	r24, 0x20	; 32
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	76 d0       	rcall	.+236    	; 0x4390 <fputc>
    42a4:	b3 94       	inc	r11
    42a6:	f8 cf       	rjmp	.-16     	; 0x4298 <vfprintf+0x32e>
    42a8:	b2 14       	cp	r11, r2
    42aa:	18 f4       	brcc	.+6      	; 0x42b2 <vfprintf+0x348>
    42ac:	2b 18       	sub	r2, r11
    42ae:	02 c0       	rjmp	.+4      	; 0x42b4 <vfprintf+0x34a>
    42b0:	98 2c       	mov	r9, r8
    42b2:	21 2c       	mov	r2, r1
    42b4:	a4 fe       	sbrs	r10, 4
    42b6:	0f c0       	rjmp	.+30     	; 0x42d6 <vfprintf+0x36c>
    42b8:	b6 01       	movw	r22, r12
    42ba:	80 e3       	ldi	r24, 0x30	; 48
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	68 d0       	rcall	.+208    	; 0x4390 <fputc>
    42c0:	a2 fe       	sbrs	r10, 2
    42c2:	16 c0       	rjmp	.+44     	; 0x42f0 <vfprintf+0x386>
    42c4:	a1 fc       	sbrc	r10, 1
    42c6:	03 c0       	rjmp	.+6      	; 0x42ce <vfprintf+0x364>
    42c8:	88 e7       	ldi	r24, 0x78	; 120
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	02 c0       	rjmp	.+4      	; 0x42d2 <vfprintf+0x368>
    42ce:	88 e5       	ldi	r24, 0x58	; 88
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	b6 01       	movw	r22, r12
    42d4:	0c c0       	rjmp	.+24     	; 0x42ee <vfprintf+0x384>
    42d6:	8a 2d       	mov	r24, r10
    42d8:	86 78       	andi	r24, 0x86	; 134
    42da:	51 f0       	breq	.+20     	; 0x42f0 <vfprintf+0x386>
    42dc:	a1 fe       	sbrs	r10, 1
    42de:	02 c0       	rjmp	.+4      	; 0x42e4 <vfprintf+0x37a>
    42e0:	8b e2       	ldi	r24, 0x2B	; 43
    42e2:	01 c0       	rjmp	.+2      	; 0x42e6 <vfprintf+0x37c>
    42e4:	80 e2       	ldi	r24, 0x20	; 32
    42e6:	a7 fc       	sbrc	r10, 7
    42e8:	8d e2       	ldi	r24, 0x2D	; 45
    42ea:	b6 01       	movw	r22, r12
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	50 d0       	rcall	.+160    	; 0x4390 <fputc>
    42f0:	89 14       	cp	r8, r9
    42f2:	30 f4       	brcc	.+12     	; 0x4300 <vfprintf+0x396>
    42f4:	b6 01       	movw	r22, r12
    42f6:	80 e3       	ldi	r24, 0x30	; 48
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	4a d0       	rcall	.+148    	; 0x4390 <fputc>
    42fc:	9a 94       	dec	r9
    42fe:	f8 cf       	rjmp	.-16     	; 0x42f0 <vfprintf+0x386>
    4300:	8a 94       	dec	r8
    4302:	f3 01       	movw	r30, r6
    4304:	e8 0d       	add	r30, r8
    4306:	f1 1d       	adc	r31, r1
    4308:	80 81       	ld	r24, Z
    430a:	b6 01       	movw	r22, r12
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	40 d0       	rcall	.+128    	; 0x4390 <fputc>
    4310:	81 10       	cpse	r8, r1
    4312:	f6 cf       	rjmp	.-20     	; 0x4300 <vfprintf+0x396>
    4314:	22 20       	and	r2, r2
    4316:	09 f4       	brne	.+2      	; 0x431a <vfprintf+0x3b0>
    4318:	4e ce       	rjmp	.-868    	; 0x3fb6 <vfprintf+0x4c>
    431a:	b6 01       	movw	r22, r12
    431c:	80 e2       	ldi	r24, 0x20	; 32
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	37 d0       	rcall	.+110    	; 0x4390 <fputc>
    4322:	2a 94       	dec	r2
    4324:	f7 cf       	rjmp	.-18     	; 0x4314 <vfprintf+0x3aa>
    4326:	f6 01       	movw	r30, r12
    4328:	86 81       	ldd	r24, Z+6	; 0x06
    432a:	97 81       	ldd	r25, Z+7	; 0x07
    432c:	02 c0       	rjmp	.+4      	; 0x4332 <vfprintf+0x3c8>
    432e:	8f ef       	ldi	r24, 0xFF	; 255
    4330:	9f ef       	ldi	r25, 0xFF	; 255
    4332:	2b 96       	adiw	r28, 0x0b	; 11
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	df 91       	pop	r29
    4340:	cf 91       	pop	r28
    4342:	1f 91       	pop	r17
    4344:	0f 91       	pop	r16
    4346:	ff 90       	pop	r15
    4348:	ef 90       	pop	r14
    434a:	df 90       	pop	r13
    434c:	cf 90       	pop	r12
    434e:	bf 90       	pop	r11
    4350:	af 90       	pop	r10
    4352:	9f 90       	pop	r9
    4354:	8f 90       	pop	r8
    4356:	7f 90       	pop	r7
    4358:	6f 90       	pop	r6
    435a:	5f 90       	pop	r5
    435c:	4f 90       	pop	r4
    435e:	3f 90       	pop	r3
    4360:	2f 90       	pop	r2
    4362:	08 95       	ret

00004364 <strnlen_P>:
    4364:	fc 01       	movw	r30, r24
    4366:	05 90       	lpm	r0, Z+
    4368:	61 50       	subi	r22, 0x01	; 1
    436a:	70 40       	sbci	r23, 0x00	; 0
    436c:	01 10       	cpse	r0, r1
    436e:	d8 f7       	brcc	.-10     	; 0x4366 <strnlen_P+0x2>
    4370:	80 95       	com	r24
    4372:	90 95       	com	r25
    4374:	8e 0f       	add	r24, r30
    4376:	9f 1f       	adc	r25, r31
    4378:	08 95       	ret

0000437a <strnlen>:
    437a:	fc 01       	movw	r30, r24
    437c:	61 50       	subi	r22, 0x01	; 1
    437e:	70 40       	sbci	r23, 0x00	; 0
    4380:	01 90       	ld	r0, Z+
    4382:	01 10       	cpse	r0, r1
    4384:	d8 f7       	brcc	.-10     	; 0x437c <strnlen+0x2>
    4386:	80 95       	com	r24
    4388:	90 95       	com	r25
    438a:	8e 0f       	add	r24, r30
    438c:	9f 1f       	adc	r25, r31
    438e:	08 95       	ret

00004390 <fputc>:
    4390:	0f 93       	push	r16
    4392:	1f 93       	push	r17
    4394:	cf 93       	push	r28
    4396:	df 93       	push	r29
    4398:	fb 01       	movw	r30, r22
    439a:	23 81       	ldd	r18, Z+3	; 0x03
    439c:	21 fd       	sbrc	r18, 1
    439e:	03 c0       	rjmp	.+6      	; 0x43a6 <fputc+0x16>
    43a0:	8f ef       	ldi	r24, 0xFF	; 255
    43a2:	9f ef       	ldi	r25, 0xFF	; 255
    43a4:	2c c0       	rjmp	.+88     	; 0x43fe <fputc+0x6e>
    43a6:	22 ff       	sbrs	r18, 2
    43a8:	16 c0       	rjmp	.+44     	; 0x43d6 <fputc+0x46>
    43aa:	46 81       	ldd	r20, Z+6	; 0x06
    43ac:	57 81       	ldd	r21, Z+7	; 0x07
    43ae:	24 81       	ldd	r18, Z+4	; 0x04
    43b0:	35 81       	ldd	r19, Z+5	; 0x05
    43b2:	42 17       	cp	r20, r18
    43b4:	53 07       	cpc	r21, r19
    43b6:	44 f4       	brge	.+16     	; 0x43c8 <fputc+0x38>
    43b8:	a0 81       	ld	r26, Z
    43ba:	b1 81       	ldd	r27, Z+1	; 0x01
    43bc:	9d 01       	movw	r18, r26
    43be:	2f 5f       	subi	r18, 0xFF	; 255
    43c0:	3f 4f       	sbci	r19, 0xFF	; 255
    43c2:	31 83       	std	Z+1, r19	; 0x01
    43c4:	20 83       	st	Z, r18
    43c6:	8c 93       	st	X, r24
    43c8:	26 81       	ldd	r18, Z+6	; 0x06
    43ca:	37 81       	ldd	r19, Z+7	; 0x07
    43cc:	2f 5f       	subi	r18, 0xFF	; 255
    43ce:	3f 4f       	sbci	r19, 0xFF	; 255
    43d0:	37 83       	std	Z+7, r19	; 0x07
    43d2:	26 83       	std	Z+6, r18	; 0x06
    43d4:	14 c0       	rjmp	.+40     	; 0x43fe <fputc+0x6e>
    43d6:	8b 01       	movw	r16, r22
    43d8:	ec 01       	movw	r28, r24
    43da:	fb 01       	movw	r30, r22
    43dc:	00 84       	ldd	r0, Z+8	; 0x08
    43de:	f1 85       	ldd	r31, Z+9	; 0x09
    43e0:	e0 2d       	mov	r30, r0
    43e2:	19 95       	eicall
    43e4:	89 2b       	or	r24, r25
    43e6:	e1 f6       	brne	.-72     	; 0x43a0 <fputc+0x10>
    43e8:	d8 01       	movw	r26, r16
    43ea:	16 96       	adiw	r26, 0x06	; 6
    43ec:	8d 91       	ld	r24, X+
    43ee:	9c 91       	ld	r25, X
    43f0:	17 97       	sbiw	r26, 0x07	; 7
    43f2:	01 96       	adiw	r24, 0x01	; 1
    43f4:	17 96       	adiw	r26, 0x07	; 7
    43f6:	9c 93       	st	X, r25
    43f8:	8e 93       	st	-X, r24
    43fa:	16 97       	sbiw	r26, 0x06	; 6
    43fc:	ce 01       	movw	r24, r28
    43fe:	df 91       	pop	r29
    4400:	cf 91       	pop	r28
    4402:	1f 91       	pop	r17
    4404:	0f 91       	pop	r16
    4406:	08 95       	ret

00004408 <__ultoa_invert>:
    4408:	fa 01       	movw	r30, r20
    440a:	aa 27       	eor	r26, r26
    440c:	28 30       	cpi	r18, 0x08	; 8
    440e:	51 f1       	breq	.+84     	; 0x4464 <__ultoa_invert+0x5c>
    4410:	20 31       	cpi	r18, 0x10	; 16
    4412:	81 f1       	breq	.+96     	; 0x4474 <__ultoa_invert+0x6c>
    4414:	e8 94       	clt
    4416:	6f 93       	push	r22
    4418:	6e 7f       	andi	r22, 0xFE	; 254
    441a:	6e 5f       	subi	r22, 0xFE	; 254
    441c:	7f 4f       	sbci	r23, 0xFF	; 255
    441e:	8f 4f       	sbci	r24, 0xFF	; 255
    4420:	9f 4f       	sbci	r25, 0xFF	; 255
    4422:	af 4f       	sbci	r26, 0xFF	; 255
    4424:	b1 e0       	ldi	r27, 0x01	; 1
    4426:	3e d0       	rcall	.+124    	; 0x44a4 <__ultoa_invert+0x9c>
    4428:	b4 e0       	ldi	r27, 0x04	; 4
    442a:	3c d0       	rcall	.+120    	; 0x44a4 <__ultoa_invert+0x9c>
    442c:	67 0f       	add	r22, r23
    442e:	78 1f       	adc	r23, r24
    4430:	89 1f       	adc	r24, r25
    4432:	9a 1f       	adc	r25, r26
    4434:	a1 1d       	adc	r26, r1
    4436:	68 0f       	add	r22, r24
    4438:	79 1f       	adc	r23, r25
    443a:	8a 1f       	adc	r24, r26
    443c:	91 1d       	adc	r25, r1
    443e:	a1 1d       	adc	r26, r1
    4440:	6a 0f       	add	r22, r26
    4442:	71 1d       	adc	r23, r1
    4444:	81 1d       	adc	r24, r1
    4446:	91 1d       	adc	r25, r1
    4448:	a1 1d       	adc	r26, r1
    444a:	20 d0       	rcall	.+64     	; 0x448c <__ultoa_invert+0x84>
    444c:	09 f4       	brne	.+2      	; 0x4450 <__ultoa_invert+0x48>
    444e:	68 94       	set
    4450:	3f 91       	pop	r19
    4452:	2a e0       	ldi	r18, 0x0A	; 10
    4454:	26 9f       	mul	r18, r22
    4456:	11 24       	eor	r1, r1
    4458:	30 19       	sub	r19, r0
    445a:	30 5d       	subi	r19, 0xD0	; 208
    445c:	31 93       	st	Z+, r19
    445e:	de f6       	brtc	.-74     	; 0x4416 <__ultoa_invert+0xe>
    4460:	cf 01       	movw	r24, r30
    4462:	08 95       	ret
    4464:	46 2f       	mov	r20, r22
    4466:	47 70       	andi	r20, 0x07	; 7
    4468:	40 5d       	subi	r20, 0xD0	; 208
    446a:	41 93       	st	Z+, r20
    446c:	b3 e0       	ldi	r27, 0x03	; 3
    446e:	0f d0       	rcall	.+30     	; 0x448e <__ultoa_invert+0x86>
    4470:	c9 f7       	brne	.-14     	; 0x4464 <__ultoa_invert+0x5c>
    4472:	f6 cf       	rjmp	.-20     	; 0x4460 <__ultoa_invert+0x58>
    4474:	46 2f       	mov	r20, r22
    4476:	4f 70       	andi	r20, 0x0F	; 15
    4478:	40 5d       	subi	r20, 0xD0	; 208
    447a:	4a 33       	cpi	r20, 0x3A	; 58
    447c:	18 f0       	brcs	.+6      	; 0x4484 <__ultoa_invert+0x7c>
    447e:	49 5d       	subi	r20, 0xD9	; 217
    4480:	31 fd       	sbrc	r19, 1
    4482:	40 52       	subi	r20, 0x20	; 32
    4484:	41 93       	st	Z+, r20
    4486:	02 d0       	rcall	.+4      	; 0x448c <__ultoa_invert+0x84>
    4488:	a9 f7       	brne	.-22     	; 0x4474 <__ultoa_invert+0x6c>
    448a:	ea cf       	rjmp	.-44     	; 0x4460 <__ultoa_invert+0x58>
    448c:	b4 e0       	ldi	r27, 0x04	; 4
    448e:	a6 95       	lsr	r26
    4490:	97 95       	ror	r25
    4492:	87 95       	ror	r24
    4494:	77 95       	ror	r23
    4496:	67 95       	ror	r22
    4498:	ba 95       	dec	r27
    449a:	c9 f7       	brne	.-14     	; 0x448e <__ultoa_invert+0x86>
    449c:	00 97       	sbiw	r24, 0x00	; 0
    449e:	61 05       	cpc	r22, r1
    44a0:	71 05       	cpc	r23, r1
    44a2:	08 95       	ret
    44a4:	9b 01       	movw	r18, r22
    44a6:	ac 01       	movw	r20, r24
    44a8:	0a 2e       	mov	r0, r26
    44aa:	06 94       	lsr	r0
    44ac:	57 95       	ror	r21
    44ae:	47 95       	ror	r20
    44b0:	37 95       	ror	r19
    44b2:	27 95       	ror	r18
    44b4:	ba 95       	dec	r27
    44b6:	c9 f7       	brne	.-14     	; 0x44aa <__ultoa_invert+0xa2>
    44b8:	62 0f       	add	r22, r18
    44ba:	73 1f       	adc	r23, r19
    44bc:	84 1f       	adc	r24, r20
    44be:	95 1f       	adc	r25, r21
    44c0:	a0 1d       	adc	r26, r0
    44c2:	08 95       	ret

000044c4 <_exit>:
    44c4:	f8 94       	cli

000044c6 <__stop_program>:
    44c6:	ff cf       	rjmp	.-2      	; 0x44c6 <__stop_program>
