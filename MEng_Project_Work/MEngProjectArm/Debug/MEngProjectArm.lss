
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800200  00003c18  00003cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000270  0080031e  0080031e  00003dca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003dca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e0  00000000  00000000  00003e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000167e4  00000000  00000000  00004848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000370c  00000000  00000000  0001b02c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000533a  00000000  00000000  0001e738  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001fa4  00000000  00000000  00023a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e42  00000000  00000000  00025a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a7e4  00000000  00000000  0002985a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  0003403e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	a2 c6       	rjmp	.+3396   	; 0xd6a <__vector_9>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__vector_25>
      68:	0c 94 37 10 	jmp	0x206e	; 0x206e <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 96 10 	jmp	0x212c	; 0x212c <__vector_36>
      94:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z12printDataLCDv+0x1c4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	91 13       	cpse	r25, r17
     168:	94 13       	cpse	r25, r20
     16a:	83 13       	cpse	r24, r19
     16c:	87 13       	cpse	r24, r23
     16e:	8d 13       	cpse	r24, r29
     170:	cb 13       	cpse	r28, r27
     172:	98 13       	cpse	r25, r24
     174:	9c 13       	cpse	r25, r28
     176:	a2 13       	cpse	r26, r18
     178:	a6 13       	cpse	r26, r22
     17a:	aa 13       	cpse	r26, r26
     17c:	b0 13       	cpse	r27, r16
     17e:	b4 13       	cpse	r27, r20
     180:	b8 13       	cpse	r27, r24
     182:	cb 13       	cpse	r28, r27
     184:	be 13       	cpse	r27, r30
     186:	c2 13       	cpse	r28, r18
     188:	c6 13       	cpse	r28, r22

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
     290:	72 03       	mulsu	r23, r18
     292:	69 10       	cpse	r6, r9
     294:	fe 10       	cpse	r15, r14
     296:	0e 17       	cp	r16, r30

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	e8 e1       	ldi	r30, 0x18	; 24
     2b0:	fc e3       	ldi	r31, 0x3C	; 60
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	ae 31       	cpi	r26, 0x1E	; 30
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	25 e0       	ldi	r18, 0x05	; 5
     2c4:	ae e1       	ldi	r26, 0x1E	; 30
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	ae 38       	cpi	r26, 0x8E	; 142
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 16 19 	call	0x322c	; 0x322c <__tablejump2__>
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 2c 11 	call	0x2258	; 0x2258 <main>
     2f6:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	RS485_RX_ON
	serialWriting = NO;
}
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	8a 01       	movw	r16, r20
     33a:	d2 2e       	mov	r13, r18
     33c:	ad b6       	in	r10, 0x3d	; 61
     33e:	be b6       	in	r11, 0x3e	; 62
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	82 1b       	sub	r24, r18
     346:	91 09       	sbc	r25, r1
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	9e bf       	out	0x3e, r25	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	62 2f       	mov	r22, r18
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 af 0b 	call	0x175e	; 0x175e <__floatunsisf>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <pow>
     372:	2b 01       	movw	r4, r22
     374:	3c 01       	movw	r6, r24
     376:	b8 01       	movw	r22, r16
     378:	01 2e       	mov	r0, r17
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__floatsisf>
     384:	a3 01       	movw	r20, r6
     386:	92 01       	movw	r18, r4
     388:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__cmpsf2>
     38c:	87 fd       	sbrc	r24, 7
     38e:	0b c0       	rjmp	.+22     	; 0x3a6 <_Z8printLCDhhih+0x9c>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e8       	ldi	r20, 0x80	; 128
     396:	5f e3       	ldi	r21, 0x3F	; 63
     398:	c3 01       	movw	r24, r6
     39a:	b2 01       	movw	r22, r4
     39c:	0e 94 15 0b 	call	0x162a	; 0x162a <__subsf3>
     3a0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixsfsi>
     3a4:	8b 01       	movw	r16, r22
     3a6:	1f 92       	push	r1
     3a8:	df 92       	push	r13
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	6c 01       	movw	r12, r24
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 2f 1b 	call	0x365e	; 0x365e <sprintf>
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	df 92       	push	r13
     3c6:	cf 92       	push	r12
     3c8:	ff 92       	push	r15
     3ca:	ef 92       	push	r14
     3cc:	0e 94 2f 1b 	call	0x365e	; 0x365e <sprintf>
     3d0:	48 2d       	mov	r20, r8
     3d2:	69 2d       	mov	r22, r9
     3d4:	87 e2       	ldi	r24, 0x27	; 39
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3dc:	b7 01       	movw	r22, r14
     3de:	87 e2       	ldi	r24, 0x27	; 39
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN5Print5printEPKc>
     3e6:	8d b7       	in	r24, 0x3d	; 61
     3e8:	9e b7       	in	r25, 0x3e	; 62
     3ea:	0c 96       	adiw	r24, 0x0c	; 12
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	9e bf       	out	0x3e, r25	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	8d bf       	out	0x3d, r24	; 61
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	be be       	out	0x3e, r11	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	ad be       	out	0x3d, r10	; 61
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	4f 90       	pop	r4
     42a:	08 95       	ret

0000042c <_Z8printLCDhhPKc>:
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ea 01       	movw	r28, r20
     432:	46 2f       	mov	r20, r22
     434:	68 2f       	mov	r22, r24
     436:	87 e2       	ldi	r24, 0x27	; 39
     438:	93 e0       	ldi	r25, 0x03	; 3
     43a:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     43e:	be 01       	movw	r22, r28
     440:	87 e2       	ldi	r24, 0x27	; 39
     442:	93 e0       	ldi	r25, 0x03	; 3
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	0c 94 83 11 	jmp	0x2306	; 0x2306 <_ZN5Print5printEPKc>

0000044c <_Z9padNumberih>:
     44c:	8f 92       	push	r8
     44e:	9f 92       	push	r9
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	00 d0       	rcall	.+0      	; 0x466 <_Z9padNumberih+0x1a>
     466:	1f 92       	push	r1
     468:	1f 92       	push	r1
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	7c 01       	movw	r14, r24
     470:	96 2e       	mov	r9, r22
     472:	87 2e       	mov	r8, r23
     474:	ad b6       	in	r10, 0x3d	; 61
     476:	be b6       	in	r11, 0x3e	; 62
     478:	8d b7       	in	r24, 0x3d	; 61
     47a:	9e b7       	in	r25, 0x3e	; 62
     47c:	84 1b       	sub	r24, r20
     47e:	91 09       	sbc	r25, r1
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	9e bf       	out	0x3e, r25	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	8d bf       	out	0x3d, r24	; 61
     48a:	0d b7       	in	r16, 0x3d	; 61
     48c:	1e b7       	in	r17, 0x3e	; 62
     48e:	0f 5f       	subi	r16, 0xFF	; 255
     490:	1f 4f       	sbci	r17, 0xFF	; 255
     492:	1f 92       	push	r1
     494:	4f 93       	push	r20
     496:	80 e1       	ldi	r24, 0x10	; 16
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	ce 01       	movw	r24, r28
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	6c 01       	movw	r12, r24
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	0e 94 2f 1b 	call	0x365e	; 0x365e <sprintf>
     4ac:	8f 92       	push	r8
     4ae:	9f 92       	push	r9
     4b0:	df 92       	push	r13
     4b2:	cf 92       	push	r12
     4b4:	1f 93       	push	r17
     4b6:	0f 93       	push	r16
     4b8:	0e 94 2f 1b 	call	0x365e	; 0x365e <sprintf>
     4bc:	b8 01       	movw	r22, r16
     4be:	c7 01       	movw	r24, r14
     4c0:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
     4c4:	8d b7       	in	r24, 0x3d	; 61
     4c6:	9e b7       	in	r25, 0x3e	; 62
     4c8:	0c 96       	adiw	r24, 0x0c	; 12
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	9e bf       	out	0x3e, r25	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	8d bf       	out	0x3d, r24	; 61
     4d4:	c7 01       	movw	r24, r14
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	be be       	out	0x3e, r11	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	ad be       	out	0x3d, r10	; 61
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	bf 90       	pop	r11
     4fc:	af 90       	pop	r10
     4fe:	9f 90       	pop	r9
     500:	8f 90       	pop	r8
     502:	08 95       	ret

00000504 <_Z13setupSwitchesv>:
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	84 b9       	out	0x04, r24	; 4
     508:	84 b1       	in	r24, 0x04	; 4
     50a:	88 7f       	andi	r24, 0xF8	; 248
     50c:	84 b9       	out	0x04, r24	; 4
     50e:	eb e6       	ldi	r30, 0x6B	; 107
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	87 60       	ori	r24, 0x07	; 7
     516:	80 83       	st	Z, r24
     518:	e8 e6       	ldi	r30, 0x68	; 104
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	81 60       	ori	r24, 0x01	; 1
     520:	80 83       	st	Z, r24
     522:	78 94       	sei
     524:	08 95       	ret

00000526 <_Z13checkPositionhi>:
     526:	83 30       	cpi	r24, 0x03	; 3
     528:	30 f4       	brcc	.+12     	; 0x536 <_Z13checkPositionhi+0x10>
     52a:	cb 01       	movw	r24, r22
     52c:	77 ff       	sbrs	r23, 7
     52e:	1b c0       	rjmp	.+54     	; 0x566 <_Z13checkPositionhi+0x40>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	18 c0       	rjmp	.+48     	; 0x566 <_Z13checkPositionhi+0x40>
     536:	83 30       	cpi	r24, 0x03	; 3
     538:	69 f4       	brne	.+26     	; 0x554 <_Z13checkPositionhi+0x2e>
     53a:	cb 01       	movw	r24, r22
     53c:	61 15       	cp	r22, r1
     53e:	78 4f       	sbci	r23, 0xF8	; 248
     540:	14 f4       	brge	.+4      	; 0x546 <_Z13checkPositionhi+0x20>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	98 ef       	ldi	r25, 0xF8	; 248
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	28 e0       	ldi	r18, 0x08	; 8
     54a:	92 07       	cpc	r25, r18
     54c:	ac f0       	brlt	.+42     	; 0x578 <_Z13checkPositionhi+0x52>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	98 e0       	ldi	r25, 0x08	; 8
     552:	08 95       	ret
     554:	84 50       	subi	r24, 0x04	; 4
     556:	82 30       	cpi	r24, 0x02	; 2
     558:	68 f4       	brcc	.+26     	; 0x574 <_Z13checkPositionhi+0x4e>
     55a:	cb 01       	movw	r24, r22
     55c:	64 3e       	cpi	r22, 0xE4	; 228
     55e:	72 40       	sbci	r23, 0x02	; 2
     560:	14 f4       	brge	.+4      	; 0x566 <_Z13checkPositionhi+0x40>
     562:	84 ee       	ldi	r24, 0xE4	; 228
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	85 3a       	cpi	r24, 0xA5	; 165
     568:	26 e0       	ldi	r18, 0x06	; 6
     56a:	92 07       	cpc	r25, r18
     56c:	2c f0       	brlt	.+10     	; 0x578 <_Z13checkPositionhi+0x52>
     56e:	84 ea       	ldi	r24, 0xA4	; 164
     570:	96 e0       	ldi	r25, 0x06	; 6
     572:	08 95       	ret
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	9f ef       	ldi	r25, 0xFF	; 255
     578:	08 95       	ret

0000057a <_Z11printSerial6Stringi>:
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	eb 01       	movw	r28, r22
     580:	bc 01       	movw	r22, r24
     582:	83 e8       	ldi	r24, 0x83	; 131
     584:	93 e0       	ldi	r25, 0x03	; 3
     586:	0e 94 75 11 	call	0x22ea	; 0x22ea <_ZN5Print5printERK6String>
     58a:	6c ed       	ldi	r22, 0xDC	; 220
     58c:	72 e0       	ldi	r23, 0x02	; 2
     58e:	83 e8       	ldi	r24, 0x83	; 131
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN5Print5printEPKc>
     596:	4a e0       	ldi	r20, 0x0A	; 10
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	be 01       	movw	r22, r28
     59c:	83 e8       	ldi	r24, 0x83	; 131
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <_ZN5Print7printlnEii>

000005a8 <_Z12error_decodeh>:
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	e6 97       	sbiw	r28, 0x36	; 54
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	08 2f       	mov	r16, r24
     5ca:	63 ef       	ldi	r22, 0xF3	; 243
     5cc:	72 e0       	ldi	r23, 0x02	; 2
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	7c 01       	movw	r14, r24
     5d4:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
     5d8:	63 ef       	ldi	r22, 0xF3	; 243
     5da:	72 e0       	ldi	r23, 0x02	; 2
     5dc:	ce 01       	movw	r24, r28
     5de:	07 96       	adiw	r24, 0x07	; 7
     5e0:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
     5e4:	10 2f       	mov	r17, r16
     5e6:	11 70       	andi	r17, 0x01	; 1
     5e8:	00 fd       	sbrc	r16, 0
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <_Z12error_decodeh+0x4a>
     5ec:	63 ef       	ldi	r22, 0xF3	; 243
     5ee:	72 e0       	ldi	r23, 0x02	; 2
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <_Z12error_decodeh+0x4e>
     5f2:	66 e1       	ldi	r22, 0x16	; 22
     5f4:	72 e0       	ldi	r23, 0x02	; 2
     5f6:	ce 01       	movw	r24, r28
     5f8:	0d 96       	adiw	r24, 0x0d	; 13
     5fa:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
     5fe:	11 11       	cpse	r17, r1
     600:	03 c0       	rjmp	.+6      	; 0x608 <_Z12error_decodeh+0x60>
     602:	63 ef       	ldi	r22, 0xF3	; 243
     604:	72 e0       	ldi	r23, 0x02	; 2
     606:	02 c0       	rjmp	.+4      	; 0x60c <_Z12error_decodeh+0x64>
     608:	6a e1       	ldi	r22, 0x1A	; 26
     60a:	72 e0       	ldi	r23, 0x02	; 2
     60c:	ce 01       	movw	r24, r28
     60e:	43 96       	adiw	r24, 0x13	; 19
     610:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
     614:	11 11       	cpse	r17, r1
     616:	03 c0       	rjmp	.+6      	; 0x61e <_Z12error_decodeh+0x76>
     618:	63 ef       	ldi	r22, 0xF3	; 243
     61a:	72 e0       	ldi	r23, 0x02	; 2
     61c:	02 c0       	rjmp	.+4      	; 0x622 <_Z12error_decodeh+0x7a>
     61e:	6e e1       	ldi	r22, 0x1E	; 30
     620:	72 e0       	ldi	r23, 0x02	; 2
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
     62a:	11 11       	cpse	r17, r1
     62c:	03 c0       	rjmp	.+6      	; 0x634 <_Z12error_decodeh+0x8c>
     62e:	63 ef       	ldi	r22, 0xF3	; 243
     630:	72 e0       	ldi	r23, 0x02	; 2
     632:	02 c0       	rjmp	.+4      	; 0x638 <_Z12error_decodeh+0x90>
     634:	62 e2       	ldi	r22, 0x22	; 34
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	ce 01       	movw	r24, r28
     63a:	4f 96       	adiw	r24, 0x1f	; 31
     63c:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
     640:	11 11       	cpse	r17, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <_Z12error_decodeh+0xa2>
     644:	63 ef       	ldi	r22, 0xF3	; 243
     646:	72 e0       	ldi	r23, 0x02	; 2
     648:	02 c0       	rjmp	.+4      	; 0x64e <_Z12error_decodeh+0xa6>
     64a:	66 e2       	ldi	r22, 0x26	; 38
     64c:	72 e0       	ldi	r23, 0x02	; 2
     64e:	ce 01       	movw	r24, r28
     650:	85 96       	adiw	r24, 0x25	; 37
     652:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
     656:	63 ef       	ldi	r22, 0xF3	; 243
     658:	72 e0       	ldi	r23, 0x02	; 2
     65a:	ce 01       	movw	r24, r28
     65c:	8b 96       	adiw	r24, 0x2b	; 43
     65e:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
     662:	67 01       	movw	r12, r14
     664:	00 e0       	ldi	r16, 0x00	; 0
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	b6 01       	movw	r22, r12
     66a:	ce 01       	movw	r24, r28
     66c:	c1 96       	adiw	r24, 0x31	; 49
     66e:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN6StringC1ERKS_>
     672:	b8 01       	movw	r22, r16
     674:	ce 01       	movw	r24, r28
     676:	c1 96       	adiw	r24, 0x31	; 49
     678:	80 df       	rcall	.-256    	; 0x57a <_Z11printSerial6Stringi>
     67a:	ce 01       	movw	r24, r28
     67c:	c1 96       	adiw	r24, 0x31	; 49
     67e:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
     682:	0f 5f       	subi	r16, 0xFF	; 255
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	96 e0       	ldi	r25, 0x06	; 6
     688:	c9 0e       	add	r12, r25
     68a:	d1 1c       	adc	r13, r1
     68c:	08 30       	cpi	r16, 0x08	; 8
     68e:	11 05       	cpc	r17, r1
     690:	59 f7       	brne	.-42     	; 0x668 <_Z12error_decodeh+0xc0>
     692:	8e 01       	movw	r16, r28
     694:	0f 5c       	subi	r16, 0xCF	; 207
     696:	1f 4f       	sbci	r17, 0xFF	; 255
     698:	06 50       	subi	r16, 0x06	; 6
     69a:	11 09       	sbc	r17, r1
     69c:	c8 01       	movw	r24, r16
     69e:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
     6a2:	e0 16       	cp	r14, r16
     6a4:	f1 06       	cpc	r15, r17
     6a6:	c1 f7       	brne	.-16     	; 0x698 <_Z12error_decodeh+0xf0>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	e6 96       	adiw	r28, 0x36	; 54
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	08 95       	ret

000006ca <_Z8sumBytesPhh>:
     6ca:	38 2f       	mov	r19, r24
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	2e 2f       	mov	r18, r30
     6d4:	23 1b       	sub	r18, r19
     6d6:	26 17       	cp	r18, r22
     6d8:	20 f4       	brcc	.+8      	; 0x6e2 <_Z8sumBytesPhh+0x18>
     6da:	21 91       	ld	r18, Z+
     6dc:	82 0f       	add	r24, r18
     6de:	91 1d       	adc	r25, r1
     6e0:	f8 cf       	rjmp	.-16     	; 0x6d2 <_Z8sumBytesPhh+0x8>
     6e2:	08 95       	ret

000006e4 <_GLOBAL__sub_I_position_old>:
     6e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     6e8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     6ec:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <currPos+0x1>
     6f0:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <currPos>
     6f4:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <arm+0x1>
     6f8:	24 e0       	ldi	r18, 0x04	; 4
     6fa:	44 e1       	ldi	r20, 0x14	; 20
     6fc:	67 e2       	ldi	r22, 0x27	; 39
     6fe:	87 e2       	ldi	r24, 0x27	; 39
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <_ZN17LiquidCrystal_I2CC1Ehhh>

00000706 <_Z11printBufferv>:
     706:	6a e2       	ldi	r22, 0x2A	; 42
     708:	72 e0       	ldi	r23, 0x02	; 2
     70a:	83 e8       	ldi	r24, 0x83	; 131
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN5Print5printEPKc>
     712:	80 e2       	ldi	r24, 0x20	; 32
     714:	94 e0       	ldi	r25, 0x04	; 4
     716:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN14HardwareSerial9availableEv>
     71a:	4a e0       	ldi	r20, 0x0A	; 10
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	bc 01       	movw	r22, r24
     720:	83 e8       	ldi	r24, 0x83	; 131
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN5Print5printEii>
     728:	65 e3       	ldi	r22, 0x35	; 53
     72a:	72 e0       	ldi	r23, 0x02	; 2
     72c:	83 e8       	ldi	r24, 0x83	; 131
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN5Print7printlnEPKc>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <serialReading>
     73a:	80 e2       	ldi	r24, 0x20	; 32
     73c:	94 e0       	ldi	r25, 0x04	; 4
     73e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN14HardwareSerial9availableEv>
     742:	89 2b       	or	r24, r25
     744:	19 f1       	breq	.+70     	; 0x78c <_Z11printBufferv+0x86>
     746:	80 e2       	ldi	r24, 0x20	; 32
     748:	94 e0       	ldi	r25, 0x04	; 4
     74a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN14HardwareSerial9availableEv>
     74e:	4a e0       	ldi	r20, 0x0A	; 10
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	bc 01       	movw	r22, r24
     754:	83 e8       	ldi	r24, 0x83	; 131
     756:	93 e0       	ldi	r25, 0x03	; 3
     758:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN5Print5printEii>
     75c:	6b e4       	ldi	r22, 0x4B	; 75
     75e:	72 e0       	ldi	r23, 0x02	; 2
     760:	83 e8       	ldi	r24, 0x83	; 131
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN5Print5printEPKc>
     768:	80 e2       	ldi	r24, 0x20	; 32
     76a:	94 e0       	ldi	r25, 0x04	; 4
     76c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     770:	4a e0       	ldi	r20, 0x0A	; 10
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	bc 01       	movw	r22, r24
     776:	83 e8       	ldi	r24, 0x83	; 131
     778:	93 e0       	ldi	r25, 0x03	; 3
     77a:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEii>
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     78a:	d7 cf       	rjmp	.-82     	; 0x73a <_Z11printBufferv+0x34>
     78c:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <serialReading>
     790:	6e e4       	ldi	r22, 0x4E	; 78
     792:	72 e0       	ldi	r23, 0x02	; 2
     794:	83 e8       	ldi	r24, 0x83	; 131
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	0c 94 9e 11 	jmp	0x233c	; 0x233c <_ZN5Print7printlnEPKc>

0000079c <_Z12printDataLCDv>:
     79c:	5f 92       	push	r5
     79e:	6f 92       	push	r6
     7a0:	7f 92       	push	r7
     7a2:	8f 92       	push	r8
     7a4:	9f 92       	push	r9
     7a6:	af 92       	push	r10
     7a8:	bf 92       	push	r11
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	6a e0       	ldi	r22, 0x0A	; 10
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     7c6:	80 e2       	ldi	r24, 0x20	; 32
     7c8:	94 e0       	ldi	r25, 0x04	; 4
     7ca:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN14HardwareSerial9availableEv>
     7ce:	18 16       	cp	r1, r24
     7d0:	19 06       	cpc	r1, r25
     7d2:	0c f0       	brlt	.+2      	; 0x7d6 <_Z12printDataLCDv+0x3a>
     7d4:	af c1       	rjmp	.+862    	; 0xb34 <_Z12printDataLCDv+0x398>
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <serialReading>
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	94 e0       	ldi	r25, 0x04	; 4
     7e0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     7e4:	8f 3f       	cpi	r24, 0xFF	; 255
     7e6:	91 05       	cpc	r25, r1
     7e8:	09 f0       	breq	.+2      	; 0x7ec <_Z12printDataLCDv+0x50>
     7ea:	a4 c1       	rjmp	.+840    	; 0xb34 <_Z12printDataLCDv+0x398>
     7ec:	80 e2       	ldi	r24, 0x20	; 32
     7ee:	94 e0       	ldi	r25, 0x04	; 4
     7f0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     7f4:	8f 3f       	cpi	r24, 0xFF	; 255
     7f6:	91 05       	cpc	r25, r1
     7f8:	09 f0       	breq	.+2      	; 0x7fc <_Z12printDataLCDv+0x60>
     7fa:	9c c1       	rjmp	.+824    	; 0xb34 <_Z12printDataLCDv+0x398>
     7fc:	80 e2       	ldi	r24, 0x20	; 32
     7fe:	94 e0       	ldi	r25, 0x04	; 4
     800:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     804:	ec 01       	movw	r28, r24
     806:	58 2e       	mov	r5, r24
     808:	2f ef       	ldi	r18, 0xFF	; 255
     80a:	82 17       	cp	r24, r18
     80c:	b9 f3       	breq	.-18     	; 0x7fc <_Z12printDataLCDv+0x60>
     80e:	80 e2       	ldi	r24, 0x20	; 32
     810:	94 e0       	ldi	r25, 0x04	; 4
     812:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     816:	08 2f       	mov	r16, r24
     818:	80 e2       	ldi	r24, 0x20	; 32
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     820:	18 2f       	mov	r17, r24
     822:	81 11       	cpse	r24, r1
     824:	02 c0       	rjmp	.+4      	; 0x82a <_Z12printDataLCDv+0x8e>
     826:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <error_byte_old>
     82a:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <error_byte_old>
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	6a e0       	ldi	r22, 0x0A	; 10
     832:	87 e2       	ldi	r24, 0x27	; 39
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     83a:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <error_counter>
     83e:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <error_counter+0x1>
     842:	11 11       	cpse	r17, r1
     844:	02 c0       	rjmp	.+4      	; 0x84a <_Z12printDataLCDv+0xae>
     846:	00 97       	sbiw	r24, 0x00	; 0
     848:	11 f1       	breq	.+68     	; 0x88e <_Z12printDataLCDv+0xf2>
     84a:	8b 30       	cpi	r24, 0x0B	; 11
     84c:	91 05       	cpc	r25, r1
     84e:	14 f4       	brge	.+4      	; 0x854 <_Z12printDataLCDv+0xb8>
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	02 c0       	rjmp	.+4      	; 0x858 <_Z12printDataLCDv+0xbc>
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <error_counter+0x1>
     85c:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <error_counter>
     860:	81 2f       	mov	r24, r17
     862:	a2 de       	rcall	.-700    	; 0x5a8 <_Z12error_decodeh>
     864:	6a e7       	ldi	r22, 0x7A	; 122
     866:	72 e0       	ldi	r23, 0x02	; 2
     868:	87 e2       	ldi	r24, 0x27	; 39
     86a:	93 e0       	ldi	r25, 0x03	; 3
     86c:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN5Print5printEPKc>
     870:	4a e0       	ldi	r20, 0x0A	; 10
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	60 91 37 03 	lds	r22, 0x0337	; 0x800337 <error_byte_old>
     878:	87 e2       	ldi	r24, 0x27	; 39
     87a:	93 e0       	ldi	r25, 0x03	; 3
     87c:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN5Print5printEhi>
     880:	6f e7       	ldi	r22, 0x7F	; 127
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	87 e2       	ldi	r24, 0x27	; 39
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN5Print5printEPKc>
     88c:	2d c1       	rjmp	.+602    	; 0xae8 <_Z12printDataLCDv+0x34c>
     88e:	6d e7       	ldi	r22, 0x7D	; 125
     890:	72 e0       	ldi	r23, 0x02	; 2
     892:	87 e2       	ldi	r24, 0x27	; 39
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN5Print5printEPKc>
     89a:	03 30       	cpi	r16, 0x03	; 3
     89c:	08 f4       	brcc	.+2      	; 0x8a0 <_Z12printDataLCDv+0x104>
     89e:	24 c1       	rjmp	.+584    	; 0xae8 <_Z12printDataLCDv+0x34c>
     8a0:	80 e2       	ldi	r24, 0x20	; 32
     8a2:	94 e0       	ldi	r25, 0x04	; 4
     8a4:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     8a8:	3c 01       	movw	r6, r24
     8aa:	80 e2       	ldi	r24, 0x20	; 32
     8ac:	94 e0       	ldi	r25, 0x04	; 4
     8ae:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	38 2f       	mov	r19, r24
     8b8:	62 0e       	add	r6, r18
     8ba:	73 1e       	adc	r7, r19
     8bc:	6e 01       	movw	r12, r28
     8be:	dd 24       	eor	r13, r13
     8c0:	8b e0       	ldi	r24, 0x0B	; 11
     8c2:	c8 9f       	mul	r28, r24
     8c4:	e0 01       	movw	r28, r0
     8c6:	11 24       	eor	r1, r1
     8c8:	c8 5c       	subi	r28, 0xC8	; 200
     8ca:	dc 4f       	sbci	r29, 0xFC	; 252
     8cc:	9e 81       	ldd	r25, Y+6	; 0x06
     8ce:	2c 81       	ldd	r18, Y+4	; 0x04
     8d0:	3d 81       	ldd	r19, Y+5	; 0x05
     8d2:	8f 81       	ldd	r24, Y+7	; 0x07
     8d4:	91 11       	cpse	r25, r1
     8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <_Z12printDataLCDv+0x14c>
     8d8:	a3 01       	movw	r20, r6
     8da:	4c 59       	subi	r20, 0x9C	; 156
     8dc:	5f 4f       	sbci	r21, 0xFF	; 255
     8de:	42 17       	cp	r20, r18
     8e0:	53 07       	cpc	r21, r19
     8e2:	44 f4       	brge	.+16     	; 0x8f4 <_Z12printDataLCDv+0x158>
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <_Z12printDataLCDv+0x158>
     8e8:	2c 59       	subi	r18, 0x9C	; 156
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	26 15       	cp	r18, r6
     8ee:	37 05       	cpc	r19, r7
     8f0:	0c f4       	brge	.+2      	; 0x8f4 <_Z12printDataLCDv+0x158>
     8f2:	81 50       	subi	r24, 0x01	; 1
     8f4:	9b e0       	ldi	r25, 0x0B	; 11
     8f6:	9c 9d       	mul	r25, r12
     8f8:	f0 01       	movw	r30, r0
     8fa:	9d 9d       	mul	r25, r13
     8fc:	f0 0d       	add	r31, r0
     8fe:	11 24       	eor	r1, r1
     900:	e8 5c       	subi	r30, 0xC8	; 200
     902:	fc 4f       	sbci	r31, 0xFC	; 252
     904:	87 83       	std	Z+7, r24	; 0x07
     906:	80 e2       	ldi	r24, 0x20	; 32
     908:	94 e0       	ldi	r25, 0x04	; 4
     90a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     90e:	7c 01       	movw	r14, r24
     910:	80 e2       	ldi	r24, 0x20	; 32
     912:	94 e0       	ldi	r25, 0x04	; 4
     914:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	38 2f       	mov	r19, r24
     91e:	e2 0e       	add	r14, r18
     920:	f3 1e       	adc	r15, r19
     922:	80 e2       	ldi	r24, 0x20	; 32
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     92a:	8c 01       	movw	r16, r24
     92c:	80 e2       	ldi	r24, 0x20	; 32
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	38 2f       	mov	r19, r24
     93a:	02 0f       	add	r16, r18
     93c:	13 1f       	adc	r17, r19
     93e:	80 e2       	ldi	r24, 0x20	; 32
     940:	94 e0       	ldi	r25, 0x04	; 4
     942:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     946:	80 e2       	ldi	r24, 0x20	; 32
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     94e:	80 e2       	ldi	r24, 0x20	; 32
     950:	94 e0       	ldi	r25, 0x04	; 4
     952:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     956:	80 e2       	ldi	r24, 0x20	; 32
     958:	94 e0       	ldi	r25, 0x04	; 4
     95a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     95e:	80 e2       	ldi	r24, 0x20	; 32
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     966:	80 e2       	ldi	r24, 0x20	; 32
     968:	94 e0       	ldi	r25, 0x04	; 4
     96a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     96e:	80 e2       	ldi	r24, 0x20	; 32
     970:	94 e0       	ldi	r25, 0x04	; 4
     972:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     976:	80 e2       	ldi	r24, 0x20	; 32
     978:	94 e0       	ldi	r25, 0x04	; 4
     97a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     97e:	80 e2       	ldi	r24, 0x20	; 32
     980:	94 e0       	ldi	r25, 0x04	; 4
     982:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	e1 14       	cp	r14, r1
     98a:	24 e0       	ldi	r18, 0x04	; 4
     98c:	f2 06       	cpc	r15, r18
     98e:	0c f4       	brge	.+2      	; 0x992 <_Z12printDataLCDv+0x1f6>
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	47 01       	movw	r8, r14
     994:	e1 14       	cp	r14, r1
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	f8 06       	cpc	r15, r24
     99a:	14 f0       	brlt	.+4      	; 0x9a0 <_Z12printDataLCDv+0x204>
     99c:	24 e0       	ldi	r18, 0x04	; 4
     99e:	92 1a       	sub	r9, r18
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	01 15       	cp	r16, r1
     9a4:	24 e0       	ldi	r18, 0x04	; 4
     9a6:	12 07       	cpc	r17, r18
     9a8:	0c f4       	brge	.+2      	; 0x9ac <_Z12printDataLCDv+0x210>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	58 01       	movw	r10, r16
     9ae:	01 15       	cp	r16, r1
     9b0:	24 e0       	ldi	r18, 0x04	; 4
     9b2:	12 07       	cpc	r17, r18
     9b4:	14 f0       	brlt	.+4      	; 0x9ba <_Z12printDataLCDv+0x21e>
     9b6:	24 e0       	ldi	r18, 0x04	; 4
     9b8:	b2 1a       	sub	r11, r18
     9ba:	2b e0       	ldi	r18, 0x0B	; 11
     9bc:	2c 9d       	mul	r18, r12
     9be:	e0 01       	movw	r28, r0
     9c0:	2d 9d       	mul	r18, r13
     9c2:	d0 0d       	add	r29, r0
     9c4:	11 24       	eor	r1, r1
     9c6:	c8 5c       	subi	r28, 0xC8	; 200
     9c8:	dc 4f       	sbci	r29, 0xFC	; 252
     9ca:	7d 82       	std	Y+5, r7	; 0x05
     9cc:	6c 82       	std	Y+4, r6	; 0x04
     9ce:	99 86       	std	Y+9, r9	; 0x09
     9d0:	88 86       	std	Y+8, r8	; 0x08
     9d2:	9e 83       	std	Y+6, r25	; 0x06
     9d4:	bb 86       	std	Y+11, r11	; 0x0b
     9d6:	aa 86       	std	Y+10, r10	; 0x0a
     9d8:	8c 87       	std	Y+12, r24	; 0x0c
     9da:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <arm>
     9de:	58 16       	cp	r5, r24
     9e0:	b1 f0       	breq	.+44     	; 0xa0e <_Z12printDataLCDv+0x272>
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	a6 01       	movw	r20, r12
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	8f dc       	rcall	.-1762   	; 0x30a <_Z8printLCDhhih>
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	29 f0       	breq	.+10     	; 0x9fc <_Z12printDataLCDv+0x260>
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	31 f0       	breq	.+12     	; 0xa02 <_Z12printDataLCDv+0x266>
     9f6:	6b e6       	ldi	r22, 0x6B	; 107
     9f8:	72 e0       	ldi	r23, 0x02	; 2
     9fa:	05 c0       	rjmp	.+10     	; 0xa06 <_Z12printDataLCDv+0x26a>
     9fc:	60 e7       	ldi	r22, 0x70	; 112
     9fe:	72 e0       	ldi	r23, 0x02	; 2
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <_Z12printDataLCDv+0x26a>
     a02:	65 e7       	ldi	r22, 0x75	; 117
     a04:	72 e0       	ldi	r23, 0x02	; 2
     a06:	87 e2       	ldi	r24, 0x27	; 39
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN5Print5printEPKc>
     a0e:	50 92 38 03 	sts	0x0338, r5	; 0x800338 <arm>
     a12:	8b e0       	ldi	r24, 0x0B	; 11
     a14:	8c 9d       	mul	r24, r12
     a16:	e0 01       	movw	r28, r0
     a18:	8d 9d       	mul	r24, r13
     a1a:	d0 0d       	add	r29, r0
     a1c:	11 24       	eor	r1, r1
     a1e:	c8 5c       	subi	r28, 0xC8	; 200
     a20:	dc 4f       	sbci	r29, 0xFC	; 252
     a22:	6c 81       	ldd	r22, Y+4	; 0x04
     a24:	7d 81       	ldd	r23, Y+5	; 0x05
     a26:	07 2e       	mov	r0, r23
     a28:	00 0c       	add	r0, r0
     a2a:	88 0b       	sbc	r24, r24
     a2c:	99 0b       	sbc	r25, r25
     a2e:	99 d6       	rcall	.+3378   	; 0x1762 <__floatsisf>
     a30:	28 e5       	ldi	r18, 0x58	; 88
     a32:	39 e3       	ldi	r19, 0x39	; 57
     a34:	44 eb       	ldi	r20, 0xB4	; 180
     a36:	5d e3       	ldi	r21, 0x3D	; 61
     a38:	44 d7       	rcall	.+3720   	; 0x18c2 <__mulsf3>
     a3a:	60 d6       	rcall	.+3264   	; 0x16fc <__fixsfsi>
     a3c:	24 e0       	ldi	r18, 0x04	; 4
     a3e:	ab 01       	movw	r20, r22
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	62 dc       	rcall	.-1852   	; 0x30a <_Z8printLCDhhih>
     a46:	6f ed       	ldi	r22, 0xDF	; 223
     a48:	87 e2       	ldi	r24, 0x27	; 39
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print5printEc>
     a50:	4f 81       	ldd	r20, Y+7	; 0x07
     a52:	04 2e       	mov	r0, r20
     a54:	00 0c       	add	r0, r0
     a56:	55 0b       	sbc	r21, r21
     a58:	23 e0       	ldi	r18, 0x03	; 3
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	8a e0       	ldi	r24, 0x0A	; 10
     a5e:	55 dc       	rcall	.-1878   	; 0x30a <_Z8printLCDhhih>
     a60:	68 e1       	ldi	r22, 0x18	; 24
     a62:	72 e0       	ldi	r23, 0x02	; 2
     a64:	87 e2       	ldi	r24, 0x27	; 39
     a66:	93 e0       	ldi	r25, 0x03	; 3
     a68:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN5Print5printEPKc>
     a6c:	24 e0       	ldi	r18, 0x04	; 4
     a6e:	a4 01       	movw	r20, r8
     a70:	62 e0       	ldi	r22, 0x02	; 2
     a72:	84 e0       	ldi	r24, 0x04	; 4
     a74:	4a dc       	rcall	.-1900   	; 0x30a <_Z8printLCDhhih>
     a76:	e1 14       	cp	r14, r1
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	f8 06       	cpc	r15, r24
     a7c:	14 f4       	brge	.+4      	; 0xa82 <_Z12printDataLCDv+0x2e6>
     a7e:	6f e7       	ldi	r22, 0x7F	; 127
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <_Z12printDataLCDv+0x2e8>
     a82:	6e e7       	ldi	r22, 0x7E	; 126
     a84:	87 e2       	ldi	r24, 0x27	; 39
     a86:	93 e0       	ldi	r25, 0x03	; 3
     a88:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print5printEc>
     a8c:	8b e0       	ldi	r24, 0x0B	; 11
     a8e:	8c 9d       	mul	r24, r12
     a90:	f0 01       	movw	r30, r0
     a92:	8d 9d       	mul	r24, r13
     a94:	f0 0d       	add	r31, r0
     a96:	11 24       	eor	r1, r1
     a98:	e8 5c       	subi	r30, 0xC8	; 200
     a9a:	fc 4f       	sbci	r31, 0xFC	; 252
     a9c:	40 85       	ldd	r20, Z+8	; 0x08
     a9e:	51 85       	ldd	r21, Z+9	; 0x09
     aa0:	24 e0       	ldi	r18, 0x04	; 4
     aa2:	62 e0       	ldi	r22, 0x02	; 2
     aa4:	8a e0       	ldi	r24, 0x0A	; 10
     aa6:	31 dc       	rcall	.-1950   	; 0x30a <_Z8printLCDhhih>
     aa8:	24 e0       	ldi	r18, 0x04	; 4
     aaa:	a5 01       	movw	r20, r10
     aac:	63 e0       	ldi	r22, 0x03	; 3
     aae:	84 e0       	ldi	r24, 0x04	; 4
     ab0:	2c dc       	rcall	.-1960   	; 0x30a <_Z8printLCDhhih>
     ab2:	01 15       	cp	r16, r1
     ab4:	14 40       	sbci	r17, 0x04	; 4
     ab6:	14 f4       	brge	.+4      	; 0xabc <_Z12printDataLCDv+0x320>
     ab8:	6f e7       	ldi	r22, 0x7F	; 127
     aba:	01 c0       	rjmp	.+2      	; 0xabe <_Z12printDataLCDv+0x322>
     abc:	6e e7       	ldi	r22, 0x7E	; 126
     abe:	87 e2       	ldi	r24, 0x27	; 39
     ac0:	93 e0       	ldi	r25, 0x03	; 3
     ac2:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print5printEc>
     ac6:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <servoID_old>
     aca:	58 12       	cpse	r5, r24
     acc:	05 c0       	rjmp	.+10     	; 0xad8 <_Z12printDataLCDv+0x33c>
     ace:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <currPos>
     ad2:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <currPos+0x1>
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <_Z12printDataLCDv+0x340>
     ad8:	96 2d       	mov	r25, r6
     ada:	87 2d       	mov	r24, r7
     adc:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <currPos>
     ae0:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <currPos+0x1>
     ae4:	50 92 82 03 	sts	0x0382, r5	; 0x800382 <servoID_old>
     ae8:	80 e2       	ldi	r24, 0x20	; 32
     aea:	94 e0       	ldi	r25, 0x04	; 4
     aec:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN14HardwareSerial9availableEv>
     af0:	18 16       	cp	r1, r24
     af2:	19 06       	cpc	r1, r25
     af4:	2c f4       	brge	.+10     	; 0xb00 <_Z12printDataLCDv+0x364>
     af6:	80 e2       	ldi	r24, 0x20	; 32
     af8:	94 e0       	ldi	r25, 0x04	; 4
     afa:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     afe:	f4 cf       	rjmp	.-24     	; 0xae8 <_Z12printDataLCDv+0x34c>
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     b0c:	40 91 33 03 	lds	r20, 0x0333	; 0x800333 <cycle_counter>
     b10:	50 91 34 03 	lds	r21, 0x0334	; 0x800334 <cycle_counter+0x1>
     b14:	49 30       	cpi	r20, 0x09	; 9
     b16:	51 05       	cpc	r21, r1
     b18:	1c f4       	brge	.+6      	; 0xb20 <_Z12printDataLCDv+0x384>
     b1a:	4f 5f       	subi	r20, 0xFF	; 255
     b1c:	5f 4f       	sbci	r21, 0xFF	; 255
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <_Z12printDataLCDv+0x388>
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	50 93 34 03 	sts	0x0334, r21	; 0x800334 <cycle_counter+0x1>
     b28:	40 93 33 03 	sts	0x0333, r20	; 0x800333 <cycle_counter>
     b2c:	21 e0       	ldi	r18, 0x01	; 1
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	82 e1       	ldi	r24, 0x12	; 18
     b32:	eb db       	rcall	.-2090   	; 0x30a <_Z8printLCDhhih>
     b34:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <serialReading>
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	bf 90       	pop	r11
     b4a:	af 90       	pop	r10
     b4c:	9f 90       	pop	r9
     b4e:	8f 90       	pop	r8
     b50:	7f 90       	pop	r7
     b52:	6f 90       	pop	r6
     b54:	5f 90       	pop	r5
     b56:	08 95       	ret

00000b58 <_Z10writeServohhPhh>:
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	18 2f       	mov	r17, r24
     b66:	d6 2f       	mov	r29, r22
     b68:	7a 01       	movw	r14, r20
     b6a:	02 2f       	mov	r16, r18
     b6c:	c6 e0       	ldi	r28, 0x06	; 6
     b6e:	c6 0f       	add	r28, r22
     b70:	c2 0f       	add	r28, r18
     b72:	62 2f       	mov	r22, r18
     b74:	ca 01       	movw	r24, r20
     b76:	a9 dd       	rcall	.-1198   	; 0x6ca <_Z8sumBytesPhh>
     b78:	c1 0f       	add	r28, r17
     b7a:	8c 0f       	add	r24, r28
     b7c:	c8 2f       	mov	r28, r24
     b7e:	c0 95       	com	r28
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <serialWriting>
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN14HardwareSerial9availableEv>
     b8e:	89 2b       	or	r24, r25
     b90:	29 f0       	breq	.+10     	; 0xb9c <_Z10writeServohhPhh+0x44>
     b92:	80 e2       	ldi	r24, 0x20	; 32
     b94:	94 e0       	ldi	r25, 0x04	; 4
     b96:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14HardwareSerial4readEv>
     b9a:	f5 cf       	rjmp	.-22     	; 0xb86 <_Z10writeServohhPhh+0x2e>
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 08 14 	call	0x2810	; 0x2810 <digitalWrite>
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	0e 94 08 14 	call	0x2810	; 0x2810 <digitalWrite>
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     bb8:	6f ef       	ldi	r22, 0xFF	; 255
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	80 e2       	ldi	r24, 0x20	; 32
     bbe:	94 e0       	ldi	r25, 0x04	; 4
     bc0:	9d db       	rcall	.-2246   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     bc2:	6f ef       	ldi	r22, 0xFF	; 255
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	94 e0       	ldi	r25, 0x04	; 4
     bca:	98 db       	rcall	.-2256   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     bcc:	61 2f       	mov	r22, r17
     bce:	80 e2       	ldi	r24, 0x20	; 32
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN14HardwareSerial5writeEh>
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	b8 01       	movw	r22, r16
     bda:	6d 5f       	subi	r22, 0xFD	; 253
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	80 e2       	ldi	r24, 0x20	; 32
     be0:	94 e0       	ldi	r25, 0x04	; 4
     be2:	8c db       	rcall	.-2280   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e2       	ldi	r24, 0x20	; 32
     bea:	94 e0       	ldi	r25, 0x04	; 4
     bec:	87 db       	rcall	.-2290   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     bee:	6d 2f       	mov	r22, r29
     bf0:	80 e2       	ldi	r24, 0x20	; 32
     bf2:	94 e0       	ldi	r25, 0x04	; 4
     bf4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN14HardwareSerial5writeEh>
     bf8:	a8 01       	movw	r20, r16
     bfa:	b7 01       	movw	r22, r14
     bfc:	80 e2       	ldi	r24, 0x20	; 32
     bfe:	94 e0       	ldi	r25, 0x04	; 4
     c00:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN5Print5writeEPKhj>
     c04:	6c 2f       	mov	r22, r28
     c06:	80 e2       	ldi	r24, 0x20	; 32
     c08:	94 e0       	ldi	r25, 0x04	; 4
     c0a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN14HardwareSerial5writeEh>
     c0e:	80 e2       	ldi	r24, 0x20	; 32
     c10:	94 e0       	ldi	r25, 0x04	; 4
     c12:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_ZN14HardwareSerial5flushEv>
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	0e 94 08 14 	call	0x2810	; 0x2810 <digitalWrite>
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	83 e0       	ldi	r24, 0x03	; 3
     c22:	0e 94 08 14 	call	0x2810	; 0x2810 <digitalWrite>
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     c32:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <serialWriting>
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <_Z9moveSpeedhii>:
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	00 d0       	rcall	.+0      	; 0xc54 <_Z9moveSpeedhii+0x10>
     c54:	1f 92       	push	r1
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	18 2f       	mov	r17, r24
     c5c:	d4 2e       	mov	r13, r20
     c5e:	e5 2e       	mov	r14, r21
     c60:	62 dc       	rcall	.-1852   	; 0x526 <_Z13checkPositionhi>
     c62:	f8 2e       	mov	r15, r24
     c64:	09 2f       	mov	r16, r25
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	db 82       	std	Y+3, r13	; 0x03
     c6c:	ec 82       	std	Y+4, r14	; 0x04
     c6e:	24 e0       	ldi	r18, 0x04	; 4
     c70:	ae 01       	movw	r20, r28
     c72:	4f 5f       	subi	r20, 0xFF	; 255
     c74:	5f 4f       	sbci	r21, 0xFF	; 255
     c76:	6e e1       	ldi	r22, 0x1E	; 30
     c78:	81 2f       	mov	r24, r17
     c7a:	6e df       	rcall	.-292    	; 0xb58 <_Z10writeServohhPhh>
     c7c:	f0 92 80 03 	sts	0x0380, r15	; 0x800380 <currPos>
     c80:	00 93 81 03 	sts	0x0381, r16	; 0x800381 <currPos+0x1>
     c84:	8b e0       	ldi	r24, 0x0B	; 11
     c86:	18 9f       	mul	r17, r24
     c88:	f0 01       	movw	r30, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	e8 5c       	subi	r30, 0xC8	; 200
     c8e:	fc 4f       	sbci	r31, 0xFC	; 252
     c90:	f4 82       	std	Z+4, r15	; 0x04
     c92:	05 83       	std	Z+5, r16	; 0x05
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	08 95       	ret

00000cac <_Z14setTorqueLimithi>:
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	1f 92       	push	r1
     cb2:	1f 92       	push	r1
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	69 83       	std	Y+1, r22	; 0x01
     cba:	7a 83       	std	Y+2, r23	; 0x02
     cbc:	22 e0       	ldi	r18, 0x02	; 2
     cbe:	ae 01       	movw	r20, r28
     cc0:	4f 5f       	subi	r20, 0xFF	; 255
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	62 e2       	ldi	r22, 0x22	; 34
     cc6:	48 df       	rcall	.-368    	; 0xb58 <_Z10writeServohhPhh>
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <_Z7setModehh>:
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	00 d0       	rcall	.+0      	; 0xcdc <_Z7setModehh+0xa>
     cdc:	1f 92       	push	r1
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	18 2f       	mov	r17, r24
     ce4:	06 2f       	mov	r16, r22
     ce6:	61 30       	cpi	r22, 0x01	; 1
     ce8:	29 f4       	brne	.+10     	; 0xcf4 <_Z7setModehh+0x22>
     cea:	19 82       	std	Y+1, r1	; 0x01
     cec:	1a 82       	std	Y+2, r1	; 0x02
     cee:	1b 82       	std	Y+3, r1	; 0x03
     cf0:	1c 82       	std	Y+4, r1	; 0x04
     cf2:	08 c0       	rjmp	.+16     	; 0xd04 <_Z7setModehh+0x32>
     cf4:	62 30       	cpi	r22, 0x02	; 2
     cf6:	81 f4       	brne	.+32     	; 0xd18 <_Z7setModehh+0x46>
     cf8:	9f ef       	ldi	r25, 0xFF	; 255
     cfa:	99 83       	std	Y+1, r25	; 0x01
     cfc:	8f e0       	ldi	r24, 0x0F	; 15
     cfe:	8a 83       	std	Y+2, r24	; 0x02
     d00:	9b 83       	std	Y+3, r25	; 0x03
     d02:	8c 83       	std	Y+4, r24	; 0x04
     d04:	24 e0       	ldi	r18, 0x04	; 4
     d06:	ae 01       	movw	r20, r28
     d08:	4f 5f       	subi	r20, 0xFF	; 255
     d0a:	5f 4f       	sbci	r21, 0xFF	; 255
     d0c:	66 e0       	ldi	r22, 0x06	; 6
     d0e:	81 2f       	mov	r24, r17
     d10:	23 df       	rcall	.-442    	; 0xb58 <_Z10writeServohhPhh>
     d12:	16 30       	cpi	r17, 0x06	; 6
     d14:	a0 f0       	brcs	.+40     	; 0xd3e <_Z7setModehh+0x6c>
     d16:	1a c0       	rjmp	.+52     	; 0xd4c <_Z7setModehh+0x7a>
     d18:	84 ee       	ldi	r24, 0xE4	; 228
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	8a 83       	std	Y+2, r24	; 0x02
     d20:	84 ea       	ldi	r24, 0xA4	; 164
     d22:	8b 83       	std	Y+3, r24	; 0x03
     d24:	86 e0       	ldi	r24, 0x06	; 6
     d26:	8c 83       	std	Y+4, r24	; 0x04
     d28:	24 e0       	ldi	r18, 0x04	; 4
     d2a:	ae 01       	movw	r20, r28
     d2c:	4f 5f       	subi	r20, 0xFF	; 255
     d2e:	5f 4f       	sbci	r21, 0xFF	; 255
     d30:	66 e0       	ldi	r22, 0x06	; 6
     d32:	81 2f       	mov	r24, r17
     d34:	11 df       	rcall	.-478    	; 0xb58 <_Z10writeServohhPhh>
     d36:	16 30       	cpi	r17, 0x06	; 6
     d38:	48 f4       	brcc	.+18     	; 0xd4c <_Z7setModehh+0x7a>
     d3a:	03 30       	cpi	r16, 0x03	; 3
     d3c:	38 f4       	brcc	.+14     	; 0xd4c <_Z7setModehh+0x7a>
     d3e:	8b e0       	ldi	r24, 0x0B	; 11
     d40:	18 9f       	mul	r17, r24
     d42:	f0 01       	movw	r30, r0
     d44:	11 24       	eor	r1, r1
     d46:	e8 5c       	subi	r30, 0xC8	; 200
     d48:	fc 4f       	sbci	r31, 0xFC	; 252
     d4a:	03 83       	std	Z+3, r16	; 0x03
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	08 95       	ret

00000d5e <_Z12setModeWheelh>:
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	b8 cf       	rjmp	.-144    	; 0xcd2 <_Z7setModehh>

00000d62 <_Z12setModeJointh>:
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	b6 cf       	rjmp	.-148    	; 0xcd2 <_Z7setModehh>

00000d66 <_Z16setModeMultiTurnh>:
     d66:	62 e0       	ldi	r22, 0x02	; 2
     d68:	b4 cf       	rjmp	.-152    	; 0xcd2 <_Z7setModehh>

00000d6a <__vector_9>:
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	2f 93       	push	r18
     d82:	3f 93       	push	r19
     d84:	4f 93       	push	r20
     d86:	5f 93       	push	r21
     d88:	6f 93       	push	r22
     d8a:	7f 93       	push	r23
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
     d90:	af 93       	push	r26
     d92:	bf 93       	push	r27
     d94:	cf 93       	push	r28
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	c0 91 38 03 	lds	r28, 0x0338	; 0x800338 <arm>
     d9e:	18 9b       	sbis	0x03, 0	; 3
     da0:	38 c0       	rjmp	.+112    	; 0xe12 <__vector_9+0xa8>
     da2:	2f 9a       	sbi	0x05, 7	; 5
     da4:	8b e0       	ldi	r24, 0x0B	; 11
     da6:	c8 9f       	mul	r28, r24
     da8:	80 01       	movw	r16, r0
     daa:	11 24       	eor	r1, r1
     dac:	08 5c       	subi	r16, 0xC8	; 200
     dae:	1c 4f       	sbci	r17, 0xFC	; 252
     db0:	78 01       	movw	r14, r16
     db2:	e4 e0       	ldi	r30, 0x04	; 4
     db4:	ee 0e       	add	r14, r30
     db6:	f1 1c       	adc	r15, r1
     db8:	08 5f       	subi	r16, 0xF8	; 248
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	18 9b       	sbis	0x03, 0	; 3
     dbe:	20 c0       	rjmp	.+64     	; 0xe00 <__vector_9+0x96>
     dc0:	f7 01       	movw	r30, r14
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	61 50       	subi	r22, 0x01	; 1
     dc8:	71 09       	sbc	r23, r1
     dca:	71 83       	std	Z+1, r23	; 0x01
     dcc:	60 83       	st	Z, r22
     dce:	c3 30       	cpi	r28, 0x03	; 3
     dd0:	40 f4       	brcc	.+16     	; 0xde2 <__vector_9+0x78>
     dd2:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <lastButtonPressed>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	21 f4       	brne	.+8      	; 0xde2 <__vector_9+0x78>
     dda:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <buttonsFlip+0x1>
     dde:	81 11       	cpse	r24, r1
     de0:	04 c0       	rjmp	.+8      	; 0xdea <__vector_9+0x80>
     de2:	f8 01       	movw	r30, r16
     de4:	40 81       	ld	r20, Z
     de6:	51 81       	ldd	r21, Z+1	; 0x01
     de8:	02 c0       	rjmp	.+4      	; 0xdee <__vector_9+0x84>
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	8c 2f       	mov	r24, r28
     df0:	29 df       	rcall	.-430    	; 0xc44 <_Z9moveSpeedhii>
     df2:	68 ec       	ldi	r22, 0xC8	; 200
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     dfe:	de cf       	rjmp	.-68     	; 0xdbc <__vector_9+0x52>
     e00:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <buttonsFlip+0x1>
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	89 27       	eor	r24, r25
     e08:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <buttonsFlip+0x1>
     e0c:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <lastButtonPressed>
     e10:	2f 98       	cbi	0x05, 7	; 5
     e12:	19 9b       	sbis	0x03, 1	; 3
     e14:	3e c0       	rjmp	.+124    	; 0xe92 <__vector_9+0x128>
     e16:	2f 9a       	sbi	0x05, 7	; 5
     e18:	fb e0       	ldi	r31, 0x0B	; 11
     e1a:	cf 9f       	mul	r28, r31
     e1c:	80 01       	movw	r16, r0
     e1e:	11 24       	eor	r1, r1
     e20:	08 5c       	subi	r16, 0xC8	; 200
     e22:	1c 4f       	sbci	r17, 0xFC	; 252
     e24:	78 01       	movw	r14, r16
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	e8 0e       	add	r14, r24
     e2a:	f1 1c       	adc	r15, r1
     e2c:	08 5f       	subi	r16, 0xF8	; 248
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	19 9b       	sbis	0x03, 1	; 3
     e32:	25 c0       	rjmp	.+74     	; 0xe7e <__vector_9+0x114>
     e34:	f7 01       	movw	r30, r14
     e36:	60 81       	ld	r22, Z
     e38:	71 81       	ldd	r23, Z+1	; 0x01
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	71 83       	std	Z+1, r23	; 0x01
     e40:	60 83       	st	Z, r22
     e42:	c3 30       	cpi	r28, 0x03	; 3
     e44:	68 f4       	brcc	.+26     	; 0xe60 <__vector_9+0xf6>
     e46:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <lastButtonPressed>
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	21 f4       	brne	.+8      	; 0xe56 <__vector_9+0xec>
     e4e:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <buttonsFlip+0x2>
     e52:	81 11       	cpse	r24, r1
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <__vector_9+0xfe>
     e56:	f8 01       	movw	r30, r16
     e58:	40 81       	ld	r20, Z
     e5a:	51 81       	ldd	r21, Z+1	; 0x01
     e5c:	5c 5f       	subi	r21, 0xFC	; 252
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <__vector_9+0x102>
     e60:	f8 01       	movw	r30, r16
     e62:	40 81       	ld	r20, Z
     e64:	51 81       	ldd	r21, Z+1	; 0x01
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <__vector_9+0x102>
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	54 e0       	ldi	r21, 0x04	; 4
     e6c:	8c 2f       	mov	r24, r28
     e6e:	ea de       	rcall	.-556    	; 0xc44 <_Z9moveSpeedhii>
     e70:	68 ec       	ldi	r22, 0xC8	; 200
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     e7c:	d9 cf       	rjmp	.-78     	; 0xe30 <__vector_9+0xc6>
     e7e:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <buttonsFlip+0x2>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	89 27       	eor	r24, r25
     e86:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <buttonsFlip+0x2>
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <lastButtonPressed>
     e90:	2f 98       	cbi	0x05, 7	; 5
     e92:	1a 9b       	sbis	0x03, 2	; 3
     e94:	48 c0       	rjmp	.+144    	; 0xf26 <__vector_9+0x1bc>
     e96:	2f 9a       	sbi	0x05, 7	; 5
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	1a 9b       	sbis	0x03, 2	; 3
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <__vector_9+0x148>
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     eac:	0f 5f       	subi	r16, 0xFF	; 255
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
     eb0:	f5 cf       	rjmp	.-22     	; 0xe9c <__vector_9+0x132>
     eb2:	09 3e       	cpi	r16, 0xE9	; 233
     eb4:	13 40       	sbci	r17, 0x03	; 3
     eb6:	38 f0       	brcs	.+14     	; 0xec6 <__vector_9+0x15c>
     eb8:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <__data_end>
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	89 27       	eor	r24, r25
     ec0:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <__data_end>
     ec4:	20 c0       	rjmp	.+64     	; 0xf06 <__vector_9+0x19c>
     ec6:	c3 30       	cpi	r28, 0x03	; 3
     ec8:	68 f4       	brcc	.+26     	; 0xee4 <__vector_9+0x17a>
     eca:	8b e0       	ldi	r24, 0x0B	; 11
     ecc:	c8 9f       	mul	r28, r24
     ece:	f0 01       	movw	r30, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	e8 5c       	subi	r30, 0xC8	; 200
     ed4:	fc 4f       	sbci	r31, 0xFC	; 252
     ed6:	64 81       	ldd	r22, Z+4	; 0x04
     ed8:	75 81       	ldd	r23, Z+5	; 0x05
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	8c 2f       	mov	r24, r28
     ee0:	b1 de       	rcall	.-670    	; 0xc44 <_Z9moveSpeedhii>
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__vector_9+0x17e>
     ee4:	c5 30       	cpi	r28, 0x05	; 5
     ee6:	18 f4       	brcc	.+6      	; 0xeee <__vector_9+0x184>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	8c 0f       	add	r24, r28
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <__vector_9+0x186>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <arm>
     ef4:	84 30       	cpi	r24, 0x04	; 4
     ef6:	10 f0       	brcs	.+4      	; 0xefc <__vector_9+0x192>
     ef8:	34 df       	rcall	.-408    	; 0xd62 <_Z12setModeJointh>
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <__vector_9+0x19c>
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	11 f4       	brne	.+4      	; 0xf04 <__vector_9+0x19a>
     f00:	32 df       	rcall	.-412    	; 0xd66 <_Z16setModeMultiTurnh>
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <__vector_9+0x19c>
     f04:	2c df       	rcall	.-424    	; 0xd5e <_Z12setModeWheelh>
     f06:	64 e1       	ldi	r22, 0x14	; 20
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     f12:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <lastButtonPressed>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	89 27       	eor	r24, r25
     f1a:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <lastButtonPressed>
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <lastButtonPressed>
     f24:	2f 98       	cbi	0x05, 7	; 5
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	cf 91       	pop	r28
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	0f 90       	pop	r0
     f4a:	0b be       	out	0x3b, r0	; 59
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <_Z9readServohhh>:
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	08 2f       	mov	r16, r24
     f60:	16 2f       	mov	r17, r22
     f62:	d4 2f       	mov	r29, r20
     f64:	c6 e0       	ldi	r28, 0x06	; 6
     f66:	c4 0f       	add	r28, r20
     f68:	c6 0f       	add	r28, r22
     f6a:	c8 0f       	add	r28, r24
     f6c:	c0 95       	com	r28
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <serialWriting>
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	94 e0       	ldi	r25, 0x04	; 4
     f78:	d4 d6       	rcall	.+3496   	; 0x1d22 <_ZN14HardwareSerial9availableEv>
     f7a:	89 2b       	or	r24, r25
     f7c:	21 f0       	breq	.+8      	; 0xf86 <_Z9readServohhh+0x30>
     f7e:	80 e2       	ldi	r24, 0x20	; 32
     f80:	94 e0       	ldi	r25, 0x04	; 4
     f82:	e9 d6       	rcall	.+3538   	; 0x1d56 <_ZN14HardwareSerial4readEv>
     f84:	f7 cf       	rjmp	.-18     	; 0xf74 <_Z9readServohhh+0x1e>
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	0e 94 08 14 	call	0x2810	; 0x2810 <digitalWrite>
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	0e 94 08 14 	call	0x2810	; 0x2810 <digitalWrite>
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
     fa2:	6f ef       	ldi	r22, 0xFF	; 255
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 e2       	ldi	r24, 0x20	; 32
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	a8 d9       	rcall	.-3248   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     fac:	6f ef       	ldi	r22, 0xFF	; 255
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	80 e2       	ldi	r24, 0x20	; 32
     fb2:	94 e0       	ldi	r25, 0x04	; 4
     fb4:	a3 d9       	rcall	.-3258   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     fb6:	60 2f       	mov	r22, r16
     fb8:	80 e2       	ldi	r24, 0x20	; 32
     fba:	94 e0       	ldi	r25, 0x04	; 4
     fbc:	4c d7       	rcall	.+3736   	; 0x1e56 <_ZN14HardwareSerial5writeEh>
     fbe:	64 e0       	ldi	r22, 0x04	; 4
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	80 e2       	ldi	r24, 0x20	; 32
     fc4:	94 e0       	ldi	r25, 0x04	; 4
     fc6:	9a d9       	rcall	.-3276   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     fc8:	62 e0       	ldi	r22, 0x02	; 2
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 e2       	ldi	r24, 0x20	; 32
     fce:	94 e0       	ldi	r25, 0x04	; 4
     fd0:	95 d9       	rcall	.-3286   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     fd2:	61 2f       	mov	r22, r17
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	94 e0       	ldi	r25, 0x04	; 4
     fd8:	3e d7       	rcall	.+3708   	; 0x1e56 <_ZN14HardwareSerial5writeEh>
     fda:	6d 2f       	mov	r22, r29
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	94 e0       	ldi	r25, 0x04	; 4
     fe0:	3a d7       	rcall	.+3700   	; 0x1e56 <_ZN14HardwareSerial5writeEh>
     fe2:	6c 2f       	mov	r22, r28
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	94 e0       	ldi	r25, 0x04	; 4
     fe8:	36 d7       	rcall	.+3692   	; 0x1e56 <_ZN14HardwareSerial5writeEh>
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	94 e0       	ldi	r25, 0x04	; 4
     fee:	7f d7       	rcall	.+3838   	; 0x1eee <_ZN14HardwareSerial5flushEv>
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	0e 94 08 14 	call	0x2810	; 0x2810 <digitalWrite>
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	0e 94 08 14 	call	0x2810	; 0x2810 <digitalWrite>
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
    100c:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <serialWriting>
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	08 95       	ret

0000101a <_Z7getDatahh>:
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData) {
    101a:	6f 92       	push	r6
    101c:	7f 92       	push	r7
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	62 97       	sbiw	r28, 0x12	; 18
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	f8 2e       	mov	r15, r24
    1048:	e6 2e       	mov	r14, r22
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
    104a:	63 ef       	ldi	r22, 0xF3	; 243
    104c:	72 e0       	ldi	r23, 0x02	; 2
    104e:	ce 01       	movw	r24, r28
    1050:	0d 96       	adiw	r24, 0x0d	; 13
    1052:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
	
	readServo(id, ctrlData, 2);
    1056:	42 e0       	ldi	r20, 0x02	; 2
    1058:	6e 2d       	mov	r22, r14
    105a:	8f 2d       	mov	r24, r15
    105c:	7c df       	rcall	.-264    	; 0xf56 <_Z9readServohhh>
	delay(10);
    105e:	6a e0       	ldi	r22, 0x0A	; 10
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <delay>
	serialReading = YES;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <serialReading>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
    1070:	80 e2       	ldi	r24, 0x20	; 32
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	70 d6       	rcall	.+3296   	; 0x1d56 <_ZN14HardwareSerial4readEv>
    1076:	f8 2e       	mov	r15, r24
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
    1078:	80 e2       	ldi	r24, 0x20	; 32
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	6c d6       	rcall	.+3288   	; 0x1d56 <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	f9 12       	cpse	r15, r25
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <_Z7getDatahh+0x6e>
    1084:	8f 3f       	cpi	r24, 0xFF	; 255
    1086:	09 f1       	breq	.+66     	; 0x10ca <_Z7getDatahh+0xb0>
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //5
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//6
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
    1088:	e1 2c       	mov	r14, r1
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	94 e0       	ldi	r25, 0x04	; 4
    108e:	49 d6       	rcall	.+3218   	; 0x1d22 <_ZN14HardwareSerial9availableEv>
    1090:	89 2b       	or	r24, r25
    1092:	21 f0       	breq	.+8      	; 0x109c <_Z7getDatahh+0x82>
    1094:	80 e2       	ldi	r24, 0x20	; 32
    1096:	94 e0       	ldi	r25, 0x04	; 4
    1098:	5e d6       	rcall	.+3260   	; 0x1d56 <_ZN14HardwareSerial4readEv>
    109a:	f7 cf       	rjmp	.-18     	; 0x108a <_Z7getDatahh+0x70>
	serialReading = NO;
    109c:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <serialReading>
	Serial.println(line);
    10a0:	be 01       	movw	r22, r28
    10a2:	63 5f       	subi	r22, 0xF3	; 243
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	83 e8       	ldi	r24, 0x83	; 131
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN5Print7printlnERK6String>
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
    10ae:	ee 20       	and	r14, r14
    10b0:	49 f0       	breq	.+18     	; 0x10c4 <_Z7getDatahh+0xaa>
    10b2:	bb 20       	and	r11, r11
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <_Z7getDatahh+0x9e>
    10b6:	09 c1       	rjmp	.+530    	; 0x12ca <_Z7getDatahh+0x2b0>
    10b8:	0b 2d       	mov	r16, r11
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	11 95       	neg	r17
    10be:	01 95       	neg	r16
    10c0:	11 09       	sbc	r17, r1
    10c2:	03 c1       	rjmp	.+518    	; 0x12ca <_Z7getDatahh+0x2b0>
    10c4:	01 e0       	ldi	r16, 0x01	; 1
    10c6:	1f ef       	ldi	r17, 0xFF	; 255
	msgByte = Serial1.read();									// 02 : Start 2/2
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
	if (msgStarted) {
		msgId = Serial1.read();
    10c8:	00 c1       	rjmp	.+512    	; 0x12ca <_Z7getDatahh+0x2b0>
    10ca:	80 e2       	ldi	r24, 0x20	; 32
    10cc:	94 e0       	ldi	r25, 0x04	; 4
    10ce:	43 d6       	rcall	.+3206   	; 0x1d56 <_ZN14HardwareSerial4readEv>
		line = "ID:" + padNumber(msgId, 6);							//1
    10d0:	3c 01       	movw	r6, r24
    10d2:	bc 01       	movw	r22, r24
    10d4:	77 27       	eor	r23, r23
    10d6:	46 e0       	ldi	r20, 0x06	; 6
    10d8:	ce 01       	movw	r24, r28
    10da:	07 96       	adiw	r24, 0x07	; 7
    10dc:	b7 d9       	rcall	.-3218   	; 0x44c <_Z9padNumberih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    10de:	63 ec       	ldi	r22, 0xC3	; 195
    10e0:	72 e0       	ldi	r23, 0x02	; 2
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
    10ea:	be 01       	movw	r22, r28
    10ec:	69 5f       	subi	r22, 0xF9	; 249
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	ce 01       	movw	r24, r28
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_ZplRK15StringSumHelperRK6String>
    10f8:	bc 01       	movw	r22, r24
    10fa:	ce 01       	movw	r24, r28
    10fc:	0d 96       	adiw	r24, 0x0d	; 13
    10fe:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
    110a:	ce 01       	movw	r24, r28
    110c:	07 96       	adiw	r24, 0x07	; 7
    110e:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
		msgLength = Serial1.read();
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	94 e0       	ldi	r25, 0x04	; 4
    1116:	1f d6       	rcall	.+3134   	; 0x1d56 <_ZN14HardwareSerial4readEv>
		line = line + ", MsgLegth:" + padNumber(msgLength, 6);		//2
    1118:	5c 01       	movw	r10, r24
    111a:	bc 01       	movw	r22, r24
    111c:	77 27       	eor	r23, r23
    111e:	46 e0       	ldi	r20, 0x06	; 6
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	93 d9       	rcall	.-3290   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1126:	be 01       	movw	r22, r28
    1128:	63 5f       	subi	r22, 0xF3	; 243
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	ce 01       	movw	r24, r28
    112e:	07 96       	adiw	r24, 0x07	; 7
    1130:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN6StringC1ERKS_>
    1134:	63 e8       	ldi	r22, 0x83	; 131
    1136:	72 e0       	ldi	r23, 0x02	; 2
    1138:	ce 01       	movw	r24, r28
    113a:	07 96       	adiw	r24, 0x07	; 7
    113c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZplRK15StringSumHelperPKc>
    1140:	be 01       	movw	r22, r28
    1142:	6f 5f       	subi	r22, 0xFF	; 255
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_ZplRK15StringSumHelperRK6String>
    114a:	bc 01       	movw	r22, r24
    114c:	ce 01       	movw	r24, r28
    114e:	0d 96       	adiw	r24, 0x0d	; 13
    1150:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1154:	ce 01       	movw	r24, r28
    1156:	07 96       	adiw	r24, 0x07	; 7
    1158:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
		msgError = Serial1.read();
    1164:	80 e2       	ldi	r24, 0x20	; 32
    1166:	94 e0       	ldi	r25, 0x04	; 4
    1168:	f6 d5       	rcall	.+3052   	; 0x1d56 <_ZN14HardwareSerial4readEv>
    116a:	6c 01       	movw	r12, r24
		line = line + ", Error:" + padNumber(msgError, 6);			//3
    116c:	b8 2e       	mov	r11, r24
    116e:	bc 01       	movw	r22, r24
    1170:	77 27       	eor	r23, r23
    1172:	46 e0       	ldi	r20, 0x06	; 6
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	69 d9       	rcall	.-3374   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    117a:	be 01       	movw	r22, r28
    117c:	63 5f       	subi	r22, 0xF3	; 243
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	ce 01       	movw	r24, r28
    1182:	07 96       	adiw	r24, 0x07	; 7
    1184:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN6StringC1ERKS_>
    1188:	6f e8       	ldi	r22, 0x8F	; 143
    118a:	72 e0       	ldi	r23, 0x02	; 2
    118c:	ce 01       	movw	r24, r28
    118e:	07 96       	adiw	r24, 0x07	; 7
    1190:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZplRK15StringSumHelperPKc>
    1194:	be 01       	movw	r22, r28
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_ZplRK15StringSumHelperRK6String>
    119e:	bc 01       	movw	r22, r24
    11a0:	ce 01       	movw	r24, r28
    11a2:	0d 96       	adiw	r24, 0x0d	; 13
    11a4:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    11a8:	ce 01       	movw	r24, r28
    11aa:	07 96       	adiw	r24, 0x07	; 7
    11ac:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
		msgData_1 = Serial1.read();
    11b4:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
    11b8:	80 e2       	ldi	r24, 0x20	; 32
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	cc d5       	rcall	.+2968   	; 0x1d56 <_ZN14HardwareSerial4readEv>
		msgData_2 = Serial1.read();
    11be:	f8 2e       	mov	r15, r24
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	94 e0       	ldi	r25, 0x04	; 4
    11c4:	c8 d5       	rcall	.+2960   	; 0x1d56 <_ZN14HardwareSerial4readEv>
	response = sprintf(tmp, "%%%dd", padding);
	response = sprintf(buffer, tmp, value);
	return buffer;
}

int combineBytes(uint8_t byte_1, uint8_t byte_2) { return byte_1 + (byte_2<<8); }
    11c6:	e8 2e       	mov	r14, r24
    11c8:	98 2e       	mov	r9, r24
    11ca:	81 2c       	mov	r8, r1
    11cc:	84 01       	movw	r16, r8
    11ce:	0f 0d       	add	r16, r15
		msgError = Serial1.read();
		line = line + ", Error:" + padNumber(msgError, 6);			//3
		msgData_1 = Serial1.read();
		msgData_2 = Serial1.read();
		msgData = combineBytes(msgData_1, msgData_2);
		line = line + ", Data:" + padNumber(msgData, 6);			//4
    11d0:	11 1d       	adc	r17, r1
    11d2:	46 e0       	ldi	r20, 0x06	; 6
    11d4:	b8 01       	movw	r22, r16
    11d6:	ce 01       	movw	r24, r28
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	38 d9       	rcall	.-3472   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    11dc:	be 01       	movw	r22, r28
    11de:	63 5f       	subi	r22, 0xF3	; 243
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	ce 01       	movw	r24, r28
    11e4:	07 96       	adiw	r24, 0x07	; 7
    11e6:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN6StringC1ERKS_>
    11ea:	68 e9       	ldi	r22, 0x98	; 152
    11ec:	72 e0       	ldi	r23, 0x02	; 2
    11ee:	ce 01       	movw	r24, r28
    11f0:	07 96       	adiw	r24, 0x07	; 7
    11f2:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZplRK15StringSumHelperPKc>
    11f6:	be 01       	movw	r22, r28
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_ZplRK15StringSumHelperRK6String>
    1200:	bc 01       	movw	r22, r24
    1202:	ce 01       	movw	r24, r28
    1204:	0d 96       	adiw	r24, 0x0d	; 13
    1206:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    120a:	ce 01       	movw	r24, r28
    120c:	07 96       	adiw	r24, 0x07	; 7
    120e:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
    1212:	ce 01       	movw	r24, r28
    1214:	01 96       	adiw	r24, 0x01	; 1
		msgChecksum = Serial1.read();
    1216:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	94 e0       	ldi	r25, 0x04	; 4
    121e:	9b d5       	rcall	.+2870   	; 0x1d56 <_ZN14HardwareSerial4readEv>
		line = line + ", MsgCheckSum:" + padNumber(msgChecksum, 6); //5
    1220:	4c 01       	movw	r8, r24
    1222:	bc 01       	movw	r22, r24
    1224:	77 27       	eor	r23, r23
    1226:	46 e0       	ldi	r20, 0x06	; 6
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	0f d9       	rcall	.-3554   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    122e:	be 01       	movw	r22, r28
    1230:	63 5f       	subi	r22, 0xF3	; 243
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	ce 01       	movw	r24, r28
    1236:	07 96       	adiw	r24, 0x07	; 7
    1238:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN6StringC1ERKS_>
    123c:	60 ea       	ldi	r22, 0xA0	; 160
    123e:	72 e0       	ldi	r23, 0x02	; 2
    1240:	ce 01       	movw	r24, r28
    1242:	07 96       	adiw	r24, 0x07	; 7
    1244:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZplRK15StringSumHelperPKc>
    1248:	be 01       	movw	r22, r28
    124a:	6f 5f       	subi	r22, 0xFF	; 255
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_ZplRK15StringSumHelperRK6String>
    1252:	bc 01       	movw	r22, r24
    1254:	ce 01       	movw	r24, r28
    1256:	0d 96       	adiw	r24, 0x0d	; 13
    1258:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    125c:	ce 01       	movw	r24, r28
    125e:	07 96       	adiw	r24, 0x07	; 7
    1260:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
    126c:	a6 0c       	add	r10, r6
    126e:	ca 0c       	add	r12, r10
    1270:	fc 0c       	add	r15, r12
    1272:	fe 0c       	add	r15, r14
		line = line + ", CalCheckSum:" + padNumber(Checksum, 6);	//6
    1274:	f0 94       	com	r15
    1276:	6f 2d       	mov	r22, r15
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	46 e0       	ldi	r20, 0x06	; 6
    127c:	ce 01       	movw	r24, r28
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	e5 d8       	rcall	.-3638   	; 0x44c <_Z9padNumberih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1282:	be 01       	movw	r22, r28
    1284:	63 5f       	subi	r22, 0xF3	; 243
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	ce 01       	movw	r24, r28
    128a:	07 96       	adiw	r24, 0x07	; 7
    128c:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN6StringC1ERKS_>
    1290:	6f ea       	ldi	r22, 0xAF	; 175
    1292:	72 e0       	ldi	r23, 0x02	; 2
    1294:	ce 01       	movw	r24, r28
    1296:	07 96       	adiw	r24, 0x07	; 7
    1298:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZplRK15StringSumHelperPKc>
    129c:	be 01       	movw	r22, r28
    129e:	6f 5f       	subi	r22, 0xFF	; 255
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_ZplRK15StringSumHelperRK6String>
    12a6:	bc 01       	movw	r22, r24
    12a8:	ce 01       	movw	r24, r28
    12aa:	0d 96       	adiw	r24, 0x0d	; 13
    12ac:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    12b0:	ce 01       	movw	r24, r28
    12b2:	07 96       	adiw	r24, 0x07	; 7
    12b4:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
    12c0:	ee 24       	eor	r14, r14
    12c2:	e3 94       	inc	r14
    12c4:	f8 10       	cpse	r15, r8
    12c6:	e0 ce       	rjmp	.-576    	; 0x1088 <_Z7getDatahh+0x6e>
    12c8:	e0 ce       	rjmp	.-576    	; 0x108a <_Z7getDatahh+0x70>
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	int msgData;
	String line;
    12ca:	ce 01       	movw	r24, r28
    12cc:	0d 96       	adiw	r24, 0x0d	; 13
    12ce:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
	Serial.println(line);
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
}
    12d2:	c8 01       	movw	r24, r16
    12d4:	62 96       	adiw	r28, 0x12	; 18
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	bf 90       	pop	r11
    12f2:	af 90       	pop	r10
    12f4:	9f 90       	pop	r9
    12f6:	8f 90       	pop	r8
    12f8:	7f 90       	pop	r7
    12fa:	6f 90       	pop	r6
    12fc:	08 95       	ret

000012fe <loop>:
/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {
	int incomingByte = 0;
	readServo(arm.id, MX_PRESENT_POSITION_L, 34);
    12fe:	42 e2       	ldi	r20, 0x22	; 34
    1300:	64 e2       	ldi	r22, 0x24	; 36
    1302:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <arm>
    1306:	27 de       	rcall	.-946    	; 0xf56 <_Z9readServohhh>
	printDataLCD();
    1308:	49 da       	rcall	.-2926   	; 0x79c <_Z12printDataLCDv>
    130a:	68 e2       	ldi	r22, 0x28	; 40
	int new_reading;
	bool new_direction;
	int speedo;
	/* Load 4  - Reading */
	new_reading = getData(ARM_ID4, MX_PRESENT_LOAD_L);
    130c:	84 e0       	ldi	r24, 0x04	; 4
    130e:	85 de       	rcall	.-758    	; 0x101a <_Z7getDatahh>
    1310:	18 16       	cp	r1, r24
	if (new_reading > 0) {
    1312:	19 06       	cpc	r1, r25
    1314:	8c f4       	brge	.+34     	; 0x1338 <loop+0x3a>
    1316:	21 e0       	ldi	r18, 0x01	; 1
		load_4_dir = getDirection(new_reading);
    1318:	81 15       	cp	r24, r1
    131a:	34 e0       	ldi	r19, 0x04	; 4
    131c:	93 07       	cpc	r25, r19
    131e:	0c f4       	brge	.+2      	; 0x1322 <loop+0x24>
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	20 93 20 03 	sts	0x0320, r18	; 0x800320 <load_4_dir>
    1326:	81 15       	cp	r24, r1
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    1328:	24 e0       	ldi	r18, 0x04	; 4
    132a:	92 07       	cpc	r25, r18
    132c:	0c f0       	brlt	.+2      	; 0x1330 <loop+0x32>
    132e:	94 50       	subi	r25, 0x04	; 4
    1330:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <load_4+0x1>
	int speedo;
	/* Load 4  - Reading */
	new_reading = getData(ARM_ID4, MX_PRESENT_LOAD_L);
	if (new_reading > 0) {
		load_4_dir = getDirection(new_reading);
		load_4 = getRealValue(new_reading);
    1334:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <load_4>
    1338:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <load_4>
	} else { // use the old values
		load_4_dir = load_4_dir;
		load_4 = load_4; 
	}
	arm.servos[ARM_ID4].load = load_4; 
    133c:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <load_4+0x1>
    1340:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <arm+0x37>
    1344:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <arm+0x36>
    1348:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <load_4_dir>
	arm.servos[ARM_ID4].loadDirection = load_4_dir; 
    134c:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <arm+0x38>
	/* Load 5 - Reading */
	new_reading = getData(ARM_ID5, MX_PRESENT_LOAD_L);
    1350:	68 e2       	ldi	r22, 0x28	; 40
    1352:	85 e0       	ldi	r24, 0x05	; 5
    1354:	62 de       	rcall	.-828    	; 0x101a <_Z7getDatahh>
    1356:	18 16       	cp	r1, r24
	if (new_reading > 0) {
    1358:	19 06       	cpc	r1, r25
    135a:	8c f4       	brge	.+34     	; 0x137e <loop+0x80>
    135c:	21 e0       	ldi	r18, 0x01	; 1
		load_5_dir = getDirection(new_reading);
    135e:	81 15       	cp	r24, r1
    1360:	34 e0       	ldi	r19, 0x04	; 4
    1362:	93 07       	cpc	r25, r19
    1364:	0c f4       	brge	.+2      	; 0x1368 <loop+0x6a>
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	20 93 1f 03 	sts	0x031F, r18	; 0x80031f <load_5_dir>
    136c:	81 15       	cp	r24, r1
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    136e:	24 e0       	ldi	r18, 0x04	; 4
    1370:	92 07       	cpc	r25, r18
    1372:	0c f0       	brlt	.+2      	; 0x1376 <loop+0x78>
    1374:	94 50       	subi	r25, 0x04	; 4
    1376:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <load_5+0x1>
	arm.servos[ARM_ID4].loadDirection = load_4_dir; 
	/* Load 5 - Reading */
	new_reading = getData(ARM_ID5, MX_PRESENT_LOAD_L);
	if (new_reading > 0) {
		load_5_dir = getDirection(new_reading);
		load_5 = getRealValue(new_reading);
    137a:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <load_5>
    137e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <load_5>
	} else { // use the old values
		load_5_dir = load_5_dir;
		load_5 = load_5;
	}
	arm.servos[ARM_ID5].load = load_5; 
    1382:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <load_5+0x1>
    1386:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <arm+0x42>
    138a:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <arm+0x41>
    138e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <load_5_dir>
	arm.servos[ARM_ID5].loadDirection = load_5_dir; 
    1392:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <arm+0x43>
    1396:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <__data_end>
	
	if (autoBalanceOn) {
    139a:	88 23       	and	r24, r24
    139c:	b1 f1       	breq	.+108    	; 0x140a <loop+0x10c>
    139e:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <load_4>
		/* Load 4  - Controlling */
		speedo = load_4 < ARM_LOAD_MIN_THLD
    13a2:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <load_4+0x1>
    13a6:	4e 31       	cpi	r20, 0x1E	; 30
			? 0
			: load_4 > ARM_LOAD_MAX_THLD
				? ARM_LOAD_MAX_THLD<<1
				: load_4<<1;
    13a8:	51 05       	cpc	r21, r1
    13aa:	30 f0       	brcs	.+12     	; 0x13b8 <loop+0xba>
    13ac:	4b 3f       	cpi	r20, 0xFB	; 251
    13ae:	51 05       	cpc	r21, r1
    13b0:	30 f4       	brcc	.+12     	; 0x13be <loop+0xc0>
    13b2:	44 0f       	add	r20, r20
    13b4:	55 1f       	adc	r21, r21
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <loop+0xc4>
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <loop+0xc4>
    13be:	44 ef       	ldi	r20, 0xF4	; 244
    13c0:	51 e0       	ldi	r21, 0x01	; 1
    13c2:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <load_4_dir>
		moveSpeed(ARM_ID1, 100, load_4_dir ? speedo : 0x0400 + speedo);
    13c6:	81 11       	cpse	r24, r1
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <loop+0xce>
    13ca:	5c 5f       	subi	r21, 0xFC	; 252
    13cc:	64 e6       	ldi	r22, 0x64	; 100
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	38 dc       	rcall	.-1936   	; 0xc44 <_Z9moveSpeedhii>
    13d4:	40 91 21 03 	lds	r20, 0x0321	; 0x800321 <load_5>

		/* Load 5  - Controlling */
		speedo = load_5 < ARM_LOAD_MIN_THLD
    13d8:	50 91 22 03 	lds	r21, 0x0322	; 0x800322 <load_5+0x1>
    13dc:	4e 31       	cpi	r20, 0x1E	; 30
			? 0
			: load_5 > ARM_LOAD_MAX_THLD
				? ARM_LOAD_MAX_THLD<<1
				: load_5<<1;
    13de:	51 05       	cpc	r21, r1
    13e0:	30 f0       	brcs	.+12     	; 0x13ee <loop+0xf0>
    13e2:	4b 3f       	cpi	r20, 0xFB	; 251
    13e4:	51 05       	cpc	r21, r1
    13e6:	30 f4       	brcc	.+12     	; 0x13f4 <loop+0xf6>
    13e8:	44 0f       	add	r20, r20
    13ea:	55 1f       	adc	r21, r21
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <loop+0xfa>
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <loop+0xfa>
    13f4:	44 ef       	ldi	r20, 0xF4	; 244
    13f6:	51 e0       	ldi	r21, 0x01	; 1
    13f8:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <load_5_dir>
		moveSpeed(ARM_ID2, 100, load_5_dir ? speedo : 0x0400 + speedo);
    13fc:	81 11       	cpse	r24, r1
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <loop+0x104>
    1400:	5c 5f       	subi	r21, 0xFC	; 252
    1402:	64 e6       	ldi	r22, 0x64	; 100
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	1d dc       	rcall	.-1990   	; 0xc44 <_Z9moveSpeedhii>
    140a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <arm+0x1>
	
	} else { /* if (autoBalanceOn) */ }
	if (!arm.autoBalance == autoBalanceOn) {
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	89 27       	eor	r24, r25
    1412:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <__data_end>
    1416:	89 13       	cpse	r24, r25
    1418:	2d c0       	rjmp	.+90     	; 0x1474 <loop+0x176>
    141a:	81 11       	cpse	r24, r1
		printLCD(19, 0, autoBalanceOn ? "A" : "M" );
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <loop+0x126>
    141e:	40 ec       	ldi	r20, 0xC0	; 192
    1420:	52 e0       	ldi	r21, 0x02	; 2
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <loop+0x12a>
    1424:	4e eb       	ldi	r20, 0xBE	; 190
    1426:	52 e0       	ldi	r21, 0x02	; 2
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	83 e1       	ldi	r24, 0x13	; 19
    142c:	0e 94 16 02 	call	0x42c	; 0x42c <_Z8printLCDhhPKc>
    1430:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <__data_end>
		if (!autoBalanceOn) { /* Stop servo 1 and 2 when you toggle back to Manual mode */
    1434:	81 11       	cpse	r24, r1
    1436:	1a c0       	rjmp	.+52     	; 0x146c <loop+0x16e>
    1438:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <load_4_dir>
			moveSpeed(ARM_ID1, 100, load_4_dir ? 0 : 0x0400);
    143c:	81 11       	cpse	r24, r1
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <loop+0x148>
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	54 e0       	ldi	r21, 0x04	; 4
    1444:	02 c0       	rjmp	.+4      	; 0x144a <loop+0x14c>
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	64 e6       	ldi	r22, 0x64	; 100
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	f9 db       	rcall	.-2062   	; 0xc44 <_Z9moveSpeedhii>
    1452:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <load_5_dir>
			moveSpeed(ARM_ID2, 100, load_5_dir ? 0 : 0x0400);
    1456:	81 11       	cpse	r24, r1
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <loop+0x162>
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	54 e0       	ldi	r21, 0x04	; 4
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <loop+0x166>
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	64 e6       	ldi	r22, 0x64	; 100
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	ec db       	rcall	.-2088   	; 0xc44 <_Z9moveSpeedhii>
    146c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <__data_end>
		}
		arm.autoBalance = autoBalanceOn;
    1470:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <arm+0x1>
    1474:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <load_4>
	}
	printLCD(10, 3, load_4, 4);
    1478:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <load_4+0x1>
    147c:	24 e0       	ldi	r18, 0x04	; 4
    147e:	63 e0       	ldi	r22, 0x03	; 3
    1480:	8a e0       	ldi	r24, 0x0A	; 10
    1482:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    1486:	40 91 21 03 	lds	r20, 0x0321	; 0x800321 <load_5>
	printLCD(15, 3, load_5, 4);
    148a:	50 91 22 03 	lds	r21, 0x0322	; 0x800322 <load_5+0x1>
    148e:	24 e0       	ldi	r18, 0x04	; 4
    1490:	63 e0       	ldi	r22, 0x03	; 3
    1492:	8f e0       	ldi	r24, 0x0F	; 15
    1494:	0c 94 85 01 	jmp	0x30a	; 0x30a <_Z8printLCDhhih>

00001498 <setup>:
    1498:	0f 93       	push	r16
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <setup+0xa>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <setup+0xc>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
    14a8:	2d d8       	rcall	.-4006   	; 0x504 <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
    14aa:	87 e2       	ldi	r24, 0x27	; 39
    14ac:	93 e0       	ldi	r25, 0x03	; 3
    14ae:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    14b2:	87 e2       	ldi	r24, 0x27	; 39
    14b4:	93 e0       	ldi	r25, 0x03	; 3
    14b6:	0e 94 42 15 	call	0x2a84	; 0x2a84 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    14ba:	87 e2       	ldi	r24, 0x27	; 39
    14bc:	93 e0       	ldi	r25, 0x03	; 3
    14be:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	0e 94 cc 13 	call	0x2798	; 0x2798 <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
    14ca:	61 e0       	ldi	r22, 0x01	; 1
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	0e 94 cc 13 	call	0x2798	; 0x2798 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    14d2:	26 e0       	ldi	r18, 0x06	; 6
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	51 ee       	ldi	r21, 0xE1	; 225
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	83 e8       	ldi	r24, 0x83	; 131
    14de:	93 e0       	ldi	r25, 0x03	; 3
    14e0:	27 d5       	rcall	.+2638   	; 0x1f30 <_ZN14HardwareSerial5beginEmh>
    14e2:	26 e0       	ldi	r18, 0x06	; 6
    14e4:	47 e3       	ldi	r20, 0x37	; 55
    14e6:	5f ed       	ldi	r21, 0xDF	; 223
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	94 e0       	ldi	r25, 0x04	; 4
    14f0:	1f d5       	rcall	.+2622   	; 0x1f30 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
    14f2:	80 e2       	ldi	r24, 0x20	; 32
    14f4:	94 e0       	ldi	r25, 0x04	; 4
	
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
    14f6:	fb d4       	rcall	.+2550   	; 0x1eee <_ZN14HardwareSerial5flushEv>
    14f8:	81 e0       	ldi	r24, 0x01	; 1
	setModeWheel(2);
    14fa:	31 dc       	rcall	.-1950   	; 0xd5e <_Z12setModeWheelh>
    14fc:	82 e0       	ldi	r24, 0x02	; 2
	setModeMultiTurn(3);
    14fe:	2f dc       	rcall	.-1954   	; 0xd5e <_Z12setModeWheelh>
    1500:	83 e0       	ldi	r24, 0x03	; 3
	setModeJoint(4);
    1502:	31 dc       	rcall	.-1950   	; 0xd66 <_Z16setModeMultiTurnh>
    1504:	84 e0       	ldi	r24, 0x04	; 4
    1506:	2d dc       	rcall	.-1958   	; 0xd62 <_Z12setModeJointh>
	setModeJoint(5);
    1508:	85 e0       	ldi	r24, 0x05	; 5
    150a:	2b dc       	rcall	.-1962   	; 0xd62 <_Z12setModeJointh>
    150c:	81 e0       	ldi	r24, 0x01	; 1
	
	arm.id = ARM_ID1;
    150e:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <arm>
    1512:	84 ef       	ldi	r24, 0xF4	; 244
	/* Set the speeds of the servos */
	arm.servos[1].speed = 500;
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <arm+0x14>
    151a:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <arm+0x13>
    151e:	84 e6       	ldi	r24, 0x64	; 100
	arm.servos[2].speed = 100;
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <arm+0x1f>
    1526:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <arm+0x1e>
    152a:	8e e1       	ldi	r24, 0x1E	; 30
	arm.servos[3].speed = 30;
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <arm+0x2a>
    1532:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <arm+0x29>
    1536:	8f e0       	ldi	r24, 0x0F	; 15
	arm.servos[4].speed = 15;
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <arm+0x35>
    153e:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <arm+0x34>
    1542:	84 e1       	ldi	r24, 0x14	; 20
	arm.servos[5].speed = 20;
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <arm+0x40>
    154a:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <arm+0x3f>
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    154e:	11 e0       	ldi	r17, 0x01	; 1
		setTorqueLimit(i, MAX_TORQUE);
    1550:	6f ef       	ldi	r22, 0xFF	; 255
    1552:	73 e0       	ldi	r23, 0x03	; 3
    1554:	81 2f       	mov	r24, r17
    1556:	aa db       	rcall	.-2220   	; 0xcac <_Z14setTorqueLimithi>
    1558:	1f 5f       	subi	r17, 0xFF	; 255
	arm.servos[2].speed = 100;
	arm.servos[3].speed = 30;
	arm.servos[4].speed = 15;
	arm.servos[5].speed = 20;
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    155a:	16 30       	cpi	r17, 0x06	; 6
    155c:	c9 f7       	brne	.-14     	; 0x1550 <setup+0xb8>
    155e:	40 e0       	ldi	r20, 0x00	; 0
		setTorqueLimit(i, MAX_TORQUE);
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	87 e2       	ldi	r24, 0x27	; 39
    1564:	93 e0       	ldi	r25, 0x03	; 3
    1566:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("sID:");
    156a:	62 ec       	ldi	r22, 0xC2	; 194
    156c:	72 e0       	ldi	r23, 0x02	; 2
    156e:	87 e2       	ldi	r24, 0x27	; 39
    1570:	93 e0       	ldi	r25, 0x03	; 3
    1572:	c9 d6       	rcall	.+3474   	; 0x2306 <_ZN5Print5printEPKc>
    1574:	41 e0       	ldi	r20, 0x01	; 1
	lcd.setCursor(0,1);
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	87 e2       	ldi	r24, 0x27	; 39
    157a:	93 e0       	ldi	r25, 0x03	; 3
    157c:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("deg:");
    1580:	67 ec       	ldi	r22, 0xC7	; 199
    1582:	72 e0       	ldi	r23, 0x02	; 2
    1584:	87 e2       	ldi	r24, 0x27	; 39
    1586:	93 e0       	ldi	r25, 0x03	; 3
    1588:	be d6       	rcall	.+3452   	; 0x2306 <_ZN5Print5printEPKc>
	lcd.setCursor(0,2);
    158a:	42 e0       	ldi	r20, 0x02	; 2
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	87 e2       	ldi	r24, 0x27	; 39
    1590:	93 e0       	ldi	r25, 0x03	; 3
    1592:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("rpm:");
    1596:	6c ec       	ldi	r22, 0xCC	; 204
    1598:	72 e0       	ldi	r23, 0x02	; 2
    159a:	87 e2       	ldi	r24, 0x27	; 39
    159c:	93 e0       	ldi	r25, 0x03	; 3
    159e:	b3 d6       	rcall	.+3430   	; 0x2306 <_ZN5Print5printEPKc>
	lcd.setCursor(0,3);
    15a0:	43 e0       	ldi	r20, 0x03	; 3
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	87 e2       	ldi	r24, 0x27	; 39
    15a6:	93 e0       	ldi	r25, 0x03	; 3
	lcd.print("ld%:");
    15a8:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    15ac:	61 ed       	ldi	r22, 0xD1	; 209
    15ae:	72 e0       	ldi	r23, 0x02	; 2
    15b0:	87 e2       	ldi	r24, 0x27	; 39
	readServo(arm.id, MX_TORQUE_ENABLE, 8);
    15b2:	93 e0       	ldi	r25, 0x03	; 3
    15b4:	a8 d6       	rcall	.+3408   	; 0x2306 <_ZN5Print5printEPKc>
    15b6:	48 e0       	ldi	r20, 0x08	; 8
    15b8:	68 e1       	ldi	r22, 0x18	; 24
    15ba:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <arm>
	printBuffer();
    15be:	cb dc       	rcall	.-1642   	; 0xf56 <_Z9readServohhh>
	delay(2);
    15c0:	a2 d8       	rcall	.-3772   	; 0x706 <_Z11printBufferv>
    15c2:	62 e0       	ldi	r22, 0x02	; 2
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	eb d7       	rcall	.+4054   	; 0x25a2 <delay>
	int somthe = getData(5, MX_CURRENT_L);
    15cc:	64 e4       	ldi	r22, 0x44	; 68
    15ce:	85 e0       	ldi	r24, 0x05	; 5
    15d0:	24 dd       	rcall	.-1464   	; 0x101a <_Z7getDatahh>
    15d2:	8c 01       	movw	r16, r24
void printLCD(uint8_t col, uint8_t row, const char* text) {
	lcd.setCursor(col, row);
	lcd.print(text);
}
/* Get Real Value from Raw Value. Works for Speed and Load */ 
int getRealValue(int rawValue) { return (rawValue > 0x3FF) ? rawValue - 0x400 : rawValue; }
    15d4:	81 15       	cp	r24, r1
    15d6:	94 40       	sbci	r25, 0x04	; 4
    15d8:	0c f0       	brlt	.+2      	; 0x15dc <setup+0x144>
    15da:	14 50       	subi	r17, 0x04	; 4
    15dc:	66 ed       	ldi	r22, 0xD6	; 214
	lcd.print("ld%:");
	readServo(arm.id, MX_TORQUE_ENABLE, 8);
	printBuffer();
	delay(2);
	int somthe = getData(5, MX_CURRENT_L);
	printSerial("return: ", getRealValue(somthe));
    15de:	72 e0       	ldi	r23, 0x02	; 2
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringC1EPKc>
    15e8:	b8 01       	movw	r22, r16
    15ea:	ce 01       	movw	r24, r28
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	0e 94 bd 02 	call	0x57a	; 0x57a <_Z11printSerial6Stringi>
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN6StringD1Ev>
    15fa:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <__data_end>
	printLCD(19, 0, autoBalanceOn ? "A" : "M" );
    15fe:	81 11       	cpse	r24, r1
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <setup+0x170>
    1602:	40 ec       	ldi	r20, 0xC0	; 192
    1604:	52 e0       	ldi	r21, 0x02	; 2
    1606:	02 c0       	rjmp	.+4      	; 0x160c <setup+0x174>
    1608:	4e eb       	ldi	r20, 0xBE	; 190
    160a:	52 e0       	ldi	r21, 0x02	; 2
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	83 e1       	ldi	r24, 0x13	; 19
    1610:	0e 94 16 02 	call	0x42c	; 0x42c <_Z8printLCDhhPKc>
    1614:	26 96       	adiw	r28, 0x06	; 6
	//printBuffer();
}
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <__subsf3>:
    162a:	50 58       	subi	r21, 0x80	; 128

0000162c <__addsf3>:
    162c:	bb 27       	eor	r27, r27
    162e:	aa 27       	eor	r26, r26
    1630:	0e d0       	rcall	.+28     	; 0x164e <__addsf3x>
    1632:	0d c1       	rjmp	.+538    	; 0x184e <__fp_round>
    1634:	fe d0       	rcall	.+508    	; 0x1832 <__fp_pscA>
    1636:	30 f0       	brcs	.+12     	; 0x1644 <__addsf3+0x18>
    1638:	03 d1       	rcall	.+518    	; 0x1840 <__fp_pscB>
    163a:	20 f0       	brcs	.+8      	; 0x1644 <__addsf3+0x18>
    163c:	31 f4       	brne	.+12     	; 0x164a <__addsf3+0x1e>
    163e:	9f 3f       	cpi	r25, 0xFF	; 255
    1640:	11 f4       	brne	.+4      	; 0x1646 <__addsf3+0x1a>
    1642:	1e f4       	brtc	.+6      	; 0x164a <__addsf3+0x1e>
    1644:	f3 c0       	rjmp	.+486    	; 0x182c <__fp_nan>
    1646:	0e f4       	brtc	.+2      	; 0x164a <__addsf3+0x1e>
    1648:	e0 95       	com	r30
    164a:	e7 fb       	bst	r30, 7
    164c:	e9 c0       	rjmp	.+466    	; 0x1820 <__fp_inf>

0000164e <__addsf3x>:
    164e:	e9 2f       	mov	r30, r25
    1650:	0f d1       	rcall	.+542    	; 0x1870 <__fp_split3>
    1652:	80 f3       	brcs	.-32     	; 0x1634 <__addsf3+0x8>
    1654:	ba 17       	cp	r27, r26
    1656:	62 07       	cpc	r22, r18
    1658:	73 07       	cpc	r23, r19
    165a:	84 07       	cpc	r24, r20
    165c:	95 07       	cpc	r25, r21
    165e:	18 f0       	brcs	.+6      	; 0x1666 <__addsf3x+0x18>
    1660:	71 f4       	brne	.+28     	; 0x167e <__addsf3x+0x30>
    1662:	9e f5       	brtc	.+102    	; 0x16ca <__addsf3x+0x7c>
    1664:	27 c1       	rjmp	.+590    	; 0x18b4 <__fp_zero>
    1666:	0e f4       	brtc	.+2      	; 0x166a <__addsf3x+0x1c>
    1668:	e0 95       	com	r30
    166a:	0b 2e       	mov	r0, r27
    166c:	ba 2f       	mov	r27, r26
    166e:	a0 2d       	mov	r26, r0
    1670:	0b 01       	movw	r0, r22
    1672:	b9 01       	movw	r22, r18
    1674:	90 01       	movw	r18, r0
    1676:	0c 01       	movw	r0, r24
    1678:	ca 01       	movw	r24, r20
    167a:	a0 01       	movw	r20, r0
    167c:	11 24       	eor	r1, r1
    167e:	ff 27       	eor	r31, r31
    1680:	59 1b       	sub	r21, r25
    1682:	99 f0       	breq	.+38     	; 0x16aa <__addsf3x+0x5c>
    1684:	59 3f       	cpi	r21, 0xF9	; 249
    1686:	50 f4       	brcc	.+20     	; 0x169c <__addsf3x+0x4e>
    1688:	50 3e       	cpi	r21, 0xE0	; 224
    168a:	68 f1       	brcs	.+90     	; 0x16e6 <__addsf3x+0x98>
    168c:	1a 16       	cp	r1, r26
    168e:	f0 40       	sbci	r31, 0x00	; 0
    1690:	a2 2f       	mov	r26, r18
    1692:	23 2f       	mov	r18, r19
    1694:	34 2f       	mov	r19, r20
    1696:	44 27       	eor	r20, r20
    1698:	58 5f       	subi	r21, 0xF8	; 248
    169a:	f3 cf       	rjmp	.-26     	; 0x1682 <__addsf3x+0x34>
    169c:	46 95       	lsr	r20
    169e:	37 95       	ror	r19
    16a0:	27 95       	ror	r18
    16a2:	a7 95       	ror	r26
    16a4:	f0 40       	sbci	r31, 0x00	; 0
    16a6:	53 95       	inc	r21
    16a8:	c9 f7       	brne	.-14     	; 0x169c <__addsf3x+0x4e>
    16aa:	7e f4       	brtc	.+30     	; 0x16ca <__addsf3x+0x7c>
    16ac:	1f 16       	cp	r1, r31
    16ae:	ba 0b       	sbc	r27, r26
    16b0:	62 0b       	sbc	r22, r18
    16b2:	73 0b       	sbc	r23, r19
    16b4:	84 0b       	sbc	r24, r20
    16b6:	ba f0       	brmi	.+46     	; 0x16e6 <__addsf3x+0x98>
    16b8:	91 50       	subi	r25, 0x01	; 1
    16ba:	a1 f0       	breq	.+40     	; 0x16e4 <__addsf3x+0x96>
    16bc:	ff 0f       	add	r31, r31
    16be:	bb 1f       	adc	r27, r27
    16c0:	66 1f       	adc	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	88 1f       	adc	r24, r24
    16c6:	c2 f7       	brpl	.-16     	; 0x16b8 <__addsf3x+0x6a>
    16c8:	0e c0       	rjmp	.+28     	; 0x16e6 <__addsf3x+0x98>
    16ca:	ba 0f       	add	r27, r26
    16cc:	62 1f       	adc	r22, r18
    16ce:	73 1f       	adc	r23, r19
    16d0:	84 1f       	adc	r24, r20
    16d2:	48 f4       	brcc	.+18     	; 0x16e6 <__addsf3x+0x98>
    16d4:	87 95       	ror	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b7 95       	ror	r27
    16dc:	f7 95       	ror	r31
    16de:	9e 3f       	cpi	r25, 0xFE	; 254
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <__addsf3x+0x96>
    16e2:	b3 cf       	rjmp	.-154    	; 0x164a <__addsf3+0x1e>
    16e4:	93 95       	inc	r25
    16e6:	88 0f       	add	r24, r24
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <__addsf3x+0x9e>
    16ea:	99 27       	eor	r25, r25
    16ec:	ee 0f       	add	r30, r30
    16ee:	97 95       	ror	r25
    16f0:	87 95       	ror	r24
    16f2:	08 95       	ret

000016f4 <__cmpsf2>:
    16f4:	71 d0       	rcall	.+226    	; 0x17d8 <__fp_cmp>
    16f6:	08 f4       	brcc	.+2      	; 0x16fa <__cmpsf2+0x6>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	08 95       	ret

000016fc <__fixsfsi>:
    16fc:	04 d0       	rcall	.+8      	; 0x1706 <__fixunssfsi>
    16fe:	68 94       	set
    1700:	b1 11       	cpse	r27, r1
    1702:	d9 c0       	rjmp	.+434    	; 0x18b6 <__fp_szero>
    1704:	08 95       	ret

00001706 <__fixunssfsi>:
    1706:	bc d0       	rcall	.+376    	; 0x1880 <__fp_splitA>
    1708:	88 f0       	brcs	.+34     	; 0x172c <__fixunssfsi+0x26>
    170a:	9f 57       	subi	r25, 0x7F	; 127
    170c:	90 f0       	brcs	.+36     	; 0x1732 <__fixunssfsi+0x2c>
    170e:	b9 2f       	mov	r27, r25
    1710:	99 27       	eor	r25, r25
    1712:	b7 51       	subi	r27, 0x17	; 23
    1714:	a0 f0       	brcs	.+40     	; 0x173e <__fixunssfsi+0x38>
    1716:	d1 f0       	breq	.+52     	; 0x174c <__fixunssfsi+0x46>
    1718:	66 0f       	add	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	88 1f       	adc	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	1a f0       	brmi	.+6      	; 0x1728 <__fixunssfsi+0x22>
    1722:	ba 95       	dec	r27
    1724:	c9 f7       	brne	.-14     	; 0x1718 <__fixunssfsi+0x12>
    1726:	12 c0       	rjmp	.+36     	; 0x174c <__fixunssfsi+0x46>
    1728:	b1 30       	cpi	r27, 0x01	; 1
    172a:	81 f0       	breq	.+32     	; 0x174c <__fixunssfsi+0x46>
    172c:	c3 d0       	rcall	.+390    	; 0x18b4 <__fp_zero>
    172e:	b1 e0       	ldi	r27, 0x01	; 1
    1730:	08 95       	ret
    1732:	c0 c0       	rjmp	.+384    	; 0x18b4 <__fp_zero>
    1734:	67 2f       	mov	r22, r23
    1736:	78 2f       	mov	r23, r24
    1738:	88 27       	eor	r24, r24
    173a:	b8 5f       	subi	r27, 0xF8	; 248
    173c:	39 f0       	breq	.+14     	; 0x174c <__fixunssfsi+0x46>
    173e:	b9 3f       	cpi	r27, 0xF9	; 249
    1740:	cc f3       	brlt	.-14     	; 0x1734 <__fixunssfsi+0x2e>
    1742:	86 95       	lsr	r24
    1744:	77 95       	ror	r23
    1746:	67 95       	ror	r22
    1748:	b3 95       	inc	r27
    174a:	d9 f7       	brne	.-10     	; 0x1742 <__fixunssfsi+0x3c>
    174c:	3e f4       	brtc	.+14     	; 0x175c <__fixunssfsi+0x56>
    174e:	90 95       	com	r25
    1750:	80 95       	com	r24
    1752:	70 95       	com	r23
    1754:	61 95       	neg	r22
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	8f 4f       	sbci	r24, 0xFF	; 255
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	08 95       	ret

0000175e <__floatunsisf>:
    175e:	e8 94       	clt
    1760:	09 c0       	rjmp	.+18     	; 0x1774 <__floatsisf+0x12>

00001762 <__floatsisf>:
    1762:	97 fb       	bst	r25, 7
    1764:	3e f4       	brtc	.+14     	; 0x1774 <__floatsisf+0x12>
    1766:	90 95       	com	r25
    1768:	80 95       	com	r24
    176a:	70 95       	com	r23
    176c:	61 95       	neg	r22
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	8f 4f       	sbci	r24, 0xFF	; 255
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	99 23       	and	r25, r25
    1776:	a9 f0       	breq	.+42     	; 0x17a2 <__floatsisf+0x40>
    1778:	f9 2f       	mov	r31, r25
    177a:	96 e9       	ldi	r25, 0x96	; 150
    177c:	bb 27       	eor	r27, r27
    177e:	93 95       	inc	r25
    1780:	f6 95       	lsr	r31
    1782:	87 95       	ror	r24
    1784:	77 95       	ror	r23
    1786:	67 95       	ror	r22
    1788:	b7 95       	ror	r27
    178a:	f1 11       	cpse	r31, r1
    178c:	f8 cf       	rjmp	.-16     	; 0x177e <__floatsisf+0x1c>
    178e:	fa f4       	brpl	.+62     	; 0x17ce <__floatsisf+0x6c>
    1790:	bb 0f       	add	r27, r27
    1792:	11 f4       	brne	.+4      	; 0x1798 <__floatsisf+0x36>
    1794:	60 ff       	sbrs	r22, 0
    1796:	1b c0       	rjmp	.+54     	; 0x17ce <__floatsisf+0x6c>
    1798:	6f 5f       	subi	r22, 0xFF	; 255
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	8f 4f       	sbci	r24, 0xFF	; 255
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	16 c0       	rjmp	.+44     	; 0x17ce <__floatsisf+0x6c>
    17a2:	88 23       	and	r24, r24
    17a4:	11 f0       	breq	.+4      	; 0x17aa <__floatsisf+0x48>
    17a6:	96 e9       	ldi	r25, 0x96	; 150
    17a8:	11 c0       	rjmp	.+34     	; 0x17cc <__floatsisf+0x6a>
    17aa:	77 23       	and	r23, r23
    17ac:	21 f0       	breq	.+8      	; 0x17b6 <__floatsisf+0x54>
    17ae:	9e e8       	ldi	r25, 0x8E	; 142
    17b0:	87 2f       	mov	r24, r23
    17b2:	76 2f       	mov	r23, r22
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <__floatsisf+0x5e>
    17b6:	66 23       	and	r22, r22
    17b8:	71 f0       	breq	.+28     	; 0x17d6 <__floatsisf+0x74>
    17ba:	96 e8       	ldi	r25, 0x86	; 134
    17bc:	86 2f       	mov	r24, r22
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	2a f0       	brmi	.+10     	; 0x17ce <__floatsisf+0x6c>
    17c4:	9a 95       	dec	r25
    17c6:	66 0f       	add	r22, r22
    17c8:	77 1f       	adc	r23, r23
    17ca:	88 1f       	adc	r24, r24
    17cc:	da f7       	brpl	.-10     	; 0x17c4 <__floatsisf+0x62>
    17ce:	88 0f       	add	r24, r24
    17d0:	96 95       	lsr	r25
    17d2:	87 95       	ror	r24
    17d4:	97 f9       	bld	r25, 7
    17d6:	08 95       	ret

000017d8 <__fp_cmp>:
    17d8:	99 0f       	add	r25, r25
    17da:	00 08       	sbc	r0, r0
    17dc:	55 0f       	add	r21, r21
    17de:	aa 0b       	sbc	r26, r26
    17e0:	e0 e8       	ldi	r30, 0x80	; 128
    17e2:	fe ef       	ldi	r31, 0xFE	; 254
    17e4:	16 16       	cp	r1, r22
    17e6:	17 06       	cpc	r1, r23
    17e8:	e8 07       	cpc	r30, r24
    17ea:	f9 07       	cpc	r31, r25
    17ec:	c0 f0       	brcs	.+48     	; 0x181e <__fp_cmp+0x46>
    17ee:	12 16       	cp	r1, r18
    17f0:	13 06       	cpc	r1, r19
    17f2:	e4 07       	cpc	r30, r20
    17f4:	f5 07       	cpc	r31, r21
    17f6:	98 f0       	brcs	.+38     	; 0x181e <__fp_cmp+0x46>
    17f8:	62 1b       	sub	r22, r18
    17fa:	73 0b       	sbc	r23, r19
    17fc:	84 0b       	sbc	r24, r20
    17fe:	95 0b       	sbc	r25, r21
    1800:	39 f4       	brne	.+14     	; 0x1810 <__fp_cmp+0x38>
    1802:	0a 26       	eor	r0, r26
    1804:	61 f0       	breq	.+24     	; 0x181e <__fp_cmp+0x46>
    1806:	23 2b       	or	r18, r19
    1808:	24 2b       	or	r18, r20
    180a:	25 2b       	or	r18, r21
    180c:	21 f4       	brne	.+8      	; 0x1816 <__fp_cmp+0x3e>
    180e:	08 95       	ret
    1810:	0a 26       	eor	r0, r26
    1812:	09 f4       	brne	.+2      	; 0x1816 <__fp_cmp+0x3e>
    1814:	a1 40       	sbci	r26, 0x01	; 1
    1816:	a6 95       	lsr	r26
    1818:	8f ef       	ldi	r24, 0xFF	; 255
    181a:	81 1d       	adc	r24, r1
    181c:	81 1d       	adc	r24, r1
    181e:	08 95       	ret

00001820 <__fp_inf>:
    1820:	97 f9       	bld	r25, 7
    1822:	9f 67       	ori	r25, 0x7F	; 127
    1824:	80 e8       	ldi	r24, 0x80	; 128
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	08 95       	ret

0000182c <__fp_nan>:
    182c:	9f ef       	ldi	r25, 0xFF	; 255
    182e:	80 ec       	ldi	r24, 0xC0	; 192
    1830:	08 95       	ret

00001832 <__fp_pscA>:
    1832:	00 24       	eor	r0, r0
    1834:	0a 94       	dec	r0
    1836:	16 16       	cp	r1, r22
    1838:	17 06       	cpc	r1, r23
    183a:	18 06       	cpc	r1, r24
    183c:	09 06       	cpc	r0, r25
    183e:	08 95       	ret

00001840 <__fp_pscB>:
    1840:	00 24       	eor	r0, r0
    1842:	0a 94       	dec	r0
    1844:	12 16       	cp	r1, r18
    1846:	13 06       	cpc	r1, r19
    1848:	14 06       	cpc	r1, r20
    184a:	05 06       	cpc	r0, r21
    184c:	08 95       	ret

0000184e <__fp_round>:
    184e:	09 2e       	mov	r0, r25
    1850:	03 94       	inc	r0
    1852:	00 0c       	add	r0, r0
    1854:	11 f4       	brne	.+4      	; 0x185a <__fp_round+0xc>
    1856:	88 23       	and	r24, r24
    1858:	52 f0       	brmi	.+20     	; 0x186e <__fp_round+0x20>
    185a:	bb 0f       	add	r27, r27
    185c:	40 f4       	brcc	.+16     	; 0x186e <__fp_round+0x20>
    185e:	bf 2b       	or	r27, r31
    1860:	11 f4       	brne	.+4      	; 0x1866 <__fp_round+0x18>
    1862:	60 ff       	sbrs	r22, 0
    1864:	04 c0       	rjmp	.+8      	; 0x186e <__fp_round+0x20>
    1866:	6f 5f       	subi	r22, 0xFF	; 255
    1868:	7f 4f       	sbci	r23, 0xFF	; 255
    186a:	8f 4f       	sbci	r24, 0xFF	; 255
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	08 95       	ret

00001870 <__fp_split3>:
    1870:	57 fd       	sbrc	r21, 7
    1872:	90 58       	subi	r25, 0x80	; 128
    1874:	44 0f       	add	r20, r20
    1876:	55 1f       	adc	r21, r21
    1878:	59 f0       	breq	.+22     	; 0x1890 <__fp_splitA+0x10>
    187a:	5f 3f       	cpi	r21, 0xFF	; 255
    187c:	71 f0       	breq	.+28     	; 0x189a <__fp_splitA+0x1a>
    187e:	47 95       	ror	r20

00001880 <__fp_splitA>:
    1880:	88 0f       	add	r24, r24
    1882:	97 fb       	bst	r25, 7
    1884:	99 1f       	adc	r25, r25
    1886:	61 f0       	breq	.+24     	; 0x18a0 <__fp_splitA+0x20>
    1888:	9f 3f       	cpi	r25, 0xFF	; 255
    188a:	79 f0       	breq	.+30     	; 0x18aa <__fp_splitA+0x2a>
    188c:	87 95       	ror	r24
    188e:	08 95       	ret
    1890:	12 16       	cp	r1, r18
    1892:	13 06       	cpc	r1, r19
    1894:	14 06       	cpc	r1, r20
    1896:	55 1f       	adc	r21, r21
    1898:	f2 cf       	rjmp	.-28     	; 0x187e <__fp_split3+0xe>
    189a:	46 95       	lsr	r20
    189c:	f1 df       	rcall	.-30     	; 0x1880 <__fp_splitA>
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <__fp_splitA+0x30>
    18a0:	16 16       	cp	r1, r22
    18a2:	17 06       	cpc	r1, r23
    18a4:	18 06       	cpc	r1, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	f1 cf       	rjmp	.-30     	; 0x188c <__fp_splitA+0xc>
    18aa:	86 95       	lsr	r24
    18ac:	71 05       	cpc	r23, r1
    18ae:	61 05       	cpc	r22, r1
    18b0:	08 94       	sec
    18b2:	08 95       	ret

000018b4 <__fp_zero>:
    18b4:	e8 94       	clt

000018b6 <__fp_szero>:
    18b6:	bb 27       	eor	r27, r27
    18b8:	66 27       	eor	r22, r22
    18ba:	77 27       	eor	r23, r23
    18bc:	cb 01       	movw	r24, r22
    18be:	97 f9       	bld	r25, 7
    18c0:	08 95       	ret

000018c2 <__mulsf3>:
    18c2:	0b d0       	rcall	.+22     	; 0x18da <__mulsf3x>
    18c4:	c4 cf       	rjmp	.-120    	; 0x184e <__fp_round>
    18c6:	b5 df       	rcall	.-150    	; 0x1832 <__fp_pscA>
    18c8:	28 f0       	brcs	.+10     	; 0x18d4 <__mulsf3+0x12>
    18ca:	ba df       	rcall	.-140    	; 0x1840 <__fp_pscB>
    18cc:	18 f0       	brcs	.+6      	; 0x18d4 <__mulsf3+0x12>
    18ce:	95 23       	and	r25, r21
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <__mulsf3+0x12>
    18d2:	a6 cf       	rjmp	.-180    	; 0x1820 <__fp_inf>
    18d4:	ab cf       	rjmp	.-170    	; 0x182c <__fp_nan>
    18d6:	11 24       	eor	r1, r1
    18d8:	ee cf       	rjmp	.-36     	; 0x18b6 <__fp_szero>

000018da <__mulsf3x>:
    18da:	ca df       	rcall	.-108    	; 0x1870 <__fp_split3>
    18dc:	a0 f3       	brcs	.-24     	; 0x18c6 <__mulsf3+0x4>

000018de <__mulsf3_pse>:
    18de:	95 9f       	mul	r25, r21
    18e0:	d1 f3       	breq	.-12     	; 0x18d6 <__mulsf3+0x14>
    18e2:	95 0f       	add	r25, r21
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	55 1f       	adc	r21, r21
    18e8:	62 9f       	mul	r22, r18
    18ea:	f0 01       	movw	r30, r0
    18ec:	72 9f       	mul	r23, r18
    18ee:	bb 27       	eor	r27, r27
    18f0:	f0 0d       	add	r31, r0
    18f2:	b1 1d       	adc	r27, r1
    18f4:	63 9f       	mul	r22, r19
    18f6:	aa 27       	eor	r26, r26
    18f8:	f0 0d       	add	r31, r0
    18fa:	b1 1d       	adc	r27, r1
    18fc:	aa 1f       	adc	r26, r26
    18fe:	64 9f       	mul	r22, r20
    1900:	66 27       	eor	r22, r22
    1902:	b0 0d       	add	r27, r0
    1904:	a1 1d       	adc	r26, r1
    1906:	66 1f       	adc	r22, r22
    1908:	82 9f       	mul	r24, r18
    190a:	22 27       	eor	r18, r18
    190c:	b0 0d       	add	r27, r0
    190e:	a1 1d       	adc	r26, r1
    1910:	62 1f       	adc	r22, r18
    1912:	73 9f       	mul	r23, r19
    1914:	b0 0d       	add	r27, r0
    1916:	a1 1d       	adc	r26, r1
    1918:	62 1f       	adc	r22, r18
    191a:	83 9f       	mul	r24, r19
    191c:	a0 0d       	add	r26, r0
    191e:	61 1d       	adc	r22, r1
    1920:	22 1f       	adc	r18, r18
    1922:	74 9f       	mul	r23, r20
    1924:	33 27       	eor	r19, r19
    1926:	a0 0d       	add	r26, r0
    1928:	61 1d       	adc	r22, r1
    192a:	23 1f       	adc	r18, r19
    192c:	84 9f       	mul	r24, r20
    192e:	60 0d       	add	r22, r0
    1930:	21 1d       	adc	r18, r1
    1932:	82 2f       	mov	r24, r18
    1934:	76 2f       	mov	r23, r22
    1936:	6a 2f       	mov	r22, r26
    1938:	11 24       	eor	r1, r1
    193a:	9f 57       	subi	r25, 0x7F	; 127
    193c:	50 40       	sbci	r21, 0x00	; 0
    193e:	8a f0       	brmi	.+34     	; 0x1962 <__mulsf3_pse+0x84>
    1940:	e1 f0       	breq	.+56     	; 0x197a <__mulsf3_pse+0x9c>
    1942:	88 23       	and	r24, r24
    1944:	4a f0       	brmi	.+18     	; 0x1958 <__mulsf3_pse+0x7a>
    1946:	ee 0f       	add	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	bb 1f       	adc	r27, r27
    194c:	66 1f       	adc	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	88 1f       	adc	r24, r24
    1952:	91 50       	subi	r25, 0x01	; 1
    1954:	50 40       	sbci	r21, 0x00	; 0
    1956:	a9 f7       	brne	.-22     	; 0x1942 <__mulsf3_pse+0x64>
    1958:	9e 3f       	cpi	r25, 0xFE	; 254
    195a:	51 05       	cpc	r21, r1
    195c:	70 f0       	brcs	.+28     	; 0x197a <__mulsf3_pse+0x9c>
    195e:	60 cf       	rjmp	.-320    	; 0x1820 <__fp_inf>
    1960:	aa cf       	rjmp	.-172    	; 0x18b6 <__fp_szero>
    1962:	5f 3f       	cpi	r21, 0xFF	; 255
    1964:	ec f3       	brlt	.-6      	; 0x1960 <__mulsf3_pse+0x82>
    1966:	98 3e       	cpi	r25, 0xE8	; 232
    1968:	dc f3       	brlt	.-10     	; 0x1960 <__mulsf3_pse+0x82>
    196a:	86 95       	lsr	r24
    196c:	77 95       	ror	r23
    196e:	67 95       	ror	r22
    1970:	b7 95       	ror	r27
    1972:	f7 95       	ror	r31
    1974:	e7 95       	ror	r30
    1976:	9f 5f       	subi	r25, 0xFF	; 255
    1978:	c1 f7       	brne	.-16     	; 0x196a <__mulsf3_pse+0x8c>
    197a:	fe 2b       	or	r31, r30
    197c:	88 0f       	add	r24, r24
    197e:	91 1d       	adc	r25, r1
    1980:	96 95       	lsr	r25
    1982:	87 95       	ror	r24
    1984:	97 f9       	bld	r25, 7
    1986:	08 95       	ret

00001988 <pow>:
    1988:	fa 01       	movw	r30, r20
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	30 96       	adiw	r30, 0x00	; 0
    1990:	21 05       	cpc	r18, r1
    1992:	31 05       	cpc	r19, r1
    1994:	99 f1       	breq	.+102    	; 0x19fc <pow+0x74>
    1996:	61 15       	cp	r22, r1
    1998:	71 05       	cpc	r23, r1
    199a:	61 f4       	brne	.+24     	; 0x19b4 <pow+0x2c>
    199c:	80 38       	cpi	r24, 0x80	; 128
    199e:	bf e3       	ldi	r27, 0x3F	; 63
    19a0:	9b 07       	cpc	r25, r27
    19a2:	49 f1       	breq	.+82     	; 0x19f6 <pow+0x6e>
    19a4:	68 94       	set
    19a6:	90 38       	cpi	r25, 0x80	; 128
    19a8:	81 05       	cpc	r24, r1
    19aa:	61 f0       	breq	.+24     	; 0x19c4 <pow+0x3c>
    19ac:	80 38       	cpi	r24, 0x80	; 128
    19ae:	bf ef       	ldi	r27, 0xFF	; 255
    19b0:	9b 07       	cpc	r25, r27
    19b2:	41 f0       	breq	.+16     	; 0x19c4 <pow+0x3c>
    19b4:	99 23       	and	r25, r25
    19b6:	42 f5       	brpl	.+80     	; 0x1a08 <pow+0x80>
    19b8:	ff 3f       	cpi	r31, 0xFF	; 255
    19ba:	e1 05       	cpc	r30, r1
    19bc:	31 05       	cpc	r19, r1
    19be:	21 05       	cpc	r18, r1
    19c0:	11 f1       	breq	.+68     	; 0x1a06 <pow+0x7e>
    19c2:	e8 94       	clt
    19c4:	08 94       	sec
    19c6:	e7 95       	ror	r30
    19c8:	d9 01       	movw	r26, r18
    19ca:	aa 23       	and	r26, r26
    19cc:	29 f4       	brne	.+10     	; 0x19d8 <pow+0x50>
    19ce:	ab 2f       	mov	r26, r27
    19d0:	be 2f       	mov	r27, r30
    19d2:	f8 5f       	subi	r31, 0xF8	; 248
    19d4:	d0 f3       	brcs	.-12     	; 0x19ca <pow+0x42>
    19d6:	10 c0       	rjmp	.+32     	; 0x19f8 <pow+0x70>
    19d8:	ff 5f       	subi	r31, 0xFF	; 255
    19da:	70 f4       	brcc	.+28     	; 0x19f8 <pow+0x70>
    19dc:	a6 95       	lsr	r26
    19de:	e0 f7       	brcc	.-8      	; 0x19d8 <pow+0x50>
    19e0:	f7 39       	cpi	r31, 0x97	; 151
    19e2:	50 f0       	brcs	.+20     	; 0x19f8 <pow+0x70>
    19e4:	19 f0       	breq	.+6      	; 0x19ec <pow+0x64>
    19e6:	ff 3a       	cpi	r31, 0xAF	; 175
    19e8:	38 f4       	brcc	.+14     	; 0x19f8 <pow+0x70>
    19ea:	9f 77       	andi	r25, 0x7F	; 127
    19ec:	9f 93       	push	r25
    19ee:	0c d0       	rcall	.+24     	; 0x1a08 <pow+0x80>
    19f0:	0f 90       	pop	r0
    19f2:	07 fc       	sbrc	r0, 7
    19f4:	90 58       	subi	r25, 0x80	; 128
    19f6:	08 95       	ret
    19f8:	3e f0       	brts	.+14     	; 0x1a08 <pow+0x80>
    19fa:	18 cf       	rjmp	.-464    	; 0x182c <__fp_nan>
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	80 e8       	ldi	r24, 0x80	; 128
    1a02:	9f e3       	ldi	r25, 0x3F	; 63
    1a04:	08 95       	ret
    1a06:	4f e7       	ldi	r20, 0x7F	; 127
    1a08:	9f 77       	andi	r25, 0x7F	; 127
    1a0a:	5f 93       	push	r21
    1a0c:	4f 93       	push	r20
    1a0e:	3f 93       	push	r19
    1a10:	2f 93       	push	r18
    1a12:	9e d0       	rcall	.+316    	; 0x1b50 <log>
    1a14:	2f 91       	pop	r18
    1a16:	3f 91       	pop	r19
    1a18:	4f 91       	pop	r20
    1a1a:	5f 91       	pop	r21
    1a1c:	52 df       	rcall	.-348    	; 0x18c2 <__mulsf3>
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <exp>
    1a20:	19 f4       	brne	.+6      	; 0x1a28 <pow+0xa0>
    1a22:	0e f0       	brts	.+2      	; 0x1a26 <pow+0x9e>
    1a24:	fd ce       	rjmp	.-518    	; 0x1820 <__fp_inf>
    1a26:	46 cf       	rjmp	.-372    	; 0x18b4 <__fp_zero>
    1a28:	01 cf       	rjmp	.-510    	; 0x182c <__fp_nan>

00001a2a <exp>:
    1a2a:	2a df       	rcall	.-428    	; 0x1880 <__fp_splitA>
    1a2c:	c8 f3       	brcs	.-14     	; 0x1a20 <pow+0x98>
    1a2e:	96 38       	cpi	r25, 0x86	; 134
    1a30:	c0 f7       	brcc	.-16     	; 0x1a22 <pow+0x9a>
    1a32:	07 f8       	bld	r0, 7
    1a34:	0f 92       	push	r0
    1a36:	e8 94       	clt
    1a38:	2b e3       	ldi	r18, 0x3B	; 59
    1a3a:	3a ea       	ldi	r19, 0xAA	; 170
    1a3c:	48 eb       	ldi	r20, 0xB8	; 184
    1a3e:	5f e7       	ldi	r21, 0x7F	; 127
    1a40:	4e df       	rcall	.-356    	; 0x18de <__mulsf3_pse>
    1a42:	0f 92       	push	r0
    1a44:	0f 92       	push	r0
    1a46:	0f 92       	push	r0
    1a48:	4d b7       	in	r20, 0x3d	; 61
    1a4a:	5e b7       	in	r21, 0x3e	; 62
    1a4c:	0f 92       	push	r0
    1a4e:	c0 d0       	rcall	.+384    	; 0x1bd0 <modf>
    1a50:	e4 ee       	ldi	r30, 0xE4	; 228
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	16 d0       	rcall	.+44     	; 0x1a82 <__fp_powser>
    1a56:	4f 91       	pop	r20
    1a58:	5f 91       	pop	r21
    1a5a:	ef 91       	pop	r30
    1a5c:	ff 91       	pop	r31
    1a5e:	e5 95       	asr	r30
    1a60:	ee 1f       	adc	r30, r30
    1a62:	ff 1f       	adc	r31, r31
    1a64:	49 f0       	breq	.+18     	; 0x1a78 <exp+0x4e>
    1a66:	fe 57       	subi	r31, 0x7E	; 126
    1a68:	e0 68       	ori	r30, 0x80	; 128
    1a6a:	44 27       	eor	r20, r20
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	44 1f       	adc	r20, r20
    1a70:	fa 95       	dec	r31
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <exp+0x42>
    1a74:	41 95       	neg	r20
    1a76:	55 0b       	sbc	r21, r21
    1a78:	32 d0       	rcall	.+100    	; 0x1ade <ldexp>
    1a7a:	0f 90       	pop	r0
    1a7c:	07 fe       	sbrs	r0, 7
    1a7e:	26 c0       	rjmp	.+76     	; 0x1acc <inverse>
    1a80:	08 95       	ret

00001a82 <__fp_powser>:
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	1f 93       	push	r17
    1a88:	0f 93       	push	r16
    1a8a:	ff 92       	push	r15
    1a8c:	ef 92       	push	r14
    1a8e:	df 92       	push	r13
    1a90:	7b 01       	movw	r14, r22
    1a92:	8c 01       	movw	r16, r24
    1a94:	68 94       	set
    1a96:	05 c0       	rjmp	.+10     	; 0x1aa2 <__fp_powser+0x20>
    1a98:	da 2e       	mov	r13, r26
    1a9a:	ef 01       	movw	r28, r30
    1a9c:	1e df       	rcall	.-452    	; 0x18da <__mulsf3x>
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e8 94       	clt
    1aa2:	a5 91       	lpm	r26, Z+
    1aa4:	25 91       	lpm	r18, Z+
    1aa6:	35 91       	lpm	r19, Z+
    1aa8:	45 91       	lpm	r20, Z+
    1aaa:	55 91       	lpm	r21, Z+
    1aac:	ae f3       	brts	.-22     	; 0x1a98 <__fp_powser+0x16>
    1aae:	ef 01       	movw	r28, r30
    1ab0:	ce dd       	rcall	.-1124   	; 0x164e <__addsf3x>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	97 01       	movw	r18, r14
    1ab6:	a8 01       	movw	r20, r16
    1ab8:	da 94       	dec	r13
    1aba:	79 f7       	brne	.-34     	; 0x1a9a <__fp_powser+0x18>
    1abc:	df 90       	pop	r13
    1abe:	ef 90       	pop	r14
    1ac0:	ff 90       	pop	r15
    1ac2:	0f 91       	pop	r16
    1ac4:	1f 91       	pop	r17
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <inverse>:
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	80 e8       	ldi	r24, 0x80	; 128
    1ad6:	9f e3       	ldi	r25, 0x3F	; 63
    1ad8:	ae c0       	rjmp	.+348    	; 0x1c36 <__divsf3>
    1ada:	a2 ce       	rjmp	.-700    	; 0x1820 <__fp_inf>
    1adc:	14 c1       	rjmp	.+552    	; 0x1d06 <__fp_mpack>

00001ade <ldexp>:
    1ade:	d0 de       	rcall	.-608    	; 0x1880 <__fp_splitA>
    1ae0:	e8 f3       	brcs	.-6      	; 0x1adc <inverse+0x10>
    1ae2:	99 23       	and	r25, r25
    1ae4:	d9 f3       	breq	.-10     	; 0x1adc <inverse+0x10>
    1ae6:	94 0f       	add	r25, r20
    1ae8:	51 1d       	adc	r21, r1
    1aea:	bb f3       	brvs	.-18     	; 0x1ada <inverse+0xe>
    1aec:	91 50       	subi	r25, 0x01	; 1
    1aee:	50 40       	sbci	r21, 0x00	; 0
    1af0:	94 f0       	brlt	.+36     	; 0x1b16 <ldexp+0x38>
    1af2:	59 f0       	breq	.+22     	; 0x1b0a <ldexp+0x2c>
    1af4:	88 23       	and	r24, r24
    1af6:	32 f0       	brmi	.+12     	; 0x1b04 <ldexp+0x26>
    1af8:	66 0f       	add	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	88 1f       	adc	r24, r24
    1afe:	91 50       	subi	r25, 0x01	; 1
    1b00:	50 40       	sbci	r21, 0x00	; 0
    1b02:	c1 f7       	brne	.-16     	; 0x1af4 <ldexp+0x16>
    1b04:	9e 3f       	cpi	r25, 0xFE	; 254
    1b06:	51 05       	cpc	r21, r1
    1b08:	44 f7       	brge	.-48     	; 0x1ada <inverse+0xe>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	91 1d       	adc	r25, r1
    1b0e:	96 95       	lsr	r25
    1b10:	87 95       	ror	r24
    1b12:	97 f9       	bld	r25, 7
    1b14:	08 95       	ret
    1b16:	5f 3f       	cpi	r21, 0xFF	; 255
    1b18:	ac f0       	brlt	.+42     	; 0x1b44 <ldexp+0x66>
    1b1a:	98 3e       	cpi	r25, 0xE8	; 232
    1b1c:	9c f0       	brlt	.+38     	; 0x1b44 <ldexp+0x66>
    1b1e:	bb 27       	eor	r27, r27
    1b20:	86 95       	lsr	r24
    1b22:	77 95       	ror	r23
    1b24:	67 95       	ror	r22
    1b26:	b7 95       	ror	r27
    1b28:	08 f4       	brcc	.+2      	; 0x1b2c <ldexp+0x4e>
    1b2a:	b1 60       	ori	r27, 0x01	; 1
    1b2c:	93 95       	inc	r25
    1b2e:	c1 f7       	brne	.-16     	; 0x1b20 <ldexp+0x42>
    1b30:	bb 0f       	add	r27, r27
    1b32:	58 f7       	brcc	.-42     	; 0x1b0a <ldexp+0x2c>
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <ldexp+0x5c>
    1b36:	60 ff       	sbrs	r22, 0
    1b38:	e8 cf       	rjmp	.-48     	; 0x1b0a <ldexp+0x2c>
    1b3a:	6f 5f       	subi	r22, 0xFF	; 255
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b40:	9f 4f       	sbci	r25, 0xFF	; 255
    1b42:	e3 cf       	rjmp	.-58     	; 0x1b0a <ldexp+0x2c>
    1b44:	b8 ce       	rjmp	.-656    	; 0x18b6 <__fp_szero>
    1b46:	0e f0       	brts	.+2      	; 0x1b4a <ldexp+0x6c>
    1b48:	de c0       	rjmp	.+444    	; 0x1d06 <__fp_mpack>
    1b4a:	70 ce       	rjmp	.-800    	; 0x182c <__fp_nan>
    1b4c:	68 94       	set
    1b4e:	68 ce       	rjmp	.-816    	; 0x1820 <__fp_inf>

00001b50 <log>:
    1b50:	97 de       	rcall	.-722    	; 0x1880 <__fp_splitA>
    1b52:	c8 f3       	brcs	.-14     	; 0x1b46 <ldexp+0x68>
    1b54:	99 23       	and	r25, r25
    1b56:	d1 f3       	breq	.-12     	; 0x1b4c <ldexp+0x6e>
    1b58:	c6 f3       	brts	.-16     	; 0x1b4a <ldexp+0x6c>
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	1f 93       	push	r17
    1b60:	0f 93       	push	r16
    1b62:	ff 92       	push	r15
    1b64:	c9 2f       	mov	r28, r25
    1b66:	dd 27       	eor	r29, r29
    1b68:	88 23       	and	r24, r24
    1b6a:	2a f0       	brmi	.+10     	; 0x1b76 <log+0x26>
    1b6c:	21 97       	sbiw	r28, 0x01	; 1
    1b6e:	66 0f       	add	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	88 1f       	adc	r24, r24
    1b74:	da f7       	brpl	.-10     	; 0x1b6c <log+0x1c>
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f eb       	ldi	r21, 0xBF	; 191
    1b7e:	9f e3       	ldi	r25, 0x3F	; 63
    1b80:	88 39       	cpi	r24, 0x98	; 152
    1b82:	20 f0       	brcs	.+8      	; 0x1b8c <log+0x3c>
    1b84:	80 3e       	cpi	r24, 0xE0	; 224
    1b86:	30 f0       	brcs	.+12     	; 0x1b94 <log+0x44>
    1b88:	21 96       	adiw	r28, 0x01	; 1
    1b8a:	8f 77       	andi	r24, 0x7F	; 127
    1b8c:	4f dd       	rcall	.-1378   	; 0x162c <__addsf3>
    1b8e:	ec e0       	ldi	r30, 0x0C	; 12
    1b90:	f1 e0       	ldi	r31, 0x01	; 1
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <log+0x4a>
    1b94:	4b dd       	rcall	.-1386   	; 0x162c <__addsf3>
    1b96:	e9 e3       	ldi	r30, 0x39	; 57
    1b98:	f1 e0       	ldi	r31, 0x01	; 1
    1b9a:	73 df       	rcall	.-282    	; 0x1a82 <__fp_powser>
    1b9c:	8b 01       	movw	r16, r22
    1b9e:	be 01       	movw	r22, r28
    1ba0:	ec 01       	movw	r28, r24
    1ba2:	fb 2e       	mov	r15, r27
    1ba4:	6f 57       	subi	r22, 0x7F	; 127
    1ba6:	71 09       	sbc	r23, r1
    1ba8:	75 95       	asr	r23
    1baa:	77 1f       	adc	r23, r23
    1bac:	88 0b       	sbc	r24, r24
    1bae:	99 0b       	sbc	r25, r25
    1bb0:	d8 dd       	rcall	.-1104   	; 0x1762 <__floatsisf>
    1bb2:	28 e1       	ldi	r18, 0x18	; 24
    1bb4:	32 e7       	ldi	r19, 0x72	; 114
    1bb6:	41 e3       	ldi	r20, 0x31	; 49
    1bb8:	5f e3       	ldi	r21, 0x3F	; 63
    1bba:	8f de       	rcall	.-738    	; 0x18da <__mulsf3x>
    1bbc:	af 2d       	mov	r26, r15
    1bbe:	98 01       	movw	r18, r16
    1bc0:	ae 01       	movw	r20, r28
    1bc2:	ff 90       	pop	r15
    1bc4:	0f 91       	pop	r16
    1bc6:	1f 91       	pop	r17
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	40 dd       	rcall	.-1408   	; 0x164e <__addsf3x>
    1bce:	3f ce       	rjmp	.-898    	; 0x184e <__fp_round>

00001bd0 <modf>:
    1bd0:	fa 01       	movw	r30, r20
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	aa 0f       	add	r26, r26
    1bd6:	bb 1f       	adc	r27, r27
    1bd8:	9b 01       	movw	r18, r22
    1bda:	ac 01       	movw	r20, r24
    1bdc:	bf 57       	subi	r27, 0x7F	; 127
    1bde:	28 f4       	brcc	.+10     	; 0x1bea <modf+0x1a>
    1be0:	22 27       	eor	r18, r18
    1be2:	33 27       	eor	r19, r19
    1be4:	44 27       	eor	r20, r20
    1be6:	50 78       	andi	r21, 0x80	; 128
    1be8:	1f c0       	rjmp	.+62     	; 0x1c28 <modf+0x58>
    1bea:	b7 51       	subi	r27, 0x17	; 23
    1bec:	88 f4       	brcc	.+34     	; 0x1c10 <modf+0x40>
    1bee:	ab 2f       	mov	r26, r27
    1bf0:	00 24       	eor	r0, r0
    1bf2:	46 95       	lsr	r20
    1bf4:	37 95       	ror	r19
    1bf6:	27 95       	ror	r18
    1bf8:	01 1c       	adc	r0, r1
    1bfa:	a3 95       	inc	r26
    1bfc:	d2 f3       	brmi	.-12     	; 0x1bf2 <modf+0x22>
    1bfe:	00 20       	and	r0, r0
    1c00:	69 f0       	breq	.+26     	; 0x1c1c <modf+0x4c>
    1c02:	22 0f       	add	r18, r18
    1c04:	33 1f       	adc	r19, r19
    1c06:	44 1f       	adc	r20, r20
    1c08:	b3 95       	inc	r27
    1c0a:	da f3       	brmi	.-10     	; 0x1c02 <modf+0x32>
    1c0c:	0d d0       	rcall	.+26     	; 0x1c28 <modf+0x58>
    1c0e:	0d cd       	rjmp	.-1510   	; 0x162a <__subsf3>
    1c10:	61 30       	cpi	r22, 0x01	; 1
    1c12:	71 05       	cpc	r23, r1
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	8a 07       	cpc	r24, r26
    1c18:	b9 46       	sbci	r27, 0x69	; 105
    1c1a:	30 f4       	brcc	.+12     	; 0x1c28 <modf+0x58>
    1c1c:	9b 01       	movw	r18, r22
    1c1e:	ac 01       	movw	r20, r24
    1c20:	66 27       	eor	r22, r22
    1c22:	77 27       	eor	r23, r23
    1c24:	88 27       	eor	r24, r24
    1c26:	90 78       	andi	r25, 0x80	; 128
    1c28:	30 96       	adiw	r30, 0x00	; 0
    1c2a:	21 f0       	breq	.+8      	; 0x1c34 <modf+0x64>
    1c2c:	20 83       	st	Z, r18
    1c2e:	31 83       	std	Z+1, r19	; 0x01
    1c30:	42 83       	std	Z+2, r20	; 0x02
    1c32:	53 83       	std	Z+3, r21	; 0x03
    1c34:	08 95       	ret

00001c36 <__divsf3>:
    1c36:	0c d0       	rcall	.+24     	; 0x1c50 <__divsf3x>
    1c38:	0a ce       	rjmp	.-1004   	; 0x184e <__fp_round>
    1c3a:	02 de       	rcall	.-1020   	; 0x1840 <__fp_pscB>
    1c3c:	40 f0       	brcs	.+16     	; 0x1c4e <__divsf3+0x18>
    1c3e:	f9 dd       	rcall	.-1038   	; 0x1832 <__fp_pscA>
    1c40:	30 f0       	brcs	.+12     	; 0x1c4e <__divsf3+0x18>
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <__divsf3+0x16>
    1c44:	5f 3f       	cpi	r21, 0xFF	; 255
    1c46:	19 f0       	breq	.+6      	; 0x1c4e <__divsf3+0x18>
    1c48:	eb cd       	rjmp	.-1066   	; 0x1820 <__fp_inf>
    1c4a:	51 11       	cpse	r21, r1
    1c4c:	34 ce       	rjmp	.-920    	; 0x18b6 <__fp_szero>
    1c4e:	ee cd       	rjmp	.-1060   	; 0x182c <__fp_nan>

00001c50 <__divsf3x>:
    1c50:	0f de       	rcall	.-994    	; 0x1870 <__fp_split3>
    1c52:	98 f3       	brcs	.-26     	; 0x1c3a <__divsf3+0x4>

00001c54 <__divsf3_pse>:
    1c54:	99 23       	and	r25, r25
    1c56:	c9 f3       	breq	.-14     	; 0x1c4a <__divsf3+0x14>
    1c58:	55 23       	and	r21, r21
    1c5a:	b1 f3       	breq	.-20     	; 0x1c48 <__divsf3+0x12>
    1c5c:	95 1b       	sub	r25, r21
    1c5e:	55 0b       	sbc	r21, r21
    1c60:	bb 27       	eor	r27, r27
    1c62:	aa 27       	eor	r26, r26
    1c64:	62 17       	cp	r22, r18
    1c66:	73 07       	cpc	r23, r19
    1c68:	84 07       	cpc	r24, r20
    1c6a:	38 f0       	brcs	.+14     	; 0x1c7a <__divsf3_pse+0x26>
    1c6c:	9f 5f       	subi	r25, 0xFF	; 255
    1c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c70:	22 0f       	add	r18, r18
    1c72:	33 1f       	adc	r19, r19
    1c74:	44 1f       	adc	r20, r20
    1c76:	aa 1f       	adc	r26, r26
    1c78:	a9 f3       	breq	.-22     	; 0x1c64 <__divsf3_pse+0x10>
    1c7a:	33 d0       	rcall	.+102    	; 0x1ce2 <__divsf3_pse+0x8e>
    1c7c:	0e 2e       	mov	r0, r30
    1c7e:	3a f0       	brmi	.+14     	; 0x1c8e <__divsf3_pse+0x3a>
    1c80:	e0 e8       	ldi	r30, 0x80	; 128
    1c82:	30 d0       	rcall	.+96     	; 0x1ce4 <__divsf3_pse+0x90>
    1c84:	91 50       	subi	r25, 0x01	; 1
    1c86:	50 40       	sbci	r21, 0x00	; 0
    1c88:	e6 95       	lsr	r30
    1c8a:	00 1c       	adc	r0, r0
    1c8c:	ca f7       	brpl	.-14     	; 0x1c80 <__divsf3_pse+0x2c>
    1c8e:	29 d0       	rcall	.+82     	; 0x1ce2 <__divsf3_pse+0x8e>
    1c90:	fe 2f       	mov	r31, r30
    1c92:	27 d0       	rcall	.+78     	; 0x1ce2 <__divsf3_pse+0x8e>
    1c94:	66 0f       	add	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	88 1f       	adc	r24, r24
    1c9a:	bb 1f       	adc	r27, r27
    1c9c:	26 17       	cp	r18, r22
    1c9e:	37 07       	cpc	r19, r23
    1ca0:	48 07       	cpc	r20, r24
    1ca2:	ab 07       	cpc	r26, r27
    1ca4:	b0 e8       	ldi	r27, 0x80	; 128
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <__divsf3_pse+0x56>
    1ca8:	bb 0b       	sbc	r27, r27
    1caa:	80 2d       	mov	r24, r0
    1cac:	bf 01       	movw	r22, r30
    1cae:	ff 27       	eor	r31, r31
    1cb0:	93 58       	subi	r25, 0x83	; 131
    1cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb4:	2a f0       	brmi	.+10     	; 0x1cc0 <__divsf3_pse+0x6c>
    1cb6:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb8:	51 05       	cpc	r21, r1
    1cba:	68 f0       	brcs	.+26     	; 0x1cd6 <__divsf3_pse+0x82>
    1cbc:	b1 cd       	rjmp	.-1182   	; 0x1820 <__fp_inf>
    1cbe:	fb cd       	rjmp	.-1034   	; 0x18b6 <__fp_szero>
    1cc0:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc2:	ec f3       	brlt	.-6      	; 0x1cbe <__divsf3_pse+0x6a>
    1cc4:	98 3e       	cpi	r25, 0xE8	; 232
    1cc6:	dc f3       	brlt	.-10     	; 0x1cbe <__divsf3_pse+0x6a>
    1cc8:	86 95       	lsr	r24
    1cca:	77 95       	ror	r23
    1ccc:	67 95       	ror	r22
    1cce:	b7 95       	ror	r27
    1cd0:	f7 95       	ror	r31
    1cd2:	9f 5f       	subi	r25, 0xFF	; 255
    1cd4:	c9 f7       	brne	.-14     	; 0x1cc8 <__divsf3_pse+0x74>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	91 1d       	adc	r25, r1
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	97 f9       	bld	r25, 7
    1ce0:	08 95       	ret
    1ce2:	e1 e0       	ldi	r30, 0x01	; 1
    1ce4:	66 0f       	add	r22, r22
    1ce6:	77 1f       	adc	r23, r23
    1ce8:	88 1f       	adc	r24, r24
    1cea:	bb 1f       	adc	r27, r27
    1cec:	62 17       	cp	r22, r18
    1cee:	73 07       	cpc	r23, r19
    1cf0:	84 07       	cpc	r24, r20
    1cf2:	ba 07       	cpc	r27, r26
    1cf4:	20 f0       	brcs	.+8      	; 0x1cfe <__divsf3_pse+0xaa>
    1cf6:	62 1b       	sub	r22, r18
    1cf8:	73 0b       	sbc	r23, r19
    1cfa:	84 0b       	sbc	r24, r20
    1cfc:	ba 0b       	sbc	r27, r26
    1cfe:	ee 1f       	adc	r30, r30
    1d00:	88 f7       	brcc	.-30     	; 0x1ce4 <__divsf3_pse+0x90>
    1d02:	e0 95       	com	r30
    1d04:	08 95       	ret

00001d06 <__fp_mpack>:
    1d06:	9f 3f       	cpi	r25, 0xFF	; 255
    1d08:	31 f0       	breq	.+12     	; 0x1d16 <__fp_mpack_finite+0xc>

00001d0a <__fp_mpack_finite>:
    1d0a:	91 50       	subi	r25, 0x01	; 1
    1d0c:	20 f4       	brcc	.+8      	; 0x1d16 <__fp_mpack_finite+0xc>
    1d0e:	87 95       	ror	r24
    1d10:	77 95       	ror	r23
    1d12:	67 95       	ror	r22
    1d14:	b7 95       	ror	r27
    1d16:	88 0f       	add	r24, r24
    1d18:	91 1d       	adc	r25, r1
    1d1a:	96 95       	lsr	r25
    1d1c:	87 95       	ror	r24
    1d1e:	97 f9       	bld	r25, 7
    1d20:	08 95       	ret

00001d22 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1d22:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1d24:	91 8d       	ldd	r25, Z+25	; 0x19
    1d26:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d28:	89 2f       	mov	r24, r25
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	80 5c       	subi	r24, 0xC0	; 192
    1d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d30:	82 1b       	sub	r24, r18
    1d32:	91 09       	sbc	r25, r1
}
    1d34:	8f 73       	andi	r24, 0x3F	; 63
    1d36:	99 27       	eor	r25, r25
    1d38:	08 95       	ret

00001d3a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1d3a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1d3c:	91 8d       	ldd	r25, Z+25	; 0x19
    1d3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d40:	98 17       	cp	r25, r24
    1d42:	31 f0       	breq	.+12     	; 0x1d50 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1d44:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d46:	e8 0f       	add	r30, r24
    1d48:	f1 1d       	adc	r31, r1
    1d4a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1d54:	08 95       	ret

00001d56 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1d56:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1d58:	91 8d       	ldd	r25, Z+25	; 0x19
    1d5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d5c:	98 17       	cp	r25, r24
    1d5e:	61 f0       	breq	.+24     	; 0x1d78 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1d60:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d62:	df 01       	movw	r26, r30
    1d64:	a8 0f       	add	r26, r24
    1d66:	b1 1d       	adc	r27, r1
    1d68:	5d 96       	adiw	r26, 0x1d	; 29
    1d6a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1d6c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d6e:	9f 5f       	subi	r25, 0xFF	; 255
    1d70:	9f 73       	andi	r25, 0x3F	; 63
    1d72:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1d7c:	08 95       	ret

00001d7e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1d7e:	fc 01       	movw	r30, r24
    1d80:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1d82:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d84:	25 2f       	mov	r18, r21
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	84 2f       	mov	r24, r20
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1d8c:	82 1b       	sub	r24, r18
    1d8e:	93 0b       	sbc	r25, r19
    1d90:	54 17       	cp	r21, r20
    1d92:	10 f0       	brcs	.+4      	; 0x1d98 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1d94:	cf 96       	adiw	r24, 0x3f	; 63
    1d96:	08 95       	ret
  return tail - head - 1;
    1d98:	01 97       	sbiw	r24, 0x01	; 1
}
    1d9a:	08 95       	ret

00001d9c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1d9c:	80 e6       	ldi	r24, 0x60	; 96
    1d9e:	90 e1       	ldi	r25, 0x10	; 16
    1da0:	89 2b       	or	r24, r25
    1da2:	39 f0       	breq	.+14     	; 0x1db2 <_Z14serialEventRunv+0x16>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	89 2b       	or	r24, r25
    1daa:	19 f0       	breq	.+6      	; 0x1db2 <_Z14serialEventRunv+0x16>
    1dac:	89 d1       	rcall	.+786    	; 0x20c0 <_Z17Serial0_availablev>
    1dae:	81 11       	cpse	r24, r1
    1db0:	24 c0       	rjmp	.+72     	; 0x1dfa <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1db2:	85 ef       	ldi	r24, 0xF5	; 245
    1db4:	90 e1       	ldi	r25, 0x10	; 16
    1db6:	89 2b       	or	r24, r25
    1db8:	39 f0       	breq	.+14     	; 0x1dc8 <_Z14serialEventRunv+0x2c>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	89 2b       	or	r24, r25
    1dc0:	19 f0       	breq	.+6      	; 0x1dc8 <_Z14serialEventRunv+0x2c>
    1dc2:	13 d2       	rcall	.+1062   	; 0x21ea <_Z17Serial1_availablev>
    1dc4:	81 11       	cpse	r24, r1
    1dc6:	1c c0       	rjmp	.+56     	; 0x1e00 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	89 2b       	or	r24, r25
    1dce:	41 f0       	breq	.+16     	; 0x1de0 <_Z14serialEventRunv+0x44>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	89 2b       	or	r24, r25
    1dd6:	21 f0       	breq	.+8      	; 0x1de0 <_Z14serialEventRunv+0x44>
    1dd8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1ddc:	81 11       	cpse	r24, r1
    1dde:	13 c0       	rjmp	.+38     	; 0x1e06 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	89 2b       	or	r24, r25
    1de6:	a1 f0       	breq	.+40     	; 0x1e10 <_Z14serialEventRunv+0x74>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	89 2b       	or	r24, r25
    1dee:	81 f0       	breq	.+32     	; 0x1e10 <_Z14serialEventRunv+0x74>
    1df0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1df4:	81 11       	cpse	r24, r1
    1df6:	0a c0       	rjmp	.+20     	; 0x1e0c <_Z14serialEventRunv+0x70>
    1df8:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1dfa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1dfe:	d9 cf       	rjmp	.-78     	; 0x1db2 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1e00:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1e04:	e1 cf       	rjmp	.-62     	; 0x1dc8 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1e06:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1e0a:	ea cf       	rjmp	.-44     	; 0x1de0 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1e0c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1e10:	08 95       	ret

00001e12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1e12:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1e14:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e16:	df 01       	movw	r26, r30
    1e18:	a8 0f       	add	r26, r24
    1e1a:	b1 1d       	adc	r27, r1
    1e1c:	a3 5a       	subi	r26, 0xA3	; 163
    1e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e20:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1e22:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	8f 73       	andi	r24, 0x3F	; 63
    1e2a:	99 27       	eor	r25, r25
    1e2c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1e2e:	a6 89       	ldd	r26, Z+22	; 0x16
    1e30:	b7 89       	ldd	r27, Z+23	; 0x17
    1e32:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1e34:	a0 89       	ldd	r26, Z+16	; 0x10
    1e36:	b1 89       	ldd	r27, Z+17	; 0x11
    1e38:	8c 91       	ld	r24, X
    1e3a:	83 70       	andi	r24, 0x03	; 3
    1e3c:	80 64       	ori	r24, 0x40	; 64
    1e3e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1e40:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e42:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e44:	98 13       	cpse	r25, r24
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1e48:	02 88       	ldd	r0, Z+18	; 0x12
    1e4a:	f3 89       	ldd	r31, Z+19	; 0x13
    1e4c:	e0 2d       	mov	r30, r0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 7d       	andi	r24, 0xDF	; 223
    1e52:	80 83       	st	Z, r24
    1e54:	08 95       	ret

00001e56 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	ec 01       	movw	r28, r24
  _written = true;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1e68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e6c:	98 13       	cpse	r25, r24
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <_ZN14HardwareSerial5writeEh+0x24>
    1e70:	e8 89       	ldd	r30, Y+16	; 0x10
    1e72:	f9 89       	ldd	r31, Y+17	; 0x11
    1e74:	80 81       	ld	r24, Z
    1e76:	85 fd       	sbrc	r24, 5
    1e78:	25 c0       	rjmp	.+74     	; 0x1ec4 <_ZN14HardwareSerial5writeEh+0x6e>
    1e7a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1e7c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
    1e80:	0f 5f       	subi	r16, 0xFF	; 255
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	0f 73       	andi	r16, 0x3F	; 63
    1e86:	11 27       	eor	r17, r17
    1e88:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1e8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e8c:	e8 12       	cpse	r14, r24
    1e8e:	0b c0       	rjmp	.+22     	; 0x1ea6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	07 fc       	sbrc	r0, 7
    1e94:	fa cf       	rjmp	.-12     	; 0x1e8a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1e96:	e8 89       	ldd	r30, Y+16	; 0x10
    1e98:	f9 89       	ldd	r31, Y+17	; 0x11
    1e9a:	80 81       	ld	r24, Z
    1e9c:	85 ff       	sbrs	r24, 5
    1e9e:	f5 cf       	rjmp	.-22     	; 0x1e8a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	b7 df       	rcall	.-146    	; 0x1e12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ea4:	f2 cf       	rjmp	.-28     	; 0x1e8a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1ea6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e8 0f       	add	r30, r24
    1eac:	f1 1d       	adc	r31, r1
    1eae:	e3 5a       	subi	r30, 0xA3	; 163
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1eb4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1eb6:	f8 94       	cli
    _tx_buffer_head = i;
    1eb8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1eba:	ea 89       	ldd	r30, Y+18	; 0x12
    1ebc:	fb 89       	ldd	r31, Y+19	; 0x13
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 62       	ori	r24, 0x20	; 32
    1ec2:	0a c0       	rjmp	.+20     	; 0x1ed8 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1ec4:	9f b7       	in	r25, 0x3f	; 63
    1ec6:	f8 94       	cli
      *_udr = c;
    1ec8:	ee 89       	ldd	r30, Y+22	; 0x16
    1eca:	ff 89       	ldd	r31, Y+23	; 0x17
    1ecc:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1ece:	e8 89       	ldd	r30, Y+16	; 0x10
    1ed0:	f9 89       	ldd	r31, Y+17	; 0x11
    1ed2:	80 81       	ld	r24, Z
    1ed4:	83 70       	andi	r24, 0x03	; 3
    1ed6:	80 64       	ori	r24, 0x40	; 64
    1ed8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1eda:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	08 95       	ret

00001eee <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1ef4:	88 8d       	ldd	r24, Y+24	; 0x18
    1ef6:	88 23       	and	r24, r24
    1ef8:	c1 f0       	breq	.+48     	; 0x1f2a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1efa:	ea 89       	ldd	r30, Y+18	; 0x12
    1efc:	fb 89       	ldd	r31, Y+19	; 0x13
    1efe:	80 81       	ld	r24, Z
    1f00:	85 fd       	sbrc	r24, 5
    1f02:	05 c0       	rjmp	.+10     	; 0x1f0e <_ZN14HardwareSerial5flushEv+0x20>
    1f04:	a8 89       	ldd	r26, Y+16	; 0x10
    1f06:	b9 89       	ldd	r27, Y+17	; 0x11
    1f08:	8c 91       	ld	r24, X
    1f0a:	86 fd       	sbrc	r24, 6
    1f0c:	0e c0       	rjmp	.+28     	; 0x1f2a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	07 fc       	sbrc	r0, 7
    1f12:	f5 cf       	rjmp	.-22     	; 0x1efe <_ZN14HardwareSerial5flushEv+0x10>
    1f14:	80 81       	ld	r24, Z
    1f16:	85 ff       	sbrs	r24, 5
    1f18:	f2 cf       	rjmp	.-28     	; 0x1efe <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1f1a:	a8 89       	ldd	r26, Y+16	; 0x10
    1f1c:	b9 89       	ldd	r27, Y+17	; 0x11
    1f1e:	8c 91       	ld	r24, X
    1f20:	85 ff       	sbrs	r24, 5
    1f22:	ed cf       	rjmp	.-38     	; 0x1efe <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1f24:	ce 01       	movw	r24, r28
    1f26:	75 df       	rcall	.-278    	; 0x1e12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1f28:	e8 cf       	rjmp	.-48     	; 0x1efa <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	08 95       	ret

00001f30 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1f30:	cf 92       	push	r12
    1f32:	df 92       	push	r13
    1f34:	ef 92       	push	r14
    1f36:	ff 92       	push	r15
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	ec 01       	movw	r28, r24
    1f40:	6a 01       	movw	r12, r20
    1f42:	7b 01       	movw	r14, r22
    1f44:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1f46:	e8 89       	ldd	r30, Y+16	; 0x10
    1f48:	f9 89       	ldd	r31, Y+17	; 0x11
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1f4e:	41 15       	cp	r20, r1
    1f50:	51 4e       	sbci	r21, 0xE1	; 225
    1f52:	61 05       	cpc	r22, r1
    1f54:	71 05       	cpc	r23, r1
    1f56:	b1 f0       	breq	.+44     	; 0x1f84 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	79 e0       	ldi	r23, 0x09	; 9
    1f5c:	8d e3       	ldi	r24, 0x3D	; 61
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a7 01       	movw	r20, r14
    1f62:	96 01       	movw	r18, r12
    1f64:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
    1f68:	da 01       	movw	r26, r20
    1f6a:	c9 01       	movw	r24, r18
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	a1 09       	sbc	r26, r1
    1f70:	b1 09       	sbc	r27, r1
    1f72:	b6 95       	lsr	r27
    1f74:	a7 95       	ror	r26
    1f76:	97 95       	ror	r25
    1f78:	87 95       	ror	r24
    1f7a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1f7c:	21 15       	cp	r18, r1
    1f7e:	80 e1       	ldi	r24, 0x10	; 16
    1f80:	38 07       	cpc	r19, r24
    1f82:	a8 f0       	brcs	.+42     	; 0x1fae <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1f84:	e8 89       	ldd	r30, Y+16	; 0x10
    1f86:	f9 89       	ldd	r31, Y+17	; 0x11
    1f88:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1f8a:	60 e8       	ldi	r22, 0x80	; 128
    1f8c:	74 e8       	ldi	r23, 0x84	; 132
    1f8e:	8e e1       	ldi	r24, 0x1E	; 30
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a7 01       	movw	r20, r14
    1f94:	96 01       	movw	r18, r12
    1f96:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
    1f9a:	da 01       	movw	r26, r20
    1f9c:	c9 01       	movw	r24, r18
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	a1 09       	sbc	r26, r1
    1fa2:	b1 09       	sbc	r27, r1
    1fa4:	b6 95       	lsr	r27
    1fa6:	a7 95       	ror	r26
    1fa8:	97 95       	ror	r25
    1faa:	87 95       	ror	r24
    1fac:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1fae:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fb0:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fb2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1fb4:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fb6:	ff 85       	ldd	r31, Y+15	; 0x0f
    1fb8:	20 83       	st	Z, r18

  _written = false;
    1fba:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1fbc:	ec 89       	ldd	r30, Y+20	; 0x14
    1fbe:	fd 89       	ldd	r31, Y+21	; 0x15
    1fc0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1fc2:	ea 89       	ldd	r30, Y+18	; 0x12
    1fc4:	fb 89       	ldd	r31, Y+19	; 0x13
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 61       	ori	r24, 0x10	; 16
    1fca:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1fcc:	ea 89       	ldd	r30, Y+18	; 0x12
    1fce:	fb 89       	ldd	r31, Y+19	; 0x13
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 60       	ori	r24, 0x08	; 8
    1fd4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1fd6:	ea 89       	ldd	r30, Y+18	; 0x12
    1fd8:	fb 89       	ldd	r31, Y+19	; 0x13
    1fda:	80 81       	ld	r24, Z
    1fdc:	80 68       	ori	r24, 0x80	; 128
    1fde:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1fe0:	ea 89       	ldd	r30, Y+18	; 0x12
    1fe2:	fb 89       	ldd	r31, Y+19	; 0x13
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8f 7d       	andi	r24, 0xDF	; 223
    1fe8:	80 83       	st	Z, r24
}
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	df 90       	pop	r13
    1ff6:	cf 90       	pop	r12
    1ff8:	08 95       	ret

00001ffa <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	08 95       	ret

00002000 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2000:	08 95       	ret

00002002 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2002:	1f 92       	push	r1
    2004:	0f 92       	push	r0
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	0f 92       	push	r0
    200a:	11 24       	eor	r1, r1
    200c:	0b b6       	in	r0, 0x3b	; 59
    200e:	0f 92       	push	r0
    2010:	2f 93       	push	r18
    2012:	8f 93       	push	r24
    2014:	9f 93       	push	r25
    2016:	ef 93       	push	r30
    2018:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    201a:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <Serial+0x10>
    201e:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <Serial+0x11>
    2022:	80 81       	ld	r24, Z
    2024:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <Serial+0x16>
    2028:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <Serial+0x17>
    202c:	82 fd       	sbrc	r24, 2
    202e:	12 c0       	rjmp	.+36     	; 0x2054 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2030:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2032:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <Serial+0x19>
    2036:	8f 5f       	subi	r24, 0xFF	; 255
    2038:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    203a:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <Serial+0x1a>
    203e:	82 17       	cp	r24, r18
    2040:	51 f0       	breq	.+20     	; 0x2056 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    2042:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <Serial+0x19>
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	ed 57       	subi	r30, 0x7D	; 125
    204a:	fc 4f       	sbci	r31, 0xFC	; 252
    204c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    204e:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <Serial+0x19>
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2054:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2056:	ff 91       	pop	r31
    2058:	ef 91       	pop	r30
    205a:	9f 91       	pop	r25
    205c:	8f 91       	pop	r24
    205e:	2f 91       	pop	r18
    2060:	0f 90       	pop	r0
    2062:	0b be       	out	0x3b, r0	; 59
    2064:	0f 90       	pop	r0
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	0f 90       	pop	r0
    206a:	1f 90       	pop	r1
    206c:	18 95       	reti

0000206e <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    206e:	1f 92       	push	r1
    2070:	0f 92       	push	r0
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	0f 92       	push	r0
    2076:	11 24       	eor	r1, r1
    2078:	0b b6       	in	r0, 0x3b	; 59
    207a:	0f 92       	push	r0
    207c:	2f 93       	push	r18
    207e:	3f 93       	push	r19
    2080:	4f 93       	push	r20
    2082:	5f 93       	push	r21
    2084:	6f 93       	push	r22
    2086:	7f 93       	push	r23
    2088:	8f 93       	push	r24
    208a:	9f 93       	push	r25
    208c:	af 93       	push	r26
    208e:	bf 93       	push	r27
    2090:	ef 93       	push	r30
    2092:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2094:	83 e8       	ldi	r24, 0x83	; 131
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	bc de       	rcall	.-648    	; 0x1e12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    209a:	ff 91       	pop	r31
    209c:	ef 91       	pop	r30
    209e:	bf 91       	pop	r27
    20a0:	af 91       	pop	r26
    20a2:	9f 91       	pop	r25
    20a4:	8f 91       	pop	r24
    20a6:	7f 91       	pop	r23
    20a8:	6f 91       	pop	r22
    20aa:	5f 91       	pop	r21
    20ac:	4f 91       	pop	r20
    20ae:	3f 91       	pop	r19
    20b0:	2f 91       	pop	r18
    20b2:	0f 90       	pop	r0
    20b4:	0b be       	out	0x3b, r0	; 59
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    20c0:	83 e8       	ldi	r24, 0x83	; 131
    20c2:	93 e0       	ldi	r25, 0x03	; 3
    20c4:	2e de       	rcall	.-932    	; 0x1d22 <_ZN14HardwareSerial9availableEv>
    20c6:	21 e0       	ldi	r18, 0x01	; 1
    20c8:	89 2b       	or	r24, r25
    20ca:	09 f4       	brne	.+2      	; 0x20ce <_Z17Serial0_availablev+0xe>
    20cc:	20 e0       	ldi	r18, 0x00	; 0
}
    20ce:	82 2f       	mov	r24, r18
    20d0:	08 95       	ret

000020d2 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    20d2:	e3 e8       	ldi	r30, 0x83	; 131
    20d4:	f3 e0       	ldi	r31, 0x03	; 3
    20d6:	13 82       	std	Z+3, r1	; 0x03
    20d8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    20da:	88 ee       	ldi	r24, 0xE8	; 232
    20dc:	93 e0       	ldi	r25, 0x03	; 3
    20de:	a0 e0       	ldi	r26, 0x00	; 0
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	84 83       	std	Z+4, r24	; 0x04
    20e4:	95 83       	std	Z+5, r25	; 0x05
    20e6:	a6 83       	std	Z+6, r26	; 0x06
    20e8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    20ea:	83 ee       	ldi	r24, 0xE3	; 227
    20ec:	92 e0       	ldi	r25, 0x02	; 2
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	80 83       	st	Z, r24
    20f2:	85 ec       	ldi	r24, 0xC5	; 197
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	95 87       	std	Z+13, r25	; 0x0d
    20f8:	84 87       	std	Z+12, r24	; 0x0c
    20fa:	84 ec       	ldi	r24, 0xC4	; 196
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	97 87       	std	Z+15, r25	; 0x0f
    2100:	86 87       	std	Z+14, r24	; 0x0e
    2102:	80 ec       	ldi	r24, 0xC0	; 192
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	91 8b       	std	Z+17, r25	; 0x11
    2108:	80 8b       	std	Z+16, r24	; 0x10
    210a:	81 ec       	ldi	r24, 0xC1	; 193
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	93 8b       	std	Z+19, r25	; 0x13
    2110:	82 8b       	std	Z+18, r24	; 0x12
    2112:	82 ec       	ldi	r24, 0xC2	; 194
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	95 8b       	std	Z+21, r25	; 0x15
    2118:	84 8b       	std	Z+20, r24	; 0x14
    211a:	86 ec       	ldi	r24, 0xC6	; 198
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	97 8b       	std	Z+23, r25	; 0x17
    2120:	86 8b       	std	Z+22, r24	; 0x16
    2122:	11 8e       	std	Z+25, r1	; 0x19
    2124:	12 8e       	std	Z+26, r1	; 0x1a
    2126:	13 8e       	std	Z+27, r1	; 0x1b
    2128:	14 8e       	std	Z+28, r1	; 0x1c
    212a:	08 95       	ret

0000212c <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    212c:	1f 92       	push	r1
    212e:	0f 92       	push	r0
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	0f 92       	push	r0
    2134:	11 24       	eor	r1, r1
    2136:	0b b6       	in	r0, 0x3b	; 59
    2138:	0f 92       	push	r0
    213a:	2f 93       	push	r18
    213c:	8f 93       	push	r24
    213e:	9f 93       	push	r25
    2140:	ef 93       	push	r30
    2142:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2144:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <Serial1+0x10>
    2148:	f0 91 31 04 	lds	r31, 0x0431	; 0x800431 <Serial1+0x11>
    214c:	80 81       	ld	r24, Z
    214e:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <Serial1+0x16>
    2152:	f0 91 37 04 	lds	r31, 0x0437	; 0x800437 <Serial1+0x17>
    2156:	82 fd       	sbrc	r24, 2
    2158:	12 c0       	rjmp	.+36     	; 0x217e <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    215a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    215c:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <Serial1+0x19>
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2164:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <Serial1+0x1a>
    2168:	82 17       	cp	r24, r18
    216a:	51 f0       	breq	.+20     	; 0x2180 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    216c:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <Serial1+0x19>
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	e0 5e       	subi	r30, 0xE0	; 224
    2174:	fb 4f       	sbci	r31, 0xFB	; 251
    2176:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2178:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <Serial1+0x19>
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    217e:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    2180:	ff 91       	pop	r31
    2182:	ef 91       	pop	r30
    2184:	9f 91       	pop	r25
    2186:	8f 91       	pop	r24
    2188:	2f 91       	pop	r18
    218a:	0f 90       	pop	r0
    218c:	0b be       	out	0x3b, r0	; 59
    218e:	0f 90       	pop	r0
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	0f 90       	pop	r0
    2194:	1f 90       	pop	r1
    2196:	18 95       	reti

00002198 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2198:	1f 92       	push	r1
    219a:	0f 92       	push	r0
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	0f 92       	push	r0
    21a0:	11 24       	eor	r1, r1
    21a2:	0b b6       	in	r0, 0x3b	; 59
    21a4:	0f 92       	push	r0
    21a6:	2f 93       	push	r18
    21a8:	3f 93       	push	r19
    21aa:	4f 93       	push	r20
    21ac:	5f 93       	push	r21
    21ae:	6f 93       	push	r22
    21b0:	7f 93       	push	r23
    21b2:	8f 93       	push	r24
    21b4:	9f 93       	push	r25
    21b6:	af 93       	push	r26
    21b8:	bf 93       	push	r27
    21ba:	ef 93       	push	r30
    21bc:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    21be:	80 e2       	ldi	r24, 0x20	; 32
    21c0:	94 e0       	ldi	r25, 0x04	; 4
    21c2:	27 de       	rcall	.-946    	; 0x1e12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    21c4:	ff 91       	pop	r31
    21c6:	ef 91       	pop	r30
    21c8:	bf 91       	pop	r27
    21ca:	af 91       	pop	r26
    21cc:	9f 91       	pop	r25
    21ce:	8f 91       	pop	r24
    21d0:	7f 91       	pop	r23
    21d2:	6f 91       	pop	r22
    21d4:	5f 91       	pop	r21
    21d6:	4f 91       	pop	r20
    21d8:	3f 91       	pop	r19
    21da:	2f 91       	pop	r18
    21dc:	0f 90       	pop	r0
    21de:	0b be       	out	0x3b, r0	; 59
    21e0:	0f 90       	pop	r0
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	0f 90       	pop	r0
    21e6:	1f 90       	pop	r1
    21e8:	18 95       	reti

000021ea <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    21ea:	80 e2       	ldi	r24, 0x20	; 32
    21ec:	94 e0       	ldi	r25, 0x04	; 4
    21ee:	99 dd       	rcall	.-1230   	; 0x1d22 <_ZN14HardwareSerial9availableEv>
    21f0:	21 e0       	ldi	r18, 0x01	; 1
    21f2:	89 2b       	or	r24, r25
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <_Z17Serial1_availablev+0xe>
    21f6:	20 e0       	ldi	r18, 0x00	; 0
}
    21f8:	82 2f       	mov	r24, r18
    21fa:	08 95       	ret

000021fc <_GLOBAL__sub_I___vector_36>:
    21fc:	e0 e2       	ldi	r30, 0x20	; 32
    21fe:	f4 e0       	ldi	r31, 0x04	; 4
    2200:	13 82       	std	Z+3, r1	; 0x03
    2202:	12 82       	std	Z+2, r1	; 0x02
    2204:	88 ee       	ldi	r24, 0xE8	; 232
    2206:	93 e0       	ldi	r25, 0x03	; 3
    2208:	a0 e0       	ldi	r26, 0x00	; 0
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	84 83       	std	Z+4, r24	; 0x04
    220e:	95 83       	std	Z+5, r25	; 0x05
    2210:	a6 83       	std	Z+6, r26	; 0x06
    2212:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2214:	83 ee       	ldi	r24, 0xE3	; 227
    2216:	92 e0       	ldi	r25, 0x02	; 2
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	8d ec       	ldi	r24, 0xCD	; 205
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	95 87       	std	Z+13, r25	; 0x0d
    2222:	84 87       	std	Z+12, r24	; 0x0c
    2224:	8c ec       	ldi	r24, 0xCC	; 204
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	97 87       	std	Z+15, r25	; 0x0f
    222a:	86 87       	std	Z+14, r24	; 0x0e
    222c:	88 ec       	ldi	r24, 0xC8	; 200
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	91 8b       	std	Z+17, r25	; 0x11
    2232:	80 8b       	std	Z+16, r24	; 0x10
    2234:	89 ec       	ldi	r24, 0xC9	; 201
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	93 8b       	std	Z+19, r25	; 0x13
    223a:	82 8b       	std	Z+18, r24	; 0x12
    223c:	8a ec       	ldi	r24, 0xCA	; 202
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	95 8b       	std	Z+21, r25	; 0x15
    2242:	84 8b       	std	Z+20, r24	; 0x14
    2244:	8e ec       	ldi	r24, 0xCE	; 206
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	97 8b       	std	Z+23, r25	; 0x17
    224a:	86 8b       	std	Z+22, r24	; 0x16
    224c:	11 8e       	std	Z+25, r1	; 0x19
    224e:	12 8e       	std	Z+26, r1	; 0x1a
    2250:	13 8e       	std	Z+27, r1	; 0x1b
    2252:	14 8e       	std	Z+28, r1	; 0x1c
    2254:	08 95       	ret

00002256 <initVariant>:
    2256:	08 95       	ret

00002258 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2258:	e8 d1       	rcall	.+976    	; 0x262a <init>

	initVariant();
    225a:	fd df       	rcall	.-6      	; 0x2256 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    225c:	1d d9       	rcall	.-3526   	; 0x1498 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    225e:	ce ec       	ldi	r28, 0xCE	; 206
    2260:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    2262:	4d d8       	rcall	.-3942   	; 0x12fe <loop>
		if (serialEventRun) serialEventRun();
    2264:	20 97       	sbiw	r28, 0x00	; 0
    2266:	e9 f3       	breq	.-6      	; 0x2262 <main+0xa>
    2268:	99 dd       	rcall	.-1230   	; 0x1d9c <_Z14serialEventRunv>
    226a:	fb cf       	rjmp	.-10     	; 0x2262 <main+0xa>

0000226c <_ZN5Print5writeEPKhj>:
    226c:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    226e:	df 92       	push	r13
    2270:	ef 92       	push	r14
    2272:	ff 92       	push	r15
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	6c 01       	movw	r12, r24
    227e:	7a 01       	movw	r14, r20
    2280:	8b 01       	movw	r16, r22
    2282:	c0 e0       	ldi	r28, 0x00	; 0
    2284:	d0 e0       	ldi	r29, 0x00	; 0
    2286:	ce 15       	cp	r28, r14
    2288:	df 05       	cpc	r29, r15
    228a:	81 f0       	breq	.+32     	; 0x22ac <_ZN5Print5writeEPKhj+0x40>
    228c:	d8 01       	movw	r26, r16
    228e:	6d 91       	ld	r22, X+
    2290:	8d 01       	movw	r16, r26
    2292:	d6 01       	movw	r26, r12
    2294:	ed 91       	ld	r30, X+
    2296:	fc 91       	ld	r31, X
    2298:	01 90       	ld	r0, Z+
    229a:	f0 81       	ld	r31, Z
    229c:	e0 2d       	mov	r30, r0
    229e:	c6 01       	movw	r24, r12
    22a0:	19 95       	eicall
    22a2:	89 2b       	or	r24, r25
    22a4:	11 f0       	breq	.+4      	; 0x22aa <_ZN5Print5writeEPKhj+0x3e>
    22a6:	21 96       	adiw	r28, 0x01	; 1
    22a8:	ee cf       	rjmp	.-36     	; 0x2286 <_ZN5Print5writeEPKhj+0x1a>
    22aa:	7e 01       	movw	r14, r28
    22ac:	c7 01       	movw	r24, r14
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	ff 90       	pop	r15
    22b8:	ef 90       	pop	r14
    22ba:	df 90       	pop	r13
    22bc:	cf 90       	pop	r12
    22be:	08 95       	ret

000022c0 <_ZN5Print5writeEPKc>:
    22c0:	61 15       	cp	r22, r1
    22c2:	71 05       	cpc	r23, r1
    22c4:	79 f0       	breq	.+30     	; 0x22e4 <_ZN5Print5writeEPKc+0x24>
    22c6:	fb 01       	movw	r30, r22
    22c8:	01 90       	ld	r0, Z+
    22ca:	00 20       	and	r0, r0
    22cc:	e9 f7       	brne	.-6      	; 0x22c8 <_ZN5Print5writeEPKc+0x8>
    22ce:	31 97       	sbiw	r30, 0x01	; 1
    22d0:	af 01       	movw	r20, r30
    22d2:	46 1b       	sub	r20, r22
    22d4:	57 0b       	sbc	r21, r23
    22d6:	dc 01       	movw	r26, r24
    22d8:	ed 91       	ld	r30, X+
    22da:	fc 91       	ld	r31, X
    22dc:	02 80       	ldd	r0, Z+2	; 0x02
    22de:	f3 81       	ldd	r31, Z+3	; 0x03
    22e0:	e0 2d       	mov	r30, r0
    22e2:	19 94       	eijmp
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	08 95       	ret

000022ea <_ZN5Print5printERK6String>:
    22ea:	db 01       	movw	r26, r22
    22ec:	14 96       	adiw	r26, 0x04	; 4
    22ee:	4d 91       	ld	r20, X+
    22f0:	5c 91       	ld	r21, X
    22f2:	15 97       	sbiw	r26, 0x05	; 5
    22f4:	6d 91       	ld	r22, X+
    22f6:	7c 91       	ld	r23, X
    22f8:	dc 01       	movw	r26, r24
    22fa:	ed 91       	ld	r30, X+
    22fc:	fc 91       	ld	r31, X
    22fe:	02 80       	ldd	r0, Z+2	; 0x02
    2300:	f3 81       	ldd	r31, Z+3	; 0x03
    2302:	e0 2d       	mov	r30, r0
    2304:	19 94       	eijmp

00002306 <_ZN5Print5printEPKc>:
    2306:	dc cf       	rjmp	.-72     	; 0x22c0 <_ZN5Print5writeEPKc>

00002308 <_ZN5Print5printEc>:
    2308:	dc 01       	movw	r26, r24
    230a:	ed 91       	ld	r30, X+
    230c:	fc 91       	ld	r31, X
    230e:	01 90       	ld	r0, Z+
    2310:	f0 81       	ld	r31, Z
    2312:	e0 2d       	mov	r30, r0
    2314:	19 94       	eijmp

00002316 <_ZN5Print7printlnEv>:
    2316:	61 ef       	ldi	r22, 0xF1	; 241
    2318:	72 e0       	ldi	r23, 0x02	; 2
    231a:	d2 cf       	rjmp	.-92     	; 0x22c0 <_ZN5Print5writeEPKc>

0000231c <_ZN5Print7printlnERK6String>:
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	ec 01       	movw	r28, r24
    2326:	e1 df       	rcall	.-62     	; 0x22ea <_ZN5Print5printERK6String>
    2328:	8c 01       	movw	r16, r24
    232a:	ce 01       	movw	r24, r28
    232c:	f4 df       	rcall	.-24     	; 0x2316 <_ZN5Print7printlnEv>
    232e:	80 0f       	add	r24, r16
    2330:	91 1f       	adc	r25, r17
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
    2338:	0f 91       	pop	r16
    233a:	08 95       	ret

0000233c <_ZN5Print7printlnEPKc>:
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	ec 01       	movw	r28, r24
    2346:	bc df       	rcall	.-136    	; 0x22c0 <_ZN5Print5writeEPKc>
    2348:	8c 01       	movw	r16, r24
    234a:	ce 01       	movw	r24, r28
    234c:	e4 df       	rcall	.-56     	; 0x2316 <_ZN5Print7printlnEv>
    234e:	80 0f       	add	r24, r16
    2350:	91 1f       	adc	r25, r17
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

0000235c <_ZN5Print11printNumberEmh>:
    235c:	8f 92       	push	r8
    235e:	9f 92       	push	r9
    2360:	af 92       	push	r10
    2362:	bf 92       	push	r11
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	a1 97       	sbiw	r28, 0x21	; 33
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	7c 01       	movw	r14, r24
    2382:	fa 01       	movw	r30, r20
    2384:	cb 01       	movw	r24, r22
    2386:	19 a2       	std	Y+33, r1	; 0x21
    2388:	22 30       	cpi	r18, 0x02	; 2
    238a:	08 f4       	brcc	.+2      	; 0x238e <_ZN5Print11printNumberEmh+0x32>
    238c:	2a e0       	ldi	r18, 0x0A	; 10
    238e:	8e 01       	movw	r16, r28
    2390:	0f 5d       	subi	r16, 0xDF	; 223
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	82 2e       	mov	r8, r18
    2396:	91 2c       	mov	r9, r1
    2398:	a1 2c       	mov	r10, r1
    239a:	b1 2c       	mov	r11, r1
    239c:	bf 01       	movw	r22, r30
    239e:	a5 01       	movw	r20, r10
    23a0:	94 01       	movw	r18, r8
    23a2:	22 d7       	rcall	.+3652   	; 0x31e8 <__udivmodsi4>
    23a4:	f9 01       	movw	r30, r18
    23a6:	ca 01       	movw	r24, r20
    23a8:	01 50       	subi	r16, 0x01	; 1
    23aa:	11 09       	sbc	r17, r1
    23ac:	6a 30       	cpi	r22, 0x0A	; 10
    23ae:	10 f4       	brcc	.+4      	; 0x23b4 <_ZN5Print11printNumberEmh+0x58>
    23b0:	60 5d       	subi	r22, 0xD0	; 208
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <_ZN5Print11printNumberEmh+0x5a>
    23b4:	69 5c       	subi	r22, 0xC9	; 201
    23b6:	d8 01       	movw	r26, r16
    23b8:	6c 93       	st	X, r22
    23ba:	23 2b       	or	r18, r19
    23bc:	24 2b       	or	r18, r20
    23be:	25 2b       	or	r18, r21
    23c0:	69 f7       	brne	.-38     	; 0x239c <_ZN5Print11printNumberEmh+0x40>
    23c2:	b8 01       	movw	r22, r16
    23c4:	c7 01       	movw	r24, r14
    23c6:	7c df       	rcall	.-264    	; 0x22c0 <_ZN5Print5writeEPKc>
    23c8:	a1 96       	adiw	r28, 0x21	; 33
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	1f 91       	pop	r17
    23da:	0f 91       	pop	r16
    23dc:	ff 90       	pop	r15
    23de:	ef 90       	pop	r14
    23e0:	bf 90       	pop	r11
    23e2:	af 90       	pop	r10
    23e4:	9f 90       	pop	r9
    23e6:	8f 90       	pop	r8
    23e8:	08 95       	ret

000023ea <_ZN5Print5printEmi>:
    23ea:	21 15       	cp	r18, r1
    23ec:	31 05       	cpc	r19, r1
    23ee:	41 f4       	brne	.+16     	; 0x2400 <_ZN5Print5printEmi+0x16>
    23f0:	dc 01       	movw	r26, r24
    23f2:	ed 91       	ld	r30, X+
    23f4:	fc 91       	ld	r31, X
    23f6:	01 90       	ld	r0, Z+
    23f8:	f0 81       	ld	r31, Z
    23fa:	e0 2d       	mov	r30, r0
    23fc:	64 2f       	mov	r22, r20
    23fe:	19 94       	eijmp
    2400:	ad cf       	rjmp	.-166    	; 0x235c <_ZN5Print11printNumberEmh>

00002402 <_ZN5Print5printEhi>:
    2402:	9a 01       	movw	r18, r20
    2404:	46 2f       	mov	r20, r22
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	ee cf       	rjmp	.-36     	; 0x23ea <_ZN5Print5printEmi>

0000240e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    240e:	cf 92       	push	r12
    2410:	df 92       	push	r13
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
  if (base == 0) {
    241e:	21 15       	cp	r18, r1
    2420:	31 05       	cpc	r19, r1
    2422:	81 f4       	brne	.+32     	; 0x2444 <_ZN5Print5printEli+0x36>
    return write(n);
    2424:	dc 01       	movw	r26, r24
    2426:	ed 91       	ld	r30, X+
    2428:	fc 91       	ld	r31, X
    242a:	01 90       	ld	r0, Z+
    242c:	f0 81       	ld	r31, Z
    242e:	e0 2d       	mov	r30, r0
    2430:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	ff 90       	pop	r15
    243c:	ef 90       	pop	r14
    243e:	df 90       	pop	r13
    2440:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2442:	19 94       	eijmp
  } else if (base == 10) {
    2444:	2a 30       	cpi	r18, 0x0A	; 10
    2446:	31 05       	cpc	r19, r1
    2448:	f1 f4       	brne	.+60     	; 0x2486 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    244a:	77 ff       	sbrs	r23, 7
    244c:	1b c0       	rjmp	.+54     	; 0x2484 <_ZN5Print5printEli+0x76>
    244e:	6a 01       	movw	r12, r20
    2450:	7b 01       	movw	r14, r22
    2452:	ec 01       	movw	r28, r24
      int t = print('-');
    2454:	6d e2       	ldi	r22, 0x2D	; 45
    2456:	58 df       	rcall	.-336    	; 0x2308 <_ZN5Print5printEc>
    2458:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    245a:	44 27       	eor	r20, r20
    245c:	55 27       	eor	r21, r21
    245e:	ba 01       	movw	r22, r20
    2460:	4c 19       	sub	r20, r12
    2462:	5d 09       	sbc	r21, r13
    2464:	6e 09       	sbc	r22, r14
    2466:	7f 09       	sbc	r23, r15
    2468:	2a e0       	ldi	r18, 0x0A	; 10
    246a:	ce 01       	movw	r24, r28
    246c:	77 df       	rcall	.-274    	; 0x235c <_ZN5Print11printNumberEmh>
    246e:	80 0f       	add	r24, r16
    2470:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	df 90       	pop	r13
    2480:	cf 90       	pop	r12
    2482:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2484:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	ff 90       	pop	r15
    2490:	ef 90       	pop	r14
    2492:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2494:	cf 90       	pop	r12
    2496:	62 cf       	rjmp	.-316    	; 0x235c <_ZN5Print11printNumberEmh>

00002498 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2498:	9a 01       	movw	r18, r20
  return print((long) n, base);
    249a:	ab 01       	movw	r20, r22
    249c:	77 0f       	add	r23, r23
    249e:	66 0b       	sbc	r22, r22
    24a0:	77 0b       	sbc	r23, r23
    24a2:	b5 cf       	rjmp	.-150    	; 0x240e <_ZN5Print5printEli>

000024a4 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    24ae:	f4 df       	rcall	.-24     	; 0x2498 <_ZN5Print5printEii>
    24b0:	8c 01       	movw	r16, r24
  n += println();
    24b2:	ce 01       	movw	r24, r28
    24b4:	30 df       	rcall	.-416    	; 0x2316 <_ZN5Print7printlnEv>
  return n;
}
    24b6:	80 0f       	add	r24, r16
    24b8:	91 1f       	adc	r25, r17
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	08 95       	ret

000024c4 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    24c4:	1f 92       	push	r1
    24c6:	0f 92       	push	r0
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	0f 92       	push	r0
    24cc:	11 24       	eor	r1, r1
    24ce:	2f 93       	push	r18
    24d0:	3f 93       	push	r19
    24d2:	8f 93       	push	r24
    24d4:	9f 93       	push	r25
    24d6:	af 93       	push	r26
    24d8:	bf 93       	push	r27
    24da:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <timer0_millis>
    24de:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <timer0_millis+0x1>
    24e2:	a0 91 c0 04 	lds	r26, 0x04C0	; 0x8004c0 <timer0_millis+0x2>
    24e6:	b0 91 c1 04 	lds	r27, 0x04C1	; 0x8004c1 <timer0_millis+0x3>
    24ea:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <timer0_fract>
    24ee:	23 e0       	ldi	r18, 0x03	; 3
    24f0:	23 0f       	add	r18, r19
    24f2:	2d 37       	cpi	r18, 0x7D	; 125
    24f4:	20 f4       	brcc	.+8      	; 0x24fe <__vector_23+0x3a>
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	a1 1d       	adc	r26, r1
    24fa:	b1 1d       	adc	r27, r1
    24fc:	05 c0       	rjmp	.+10     	; 0x2508 <__vector_23+0x44>
    24fe:	26 e8       	ldi	r18, 0x86	; 134
    2500:	23 0f       	add	r18, r19
    2502:	02 96       	adiw	r24, 0x02	; 2
    2504:	a1 1d       	adc	r26, r1
    2506:	b1 1d       	adc	r27, r1
    2508:	20 93 bd 04 	sts	0x04BD, r18	; 0x8004bd <timer0_fract>
    250c:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <timer0_millis>
    2510:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <timer0_millis+0x1>
    2514:	a0 93 c0 04 	sts	0x04C0, r26	; 0x8004c0 <timer0_millis+0x2>
    2518:	b0 93 c1 04 	sts	0x04C1, r27	; 0x8004c1 <timer0_millis+0x3>
    251c:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <timer0_overflow_count>
    2520:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <timer0_overflow_count+0x1>
    2524:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <timer0_overflow_count+0x2>
    2528:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <timer0_overflow_count+0x3>
    252c:	01 96       	adiw	r24, 0x01	; 1
    252e:	a1 1d       	adc	r26, r1
    2530:	b1 1d       	adc	r27, r1
    2532:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <timer0_overflow_count>
    2536:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <timer0_overflow_count+0x1>
    253a:	a0 93 c4 04 	sts	0x04C4, r26	; 0x8004c4 <timer0_overflow_count+0x2>
    253e:	b0 93 c5 04 	sts	0x04C5, r27	; 0x8004c5 <timer0_overflow_count+0x3>
    2542:	bf 91       	pop	r27
    2544:	af 91       	pop	r26
    2546:	9f 91       	pop	r25
    2548:	8f 91       	pop	r24
    254a:	3f 91       	pop	r19
    254c:	2f 91       	pop	r18
    254e:	0f 90       	pop	r0
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	0f 90       	pop	r0
    2554:	1f 90       	pop	r1
    2556:	18 95       	reti

00002558 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2558:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    255a:	f8 94       	cli
	m = timer0_overflow_count;
    255c:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <timer0_overflow_count>
    2560:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <timer0_overflow_count+0x1>
    2564:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <timer0_overflow_count+0x2>
    2568:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    256c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    256e:	a8 9b       	sbis	0x15, 0	; 21
    2570:	05 c0       	rjmp	.+10     	; 0x257c <micros+0x24>
    2572:	2f 3f       	cpi	r18, 0xFF	; 255
    2574:	19 f0       	breq	.+6      	; 0x257c <micros+0x24>
		m++;
    2576:	01 96       	adiw	r24, 0x01	; 1
    2578:	a1 1d       	adc	r26, r1
    257a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    257c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    257e:	ba 2f       	mov	r27, r26
    2580:	a9 2f       	mov	r26, r25
    2582:	98 2f       	mov	r25, r24
    2584:	88 27       	eor	r24, r24
    2586:	82 0f       	add	r24, r18
    2588:	91 1d       	adc	r25, r1
    258a:	a1 1d       	adc	r26, r1
    258c:	b1 1d       	adc	r27, r1
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	42 e0       	ldi	r20, 0x02	; 2
    2594:	66 0f       	add	r22, r22
    2596:	77 1f       	adc	r23, r23
    2598:	88 1f       	adc	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	4a 95       	dec	r20
    259e:	d1 f7       	brne	.-12     	; 0x2594 <micros+0x3c>
}
    25a0:	08 95       	ret

000025a2 <delay>:

void delay(unsigned long ms)
{
    25a2:	8f 92       	push	r8
    25a4:	9f 92       	push	r9
    25a6:	af 92       	push	r10
    25a8:	bf 92       	push	r11
    25aa:	cf 92       	push	r12
    25ac:	df 92       	push	r13
    25ae:	ef 92       	push	r14
    25b0:	ff 92       	push	r15
    25b2:	6b 01       	movw	r12, r22
    25b4:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    25b6:	d0 df       	rcall	.-96     	; 0x2558 <micros>
    25b8:	4b 01       	movw	r8, r22
    25ba:	5c 01       	movw	r10, r24

	while (ms > 0) {
    25bc:	c1 14       	cp	r12, r1
    25be:	d1 04       	cpc	r13, r1
    25c0:	e1 04       	cpc	r14, r1
    25c2:	f1 04       	cpc	r15, r1
		yield();
    25c4:	f1 f0       	breq	.+60     	; 0x2602 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    25c6:	2d d4       	rcall	.+2138   	; 0x2e22 <yield>
    25c8:	c7 df       	rcall	.-114    	; 0x2558 <micros>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	88 19       	sub	r24, r8
    25d0:	99 09       	sbc	r25, r9
    25d2:	aa 09       	sbc	r26, r10
    25d4:	bb 09       	sbc	r27, r11
    25d6:	88 3e       	cpi	r24, 0xE8	; 232
    25d8:	93 40       	sbci	r25, 0x03	; 3
    25da:	a1 05       	cpc	r26, r1
    25dc:	b1 05       	cpc	r27, r1
    25de:	70 f3       	brcs	.-36     	; 0x25bc <delay+0x1a>
			ms--;
    25e0:	21 e0       	ldi	r18, 0x01	; 1
    25e2:	c2 1a       	sub	r12, r18
    25e4:	d1 08       	sbc	r13, r1
    25e6:	e1 08       	sbc	r14, r1
    25e8:	f1 08       	sbc	r15, r1
			start += 1000;
    25ea:	88 ee       	ldi	r24, 0xE8	; 232
    25ec:	88 0e       	add	r8, r24
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	98 1e       	adc	r9, r24
    25f2:	a1 1c       	adc	r10, r1
    25f4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    25f6:	c1 14       	cp	r12, r1
    25f8:	d1 04       	cpc	r13, r1
    25fa:	e1 04       	cpc	r14, r1
    25fc:	f1 04       	cpc	r15, r1
    25fe:	21 f7       	brne	.-56     	; 0x25c8 <delay+0x26>
    2600:	dd cf       	rjmp	.-70     	; 0x25bc <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	bf 90       	pop	r11
    260c:	af 90       	pop	r10
    260e:	9f 90       	pop	r9
    2610:	8f 90       	pop	r8
    2612:	08 95       	ret

00002614 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2614:	82 30       	cpi	r24, 0x02	; 2
    2616:	91 05       	cpc	r25, r1
    2618:	38 f0       	brcs	.+14     	; 0x2628 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2622:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <delayMicroseconds+0x10>
    2628:	08 95       	ret

0000262a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    262a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    262c:	84 b5       	in	r24, 0x24	; 36
    262e:	82 60       	ori	r24, 0x02	; 2
    2630:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2632:	84 b5       	in	r24, 0x24	; 36
    2634:	81 60       	ori	r24, 0x01	; 1
    2636:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2638:	85 b5       	in	r24, 0x25	; 37
    263a:	82 60       	ori	r24, 0x02	; 2
    263c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    263e:	85 b5       	in	r24, 0x25	; 37
    2640:	81 60       	ori	r24, 0x01	; 1
    2642:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2644:	ee e6       	ldi	r30, 0x6E	; 110
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	81 60       	ori	r24, 0x01	; 1
    264c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    264e:	e1 e8       	ldi	r30, 0x81	; 129
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2654:	80 81       	ld	r24, Z
    2656:	82 60       	ori	r24, 0x02	; 2
    2658:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    265a:	80 81       	ld	r24, Z
    265c:	81 60       	ori	r24, 0x01	; 1
    265e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2660:	e0 e8       	ldi	r30, 0x80	; 128
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	81 60       	ori	r24, 0x01	; 1
    2668:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    266a:	e1 eb       	ldi	r30, 0xB1	; 177
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	84 60       	ori	r24, 0x04	; 4
    2672:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2674:	e0 eb       	ldi	r30, 0xB0	; 176
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	81 60       	ori	r24, 0x01	; 1
    267c:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    267e:	e1 e9       	ldi	r30, 0x91	; 145
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	82 60       	ori	r24, 0x02	; 2
    2686:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2688:	80 81       	ld	r24, Z
    268a:	81 60       	ori	r24, 0x01	; 1
    268c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    268e:	e0 e9       	ldi	r30, 0x90	; 144
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	81 60       	ori	r24, 0x01	; 1
    2696:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2698:	e1 ea       	ldi	r30, 0xA1	; 161
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	82 60       	ori	r24, 0x02	; 2
    26a0:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    26a2:	80 81       	ld	r24, Z
    26a4:	81 60       	ori	r24, 0x01	; 1
    26a6:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    26a8:	e0 ea       	ldi	r30, 0xA0	; 160
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	81 60       	ori	r24, 0x01	; 1
    26b0:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    26b2:	e1 e2       	ldi	r30, 0x21	; 33
    26b4:	f1 e0       	ldi	r31, 0x01	; 1
    26b6:	80 81       	ld	r24, Z
    26b8:	82 60       	ori	r24, 0x02	; 2
    26ba:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    26bc:	80 81       	ld	r24, Z
    26be:	81 60       	ori	r24, 0x01	; 1
    26c0:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    26c2:	e0 e2       	ldi	r30, 0x20	; 32
    26c4:	f1 e0       	ldi	r31, 0x01	; 1
    26c6:	80 81       	ld	r24, Z
    26c8:	81 60       	ori	r24, 0x01	; 1
    26ca:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    26cc:	ea e7       	ldi	r30, 0x7A	; 122
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	84 60       	ori	r24, 0x04	; 4
    26d4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    26d6:	80 81       	ld	r24, Z
    26d8:	82 60       	ori	r24, 0x02	; 2
    26da:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    26dc:	80 81       	ld	r24, Z
    26de:	81 60       	ori	r24, 0x01	; 1
    26e0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    26e2:	80 81       	ld	r24, Z
    26e4:	80 68       	ori	r24, 0x80	; 128
    26e6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    26e8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    26ec:	08 95       	ret

000026ee <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	fc 01       	movw	r30, r24
    26f2:	31 97       	sbiw	r30, 0x01	; 1
    26f4:	e2 31       	cpi	r30, 0x12	; 18
    26f6:	f1 05       	cpc	r31, r1
    26f8:	08 f0       	brcs	.+2      	; 0x26fc <turnOffPWM+0xe>
    26fa:	4d c0       	rjmp	.+154    	; 0x2796 <turnOffPWM+0xa8>
    26fc:	88 27       	eor	r24, r24
    26fe:	ed 54       	subi	r30, 0x4D	; 77
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	8f 4f       	sbci	r24, 0xFF	; 255
    2704:	93 c5       	rjmp	.+2854   	; 0x322c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2706:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    270a:	8f 77       	andi	r24, 0x7F	; 127
    270c:	03 c0       	rjmp	.+6      	; 0x2714 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    270e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2712:	8f 7d       	andi	r24, 0xDF	; 223
    2714:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2718:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    271a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    271e:	87 7f       	andi	r24, 0xF7	; 247
    2720:	f9 cf       	rjmp	.-14     	; 0x2714 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2722:	84 b5       	in	r24, 0x24	; 36
    2724:	8f 77       	andi	r24, 0x7F	; 127
    2726:	02 c0       	rjmp	.+4      	; 0x272c <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2728:	84 b5       	in	r24, 0x24	; 36
    272a:	8f 7d       	andi	r24, 0xDF	; 223
    272c:	84 bd       	out	0x24, r24	; 36
    272e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2730:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2734:	8f 77       	andi	r24, 0x7F	; 127
    2736:	03 c0       	rjmp	.+6      	; 0x273e <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2738:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    273c:	8f 7d       	andi	r24, 0xDF	; 223
    273e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2742:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2744:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2748:	8f 77       	andi	r24, 0x7F	; 127
    274a:	07 c0       	rjmp	.+14     	; 0x275a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    274c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2750:	8f 7d       	andi	r24, 0xDF	; 223
    2752:	03 c0       	rjmp	.+6      	; 0x275a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2754:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2758:	87 7f       	andi	r24, 0xF7	; 247
    275a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    275e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2760:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2764:	8f 77       	andi	r24, 0x7F	; 127
    2766:	07 c0       	rjmp	.+14     	; 0x2776 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2768:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    276c:	8f 7d       	andi	r24, 0xDF	; 223
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2770:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2774:	87 7f       	andi	r24, 0xF7	; 247
    2776:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    277a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    277c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2780:	8f 77       	andi	r24, 0x7F	; 127
    2782:	07 c0       	rjmp	.+14     	; 0x2792 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2784:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2788:	8f 7d       	andi	r24, 0xDF	; 223
    278a:	03 c0       	rjmp	.+6      	; 0x2792 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    278c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2790:	87 7f       	andi	r24, 0xF7	; 247
    2792:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2796:	08 95       	ret

00002798 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	fc 01       	movw	r30, r24
    27a0:	e0 53       	subi	r30, 0x30	; 48
    27a2:	fe 4f       	sbci	r31, 0xFE	; 254
    27a4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    27a6:	fc 01       	movw	r30, r24
    27a8:	ea 5e       	subi	r30, 0xEA	; 234
    27aa:	fd 4f       	sbci	r31, 0xFD	; 253
    27ac:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    27ae:	88 23       	and	r24, r24
    27b0:	61 f1       	breq	.+88     	; 0x280a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	fc 01       	movw	r30, r24
    27ba:	ea 58       	subi	r30, 0x8A	; 138
    27bc:	fd 4f       	sbci	r31, 0xFD	; 253
    27be:	c5 91       	lpm	r28, Z+
    27c0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    27c2:	fc 01       	movw	r30, r24
    27c4:	e4 5a       	subi	r30, 0xA4	; 164
    27c6:	fd 4f       	sbci	r31, 0xFD	; 253
    27c8:	a5 91       	lpm	r26, Z+
    27ca:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    27cc:	61 11       	cpse	r22, r1
    27ce:	09 c0       	rjmp	.+18     	; 0x27e2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    27d0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    27d2:	f8 94       	cli
		*reg &= ~bit;
    27d4:	88 81       	ld	r24, Y
    27d6:	20 95       	com	r18
    27d8:	82 23       	and	r24, r18
    27da:	88 83       	st	Y, r24
		*out &= ~bit;
    27dc:	ec 91       	ld	r30, X
    27de:	2e 23       	and	r18, r30
    27e0:	0b c0       	rjmp	.+22     	; 0x27f8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    27e2:	62 30       	cpi	r22, 0x02	; 2
    27e4:	61 f4       	brne	.+24     	; 0x27fe <pinMode+0x66>
		uint8_t oldSREG = SREG;
    27e6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    27e8:	f8 94       	cli
		*reg &= ~bit;
    27ea:	88 81       	ld	r24, Y
    27ec:	32 2f       	mov	r19, r18
    27ee:	30 95       	com	r19
    27f0:	83 23       	and	r24, r19
    27f2:	88 83       	st	Y, r24
		*out |= bit;
    27f4:	ec 91       	ld	r30, X
    27f6:	2e 2b       	or	r18, r30
    27f8:	2c 93       	st	X, r18
		SREG = oldSREG;
    27fa:	9f bf       	out	0x3f, r25	; 63
    27fc:	06 c0       	rjmp	.+12     	; 0x280a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    27fe:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2800:	f8 94       	cli
		*reg |= bit;
    2802:	e8 81       	ld	r30, Y
    2804:	2e 2b       	or	r18, r30
    2806:	28 83       	st	Y, r18
		SREG = oldSREG;
    2808:	8f bf       	out	0x3f, r24	; 63
	}
}
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	08 95       	ret

00002810 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	f9 01       	movw	r30, r18
    281c:	e6 57       	subi	r30, 0x76	; 118
    281e:	fe 4f       	sbci	r31, 0xFE	; 254
    2820:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2822:	f9 01       	movw	r30, r18
    2824:	e0 53       	subi	r30, 0x30	; 48
    2826:	fe 4f       	sbci	r31, 0xFE	; 254
    2828:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    282a:	f9 01       	movw	r30, r18
    282c:	ea 5e       	subi	r30, 0xEA	; 234
    282e:	fd 4f       	sbci	r31, 0xFD	; 253
    2830:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2832:	cc 23       	and	r28, r28
    2834:	b9 f0       	breq	.+46     	; 0x2864 <digitalWrite+0x54>
    2836:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2838:	81 11       	cpse	r24, r1
    283a:	59 df       	rcall	.-334    	; 0x26ee <turnOffPWM>

	out = portOutputRegister(port);
    283c:	ec 2f       	mov	r30, r28
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	ee 0f       	add	r30, r30
    2842:	ff 1f       	adc	r31, r31
    2844:	e4 5a       	subi	r30, 0xA4	; 164
    2846:	fd 4f       	sbci	r31, 0xFD	; 253
    2848:	a5 91       	lpm	r26, Z+
    284a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    284c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    284e:	f8 94       	cli

	if (val == LOW) {
    2850:	11 11       	cpse	r17, r1
    2852:	04 c0       	rjmp	.+8      	; 0x285c <digitalWrite+0x4c>
		*out &= ~bit;
    2854:	8c 91       	ld	r24, X
    2856:	d0 95       	com	r29
    2858:	d8 23       	and	r29, r24
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <digitalWrite+0x50>
	} else {
		*out |= bit;
    285c:	ec 91       	ld	r30, X
    285e:	de 2b       	or	r29, r30
    2860:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2862:	9f bf       	out	0x3f, r25	; 63
}
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	1f 91       	pop	r17
    286a:	08 95       	ret

0000286c <_ZN6StringD1Ev>:
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    286c:	fc 01       	movw	r30, r24
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	7c c5       	rjmp	.+2808   	; 0x336c <free>

00002874 <_ZN6String10invalidateEv>:
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	ec 01       	movw	r28, r24
    287a:	88 81       	ld	r24, Y
    287c:	99 81       	ldd	r25, Y+1	; 0x01
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	09 f0       	breq	.+2      	; 0x2884 <_ZN6String10invalidateEv+0x10>
    2882:	74 d5       	rcall	.+2792   	; 0x336c <free>
    2884:	19 82       	std	Y+1, r1	; 0x01
    2886:	18 82       	st	Y, r1
    2888:	1d 82       	std	Y+5, r1	; 0x05
    288a:	1c 82       	std	Y+4, r1	; 0x04
    288c:	1b 82       	std	Y+3, r1	; 0x03
    288e:	1a 82       	std	Y+2, r1	; 0x02
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	08 95       	ret

00002896 <_ZN6String12changeBufferEj>:
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	ec 01       	movw	r28, r24
    28a0:	8b 01       	movw	r16, r22
    28a2:	6f 5f       	subi	r22, 0xFF	; 255
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	88 81       	ld	r24, Y
    28a8:	99 81       	ldd	r25, Y+1	; 0x01
    28aa:	e9 d5       	rcall	.+3026   	; 0x347e <realloc>
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	31 f0       	breq	.+12     	; 0x28bc <_ZN6String12changeBufferEj+0x26>
    28b0:	99 83       	std	Y+1, r25	; 0x01
    28b2:	88 83       	st	Y, r24
    28b4:	1b 83       	std	Y+3, r17	; 0x03
    28b6:	0a 83       	std	Y+2, r16	; 0x02
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	01 c0       	rjmp	.+2      	; 0x28be <_ZN6String12changeBufferEj+0x28>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	08 95       	ret

000028c8 <_ZN6String7reserveEj>:
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	ec 01       	movw	r28, r24
    28ce:	88 81       	ld	r24, Y
    28d0:	99 81       	ldd	r25, Y+1	; 0x01
    28d2:	89 2b       	or	r24, r25
    28d4:	29 f0       	breq	.+10     	; 0x28e0 <_ZN6String7reserveEj+0x18>
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
    28da:	86 17       	cp	r24, r22
    28dc:	97 07       	cpc	r25, r23
    28de:	58 f4       	brcc	.+22     	; 0x28f6 <_ZN6String7reserveEj+0x2e>
    28e0:	ce 01       	movw	r24, r28
    28e2:	d9 df       	rcall	.-78     	; 0x2896 <_ZN6String12changeBufferEj>
    28e4:	88 23       	and	r24, r24
    28e6:	41 f0       	breq	.+16     	; 0x28f8 <_ZN6String7reserveEj+0x30>
    28e8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ea:	9d 81       	ldd	r25, Y+5	; 0x05
    28ec:	89 2b       	or	r24, r25
    28ee:	19 f4       	brne	.+6      	; 0x28f6 <_ZN6String7reserveEj+0x2e>
    28f0:	e8 81       	ld	r30, Y
    28f2:	f9 81       	ldd	r31, Y+1	; 0x01
    28f4:	10 82       	st	Z, r1
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <_ZN6String4copyEPKcj>:
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	ec 01       	movw	r28, r24
    290c:	7b 01       	movw	r14, r22
    290e:	8a 01       	movw	r16, r20
    2910:	ba 01       	movw	r22, r20
    2912:	da df       	rcall	.-76     	; 0x28c8 <_ZN6String7reserveEj>
    2914:	81 11       	cpse	r24, r1
    2916:	03 c0       	rjmp	.+6      	; 0x291e <_ZN6String4copyEPKcj+0x20>
    2918:	ce 01       	movw	r24, r28
    291a:	ac df       	rcall	.-168    	; 0x2874 <_ZN6String10invalidateEv>
    291c:	06 c0       	rjmp	.+12     	; 0x292a <_ZN6String4copyEPKcj+0x2c>
    291e:	1d 83       	std	Y+5, r17	; 0x05
    2920:	0c 83       	std	Y+4, r16	; 0x04
    2922:	b7 01       	movw	r22, r14
    2924:	88 81       	ld	r24, Y
    2926:	99 81       	ldd	r25, Y+1	; 0x01
    2928:	93 d6       	rcall	.+3366   	; 0x3650 <strcpy>
    292a:	ce 01       	movw	r24, r28
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	08 95       	ret

0000293a <_ZN6StringC1EPKc>:
    293a:	fc 01       	movw	r30, r24
    293c:	11 82       	std	Z+1, r1	; 0x01
    293e:	10 82       	st	Z, r1
    2940:	13 82       	std	Z+3, r1	; 0x03
    2942:	12 82       	std	Z+2, r1	; 0x02
    2944:	15 82       	std	Z+5, r1	; 0x05
    2946:	14 82       	std	Z+4, r1	; 0x04
    2948:	61 15       	cp	r22, r1
    294a:	71 05       	cpc	r23, r1
    294c:	49 f0       	breq	.+18     	; 0x2960 <_ZN6StringC1EPKc+0x26>
    294e:	fb 01       	movw	r30, r22
    2950:	01 90       	ld	r0, Z+
    2952:	00 20       	and	r0, r0
    2954:	e9 f7       	brne	.-6      	; 0x2950 <_ZN6StringC1EPKc+0x16>
    2956:	31 97       	sbiw	r30, 0x01	; 1
    2958:	af 01       	movw	r20, r30
    295a:	46 1b       	sub	r20, r22
    295c:	57 0b       	sbc	r21, r23
    295e:	cf cf       	rjmp	.-98     	; 0x28fe <_ZN6String4copyEPKcj>
    2960:	08 95       	ret

00002962 <_ZN6StringaSERKS_>:
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	ec 01       	movw	r28, r24
    2968:	fb 01       	movw	r30, r22
    296a:	86 17       	cp	r24, r22
    296c:	97 07       	cpc	r25, r23
    296e:	51 f0       	breq	.+20     	; 0x2984 <_ZN6StringaSERKS_+0x22>
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	61 15       	cp	r22, r1
    2976:	71 05       	cpc	r23, r1
    2978:	21 f0       	breq	.+8      	; 0x2982 <_ZN6StringaSERKS_+0x20>
    297a:	44 81       	ldd	r20, Z+4	; 0x04
    297c:	55 81       	ldd	r21, Z+5	; 0x05
    297e:	bf df       	rcall	.-130    	; 0x28fe <_ZN6String4copyEPKcj>
    2980:	01 c0       	rjmp	.+2      	; 0x2984 <_ZN6StringaSERKS_+0x22>
    2982:	78 df       	rcall	.-272    	; 0x2874 <_ZN6String10invalidateEv>
    2984:	ce 01       	movw	r24, r28
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <_ZN6StringC1ERKS_>:
    298c:	fc 01       	movw	r30, r24
    298e:	11 82       	std	Z+1, r1	; 0x01
    2990:	10 82       	st	Z, r1
    2992:	13 82       	std	Z+3, r1	; 0x03
    2994:	12 82       	std	Z+2, r1	; 0x02
    2996:	15 82       	std	Z+5, r1	; 0x05
    2998:	14 82       	std	Z+4, r1	; 0x04
    299a:	e3 cf       	rjmp	.-58     	; 0x2962 <_ZN6StringaSERKS_>

0000299c <_ZN6String6concatEPKcj>:
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	61 15       	cp	r22, r1
    29aa:	71 05       	cpc	r23, r1
    29ac:	11 f4       	brne	.+4      	; 0x29b2 <_ZN6String6concatEPKcj+0x16>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	1a c0       	rjmp	.+52     	; 0x29e6 <_ZN6String6concatEPKcj+0x4a>
    29b2:	41 15       	cp	r20, r1
    29b4:	51 05       	cpc	r21, r1
    29b6:	b1 f0       	breq	.+44     	; 0x29e4 <_ZN6String6concatEPKcj+0x48>
    29b8:	7b 01       	movw	r14, r22
    29ba:	ec 01       	movw	r28, r24
    29bc:	8c 81       	ldd	r24, Y+4	; 0x04
    29be:	9d 81       	ldd	r25, Y+5	; 0x05
    29c0:	8a 01       	movw	r16, r20
    29c2:	08 0f       	add	r16, r24
    29c4:	19 1f       	adc	r17, r25
    29c6:	b8 01       	movw	r22, r16
    29c8:	ce 01       	movw	r24, r28
    29ca:	7e df       	rcall	.-260    	; 0x28c8 <_ZN6String7reserveEj>
    29cc:	88 23       	and	r24, r24
    29ce:	79 f3       	breq	.-34     	; 0x29ae <_ZN6String6concatEPKcj+0x12>
    29d0:	28 81       	ld	r18, Y
    29d2:	39 81       	ldd	r19, Y+1	; 0x01
    29d4:	8c 81       	ldd	r24, Y+4	; 0x04
    29d6:	9d 81       	ldd	r25, Y+5	; 0x05
    29d8:	b7 01       	movw	r22, r14
    29da:	82 0f       	add	r24, r18
    29dc:	93 1f       	adc	r25, r19
    29de:	38 d6       	rcall	.+3184   	; 0x3650 <strcpy>
    29e0:	1d 83       	std	Y+5, r17	; 0x05
    29e2:	0c 83       	std	Y+4, r16	; 0x04
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	08 95       	ret

000029f4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    29fa:	fb 01       	movw	r30, r22
    29fc:	44 81       	ldd	r20, Z+4	; 0x04
    29fe:	55 81       	ldd	r21, Z+5	; 0x05
    2a00:	60 81       	ld	r22, Z
    2a02:	71 81       	ldd	r23, Z+1	; 0x01
    2a04:	cb df       	rcall	.-106    	; 0x299c <_ZN6String6concatEPKcj>
    2a06:	81 11       	cpse	r24, r1
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <_ZplRK15StringSumHelperRK6String+0x1a>
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	33 df       	rcall	.-410    	; 0x2874 <_ZN6String10invalidateEv>
	return a;
}
    2a0e:	ce 01       	movw	r24, r28
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	08 95       	ret

00002a16 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    2a1c:	61 15       	cp	r22, r1
    2a1e:	71 05       	cpc	r23, r1
    2a20:	59 f0       	breq	.+22     	; 0x2a38 <_ZplRK15StringSumHelperPKc+0x22>
    2a22:	fb 01       	movw	r30, r22
    2a24:	01 90       	ld	r0, Z+
    2a26:	00 20       	and	r0, r0
    2a28:	e9 f7       	brne	.-6      	; 0x2a24 <_ZplRK15StringSumHelperPKc+0xe>
    2a2a:	31 97       	sbiw	r30, 0x01	; 1
    2a2c:	af 01       	movw	r20, r30
    2a2e:	46 1b       	sub	r20, r22
    2a30:	57 0b       	sbc	r21, r23
    2a32:	b4 df       	rcall	.-152    	; 0x299c <_ZN6String6concatEPKcj>
    2a34:	81 11       	cpse	r24, r1
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <_ZplRK15StringSumHelperPKc+0x26>
    2a38:	ce 01       	movw	r24, r28
    2a3a:	1c df       	rcall	.-456    	; 0x2874 <_ZN6String10invalidateEv>
	return a;
}
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	08 95       	ret

00002a44 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    2a44:	fc 01       	movw	r30, r24
    2a46:	13 82       	std	Z+3, r1	; 0x03
    2a48:	12 82       	std	Z+2, r1	; 0x02
    2a4a:	84 e0       	ldi	r24, 0x04	; 4
    2a4c:	93 e0       	ldi	r25, 0x03	; 3
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	64 83       	std	Z+4, r22	; 0x04
    2a54:	41 87       	std	Z+9, r20	; 0x09
    2a56:	22 87       	std	Z+10, r18	; 0x0a
    2a58:	13 86       	std	Z+11, r1	; 0x0b
    2a5a:	08 95       	ret

00002a5c <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2a5c:	1f 93       	push	r17
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	ec 01       	movw	r28, r24
    2a64:	16 2f       	mov	r17, r22
    2a66:	6c 81       	ldd	r22, Y+4	; 0x04
    2a68:	86 ec       	ldi	r24, 0xC6	; 198
    2a6a:	94 e0       	ldi	r25, 0x04	; 4
    2a6c:	b9 d1       	rcall	.+882    	; 0x2de0 <_ZN7TwoWire17beginTransmissionEh>
    2a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a70:	61 2b       	or	r22, r17
    2a72:	86 ec       	ldi	r24, 0xC6	; 198
    2a74:	94 e0       	ldi	r25, 0x04	; 4
    2a76:	67 d1       	rcall	.+718    	; 0x2d46 <_ZN7TwoWire5writeEh>
    2a78:	86 ec       	ldi	r24, 0xC6	; 198
    2a7a:	94 e0       	ldi	r25, 0x04	; 4
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	1f 91       	pop	r17
    2a82:	ca c1       	rjmp	.+916    	; 0x2e18 <_ZN7TwoWire15endTransmissionEv>

00002a84 <_ZN17LiquidCrystal_I2C9backlightEv>:
    2a84:	28 e0       	ldi	r18, 0x08	; 8
    2a86:	fc 01       	movw	r30, r24
    2a88:	23 87       	std	Z+11, r18	; 0x0b
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	e7 cf       	rjmp	.-50     	; 0x2a5c <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002a8e <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	8c 01       	movw	r16, r24
    2a96:	c6 2f       	mov	r28, r22
    2a98:	64 60       	ori	r22, 0x04	; 4
    2a9a:	e0 df       	rcall	.-64     	; 0x2a5c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	b9 dd       	rcall	.-1166   	; 0x2614 <delayMicroseconds>
    2aa2:	6c 2f       	mov	r22, r28
    2aa4:	6b 7f       	andi	r22, 0xFB	; 251
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	d9 df       	rcall	.-78     	; 0x2a5c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2aaa:	82 e3       	ldi	r24, 0x32	; 50
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	cf 91       	pop	r28
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	af cd       	rjmp	.-1186   	; 0x2614 <delayMicroseconds>

00002ab6 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	ec 01       	movw	r28, r24
    2abe:	16 2f       	mov	r17, r22
    2ac0:	cd df       	rcall	.-102    	; 0x2a5c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2ac2:	61 2f       	mov	r22, r17
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	1f 91       	pop	r17
    2acc:	e0 cf       	rjmp	.-64     	; 0x2a8e <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002ace <_ZN17LiquidCrystal_I2C4sendEhh>:
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	8c 01       	movw	r16, r24
    2ad8:	c6 2f       	mov	r28, r22
    2ada:	d4 2f       	mov	r29, r20
    2adc:	60 7f       	andi	r22, 0xF0	; 240
    2ade:	64 2b       	or	r22, r20
    2ae0:	ea df       	rcall	.-44     	; 0x2ab6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2ae2:	80 e1       	ldi	r24, 0x10	; 16
    2ae4:	c8 9f       	mul	r28, r24
    2ae6:	b0 01       	movw	r22, r0
    2ae8:	11 24       	eor	r1, r1
    2aea:	6d 2b       	or	r22, r29
    2aec:	c8 01       	movw	r24, r16
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	df cf       	rjmp	.-66     	; 0x2ab6 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002af8 <_ZN17LiquidCrystal_I2C7commandEh>:
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	e9 cf       	rjmp	.-46     	; 0x2ace <_ZN17LiquidCrystal_I2C4sendEhh>

00002afc <_ZN17LiquidCrystal_I2C5clearEv>:
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	fc df       	rcall	.-8      	; 0x2af8 <_ZN17LiquidCrystal_I2C7commandEh>
    2b00:	80 ed       	ldi	r24, 0xD0	; 208
    2b02:	97 e0       	ldi	r25, 0x07	; 7
    2b04:	87 cd       	rjmp	.-1266   	; 0x2614 <delayMicroseconds>

00002b06 <_ZN17LiquidCrystal_I2C4homeEv>:
    2b06:	62 e0       	ldi	r22, 0x02	; 2
    2b08:	f7 df       	rcall	.-18     	; 0x2af8 <_ZN17LiquidCrystal_I2C7commandEh>
    2b0a:	80 ed       	ldi	r24, 0xD0	; 208
    2b0c:	97 e0       	ldi	r25, 0x07	; 7
    2b0e:	82 cd       	rjmp	.-1276   	; 0x2614 <delayMicroseconds>

00002b10 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	28 97       	sbiw	r28, 0x08	; 8
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	9c 01       	movw	r18, r24
    2b26:	88 e0       	ldi	r24, 0x08	; 8
    2b28:	e8 e0       	ldi	r30, 0x08	; 8
    2b2a:	f2 e0       	ldi	r31, 0x02	; 2
    2b2c:	de 01       	movw	r26, r28
    2b2e:	11 96       	adiw	r26, 0x01	; 1
    2b30:	01 90       	ld	r0, Z+
    2b32:	0d 92       	st	X+, r0
    2b34:	8a 95       	dec	r24
    2b36:	e1 f7       	brne	.-8      	; 0x2b30 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2b38:	f9 01       	movw	r30, r18
    2b3a:	80 85       	ldd	r24, Z+8	; 0x08
    2b3c:	84 17       	cp	r24, r20
    2b3e:	10 f4       	brcc	.+4      	; 0x2b44 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2b40:	4f ef       	ldi	r20, 0xFF	; 255
    2b42:	48 0f       	add	r20, r24
    2b44:	fe 01       	movw	r30, r28
    2b46:	31 96       	adiw	r30, 0x01	; 1
    2b48:	e4 0f       	add	r30, r20
    2b4a:	f1 1d       	adc	r31, r1
    2b4c:	e4 0f       	add	r30, r20
    2b4e:	f1 1d       	adc	r31, r1
    2b50:	90 81       	ld	r25, Z
    2b52:	69 0f       	add	r22, r25
    2b54:	60 68       	ori	r22, 0x80	; 128
    2b56:	c9 01       	movw	r24, r18
    2b58:	28 96       	adiw	r28, 0x08	; 8
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	c7 cf       	rjmp	.-114    	; 0x2af8 <_ZN17LiquidCrystal_I2C7commandEh>

00002b6a <_ZN17LiquidCrystal_I2C7displayEv>:
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	66 81       	ldd	r22, Z+6	; 0x06
    2b6e:	26 2f       	mov	r18, r22
    2b70:	24 60       	ori	r18, 0x04	; 4
    2b72:	26 83       	std	Z+6, r18	; 0x06
    2b74:	6c 60       	ori	r22, 0x0C	; 12
    2b76:	c0 cf       	rjmp	.-128    	; 0x2af8 <_ZN17LiquidCrystal_I2C7commandEh>

00002b78 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    2b78:	41 e0       	ldi	r20, 0x01	; 1
    2b7a:	a9 df       	rcall	.-174    	; 0x2ace <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	08 95       	ret

00002b82 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2b88:	42 30       	cpi	r20, 0x02	; 2
    2b8a:	18 f0       	brcs	.+6      	; 0x2b92 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8e:	88 60       	ori	r24, 0x08	; 8
    2b90:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    2b92:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    2b94:	22 23       	and	r18, r18
    2b96:	29 f0       	breq	.+10     	; 0x2ba2 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    2b98:	41 30       	cpi	r20, 0x01	; 1
    2b9a:	19 f4       	brne	.+6      	; 0x2ba2 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    2b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9e:	84 60       	ori	r24, 0x04	; 4
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2ba2:	62 e3       	ldi	r22, 0x32	; 50
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	fb dc       	rcall	.-1546   	; 0x25a2 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bae:	ce 01       	movw	r24, r28
    2bb0:	55 df       	rcall	.-342    	; 0x2a5c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    2bb2:	68 ee       	ldi	r22, 0xE8	; 232
    2bb4:	73 e0       	ldi	r23, 0x03	; 3
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	f3 dc       	rcall	.-1562   	; 0x25a2 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2bbc:	60 e3       	ldi	r22, 0x30	; 48
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	7a df       	rcall	.-268    	; 0x2ab6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2bc2:	84 e9       	ldi	r24, 0x94	; 148
    2bc4:	91 e1       	ldi	r25, 0x11	; 17
    2bc6:	26 dd       	rcall	.-1460   	; 0x2614 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2bc8:	60 e3       	ldi	r22, 0x30	; 48
    2bca:	ce 01       	movw	r24, r28
    2bcc:	74 df       	rcall	.-280    	; 0x2ab6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2bce:	84 e9       	ldi	r24, 0x94	; 148
    2bd0:	91 e1       	ldi	r25, 0x11	; 17
    2bd2:	20 dd       	rcall	.-1472   	; 0x2614 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2bd4:	60 e3       	ldi	r22, 0x30	; 48
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	6e df       	rcall	.-292    	; 0x2ab6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    2bda:	86 e9       	ldi	r24, 0x96	; 150
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	1a dd       	rcall	.-1484   	; 0x2614 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2be0:	60 e2       	ldi	r22, 0x20	; 32
    2be2:	ce 01       	movw	r24, r28
    2be4:	68 df       	rcall	.-304    	; 0x2ab6 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2be6:	6d 81       	ldd	r22, Y+5	; 0x05
    2be8:	60 62       	ori	r22, 0x20	; 32
    2bea:	ce 01       	movw	r24, r28
    2bec:	85 df       	rcall	.-246    	; 0x2af8 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2bee:	84 e0       	ldi	r24, 0x04	; 4
    2bf0:	8e 83       	std	Y+6, r24	; 0x06
	display();
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	ba df       	rcall	.-140    	; 0x2b6a <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	81 df       	rcall	.-254    	; 0x2afc <_ZN17LiquidCrystal_I2C5clearEv>
    2bfa:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2bfc:	8f 83       	std	Y+7, r24	; 0x07
    2bfe:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    2c00:	ce 01       	movw	r24, r28
    2c02:	7a df       	rcall	.-268    	; 0x2af8 <_ZN17LiquidCrystal_I2C7commandEh>
    2c04:	ce 01       	movw	r24, r28
    2c06:	df 91       	pop	r29
	
	home();
    2c08:	cf 91       	pop	r28
  
}
    2c0a:	7d cf       	rjmp	.-262    	; 0x2b06 <_ZN17LiquidCrystal_I2C4homeEv>

00002c0c <_ZN17LiquidCrystal_I2C9init_privEv>:
    2c0c:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2c0e:	df 93       	push	r29
    2c10:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    2c12:	86 ec       	ldi	r24, 0xC6	; 198
    2c14:	94 e0       	ldi	r25, 0x04	; 4
    2c16:	d5 d0       	rcall	.+426    	; 0x2dc2 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2c18:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c1e:	69 85       	ldd	r22, Y+9	; 0x09
    2c20:	ce 01       	movw	r24, r28
}
    2c22:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2c24:	cf 91       	pop	r28
    2c26:	ad cf       	rjmp	.-166    	; 0x2b82 <_ZN17LiquidCrystal_I2C5beginEhhh>

00002c28 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2c28:	f1 cf       	rjmp	.-30     	; 0x2c0c <_ZN17LiquidCrystal_I2C9init_privEv>

00002c2a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2c2a:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c34:	82 1b       	sub	r24, r18
    2c36:	91 09       	sbc	r25, r1
    2c38:	08 95       	ret

00002c3a <_ZN7TwoWire4readEv>:
    2c3a:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c3e:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2c42:	98 17       	cp	r25, r24
    2c44:	50 f4       	brcc	.+20     	; 0x2c5a <_ZN7TwoWire4readEv+0x20>
    2c46:	e9 2f       	mov	r30, r25
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	e4 50       	subi	r30, 0x04	; 4
    2c4c:	fb 4f       	sbci	r31, 0xFB	; 251
    2c4e:	20 81       	ld	r18, Z
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	9f 5f       	subi	r25, 0xFF	; 255
    2c54:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <_ZN7TwoWire4readEv+0x24>
    2c5a:	2f ef       	ldi	r18, 0xFF	; 255
    2c5c:	3f ef       	ldi	r19, 0xFF	; 255
    2c5e:	c9 01       	movw	r24, r18
    2c60:	08 95       	ret

00002c62 <_ZN7TwoWire4peekEv>:
    2c62:	e0 91 fb 04 	lds	r30, 0x04FB	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c66:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2c6a:	e8 17       	cp	r30, r24
    2c6c:	30 f4       	brcc	.+12     	; 0x2c7a <_ZN7TwoWire4peekEv+0x18>
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	e4 50       	subi	r30, 0x04	; 4
    2c72:	fb 4f       	sbci	r31, 0xFB	; 251
    2c74:	80 81       	ld	r24, Z
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	08 95       	ret
    2c7a:	8f ef       	ldi	r24, 0xFF	; 255
    2c7c:	9f ef       	ldi	r25, 0xFF	; 255
    2c7e:	08 95       	ret

00002c80 <_ZN7TwoWire5flushEv>:
    2c80:	08 95       	ret

00002c82 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	ec 01       	movw	r28, r24
    2c88:	e0 91 d2 04 	lds	r30, 0x04D2	; 0x8004d2 <_ZN7TwoWire14user_onReceiveE>
    2c8c:	f0 91 d3 04 	lds	r31, 0x04D3	; 0x8004d3 <_ZN7TwoWire14user_onReceiveE+0x1>
    2c90:	30 97       	sbiw	r30, 0x00	; 0
    2c92:	f1 f0       	breq	.+60     	; 0x2cd0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2c94:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2c98:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2c9c:	98 17       	cp	r25, r24
    2c9e:	c0 f0       	brcs	.+48     	; 0x2cd0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	29 2f       	mov	r18, r25
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	26 17       	cp	r18, r22
    2ca8:	37 07       	cpc	r19, r23
    2caa:	54 f4       	brge	.+20     	; 0x2cc0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2cac:	de 01       	movw	r26, r28
    2cae:	a2 0f       	add	r26, r18
    2cb0:	b3 1f       	adc	r27, r19
    2cb2:	4c 91       	ld	r20, X
    2cb4:	d9 01       	movw	r26, r18
    2cb6:	a4 50       	subi	r26, 0x04	; 4
    2cb8:	bb 4f       	sbci	r27, 0xFB	; 251
    2cba:	4c 93       	st	X, r20
    2cbc:	9f 5f       	subi	r25, 0xFF	; 255
    2cbe:	f1 cf       	rjmp	.-30     	; 0x2ca2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2cc0:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2cc4:	60 93 fa 04 	sts	0x04FA, r22	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2cc8:	cb 01       	movw	r24, r22
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	19 94       	eijmp
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	08 95       	ret

00002cd6 <_ZN7TwoWire16onRequestServiceEv>:
    2cd6:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <_ZN7TwoWire14user_onRequestE>
    2cda:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <_ZN7TwoWire14user_onRequestE+0x1>
    2cde:	30 97       	sbiw	r30, 0x00	; 0
    2ce0:	29 f0       	breq	.+10     	; 0x2cec <_ZN7TwoWire16onRequestServiceEv+0x16>
    2ce2:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2ce6:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2cea:	19 94       	eijmp
    2cec:	08 95       	ret

00002cee <_ZN7TwoWire5writeEPKhj>:
    2cee:	cf 92       	push	r12
    2cf0:	df 92       	push	r13
    2cf2:	ef 92       	push	r14
    2cf4:	ff 92       	push	r15
    2cf6:	0f 93       	push	r16
    2cf8:	1f 93       	push	r17
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	7c 01       	movw	r14, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	8a 01       	movw	r16, r20
    2d04:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <_ZN7TwoWire12transmittingE>
    2d08:	22 23       	and	r18, r18
    2d0a:	89 f0       	breq	.+34     	; 0x2d2e <_ZN7TwoWire5writeEPKhj+0x40>
    2d0c:	eb 01       	movw	r28, r22
    2d0e:	6b 01       	movw	r12, r22
    2d10:	c4 0e       	add	r12, r20
    2d12:	d5 1e       	adc	r13, r21
    2d14:	cc 15       	cp	r28, r12
    2d16:	dd 05       	cpc	r29, r13
    2d18:	61 f0       	breq	.+24     	; 0x2d32 <_ZN7TwoWire5writeEPKhj+0x44>
    2d1a:	69 91       	ld	r22, Y+
    2d1c:	d7 01       	movw	r26, r14
    2d1e:	ed 91       	ld	r30, X+
    2d20:	fc 91       	ld	r31, X
    2d22:	01 90       	ld	r0, Z+
    2d24:	f0 81       	ld	r31, Z
    2d26:	e0 2d       	mov	r30, r0
    2d28:	c7 01       	movw	r24, r14
    2d2a:	19 95       	eicall
    2d2c:	f3 cf       	rjmp	.-26     	; 0x2d14 <_ZN7TwoWire5writeEPKhj+0x26>
    2d2e:	64 2f       	mov	r22, r20
    2d30:	eb d0       	rcall	.+470    	; 0x2f08 <twi_transmit>
    2d32:	c8 01       	movw	r24, r16
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	ff 90       	pop	r15
    2d3e:	ef 90       	pop	r14
    2d40:	df 90       	pop	r13
    2d42:	cf 90       	pop	r12
    2d44:	08 95       	ret

00002d46 <_ZN7TwoWire5writeEh>:
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	1f 92       	push	r1
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	69 83       	std	Y+1, r22	; 0x01
    2d52:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <_ZN7TwoWire12transmittingE>
    2d56:	22 23       	and	r18, r18
    2d58:	d1 f0       	breq	.+52     	; 0x2d8e <_ZN7TwoWire5writeEh+0x48>
    2d5a:	20 91 d7 04 	lds	r18, 0x04D7	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2d5e:	20 32       	cpi	r18, 0x20	; 32
    2d60:	40 f0       	brcs	.+16     	; 0x2d72 <_ZN7TwoWire5writeEh+0x2c>
    2d62:	21 e0       	ldi	r18, 0x01	; 1
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	fc 01       	movw	r30, r24
    2d68:	33 83       	std	Z+3, r19	; 0x03
    2d6a:	22 83       	std	Z+2, r18	; 0x02
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	14 c0       	rjmp	.+40     	; 0x2d9a <_ZN7TwoWire5writeEh+0x54>
    2d72:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2d76:	e8 2f       	mov	r30, r24
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	e7 52       	subi	r30, 0x27	; 39
    2d7c:	fb 4f       	sbci	r31, 0xFB	; 251
    2d7e:	99 81       	ldd	r25, Y+1	; 0x01
    2d80:	90 83       	st	Z, r25
    2d82:	8f 5f       	subi	r24, 0xFF	; 255
    2d84:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2d88:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2d8c:	04 c0       	rjmp	.+8      	; 0x2d96 <_ZN7TwoWire5writeEh+0x50>
    2d8e:	61 e0       	ldi	r22, 0x01	; 1
    2d90:	ce 01       	movw	r24, r28
    2d92:	01 96       	adiw	r24, 0x01	; 1
    2d94:	b9 d0       	rcall	.+370    	; 0x2f08 <twi_transmit>
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0f 90       	pop	r0
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	08 95       	ret

00002da2 <_ZN7TwoWireC1Ev>:
    2da2:	fc 01       	movw	r30, r24
    2da4:	13 82       	std	Z+3, r1	; 0x03
    2da6:	12 82       	std	Z+2, r1	; 0x02
    2da8:	88 ee       	ldi	r24, 0xE8	; 232
    2daa:	93 e0       	ldi	r25, 0x03	; 3
    2dac:	a0 e0       	ldi	r26, 0x00	; 0
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	84 83       	std	Z+4, r24	; 0x04
    2db2:	95 83       	std	Z+5, r25	; 0x05
    2db4:	a6 83       	std	Z+6, r26	; 0x06
    2db6:	b7 83       	std	Z+7, r27	; 0x07
    2db8:	80 e1       	ldi	r24, 0x10	; 16
    2dba:	93 e0       	ldi	r25, 0x03	; 3
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	80 83       	st	Z, r24
    2dc0:	08 95       	ret

00002dc2 <_ZN7TwoWire5beginEv>:
    2dc2:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <_ZN7TwoWire13rxBufferIndexE>
    2dc6:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_ZN7TwoWire14rxBufferLengthE>
    2dca:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2dce:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2dd2:	28 d0       	rcall	.+80     	; 0x2e24 <twi_init>
    2dd4:	8b e6       	ldi	r24, 0x6B	; 107
    2dd6:	96 e1       	ldi	r25, 0x16	; 22
    2dd8:	c4 d0       	rcall	.+392    	; 0x2f62 <twi_attachSlaveTxEvent>
    2dda:	81 e4       	ldi	r24, 0x41	; 65
    2ddc:	96 e1       	ldi	r25, 0x16	; 22
    2dde:	bc c0       	rjmp	.+376    	; 0x2f58 <twi_attachSlaveRxEvent>

00002de0 <_ZN7TwoWire17beginTransmissionEh>:
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <_ZN7TwoWire12transmittingE>
    2de6:	60 93 f9 04 	sts	0x04F9, r22	; 0x8004f9 <_ZN7TwoWire9txAddressE>
    2dea:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2dee:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2df2:	08 95       	ret

00002df4 <_ZN7TwoWire15endTransmissionEh>:
    2df4:	0f 93       	push	r16
    2df6:	06 2f       	mov	r16, r22
    2df8:	21 e0       	ldi	r18, 0x01	; 1
    2dfa:	40 91 d7 04 	lds	r20, 0x04D7	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2dfe:	69 ed       	ldi	r22, 0xD9	; 217
    2e00:	74 e0       	ldi	r23, 0x04	; 4
    2e02:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <_ZN7TwoWire9txAddressE>
    2e06:	2a d0       	rcall	.+84     	; 0x2e5c <twi_writeTo>
    2e08:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZN7TwoWire13txBufferIndexE>
    2e0c:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZN7TwoWire14txBufferLengthE>
    2e10:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <_ZN7TwoWire12transmittingE>
    2e14:	0f 91       	pop	r16
    2e16:	08 95       	ret

00002e18 <_ZN7TwoWire15endTransmissionEv>:
    2e18:	61 e0       	ldi	r22, 0x01	; 1
    2e1a:	ec cf       	rjmp	.-40     	; 0x2df4 <_ZN7TwoWire15endTransmissionEh>

00002e1c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2e1c:	86 ec       	ldi	r24, 0xC6	; 198
    2e1e:	94 e0       	ldi	r25, 0x04	; 4
    2e20:	c0 cf       	rjmp	.-128    	; 0x2da2 <_ZN7TwoWireC1Ev>

00002e22 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2e22:	08 95       	ret

00002e24 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2e24:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <twi_state>
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <twi_sendStop>
    2e2e:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <twi_inRepStart>
    2e32:	61 e0       	ldi	r22, 0x01	; 1
    2e34:	84 e1       	ldi	r24, 0x14	; 20
    2e36:	ec dc       	rcall	.-1576   	; 0x2810 <digitalWrite>
    2e38:	61 e0       	ldi	r22, 0x01	; 1
    2e3a:	85 e1       	ldi	r24, 0x15	; 21
    2e3c:	e9 dc       	rcall	.-1582   	; 0x2810 <digitalWrite>
    2e3e:	e9 eb       	ldi	r30, 0xB9	; 185
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	8e 7f       	andi	r24, 0xFE	; 254
    2e46:	80 83       	st	Z, r24
    2e48:	80 81       	ld	r24, Z
    2e4a:	8d 7f       	andi	r24, 0xFD	; 253
    2e4c:	80 83       	st	Z, r24
    2e4e:	88 e4       	ldi	r24, 0x48	; 72
    2e50:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2e54:	85 e4       	ldi	r24, 0x45	; 69
    2e56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e5a:	08 95       	ret

00002e5c <twi_writeTo>:
    2e5c:	0f 93       	push	r16
    2e5e:	41 32       	cpi	r20, 0x21	; 33
    2e60:	08 f0       	brcs	.+2      	; 0x2e64 <twi_writeTo+0x8>
    2e62:	4a c0       	rjmp	.+148    	; 0x2ef8 <twi_writeTo+0x9c>
    2e64:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <twi_state>
    2e68:	91 11       	cpse	r25, r1
    2e6a:	fc cf       	rjmp	.-8      	; 0x2e64 <twi_writeTo+0x8>
    2e6c:	32 e0       	ldi	r19, 0x02	; 2
    2e6e:	30 93 89 05 	sts	0x0589, r19	; 0x800589 <twi_state>
    2e72:	00 93 87 05 	sts	0x0587, r16	; 0x800587 <twi_sendStop>
    2e76:	3f ef       	ldi	r19, 0xFF	; 255
    2e78:	30 93 1c 05 	sts	0x051C, r19	; 0x80051c <twi_error>
    2e7c:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <twi_masterBufferIndex>
    2e80:	40 93 60 05 	sts	0x0560, r20	; 0x800560 <twi_masterBufferLength>
    2e84:	56 2f       	mov	r21, r22
    2e86:	a2 e6       	ldi	r26, 0x62	; 98
    2e88:	b5 e0       	ldi	r27, 0x05	; 5
    2e8a:	fb 01       	movw	r30, r22
    2e8c:	3e 2f       	mov	r19, r30
    2e8e:	35 1b       	sub	r19, r21
    2e90:	34 17       	cp	r19, r20
    2e92:	18 f4       	brcc	.+6      	; 0x2e9a <twi_writeTo+0x3e>
    2e94:	31 91       	ld	r19, Z+
    2e96:	3d 93       	st	X+, r19
    2e98:	f9 cf       	rjmp	.-14     	; 0x2e8c <twi_writeTo+0x30>
    2e9a:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <twi_slarw>
    2e9e:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <twi_slarw>
    2ea2:	88 0f       	add	r24, r24
    2ea4:	83 2b       	or	r24, r19
    2ea6:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <twi_slarw>
    2eaa:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <twi_inRepStart>
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	61 f4       	brne	.+24     	; 0x2eca <twi_writeTo+0x6e>
    2eb2:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <twi_inRepStart>
    2eb6:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <twi_slarw>
    2eba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2ebe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ec2:	83 fd       	sbrc	r24, 3
    2ec4:	f8 cf       	rjmp	.-16     	; 0x2eb6 <twi_writeTo+0x5a>
    2ec6:	85 ec       	ldi	r24, 0xC5	; 197
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <twi_writeTo+0x70>
    2eca:	85 ee       	ldi	r24, 0xE5	; 229
    2ecc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ed0:	22 23       	and	r18, r18
    2ed2:	21 f0       	breq	.+8      	; 0x2edc <twi_writeTo+0x80>
    2ed4:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <twi_state>
    2ed8:	82 30       	cpi	r24, 0x02	; 2
    2eda:	d1 f3       	breq	.-12     	; 0x2ed0 <twi_writeTo+0x74>
    2edc:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_error>
    2ee0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ee2:	79 f0       	breq	.+30     	; 0x2f02 <twi_writeTo+0xa6>
    2ee4:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_error>
    2ee8:	80 32       	cpi	r24, 0x20	; 32
    2eea:	41 f0       	breq	.+16     	; 0x2efc <twi_writeTo+0xa0>
    2eec:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_error>
    2ef0:	80 33       	cpi	r24, 0x30	; 48
    2ef2:	31 f0       	breq	.+12     	; 0x2f00 <twi_writeTo+0xa4>
    2ef4:	94 e0       	ldi	r25, 0x04	; 4
    2ef6:	05 c0       	rjmp	.+10     	; 0x2f02 <twi_writeTo+0xa6>
    2ef8:	91 e0       	ldi	r25, 0x01	; 1
    2efa:	03 c0       	rjmp	.+6      	; 0x2f02 <twi_writeTo+0xa6>
    2efc:	92 e0       	ldi	r25, 0x02	; 2
    2efe:	01 c0       	rjmp	.+2      	; 0x2f02 <twi_writeTo+0xa6>
    2f00:	93 e0       	ldi	r25, 0x03	; 3
    2f02:	89 2f       	mov	r24, r25
    2f04:	0f 91       	pop	r16
    2f06:	08 95       	ret

00002f08 <twi_transmit>:
    2f08:	40 91 3e 05 	lds	r20, 0x053E	; 0x80053e <twi_txBufferLength>
    2f0c:	26 2f       	mov	r18, r22
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	24 0f       	add	r18, r20
    2f12:	31 1d       	adc	r19, r1
    2f14:	21 32       	cpi	r18, 0x21	; 33
    2f16:	31 05       	cpc	r19, r1
    2f18:	dc f4       	brge	.+54     	; 0x2f50 <twi_transmit+0x48>
    2f1a:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <twi_state>
    2f1e:	24 30       	cpi	r18, 0x04	; 4
    2f20:	c9 f4       	brne	.+50     	; 0x2f54 <twi_transmit+0x4c>
    2f22:	fc 01       	movw	r30, r24
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	86 17       	cp	r24, r22
    2f2a:	58 f4       	brcc	.+22     	; 0x2f42 <twi_transmit+0x3a>
    2f2c:	30 91 3e 05 	lds	r19, 0x053E	; 0x80053e <twi_txBufferLength>
    2f30:	21 91       	ld	r18, Z+
    2f32:	dc 01       	movw	r26, r24
    2f34:	a0 5c       	subi	r26, 0xC0	; 192
    2f36:	ba 4f       	sbci	r27, 0xFA	; 250
    2f38:	a3 0f       	add	r26, r19
    2f3a:	b1 1d       	adc	r27, r1
    2f3c:	2c 93       	st	X, r18
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	f3 cf       	rjmp	.-26     	; 0x2f28 <twi_transmit+0x20>
    2f42:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <twi_txBufferLength>
    2f46:	68 0f       	add	r22, r24
    2f48:	60 93 3e 05 	sts	0x053E, r22	; 0x80053e <twi_txBufferLength>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	08 95       	ret
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	08 95       	ret
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	08 95       	ret

00002f58 <twi_attachSlaveRxEvent>:
    2f58:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <twi_onSlaveReceive+0x1>
    2f5c:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <twi_onSlaveReceive>
    2f60:	08 95       	ret

00002f62 <twi_attachSlaveTxEvent>:
    2f62:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <twi_onSlaveTransmit+0x1>
    2f66:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <twi_onSlaveTransmit>
    2f6a:	08 95       	ret

00002f6c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2f6c:	85 ed       	ldi	r24, 0xD5	; 213
    2f6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2f72:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2f76:	84 fd       	sbrc	r24, 4
    2f78:	fc cf       	rjmp	.-8      	; 0x2f72 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2f7a:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <twi_state>
    2f7e:	08 95       	ret

00002f80 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2f80:	85 ec       	ldi	r24, 0xC5	; 197
    2f82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2f86:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <twi_state>
    2f8a:	08 95       	ret

00002f8c <__vector_39>:
}

ISR(TWI_vect)
{
    2f8c:	1f 92       	push	r1
    2f8e:	0f 92       	push	r0
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	0f 92       	push	r0
    2f94:	11 24       	eor	r1, r1
    2f96:	0b b6       	in	r0, 0x3b	; 59
    2f98:	0f 92       	push	r0
    2f9a:	2f 93       	push	r18
    2f9c:	3f 93       	push	r19
    2f9e:	4f 93       	push	r20
    2fa0:	5f 93       	push	r21
    2fa2:	6f 93       	push	r22
    2fa4:	7f 93       	push	r23
    2fa6:	8f 93       	push	r24
    2fa8:	9f 93       	push	r25
    2faa:	af 93       	push	r26
    2fac:	bf 93       	push	r27
    2fae:	ef 93       	push	r30
    2fb0:	ff 93       	push	r31
  switch(TW_STATUS){
    2fb2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2fb6:	88 7f       	andi	r24, 0xF8	; 248
    2fb8:	80 36       	cpi	r24, 0x60	; 96
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <__vector_39+0x32>
    2fbc:	9d c0       	rjmp	.+314    	; 0x30f8 <__vector_39+0x16c>
    2fbe:	70 f5       	brcc	.+92     	; 0x301c <__vector_39+0x90>
    2fc0:	88 32       	cpi	r24, 0x28	; 40
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <__vector_39+0x3a>
    2fc4:	5c c0       	rjmp	.+184    	; 0x307e <__vector_39+0xf2>
    2fc6:	90 f4       	brcc	.+36     	; 0x2fec <__vector_39+0x60>
    2fc8:	80 31       	cpi	r24, 0x10	; 16
    2fca:	09 f4       	brne	.+2      	; 0x2fce <__vector_39+0x42>
    2fcc:	55 c0       	rjmp	.+170    	; 0x3078 <__vector_39+0xec>
    2fce:	38 f4       	brcc	.+14     	; 0x2fde <__vector_39+0x52>
    2fd0:	88 23       	and	r24, r24
    2fd2:	09 f4       	brne	.+2      	; 0x2fd6 <__vector_39+0x4a>
    2fd4:	f3 c0       	rjmp	.+486    	; 0x31bc <__vector_39+0x230>
    2fd6:	88 30       	cpi	r24, 0x08	; 8
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <__vector_39+0x50>
    2fda:	4e c0       	rjmp	.+156    	; 0x3078 <__vector_39+0xec>
    2fdc:	f2 c0       	rjmp	.+484    	; 0x31c2 <__vector_39+0x236>
    2fde:	88 31       	cpi	r24, 0x18	; 24
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <__vector_39+0x58>
    2fe2:	4d c0       	rjmp	.+154    	; 0x307e <__vector_39+0xf2>
    2fe4:	80 32       	cpi	r24, 0x20	; 32
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <__vector_39+0x5e>
    2fe8:	5e c0       	rjmp	.+188    	; 0x30a6 <__vector_39+0x11a>
    2fea:	eb c0       	rjmp	.+470    	; 0x31c2 <__vector_39+0x236>
    2fec:	80 34       	cpi	r24, 0x40	; 64
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <__vector_39+0x66>
    2ff0:	69 c0       	rjmp	.+210    	; 0x30c4 <__vector_39+0x138>
    2ff2:	50 f4       	brcc	.+20     	; 0x3008 <__vector_39+0x7c>
    2ff4:	80 33       	cpi	r24, 0x30	; 48
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <__vector_39+0x6e>
    2ff8:	56 c0       	rjmp	.+172    	; 0x30a6 <__vector_39+0x11a>
    2ffa:	88 33       	cpi	r24, 0x38	; 56
    2ffc:	09 f0       	breq	.+2      	; 0x3000 <__vector_39+0x74>
    2ffe:	e1 c0       	rjmp	.+450    	; 0x31c2 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3000:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <twi_error>
      twi_releaseBus();
    3004:	bd df       	rcall	.-134    	; 0x2f80 <twi_releaseBus>
      break;
    3006:	dd c0       	rjmp	.+442    	; 0x31c2 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3008:	80 35       	cpi	r24, 0x50	; 80
    300a:	09 f4       	brne	.+2      	; 0x300e <__vector_39+0x82>
    300c:	4f c0       	rjmp	.+158    	; 0x30ac <__vector_39+0x120>
    300e:	88 35       	cpi	r24, 0x58	; 88
    3010:	09 f4       	brne	.+2      	; 0x3014 <__vector_39+0x88>
    3012:	5d c0       	rjmp	.+186    	; 0x30ce <__vector_39+0x142>
    3014:	88 34       	cpi	r24, 0x48	; 72
    3016:	09 f0       	breq	.+2      	; 0x301a <__vector_39+0x8e>
    3018:	d4 c0       	rjmp	.+424    	; 0x31c2 <__vector_39+0x236>
    301a:	d2 c0       	rjmp	.+420    	; 0x31c0 <__vector_39+0x234>
    301c:	88 39       	cpi	r24, 0x98	; 152
    301e:	09 f4       	brne	.+2      	; 0x3022 <__vector_39+0x96>
    3020:	c3 c0       	rjmp	.+390    	; 0x31a8 <__vector_39+0x21c>
    3022:	a8 f4       	brcc	.+42     	; 0x304e <__vector_39+0xc2>
    3024:	88 37       	cpi	r24, 0x78	; 120
    3026:	09 f4       	brne	.+2      	; 0x302a <__vector_39+0x9e>
    3028:	67 c0       	rjmp	.+206    	; 0x30f8 <__vector_39+0x16c>
    302a:	38 f4       	brcc	.+14     	; 0x303a <__vector_39+0xae>
    302c:	88 36       	cpi	r24, 0x68	; 104
    302e:	09 f4       	brne	.+2      	; 0x3032 <__vector_39+0xa6>
    3030:	63 c0       	rjmp	.+198    	; 0x30f8 <__vector_39+0x16c>
    3032:	80 37       	cpi	r24, 0x70	; 112
    3034:	09 f4       	brne	.+2      	; 0x3038 <__vector_39+0xac>
    3036:	60 c0       	rjmp	.+192    	; 0x30f8 <__vector_39+0x16c>
    3038:	c4 c0       	rjmp	.+392    	; 0x31c2 <__vector_39+0x236>
    303a:	88 38       	cpi	r24, 0x88	; 136
    303c:	09 f4       	brne	.+2      	; 0x3040 <__vector_39+0xb4>
    303e:	b4 c0       	rjmp	.+360    	; 0x31a8 <__vector_39+0x21c>
    3040:	80 39       	cpi	r24, 0x90	; 144
    3042:	09 f4       	brne	.+2      	; 0x3046 <__vector_39+0xba>
    3044:	5f c0       	rjmp	.+190    	; 0x3104 <__vector_39+0x178>
    3046:	80 38       	cpi	r24, 0x80	; 128
    3048:	09 f0       	breq	.+2      	; 0x304c <__vector_39+0xc0>
    304a:	bb c0       	rjmp	.+374    	; 0x31c2 <__vector_39+0x236>
    304c:	5b c0       	rjmp	.+182    	; 0x3104 <__vector_39+0x178>
    304e:	80 3b       	cpi	r24, 0xB0	; 176
    3050:	09 f4       	brne	.+2      	; 0x3054 <__vector_39+0xc8>
    3052:	82 c0       	rjmp	.+260    	; 0x3158 <__vector_39+0x1cc>
    3054:	38 f4       	brcc	.+14     	; 0x3064 <__vector_39+0xd8>
    3056:	80 3a       	cpi	r24, 0xA0	; 160
    3058:	09 f4       	brne	.+2      	; 0x305c <__vector_39+0xd0>
    305a:	66 c0       	rjmp	.+204    	; 0x3128 <__vector_39+0x19c>
    305c:	88 3a       	cpi	r24, 0xA8	; 168
    305e:	09 f4       	brne	.+2      	; 0x3062 <__vector_39+0xd6>
    3060:	7b c0       	rjmp	.+246    	; 0x3158 <__vector_39+0x1cc>
    3062:	af c0       	rjmp	.+350    	; 0x31c2 <__vector_39+0x236>
    3064:	80 3c       	cpi	r24, 0xC0	; 192
    3066:	09 f4       	brne	.+2      	; 0x306a <__vector_39+0xde>
    3068:	a3 c0       	rjmp	.+326    	; 0x31b0 <__vector_39+0x224>
    306a:	88 3c       	cpi	r24, 0xC8	; 200
    306c:	09 f4       	brne	.+2      	; 0x3070 <__vector_39+0xe4>
    306e:	a0 c0       	rjmp	.+320    	; 0x31b0 <__vector_39+0x224>
    3070:	88 3b       	cpi	r24, 0xB8	; 184
    3072:	09 f4       	brne	.+2      	; 0x3076 <__vector_39+0xea>
    3074:	86 c0       	rjmp	.+268    	; 0x3182 <__vector_39+0x1f6>
    3076:	a5 c0       	rjmp	.+330    	; 0x31c2 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3078:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <twi_slarw>
    307c:	10 c0       	rjmp	.+32     	; 0x309e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    307e:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <twi_masterBufferIndex>
    3082:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_masterBufferLength>
    3086:	98 17       	cp	r25, r24
    3088:	70 f5       	brcc	.+92     	; 0x30e6 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    308a:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <twi_masterBufferIndex>
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	8e 0f       	add	r24, r30
    3092:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <twi_masterBufferIndex>
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	ee 59       	subi	r30, 0x9E	; 158
    309a:	fa 4f       	sbci	r31, 0xFA	; 250
    309c:	80 81       	ld	r24, Z
    309e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30a2:	85 ec       	ldi	r24, 0xC5	; 197
    30a4:	82 c0       	rjmp	.+260    	; 0x31aa <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    30a6:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <twi_error>
    30aa:	8a c0       	rjmp	.+276    	; 0x31c0 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    30ac:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <twi_masterBufferIndex>
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	8e 0f       	add	r24, r30
    30b4:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <twi_masterBufferIndex>
    30b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	ee 59       	subi	r30, 0x9E	; 158
    30c0:	fa 4f       	sbci	r31, 0xFA	; 250
    30c2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    30c4:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <twi_masterBufferIndex>
    30c8:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <twi_masterBufferLength>
    30cc:	6a c0       	rjmp	.+212    	; 0x31a2 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    30ce:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <twi_masterBufferIndex>
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	8e 0f       	add	r24, r30
    30d6:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <twi_masterBufferIndex>
    30da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	ee 59       	subi	r30, 0x9E	; 158
    30e2:	fa 4f       	sbci	r31, 0xFA	; 250
    30e4:	80 83       	st	Z, r24
	if (twi_sendStop)
    30e6:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <twi_sendStop>
    30ea:	81 11       	cpse	r24, r1
    30ec:	69 c0       	rjmp	.+210    	; 0x31c0 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    30f4:	84 ea       	ldi	r24, 0xA4	; 164
    30f6:	5d c0       	rjmp	.+186    	; 0x31b2 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    30f8:	83 e0       	ldi	r24, 0x03	; 3
    30fa:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    30fe:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <twi_rxBufferIndex>
    3102:	cf cf       	rjmp	.-98     	; 0x30a2 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3104:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <twi_rxBufferIndex>
    3108:	80 32       	cpi	r24, 0x20	; 32
    310a:	08 f0       	brcs	.+2      	; 0x310e <__vector_39+0x182>
    310c:	4d c0       	rjmp	.+154    	; 0x31a8 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    310e:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <twi_rxBufferIndex>
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	8e 0f       	add	r24, r30
    3116:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <twi_rxBufferIndex>
    311a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	e2 5e       	subi	r30, 0xE2	; 226
    3122:	fa 4f       	sbci	r31, 0xFA	; 250
    3124:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3126:	bd cf       	rjmp	.-134    	; 0x30a2 <__vector_39+0x116>
    3128:	2b df       	rcall	.-426    	; 0x2f80 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    312a:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <twi_rxBufferIndex>
    312e:	80 32       	cpi	r24, 0x20	; 32
    3130:	30 f4       	brcc	.+12     	; 0x313e <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3132:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <twi_rxBufferIndex>
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	e2 5e       	subi	r30, 0xE2	; 226
    313a:	fa 4f       	sbci	r31, 0xFA	; 250
    313c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    313e:	60 91 1d 05 	lds	r22, 0x051D	; 0x80051d <twi_rxBufferIndex>
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <twi_onSlaveReceive>
    3148:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <twi_onSlaveReceive+0x1>
    314c:	8e e1       	ldi	r24, 0x1E	; 30
    314e:	95 e0       	ldi	r25, 0x05	; 5
    3150:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3152:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <twi_rxBufferIndex>
      break;
    3156:	35 c0       	rjmp	.+106    	; 0x31c2 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3158:	84 e0       	ldi	r24, 0x04	; 4
    315a:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    315e:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3162:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3166:	e0 91 84 05 	lds	r30, 0x0584	; 0x800584 <twi_onSlaveTransmit>
    316a:	f0 91 85 05 	lds	r31, 0x0585	; 0x800585 <twi_onSlaveTransmit+0x1>
    316e:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3170:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <twi_txBufferLength>
    3174:	81 11       	cpse	r24, r1
    3176:	05 c0       	rjmp	.+10     	; 0x3182 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    317e:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3182:	e0 91 3f 05 	lds	r30, 0x053F	; 0x80053f <twi_txBufferIndex>
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	8e 0f       	add	r24, r30
    318a:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <twi_txBufferIndex>
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	e0 5c       	subi	r30, 0xC0	; 192
    3192:	fa 4f       	sbci	r31, 0xFA	; 250
    3194:	80 81       	ld	r24, Z
    3196:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    319a:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <twi_txBufferIndex>
    319e:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <twi_txBufferLength>
    31a2:	98 17       	cp	r25, r24
    31a4:	08 f4       	brcc	.+2      	; 0x31a8 <__vector_39+0x21c>
    31a6:	7d cf       	rjmp	.-262    	; 0x30a2 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    31a8:	85 e8       	ldi	r24, 0x85	; 133
    31aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    31ae:	09 c0       	rjmp	.+18     	; 0x31c2 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    31b0:	85 ec       	ldi	r24, 0xC5	; 197
    31b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    31b6:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <twi_state>
      break;
    31ba:	03 c0       	rjmp	.+6      	; 0x31c2 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    31bc:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <twi_error>
      twi_stop();
    31c0:	d5 de       	rcall	.-598    	; 0x2f6c <twi_stop>
      break;
  }
}
    31c2:	ff 91       	pop	r31
    31c4:	ef 91       	pop	r30
    31c6:	bf 91       	pop	r27
    31c8:	af 91       	pop	r26
    31ca:	9f 91       	pop	r25
    31cc:	8f 91       	pop	r24
    31ce:	7f 91       	pop	r23
    31d0:	6f 91       	pop	r22
    31d2:	5f 91       	pop	r21
    31d4:	4f 91       	pop	r20
    31d6:	3f 91       	pop	r19
    31d8:	2f 91       	pop	r18
    31da:	0f 90       	pop	r0
    31dc:	0b be       	out	0x3b, r0	; 59
    31de:	0f 90       	pop	r0
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	0f 90       	pop	r0
    31e4:	1f 90       	pop	r1
    31e6:	18 95       	reti

000031e8 <__udivmodsi4>:
    31e8:	a1 e2       	ldi	r26, 0x21	; 33
    31ea:	1a 2e       	mov	r1, r26
    31ec:	aa 1b       	sub	r26, r26
    31ee:	bb 1b       	sub	r27, r27
    31f0:	fd 01       	movw	r30, r26
    31f2:	0d c0       	rjmp	.+26     	; 0x320e <__udivmodsi4_ep>

000031f4 <__udivmodsi4_loop>:
    31f4:	aa 1f       	adc	r26, r26
    31f6:	bb 1f       	adc	r27, r27
    31f8:	ee 1f       	adc	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	a2 17       	cp	r26, r18
    31fe:	b3 07       	cpc	r27, r19
    3200:	e4 07       	cpc	r30, r20
    3202:	f5 07       	cpc	r31, r21
    3204:	20 f0       	brcs	.+8      	; 0x320e <__udivmodsi4_ep>
    3206:	a2 1b       	sub	r26, r18
    3208:	b3 0b       	sbc	r27, r19
    320a:	e4 0b       	sbc	r30, r20
    320c:	f5 0b       	sbc	r31, r21

0000320e <__udivmodsi4_ep>:
    320e:	66 1f       	adc	r22, r22
    3210:	77 1f       	adc	r23, r23
    3212:	88 1f       	adc	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	1a 94       	dec	r1
    3218:	69 f7       	brne	.-38     	; 0x31f4 <__udivmodsi4_loop>
    321a:	60 95       	com	r22
    321c:	70 95       	com	r23
    321e:	80 95       	com	r24
    3220:	90 95       	com	r25
    3222:	9b 01       	movw	r18, r22
    3224:	ac 01       	movw	r20, r24
    3226:	bd 01       	movw	r22, r26
    3228:	cf 01       	movw	r24, r30
    322a:	08 95       	ret

0000322c <__tablejump2__>:
    322c:	ee 0f       	add	r30, r30
    322e:	ff 1f       	adc	r31, r31
    3230:	88 1f       	adc	r24, r24
    3232:	8b bf       	out	0x3b, r24	; 59
    3234:	07 90       	elpm	r0, Z+
    3236:	f6 91       	elpm	r31, Z
    3238:	e0 2d       	mov	r30, r0
    323a:	19 94       	eijmp

0000323c <malloc>:
    323c:	0f 93       	push	r16
    323e:	1f 93       	push	r17
    3240:	cf 93       	push	r28
    3242:	df 93       	push	r29
    3244:	82 30       	cpi	r24, 0x02	; 2
    3246:	91 05       	cpc	r25, r1
    3248:	10 f4       	brcc	.+4      	; 0x324e <malloc+0x12>
    324a:	82 e0       	ldi	r24, 0x02	; 2
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <__flp>
    3252:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <__flp+0x1>
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	a0 e0       	ldi	r26, 0x00	; 0
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	30 97       	sbiw	r30, 0x00	; 0
    3260:	19 f1       	breq	.+70     	; 0x32a8 <malloc+0x6c>
    3262:	40 81       	ld	r20, Z
    3264:	51 81       	ldd	r21, Z+1	; 0x01
    3266:	02 81       	ldd	r16, Z+2	; 0x02
    3268:	13 81       	ldd	r17, Z+3	; 0x03
    326a:	48 17       	cp	r20, r24
    326c:	59 07       	cpc	r21, r25
    326e:	c8 f0       	brcs	.+50     	; 0x32a2 <malloc+0x66>
    3270:	84 17       	cp	r24, r20
    3272:	95 07       	cpc	r25, r21
    3274:	69 f4       	brne	.+26     	; 0x3290 <malloc+0x54>
    3276:	10 97       	sbiw	r26, 0x00	; 0
    3278:	31 f0       	breq	.+12     	; 0x3286 <malloc+0x4a>
    327a:	12 96       	adiw	r26, 0x02	; 2
    327c:	0c 93       	st	X, r16
    327e:	12 97       	sbiw	r26, 0x02	; 2
    3280:	13 96       	adiw	r26, 0x03	; 3
    3282:	1c 93       	st	X, r17
    3284:	27 c0       	rjmp	.+78     	; 0x32d4 <malloc+0x98>
    3286:	00 93 8c 05 	sts	0x058C, r16	; 0x80058c <__flp>
    328a:	10 93 8d 05 	sts	0x058D, r17	; 0x80058d <__flp+0x1>
    328e:	22 c0       	rjmp	.+68     	; 0x32d4 <malloc+0x98>
    3290:	21 15       	cp	r18, r1
    3292:	31 05       	cpc	r19, r1
    3294:	19 f0       	breq	.+6      	; 0x329c <malloc+0x60>
    3296:	42 17       	cp	r20, r18
    3298:	53 07       	cpc	r21, r19
    329a:	18 f4       	brcc	.+6      	; 0x32a2 <malloc+0x66>
    329c:	9a 01       	movw	r18, r20
    329e:	bd 01       	movw	r22, r26
    32a0:	ef 01       	movw	r28, r30
    32a2:	df 01       	movw	r26, r30
    32a4:	f8 01       	movw	r30, r16
    32a6:	db cf       	rjmp	.-74     	; 0x325e <malloc+0x22>
    32a8:	21 15       	cp	r18, r1
    32aa:	31 05       	cpc	r19, r1
    32ac:	f9 f0       	breq	.+62     	; 0x32ec <malloc+0xb0>
    32ae:	28 1b       	sub	r18, r24
    32b0:	39 0b       	sbc	r19, r25
    32b2:	24 30       	cpi	r18, 0x04	; 4
    32b4:	31 05       	cpc	r19, r1
    32b6:	80 f4       	brcc	.+32     	; 0x32d8 <malloc+0x9c>
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ba:	9b 81       	ldd	r25, Y+3	; 0x03
    32bc:	61 15       	cp	r22, r1
    32be:	71 05       	cpc	r23, r1
    32c0:	21 f0       	breq	.+8      	; 0x32ca <malloc+0x8e>
    32c2:	fb 01       	movw	r30, r22
    32c4:	93 83       	std	Z+3, r25	; 0x03
    32c6:	82 83       	std	Z+2, r24	; 0x02
    32c8:	04 c0       	rjmp	.+8      	; 0x32d2 <malloc+0x96>
    32ca:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <__flp+0x1>
    32ce:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <__flp>
    32d2:	fe 01       	movw	r30, r28
    32d4:	32 96       	adiw	r30, 0x02	; 2
    32d6:	44 c0       	rjmp	.+136    	; 0x3360 <malloc+0x124>
    32d8:	fe 01       	movw	r30, r28
    32da:	e2 0f       	add	r30, r18
    32dc:	f3 1f       	adc	r31, r19
    32de:	81 93       	st	Z+, r24
    32e0:	91 93       	st	Z+, r25
    32e2:	22 50       	subi	r18, 0x02	; 2
    32e4:	31 09       	sbc	r19, r1
    32e6:	39 83       	std	Y+1, r19	; 0x01
    32e8:	28 83       	st	Y, r18
    32ea:	3a c0       	rjmp	.+116    	; 0x3360 <malloc+0x124>
    32ec:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <__brkval>
    32f0:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <__brkval+0x1>
    32f4:	23 2b       	or	r18, r19
    32f6:	41 f4       	brne	.+16     	; 0x3308 <malloc+0xcc>
    32f8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    32fc:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3300:	30 93 8b 05 	sts	0x058B, r19	; 0x80058b <__brkval+0x1>
    3304:	20 93 8a 05 	sts	0x058A, r18	; 0x80058a <__brkval>
    3308:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    330c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3310:	21 15       	cp	r18, r1
    3312:	31 05       	cpc	r19, r1
    3314:	41 f4       	brne	.+16     	; 0x3326 <malloc+0xea>
    3316:	2d b7       	in	r18, 0x3d	; 61
    3318:	3e b7       	in	r19, 0x3e	; 62
    331a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    331e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3322:	24 1b       	sub	r18, r20
    3324:	35 0b       	sbc	r19, r21
    3326:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <__brkval>
    332a:	f0 91 8b 05 	lds	r31, 0x058B	; 0x80058b <__brkval+0x1>
    332e:	e2 17       	cp	r30, r18
    3330:	f3 07       	cpc	r31, r19
    3332:	a0 f4       	brcc	.+40     	; 0x335c <malloc+0x120>
    3334:	2e 1b       	sub	r18, r30
    3336:	3f 0b       	sbc	r19, r31
    3338:	28 17       	cp	r18, r24
    333a:	39 07       	cpc	r19, r25
    333c:	78 f0       	brcs	.+30     	; 0x335c <malloc+0x120>
    333e:	ac 01       	movw	r20, r24
    3340:	4e 5f       	subi	r20, 0xFE	; 254
    3342:	5f 4f       	sbci	r21, 0xFF	; 255
    3344:	24 17       	cp	r18, r20
    3346:	35 07       	cpc	r19, r21
    3348:	48 f0       	brcs	.+18     	; 0x335c <malloc+0x120>
    334a:	4e 0f       	add	r20, r30
    334c:	5f 1f       	adc	r21, r31
    334e:	50 93 8b 05 	sts	0x058B, r21	; 0x80058b <__brkval+0x1>
    3352:	40 93 8a 05 	sts	0x058A, r20	; 0x80058a <__brkval>
    3356:	81 93       	st	Z+, r24
    3358:	91 93       	st	Z+, r25
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <malloc+0x124>
    335c:	e0 e0       	ldi	r30, 0x00	; 0
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	cf 01       	movw	r24, r30
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	08 95       	ret

0000336c <free>:
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	00 97       	sbiw	r24, 0x00	; 0
    3372:	09 f4       	brne	.+2      	; 0x3376 <free+0xa>
    3374:	81 c0       	rjmp	.+258    	; 0x3478 <free+0x10c>
    3376:	fc 01       	movw	r30, r24
    3378:	32 97       	sbiw	r30, 0x02	; 2
    337a:	13 82       	std	Z+3, r1	; 0x03
    337c:	12 82       	std	Z+2, r1	; 0x02
    337e:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <__flp>
    3382:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <__flp+0x1>
    3386:	10 97       	sbiw	r26, 0x00	; 0
    3388:	81 f4       	brne	.+32     	; 0x33aa <free+0x3e>
    338a:	20 81       	ld	r18, Z
    338c:	31 81       	ldd	r19, Z+1	; 0x01
    338e:	82 0f       	add	r24, r18
    3390:	93 1f       	adc	r25, r19
    3392:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <__brkval>
    3396:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <__brkval+0x1>
    339a:	28 17       	cp	r18, r24
    339c:	39 07       	cpc	r19, r25
    339e:	51 f5       	brne	.+84     	; 0x33f4 <free+0x88>
    33a0:	f0 93 8b 05 	sts	0x058B, r31	; 0x80058b <__brkval+0x1>
    33a4:	e0 93 8a 05 	sts	0x058A, r30	; 0x80058a <__brkval>
    33a8:	67 c0       	rjmp	.+206    	; 0x3478 <free+0x10c>
    33aa:	ed 01       	movw	r28, r26
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	ce 17       	cp	r28, r30
    33b2:	df 07       	cpc	r29, r31
    33b4:	40 f4       	brcc	.+16     	; 0x33c6 <free+0x5a>
    33b6:	4a 81       	ldd	r20, Y+2	; 0x02
    33b8:	5b 81       	ldd	r21, Y+3	; 0x03
    33ba:	9e 01       	movw	r18, r28
    33bc:	41 15       	cp	r20, r1
    33be:	51 05       	cpc	r21, r1
    33c0:	f1 f0       	breq	.+60     	; 0x33fe <free+0x92>
    33c2:	ea 01       	movw	r28, r20
    33c4:	f5 cf       	rjmp	.-22     	; 0x33b0 <free+0x44>
    33c6:	d3 83       	std	Z+3, r29	; 0x03
    33c8:	c2 83       	std	Z+2, r28	; 0x02
    33ca:	40 81       	ld	r20, Z
    33cc:	51 81       	ldd	r21, Z+1	; 0x01
    33ce:	84 0f       	add	r24, r20
    33d0:	95 1f       	adc	r25, r21
    33d2:	c8 17       	cp	r28, r24
    33d4:	d9 07       	cpc	r29, r25
    33d6:	59 f4       	brne	.+22     	; 0x33ee <free+0x82>
    33d8:	88 81       	ld	r24, Y
    33da:	99 81       	ldd	r25, Y+1	; 0x01
    33dc:	84 0f       	add	r24, r20
    33de:	95 1f       	adc	r25, r21
    33e0:	02 96       	adiw	r24, 0x02	; 2
    33e2:	91 83       	std	Z+1, r25	; 0x01
    33e4:	80 83       	st	Z, r24
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	9b 81       	ldd	r25, Y+3	; 0x03
    33ea:	93 83       	std	Z+3, r25	; 0x03
    33ec:	82 83       	std	Z+2, r24	; 0x02
    33ee:	21 15       	cp	r18, r1
    33f0:	31 05       	cpc	r19, r1
    33f2:	29 f4       	brne	.+10     	; 0x33fe <free+0x92>
    33f4:	f0 93 8d 05 	sts	0x058D, r31	; 0x80058d <__flp+0x1>
    33f8:	e0 93 8c 05 	sts	0x058C, r30	; 0x80058c <__flp>
    33fc:	3d c0       	rjmp	.+122    	; 0x3478 <free+0x10c>
    33fe:	e9 01       	movw	r28, r18
    3400:	fb 83       	std	Y+3, r31	; 0x03
    3402:	ea 83       	std	Y+2, r30	; 0x02
    3404:	49 91       	ld	r20, Y+
    3406:	59 91       	ld	r21, Y+
    3408:	c4 0f       	add	r28, r20
    340a:	d5 1f       	adc	r29, r21
    340c:	ec 17       	cp	r30, r28
    340e:	fd 07       	cpc	r31, r29
    3410:	61 f4       	brne	.+24     	; 0x342a <free+0xbe>
    3412:	80 81       	ld	r24, Z
    3414:	91 81       	ldd	r25, Z+1	; 0x01
    3416:	84 0f       	add	r24, r20
    3418:	95 1f       	adc	r25, r21
    341a:	02 96       	adiw	r24, 0x02	; 2
    341c:	e9 01       	movw	r28, r18
    341e:	99 83       	std	Y+1, r25	; 0x01
    3420:	88 83       	st	Y, r24
    3422:	82 81       	ldd	r24, Z+2	; 0x02
    3424:	93 81       	ldd	r25, Z+3	; 0x03
    3426:	9b 83       	std	Y+3, r25	; 0x03
    3428:	8a 83       	std	Y+2, r24	; 0x02
    342a:	e0 e0       	ldi	r30, 0x00	; 0
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	12 96       	adiw	r26, 0x02	; 2
    3430:	8d 91       	ld	r24, X+
    3432:	9c 91       	ld	r25, X
    3434:	13 97       	sbiw	r26, 0x03	; 3
    3436:	00 97       	sbiw	r24, 0x00	; 0
    3438:	19 f0       	breq	.+6      	; 0x3440 <free+0xd4>
    343a:	fd 01       	movw	r30, r26
    343c:	dc 01       	movw	r26, r24
    343e:	f7 cf       	rjmp	.-18     	; 0x342e <free+0xc2>
    3440:	8d 91       	ld	r24, X+
    3442:	9c 91       	ld	r25, X
    3444:	11 97       	sbiw	r26, 0x01	; 1
    3446:	9d 01       	movw	r18, r26
    3448:	2e 5f       	subi	r18, 0xFE	; 254
    344a:	3f 4f       	sbci	r19, 0xFF	; 255
    344c:	82 0f       	add	r24, r18
    344e:	93 1f       	adc	r25, r19
    3450:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <__brkval>
    3454:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <__brkval+0x1>
    3458:	28 17       	cp	r18, r24
    345a:	39 07       	cpc	r19, r25
    345c:	69 f4       	brne	.+26     	; 0x3478 <free+0x10c>
    345e:	30 97       	sbiw	r30, 0x00	; 0
    3460:	29 f4       	brne	.+10     	; 0x346c <free+0x100>
    3462:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <__flp+0x1>
    3466:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <__flp>
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <free+0x104>
    346c:	13 82       	std	Z+3, r1	; 0x03
    346e:	12 82       	std	Z+2, r1	; 0x02
    3470:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <__brkval+0x1>
    3474:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <__brkval>
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	08 95       	ret

0000347e <realloc>:
    347e:	6f 92       	push	r6
    3480:	7f 92       	push	r7
    3482:	8f 92       	push	r8
    3484:	9f 92       	push	r9
    3486:	af 92       	push	r10
    3488:	bf 92       	push	r11
    348a:	cf 92       	push	r12
    348c:	df 92       	push	r13
    348e:	ef 92       	push	r14
    3490:	ff 92       	push	r15
    3492:	0f 93       	push	r16
    3494:	1f 93       	push	r17
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	00 97       	sbiw	r24, 0x00	; 0
    349c:	81 f4       	brne	.+32     	; 0x34be <realloc+0x40>
    349e:	cb 01       	movw	r24, r22
    34a0:	df 91       	pop	r29
    34a2:	cf 91       	pop	r28
    34a4:	1f 91       	pop	r17
    34a6:	0f 91       	pop	r16
    34a8:	ff 90       	pop	r15
    34aa:	ef 90       	pop	r14
    34ac:	df 90       	pop	r13
    34ae:	cf 90       	pop	r12
    34b0:	bf 90       	pop	r11
    34b2:	af 90       	pop	r10
    34b4:	9f 90       	pop	r9
    34b6:	8f 90       	pop	r8
    34b8:	7f 90       	pop	r7
    34ba:	6f 90       	pop	r6
    34bc:	bf ce       	rjmp	.-642    	; 0x323c <malloc>
    34be:	fc 01       	movw	r30, r24
    34c0:	e6 0f       	add	r30, r22
    34c2:	f7 1f       	adc	r31, r23
    34c4:	9c 01       	movw	r18, r24
    34c6:	22 50       	subi	r18, 0x02	; 2
    34c8:	31 09       	sbc	r19, r1
    34ca:	e2 17       	cp	r30, r18
    34cc:	f3 07       	cpc	r31, r19
    34ce:	08 f4       	brcc	.+2      	; 0x34d2 <realloc+0x54>
    34d0:	a5 c0       	rjmp	.+330    	; 0x361c <realloc+0x19e>
    34d2:	ec 01       	movw	r28, r24
    34d4:	d9 01       	movw	r26, r18
    34d6:	0d 91       	ld	r16, X+
    34d8:	1c 91       	ld	r17, X
    34da:	11 97       	sbiw	r26, 0x01	; 1
    34dc:	06 17       	cp	r16, r22
    34de:	17 07       	cpc	r17, r23
    34e0:	a8 f0       	brcs	.+42     	; 0x350c <realloc+0x8e>
    34e2:	05 30       	cpi	r16, 0x05	; 5
    34e4:	11 05       	cpc	r17, r1
    34e6:	08 f4       	brcc	.+2      	; 0x34ea <realloc+0x6c>
    34e8:	97 c0       	rjmp	.+302    	; 0x3618 <realloc+0x19a>
    34ea:	c8 01       	movw	r24, r16
    34ec:	04 97       	sbiw	r24, 0x04	; 4
    34ee:	86 17       	cp	r24, r22
    34f0:	97 07       	cpc	r25, r23
    34f2:	08 f4       	brcc	.+2      	; 0x34f6 <realloc+0x78>
    34f4:	91 c0       	rjmp	.+290    	; 0x3618 <realloc+0x19a>
    34f6:	02 50       	subi	r16, 0x02	; 2
    34f8:	11 09       	sbc	r17, r1
    34fa:	06 1b       	sub	r16, r22
    34fc:	17 0b       	sbc	r17, r23
    34fe:	01 93       	st	Z+, r16
    3500:	11 93       	st	Z+, r17
    3502:	6d 93       	st	X+, r22
    3504:	7c 93       	st	X, r23
    3506:	cf 01       	movw	r24, r30
    3508:	31 df       	rcall	.-414    	; 0x336c <free>
    350a:	86 c0       	rjmp	.+268    	; 0x3618 <realloc+0x19a>
    350c:	5b 01       	movw	r10, r22
    350e:	a0 1a       	sub	r10, r16
    3510:	b1 0a       	sbc	r11, r17
    3512:	4c 01       	movw	r8, r24
    3514:	80 0e       	add	r8, r16
    3516:	91 1e       	adc	r9, r17
    3518:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <__flp>
    351c:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <__flp+0x1>
    3520:	61 2c       	mov	r6, r1
    3522:	71 2c       	mov	r7, r1
    3524:	e1 2c       	mov	r14, r1
    3526:	f1 2c       	mov	r15, r1
    3528:	10 97       	sbiw	r26, 0x00	; 0
    352a:	09 f4       	brne	.+2      	; 0x352e <realloc+0xb0>
    352c:	46 c0       	rjmp	.+140    	; 0x35ba <realloc+0x13c>
    352e:	8d 91       	ld	r24, X+
    3530:	9c 91       	ld	r25, X
    3532:	11 97       	sbiw	r26, 0x01	; 1
    3534:	a8 15       	cp	r26, r8
    3536:	b9 05       	cpc	r27, r9
    3538:	b1 f5       	brne	.+108    	; 0x35a6 <realloc+0x128>
    353a:	6c 01       	movw	r12, r24
    353c:	42 e0       	ldi	r20, 0x02	; 2
    353e:	c4 0e       	add	r12, r20
    3540:	d1 1c       	adc	r13, r1
    3542:	ca 14       	cp	r12, r10
    3544:	db 04       	cpc	r13, r11
    3546:	78 f1       	brcs	.+94     	; 0x35a6 <realloc+0x128>
    3548:	4c 01       	movw	r8, r24
    354a:	8a 18       	sub	r8, r10
    354c:	9b 08       	sbc	r9, r11
    354e:	64 01       	movw	r12, r8
    3550:	42 e0       	ldi	r20, 0x02	; 2
    3552:	c4 0e       	add	r12, r20
    3554:	d1 1c       	adc	r13, r1
    3556:	12 96       	adiw	r26, 0x02	; 2
    3558:	bc 90       	ld	r11, X
    355a:	12 97       	sbiw	r26, 0x02	; 2
    355c:	13 96       	adiw	r26, 0x03	; 3
    355e:	ac 91       	ld	r26, X
    3560:	b5 e0       	ldi	r27, 0x05	; 5
    3562:	cb 16       	cp	r12, r27
    3564:	d1 04       	cpc	r13, r1
    3566:	40 f0       	brcs	.+16     	; 0x3578 <realloc+0xfa>
    3568:	b2 82       	std	Z+2, r11	; 0x02
    356a:	a3 83       	std	Z+3, r26	; 0x03
    356c:	91 82       	std	Z+1, r9	; 0x01
    356e:	80 82       	st	Z, r8
    3570:	d9 01       	movw	r26, r18
    3572:	6d 93       	st	X+, r22
    3574:	7c 93       	st	X, r23
    3576:	09 c0       	rjmp	.+18     	; 0x358a <realloc+0x10c>
    3578:	0e 5f       	subi	r16, 0xFE	; 254
    357a:	1f 4f       	sbci	r17, 0xFF	; 255
    357c:	80 0f       	add	r24, r16
    357e:	91 1f       	adc	r25, r17
    3580:	f9 01       	movw	r30, r18
    3582:	91 83       	std	Z+1, r25	; 0x01
    3584:	80 83       	st	Z, r24
    3586:	eb 2d       	mov	r30, r11
    3588:	fa 2f       	mov	r31, r26
    358a:	e1 14       	cp	r14, r1
    358c:	f1 04       	cpc	r15, r1
    358e:	31 f0       	breq	.+12     	; 0x359c <realloc+0x11e>
    3590:	d7 01       	movw	r26, r14
    3592:	13 96       	adiw	r26, 0x03	; 3
    3594:	fc 93       	st	X, r31
    3596:	ee 93       	st	-X, r30
    3598:	12 97       	sbiw	r26, 0x02	; 2
    359a:	3e c0       	rjmp	.+124    	; 0x3618 <realloc+0x19a>
    359c:	f0 93 8d 05 	sts	0x058D, r31	; 0x80058d <__flp+0x1>
    35a0:	e0 93 8c 05 	sts	0x058C, r30	; 0x80058c <__flp>
    35a4:	39 c0       	rjmp	.+114    	; 0x3618 <realloc+0x19a>
    35a6:	68 16       	cp	r6, r24
    35a8:	79 06       	cpc	r7, r25
    35aa:	08 f4       	brcc	.+2      	; 0x35ae <realloc+0x130>
    35ac:	3c 01       	movw	r6, r24
    35ae:	7d 01       	movw	r14, r26
    35b0:	12 96       	adiw	r26, 0x02	; 2
    35b2:	0d 90       	ld	r0, X+
    35b4:	bc 91       	ld	r27, X
    35b6:	a0 2d       	mov	r26, r0
    35b8:	b7 cf       	rjmp	.-146    	; 0x3528 <realloc+0xaa>
    35ba:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <__brkval>
    35be:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <__brkval+0x1>
    35c2:	88 16       	cp	r8, r24
    35c4:	99 06       	cpc	r9, r25
    35c6:	e1 f4       	brne	.+56     	; 0x3600 <realloc+0x182>
    35c8:	66 16       	cp	r6, r22
    35ca:	77 06       	cpc	r7, r23
    35cc:	c8 f4       	brcc	.+50     	; 0x3600 <realloc+0x182>
    35ce:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    35d2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	41 f4       	brne	.+16     	; 0x35ea <realloc+0x16c>
    35da:	8d b7       	in	r24, 0x3d	; 61
    35dc:	9e b7       	in	r25, 0x3e	; 62
    35de:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    35e2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    35e6:	84 1b       	sub	r24, r20
    35e8:	95 0b       	sbc	r25, r21
    35ea:	e8 17       	cp	r30, r24
    35ec:	f9 07       	cpc	r31, r25
    35ee:	b0 f4       	brcc	.+44     	; 0x361c <realloc+0x19e>
    35f0:	f0 93 8b 05 	sts	0x058B, r31	; 0x80058b <__brkval+0x1>
    35f4:	e0 93 8a 05 	sts	0x058A, r30	; 0x80058a <__brkval>
    35f8:	f9 01       	movw	r30, r18
    35fa:	71 83       	std	Z+1, r23	; 0x01
    35fc:	60 83       	st	Z, r22
    35fe:	0c c0       	rjmp	.+24     	; 0x3618 <realloc+0x19a>
    3600:	cb 01       	movw	r24, r22
    3602:	1c de       	rcall	.-968    	; 0x323c <malloc>
    3604:	7c 01       	movw	r14, r24
    3606:	00 97       	sbiw	r24, 0x00	; 0
    3608:	49 f0       	breq	.+18     	; 0x361c <realloc+0x19e>
    360a:	a8 01       	movw	r20, r16
    360c:	be 01       	movw	r22, r28
    360e:	17 d0       	rcall	.+46     	; 0x363e <memcpy>
    3610:	ce 01       	movw	r24, r28
    3612:	ac de       	rcall	.-680    	; 0x336c <free>
    3614:	c7 01       	movw	r24, r14
    3616:	04 c0       	rjmp	.+8      	; 0x3620 <realloc+0x1a2>
    3618:	ce 01       	movw	r24, r28
    361a:	02 c0       	rjmp	.+4      	; 0x3620 <realloc+0x1a2>
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	ff 90       	pop	r15
    362a:	ef 90       	pop	r14
    362c:	df 90       	pop	r13
    362e:	cf 90       	pop	r12
    3630:	bf 90       	pop	r11
    3632:	af 90       	pop	r10
    3634:	9f 90       	pop	r9
    3636:	8f 90       	pop	r8
    3638:	7f 90       	pop	r7
    363a:	6f 90       	pop	r6
    363c:	08 95       	ret

0000363e <memcpy>:
    363e:	fb 01       	movw	r30, r22
    3640:	dc 01       	movw	r26, r24
    3642:	02 c0       	rjmp	.+4      	; 0x3648 <memcpy+0xa>
    3644:	01 90       	ld	r0, Z+
    3646:	0d 92       	st	X+, r0
    3648:	41 50       	subi	r20, 0x01	; 1
    364a:	50 40       	sbci	r21, 0x00	; 0
    364c:	d8 f7       	brcc	.-10     	; 0x3644 <memcpy+0x6>
    364e:	08 95       	ret

00003650 <strcpy>:
    3650:	fb 01       	movw	r30, r22
    3652:	dc 01       	movw	r26, r24
    3654:	01 90       	ld	r0, Z+
    3656:	0d 92       	st	X+, r0
    3658:	00 20       	and	r0, r0
    365a:	e1 f7       	brne	.-8      	; 0x3654 <strcpy+0x4>
    365c:	08 95       	ret

0000365e <sprintf>:
    365e:	0f 93       	push	r16
    3660:	1f 93       	push	r17
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	2e 97       	sbiw	r28, 0x0e	; 14
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	f8 94       	cli
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	0f be       	out	0x3f, r0	; 63
    3674:	cd bf       	out	0x3d, r28	; 61
    3676:	0e 89       	ldd	r16, Y+22	; 0x16
    3678:	1f 89       	ldd	r17, Y+23	; 0x17
    367a:	86 e0       	ldi	r24, 0x06	; 6
    367c:	8c 83       	std	Y+4, r24	; 0x04
    367e:	1a 83       	std	Y+2, r17	; 0x02
    3680:	09 83       	std	Y+1, r16	; 0x01
    3682:	8f ef       	ldi	r24, 0xFF	; 255
    3684:	9f e7       	ldi	r25, 0x7F	; 127
    3686:	9e 83       	std	Y+6, r25	; 0x06
    3688:	8d 83       	std	Y+5, r24	; 0x05
    368a:	ae 01       	movw	r20, r28
    368c:	46 5e       	subi	r20, 0xE6	; 230
    368e:	5f 4f       	sbci	r21, 0xFF	; 255
    3690:	68 8d       	ldd	r22, Y+24	; 0x18
    3692:	79 8d       	ldd	r23, Y+25	; 0x19
    3694:	ce 01       	movw	r24, r28
    3696:	01 96       	adiw	r24, 0x01	; 1
    3698:	10 d0       	rcall	.+32     	; 0x36ba <vfprintf>
    369a:	ef 81       	ldd	r30, Y+7	; 0x07
    369c:	f8 85       	ldd	r31, Y+8	; 0x08
    369e:	e0 0f       	add	r30, r16
    36a0:	f1 1f       	adc	r31, r17
    36a2:	10 82       	st	Z, r1
    36a4:	2e 96       	adiw	r28, 0x0e	; 14
    36a6:	0f b6       	in	r0, 0x3f	; 63
    36a8:	f8 94       	cli
    36aa:	de bf       	out	0x3e, r29	; 62
    36ac:	0f be       	out	0x3f, r0	; 63
    36ae:	cd bf       	out	0x3d, r28	; 61
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	1f 91       	pop	r17
    36b6:	0f 91       	pop	r16
    36b8:	08 95       	ret

000036ba <vfprintf>:
    36ba:	2f 92       	push	r2
    36bc:	3f 92       	push	r3
    36be:	4f 92       	push	r4
    36c0:	5f 92       	push	r5
    36c2:	6f 92       	push	r6
    36c4:	7f 92       	push	r7
    36c6:	8f 92       	push	r8
    36c8:	9f 92       	push	r9
    36ca:	af 92       	push	r10
    36cc:	bf 92       	push	r11
    36ce:	cf 92       	push	r12
    36d0:	df 92       	push	r13
    36d2:	ef 92       	push	r14
    36d4:	ff 92       	push	r15
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	2b 97       	sbiw	r28, 0x0b	; 11
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	6c 01       	movw	r12, r24
    36f0:	7b 01       	movw	r14, r22
    36f2:	8a 01       	movw	r16, r20
    36f4:	fc 01       	movw	r30, r24
    36f6:	17 82       	std	Z+7, r1	; 0x07
    36f8:	16 82       	std	Z+6, r1	; 0x06
    36fa:	83 81       	ldd	r24, Z+3	; 0x03
    36fc:	81 ff       	sbrs	r24, 1
    36fe:	bf c1       	rjmp	.+894    	; 0x3a7e <vfprintf+0x3c4>
    3700:	ce 01       	movw	r24, r28
    3702:	01 96       	adiw	r24, 0x01	; 1
    3704:	3c 01       	movw	r6, r24
    3706:	f6 01       	movw	r30, r12
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	f7 01       	movw	r30, r14
    370c:	93 fd       	sbrc	r25, 3
    370e:	85 91       	lpm	r24, Z+
    3710:	93 ff       	sbrs	r25, 3
    3712:	81 91       	ld	r24, Z+
    3714:	7f 01       	movw	r14, r30
    3716:	88 23       	and	r24, r24
    3718:	09 f4       	brne	.+2      	; 0x371c <vfprintf+0x62>
    371a:	ad c1       	rjmp	.+858    	; 0x3a76 <vfprintf+0x3bc>
    371c:	85 32       	cpi	r24, 0x25	; 37
    371e:	39 f4       	brne	.+14     	; 0x372e <vfprintf+0x74>
    3720:	93 fd       	sbrc	r25, 3
    3722:	85 91       	lpm	r24, Z+
    3724:	93 ff       	sbrs	r25, 3
    3726:	81 91       	ld	r24, Z+
    3728:	7f 01       	movw	r14, r30
    372a:	85 32       	cpi	r24, 0x25	; 37
    372c:	21 f4       	brne	.+8      	; 0x3736 <vfprintf+0x7c>
    372e:	b6 01       	movw	r22, r12
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	d6 d1       	rcall	.+940    	; 0x3ae0 <fputc>
    3734:	e8 cf       	rjmp	.-48     	; 0x3706 <vfprintf+0x4c>
    3736:	91 2c       	mov	r9, r1
    3738:	21 2c       	mov	r2, r1
    373a:	31 2c       	mov	r3, r1
    373c:	ff e1       	ldi	r31, 0x1F	; 31
    373e:	f3 15       	cp	r31, r3
    3740:	d8 f0       	brcs	.+54     	; 0x3778 <vfprintf+0xbe>
    3742:	8b 32       	cpi	r24, 0x2B	; 43
    3744:	79 f0       	breq	.+30     	; 0x3764 <vfprintf+0xaa>
    3746:	38 f4       	brcc	.+14     	; 0x3756 <vfprintf+0x9c>
    3748:	80 32       	cpi	r24, 0x20	; 32
    374a:	79 f0       	breq	.+30     	; 0x376a <vfprintf+0xb0>
    374c:	83 32       	cpi	r24, 0x23	; 35
    374e:	a1 f4       	brne	.+40     	; 0x3778 <vfprintf+0xbe>
    3750:	23 2d       	mov	r18, r3
    3752:	20 61       	ori	r18, 0x10	; 16
    3754:	1d c0       	rjmp	.+58     	; 0x3790 <vfprintf+0xd6>
    3756:	8d 32       	cpi	r24, 0x2D	; 45
    3758:	61 f0       	breq	.+24     	; 0x3772 <vfprintf+0xb8>
    375a:	80 33       	cpi	r24, 0x30	; 48
    375c:	69 f4       	brne	.+26     	; 0x3778 <vfprintf+0xbe>
    375e:	23 2d       	mov	r18, r3
    3760:	21 60       	ori	r18, 0x01	; 1
    3762:	16 c0       	rjmp	.+44     	; 0x3790 <vfprintf+0xd6>
    3764:	83 2d       	mov	r24, r3
    3766:	82 60       	ori	r24, 0x02	; 2
    3768:	38 2e       	mov	r3, r24
    376a:	e3 2d       	mov	r30, r3
    376c:	e4 60       	ori	r30, 0x04	; 4
    376e:	3e 2e       	mov	r3, r30
    3770:	2a c0       	rjmp	.+84     	; 0x37c6 <vfprintf+0x10c>
    3772:	f3 2d       	mov	r31, r3
    3774:	f8 60       	ori	r31, 0x08	; 8
    3776:	1d c0       	rjmp	.+58     	; 0x37b2 <vfprintf+0xf8>
    3778:	37 fc       	sbrc	r3, 7
    377a:	2d c0       	rjmp	.+90     	; 0x37d6 <vfprintf+0x11c>
    377c:	20 ed       	ldi	r18, 0xD0	; 208
    377e:	28 0f       	add	r18, r24
    3780:	2a 30       	cpi	r18, 0x0A	; 10
    3782:	40 f0       	brcs	.+16     	; 0x3794 <vfprintf+0xda>
    3784:	8e 32       	cpi	r24, 0x2E	; 46
    3786:	b9 f4       	brne	.+46     	; 0x37b6 <vfprintf+0xfc>
    3788:	36 fc       	sbrc	r3, 6
    378a:	75 c1       	rjmp	.+746    	; 0x3a76 <vfprintf+0x3bc>
    378c:	23 2d       	mov	r18, r3
    378e:	20 64       	ori	r18, 0x40	; 64
    3790:	32 2e       	mov	r3, r18
    3792:	19 c0       	rjmp	.+50     	; 0x37c6 <vfprintf+0x10c>
    3794:	36 fe       	sbrs	r3, 6
    3796:	06 c0       	rjmp	.+12     	; 0x37a4 <vfprintf+0xea>
    3798:	8a e0       	ldi	r24, 0x0A	; 10
    379a:	98 9e       	mul	r9, r24
    379c:	20 0d       	add	r18, r0
    379e:	11 24       	eor	r1, r1
    37a0:	92 2e       	mov	r9, r18
    37a2:	11 c0       	rjmp	.+34     	; 0x37c6 <vfprintf+0x10c>
    37a4:	ea e0       	ldi	r30, 0x0A	; 10
    37a6:	2e 9e       	mul	r2, r30
    37a8:	20 0d       	add	r18, r0
    37aa:	11 24       	eor	r1, r1
    37ac:	22 2e       	mov	r2, r18
    37ae:	f3 2d       	mov	r31, r3
    37b0:	f0 62       	ori	r31, 0x20	; 32
    37b2:	3f 2e       	mov	r3, r31
    37b4:	08 c0       	rjmp	.+16     	; 0x37c6 <vfprintf+0x10c>
    37b6:	8c 36       	cpi	r24, 0x6C	; 108
    37b8:	21 f4       	brne	.+8      	; 0x37c2 <vfprintf+0x108>
    37ba:	83 2d       	mov	r24, r3
    37bc:	80 68       	ori	r24, 0x80	; 128
    37be:	38 2e       	mov	r3, r24
    37c0:	02 c0       	rjmp	.+4      	; 0x37c6 <vfprintf+0x10c>
    37c2:	88 36       	cpi	r24, 0x68	; 104
    37c4:	41 f4       	brne	.+16     	; 0x37d6 <vfprintf+0x11c>
    37c6:	f7 01       	movw	r30, r14
    37c8:	93 fd       	sbrc	r25, 3
    37ca:	85 91       	lpm	r24, Z+
    37cc:	93 ff       	sbrs	r25, 3
    37ce:	81 91       	ld	r24, Z+
    37d0:	7f 01       	movw	r14, r30
    37d2:	81 11       	cpse	r24, r1
    37d4:	b3 cf       	rjmp	.-154    	; 0x373c <vfprintf+0x82>
    37d6:	98 2f       	mov	r25, r24
    37d8:	9f 7d       	andi	r25, 0xDF	; 223
    37da:	95 54       	subi	r25, 0x45	; 69
    37dc:	93 30       	cpi	r25, 0x03	; 3
    37de:	28 f4       	brcc	.+10     	; 0x37ea <vfprintf+0x130>
    37e0:	0c 5f       	subi	r16, 0xFC	; 252
    37e2:	1f 4f       	sbci	r17, 0xFF	; 255
    37e4:	9f e3       	ldi	r25, 0x3F	; 63
    37e6:	99 83       	std	Y+1, r25	; 0x01
    37e8:	0d c0       	rjmp	.+26     	; 0x3804 <vfprintf+0x14a>
    37ea:	83 36       	cpi	r24, 0x63	; 99
    37ec:	31 f0       	breq	.+12     	; 0x37fa <vfprintf+0x140>
    37ee:	83 37       	cpi	r24, 0x73	; 115
    37f0:	71 f0       	breq	.+28     	; 0x380e <vfprintf+0x154>
    37f2:	83 35       	cpi	r24, 0x53	; 83
    37f4:	09 f0       	breq	.+2      	; 0x37f8 <vfprintf+0x13e>
    37f6:	55 c0       	rjmp	.+170    	; 0x38a2 <vfprintf+0x1e8>
    37f8:	20 c0       	rjmp	.+64     	; 0x383a <vfprintf+0x180>
    37fa:	f8 01       	movw	r30, r16
    37fc:	80 81       	ld	r24, Z
    37fe:	89 83       	std	Y+1, r24	; 0x01
    3800:	0e 5f       	subi	r16, 0xFE	; 254
    3802:	1f 4f       	sbci	r17, 0xFF	; 255
    3804:	88 24       	eor	r8, r8
    3806:	83 94       	inc	r8
    3808:	91 2c       	mov	r9, r1
    380a:	53 01       	movw	r10, r6
    380c:	12 c0       	rjmp	.+36     	; 0x3832 <vfprintf+0x178>
    380e:	28 01       	movw	r4, r16
    3810:	f2 e0       	ldi	r31, 0x02	; 2
    3812:	4f 0e       	add	r4, r31
    3814:	51 1c       	adc	r5, r1
    3816:	f8 01       	movw	r30, r16
    3818:	a0 80       	ld	r10, Z
    381a:	b1 80       	ldd	r11, Z+1	; 0x01
    381c:	36 fe       	sbrs	r3, 6
    381e:	03 c0       	rjmp	.+6      	; 0x3826 <vfprintf+0x16c>
    3820:	69 2d       	mov	r22, r9
    3822:	70 e0       	ldi	r23, 0x00	; 0
    3824:	02 c0       	rjmp	.+4      	; 0x382a <vfprintf+0x170>
    3826:	6f ef       	ldi	r22, 0xFF	; 255
    3828:	7f ef       	ldi	r23, 0xFF	; 255
    382a:	c5 01       	movw	r24, r10
    382c:	4e d1       	rcall	.+668    	; 0x3aca <strnlen>
    382e:	4c 01       	movw	r8, r24
    3830:	82 01       	movw	r16, r4
    3832:	f3 2d       	mov	r31, r3
    3834:	ff 77       	andi	r31, 0x7F	; 127
    3836:	3f 2e       	mov	r3, r31
    3838:	15 c0       	rjmp	.+42     	; 0x3864 <vfprintf+0x1aa>
    383a:	28 01       	movw	r4, r16
    383c:	22 e0       	ldi	r18, 0x02	; 2
    383e:	42 0e       	add	r4, r18
    3840:	51 1c       	adc	r5, r1
    3842:	f8 01       	movw	r30, r16
    3844:	a0 80       	ld	r10, Z
    3846:	b1 80       	ldd	r11, Z+1	; 0x01
    3848:	36 fe       	sbrs	r3, 6
    384a:	03 c0       	rjmp	.+6      	; 0x3852 <vfprintf+0x198>
    384c:	69 2d       	mov	r22, r9
    384e:	70 e0       	ldi	r23, 0x00	; 0
    3850:	02 c0       	rjmp	.+4      	; 0x3856 <vfprintf+0x19c>
    3852:	6f ef       	ldi	r22, 0xFF	; 255
    3854:	7f ef       	ldi	r23, 0xFF	; 255
    3856:	c5 01       	movw	r24, r10
    3858:	2d d1       	rcall	.+602    	; 0x3ab4 <strnlen_P>
    385a:	4c 01       	movw	r8, r24
    385c:	f3 2d       	mov	r31, r3
    385e:	f0 68       	ori	r31, 0x80	; 128
    3860:	3f 2e       	mov	r3, r31
    3862:	82 01       	movw	r16, r4
    3864:	33 fc       	sbrc	r3, 3
    3866:	19 c0       	rjmp	.+50     	; 0x389a <vfprintf+0x1e0>
    3868:	82 2d       	mov	r24, r2
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	88 16       	cp	r8, r24
    386e:	99 06       	cpc	r9, r25
    3870:	a0 f4       	brcc	.+40     	; 0x389a <vfprintf+0x1e0>
    3872:	b6 01       	movw	r22, r12
    3874:	80 e2       	ldi	r24, 0x20	; 32
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	33 d1       	rcall	.+614    	; 0x3ae0 <fputc>
    387a:	2a 94       	dec	r2
    387c:	f5 cf       	rjmp	.-22     	; 0x3868 <vfprintf+0x1ae>
    387e:	f5 01       	movw	r30, r10
    3880:	37 fc       	sbrc	r3, 7
    3882:	85 91       	lpm	r24, Z+
    3884:	37 fe       	sbrs	r3, 7
    3886:	81 91       	ld	r24, Z+
    3888:	5f 01       	movw	r10, r30
    388a:	b6 01       	movw	r22, r12
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	28 d1       	rcall	.+592    	; 0x3ae0 <fputc>
    3890:	21 10       	cpse	r2, r1
    3892:	2a 94       	dec	r2
    3894:	21 e0       	ldi	r18, 0x01	; 1
    3896:	82 1a       	sub	r8, r18
    3898:	91 08       	sbc	r9, r1
    389a:	81 14       	cp	r8, r1
    389c:	91 04       	cpc	r9, r1
    389e:	79 f7       	brne	.-34     	; 0x387e <vfprintf+0x1c4>
    38a0:	e1 c0       	rjmp	.+450    	; 0x3a64 <vfprintf+0x3aa>
    38a2:	84 36       	cpi	r24, 0x64	; 100
    38a4:	11 f0       	breq	.+4      	; 0x38aa <vfprintf+0x1f0>
    38a6:	89 36       	cpi	r24, 0x69	; 105
    38a8:	39 f5       	brne	.+78     	; 0x38f8 <vfprintf+0x23e>
    38aa:	f8 01       	movw	r30, r16
    38ac:	37 fe       	sbrs	r3, 7
    38ae:	07 c0       	rjmp	.+14     	; 0x38be <vfprintf+0x204>
    38b0:	60 81       	ld	r22, Z
    38b2:	71 81       	ldd	r23, Z+1	; 0x01
    38b4:	82 81       	ldd	r24, Z+2	; 0x02
    38b6:	93 81       	ldd	r25, Z+3	; 0x03
    38b8:	0c 5f       	subi	r16, 0xFC	; 252
    38ba:	1f 4f       	sbci	r17, 0xFF	; 255
    38bc:	08 c0       	rjmp	.+16     	; 0x38ce <vfprintf+0x214>
    38be:	60 81       	ld	r22, Z
    38c0:	71 81       	ldd	r23, Z+1	; 0x01
    38c2:	07 2e       	mov	r0, r23
    38c4:	00 0c       	add	r0, r0
    38c6:	88 0b       	sbc	r24, r24
    38c8:	99 0b       	sbc	r25, r25
    38ca:	0e 5f       	subi	r16, 0xFE	; 254
    38cc:	1f 4f       	sbci	r17, 0xFF	; 255
    38ce:	f3 2d       	mov	r31, r3
    38d0:	ff 76       	andi	r31, 0x6F	; 111
    38d2:	3f 2e       	mov	r3, r31
    38d4:	97 ff       	sbrs	r25, 7
    38d6:	09 c0       	rjmp	.+18     	; 0x38ea <vfprintf+0x230>
    38d8:	90 95       	com	r25
    38da:	80 95       	com	r24
    38dc:	70 95       	com	r23
    38de:	61 95       	neg	r22
    38e0:	7f 4f       	sbci	r23, 0xFF	; 255
    38e2:	8f 4f       	sbci	r24, 0xFF	; 255
    38e4:	9f 4f       	sbci	r25, 0xFF	; 255
    38e6:	f0 68       	ori	r31, 0x80	; 128
    38e8:	3f 2e       	mov	r3, r31
    38ea:	2a e0       	ldi	r18, 0x0A	; 10
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	a3 01       	movw	r20, r6
    38f0:	33 d1       	rcall	.+614    	; 0x3b58 <__ultoa_invert>
    38f2:	88 2e       	mov	r8, r24
    38f4:	86 18       	sub	r8, r6
    38f6:	44 c0       	rjmp	.+136    	; 0x3980 <vfprintf+0x2c6>
    38f8:	85 37       	cpi	r24, 0x75	; 117
    38fa:	31 f4       	brne	.+12     	; 0x3908 <vfprintf+0x24e>
    38fc:	23 2d       	mov	r18, r3
    38fe:	2f 7e       	andi	r18, 0xEF	; 239
    3900:	b2 2e       	mov	r11, r18
    3902:	2a e0       	ldi	r18, 0x0A	; 10
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	25 c0       	rjmp	.+74     	; 0x3952 <vfprintf+0x298>
    3908:	93 2d       	mov	r25, r3
    390a:	99 7f       	andi	r25, 0xF9	; 249
    390c:	b9 2e       	mov	r11, r25
    390e:	8f 36       	cpi	r24, 0x6F	; 111
    3910:	c1 f0       	breq	.+48     	; 0x3942 <vfprintf+0x288>
    3912:	18 f4       	brcc	.+6      	; 0x391a <vfprintf+0x260>
    3914:	88 35       	cpi	r24, 0x58	; 88
    3916:	79 f0       	breq	.+30     	; 0x3936 <vfprintf+0x27c>
    3918:	ae c0       	rjmp	.+348    	; 0x3a76 <vfprintf+0x3bc>
    391a:	80 37       	cpi	r24, 0x70	; 112
    391c:	19 f0       	breq	.+6      	; 0x3924 <vfprintf+0x26a>
    391e:	88 37       	cpi	r24, 0x78	; 120
    3920:	21 f0       	breq	.+8      	; 0x392a <vfprintf+0x270>
    3922:	a9 c0       	rjmp	.+338    	; 0x3a76 <vfprintf+0x3bc>
    3924:	e9 2f       	mov	r30, r25
    3926:	e0 61       	ori	r30, 0x10	; 16
    3928:	be 2e       	mov	r11, r30
    392a:	b4 fe       	sbrs	r11, 4
    392c:	0d c0       	rjmp	.+26     	; 0x3948 <vfprintf+0x28e>
    392e:	fb 2d       	mov	r31, r11
    3930:	f4 60       	ori	r31, 0x04	; 4
    3932:	bf 2e       	mov	r11, r31
    3934:	09 c0       	rjmp	.+18     	; 0x3948 <vfprintf+0x28e>
    3936:	34 fe       	sbrs	r3, 4
    3938:	0a c0       	rjmp	.+20     	; 0x394e <vfprintf+0x294>
    393a:	29 2f       	mov	r18, r25
    393c:	26 60       	ori	r18, 0x06	; 6
    393e:	b2 2e       	mov	r11, r18
    3940:	06 c0       	rjmp	.+12     	; 0x394e <vfprintf+0x294>
    3942:	28 e0       	ldi	r18, 0x08	; 8
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	05 c0       	rjmp	.+10     	; 0x3952 <vfprintf+0x298>
    3948:	20 e1       	ldi	r18, 0x10	; 16
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <vfprintf+0x298>
    394e:	20 e1       	ldi	r18, 0x10	; 16
    3950:	32 e0       	ldi	r19, 0x02	; 2
    3952:	f8 01       	movw	r30, r16
    3954:	b7 fe       	sbrs	r11, 7
    3956:	07 c0       	rjmp	.+14     	; 0x3966 <vfprintf+0x2ac>
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	82 81       	ldd	r24, Z+2	; 0x02
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	0c 5f       	subi	r16, 0xFC	; 252
    3962:	1f 4f       	sbci	r17, 0xFF	; 255
    3964:	06 c0       	rjmp	.+12     	; 0x3972 <vfprintf+0x2b8>
    3966:	60 81       	ld	r22, Z
    3968:	71 81       	ldd	r23, Z+1	; 0x01
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	0e 5f       	subi	r16, 0xFE	; 254
    3970:	1f 4f       	sbci	r17, 0xFF	; 255
    3972:	a3 01       	movw	r20, r6
    3974:	f1 d0       	rcall	.+482    	; 0x3b58 <__ultoa_invert>
    3976:	88 2e       	mov	r8, r24
    3978:	86 18       	sub	r8, r6
    397a:	fb 2d       	mov	r31, r11
    397c:	ff 77       	andi	r31, 0x7F	; 127
    397e:	3f 2e       	mov	r3, r31
    3980:	36 fe       	sbrs	r3, 6
    3982:	0d c0       	rjmp	.+26     	; 0x399e <vfprintf+0x2e4>
    3984:	23 2d       	mov	r18, r3
    3986:	2e 7f       	andi	r18, 0xFE	; 254
    3988:	a2 2e       	mov	r10, r18
    398a:	89 14       	cp	r8, r9
    398c:	58 f4       	brcc	.+22     	; 0x39a4 <vfprintf+0x2ea>
    398e:	34 fe       	sbrs	r3, 4
    3990:	0b c0       	rjmp	.+22     	; 0x39a8 <vfprintf+0x2ee>
    3992:	32 fc       	sbrc	r3, 2
    3994:	09 c0       	rjmp	.+18     	; 0x39a8 <vfprintf+0x2ee>
    3996:	83 2d       	mov	r24, r3
    3998:	8e 7e       	andi	r24, 0xEE	; 238
    399a:	a8 2e       	mov	r10, r24
    399c:	05 c0       	rjmp	.+10     	; 0x39a8 <vfprintf+0x2ee>
    399e:	b8 2c       	mov	r11, r8
    39a0:	a3 2c       	mov	r10, r3
    39a2:	03 c0       	rjmp	.+6      	; 0x39aa <vfprintf+0x2f0>
    39a4:	b8 2c       	mov	r11, r8
    39a6:	01 c0       	rjmp	.+2      	; 0x39aa <vfprintf+0x2f0>
    39a8:	b9 2c       	mov	r11, r9
    39aa:	a4 fe       	sbrs	r10, 4
    39ac:	0f c0       	rjmp	.+30     	; 0x39cc <vfprintf+0x312>
    39ae:	fe 01       	movw	r30, r28
    39b0:	e8 0d       	add	r30, r8
    39b2:	f1 1d       	adc	r31, r1
    39b4:	80 81       	ld	r24, Z
    39b6:	80 33       	cpi	r24, 0x30	; 48
    39b8:	21 f4       	brne	.+8      	; 0x39c2 <vfprintf+0x308>
    39ba:	9a 2d       	mov	r25, r10
    39bc:	99 7e       	andi	r25, 0xE9	; 233
    39be:	a9 2e       	mov	r10, r25
    39c0:	09 c0       	rjmp	.+18     	; 0x39d4 <vfprintf+0x31a>
    39c2:	a2 fe       	sbrs	r10, 2
    39c4:	06 c0       	rjmp	.+12     	; 0x39d2 <vfprintf+0x318>
    39c6:	b3 94       	inc	r11
    39c8:	b3 94       	inc	r11
    39ca:	04 c0       	rjmp	.+8      	; 0x39d4 <vfprintf+0x31a>
    39cc:	8a 2d       	mov	r24, r10
    39ce:	86 78       	andi	r24, 0x86	; 134
    39d0:	09 f0       	breq	.+2      	; 0x39d4 <vfprintf+0x31a>
    39d2:	b3 94       	inc	r11
    39d4:	a3 fc       	sbrc	r10, 3
    39d6:	10 c0       	rjmp	.+32     	; 0x39f8 <vfprintf+0x33e>
    39d8:	a0 fe       	sbrs	r10, 0
    39da:	06 c0       	rjmp	.+12     	; 0x39e8 <vfprintf+0x32e>
    39dc:	b2 14       	cp	r11, r2
    39de:	80 f4       	brcc	.+32     	; 0x3a00 <vfprintf+0x346>
    39e0:	28 0c       	add	r2, r8
    39e2:	92 2c       	mov	r9, r2
    39e4:	9b 18       	sub	r9, r11
    39e6:	0d c0       	rjmp	.+26     	; 0x3a02 <vfprintf+0x348>
    39e8:	b2 14       	cp	r11, r2
    39ea:	58 f4       	brcc	.+22     	; 0x3a02 <vfprintf+0x348>
    39ec:	b6 01       	movw	r22, r12
    39ee:	80 e2       	ldi	r24, 0x20	; 32
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	76 d0       	rcall	.+236    	; 0x3ae0 <fputc>
    39f4:	b3 94       	inc	r11
    39f6:	f8 cf       	rjmp	.-16     	; 0x39e8 <vfprintf+0x32e>
    39f8:	b2 14       	cp	r11, r2
    39fa:	18 f4       	brcc	.+6      	; 0x3a02 <vfprintf+0x348>
    39fc:	2b 18       	sub	r2, r11
    39fe:	02 c0       	rjmp	.+4      	; 0x3a04 <vfprintf+0x34a>
    3a00:	98 2c       	mov	r9, r8
    3a02:	21 2c       	mov	r2, r1
    3a04:	a4 fe       	sbrs	r10, 4
    3a06:	0f c0       	rjmp	.+30     	; 0x3a26 <vfprintf+0x36c>
    3a08:	b6 01       	movw	r22, r12
    3a0a:	80 e3       	ldi	r24, 0x30	; 48
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	68 d0       	rcall	.+208    	; 0x3ae0 <fputc>
    3a10:	a2 fe       	sbrs	r10, 2
    3a12:	16 c0       	rjmp	.+44     	; 0x3a40 <vfprintf+0x386>
    3a14:	a1 fc       	sbrc	r10, 1
    3a16:	03 c0       	rjmp	.+6      	; 0x3a1e <vfprintf+0x364>
    3a18:	88 e7       	ldi	r24, 0x78	; 120
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	02 c0       	rjmp	.+4      	; 0x3a22 <vfprintf+0x368>
    3a1e:	88 e5       	ldi	r24, 0x58	; 88
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	b6 01       	movw	r22, r12
    3a24:	0c c0       	rjmp	.+24     	; 0x3a3e <vfprintf+0x384>
    3a26:	8a 2d       	mov	r24, r10
    3a28:	86 78       	andi	r24, 0x86	; 134
    3a2a:	51 f0       	breq	.+20     	; 0x3a40 <vfprintf+0x386>
    3a2c:	a1 fe       	sbrs	r10, 1
    3a2e:	02 c0       	rjmp	.+4      	; 0x3a34 <vfprintf+0x37a>
    3a30:	8b e2       	ldi	r24, 0x2B	; 43
    3a32:	01 c0       	rjmp	.+2      	; 0x3a36 <vfprintf+0x37c>
    3a34:	80 e2       	ldi	r24, 0x20	; 32
    3a36:	a7 fc       	sbrc	r10, 7
    3a38:	8d e2       	ldi	r24, 0x2D	; 45
    3a3a:	b6 01       	movw	r22, r12
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	50 d0       	rcall	.+160    	; 0x3ae0 <fputc>
    3a40:	89 14       	cp	r8, r9
    3a42:	30 f4       	brcc	.+12     	; 0x3a50 <vfprintf+0x396>
    3a44:	b6 01       	movw	r22, r12
    3a46:	80 e3       	ldi	r24, 0x30	; 48
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	4a d0       	rcall	.+148    	; 0x3ae0 <fputc>
    3a4c:	9a 94       	dec	r9
    3a4e:	f8 cf       	rjmp	.-16     	; 0x3a40 <vfprintf+0x386>
    3a50:	8a 94       	dec	r8
    3a52:	f3 01       	movw	r30, r6
    3a54:	e8 0d       	add	r30, r8
    3a56:	f1 1d       	adc	r31, r1
    3a58:	80 81       	ld	r24, Z
    3a5a:	b6 01       	movw	r22, r12
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	40 d0       	rcall	.+128    	; 0x3ae0 <fputc>
    3a60:	81 10       	cpse	r8, r1
    3a62:	f6 cf       	rjmp	.-20     	; 0x3a50 <vfprintf+0x396>
    3a64:	22 20       	and	r2, r2
    3a66:	09 f4       	brne	.+2      	; 0x3a6a <vfprintf+0x3b0>
    3a68:	4e ce       	rjmp	.-868    	; 0x3706 <vfprintf+0x4c>
    3a6a:	b6 01       	movw	r22, r12
    3a6c:	80 e2       	ldi	r24, 0x20	; 32
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	37 d0       	rcall	.+110    	; 0x3ae0 <fputc>
    3a72:	2a 94       	dec	r2
    3a74:	f7 cf       	rjmp	.-18     	; 0x3a64 <vfprintf+0x3aa>
    3a76:	f6 01       	movw	r30, r12
    3a78:	86 81       	ldd	r24, Z+6	; 0x06
    3a7a:	97 81       	ldd	r25, Z+7	; 0x07
    3a7c:	02 c0       	rjmp	.+4      	; 0x3a82 <vfprintf+0x3c8>
    3a7e:	8f ef       	ldi	r24, 0xFF	; 255
    3a80:	9f ef       	ldi	r25, 0xFF	; 255
    3a82:	2b 96       	adiw	r28, 0x0b	; 11
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	f8 94       	cli
    3a88:	de bf       	out	0x3e, r29	; 62
    3a8a:	0f be       	out	0x3f, r0	; 63
    3a8c:	cd bf       	out	0x3d, r28	; 61
    3a8e:	df 91       	pop	r29
    3a90:	cf 91       	pop	r28
    3a92:	1f 91       	pop	r17
    3a94:	0f 91       	pop	r16
    3a96:	ff 90       	pop	r15
    3a98:	ef 90       	pop	r14
    3a9a:	df 90       	pop	r13
    3a9c:	cf 90       	pop	r12
    3a9e:	bf 90       	pop	r11
    3aa0:	af 90       	pop	r10
    3aa2:	9f 90       	pop	r9
    3aa4:	8f 90       	pop	r8
    3aa6:	7f 90       	pop	r7
    3aa8:	6f 90       	pop	r6
    3aaa:	5f 90       	pop	r5
    3aac:	4f 90       	pop	r4
    3aae:	3f 90       	pop	r3
    3ab0:	2f 90       	pop	r2
    3ab2:	08 95       	ret

00003ab4 <strnlen_P>:
    3ab4:	fc 01       	movw	r30, r24
    3ab6:	05 90       	lpm	r0, Z+
    3ab8:	61 50       	subi	r22, 0x01	; 1
    3aba:	70 40       	sbci	r23, 0x00	; 0
    3abc:	01 10       	cpse	r0, r1
    3abe:	d8 f7       	brcc	.-10     	; 0x3ab6 <strnlen_P+0x2>
    3ac0:	80 95       	com	r24
    3ac2:	90 95       	com	r25
    3ac4:	8e 0f       	add	r24, r30
    3ac6:	9f 1f       	adc	r25, r31
    3ac8:	08 95       	ret

00003aca <strnlen>:
    3aca:	fc 01       	movw	r30, r24
    3acc:	61 50       	subi	r22, 0x01	; 1
    3ace:	70 40       	sbci	r23, 0x00	; 0
    3ad0:	01 90       	ld	r0, Z+
    3ad2:	01 10       	cpse	r0, r1
    3ad4:	d8 f7       	brcc	.-10     	; 0x3acc <strnlen+0x2>
    3ad6:	80 95       	com	r24
    3ad8:	90 95       	com	r25
    3ada:	8e 0f       	add	r24, r30
    3adc:	9f 1f       	adc	r25, r31
    3ade:	08 95       	ret

00003ae0 <fputc>:
    3ae0:	0f 93       	push	r16
    3ae2:	1f 93       	push	r17
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
    3ae8:	fb 01       	movw	r30, r22
    3aea:	23 81       	ldd	r18, Z+3	; 0x03
    3aec:	21 fd       	sbrc	r18, 1
    3aee:	03 c0       	rjmp	.+6      	; 0x3af6 <fputc+0x16>
    3af0:	8f ef       	ldi	r24, 0xFF	; 255
    3af2:	9f ef       	ldi	r25, 0xFF	; 255
    3af4:	2c c0       	rjmp	.+88     	; 0x3b4e <fputc+0x6e>
    3af6:	22 ff       	sbrs	r18, 2
    3af8:	16 c0       	rjmp	.+44     	; 0x3b26 <fputc+0x46>
    3afa:	46 81       	ldd	r20, Z+6	; 0x06
    3afc:	57 81       	ldd	r21, Z+7	; 0x07
    3afe:	24 81       	ldd	r18, Z+4	; 0x04
    3b00:	35 81       	ldd	r19, Z+5	; 0x05
    3b02:	42 17       	cp	r20, r18
    3b04:	53 07       	cpc	r21, r19
    3b06:	44 f4       	brge	.+16     	; 0x3b18 <fputc+0x38>
    3b08:	a0 81       	ld	r26, Z
    3b0a:	b1 81       	ldd	r27, Z+1	; 0x01
    3b0c:	9d 01       	movw	r18, r26
    3b0e:	2f 5f       	subi	r18, 0xFF	; 255
    3b10:	3f 4f       	sbci	r19, 0xFF	; 255
    3b12:	31 83       	std	Z+1, r19	; 0x01
    3b14:	20 83       	st	Z, r18
    3b16:	8c 93       	st	X, r24
    3b18:	26 81       	ldd	r18, Z+6	; 0x06
    3b1a:	37 81       	ldd	r19, Z+7	; 0x07
    3b1c:	2f 5f       	subi	r18, 0xFF	; 255
    3b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b20:	37 83       	std	Z+7, r19	; 0x07
    3b22:	26 83       	std	Z+6, r18	; 0x06
    3b24:	14 c0       	rjmp	.+40     	; 0x3b4e <fputc+0x6e>
    3b26:	8b 01       	movw	r16, r22
    3b28:	ec 01       	movw	r28, r24
    3b2a:	fb 01       	movw	r30, r22
    3b2c:	00 84       	ldd	r0, Z+8	; 0x08
    3b2e:	f1 85       	ldd	r31, Z+9	; 0x09
    3b30:	e0 2d       	mov	r30, r0
    3b32:	19 95       	eicall
    3b34:	89 2b       	or	r24, r25
    3b36:	e1 f6       	brne	.-72     	; 0x3af0 <fputc+0x10>
    3b38:	d8 01       	movw	r26, r16
    3b3a:	16 96       	adiw	r26, 0x06	; 6
    3b3c:	8d 91       	ld	r24, X+
    3b3e:	9c 91       	ld	r25, X
    3b40:	17 97       	sbiw	r26, 0x07	; 7
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	17 96       	adiw	r26, 0x07	; 7
    3b46:	9c 93       	st	X, r25
    3b48:	8e 93       	st	-X, r24
    3b4a:	16 97       	sbiw	r26, 0x06	; 6
    3b4c:	ce 01       	movw	r24, r28
    3b4e:	df 91       	pop	r29
    3b50:	cf 91       	pop	r28
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	08 95       	ret

00003b58 <__ultoa_invert>:
    3b58:	fa 01       	movw	r30, r20
    3b5a:	aa 27       	eor	r26, r26
    3b5c:	28 30       	cpi	r18, 0x08	; 8
    3b5e:	51 f1       	breq	.+84     	; 0x3bb4 <__ultoa_invert+0x5c>
    3b60:	20 31       	cpi	r18, 0x10	; 16
    3b62:	81 f1       	breq	.+96     	; 0x3bc4 <__ultoa_invert+0x6c>
    3b64:	e8 94       	clt
    3b66:	6f 93       	push	r22
    3b68:	6e 7f       	andi	r22, 0xFE	; 254
    3b6a:	6e 5f       	subi	r22, 0xFE	; 254
    3b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3b70:	9f 4f       	sbci	r25, 0xFF	; 255
    3b72:	af 4f       	sbci	r26, 0xFF	; 255
    3b74:	b1 e0       	ldi	r27, 0x01	; 1
    3b76:	3e d0       	rcall	.+124    	; 0x3bf4 <__ultoa_invert+0x9c>
    3b78:	b4 e0       	ldi	r27, 0x04	; 4
    3b7a:	3c d0       	rcall	.+120    	; 0x3bf4 <__ultoa_invert+0x9c>
    3b7c:	67 0f       	add	r22, r23
    3b7e:	78 1f       	adc	r23, r24
    3b80:	89 1f       	adc	r24, r25
    3b82:	9a 1f       	adc	r25, r26
    3b84:	a1 1d       	adc	r26, r1
    3b86:	68 0f       	add	r22, r24
    3b88:	79 1f       	adc	r23, r25
    3b8a:	8a 1f       	adc	r24, r26
    3b8c:	91 1d       	adc	r25, r1
    3b8e:	a1 1d       	adc	r26, r1
    3b90:	6a 0f       	add	r22, r26
    3b92:	71 1d       	adc	r23, r1
    3b94:	81 1d       	adc	r24, r1
    3b96:	91 1d       	adc	r25, r1
    3b98:	a1 1d       	adc	r26, r1
    3b9a:	20 d0       	rcall	.+64     	; 0x3bdc <__ultoa_invert+0x84>
    3b9c:	09 f4       	brne	.+2      	; 0x3ba0 <__ultoa_invert+0x48>
    3b9e:	68 94       	set
    3ba0:	3f 91       	pop	r19
    3ba2:	2a e0       	ldi	r18, 0x0A	; 10
    3ba4:	26 9f       	mul	r18, r22
    3ba6:	11 24       	eor	r1, r1
    3ba8:	30 19       	sub	r19, r0
    3baa:	30 5d       	subi	r19, 0xD0	; 208
    3bac:	31 93       	st	Z+, r19
    3bae:	de f6       	brtc	.-74     	; 0x3b66 <__ultoa_invert+0xe>
    3bb0:	cf 01       	movw	r24, r30
    3bb2:	08 95       	ret
    3bb4:	46 2f       	mov	r20, r22
    3bb6:	47 70       	andi	r20, 0x07	; 7
    3bb8:	40 5d       	subi	r20, 0xD0	; 208
    3bba:	41 93       	st	Z+, r20
    3bbc:	b3 e0       	ldi	r27, 0x03	; 3
    3bbe:	0f d0       	rcall	.+30     	; 0x3bde <__ultoa_invert+0x86>
    3bc0:	c9 f7       	brne	.-14     	; 0x3bb4 <__ultoa_invert+0x5c>
    3bc2:	f6 cf       	rjmp	.-20     	; 0x3bb0 <__ultoa_invert+0x58>
    3bc4:	46 2f       	mov	r20, r22
    3bc6:	4f 70       	andi	r20, 0x0F	; 15
    3bc8:	40 5d       	subi	r20, 0xD0	; 208
    3bca:	4a 33       	cpi	r20, 0x3A	; 58
    3bcc:	18 f0       	brcs	.+6      	; 0x3bd4 <__ultoa_invert+0x7c>
    3bce:	49 5d       	subi	r20, 0xD9	; 217
    3bd0:	31 fd       	sbrc	r19, 1
    3bd2:	40 52       	subi	r20, 0x20	; 32
    3bd4:	41 93       	st	Z+, r20
    3bd6:	02 d0       	rcall	.+4      	; 0x3bdc <__ultoa_invert+0x84>
    3bd8:	a9 f7       	brne	.-22     	; 0x3bc4 <__ultoa_invert+0x6c>
    3bda:	ea cf       	rjmp	.-44     	; 0x3bb0 <__ultoa_invert+0x58>
    3bdc:	b4 e0       	ldi	r27, 0x04	; 4
    3bde:	a6 95       	lsr	r26
    3be0:	97 95       	ror	r25
    3be2:	87 95       	ror	r24
    3be4:	77 95       	ror	r23
    3be6:	67 95       	ror	r22
    3be8:	ba 95       	dec	r27
    3bea:	c9 f7       	brne	.-14     	; 0x3bde <__ultoa_invert+0x86>
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	61 05       	cpc	r22, r1
    3bf0:	71 05       	cpc	r23, r1
    3bf2:	08 95       	ret
    3bf4:	9b 01       	movw	r18, r22
    3bf6:	ac 01       	movw	r20, r24
    3bf8:	0a 2e       	mov	r0, r26
    3bfa:	06 94       	lsr	r0
    3bfc:	57 95       	ror	r21
    3bfe:	47 95       	ror	r20
    3c00:	37 95       	ror	r19
    3c02:	27 95       	ror	r18
    3c04:	ba 95       	dec	r27
    3c06:	c9 f7       	brne	.-14     	; 0x3bfa <__ultoa_invert+0xa2>
    3c08:	62 0f       	add	r22, r18
    3c0a:	73 1f       	adc	r23, r19
    3c0c:	84 1f       	adc	r24, r20
    3c0e:	95 1f       	adc	r25, r21
    3c10:	a0 1d       	adc	r26, r0
    3c12:	08 95       	ret

00003c14 <_exit>:
    3c14:	f8 94       	cli

00003c16 <__stop_program>:
    3c16:	ff cf       	rjmp	.-2      	; 0x3c16 <__stop_program>
