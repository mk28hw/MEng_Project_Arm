
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001be  00800200  00003750  000037e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000265  008003be  008003be  000039a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c0  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015ea3  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000369b  00000000  00000000  0001a2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000500b  00000000  00000000  0001d93e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f3c  00000000  00000000  0002294c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d32  00000000  00000000  00024888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a556  00000000  00000000  000285ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000970  00000000  00000000  00032b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c3       	rjmp	.+1906   	; 0x798 <__vector_9>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__vector_25>
      68:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__vector_36>
      94:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__vector_9+0x1c8>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	9e 11       	cpse	r25, r14
     168:	a1 11       	cpse	r26, r1
     16a:	90 11       	cpse	r25, r0
     16c:	94 11       	cpse	r25, r4
     16e:	9a 11       	cpse	r25, r10
     170:	d8 11       	cpse	r29, r8
     172:	a5 11       	cpse	r26, r5
     174:	a9 11       	cpse	r26, r9
     176:	af 11       	cpse	r26, r15
     178:	b3 11       	cpse	r27, r3
     17a:	b7 11       	cpse	r27, r7
     17c:	bd 11       	cpse	r27, r13
     17e:	c1 11       	cpse	r28, r1
     180:	c5 11       	cpse	r28, r5
     182:	d8 11       	cpse	r29, r8
     184:	cb 11       	cpse	r28, r11
     186:	cf 11       	cpse	r28, r15
     188:	d3 11       	cpse	r29, r3

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
     290:	b5 02       	muls	r27, r21
     292:	85 0e       	add	r8, r21
     294:	1a 0f       	add	r17, r26
     296:	aa 14       	cp	r10, r10

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	e0 e5       	ldi	r30, 0x50	; 80
     2b0:	f7 e3       	ldi	r31, 0x37	; 55
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	ae 3b       	cpi	r26, 0xBE	; 190
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	26 e0       	ldi	r18, 0x06	; 6
     2c4:	ae eb       	ldi	r26, 0xBE	; 190
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	a3 32       	cpi	r26, 0x23	; 35
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__tablejump2__>
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <main>
     2f6:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	serialWriting = NO;
	RS485_RX_ON
}
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	8a 01       	movw	r16, r20
     33a:	d2 2e       	mov	r13, r18
     33c:	ad b6       	in	r10, 0x3d	; 61
     33e:	be b6       	in	r11, 0x3e	; 62
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	82 1b       	sub	r24, r18
     346:	91 09       	sbc	r25, r1
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	9e bf       	out	0x3e, r25	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	62 2f       	mov	r22, r18
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 cb 09 	call	0x1396	; 0x1396 <__floatunsisf>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <pow>
     372:	2b 01       	movw	r4, r22
     374:	3c 01       	movw	r6, r24
     376:	b8 01       	movw	r22, r16
     378:	01 2e       	mov	r0, r17
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 cd 09 	call	0x139a	; 0x139a <__floatsisf>
     384:	a3 01       	movw	r20, r6
     386:	92 01       	movw	r18, r4
     388:	d1 d7       	rcall	.+4002   	; 0x132c <__cmpsf2>
     38a:	87 fd       	sbrc	r24, 7
     38c:	09 c0       	rjmp	.+18     	; 0x3a0 <_Z8printLCDhhih+0x96>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	40 e8       	ldi	r20, 0x80	; 128
     394:	5f e3       	ldi	r21, 0x3F	; 63
     396:	c3 01       	movw	r24, r6
     398:	b2 01       	movw	r22, r4
     39a:	63 d7       	rcall	.+3782   	; 0x1262 <__subsf3>
     39c:	cb d7       	rcall	.+3990   	; 0x1334 <__fixsfsi>
     39e:	8b 01       	movw	r16, r22
     3a0:	1f 92       	push	r1
     3a2:	df 92       	push	r13
     3a4:	80 e1       	ldi	r24, 0x10	; 16
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	9f 93       	push	r25
     3aa:	8f 93       	push	r24
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	6c 01       	movw	r12, r24
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 cb 18 	call	0x3196	; 0x3196 <sprintf>
     3ba:	1f 93       	push	r17
     3bc:	0f 93       	push	r16
     3be:	df 92       	push	r13
     3c0:	cf 92       	push	r12
     3c2:	ff 92       	push	r15
     3c4:	ef 92       	push	r14
     3c6:	0e 94 cb 18 	call	0x3196	; 0x3196 <sprintf>
     3ca:	48 2d       	mov	r20, r8
     3cc:	69 2d       	mov	r22, r9
     3ce:	81 ec       	ldi	r24, 0xC1	; 193
     3d0:	93 e0       	ldi	r25, 0x03	; 3
     3d2:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3d6:	b7 01       	movw	r22, r14
     3d8:	81 ec       	ldi	r24, 0xC1	; 193
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
     3e0:	8d b7       	in	r24, 0x3d	; 61
     3e2:	9e b7       	in	r25, 0x3e	; 62
     3e4:	0c 96       	adiw	r24, 0x0c	; 12
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	9e bf       	out	0x3e, r25	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	8d bf       	out	0x3d, r24	; 61
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	be be       	out	0x3e, r11	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	ad be       	out	0x3d, r10	; 61
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	cf 90       	pop	r12
     414:	bf 90       	pop	r11
     416:	af 90       	pop	r10
     418:	9f 90       	pop	r9
     41a:	8f 90       	pop	r8
     41c:	7f 90       	pop	r7
     41e:	6f 90       	pop	r6
     420:	5f 90       	pop	r5
     422:	4f 90       	pop	r4
     424:	08 95       	ret

00000426 <_Z13setupSwitchesv>:
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	84 b9       	out	0x04, r24	; 4
     42a:	84 b1       	in	r24, 0x04	; 4
     42c:	88 7f       	andi	r24, 0xF8	; 248
     42e:	84 b9       	out	0x04, r24	; 4
     430:	eb e6       	ldi	r30, 0x6B	; 107
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	87 60       	ori	r24, 0x07	; 7
     438:	80 83       	st	Z, r24
     43a:	e8 e6       	ldi	r30, 0x68	; 104
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	81 60       	ori	r24, 0x01	; 1
     442:	80 83       	st	Z, r24
     444:	78 94       	sei
     446:	08 95       	ret

00000448 <_Z13checkPositionhi>:
     448:	83 30       	cpi	r24, 0x03	; 3
     44a:	30 f4       	brcc	.+12     	; 0x458 <_Z13checkPositionhi+0x10>
     44c:	cb 01       	movw	r24, r22
     44e:	77 ff       	sbrs	r23, 7
     450:	1b c0       	rjmp	.+54     	; 0x488 <_Z13checkPositionhi+0x40>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	18 c0       	rjmp	.+48     	; 0x488 <_Z13checkPositionhi+0x40>
     458:	83 30       	cpi	r24, 0x03	; 3
     45a:	69 f4       	brne	.+26     	; 0x476 <_Z13checkPositionhi+0x2e>
     45c:	cb 01       	movw	r24, r22
     45e:	61 15       	cp	r22, r1
     460:	78 4f       	sbci	r23, 0xF8	; 248
     462:	14 f4       	brge	.+4      	; 0x468 <_Z13checkPositionhi+0x20>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	98 ef       	ldi	r25, 0xF8	; 248
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	28 e0       	ldi	r18, 0x08	; 8
     46c:	92 07       	cpc	r25, r18
     46e:	ac f0       	brlt	.+42     	; 0x49a <_Z13checkPositionhi+0x52>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	98 e0       	ldi	r25, 0x08	; 8
     474:	08 95       	ret
     476:	84 50       	subi	r24, 0x04	; 4
     478:	82 30       	cpi	r24, 0x02	; 2
     47a:	68 f4       	brcc	.+26     	; 0x496 <_Z13checkPositionhi+0x4e>
     47c:	cb 01       	movw	r24, r22
     47e:	64 3e       	cpi	r22, 0xE4	; 228
     480:	72 40       	sbci	r23, 0x02	; 2
     482:	14 f4       	brge	.+4      	; 0x488 <_Z13checkPositionhi+0x40>
     484:	84 ee       	ldi	r24, 0xE4	; 228
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	85 3a       	cpi	r24, 0xA5	; 165
     48a:	26 e0       	ldi	r18, 0x06	; 6
     48c:	92 07       	cpc	r25, r18
     48e:	2c f0       	brlt	.+10     	; 0x49a <_Z13checkPositionhi+0x52>
     490:	84 ea       	ldi	r24, 0xA4	; 164
     492:	96 e0       	ldi	r25, 0x06	; 6
     494:	08 95       	ret
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	9f ef       	ldi	r25, 0xFF	; 255
     49a:	08 95       	ret

0000049c <_Z16decodeErrorShorth>:
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <_Z16decodeErrorShorth+0x6>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <_Z16decodeErrorShorth+0x8>
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	80 ff       	sbrs	r24, 0
     4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <_Z16decodeErrorShorth+0x26>
     4ac:	26 e1       	ldi	r18, 0x16	; 22
     4ae:	32 e0       	ldi	r19, 0x02	; 2
     4b0:	4b e1       	ldi	r20, 0x1B	; 27
     4b2:	52 e0       	ldi	r21, 0x02	; 2
     4b4:	60 e2       	ldi	r22, 0x20	; 32
     4b6:	72 e0       	ldi	r23, 0x02	; 2
     4b8:	e5 e2       	ldi	r30, 0x25	; 37
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
     4bc:	8a e2       	ldi	r24, 0x2A	; 42
     4be:	92 e0       	ldi	r25, 0x02	; 2
     4c0:	06 c0       	rjmp	.+12     	; 0x4ce <_Z16decodeErrorShorth+0x32>
     4c2:	22 e9       	ldi	r18, 0x92	; 146
     4c4:	33 e0       	ldi	r19, 0x03	; 3
     4c6:	a9 01       	movw	r20, r18
     4c8:	b9 01       	movw	r22, r18
     4ca:	f9 01       	movw	r30, r18
     4cc:	c9 01       	movw	r24, r18
     4ce:	ff 93       	push	r31
     4d0:	ef 93       	push	r30
     4d2:	7f 93       	push	r23
     4d4:	6f 93       	push	r22
     4d6:	5f 93       	push	r21
     4d8:	4f 93       	push	r20
     4da:	3f 93       	push	r19
     4dc:	2f 93       	push	r18
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	82 e9       	ldi	r24, 0x92	; 146
     4e4:	93 e0       	ldi	r25, 0x03	; 3
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	8f e2       	ldi	r24, 0x2F	; 47
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	9f 93       	push	r25
     4f4:	8f 93       	push	r24
     4f6:	ce 01       	movw	r24, r28
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	0e 94 cb 18 	call	0x3196	; 0x3196 <sprintf>
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	26 96       	adiw	r28, 0x06	; 6
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <_Z11printSerial6Stringi>:
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	eb 01       	movw	r28, r22
     528:	bc 01       	movw	r22, r24
     52a:	88 e1       	ldi	r24, 0x18	; 24
     52c:	94 e0       	ldi	r25, 0x04	; 4
     52e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN5Print5printERK6String>
     532:	6f e9       	ldi	r22, 0x9F	; 159
     534:	72 e0       	ldi	r23, 0x02	; 2
     536:	88 e1       	ldi	r24, 0x18	; 24
     538:	94 e0       	ldi	r25, 0x04	; 4
     53a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
     53e:	4a e0       	ldi	r20, 0x0A	; 10
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	be 01       	movw	r22, r28
     544:	88 e1       	ldi	r24, 0x18	; 24
     546:	94 e0       	ldi	r25, 0x04	; 4
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	0c 94 5f 10 	jmp	0x20be	; 0x20be <_ZN5Print7printlnEii>

00000550 <_Z8sumBytesPhh>:
     550:	38 2f       	mov	r19, r24
     552:	fc 01       	movw	r30, r24
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	2e 2f       	mov	r18, r30
     55a:	23 1b       	sub	r18, r19
     55c:	26 17       	cp	r18, r22
     55e:	20 f4       	brcc	.+8      	; 0x568 <_Z8sumBytesPhh+0x18>
     560:	21 91       	ld	r18, Z+
     562:	82 0f       	add	r24, r18
     564:	91 1d       	adc	r25, r1
     566:	f8 cf       	rjmp	.-16     	; 0x558 <_Z8sumBytesPhh+0x8>
     568:	08 95       	ret

0000056a <_GLOBAL__sub_I_position_old>:
     56a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     56e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     572:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <currPos+0x1>
     576:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <currPos>
     57a:	24 e0       	ldi	r18, 0x04	; 4
     57c:	44 e1       	ldi	r20, 0x14	; 20
     57e:	67 e2       	ldi	r22, 0x27	; 39
     580:	81 ec       	ldi	r24, 0xC1	; 193
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	0c 94 be 12 	jmp	0x257c	; 0x257c <_ZN17LiquidCrystal_I2CC1Ehhh>

00000588 <_Z10writeServohhPhh>:
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	18 2f       	mov	r17, r24
     596:	d6 2f       	mov	r29, r22
     598:	7a 01       	movw	r14, r20
     59a:	02 2f       	mov	r16, r18
     59c:	c6 e0       	ldi	r28, 0x06	; 6
     59e:	c6 0f       	add	r28, r22
     5a0:	c2 0f       	add	r28, r18
     5a2:	62 2f       	mov	r22, r18
     5a4:	ca 01       	movw	r24, r20
     5a6:	d4 df       	rcall	.-88     	; 0x550 <_Z8sumBytesPhh>
     5a8:	c1 0f       	add	r28, r17
     5aa:	8c 0f       	add	r24, r28
     5ac:	c8 2f       	mov	r28, r24
     5ae:	c0 95       	com	r28
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	0e 94 15 12 	call	0x242a	; 0x242a <digitalWrite>
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	0e 94 15 12 	call	0x242a	; 0x242a <digitalWrite>
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>
     5cc:	6f ef       	ldi	r22, 0xFF	; 255
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	85 eb       	ldi	r24, 0xB5	; 181
     5d2:	94 e0       	ldi	r25, 0x04	; 4
     5d4:	93 de       	rcall	.-730    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     5d6:	6f ef       	ldi	r22, 0xFF	; 255
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	85 eb       	ldi	r24, 0xB5	; 181
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	8e de       	rcall	.-740    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     5e0:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <serialWriting>
     5e4:	88 23       	and	r24, r24
     5e6:	39 f0       	breq	.+14     	; 0x5f6 <_Z10writeServohhPhh+0x6e>
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>
     5f4:	f5 cf       	rjmp	.-22     	; 0x5e0 <_Z10writeServohhPhh+0x58>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <serialWriting>
     5fc:	61 2f       	mov	r22, r17
     5fe:	85 eb       	ldi	r24, 0xB5	; 181
     600:	94 e0       	ldi	r25, 0x04	; 4
     602:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN14HardwareSerial5writeEh>
     606:	10 e0       	ldi	r17, 0x00	; 0
     608:	b8 01       	movw	r22, r16
     60a:	6d 5f       	subi	r22, 0xFD	; 253
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	85 eb       	ldi	r24, 0xB5	; 181
     610:	94 e0       	ldi	r25, 0x04	; 4
     612:	74 de       	rcall	.-792    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	85 eb       	ldi	r24, 0xB5	; 181
     61a:	94 e0       	ldi	r25, 0x04	; 4
     61c:	6f de       	rcall	.-802    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     61e:	6d 2f       	mov	r22, r29
     620:	85 eb       	ldi	r24, 0xB5	; 181
     622:	94 e0       	ldi	r25, 0x04	; 4
     624:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN14HardwareSerial5writeEh>
     628:	a8 01       	movw	r20, r16
     62a:	b7 01       	movw	r22, r14
     62c:	85 eb       	ldi	r24, 0xB5	; 181
     62e:	94 e0       	ldi	r25, 0x04	; 4
     630:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN5Print5writeEPKhj>
     634:	6c 2f       	mov	r22, r28
     636:	85 eb       	ldi	r24, 0xB5	; 181
     638:	94 e0       	ldi	r25, 0x04	; 4
     63a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN14HardwareSerial5writeEh>
     63e:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <serialWriting>
     642:	85 eb       	ldi	r24, 0xB5	; 181
     644:	94 e0       	ldi	r25, 0x04	; 4
     646:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZN14HardwareSerial5flushEv>
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	0e 94 15 12 	call	0x242a	; 0x242a <digitalWrite>
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	0e 94 15 12 	call	0x242a	; 0x242a <digitalWrite>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <delay>

00000672 <_Z9moveSpeedhii>:
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	00 d0       	rcall	.+0      	; 0x682 <_Z9moveSpeedhii+0x10>
     682:	1f 92       	push	r1
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	18 2f       	mov	r17, r24
     68a:	d4 2e       	mov	r13, r20
     68c:	e5 2e       	mov	r14, r21
     68e:	dc de       	rcall	.-584    	; 0x448 <_Z13checkPositionhi>
     690:	f8 2e       	mov	r15, r24
     692:	09 2f       	mov	r16, r25
     694:	89 83       	std	Y+1, r24	; 0x01
     696:	9a 83       	std	Y+2, r25	; 0x02
     698:	db 82       	std	Y+3, r13	; 0x03
     69a:	ec 82       	std	Y+4, r14	; 0x04
     69c:	24 e0       	ldi	r18, 0x04	; 4
     69e:	ae 01       	movw	r20, r28
     6a0:	4f 5f       	subi	r20, 0xFF	; 255
     6a2:	5f 4f       	sbci	r21, 0xFF	; 255
     6a4:	6e e1       	ldi	r22, 0x1E	; 30
     6a6:	81 2f       	mov	r24, r17
     6a8:	6f df       	rcall	.-290    	; 0x588 <_Z10writeServohhPhh>
     6aa:	f0 92 13 04 	sts	0x0413, r15	; 0x800413 <currPos>
     6ae:	00 93 14 04 	sts	0x0414, r16	; 0x800414 <currPos+0x1>
     6b2:	8a e0       	ldi	r24, 0x0A	; 10
     6b4:	18 9f       	mul	r17, r24
     6b6:	f0 01       	movw	r30, r0
     6b8:	11 24       	eor	r1, r1
     6ba:	ee 52       	subi	r30, 0x2E	; 46
     6bc:	fc 4f       	sbci	r31, 0xFC	; 252
     6be:	f3 82       	std	Z+3, r15	; 0x03
     6c0:	04 83       	std	Z+4, r16	; 0x04
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	08 95       	ret

000006da <_Z14setTorqueLimithi>:
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	1f 92       	push	r1
     6e0:	1f 92       	push	r1
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	69 83       	std	Y+1, r22	; 0x01
     6e8:	7a 83       	std	Y+2, r23	; 0x02
     6ea:	22 e0       	ldi	r18, 0x02	; 2
     6ec:	ae 01       	movw	r20, r28
     6ee:	4f 5f       	subi	r20, 0xFF	; 255
     6f0:	5f 4f       	sbci	r21, 0xFF	; 255
     6f2:	62 e2       	ldi	r22, 0x22	; 34
     6f4:	49 df       	rcall	.-366    	; 0x588 <_Z10writeServohhPhh>
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <_Z7setModehh>:
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	00 d0       	rcall	.+0      	; 0x70a <_Z7setModehh+0xa>
     70a:	1f 92       	push	r1
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	18 2f       	mov	r17, r24
     712:	06 2f       	mov	r16, r22
     714:	61 30       	cpi	r22, 0x01	; 1
     716:	29 f4       	brne	.+10     	; 0x722 <_Z7setModehh+0x22>
     718:	19 82       	std	Y+1, r1	; 0x01
     71a:	1a 82       	std	Y+2, r1	; 0x02
     71c:	1b 82       	std	Y+3, r1	; 0x03
     71e:	1c 82       	std	Y+4, r1	; 0x04
     720:	08 c0       	rjmp	.+16     	; 0x732 <_Z7setModehh+0x32>
     722:	62 30       	cpi	r22, 0x02	; 2
     724:	81 f4       	brne	.+32     	; 0x746 <_Z7setModehh+0x46>
     726:	9f ef       	ldi	r25, 0xFF	; 255
     728:	99 83       	std	Y+1, r25	; 0x01
     72a:	8f e0       	ldi	r24, 0x0F	; 15
     72c:	8a 83       	std	Y+2, r24	; 0x02
     72e:	9b 83       	std	Y+3, r25	; 0x03
     730:	8c 83       	std	Y+4, r24	; 0x04
     732:	24 e0       	ldi	r18, 0x04	; 4
     734:	ae 01       	movw	r20, r28
     736:	4f 5f       	subi	r20, 0xFF	; 255
     738:	5f 4f       	sbci	r21, 0xFF	; 255
     73a:	66 e0       	ldi	r22, 0x06	; 6
     73c:	81 2f       	mov	r24, r17
     73e:	24 df       	rcall	.-440    	; 0x588 <_Z10writeServohhPhh>
     740:	16 30       	cpi	r17, 0x06	; 6
     742:	a0 f0       	brcs	.+40     	; 0x76c <_Z7setModehh+0x6c>
     744:	1a c0       	rjmp	.+52     	; 0x77a <_Z7setModehh+0x7a>
     746:	84 ee       	ldi	r24, 0xE4	; 228
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	8a 83       	std	Y+2, r24	; 0x02
     74e:	84 ea       	ldi	r24, 0xA4	; 164
     750:	8b 83       	std	Y+3, r24	; 0x03
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	8c 83       	std	Y+4, r24	; 0x04
     756:	24 e0       	ldi	r18, 0x04	; 4
     758:	ae 01       	movw	r20, r28
     75a:	4f 5f       	subi	r20, 0xFF	; 255
     75c:	5f 4f       	sbci	r21, 0xFF	; 255
     75e:	66 e0       	ldi	r22, 0x06	; 6
     760:	81 2f       	mov	r24, r17
     762:	12 df       	rcall	.-476    	; 0x588 <_Z10writeServohhPhh>
     764:	16 30       	cpi	r17, 0x06	; 6
     766:	48 f4       	brcc	.+18     	; 0x77a <_Z7setModehh+0x7a>
     768:	03 30       	cpi	r16, 0x03	; 3
     76a:	38 f4       	brcc	.+14     	; 0x77a <_Z7setModehh+0x7a>
     76c:	8a e0       	ldi	r24, 0x0A	; 10
     76e:	18 9f       	mul	r17, r24
     770:	f0 01       	movw	r30, r0
     772:	11 24       	eor	r1, r1
     774:	ee 52       	subi	r30, 0x2E	; 46
     776:	fc 4f       	sbci	r31, 0xFC	; 252
     778:	02 83       	std	Z+2, r16	; 0x02
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <_Z12setModeWheelh>:
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	b8 cf       	rjmp	.-144    	; 0x700 <_Z7setModehh>

00000790 <_Z12setModeJointh>:
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	b6 cf       	rjmp	.-148    	; 0x700 <_Z7setModehh>

00000794 <_Z16setModeMultiTurnh>:
     794:	62 e0       	ldi	r22, 0x02	; 2
     796:	b4 cf       	rjmp	.-152    	; 0x700 <_Z7setModehh>

00000798 <__vector_9>:
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	0b b6       	in	r0, 0x3b	; 59
     7a4:	0f 92       	push	r0
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	2f 93       	push	r18
     7b0:	3f 93       	push	r19
     7b2:	4f 93       	push	r20
     7b4:	5f 93       	push	r21
     7b6:	6f 93       	push	r22
     7b8:	7f 93       	push	r23
     7ba:	8f 93       	push	r24
     7bc:	9f 93       	push	r25
     7be:	af 93       	push	r26
     7c0:	bf 93       	push	r27
     7c2:	cf 93       	push	r28
     7c4:	ef 93       	push	r30
     7c6:	ff 93       	push	r31
     7c8:	c0 91 d2 03 	lds	r28, 0x03D2	; 0x8003d2 <arm>
     7cc:	18 9b       	sbis	0x03, 0	; 3
     7ce:	38 c0       	rjmp	.+112    	; 0x840 <__vector_9+0xa8>
     7d0:	2f 9a       	sbi	0x05, 7	; 5
     7d2:	8a e0       	ldi	r24, 0x0A	; 10
     7d4:	c8 9f       	mul	r28, r24
     7d6:	80 01       	movw	r16, r0
     7d8:	11 24       	eor	r1, r1
     7da:	0e 52       	subi	r16, 0x2E	; 46
     7dc:	1c 4f       	sbci	r17, 0xFC	; 252
     7de:	78 01       	movw	r14, r16
     7e0:	e3 e0       	ldi	r30, 0x03	; 3
     7e2:	ee 0e       	add	r14, r30
     7e4:	f1 1c       	adc	r15, r1
     7e6:	09 5f       	subi	r16, 0xF9	; 249
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	18 9b       	sbis	0x03, 0	; 3
     7ec:	20 c0       	rjmp	.+64     	; 0x82e <__vector_9+0x96>
     7ee:	f7 01       	movw	r30, r14
     7f0:	60 81       	ld	r22, Z
     7f2:	71 81       	ldd	r23, Z+1	; 0x01
     7f4:	61 50       	subi	r22, 0x01	; 1
     7f6:	71 09       	sbc	r23, r1
     7f8:	71 83       	std	Z+1, r23	; 0x01
     7fa:	60 83       	st	Z, r22
     7fc:	c3 30       	cpi	r28, 0x03	; 3
     7fe:	40 f4       	brcc	.+16     	; 0x810 <__vector_9+0x78>
     800:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <lastButtonPressed>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	21 f4       	brne	.+8      	; 0x810 <__vector_9+0x78>
     808:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <buttonsFlip+0x1>
     80c:	81 11       	cpse	r24, r1
     80e:	04 c0       	rjmp	.+8      	; 0x818 <__vector_9+0x80>
     810:	f8 01       	movw	r30, r16
     812:	40 81       	ld	r20, Z
     814:	51 81       	ldd	r21, Z+1	; 0x01
     816:	02 c0       	rjmp	.+4      	; 0x81c <__vector_9+0x84>
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	8c 2f       	mov	r24, r28
     81e:	29 df       	rcall	.-430    	; 0x672 <_Z9moveSpeedhii>
     820:	68 ec       	ldi	r22, 0xC8	; 200
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>
     82c:	de cf       	rjmp	.-68     	; 0x7ea <__vector_9+0x52>
     82e:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <buttonsFlip+0x1>
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	89 27       	eor	r24, r25
     836:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <buttonsFlip+0x1>
     83a:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <lastButtonPressed>
     83e:	2f 98       	cbi	0x05, 7	; 5
     840:	19 9b       	sbis	0x03, 1	; 3
     842:	3e c0       	rjmp	.+124    	; 0x8c0 <__vector_9+0x128>
     844:	2f 9a       	sbi	0x05, 7	; 5
     846:	fa e0       	ldi	r31, 0x0A	; 10
     848:	cf 9f       	mul	r28, r31
     84a:	80 01       	movw	r16, r0
     84c:	11 24       	eor	r1, r1
     84e:	0e 52       	subi	r16, 0x2E	; 46
     850:	1c 4f       	sbci	r17, 0xFC	; 252
     852:	78 01       	movw	r14, r16
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	e8 0e       	add	r14, r24
     858:	f1 1c       	adc	r15, r1
     85a:	09 5f       	subi	r16, 0xF9	; 249
     85c:	1f 4f       	sbci	r17, 0xFF	; 255
     85e:	19 9b       	sbis	0x03, 1	; 3
     860:	25 c0       	rjmp	.+74     	; 0x8ac <__vector_9+0x114>
     862:	f7 01       	movw	r30, r14
     864:	60 81       	ld	r22, Z
     866:	71 81       	ldd	r23, Z+1	; 0x01
     868:	6f 5f       	subi	r22, 0xFF	; 255
     86a:	7f 4f       	sbci	r23, 0xFF	; 255
     86c:	71 83       	std	Z+1, r23	; 0x01
     86e:	60 83       	st	Z, r22
     870:	c3 30       	cpi	r28, 0x03	; 3
     872:	68 f4       	brcc	.+26     	; 0x88e <__vector_9+0xf6>
     874:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <lastButtonPressed>
     878:	82 30       	cpi	r24, 0x02	; 2
     87a:	21 f4       	brne	.+8      	; 0x884 <__vector_9+0xec>
     87c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <buttonsFlip+0x2>
     880:	81 11       	cpse	r24, r1
     882:	09 c0       	rjmp	.+18     	; 0x896 <__vector_9+0xfe>
     884:	f8 01       	movw	r30, r16
     886:	40 81       	ld	r20, Z
     888:	51 81       	ldd	r21, Z+1	; 0x01
     88a:	5c 5f       	subi	r21, 0xFC	; 252
     88c:	06 c0       	rjmp	.+12     	; 0x89a <__vector_9+0x102>
     88e:	f8 01       	movw	r30, r16
     890:	40 81       	ld	r20, Z
     892:	51 81       	ldd	r21, Z+1	; 0x01
     894:	02 c0       	rjmp	.+4      	; 0x89a <__vector_9+0x102>
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	54 e0       	ldi	r21, 0x04	; 4
     89a:	8c 2f       	mov	r24, r28
     89c:	ea de       	rcall	.-556    	; 0x672 <_Z9moveSpeedhii>
     89e:	68 ec       	ldi	r22, 0xC8	; 200
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>
     8aa:	d9 cf       	rjmp	.-78     	; 0x85e <__vector_9+0xc6>
     8ac:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <buttonsFlip+0x2>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	89 27       	eor	r24, r25
     8b4:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <buttonsFlip+0x2>
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <lastButtonPressed>
     8be:	2f 98       	cbi	0x05, 7	; 5
     8c0:	1a 9b       	sbis	0x03, 2	; 3
     8c2:	37 c0       	rjmp	.+110    	; 0x932 <__vector_9+0x19a>
     8c4:	1f 9a       	sbi	0x03, 7	; 3
     8c6:	64 e1       	ldi	r22, 0x14	; 20
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>
     8d2:	1a 9b       	sbis	0x03, 2	; 3
     8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <__vector_9+0x148>
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	f7 cf       	rjmp	.-18     	; 0x8ce <__vector_9+0x136>
     8e0:	c3 30       	cpi	r28, 0x03	; 3
     8e2:	68 f4       	brcc	.+26     	; 0x8fe <__vector_9+0x166>
     8e4:	8a e0       	ldi	r24, 0x0A	; 10
     8e6:	c8 9f       	mul	r28, r24
     8e8:	f0 01       	movw	r30, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	ee 52       	subi	r30, 0x2E	; 46
     8ee:	fc 4f       	sbci	r31, 0xFC	; 252
     8f0:	63 81       	ldd	r22, Z+3	; 0x03
     8f2:	74 81       	ldd	r23, Z+4	; 0x04
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	8c 2f       	mov	r24, r28
     8fa:	bb de       	rcall	.-650    	; 0x672 <_Z9moveSpeedhii>
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__vector_9+0x16a>
     8fe:	c5 30       	cpi	r28, 0x05	; 5
     900:	18 f4       	brcc	.+6      	; 0x908 <__vector_9+0x170>
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	8c 0f       	add	r24, r28
     906:	01 c0       	rjmp	.+2      	; 0x90a <__vector_9+0x172>
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <arm>
     90e:	84 30       	cpi	r24, 0x04	; 4
     910:	10 f0       	brcs	.+4      	; 0x916 <__vector_9+0x17e>
     912:	3e df       	rcall	.-388    	; 0x790 <_Z12setModeJointh>
     914:	05 c0       	rjmp	.+10     	; 0x920 <__vector_9+0x188>
     916:	83 30       	cpi	r24, 0x03	; 3
     918:	11 f4       	brne	.+4      	; 0x91e <__vector_9+0x186>
     91a:	3c df       	rcall	.-392    	; 0x794 <_Z16setModeMultiTurnh>
     91c:	01 c0       	rjmp	.+2      	; 0x920 <__vector_9+0x188>
     91e:	36 df       	rcall	.-404    	; 0x78c <_Z12setModeWheelh>
     920:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <lastButtonPressed>
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	89 27       	eor	r24, r25
     928:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <lastButtonPressed>
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <lastButtonPressed>
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	cf 91       	pop	r28
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	0f 90       	pop	r0
     956:	0b be       	out	0x3b, r0	; 59
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <_Z9readServohhh>:
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	c8 2f       	mov	r28, r24
     96a:	d6 2f       	mov	r29, r22
     96c:	14 2f       	mov	r17, r20
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	0e 94 15 12 	call	0x242a	; 0x242a <digitalWrite>
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	0e 94 15 12 	call	0x242a	; 0x242a <digitalWrite>
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>
     98a:	6f ef       	ldi	r22, 0xFF	; 255
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	85 eb       	ldi	r24, 0xB5	; 181
     990:	94 e0       	ldi	r25, 0x04	; 4
     992:	b4 dc       	rcall	.-1688   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     994:	6f ef       	ldi	r22, 0xFF	; 255
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	85 eb       	ldi	r24, 0xB5	; 181
     99a:	94 e0       	ldi	r25, 0x04	; 4
     99c:	af dc       	rcall	.-1698   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <serialWriting>
     9a4:	6c 2f       	mov	r22, r28
     9a6:	85 eb       	ldi	r24, 0xB5	; 181
     9a8:	94 e0       	ldi	r25, 0x04	; 4
     9aa:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN14HardwareSerial5writeEh>
     9ae:	64 e0       	ldi	r22, 0x04	; 4
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	85 eb       	ldi	r24, 0xB5	; 181
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	a2 dc       	rcall	.-1724   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     9b8:	62 e0       	ldi	r22, 0x02	; 2
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	85 eb       	ldi	r24, 0xB5	; 181
     9be:	94 e0       	ldi	r25, 0x04	; 4
     9c0:	9d dc       	rcall	.-1734   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     9c2:	6d 2f       	mov	r22, r29
     9c4:	85 eb       	ldi	r24, 0xB5	; 181
     9c6:	94 e0       	ldi	r25, 0x04	; 4
     9c8:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN14HardwareSerial5writeEh>
     9cc:	61 2f       	mov	r22, r17
     9ce:	85 eb       	ldi	r24, 0xB5	; 181
     9d0:	94 e0       	ldi	r25, 0x04	; 4
     9d2:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN14HardwareSerial5writeEh>
     9d6:	66 e0       	ldi	r22, 0x06	; 6
     9d8:	61 0f       	add	r22, r17
     9da:	6d 0f       	add	r22, r29
     9dc:	6c 0f       	add	r22, r28
     9de:	60 95       	com	r22
     9e0:	85 eb       	ldi	r24, 0xB5	; 181
     9e2:	94 e0       	ldi	r25, 0x04	; 4
     9e4:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN14HardwareSerial5writeEh>
     9e8:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <serialWriting>
     9ec:	85 eb       	ldi	r24, 0xB5	; 181
     9ee:	94 e0       	ldi	r25, 0x04	; 4
     9f0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZN14HardwareSerial5flushEv>
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	0e 94 15 12 	call	0x242a	; 0x242a <digitalWrite>
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	0e 94 15 12 	call	0x242a	; 0x242a <digitalWrite>
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <delay>

00000a16 <_Z7getDatahhh>:

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
     a16:	2f 92       	push	r2
     a18:	3f 92       	push	r3
     a1a:	4f 92       	push	r4
     a1c:	5f 92       	push	r5
     a1e:	6f 92       	push	r6
     a20:	7f 92       	push	r7
     a22:	8f 92       	push	r8
     a24:	9f 92       	push	r9
     a26:	af 92       	push	r10
     a28:	bf 92       	push	r11
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <_Z7getDatahhh+0x26>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <_Z7getDatahhh+0x28>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	f4 2e       	mov	r15, r20
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;

	int msgData;
	readServo(id, ctrlData, askedLength);
     a44:	8e df       	rcall	.-228    	; 0x962 <_Z9readServohhh>
	delay(10);
     a46:	6a e0       	ldi	r22, 0x0A	; 10
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>
	serialReading = YES;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <serialReading>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
     a58:	85 eb       	ldi	r24, 0xB5	; 181
     a5a:	94 e0       	ldi	r25, 0x04	; 4
     a5c:	98 d7       	rcall	.+3888   	; 0x198e <_ZN14HardwareSerial4readEv>
     a5e:	18 2f       	mov	r17, r24
	//Serial1.availableForWrite();
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
     a60:	85 eb       	ldi	r24, 0xB5	; 181
     a62:	94 e0       	ldi	r25, 0x04	; 4
     a64:	94 d7       	rcall	.+3880   	; 0x198e <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
     a66:	1f 3f       	cpi	r17, 0xFF	; 255
     a68:	19 f4       	brne	.+6      	; 0xa70 <_Z7getDatahhh+0x5a>
     a6a:	11 e0       	ldi	r17, 0x01	; 1
     a6c:	8f 3f       	cpi	r24, 0xFF	; 255
     a6e:	09 f0       	breq	.+2      	; 0xa72 <_Z7getDatahhh+0x5c>
     a70:	10 e0       	ldi	r17, 0x00	; 0
	Serial.print("## Start 01: ");
     a72:	64 e9       	ldi	r22, 0x94	; 148
     a74:	72 e0       	ldi	r23, 0x02	; 2
     a76:	88 e1       	ldi	r24, 0x18	; 24
     a78:	94 e0       	ldi	r25, 0x04	; 4
     a7a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     a7e:	85 eb       	ldi	r24, 0xB5	; 181
     a80:	94 e0       	ldi	r25, 0x04	; 4
     a82:	6b d7       	rcall	.+3798   	; 0x195a <_ZN14HardwareSerial9availableEv>
     a84:	4a e0       	ldi	r20, 0x0A	; 10
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	bc 01       	movw	r22, r24
     a8a:	88 e1       	ldi	r24, 0x18	; 24
     a8c:	94 e0       	ldi	r25, 0x04	; 4
     a8e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <_ZN5Print5printEii>
	Serial.println(" ####################");
     a92:	62 ea       	ldi	r22, 0xA2	; 162
     a94:	72 e0       	ldi	r23, 0x02	; 2
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_ZN5Print7printlnEPKc>
	if (msgStarted) {
     a9e:	11 23       	and	r17, r17
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <_Z7getDatahhh+0x8e>
		msgId = Serial1.read();
     aa2:	a0 c0       	rjmp	.+320    	; 0xbe4 <_Z7getDatahhh+0x1ce>
     aa4:	85 eb       	ldi	r24, 0xB5	; 181
     aa6:	94 e0       	ldi	r25, 0x04	; 4
     aa8:	72 d7       	rcall	.+3812   	; 0x198e <_ZN14HardwareSerial4readEv>
     aaa:	5c 01       	movw	r10, r24
		printSerial("Servo ID   ", msgId);
     aac:	68 eb       	ldi	r22, 0xB8	; 184
     aae:	72 e0       	ldi	r23, 0x02	; 2
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN6StringC1EPKc>
     ab8:	b5 01       	movw	r22, r10
     aba:	77 27       	eor	r23, r23
     abc:	ce 01       	movw	r24, r28
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	30 dd       	rcall	.-1440   	; 0x522 <_Z11printSerial6Stringi>
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6StringD1Ev>
		msgLength = Serial1.read();
     aca:	85 eb       	ldi	r24, 0xB5	; 181
     acc:	94 e0       	ldi	r25, 0x04	; 4
     ace:	5f d7       	rcall	.+3774   	; 0x198e <_ZN14HardwareSerial4readEv>
     ad0:	4c 01       	movw	r8, r24
		printSerial("Msg Length ", msgLength);
     ad2:	64 ec       	ldi	r22, 0xC4	; 196
     ad4:	72 e0       	ldi	r23, 0x02	; 2
     ad6:	ce 01       	movw	r24, r28
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN6StringC1EPKc>
     ade:	b4 01       	movw	r22, r8
     ae0:	77 27       	eor	r23, r23
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	1d dd       	rcall	.-1478   	; 0x522 <_Z11printSerial6Stringi>
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6StringD1Ev>
		msgError = Serial1.read();
     af0:	85 eb       	ldi	r24, 0xB5	; 181
     af2:	94 e0       	ldi	r25, 0x04	; 4
     af4:	4c d7       	rcall	.+3736   	; 0x198e <_ZN14HardwareSerial4readEv>
     af6:	8c 01       	movw	r16, r24
     af8:	38 2e       	mov	r3, r24
		printSerial("Msg Error  ", msgError);
     afa:	60 ed       	ldi	r22, 0xD0	; 208
     afc:	72 e0       	ldi	r23, 0x02	; 2
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN6StringC1EPKc>
     b06:	b8 01       	movw	r22, r16
     b08:	77 27       	eor	r23, r23
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	09 dd       	rcall	.-1518   	; 0x522 <_Z11printSerial6Stringi>
     b10:	ce 01       	movw	r24, r28
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6StringD1Ev>
		msgData_1 = Serial1.read();
     b18:	85 eb       	ldi	r24, 0xB5	; 181
     b1a:	94 e0       	ldi	r25, 0x04	; 4
     b1c:	38 d7       	rcall	.+3696   	; 0x198e <_ZN14HardwareSerial4readEv>
     b1e:	6c 01       	movw	r12, r24
     b20:	3c 01       	movw	r6, r24
     b22:	77 24       	eor	r7, r7
		printSerial("Msg Data L ", msgData_1);
     b24:	6c ed       	ldi	r22, 0xDC	; 220
     b26:	72 e0       	ldi	r23, 0x02	; 2
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN6StringC1EPKc>
     b30:	b3 01       	movw	r22, r6
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	f5 dc       	rcall	.-1558   	; 0x522 <_Z11printSerial6Stringi>
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6StringD1Ev>
		if (askedLength>1) {
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	8f 15       	cp	r24, r15
			msgData_2 = Serial1.read();
     b44:	30 f5       	brcc	.+76     	; 0xb92 <_Z7getDatahhh+0x17c>
     b46:	85 eb       	ldi	r24, 0xB5	; 181
     b48:	94 e0       	ldi	r25, 0x04	; 4
     b4a:	21 d7       	rcall	.+3650   	; 0x198e <_ZN14HardwareSerial4readEv>
     b4c:	28 2e       	mov	r2, r24
     b4e:	7c 01       	movw	r14, r24
     b50:	ff 24       	eor	r15, r15
			msgData = msgData_1 + (msgData_2<<8);
     b52:	5e 2c       	mov	r5, r14
     b54:	44 24       	eor	r4, r4
     b56:	46 0c       	add	r4, r6
     b58:	57 1c       	adc	r5, r7
			printSerial("Msg Data H ", msgData_2);
     b5a:	68 ee       	ldi	r22, 0xE8	; 232
     b5c:	72 e0       	ldi	r23, 0x02	; 2
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN6StringC1EPKc>
     b66:	b7 01       	movw	r22, r14
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	da dc       	rcall	.-1612   	; 0x522 <_Z11printSerial6Stringi>
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6StringD1Ev>
			printSerial("Msg Data   ", msgData);
     b76:	64 ef       	ldi	r22, 0xF4	; 244
     b78:	72 e0       	ldi	r23, 0x02	; 2
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN6StringC1EPKc>
     b82:	b2 01       	movw	r22, r4
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	cc dc       	rcall	.-1640   	; 0x522 <_Z11printSerial6Stringi>
     b8a:	ce 01       	movw	r24, r28
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6StringD1Ev>
		}
		msgChecksum = Serial1.read();
     b92:	85 eb       	ldi	r24, 0xB5	; 181
     b94:	94 e0       	ldi	r25, 0x04	; 4
     b96:	fb d6       	rcall	.+3574   	; 0x198e <_ZN14HardwareSerial4readEv>
     b98:	7c 01       	movw	r14, r24
		printSerial("Checksum   ", msgChecksum);
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	73 e0       	ldi	r23, 0x03	; 3
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN6StringC1EPKc>
     ba6:	b7 01       	movw	r22, r14
     ba8:	77 27       	eor	r23, r23
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	b9 dc       	rcall	.-1678   	; 0x522 <_Z11printSerial6Stringi>
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6StringD1Ev>
     bb8:	a8 0c       	add	r10, r8
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
     bba:	0a 0d       	add	r16, r10
     bbc:	0c 0d       	add	r16, r12
     bbe:	20 0e       	add	r2, r16
     bc0:	20 94       	com	r2
		printSerial("Checksum~  ", Checksum);
     bc2:	6c e0       	ldi	r22, 0x0C	; 12
     bc4:	73 e0       	ldi	r23, 0x03	; 3
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN6StringC1EPKc>
     bce:	62 2d       	mov	r22, r2
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	ce 01       	movw	r24, r28
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	a5 dc       	rcall	.-1718   	; 0x522 <_Z11printSerial6Stringi>
     bd8:	ce 01       	movw	r24, r28
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
     be0:	11 e0       	ldi	r17, 0x01	; 1
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
     be2:	2e 10       	cpse	r2, r14
		printSerial("Checksum   ", msgChecksum);
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		printSerial("Checksum~  ", Checksum);
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
     be4:	10 e0       	ldi	r17, 0x00	; 0
     be6:	85 eb       	ldi	r24, 0xB5	; 181
     be8:	94 e0       	ldi	r25, 0x04	; 4
     bea:	b7 d6       	rcall	.+3438   	; 0x195a <_ZN14HardwareSerial9availableEv>
     bec:	89 2b       	or	r24, r25
     bee:	21 f0       	breq	.+8      	; 0xbf8 <_Z7getDatahhh+0x1e2>
     bf0:	85 eb       	ldi	r24, 0xB5	; 181
     bf2:	94 e0       	ldi	r25, 0x04	; 4
     bf4:	cc d6       	rcall	.+3480   	; 0x198e <_ZN14HardwareSerial4readEv>
     bf6:	f7 cf       	rjmp	.-18     	; 0xbe6 <_Z7getDatahhh+0x1d0>
     bf8:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <serialReading>
	serialReading = NO;
     bfc:	11 23       	and	r17, r17
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
     bfe:	41 f0       	breq	.+16     	; 0xc10 <_Z7getDatahhh+0x1fa>
     c00:	33 20       	and	r3, r3
     c02:	49 f0       	breq	.+18     	; 0xc16 <_Z7getDatahhh+0x200>
     c04:	83 2d       	mov	r24, r3
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	91 95       	neg	r25
     c0a:	81 95       	neg	r24
     c0c:	91 09       	sbc	r25, r1
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <_Z7getDatahhh+0x202>
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	9f ef       	ldi	r25, 0xFF	; 255
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <_Z7getDatahhh+0x202>
     c16:	c2 01       	movw	r24, r4
     c18:	26 96       	adiw	r28, 0x06	; 6
}
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	af 90       	pop	r10
     c38:	9f 90       	pop	r9
     c3a:	8f 90       	pop	r8
     c3c:	7f 90       	pop	r7
     c3e:	6f 90       	pop	r6
     c40:	5f 90       	pop	r5
     c42:	4f 90       	pop	r4
     c44:	3f 90       	pop	r3
     c46:	2f 90       	pop	r2
     c48:	08 95       	ret

00000c4a <_Z11printBufferv>:
     c4a:	68 e1       	ldi	r22, 0x18	; 24
 */
void printBuffer() {
	//delay(20);
	//uint8_t start_1, start_2, servo_id, msg_length, er_byte, chck_sum;

	Serial.print("## Start: ");
     c4c:	73 e0       	ldi	r23, 0x03	; 3
     c4e:	88 e1       	ldi	r24, 0x18	; 24
     c50:	94 e0       	ldi	r25, 0x04	; 4
     c52:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     c56:	85 eb       	ldi	r24, 0xB5	; 181
     c58:	94 e0       	ldi	r25, 0x04	; 4
     c5a:	7f d6       	rcall	.+3326   	; 0x195a <_ZN14HardwareSerial9availableEv>
     c5c:	4a e0       	ldi	r20, 0x0A	; 10
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	bc 01       	movw	r22, r24
     c62:	88 e1       	ldi	r24, 0x18	; 24
     c64:	94 e0       	ldi	r25, 0x04	; 4
     c66:	0e 94 59 10 	call	0x20b2	; 0x20b2 <_ZN5Print5printEii>
	Serial.println(" ####################");
     c6a:	62 ea       	ldi	r22, 0xA2	; 162
     c6c:	72 e0       	ldi	r23, 0x02	; 2
     c6e:	88 e1       	ldi	r24, 0x18	; 24
     c70:	94 e0       	ldi	r25, 0x04	; 4
     c72:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_ZN5Print7printlnEPKc>
	serialReading = YES;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <serialReading>
	while(Serial1.available()){
     c7c:	85 eb       	ldi	r24, 0xB5	; 181
     c7e:	94 e0       	ldi	r25, 0x04	; 4
     c80:	6c d6       	rcall	.+3288   	; 0x195a <_ZN14HardwareSerial9availableEv>
     c82:	89 2b       	or	r24, r25
     c84:	09 f1       	breq	.+66     	; 0xcc8 <_Z11printBufferv+0x7e>

		Serial.print(Serial1.available());
     c86:	85 eb       	ldi	r24, 0xB5	; 181
     c88:	94 e0       	ldi	r25, 0x04	; 4
     c8a:	67 d6       	rcall	.+3278   	; 0x195a <_ZN14HardwareSerial9availableEv>
     c8c:	4a e0       	ldi	r20, 0x0A	; 10
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	bc 01       	movw	r22, r24
     c92:	88 e1       	ldi	r24, 0x18	; 24
     c94:	94 e0       	ldi	r25, 0x04	; 4
     c96:	0e 94 59 10 	call	0x20b2	; 0x20b2 <_ZN5Print5printEii>
		Serial.print(", ");
     c9a:	63 e2       	ldi	r22, 0x23	; 35
     c9c:	73 e0       	ldi	r23, 0x03	; 3
     c9e:	88 e1       	ldi	r24, 0x18	; 24
     ca0:	94 e0       	ldi	r25, 0x04	; 4
     ca2:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
		Serial.println(Serial1.read());
     ca6:	85 eb       	ldi	r24, 0xB5	; 181
     ca8:	94 e0       	ldi	r25, 0x04	; 4
     caa:	71 d6       	rcall	.+3298   	; 0x198e <_ZN14HardwareSerial4readEv>
     cac:	4a e0       	ldi	r20, 0x0A	; 10
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	bc 01       	movw	r22, r24
     cb2:	88 e1       	ldi	r24, 0x18	; 24
     cb4:	94 e0       	ldi	r25, 0x04	; 4
     cb6:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN5Print7printlnEii>
		delay(1);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>

	Serial.print("## Start: ");
	Serial.print(Serial1.available());
	Serial.println(" ####################");
	serialReading = YES;
	while(Serial1.available()){
     cc6:	da cf       	rjmp	.-76     	; 0xc7c <_Z11printBufferv+0x32>
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	serialReading = NO;
     cc8:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <serialReading>
	Serial.println("## End #####################");
     ccc:	66 e2       	ldi	r22, 0x26	; 38
     cce:	73 e0       	ldi	r23, 0x03	; 3
     cd0:	88 e1       	ldi	r24, 0x18	; 24
     cd2:	94 e0       	ldi	r25, 0x04	; 4
     cd4:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <_ZN5Print7printlnEPKc>

00000cd8 <setup>:
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <setup+0xa>
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <setup+0xc>
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
     ce8:	9e db       	rcall	.-2244   	; 0x426 <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
     cea:	81 ec       	ldi	r24, 0xC1	; 193
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     cf2:	81 ec       	ldi	r24, 0xC1	; 193
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     cfa:	81 ec       	ldi	r24, 0xC1	; 193
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	0e 94 1a 13 	call	0x2634	; 0x2634 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     d12:	26 e0       	ldi	r18, 0x06	; 6
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	51 ee       	ldi	r21, 0xE1	; 225
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	88 e1       	ldi	r24, 0x18	; 24
     d1e:	94 e0       	ldi	r25, 0x04	; 4
     d20:	23 d7       	rcall	.+3654   	; 0x1b68 <_ZN14HardwareSerial5beginEmh>
     d22:	26 e0       	ldi	r18, 0x06	; 6
     d24:	47 e3       	ldi	r20, 0x37	; 55
     d26:	5f ed       	ldi	r21, 0xDF	; 223
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	85 eb       	ldi	r24, 0xB5	; 181
     d2e:	94 e0       	ldi	r25, 0x04	; 4
     d30:	1b d7       	rcall	.+3638   	; 0x1b68 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
     d32:	85 eb       	ldi	r24, 0xB5	; 181
     d34:	94 e0       	ldi	r25, 0x04	; 4
     d36:	f7 d6       	rcall	.+3566   	; 0x1b26 <_ZN14HardwareSerial5flushEv>
     d38:	85 e0       	ldi	r24, 0x05	; 5
	arm.id = 5;
     d3a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <arm>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	25 dd       	rcall	.-1462   	; 0x78c <_Z12setModeWheelh>
	setModeWheel(2);
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	23 dd       	rcall	.-1466   	; 0x78c <_Z12setModeWheelh>
	setModeMultiTurn(3);
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	25 dd       	rcall	.-1462   	; 0x794 <_Z16setModeMultiTurnh>
     d4a:	84 e0       	ldi	r24, 0x04	; 4
	setModeJoint(4);
     d4c:	21 dd       	rcall	.-1470   	; 0x790 <_Z12setModeJointh>
     d4e:	85 e0       	ldi	r24, 0x05	; 5
     d50:	1f dd       	rcall	.-1474   	; 0x790 <_Z12setModeJointh>
	setModeJoint(5);
     d52:	80 e9       	ldi	r24, 0x90	; 144
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <arm+0x12>
	/* Set the speeds of the servos */
	arm.servos[1].speed = 400;
     d5a:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <arm+0x11>
     d5e:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <arm+0x1c>
     d62:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <arm+0x1b>
	arm.servos[2].speed = 400;
     d66:	8e e1       	ldi	r24, 0x1E	; 30
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <arm+0x26>
	arm.servos[3].speed = 30;
     d6e:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <arm+0x25>
     d72:	8f e0       	ldi	r24, 0x0F	; 15
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <arm+0x30>
	arm.servos[4].speed = 15;
     d7a:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <arm+0x2f>
     d7e:	84 e1       	ldi	r24, 0x14	; 20
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <arm+0x3a>
	arm.servos[5].speed = 20;
     d86:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <arm+0x39>
     d8a:	11 e0       	ldi	r17, 0x01	; 1
     d8c:	6f ef       	ldi	r22, 0xFF	; 255
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
     d8e:	73 e0       	ldi	r23, 0x03	; 3
		setTorqueLimit(i, MAX_TORQUE);
     d90:	81 2f       	mov	r24, r17
     d92:	a3 dc       	rcall	.-1722   	; 0x6da <_Z14setTorqueLimithi>
     d94:	1f 5f       	subi	r17, 0xFF	; 255
     d96:	16 30       	cpi	r17, 0x06	; 6
     d98:	c9 f7       	brne	.-14     	; 0xd8c <setup+0xb4>
	arm.servos[2].speed = 400;
	arm.servos[3].speed = 30;
	arm.servos[4].speed = 15;
	arm.servos[5].speed = 20;
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	81 ec       	ldi	r24, 0xC1	; 193
		setTorqueLimit(i, MAX_TORQUE);
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     da6:	63 e4       	ldi	r22, 0x43	; 67
     da8:	73 e0       	ldi	r23, 0x03	; 3
     daa:	81 ec       	ldi	r24, 0xC1	; 193
	lcd.print("sID:");
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	81 ec       	ldi	r24, 0xC1	; 193
	lcd.setCursor(0,1);
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     dbe:	68 e4       	ldi	r22, 0x48	; 72
     dc0:	73 e0       	ldi	r23, 0x03	; 3
     dc2:	81 ec       	ldi	r24, 0xC1	; 193
	lcd.print("deg:");
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
     dca:	42 e0       	ldi	r20, 0x02	; 2
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	81 ec       	ldi	r24, 0xC1	; 193
	lcd.setCursor(0,2);
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     dd6:	6d e4       	ldi	r22, 0x4D	; 77
     dd8:	73 e0       	ldi	r23, 0x03	; 3
     dda:	81 ec       	ldi	r24, 0xC1	; 193
	lcd.print("rpm:");
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
     de2:	43 e0       	ldi	r20, 0x03	; 3
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	81 ec       	ldi	r24, 0xC1	; 193
	lcd.setCursor(0,3);
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     dee:	62 e5       	ldi	r22, 0x52	; 82
     df0:	73 e0       	ldi	r23, 0x03	; 3
     df2:	81 ec       	ldi	r24, 0xC1	; 193
	lcd.print("ld%:");
     df4:	93 e0       	ldi	r25, 0x03	; 3
     df6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
     dfa:	48 e0       	ldi	r20, 0x08	; 8

	readServo(arm.id, 0x18, 8);
     dfc:	68 e1       	ldi	r22, 0x18	; 24
     dfe:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <arm>
     e02:	af dd       	rcall	.-1186   	; 0x962 <_Z9readServohhh>
     e04:	22 df       	rcall	.-444    	; 0xc4a <_Z11printBufferv>
	printBuffer();
     e06:	62 e0       	ldi	r22, 0x02	; 2
     e08:	70 e0       	ldi	r23, 0x00	; 0
	delay(2);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>
     e12:	42 e0       	ldi	r20, 0x02	; 2
     e14:	64 e4       	ldi	r22, 0x44	; 68
	int somthe = getData(5, MX_CURRENT_L, 2);
     e16:	85 e0       	ldi	r24, 0x05	; 5
     e18:	fe dd       	rcall	.-1028   	; 0xa16 <_Z7getDatahhh>
     e1a:	8c 01       	movw	r16, r24
     e1c:	67 e5       	ldi	r22, 0x57	; 87
     e1e:	73 e0       	ldi	r23, 0x03	; 3
	printSerial("return", somthe);
     e20:	ce 01       	movw	r24, r28
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN6StringC1EPKc>
     e28:	b8 01       	movw	r22, r16
     e2a:	ce 01       	movw	r24, r28
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	79 db       	rcall	.-2318   	; 0x522 <_Z11printSerial6Stringi>
     e30:	ce 01       	movw	r24, r28
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6StringD1Ev>
     e38:	26 96       	adiw	r28, 0x06	; 6
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
	//printBuffer();
}
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	08 95       	ret

00000e4e <_Z12printDataLCDv>:
     e4e:	7f 92       	push	r7
     e50:	8f 92       	push	r8
     e52:	9f 92       	push	r9
void printSerial(String title, int value) {
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
void printDataLCD() {
     e54:	af 92       	push	r10
     e56:	bf 92       	push	r11
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
	delay(10);
     e68:	6a e0       	ldi	r22, 0x0A	; 10
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 de 10 	call	0x21bc	; 0x21bc <delay>
	int punch;
	int current;
	int8_t rotations = 0;
	bool speedDirection, loadDirection;
	uint8_t i = 0;
	int available = Serial1.available();
     e74:	85 eb       	ldi	r24, 0xB5	; 181
     e76:	94 e0       	ldi	r25, 0x04	; 4
     e78:	70 d5       	rcall	.+2784   	; 0x195a <_ZN14HardwareSerial9availableEv>
	if (available > 0){
     e7a:	18 16       	cp	r1, r24
     e7c:	19 06       	cpc	r1, r25
     e7e:	0c f0       	brlt	.+2      	; 0xe82 <_Z12printDataLCDv+0x34>
     e80:	b9 c1       	rjmp	.+882    	; 0x11f4 <_Z12printDataLCDv+0x3a6>
		serialReading = YES;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <serialReading>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     e88:	85 eb       	ldi	r24, 0xB5	; 181
     e8a:	94 e0       	ldi	r25, 0x04	; 4
     e8c:	80 d5       	rcall	.+2816   	; 0x198e <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     e8e:	8f 3f       	cpi	r24, 0xFF	; 255
     e90:	91 05       	cpc	r25, r1
     e92:	09 f0       	breq	.+2      	; 0xe96 <_Z12printDataLCDv+0x48>
     e94:	af c1       	rjmp	.+862    	; 0x11f4 <_Z12printDataLCDv+0x3a6>
     e96:	85 eb       	ldi	r24, 0xB5	; 181
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	79 d5       	rcall	.+2802   	; 0x198e <_ZN14HardwareSerial4readEv>
     e9c:	8f 3f       	cpi	r24, 0xFF	; 255
     e9e:	91 05       	cpc	r25, r1
     ea0:	09 f0       	breq	.+2      	; 0xea4 <_Z12printDataLCDv+0x56>
     ea2:	a8 c1       	rjmp	.+848    	; 0x11f4 <_Z12printDataLCDv+0x3a6>
			do { servoID = Serial1.read(); } while (servoID == 0xFF); // this make sure you wait for real data
     ea4:	85 eb       	ldi	r24, 0xB5	; 181
     ea6:	94 e0       	ldi	r25, 0x04	; 4
     ea8:	72 d5       	rcall	.+2788   	; 0x198e <_ZN14HardwareSerial4readEv>
     eaa:	8c 01       	movw	r16, r24
     eac:	b8 2e       	mov	r11, r24
     eae:	2f ef       	ldi	r18, 0xFF	; 255
     eb0:	82 17       	cp	r24, r18
     eb2:	c1 f3       	breq	.-16     	; 0xea4 <_Z12printDataLCDv+0x56>

			msgLength = Serial1.read(); // msg Length
     eb4:	85 eb       	ldi	r24, 0xB5	; 181
     eb6:	94 e0       	ldi	r25, 0x04	; 4
     eb8:	6a d5       	rcall	.+2772   	; 0x198e <_ZN14HardwareSerial4readEv>
     eba:	d8 2f       	mov	r29, r24
			error_byte = Serial1.read();
     ebc:	85 eb       	ldi	r24, 0xB5	; 181
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	66 d5       	rcall	.+2764   	; 0x198e <_ZN14HardwareSerial4readEv>
     ec2:	c8 2f       	mov	r28, r24
     ec4:	81 11       	cpse	r24, r1
			error_byte_old = error_byte ? error_byte : error_byte_old;
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <_Z12printDataLCDv+0x7e>
     ec8:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <error_byte_old>
     ecc:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <error_byte_old>
     ed0:	40 e0       	ldi	r20, 0x00	; 0

			lcd.setCursor(10,0);
     ed2:	6a e0       	ldi	r22, 0x0A	; 10
     ed4:	81 ec       	ldi	r24, 0xC1	; 193
     ed6:	93 e0       	ldi	r25, 0x03	; 3
     ed8:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     edc:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <error_counter>
     ee0:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <error_counter+0x1>
     ee4:	c1 11       	cpse	r28, r1
			if (error_byte || error_counter) {
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <_Z12printDataLCDv+0x9e>
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	11 f1       	breq	.+68     	; 0xf30 <_Z12printDataLCDv+0xe2>
     eec:	8b 30       	cpi	r24, 0x0B	; 11
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     eee:	91 05       	cpc	r25, r1
     ef0:	14 f4       	brge	.+4      	; 0xef6 <_Z12printDataLCDv+0xa8>
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <_Z12printDataLCDv+0xac>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <error_counter+0x1>
     efe:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <error_counter>
				char* er;
				er = decodeErrorShort(error_byte);
     f02:	8c 2f       	mov	r24, r28
     f04:	cb da       	rcall	.-2666   	; 0x49c <_Z16decodeErrorShorth>
     f06:	ec 01       	movw	r28, r24
     f08:	4a e0       	ldi	r20, 0x0A	; 10
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	60 91 d1 03 	lds	r22, 0x03D1	; 0x8003d1 <error_byte_old>
     f10:	81 ec       	ldi	r24, 0xC1	; 193
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN5Print5printEhi>
     f18:	65 e5       	ldi	r22, 0x55	; 85
				lcd.print(":");
     f1a:	73 e0       	ldi	r23, 0x03	; 3
     f1c:	81 ec       	ldi	r24, 0xC1	; 193
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
     f24:	be 01       	movw	r22, r28
				lcd.print(er);
     f26:	81 ec       	ldi	r24, 0xC1	; 193
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
     f2e:	47 c1       	rjmp	.+654    	; 0x11be <_Z12printDataLCDv+0x370>
     f30:	6d e6       	ldi	r22, 0x6D	; 109
			} else { // No Error :)
				lcd.print("          ");
     f32:	73 e0       	ldi	r23, 0x03	; 3
     f34:	81 ec       	ldi	r24, 0xC1	; 193
     f36:	93 e0       	ldi	r25, 0x03	; 3
     f38:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print5printEPKc>
				if (msgLength > 2) {
     f3c:	d3 30       	cpi	r29, 0x03	; 3
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <_Z12printDataLCDv+0xf4>
					position = Serial1.read();
     f40:	3e c1       	rjmp	.+636    	; 0x11be <_Z12printDataLCDv+0x370>
     f42:	85 eb       	ldi	r24, 0xB5	; 181
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	23 d5       	rcall	.+2630   	; 0x198e <_ZN14HardwareSerial4readEv>
     f48:	ec 01       	movw	r28, r24
					position = (Serial1.read()<<8) + position;
     f4a:	85 eb       	ldi	r24, 0xB5	; 181
     f4c:	94 e0       	ldi	r25, 0x04	; 4
     f4e:	1f d5       	rcall	.+2622   	; 0x198e <_ZN14HardwareSerial4readEv>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	38 2f       	mov	r19, r24
     f56:	c2 0f       	add	r28, r18
     f58:	d3 1f       	adc	r29, r19
     f5a:	78 01       	movw	r14, r16
					if (!arm.servos[servoID].direction) {
     f5c:	ff 24       	eor	r15, r15
     f5e:	3a e0       	ldi	r19, 0x0A	; 10
     f60:	03 9f       	mul	r16, r19
     f62:	f0 01       	movw	r30, r0
     f64:	11 24       	eor	r1, r1
     f66:	ee 52       	subi	r30, 0x2E	; 46
     f68:	fc 4f       	sbci	r31, 0xFC	; 252
     f6a:	85 81       	ldd	r24, Z+5	; 0x05
     f6c:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <position_old>
     f70:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <position_old+0x1>
     f74:	96 81       	ldd	r25, Z+6	; 0x06
     f76:	81 11       	cpse	r24, r1
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <_Z12printDataLCDv+0x13c>
     f7a:	ae 01       	movw	r20, r28
						arm.servos[servoID].turns = (position_old > (position+100))
							? arm.servos[servoID].turns + 1
							: arm.servos[servoID].turns;
     f7c:	4c 59       	subi	r20, 0x9C	; 156
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	42 17       	cp	r20, r18
     f82:	53 07       	cpc	r21, r19
     f84:	44 f4       	brge	.+16     	; 0xf96 <_Z12printDataLCDv+0x148>
     f86:	9f 5f       	subi	r25, 0xFF	; 255
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <_Z12printDataLCDv+0x148>
     f8a:	2c 59       	subi	r18, 0x9C	; 156
					} else {
						arm.servos[servoID].turns = ((position_old+100) < position)
							? arm.servos[servoID].turns - 1
							: arm.servos[servoID].turns;
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	2c 17       	cp	r18, r28
     f90:	3d 07       	cpc	r19, r29
     f92:	0c f4       	brge	.+2      	; 0xf96 <_Z12printDataLCDv+0x148>
     f94:	91 50       	subi	r25, 0x01	; 1
     f96:	8a e0       	ldi	r24, 0x0A	; 10
     f98:	8e 9d       	mul	r24, r14
     f9a:	f0 01       	movw	r30, r0
     f9c:	8f 9d       	mul	r24, r15
     f9e:	f0 0d       	add	r31, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	ee 52       	subi	r30, 0x2E	; 46
     fa4:	fc 4f       	sbci	r31, 0xFC	; 252
     fa6:	96 83       	std	Z+6, r25	; 0x06
					}

					position_old = position;
     fa8:	d0 93 17 04 	sts	0x0417, r29	; 0x800417 <position_old+0x1>
     fac:	c0 93 16 04 	sts	0x0416, r28	; 0x800416 <position_old>

					//Serial.println(position);
					speed = Serial1.read();
     fb0:	85 eb       	ldi	r24, 0xB5	; 181
     fb2:	94 e0       	ldi	r25, 0x04	; 4
     fb4:	ec d4       	rcall	.+2520   	; 0x198e <_ZN14HardwareSerial4readEv>
     fb6:	6c 01       	movw	r12, r24
					speed = (Serial1.read()<<8) + speed;
     fb8:	85 eb       	ldi	r24, 0xB5	; 181
     fba:	94 e0       	ldi	r25, 0x04	; 4
     fbc:	e8 d4       	rcall	.+2512   	; 0x198e <_ZN14HardwareSerial4readEv>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	38 2f       	mov	r19, r24
     fc4:	c2 0e       	add	r12, r18
					//Serial.println(speed);
					load = Serial1.read();
     fc6:	d3 1e       	adc	r13, r19
     fc8:	85 eb       	ldi	r24, 0xB5	; 181
     fca:	94 e0       	ldi	r25, 0x04	; 4
     fcc:	e0 d4       	rcall	.+2496   	; 0x198e <_ZN14HardwareSerial4readEv>
					load = (Serial1.read()<<8) + load;
     fce:	8c 01       	movw	r16, r24
     fd0:	85 eb       	ldi	r24, 0xB5	; 181
     fd2:	94 e0       	ldi	r25, 0x04	; 4
     fd4:	dc d4       	rcall	.+2488   	; 0x198e <_ZN14HardwareSerial4readEv>
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	38 2f       	mov	r19, r24
					voltage = Serial1.read();
     fdc:	02 0f       	add	r16, r18
     fde:	13 1f       	adc	r17, r19
     fe0:	85 eb       	ldi	r24, 0xB5	; 181
					temperature = Serial1.read();
     fe2:	94 e0       	ldi	r25, 0x04	; 4
     fe4:	d4 d4       	rcall	.+2472   	; 0x198e <_ZN14HardwareSerial4readEv>
     fe6:	85 eb       	ldi	r24, 0xB5	; 181
					registered = Serial1.read();
     fe8:	94 e0       	ldi	r25, 0x04	; 4
     fea:	d1 d4       	rcall	.+2466   	; 0x198e <_ZN14HardwareSerial4readEv>
     fec:	85 eb       	ldi	r24, 0xB5	; 181
					moving = Serial1.read();
     fee:	94 e0       	ldi	r25, 0x04	; 4
     ff0:	ce d4       	rcall	.+2460   	; 0x198e <_ZN14HardwareSerial4readEv>
     ff2:	85 eb       	ldi	r24, 0xB5	; 181
					lock = Serial1.read();
     ff4:	94 e0       	ldi	r25, 0x04	; 4
     ff6:	cb d4       	rcall	.+2454   	; 0x198e <_ZN14HardwareSerial4readEv>
     ff8:	85 eb       	ldi	r24, 0xB5	; 181
     ffa:	94 e0       	ldi	r25, 0x04	; 4
					punch = Serial1.read();
     ffc:	c8 d4       	rcall	.+2448   	; 0x198e <_ZN14HardwareSerial4readEv>
     ffe:	85 eb       	ldi	r24, 0xB5	; 181
    1000:	94 e0       	ldi	r25, 0x04	; 4
    1002:	c5 d4       	rcall	.+2442   	; 0x198e <_ZN14HardwareSerial4readEv>
					punch = (Serial1.read()<<8) + punch;
    1004:	85 eb       	ldi	r24, 0xB5	; 181
    1006:	94 e0       	ldi	r25, 0x04	; 4
    1008:	c2 d4       	rcall	.+2436   	; 0x198e <_ZN14HardwareSerial4readEv>
    100a:	85 eb       	ldi	r24, 0xB5	; 181
					current = Serial1.read();
    100c:	94 e0       	ldi	r25, 0x04	; 4
    100e:	bf d4       	rcall	.+2430   	; 0x198e <_ZN14HardwareSerial4readEv>
    1010:	85 eb       	ldi	r24, 0xB5	; 181
    1012:	94 e0       	ldi	r25, 0x04	; 4
					current = (Serial1.read()<<8) + current;
    1014:	bc d4       	rcall	.+2424   	; 0x198e <_ZN14HardwareSerial4readEv>
    1016:	c1 14       	cp	r12, r1
    1018:	84 e0       	ldi	r24, 0x04	; 4
    101a:	d8 06       	cpc	r13, r24
					//Serial.println(load);
					if (speed > 0x3FF) {
    101c:	2c f0       	brlt	.+10     	; 0x1028 <_Z12printDataLCDv+0x1da>
    101e:	e4 e0       	ldi	r30, 0x04	; 4
    1020:	de 1a       	sub	r13, r30
    1022:	77 24       	eor	r7, r7
						speedDirection = CW;
						speed = speed - 0x400;
    1024:	73 94       	inc	r7
    1026:	01 c0       	rjmp	.+2      	; 0x102a <_Z12printDataLCDv+0x1dc>
					punch = (Serial1.read()<<8) + punch;
					current = Serial1.read();
					current = (Serial1.read()<<8) + current;
					//Serial.println(load);
					if (speed > 0x3FF) {
						speedDirection = CW;
    1028:	71 2c       	mov	r7, r1
    102a:	01 15       	cp	r16, r1
    102c:	f4 e0       	ldi	r31, 0x04	; 4
						speed = speed - 0x400;
						} else {
						speedDirection = CCW;
    102e:	1f 07       	cpc	r17, r31
					}
					if (load > 0x3FF) {
    1030:	24 f0       	brlt	.+8      	; 0x103a <_Z12printDataLCDv+0x1ec>
    1032:	14 50       	subi	r17, 0x04	; 4
    1034:	aa 24       	eor	r10, r10
    1036:	a3 94       	inc	r10
						loadDirection = CW;
						load = load - 0x400;
    1038:	01 c0       	rjmp	.+2      	; 0x103c <_Z12printDataLCDv+0x1ee>
						speed = speed - 0x400;
						} else {
						speedDirection = CCW;
					}
					if (load > 0x3FF) {
						loadDirection = CW;
    103a:	a1 2c       	mov	r10, r1
    103c:	2a e0       	ldi	r18, 0x0A	; 10
						load = load - 0x400;
						} else {
						loadDirection = CCW;
    103e:	2e 9d       	mul	r18, r14
					}
					/* Update the Arm Object */
					arm.servos[servoID].direction = speedDirection;
    1040:	c0 01       	movw	r24, r0
    1042:	2f 9d       	mul	r18, r15
    1044:	90 0d       	add	r25, r0
    1046:	11 24       	eor	r1, r1
    1048:	9c 01       	movw	r18, r24
    104a:	2e 52       	subi	r18, 0x2E	; 46
    104c:	3c 4f       	sbci	r19, 0xFC	; 252
    104e:	49 01       	movw	r8, r18
    1050:	f9 01       	movw	r30, r18
    1052:	75 82       	std	Z+5, r7	; 0x05
    1054:	d4 83       	std	Z+4, r29	; 0x04
    1056:	c3 83       	std	Z+3, r28	; 0x03
					arm.servos[servoID].position = position;
    1058:	12 87       	std	Z+10, r17	; 0x0a
    105a:	01 87       	std	Z+9, r16	; 0x09
					arm.servos[servoID].speed;
					arm.servos[servoID].load = load;
    105c:	21 e0       	ldi	r18, 0x01	; 1
					//Serial.println("================");
					//lcd.clear();
					//char buffer[16];
					//sprintf(buffer, "Servo ID: %d", servoID);
					printLCD(LCD_COL1, 0, servoID, 1);
    105e:	a7 01       	movw	r20, r14
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	52 d9       	rcall	.-3420   	; 0x30a <_Z8printLCDhhih>
    1066:	f4 01       	movw	r30, r8
					lcd.print(arm.servos[servoID].mode == 1 ? " Whl" : arm.servos[servoID].mode == 2 ? " Mlt" : " Jnt");
    1068:	82 81       	ldd	r24, Z+2	; 0x02
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	29 f0       	breq	.+10     	; 0x1078 <_Z12printDataLCDv+0x22a>
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	31 f0       	breq	.+12     	; 0x107e <_Z12printDataLCDv+0x230>
    1072:	6e e5       	ldi	r22, 0x5E	; 94
    1074:	73 e0       	ldi	r23, 0x03	; 3
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <_Z12printDataLCDv+0x234>
    1078:	63 e6       	ldi	r22, 0x63	; 99
    107a:	73 e0       	ldi	r23, 0x03	; 3
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <_Z12printDataLCDv+0x234>
    107e:	68 e6       	ldi	r22, 0x68	; 104
    1080:	73 e0       	ldi	r23, 0x03	; 3
    1082:	81 ec       	ldi	r24, 0xC1	; 193
    1084:	93 e0       	ldi	r25, 0x03	; 3
					printLCD(LCD_COL1, 1, position * MX_PRESENT_POSITION_DEGREE, 4);
    1086:	5c d7       	rcall	.+3768   	; 0x1f40 <_ZN5Print5printEPKc>
    1088:	be 01       	movw	r22, r28
    108a:	0d 2e       	mov	r0, r29
    108c:	00 0c       	add	r0, r0
    108e:	88 0b       	sbc	r24, r24
    1090:	99 0b       	sbc	r25, r25
    1092:	83 d1       	rcall	.+774    	; 0x139a <__floatsisf>
    1094:	28 e5       	ldi	r18, 0x58	; 88
    1096:	39 e3       	ldi	r19, 0x39	; 57
    1098:	44 eb       	ldi	r20, 0xB4	; 180
    109a:	5d e3       	ldi	r21, 0x3D	; 61
    109c:	2e d2       	rcall	.+1116   	; 0x14fa <__mulsf3>
    109e:	4a d1       	rcall	.+660    	; 0x1334 <__fixsfsi>
    10a0:	24 e0       	ldi	r18, 0x04	; 4
    10a2:	ab 01       	movw	r20, r22
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	30 d9       	rcall	.-3488   	; 0x30a <_Z8printLCDhhih>
    10aa:	6f ed       	ldi	r22, 0xDF	; 223
    10ac:	81 ec       	ldi	r24, 0xC1	; 193
					lcd.print((char)CH_DEG);
    10ae:	93 e0       	ldi	r25, 0x03	; 3
    10b0:	48 d7       	rcall	.+3728   	; 0x1f42 <_ZN5Print5printEc>
    10b2:	2a e0       	ldi	r18, 0x0A	; 10
    10b4:	2e 9d       	mul	r18, r14
    10b6:	c0 01       	movw	r24, r0
					printLCD(11, 1, arm.servos[servoID].turns,3);
    10b8:	2f 9d       	mul	r18, r15
    10ba:	90 0d       	add	r25, r0
    10bc:	11 24       	eor	r1, r1
    10be:	9c 01       	movw	r18, r24
    10c0:	2e 52       	subi	r18, 0x2E	; 46
    10c2:	3c 4f       	sbci	r19, 0xFC	; 252
    10c4:	49 01       	movw	r8, r18
    10c6:	f9 01       	movw	r30, r18
    10c8:	46 81       	ldd	r20, Z+6	; 0x06
    10ca:	04 2e       	mov	r0, r20
    10cc:	00 0c       	add	r0, r0
    10ce:	55 0b       	sbc	r21, r21
    10d0:	23 e0       	ldi	r18, 0x03	; 3
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	8b e0       	ldi	r24, 0x0B	; 11
    10d6:	19 d9       	rcall	.-3534   	; 0x30a <_Z8printLCDhhih>
					lcd.print("turns");
    10d8:	68 e7       	ldi	r22, 0x78	; 120
    10da:	73 e0       	ldi	r23, 0x03	; 3
    10dc:	81 ec       	ldi	r24, 0xC1	; 193
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	2f d7       	rcall	.+3678   	; 0x1f40 <_ZN5Print5printEPKc>
					printLCD(LCD_COL2+5, 1, arm.servos[servoID].position * MX_PRESENT_POSITION_DEGREE, 4);
    10e2:	f4 01       	movw	r30, r8
    10e4:	63 81       	ldd	r22, Z+3	; 0x03
    10e6:	74 81       	ldd	r23, Z+4	; 0x04
    10e8:	07 2e       	mov	r0, r23
    10ea:	00 0c       	add	r0, r0
    10ec:	88 0b       	sbc	r24, r24
    10ee:	99 0b       	sbc	r25, r25
    10f0:	54 d1       	rcall	.+680    	; 0x139a <__floatsisf>
    10f2:	28 e5       	ldi	r18, 0x58	; 88
    10f4:	39 e3       	ldi	r19, 0x39	; 57
    10f6:	44 eb       	ldi	r20, 0xB4	; 180
    10f8:	5d e3       	ldi	r21, 0x3D	; 61
    10fa:	ff d1       	rcall	.+1022   	; 0x14fa <__mulsf3>
    10fc:	1b d1       	rcall	.+566    	; 0x1334 <__fixsfsi>
    10fe:	24 e0       	ldi	r18, 0x04	; 4
    1100:	ab 01       	movw	r20, r22
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	8f e0       	ldi	r24, 0x0F	; 15
    1106:	01 d9       	rcall	.-3582   	; 0x30a <_Z8printLCDhhih>
    1108:	6f ed       	ldi	r22, 0xDF	; 223
    110a:	81 ec       	ldi	r24, 0xC1	; 193
					lcd.print((char)CH_DEG);
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	19 d7       	rcall	.+3634   	; 0x1f42 <_ZN5Print5printEc>
    1110:	24 e0       	ldi	r18, 0x04	; 4
    1112:	a6 01       	movw	r20, r12
					// 			lcd.setCursor(LCD_COL2 ,1);
					// 			lcd.print((int)(currPos));
					//lcd.setCursor(10,1);
					//lcd.print(rotations);
					printLCD(LCD_COL1, 2, speed, 4);
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	84 e0       	ldi	r24, 0x04	; 4
    1118:	f8 d8       	rcall	.-3600   	; 0x30a <_Z8printLCDhhih>
    111a:	71 10       	cpse	r7, r1
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <_Z12printDataLCDv+0x2d4>
					lcd.print(speedDirection ? (char)CH_ARR : (char)CH_ARL);
    111e:	6f e7       	ldi	r22, 0x7F	; 127
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <_Z12printDataLCDv+0x2d6>
    1122:	6e e7       	ldi	r22, 0x7E	; 126
    1124:	81 ec       	ldi	r24, 0xC1	; 193
    1126:	93 e0       	ldi	r25, 0x03	; 3
    1128:	0c d7       	rcall	.+3608   	; 0x1f42 <_ZN5Print5printEc>
    112a:	8a e0       	ldi	r24, 0x0A	; 10
    112c:	8e 9d       	mul	r24, r14
					printLCD(LCD_COL1+5, 2, arm.servos[servoID].speed, 4);
    112e:	f0 01       	movw	r30, r0
    1130:	8f 9d       	mul	r24, r15
    1132:	f0 0d       	add	r31, r0
    1134:	11 24       	eor	r1, r1
    1136:	ee 52       	subi	r30, 0x2E	; 46
    1138:	fc 4f       	sbci	r31, 0xFC	; 252
    113a:	47 81       	ldd	r20, Z+7	; 0x07
    113c:	50 85       	ldd	r21, Z+8	; 0x08
    113e:	24 e0       	ldi	r18, 0x04	; 4
    1140:	62 e0       	ldi	r22, 0x02	; 2
    1142:	89 e0       	ldi	r24, 0x09	; 9
    1144:	e2 d8       	rcall	.-3644   	; 0x30a <_Z8printLCDhhih>
    1146:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <lastButtonPressed>
					printLCD(LCD_COL1+10, 2, lastButtonPressed, 4);
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	24 e0       	ldi	r18, 0x04	; 4
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	8e e0       	ldi	r24, 0x0E	; 14
    1152:	db d8       	rcall	.-3658   	; 0x30a <_Z8printLCDhhih>
    1154:	40 91 12 04 	lds	r20, 0x0412	; 0x800412 <lastButtonPressed>
					printLCD(LCD_COL1+10, 2, lastButtonPressed, 4);
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	24 e0       	ldi	r18, 0x04	; 4
    115c:	62 e0       	ldi	r22, 0x02	; 2
    115e:	8e e0       	ldi	r24, 0x0E	; 14
    1160:	d4 d8       	rcall	.-3672   	; 0x30a <_Z8printLCDhhih>
    1162:	60 91 11 04 	lds	r22, 0x0411	; 0x800411 <buttonsFlip+0x2>
					lcd.print(buttonsFlip[2]);
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	4a e0       	ldi	r20, 0x0A	; 10
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	81 ec       	ldi	r24, 0xC1	; 193
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	a0 d7       	rcall	.+3904   	; 0x20b2 <_ZN5Print5printEii>
    1172:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <buttonsFlip+0x1>
    1176:	70 e0       	ldi	r23, 0x00	; 0
					lcd.print(buttonsFlip[1]);
    1178:	4a e0       	ldi	r20, 0x0A	; 10
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	81 ec       	ldi	r24, 0xC1	; 193
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	98 d7       	rcall	.+3888   	; 0x20b2 <_ZN5Print5printEii>
    1182:	24 e0       	ldi	r18, 0x04	; 4
    1184:	a8 01       	movw	r20, r16
    1186:	63 e0       	ldi	r22, 0x03	; 3
    1188:	84 e0       	ldi	r24, 0x04	; 4
					printLCD(LCD_COL1, 3, load, 4);
    118a:	bf d8       	rcall	.-3714   	; 0x30a <_Z8printLCDhhih>
    118c:	a1 10       	cpse	r10, r1
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <_Z12printDataLCDv+0x346>
    1190:	6f e7       	ldi	r22, 0x7F	; 127
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <_Z12printDataLCDv+0x348>
    1194:	6e e7       	ldi	r22, 0x7E	; 126
    1196:	81 ec       	ldi	r24, 0xC1	; 193
    1198:	93 e0       	ldi	r25, 0x03	; 3
    119a:	d3 d6       	rcall	.+3494   	; 0x1f42 <_ZN5Print5printEc>
    119c:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <servoID_old>
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
    11a0:	b8 12       	cpse	r11, r24
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <_Z12printDataLCDv+0x360>
    11a4:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <currPos>
    11a8:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <currPos+0x1>
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <_Z12printDataLCDv+0x364>
    11ae:	9c 2f       	mov	r25, r28
    11b0:	8d 2f       	mov	r24, r29
				lcd.print(er);
			} else { // No Error :)
				lcd.print("          ");
				if (msgLength > 2) {
					position = Serial1.read();
					position = (Serial1.read()<<8) + position;
    11b2:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <currPos>
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
    11b6:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <currPos+0x1>
    11ba:	b0 92 15 04 	sts	0x0415, r11	; 0x800415 <servoID_old>
					servoID_old = servoID;
    11be:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <__data_end>
				} /* if (msgLength > 2) */
			} /* (error_byte || error_counter) else */
			if (every4th==20) { printLCD(18, 2, cycle_counter, 2); }
    11c2:	84 31       	cpi	r24, 0x14	; 20
    11c4:	41 f4       	brne	.+16     	; 0x11d6 <_Z12printDataLCDv+0x388>
    11c6:	40 91 cd 03 	lds	r20, 0x03CD	; 0x8003cd <cycle_counter>
    11ca:	50 91 ce 03 	lds	r21, 0x03CE	; 0x8003ce <cycle_counter+0x1>
    11ce:	22 e0       	ldi	r18, 0x02	; 2
    11d0:	62 e0       	ldi	r22, 0x02	; 2
    11d2:	82 e1       	ldi	r24, 0x12	; 18
    11d4:	9a d8       	rcall	.-3788   	; 0x30a <_Z8printLCDhhih>
    11d6:	85 eb       	ldi	r24, 0xB5	; 181
    11d8:	94 e0       	ldi	r25, 0x04	; 4
    11da:	bf d3       	rcall	.+1918   	; 0x195a <_ZN14HardwareSerial9availableEv>
			while(Serial1.available() > 0) { Serial1.read(); }
    11dc:	18 16       	cp	r1, r24
    11de:	19 06       	cpc	r1, r25
    11e0:	24 f4       	brge	.+8      	; 0x11ea <_Z12printDataLCDv+0x39c>
    11e2:	85 eb       	ldi	r24, 0xB5	; 181
    11e4:	94 e0       	ldi	r25, 0x04	; 4
    11e6:	d3 d3       	rcall	.+1958   	; 0x198e <_ZN14HardwareSerial4readEv>
    11e8:	f6 cf       	rjmp	.-20     	; 0x11d6 <_Z12printDataLCDv+0x388>
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
			delay(1);			
    11f2:	e4 d7       	rcall	.+4040   	; 0x21bc <delay>
    11f4:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <__data_end>
    11f8:	84 31       	cpi	r24, 0x14	; 20
    11fa:	10 f4       	brcc	.+4      	; 0x1200 <_Z12printDataLCDv+0x3b2>
    11fc:	8f 5f       	subi	r24, 0xFF	; 255
		} /* if (msgStarted && (Serial1.read() == 0xFF)) */

	} /* if (available > 0) */
	every4th = every4th < 20 ? every4th + 1 : 0;
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <_Z12printDataLCDv+0x3b4>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <__data_end>
    1206:	40 91 cd 03 	lds	r20, 0x03CD	; 0x8003cd <cycle_counter>
    120a:	50 91 ce 03 	lds	r21, 0x03CE	; 0x8003ce <cycle_counter+0x1>
    120e:	81 11       	cpse	r24, r1
    1210:	08 c0       	rjmp	.+16     	; 0x1222 <_Z12printDataLCDv+0x3d4>
    1212:	49 30       	cpi	r20, 0x09	; 9
    1214:	51 05       	cpc	r21, r1
    1216:	1c f4       	brge	.+6      	; 0x121e <_Z12printDataLCDv+0x3d0>
	cycle_counter = every4th
		? cycle_counter
		: cycle_counter < 9
			? cycle_counter + 1
			: 0;
    1218:	4f 5f       	subi	r20, 0xFF	; 255
    121a:	5f 4f       	sbci	r21, 0xFF	; 255
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <_Z12printDataLCDv+0x3d4>
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	50 93 ce 03 	sts	0x03CE, r21	; 0x8003ce <cycle_counter+0x1>
    1226:	40 93 cd 03 	sts	0x03CD, r20	; 0x8003cd <cycle_counter>
    122a:	84 31       	cpi	r24, 0x14	; 20
    122c:	21 f4       	brne	.+8      	; 0x1236 <_Z12printDataLCDv+0x3e8>
    122e:	22 e0       	ldi	r18, 0x02	; 2
    1230:	63 e0       	ldi	r22, 0x03	; 3
    1232:	82 e1       	ldi	r24, 0x12	; 18
	if (every4th==20) { printLCD(18, 3, cycle_counter, 2); }
    1234:	6a d8       	rcall	.-3884   	; 0x30a <_Z8printLCDhhih>
    1236:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <serialReading>
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
	serialReading = NO;
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
}
    1246:	df 90       	pop	r13
    1248:	cf 90       	pop	r12
    124a:	bf 90       	pop	r11
    124c:	af 90       	pop	r10
    124e:	9f 90       	pop	r9
    1250:	8f 90       	pop	r8
    1252:	7f 90       	pop	r7
    1254:	08 95       	ret

00001256 <loop>:
    1256:	42 e2       	ldi	r20, 0x22	; 34
    1258:	64 e2       	ldi	r22, 0x24	; 36
    125a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <arm>
    125e:	81 db       	rcall	.-2302   	; 0x962 <_Z9readServohhh>
    1260:	f6 cd       	rjmp	.-1044   	; 0xe4e <_Z12printDataLCDv>

00001262 <__subsf3>:
/* LOOP                                                                 */
/************************************************************************/
void loop() {

	readServo(arm.id, 0x24, 34);
	printDataLCD();
    1262:	50 58       	subi	r21, 0x80	; 128

00001264 <__addsf3>:
    1264:	bb 27       	eor	r27, r27
    1266:	aa 27       	eor	r26, r26
    1268:	0e d0       	rcall	.+28     	; 0x1286 <__addsf3x>
    126a:	0d c1       	rjmp	.+538    	; 0x1486 <__fp_round>
    126c:	fe d0       	rcall	.+508    	; 0x146a <__fp_pscA>
    126e:	30 f0       	brcs	.+12     	; 0x127c <__addsf3+0x18>
    1270:	03 d1       	rcall	.+518    	; 0x1478 <__fp_pscB>
    1272:	20 f0       	brcs	.+8      	; 0x127c <__addsf3+0x18>
    1274:	31 f4       	brne	.+12     	; 0x1282 <__addsf3+0x1e>
    1276:	9f 3f       	cpi	r25, 0xFF	; 255
    1278:	11 f4       	brne	.+4      	; 0x127e <__addsf3+0x1a>
    127a:	1e f4       	brtc	.+6      	; 0x1282 <__addsf3+0x1e>
    127c:	f3 c0       	rjmp	.+486    	; 0x1464 <__fp_nan>
    127e:	0e f4       	brtc	.+2      	; 0x1282 <__addsf3+0x1e>
    1280:	e0 95       	com	r30
    1282:	e7 fb       	bst	r30, 7
    1284:	e9 c0       	rjmp	.+466    	; 0x1458 <__fp_inf>

00001286 <__addsf3x>:
    1286:	e9 2f       	mov	r30, r25
    1288:	0f d1       	rcall	.+542    	; 0x14a8 <__fp_split3>
    128a:	80 f3       	brcs	.-32     	; 0x126c <__addsf3+0x8>
    128c:	ba 17       	cp	r27, r26
    128e:	62 07       	cpc	r22, r18
    1290:	73 07       	cpc	r23, r19
    1292:	84 07       	cpc	r24, r20
    1294:	95 07       	cpc	r25, r21
    1296:	18 f0       	brcs	.+6      	; 0x129e <__addsf3x+0x18>
    1298:	71 f4       	brne	.+28     	; 0x12b6 <__addsf3x+0x30>
    129a:	9e f5       	brtc	.+102    	; 0x1302 <__addsf3x+0x7c>
    129c:	27 c1       	rjmp	.+590    	; 0x14ec <__fp_zero>
    129e:	0e f4       	brtc	.+2      	; 0x12a2 <__addsf3x+0x1c>
    12a0:	e0 95       	com	r30
    12a2:	0b 2e       	mov	r0, r27
    12a4:	ba 2f       	mov	r27, r26
    12a6:	a0 2d       	mov	r26, r0
    12a8:	0b 01       	movw	r0, r22
    12aa:	b9 01       	movw	r22, r18
    12ac:	90 01       	movw	r18, r0
    12ae:	0c 01       	movw	r0, r24
    12b0:	ca 01       	movw	r24, r20
    12b2:	a0 01       	movw	r20, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	ff 27       	eor	r31, r31
    12b8:	59 1b       	sub	r21, r25
    12ba:	99 f0       	breq	.+38     	; 0x12e2 <__addsf3x+0x5c>
    12bc:	59 3f       	cpi	r21, 0xF9	; 249
    12be:	50 f4       	brcc	.+20     	; 0x12d4 <__addsf3x+0x4e>
    12c0:	50 3e       	cpi	r21, 0xE0	; 224
    12c2:	68 f1       	brcs	.+90     	; 0x131e <__addsf3x+0x98>
    12c4:	1a 16       	cp	r1, r26
    12c6:	f0 40       	sbci	r31, 0x00	; 0
    12c8:	a2 2f       	mov	r26, r18
    12ca:	23 2f       	mov	r18, r19
    12cc:	34 2f       	mov	r19, r20
    12ce:	44 27       	eor	r20, r20
    12d0:	58 5f       	subi	r21, 0xF8	; 248
    12d2:	f3 cf       	rjmp	.-26     	; 0x12ba <__addsf3x+0x34>
    12d4:	46 95       	lsr	r20
    12d6:	37 95       	ror	r19
    12d8:	27 95       	ror	r18
    12da:	a7 95       	ror	r26
    12dc:	f0 40       	sbci	r31, 0x00	; 0
    12de:	53 95       	inc	r21
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__addsf3x+0x4e>
    12e2:	7e f4       	brtc	.+30     	; 0x1302 <__addsf3x+0x7c>
    12e4:	1f 16       	cp	r1, r31
    12e6:	ba 0b       	sbc	r27, r26
    12e8:	62 0b       	sbc	r22, r18
    12ea:	73 0b       	sbc	r23, r19
    12ec:	84 0b       	sbc	r24, r20
    12ee:	ba f0       	brmi	.+46     	; 0x131e <__addsf3x+0x98>
    12f0:	91 50       	subi	r25, 0x01	; 1
    12f2:	a1 f0       	breq	.+40     	; 0x131c <__addsf3x+0x96>
    12f4:	ff 0f       	add	r31, r31
    12f6:	bb 1f       	adc	r27, r27
    12f8:	66 1f       	adc	r22, r22
    12fa:	77 1f       	adc	r23, r23
    12fc:	88 1f       	adc	r24, r24
    12fe:	c2 f7       	brpl	.-16     	; 0x12f0 <__addsf3x+0x6a>
    1300:	0e c0       	rjmp	.+28     	; 0x131e <__addsf3x+0x98>
    1302:	ba 0f       	add	r27, r26
    1304:	62 1f       	adc	r22, r18
    1306:	73 1f       	adc	r23, r19
    1308:	84 1f       	adc	r24, r20
    130a:	48 f4       	brcc	.+18     	; 0x131e <__addsf3x+0x98>
    130c:	87 95       	ror	r24
    130e:	77 95       	ror	r23
    1310:	67 95       	ror	r22
    1312:	b7 95       	ror	r27
    1314:	f7 95       	ror	r31
    1316:	9e 3f       	cpi	r25, 0xFE	; 254
    1318:	08 f0       	brcs	.+2      	; 0x131c <__addsf3x+0x96>
    131a:	b3 cf       	rjmp	.-154    	; 0x1282 <__addsf3+0x1e>
    131c:	93 95       	inc	r25
    131e:	88 0f       	add	r24, r24
    1320:	08 f0       	brcs	.+2      	; 0x1324 <__addsf3x+0x9e>
    1322:	99 27       	eor	r25, r25
    1324:	ee 0f       	add	r30, r30
    1326:	97 95       	ror	r25
    1328:	87 95       	ror	r24
    132a:	08 95       	ret

0000132c <__cmpsf2>:
    132c:	71 d0       	rcall	.+226    	; 0x1410 <__fp_cmp>
    132e:	08 f4       	brcc	.+2      	; 0x1332 <__cmpsf2+0x6>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	08 95       	ret

00001334 <__fixsfsi>:
    1334:	04 d0       	rcall	.+8      	; 0x133e <__fixunssfsi>
    1336:	68 94       	set
    1338:	b1 11       	cpse	r27, r1
    133a:	d9 c0       	rjmp	.+434    	; 0x14ee <__fp_szero>
    133c:	08 95       	ret

0000133e <__fixunssfsi>:
    133e:	bc d0       	rcall	.+376    	; 0x14b8 <__fp_splitA>
    1340:	88 f0       	brcs	.+34     	; 0x1364 <__fixunssfsi+0x26>
    1342:	9f 57       	subi	r25, 0x7F	; 127
    1344:	90 f0       	brcs	.+36     	; 0x136a <__fixunssfsi+0x2c>
    1346:	b9 2f       	mov	r27, r25
    1348:	99 27       	eor	r25, r25
    134a:	b7 51       	subi	r27, 0x17	; 23
    134c:	a0 f0       	brcs	.+40     	; 0x1376 <__fixunssfsi+0x38>
    134e:	d1 f0       	breq	.+52     	; 0x1384 <__fixunssfsi+0x46>
    1350:	66 0f       	add	r22, r22
    1352:	77 1f       	adc	r23, r23
    1354:	88 1f       	adc	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	1a f0       	brmi	.+6      	; 0x1360 <__fixunssfsi+0x22>
    135a:	ba 95       	dec	r27
    135c:	c9 f7       	brne	.-14     	; 0x1350 <__fixunssfsi+0x12>
    135e:	12 c0       	rjmp	.+36     	; 0x1384 <__fixunssfsi+0x46>
    1360:	b1 30       	cpi	r27, 0x01	; 1
    1362:	81 f0       	breq	.+32     	; 0x1384 <__fixunssfsi+0x46>
    1364:	c3 d0       	rcall	.+390    	; 0x14ec <__fp_zero>
    1366:	b1 e0       	ldi	r27, 0x01	; 1
    1368:	08 95       	ret
    136a:	c0 c0       	rjmp	.+384    	; 0x14ec <__fp_zero>
    136c:	67 2f       	mov	r22, r23
    136e:	78 2f       	mov	r23, r24
    1370:	88 27       	eor	r24, r24
    1372:	b8 5f       	subi	r27, 0xF8	; 248
    1374:	39 f0       	breq	.+14     	; 0x1384 <__fixunssfsi+0x46>
    1376:	b9 3f       	cpi	r27, 0xF9	; 249
    1378:	cc f3       	brlt	.-14     	; 0x136c <__fixunssfsi+0x2e>
    137a:	86 95       	lsr	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	b3 95       	inc	r27
    1382:	d9 f7       	brne	.-10     	; 0x137a <__fixunssfsi+0x3c>
    1384:	3e f4       	brtc	.+14     	; 0x1394 <__fixunssfsi+0x56>
    1386:	90 95       	com	r25
    1388:	80 95       	com	r24
    138a:	70 95       	com	r23
    138c:	61 95       	neg	r22
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	8f 4f       	sbci	r24, 0xFF	; 255
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	08 95       	ret

00001396 <__floatunsisf>:
    1396:	e8 94       	clt
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <__floatsisf+0x12>

0000139a <__floatsisf>:
    139a:	97 fb       	bst	r25, 7
    139c:	3e f4       	brtc	.+14     	; 0x13ac <__floatsisf+0x12>
    139e:	90 95       	com	r25
    13a0:	80 95       	com	r24
    13a2:	70 95       	com	r23
    13a4:	61 95       	neg	r22
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	99 23       	and	r25, r25
    13ae:	a9 f0       	breq	.+42     	; 0x13da <__floatsisf+0x40>
    13b0:	f9 2f       	mov	r31, r25
    13b2:	96 e9       	ldi	r25, 0x96	; 150
    13b4:	bb 27       	eor	r27, r27
    13b6:	93 95       	inc	r25
    13b8:	f6 95       	lsr	r31
    13ba:	87 95       	ror	r24
    13bc:	77 95       	ror	r23
    13be:	67 95       	ror	r22
    13c0:	b7 95       	ror	r27
    13c2:	f1 11       	cpse	r31, r1
    13c4:	f8 cf       	rjmp	.-16     	; 0x13b6 <__floatsisf+0x1c>
    13c6:	fa f4       	brpl	.+62     	; 0x1406 <__floatsisf+0x6c>
    13c8:	bb 0f       	add	r27, r27
    13ca:	11 f4       	brne	.+4      	; 0x13d0 <__floatsisf+0x36>
    13cc:	60 ff       	sbrs	r22, 0
    13ce:	1b c0       	rjmp	.+54     	; 0x1406 <__floatsisf+0x6c>
    13d0:	6f 5f       	subi	r22, 0xFF	; 255
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	8f 4f       	sbci	r24, 0xFF	; 255
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	16 c0       	rjmp	.+44     	; 0x1406 <__floatsisf+0x6c>
    13da:	88 23       	and	r24, r24
    13dc:	11 f0       	breq	.+4      	; 0x13e2 <__floatsisf+0x48>
    13de:	96 e9       	ldi	r25, 0x96	; 150
    13e0:	11 c0       	rjmp	.+34     	; 0x1404 <__floatsisf+0x6a>
    13e2:	77 23       	and	r23, r23
    13e4:	21 f0       	breq	.+8      	; 0x13ee <__floatsisf+0x54>
    13e6:	9e e8       	ldi	r25, 0x8E	; 142
    13e8:	87 2f       	mov	r24, r23
    13ea:	76 2f       	mov	r23, r22
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <__floatsisf+0x5e>
    13ee:	66 23       	and	r22, r22
    13f0:	71 f0       	breq	.+28     	; 0x140e <__floatsisf+0x74>
    13f2:	96 e8       	ldi	r25, 0x86	; 134
    13f4:	86 2f       	mov	r24, r22
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	2a f0       	brmi	.+10     	; 0x1406 <__floatsisf+0x6c>
    13fc:	9a 95       	dec	r25
    13fe:	66 0f       	add	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	da f7       	brpl	.-10     	; 0x13fc <__floatsisf+0x62>
    1406:	88 0f       	add	r24, r24
    1408:	96 95       	lsr	r25
    140a:	87 95       	ror	r24
    140c:	97 f9       	bld	r25, 7
    140e:	08 95       	ret

00001410 <__fp_cmp>:
    1410:	99 0f       	add	r25, r25
    1412:	00 08       	sbc	r0, r0
    1414:	55 0f       	add	r21, r21
    1416:	aa 0b       	sbc	r26, r26
    1418:	e0 e8       	ldi	r30, 0x80	; 128
    141a:	fe ef       	ldi	r31, 0xFE	; 254
    141c:	16 16       	cp	r1, r22
    141e:	17 06       	cpc	r1, r23
    1420:	e8 07       	cpc	r30, r24
    1422:	f9 07       	cpc	r31, r25
    1424:	c0 f0       	brcs	.+48     	; 0x1456 <__fp_cmp+0x46>
    1426:	12 16       	cp	r1, r18
    1428:	13 06       	cpc	r1, r19
    142a:	e4 07       	cpc	r30, r20
    142c:	f5 07       	cpc	r31, r21
    142e:	98 f0       	brcs	.+38     	; 0x1456 <__fp_cmp+0x46>
    1430:	62 1b       	sub	r22, r18
    1432:	73 0b       	sbc	r23, r19
    1434:	84 0b       	sbc	r24, r20
    1436:	95 0b       	sbc	r25, r21
    1438:	39 f4       	brne	.+14     	; 0x1448 <__fp_cmp+0x38>
    143a:	0a 26       	eor	r0, r26
    143c:	61 f0       	breq	.+24     	; 0x1456 <__fp_cmp+0x46>
    143e:	23 2b       	or	r18, r19
    1440:	24 2b       	or	r18, r20
    1442:	25 2b       	or	r18, r21
    1444:	21 f4       	brne	.+8      	; 0x144e <__fp_cmp+0x3e>
    1446:	08 95       	ret
    1448:	0a 26       	eor	r0, r26
    144a:	09 f4       	brne	.+2      	; 0x144e <__fp_cmp+0x3e>
    144c:	a1 40       	sbci	r26, 0x01	; 1
    144e:	a6 95       	lsr	r26
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	81 1d       	adc	r24, r1
    1454:	81 1d       	adc	r24, r1
    1456:	08 95       	ret

00001458 <__fp_inf>:
    1458:	97 f9       	bld	r25, 7
    145a:	9f 67       	ori	r25, 0x7F	; 127
    145c:	80 e8       	ldi	r24, 0x80	; 128
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	08 95       	ret

00001464 <__fp_nan>:
    1464:	9f ef       	ldi	r25, 0xFF	; 255
    1466:	80 ec       	ldi	r24, 0xC0	; 192
    1468:	08 95       	ret

0000146a <__fp_pscA>:
    146a:	00 24       	eor	r0, r0
    146c:	0a 94       	dec	r0
    146e:	16 16       	cp	r1, r22
    1470:	17 06       	cpc	r1, r23
    1472:	18 06       	cpc	r1, r24
    1474:	09 06       	cpc	r0, r25
    1476:	08 95       	ret

00001478 <__fp_pscB>:
    1478:	00 24       	eor	r0, r0
    147a:	0a 94       	dec	r0
    147c:	12 16       	cp	r1, r18
    147e:	13 06       	cpc	r1, r19
    1480:	14 06       	cpc	r1, r20
    1482:	05 06       	cpc	r0, r21
    1484:	08 95       	ret

00001486 <__fp_round>:
    1486:	09 2e       	mov	r0, r25
    1488:	03 94       	inc	r0
    148a:	00 0c       	add	r0, r0
    148c:	11 f4       	brne	.+4      	; 0x1492 <__fp_round+0xc>
    148e:	88 23       	and	r24, r24
    1490:	52 f0       	brmi	.+20     	; 0x14a6 <__fp_round+0x20>
    1492:	bb 0f       	add	r27, r27
    1494:	40 f4       	brcc	.+16     	; 0x14a6 <__fp_round+0x20>
    1496:	bf 2b       	or	r27, r31
    1498:	11 f4       	brne	.+4      	; 0x149e <__fp_round+0x18>
    149a:	60 ff       	sbrs	r22, 0
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <__fp_round+0x20>
    149e:	6f 5f       	subi	r22, 0xFF	; 255
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	08 95       	ret

000014a8 <__fp_split3>:
    14a8:	57 fd       	sbrc	r21, 7
    14aa:	90 58       	subi	r25, 0x80	; 128
    14ac:	44 0f       	add	r20, r20
    14ae:	55 1f       	adc	r21, r21
    14b0:	59 f0       	breq	.+22     	; 0x14c8 <__fp_splitA+0x10>
    14b2:	5f 3f       	cpi	r21, 0xFF	; 255
    14b4:	71 f0       	breq	.+28     	; 0x14d2 <__fp_splitA+0x1a>
    14b6:	47 95       	ror	r20

000014b8 <__fp_splitA>:
    14b8:	88 0f       	add	r24, r24
    14ba:	97 fb       	bst	r25, 7
    14bc:	99 1f       	adc	r25, r25
    14be:	61 f0       	breq	.+24     	; 0x14d8 <__fp_splitA+0x20>
    14c0:	9f 3f       	cpi	r25, 0xFF	; 255
    14c2:	79 f0       	breq	.+30     	; 0x14e2 <__fp_splitA+0x2a>
    14c4:	87 95       	ror	r24
    14c6:	08 95       	ret
    14c8:	12 16       	cp	r1, r18
    14ca:	13 06       	cpc	r1, r19
    14cc:	14 06       	cpc	r1, r20
    14ce:	55 1f       	adc	r21, r21
    14d0:	f2 cf       	rjmp	.-28     	; 0x14b6 <__fp_split3+0xe>
    14d2:	46 95       	lsr	r20
    14d4:	f1 df       	rcall	.-30     	; 0x14b8 <__fp_splitA>
    14d6:	08 c0       	rjmp	.+16     	; 0x14e8 <__fp_splitA+0x30>
    14d8:	16 16       	cp	r1, r22
    14da:	17 06       	cpc	r1, r23
    14dc:	18 06       	cpc	r1, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	f1 cf       	rjmp	.-30     	; 0x14c4 <__fp_splitA+0xc>
    14e2:	86 95       	lsr	r24
    14e4:	71 05       	cpc	r23, r1
    14e6:	61 05       	cpc	r22, r1
    14e8:	08 94       	sec
    14ea:	08 95       	ret

000014ec <__fp_zero>:
    14ec:	e8 94       	clt

000014ee <__fp_szero>:
    14ee:	bb 27       	eor	r27, r27
    14f0:	66 27       	eor	r22, r22
    14f2:	77 27       	eor	r23, r23
    14f4:	cb 01       	movw	r24, r22
    14f6:	97 f9       	bld	r25, 7
    14f8:	08 95       	ret

000014fa <__mulsf3>:
    14fa:	0b d0       	rcall	.+22     	; 0x1512 <__mulsf3x>
    14fc:	c4 cf       	rjmp	.-120    	; 0x1486 <__fp_round>
    14fe:	b5 df       	rcall	.-150    	; 0x146a <__fp_pscA>
    1500:	28 f0       	brcs	.+10     	; 0x150c <__mulsf3+0x12>
    1502:	ba df       	rcall	.-140    	; 0x1478 <__fp_pscB>
    1504:	18 f0       	brcs	.+6      	; 0x150c <__mulsf3+0x12>
    1506:	95 23       	and	r25, r21
    1508:	09 f0       	breq	.+2      	; 0x150c <__mulsf3+0x12>
    150a:	a6 cf       	rjmp	.-180    	; 0x1458 <__fp_inf>
    150c:	ab cf       	rjmp	.-170    	; 0x1464 <__fp_nan>
    150e:	11 24       	eor	r1, r1
    1510:	ee cf       	rjmp	.-36     	; 0x14ee <__fp_szero>

00001512 <__mulsf3x>:
    1512:	ca df       	rcall	.-108    	; 0x14a8 <__fp_split3>
    1514:	a0 f3       	brcs	.-24     	; 0x14fe <__mulsf3+0x4>

00001516 <__mulsf3_pse>:
    1516:	95 9f       	mul	r25, r21
    1518:	d1 f3       	breq	.-12     	; 0x150e <__mulsf3+0x14>
    151a:	95 0f       	add	r25, r21
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	55 1f       	adc	r21, r21
    1520:	62 9f       	mul	r22, r18
    1522:	f0 01       	movw	r30, r0
    1524:	72 9f       	mul	r23, r18
    1526:	bb 27       	eor	r27, r27
    1528:	f0 0d       	add	r31, r0
    152a:	b1 1d       	adc	r27, r1
    152c:	63 9f       	mul	r22, r19
    152e:	aa 27       	eor	r26, r26
    1530:	f0 0d       	add	r31, r0
    1532:	b1 1d       	adc	r27, r1
    1534:	aa 1f       	adc	r26, r26
    1536:	64 9f       	mul	r22, r20
    1538:	66 27       	eor	r22, r22
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	66 1f       	adc	r22, r22
    1540:	82 9f       	mul	r24, r18
    1542:	22 27       	eor	r18, r18
    1544:	b0 0d       	add	r27, r0
    1546:	a1 1d       	adc	r26, r1
    1548:	62 1f       	adc	r22, r18
    154a:	73 9f       	mul	r23, r19
    154c:	b0 0d       	add	r27, r0
    154e:	a1 1d       	adc	r26, r1
    1550:	62 1f       	adc	r22, r18
    1552:	83 9f       	mul	r24, r19
    1554:	a0 0d       	add	r26, r0
    1556:	61 1d       	adc	r22, r1
    1558:	22 1f       	adc	r18, r18
    155a:	74 9f       	mul	r23, r20
    155c:	33 27       	eor	r19, r19
    155e:	a0 0d       	add	r26, r0
    1560:	61 1d       	adc	r22, r1
    1562:	23 1f       	adc	r18, r19
    1564:	84 9f       	mul	r24, r20
    1566:	60 0d       	add	r22, r0
    1568:	21 1d       	adc	r18, r1
    156a:	82 2f       	mov	r24, r18
    156c:	76 2f       	mov	r23, r22
    156e:	6a 2f       	mov	r22, r26
    1570:	11 24       	eor	r1, r1
    1572:	9f 57       	subi	r25, 0x7F	; 127
    1574:	50 40       	sbci	r21, 0x00	; 0
    1576:	8a f0       	brmi	.+34     	; 0x159a <__mulsf3_pse+0x84>
    1578:	e1 f0       	breq	.+56     	; 0x15b2 <__mulsf3_pse+0x9c>
    157a:	88 23       	and	r24, r24
    157c:	4a f0       	brmi	.+18     	; 0x1590 <__mulsf3_pse+0x7a>
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	bb 1f       	adc	r27, r27
    1584:	66 1f       	adc	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	88 1f       	adc	r24, r24
    158a:	91 50       	subi	r25, 0x01	; 1
    158c:	50 40       	sbci	r21, 0x00	; 0
    158e:	a9 f7       	brne	.-22     	; 0x157a <__mulsf3_pse+0x64>
    1590:	9e 3f       	cpi	r25, 0xFE	; 254
    1592:	51 05       	cpc	r21, r1
    1594:	70 f0       	brcs	.+28     	; 0x15b2 <__mulsf3_pse+0x9c>
    1596:	60 cf       	rjmp	.-320    	; 0x1458 <__fp_inf>
    1598:	aa cf       	rjmp	.-172    	; 0x14ee <__fp_szero>
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	ec f3       	brlt	.-6      	; 0x1598 <__mulsf3_pse+0x82>
    159e:	98 3e       	cpi	r25, 0xE8	; 232
    15a0:	dc f3       	brlt	.-10     	; 0x1598 <__mulsf3_pse+0x82>
    15a2:	86 95       	lsr	r24
    15a4:	77 95       	ror	r23
    15a6:	67 95       	ror	r22
    15a8:	b7 95       	ror	r27
    15aa:	f7 95       	ror	r31
    15ac:	e7 95       	ror	r30
    15ae:	9f 5f       	subi	r25, 0xFF	; 255
    15b0:	c1 f7       	brne	.-16     	; 0x15a2 <__mulsf3_pse+0x8c>
    15b2:	fe 2b       	or	r31, r30
    15b4:	88 0f       	add	r24, r24
    15b6:	91 1d       	adc	r25, r1
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <pow>:
    15c0:	fa 01       	movw	r30, r20
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	30 96       	adiw	r30, 0x00	; 0
    15c8:	21 05       	cpc	r18, r1
    15ca:	31 05       	cpc	r19, r1
    15cc:	99 f1       	breq	.+102    	; 0x1634 <pow+0x74>
    15ce:	61 15       	cp	r22, r1
    15d0:	71 05       	cpc	r23, r1
    15d2:	61 f4       	brne	.+24     	; 0x15ec <pow+0x2c>
    15d4:	80 38       	cpi	r24, 0x80	; 128
    15d6:	bf e3       	ldi	r27, 0x3F	; 63
    15d8:	9b 07       	cpc	r25, r27
    15da:	49 f1       	breq	.+82     	; 0x162e <pow+0x6e>
    15dc:	68 94       	set
    15de:	90 38       	cpi	r25, 0x80	; 128
    15e0:	81 05       	cpc	r24, r1
    15e2:	61 f0       	breq	.+24     	; 0x15fc <pow+0x3c>
    15e4:	80 38       	cpi	r24, 0x80	; 128
    15e6:	bf ef       	ldi	r27, 0xFF	; 255
    15e8:	9b 07       	cpc	r25, r27
    15ea:	41 f0       	breq	.+16     	; 0x15fc <pow+0x3c>
    15ec:	99 23       	and	r25, r25
    15ee:	42 f5       	brpl	.+80     	; 0x1640 <pow+0x80>
    15f0:	ff 3f       	cpi	r31, 0xFF	; 255
    15f2:	e1 05       	cpc	r30, r1
    15f4:	31 05       	cpc	r19, r1
    15f6:	21 05       	cpc	r18, r1
    15f8:	11 f1       	breq	.+68     	; 0x163e <pow+0x7e>
    15fa:	e8 94       	clt
    15fc:	08 94       	sec
    15fe:	e7 95       	ror	r30
    1600:	d9 01       	movw	r26, r18
    1602:	aa 23       	and	r26, r26
    1604:	29 f4       	brne	.+10     	; 0x1610 <pow+0x50>
    1606:	ab 2f       	mov	r26, r27
    1608:	be 2f       	mov	r27, r30
    160a:	f8 5f       	subi	r31, 0xF8	; 248
    160c:	d0 f3       	brcs	.-12     	; 0x1602 <pow+0x42>
    160e:	10 c0       	rjmp	.+32     	; 0x1630 <pow+0x70>
    1610:	ff 5f       	subi	r31, 0xFF	; 255
    1612:	70 f4       	brcc	.+28     	; 0x1630 <pow+0x70>
    1614:	a6 95       	lsr	r26
    1616:	e0 f7       	brcc	.-8      	; 0x1610 <pow+0x50>
    1618:	f7 39       	cpi	r31, 0x97	; 151
    161a:	50 f0       	brcs	.+20     	; 0x1630 <pow+0x70>
    161c:	19 f0       	breq	.+6      	; 0x1624 <pow+0x64>
    161e:	ff 3a       	cpi	r31, 0xAF	; 175
    1620:	38 f4       	brcc	.+14     	; 0x1630 <pow+0x70>
    1622:	9f 77       	andi	r25, 0x7F	; 127
    1624:	9f 93       	push	r25
    1626:	0c d0       	rcall	.+24     	; 0x1640 <pow+0x80>
    1628:	0f 90       	pop	r0
    162a:	07 fc       	sbrc	r0, 7
    162c:	90 58       	subi	r25, 0x80	; 128
    162e:	08 95       	ret
    1630:	3e f0       	brts	.+14     	; 0x1640 <pow+0x80>
    1632:	18 cf       	rjmp	.-464    	; 0x1464 <__fp_nan>
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	80 e8       	ldi	r24, 0x80	; 128
    163a:	9f e3       	ldi	r25, 0x3F	; 63
    163c:	08 95       	ret
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	9f 77       	andi	r25, 0x7F	; 127
    1642:	5f 93       	push	r21
    1644:	4f 93       	push	r20
    1646:	3f 93       	push	r19
    1648:	2f 93       	push	r18
    164a:	9e d0       	rcall	.+316    	; 0x1788 <log>
    164c:	2f 91       	pop	r18
    164e:	3f 91       	pop	r19
    1650:	4f 91       	pop	r20
    1652:	5f 91       	pop	r21
    1654:	52 df       	rcall	.-348    	; 0x14fa <__mulsf3>
    1656:	05 c0       	rjmp	.+10     	; 0x1662 <exp>
    1658:	19 f4       	brne	.+6      	; 0x1660 <pow+0xa0>
    165a:	0e f0       	brts	.+2      	; 0x165e <pow+0x9e>
    165c:	fd ce       	rjmp	.-518    	; 0x1458 <__fp_inf>
    165e:	46 cf       	rjmp	.-372    	; 0x14ec <__fp_zero>
    1660:	01 cf       	rjmp	.-510    	; 0x1464 <__fp_nan>

00001662 <exp>:
    1662:	2a df       	rcall	.-428    	; 0x14b8 <__fp_splitA>
    1664:	c8 f3       	brcs	.-14     	; 0x1658 <pow+0x98>
    1666:	96 38       	cpi	r25, 0x86	; 134
    1668:	c0 f7       	brcc	.-16     	; 0x165a <pow+0x9a>
    166a:	07 f8       	bld	r0, 7
    166c:	0f 92       	push	r0
    166e:	e8 94       	clt
    1670:	2b e3       	ldi	r18, 0x3B	; 59
    1672:	3a ea       	ldi	r19, 0xAA	; 170
    1674:	48 eb       	ldi	r20, 0xB8	; 184
    1676:	5f e7       	ldi	r21, 0x7F	; 127
    1678:	4e df       	rcall	.-356    	; 0x1516 <__mulsf3_pse>
    167a:	0f 92       	push	r0
    167c:	0f 92       	push	r0
    167e:	0f 92       	push	r0
    1680:	4d b7       	in	r20, 0x3d	; 61
    1682:	5e b7       	in	r21, 0x3e	; 62
    1684:	0f 92       	push	r0
    1686:	c0 d0       	rcall	.+384    	; 0x1808 <modf>
    1688:	e4 ee       	ldi	r30, 0xE4	; 228
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	16 d0       	rcall	.+44     	; 0x16ba <__fp_powser>
    168e:	4f 91       	pop	r20
    1690:	5f 91       	pop	r21
    1692:	ef 91       	pop	r30
    1694:	ff 91       	pop	r31
    1696:	e5 95       	asr	r30
    1698:	ee 1f       	adc	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	49 f0       	breq	.+18     	; 0x16b0 <exp+0x4e>
    169e:	fe 57       	subi	r31, 0x7E	; 126
    16a0:	e0 68       	ori	r30, 0x80	; 128
    16a2:	44 27       	eor	r20, r20
    16a4:	ee 0f       	add	r30, r30
    16a6:	44 1f       	adc	r20, r20
    16a8:	fa 95       	dec	r31
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <exp+0x42>
    16ac:	41 95       	neg	r20
    16ae:	55 0b       	sbc	r21, r21
    16b0:	32 d0       	rcall	.+100    	; 0x1716 <ldexp>
    16b2:	0f 90       	pop	r0
    16b4:	07 fe       	sbrs	r0, 7
    16b6:	26 c0       	rjmp	.+76     	; 0x1704 <inverse>
    16b8:	08 95       	ret

000016ba <__fp_powser>:
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	1f 93       	push	r17
    16c0:	0f 93       	push	r16
    16c2:	ff 92       	push	r15
    16c4:	ef 92       	push	r14
    16c6:	df 92       	push	r13
    16c8:	7b 01       	movw	r14, r22
    16ca:	8c 01       	movw	r16, r24
    16cc:	68 94       	set
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <__fp_powser+0x20>
    16d0:	da 2e       	mov	r13, r26
    16d2:	ef 01       	movw	r28, r30
    16d4:	1e df       	rcall	.-452    	; 0x1512 <__mulsf3x>
    16d6:	fe 01       	movw	r30, r28
    16d8:	e8 94       	clt
    16da:	a5 91       	lpm	r26, Z+
    16dc:	25 91       	lpm	r18, Z+
    16de:	35 91       	lpm	r19, Z+
    16e0:	45 91       	lpm	r20, Z+
    16e2:	55 91       	lpm	r21, Z+
    16e4:	ae f3       	brts	.-22     	; 0x16d0 <__fp_powser+0x16>
    16e6:	ef 01       	movw	r28, r30
    16e8:	ce dd       	rcall	.-1124   	; 0x1286 <__addsf3x>
    16ea:	fe 01       	movw	r30, r28
    16ec:	97 01       	movw	r18, r14
    16ee:	a8 01       	movw	r20, r16
    16f0:	da 94       	dec	r13
    16f2:	79 f7       	brne	.-34     	; 0x16d2 <__fp_powser+0x18>
    16f4:	df 90       	pop	r13
    16f6:	ef 90       	pop	r14
    16f8:	ff 90       	pop	r15
    16fa:	0f 91       	pop	r16
    16fc:	1f 91       	pop	r17
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <inverse>:
    1704:	9b 01       	movw	r18, r22
    1706:	ac 01       	movw	r20, r24
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	80 e8       	ldi	r24, 0x80	; 128
    170e:	9f e3       	ldi	r25, 0x3F	; 63
    1710:	ae c0       	rjmp	.+348    	; 0x186e <__divsf3>
    1712:	a2 ce       	rjmp	.-700    	; 0x1458 <__fp_inf>
    1714:	14 c1       	rjmp	.+552    	; 0x193e <__fp_mpack>

00001716 <ldexp>:
    1716:	d0 de       	rcall	.-608    	; 0x14b8 <__fp_splitA>
    1718:	e8 f3       	brcs	.-6      	; 0x1714 <inverse+0x10>
    171a:	99 23       	and	r25, r25
    171c:	d9 f3       	breq	.-10     	; 0x1714 <inverse+0x10>
    171e:	94 0f       	add	r25, r20
    1720:	51 1d       	adc	r21, r1
    1722:	bb f3       	brvs	.-18     	; 0x1712 <inverse+0xe>
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	94 f0       	brlt	.+36     	; 0x174e <ldexp+0x38>
    172a:	59 f0       	breq	.+22     	; 0x1742 <ldexp+0x2c>
    172c:	88 23       	and	r24, r24
    172e:	32 f0       	brmi	.+12     	; 0x173c <ldexp+0x26>
    1730:	66 0f       	add	r22, r22
    1732:	77 1f       	adc	r23, r23
    1734:	88 1f       	adc	r24, r24
    1736:	91 50       	subi	r25, 0x01	; 1
    1738:	50 40       	sbci	r21, 0x00	; 0
    173a:	c1 f7       	brne	.-16     	; 0x172c <ldexp+0x16>
    173c:	9e 3f       	cpi	r25, 0xFE	; 254
    173e:	51 05       	cpc	r21, r1
    1740:	44 f7       	brge	.-48     	; 0x1712 <inverse+0xe>
    1742:	88 0f       	add	r24, r24
    1744:	91 1d       	adc	r25, r1
    1746:	96 95       	lsr	r25
    1748:	87 95       	ror	r24
    174a:	97 f9       	bld	r25, 7
    174c:	08 95       	ret
    174e:	5f 3f       	cpi	r21, 0xFF	; 255
    1750:	ac f0       	brlt	.+42     	; 0x177c <ldexp+0x66>
    1752:	98 3e       	cpi	r25, 0xE8	; 232
    1754:	9c f0       	brlt	.+38     	; 0x177c <ldexp+0x66>
    1756:	bb 27       	eor	r27, r27
    1758:	86 95       	lsr	r24
    175a:	77 95       	ror	r23
    175c:	67 95       	ror	r22
    175e:	b7 95       	ror	r27
    1760:	08 f4       	brcc	.+2      	; 0x1764 <ldexp+0x4e>
    1762:	b1 60       	ori	r27, 0x01	; 1
    1764:	93 95       	inc	r25
    1766:	c1 f7       	brne	.-16     	; 0x1758 <ldexp+0x42>
    1768:	bb 0f       	add	r27, r27
    176a:	58 f7       	brcc	.-42     	; 0x1742 <ldexp+0x2c>
    176c:	11 f4       	brne	.+4      	; 0x1772 <ldexp+0x5c>
    176e:	60 ff       	sbrs	r22, 0
    1770:	e8 cf       	rjmp	.-48     	; 0x1742 <ldexp+0x2c>
    1772:	6f 5f       	subi	r22, 0xFF	; 255
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	8f 4f       	sbci	r24, 0xFF	; 255
    1778:	9f 4f       	sbci	r25, 0xFF	; 255
    177a:	e3 cf       	rjmp	.-58     	; 0x1742 <ldexp+0x2c>
    177c:	b8 ce       	rjmp	.-656    	; 0x14ee <__fp_szero>
    177e:	0e f0       	brts	.+2      	; 0x1782 <ldexp+0x6c>
    1780:	de c0       	rjmp	.+444    	; 0x193e <__fp_mpack>
    1782:	70 ce       	rjmp	.-800    	; 0x1464 <__fp_nan>
    1784:	68 94       	set
    1786:	68 ce       	rjmp	.-816    	; 0x1458 <__fp_inf>

00001788 <log>:
    1788:	97 de       	rcall	.-722    	; 0x14b8 <__fp_splitA>
    178a:	c8 f3       	brcs	.-14     	; 0x177e <ldexp+0x68>
    178c:	99 23       	and	r25, r25
    178e:	d1 f3       	breq	.-12     	; 0x1784 <ldexp+0x6e>
    1790:	c6 f3       	brts	.-16     	; 0x1782 <ldexp+0x6c>
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	1f 93       	push	r17
    1798:	0f 93       	push	r16
    179a:	ff 92       	push	r15
    179c:	c9 2f       	mov	r28, r25
    179e:	dd 27       	eor	r29, r29
    17a0:	88 23       	and	r24, r24
    17a2:	2a f0       	brmi	.+10     	; 0x17ae <log+0x26>
    17a4:	21 97       	sbiw	r28, 0x01	; 1
    17a6:	66 0f       	add	r22, r22
    17a8:	77 1f       	adc	r23, r23
    17aa:	88 1f       	adc	r24, r24
    17ac:	da f7       	brpl	.-10     	; 0x17a4 <log+0x1c>
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f eb       	ldi	r21, 0xBF	; 191
    17b6:	9f e3       	ldi	r25, 0x3F	; 63
    17b8:	88 39       	cpi	r24, 0x98	; 152
    17ba:	20 f0       	brcs	.+8      	; 0x17c4 <log+0x3c>
    17bc:	80 3e       	cpi	r24, 0xE0	; 224
    17be:	30 f0       	brcs	.+12     	; 0x17cc <log+0x44>
    17c0:	21 96       	adiw	r28, 0x01	; 1
    17c2:	8f 77       	andi	r24, 0x7F	; 127
    17c4:	4f dd       	rcall	.-1378   	; 0x1264 <__addsf3>
    17c6:	ec e0       	ldi	r30, 0x0C	; 12
    17c8:	f1 e0       	ldi	r31, 0x01	; 1
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <log+0x4a>
    17cc:	4b dd       	rcall	.-1386   	; 0x1264 <__addsf3>
    17ce:	e9 e3       	ldi	r30, 0x39	; 57
    17d0:	f1 e0       	ldi	r31, 0x01	; 1
    17d2:	73 df       	rcall	.-282    	; 0x16ba <__fp_powser>
    17d4:	8b 01       	movw	r16, r22
    17d6:	be 01       	movw	r22, r28
    17d8:	ec 01       	movw	r28, r24
    17da:	fb 2e       	mov	r15, r27
    17dc:	6f 57       	subi	r22, 0x7F	; 127
    17de:	71 09       	sbc	r23, r1
    17e0:	75 95       	asr	r23
    17e2:	77 1f       	adc	r23, r23
    17e4:	88 0b       	sbc	r24, r24
    17e6:	99 0b       	sbc	r25, r25
    17e8:	d8 dd       	rcall	.-1104   	; 0x139a <__floatsisf>
    17ea:	28 e1       	ldi	r18, 0x18	; 24
    17ec:	32 e7       	ldi	r19, 0x72	; 114
    17ee:	41 e3       	ldi	r20, 0x31	; 49
    17f0:	5f e3       	ldi	r21, 0x3F	; 63
    17f2:	8f de       	rcall	.-738    	; 0x1512 <__mulsf3x>
    17f4:	af 2d       	mov	r26, r15
    17f6:	98 01       	movw	r18, r16
    17f8:	ae 01       	movw	r20, r28
    17fa:	ff 90       	pop	r15
    17fc:	0f 91       	pop	r16
    17fe:	1f 91       	pop	r17
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	40 dd       	rcall	.-1408   	; 0x1286 <__addsf3x>
    1806:	3f ce       	rjmp	.-898    	; 0x1486 <__fp_round>

00001808 <modf>:
    1808:	fa 01       	movw	r30, r20
    180a:	dc 01       	movw	r26, r24
    180c:	aa 0f       	add	r26, r26
    180e:	bb 1f       	adc	r27, r27
    1810:	9b 01       	movw	r18, r22
    1812:	ac 01       	movw	r20, r24
    1814:	bf 57       	subi	r27, 0x7F	; 127
    1816:	28 f4       	brcc	.+10     	; 0x1822 <modf+0x1a>
    1818:	22 27       	eor	r18, r18
    181a:	33 27       	eor	r19, r19
    181c:	44 27       	eor	r20, r20
    181e:	50 78       	andi	r21, 0x80	; 128
    1820:	1f c0       	rjmp	.+62     	; 0x1860 <modf+0x58>
    1822:	b7 51       	subi	r27, 0x17	; 23
    1824:	88 f4       	brcc	.+34     	; 0x1848 <modf+0x40>
    1826:	ab 2f       	mov	r26, r27
    1828:	00 24       	eor	r0, r0
    182a:	46 95       	lsr	r20
    182c:	37 95       	ror	r19
    182e:	27 95       	ror	r18
    1830:	01 1c       	adc	r0, r1
    1832:	a3 95       	inc	r26
    1834:	d2 f3       	brmi	.-12     	; 0x182a <modf+0x22>
    1836:	00 20       	and	r0, r0
    1838:	69 f0       	breq	.+26     	; 0x1854 <modf+0x4c>
    183a:	22 0f       	add	r18, r18
    183c:	33 1f       	adc	r19, r19
    183e:	44 1f       	adc	r20, r20
    1840:	b3 95       	inc	r27
    1842:	da f3       	brmi	.-10     	; 0x183a <modf+0x32>
    1844:	0d d0       	rcall	.+26     	; 0x1860 <modf+0x58>
    1846:	0d cd       	rjmp	.-1510   	; 0x1262 <__subsf3>
    1848:	61 30       	cpi	r22, 0x01	; 1
    184a:	71 05       	cpc	r23, r1
    184c:	a0 e8       	ldi	r26, 0x80	; 128
    184e:	8a 07       	cpc	r24, r26
    1850:	b9 46       	sbci	r27, 0x69	; 105
    1852:	30 f4       	brcc	.+12     	; 0x1860 <modf+0x58>
    1854:	9b 01       	movw	r18, r22
    1856:	ac 01       	movw	r20, r24
    1858:	66 27       	eor	r22, r22
    185a:	77 27       	eor	r23, r23
    185c:	88 27       	eor	r24, r24
    185e:	90 78       	andi	r25, 0x80	; 128
    1860:	30 96       	adiw	r30, 0x00	; 0
    1862:	21 f0       	breq	.+8      	; 0x186c <modf+0x64>
    1864:	20 83       	st	Z, r18
    1866:	31 83       	std	Z+1, r19	; 0x01
    1868:	42 83       	std	Z+2, r20	; 0x02
    186a:	53 83       	std	Z+3, r21	; 0x03
    186c:	08 95       	ret

0000186e <__divsf3>:
    186e:	0c d0       	rcall	.+24     	; 0x1888 <__divsf3x>
    1870:	0a ce       	rjmp	.-1004   	; 0x1486 <__fp_round>
    1872:	02 de       	rcall	.-1020   	; 0x1478 <__fp_pscB>
    1874:	40 f0       	brcs	.+16     	; 0x1886 <__divsf3+0x18>
    1876:	f9 dd       	rcall	.-1038   	; 0x146a <__fp_pscA>
    1878:	30 f0       	brcs	.+12     	; 0x1886 <__divsf3+0x18>
    187a:	21 f4       	brne	.+8      	; 0x1884 <__divsf3+0x16>
    187c:	5f 3f       	cpi	r21, 0xFF	; 255
    187e:	19 f0       	breq	.+6      	; 0x1886 <__divsf3+0x18>
    1880:	eb cd       	rjmp	.-1066   	; 0x1458 <__fp_inf>
    1882:	51 11       	cpse	r21, r1
    1884:	34 ce       	rjmp	.-920    	; 0x14ee <__fp_szero>
    1886:	ee cd       	rjmp	.-1060   	; 0x1464 <__fp_nan>

00001888 <__divsf3x>:
    1888:	0f de       	rcall	.-994    	; 0x14a8 <__fp_split3>
    188a:	98 f3       	brcs	.-26     	; 0x1872 <__divsf3+0x4>

0000188c <__divsf3_pse>:
    188c:	99 23       	and	r25, r25
    188e:	c9 f3       	breq	.-14     	; 0x1882 <__divsf3+0x14>
    1890:	55 23       	and	r21, r21
    1892:	b1 f3       	breq	.-20     	; 0x1880 <__divsf3+0x12>
    1894:	95 1b       	sub	r25, r21
    1896:	55 0b       	sbc	r21, r21
    1898:	bb 27       	eor	r27, r27
    189a:	aa 27       	eor	r26, r26
    189c:	62 17       	cp	r22, r18
    189e:	73 07       	cpc	r23, r19
    18a0:	84 07       	cpc	r24, r20
    18a2:	38 f0       	brcs	.+14     	; 0x18b2 <__divsf3_pse+0x26>
    18a4:	9f 5f       	subi	r25, 0xFF	; 255
    18a6:	5f 4f       	sbci	r21, 0xFF	; 255
    18a8:	22 0f       	add	r18, r18
    18aa:	33 1f       	adc	r19, r19
    18ac:	44 1f       	adc	r20, r20
    18ae:	aa 1f       	adc	r26, r26
    18b0:	a9 f3       	breq	.-22     	; 0x189c <__divsf3_pse+0x10>
    18b2:	33 d0       	rcall	.+102    	; 0x191a <__divsf3_pse+0x8e>
    18b4:	0e 2e       	mov	r0, r30
    18b6:	3a f0       	brmi	.+14     	; 0x18c6 <__divsf3_pse+0x3a>
    18b8:	e0 e8       	ldi	r30, 0x80	; 128
    18ba:	30 d0       	rcall	.+96     	; 0x191c <__divsf3_pse+0x90>
    18bc:	91 50       	subi	r25, 0x01	; 1
    18be:	50 40       	sbci	r21, 0x00	; 0
    18c0:	e6 95       	lsr	r30
    18c2:	00 1c       	adc	r0, r0
    18c4:	ca f7       	brpl	.-14     	; 0x18b8 <__divsf3_pse+0x2c>
    18c6:	29 d0       	rcall	.+82     	; 0x191a <__divsf3_pse+0x8e>
    18c8:	fe 2f       	mov	r31, r30
    18ca:	27 d0       	rcall	.+78     	; 0x191a <__divsf3_pse+0x8e>
    18cc:	66 0f       	add	r22, r22
    18ce:	77 1f       	adc	r23, r23
    18d0:	88 1f       	adc	r24, r24
    18d2:	bb 1f       	adc	r27, r27
    18d4:	26 17       	cp	r18, r22
    18d6:	37 07       	cpc	r19, r23
    18d8:	48 07       	cpc	r20, r24
    18da:	ab 07       	cpc	r26, r27
    18dc:	b0 e8       	ldi	r27, 0x80	; 128
    18de:	09 f0       	breq	.+2      	; 0x18e2 <__divsf3_pse+0x56>
    18e0:	bb 0b       	sbc	r27, r27
    18e2:	80 2d       	mov	r24, r0
    18e4:	bf 01       	movw	r22, r30
    18e6:	ff 27       	eor	r31, r31
    18e8:	93 58       	subi	r25, 0x83	; 131
    18ea:	5f 4f       	sbci	r21, 0xFF	; 255
    18ec:	2a f0       	brmi	.+10     	; 0x18f8 <__divsf3_pse+0x6c>
    18ee:	9e 3f       	cpi	r25, 0xFE	; 254
    18f0:	51 05       	cpc	r21, r1
    18f2:	68 f0       	brcs	.+26     	; 0x190e <__divsf3_pse+0x82>
    18f4:	b1 cd       	rjmp	.-1182   	; 0x1458 <__fp_inf>
    18f6:	fb cd       	rjmp	.-1034   	; 0x14ee <__fp_szero>
    18f8:	5f 3f       	cpi	r21, 0xFF	; 255
    18fa:	ec f3       	brlt	.-6      	; 0x18f6 <__divsf3_pse+0x6a>
    18fc:	98 3e       	cpi	r25, 0xE8	; 232
    18fe:	dc f3       	brlt	.-10     	; 0x18f6 <__divsf3_pse+0x6a>
    1900:	86 95       	lsr	r24
    1902:	77 95       	ror	r23
    1904:	67 95       	ror	r22
    1906:	b7 95       	ror	r27
    1908:	f7 95       	ror	r31
    190a:	9f 5f       	subi	r25, 0xFF	; 255
    190c:	c9 f7       	brne	.-14     	; 0x1900 <__divsf3_pse+0x74>
    190e:	88 0f       	add	r24, r24
    1910:	91 1d       	adc	r25, r1
    1912:	96 95       	lsr	r25
    1914:	87 95       	ror	r24
    1916:	97 f9       	bld	r25, 7
    1918:	08 95       	ret
    191a:	e1 e0       	ldi	r30, 0x01	; 1
    191c:	66 0f       	add	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	88 1f       	adc	r24, r24
    1922:	bb 1f       	adc	r27, r27
    1924:	62 17       	cp	r22, r18
    1926:	73 07       	cpc	r23, r19
    1928:	84 07       	cpc	r24, r20
    192a:	ba 07       	cpc	r27, r26
    192c:	20 f0       	brcs	.+8      	; 0x1936 <__divsf3_pse+0xaa>
    192e:	62 1b       	sub	r22, r18
    1930:	73 0b       	sbc	r23, r19
    1932:	84 0b       	sbc	r24, r20
    1934:	ba 0b       	sbc	r27, r26
    1936:	ee 1f       	adc	r30, r30
    1938:	88 f7       	brcc	.-30     	; 0x191c <__divsf3_pse+0x90>
    193a:	e0 95       	com	r30
    193c:	08 95       	ret

0000193e <__fp_mpack>:
    193e:	9f 3f       	cpi	r25, 0xFF	; 255
    1940:	31 f0       	breq	.+12     	; 0x194e <__fp_mpack_finite+0xc>

00001942 <__fp_mpack_finite>:
    1942:	91 50       	subi	r25, 0x01	; 1
    1944:	20 f4       	brcc	.+8      	; 0x194e <__fp_mpack_finite+0xc>
    1946:	87 95       	ror	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	b7 95       	ror	r27
    194e:	88 0f       	add	r24, r24
    1950:	91 1d       	adc	r25, r1
    1952:	96 95       	lsr	r25
    1954:	87 95       	ror	r24
    1956:	97 f9       	bld	r25, 7
    1958:	08 95       	ret

0000195a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    195a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    195c:	91 8d       	ldd	r25, Z+25	; 0x19
    195e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1960:	89 2f       	mov	r24, r25
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	80 5c       	subi	r24, 0xC0	; 192
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	82 1b       	sub	r24, r18
    196a:	91 09       	sbc	r25, r1
}
    196c:	8f 73       	andi	r24, 0x3F	; 63
    196e:	99 27       	eor	r25, r25
    1970:	08 95       	ret

00001972 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1972:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1974:	91 8d       	ldd	r25, Z+25	; 0x19
    1976:	82 8d       	ldd	r24, Z+26	; 0x1a
    1978:	98 17       	cp	r25, r24
    197a:	31 f0       	breq	.+12     	; 0x1988 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    197c:	82 8d       	ldd	r24, Z+26	; 0x1a
    197e:	e8 0f       	add	r30, r24
    1980:	f1 1d       	adc	r31, r1
    1982:	85 8d       	ldd	r24, Z+29	; 0x1d
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    198c:	08 95       	ret

0000198e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    198e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1990:	91 8d       	ldd	r25, Z+25	; 0x19
    1992:	82 8d       	ldd	r24, Z+26	; 0x1a
    1994:	98 17       	cp	r25, r24
    1996:	61 f0       	breq	.+24     	; 0x19b0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1998:	82 8d       	ldd	r24, Z+26	; 0x1a
    199a:	df 01       	movw	r26, r30
    199c:	a8 0f       	add	r26, r24
    199e:	b1 1d       	adc	r27, r1
    19a0:	5d 96       	adiw	r26, 0x1d	; 29
    19a2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    19a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    19a6:	9f 5f       	subi	r25, 0xFF	; 255
    19a8:	9f 73       	andi	r25, 0x3F	; 63
    19aa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    19b4:	08 95       	ret

000019b6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    19b6:	fc 01       	movw	r30, r24
    19b8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    19ba:	44 8d       	ldd	r20, Z+28	; 0x1c
    19bc:	25 2f       	mov	r18, r21
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	84 2f       	mov	r24, r20
    19c2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    19c4:	82 1b       	sub	r24, r18
    19c6:	93 0b       	sbc	r25, r19
    19c8:	54 17       	cp	r21, r20
    19ca:	10 f0       	brcs	.+4      	; 0x19d0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    19cc:	cf 96       	adiw	r24, 0x3f	; 63
    19ce:	08 95       	ret
  return tail - head - 1;
    19d0:	01 97       	sbiw	r24, 0x01	; 1
}
    19d2:	08 95       	ret

000019d4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    19d4:	8c e7       	ldi	r24, 0x7C	; 124
    19d6:	9e e0       	ldi	r25, 0x0E	; 14
    19d8:	89 2b       	or	r24, r25
    19da:	39 f0       	breq	.+14     	; 0x19ea <_Z14serialEventRunv+0x16>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	89 2b       	or	r24, r25
    19e2:	19 f0       	breq	.+6      	; 0x19ea <_Z14serialEventRunv+0x16>
    19e4:	89 d1       	rcall	.+786    	; 0x1cf8 <_Z17Serial0_availablev>
    19e6:	81 11       	cpse	r24, r1
    19e8:	24 c0       	rjmp	.+72     	; 0x1a32 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    19ea:	81 e1       	ldi	r24, 0x11	; 17
    19ec:	9f e0       	ldi	r25, 0x0F	; 15
    19ee:	89 2b       	or	r24, r25
    19f0:	39 f0       	breq	.+14     	; 0x1a00 <_Z14serialEventRunv+0x2c>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	89 2b       	or	r24, r25
    19f8:	19 f0       	breq	.+6      	; 0x1a00 <_Z14serialEventRunv+0x2c>
    19fa:	13 d2       	rcall	.+1062   	; 0x1e22 <_Z17Serial1_availablev>
    19fc:	81 11       	cpse	r24, r1
    19fe:	1c c0       	rjmp	.+56     	; 0x1a38 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	89 2b       	or	r24, r25
    1a06:	41 f0       	breq	.+16     	; 0x1a18 <_Z14serialEventRunv+0x44>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	89 2b       	or	r24, r25
    1a0e:	21 f0       	breq	.+8      	; 0x1a18 <_Z14serialEventRunv+0x44>
    1a10:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a14:	81 11       	cpse	r24, r1
    1a16:	13 c0       	rjmp	.+38     	; 0x1a3e <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	89 2b       	or	r24, r25
    1a1e:	a1 f0       	breq	.+40     	; 0x1a48 <_Z14serialEventRunv+0x74>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	89 2b       	or	r24, r25
    1a26:	81 f0       	breq	.+32     	; 0x1a48 <_Z14serialEventRunv+0x74>
    1a28:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a2c:	81 11       	cpse	r24, r1
    1a2e:	0a c0       	rjmp	.+20     	; 0x1a44 <_Z14serialEventRunv+0x70>
    1a30:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1a32:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a36:	d9 cf       	rjmp	.-78     	; 0x19ea <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1a38:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a3c:	e1 cf       	rjmp	.-62     	; 0x1a00 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1a3e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a42:	ea cf       	rjmp	.-44     	; 0x1a18 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1a44:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1a48:	08 95       	ret

00001a4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1a4a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1a4c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a4e:	df 01       	movw	r26, r30
    1a50:	a8 0f       	add	r26, r24
    1a52:	b1 1d       	adc	r27, r1
    1a54:	a3 5a       	subi	r26, 0xA3	; 163
    1a56:	bf 4f       	sbci	r27, 0xFF	; 255
    1a58:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1a5a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	8f 73       	andi	r24, 0x3F	; 63
    1a62:	99 27       	eor	r25, r25
    1a64:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1a66:	a6 89       	ldd	r26, Z+22	; 0x16
    1a68:	b7 89       	ldd	r27, Z+23	; 0x17
    1a6a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a6c:	a0 89       	ldd	r26, Z+16	; 0x10
    1a6e:	b1 89       	ldd	r27, Z+17	; 0x11
    1a70:	8c 91       	ld	r24, X
    1a72:	83 70       	andi	r24, 0x03	; 3
    1a74:	80 64       	ori	r24, 0x40	; 64
    1a76:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1a78:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a7a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a7c:	98 13       	cpse	r25, r24
    1a7e:	06 c0       	rjmp	.+12     	; 0x1a8c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1a80:	02 88       	ldd	r0, Z+18	; 0x12
    1a82:	f3 89       	ldd	r31, Z+19	; 0x13
    1a84:	e0 2d       	mov	r30, r0
    1a86:	80 81       	ld	r24, Z
    1a88:	8f 7d       	andi	r24, 0xDF	; 223
    1a8a:	80 83       	st	Z, r24
    1a8c:	08 95       	ret

00001a8e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	ec 01       	movw	r28, r24
  _written = true;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1aa0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1aa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1aa4:	98 13       	cpse	r25, r24
    1aa6:	05 c0       	rjmp	.+10     	; 0x1ab2 <_ZN14HardwareSerial5writeEh+0x24>
    1aa8:	e8 89       	ldd	r30, Y+16	; 0x10
    1aaa:	f9 89       	ldd	r31, Y+17	; 0x11
    1aac:	80 81       	ld	r24, Z
    1aae:	85 fd       	sbrc	r24, 5
    1ab0:	25 c0       	rjmp	.+74     	; 0x1afc <_ZN14HardwareSerial5writeEh+0x6e>
    1ab2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1ab4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	0f 5f       	subi	r16, 0xFF	; 255
    1aba:	1f 4f       	sbci	r17, 0xFF	; 255
    1abc:	0f 73       	andi	r16, 0x3F	; 63
    1abe:	11 27       	eor	r17, r17
    1ac0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1ac2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ac4:	e8 12       	cpse	r14, r24
    1ac6:	0b c0       	rjmp	.+22     	; 0x1ade <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	07 fc       	sbrc	r0, 7
    1acc:	fa cf       	rjmp	.-12     	; 0x1ac2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1ace:	e8 89       	ldd	r30, Y+16	; 0x10
    1ad0:	f9 89       	ldd	r31, Y+17	; 0x11
    1ad2:	80 81       	ld	r24, Z
    1ad4:	85 ff       	sbrs	r24, 5
    1ad6:	f5 cf       	rjmp	.-22     	; 0x1ac2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1ad8:	ce 01       	movw	r24, r28
    1ada:	b7 df       	rcall	.-146    	; 0x1a4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1adc:	f2 cf       	rjmp	.-28     	; 0x1ac2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1ade:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e8 0f       	add	r30, r24
    1ae4:	f1 1d       	adc	r31, r1
    1ae6:	e3 5a       	subi	r30, 0xA3	; 163
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1aec:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1aee:	f8 94       	cli
    _tx_buffer_head = i;
    1af0:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1af2:	ea 89       	ldd	r30, Y+18	; 0x12
    1af4:	fb 89       	ldd	r31, Y+19	; 0x13
    1af6:	80 81       	ld	r24, Z
    1af8:	80 62       	ori	r24, 0x20	; 32
    1afa:	0a c0       	rjmp	.+20     	; 0x1b10 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1afc:	9f b7       	in	r25, 0x3f	; 63
    1afe:	f8 94       	cli
      *_udr = c;
    1b00:	ee 89       	ldd	r30, Y+22	; 0x16
    1b02:	ff 89       	ldd	r31, Y+23	; 0x17
    1b04:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1b06:	e8 89       	ldd	r30, Y+16	; 0x10
    1b08:	f9 89       	ldd	r31, Y+17	; 0x11
    1b0a:	80 81       	ld	r24, Z
    1b0c:	83 70       	andi	r24, 0x03	; 3
    1b0e:	80 64       	ori	r24, 0x40	; 64
    1b10:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b12:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	08 95       	ret

00001b26 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1b2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b2e:	88 23       	and	r24, r24
    1b30:	c1 f0       	breq	.+48     	; 0x1b62 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b32:	ea 89       	ldd	r30, Y+18	; 0x12
    1b34:	fb 89       	ldd	r31, Y+19	; 0x13
    1b36:	80 81       	ld	r24, Z
    1b38:	85 fd       	sbrc	r24, 5
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <_ZN14HardwareSerial5flushEv+0x20>
    1b3c:	a8 89       	ldd	r26, Y+16	; 0x10
    1b3e:	b9 89       	ldd	r27, Y+17	; 0x11
    1b40:	8c 91       	ld	r24, X
    1b42:	86 fd       	sbrc	r24, 6
    1b44:	0e c0       	rjmp	.+28     	; 0x1b62 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	07 fc       	sbrc	r0, 7
    1b4a:	f5 cf       	rjmp	.-22     	; 0x1b36 <_ZN14HardwareSerial5flushEv+0x10>
    1b4c:	80 81       	ld	r24, Z
    1b4e:	85 ff       	sbrs	r24, 5
    1b50:	f2 cf       	rjmp	.-28     	; 0x1b36 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1b52:	a8 89       	ldd	r26, Y+16	; 0x10
    1b54:	b9 89       	ldd	r27, Y+17	; 0x11
    1b56:	8c 91       	ld	r24, X
    1b58:	85 ff       	sbrs	r24, 5
    1b5a:	ed cf       	rjmp	.-38     	; 0x1b36 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	75 df       	rcall	.-278    	; 0x1a4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b60:	e8 cf       	rjmp	.-48     	; 0x1b32 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	08 95       	ret

00001b68 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1b68:	cf 92       	push	r12
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	ec 01       	movw	r28, r24
    1b78:	6a 01       	movw	r12, r20
    1b7a:	7b 01       	movw	r14, r22
    1b7c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1b7e:	e8 89       	ldd	r30, Y+16	; 0x10
    1b80:	f9 89       	ldd	r31, Y+17	; 0x11
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b86:	41 15       	cp	r20, r1
    1b88:	51 4e       	sbci	r21, 0xE1	; 225
    1b8a:	61 05       	cpc	r22, r1
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	b1 f0       	breq	.+44     	; 0x1bbc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	79 e0       	ldi	r23, 0x09	; 9
    1b94:	8d e3       	ldi	r24, 0x3D	; 61
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a7 01       	movw	r20, r14
    1b9a:	96 01       	movw	r18, r12
    1b9c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__udivmodsi4>
    1ba0:	da 01       	movw	r26, r20
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	a1 09       	sbc	r26, r1
    1ba8:	b1 09       	sbc	r27, r1
    1baa:	b6 95       	lsr	r27
    1bac:	a7 95       	ror	r26
    1bae:	97 95       	ror	r25
    1bb0:	87 95       	ror	r24
    1bb2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1bb4:	21 15       	cp	r18, r1
    1bb6:	80 e1       	ldi	r24, 0x10	; 16
    1bb8:	38 07       	cpc	r19, r24
    1bba:	a8 f0       	brcs	.+42     	; 0x1be6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1bbc:	e8 89       	ldd	r30, Y+16	; 0x10
    1bbe:	f9 89       	ldd	r31, Y+17	; 0x11
    1bc0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1bc2:	60 e8       	ldi	r22, 0x80	; 128
    1bc4:	74 e8       	ldi	r23, 0x84	; 132
    1bc6:	8e e1       	ldi	r24, 0x1E	; 30
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a7 01       	movw	r20, r14
    1bcc:	96 01       	movw	r18, r12
    1bce:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__udivmodsi4>
    1bd2:	da 01       	movw	r26, r20
    1bd4:	c9 01       	movw	r24, r18
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	a1 09       	sbc	r26, r1
    1bda:	b1 09       	sbc	r27, r1
    1bdc:	b6 95       	lsr	r27
    1bde:	a7 95       	ror	r26
    1be0:	97 95       	ror	r25
    1be2:	87 95       	ror	r24
    1be4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1be6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1be8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bea:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1bec:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bee:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bf0:	20 83       	st	Z, r18

  _written = false;
    1bf2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1bf4:	ec 89       	ldd	r30, Y+20	; 0x14
    1bf6:	fd 89       	ldd	r31, Y+21	; 0x15
    1bf8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1bfa:	ea 89       	ldd	r30, Y+18	; 0x12
    1bfc:	fb 89       	ldd	r31, Y+19	; 0x13
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 61       	ori	r24, 0x10	; 16
    1c02:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1c04:	ea 89       	ldd	r30, Y+18	; 0x12
    1c06:	fb 89       	ldd	r31, Y+19	; 0x13
    1c08:	80 81       	ld	r24, Z
    1c0a:	88 60       	ori	r24, 0x08	; 8
    1c0c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1c0e:	ea 89       	ldd	r30, Y+18	; 0x12
    1c10:	fb 89       	ldd	r31, Y+19	; 0x13
    1c12:	80 81       	ld	r24, Z
    1c14:	80 68       	ori	r24, 0x80	; 128
    1c16:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1c18:	ea 89       	ldd	r30, Y+18	; 0x12
    1c1a:	fb 89       	ldd	r31, Y+19	; 0x13
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8f 7d       	andi	r24, 0xDF	; 223
    1c20:	80 83       	st	Z, r24
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	df 90       	pop	r13
    1c2e:	cf 90       	pop	r12
    1c30:	08 95       	ret

00001c32 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	08 95       	ret

00001c38 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1c38:	08 95       	ret

00001c3a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1c3a:	1f 92       	push	r1
    1c3c:	0f 92       	push	r0
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	0f 92       	push	r0
    1c42:	11 24       	eor	r1, r1
    1c44:	0b b6       	in	r0, 0x3b	; 59
    1c46:	0f 92       	push	r0
    1c48:	2f 93       	push	r18
    1c4a:	8f 93       	push	r24
    1c4c:	9f 93       	push	r25
    1c4e:	ef 93       	push	r30
    1c50:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1c52:	e0 91 28 04 	lds	r30, 0x0428	; 0x800428 <Serial+0x10>
    1c56:	f0 91 29 04 	lds	r31, 0x0429	; 0x800429 <Serial+0x11>
    1c5a:	80 81       	ld	r24, Z
    1c5c:	e0 91 2e 04 	lds	r30, 0x042E	; 0x80042e <Serial+0x16>
    1c60:	f0 91 2f 04 	lds	r31, 0x042F	; 0x80042f <Serial+0x17>
    1c64:	82 fd       	sbrc	r24, 2
    1c66:	12 c0       	rjmp	.+36     	; 0x1c8c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1c68:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1c6a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <Serial+0x19>
    1c6e:	8f 5f       	subi	r24, 0xFF	; 255
    1c70:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1c72:	20 91 32 04 	lds	r18, 0x0432	; 0x800432 <Serial+0x1a>
    1c76:	82 17       	cp	r24, r18
    1c78:	51 f0       	breq	.+20     	; 0x1c8e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1c7a:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <Serial+0x19>
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	e8 5e       	subi	r30, 0xE8	; 232
    1c82:	fb 4f       	sbci	r31, 0xFB	; 251
    1c84:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1c86:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <Serial+0x19>
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1c8c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1c8e:	ff 91       	pop	r31
    1c90:	ef 91       	pop	r30
    1c92:	9f 91       	pop	r25
    1c94:	8f 91       	pop	r24
    1c96:	2f 91       	pop	r18
    1c98:	0f 90       	pop	r0
    1c9a:	0b be       	out	0x3b, r0	; 59
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	0b b6       	in	r0, 0x3b	; 59
    1cb2:	0f 92       	push	r0
    1cb4:	2f 93       	push	r18
    1cb6:	3f 93       	push	r19
    1cb8:	4f 93       	push	r20
    1cba:	5f 93       	push	r21
    1cbc:	6f 93       	push	r22
    1cbe:	7f 93       	push	r23
    1cc0:	8f 93       	push	r24
    1cc2:	9f 93       	push	r25
    1cc4:	af 93       	push	r26
    1cc6:	bf 93       	push	r27
    1cc8:	ef 93       	push	r30
    1cca:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1ccc:	88 e1       	ldi	r24, 0x18	; 24
    1cce:	94 e0       	ldi	r25, 0x04	; 4
    1cd0:	bc de       	rcall	.-648    	; 0x1a4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1cd2:	ff 91       	pop	r31
    1cd4:	ef 91       	pop	r30
    1cd6:	bf 91       	pop	r27
    1cd8:	af 91       	pop	r26
    1cda:	9f 91       	pop	r25
    1cdc:	8f 91       	pop	r24
    1cde:	7f 91       	pop	r23
    1ce0:	6f 91       	pop	r22
    1ce2:	5f 91       	pop	r21
    1ce4:	4f 91       	pop	r20
    1ce6:	3f 91       	pop	r19
    1ce8:	2f 91       	pop	r18
    1cea:	0f 90       	pop	r0
    1cec:	0b be       	out	0x3b, r0	; 59
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1cf8:	88 e1       	ldi	r24, 0x18	; 24
    1cfa:	94 e0       	ldi	r25, 0x04	; 4
    1cfc:	2e de       	rcall	.-932    	; 0x195a <_ZN14HardwareSerial9availableEv>
    1cfe:	21 e0       	ldi	r18, 0x01	; 1
    1d00:	89 2b       	or	r24, r25
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <_Z17Serial0_availablev+0xe>
    1d04:	20 e0       	ldi	r18, 0x00	; 0
}
    1d06:	82 2f       	mov	r24, r18
    1d08:	08 95       	ret

00001d0a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1d0a:	e8 e1       	ldi	r30, 0x18	; 24
    1d0c:	f4 e0       	ldi	r31, 0x04	; 4
    1d0e:	13 82       	std	Z+3, r1	; 0x03
    1d10:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1d12:	88 ee       	ldi	r24, 0xE8	; 232
    1d14:	93 e0       	ldi	r25, 0x03	; 3
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	84 83       	std	Z+4, r24	; 0x04
    1d1c:	95 83       	std	Z+5, r25	; 0x05
    1d1e:	a6 83       	std	Z+6, r26	; 0x06
    1d20:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1d22:	82 e8       	ldi	r24, 0x82	; 130
    1d24:	93 e0       	ldi	r25, 0x03	; 3
    1d26:	91 83       	std	Z+1, r25	; 0x01
    1d28:	80 83       	st	Z, r24
    1d2a:	85 ec       	ldi	r24, 0xC5	; 197
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	95 87       	std	Z+13, r25	; 0x0d
    1d30:	84 87       	std	Z+12, r24	; 0x0c
    1d32:	84 ec       	ldi	r24, 0xC4	; 196
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	97 87       	std	Z+15, r25	; 0x0f
    1d38:	86 87       	std	Z+14, r24	; 0x0e
    1d3a:	80 ec       	ldi	r24, 0xC0	; 192
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	91 8b       	std	Z+17, r25	; 0x11
    1d40:	80 8b       	std	Z+16, r24	; 0x10
    1d42:	81 ec       	ldi	r24, 0xC1	; 193
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	93 8b       	std	Z+19, r25	; 0x13
    1d48:	82 8b       	std	Z+18, r24	; 0x12
    1d4a:	82 ec       	ldi	r24, 0xC2	; 194
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	95 8b       	std	Z+21, r25	; 0x15
    1d50:	84 8b       	std	Z+20, r24	; 0x14
    1d52:	86 ec       	ldi	r24, 0xC6	; 198
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	97 8b       	std	Z+23, r25	; 0x17
    1d58:	86 8b       	std	Z+22, r24	; 0x16
    1d5a:	11 8e       	std	Z+25, r1	; 0x19
    1d5c:	12 8e       	std	Z+26, r1	; 0x1a
    1d5e:	13 8e       	std	Z+27, r1	; 0x1b
    1d60:	14 8e       	std	Z+28, r1	; 0x1c
    1d62:	08 95       	ret

00001d64 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1d64:	1f 92       	push	r1
    1d66:	0f 92       	push	r0
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	0f 92       	push	r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	0b b6       	in	r0, 0x3b	; 59
    1d70:	0f 92       	push	r0
    1d72:	2f 93       	push	r18
    1d74:	8f 93       	push	r24
    1d76:	9f 93       	push	r25
    1d78:	ef 93       	push	r30
    1d7a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1d7c:	e0 91 c5 04 	lds	r30, 0x04C5	; 0x8004c5 <Serial1+0x10>
    1d80:	f0 91 c6 04 	lds	r31, 0x04C6	; 0x8004c6 <Serial1+0x11>
    1d84:	80 81       	ld	r24, Z
    1d86:	e0 91 cb 04 	lds	r30, 0x04CB	; 0x8004cb <Serial1+0x16>
    1d8a:	f0 91 cc 04 	lds	r31, 0x04CC	; 0x8004cc <Serial1+0x17>
    1d8e:	82 fd       	sbrc	r24, 2
    1d90:	12 c0       	rjmp	.+36     	; 0x1db6 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1d92:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1d94:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <Serial1+0x19>
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1d9c:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <Serial1+0x1a>
    1da0:	82 17       	cp	r24, r18
    1da2:	51 f0       	breq	.+20     	; 0x1db8 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1da4:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <Serial1+0x19>
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	eb 54       	subi	r30, 0x4B	; 75
    1dac:	fb 4f       	sbci	r31, 0xFB	; 251
    1dae:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1db0:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <Serial1+0x19>
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1db6:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1db8:	ff 91       	pop	r31
    1dba:	ef 91       	pop	r30
    1dbc:	9f 91       	pop	r25
    1dbe:	8f 91       	pop	r24
    1dc0:	2f 91       	pop	r18
    1dc2:	0f 90       	pop	r0
    1dc4:	0b be       	out	0x3b, r0	; 59
    1dc6:	0f 90       	pop	r0
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	0f 90       	pop	r0
    1dcc:	1f 90       	pop	r1
    1dce:	18 95       	reti

00001dd0 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1dd0:	1f 92       	push	r1
    1dd2:	0f 92       	push	r0
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	0f 92       	push	r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	0b b6       	in	r0, 0x3b	; 59
    1ddc:	0f 92       	push	r0
    1dde:	2f 93       	push	r18
    1de0:	3f 93       	push	r19
    1de2:	4f 93       	push	r20
    1de4:	5f 93       	push	r21
    1de6:	6f 93       	push	r22
    1de8:	7f 93       	push	r23
    1dea:	8f 93       	push	r24
    1dec:	9f 93       	push	r25
    1dee:	af 93       	push	r26
    1df0:	bf 93       	push	r27
    1df2:	ef 93       	push	r30
    1df4:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1df6:	85 eb       	ldi	r24, 0xB5	; 181
    1df8:	94 e0       	ldi	r25, 0x04	; 4
    1dfa:	27 de       	rcall	.-946    	; 0x1a4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1dfc:	ff 91       	pop	r31
    1dfe:	ef 91       	pop	r30
    1e00:	bf 91       	pop	r27
    1e02:	af 91       	pop	r26
    1e04:	9f 91       	pop	r25
    1e06:	8f 91       	pop	r24
    1e08:	7f 91       	pop	r23
    1e0a:	6f 91       	pop	r22
    1e0c:	5f 91       	pop	r21
    1e0e:	4f 91       	pop	r20
    1e10:	3f 91       	pop	r19
    1e12:	2f 91       	pop	r18
    1e14:	0f 90       	pop	r0
    1e16:	0b be       	out	0x3b, r0	; 59
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	0f 90       	pop	r0
    1e1e:	1f 90       	pop	r1
    1e20:	18 95       	reti

00001e22 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1e22:	85 eb       	ldi	r24, 0xB5	; 181
    1e24:	94 e0       	ldi	r25, 0x04	; 4
    1e26:	99 dd       	rcall	.-1230   	; 0x195a <_ZN14HardwareSerial9availableEv>
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	89 2b       	or	r24, r25
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <_Z17Serial1_availablev+0xe>
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
}
    1e30:	82 2f       	mov	r24, r18
    1e32:	08 95       	ret

00001e34 <_GLOBAL__sub_I___vector_36>:
    1e34:	e5 eb       	ldi	r30, 0xB5	; 181
    1e36:	f4 e0       	ldi	r31, 0x04	; 4
    1e38:	13 82       	std	Z+3, r1	; 0x03
    1e3a:	12 82       	std	Z+2, r1	; 0x02
    1e3c:	88 ee       	ldi	r24, 0xE8	; 232
    1e3e:	93 e0       	ldi	r25, 0x03	; 3
    1e40:	a0 e0       	ldi	r26, 0x00	; 0
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	84 83       	std	Z+4, r24	; 0x04
    1e46:	95 83       	std	Z+5, r25	; 0x05
    1e48:	a6 83       	std	Z+6, r26	; 0x06
    1e4a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1e4c:	82 e8       	ldi	r24, 0x82	; 130
    1e4e:	93 e0       	ldi	r25, 0x03	; 3
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	80 83       	st	Z, r24
    1e54:	8d ec       	ldi	r24, 0xCD	; 205
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	95 87       	std	Z+13, r25	; 0x0d
    1e5a:	84 87       	std	Z+12, r24	; 0x0c
    1e5c:	8c ec       	ldi	r24, 0xCC	; 204
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	97 87       	std	Z+15, r25	; 0x0f
    1e62:	86 87       	std	Z+14, r24	; 0x0e
    1e64:	88 ec       	ldi	r24, 0xC8	; 200
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	91 8b       	std	Z+17, r25	; 0x11
    1e6a:	80 8b       	std	Z+16, r24	; 0x10
    1e6c:	89 ec       	ldi	r24, 0xC9	; 201
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	93 8b       	std	Z+19, r25	; 0x13
    1e72:	82 8b       	std	Z+18, r24	; 0x12
    1e74:	8a ec       	ldi	r24, 0xCA	; 202
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	95 8b       	std	Z+21, r25	; 0x15
    1e7a:	84 8b       	std	Z+20, r24	; 0x14
    1e7c:	8e ec       	ldi	r24, 0xCE	; 206
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	97 8b       	std	Z+23, r25	; 0x17
    1e82:	86 8b       	std	Z+22, r24	; 0x16
    1e84:	11 8e       	std	Z+25, r1	; 0x19
    1e86:	12 8e       	std	Z+26, r1	; 0x1a
    1e88:	13 8e       	std	Z+27, r1	; 0x1b
    1e8a:	14 8e       	std	Z+28, r1	; 0x1c
    1e8c:	08 95       	ret

00001e8e <initVariant>:
    1e8e:	08 95       	ret

00001e90 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1e90:	d9 d1       	rcall	.+946    	; 0x2244 <init>

	initVariant();
    1e92:	fd df       	rcall	.-6      	; 0x1e8e <initVariant>
    1e94:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1e98:	ca ee       	ldi	r28, 0xEA	; 234
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1e9a:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1e9c:	dc d9       	rcall	.-3144   	; 0x1256 <loop>
		if (serialEventRun) serialEventRun();
    1e9e:	20 97       	sbiw	r28, 0x00	; 0
    1ea0:	e9 f3       	breq	.-6      	; 0x1e9c <main+0xc>
    1ea2:	98 dd       	rcall	.-1232   	; 0x19d4 <_Z14serialEventRunv>
    1ea4:	fb cf       	rjmp	.-10     	; 0x1e9c <main+0xc>

00001ea6 <_ZN5Print5writeEPKhj>:
    1ea6:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1ea8:	df 92       	push	r13
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	6c 01       	movw	r12, r24
    1eb8:	7a 01       	movw	r14, r20
    1eba:	8b 01       	movw	r16, r22
    1ebc:	c0 e0       	ldi	r28, 0x00	; 0
    1ebe:	d0 e0       	ldi	r29, 0x00	; 0
    1ec0:	ce 15       	cp	r28, r14
    1ec2:	df 05       	cpc	r29, r15
    1ec4:	81 f0       	breq	.+32     	; 0x1ee6 <_ZN5Print5writeEPKhj+0x40>
    1ec6:	d8 01       	movw	r26, r16
    1ec8:	6d 91       	ld	r22, X+
    1eca:	8d 01       	movw	r16, r26
    1ecc:	d6 01       	movw	r26, r12
    1ece:	ed 91       	ld	r30, X+
    1ed0:	fc 91       	ld	r31, X
    1ed2:	01 90       	ld	r0, Z+
    1ed4:	f0 81       	ld	r31, Z
    1ed6:	e0 2d       	mov	r30, r0
    1ed8:	c6 01       	movw	r24, r12
    1eda:	19 95       	eicall
    1edc:	89 2b       	or	r24, r25
    1ede:	11 f0       	breq	.+4      	; 0x1ee4 <_ZN5Print5writeEPKhj+0x3e>
    1ee0:	21 96       	adiw	r28, 0x01	; 1
    1ee2:	ee cf       	rjmp	.-36     	; 0x1ec0 <_ZN5Print5writeEPKhj+0x1a>
    1ee4:	7e 01       	movw	r14, r28
    1ee6:	c7 01       	movw	r24, r14
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	cf 90       	pop	r12
    1ef8:	08 95       	ret

00001efa <_ZN5Print5writeEPKc>:
    1efa:	61 15       	cp	r22, r1
    1efc:	71 05       	cpc	r23, r1
    1efe:	79 f0       	breq	.+30     	; 0x1f1e <_ZN5Print5writeEPKc+0x24>
    1f00:	fb 01       	movw	r30, r22
    1f02:	01 90       	ld	r0, Z+
    1f04:	00 20       	and	r0, r0
    1f06:	e9 f7       	brne	.-6      	; 0x1f02 <_ZN5Print5writeEPKc+0x8>
    1f08:	31 97       	sbiw	r30, 0x01	; 1
    1f0a:	af 01       	movw	r20, r30
    1f0c:	46 1b       	sub	r20, r22
    1f0e:	57 0b       	sbc	r21, r23
    1f10:	dc 01       	movw	r26, r24
    1f12:	ed 91       	ld	r30, X+
    1f14:	fc 91       	ld	r31, X
    1f16:	02 80       	ldd	r0, Z+2	; 0x02
    1f18:	f3 81       	ldd	r31, Z+3	; 0x03
    1f1a:	e0 2d       	mov	r30, r0
    1f1c:	19 94       	eijmp
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	08 95       	ret

00001f24 <_ZN5Print5printERK6String>:
    1f24:	db 01       	movw	r26, r22
    1f26:	14 96       	adiw	r26, 0x04	; 4
    1f28:	4d 91       	ld	r20, X+
    1f2a:	5c 91       	ld	r21, X
    1f2c:	15 97       	sbiw	r26, 0x05	; 5
    1f2e:	6d 91       	ld	r22, X+
    1f30:	7c 91       	ld	r23, X
    1f32:	dc 01       	movw	r26, r24
    1f34:	ed 91       	ld	r30, X+
    1f36:	fc 91       	ld	r31, X
    1f38:	02 80       	ldd	r0, Z+2	; 0x02
    1f3a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f3c:	e0 2d       	mov	r30, r0
    1f3e:	19 94       	eijmp

00001f40 <_ZN5Print5printEPKc>:
    1f40:	dc cf       	rjmp	.-72     	; 0x1efa <_ZN5Print5writeEPKc>

00001f42 <_ZN5Print5printEc>:
    1f42:	dc 01       	movw	r26, r24
    1f44:	ed 91       	ld	r30, X+
    1f46:	fc 91       	ld	r31, X
    1f48:	01 90       	ld	r0, Z+
    1f4a:	f0 81       	ld	r31, Z
    1f4c:	e0 2d       	mov	r30, r0
    1f4e:	19 94       	eijmp

00001f50 <_ZN5Print7printlnEv>:
    1f50:	60 e9       	ldi	r22, 0x90	; 144
    1f52:	73 e0       	ldi	r23, 0x03	; 3
    1f54:	d2 cf       	rjmp	.-92     	; 0x1efa <_ZN5Print5writeEPKc>

00001f56 <_ZN5Print7printlnEPKc>:
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	ec 01       	movw	r28, r24
    1f60:	cc df       	rcall	.-104    	; 0x1efa <_ZN5Print5writeEPKc>
    1f62:	8c 01       	movw	r16, r24
    1f64:	ce 01       	movw	r24, r28
    1f66:	f4 df       	rcall	.-24     	; 0x1f50 <_ZN5Print7printlnEv>
    1f68:	80 0f       	add	r24, r16
    1f6a:	91 1f       	adc	r25, r17
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <_ZN5Print11printNumberEmh>:
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	a1 97       	sbiw	r28, 0x21	; 33
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	7c 01       	movw	r14, r24
    1f9c:	fa 01       	movw	r30, r20
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	19 a2       	std	Y+33, r1	; 0x21
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	08 f4       	brcc	.+2      	; 0x1fa8 <_ZN5Print11printNumberEmh+0x32>
    1fa6:	2a e0       	ldi	r18, 0x0A	; 10
    1fa8:	8e 01       	movw	r16, r28
    1faa:	0f 5d       	subi	r16, 0xDF	; 223
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	82 2e       	mov	r8, r18
    1fb0:	91 2c       	mov	r9, r1
    1fb2:	a1 2c       	mov	r10, r1
    1fb4:	b1 2c       	mov	r11, r1
    1fb6:	bf 01       	movw	r22, r30
    1fb8:	a5 01       	movw	r20, r10
    1fba:	94 01       	movw	r18, r8
    1fbc:	b1 d6       	rcall	.+3426   	; 0x2d20 <__udivmodsi4>
    1fbe:	f9 01       	movw	r30, r18
    1fc0:	ca 01       	movw	r24, r20
    1fc2:	01 50       	subi	r16, 0x01	; 1
    1fc4:	11 09       	sbc	r17, r1
    1fc6:	6a 30       	cpi	r22, 0x0A	; 10
    1fc8:	10 f4       	brcc	.+4      	; 0x1fce <_ZN5Print11printNumberEmh+0x58>
    1fca:	60 5d       	subi	r22, 0xD0	; 208
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <_ZN5Print11printNumberEmh+0x5a>
    1fce:	69 5c       	subi	r22, 0xC9	; 201
    1fd0:	d8 01       	movw	r26, r16
    1fd2:	6c 93       	st	X, r22
    1fd4:	23 2b       	or	r18, r19
    1fd6:	24 2b       	or	r18, r20
    1fd8:	25 2b       	or	r18, r21
    1fda:	69 f7       	brne	.-38     	; 0x1fb6 <_ZN5Print11printNumberEmh+0x40>
    1fdc:	b8 01       	movw	r22, r16
    1fde:	c7 01       	movw	r24, r14
    1fe0:	8c df       	rcall	.-232    	; 0x1efa <_ZN5Print5writeEPKc>
    1fe2:	a1 96       	adiw	r28, 0x21	; 33
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	bf 90       	pop	r11
    1ffc:	af 90       	pop	r10
    1ffe:	9f 90       	pop	r9
    2000:	8f 90       	pop	r8
    2002:	08 95       	ret

00002004 <_ZN5Print5printEmi>:
    2004:	21 15       	cp	r18, r1
    2006:	31 05       	cpc	r19, r1
    2008:	41 f4       	brne	.+16     	; 0x201a <_ZN5Print5printEmi+0x16>
    200a:	dc 01       	movw	r26, r24
    200c:	ed 91       	ld	r30, X+
    200e:	fc 91       	ld	r31, X
    2010:	01 90       	ld	r0, Z+
    2012:	f0 81       	ld	r31, Z
    2014:	e0 2d       	mov	r30, r0
    2016:	64 2f       	mov	r22, r20
    2018:	19 94       	eijmp
    201a:	ad cf       	rjmp	.-166    	; 0x1f76 <_ZN5Print11printNumberEmh>

0000201c <_ZN5Print5printEhi>:
    201c:	9a 01       	movw	r18, r20
    201e:	46 2f       	mov	r20, r22
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	ee cf       	rjmp	.-36     	; 0x2004 <_ZN5Print5printEmi>

00002028 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2028:	cf 92       	push	r12
    202a:	df 92       	push	r13
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
  if (base == 0) {
    2038:	21 15       	cp	r18, r1
    203a:	31 05       	cpc	r19, r1
    203c:	81 f4       	brne	.+32     	; 0x205e <_ZN5Print5printEli+0x36>
    return write(n);
    203e:	dc 01       	movw	r26, r24
    2040:	ed 91       	ld	r30, X+
    2042:	fc 91       	ld	r31, X
    2044:	01 90       	ld	r0, Z+
    2046:	f0 81       	ld	r31, Z
    2048:	e0 2d       	mov	r30, r0
    204a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    205c:	19 94       	eijmp
  } else if (base == 10) {
    205e:	2a 30       	cpi	r18, 0x0A	; 10
    2060:	31 05       	cpc	r19, r1
    2062:	f1 f4       	brne	.+60     	; 0x20a0 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    2064:	77 ff       	sbrs	r23, 7
    2066:	1b c0       	rjmp	.+54     	; 0x209e <_ZN5Print5printEli+0x76>
    2068:	6a 01       	movw	r12, r20
    206a:	7b 01       	movw	r14, r22
    206c:	ec 01       	movw	r28, r24
      int t = print('-');
    206e:	6d e2       	ldi	r22, 0x2D	; 45
    2070:	68 df       	rcall	.-304    	; 0x1f42 <_ZN5Print5printEc>
    2072:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2074:	44 27       	eor	r20, r20
    2076:	55 27       	eor	r21, r21
    2078:	ba 01       	movw	r22, r20
    207a:	4c 19       	sub	r20, r12
    207c:	5d 09       	sbc	r21, r13
    207e:	6e 09       	sbc	r22, r14
    2080:	7f 09       	sbc	r23, r15
    2082:	2a e0       	ldi	r18, 0x0A	; 10
    2084:	ce 01       	movw	r24, r28
    2086:	77 df       	rcall	.-274    	; 0x1f76 <_ZN5Print11printNumberEmh>
    2088:	80 0f       	add	r24, r16
    208a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	df 90       	pop	r13
    209a:	cf 90       	pop	r12
    209c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    209e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    20ae:	cf 90       	pop	r12
    20b0:	62 cf       	rjmp	.-316    	; 0x1f76 <_ZN5Print11printNumberEmh>

000020b2 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    20b2:	9a 01       	movw	r18, r20
  return print((long) n, base);
    20b4:	ab 01       	movw	r20, r22
    20b6:	77 0f       	add	r23, r23
    20b8:	66 0b       	sbc	r22, r22
    20ba:	77 0b       	sbc	r23, r23
    20bc:	b5 cf       	rjmp	.-150    	; 0x2028 <_ZN5Print5printEli>

000020be <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    20c8:	f4 df       	rcall	.-24     	; 0x20b2 <_ZN5Print5printEii>
    20ca:	8c 01       	movw	r16, r24
  n += println();
    20cc:	ce 01       	movw	r24, r28
    20ce:	40 df       	rcall	.-384    	; 0x1f50 <_ZN5Print7printlnEv>
  return n;
}
    20d0:	80 0f       	add	r24, r16
    20d2:	91 1f       	adc	r25, r17
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	08 95       	ret

000020de <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    20de:	1f 92       	push	r1
    20e0:	0f 92       	push	r0
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	0f 92       	push	r0
    20e6:	11 24       	eor	r1, r1
    20e8:	2f 93       	push	r18
    20ea:	3f 93       	push	r19
    20ec:	8f 93       	push	r24
    20ee:	9f 93       	push	r25
    20f0:	af 93       	push	r26
    20f2:	bf 93       	push	r27
    20f4:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <timer0_millis>
    20f8:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <timer0_millis+0x1>
    20fc:	a0 91 55 05 	lds	r26, 0x0555	; 0x800555 <timer0_millis+0x2>
    2100:	b0 91 56 05 	lds	r27, 0x0556	; 0x800556 <timer0_millis+0x3>
    2104:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <timer0_fract>
    2108:	23 e0       	ldi	r18, 0x03	; 3
    210a:	23 0f       	add	r18, r19
    210c:	2d 37       	cpi	r18, 0x7D	; 125
    210e:	20 f4       	brcc	.+8      	; 0x2118 <__vector_23+0x3a>
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	a1 1d       	adc	r26, r1
    2114:	b1 1d       	adc	r27, r1
    2116:	05 c0       	rjmp	.+10     	; 0x2122 <__vector_23+0x44>
    2118:	26 e8       	ldi	r18, 0x86	; 134
    211a:	23 0f       	add	r18, r19
    211c:	02 96       	adiw	r24, 0x02	; 2
    211e:	a1 1d       	adc	r26, r1
    2120:	b1 1d       	adc	r27, r1
    2122:	20 93 52 05 	sts	0x0552, r18	; 0x800552 <timer0_fract>
    2126:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <timer0_millis>
    212a:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <timer0_millis+0x1>
    212e:	a0 93 55 05 	sts	0x0555, r26	; 0x800555 <timer0_millis+0x2>
    2132:	b0 93 56 05 	sts	0x0556, r27	; 0x800556 <timer0_millis+0x3>
    2136:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_overflow_count>
    213a:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <timer0_overflow_count+0x1>
    213e:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <timer0_overflow_count+0x2>
    2142:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <timer0_overflow_count+0x3>
    2146:	01 96       	adiw	r24, 0x01	; 1
    2148:	a1 1d       	adc	r26, r1
    214a:	b1 1d       	adc	r27, r1
    214c:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <timer0_overflow_count>
    2150:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <timer0_overflow_count+0x1>
    2154:	a0 93 59 05 	sts	0x0559, r26	; 0x800559 <timer0_overflow_count+0x2>
    2158:	b0 93 5a 05 	sts	0x055A, r27	; 0x80055a <timer0_overflow_count+0x3>
    215c:	bf 91       	pop	r27
    215e:	af 91       	pop	r26
    2160:	9f 91       	pop	r25
    2162:	8f 91       	pop	r24
    2164:	3f 91       	pop	r19
    2166:	2f 91       	pop	r18
    2168:	0f 90       	pop	r0
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	0f 90       	pop	r0
    216e:	1f 90       	pop	r1
    2170:	18 95       	reti

00002172 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2172:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2174:	f8 94       	cli
	m = timer0_overflow_count;
    2176:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_overflow_count>
    217a:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <timer0_overflow_count+0x1>
    217e:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <timer0_overflow_count+0x2>
    2182:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2186:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2188:	a8 9b       	sbis	0x15, 0	; 21
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <micros+0x24>
    218c:	2f 3f       	cpi	r18, 0xFF	; 255
    218e:	19 f0       	breq	.+6      	; 0x2196 <micros+0x24>
		m++;
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	a1 1d       	adc	r26, r1
    2194:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2196:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2198:	ba 2f       	mov	r27, r26
    219a:	a9 2f       	mov	r26, r25
    219c:	98 2f       	mov	r25, r24
    219e:	88 27       	eor	r24, r24
    21a0:	82 0f       	add	r24, r18
    21a2:	91 1d       	adc	r25, r1
    21a4:	a1 1d       	adc	r26, r1
    21a6:	b1 1d       	adc	r27, r1
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	42 e0       	ldi	r20, 0x02	; 2
    21ae:	66 0f       	add	r22, r22
    21b0:	77 1f       	adc	r23, r23
    21b2:	88 1f       	adc	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	4a 95       	dec	r20
    21b8:	d1 f7       	brne	.-12     	; 0x21ae <micros+0x3c>
}
    21ba:	08 95       	ret

000021bc <delay>:

void delay(unsigned long ms)
{
    21bc:	8f 92       	push	r8
    21be:	9f 92       	push	r9
    21c0:	af 92       	push	r10
    21c2:	bf 92       	push	r11
    21c4:	cf 92       	push	r12
    21c6:	df 92       	push	r13
    21c8:	ef 92       	push	r14
    21ca:	ff 92       	push	r15
    21cc:	6b 01       	movw	r12, r22
    21ce:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    21d0:	d0 df       	rcall	.-96     	; 0x2172 <micros>
    21d2:	4b 01       	movw	r8, r22
    21d4:	5c 01       	movw	r10, r24

	while (ms > 0) {
    21d6:	c1 14       	cp	r12, r1
    21d8:	d1 04       	cpc	r13, r1
    21da:	e1 04       	cpc	r14, r1
    21dc:	f1 04       	cpc	r15, r1
		yield();
    21de:	f1 f0       	breq	.+60     	; 0x221c <__stack+0x1d>
		while ( ms > 0 && (micros() - start) >= 1000) {
    21e0:	bc d3       	rcall	.+1912   	; 0x295a <yield>
    21e2:	c7 df       	rcall	.-114    	; 0x2172 <micros>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	88 19       	sub	r24, r8
    21ea:	99 09       	sbc	r25, r9
    21ec:	aa 09       	sbc	r26, r10
    21ee:	bb 09       	sbc	r27, r11
    21f0:	88 3e       	cpi	r24, 0xE8	; 232
    21f2:	93 40       	sbci	r25, 0x03	; 3
    21f4:	a1 05       	cpc	r26, r1
    21f6:	b1 05       	cpc	r27, r1
    21f8:	70 f3       	brcs	.-36     	; 0x21d6 <delay+0x1a>
			ms--;
    21fa:	21 e0       	ldi	r18, 0x01	; 1
    21fc:	c2 1a       	sub	r12, r18
    21fe:	d1 08       	sbc	r13, r1
    2200:	e1 08       	sbc	r14, r1
    2202:	f1 08       	sbc	r15, r1
			start += 1000;
    2204:	88 ee       	ldi	r24, 0xE8	; 232
    2206:	88 0e       	add	r8, r24
    2208:	83 e0       	ldi	r24, 0x03	; 3
    220a:	98 1e       	adc	r9, r24
    220c:	a1 1c       	adc	r10, r1
    220e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2210:	c1 14       	cp	r12, r1
    2212:	d1 04       	cpc	r13, r1
    2214:	e1 04       	cpc	r14, r1
    2216:	f1 04       	cpc	r15, r1
    2218:	21 f7       	brne	.-56     	; 0x21e2 <delay+0x26>
    221a:	dd cf       	rjmp	.-70     	; 0x21d6 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	df 90       	pop	r13
    2222:	cf 90       	pop	r12
    2224:	bf 90       	pop	r11
    2226:	af 90       	pop	r10
    2228:	9f 90       	pop	r9
    222a:	8f 90       	pop	r8
    222c:	08 95       	ret

0000222e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	91 05       	cpc	r25, r1
    2232:	38 f0       	brcs	.+14     	; 0x2242 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    223c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <delayMicroseconds+0x10>
    2242:	08 95       	ret

00002244 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2244:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2246:	84 b5       	in	r24, 0x24	; 36
    2248:	82 60       	ori	r24, 0x02	; 2
    224a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    224c:	84 b5       	in	r24, 0x24	; 36
    224e:	81 60       	ori	r24, 0x01	; 1
    2250:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2252:	85 b5       	in	r24, 0x25	; 37
    2254:	82 60       	ori	r24, 0x02	; 2
    2256:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2258:	85 b5       	in	r24, 0x25	; 37
    225a:	81 60       	ori	r24, 0x01	; 1
    225c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    225e:	ee e6       	ldi	r30, 0x6E	; 110
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	81 60       	ori	r24, 0x01	; 1
    2266:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2268:	e1 e8       	ldi	r30, 0x81	; 129
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    226e:	80 81       	ld	r24, Z
    2270:	82 60       	ori	r24, 0x02	; 2
    2272:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2274:	80 81       	ld	r24, Z
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    227a:	e0 e8       	ldi	r30, 0x80	; 128
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	81 60       	ori	r24, 0x01	; 1
    2282:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2284:	e1 eb       	ldi	r30, 0xB1	; 177
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	84 60       	ori	r24, 0x04	; 4
    228c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    228e:	e0 eb       	ldi	r30, 0xB0	; 176
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	81 60       	ori	r24, 0x01	; 1
    2296:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2298:	e1 e9       	ldi	r30, 0x91	; 145
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	82 60       	ori	r24, 0x02	; 2
    22a0:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    22a2:	80 81       	ld	r24, Z
    22a4:	81 60       	ori	r24, 0x01	; 1
    22a6:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    22a8:	e0 e9       	ldi	r30, 0x90	; 144
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	81 60       	ori	r24, 0x01	; 1
    22b0:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    22b2:	e1 ea       	ldi	r30, 0xA1	; 161
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	82 60       	ori	r24, 0x02	; 2
    22ba:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    22bc:	80 81       	ld	r24, Z
    22be:	81 60       	ori	r24, 0x01	; 1
    22c0:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    22c2:	e0 ea       	ldi	r30, 0xA0	; 160
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	81 60       	ori	r24, 0x01	; 1
    22ca:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    22cc:	e1 e2       	ldi	r30, 0x21	; 33
    22ce:	f1 e0       	ldi	r31, 0x01	; 1
    22d0:	80 81       	ld	r24, Z
    22d2:	82 60       	ori	r24, 0x02	; 2
    22d4:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    22d6:	80 81       	ld	r24, Z
    22d8:	81 60       	ori	r24, 0x01	; 1
    22da:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    22dc:	e0 e2       	ldi	r30, 0x20	; 32
    22de:	f1 e0       	ldi	r31, 0x01	; 1
    22e0:	80 81       	ld	r24, Z
    22e2:	81 60       	ori	r24, 0x01	; 1
    22e4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    22e6:	ea e7       	ldi	r30, 0x7A	; 122
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	84 60       	ori	r24, 0x04	; 4
    22ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    22f0:	80 81       	ld	r24, Z
    22f2:	82 60       	ori	r24, 0x02	; 2
    22f4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    22f6:	80 81       	ld	r24, Z
    22f8:	81 60       	ori	r24, 0x01	; 1
    22fa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    22fc:	80 81       	ld	r24, Z
    22fe:	80 68       	ori	r24, 0x80	; 128
    2300:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2302:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    2306:	08 95       	ret

00002308 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	fc 01       	movw	r30, r24
    230c:	31 97       	sbiw	r30, 0x01	; 1
    230e:	e2 31       	cpi	r30, 0x12	; 18
    2310:	f1 05       	cpc	r31, r1
    2312:	08 f0       	brcs	.+2      	; 0x2316 <turnOffPWM+0xe>
    2314:	4d c0       	rjmp	.+154    	; 0x23b0 <turnOffPWM+0xa8>
    2316:	88 27       	eor	r24, r24
    2318:	ed 54       	subi	r30, 0x4D	; 77
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	8f 4f       	sbci	r24, 0xFF	; 255
    231e:	22 c5       	rjmp	.+2628   	; 0x2d64 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2320:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2324:	8f 77       	andi	r24, 0x7F	; 127
    2326:	03 c0       	rjmp	.+6      	; 0x232e <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2328:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    232c:	8f 7d       	andi	r24, 0xDF	; 223
    232e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2332:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2334:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2338:	87 7f       	andi	r24, 0xF7	; 247
    233a:	f9 cf       	rjmp	.-14     	; 0x232e <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    233c:	84 b5       	in	r24, 0x24	; 36
    233e:	8f 77       	andi	r24, 0x7F	; 127
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2342:	84 b5       	in	r24, 0x24	; 36
    2344:	8f 7d       	andi	r24, 0xDF	; 223
    2346:	84 bd       	out	0x24, r24	; 36
    2348:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    234a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    234e:	8f 77       	andi	r24, 0x7F	; 127
    2350:	03 c0       	rjmp	.+6      	; 0x2358 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2352:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2356:	8f 7d       	andi	r24, 0xDF	; 223
    2358:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    235c:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    235e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2362:	8f 77       	andi	r24, 0x7F	; 127
    2364:	07 c0       	rjmp	.+14     	; 0x2374 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2366:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    236a:	8f 7d       	andi	r24, 0xDF	; 223
    236c:	03 c0       	rjmp	.+6      	; 0x2374 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    236e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2372:	87 7f       	andi	r24, 0xF7	; 247
    2374:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2378:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    237a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    237e:	8f 77       	andi	r24, 0x7F	; 127
    2380:	07 c0       	rjmp	.+14     	; 0x2390 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2382:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2386:	8f 7d       	andi	r24, 0xDF	; 223
    2388:	03 c0       	rjmp	.+6      	; 0x2390 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    238a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    238e:	87 7f       	andi	r24, 0xF7	; 247
    2390:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2394:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2396:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    239a:	8f 77       	andi	r24, 0x7F	; 127
    239c:	07 c0       	rjmp	.+14     	; 0x23ac <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    239e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    23a2:	8f 7d       	andi	r24, 0xDF	; 223
    23a4:	03 c0       	rjmp	.+6      	; 0x23ac <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    23a6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    23aa:	87 7f       	andi	r24, 0xF7	; 247
    23ac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    23b0:	08 95       	ret

000023b2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	fc 01       	movw	r30, r24
    23ba:	e0 53       	subi	r30, 0x30	; 48
    23bc:	fe 4f       	sbci	r31, 0xFE	; 254
    23be:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    23c0:	fc 01       	movw	r30, r24
    23c2:	ea 5e       	subi	r30, 0xEA	; 234
    23c4:	fd 4f       	sbci	r31, 0xFD	; 253
    23c6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    23c8:	88 23       	and	r24, r24
    23ca:	61 f1       	breq	.+88     	; 0x2424 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	fc 01       	movw	r30, r24
    23d4:	ea 58       	subi	r30, 0x8A	; 138
    23d6:	fd 4f       	sbci	r31, 0xFD	; 253
    23d8:	c5 91       	lpm	r28, Z+
    23da:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    23dc:	fc 01       	movw	r30, r24
    23de:	e4 5a       	subi	r30, 0xA4	; 164
    23e0:	fd 4f       	sbci	r31, 0xFD	; 253
    23e2:	a5 91       	lpm	r26, Z+
    23e4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    23e6:	61 11       	cpse	r22, r1
    23e8:	09 c0       	rjmp	.+18     	; 0x23fc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    23ea:	9f b7       	in	r25, 0x3f	; 63
                cli();
    23ec:	f8 94       	cli
		*reg &= ~bit;
    23ee:	88 81       	ld	r24, Y
    23f0:	20 95       	com	r18
    23f2:	82 23       	and	r24, r18
    23f4:	88 83       	st	Y, r24
		*out &= ~bit;
    23f6:	ec 91       	ld	r30, X
    23f8:	2e 23       	and	r18, r30
    23fa:	0b c0       	rjmp	.+22     	; 0x2412 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    23fc:	62 30       	cpi	r22, 0x02	; 2
    23fe:	61 f4       	brne	.+24     	; 0x2418 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2400:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2402:	f8 94       	cli
		*reg &= ~bit;
    2404:	88 81       	ld	r24, Y
    2406:	32 2f       	mov	r19, r18
    2408:	30 95       	com	r19
    240a:	83 23       	and	r24, r19
    240c:	88 83       	st	Y, r24
		*out |= bit;
    240e:	ec 91       	ld	r30, X
    2410:	2e 2b       	or	r18, r30
    2412:	2c 93       	st	X, r18
		SREG = oldSREG;
    2414:	9f bf       	out	0x3f, r25	; 63
    2416:	06 c0       	rjmp	.+12     	; 0x2424 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2418:	8f b7       	in	r24, 0x3f	; 63
                cli();
    241a:	f8 94       	cli
		*reg |= bit;
    241c:	e8 81       	ld	r30, Y
    241e:	2e 2b       	or	r18, r30
    2420:	28 83       	st	Y, r18
		SREG = oldSREG;
    2422:	8f bf       	out	0x3f, r24	; 63
	}
}
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	08 95       	ret

0000242a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	f9 01       	movw	r30, r18
    2436:	e6 57       	subi	r30, 0x76	; 118
    2438:	fe 4f       	sbci	r31, 0xFE	; 254
    243a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    243c:	f9 01       	movw	r30, r18
    243e:	e0 53       	subi	r30, 0x30	; 48
    2440:	fe 4f       	sbci	r31, 0xFE	; 254
    2442:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2444:	f9 01       	movw	r30, r18
    2446:	ea 5e       	subi	r30, 0xEA	; 234
    2448:	fd 4f       	sbci	r31, 0xFD	; 253
    244a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    244c:	cc 23       	and	r28, r28
    244e:	b9 f0       	breq	.+46     	; 0x247e <digitalWrite+0x54>
    2450:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2452:	81 11       	cpse	r24, r1
    2454:	59 df       	rcall	.-334    	; 0x2308 <turnOffPWM>

	out = portOutputRegister(port);
    2456:	ec 2f       	mov	r30, r28
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	ee 0f       	add	r30, r30
    245c:	ff 1f       	adc	r31, r31
    245e:	e4 5a       	subi	r30, 0xA4	; 164
    2460:	fd 4f       	sbci	r31, 0xFD	; 253
    2462:	a5 91       	lpm	r26, Z+
    2464:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2466:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2468:	f8 94       	cli

	if (val == LOW) {
    246a:	11 11       	cpse	r17, r1
    246c:	04 c0       	rjmp	.+8      	; 0x2476 <digitalWrite+0x4c>
		*out &= ~bit;
    246e:	8c 91       	ld	r24, X
    2470:	d0 95       	com	r29
    2472:	d8 23       	and	r29, r24
    2474:	02 c0       	rjmp	.+4      	; 0x247a <digitalWrite+0x50>
	} else {
		*out |= bit;
    2476:	ec 91       	ld	r30, X
    2478:	de 2b       	or	r29, r30
    247a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    247c:	9f bf       	out	0x3f, r25	; 63
}
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	08 95       	ret

00002486 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    2486:	fc 01       	movw	r30, r24
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	0b c5       	rjmp	.+2582   	; 0x2ea4 <free>

0000248e <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2494:	88 81       	ld	r24, Y
    2496:	99 81       	ldd	r25, Y+1	; 0x01
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	09 f0       	breq	.+2      	; 0x249e <_ZN6String10invalidateEv+0x10>
    249c:	03 d5       	rcall	.+2566   	; 0x2ea4 <free>
	buffer = NULL;
    249e:	19 82       	std	Y+1, r1	; 0x01
    24a0:	18 82       	st	Y, r1
	capacity = len = 0;
    24a2:	1d 82       	std	Y+5, r1	; 0x05
    24a4:	1c 82       	std	Y+4, r1	; 0x04
    24a6:	1b 82       	std	Y+3, r1	; 0x03
    24a8:	1a 82       	std	Y+2, r1	; 0x02
}
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	08 95       	ret

000024b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    24b0:	0f 93       	push	r16
    24b2:	1f 93       	push	r17
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	ec 01       	movw	r28, r24
    24ba:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    24bc:	6f 5f       	subi	r22, 0xFF	; 255
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	88 81       	ld	r24, Y
    24c2:	99 81       	ldd	r25, Y+1	; 0x01
    24c4:	78 d5       	rcall	.+2800   	; 0x2fb6 <realloc>
	if (newbuffer) {
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	31 f0       	breq	.+12     	; 0x24d6 <_ZN6String12changeBufferEj+0x26>
		buffer = newbuffer;
    24ca:	99 83       	std	Y+1, r25	; 0x01
    24cc:	88 83       	st	Y, r24
		capacity = maxStrLen;
    24ce:	1b 83       	std	Y+3, r17	; 0x03
    24d0:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <_ZN6String12changeBufferEj+0x28>
	}
	return 0;
    24d6:	80 e0       	ldi	r24, 0x00	; 0
}
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	1f 91       	pop	r17
    24de:	0f 91       	pop	r16
    24e0:	08 95       	ret

000024e2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    24e8:	88 81       	ld	r24, Y
    24ea:	99 81       	ldd	r25, Y+1	; 0x01
    24ec:	89 2b       	or	r24, r25
    24ee:	29 f0       	breq	.+10     	; 0x24fa <_ZN6String7reserveEj+0x18>
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	9b 81       	ldd	r25, Y+3	; 0x03
    24f4:	86 17       	cp	r24, r22
    24f6:	97 07       	cpc	r25, r23
    24f8:	58 f4       	brcc	.+22     	; 0x2510 <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
    24fa:	ce 01       	movw	r24, r28
    24fc:	d9 df       	rcall	.-78     	; 0x24b0 <_ZN6String12changeBufferEj>
    24fe:	88 23       	and	r24, r24
    2500:	41 f0       	breq	.+16     	; 0x2512 <_ZN6String7reserveEj+0x30>
		if (len == 0) buffer[0] = 0;
    2502:	8c 81       	ldd	r24, Y+4	; 0x04
    2504:	9d 81       	ldd	r25, Y+5	; 0x05
    2506:	89 2b       	or	r24, r25
    2508:	19 f4       	brne	.+6      	; 0x2510 <_ZN6String7reserveEj+0x2e>
    250a:	e8 81       	ld	r30, Y
    250c:	f9 81       	ldd	r31, Y+1	; 0x01
    250e:	10 82       	st	Z, r1
    2510:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	08 95       	ret

00002518 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	ec 01       	movw	r28, r24
    2526:	7b 01       	movw	r14, r22
    2528:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    252a:	ba 01       	movw	r22, r20
    252c:	da df       	rcall	.-76     	; 0x24e2 <_ZN6String7reserveEj>
    252e:	81 11       	cpse	r24, r1
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <_ZN6String4copyEPKcj+0x20>
		invalidate();
    2532:	ce 01       	movw	r24, r28
    2534:	ac df       	rcall	.-168    	; 0x248e <_ZN6String10invalidateEv>
		return *this;
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
    2538:	1d 83       	std	Y+5, r17	; 0x05
    253a:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    253c:	b7 01       	movw	r22, r14
    253e:	88 81       	ld	r24, Y
    2540:	99 81       	ldd	r25, Y+1	; 0x01
    2542:	22 d6       	rcall	.+3140   	; 0x3188 <strcpy>
	return *this;
}
    2544:	ce 01       	movw	r24, r28
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	ff 90       	pop	r15
    2550:	ef 90       	pop	r14
    2552:	08 95       	ret

00002554 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2554:	fc 01       	movw	r30, r24
    2556:	11 82       	std	Z+1, r1	; 0x01
    2558:	10 82       	st	Z, r1
	capacity = 0;
    255a:	13 82       	std	Z+3, r1	; 0x03
    255c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    255e:	15 82       	std	Z+5, r1	; 0x05
    2560:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2562:	61 15       	cp	r22, r1
    2564:	71 05       	cpc	r23, r1
    2566:	49 f0       	breq	.+18     	; 0x257a <_ZN6StringC1EPKc+0x26>
    2568:	fb 01       	movw	r30, r22
    256a:	01 90       	ld	r0, Z+
    256c:	00 20       	and	r0, r0
    256e:	e9 f7       	brne	.-6      	; 0x256a <_ZN6StringC1EPKc+0x16>
    2570:	31 97       	sbiw	r30, 0x01	; 1
    2572:	af 01       	movw	r20, r30
    2574:	46 1b       	sub	r20, r22
    2576:	57 0b       	sbc	r21, r23
    2578:	cf cf       	rjmp	.-98     	; 0x2518 <_ZN6String4copyEPKcj>
    257a:	08 95       	ret

0000257c <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    257c:	fc 01       	movw	r30, r24
    257e:	13 82       	std	Z+3, r1	; 0x03
    2580:	12 82       	std	Z+2, r1	; 0x02
    2582:	83 ea       	ldi	r24, 0xA3	; 163
    2584:	93 e0       	ldi	r25, 0x03	; 3
    2586:	91 83       	std	Z+1, r25	; 0x01
    2588:	80 83       	st	Z, r24
    258a:	64 83       	std	Z+4, r22	; 0x04
    258c:	41 87       	std	Z+9, r20	; 0x09
    258e:	22 87       	std	Z+10, r18	; 0x0a
    2590:	13 86       	std	Z+11, r1	; 0x0b
    2592:	08 95       	ret

00002594 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	ec 01       	movw	r28, r24
    259c:	16 2f       	mov	r17, r22
    259e:	6c 81       	ldd	r22, Y+4	; 0x04
    25a0:	8b e5       	ldi	r24, 0x5B	; 91
    25a2:	95 e0       	ldi	r25, 0x05	; 5
    25a4:	b9 d1       	rcall	.+882    	; 0x2918 <_ZN7TwoWire17beginTransmissionEh>
    25a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a8:	61 2b       	or	r22, r17
    25aa:	8b e5       	ldi	r24, 0x5B	; 91
    25ac:	95 e0       	ldi	r25, 0x05	; 5
    25ae:	67 d1       	rcall	.+718    	; 0x287e <_ZN7TwoWire5writeEh>
    25b0:	8b e5       	ldi	r24, 0x5B	; 91
    25b2:	95 e0       	ldi	r25, 0x05	; 5
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	ca c1       	rjmp	.+916    	; 0x2950 <_ZN7TwoWire15endTransmissionEv>

000025bc <_ZN17LiquidCrystal_I2C9backlightEv>:
    25bc:	28 e0       	ldi	r18, 0x08	; 8
    25be:	fc 01       	movw	r30, r24
    25c0:	23 87       	std	Z+11, r18	; 0x0b
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	e7 cf       	rjmp	.-50     	; 0x2594 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000025c6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	cf 93       	push	r28
    25cc:	8c 01       	movw	r16, r24
    25ce:	c6 2f       	mov	r28, r22
    25d0:	64 60       	ori	r22, 0x04	; 4
    25d2:	e0 df       	rcall	.-64     	; 0x2594 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	2a de       	rcall	.-940    	; 0x222e <delayMicroseconds>
    25da:	6c 2f       	mov	r22, r28
    25dc:	6b 7f       	andi	r22, 0xFB	; 251
    25de:	c8 01       	movw	r24, r16
    25e0:	d9 df       	rcall	.-78     	; 0x2594 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    25e2:	82 e3       	ldi	r24, 0x32	; 50
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	20 ce       	rjmp	.-960    	; 0x222e <delayMicroseconds>

000025ee <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	ec 01       	movw	r28, r24
    25f6:	16 2f       	mov	r17, r22
    25f8:	cd df       	rcall	.-102    	; 0x2594 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    25fa:	61 2f       	mov	r22, r17
    25fc:	ce 01       	movw	r24, r28
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	1f 91       	pop	r17
    2604:	e0 cf       	rjmp	.-64     	; 0x25c6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002606 <_ZN17LiquidCrystal_I2C4sendEhh>:
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	8c 01       	movw	r16, r24
    2610:	c6 2f       	mov	r28, r22
    2612:	d4 2f       	mov	r29, r20
    2614:	60 7f       	andi	r22, 0xF0	; 240
    2616:	64 2b       	or	r22, r20
    2618:	ea df       	rcall	.-44     	; 0x25ee <_ZN17LiquidCrystal_I2C10write4bitsEh>
    261a:	80 e1       	ldi	r24, 0x10	; 16
    261c:	c8 9f       	mul	r28, r24
    261e:	b0 01       	movw	r22, r0
    2620:	11 24       	eor	r1, r1
    2622:	6d 2b       	or	r22, r29
    2624:	c8 01       	movw	r24, r16
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	df cf       	rjmp	.-66     	; 0x25ee <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002630 <_ZN17LiquidCrystal_I2C7commandEh>:
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	e9 cf       	rjmp	.-46     	; 0x2606 <_ZN17LiquidCrystal_I2C4sendEhh>

00002634 <_ZN17LiquidCrystal_I2C5clearEv>:
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	fc df       	rcall	.-8      	; 0x2630 <_ZN17LiquidCrystal_I2C7commandEh>
    2638:	80 ed       	ldi	r24, 0xD0	; 208
    263a:	97 e0       	ldi	r25, 0x07	; 7
    263c:	f8 cd       	rjmp	.-1040   	; 0x222e <delayMicroseconds>

0000263e <_ZN17LiquidCrystal_I2C4homeEv>:
    263e:	62 e0       	ldi	r22, 0x02	; 2
    2640:	f7 df       	rcall	.-18     	; 0x2630 <_ZN17LiquidCrystal_I2C7commandEh>
    2642:	80 ed       	ldi	r24, 0xD0	; 208
    2644:	97 e0       	ldi	r25, 0x07	; 7
    2646:	f3 cd       	rjmp	.-1050   	; 0x222e <delayMicroseconds>

00002648 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	28 97       	sbiw	r28, 0x08	; 8
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	9c 01       	movw	r18, r24
    265e:	88 e0       	ldi	r24, 0x08	; 8
    2660:	e8 e0       	ldi	r30, 0x08	; 8
    2662:	f2 e0       	ldi	r31, 0x02	; 2
    2664:	de 01       	movw	r26, r28
    2666:	11 96       	adiw	r26, 0x01	; 1
    2668:	01 90       	ld	r0, Z+
    266a:	0d 92       	st	X+, r0
    266c:	8a 95       	dec	r24
    266e:	e1 f7       	brne	.-8      	; 0x2668 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2670:	f9 01       	movw	r30, r18
    2672:	80 85       	ldd	r24, Z+8	; 0x08
    2674:	84 17       	cp	r24, r20
    2676:	10 f4       	brcc	.+4      	; 0x267c <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2678:	4f ef       	ldi	r20, 0xFF	; 255
    267a:	48 0f       	add	r20, r24
    267c:	fe 01       	movw	r30, r28
    267e:	31 96       	adiw	r30, 0x01	; 1
    2680:	e4 0f       	add	r30, r20
    2682:	f1 1d       	adc	r31, r1
    2684:	e4 0f       	add	r30, r20
    2686:	f1 1d       	adc	r31, r1
    2688:	90 81       	ld	r25, Z
    268a:	69 0f       	add	r22, r25
    268c:	60 68       	ori	r22, 0x80	; 128
    268e:	c9 01       	movw	r24, r18
    2690:	28 96       	adiw	r28, 0x08	; 8
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	c7 cf       	rjmp	.-114    	; 0x2630 <_ZN17LiquidCrystal_I2C7commandEh>

000026a2 <_ZN17LiquidCrystal_I2C7displayEv>:
    26a2:	fc 01       	movw	r30, r24
    26a4:	66 81       	ldd	r22, Z+6	; 0x06
    26a6:	26 2f       	mov	r18, r22
    26a8:	24 60       	ori	r18, 0x04	; 4
    26aa:	26 83       	std	Z+6, r18	; 0x06
    26ac:	6c 60       	ori	r22, 0x0C	; 12
    26ae:	c0 cf       	rjmp	.-128    	; 0x2630 <_ZN17LiquidCrystal_I2C7commandEh>

000026b0 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	a9 df       	rcall	.-174    	; 0x2606 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	08 95       	ret

000026ba <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	ec 01       	movw	r28, r24
	if (lines > 1) {
    26c0:	42 30       	cpi	r20, 0x02	; 2
    26c2:	18 f0       	brcs	.+6      	; 0x26ca <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	88 60       	ori	r24, 0x08	; 8
    26c8:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    26ca:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    26cc:	22 23       	and	r18, r18
    26ce:	29 f0       	breq	.+10     	; 0x26da <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    26d0:	41 30       	cpi	r20, 0x01	; 1
    26d2:	19 f4       	brne	.+6      	; 0x26da <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    26d4:	8d 81       	ldd	r24, Y+5	; 0x05
    26d6:	84 60       	ori	r24, 0x04	; 4
    26d8:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    26da:	62 e3       	ldi	r22, 0x32	; 50
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	6c dd       	rcall	.-1320   	; 0x21bc <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    26e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e6:	ce 01       	movw	r24, r28
    26e8:	55 df       	rcall	.-342    	; 0x2594 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    26ea:	68 ee       	ldi	r22, 0xE8	; 232
    26ec:	73 e0       	ldi	r23, 0x03	; 3
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	64 dd       	rcall	.-1336   	; 0x21bc <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    26f4:	60 e3       	ldi	r22, 0x30	; 48
    26f6:	ce 01       	movw	r24, r28
    26f8:	7a df       	rcall	.-268    	; 0x25ee <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    26fa:	84 e9       	ldi	r24, 0x94	; 148
    26fc:	91 e1       	ldi	r25, 0x11	; 17
    26fe:	97 dd       	rcall	.-1234   	; 0x222e <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2700:	60 e3       	ldi	r22, 0x30	; 48
    2702:	ce 01       	movw	r24, r28
    2704:	74 df       	rcall	.-280    	; 0x25ee <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2706:	84 e9       	ldi	r24, 0x94	; 148
    2708:	91 e1       	ldi	r25, 0x11	; 17
    270a:	91 dd       	rcall	.-1246   	; 0x222e <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    270c:	60 e3       	ldi	r22, 0x30	; 48
    270e:	ce 01       	movw	r24, r28
    2710:	6e df       	rcall	.-292    	; 0x25ee <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    2712:	86 e9       	ldi	r24, 0x96	; 150
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	8b dd       	rcall	.-1258   	; 0x222e <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2718:	60 e2       	ldi	r22, 0x20	; 32
    271a:	ce 01       	movw	r24, r28
    271c:	68 df       	rcall	.-304    	; 0x25ee <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    271e:	6d 81       	ldd	r22, Y+5	; 0x05
    2720:	60 62       	ori	r22, 0x20	; 32
    2722:	ce 01       	movw	r24, r28
    2724:	85 df       	rcall	.-246    	; 0x2630 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2726:	84 e0       	ldi	r24, 0x04	; 4
    2728:	8e 83       	std	Y+6, r24	; 0x06
	display();
    272a:	ce 01       	movw	r24, r28
    272c:	ba df       	rcall	.-140    	; 0x26a2 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    272e:	ce 01       	movw	r24, r28
    2730:	81 df       	rcall	.-254    	; 0x2634 <_ZN17LiquidCrystal_I2C5clearEv>
    2732:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2734:	8f 83       	std	Y+7, r24	; 0x07
    2736:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    2738:	ce 01       	movw	r24, r28
    273a:	7a df       	rcall	.-268    	; 0x2630 <_ZN17LiquidCrystal_I2C7commandEh>
    273c:	ce 01       	movw	r24, r28
    273e:	df 91       	pop	r29
	
	home();
    2740:	cf 91       	pop	r28
  
}
    2742:	7d cf       	rjmp	.-262    	; 0x263e <_ZN17LiquidCrystal_I2C4homeEv>

00002744 <_ZN17LiquidCrystal_I2C9init_privEv>:
    2744:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2746:	df 93       	push	r29
    2748:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    274a:	8b e5       	ldi	r24, 0x5B	; 91
    274c:	95 e0       	ldi	r25, 0x05	; 5
    274e:	d5 d0       	rcall	.+426    	; 0x28fa <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2750:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	4a 85       	ldd	r20, Y+10	; 0x0a
    2756:	69 85       	ldd	r22, Y+9	; 0x09
    2758:	ce 01       	movw	r24, r28
}
    275a:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    275c:	cf 91       	pop	r28
    275e:	ad cf       	rjmp	.-166    	; 0x26ba <_ZN17LiquidCrystal_I2C5beginEhhh>

00002760 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2760:	f1 cf       	rjmp	.-30     	; 0x2744 <_ZN17LiquidCrystal_I2C9init_privEv>

00002762 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2762:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <_ZN7TwoWire14rxBufferLengthE>
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	20 91 90 05 	lds	r18, 0x0590	; 0x800590 <_ZN7TwoWire13rxBufferIndexE>
    276c:	82 1b       	sub	r24, r18
    276e:	91 09       	sbc	r25, r1
    2770:	08 95       	ret

00002772 <_ZN7TwoWire4readEv>:
    2772:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <_ZN7TwoWire13rxBufferIndexE>
    2776:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <_ZN7TwoWire14rxBufferLengthE>
    277a:	98 17       	cp	r25, r24
    277c:	50 f4       	brcc	.+20     	; 0x2792 <_ZN7TwoWire4readEv+0x20>
    277e:	e9 2f       	mov	r30, r25
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	ef 56       	subi	r30, 0x6F	; 111
    2784:	fa 4f       	sbci	r31, 0xFA	; 250
    2786:	20 81       	ld	r18, Z
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	9f 5f       	subi	r25, 0xFF	; 255
    278c:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <_ZN7TwoWire13rxBufferIndexE>
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <_ZN7TwoWire4readEv+0x24>
    2792:	2f ef       	ldi	r18, 0xFF	; 255
    2794:	3f ef       	ldi	r19, 0xFF	; 255
    2796:	c9 01       	movw	r24, r18
    2798:	08 95       	ret

0000279a <_ZN7TwoWire4peekEv>:
    279a:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <_ZN7TwoWire13rxBufferIndexE>
    279e:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <_ZN7TwoWire14rxBufferLengthE>
    27a2:	e8 17       	cp	r30, r24
    27a4:	30 f4       	brcc	.+12     	; 0x27b2 <_ZN7TwoWire4peekEv+0x18>
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	ef 56       	subi	r30, 0x6F	; 111
    27aa:	fa 4f       	sbci	r31, 0xFA	; 250
    27ac:	80 81       	ld	r24, Z
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	08 95       	ret
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	9f ef       	ldi	r25, 0xFF	; 255
    27b6:	08 95       	ret

000027b8 <_ZN7TwoWire5flushEv>:
    27b8:	08 95       	ret

000027ba <_ZN7TwoWire16onReceiveServiceEPhi>:
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	ec 01       	movw	r28, r24
    27c0:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <_ZN7TwoWire14user_onReceiveE>
    27c4:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <_ZN7TwoWire14user_onReceiveE+0x1>
    27c8:	30 97       	sbiw	r30, 0x00	; 0
    27ca:	f1 f0       	breq	.+60     	; 0x2808 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    27cc:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <_ZN7TwoWire13rxBufferIndexE>
    27d0:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <_ZN7TwoWire14rxBufferLengthE>
    27d4:	98 17       	cp	r25, r24
    27d6:	c0 f0       	brcs	.+48     	; 0x2808 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	29 2f       	mov	r18, r25
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	26 17       	cp	r18, r22
    27e0:	37 07       	cpc	r19, r23
    27e2:	54 f4       	brge	.+20     	; 0x27f8 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    27e4:	de 01       	movw	r26, r28
    27e6:	a2 0f       	add	r26, r18
    27e8:	b3 1f       	adc	r27, r19
    27ea:	4c 91       	ld	r20, X
    27ec:	d9 01       	movw	r26, r18
    27ee:	af 56       	subi	r26, 0x6F	; 111
    27f0:	ba 4f       	sbci	r27, 0xFA	; 250
    27f2:	4c 93       	st	X, r20
    27f4:	9f 5f       	subi	r25, 0xFF	; 255
    27f6:	f1 cf       	rjmp	.-30     	; 0x27da <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    27f8:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZN7TwoWire13rxBufferIndexE>
    27fc:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <_ZN7TwoWire14rxBufferLengthE>
    2800:	cb 01       	movw	r24, r22
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	19 94       	eijmp
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	08 95       	ret

0000280e <_ZN7TwoWire16onRequestServiceEv>:
    280e:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <_ZN7TwoWire14user_onRequestE>
    2812:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <_ZN7TwoWire14user_onRequestE+0x1>
    2816:	30 97       	sbiw	r30, 0x00	; 0
    2818:	29 f0       	breq	.+10     	; 0x2824 <_ZN7TwoWire16onRequestServiceEv+0x16>
    281a:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <_ZN7TwoWire13txBufferIndexE>
    281e:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <_ZN7TwoWire14txBufferLengthE>
    2822:	19 94       	eijmp
    2824:	08 95       	ret

00002826 <_ZN7TwoWire5writeEPKhj>:
    2826:	cf 92       	push	r12
    2828:	df 92       	push	r13
    282a:	ef 92       	push	r14
    282c:	ff 92       	push	r15
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	7c 01       	movw	r14, r24
    2838:	cb 01       	movw	r24, r22
    283a:	8a 01       	movw	r16, r20
    283c:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <_ZN7TwoWire12transmittingE>
    2840:	22 23       	and	r18, r18
    2842:	89 f0       	breq	.+34     	; 0x2866 <_ZN7TwoWire5writeEPKhj+0x40>
    2844:	eb 01       	movw	r28, r22
    2846:	6b 01       	movw	r12, r22
    2848:	c4 0e       	add	r12, r20
    284a:	d5 1e       	adc	r13, r21
    284c:	cc 15       	cp	r28, r12
    284e:	dd 05       	cpc	r29, r13
    2850:	61 f0       	breq	.+24     	; 0x286a <_ZN7TwoWire5writeEPKhj+0x44>
    2852:	69 91       	ld	r22, Y+
    2854:	d7 01       	movw	r26, r14
    2856:	ed 91       	ld	r30, X+
    2858:	fc 91       	ld	r31, X
    285a:	01 90       	ld	r0, Z+
    285c:	f0 81       	ld	r31, Z
    285e:	e0 2d       	mov	r30, r0
    2860:	c7 01       	movw	r24, r14
    2862:	19 95       	eicall
    2864:	f3 cf       	rjmp	.-26     	; 0x284c <_ZN7TwoWire5writeEPKhj+0x26>
    2866:	64 2f       	mov	r22, r20
    2868:	eb d0       	rcall	.+470    	; 0x2a40 <twi_transmit>
    286a:	c8 01       	movw	r24, r16
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	ff 90       	pop	r15
    2876:	ef 90       	pop	r14
    2878:	df 90       	pop	r13
    287a:	cf 90       	pop	r12
    287c:	08 95       	ret

0000287e <_ZN7TwoWire5writeEh>:
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	1f 92       	push	r1
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	69 83       	std	Y+1, r22	; 0x01
    288a:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <_ZN7TwoWire12transmittingE>
    288e:	22 23       	and	r18, r18
    2890:	d1 f0       	breq	.+52     	; 0x28c6 <_ZN7TwoWire5writeEh+0x48>
    2892:	20 91 6c 05 	lds	r18, 0x056C	; 0x80056c <_ZN7TwoWire14txBufferLengthE>
    2896:	20 32       	cpi	r18, 0x20	; 32
    2898:	40 f0       	brcs	.+16     	; 0x28aa <_ZN7TwoWire5writeEh+0x2c>
    289a:	21 e0       	ldi	r18, 0x01	; 1
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	fc 01       	movw	r30, r24
    28a0:	33 83       	std	Z+3, r19	; 0x03
    28a2:	22 83       	std	Z+2, r18	; 0x02
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <_ZN7TwoWire5writeEh+0x54>
    28aa:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <_ZN7TwoWire13txBufferIndexE>
    28ae:	e8 2f       	mov	r30, r24
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	e2 59       	subi	r30, 0x92	; 146
    28b4:	fa 4f       	sbci	r31, 0xFA	; 250
    28b6:	99 81       	ldd	r25, Y+1	; 0x01
    28b8:	90 83       	st	Z, r25
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <_ZN7TwoWire13txBufferIndexE>
    28c0:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <_ZN7TwoWire14txBufferLengthE>
    28c4:	04 c0       	rjmp	.+8      	; 0x28ce <_ZN7TwoWire5writeEh+0x50>
    28c6:	61 e0       	ldi	r22, 0x01	; 1
    28c8:	ce 01       	movw	r24, r28
    28ca:	01 96       	adiw	r24, 0x01	; 1
    28cc:	b9 d0       	rcall	.+370    	; 0x2a40 <twi_transmit>
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	0f 90       	pop	r0
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <_ZN7TwoWireC1Ev>:
    28da:	fc 01       	movw	r30, r24
    28dc:	13 82       	std	Z+3, r1	; 0x03
    28de:	12 82       	std	Z+2, r1	; 0x02
    28e0:	88 ee       	ldi	r24, 0xE8	; 232
    28e2:	93 e0       	ldi	r25, 0x03	; 3
    28e4:	a0 e0       	ldi	r26, 0x00	; 0
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	84 83       	std	Z+4, r24	; 0x04
    28ea:	95 83       	std	Z+5, r25	; 0x05
    28ec:	a6 83       	std	Z+6, r26	; 0x06
    28ee:	b7 83       	std	Z+7, r27	; 0x07
    28f0:	8f ea       	ldi	r24, 0xAF	; 175
    28f2:	93 e0       	ldi	r25, 0x03	; 3
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	80 83       	st	Z, r24
    28f8:	08 95       	ret

000028fa <_ZN7TwoWire5beginEv>:
    28fa:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZN7TwoWire13rxBufferIndexE>
    28fe:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <_ZN7TwoWire14rxBufferLengthE>
    2902:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <_ZN7TwoWire13txBufferIndexE>
    2906:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <_ZN7TwoWire14txBufferLengthE>
    290a:	28 d0       	rcall	.+80     	; 0x295c <twi_init>
    290c:	87 e0       	ldi	r24, 0x07	; 7
    290e:	94 e1       	ldi	r25, 0x14	; 20
    2910:	c4 d0       	rcall	.+392    	; 0x2a9a <twi_attachSlaveTxEvent>
    2912:	8d ed       	ldi	r24, 0xDD	; 221
    2914:	93 e1       	ldi	r25, 0x13	; 19
    2916:	bc c0       	rjmp	.+376    	; 0x2a90 <twi_attachSlaveRxEvent>

00002918 <_ZN7TwoWire17beginTransmissionEh>:
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <_ZN7TwoWire12transmittingE>
    291e:	60 93 8e 05 	sts	0x058E, r22	; 0x80058e <_ZN7TwoWire9txAddressE>
    2922:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <_ZN7TwoWire13txBufferIndexE>
    2926:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <_ZN7TwoWire14txBufferLengthE>
    292a:	08 95       	ret

0000292c <_ZN7TwoWire15endTransmissionEh>:
    292c:	0f 93       	push	r16
    292e:	06 2f       	mov	r16, r22
    2930:	21 e0       	ldi	r18, 0x01	; 1
    2932:	40 91 6c 05 	lds	r20, 0x056C	; 0x80056c <_ZN7TwoWire14txBufferLengthE>
    2936:	6e e6       	ldi	r22, 0x6E	; 110
    2938:	75 e0       	ldi	r23, 0x05	; 5
    293a:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <_ZN7TwoWire9txAddressE>
    293e:	2a d0       	rcall	.+84     	; 0x2994 <twi_writeTo>
    2940:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <_ZN7TwoWire13txBufferIndexE>
    2944:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <_ZN7TwoWire14txBufferLengthE>
    2948:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <_ZN7TwoWire12transmittingE>
    294c:	0f 91       	pop	r16
    294e:	08 95       	ret

00002950 <_ZN7TwoWire15endTransmissionEv>:
    2950:	61 e0       	ldi	r22, 0x01	; 1
    2952:	ec cf       	rjmp	.-40     	; 0x292c <_ZN7TwoWire15endTransmissionEh>

00002954 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2954:	8b e5       	ldi	r24, 0x5B	; 91
    2956:	95 e0       	ldi	r25, 0x05	; 5
    2958:	c0 cf       	rjmp	.-128    	; 0x28da <_ZN7TwoWireC1Ev>

0000295a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    295a:	08 95       	ret

0000295c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    295c:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <twi_state>
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <twi_sendStop>
    2966:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <twi_inRepStart>
    296a:	61 e0       	ldi	r22, 0x01	; 1
    296c:	84 e1       	ldi	r24, 0x14	; 20
    296e:	5d dd       	rcall	.-1350   	; 0x242a <digitalWrite>
    2970:	61 e0       	ldi	r22, 0x01	; 1
    2972:	85 e1       	ldi	r24, 0x15	; 21
    2974:	5a dd       	rcall	.-1356   	; 0x242a <digitalWrite>
    2976:	e9 eb       	ldi	r30, 0xB9	; 185
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	8e 7f       	andi	r24, 0xFE	; 254
    297e:	80 83       	st	Z, r24
    2980:	80 81       	ld	r24, Z
    2982:	8d 7f       	andi	r24, 0xFD	; 253
    2984:	80 83       	st	Z, r24
    2986:	88 e4       	ldi	r24, 0x48	; 72
    2988:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    298c:	85 e4       	ldi	r24, 0x45	; 69
    298e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2992:	08 95       	ret

00002994 <twi_writeTo>:
    2994:	0f 93       	push	r16
    2996:	41 32       	cpi	r20, 0x21	; 33
    2998:	08 f0       	brcs	.+2      	; 0x299c <twi_writeTo+0x8>
    299a:	4a c0       	rjmp	.+148    	; 0x2a30 <twi_writeTo+0x9c>
    299c:	90 91 1e 06 	lds	r25, 0x061E	; 0x80061e <twi_state>
    29a0:	91 11       	cpse	r25, r1
    29a2:	fc cf       	rjmp	.-8      	; 0x299c <twi_writeTo+0x8>
    29a4:	32 e0       	ldi	r19, 0x02	; 2
    29a6:	30 93 1e 06 	sts	0x061E, r19	; 0x80061e <twi_state>
    29aa:	00 93 1c 06 	sts	0x061C, r16	; 0x80061c <twi_sendStop>
    29ae:	3f ef       	ldi	r19, 0xFF	; 255
    29b0:	30 93 b1 05 	sts	0x05B1, r19	; 0x8005b1 <twi_error>
    29b4:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <twi_masterBufferIndex>
    29b8:	40 93 f5 05 	sts	0x05F5, r20	; 0x8005f5 <twi_masterBufferLength>
    29bc:	56 2f       	mov	r21, r22
    29be:	a7 ef       	ldi	r26, 0xF7	; 247
    29c0:	b5 e0       	ldi	r27, 0x05	; 5
    29c2:	fb 01       	movw	r30, r22
    29c4:	3e 2f       	mov	r19, r30
    29c6:	35 1b       	sub	r19, r21
    29c8:	34 17       	cp	r19, r20
    29ca:	18 f4       	brcc	.+6      	; 0x29d2 <twi_writeTo+0x3e>
    29cc:	31 91       	ld	r19, Z+
    29ce:	3d 93       	st	X+, r19
    29d0:	f9 cf       	rjmp	.-14     	; 0x29c4 <twi_writeTo+0x30>
    29d2:	10 92 1d 06 	sts	0x061D, r1	; 0x80061d <twi_slarw>
    29d6:	30 91 1d 06 	lds	r19, 0x061D	; 0x80061d <twi_slarw>
    29da:	88 0f       	add	r24, r24
    29dc:	83 2b       	or	r24, r19
    29de:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <twi_slarw>
    29e2:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <twi_inRepStart>
    29e6:	81 30       	cpi	r24, 0x01	; 1
    29e8:	61 f4       	brne	.+24     	; 0x2a02 <twi_writeTo+0x6e>
    29ea:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <twi_inRepStart>
    29ee:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <twi_slarw>
    29f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    29f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    29fa:	83 fd       	sbrc	r24, 3
    29fc:	f8 cf       	rjmp	.-16     	; 0x29ee <twi_writeTo+0x5a>
    29fe:	85 ec       	ldi	r24, 0xC5	; 197
    2a00:	01 c0       	rjmp	.+2      	; 0x2a04 <twi_writeTo+0x70>
    2a02:	85 ee       	ldi	r24, 0xE5	; 229
    2a04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a08:	22 23       	and	r18, r18
    2a0a:	21 f0       	breq	.+8      	; 0x2a14 <twi_writeTo+0x80>
    2a0c:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <twi_state>
    2a10:	82 30       	cpi	r24, 0x02	; 2
    2a12:	d1 f3       	breq	.-12     	; 0x2a08 <twi_writeTo+0x74>
    2a14:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <twi_error>
    2a18:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1a:	79 f0       	breq	.+30     	; 0x2a3a <twi_writeTo+0xa6>
    2a1c:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <twi_error>
    2a20:	80 32       	cpi	r24, 0x20	; 32
    2a22:	41 f0       	breq	.+16     	; 0x2a34 <twi_writeTo+0xa0>
    2a24:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <twi_error>
    2a28:	80 33       	cpi	r24, 0x30	; 48
    2a2a:	31 f0       	breq	.+12     	; 0x2a38 <twi_writeTo+0xa4>
    2a2c:	94 e0       	ldi	r25, 0x04	; 4
    2a2e:	05 c0       	rjmp	.+10     	; 0x2a3a <twi_writeTo+0xa6>
    2a30:	91 e0       	ldi	r25, 0x01	; 1
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <twi_writeTo+0xa6>
    2a34:	92 e0       	ldi	r25, 0x02	; 2
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <twi_writeTo+0xa6>
    2a38:	93 e0       	ldi	r25, 0x03	; 3
    2a3a:	89 2f       	mov	r24, r25
    2a3c:	0f 91       	pop	r16
    2a3e:	08 95       	ret

00002a40 <twi_transmit>:
    2a40:	40 91 d3 05 	lds	r20, 0x05D3	; 0x8005d3 <twi_txBufferLength>
    2a44:	26 2f       	mov	r18, r22
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	24 0f       	add	r18, r20
    2a4a:	31 1d       	adc	r19, r1
    2a4c:	21 32       	cpi	r18, 0x21	; 33
    2a4e:	31 05       	cpc	r19, r1
    2a50:	dc f4       	brge	.+54     	; 0x2a88 <twi_transmit+0x48>
    2a52:	20 91 1e 06 	lds	r18, 0x061E	; 0x80061e <twi_state>
    2a56:	24 30       	cpi	r18, 0x04	; 4
    2a58:	c9 f4       	brne	.+50     	; 0x2a8c <twi_transmit+0x4c>
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	86 17       	cp	r24, r22
    2a62:	58 f4       	brcc	.+22     	; 0x2a7a <twi_transmit+0x3a>
    2a64:	30 91 d3 05 	lds	r19, 0x05D3	; 0x8005d3 <twi_txBufferLength>
    2a68:	21 91       	ld	r18, Z+
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	ab 52       	subi	r26, 0x2B	; 43
    2a6e:	ba 4f       	sbci	r27, 0xFA	; 250
    2a70:	a3 0f       	add	r26, r19
    2a72:	b1 1d       	adc	r27, r1
    2a74:	2c 93       	st	X, r18
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	f3 cf       	rjmp	.-26     	; 0x2a60 <twi_transmit+0x20>
    2a7a:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <twi_txBufferLength>
    2a7e:	68 0f       	add	r22, r24
    2a80:	60 93 d3 05 	sts	0x05D3, r22	; 0x8005d3 <twi_txBufferLength>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	08 95       	ret
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	08 95       	ret
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	08 95       	ret

00002a90 <twi_attachSlaveRxEvent>:
    2a90:	90 93 18 06 	sts	0x0618, r25	; 0x800618 <twi_onSlaveReceive+0x1>
    2a94:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <twi_onSlaveReceive>
    2a98:	08 95       	ret

00002a9a <twi_attachSlaveTxEvent>:
    2a9a:	90 93 1a 06 	sts	0x061A, r25	; 0x80061a <twi_onSlaveTransmit+0x1>
    2a9e:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <twi_onSlaveTransmit>
    2aa2:	08 95       	ret

00002aa4 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2aa4:	85 ed       	ldi	r24, 0xD5	; 213
    2aa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2aaa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2aae:	84 fd       	sbrc	r24, 4
    2ab0:	fc cf       	rjmp	.-8      	; 0x2aaa <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ab2:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <twi_state>
    2ab6:	08 95       	ret

00002ab8 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2ab8:	85 ec       	ldi	r24, 0xC5	; 197
    2aba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2abe:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <twi_state>
    2ac2:	08 95       	ret

00002ac4 <__vector_39>:
}

ISR(TWI_vect)
{
    2ac4:	1f 92       	push	r1
    2ac6:	0f 92       	push	r0
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	0f 92       	push	r0
    2acc:	11 24       	eor	r1, r1
    2ace:	0b b6       	in	r0, 0x3b	; 59
    2ad0:	0f 92       	push	r0
    2ad2:	2f 93       	push	r18
    2ad4:	3f 93       	push	r19
    2ad6:	4f 93       	push	r20
    2ad8:	5f 93       	push	r21
    2ada:	6f 93       	push	r22
    2adc:	7f 93       	push	r23
    2ade:	8f 93       	push	r24
    2ae0:	9f 93       	push	r25
    2ae2:	af 93       	push	r26
    2ae4:	bf 93       	push	r27
    2ae6:	ef 93       	push	r30
    2ae8:	ff 93       	push	r31
  switch(TW_STATUS){
    2aea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2aee:	88 7f       	andi	r24, 0xF8	; 248
    2af0:	80 36       	cpi	r24, 0x60	; 96
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <__vector_39+0x32>
    2af4:	9d c0       	rjmp	.+314    	; 0x2c30 <__vector_39+0x16c>
    2af6:	70 f5       	brcc	.+92     	; 0x2b54 <__vector_39+0x90>
    2af8:	88 32       	cpi	r24, 0x28	; 40
    2afa:	09 f4       	brne	.+2      	; 0x2afe <__vector_39+0x3a>
    2afc:	5c c0       	rjmp	.+184    	; 0x2bb6 <__vector_39+0xf2>
    2afe:	90 f4       	brcc	.+36     	; 0x2b24 <__vector_39+0x60>
    2b00:	80 31       	cpi	r24, 0x10	; 16
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <__vector_39+0x42>
    2b04:	55 c0       	rjmp	.+170    	; 0x2bb0 <__vector_39+0xec>
    2b06:	38 f4       	brcc	.+14     	; 0x2b16 <__vector_39+0x52>
    2b08:	88 23       	and	r24, r24
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <__vector_39+0x4a>
    2b0c:	f3 c0       	rjmp	.+486    	; 0x2cf4 <__vector_39+0x230>
    2b0e:	88 30       	cpi	r24, 0x08	; 8
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <__vector_39+0x50>
    2b12:	4e c0       	rjmp	.+156    	; 0x2bb0 <__vector_39+0xec>
    2b14:	f2 c0       	rjmp	.+484    	; 0x2cfa <__vector_39+0x236>
    2b16:	88 31       	cpi	r24, 0x18	; 24
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <__vector_39+0x58>
    2b1a:	4d c0       	rjmp	.+154    	; 0x2bb6 <__vector_39+0xf2>
    2b1c:	80 32       	cpi	r24, 0x20	; 32
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <__vector_39+0x5e>
    2b20:	5e c0       	rjmp	.+188    	; 0x2bde <__vector_39+0x11a>
    2b22:	eb c0       	rjmp	.+470    	; 0x2cfa <__vector_39+0x236>
    2b24:	80 34       	cpi	r24, 0x40	; 64
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <__vector_39+0x66>
    2b28:	69 c0       	rjmp	.+210    	; 0x2bfc <__vector_39+0x138>
    2b2a:	50 f4       	brcc	.+20     	; 0x2b40 <__vector_39+0x7c>
    2b2c:	80 33       	cpi	r24, 0x30	; 48
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <__vector_39+0x6e>
    2b30:	56 c0       	rjmp	.+172    	; 0x2bde <__vector_39+0x11a>
    2b32:	88 33       	cpi	r24, 0x38	; 56
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <__vector_39+0x74>
    2b36:	e1 c0       	rjmp	.+450    	; 0x2cfa <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2b38:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <twi_error>
      twi_releaseBus();
    2b3c:	bd df       	rcall	.-134    	; 0x2ab8 <twi_releaseBus>
      break;
    2b3e:	dd c0       	rjmp	.+442    	; 0x2cfa <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2b40:	80 35       	cpi	r24, 0x50	; 80
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <__vector_39+0x82>
    2b44:	4f c0       	rjmp	.+158    	; 0x2be4 <__vector_39+0x120>
    2b46:	88 35       	cpi	r24, 0x58	; 88
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <__vector_39+0x88>
    2b4a:	5d c0       	rjmp	.+186    	; 0x2c06 <__vector_39+0x142>
    2b4c:	88 34       	cpi	r24, 0x48	; 72
    2b4e:	09 f0       	breq	.+2      	; 0x2b52 <__vector_39+0x8e>
    2b50:	d4 c0       	rjmp	.+424    	; 0x2cfa <__vector_39+0x236>
    2b52:	d2 c0       	rjmp	.+420    	; 0x2cf8 <__vector_39+0x234>
    2b54:	88 39       	cpi	r24, 0x98	; 152
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <__vector_39+0x96>
    2b58:	c3 c0       	rjmp	.+390    	; 0x2ce0 <__vector_39+0x21c>
    2b5a:	a8 f4       	brcc	.+42     	; 0x2b86 <__vector_39+0xc2>
    2b5c:	88 37       	cpi	r24, 0x78	; 120
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <__vector_39+0x9e>
    2b60:	67 c0       	rjmp	.+206    	; 0x2c30 <__vector_39+0x16c>
    2b62:	38 f4       	brcc	.+14     	; 0x2b72 <__vector_39+0xae>
    2b64:	88 36       	cpi	r24, 0x68	; 104
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <__vector_39+0xa6>
    2b68:	63 c0       	rjmp	.+198    	; 0x2c30 <__vector_39+0x16c>
    2b6a:	80 37       	cpi	r24, 0x70	; 112
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <__vector_39+0xac>
    2b6e:	60 c0       	rjmp	.+192    	; 0x2c30 <__vector_39+0x16c>
    2b70:	c4 c0       	rjmp	.+392    	; 0x2cfa <__vector_39+0x236>
    2b72:	88 38       	cpi	r24, 0x88	; 136
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <__vector_39+0xb4>
    2b76:	b4 c0       	rjmp	.+360    	; 0x2ce0 <__vector_39+0x21c>
    2b78:	80 39       	cpi	r24, 0x90	; 144
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <__vector_39+0xba>
    2b7c:	5f c0       	rjmp	.+190    	; 0x2c3c <__vector_39+0x178>
    2b7e:	80 38       	cpi	r24, 0x80	; 128
    2b80:	09 f0       	breq	.+2      	; 0x2b84 <__vector_39+0xc0>
    2b82:	bb c0       	rjmp	.+374    	; 0x2cfa <__vector_39+0x236>
    2b84:	5b c0       	rjmp	.+182    	; 0x2c3c <__vector_39+0x178>
    2b86:	80 3b       	cpi	r24, 0xB0	; 176
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <__vector_39+0xc8>
    2b8a:	82 c0       	rjmp	.+260    	; 0x2c90 <__vector_39+0x1cc>
    2b8c:	38 f4       	brcc	.+14     	; 0x2b9c <__vector_39+0xd8>
    2b8e:	80 3a       	cpi	r24, 0xA0	; 160
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <__vector_39+0xd0>
    2b92:	66 c0       	rjmp	.+204    	; 0x2c60 <__vector_39+0x19c>
    2b94:	88 3a       	cpi	r24, 0xA8	; 168
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <__vector_39+0xd6>
    2b98:	7b c0       	rjmp	.+246    	; 0x2c90 <__vector_39+0x1cc>
    2b9a:	af c0       	rjmp	.+350    	; 0x2cfa <__vector_39+0x236>
    2b9c:	80 3c       	cpi	r24, 0xC0	; 192
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <__vector_39+0xde>
    2ba0:	a3 c0       	rjmp	.+326    	; 0x2ce8 <__vector_39+0x224>
    2ba2:	88 3c       	cpi	r24, 0xC8	; 200
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <__vector_39+0xe4>
    2ba6:	a0 c0       	rjmp	.+320    	; 0x2ce8 <__vector_39+0x224>
    2ba8:	88 3b       	cpi	r24, 0xB8	; 184
    2baa:	09 f4       	brne	.+2      	; 0x2bae <__vector_39+0xea>
    2bac:	86 c0       	rjmp	.+268    	; 0x2cba <__vector_39+0x1f6>
    2bae:	a5 c0       	rjmp	.+330    	; 0x2cfa <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2bb0:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <twi_slarw>
    2bb4:	10 c0       	rjmp	.+32     	; 0x2bd6 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2bb6:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <twi_masterBufferIndex>
    2bba:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <twi_masterBufferLength>
    2bbe:	98 17       	cp	r25, r24
    2bc0:	70 f5       	brcc	.+92     	; 0x2c1e <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2bc2:	e0 91 f6 05 	lds	r30, 0x05F6	; 0x8005f6 <twi_masterBufferIndex>
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	8e 0f       	add	r24, r30
    2bca:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <twi_masterBufferIndex>
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	e9 50       	subi	r30, 0x09	; 9
    2bd2:	fa 4f       	sbci	r31, 0xFA	; 250
    2bd4:	80 81       	ld	r24, Z
    2bd6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2bda:	85 ec       	ldi	r24, 0xC5	; 197
    2bdc:	82 c0       	rjmp	.+260    	; 0x2ce2 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2bde:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <twi_error>
    2be2:	8a c0       	rjmp	.+276    	; 0x2cf8 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2be4:	e0 91 f6 05 	lds	r30, 0x05F6	; 0x8005f6 <twi_masterBufferIndex>
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	8e 0f       	add	r24, r30
    2bec:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <twi_masterBufferIndex>
    2bf0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	e9 50       	subi	r30, 0x09	; 9
    2bf8:	fa 4f       	sbci	r31, 0xFA	; 250
    2bfa:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2bfc:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <twi_masterBufferIndex>
    2c00:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <twi_masterBufferLength>
    2c04:	6a c0       	rjmp	.+212    	; 0x2cda <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c06:	e0 91 f6 05 	lds	r30, 0x05F6	; 0x8005f6 <twi_masterBufferIndex>
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	8e 0f       	add	r24, r30
    2c0e:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <twi_masterBufferIndex>
    2c12:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	e9 50       	subi	r30, 0x09	; 9
    2c1a:	fa 4f       	sbci	r31, 0xFA	; 250
    2c1c:	80 83       	st	Z, r24
	if (twi_sendStop)
    2c1e:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <twi_sendStop>
    2c22:	81 11       	cpse	r24, r1
    2c24:	69 c0       	rjmp	.+210    	; 0x2cf8 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2c2c:	84 ea       	ldi	r24, 0xA4	; 164
    2c2e:	5d c0       	rjmp	.+186    	; 0x2cea <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2c30:	83 e0       	ldi	r24, 0x03	; 3
    2c32:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2c36:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <twi_rxBufferIndex>
    2c3a:	cf cf       	rjmp	.-98     	; 0x2bda <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2c3c:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <twi_rxBufferIndex>
    2c40:	80 32       	cpi	r24, 0x20	; 32
    2c42:	08 f0       	brcs	.+2      	; 0x2c46 <__vector_39+0x182>
    2c44:	4d c0       	rjmp	.+154    	; 0x2ce0 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2c46:	e0 91 b2 05 	lds	r30, 0x05B2	; 0x8005b2 <twi_rxBufferIndex>
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	8e 0f       	add	r24, r30
    2c4e:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <twi_rxBufferIndex>
    2c52:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	ed 54       	subi	r30, 0x4D	; 77
    2c5a:	fa 4f       	sbci	r31, 0xFA	; 250
    2c5c:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2c5e:	bd cf       	rjmp	.-134    	; 0x2bda <__vector_39+0x116>
    2c60:	2b df       	rcall	.-426    	; 0x2ab8 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2c62:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <twi_rxBufferIndex>
    2c66:	80 32       	cpi	r24, 0x20	; 32
    2c68:	30 f4       	brcc	.+12     	; 0x2c76 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2c6a:	e0 91 b2 05 	lds	r30, 0x05B2	; 0x8005b2 <twi_rxBufferIndex>
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	ed 54       	subi	r30, 0x4D	; 77
    2c72:	fa 4f       	sbci	r31, 0xFA	; 250
    2c74:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2c76:	60 91 b2 05 	lds	r22, 0x05B2	; 0x8005b2 <twi_rxBufferIndex>
    2c7a:	70 e0       	ldi	r23, 0x00	; 0
    2c7c:	e0 91 17 06 	lds	r30, 0x0617	; 0x800617 <twi_onSlaveReceive>
    2c80:	f0 91 18 06 	lds	r31, 0x0618	; 0x800618 <twi_onSlaveReceive+0x1>
    2c84:	83 eb       	ldi	r24, 0xB3	; 179
    2c86:	95 e0       	ldi	r25, 0x05	; 5
    2c88:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2c8a:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <twi_rxBufferIndex>
      break;
    2c8e:	35 c0       	rjmp	.+106    	; 0x2cfa <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2c90:	84 e0       	ldi	r24, 0x04	; 4
    2c92:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2c96:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2c9a:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2c9e:	e0 91 19 06 	lds	r30, 0x0619	; 0x800619 <twi_onSlaveTransmit>
    2ca2:	f0 91 1a 06 	lds	r31, 0x061A	; 0x80061a <twi_onSlaveTransmit+0x1>
    2ca6:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2ca8:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <twi_txBufferLength>
    2cac:	81 11       	cpse	r24, r1
    2cae:	05 c0       	rjmp	.+10     	; 0x2cba <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2cb6:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2cba:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <twi_txBufferIndex>
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	8e 0f       	add	r24, r30
    2cc2:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <twi_txBufferIndex>
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	eb 52       	subi	r30, 0x2B	; 43
    2cca:	fa 4f       	sbci	r31, 0xFA	; 250
    2ccc:	80 81       	ld	r24, Z
    2cce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2cd2:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <twi_txBufferIndex>
    2cd6:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <twi_txBufferLength>
    2cda:	98 17       	cp	r25, r24
    2cdc:	08 f4       	brcc	.+2      	; 0x2ce0 <__vector_39+0x21c>
    2cde:	7d cf       	rjmp	.-262    	; 0x2bda <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2ce0:	85 e8       	ldi	r24, 0x85	; 133
    2ce2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ce6:	09 c0       	rjmp	.+18     	; 0x2cfa <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ce8:	85 ec       	ldi	r24, 0xC5	; 197
    2cea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2cee:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <twi_state>
      break;
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2cf4:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <twi_error>
      twi_stop();
    2cf8:	d5 de       	rcall	.-598    	; 0x2aa4 <twi_stop>
      break;
  }
}
    2cfa:	ff 91       	pop	r31
    2cfc:	ef 91       	pop	r30
    2cfe:	bf 91       	pop	r27
    2d00:	af 91       	pop	r26
    2d02:	9f 91       	pop	r25
    2d04:	8f 91       	pop	r24
    2d06:	7f 91       	pop	r23
    2d08:	6f 91       	pop	r22
    2d0a:	5f 91       	pop	r21
    2d0c:	4f 91       	pop	r20
    2d0e:	3f 91       	pop	r19
    2d10:	2f 91       	pop	r18
    2d12:	0f 90       	pop	r0
    2d14:	0b be       	out	0x3b, r0	; 59
    2d16:	0f 90       	pop	r0
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	0f 90       	pop	r0
    2d1c:	1f 90       	pop	r1
    2d1e:	18 95       	reti

00002d20 <__udivmodsi4>:
    2d20:	a1 e2       	ldi	r26, 0x21	; 33
    2d22:	1a 2e       	mov	r1, r26
    2d24:	aa 1b       	sub	r26, r26
    2d26:	bb 1b       	sub	r27, r27
    2d28:	fd 01       	movw	r30, r26
    2d2a:	0d c0       	rjmp	.+26     	; 0x2d46 <__udivmodsi4_ep>

00002d2c <__udivmodsi4_loop>:
    2d2c:	aa 1f       	adc	r26, r26
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	ee 1f       	adc	r30, r30
    2d32:	ff 1f       	adc	r31, r31
    2d34:	a2 17       	cp	r26, r18
    2d36:	b3 07       	cpc	r27, r19
    2d38:	e4 07       	cpc	r30, r20
    2d3a:	f5 07       	cpc	r31, r21
    2d3c:	20 f0       	brcs	.+8      	; 0x2d46 <__udivmodsi4_ep>
    2d3e:	a2 1b       	sub	r26, r18
    2d40:	b3 0b       	sbc	r27, r19
    2d42:	e4 0b       	sbc	r30, r20
    2d44:	f5 0b       	sbc	r31, r21

00002d46 <__udivmodsi4_ep>:
    2d46:	66 1f       	adc	r22, r22
    2d48:	77 1f       	adc	r23, r23
    2d4a:	88 1f       	adc	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	1a 94       	dec	r1
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <__udivmodsi4_loop>
    2d52:	60 95       	com	r22
    2d54:	70 95       	com	r23
    2d56:	80 95       	com	r24
    2d58:	90 95       	com	r25
    2d5a:	9b 01       	movw	r18, r22
    2d5c:	ac 01       	movw	r20, r24
    2d5e:	bd 01       	movw	r22, r26
    2d60:	cf 01       	movw	r24, r30
    2d62:	08 95       	ret

00002d64 <__tablejump2__>:
    2d64:	ee 0f       	add	r30, r30
    2d66:	ff 1f       	adc	r31, r31
    2d68:	88 1f       	adc	r24, r24
    2d6a:	8b bf       	out	0x3b, r24	; 59
    2d6c:	07 90       	elpm	r0, Z+
    2d6e:	f6 91       	elpm	r31, Z
    2d70:	e0 2d       	mov	r30, r0
    2d72:	19 94       	eijmp

00002d74 <malloc>:
    2d74:	0f 93       	push	r16
    2d76:	1f 93       	push	r17
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	82 30       	cpi	r24, 0x02	; 2
    2d7e:	91 05       	cpc	r25, r1
    2d80:	10 f4       	brcc	.+4      	; 0x2d86 <malloc+0x12>
    2d82:	82 e0       	ldi	r24, 0x02	; 2
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	e0 91 21 06 	lds	r30, 0x0621	; 0x800621 <__flp>
    2d8a:	f0 91 22 06 	lds	r31, 0x0622	; 0x800622 <__flp+0x1>
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	a0 e0       	ldi	r26, 0x00	; 0
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	30 97       	sbiw	r30, 0x00	; 0
    2d98:	19 f1       	breq	.+70     	; 0x2de0 <malloc+0x6c>
    2d9a:	40 81       	ld	r20, Z
    2d9c:	51 81       	ldd	r21, Z+1	; 0x01
    2d9e:	02 81       	ldd	r16, Z+2	; 0x02
    2da0:	13 81       	ldd	r17, Z+3	; 0x03
    2da2:	48 17       	cp	r20, r24
    2da4:	59 07       	cpc	r21, r25
    2da6:	c8 f0       	brcs	.+50     	; 0x2dda <malloc+0x66>
    2da8:	84 17       	cp	r24, r20
    2daa:	95 07       	cpc	r25, r21
    2dac:	69 f4       	brne	.+26     	; 0x2dc8 <malloc+0x54>
    2dae:	10 97       	sbiw	r26, 0x00	; 0
    2db0:	31 f0       	breq	.+12     	; 0x2dbe <malloc+0x4a>
    2db2:	12 96       	adiw	r26, 0x02	; 2
    2db4:	0c 93       	st	X, r16
    2db6:	12 97       	sbiw	r26, 0x02	; 2
    2db8:	13 96       	adiw	r26, 0x03	; 3
    2dba:	1c 93       	st	X, r17
    2dbc:	27 c0       	rjmp	.+78     	; 0x2e0c <malloc+0x98>
    2dbe:	00 93 21 06 	sts	0x0621, r16	; 0x800621 <__flp>
    2dc2:	10 93 22 06 	sts	0x0622, r17	; 0x800622 <__flp+0x1>
    2dc6:	22 c0       	rjmp	.+68     	; 0x2e0c <malloc+0x98>
    2dc8:	21 15       	cp	r18, r1
    2dca:	31 05       	cpc	r19, r1
    2dcc:	19 f0       	breq	.+6      	; 0x2dd4 <malloc+0x60>
    2dce:	42 17       	cp	r20, r18
    2dd0:	53 07       	cpc	r21, r19
    2dd2:	18 f4       	brcc	.+6      	; 0x2dda <malloc+0x66>
    2dd4:	9a 01       	movw	r18, r20
    2dd6:	bd 01       	movw	r22, r26
    2dd8:	ef 01       	movw	r28, r30
    2dda:	df 01       	movw	r26, r30
    2ddc:	f8 01       	movw	r30, r16
    2dde:	db cf       	rjmp	.-74     	; 0x2d96 <malloc+0x22>
    2de0:	21 15       	cp	r18, r1
    2de2:	31 05       	cpc	r19, r1
    2de4:	f9 f0       	breq	.+62     	; 0x2e24 <malloc+0xb0>
    2de6:	28 1b       	sub	r18, r24
    2de8:	39 0b       	sbc	r19, r25
    2dea:	24 30       	cpi	r18, 0x04	; 4
    2dec:	31 05       	cpc	r19, r1
    2dee:	80 f4       	brcc	.+32     	; 0x2e10 <malloc+0x9c>
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	9b 81       	ldd	r25, Y+3	; 0x03
    2df4:	61 15       	cp	r22, r1
    2df6:	71 05       	cpc	r23, r1
    2df8:	21 f0       	breq	.+8      	; 0x2e02 <malloc+0x8e>
    2dfa:	fb 01       	movw	r30, r22
    2dfc:	93 83       	std	Z+3, r25	; 0x03
    2dfe:	82 83       	std	Z+2, r24	; 0x02
    2e00:	04 c0       	rjmp	.+8      	; 0x2e0a <malloc+0x96>
    2e02:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <__flp+0x1>
    2e06:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__flp>
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	32 96       	adiw	r30, 0x02	; 2
    2e0e:	44 c0       	rjmp	.+136    	; 0x2e98 <malloc+0x124>
    2e10:	fe 01       	movw	r30, r28
    2e12:	e2 0f       	add	r30, r18
    2e14:	f3 1f       	adc	r31, r19
    2e16:	81 93       	st	Z+, r24
    2e18:	91 93       	st	Z+, r25
    2e1a:	22 50       	subi	r18, 0x02	; 2
    2e1c:	31 09       	sbc	r19, r1
    2e1e:	39 83       	std	Y+1, r19	; 0x01
    2e20:	28 83       	st	Y, r18
    2e22:	3a c0       	rjmp	.+116    	; 0x2e98 <malloc+0x124>
    2e24:	20 91 1f 06 	lds	r18, 0x061F	; 0x80061f <__brkval>
    2e28:	30 91 20 06 	lds	r19, 0x0620	; 0x800620 <__brkval+0x1>
    2e2c:	23 2b       	or	r18, r19
    2e2e:	41 f4       	brne	.+16     	; 0x2e40 <malloc+0xcc>
    2e30:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2e34:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2e38:	30 93 20 06 	sts	0x0620, r19	; 0x800620 <__brkval+0x1>
    2e3c:	20 93 1f 06 	sts	0x061F, r18	; 0x80061f <__brkval>
    2e40:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2e44:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2e48:	21 15       	cp	r18, r1
    2e4a:	31 05       	cpc	r19, r1
    2e4c:	41 f4       	brne	.+16     	; 0x2e5e <malloc+0xea>
    2e4e:	2d b7       	in	r18, 0x3d	; 61
    2e50:	3e b7       	in	r19, 0x3e	; 62
    2e52:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2e56:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2e5a:	24 1b       	sub	r18, r20
    2e5c:	35 0b       	sbc	r19, r21
    2e5e:	e0 91 1f 06 	lds	r30, 0x061F	; 0x80061f <__brkval>
    2e62:	f0 91 20 06 	lds	r31, 0x0620	; 0x800620 <__brkval+0x1>
    2e66:	e2 17       	cp	r30, r18
    2e68:	f3 07       	cpc	r31, r19
    2e6a:	a0 f4       	brcc	.+40     	; 0x2e94 <malloc+0x120>
    2e6c:	2e 1b       	sub	r18, r30
    2e6e:	3f 0b       	sbc	r19, r31
    2e70:	28 17       	cp	r18, r24
    2e72:	39 07       	cpc	r19, r25
    2e74:	78 f0       	brcs	.+30     	; 0x2e94 <malloc+0x120>
    2e76:	ac 01       	movw	r20, r24
    2e78:	4e 5f       	subi	r20, 0xFE	; 254
    2e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e7c:	24 17       	cp	r18, r20
    2e7e:	35 07       	cpc	r19, r21
    2e80:	48 f0       	brcs	.+18     	; 0x2e94 <malloc+0x120>
    2e82:	4e 0f       	add	r20, r30
    2e84:	5f 1f       	adc	r21, r31
    2e86:	50 93 20 06 	sts	0x0620, r21	; 0x800620 <__brkval+0x1>
    2e8a:	40 93 1f 06 	sts	0x061F, r20	; 0x80061f <__brkval>
    2e8e:	81 93       	st	Z+, r24
    2e90:	91 93       	st	Z+, r25
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <malloc+0x124>
    2e94:	e0 e0       	ldi	r30, 0x00	; 0
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	cf 01       	movw	r24, r30
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	08 95       	ret

00002ea4 <free>:
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <free+0xa>
    2eac:	81 c0       	rjmp	.+258    	; 0x2fb0 <free+0x10c>
    2eae:	fc 01       	movw	r30, r24
    2eb0:	32 97       	sbiw	r30, 0x02	; 2
    2eb2:	13 82       	std	Z+3, r1	; 0x03
    2eb4:	12 82       	std	Z+2, r1	; 0x02
    2eb6:	a0 91 21 06 	lds	r26, 0x0621	; 0x800621 <__flp>
    2eba:	b0 91 22 06 	lds	r27, 0x0622	; 0x800622 <__flp+0x1>
    2ebe:	10 97       	sbiw	r26, 0x00	; 0
    2ec0:	81 f4       	brne	.+32     	; 0x2ee2 <free+0x3e>
    2ec2:	20 81       	ld	r18, Z
    2ec4:	31 81       	ldd	r19, Z+1	; 0x01
    2ec6:	82 0f       	add	r24, r18
    2ec8:	93 1f       	adc	r25, r19
    2eca:	20 91 1f 06 	lds	r18, 0x061F	; 0x80061f <__brkval>
    2ece:	30 91 20 06 	lds	r19, 0x0620	; 0x800620 <__brkval+0x1>
    2ed2:	28 17       	cp	r18, r24
    2ed4:	39 07       	cpc	r19, r25
    2ed6:	51 f5       	brne	.+84     	; 0x2f2c <free+0x88>
    2ed8:	f0 93 20 06 	sts	0x0620, r31	; 0x800620 <__brkval+0x1>
    2edc:	e0 93 1f 06 	sts	0x061F, r30	; 0x80061f <__brkval>
    2ee0:	67 c0       	rjmp	.+206    	; 0x2fb0 <free+0x10c>
    2ee2:	ed 01       	movw	r28, r26
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	ce 17       	cp	r28, r30
    2eea:	df 07       	cpc	r29, r31
    2eec:	40 f4       	brcc	.+16     	; 0x2efe <free+0x5a>
    2eee:	4a 81       	ldd	r20, Y+2	; 0x02
    2ef0:	5b 81       	ldd	r21, Y+3	; 0x03
    2ef2:	9e 01       	movw	r18, r28
    2ef4:	41 15       	cp	r20, r1
    2ef6:	51 05       	cpc	r21, r1
    2ef8:	f1 f0       	breq	.+60     	; 0x2f36 <free+0x92>
    2efa:	ea 01       	movw	r28, r20
    2efc:	f5 cf       	rjmp	.-22     	; 0x2ee8 <free+0x44>
    2efe:	d3 83       	std	Z+3, r29	; 0x03
    2f00:	c2 83       	std	Z+2, r28	; 0x02
    2f02:	40 81       	ld	r20, Z
    2f04:	51 81       	ldd	r21, Z+1	; 0x01
    2f06:	84 0f       	add	r24, r20
    2f08:	95 1f       	adc	r25, r21
    2f0a:	c8 17       	cp	r28, r24
    2f0c:	d9 07       	cpc	r29, r25
    2f0e:	59 f4       	brne	.+22     	; 0x2f26 <free+0x82>
    2f10:	88 81       	ld	r24, Y
    2f12:	99 81       	ldd	r25, Y+1	; 0x01
    2f14:	84 0f       	add	r24, r20
    2f16:	95 1f       	adc	r25, r21
    2f18:	02 96       	adiw	r24, 0x02	; 2
    2f1a:	91 83       	std	Z+1, r25	; 0x01
    2f1c:	80 83       	st	Z, r24
    2f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f20:	9b 81       	ldd	r25, Y+3	; 0x03
    2f22:	93 83       	std	Z+3, r25	; 0x03
    2f24:	82 83       	std	Z+2, r24	; 0x02
    2f26:	21 15       	cp	r18, r1
    2f28:	31 05       	cpc	r19, r1
    2f2a:	29 f4       	brne	.+10     	; 0x2f36 <free+0x92>
    2f2c:	f0 93 22 06 	sts	0x0622, r31	; 0x800622 <__flp+0x1>
    2f30:	e0 93 21 06 	sts	0x0621, r30	; 0x800621 <__flp>
    2f34:	3d c0       	rjmp	.+122    	; 0x2fb0 <free+0x10c>
    2f36:	e9 01       	movw	r28, r18
    2f38:	fb 83       	std	Y+3, r31	; 0x03
    2f3a:	ea 83       	std	Y+2, r30	; 0x02
    2f3c:	49 91       	ld	r20, Y+
    2f3e:	59 91       	ld	r21, Y+
    2f40:	c4 0f       	add	r28, r20
    2f42:	d5 1f       	adc	r29, r21
    2f44:	ec 17       	cp	r30, r28
    2f46:	fd 07       	cpc	r31, r29
    2f48:	61 f4       	brne	.+24     	; 0x2f62 <free+0xbe>
    2f4a:	80 81       	ld	r24, Z
    2f4c:	91 81       	ldd	r25, Z+1	; 0x01
    2f4e:	84 0f       	add	r24, r20
    2f50:	95 1f       	adc	r25, r21
    2f52:	02 96       	adiw	r24, 0x02	; 2
    2f54:	e9 01       	movw	r28, r18
    2f56:	99 83       	std	Y+1, r25	; 0x01
    2f58:	88 83       	st	Y, r24
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	9b 83       	std	Y+3, r25	; 0x03
    2f60:	8a 83       	std	Y+2, r24	; 0x02
    2f62:	e0 e0       	ldi	r30, 0x00	; 0
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	12 96       	adiw	r26, 0x02	; 2
    2f68:	8d 91       	ld	r24, X+
    2f6a:	9c 91       	ld	r25, X
    2f6c:	13 97       	sbiw	r26, 0x03	; 3
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	19 f0       	breq	.+6      	; 0x2f78 <free+0xd4>
    2f72:	fd 01       	movw	r30, r26
    2f74:	dc 01       	movw	r26, r24
    2f76:	f7 cf       	rjmp	.-18     	; 0x2f66 <free+0xc2>
    2f78:	8d 91       	ld	r24, X+
    2f7a:	9c 91       	ld	r25, X
    2f7c:	11 97       	sbiw	r26, 0x01	; 1
    2f7e:	9d 01       	movw	r18, r26
    2f80:	2e 5f       	subi	r18, 0xFE	; 254
    2f82:	3f 4f       	sbci	r19, 0xFF	; 255
    2f84:	82 0f       	add	r24, r18
    2f86:	93 1f       	adc	r25, r19
    2f88:	20 91 1f 06 	lds	r18, 0x061F	; 0x80061f <__brkval>
    2f8c:	30 91 20 06 	lds	r19, 0x0620	; 0x800620 <__brkval+0x1>
    2f90:	28 17       	cp	r18, r24
    2f92:	39 07       	cpc	r19, r25
    2f94:	69 f4       	brne	.+26     	; 0x2fb0 <free+0x10c>
    2f96:	30 97       	sbiw	r30, 0x00	; 0
    2f98:	29 f4       	brne	.+10     	; 0x2fa4 <free+0x100>
    2f9a:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <__flp+0x1>
    2f9e:	10 92 21 06 	sts	0x0621, r1	; 0x800621 <__flp>
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <free+0x104>
    2fa4:	13 82       	std	Z+3, r1	; 0x03
    2fa6:	12 82       	std	Z+2, r1	; 0x02
    2fa8:	b0 93 20 06 	sts	0x0620, r27	; 0x800620 <__brkval+0x1>
    2fac:	a0 93 1f 06 	sts	0x061F, r26	; 0x80061f <__brkval>
    2fb0:	df 91       	pop	r29
    2fb2:	cf 91       	pop	r28
    2fb4:	08 95       	ret

00002fb6 <realloc>:
    2fb6:	6f 92       	push	r6
    2fb8:	7f 92       	push	r7
    2fba:	8f 92       	push	r8
    2fbc:	9f 92       	push	r9
    2fbe:	af 92       	push	r10
    2fc0:	bf 92       	push	r11
    2fc2:	cf 92       	push	r12
    2fc4:	df 92       	push	r13
    2fc6:	ef 92       	push	r14
    2fc8:	ff 92       	push	r15
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	81 f4       	brne	.+32     	; 0x2ff6 <realloc+0x40>
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	ff 90       	pop	r15
    2fe2:	ef 90       	pop	r14
    2fe4:	df 90       	pop	r13
    2fe6:	cf 90       	pop	r12
    2fe8:	bf 90       	pop	r11
    2fea:	af 90       	pop	r10
    2fec:	9f 90       	pop	r9
    2fee:	8f 90       	pop	r8
    2ff0:	7f 90       	pop	r7
    2ff2:	6f 90       	pop	r6
    2ff4:	bf ce       	rjmp	.-642    	; 0x2d74 <malloc>
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	e6 0f       	add	r30, r22
    2ffa:	f7 1f       	adc	r31, r23
    2ffc:	9c 01       	movw	r18, r24
    2ffe:	22 50       	subi	r18, 0x02	; 2
    3000:	31 09       	sbc	r19, r1
    3002:	e2 17       	cp	r30, r18
    3004:	f3 07       	cpc	r31, r19
    3006:	08 f4       	brcc	.+2      	; 0x300a <realloc+0x54>
    3008:	a5 c0       	rjmp	.+330    	; 0x3154 <realloc+0x19e>
    300a:	ec 01       	movw	r28, r24
    300c:	d9 01       	movw	r26, r18
    300e:	0d 91       	ld	r16, X+
    3010:	1c 91       	ld	r17, X
    3012:	11 97       	sbiw	r26, 0x01	; 1
    3014:	06 17       	cp	r16, r22
    3016:	17 07       	cpc	r17, r23
    3018:	a8 f0       	brcs	.+42     	; 0x3044 <realloc+0x8e>
    301a:	05 30       	cpi	r16, 0x05	; 5
    301c:	11 05       	cpc	r17, r1
    301e:	08 f4       	brcc	.+2      	; 0x3022 <realloc+0x6c>
    3020:	97 c0       	rjmp	.+302    	; 0x3150 <realloc+0x19a>
    3022:	c8 01       	movw	r24, r16
    3024:	04 97       	sbiw	r24, 0x04	; 4
    3026:	86 17       	cp	r24, r22
    3028:	97 07       	cpc	r25, r23
    302a:	08 f4       	brcc	.+2      	; 0x302e <realloc+0x78>
    302c:	91 c0       	rjmp	.+290    	; 0x3150 <realloc+0x19a>
    302e:	02 50       	subi	r16, 0x02	; 2
    3030:	11 09       	sbc	r17, r1
    3032:	06 1b       	sub	r16, r22
    3034:	17 0b       	sbc	r17, r23
    3036:	01 93       	st	Z+, r16
    3038:	11 93       	st	Z+, r17
    303a:	6d 93       	st	X+, r22
    303c:	7c 93       	st	X, r23
    303e:	cf 01       	movw	r24, r30
    3040:	31 df       	rcall	.-414    	; 0x2ea4 <free>
    3042:	86 c0       	rjmp	.+268    	; 0x3150 <realloc+0x19a>
    3044:	5b 01       	movw	r10, r22
    3046:	a0 1a       	sub	r10, r16
    3048:	b1 0a       	sbc	r11, r17
    304a:	4c 01       	movw	r8, r24
    304c:	80 0e       	add	r8, r16
    304e:	91 1e       	adc	r9, r17
    3050:	a0 91 21 06 	lds	r26, 0x0621	; 0x800621 <__flp>
    3054:	b0 91 22 06 	lds	r27, 0x0622	; 0x800622 <__flp+0x1>
    3058:	61 2c       	mov	r6, r1
    305a:	71 2c       	mov	r7, r1
    305c:	e1 2c       	mov	r14, r1
    305e:	f1 2c       	mov	r15, r1
    3060:	10 97       	sbiw	r26, 0x00	; 0
    3062:	09 f4       	brne	.+2      	; 0x3066 <realloc+0xb0>
    3064:	46 c0       	rjmp	.+140    	; 0x30f2 <realloc+0x13c>
    3066:	8d 91       	ld	r24, X+
    3068:	9c 91       	ld	r25, X
    306a:	11 97       	sbiw	r26, 0x01	; 1
    306c:	a8 15       	cp	r26, r8
    306e:	b9 05       	cpc	r27, r9
    3070:	b1 f5       	brne	.+108    	; 0x30de <realloc+0x128>
    3072:	6c 01       	movw	r12, r24
    3074:	42 e0       	ldi	r20, 0x02	; 2
    3076:	c4 0e       	add	r12, r20
    3078:	d1 1c       	adc	r13, r1
    307a:	ca 14       	cp	r12, r10
    307c:	db 04       	cpc	r13, r11
    307e:	78 f1       	brcs	.+94     	; 0x30de <realloc+0x128>
    3080:	4c 01       	movw	r8, r24
    3082:	8a 18       	sub	r8, r10
    3084:	9b 08       	sbc	r9, r11
    3086:	64 01       	movw	r12, r8
    3088:	42 e0       	ldi	r20, 0x02	; 2
    308a:	c4 0e       	add	r12, r20
    308c:	d1 1c       	adc	r13, r1
    308e:	12 96       	adiw	r26, 0x02	; 2
    3090:	bc 90       	ld	r11, X
    3092:	12 97       	sbiw	r26, 0x02	; 2
    3094:	13 96       	adiw	r26, 0x03	; 3
    3096:	ac 91       	ld	r26, X
    3098:	b5 e0       	ldi	r27, 0x05	; 5
    309a:	cb 16       	cp	r12, r27
    309c:	d1 04       	cpc	r13, r1
    309e:	40 f0       	brcs	.+16     	; 0x30b0 <realloc+0xfa>
    30a0:	b2 82       	std	Z+2, r11	; 0x02
    30a2:	a3 83       	std	Z+3, r26	; 0x03
    30a4:	91 82       	std	Z+1, r9	; 0x01
    30a6:	80 82       	st	Z, r8
    30a8:	d9 01       	movw	r26, r18
    30aa:	6d 93       	st	X+, r22
    30ac:	7c 93       	st	X, r23
    30ae:	09 c0       	rjmp	.+18     	; 0x30c2 <realloc+0x10c>
    30b0:	0e 5f       	subi	r16, 0xFE	; 254
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
    30b4:	80 0f       	add	r24, r16
    30b6:	91 1f       	adc	r25, r17
    30b8:	f9 01       	movw	r30, r18
    30ba:	91 83       	std	Z+1, r25	; 0x01
    30bc:	80 83       	st	Z, r24
    30be:	eb 2d       	mov	r30, r11
    30c0:	fa 2f       	mov	r31, r26
    30c2:	e1 14       	cp	r14, r1
    30c4:	f1 04       	cpc	r15, r1
    30c6:	31 f0       	breq	.+12     	; 0x30d4 <realloc+0x11e>
    30c8:	d7 01       	movw	r26, r14
    30ca:	13 96       	adiw	r26, 0x03	; 3
    30cc:	fc 93       	st	X, r31
    30ce:	ee 93       	st	-X, r30
    30d0:	12 97       	sbiw	r26, 0x02	; 2
    30d2:	3e c0       	rjmp	.+124    	; 0x3150 <realloc+0x19a>
    30d4:	f0 93 22 06 	sts	0x0622, r31	; 0x800622 <__flp+0x1>
    30d8:	e0 93 21 06 	sts	0x0621, r30	; 0x800621 <__flp>
    30dc:	39 c0       	rjmp	.+114    	; 0x3150 <realloc+0x19a>
    30de:	68 16       	cp	r6, r24
    30e0:	79 06       	cpc	r7, r25
    30e2:	08 f4       	brcc	.+2      	; 0x30e6 <realloc+0x130>
    30e4:	3c 01       	movw	r6, r24
    30e6:	7d 01       	movw	r14, r26
    30e8:	12 96       	adiw	r26, 0x02	; 2
    30ea:	0d 90       	ld	r0, X+
    30ec:	bc 91       	ld	r27, X
    30ee:	a0 2d       	mov	r26, r0
    30f0:	b7 cf       	rjmp	.-146    	; 0x3060 <realloc+0xaa>
    30f2:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <__brkval>
    30f6:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <__brkval+0x1>
    30fa:	88 16       	cp	r8, r24
    30fc:	99 06       	cpc	r9, r25
    30fe:	e1 f4       	brne	.+56     	; 0x3138 <realloc+0x182>
    3100:	66 16       	cp	r6, r22
    3102:	77 06       	cpc	r7, r23
    3104:	c8 f4       	brcc	.+50     	; 0x3138 <realloc+0x182>
    3106:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    310a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	41 f4       	brne	.+16     	; 0x3122 <realloc+0x16c>
    3112:	8d b7       	in	r24, 0x3d	; 61
    3114:	9e b7       	in	r25, 0x3e	; 62
    3116:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    311a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    311e:	84 1b       	sub	r24, r20
    3120:	95 0b       	sbc	r25, r21
    3122:	e8 17       	cp	r30, r24
    3124:	f9 07       	cpc	r31, r25
    3126:	b0 f4       	brcc	.+44     	; 0x3154 <realloc+0x19e>
    3128:	f0 93 20 06 	sts	0x0620, r31	; 0x800620 <__brkval+0x1>
    312c:	e0 93 1f 06 	sts	0x061F, r30	; 0x80061f <__brkval>
    3130:	f9 01       	movw	r30, r18
    3132:	71 83       	std	Z+1, r23	; 0x01
    3134:	60 83       	st	Z, r22
    3136:	0c c0       	rjmp	.+24     	; 0x3150 <realloc+0x19a>
    3138:	cb 01       	movw	r24, r22
    313a:	1c de       	rcall	.-968    	; 0x2d74 <malloc>
    313c:	7c 01       	movw	r14, r24
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	49 f0       	breq	.+18     	; 0x3154 <realloc+0x19e>
    3142:	a8 01       	movw	r20, r16
    3144:	be 01       	movw	r22, r28
    3146:	17 d0       	rcall	.+46     	; 0x3176 <memcpy>
    3148:	ce 01       	movw	r24, r28
    314a:	ac de       	rcall	.-680    	; 0x2ea4 <free>
    314c:	c7 01       	movw	r24, r14
    314e:	04 c0       	rjmp	.+8      	; 0x3158 <realloc+0x1a2>
    3150:	ce 01       	movw	r24, r28
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <realloc+0x1a2>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	df 91       	pop	r29
    315a:	cf 91       	pop	r28
    315c:	1f 91       	pop	r17
    315e:	0f 91       	pop	r16
    3160:	ff 90       	pop	r15
    3162:	ef 90       	pop	r14
    3164:	df 90       	pop	r13
    3166:	cf 90       	pop	r12
    3168:	bf 90       	pop	r11
    316a:	af 90       	pop	r10
    316c:	9f 90       	pop	r9
    316e:	8f 90       	pop	r8
    3170:	7f 90       	pop	r7
    3172:	6f 90       	pop	r6
    3174:	08 95       	ret

00003176 <memcpy>:
    3176:	fb 01       	movw	r30, r22
    3178:	dc 01       	movw	r26, r24
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <memcpy+0xa>
    317c:	01 90       	ld	r0, Z+
    317e:	0d 92       	st	X+, r0
    3180:	41 50       	subi	r20, 0x01	; 1
    3182:	50 40       	sbci	r21, 0x00	; 0
    3184:	d8 f7       	brcc	.-10     	; 0x317c <memcpy+0x6>
    3186:	08 95       	ret

00003188 <strcpy>:
    3188:	fb 01       	movw	r30, r22
    318a:	dc 01       	movw	r26, r24
    318c:	01 90       	ld	r0, Z+
    318e:	0d 92       	st	X+, r0
    3190:	00 20       	and	r0, r0
    3192:	e1 f7       	brne	.-8      	; 0x318c <strcpy+0x4>
    3194:	08 95       	ret

00003196 <sprintf>:
    3196:	0f 93       	push	r16
    3198:	1f 93       	push	r17
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	2e 97       	sbiw	r28, 0x0e	; 14
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	f8 94       	cli
    31a8:	de bf       	out	0x3e, r29	; 62
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	cd bf       	out	0x3d, r28	; 61
    31ae:	0e 89       	ldd	r16, Y+22	; 0x16
    31b0:	1f 89       	ldd	r17, Y+23	; 0x17
    31b2:	86 e0       	ldi	r24, 0x06	; 6
    31b4:	8c 83       	std	Y+4, r24	; 0x04
    31b6:	1a 83       	std	Y+2, r17	; 0x02
    31b8:	09 83       	std	Y+1, r16	; 0x01
    31ba:	8f ef       	ldi	r24, 0xFF	; 255
    31bc:	9f e7       	ldi	r25, 0x7F	; 127
    31be:	9e 83       	std	Y+6, r25	; 0x06
    31c0:	8d 83       	std	Y+5, r24	; 0x05
    31c2:	ae 01       	movw	r20, r28
    31c4:	46 5e       	subi	r20, 0xE6	; 230
    31c6:	5f 4f       	sbci	r21, 0xFF	; 255
    31c8:	68 8d       	ldd	r22, Y+24	; 0x18
    31ca:	79 8d       	ldd	r23, Y+25	; 0x19
    31cc:	ce 01       	movw	r24, r28
    31ce:	01 96       	adiw	r24, 0x01	; 1
    31d0:	10 d0       	rcall	.+32     	; 0x31f2 <vfprintf>
    31d2:	ef 81       	ldd	r30, Y+7	; 0x07
    31d4:	f8 85       	ldd	r31, Y+8	; 0x08
    31d6:	e0 0f       	add	r30, r16
    31d8:	f1 1f       	adc	r31, r17
    31da:	10 82       	st	Z, r1
    31dc:	2e 96       	adiw	r28, 0x0e	; 14
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	08 95       	ret

000031f2 <vfprintf>:
    31f2:	2f 92       	push	r2
    31f4:	3f 92       	push	r3
    31f6:	4f 92       	push	r4
    31f8:	5f 92       	push	r5
    31fa:	6f 92       	push	r6
    31fc:	7f 92       	push	r7
    31fe:	8f 92       	push	r8
    3200:	9f 92       	push	r9
    3202:	af 92       	push	r10
    3204:	bf 92       	push	r11
    3206:	cf 92       	push	r12
    3208:	df 92       	push	r13
    320a:	ef 92       	push	r14
    320c:	ff 92       	push	r15
    320e:	0f 93       	push	r16
    3210:	1f 93       	push	r17
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
    321a:	2b 97       	sbiw	r28, 0x0b	; 11
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	cd bf       	out	0x3d, r28	; 61
    3226:	6c 01       	movw	r12, r24
    3228:	7b 01       	movw	r14, r22
    322a:	8a 01       	movw	r16, r20
    322c:	fc 01       	movw	r30, r24
    322e:	17 82       	std	Z+7, r1	; 0x07
    3230:	16 82       	std	Z+6, r1	; 0x06
    3232:	83 81       	ldd	r24, Z+3	; 0x03
    3234:	81 ff       	sbrs	r24, 1
    3236:	bf c1       	rjmp	.+894    	; 0x35b6 <vfprintf+0x3c4>
    3238:	ce 01       	movw	r24, r28
    323a:	01 96       	adiw	r24, 0x01	; 1
    323c:	3c 01       	movw	r6, r24
    323e:	f6 01       	movw	r30, r12
    3240:	93 81       	ldd	r25, Z+3	; 0x03
    3242:	f7 01       	movw	r30, r14
    3244:	93 fd       	sbrc	r25, 3
    3246:	85 91       	lpm	r24, Z+
    3248:	93 ff       	sbrs	r25, 3
    324a:	81 91       	ld	r24, Z+
    324c:	7f 01       	movw	r14, r30
    324e:	88 23       	and	r24, r24
    3250:	09 f4       	brne	.+2      	; 0x3254 <vfprintf+0x62>
    3252:	ad c1       	rjmp	.+858    	; 0x35ae <vfprintf+0x3bc>
    3254:	85 32       	cpi	r24, 0x25	; 37
    3256:	39 f4       	brne	.+14     	; 0x3266 <vfprintf+0x74>
    3258:	93 fd       	sbrc	r25, 3
    325a:	85 91       	lpm	r24, Z+
    325c:	93 ff       	sbrs	r25, 3
    325e:	81 91       	ld	r24, Z+
    3260:	7f 01       	movw	r14, r30
    3262:	85 32       	cpi	r24, 0x25	; 37
    3264:	21 f4       	brne	.+8      	; 0x326e <vfprintf+0x7c>
    3266:	b6 01       	movw	r22, r12
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	d6 d1       	rcall	.+940    	; 0x3618 <fputc>
    326c:	e8 cf       	rjmp	.-48     	; 0x323e <vfprintf+0x4c>
    326e:	91 2c       	mov	r9, r1
    3270:	21 2c       	mov	r2, r1
    3272:	31 2c       	mov	r3, r1
    3274:	ff e1       	ldi	r31, 0x1F	; 31
    3276:	f3 15       	cp	r31, r3
    3278:	d8 f0       	brcs	.+54     	; 0x32b0 <vfprintf+0xbe>
    327a:	8b 32       	cpi	r24, 0x2B	; 43
    327c:	79 f0       	breq	.+30     	; 0x329c <vfprintf+0xaa>
    327e:	38 f4       	brcc	.+14     	; 0x328e <vfprintf+0x9c>
    3280:	80 32       	cpi	r24, 0x20	; 32
    3282:	79 f0       	breq	.+30     	; 0x32a2 <vfprintf+0xb0>
    3284:	83 32       	cpi	r24, 0x23	; 35
    3286:	a1 f4       	brne	.+40     	; 0x32b0 <vfprintf+0xbe>
    3288:	23 2d       	mov	r18, r3
    328a:	20 61       	ori	r18, 0x10	; 16
    328c:	1d c0       	rjmp	.+58     	; 0x32c8 <vfprintf+0xd6>
    328e:	8d 32       	cpi	r24, 0x2D	; 45
    3290:	61 f0       	breq	.+24     	; 0x32aa <vfprintf+0xb8>
    3292:	80 33       	cpi	r24, 0x30	; 48
    3294:	69 f4       	brne	.+26     	; 0x32b0 <vfprintf+0xbe>
    3296:	23 2d       	mov	r18, r3
    3298:	21 60       	ori	r18, 0x01	; 1
    329a:	16 c0       	rjmp	.+44     	; 0x32c8 <vfprintf+0xd6>
    329c:	83 2d       	mov	r24, r3
    329e:	82 60       	ori	r24, 0x02	; 2
    32a0:	38 2e       	mov	r3, r24
    32a2:	e3 2d       	mov	r30, r3
    32a4:	e4 60       	ori	r30, 0x04	; 4
    32a6:	3e 2e       	mov	r3, r30
    32a8:	2a c0       	rjmp	.+84     	; 0x32fe <vfprintf+0x10c>
    32aa:	f3 2d       	mov	r31, r3
    32ac:	f8 60       	ori	r31, 0x08	; 8
    32ae:	1d c0       	rjmp	.+58     	; 0x32ea <vfprintf+0xf8>
    32b0:	37 fc       	sbrc	r3, 7
    32b2:	2d c0       	rjmp	.+90     	; 0x330e <vfprintf+0x11c>
    32b4:	20 ed       	ldi	r18, 0xD0	; 208
    32b6:	28 0f       	add	r18, r24
    32b8:	2a 30       	cpi	r18, 0x0A	; 10
    32ba:	40 f0       	brcs	.+16     	; 0x32cc <vfprintf+0xda>
    32bc:	8e 32       	cpi	r24, 0x2E	; 46
    32be:	b9 f4       	brne	.+46     	; 0x32ee <vfprintf+0xfc>
    32c0:	36 fc       	sbrc	r3, 6
    32c2:	75 c1       	rjmp	.+746    	; 0x35ae <vfprintf+0x3bc>
    32c4:	23 2d       	mov	r18, r3
    32c6:	20 64       	ori	r18, 0x40	; 64
    32c8:	32 2e       	mov	r3, r18
    32ca:	19 c0       	rjmp	.+50     	; 0x32fe <vfprintf+0x10c>
    32cc:	36 fe       	sbrs	r3, 6
    32ce:	06 c0       	rjmp	.+12     	; 0x32dc <vfprintf+0xea>
    32d0:	8a e0       	ldi	r24, 0x0A	; 10
    32d2:	98 9e       	mul	r9, r24
    32d4:	20 0d       	add	r18, r0
    32d6:	11 24       	eor	r1, r1
    32d8:	92 2e       	mov	r9, r18
    32da:	11 c0       	rjmp	.+34     	; 0x32fe <vfprintf+0x10c>
    32dc:	ea e0       	ldi	r30, 0x0A	; 10
    32de:	2e 9e       	mul	r2, r30
    32e0:	20 0d       	add	r18, r0
    32e2:	11 24       	eor	r1, r1
    32e4:	22 2e       	mov	r2, r18
    32e6:	f3 2d       	mov	r31, r3
    32e8:	f0 62       	ori	r31, 0x20	; 32
    32ea:	3f 2e       	mov	r3, r31
    32ec:	08 c0       	rjmp	.+16     	; 0x32fe <vfprintf+0x10c>
    32ee:	8c 36       	cpi	r24, 0x6C	; 108
    32f0:	21 f4       	brne	.+8      	; 0x32fa <vfprintf+0x108>
    32f2:	83 2d       	mov	r24, r3
    32f4:	80 68       	ori	r24, 0x80	; 128
    32f6:	38 2e       	mov	r3, r24
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <vfprintf+0x10c>
    32fa:	88 36       	cpi	r24, 0x68	; 104
    32fc:	41 f4       	brne	.+16     	; 0x330e <vfprintf+0x11c>
    32fe:	f7 01       	movw	r30, r14
    3300:	93 fd       	sbrc	r25, 3
    3302:	85 91       	lpm	r24, Z+
    3304:	93 ff       	sbrs	r25, 3
    3306:	81 91       	ld	r24, Z+
    3308:	7f 01       	movw	r14, r30
    330a:	81 11       	cpse	r24, r1
    330c:	b3 cf       	rjmp	.-154    	; 0x3274 <vfprintf+0x82>
    330e:	98 2f       	mov	r25, r24
    3310:	9f 7d       	andi	r25, 0xDF	; 223
    3312:	95 54       	subi	r25, 0x45	; 69
    3314:	93 30       	cpi	r25, 0x03	; 3
    3316:	28 f4       	brcc	.+10     	; 0x3322 <vfprintf+0x130>
    3318:	0c 5f       	subi	r16, 0xFC	; 252
    331a:	1f 4f       	sbci	r17, 0xFF	; 255
    331c:	9f e3       	ldi	r25, 0x3F	; 63
    331e:	99 83       	std	Y+1, r25	; 0x01
    3320:	0d c0       	rjmp	.+26     	; 0x333c <vfprintf+0x14a>
    3322:	83 36       	cpi	r24, 0x63	; 99
    3324:	31 f0       	breq	.+12     	; 0x3332 <vfprintf+0x140>
    3326:	83 37       	cpi	r24, 0x73	; 115
    3328:	71 f0       	breq	.+28     	; 0x3346 <vfprintf+0x154>
    332a:	83 35       	cpi	r24, 0x53	; 83
    332c:	09 f0       	breq	.+2      	; 0x3330 <vfprintf+0x13e>
    332e:	55 c0       	rjmp	.+170    	; 0x33da <vfprintf+0x1e8>
    3330:	20 c0       	rjmp	.+64     	; 0x3372 <vfprintf+0x180>
    3332:	f8 01       	movw	r30, r16
    3334:	80 81       	ld	r24, Z
    3336:	89 83       	std	Y+1, r24	; 0x01
    3338:	0e 5f       	subi	r16, 0xFE	; 254
    333a:	1f 4f       	sbci	r17, 0xFF	; 255
    333c:	88 24       	eor	r8, r8
    333e:	83 94       	inc	r8
    3340:	91 2c       	mov	r9, r1
    3342:	53 01       	movw	r10, r6
    3344:	12 c0       	rjmp	.+36     	; 0x336a <vfprintf+0x178>
    3346:	28 01       	movw	r4, r16
    3348:	f2 e0       	ldi	r31, 0x02	; 2
    334a:	4f 0e       	add	r4, r31
    334c:	51 1c       	adc	r5, r1
    334e:	f8 01       	movw	r30, r16
    3350:	a0 80       	ld	r10, Z
    3352:	b1 80       	ldd	r11, Z+1	; 0x01
    3354:	36 fe       	sbrs	r3, 6
    3356:	03 c0       	rjmp	.+6      	; 0x335e <vfprintf+0x16c>
    3358:	69 2d       	mov	r22, r9
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	02 c0       	rjmp	.+4      	; 0x3362 <vfprintf+0x170>
    335e:	6f ef       	ldi	r22, 0xFF	; 255
    3360:	7f ef       	ldi	r23, 0xFF	; 255
    3362:	c5 01       	movw	r24, r10
    3364:	4e d1       	rcall	.+668    	; 0x3602 <strnlen>
    3366:	4c 01       	movw	r8, r24
    3368:	82 01       	movw	r16, r4
    336a:	f3 2d       	mov	r31, r3
    336c:	ff 77       	andi	r31, 0x7F	; 127
    336e:	3f 2e       	mov	r3, r31
    3370:	15 c0       	rjmp	.+42     	; 0x339c <vfprintf+0x1aa>
    3372:	28 01       	movw	r4, r16
    3374:	22 e0       	ldi	r18, 0x02	; 2
    3376:	42 0e       	add	r4, r18
    3378:	51 1c       	adc	r5, r1
    337a:	f8 01       	movw	r30, r16
    337c:	a0 80       	ld	r10, Z
    337e:	b1 80       	ldd	r11, Z+1	; 0x01
    3380:	36 fe       	sbrs	r3, 6
    3382:	03 c0       	rjmp	.+6      	; 0x338a <vfprintf+0x198>
    3384:	69 2d       	mov	r22, r9
    3386:	70 e0       	ldi	r23, 0x00	; 0
    3388:	02 c0       	rjmp	.+4      	; 0x338e <vfprintf+0x19c>
    338a:	6f ef       	ldi	r22, 0xFF	; 255
    338c:	7f ef       	ldi	r23, 0xFF	; 255
    338e:	c5 01       	movw	r24, r10
    3390:	2d d1       	rcall	.+602    	; 0x35ec <strnlen_P>
    3392:	4c 01       	movw	r8, r24
    3394:	f3 2d       	mov	r31, r3
    3396:	f0 68       	ori	r31, 0x80	; 128
    3398:	3f 2e       	mov	r3, r31
    339a:	82 01       	movw	r16, r4
    339c:	33 fc       	sbrc	r3, 3
    339e:	19 c0       	rjmp	.+50     	; 0x33d2 <vfprintf+0x1e0>
    33a0:	82 2d       	mov	r24, r2
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	88 16       	cp	r8, r24
    33a6:	99 06       	cpc	r9, r25
    33a8:	a0 f4       	brcc	.+40     	; 0x33d2 <vfprintf+0x1e0>
    33aa:	b6 01       	movw	r22, r12
    33ac:	80 e2       	ldi	r24, 0x20	; 32
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	33 d1       	rcall	.+614    	; 0x3618 <fputc>
    33b2:	2a 94       	dec	r2
    33b4:	f5 cf       	rjmp	.-22     	; 0x33a0 <vfprintf+0x1ae>
    33b6:	f5 01       	movw	r30, r10
    33b8:	37 fc       	sbrc	r3, 7
    33ba:	85 91       	lpm	r24, Z+
    33bc:	37 fe       	sbrs	r3, 7
    33be:	81 91       	ld	r24, Z+
    33c0:	5f 01       	movw	r10, r30
    33c2:	b6 01       	movw	r22, r12
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	28 d1       	rcall	.+592    	; 0x3618 <fputc>
    33c8:	21 10       	cpse	r2, r1
    33ca:	2a 94       	dec	r2
    33cc:	21 e0       	ldi	r18, 0x01	; 1
    33ce:	82 1a       	sub	r8, r18
    33d0:	91 08       	sbc	r9, r1
    33d2:	81 14       	cp	r8, r1
    33d4:	91 04       	cpc	r9, r1
    33d6:	79 f7       	brne	.-34     	; 0x33b6 <vfprintf+0x1c4>
    33d8:	e1 c0       	rjmp	.+450    	; 0x359c <vfprintf+0x3aa>
    33da:	84 36       	cpi	r24, 0x64	; 100
    33dc:	11 f0       	breq	.+4      	; 0x33e2 <vfprintf+0x1f0>
    33de:	89 36       	cpi	r24, 0x69	; 105
    33e0:	39 f5       	brne	.+78     	; 0x3430 <vfprintf+0x23e>
    33e2:	f8 01       	movw	r30, r16
    33e4:	37 fe       	sbrs	r3, 7
    33e6:	07 c0       	rjmp	.+14     	; 0x33f6 <vfprintf+0x204>
    33e8:	60 81       	ld	r22, Z
    33ea:	71 81       	ldd	r23, Z+1	; 0x01
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	93 81       	ldd	r25, Z+3	; 0x03
    33f0:	0c 5f       	subi	r16, 0xFC	; 252
    33f2:	1f 4f       	sbci	r17, 0xFF	; 255
    33f4:	08 c0       	rjmp	.+16     	; 0x3406 <vfprintf+0x214>
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	07 2e       	mov	r0, r23
    33fc:	00 0c       	add	r0, r0
    33fe:	88 0b       	sbc	r24, r24
    3400:	99 0b       	sbc	r25, r25
    3402:	0e 5f       	subi	r16, 0xFE	; 254
    3404:	1f 4f       	sbci	r17, 0xFF	; 255
    3406:	f3 2d       	mov	r31, r3
    3408:	ff 76       	andi	r31, 0x6F	; 111
    340a:	3f 2e       	mov	r3, r31
    340c:	97 ff       	sbrs	r25, 7
    340e:	09 c0       	rjmp	.+18     	; 0x3422 <vfprintf+0x230>
    3410:	90 95       	com	r25
    3412:	80 95       	com	r24
    3414:	70 95       	com	r23
    3416:	61 95       	neg	r22
    3418:	7f 4f       	sbci	r23, 0xFF	; 255
    341a:	8f 4f       	sbci	r24, 0xFF	; 255
    341c:	9f 4f       	sbci	r25, 0xFF	; 255
    341e:	f0 68       	ori	r31, 0x80	; 128
    3420:	3f 2e       	mov	r3, r31
    3422:	2a e0       	ldi	r18, 0x0A	; 10
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	a3 01       	movw	r20, r6
    3428:	33 d1       	rcall	.+614    	; 0x3690 <__ultoa_invert>
    342a:	88 2e       	mov	r8, r24
    342c:	86 18       	sub	r8, r6
    342e:	44 c0       	rjmp	.+136    	; 0x34b8 <vfprintf+0x2c6>
    3430:	85 37       	cpi	r24, 0x75	; 117
    3432:	31 f4       	brne	.+12     	; 0x3440 <vfprintf+0x24e>
    3434:	23 2d       	mov	r18, r3
    3436:	2f 7e       	andi	r18, 0xEF	; 239
    3438:	b2 2e       	mov	r11, r18
    343a:	2a e0       	ldi	r18, 0x0A	; 10
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	25 c0       	rjmp	.+74     	; 0x348a <vfprintf+0x298>
    3440:	93 2d       	mov	r25, r3
    3442:	99 7f       	andi	r25, 0xF9	; 249
    3444:	b9 2e       	mov	r11, r25
    3446:	8f 36       	cpi	r24, 0x6F	; 111
    3448:	c1 f0       	breq	.+48     	; 0x347a <vfprintf+0x288>
    344a:	18 f4       	brcc	.+6      	; 0x3452 <vfprintf+0x260>
    344c:	88 35       	cpi	r24, 0x58	; 88
    344e:	79 f0       	breq	.+30     	; 0x346e <vfprintf+0x27c>
    3450:	ae c0       	rjmp	.+348    	; 0x35ae <vfprintf+0x3bc>
    3452:	80 37       	cpi	r24, 0x70	; 112
    3454:	19 f0       	breq	.+6      	; 0x345c <vfprintf+0x26a>
    3456:	88 37       	cpi	r24, 0x78	; 120
    3458:	21 f0       	breq	.+8      	; 0x3462 <vfprintf+0x270>
    345a:	a9 c0       	rjmp	.+338    	; 0x35ae <vfprintf+0x3bc>
    345c:	e9 2f       	mov	r30, r25
    345e:	e0 61       	ori	r30, 0x10	; 16
    3460:	be 2e       	mov	r11, r30
    3462:	b4 fe       	sbrs	r11, 4
    3464:	0d c0       	rjmp	.+26     	; 0x3480 <vfprintf+0x28e>
    3466:	fb 2d       	mov	r31, r11
    3468:	f4 60       	ori	r31, 0x04	; 4
    346a:	bf 2e       	mov	r11, r31
    346c:	09 c0       	rjmp	.+18     	; 0x3480 <vfprintf+0x28e>
    346e:	34 fe       	sbrs	r3, 4
    3470:	0a c0       	rjmp	.+20     	; 0x3486 <vfprintf+0x294>
    3472:	29 2f       	mov	r18, r25
    3474:	26 60       	ori	r18, 0x06	; 6
    3476:	b2 2e       	mov	r11, r18
    3478:	06 c0       	rjmp	.+12     	; 0x3486 <vfprintf+0x294>
    347a:	28 e0       	ldi	r18, 0x08	; 8
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	05 c0       	rjmp	.+10     	; 0x348a <vfprintf+0x298>
    3480:	20 e1       	ldi	r18, 0x10	; 16
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	02 c0       	rjmp	.+4      	; 0x348a <vfprintf+0x298>
    3486:	20 e1       	ldi	r18, 0x10	; 16
    3488:	32 e0       	ldi	r19, 0x02	; 2
    348a:	f8 01       	movw	r30, r16
    348c:	b7 fe       	sbrs	r11, 7
    348e:	07 c0       	rjmp	.+14     	; 0x349e <vfprintf+0x2ac>
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	0c 5f       	subi	r16, 0xFC	; 252
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	06 c0       	rjmp	.+12     	; 0x34aa <vfprintf+0x2b8>
    349e:	60 81       	ld	r22, Z
    34a0:	71 81       	ldd	r23, Z+1	; 0x01
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	0e 5f       	subi	r16, 0xFE	; 254
    34a8:	1f 4f       	sbci	r17, 0xFF	; 255
    34aa:	a3 01       	movw	r20, r6
    34ac:	f1 d0       	rcall	.+482    	; 0x3690 <__ultoa_invert>
    34ae:	88 2e       	mov	r8, r24
    34b0:	86 18       	sub	r8, r6
    34b2:	fb 2d       	mov	r31, r11
    34b4:	ff 77       	andi	r31, 0x7F	; 127
    34b6:	3f 2e       	mov	r3, r31
    34b8:	36 fe       	sbrs	r3, 6
    34ba:	0d c0       	rjmp	.+26     	; 0x34d6 <vfprintf+0x2e4>
    34bc:	23 2d       	mov	r18, r3
    34be:	2e 7f       	andi	r18, 0xFE	; 254
    34c0:	a2 2e       	mov	r10, r18
    34c2:	89 14       	cp	r8, r9
    34c4:	58 f4       	brcc	.+22     	; 0x34dc <vfprintf+0x2ea>
    34c6:	34 fe       	sbrs	r3, 4
    34c8:	0b c0       	rjmp	.+22     	; 0x34e0 <vfprintf+0x2ee>
    34ca:	32 fc       	sbrc	r3, 2
    34cc:	09 c0       	rjmp	.+18     	; 0x34e0 <vfprintf+0x2ee>
    34ce:	83 2d       	mov	r24, r3
    34d0:	8e 7e       	andi	r24, 0xEE	; 238
    34d2:	a8 2e       	mov	r10, r24
    34d4:	05 c0       	rjmp	.+10     	; 0x34e0 <vfprintf+0x2ee>
    34d6:	b8 2c       	mov	r11, r8
    34d8:	a3 2c       	mov	r10, r3
    34da:	03 c0       	rjmp	.+6      	; 0x34e2 <vfprintf+0x2f0>
    34dc:	b8 2c       	mov	r11, r8
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <vfprintf+0x2f0>
    34e0:	b9 2c       	mov	r11, r9
    34e2:	a4 fe       	sbrs	r10, 4
    34e4:	0f c0       	rjmp	.+30     	; 0x3504 <vfprintf+0x312>
    34e6:	fe 01       	movw	r30, r28
    34e8:	e8 0d       	add	r30, r8
    34ea:	f1 1d       	adc	r31, r1
    34ec:	80 81       	ld	r24, Z
    34ee:	80 33       	cpi	r24, 0x30	; 48
    34f0:	21 f4       	brne	.+8      	; 0x34fa <vfprintf+0x308>
    34f2:	9a 2d       	mov	r25, r10
    34f4:	99 7e       	andi	r25, 0xE9	; 233
    34f6:	a9 2e       	mov	r10, r25
    34f8:	09 c0       	rjmp	.+18     	; 0x350c <vfprintf+0x31a>
    34fa:	a2 fe       	sbrs	r10, 2
    34fc:	06 c0       	rjmp	.+12     	; 0x350a <vfprintf+0x318>
    34fe:	b3 94       	inc	r11
    3500:	b3 94       	inc	r11
    3502:	04 c0       	rjmp	.+8      	; 0x350c <vfprintf+0x31a>
    3504:	8a 2d       	mov	r24, r10
    3506:	86 78       	andi	r24, 0x86	; 134
    3508:	09 f0       	breq	.+2      	; 0x350c <vfprintf+0x31a>
    350a:	b3 94       	inc	r11
    350c:	a3 fc       	sbrc	r10, 3
    350e:	10 c0       	rjmp	.+32     	; 0x3530 <vfprintf+0x33e>
    3510:	a0 fe       	sbrs	r10, 0
    3512:	06 c0       	rjmp	.+12     	; 0x3520 <vfprintf+0x32e>
    3514:	b2 14       	cp	r11, r2
    3516:	80 f4       	brcc	.+32     	; 0x3538 <vfprintf+0x346>
    3518:	28 0c       	add	r2, r8
    351a:	92 2c       	mov	r9, r2
    351c:	9b 18       	sub	r9, r11
    351e:	0d c0       	rjmp	.+26     	; 0x353a <vfprintf+0x348>
    3520:	b2 14       	cp	r11, r2
    3522:	58 f4       	brcc	.+22     	; 0x353a <vfprintf+0x348>
    3524:	b6 01       	movw	r22, r12
    3526:	80 e2       	ldi	r24, 0x20	; 32
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	76 d0       	rcall	.+236    	; 0x3618 <fputc>
    352c:	b3 94       	inc	r11
    352e:	f8 cf       	rjmp	.-16     	; 0x3520 <vfprintf+0x32e>
    3530:	b2 14       	cp	r11, r2
    3532:	18 f4       	brcc	.+6      	; 0x353a <vfprintf+0x348>
    3534:	2b 18       	sub	r2, r11
    3536:	02 c0       	rjmp	.+4      	; 0x353c <vfprintf+0x34a>
    3538:	98 2c       	mov	r9, r8
    353a:	21 2c       	mov	r2, r1
    353c:	a4 fe       	sbrs	r10, 4
    353e:	0f c0       	rjmp	.+30     	; 0x355e <vfprintf+0x36c>
    3540:	b6 01       	movw	r22, r12
    3542:	80 e3       	ldi	r24, 0x30	; 48
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	68 d0       	rcall	.+208    	; 0x3618 <fputc>
    3548:	a2 fe       	sbrs	r10, 2
    354a:	16 c0       	rjmp	.+44     	; 0x3578 <vfprintf+0x386>
    354c:	a1 fc       	sbrc	r10, 1
    354e:	03 c0       	rjmp	.+6      	; 0x3556 <vfprintf+0x364>
    3550:	88 e7       	ldi	r24, 0x78	; 120
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	02 c0       	rjmp	.+4      	; 0x355a <vfprintf+0x368>
    3556:	88 e5       	ldi	r24, 0x58	; 88
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	b6 01       	movw	r22, r12
    355c:	0c c0       	rjmp	.+24     	; 0x3576 <vfprintf+0x384>
    355e:	8a 2d       	mov	r24, r10
    3560:	86 78       	andi	r24, 0x86	; 134
    3562:	51 f0       	breq	.+20     	; 0x3578 <vfprintf+0x386>
    3564:	a1 fe       	sbrs	r10, 1
    3566:	02 c0       	rjmp	.+4      	; 0x356c <vfprintf+0x37a>
    3568:	8b e2       	ldi	r24, 0x2B	; 43
    356a:	01 c0       	rjmp	.+2      	; 0x356e <vfprintf+0x37c>
    356c:	80 e2       	ldi	r24, 0x20	; 32
    356e:	a7 fc       	sbrc	r10, 7
    3570:	8d e2       	ldi	r24, 0x2D	; 45
    3572:	b6 01       	movw	r22, r12
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	50 d0       	rcall	.+160    	; 0x3618 <fputc>
    3578:	89 14       	cp	r8, r9
    357a:	30 f4       	brcc	.+12     	; 0x3588 <vfprintf+0x396>
    357c:	b6 01       	movw	r22, r12
    357e:	80 e3       	ldi	r24, 0x30	; 48
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	4a d0       	rcall	.+148    	; 0x3618 <fputc>
    3584:	9a 94       	dec	r9
    3586:	f8 cf       	rjmp	.-16     	; 0x3578 <vfprintf+0x386>
    3588:	8a 94       	dec	r8
    358a:	f3 01       	movw	r30, r6
    358c:	e8 0d       	add	r30, r8
    358e:	f1 1d       	adc	r31, r1
    3590:	80 81       	ld	r24, Z
    3592:	b6 01       	movw	r22, r12
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	40 d0       	rcall	.+128    	; 0x3618 <fputc>
    3598:	81 10       	cpse	r8, r1
    359a:	f6 cf       	rjmp	.-20     	; 0x3588 <vfprintf+0x396>
    359c:	22 20       	and	r2, r2
    359e:	09 f4       	brne	.+2      	; 0x35a2 <vfprintf+0x3b0>
    35a0:	4e ce       	rjmp	.-868    	; 0x323e <vfprintf+0x4c>
    35a2:	b6 01       	movw	r22, r12
    35a4:	80 e2       	ldi	r24, 0x20	; 32
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	37 d0       	rcall	.+110    	; 0x3618 <fputc>
    35aa:	2a 94       	dec	r2
    35ac:	f7 cf       	rjmp	.-18     	; 0x359c <vfprintf+0x3aa>
    35ae:	f6 01       	movw	r30, r12
    35b0:	86 81       	ldd	r24, Z+6	; 0x06
    35b2:	97 81       	ldd	r25, Z+7	; 0x07
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <vfprintf+0x3c8>
    35b6:	8f ef       	ldi	r24, 0xFF	; 255
    35b8:	9f ef       	ldi	r25, 0xFF	; 255
    35ba:	2b 96       	adiw	r28, 0x0b	; 11
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	df 91       	pop	r29
    35c8:	cf 91       	pop	r28
    35ca:	1f 91       	pop	r17
    35cc:	0f 91       	pop	r16
    35ce:	ff 90       	pop	r15
    35d0:	ef 90       	pop	r14
    35d2:	df 90       	pop	r13
    35d4:	cf 90       	pop	r12
    35d6:	bf 90       	pop	r11
    35d8:	af 90       	pop	r10
    35da:	9f 90       	pop	r9
    35dc:	8f 90       	pop	r8
    35de:	7f 90       	pop	r7
    35e0:	6f 90       	pop	r6
    35e2:	5f 90       	pop	r5
    35e4:	4f 90       	pop	r4
    35e6:	3f 90       	pop	r3
    35e8:	2f 90       	pop	r2
    35ea:	08 95       	ret

000035ec <strnlen_P>:
    35ec:	fc 01       	movw	r30, r24
    35ee:	05 90       	lpm	r0, Z+
    35f0:	61 50       	subi	r22, 0x01	; 1
    35f2:	70 40       	sbci	r23, 0x00	; 0
    35f4:	01 10       	cpse	r0, r1
    35f6:	d8 f7       	brcc	.-10     	; 0x35ee <strnlen_P+0x2>
    35f8:	80 95       	com	r24
    35fa:	90 95       	com	r25
    35fc:	8e 0f       	add	r24, r30
    35fe:	9f 1f       	adc	r25, r31
    3600:	08 95       	ret

00003602 <strnlen>:
    3602:	fc 01       	movw	r30, r24
    3604:	61 50       	subi	r22, 0x01	; 1
    3606:	70 40       	sbci	r23, 0x00	; 0
    3608:	01 90       	ld	r0, Z+
    360a:	01 10       	cpse	r0, r1
    360c:	d8 f7       	brcc	.-10     	; 0x3604 <strnlen+0x2>
    360e:	80 95       	com	r24
    3610:	90 95       	com	r25
    3612:	8e 0f       	add	r24, r30
    3614:	9f 1f       	adc	r25, r31
    3616:	08 95       	ret

00003618 <fputc>:
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	fb 01       	movw	r30, r22
    3622:	23 81       	ldd	r18, Z+3	; 0x03
    3624:	21 fd       	sbrc	r18, 1
    3626:	03 c0       	rjmp	.+6      	; 0x362e <fputc+0x16>
    3628:	8f ef       	ldi	r24, 0xFF	; 255
    362a:	9f ef       	ldi	r25, 0xFF	; 255
    362c:	2c c0       	rjmp	.+88     	; 0x3686 <fputc+0x6e>
    362e:	22 ff       	sbrs	r18, 2
    3630:	16 c0       	rjmp	.+44     	; 0x365e <fputc+0x46>
    3632:	46 81       	ldd	r20, Z+6	; 0x06
    3634:	57 81       	ldd	r21, Z+7	; 0x07
    3636:	24 81       	ldd	r18, Z+4	; 0x04
    3638:	35 81       	ldd	r19, Z+5	; 0x05
    363a:	42 17       	cp	r20, r18
    363c:	53 07       	cpc	r21, r19
    363e:	44 f4       	brge	.+16     	; 0x3650 <fputc+0x38>
    3640:	a0 81       	ld	r26, Z
    3642:	b1 81       	ldd	r27, Z+1	; 0x01
    3644:	9d 01       	movw	r18, r26
    3646:	2f 5f       	subi	r18, 0xFF	; 255
    3648:	3f 4f       	sbci	r19, 0xFF	; 255
    364a:	31 83       	std	Z+1, r19	; 0x01
    364c:	20 83       	st	Z, r18
    364e:	8c 93       	st	X, r24
    3650:	26 81       	ldd	r18, Z+6	; 0x06
    3652:	37 81       	ldd	r19, Z+7	; 0x07
    3654:	2f 5f       	subi	r18, 0xFF	; 255
    3656:	3f 4f       	sbci	r19, 0xFF	; 255
    3658:	37 83       	std	Z+7, r19	; 0x07
    365a:	26 83       	std	Z+6, r18	; 0x06
    365c:	14 c0       	rjmp	.+40     	; 0x3686 <fputc+0x6e>
    365e:	8b 01       	movw	r16, r22
    3660:	ec 01       	movw	r28, r24
    3662:	fb 01       	movw	r30, r22
    3664:	00 84       	ldd	r0, Z+8	; 0x08
    3666:	f1 85       	ldd	r31, Z+9	; 0x09
    3668:	e0 2d       	mov	r30, r0
    366a:	19 95       	eicall
    366c:	89 2b       	or	r24, r25
    366e:	e1 f6       	brne	.-72     	; 0x3628 <fputc+0x10>
    3670:	d8 01       	movw	r26, r16
    3672:	16 96       	adiw	r26, 0x06	; 6
    3674:	8d 91       	ld	r24, X+
    3676:	9c 91       	ld	r25, X
    3678:	17 97       	sbiw	r26, 0x07	; 7
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	17 96       	adiw	r26, 0x07	; 7
    367e:	9c 93       	st	X, r25
    3680:	8e 93       	st	-X, r24
    3682:	16 97       	sbiw	r26, 0x06	; 6
    3684:	ce 01       	movw	r24, r28
    3686:	df 91       	pop	r29
    3688:	cf 91       	pop	r28
    368a:	1f 91       	pop	r17
    368c:	0f 91       	pop	r16
    368e:	08 95       	ret

00003690 <__ultoa_invert>:
    3690:	fa 01       	movw	r30, r20
    3692:	aa 27       	eor	r26, r26
    3694:	28 30       	cpi	r18, 0x08	; 8
    3696:	51 f1       	breq	.+84     	; 0x36ec <__ultoa_invert+0x5c>
    3698:	20 31       	cpi	r18, 0x10	; 16
    369a:	81 f1       	breq	.+96     	; 0x36fc <__ultoa_invert+0x6c>
    369c:	e8 94       	clt
    369e:	6f 93       	push	r22
    36a0:	6e 7f       	andi	r22, 0xFE	; 254
    36a2:	6e 5f       	subi	r22, 0xFE	; 254
    36a4:	7f 4f       	sbci	r23, 0xFF	; 255
    36a6:	8f 4f       	sbci	r24, 0xFF	; 255
    36a8:	9f 4f       	sbci	r25, 0xFF	; 255
    36aa:	af 4f       	sbci	r26, 0xFF	; 255
    36ac:	b1 e0       	ldi	r27, 0x01	; 1
    36ae:	3e d0       	rcall	.+124    	; 0x372c <__ultoa_invert+0x9c>
    36b0:	b4 e0       	ldi	r27, 0x04	; 4
    36b2:	3c d0       	rcall	.+120    	; 0x372c <__ultoa_invert+0x9c>
    36b4:	67 0f       	add	r22, r23
    36b6:	78 1f       	adc	r23, r24
    36b8:	89 1f       	adc	r24, r25
    36ba:	9a 1f       	adc	r25, r26
    36bc:	a1 1d       	adc	r26, r1
    36be:	68 0f       	add	r22, r24
    36c0:	79 1f       	adc	r23, r25
    36c2:	8a 1f       	adc	r24, r26
    36c4:	91 1d       	adc	r25, r1
    36c6:	a1 1d       	adc	r26, r1
    36c8:	6a 0f       	add	r22, r26
    36ca:	71 1d       	adc	r23, r1
    36cc:	81 1d       	adc	r24, r1
    36ce:	91 1d       	adc	r25, r1
    36d0:	a1 1d       	adc	r26, r1
    36d2:	20 d0       	rcall	.+64     	; 0x3714 <__ultoa_invert+0x84>
    36d4:	09 f4       	brne	.+2      	; 0x36d8 <__ultoa_invert+0x48>
    36d6:	68 94       	set
    36d8:	3f 91       	pop	r19
    36da:	2a e0       	ldi	r18, 0x0A	; 10
    36dc:	26 9f       	mul	r18, r22
    36de:	11 24       	eor	r1, r1
    36e0:	30 19       	sub	r19, r0
    36e2:	30 5d       	subi	r19, 0xD0	; 208
    36e4:	31 93       	st	Z+, r19
    36e6:	de f6       	brtc	.-74     	; 0x369e <__ultoa_invert+0xe>
    36e8:	cf 01       	movw	r24, r30
    36ea:	08 95       	ret
    36ec:	46 2f       	mov	r20, r22
    36ee:	47 70       	andi	r20, 0x07	; 7
    36f0:	40 5d       	subi	r20, 0xD0	; 208
    36f2:	41 93       	st	Z+, r20
    36f4:	b3 e0       	ldi	r27, 0x03	; 3
    36f6:	0f d0       	rcall	.+30     	; 0x3716 <__ultoa_invert+0x86>
    36f8:	c9 f7       	brne	.-14     	; 0x36ec <__ultoa_invert+0x5c>
    36fa:	f6 cf       	rjmp	.-20     	; 0x36e8 <__ultoa_invert+0x58>
    36fc:	46 2f       	mov	r20, r22
    36fe:	4f 70       	andi	r20, 0x0F	; 15
    3700:	40 5d       	subi	r20, 0xD0	; 208
    3702:	4a 33       	cpi	r20, 0x3A	; 58
    3704:	18 f0       	brcs	.+6      	; 0x370c <__ultoa_invert+0x7c>
    3706:	49 5d       	subi	r20, 0xD9	; 217
    3708:	31 fd       	sbrc	r19, 1
    370a:	40 52       	subi	r20, 0x20	; 32
    370c:	41 93       	st	Z+, r20
    370e:	02 d0       	rcall	.+4      	; 0x3714 <__ultoa_invert+0x84>
    3710:	a9 f7       	brne	.-22     	; 0x36fc <__ultoa_invert+0x6c>
    3712:	ea cf       	rjmp	.-44     	; 0x36e8 <__ultoa_invert+0x58>
    3714:	b4 e0       	ldi	r27, 0x04	; 4
    3716:	a6 95       	lsr	r26
    3718:	97 95       	ror	r25
    371a:	87 95       	ror	r24
    371c:	77 95       	ror	r23
    371e:	67 95       	ror	r22
    3720:	ba 95       	dec	r27
    3722:	c9 f7       	brne	.-14     	; 0x3716 <__ultoa_invert+0x86>
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	61 05       	cpc	r22, r1
    3728:	71 05       	cpc	r23, r1
    372a:	08 95       	ret
    372c:	9b 01       	movw	r18, r22
    372e:	ac 01       	movw	r20, r24
    3730:	0a 2e       	mov	r0, r26
    3732:	06 94       	lsr	r0
    3734:	57 95       	ror	r21
    3736:	47 95       	ror	r20
    3738:	37 95       	ror	r19
    373a:	27 95       	ror	r18
    373c:	ba 95       	dec	r27
    373e:	c9 f7       	brne	.-14     	; 0x3732 <__ultoa_invert+0xa2>
    3740:	62 0f       	add	r22, r18
    3742:	73 1f       	adc	r23, r19
    3744:	84 1f       	adc	r24, r20
    3746:	95 1f       	adc	r25, r21
    3748:	a0 1d       	adc	r26, r0
    374a:	08 95       	ret

0000374c <_exit>:
    374c:	f8 94       	cli

0000374e <__stop_program>:
    374e:	ff cf       	rjmp	.-2      	; 0x374e <__stop_program>
