
toImportToAS7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800200  0000263a  000026ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000263a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000222  0080032e  0080032e  000027fc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f8  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000125f4  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003174  00000000  00000000  00015584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a23  00000000  00000000  000186f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001478  00000000  00000000  0001c11c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038f5  00000000  00000000  0001d594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000063dd  00000000  00000000  00020e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00027266  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c1       	rjmp	.+532    	; 0x216 <__ctors_end>
       2:	00 00       	nop
       4:	39 c1       	rjmp	.+626    	; 0x278 <__bad_interrupt>
       6:	00 00       	nop
       8:	37 c1       	rjmp	.+622    	; 0x278 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c1       	rjmp	.+618    	; 0x278 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c1       	rjmp	.+614    	; 0x278 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c1       	rjmp	.+610    	; 0x278 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c1       	rjmp	.+606    	; 0x278 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2d c1       	rjmp	.+602    	; 0x278 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2b c1       	rjmp	.+598    	; 0x278 <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c2       	rjmp	.+1286   	; 0x52c <__vector_9>
      26:	00 00       	nop
      28:	27 c1       	rjmp	.+590    	; 0x278 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	25 c1       	rjmp	.+586    	; 0x278 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c1       	rjmp	.+582    	; 0x278 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c1       	rjmp	.+578    	; 0x278 <__bad_interrupt>
      36:	00 00       	nop
      38:	1f c1       	rjmp	.+574    	; 0x278 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c1       	rjmp	.+570    	; 0x278 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c1       	rjmp	.+566    	; 0x278 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c1       	rjmp	.+562    	; 0x278 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c1       	rjmp	.+558    	; 0x278 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c1       	rjmp	.+554    	; 0x278 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c1       	rjmp	.+550    	; 0x278 <__bad_interrupt>
      52:	00 00       	nop
      54:	11 c1       	rjmp	.+546    	; 0x278 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c1       	rjmp	.+542    	; 0x278 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__vector_23>
      60:	0b c1       	rjmp	.+534    	; 0x278 <__bad_interrupt>
      62:	00 00       	nop
      64:	ee c7       	rjmp	.+4060   	; 0x1042 <__vector_25>
      66:	00 00       	nop
      68:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_26>
      6c:	05 c1       	rjmp	.+522    	; 0x278 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__bad_interrupt>
      72:	00 00       	nop
      74:	01 c1       	rjmp	.+514    	; 0x278 <__bad_interrupt>
      76:	00 00       	nop
      78:	ff c0       	rjmp	.+510    	; 0x278 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd c0       	rjmp	.+506    	; 0x278 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fb c0       	rjmp	.+502    	; 0x278 <__bad_interrupt>
      82:	00 00       	nop
      84:	f9 c0       	rjmp	.+498    	; 0x278 <__bad_interrupt>
      86:	00 00       	nop
      88:	f7 c0       	rjmp	.+494    	; 0x278 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f5 c0       	rjmp	.+490    	; 0x278 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_36>
      94:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_37>
      98:	ef c0       	rjmp	.+478    	; 0x278 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__vector_39>
      a0:	eb c0       	rjmp	.+470    	; 0x278 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e9 c0       	rjmp	.+466    	; 0x278 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e7 c0       	rjmp	.+462    	; 0x278 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e5 c0       	rjmp	.+458    	; 0x278 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e3 c0       	rjmp	.+454    	; 0x278 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e1 c0       	rjmp	.+450    	; 0x278 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	df c0       	rjmp	.+446    	; 0x278 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dd c0       	rjmp	.+442    	; 0x278 <__bad_interrupt>
      be:	00 00       	nop
      c0:	db c0       	rjmp	.+438    	; 0x278 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d9 c0       	rjmp	.+434    	; 0x278 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d7 c0       	rjmp	.+430    	; 0x278 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d5 c0       	rjmp	.+426    	; 0x278 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d3 c0       	rjmp	.+422    	; 0x278 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d1 c0       	rjmp	.+418    	; 0x278 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cf c0       	rjmp	.+414    	; 0x278 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cd c0       	rjmp	.+410    	; 0x278 <__bad_interrupt>
      de:	00 00       	nop
      e0:	cb c0       	rjmp	.+406    	; 0x278 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9f 0b       	sbc	r25, r31
      e6:	a2 0b       	sbc	r26, r18
      e8:	91 0b       	sbc	r25, r17
      ea:	95 0b       	sbc	r25, r21
      ec:	9b 0b       	sbc	r25, r27
      ee:	d9 0b       	sbc	r29, r25
      f0:	a6 0b       	sbc	r26, r22
      f2:	aa 0b       	sbc	r26, r26
      f4:	b0 0b       	sbc	r27, r16
      f6:	b4 0b       	sbc	r27, r20
      f8:	b8 0b       	sbc	r27, r24
      fa:	be 0b       	sbc	r27, r30
      fc:	c2 0b       	sbc	r28, r18
      fe:	c6 0b       	sbc	r28, r22
     100:	d9 0b       	sbc	r29, r25
     102:	cc 0b       	sbc	r28, r28
     104:	d0 0b       	sbc	r29, r16
     106:	d4 0b       	sbc	r29, r20

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	e8 01       	movw	r28, r16
     210:	89 08       	sbc	r8, r9
     212:	1e 09       	sbc	r17, r14
     214:	30 0e       	add	r3, r16

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	d1 e2       	ldi	r29, 0x21	; 33
     21e:	de bf       	out	0x3e, r29	; 62
     220:	cd bf       	out	0x3d, r28	; 61
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0c bf       	out	0x3c, r16	; 60

00000226 <__do_copy_data>:
     226:	13 e0       	ldi	r17, 0x03	; 3
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b2 e0       	ldi	r27, 0x02	; 2
     22c:	ea e3       	ldi	r30, 0x3A	; 58
     22e:	f6 e2       	ldi	r31, 0x26	; 38
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	ae 32       	cpi	r26, 0x2E	; 46
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	25 e0       	ldi	r18, 0x05	; 5
     242:	ae e2       	ldi	r26, 0x2E	; 46
     244:	b3 e0       	ldi	r27, 0x03	; 3
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	a0 35       	cpi	r26, 0x50	; 80
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>

00000250 <__do_global_ctors>:
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	cb e0       	ldi	r28, 0x0B	; 11
     254:	d1 e0       	ldi	r29, 0x01	; 1
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	06 c0       	rjmp	.+12     	; 0x266 <__do_global_ctors+0x16>
     25a:	21 97       	sbiw	r28, 0x01	; 1
     25c:	01 09       	sbc	r16, r1
     25e:	80 2f       	mov	r24, r16
     260:	fe 01       	movw	r30, r28
     262:	0e 94 38 10 	call	0x2070	; 0x2070 <__tablejump2__>
     266:	c7 30       	cpi	r28, 0x07	; 7
     268:	d1 07       	cpc	r29, r17
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	08 07       	cpc	r16, r24
     26e:	a9 f7       	brne	.-22     	; 0x25a <__do_global_ctors+0xa>
     270:	0e 94 4c 09 	call	0x1298	; 0x1298 <main>
     274:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <_exit>

00000278 <__bad_interrupt>:
     278:	c3 ce       	rjmp	.-634    	; 0x0 <__vectors>

0000027a <_ZN14HardwareSerial5writeEi>:
  Serial1.write(MX_TORQUE_LENGTH);
  Serial1.write(MX_INSTRUCTION_WRITE_DATA);
  Serial1.write(MX_TORQUE_ENABLE);
  Serial1.write(Status);
  Serial1.write(Checksum);
  RS485_RX_ON
     27a:	dc 01       	movw	r26, r24
     27c:	ed 91       	ld	r30, X+
     27e:	fc 91       	ld	r31, X
     280:	01 90       	ld	r0, Z+
     282:	f0 81       	ld	r31, Z
     284:	e0 2d       	mov	r30, r0
     286:	19 94       	eijmp

00000288 <_Z9printLCD1hhi>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	1f 92       	push	r1
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	f8 2e       	mov	r15, r24
     29c:	e6 2e       	mov	r14, r22
     29e:	5f 93       	push	r21
     2a0:	4f 93       	push	r20
     2a2:	89 e5       	ldi	r24, 0x59	; 89
     2a4:	92 e0       	ldi	r25, 0x02	; 2
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	8e 01       	movw	r16, r28
     2ac:	0f 5f       	subi	r16, 0xFF	; 255
     2ae:	1f 4f       	sbci	r17, 0xFF	; 255
     2b0:	1f 93       	push	r17
     2b2:	0f 93       	push	r16
     2b4:	0e 94 40 10 	call	0x2080	; 0x2080 <sprintf>
     2b8:	4e 2d       	mov	r20, r14
     2ba:	6f 2d       	mov	r22, r15
     2bc:	8e e2       	ldi	r24, 0x2E	; 46
     2be:	93 e0       	ldi	r25, 0x03	; 3
     2c0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     2c4:	b8 01       	movw	r22, r16
     2c6:	8e e2       	ldi	r24, 0x2E	; 46
     2c8:	93 e0       	ldi	r25, 0x03	; 3
     2ca:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN5Print5printEPKc>
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	08 95       	ret

000002ea <_Z9printLCD3hhi>:
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <_Z9printLCD3hhi+0xe>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	f8 2e       	mov	r15, r24
     2fe:	e6 2e       	mov	r14, r22
     300:	5f 93       	push	r21
     302:	4f 93       	push	r20
     304:	81 e6       	ldi	r24, 0x61	; 97
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	8e 01       	movw	r16, r28
     30e:	0f 5f       	subi	r16, 0xFF	; 255
     310:	1f 4f       	sbci	r17, 0xFF	; 255
     312:	1f 93       	push	r17
     314:	0f 93       	push	r16
     316:	0e 94 40 10 	call	0x2080	; 0x2080 <sprintf>
     31a:	4e 2d       	mov	r20, r14
     31c:	6f 2d       	mov	r22, r15
     31e:	8e e2       	ldi	r24, 0x2E	; 46
     320:	93 e0       	ldi	r25, 0x03	; 3
     322:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     326:	b8 01       	movw	r22, r16
     328:	8e e2       	ldi	r24, 0x2E	; 46
     32a:	93 e0       	ldi	r25, 0x03	; 3
     32c:	fe d7       	rcall	.+4092   	; 0x132a <_ZN5Print5printEPKc>
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	08 95       	ret

0000034e <_Z9printLCD4hhi>:
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	00 d0       	rcall	.+0      	; 0x35c <_Z9printLCD4hhi+0xe>
     35c:	1f 92       	push	r1
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	f8 2e       	mov	r15, r24
     364:	e6 2e       	mov	r14, r22
     366:	5f 93       	push	r21
     368:	4f 93       	push	r20
     36a:	85 e6       	ldi	r24, 0x65	; 101
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	9f 93       	push	r25
     370:	8f 93       	push	r24
     372:	8e 01       	movw	r16, r28
     374:	0f 5f       	subi	r16, 0xFF	; 255
     376:	1f 4f       	sbci	r17, 0xFF	; 255
     378:	1f 93       	push	r17
     37a:	0f 93       	push	r16
     37c:	0e 94 40 10 	call	0x2080	; 0x2080 <sprintf>
     380:	4e 2d       	mov	r20, r14
     382:	6f 2d       	mov	r22, r15
     384:	8e e2       	ldi	r24, 0x2E	; 46
     386:	93 e0       	ldi	r25, 0x03	; 3
     388:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     38c:	b8 01       	movw	r22, r16
     38e:	8e e2       	ldi	r24, 0x2E	; 46
     390:	93 e0       	ldi	r25, 0x03	; 3
     392:	cb d7       	rcall	.+3990   	; 0x132a <_ZN5Print5printEPKc>
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
     3b4:	08 95       	ret

000003b6 <_Z8sumBytesPhh>:
     3b6:	38 2f       	mov	r19, r24
     3b8:	fc 01       	movw	r30, r24
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	2e 2f       	mov	r18, r30
     3c0:	23 1b       	sub	r18, r19
     3c2:	26 17       	cp	r18, r22
     3c4:	20 f4       	brcc	.+8      	; 0x3ce <_Z8sumBytesPhh+0x18>
     3c6:	21 91       	ld	r18, Z+
     3c8:	82 0f       	add	r24, r18
     3ca:	91 1d       	adc	r25, r1
     3cc:	f8 cf       	rjmp	.-16     	; 0x3be <_Z8sumBytesPhh+0x8>
     3ce:	08 95       	ret

000003d0 <_GLOBAL__sub_I_Load_High_Byte>:
     3d0:	0e 94 ae 0a 	call	0x155c	; 0x155c <millis>
     3d4:	60 93 45 03 	sts	0x0345, r22	; 0x800345 <startTime>
     3d8:	70 93 46 03 	sts	0x0346, r23	; 0x800346 <startTime+0x1>
     3dc:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <startTime+0x2>
     3e0:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <startTime+0x3>
     3e4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3e8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3ec:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <currPos+0x1>
     3f0:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <currPos>
     3f4:	24 e0       	ldi	r18, 0x04	; 4
     3f6:	44 e1       	ldi	r20, 0x14	; 20
     3f8:	67 e2       	ldi	r22, 0x27	; 39
     3fa:	8e e2       	ldi	r24, 0x2E	; 46
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <_ZN17LiquidCrystal_I2CC1Ehhh>

00000402 <_Z10writeServohhPhh>:
     402:	cf 92       	push	r12
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	f8 2e       	mov	r15, r24
     414:	e6 2e       	mov	r14, r22
     416:	6a 01       	movw	r12, r20
     418:	02 2f       	mov	r16, r18
     41a:	66 e0       	ldi	r22, 0x06	; 6
     41c:	6e 0d       	add	r22, r14
     41e:	d6 2f       	mov	r29, r22
     420:	d2 0f       	add	r29, r18
     422:	62 2f       	mov	r22, r18
     424:	ca 01       	movw	r24, r20
     426:	c7 df       	rcall	.-114    	; 0x3b6 <_Z8sumBytesPhh>
     428:	c8 2f       	mov	r28, r24
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	0e 94 16 0c 	call	0x182c	; 0x182c <digitalWrite>
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	0e 94 16 0c 	call	0x182c	; 0x182c <digitalWrite>
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 df 0a 	call	0x15be	; 0x15be <delay>
     446:	6f ef       	ldi	r22, 0xFF	; 255
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	86 ee       	ldi	r24, 0xE6	; 230
     44c:	93 e0       	ldi	r25, 0x03	; 3
     44e:	15 df       	rcall	.-470    	; 0x27a <_ZN14HardwareSerial5writeEi>
     450:	6f ef       	ldi	r22, 0xFF	; 255
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	86 ee       	ldi	r24, 0xE6	; 230
     456:	93 e0       	ldi	r25, 0x03	; 3
     458:	10 df       	rcall	.-480    	; 0x27a <_ZN14HardwareSerial5writeEi>
     45a:	6f 2d       	mov	r22, r15
     45c:	86 ee       	ldi	r24, 0xE6	; 230
     45e:	93 e0       	ldi	r25, 0x03	; 3
     460:	1a d5       	rcall	.+2612   	; 0xe96 <_ZN14HardwareSerial5writeEh>
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	b8 01       	movw	r22, r16
     466:	6d 5f       	subi	r22, 0xFD	; 253
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	86 ee       	ldi	r24, 0xE6	; 230
     46c:	93 e0       	ldi	r25, 0x03	; 3
     46e:	05 df       	rcall	.-502    	; 0x27a <_ZN14HardwareSerial5writeEi>
     470:	63 e0       	ldi	r22, 0x03	; 3
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	86 ee       	ldi	r24, 0xE6	; 230
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	00 df       	rcall	.-512    	; 0x27a <_ZN14HardwareSerial5writeEi>
     47a:	6e 2d       	mov	r22, r14
     47c:	86 ee       	ldi	r24, 0xE6	; 230
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	0a d5       	rcall	.+2580   	; 0xe96 <_ZN14HardwareSerial5writeEh>
     482:	a8 01       	movw	r20, r16
     484:	b6 01       	movw	r22, r12
     486:	86 ee       	ldi	r24, 0xE6	; 230
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	10 d7       	rcall	.+3616   	; 0x12ac <_ZN5Print5writeEPKhj>
     48c:	df 0d       	add	r29, r15
     48e:	cd 0f       	add	r28, r29
     490:	c0 95       	com	r28
     492:	6c 2f       	mov	r22, r28
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	86 ee       	ldi	r24, 0xE6	; 230
     498:	93 e0       	ldi	r25, 0x03	; 3
     49a:	ef de       	rcall	.-546    	; 0x27a <_ZN14HardwareSerial5writeEi>
     49c:	86 ee       	ldi	r24, 0xE6	; 230
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	46 d5       	rcall	.+2700   	; 0xf2e <_ZN14HardwareSerial5flushEv>
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	0e 94 16 0c 	call	0x182c	; 0x182c <digitalWrite>
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	0e 94 16 0c 	call	0x182c	; 0x182c <digitalWrite>
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	0c 94 df 0a 	jmp	0x15be	; 0x15be <delay>

000004ce <_Z9moveSpeedhii>:
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <_Z9moveSpeedhii+0xa>
     4d8:	1f 92       	push	r1
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	8b 01       	movw	r16, r22
     4e0:	9c ef       	ldi	r25, 0xFC	; 252
     4e2:	98 0f       	add	r25, r24
     4e4:	92 30       	cpi	r25, 0x02	; 2
     4e6:	58 f4       	brcc	.+22     	; 0x4fe <_Z9moveSpeedhii+0x30>
     4e8:	64 3e       	cpi	r22, 0xE4	; 228
     4ea:	72 40       	sbci	r23, 0x02	; 2
     4ec:	14 f4       	brge	.+4      	; 0x4f2 <_Z9moveSpeedhii+0x24>
     4ee:	04 ee       	ldi	r16, 0xE4	; 228
     4f0:	12 e0       	ldi	r17, 0x02	; 2
     4f2:	05 3a       	cpi	r16, 0xA5	; 165
     4f4:	96 e0       	ldi	r25, 0x06	; 6
     4f6:	19 07       	cpc	r17, r25
     4f8:	14 f0       	brlt	.+4      	; 0x4fe <_Z9moveSpeedhii+0x30>
     4fa:	04 ea       	ldi	r16, 0xA4	; 164
     4fc:	16 e0       	ldi	r17, 0x06	; 6
     4fe:	09 83       	std	Y+1, r16	; 0x01
     500:	1a 83       	std	Y+2, r17	; 0x02
     502:	4b 83       	std	Y+3, r20	; 0x03
     504:	5c 83       	std	Y+4, r21	; 0x04
     506:	24 e0       	ldi	r18, 0x04	; 4
     508:	ae 01       	movw	r20, r28
     50a:	4f 5f       	subi	r20, 0xFF	; 255
     50c:	5f 4f       	sbci	r21, 0xFF	; 255
     50e:	6e e1       	ldi	r22, 0x1E	; 30
     510:	78 df       	rcall	.-272    	; 0x402 <_Z10writeServohhPhh>
     512:	10 93 40 03 	sts	0x0340, r17	; 0x800340 <currPos+0x1>
     516:	00 93 3f 03 	sts	0x033F, r16	; 0x80033f <currPos>
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <__vector_9>:
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	0b b6       	in	r0, 0x3b	; 59
     538:	0f 92       	push	r0
     53a:	2f 93       	push	r18
     53c:	3f 93       	push	r19
     53e:	4f 93       	push	r20
     540:	5f 93       	push	r21
     542:	6f 93       	push	r22
     544:	7f 93       	push	r23
     546:	8f 93       	push	r24
     548:	9f 93       	push	r25
     54a:	af 93       	push	r26
     54c:	bf 93       	push	r27
     54e:	ef 93       	push	r30
     550:	ff 93       	push	r31
     552:	18 9b       	sbis	0x03, 0	; 3
     554:	1c c0       	rjmp	.+56     	; 0x58e <__vector_9+0x62>
     556:	1f 9a       	sbi	0x03, 7	; 3
     558:	18 9b       	sbis	0x03, 0	; 3
     55a:	19 c0       	rjmp	.+50     	; 0x58e <__vector_9+0x62>
     55c:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <currPos>
     560:	70 91 40 03 	lds	r23, 0x0340	; 0x800340 <currPos+0x1>
     564:	65 3e       	cpi	r22, 0xE5	; 229
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	78 07       	cpc	r23, r24
     56a:	1c f0       	brlt	.+6      	; 0x572 <__vector_9+0x46>
     56c:	61 50       	subi	r22, 0x01	; 1
     56e:	71 09       	sbc	r23, r1
     570:	02 c0       	rjmp	.+4      	; 0x576 <__vector_9+0x4a>
     572:	64 ee       	ldi	r22, 0xE4	; 228
     574:	72 e0       	ldi	r23, 0x02	; 2
     576:	44 e1       	ldi	r20, 0x14	; 20
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     57e:	a7 df       	rcall	.-178    	; 0x4ce <_Z9moveSpeedhii>
     580:	68 ec       	ldi	r22, 0xC8	; 200
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 df 0a 	call	0x15be	; 0x15be <delay>
     58c:	e5 cf       	rjmp	.-54     	; 0x558 <__vector_9+0x2c>
     58e:	19 9b       	sbis	0x03, 1	; 3
     590:	1b c0       	rjmp	.+54     	; 0x5c8 <__vector_9+0x9c>
     592:	2f 98       	cbi	0x05, 7	; 5
     594:	19 9b       	sbis	0x03, 1	; 3
     596:	18 c0       	rjmp	.+48     	; 0x5c8 <__vector_9+0x9c>
     598:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <currPos>
     59c:	70 91 40 03 	lds	r23, 0x0340	; 0x800340 <currPos+0x1>
     5a0:	64 3a       	cpi	r22, 0xA4	; 164
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	78 07       	cpc	r23, r24
     5a6:	1c f4       	brge	.+6      	; 0x5ae <__vector_9+0x82>
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__vector_9+0x86>
     5ae:	64 ea       	ldi	r22, 0xA4	; 164
     5b0:	76 e0       	ldi	r23, 0x06	; 6
     5b2:	44 e1       	ldi	r20, 0x14	; 20
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     5ba:	89 df       	rcall	.-238    	; 0x4ce <_Z9moveSpeedhii>
     5bc:	68 ec       	ldi	r22, 0xC8	; 200
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	fc d7       	rcall	.+4088   	; 0x15be <delay>
     5c6:	e6 cf       	rjmp	.-52     	; 0x594 <__vector_9+0x68>
     5c8:	1a 99       	sbic	0x03, 2	; 3
     5ca:	2f 9a       	sbi	0x05, 7	; 5
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	bf 91       	pop	r27
     5d2:	af 91       	pop	r26
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	7f 91       	pop	r23
     5da:	6f 91       	pop	r22
     5dc:	5f 91       	pop	r21
     5de:	4f 91       	pop	r20
     5e0:	3f 91       	pop	r19
     5e2:	2f 91       	pop	r18
     5e4:	0f 90       	pop	r0
     5e6:	0b be       	out	0x3b, r0	; 59
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <_Z9readServohhh>:
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	c8 2f       	mov	r28, r24
     5fa:	d6 2f       	mov	r29, r22
     5fc:	14 2f       	mov	r17, r20
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	0e 94 16 0c 	call	0x182c	; 0x182c <digitalWrite>
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	0e 94 16 0c 	call	0x182c	; 0x182c <digitalWrite>
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	d3 d7       	rcall	.+4006   	; 0x15be <delay>
     618:	6f ef       	ldi	r22, 0xFF	; 255
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	86 ee       	ldi	r24, 0xE6	; 230
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	2c de       	rcall	.-936    	; 0x27a <_ZN14HardwareSerial5writeEi>
     622:	6f ef       	ldi	r22, 0xFF	; 255
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	86 ee       	ldi	r24, 0xE6	; 230
     628:	93 e0       	ldi	r25, 0x03	; 3
     62a:	27 de       	rcall	.-946    	; 0x27a <_ZN14HardwareSerial5writeEi>
     62c:	6c 2f       	mov	r22, r28
     62e:	86 ee       	ldi	r24, 0xE6	; 230
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	31 d4       	rcall	.+2146   	; 0xe96 <_ZN14HardwareSerial5writeEh>
     634:	64 e0       	ldi	r22, 0x04	; 4
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	86 ee       	ldi	r24, 0xE6	; 230
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	1e de       	rcall	.-964    	; 0x27a <_ZN14HardwareSerial5writeEi>
     63e:	62 e0       	ldi	r22, 0x02	; 2
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	86 ee       	ldi	r24, 0xE6	; 230
     644:	93 e0       	ldi	r25, 0x03	; 3
     646:	19 de       	rcall	.-974    	; 0x27a <_ZN14HardwareSerial5writeEi>
     648:	6d 2f       	mov	r22, r29
     64a:	86 ee       	ldi	r24, 0xE6	; 230
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	23 d4       	rcall	.+2118   	; 0xe96 <_ZN14HardwareSerial5writeEh>
     650:	61 2f       	mov	r22, r17
     652:	86 ee       	ldi	r24, 0xE6	; 230
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	1f d4       	rcall	.+2110   	; 0xe96 <_ZN14HardwareSerial5writeEh>
     658:	1a 5f       	subi	r17, 0xFA	; 250
     65a:	d1 0f       	add	r29, r17
     65c:	cd 0f       	add	r28, r29
     65e:	c0 95       	com	r28
     660:	6c 2f       	mov	r22, r28
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	86 ee       	ldi	r24, 0xE6	; 230
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	08 de       	rcall	.-1008   	; 0x27a <_ZN14HardwareSerial5writeEi>
     66a:	86 ee       	ldi	r24, 0xE6	; 230
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	5f d4       	rcall	.+2238   	; 0xf2e <_ZN14HardwareSerial5flushEv>
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	0e 94 16 0c 	call	0x182c	; 0x182c <digitalWrite>
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 16 0c 	call	0x182c	; 0x182c <digitalWrite>
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	97 c7       	rjmp	.+3886   	; 0x15be <delay>

00000690 <_Z11printBufferv>:
}
/* 
 *  |0xFF|0xFF|ID|LENGTH|INSTRUCTION|PARAM_1|...|PARAM_N|CHECKSUM
 */
void printBuffer() {
	delay(20);
     690:	64 e1       	ldi	r22, 0x14	; 20
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	92 d7       	rcall	.+3876   	; 0x15be <delay>
	//byte start_1, start_2, servo_id, msg_length, er_byte, chck_sum;
	Serial.print("## Start: ");
     69a:	6f e7       	ldi	r22, 0x7F	; 127
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	89 e4       	ldi	r24, 0x49	; 73
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	43 d6       	rcall	.+3206   	; 0x132a <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     6a4:	86 ee       	ldi	r24, 0xE6	; 230
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	5c d3       	rcall	.+1720   	; 0xd62 <_ZN14HardwareSerial9availableEv>
     6aa:	4a e0       	ldi	r20, 0x0A	; 10
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	bc 01       	movw	r22, r24
     6b0:	89 e4       	ldi	r24, 0x49	; 73
     6b2:	93 e0       	ldi	r25, 0x03	; 3
     6b4:	f3 d6       	rcall	.+3558   	; 0x149c <_ZN5Print5printEii>
	Serial.println(" ####################");
     6b6:	6a e8       	ldi	r22, 0x8A	; 138
     6b8:	72 e0       	ldi	r23, 0x02	; 2
     6ba:	89 e4       	ldi	r24, 0x49	; 73
     6bc:	93 e0       	ldi	r25, 0x03	; 3
	while(Serial1.available()){
     6be:	40 d6       	rcall	.+3200   	; 0x1340 <_ZN5Print7printlnEPKc>
     6c0:	86 ee       	ldi	r24, 0xE6	; 230
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	4e d3       	rcall	.+1692   	; 0xd62 <_ZN14HardwareSerial9availableEv>
     6c6:	89 2b       	or	r24, r25
		Serial.print(Serial1.available());
     6c8:	e9 f0       	breq	.+58     	; 0x704 <_Z11printBufferv+0x74>
     6ca:	86 ee       	ldi	r24, 0xE6	; 230
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	49 d3       	rcall	.+1682   	; 0xd62 <_ZN14HardwareSerial9availableEv>
     6d0:	4a e0       	ldi	r20, 0x0A	; 10
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	bc 01       	movw	r22, r24
     6d6:	89 e4       	ldi	r24, 0x49	; 73
     6d8:	93 e0       	ldi	r25, 0x03	; 3
		Serial.print(", ");
     6da:	e0 d6       	rcall	.+3520   	; 0x149c <_ZN5Print5printEii>
     6dc:	60 ea       	ldi	r22, 0xA0	; 160
     6de:	72 e0       	ldi	r23, 0x02	; 2
     6e0:	89 e4       	ldi	r24, 0x49	; 73
     6e2:	93 e0       	ldi	r25, 0x03	; 3
		Serial.println(Serial1.read());
     6e4:	22 d6       	rcall	.+3140   	; 0x132a <_ZN5Print5printEPKc>
     6e6:	86 ee       	ldi	r24, 0xE6	; 230
     6e8:	93 e0       	ldi	r25, 0x03	; 3
     6ea:	55 d3       	rcall	.+1706   	; 0xd96 <_ZN14HardwareSerial4readEv>
     6ec:	4a e0       	ldi	r20, 0x0A	; 10
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	bc 01       	movw	r22, r24
     6f2:	89 e4       	ldi	r24, 0x49	; 73
     6f4:	93 e0       	ldi	r25, 0x03	; 3
		delay(1);
     6f6:	d8 d6       	rcall	.+3504   	; 0x14a8 <_ZN5Print7printlnEii>
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
	delay(20);
	//byte start_1, start_2, servo_id, msg_length, er_byte, chck_sum;
	Serial.print("## Start: ");
	Serial.print(Serial1.available());
	Serial.println(" ####################");
	while(Serial1.available()){
     700:	5e d7       	rcall	.+3772   	; 0x15be <delay>
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	Serial.println("## End #####################");
     702:	de cf       	rjmp	.-68     	; 0x6c0 <_Z11printBufferv+0x30>
     704:	63 ea       	ldi	r22, 0xA3	; 163
     706:	72 e0       	ldi	r23, 0x02	; 2
     708:	89 e4       	ldi	r24, 0x49	; 73
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	19 c6       	rjmp	.+3122   	; 0x1340 <_ZN5Print7printlnEPKc>

0000070e <setup>:
		LED_ON;
	}
}

//========================SETUP============================
void setup() {
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	1f 92       	push	r1
     714:	1f 92       	push	r1
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
	//setupSwitch();
	//sei(); // Enable interrupts
	
		LED_OFF;
     71a:	2f 98       	cbi	0x05, 7	; 5
		DDRB = 0xFF;
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1<<DDB0) | (1<<DDB1)); // clear DDB0 and DDB4 bits in DDRB. PIN B0 and B4 is set to INPUT (BUTTON)
     720:	84 b1       	in	r24, 0x04	; 4
     722:	8c 7f       	andi	r24, 0xFC	; 252
     724:	84 b9       	out	0x04, r24	; 4
		PCMSK0 |= (1<<PCINT0) | (1<<PCINT1);  // set Pin Change Mask 0 bit PCINT0.
     726:	eb e6       	ldi	r30, 0x6B	; 107
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	83 60       	ori	r24, 0x03	; 3
     72e:	80 83       	st	Z, r24
		PCICR  |= (1<<PCIE0);
     730:	e8 e6       	ldi	r30, 0x68	; 104
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	81 60       	ori	r24, 0x01	; 1
     738:	80 83       	st	Z, r24
		sei(); // enable global interrupts
     73a:	78 94       	sei
		//}
	
	
	
	
	lcd.init();                      // initialize the lcd
     73c:	8e e2       	ldi	r24, 0x2E	; 46
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN17LiquidCrystal_I2C4initEv>
	lcd.init();
     744:	8e e2       	ldi	r24, 0x2E	; 46
     746:	93 e0       	ldi	r25, 0x03	; 3
     748:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     74c:	8e e2       	ldi	r24, 0x2E	; 46
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     754:	8e e2       	ldi	r24, 0x2E	; 46
     756:	93 e0       	ldi	r25, 0x03	; 3
     758:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     76c:	26 e0       	ldi	r18, 0x06	; 6
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	51 ee       	ldi	r21, 0xE1	; 225
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	89 e4       	ldi	r24, 0x49	; 73
     778:	93 e0       	ldi	r25, 0x03	; 3
     77a:	fa d3       	rcall	.+2036   	; 0xf70 <_ZN14HardwareSerial5beginEmh>
     77c:	26 e0       	ldi	r18, 0x06	; 6
     77e:	47 e3       	ldi	r20, 0x37	; 55
     780:	5f ed       	ldi	r21, 0xDF	; 223
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	86 ee       	ldi	r24, 0xE6	; 230
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	f2 d3       	rcall	.+2020   	; 0xf70 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
     78c:	86 ee       	ldi	r24, 0xE6	; 230
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	ce d3       	rcall	.+1948   	; 0xf2e <_ZN14HardwareSerial5flushEv>

	//setEndless(id, OFF);

	moveSpeed(id, angle, 10);
     792:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__data_start>
     796:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__data_start+0x1>
     79a:	4a e0       	ldi	r20, 0x0A	; 10
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     7a2:	95 de       	rcall	.-726    	; 0x4ce <_Z9moveSpeedhii>
	lcd.setCursor(0,0);
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	8e e2       	ldi	r24, 0x2E	; 46
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("sID:");
     7b0:	60 ec       	ldi	r22, 0xC0	; 192
     7b2:	72 e0       	ldi	r23, 0x02	; 2
     7b4:	8e e2       	ldi	r24, 0x2E	; 46
     7b6:	93 e0       	ldi	r25, 0x03	; 3
     7b8:	b8 d5       	rcall	.+2928   	; 0x132a <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	8e e2       	ldi	r24, 0x2E	; 46
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("deg:");
     7c6:	65 ec       	ldi	r22, 0xC5	; 197
     7c8:	72 e0       	ldi	r23, 0x02	; 2
     7ca:	8e e2       	ldi	r24, 0x2E	; 46
     7cc:	93 e0       	ldi	r25, 0x03	; 3
     7ce:	ad d5       	rcall	.+2906   	; 0x132a <_ZN5Print5printEPKc>
	lcd.setCursor(0,2);
     7d0:	42 e0       	ldi	r20, 0x02	; 2
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	8e e2       	ldi	r24, 0x2E	; 46
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("rpm:");
     7dc:	6a ec       	ldi	r22, 0xCA	; 202
     7de:	72 e0       	ldi	r23, 0x02	; 2
     7e0:	8e e2       	ldi	r24, 0x2E	; 46
     7e2:	93 e0       	ldi	r25, 0x03	; 3
     7e4:	a2 d5       	rcall	.+2884   	; 0x132a <_ZN5Print5printEPKc>
	lcd.setCursor(0,3);
     7e6:	43 e0       	ldi	r20, 0x03	; 3
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	8e e2       	ldi	r24, 0x2E	; 46
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("ld%:");
     7f2:	6f ec       	ldi	r22, 0xCF	; 207
     7f4:	72 e0       	ldi	r23, 0x02	; 2
     7f6:	8e e2       	ldi	r24, 0x2E	; 46
     7f8:	93 e0       	ldi	r25, 0x03	; 3
     7fa:	97 d5       	rcall	.+2862   	; 0x132a <_ZN5Print5printEPKc>
	byte pcktPars[2] = {ARM_ID5_ANGLE_MAX, ARM_ID5_ANGLE_MAX>>8};
     7fc:	84 ea       	ldi	r24, 0xA4	; 164
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	86 e0       	ldi	r24, 0x06	; 6
	writeServo(id, MX_CCW_ANGLE_LIMIT_L, pcktPars, 2);
     802:	8a 83       	std	Y+2, r24	; 0x02
     804:	22 e0       	ldi	r18, 0x02	; 2
     806:	ae 01       	movw	r20, r28
     808:	4f 5f       	subi	r20, 0xFF	; 255
     80a:	5f 4f       	sbci	r21, 0xFF	; 255
     80c:	68 e0       	ldi	r22, 0x08	; 8
     80e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
	readServo(id, 0, 16);
     812:	f7 dd       	rcall	.-1042   	; 0x402 <_Z10writeServohhPhh>
     814:	40 e1       	ldi	r20, 0x10	; 16
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
	printBuffer();
     81c:	ea de       	rcall	.-556    	; 0x5f2 <_Z9readServohhh>
	//setID(3);
	//reset();
	delay(2);
     81e:	38 df       	rcall	.-400    	; 0x690 <_Z11printBufferv>
     820:	62 e0       	ldi	r22, 0x02	; 2
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	ca d6       	rcall	.+3476   	; 0x15be <delay>
	//turn(id,LEFT,50);
}
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <_Z12printDataLCDv>:
	char buffer[4];
	sprintf(buffer, "%4d", value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
void printDataLCD() {
     834:	8f 92       	push	r8
     836:	9f 92       	push	r9
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
	delay(10);
     84c:	6a e0       	ldi	r22, 0x0A	; 10
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	b4 d6       	rcall	.+3432   	; 0x15be <delay>
	int punch;
	int current;
	bool speedDirection, loadDirection;
	byte i = 0;
	
	if (Serial1.available() > 0){
     856:	86 ee       	ldi	r24, 0xE6	; 230
     858:	93 e0       	ldi	r25, 0x03	; 3
     85a:	83 d2       	rcall	.+1286   	; 0xd62 <_ZN14HardwareSerial9availableEv>
     85c:	18 16       	cp	r1, r24
     85e:	19 06       	cpc	r1, r25
     860:	0c f0       	brlt	.+2      	; 0x864 <_Z12printDataLCDv+0x30>
     862:	4a c1       	rjmp	.+660    	; 0xaf8 <_Z12printDataLCDv+0x2c4>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     864:	86 ee       	ldi	r24, 0xE6	; 230
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	96 d2       	rcall	.+1324   	; 0xd96 <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     86a:	8f 3f       	cpi	r24, 0xFF	; 255
     86c:	91 05       	cpc	r25, r1
     86e:	09 f0       	breq	.+2      	; 0x872 <_Z12printDataLCDv+0x3e>
     870:	43 c1       	rjmp	.+646    	; 0xaf8 <_Z12printDataLCDv+0x2c4>
     872:	86 ee       	ldi	r24, 0xE6	; 230
     874:	93 e0       	ldi	r25, 0x03	; 3
     876:	8f d2       	rcall	.+1310   	; 0xd96 <_ZN14HardwareSerial4readEv>
     878:	8f 3f       	cpi	r24, 0xFF	; 255
     87a:	91 05       	cpc	r25, r1
     87c:	09 f0       	breq	.+2      	; 0x880 <_Z12printDataLCDv+0x4c>
			servoID = Serial1.read(); // servo ID
     87e:	3c c1       	rjmp	.+632    	; 0xaf8 <_Z12printDataLCDv+0x2c4>
     880:	86 ee       	ldi	r24, 0xE6	; 230
     882:	93 e0       	ldi	r25, 0x03	; 3
     884:	88 d2       	rcall	.+1296   	; 0xd96 <_ZN14HardwareSerial4readEv>
			msgLength = Serial1.read(); // msg Length
     886:	6c 01       	movw	r12, r24
     888:	86 ee       	ldi	r24, 0xE6	; 230
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	84 d2       	rcall	.+1288   	; 0xd96 <_ZN14HardwareSerial4readEv>
			error_byte = Serial1.read();
     88e:	d8 2f       	mov	r29, r24
     890:	86 ee       	ldi	r24, 0xE6	; 230
     892:	93 e0       	ldi	r25, 0x03	; 3
     894:	80 d2       	rcall	.+1280   	; 0xd96 <_ZN14HardwareSerial4readEv>
     896:	c8 2f       	mov	r28, r24
			error_byte_old = error_byte ? error_byte : error_byte_old;
     898:	81 11       	cpse	r24, r1
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <_Z12printDataLCDv+0x6e>
     89c:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <error_byte_old>
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <_Z12printDataLCDv+0x70>
     8a2:	8c 2f       	mov	r24, r28
     8a4:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <error_byte_old>
			
			lcd.setCursor(7,0);
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	67 e0       	ldi	r22, 0x07	; 7
     8ac:	8e e2       	ldi	r24, 0x2E	; 46
     8ae:	93 e0       	ldi	r25, 0x03	; 3
     8b0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     8b4:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <error_counter>
     8b8:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <error_counter+0x1>
			if (error_byte || error_counter) {	
     8bc:	c1 11       	cpse	r28, r1
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <_Z12printDataLCDv+0x90>
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	d1 f0       	breq	.+52     	; 0x8f8 <_Z12printDataLCDv+0xc4>
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     8c4:	8b 30       	cpi	r24, 0x0B	; 11
     8c6:	91 05       	cpc	r25, r1
     8c8:	14 f4       	brge	.+4      	; 0x8ce <_Z12printDataLCDv+0x9a>
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <_Z12printDataLCDv+0x9e>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <error_counter+0x1>
     8d6:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <error_counter>
				lcd.print("ERROR:");
     8da:	6c ed       	ldi	r22, 0xDC	; 220
     8dc:	72 e0       	ldi	r23, 0x02	; 2
     8de:	8e e2       	ldi	r24, 0x2E	; 46
     8e0:	93 e0       	ldi	r25, 0x03	; 3
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
     8e2:	23 d5       	rcall	.+2630   	; 0x132a <_ZN5Print5printEPKc>
     8e4:	4a e0       	ldi	r20, 0x0A	; 10
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <error_byte_old>
     8ec:	8e e2       	ldi	r24, 0x2E	; 46
     8ee:	93 e0       	ldi	r25, 0x03	; 3
				lcd.print("   ");
     8f0:	8a d5       	rcall	.+2836   	; 0x1406 <_ZN5Print5printEhi>
     8f2:	6a ee       	ldi	r22, 0xEA	; 234
     8f4:	72 e0       	ldi	r23, 0x02	; 2
			} else {
				lcd.print("          ");
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <_Z12printDataLCDv+0xc8>
     8f8:	63 ee       	ldi	r22, 0xE3	; 227
     8fa:	72 e0       	ldi	r23, 0x02	; 2
     8fc:	8e e2       	ldi	r24, 0x2E	; 46
     8fe:	93 e0       	ldi	r25, 0x03	; 3
			}
			if (msgLength > 2) {
     900:	14 d5       	rcall	.+2600   	; 0x132a <_ZN5Print5printEPKc>
     902:	d3 30       	cpi	r29, 0x03	; 3
     904:	08 f4       	brcc	.+2      	; 0x908 <_Z12printDataLCDv+0xd4>
				position = Serial1.read();
     906:	c9 c0       	rjmp	.+402    	; 0xa9a <_Z12printDataLCDv+0x266>
     908:	86 ee       	ldi	r24, 0xE6	; 230
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	44 d2       	rcall	.+1160   	; 0xd96 <_ZN14HardwareSerial4readEv>
     90e:	ec 01       	movw	r28, r24
				position = (Serial1.read() * 255) + position;
     910:	86 ee       	ldi	r24, 0xE6	; 230
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	40 d2       	rcall	.+1152   	; 0xd96 <_ZN14HardwareSerial4readEv>
     916:	2f ef       	ldi	r18, 0xFF	; 255
     918:	ac 01       	movw	r20, r24
     91a:	24 9f       	mul	r18, r20
     91c:	c0 01       	movw	r24, r0
     91e:	25 9f       	mul	r18, r21
     920:	90 0d       	add	r25, r0
     922:	11 24       	eor	r1, r1
     924:	4c 01       	movw	r8, r24
     926:	8c 0e       	add	r8, r28
     928:	9d 1e       	adc	r9, r29
     92a:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <position_old>
				rotations = position_old > position ? rotations + 1 : rotations;
     92e:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <position_old+0x1>
     932:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <rotations>
     936:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <rotations+0x1>
     93a:	82 16       	cp	r8, r18
     93c:	93 06       	cpc	r9, r19
     93e:	0c f4       	brge	.+2      	; 0x942 <_Z12printDataLCDv+0x10e>
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <rotations+0x1>
     946:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <rotations>
				position_old = position;
     94a:	90 92 44 03 	sts	0x0344, r9	; 0x800344 <position_old+0x1>
     94e:	80 92 43 03 	sts	0x0343, r8	; 0x800343 <position_old>
				
				//Serial.println(position);
				speed = Serial1.read();
     952:	86 ee       	ldi	r24, 0xE6	; 230
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	1f d2       	rcall	.+1086   	; 0xd96 <_ZN14HardwareSerial4readEv>
     958:	ec 01       	movw	r28, r24
				speed = (Serial1.read() * 255) + speed;
     95a:	86 ee       	ldi	r24, 0xE6	; 230
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	1b d2       	rcall	.+1078   	; 0xd96 <_ZN14HardwareSerial4readEv>
     960:	1f ef       	ldi	r17, 0xFF	; 255
     962:	9c 01       	movw	r18, r24
     964:	12 9f       	mul	r17, r18
     966:	c0 01       	movw	r24, r0
     968:	13 9f       	mul	r17, r19
     96a:	90 0d       	add	r25, r0
     96c:	11 24       	eor	r1, r1
     96e:	7c 01       	movw	r14, r24
     970:	ec 0e       	add	r14, r28
				//Serial.println(speed);
				load = Serial1.read();
     972:	fd 1e       	adc	r15, r29
     974:	86 ee       	ldi	r24, 0xE6	; 230
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e d2       	rcall	.+1052   	; 0xd96 <_ZN14HardwareSerial4readEv>
				load = (Serial1.read() * 255) + load;
     97a:	ec 01       	movw	r28, r24
     97c:	86 ee       	ldi	r24, 0xE6	; 230
     97e:	93 e0       	ldi	r25, 0x03	; 3
     980:	0a d2       	rcall	.+1044   	; 0xd96 <_ZN14HardwareSerial4readEv>
     982:	ac 01       	movw	r20, r24
     984:	14 9f       	mul	r17, r20
     986:	c0 01       	movw	r24, r0
     988:	15 9f       	mul	r17, r21
     98a:	90 0d       	add	r25, r0
				voltage = Serial1.read();
     98c:	11 24       	eor	r1, r1
     98e:	c8 0f       	add	r28, r24
     990:	d9 1f       	adc	r29, r25
				temperature = Serial1.read();
     992:	86 ee       	ldi	r24, 0xE6	; 230
     994:	93 e0       	ldi	r25, 0x03	; 3
     996:	ff d1       	rcall	.+1022   	; 0xd96 <_ZN14HardwareSerial4readEv>
				registered = Serial1.read();
     998:	86 ee       	ldi	r24, 0xE6	; 230
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	fc d1       	rcall	.+1016   	; 0xd96 <_ZN14HardwareSerial4readEv>
				moving = Serial1.read();
     99e:	86 ee       	ldi	r24, 0xE6	; 230
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	f9 d1       	rcall	.+1010   	; 0xd96 <_ZN14HardwareSerial4readEv>
     9a4:	86 ee       	ldi	r24, 0xE6	; 230
				lock = Serial1.read();
     9a6:	93 e0       	ldi	r25, 0x03	; 3
     9a8:	f6 d1       	rcall	.+1004   	; 0xd96 <_ZN14HardwareSerial4readEv>
     9aa:	86 ee       	ldi	r24, 0xE6	; 230
     9ac:	93 e0       	ldi	r25, 0x03	; 3
				punch = Serial1.read();
     9ae:	f3 d1       	rcall	.+998    	; 0xd96 <_ZN14HardwareSerial4readEv>
     9b0:	86 ee       	ldi	r24, 0xE6	; 230
     9b2:	93 e0       	ldi	r25, 0x03	; 3
     9b4:	f0 d1       	rcall	.+992    	; 0xd96 <_ZN14HardwareSerial4readEv>
				punch = (Serial1.read() * 255) + punch;
     9b6:	86 ee       	ldi	r24, 0xE6	; 230
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	ed d1       	rcall	.+986    	; 0xd96 <_ZN14HardwareSerial4readEv>
     9bc:	86 ee       	ldi	r24, 0xE6	; 230
				current = Serial1.read();
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	ea d1       	rcall	.+980    	; 0xd96 <_ZN14HardwareSerial4readEv>
     9c2:	5c 01       	movw	r10, r24
     9c4:	86 ee       	ldi	r24, 0xE6	; 230
     9c6:	93 e0       	ldi	r25, 0x03	; 3
				current = (Serial1.read() * 255) + current;
     9c8:	e6 d1       	rcall	.+972    	; 0xd96 <_ZN14HardwareSerial4readEv>
     9ca:	9c 01       	movw	r18, r24
     9cc:	12 9f       	mul	r17, r18
     9ce:	c0 01       	movw	r24, r0
     9d0:	13 9f       	mul	r17, r19
     9d2:	90 0d       	add	r25, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	8c 01       	movw	r16, r24
     9d8:	0a 0d       	add	r16, r10
     9da:	1b 1d       	adc	r17, r11
     9dc:	e1 14       	cp	r14, r1
     9de:	34 e0       	ldi	r19, 0x04	; 4
				//Serial.println(load);
				if (speed > 0x3FF) {
     9e0:	f3 06       	cpc	r15, r19
     9e2:	2c f0       	brlt	.+10     	; 0x9ee <_Z12printDataLCDv+0x1ba>
     9e4:	44 e0       	ldi	r20, 0x04	; 4
					speedDirection = CW;
					speed = speed - 0x400;
     9e6:	f4 1a       	sub	r15, r20
     9e8:	aa 24       	eor	r10, r10
				punch = (Serial1.read() * 255) + punch;
				current = Serial1.read();
				current = (Serial1.read() * 255) + current;
				//Serial.println(load);
				if (speed > 0x3FF) {
					speedDirection = CW;
     9ea:	a3 94       	inc	r10
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <_Z12printDataLCDv+0x1bc>
     9ee:	a1 2c       	mov	r10, r1
					speed = speed - 0x400;
					} else {
					speedDirection = CCW;
				}
				if (load > 0x3FF) {
     9f0:	c1 15       	cp	r28, r1
     9f2:	54 e0       	ldi	r21, 0x04	; 4
     9f4:	d5 07       	cpc	r29, r21
     9f6:	24 f0       	brlt	.+8      	; 0xa00 <_Z12printDataLCDv+0x1cc>
					loadDirection = CW;
     9f8:	d4 50       	subi	r29, 0x04	; 4
     9fa:	bb 24       	eor	r11, r11
     9fc:	b3 94       	inc	r11
					load = load - 0x400;
					} else {
					loadDirection = CCW;
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <_Z12printDataLCDv+0x1ce>

				//Serial.println("================");
				//lcd.clear();
				//char buffer[16];
				//sprintf(buffer, "Servo ID: %d", servoID);
				printLCD1(LCD_COL1, 0, servoID);
     a00:	b1 2c       	mov	r11, r1
     a02:	a6 01       	movw	r20, r12
     a04:	55 27       	eor	r21, r21
     a06:	60 e0       	ldi	r22, 0x00	; 0
				printLCD4(LCD_COL1, 1, position);
     a08:	84 e0       	ldi	r24, 0x04	; 4
     a0a:	3e dc       	rcall	.-1924   	; 0x288 <_Z9printLCD1hhi>
     a0c:	a4 01       	movw	r20, r8
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	84 e0       	ldi	r24, 0x04	; 4
				printLCD4(LCD_COL2, 1, currPos);
     a12:	9d dc       	rcall	.-1734   	; 0x34e <_Z9printLCD4hhi>
     a14:	40 91 3f 03 	lds	r20, 0x033F	; 0x80033f <currPos>
     a18:	50 91 40 03 	lds	r21, 0x0340	; 0x800340 <currPos+0x1>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	8a e0       	ldi	r24, 0x0A	; 10
				// 			lcd.setCursor(LCD_COL2 ,1);
				// 			lcd.print((int)(currPos));
				//lcd.setCursor(10,1);
				//lcd.print(rotations);
				printLCD3(LCD_COL1, 2, speed * MX_PRESENT_SPEED_RPM);
     a20:	96 dc       	rcall	.-1748   	; 0x34e <_Z9printLCD4hhi>
     a22:	b7 01       	movw	r22, r14
     a24:	ff 0c       	add	r15, r15
     a26:	88 0b       	sbc	r24, r24
     a28:	99 0b       	sbc	r25, r25
     a2a:	ac d0       	rcall	.+344    	; 0xb84 <__floatsisf>
     a2c:	2e ea       	ldi	r18, 0xAE	; 174
     a2e:	37 e4       	ldi	r19, 0x47	; 71
     a30:	41 ee       	ldi	r20, 0xE1	; 225
     a32:	5d e3       	ldi	r21, 0x3D	; 61
     a34:	0b d1       	rcall	.+534    	; 0xc4c <__mulsf3>
     a36:	73 d0       	rcall	.+230    	; 0xb1e <__fixsfsi>
     a38:	ab 01       	movw	r20, r22
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	84 e0       	ldi	r24, 0x04	; 4
				lcd.print(speedDirection ? "CW " : "CCW");
     a3e:	55 dc       	rcall	.-1878   	; 0x2ea <_Z9printLCD3hhi>
     a40:	a1 10       	cpse	r10, r1
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <_Z12printDataLCDv+0x216>
     a44:	68 ed       	ldi	r22, 0xD8	; 216
     a46:	72 e0       	ldi	r23, 0x02	; 2
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <_Z12printDataLCDv+0x21a>
     a4a:	64 ed       	ldi	r22, 0xD4	; 212
     a4c:	72 e0       	ldi	r23, 0x02	; 2
     a4e:	8e e2       	ldi	r24, 0x2E	; 46
     a50:	93 e0       	ldi	r25, 0x03	; 3
				printLCD3(LCD_COL1, 3, load * MX_PRESENT_LOAD_PERCENT);
     a52:	6b d4       	rcall	.+2262   	; 0x132a <_ZN5Print5printEPKc>
     a54:	be 01       	movw	r22, r28
     a56:	dd 0f       	add	r29, r29
     a58:	88 0b       	sbc	r24, r24
     a5a:	99 0b       	sbc	r25, r25
     a5c:	93 d0       	rcall	.+294    	; 0xb84 <__floatsisf>
     a5e:	2e e5       	ldi	r18, 0x5E	; 94
     a60:	3b e4       	ldi	r19, 0x4B	; 75
     a62:	48 ec       	ldi	r20, 0xC8	; 200
     a64:	5d e3       	ldi	r21, 0x3D	; 61
     a66:	f2 d0       	rcall	.+484    	; 0xc4c <__mulsf3>
     a68:	5a d0       	rcall	.+180    	; 0xb1e <__fixsfsi>
     a6a:	ab 01       	movw	r20, r22
     a6c:	63 e0       	ldi	r22, 0x03	; 3
     a6e:	84 e0       	ldi	r24, 0x04	; 4
     a70:	3c dc       	rcall	.-1928   	; 0x2ea <_Z9printLCD3hhi>
				lcd.print(loadDirection ? "CW " : "CCW");
     a72:	b1 10       	cpse	r11, r1
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <_Z12printDataLCDv+0x248>
     a76:	68 ed       	ldi	r22, 0xD8	; 216
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <_Z12printDataLCDv+0x24c>
     a7c:	64 ed       	ldi	r22, 0xD4	; 212
     a7e:	72 e0       	ldi	r23, 0x02	; 2
     a80:	8e e2       	ldi	r24, 0x2E	; 46
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	52 d4       	rcall	.+2212   	; 0x132a <_ZN5Print5printEPKc>
     a86:	18 50       	subi	r17, 0x08	; 8
				printLCD3(LCD_COL2, 3, (45*(current-2048)));
     a88:	8d e2       	ldi	r24, 0x2D	; 45
     a8a:	80 9f       	mul	r24, r16
     a8c:	a0 01       	movw	r20, r0
     a8e:	81 9f       	mul	r24, r17
     a90:	50 0d       	add	r21, r0
     a92:	11 24       	eor	r1, r1
     a94:	63 e0       	ldi	r22, 0x03	; 3
     a96:	8a e0       	ldi	r24, 0x0A	; 10
     a98:	28 dc       	rcall	.-1968   	; 0x2ea <_Z9printLCD3hhi>
     a9a:	86 ee       	ldi	r24, 0xE6	; 230
     a9c:	93 e0       	ldi	r25, 0x03	; 3
			}
			while(Serial1.available() > 0) {
     a9e:	61 d1       	rcall	.+706    	; 0xd62 <_ZN14HardwareSerial9availableEv>
     aa0:	18 16       	cp	r1, r24
     aa2:	19 06       	cpc	r1, r25
     aa4:	24 f4       	brge	.+8      	; 0xaae <_Z12printDataLCDv+0x27a>
     aa6:	86 ee       	ldi	r24, 0xE6	; 230
     aa8:	93 e0       	ldi	r25, 0x03	; 3
     aaa:	75 d1       	rcall	.+746    	; 0xd96 <_ZN14HardwareSerial4readEv>
				//Serial.println(Serial1.read());
				Serial1.read();
     aac:	f6 cf       	rjmp	.-20     	; 0xa9a <_Z12printDataLCDv+0x266>
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
			}
			
			delay(1);
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	83 d5       	rcall	.+2822   	; 0x15be <delay>
     ab8:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <cycle_counter>
     abc:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <cycle_counter+0x1>
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
     ac0:	40 31       	cpi	r20, 0x10	; 16
     ac2:	87 e2       	ldi	r24, 0x27	; 39
     ac4:	58 07       	cpc	r21, r24
     ac6:	1c f4       	brge	.+6      	; 0xace <_Z12printDataLCDv+0x29a>
     ac8:	4f 5f       	subi	r20, 0xFF	; 255
     aca:	5f 4f       	sbci	r21, 0xFF	; 255
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <_Z12printDataLCDv+0x29e>
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	50 93 3b 03 	sts	0x033B, r21	; 0x80033b <cycle_counter+0x1>
     ad6:	40 93 3a 03 	sts	0x033A, r20	; 0x80033a <cycle_counter>
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	80 e1       	ldi	r24, 0x10	; 16
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
			printLCD4(16, 0, cycle_counter);
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
		}
	}
}
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	9f 90       	pop	r9
     af4:	8f 90       	pop	r8
     af6:	2b cc       	rjmp	.-1962   	; 0x34e <_Z9printLCD4hhi>
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
				Serial1.read();
			}
			
			delay(1);
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
			printLCD4(16, 0, cycle_counter);
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
		}
	}
}
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	bf 90       	pop	r11
     b0a:	af 90       	pop	r10
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	08 95       	ret

00000b12 <loop>:
     b12:	42 e2       	ldi	r20, 0x22	; 34
     b14:	64 e2       	ldi	r22, 0x24	; 36
     b16:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     b1a:	6b dd       	rcall	.-1322   	; 0x5f2 <_Z9readServohhh>

	//  x =readLoad(3);
	 
	//delay(2);
	readServo(id, 0x24, 34);
	printDataLCD();
     b1c:	8b ce       	rjmp	.-746    	; 0x834 <_Z12printDataLCDv>

00000b1e <__fixsfsi>:
     b1e:	04 d0       	rcall	.+8      	; 0xb28 <__fixunssfsi>
     b20:	68 94       	set
     b22:	b1 11       	cpse	r27, r1
     b24:	8d c0       	rjmp	.+282    	; 0xc40 <__fp_szero>
     b26:	08 95       	ret

00000b28 <__fixunssfsi>:
     b28:	70 d0       	rcall	.+224    	; 0xc0a <__fp_splitA>
     b2a:	88 f0       	brcs	.+34     	; 0xb4e <__fixunssfsi+0x26>
     b2c:	9f 57       	subi	r25, 0x7F	; 127
     b2e:	90 f0       	brcs	.+36     	; 0xb54 <__fixunssfsi+0x2c>
     b30:	b9 2f       	mov	r27, r25
     b32:	99 27       	eor	r25, r25
     b34:	b7 51       	subi	r27, 0x17	; 23
     b36:	a0 f0       	brcs	.+40     	; 0xb60 <__fixunssfsi+0x38>
     b38:	d1 f0       	breq	.+52     	; 0xb6e <__fixunssfsi+0x46>
     b3a:	66 0f       	add	r22, r22
     b3c:	77 1f       	adc	r23, r23
     b3e:	88 1f       	adc	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	1a f0       	brmi	.+6      	; 0xb4a <__fixunssfsi+0x22>
     b44:	ba 95       	dec	r27
     b46:	c9 f7       	brne	.-14     	; 0xb3a <__fixunssfsi+0x12>
     b48:	12 c0       	rjmp	.+36     	; 0xb6e <__fixunssfsi+0x46>
     b4a:	b1 30       	cpi	r27, 0x01	; 1
     b4c:	81 f0       	breq	.+32     	; 0xb6e <__fixunssfsi+0x46>
     b4e:	77 d0       	rcall	.+238    	; 0xc3e <__fp_zero>
     b50:	b1 e0       	ldi	r27, 0x01	; 1
     b52:	08 95       	ret
     b54:	74 c0       	rjmp	.+232    	; 0xc3e <__fp_zero>
     b56:	67 2f       	mov	r22, r23
     b58:	78 2f       	mov	r23, r24
     b5a:	88 27       	eor	r24, r24
     b5c:	b8 5f       	subi	r27, 0xF8	; 248
     b5e:	39 f0       	breq	.+14     	; 0xb6e <__fixunssfsi+0x46>
     b60:	b9 3f       	cpi	r27, 0xF9	; 249
     b62:	cc f3       	brlt	.-14     	; 0xb56 <__fixunssfsi+0x2e>
     b64:	86 95       	lsr	r24
     b66:	77 95       	ror	r23
     b68:	67 95       	ror	r22
     b6a:	b3 95       	inc	r27
     b6c:	d9 f7       	brne	.-10     	; 0xb64 <__fixunssfsi+0x3c>
     b6e:	3e f4       	brtc	.+14     	; 0xb7e <__fixunssfsi+0x56>
     b70:	90 95       	com	r25
     b72:	80 95       	com	r24
     b74:	70 95       	com	r23
     b76:	61 95       	neg	r22
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	8f 4f       	sbci	r24, 0xFF	; 255
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	08 95       	ret

00000b80 <__floatunsisf>:
     b80:	e8 94       	clt
     b82:	09 c0       	rjmp	.+18     	; 0xb96 <__floatsisf+0x12>

00000b84 <__floatsisf>:
     b84:	97 fb       	bst	r25, 7
     b86:	3e f4       	brtc	.+14     	; 0xb96 <__floatsisf+0x12>
     b88:	90 95       	com	r25
     b8a:	80 95       	com	r24
     b8c:	70 95       	com	r23
     b8e:	61 95       	neg	r22
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	8f 4f       	sbci	r24, 0xFF	; 255
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	99 23       	and	r25, r25
     b98:	a9 f0       	breq	.+42     	; 0xbc4 <__floatsisf+0x40>
     b9a:	f9 2f       	mov	r31, r25
     b9c:	96 e9       	ldi	r25, 0x96	; 150
     b9e:	bb 27       	eor	r27, r27
     ba0:	93 95       	inc	r25
     ba2:	f6 95       	lsr	r31
     ba4:	87 95       	ror	r24
     ba6:	77 95       	ror	r23
     ba8:	67 95       	ror	r22
     baa:	b7 95       	ror	r27
     bac:	f1 11       	cpse	r31, r1
     bae:	f8 cf       	rjmp	.-16     	; 0xba0 <__floatsisf+0x1c>
     bb0:	fa f4       	brpl	.+62     	; 0xbf0 <__floatsisf+0x6c>
     bb2:	bb 0f       	add	r27, r27
     bb4:	11 f4       	brne	.+4      	; 0xbba <__floatsisf+0x36>
     bb6:	60 ff       	sbrs	r22, 0
     bb8:	1b c0       	rjmp	.+54     	; 0xbf0 <__floatsisf+0x6c>
     bba:	6f 5f       	subi	r22, 0xFF	; 255
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	8f 4f       	sbci	r24, 0xFF	; 255
     bc0:	9f 4f       	sbci	r25, 0xFF	; 255
     bc2:	16 c0       	rjmp	.+44     	; 0xbf0 <__floatsisf+0x6c>
     bc4:	88 23       	and	r24, r24
     bc6:	11 f0       	breq	.+4      	; 0xbcc <__floatsisf+0x48>
     bc8:	96 e9       	ldi	r25, 0x96	; 150
     bca:	11 c0       	rjmp	.+34     	; 0xbee <__floatsisf+0x6a>
     bcc:	77 23       	and	r23, r23
     bce:	21 f0       	breq	.+8      	; 0xbd8 <__floatsisf+0x54>
     bd0:	9e e8       	ldi	r25, 0x8E	; 142
     bd2:	87 2f       	mov	r24, r23
     bd4:	76 2f       	mov	r23, r22
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <__floatsisf+0x5e>
     bd8:	66 23       	and	r22, r22
     bda:	71 f0       	breq	.+28     	; 0xbf8 <__floatsisf+0x74>
     bdc:	96 e8       	ldi	r25, 0x86	; 134
     bde:	86 2f       	mov	r24, r22
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	2a f0       	brmi	.+10     	; 0xbf0 <__floatsisf+0x6c>
     be6:	9a 95       	dec	r25
     be8:	66 0f       	add	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	88 1f       	adc	r24, r24
     bee:	da f7       	brpl	.-10     	; 0xbe6 <__floatsisf+0x62>
     bf0:	88 0f       	add	r24, r24
     bf2:	96 95       	lsr	r25
     bf4:	87 95       	ror	r24
     bf6:	97 f9       	bld	r25, 7
     bf8:	08 95       	ret

00000bfa <__fp_split3>:
     bfa:	57 fd       	sbrc	r21, 7
     bfc:	90 58       	subi	r25, 0x80	; 128
     bfe:	44 0f       	add	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	59 f0       	breq	.+22     	; 0xc1a <__fp_splitA+0x10>
     c04:	5f 3f       	cpi	r21, 0xFF	; 255
     c06:	71 f0       	breq	.+28     	; 0xc24 <__fp_splitA+0x1a>
     c08:	47 95       	ror	r20

00000c0a <__fp_splitA>:
     c0a:	88 0f       	add	r24, r24
     c0c:	97 fb       	bst	r25, 7
     c0e:	99 1f       	adc	r25, r25
     c10:	61 f0       	breq	.+24     	; 0xc2a <__fp_splitA+0x20>
     c12:	9f 3f       	cpi	r25, 0xFF	; 255
     c14:	79 f0       	breq	.+30     	; 0xc34 <__fp_splitA+0x2a>
     c16:	87 95       	ror	r24
     c18:	08 95       	ret
     c1a:	12 16       	cp	r1, r18
     c1c:	13 06       	cpc	r1, r19
     c1e:	14 06       	cpc	r1, r20
     c20:	55 1f       	adc	r21, r21
     c22:	f2 cf       	rjmp	.-28     	; 0xc08 <__fp_split3+0xe>
     c24:	46 95       	lsr	r20
     c26:	f1 df       	rcall	.-30     	; 0xc0a <__fp_splitA>
     c28:	08 c0       	rjmp	.+16     	; 0xc3a <__fp_splitA+0x30>
     c2a:	16 16       	cp	r1, r22
     c2c:	17 06       	cpc	r1, r23
     c2e:	18 06       	cpc	r1, r24
     c30:	99 1f       	adc	r25, r25
     c32:	f1 cf       	rjmp	.-30     	; 0xc16 <__fp_splitA+0xc>
     c34:	86 95       	lsr	r24
     c36:	71 05       	cpc	r23, r1
     c38:	61 05       	cpc	r22, r1
     c3a:	08 94       	sec
     c3c:	08 95       	ret

00000c3e <__fp_zero>:
     c3e:	e8 94       	clt

00000c40 <__fp_szero>:
     c40:	bb 27       	eor	r27, r27
     c42:	66 27       	eor	r22, r22
     c44:	77 27       	eor	r23, r23
     c46:	cb 01       	movw	r24, r22
     c48:	97 f9       	bld	r25, 7
     c4a:	08 95       	ret

00000c4c <__mulsf3>:
     c4c:	0b d0       	rcall	.+22     	; 0xc64 <__mulsf3x>
     c4e:	78 c0       	rjmp	.+240    	; 0xd40 <__fp_round>
     c50:	69 d0       	rcall	.+210    	; 0xd24 <__fp_pscA>
     c52:	28 f0       	brcs	.+10     	; 0xc5e <__mulsf3+0x12>
     c54:	6e d0       	rcall	.+220    	; 0xd32 <__fp_pscB>
     c56:	18 f0       	brcs	.+6      	; 0xc5e <__mulsf3+0x12>
     c58:	95 23       	and	r25, r21
     c5a:	09 f0       	breq	.+2      	; 0xc5e <__mulsf3+0x12>
     c5c:	5a c0       	rjmp	.+180    	; 0xd12 <__fp_inf>
     c5e:	5f c0       	rjmp	.+190    	; 0xd1e <__fp_nan>
     c60:	11 24       	eor	r1, r1
     c62:	ee cf       	rjmp	.-36     	; 0xc40 <__fp_szero>

00000c64 <__mulsf3x>:
     c64:	ca df       	rcall	.-108    	; 0xbfa <__fp_split3>
     c66:	a0 f3       	brcs	.-24     	; 0xc50 <__mulsf3+0x4>

00000c68 <__mulsf3_pse>:
     c68:	95 9f       	mul	r25, r21
     c6a:	d1 f3       	breq	.-12     	; 0xc60 <__mulsf3+0x14>
     c6c:	95 0f       	add	r25, r21
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	55 1f       	adc	r21, r21
     c72:	62 9f       	mul	r22, r18
     c74:	f0 01       	movw	r30, r0
     c76:	72 9f       	mul	r23, r18
     c78:	bb 27       	eor	r27, r27
     c7a:	f0 0d       	add	r31, r0
     c7c:	b1 1d       	adc	r27, r1
     c7e:	63 9f       	mul	r22, r19
     c80:	aa 27       	eor	r26, r26
     c82:	f0 0d       	add	r31, r0
     c84:	b1 1d       	adc	r27, r1
     c86:	aa 1f       	adc	r26, r26
     c88:	64 9f       	mul	r22, r20
     c8a:	66 27       	eor	r22, r22
     c8c:	b0 0d       	add	r27, r0
     c8e:	a1 1d       	adc	r26, r1
     c90:	66 1f       	adc	r22, r22
     c92:	82 9f       	mul	r24, r18
     c94:	22 27       	eor	r18, r18
     c96:	b0 0d       	add	r27, r0
     c98:	a1 1d       	adc	r26, r1
     c9a:	62 1f       	adc	r22, r18
     c9c:	73 9f       	mul	r23, r19
     c9e:	b0 0d       	add	r27, r0
     ca0:	a1 1d       	adc	r26, r1
     ca2:	62 1f       	adc	r22, r18
     ca4:	83 9f       	mul	r24, r19
     ca6:	a0 0d       	add	r26, r0
     ca8:	61 1d       	adc	r22, r1
     caa:	22 1f       	adc	r18, r18
     cac:	74 9f       	mul	r23, r20
     cae:	33 27       	eor	r19, r19
     cb0:	a0 0d       	add	r26, r0
     cb2:	61 1d       	adc	r22, r1
     cb4:	23 1f       	adc	r18, r19
     cb6:	84 9f       	mul	r24, r20
     cb8:	60 0d       	add	r22, r0
     cba:	21 1d       	adc	r18, r1
     cbc:	82 2f       	mov	r24, r18
     cbe:	76 2f       	mov	r23, r22
     cc0:	6a 2f       	mov	r22, r26
     cc2:	11 24       	eor	r1, r1
     cc4:	9f 57       	subi	r25, 0x7F	; 127
     cc6:	50 40       	sbci	r21, 0x00	; 0
     cc8:	8a f0       	brmi	.+34     	; 0xcec <__mulsf3_pse+0x84>
     cca:	e1 f0       	breq	.+56     	; 0xd04 <__mulsf3_pse+0x9c>
     ccc:	88 23       	and	r24, r24
     cce:	4a f0       	brmi	.+18     	; 0xce2 <__mulsf3_pse+0x7a>
     cd0:	ee 0f       	add	r30, r30
     cd2:	ff 1f       	adc	r31, r31
     cd4:	bb 1f       	adc	r27, r27
     cd6:	66 1f       	adc	r22, r22
     cd8:	77 1f       	adc	r23, r23
     cda:	88 1f       	adc	r24, r24
     cdc:	91 50       	subi	r25, 0x01	; 1
     cde:	50 40       	sbci	r21, 0x00	; 0
     ce0:	a9 f7       	brne	.-22     	; 0xccc <__mulsf3_pse+0x64>
     ce2:	9e 3f       	cpi	r25, 0xFE	; 254
     ce4:	51 05       	cpc	r21, r1
     ce6:	70 f0       	brcs	.+28     	; 0xd04 <__mulsf3_pse+0x9c>
     ce8:	14 c0       	rjmp	.+40     	; 0xd12 <__fp_inf>
     cea:	aa cf       	rjmp	.-172    	; 0xc40 <__fp_szero>
     cec:	5f 3f       	cpi	r21, 0xFF	; 255
     cee:	ec f3       	brlt	.-6      	; 0xcea <__mulsf3_pse+0x82>
     cf0:	98 3e       	cpi	r25, 0xE8	; 232
     cf2:	dc f3       	brlt	.-10     	; 0xcea <__mulsf3_pse+0x82>
     cf4:	86 95       	lsr	r24
     cf6:	77 95       	ror	r23
     cf8:	67 95       	ror	r22
     cfa:	b7 95       	ror	r27
     cfc:	f7 95       	ror	r31
     cfe:	e7 95       	ror	r30
     d00:	9f 5f       	subi	r25, 0xFF	; 255
     d02:	c1 f7       	brne	.-16     	; 0xcf4 <__mulsf3_pse+0x8c>
     d04:	fe 2b       	or	r31, r30
     d06:	88 0f       	add	r24, r24
     d08:	91 1d       	adc	r25, r1
     d0a:	96 95       	lsr	r25
     d0c:	87 95       	ror	r24
     d0e:	97 f9       	bld	r25, 7
     d10:	08 95       	ret

00000d12 <__fp_inf>:
     d12:	97 f9       	bld	r25, 7
     d14:	9f 67       	ori	r25, 0x7F	; 127
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	08 95       	ret

00000d1e <__fp_nan>:
     d1e:	9f ef       	ldi	r25, 0xFF	; 255
     d20:	80 ec       	ldi	r24, 0xC0	; 192
     d22:	08 95       	ret

00000d24 <__fp_pscA>:
     d24:	00 24       	eor	r0, r0
     d26:	0a 94       	dec	r0
     d28:	16 16       	cp	r1, r22
     d2a:	17 06       	cpc	r1, r23
     d2c:	18 06       	cpc	r1, r24
     d2e:	09 06       	cpc	r0, r25
     d30:	08 95       	ret

00000d32 <__fp_pscB>:
     d32:	00 24       	eor	r0, r0
     d34:	0a 94       	dec	r0
     d36:	12 16       	cp	r1, r18
     d38:	13 06       	cpc	r1, r19
     d3a:	14 06       	cpc	r1, r20
     d3c:	05 06       	cpc	r0, r21
     d3e:	08 95       	ret

00000d40 <__fp_round>:
     d40:	09 2e       	mov	r0, r25
     d42:	03 94       	inc	r0
     d44:	00 0c       	add	r0, r0
     d46:	11 f4       	brne	.+4      	; 0xd4c <__fp_round+0xc>
     d48:	88 23       	and	r24, r24
     d4a:	52 f0       	brmi	.+20     	; 0xd60 <__fp_round+0x20>
     d4c:	bb 0f       	add	r27, r27
     d4e:	40 f4       	brcc	.+16     	; 0xd60 <__fp_round+0x20>
     d50:	bf 2b       	or	r27, r31
     d52:	11 f4       	brne	.+4      	; 0xd58 <__fp_round+0x18>
     d54:	60 ff       	sbrs	r22, 0
     d56:	04 c0       	rjmp	.+8      	; 0xd60 <__fp_round+0x20>
     d58:	6f 5f       	subi	r22, 0xFF	; 255
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	8f 4f       	sbci	r24, 0xFF	; 255
     d5e:	9f 4f       	sbci	r25, 0xFF	; 255
     d60:	08 95       	ret

00000d62 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d62:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d64:	91 8d       	ldd	r25, Z+25	; 0x19
     d66:	22 8d       	ldd	r18, Z+26	; 0x1a
     d68:	89 2f       	mov	r24, r25
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	80 5c       	subi	r24, 0xC0	; 192
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	82 1b       	sub	r24, r18
     d72:	91 09       	sbc	r25, r1
}
     d74:	8f 73       	andi	r24, 0x3F	; 63
     d76:	99 27       	eor	r25, r25
     d78:	08 95       	ret

00000d7a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d7a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d7c:	91 8d       	ldd	r25, Z+25	; 0x19
     d7e:	82 8d       	ldd	r24, Z+26	; 0x1a
     d80:	98 17       	cp	r25, r24
     d82:	31 f0       	breq	.+12     	; 0xd90 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d84:	82 8d       	ldd	r24, Z+26	; 0x1a
     d86:	e8 0f       	add	r30, r24
     d88:	f1 1d       	adc	r31, r1
     d8a:	85 8d       	ldd	r24, Z+29	; 0x1d
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d94:	08 95       	ret

00000d96 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d96:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d98:	91 8d       	ldd	r25, Z+25	; 0x19
     d9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     d9c:	98 17       	cp	r25, r24
     d9e:	61 f0       	breq	.+24     	; 0xdb8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     da0:	82 8d       	ldd	r24, Z+26	; 0x1a
     da2:	df 01       	movw	r26, r30
     da4:	a8 0f       	add	r26, r24
     da6:	b1 1d       	adc	r27, r1
     da8:	5d 96       	adiw	r26, 0x1d	; 29
     daa:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     dac:	92 8d       	ldd	r25, Z+26	; 0x1a
     dae:	9f 5f       	subi	r25, 0xFF	; 255
     db0:	9f 73       	andi	r25, 0x3F	; 63
     db2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     dbc:	08 95       	ret

00000dbe <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     dbe:	fc 01       	movw	r30, r24
     dc0:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     dc2:	44 8d       	ldd	r20, Z+28	; 0x1c
     dc4:	25 2f       	mov	r18, r21
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	84 2f       	mov	r24, r20
     dca:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     dcc:	82 1b       	sub	r24, r18
     dce:	93 0b       	sbc	r25, r19
     dd0:	54 17       	cp	r21, r20
     dd2:	10 f0       	brcs	.+4      	; 0xdd8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     dd4:	cf 96       	adiw	r24, 0x3f	; 63
     dd6:	08 95       	ret
  return tail - head - 1;
     dd8:	01 97       	sbiw	r24, 0x01	; 1
}
     dda:	08 95       	ret

00000ddc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     ddc:	80 e8       	ldi	r24, 0x80	; 128
     dde:	98 e0       	ldi	r25, 0x08	; 8
     de0:	89 2b       	or	r24, r25
     de2:	39 f0       	breq	.+14     	; 0xdf2 <_Z14serialEventRunv+0x16>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	89 2b       	or	r24, r25
     dea:	19 f0       	breq	.+6      	; 0xdf2 <_Z14serialEventRunv+0x16>
     dec:	89 d1       	rcall	.+786    	; 0x1100 <_Z17Serial0_availablev>
     dee:	81 11       	cpse	r24, r1
     df0:	24 c0       	rjmp	.+72     	; 0xe3a <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     df2:	85 e1       	ldi	r24, 0x15	; 21
     df4:	99 e0       	ldi	r25, 0x09	; 9
     df6:	89 2b       	or	r24, r25
     df8:	39 f0       	breq	.+14     	; 0xe08 <_Z14serialEventRunv+0x2c>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	89 2b       	or	r24, r25
     e00:	19 f0       	breq	.+6      	; 0xe08 <_Z14serialEventRunv+0x2c>
     e02:	13 d2       	rcall	.+1062   	; 0x122a <_Z17Serial1_availablev>
     e04:	81 11       	cpse	r24, r1
     e06:	1c c0       	rjmp	.+56     	; 0xe40 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	89 2b       	or	r24, r25
     e0e:	41 f0       	breq	.+16     	; 0xe20 <_Z14serialEventRunv+0x44>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	89 2b       	or	r24, r25
     e16:	21 f0       	breq	.+8      	; 0xe20 <_Z14serialEventRunv+0x44>
     e18:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e1c:	81 11       	cpse	r24, r1
     e1e:	13 c0       	rjmp	.+38     	; 0xe46 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	89 2b       	or	r24, r25
     e26:	a1 f0       	breq	.+40     	; 0xe50 <_Z14serialEventRunv+0x74>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	89 2b       	or	r24, r25
     e2e:	81 f0       	breq	.+32     	; 0xe50 <_Z14serialEventRunv+0x74>
     e30:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e34:	81 11       	cpse	r24, r1
     e36:	0a c0       	rjmp	.+20     	; 0xe4c <_Z14serialEventRunv+0x70>
     e38:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e3a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e3e:	d9 cf       	rjmp	.-78     	; 0xdf2 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     e40:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e44:	e1 cf       	rjmp	.-62     	; 0xe08 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     e46:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e4a:	ea cf       	rjmp	.-44     	; 0xe20 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     e4c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     e50:	08 95       	ret

00000e52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     e52:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     e54:	84 8d       	ldd	r24, Z+28	; 0x1c
     e56:	df 01       	movw	r26, r30
     e58:	a8 0f       	add	r26, r24
     e5a:	b1 1d       	adc	r27, r1
     e5c:	a3 5a       	subi	r26, 0xA3	; 163
     e5e:	bf 4f       	sbci	r27, 0xFF	; 255
     e60:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     e62:	84 8d       	ldd	r24, Z+28	; 0x1c
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	8f 73       	andi	r24, 0x3F	; 63
     e6a:	99 27       	eor	r25, r25
     e6c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     e6e:	a6 89       	ldd	r26, Z+22	; 0x16
     e70:	b7 89       	ldd	r27, Z+23	; 0x17
     e72:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     e74:	a0 89       	ldd	r26, Z+16	; 0x10
     e76:	b1 89       	ldd	r27, Z+17	; 0x11
     e78:	8c 91       	ld	r24, X
     e7a:	83 70       	andi	r24, 0x03	; 3
     e7c:	80 64       	ori	r24, 0x40	; 64
     e7e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     e80:	93 8d       	ldd	r25, Z+27	; 0x1b
     e82:	84 8d       	ldd	r24, Z+28	; 0x1c
     e84:	98 13       	cpse	r25, r24
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     e88:	02 88       	ldd	r0, Z+18	; 0x12
     e8a:	f3 89       	ldd	r31, Z+19	; 0x13
     e8c:	e0 2d       	mov	r30, r0
     e8e:	80 81       	ld	r24, Z
     e90:	8f 7d       	andi	r24, 0xDF	; 223
     e92:	80 83       	st	Z, r24
     e94:	08 95       	ret

00000e96 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	ec 01       	movw	r28, r24
  _written = true;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     ea8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     eaa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     eac:	98 13       	cpse	r25, r24
     eae:	05 c0       	rjmp	.+10     	; 0xeba <_ZN14HardwareSerial5writeEh+0x24>
     eb0:	e8 89       	ldd	r30, Y+16	; 0x10
     eb2:	f9 89       	ldd	r31, Y+17	; 0x11
     eb4:	80 81       	ld	r24, Z
     eb6:	85 fd       	sbrc	r24, 5
     eb8:	25 c0       	rjmp	.+74     	; 0xf04 <_ZN14HardwareSerial5writeEh+0x6e>
     eba:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     ebc:	0b 8d       	ldd	r16, Y+27	; 0x1b
     ebe:	10 e0       	ldi	r17, 0x00	; 0
     ec0:	0f 5f       	subi	r16, 0xFF	; 255
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	0f 73       	andi	r16, 0x3F	; 63
     ec6:	11 27       	eor	r17, r17
     ec8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     eca:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ecc:	e8 12       	cpse	r14, r24
     ece:	0b c0       	rjmp	.+22     	; 0xee6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	07 fc       	sbrc	r0, 7
     ed4:	fa cf       	rjmp	.-12     	; 0xeca <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     ed6:	e8 89       	ldd	r30, Y+16	; 0x10
     ed8:	f9 89       	ldd	r31, Y+17	; 0x11
     eda:	80 81       	ld	r24, Z
     edc:	85 ff       	sbrs	r24, 5
     ede:	f5 cf       	rjmp	.-22     	; 0xeca <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     ee0:	ce 01       	movw	r24, r28
     ee2:	b7 df       	rcall	.-146    	; 0xe52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ee4:	f2 cf       	rjmp	.-28     	; 0xeca <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     ee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee8:	fe 01       	movw	r30, r28
     eea:	e8 0f       	add	r30, r24
     eec:	f1 1d       	adc	r31, r1
     eee:	e3 5a       	subi	r30, 0xA3	; 163
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ef4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ef6:	f8 94       	cli
    _tx_buffer_head = i;
     ef8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     efa:	ea 89       	ldd	r30, Y+18	; 0x12
     efc:	fb 89       	ldd	r31, Y+19	; 0x13
     efe:	80 81       	ld	r24, Z
     f00:	80 62       	ori	r24, 0x20	; 32
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     f04:	9f b7       	in	r25, 0x3f	; 63
     f06:	f8 94       	cli
      *_udr = c;
     f08:	ee 89       	ldd	r30, Y+22	; 0x16
     f0a:	ff 89       	ldd	r31, Y+23	; 0x17
     f0c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     f0e:	e8 89       	ldd	r30, Y+16	; 0x10
     f10:	f9 89       	ldd	r31, Y+17	; 0x11
     f12:	80 81       	ld	r24, Z
     f14:	83 70       	andi	r24, 0x03	; 3
     f16:	80 64       	ori	r24, 0x40	; 64
     f18:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f1a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	08 95       	ret

00000f2e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     f34:	88 8d       	ldd	r24, Y+24	; 0x18
     f36:	88 23       	and	r24, r24
     f38:	c1 f0       	breq	.+48     	; 0xf6a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     f3a:	ea 89       	ldd	r30, Y+18	; 0x12
     f3c:	fb 89       	ldd	r31, Y+19	; 0x13
     f3e:	80 81       	ld	r24, Z
     f40:	85 fd       	sbrc	r24, 5
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <_ZN14HardwareSerial5flushEv+0x20>
     f44:	a8 89       	ldd	r26, Y+16	; 0x10
     f46:	b9 89       	ldd	r27, Y+17	; 0x11
     f48:	8c 91       	ld	r24, X
     f4a:	86 fd       	sbrc	r24, 6
     f4c:	0e c0       	rjmp	.+28     	; 0xf6a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	07 fc       	sbrc	r0, 7
     f52:	f5 cf       	rjmp	.-22     	; 0xf3e <_ZN14HardwareSerial5flushEv+0x10>
     f54:	80 81       	ld	r24, Z
     f56:	85 ff       	sbrs	r24, 5
     f58:	f2 cf       	rjmp	.-28     	; 0xf3e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     f5a:	a8 89       	ldd	r26, Y+16	; 0x10
     f5c:	b9 89       	ldd	r27, Y+17	; 0x11
     f5e:	8c 91       	ld	r24, X
     f60:	85 ff       	sbrs	r24, 5
     f62:	ed cf       	rjmp	.-38     	; 0xf3e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     f64:	ce 01       	movw	r24, r28
     f66:	75 df       	rcall	.-278    	; 0xe52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f68:	e8 cf       	rjmp	.-48     	; 0xf3a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
     f80:	6a 01       	movw	r12, r20
     f82:	7b 01       	movw	r14, r22
     f84:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f86:	e8 89       	ldd	r30, Y+16	; 0x10
     f88:	f9 89       	ldd	r31, Y+17	; 0x11
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f8e:	41 15       	cp	r20, r1
     f90:	51 4e       	sbci	r21, 0xE1	; 225
     f92:	61 05       	cpc	r22, r1
     f94:	71 05       	cpc	r23, r1
     f96:	b1 f0       	breq	.+44     	; 0xfc4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	79 e0       	ldi	r23, 0x09	; 9
     f9c:	8d e3       	ldi	r24, 0x3D	; 61
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a7 01       	movw	r20, r14
     fa2:	96 01       	movw	r18, r12
     fa4:	0e 94 16 10 	call	0x202c	; 0x202c <__udivmodsi4>
     fa8:	da 01       	movw	r26, r20
     faa:	c9 01       	movw	r24, r18
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	a1 09       	sbc	r26, r1
     fb0:	b1 09       	sbc	r27, r1
     fb2:	b6 95       	lsr	r27
     fb4:	a7 95       	ror	r26
     fb6:	97 95       	ror	r25
     fb8:	87 95       	ror	r24
     fba:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     fbc:	21 15       	cp	r18, r1
     fbe:	80 e1       	ldi	r24, 0x10	; 16
     fc0:	38 07       	cpc	r19, r24
     fc2:	a8 f0       	brcs	.+42     	; 0xfee <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     fc4:	e8 89       	ldd	r30, Y+16	; 0x10
     fc6:	f9 89       	ldd	r31, Y+17	; 0x11
     fc8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     fca:	60 e8       	ldi	r22, 0x80	; 128
     fcc:	74 e8       	ldi	r23, 0x84	; 132
     fce:	8e e1       	ldi	r24, 0x1E	; 30
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a7 01       	movw	r20, r14
     fd4:	96 01       	movw	r18, r12
     fd6:	0e 94 16 10 	call	0x202c	; 0x202c <__udivmodsi4>
     fda:	da 01       	movw	r26, r20
     fdc:	c9 01       	movw	r24, r18
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	a1 09       	sbc	r26, r1
     fe2:	b1 09       	sbc	r27, r1
     fe4:	b6 95       	lsr	r27
     fe6:	a7 95       	ror	r26
     fe8:	97 95       	ror	r25
     fea:	87 95       	ror	r24
     fec:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     fee:	ec 85       	ldd	r30, Y+12	; 0x0c
     ff0:	fd 85       	ldd	r31, Y+13	; 0x0d
     ff2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     ff4:	ee 85       	ldd	r30, Y+14	; 0x0e
     ff6:	ff 85       	ldd	r31, Y+15	; 0x0f
     ff8:	20 83       	st	Z, r18

  _written = false;
     ffa:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     ffc:	ec 89       	ldd	r30, Y+20	; 0x14
     ffe:	fd 89       	ldd	r31, Y+21	; 0x15
    1000:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1002:	ea 89       	ldd	r30, Y+18	; 0x12
    1004:	fb 89       	ldd	r31, Y+19	; 0x13
    1006:	80 81       	ld	r24, Z
    1008:	80 61       	ori	r24, 0x10	; 16
    100a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    100c:	ea 89       	ldd	r30, Y+18	; 0x12
    100e:	fb 89       	ldd	r31, Y+19	; 0x13
    1010:	80 81       	ld	r24, Z
    1012:	88 60       	ori	r24, 0x08	; 8
    1014:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1016:	ea 89       	ldd	r30, Y+18	; 0x12
    1018:	fb 89       	ldd	r31, Y+19	; 0x13
    101a:	80 81       	ld	r24, Z
    101c:	80 68       	ori	r24, 0x80	; 128
    101e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1020:	ea 89       	ldd	r30, Y+18	; 0x12
    1022:	fb 89       	ldd	r31, Y+19	; 0x13
    1024:	80 81       	ld	r24, Z
    1026:	8f 7d       	andi	r24, 0xDF	; 223
    1028:	80 83       	st	Z, r24
}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	08 95       	ret

0000103a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	08 95       	ret

00001040 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1040:	08 95       	ret

00001042 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	0b b6       	in	r0, 0x3b	; 59
    104e:	0f 92       	push	r0
    1050:	2f 93       	push	r18
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    105a:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <Serial+0x10>
    105e:	f0 91 5a 03 	lds	r31, 0x035A	; 0x80035a <Serial+0x11>
    1062:	80 81       	ld	r24, Z
    1064:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <Serial+0x16>
    1068:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <Serial+0x17>
    106c:	82 fd       	sbrc	r24, 2
    106e:	12 c0       	rjmp	.+36     	; 0x1094 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1070:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1072:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <Serial+0x19>
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    107a:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <Serial+0x1a>
    107e:	82 17       	cp	r24, r18
    1080:	51 f0       	breq	.+20     	; 0x1096 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1082:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <Serial+0x19>
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	e7 5b       	subi	r30, 0xB7	; 183
    108a:	fc 4f       	sbci	r31, 0xFC	; 252
    108c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    108e:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <Serial+0x19>
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1094:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	9f 91       	pop	r25
    109c:	8f 91       	pop	r24
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0b be       	out	0x3b, r0	; 59
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	0b b6       	in	r0, 0x3b	; 59
    10ba:	0f 92       	push	r0
    10bc:	2f 93       	push	r18
    10be:	3f 93       	push	r19
    10c0:	4f 93       	push	r20
    10c2:	5f 93       	push	r21
    10c4:	6f 93       	push	r22
    10c6:	7f 93       	push	r23
    10c8:	8f 93       	push	r24
    10ca:	9f 93       	push	r25
    10cc:	af 93       	push	r26
    10ce:	bf 93       	push	r27
    10d0:	ef 93       	push	r30
    10d2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    10d4:	89 e4       	ldi	r24, 0x49	; 73
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	bc de       	rcall	.-648    	; 0xe52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    10da:	ff 91       	pop	r31
    10dc:	ef 91       	pop	r30
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	7f 91       	pop	r23
    10e8:	6f 91       	pop	r22
    10ea:	5f 91       	pop	r21
    10ec:	4f 91       	pop	r20
    10ee:	3f 91       	pop	r19
    10f0:	2f 91       	pop	r18
    10f2:	0f 90       	pop	r0
    10f4:	0b be       	out	0x3b, r0	; 59
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1100:	89 e4       	ldi	r24, 0x49	; 73
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	2e de       	rcall	.-932    	; 0xd62 <_ZN14HardwareSerial9availableEv>
    1106:	21 e0       	ldi	r18, 0x01	; 1
    1108:	89 2b       	or	r24, r25
    110a:	09 f4       	brne	.+2      	; 0x110e <_Z17Serial0_availablev+0xe>
    110c:	20 e0       	ldi	r18, 0x00	; 0
}
    110e:	82 2f       	mov	r24, r18
    1110:	08 95       	ret

00001112 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1112:	e9 e4       	ldi	r30, 0x49	; 73
    1114:	f3 e0       	ldi	r31, 0x03	; 3
    1116:	13 82       	std	Z+3, r1	; 0x03
    1118:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    111a:	88 ee       	ldi	r24, 0xE8	; 232
    111c:	93 e0       	ldi	r25, 0x03	; 3
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	84 83       	std	Z+4, r24	; 0x04
    1124:	95 83       	std	Z+5, r25	; 0x05
    1126:	a6 83       	std	Z+6, r26	; 0x06
    1128:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    112a:	82 ef       	ldi	r24, 0xF2	; 242
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	91 83       	std	Z+1, r25	; 0x01
    1130:	80 83       	st	Z, r24
    1132:	85 ec       	ldi	r24, 0xC5	; 197
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	95 87       	std	Z+13, r25	; 0x0d
    1138:	84 87       	std	Z+12, r24	; 0x0c
    113a:	84 ec       	ldi	r24, 0xC4	; 196
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	97 87       	std	Z+15, r25	; 0x0f
    1140:	86 87       	std	Z+14, r24	; 0x0e
    1142:	80 ec       	ldi	r24, 0xC0	; 192
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	91 8b       	std	Z+17, r25	; 0x11
    1148:	80 8b       	std	Z+16, r24	; 0x10
    114a:	81 ec       	ldi	r24, 0xC1	; 193
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	93 8b       	std	Z+19, r25	; 0x13
    1150:	82 8b       	std	Z+18, r24	; 0x12
    1152:	82 ec       	ldi	r24, 0xC2	; 194
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	95 8b       	std	Z+21, r25	; 0x15
    1158:	84 8b       	std	Z+20, r24	; 0x14
    115a:	86 ec       	ldi	r24, 0xC6	; 198
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	97 8b       	std	Z+23, r25	; 0x17
    1160:	86 8b       	std	Z+22, r24	; 0x16
    1162:	11 8e       	std	Z+25, r1	; 0x19
    1164:	12 8e       	std	Z+26, r1	; 0x1a
    1166:	13 8e       	std	Z+27, r1	; 0x1b
    1168:	14 8e       	std	Z+28, r1	; 0x1c
    116a:	08 95       	ret

0000116c <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	0b b6       	in	r0, 0x3b	; 59
    1178:	0f 92       	push	r0
    117a:	2f 93       	push	r18
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	ef 93       	push	r30
    1182:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1184:	e0 91 f6 03 	lds	r30, 0x03F6	; 0x8003f6 <Serial1+0x10>
    1188:	f0 91 f7 03 	lds	r31, 0x03F7	; 0x8003f7 <Serial1+0x11>
    118c:	80 81       	ld	r24, Z
    118e:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <Serial1+0x16>
    1192:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <Serial1+0x17>
    1196:	82 fd       	sbrc	r24, 2
    1198:	12 c0       	rjmp	.+36     	; 0x11be <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    119a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    119c:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <Serial1+0x19>
    11a0:	8f 5f       	subi	r24, 0xFF	; 255
    11a2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    11a4:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <Serial1+0x1a>
    11a8:	82 17       	cp	r24, r18
    11aa:	51 f0       	breq	.+20     	; 0x11c0 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    11ac:	e0 91 ff 03 	lds	r30, 0x03FF	; 0x8003ff <Serial1+0x19>
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	ea 51       	subi	r30, 0x1A	; 26
    11b4:	fc 4f       	sbci	r31, 0xFC	; 252
    11b6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    11b8:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <Serial1+0x19>
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    11be:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	9f 91       	pop	r25
    11c6:	8f 91       	pop	r24
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0b be       	out	0x3b, r0	; 59
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	0b b6       	in	r0, 0x3b	; 59
    11e4:	0f 92       	push	r0
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    11fe:	86 ee       	ldi	r24, 0xE6	; 230
    1200:	93 e0       	ldi	r25, 0x03	; 3
    1202:	27 de       	rcall	.-946    	; 0xe52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1204:	ff 91       	pop	r31
    1206:	ef 91       	pop	r30
    1208:	bf 91       	pop	r27
    120a:	af 91       	pop	r26
    120c:	9f 91       	pop	r25
    120e:	8f 91       	pop	r24
    1210:	7f 91       	pop	r23
    1212:	6f 91       	pop	r22
    1214:	5f 91       	pop	r21
    1216:	4f 91       	pop	r20
    1218:	3f 91       	pop	r19
    121a:	2f 91       	pop	r18
    121c:	0f 90       	pop	r0
    121e:	0b be       	out	0x3b, r0	; 59
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    122a:	86 ee       	ldi	r24, 0xE6	; 230
    122c:	93 e0       	ldi	r25, 0x03	; 3
    122e:	99 dd       	rcall	.-1230   	; 0xd62 <_ZN14HardwareSerial9availableEv>
    1230:	21 e0       	ldi	r18, 0x01	; 1
    1232:	89 2b       	or	r24, r25
    1234:	09 f4       	brne	.+2      	; 0x1238 <_Z17Serial1_availablev+0xe>
    1236:	20 e0       	ldi	r18, 0x00	; 0
}
    1238:	82 2f       	mov	r24, r18
    123a:	08 95       	ret

0000123c <_GLOBAL__sub_I___vector_36>:
    123c:	e6 ee       	ldi	r30, 0xE6	; 230
    123e:	f3 e0       	ldi	r31, 0x03	; 3
    1240:	13 82       	std	Z+3, r1	; 0x03
    1242:	12 82       	std	Z+2, r1	; 0x02
    1244:	88 ee       	ldi	r24, 0xE8	; 232
    1246:	93 e0       	ldi	r25, 0x03	; 3
    1248:	a0 e0       	ldi	r26, 0x00	; 0
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	84 83       	std	Z+4, r24	; 0x04
    124e:	95 83       	std	Z+5, r25	; 0x05
    1250:	a6 83       	std	Z+6, r26	; 0x06
    1252:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1254:	82 ef       	ldi	r24, 0xF2	; 242
    1256:	92 e0       	ldi	r25, 0x02	; 2
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
    125c:	8d ec       	ldi	r24, 0xCD	; 205
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	95 87       	std	Z+13, r25	; 0x0d
    1262:	84 87       	std	Z+12, r24	; 0x0c
    1264:	8c ec       	ldi	r24, 0xCC	; 204
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	97 87       	std	Z+15, r25	; 0x0f
    126a:	86 87       	std	Z+14, r24	; 0x0e
    126c:	88 ec       	ldi	r24, 0xC8	; 200
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	91 8b       	std	Z+17, r25	; 0x11
    1272:	80 8b       	std	Z+16, r24	; 0x10
    1274:	89 ec       	ldi	r24, 0xC9	; 201
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	93 8b       	std	Z+19, r25	; 0x13
    127a:	82 8b       	std	Z+18, r24	; 0x12
    127c:	8a ec       	ldi	r24, 0xCA	; 202
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	95 8b       	std	Z+21, r25	; 0x15
    1282:	84 8b       	std	Z+20, r24	; 0x14
    1284:	8e ec       	ldi	r24, 0xCE	; 206
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	97 8b       	std	Z+23, r25	; 0x17
    128a:	86 8b       	std	Z+22, r24	; 0x16
    128c:	11 8e       	std	Z+25, r1	; 0x19
    128e:	12 8e       	std	Z+26, r1	; 0x1a
    1290:	13 8e       	std	Z+27, r1	; 0x1b
    1292:	14 8e       	std	Z+28, r1	; 0x1c
    1294:	08 95       	ret

00001296 <initVariant>:
    1296:	08 95       	ret

00001298 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1298:	d6 d1       	rcall	.+940    	; 0x1646 <init>

	initVariant();
    129a:	fd df       	rcall	.-6      	; 0x1296 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    129c:	38 da       	rcall	.-2960   	; 0x70e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    129e:	ce ee       	ldi	r28, 0xEE	; 238
    12a0:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    12a2:	37 dc       	rcall	.-1938   	; 0xb12 <loop>
		if (serialEventRun) serialEventRun();
    12a4:	20 97       	sbiw	r28, 0x00	; 0
    12a6:	e9 f3       	breq	.-6      	; 0x12a2 <main+0xa>
    12a8:	99 dd       	rcall	.-1230   	; 0xddc <_Z14serialEventRunv>
    12aa:	fb cf       	rjmp	.-10     	; 0x12a2 <main+0xa>

000012ac <_ZN5Print5writeEPKhj>:
    12ac:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	6c 01       	movw	r12, r24
    12be:	7a 01       	movw	r14, r20
    12c0:	8b 01       	movw	r16, r22
    12c2:	c0 e0       	ldi	r28, 0x00	; 0
    12c4:	d0 e0       	ldi	r29, 0x00	; 0
    12c6:	ce 15       	cp	r28, r14
    12c8:	df 05       	cpc	r29, r15
    12ca:	81 f0       	breq	.+32     	; 0x12ec <_ZN5Print5writeEPKhj+0x40>
    12cc:	d8 01       	movw	r26, r16
    12ce:	6d 91       	ld	r22, X+
    12d0:	8d 01       	movw	r16, r26
    12d2:	d6 01       	movw	r26, r12
    12d4:	ed 91       	ld	r30, X+
    12d6:	fc 91       	ld	r31, X
    12d8:	01 90       	ld	r0, Z+
    12da:	f0 81       	ld	r31, Z
    12dc:	e0 2d       	mov	r30, r0
    12de:	c6 01       	movw	r24, r12
    12e0:	19 95       	eicall
    12e2:	89 2b       	or	r24, r25
    12e4:	11 f0       	breq	.+4      	; 0x12ea <_ZN5Print5writeEPKhj+0x3e>
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	ee cf       	rjmp	.-36     	; 0x12c6 <_ZN5Print5writeEPKhj+0x1a>
    12ea:	7e 01       	movw	r14, r28
    12ec:	c7 01       	movw	r24, r14
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	08 95       	ret

00001300 <_ZN5Print5writeEPKc>:
    1300:	61 15       	cp	r22, r1
    1302:	71 05       	cpc	r23, r1
    1304:	79 f0       	breq	.+30     	; 0x1324 <_ZN5Print5writeEPKc+0x24>
    1306:	fb 01       	movw	r30, r22
    1308:	01 90       	ld	r0, Z+
    130a:	00 20       	and	r0, r0
    130c:	e9 f7       	brne	.-6      	; 0x1308 <_ZN5Print5writeEPKc+0x8>
    130e:	31 97       	sbiw	r30, 0x01	; 1
    1310:	af 01       	movw	r20, r30
    1312:	46 1b       	sub	r20, r22
    1314:	57 0b       	sbc	r21, r23
    1316:	dc 01       	movw	r26, r24
    1318:	ed 91       	ld	r30, X+
    131a:	fc 91       	ld	r31, X
    131c:	02 80       	ldd	r0, Z+2	; 0x02
    131e:	f3 81       	ldd	r31, Z+3	; 0x03
    1320:	e0 2d       	mov	r30, r0
    1322:	19 94       	eijmp
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	08 95       	ret

0000132a <_ZN5Print5printEPKc>:
    132a:	ea cf       	rjmp	.-44     	; 0x1300 <_ZN5Print5writeEPKc>

0000132c <_ZN5Print5printEc>:
    132c:	dc 01       	movw	r26, r24
    132e:	ed 91       	ld	r30, X+
    1330:	fc 91       	ld	r31, X
    1332:	01 90       	ld	r0, Z+
    1334:	f0 81       	ld	r31, Z
    1336:	e0 2d       	mov	r30, r0
    1338:	19 94       	eijmp

0000133a <_ZN5Print7printlnEv>:
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	73 e0       	ldi	r23, 0x03	; 3
    133e:	e0 cf       	rjmp	.-64     	; 0x1300 <_ZN5Print5writeEPKc>

00001340 <_ZN5Print7printlnEPKc>:
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	ec 01       	movw	r28, r24
    134a:	da df       	rcall	.-76     	; 0x1300 <_ZN5Print5writeEPKc>
    134c:	8c 01       	movw	r16, r24
    134e:	ce 01       	movw	r24, r28
    1350:	f4 df       	rcall	.-24     	; 0x133a <_ZN5Print7printlnEv>
    1352:	80 0f       	add	r24, r16
    1354:	91 1f       	adc	r25, r17
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <_ZN5Print11printNumberEmh>:
    1360:	8f 92       	push	r8
    1362:	9f 92       	push	r9
    1364:	af 92       	push	r10
    1366:	bf 92       	push	r11
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	a1 97       	sbiw	r28, 0x21	; 33
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	7c 01       	movw	r14, r24
    1386:	fa 01       	movw	r30, r20
    1388:	cb 01       	movw	r24, r22
    138a:	19 a2       	std	Y+33, r1	; 0x21
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	08 f4       	brcc	.+2      	; 0x1392 <_ZN5Print11printNumberEmh+0x32>
    1390:	2a e0       	ldi	r18, 0x0A	; 10
    1392:	8e 01       	movw	r16, r28
    1394:	0f 5d       	subi	r16, 0xDF	; 223
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	82 2e       	mov	r8, r18
    139a:	91 2c       	mov	r9, r1
    139c:	a1 2c       	mov	r10, r1
    139e:	b1 2c       	mov	r11, r1
    13a0:	bf 01       	movw	r22, r30
    13a2:	a5 01       	movw	r20, r10
    13a4:	94 01       	movw	r18, r8
    13a6:	42 d6       	rcall	.+3204   	; 0x202c <__udivmodsi4>
    13a8:	f9 01       	movw	r30, r18
    13aa:	ca 01       	movw	r24, r20
    13ac:	01 50       	subi	r16, 0x01	; 1
    13ae:	11 09       	sbc	r17, r1
    13b0:	6a 30       	cpi	r22, 0x0A	; 10
    13b2:	10 f4       	brcc	.+4      	; 0x13b8 <_ZN5Print11printNumberEmh+0x58>
    13b4:	60 5d       	subi	r22, 0xD0	; 208
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <_ZN5Print11printNumberEmh+0x5a>
    13b8:	69 5c       	subi	r22, 0xC9	; 201
    13ba:	d8 01       	movw	r26, r16
    13bc:	6c 93       	st	X, r22
    13be:	23 2b       	or	r18, r19
    13c0:	24 2b       	or	r18, r20
    13c2:	25 2b       	or	r18, r21
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <_ZN5Print11printNumberEmh+0x40>
    13c6:	b8 01       	movw	r22, r16
    13c8:	c7 01       	movw	r24, r14
    13ca:	9a df       	rcall	.-204    	; 0x1300 <_ZN5Print5writeEPKc>
    13cc:	a1 96       	adiw	r28, 0x21	; 33
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	9f 90       	pop	r9
    13ea:	8f 90       	pop	r8
    13ec:	08 95       	ret

000013ee <_ZN5Print5printEmi>:
    13ee:	21 15       	cp	r18, r1
    13f0:	31 05       	cpc	r19, r1
    13f2:	41 f4       	brne	.+16     	; 0x1404 <_ZN5Print5printEmi+0x16>
    13f4:	dc 01       	movw	r26, r24
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	01 90       	ld	r0, Z+
    13fc:	f0 81       	ld	r31, Z
    13fe:	e0 2d       	mov	r30, r0
    1400:	64 2f       	mov	r22, r20
    1402:	19 94       	eijmp
    1404:	ad cf       	rjmp	.-166    	; 0x1360 <_ZN5Print11printNumberEmh>

00001406 <_ZN5Print5printEhi>:
    1406:	9a 01       	movw	r18, r20
    1408:	46 2f       	mov	r20, r22
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	ee cf       	rjmp	.-36     	; 0x13ee <_ZN5Print5printEmi>

00001412 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1412:	cf 92       	push	r12
    1414:	df 92       	push	r13
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
  if (base == 0) {
    1422:	21 15       	cp	r18, r1
    1424:	31 05       	cpc	r19, r1
    1426:	81 f4       	brne	.+32     	; 0x1448 <_ZN5Print5printEli+0x36>
    return write(n);
    1428:	dc 01       	movw	r26, r24
    142a:	ed 91       	ld	r30, X+
    142c:	fc 91       	ld	r31, X
    142e:	01 90       	ld	r0, Z+
    1430:	f0 81       	ld	r31, Z
    1432:	e0 2d       	mov	r30, r0
    1434:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1446:	19 94       	eijmp
  } else if (base == 10) {
    1448:	2a 30       	cpi	r18, 0x0A	; 10
    144a:	31 05       	cpc	r19, r1
    144c:	f1 f4       	brne	.+60     	; 0x148a <_ZN5Print5printEli+0x78>
    if (n < 0) {
    144e:	77 ff       	sbrs	r23, 7
    1450:	1b c0       	rjmp	.+54     	; 0x1488 <_ZN5Print5printEli+0x76>
    1452:	6a 01       	movw	r12, r20
    1454:	7b 01       	movw	r14, r22
    1456:	ec 01       	movw	r28, r24
      int t = print('-');
    1458:	6d e2       	ldi	r22, 0x2D	; 45
    145a:	68 df       	rcall	.-304    	; 0x132c <_ZN5Print5printEc>
    145c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    145e:	44 27       	eor	r20, r20
    1460:	55 27       	eor	r21, r21
    1462:	ba 01       	movw	r22, r20
    1464:	4c 19       	sub	r20, r12
    1466:	5d 09       	sbc	r21, r13
    1468:	6e 09       	sbc	r22, r14
    146a:	7f 09       	sbc	r23, r15
    146c:	2a e0       	ldi	r18, 0x0A	; 10
    146e:	ce 01       	movw	r24, r28
    1470:	77 df       	rcall	.-274    	; 0x1360 <_ZN5Print11printNumberEmh>
    1472:	80 0f       	add	r24, r16
    1474:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	df 90       	pop	r13
    1484:	cf 90       	pop	r12
    1486:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1488:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1498:	cf 90       	pop	r12
    149a:	62 cf       	rjmp	.-316    	; 0x1360 <_ZN5Print11printNumberEmh>

0000149c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    149c:	9a 01       	movw	r18, r20
  return print((long) n, base);
    149e:	ab 01       	movw	r20, r22
    14a0:	77 0f       	add	r23, r23
    14a2:	66 0b       	sbc	r22, r22
    14a4:	77 0b       	sbc	r23, r23
    14a6:	b5 cf       	rjmp	.-150    	; 0x1412 <_ZN5Print5printEli>

000014a8 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    14b2:	f4 df       	rcall	.-24     	; 0x149c <_ZN5Print5printEii>
    14b4:	8c 01       	movw	r16, r24
  n += println();
    14b6:	ce 01       	movw	r24, r28
    14b8:	40 df       	rcall	.-384    	; 0x133a <_ZN5Print7printlnEv>
  return n;
}
    14ba:	80 0f       	add	r24, r16
    14bc:	91 1f       	adc	r25, r17
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    14c8:	1f 92       	push	r1
    14ca:	0f 92       	push	r0
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	0f 92       	push	r0
    14d0:	11 24       	eor	r1, r1
    14d2:	2f 93       	push	r18
    14d4:	3f 93       	push	r19
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    14de:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <timer0_millis>
    14e2:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <timer0_millis+0x1>
    14e6:	a0 91 86 04 	lds	r26, 0x0486	; 0x800486 <timer0_millis+0x2>
    14ea:	b0 91 87 04 	lds	r27, 0x0487	; 0x800487 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    14ee:	30 91 83 04 	lds	r19, 0x0483	; 0x800483 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    14f2:	23 e0       	ldi	r18, 0x03	; 3
    14f4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    14f6:	2d 37       	cpi	r18, 0x7D	; 125
    14f8:	20 f4       	brcc	.+8      	; 0x1502 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	a1 1d       	adc	r26, r1
    14fe:	b1 1d       	adc	r27, r1
    1500:	05 c0       	rjmp	.+10     	; 0x150c <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1502:	26 e8       	ldi	r18, 0x86	; 134
    1504:	23 0f       	add	r18, r19
		m += 1;
    1506:	02 96       	adiw	r24, 0x02	; 2
    1508:	a1 1d       	adc	r26, r1
    150a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    150c:	20 93 83 04 	sts	0x0483, r18	; 0x800483 <timer0_fract>
	timer0_millis = m;
    1510:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <timer0_millis>
    1514:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <timer0_millis+0x1>
    1518:	a0 93 86 04 	sts	0x0486, r26	; 0x800486 <timer0_millis+0x2>
    151c:	b0 93 87 04 	sts	0x0487, r27	; 0x800487 <timer0_millis+0x3>
	timer0_overflow_count++;
    1520:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <timer0_overflow_count>
    1524:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <timer0_overflow_count+0x1>
    1528:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <timer0_overflow_count+0x2>
    152c:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <timer0_overflow_count+0x3>
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	a1 1d       	adc	r26, r1
    1534:	b1 1d       	adc	r27, r1
    1536:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <timer0_overflow_count>
    153a:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <timer0_overflow_count+0x1>
    153e:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <timer0_overflow_count+0x2>
    1542:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <timer0_overflow_count+0x3>
}
    1546:	bf 91       	pop	r27
    1548:	af 91       	pop	r26
    154a:	9f 91       	pop	r25
    154c:	8f 91       	pop	r24
    154e:	3f 91       	pop	r19
    1550:	2f 91       	pop	r18
    1552:	0f 90       	pop	r0
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti

0000155c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    155c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    155e:	f8 94       	cli
	m = timer0_millis;
    1560:	60 91 84 04 	lds	r22, 0x0484	; 0x800484 <timer0_millis>
    1564:	70 91 85 04 	lds	r23, 0x0485	; 0x800485 <timer0_millis+0x1>
    1568:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <timer0_millis+0x2>
    156c:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <timer0_millis+0x3>
	SREG = oldSREG;
    1570:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1572:	08 95       	ret

00001574 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1574:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1576:	f8 94       	cli
	m = timer0_overflow_count;
    1578:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <timer0_overflow_count>
    157c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <timer0_overflow_count+0x1>
    1580:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <timer0_overflow_count+0x2>
    1584:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1588:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    158a:	a8 9b       	sbis	0x15, 0	; 21
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <micros+0x24>
    158e:	2f 3f       	cpi	r18, 0xFF	; 255
    1590:	19 f0       	breq	.+6      	; 0x1598 <micros+0x24>
		m++;
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	a1 1d       	adc	r26, r1
    1596:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1598:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    159a:	ba 2f       	mov	r27, r26
    159c:	a9 2f       	mov	r26, r25
    159e:	98 2f       	mov	r25, r24
    15a0:	88 27       	eor	r24, r24
    15a2:	82 0f       	add	r24, r18
    15a4:	91 1d       	adc	r25, r1
    15a6:	a1 1d       	adc	r26, r1
    15a8:	b1 1d       	adc	r27, r1
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	42 e0       	ldi	r20, 0x02	; 2
    15b0:	66 0f       	add	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	88 1f       	adc	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	4a 95       	dec	r20
    15ba:	d1 f7       	brne	.-12     	; 0x15b0 <micros+0x3c>
}
    15bc:	08 95       	ret

000015be <delay>:

void delay(unsigned long ms)
{
    15be:	8f 92       	push	r8
    15c0:	9f 92       	push	r9
    15c2:	af 92       	push	r10
    15c4:	bf 92       	push	r11
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	6b 01       	movw	r12, r22
    15d0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    15d2:	d0 df       	rcall	.-96     	; 0x1574 <micros>
    15d4:	4b 01       	movw	r8, r22
    15d6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    15d8:	c1 14       	cp	r12, r1
    15da:	d1 04       	cpc	r13, r1
    15dc:	e1 04       	cpc	r14, r1
    15de:	f1 04       	cpc	r15, r1
		yield();
    15e0:	f1 f0       	breq	.+60     	; 0x161e <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    15e2:	41 d3       	rcall	.+1666   	; 0x1c66 <yield>
    15e4:	c7 df       	rcall	.-114    	; 0x1574 <micros>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	88 19       	sub	r24, r8
    15ec:	99 09       	sbc	r25, r9
    15ee:	aa 09       	sbc	r26, r10
    15f0:	bb 09       	sbc	r27, r11
    15f2:	88 3e       	cpi	r24, 0xE8	; 232
    15f4:	93 40       	sbci	r25, 0x03	; 3
    15f6:	a1 05       	cpc	r26, r1
    15f8:	b1 05       	cpc	r27, r1
    15fa:	70 f3       	brcs	.-36     	; 0x15d8 <delay+0x1a>
			ms--;
    15fc:	21 e0       	ldi	r18, 0x01	; 1
    15fe:	c2 1a       	sub	r12, r18
    1600:	d1 08       	sbc	r13, r1
    1602:	e1 08       	sbc	r14, r1
    1604:	f1 08       	sbc	r15, r1
			start += 1000;
    1606:	88 ee       	ldi	r24, 0xE8	; 232
    1608:	88 0e       	add	r8, r24
    160a:	83 e0       	ldi	r24, 0x03	; 3
    160c:	98 1e       	adc	r9, r24
    160e:	a1 1c       	adc	r10, r1
    1610:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1612:	c1 14       	cp	r12, r1
    1614:	d1 04       	cpc	r13, r1
    1616:	e1 04       	cpc	r14, r1
    1618:	f1 04       	cpc	r15, r1
    161a:	21 f7       	brne	.-56     	; 0x15e4 <delay+0x26>
    161c:	dd cf       	rjmp	.-70     	; 0x15d8 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	df 90       	pop	r13
    1624:	cf 90       	pop	r12
    1626:	bf 90       	pop	r11
    1628:	af 90       	pop	r10
    162a:	9f 90       	pop	r9
    162c:	8f 90       	pop	r8
    162e:	08 95       	ret

00001630 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1630:	82 30       	cpi	r24, 0x02	; 2
    1632:	91 05       	cpc	r25, r1
    1634:	38 f0       	brcs	.+14     	; 0x1644 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    163e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <delayMicroseconds+0x10>
    1644:	08 95       	ret

00001646 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1646:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1648:	84 b5       	in	r24, 0x24	; 36
    164a:	82 60       	ori	r24, 0x02	; 2
    164c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    164e:	84 b5       	in	r24, 0x24	; 36
    1650:	81 60       	ori	r24, 0x01	; 1
    1652:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1654:	85 b5       	in	r24, 0x25	; 37
    1656:	82 60       	ori	r24, 0x02	; 2
    1658:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    165a:	85 b5       	in	r24, 0x25	; 37
    165c:	81 60       	ori	r24, 0x01	; 1
    165e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1660:	ee e6       	ldi	r30, 0x6E	; 110
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	81 60       	ori	r24, 0x01	; 1
    1668:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    166a:	e1 e8       	ldi	r30, 0x81	; 129
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1670:	80 81       	ld	r24, Z
    1672:	82 60       	ori	r24, 0x02	; 2
    1674:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1676:	80 81       	ld	r24, Z
    1678:	81 60       	ori	r24, 0x01	; 1
    167a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    167c:	e0 e8       	ldi	r30, 0x80	; 128
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	81 60       	ori	r24, 0x01	; 1
    1684:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1686:	e1 eb       	ldi	r30, 0xB1	; 177
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	84 60       	ori	r24, 0x04	; 4
    168e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1690:	e0 eb       	ldi	r30, 0xB0	; 176
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	81 60       	ori	r24, 0x01	; 1
    1698:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    169a:	e1 e9       	ldi	r30, 0x91	; 145
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	82 60       	ori	r24, 0x02	; 2
    16a2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    16a4:	80 81       	ld	r24, Z
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    16aa:	e0 e9       	ldi	r30, 0x90	; 144
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	81 60       	ori	r24, 0x01	; 1
    16b2:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    16b4:	e1 ea       	ldi	r30, 0xA1	; 161
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	82 60       	ori	r24, 0x02	; 2
    16bc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    16be:	80 81       	ld	r24, Z
    16c0:	81 60       	ori	r24, 0x01	; 1
    16c2:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    16c4:	e0 ea       	ldi	r30, 0xA0	; 160
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	81 60       	ori	r24, 0x01	; 1
    16cc:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    16ce:	e1 e2       	ldi	r30, 0x21	; 33
    16d0:	f1 e0       	ldi	r31, 0x01	; 1
    16d2:	80 81       	ld	r24, Z
    16d4:	82 60       	ori	r24, 0x02	; 2
    16d6:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    16d8:	80 81       	ld	r24, Z
    16da:	81 60       	ori	r24, 0x01	; 1
    16dc:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    16de:	e0 e2       	ldi	r30, 0x20	; 32
    16e0:	f1 e0       	ldi	r31, 0x01	; 1
    16e2:	80 81       	ld	r24, Z
    16e4:	81 60       	ori	r24, 0x01	; 1
    16e6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    16e8:	ea e7       	ldi	r30, 0x7A	; 122
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	84 60       	ori	r24, 0x04	; 4
    16f0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    16f2:	80 81       	ld	r24, Z
    16f4:	82 60       	ori	r24, 0x02	; 2
    16f6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    16f8:	80 81       	ld	r24, Z
    16fa:	81 60       	ori	r24, 0x01	; 1
    16fc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    16fe:	80 81       	ld	r24, Z
    1700:	80 68       	ori	r24, 0x80	; 128
    1702:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1704:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1708:	08 95       	ret

0000170a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	fc 01       	movw	r30, r24
    170e:	31 97       	sbiw	r30, 0x01	; 1
    1710:	e2 31       	cpi	r30, 0x12	; 18
    1712:	f1 05       	cpc	r31, r1
    1714:	08 f0       	brcs	.+2      	; 0x1718 <turnOffPWM+0xe>
    1716:	4d c0       	rjmp	.+154    	; 0x17b2 <turnOffPWM+0xa8>
    1718:	88 27       	eor	r24, r24
    171a:	ee 58       	subi	r30, 0x8E	; 142
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	8f 4f       	sbci	r24, 0xFF	; 255
    1720:	a7 c4       	rjmp	.+2382   	; 0x2070 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1722:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1726:	8f 77       	andi	r24, 0x7F	; 127
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    172a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    172e:	8f 7d       	andi	r24, 0xDF	; 223
    1730:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1734:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1736:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    173a:	87 7f       	andi	r24, 0xF7	; 247
    173c:	f9 cf       	rjmp	.-14     	; 0x1730 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    173e:	84 b5       	in	r24, 0x24	; 36
    1740:	8f 77       	andi	r24, 0x7F	; 127
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1744:	84 b5       	in	r24, 0x24	; 36
    1746:	8f 7d       	andi	r24, 0xDF	; 223
    1748:	84 bd       	out	0x24, r24	; 36
    174a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    174c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1750:	8f 77       	andi	r24, 0x7F	; 127
    1752:	03 c0       	rjmp	.+6      	; 0x175a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1754:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1758:	8f 7d       	andi	r24, 0xDF	; 223
    175a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    175e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1760:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1764:	8f 77       	andi	r24, 0x7F	; 127
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1768:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    176c:	8f 7d       	andi	r24, 0xDF	; 223
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1770:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1774:	87 7f       	andi	r24, 0xF7	; 247
    1776:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    177a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    177c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1780:	8f 77       	andi	r24, 0x7F	; 127
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1784:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1788:	8f 7d       	andi	r24, 0xDF	; 223
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    178c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1790:	87 7f       	andi	r24, 0xF7	; 247
    1792:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1796:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1798:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    179c:	8f 77       	andi	r24, 0x7F	; 127
    179e:	07 c0       	rjmp	.+14     	; 0x17ae <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    17a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    17a4:	8f 7d       	andi	r24, 0xDF	; 223
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    17a8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    17ac:	87 7f       	andi	r24, 0xF7	; 247
    17ae:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    17b2:	08 95       	ret

000017b4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	fc 01       	movw	r30, r24
    17bc:	e2 5b       	subi	r30, 0xB2	; 178
    17be:	fe 4f       	sbci	r31, 0xFE	; 254
    17c0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    17c2:	fc 01       	movw	r30, r24
    17c4:	ec 56       	subi	r30, 0x6C	; 108
    17c6:	fe 4f       	sbci	r31, 0xFE	; 254
    17c8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    17ca:	88 23       	and	r24, r24
    17cc:	61 f1       	breq	.+88     	; 0x1826 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	fc 01       	movw	r30, r24
    17d6:	ec 50       	subi	r30, 0x0C	; 12
    17d8:	fe 4f       	sbci	r31, 0xFE	; 254
    17da:	c5 91       	lpm	r28, Z+
    17dc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    17de:	fc 01       	movw	r30, r24
    17e0:	e6 52       	subi	r30, 0x26	; 38
    17e2:	fe 4f       	sbci	r31, 0xFE	; 254
    17e4:	a5 91       	lpm	r26, Z+
    17e6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    17e8:	61 11       	cpse	r22, r1
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    17ec:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17ee:	f8 94       	cli
		*reg &= ~bit;
    17f0:	88 81       	ld	r24, Y
    17f2:	20 95       	com	r18
    17f4:	82 23       	and	r24, r18
    17f6:	88 83       	st	Y, r24
		*out &= ~bit;
    17f8:	ec 91       	ld	r30, X
    17fa:	2e 23       	and	r18, r30
    17fc:	0b c0       	rjmp	.+22     	; 0x1814 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    17fe:	62 30       	cpi	r22, 0x02	; 2
    1800:	61 f4       	brne	.+24     	; 0x181a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1802:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1804:	f8 94       	cli
		*reg &= ~bit;
    1806:	88 81       	ld	r24, Y
    1808:	32 2f       	mov	r19, r18
    180a:	30 95       	com	r19
    180c:	83 23       	and	r24, r19
    180e:	88 83       	st	Y, r24
		*out |= bit;
    1810:	ec 91       	ld	r30, X
    1812:	2e 2b       	or	r18, r30
    1814:	2c 93       	st	X, r18
		SREG = oldSREG;
    1816:	9f bf       	out	0x3f, r25	; 63
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    181a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    181c:	f8 94       	cli
		*reg |= bit;
    181e:	e8 81       	ld	r30, Y
    1820:	2e 2b       	or	r18, r30
    1822:	28 83       	st	Y, r18
		SREG = oldSREG;
    1824:	8f bf       	out	0x3f, r24	; 63
	}
}
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	f9 01       	movw	r30, r18
    1838:	e8 5f       	subi	r30, 0xF8	; 248
    183a:	fe 4f       	sbci	r31, 0xFE	; 254
    183c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    183e:	f9 01       	movw	r30, r18
    1840:	e2 5b       	subi	r30, 0xB2	; 178
    1842:	fe 4f       	sbci	r31, 0xFE	; 254
    1844:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1846:	f9 01       	movw	r30, r18
    1848:	ec 56       	subi	r30, 0x6C	; 108
    184a:	fe 4f       	sbci	r31, 0xFE	; 254
    184c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    184e:	cc 23       	and	r28, r28
    1850:	b9 f0       	breq	.+46     	; 0x1880 <digitalWrite+0x54>
    1852:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1854:	81 11       	cpse	r24, r1
    1856:	59 df       	rcall	.-334    	; 0x170a <turnOffPWM>

	out = portOutputRegister(port);
    1858:	ec 2f       	mov	r30, r28
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	e6 52       	subi	r30, 0x26	; 38
    1862:	fe 4f       	sbci	r31, 0xFE	; 254
    1864:	a5 91       	lpm	r26, Z+
    1866:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1868:	9f b7       	in	r25, 0x3f	; 63
	cli();
    186a:	f8 94       	cli

	if (val == LOW) {
    186c:	11 11       	cpse	r17, r1
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <digitalWrite+0x4c>
		*out &= ~bit;
    1870:	8c 91       	ld	r24, X
    1872:	d0 95       	com	r29
    1874:	d8 23       	and	r29, r24
    1876:	02 c0       	rjmp	.+4      	; 0x187c <digitalWrite+0x50>
	} else {
		*out |= bit;
    1878:	ec 91       	ld	r30, X
    187a:	de 2b       	or	r29, r30
    187c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    187e:	9f bf       	out	0x3f, r25	; 63
}
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	08 95       	ret

00001888 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    1888:	fc 01       	movw	r30, r24
    188a:	13 82       	std	Z+3, r1	; 0x03
    188c:	12 82       	std	Z+2, r1	; 0x02
    188e:	83 e1       	ldi	r24, 0x13	; 19
    1890:	93 e0       	ldi	r25, 0x03	; 3
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	64 83       	std	Z+4, r22	; 0x04
    1898:	41 87       	std	Z+9, r20	; 0x09
    189a:	22 87       	std	Z+10, r18	; 0x0a
    189c:	13 86       	std	Z+11, r1	; 0x0b
    189e:	08 95       	ret

000018a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	ec 01       	movw	r28, r24
    18a8:	16 2f       	mov	r17, r22
    18aa:	6c 81       	ldd	r22, Y+4	; 0x04
    18ac:	8c e8       	ldi	r24, 0x8C	; 140
    18ae:	94 e0       	ldi	r25, 0x04	; 4
    18b0:	b9 d1       	rcall	.+882    	; 0x1c24 <_ZN7TwoWire17beginTransmissionEh>
    18b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b4:	61 2b       	or	r22, r17
    18b6:	8c e8       	ldi	r24, 0x8C	; 140
    18b8:	94 e0       	ldi	r25, 0x04	; 4
    18ba:	67 d1       	rcall	.+718    	; 0x1b8a <_ZN7TwoWire5writeEh>
    18bc:	8c e8       	ldi	r24, 0x8C	; 140
    18be:	94 e0       	ldi	r25, 0x04	; 4
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	ca c1       	rjmp	.+916    	; 0x1c5c <_ZN7TwoWire15endTransmissionEv>

000018c8 <_ZN17LiquidCrystal_I2C9backlightEv>:
    18c8:	28 e0       	ldi	r18, 0x08	; 8
    18ca:	fc 01       	movw	r30, r24
    18cc:	23 87       	std	Z+11, r18	; 0x0b
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	e7 cf       	rjmp	.-50     	; 0x18a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000018d2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	8c 01       	movw	r16, r24
    18da:	c6 2f       	mov	r28, r22
    18dc:	64 60       	ori	r22, 0x04	; 4
    18de:	e0 df       	rcall	.-64     	; 0x18a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a5 de       	rcall	.-694    	; 0x1630 <delayMicroseconds>
    18e6:	6c 2f       	mov	r22, r28
    18e8:	6b 7f       	andi	r22, 0xFB	; 251
    18ea:	c8 01       	movw	r24, r16
    18ec:	d9 df       	rcall	.-78     	; 0x18a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    18ee:	82 e3       	ldi	r24, 0x32	; 50
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	9b ce       	rjmp	.-714    	; 0x1630 <delayMicroseconds>

000018fa <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	ec 01       	movw	r28, r24
    1902:	16 2f       	mov	r17, r22
    1904:	cd df       	rcall	.-102    	; 0x18a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1906:	61 2f       	mov	r22, r17
    1908:	ce 01       	movw	r24, r28
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	e0 cf       	rjmp	.-64     	; 0x18d2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00001912 <_ZN17LiquidCrystal_I2C4sendEhh>:
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	8c 01       	movw	r16, r24
    191c:	c6 2f       	mov	r28, r22
    191e:	d4 2f       	mov	r29, r20
    1920:	60 7f       	andi	r22, 0xF0	; 240
    1922:	64 2b       	or	r22, r20
    1924:	ea df       	rcall	.-44     	; 0x18fa <_ZN17LiquidCrystal_I2C10write4bitsEh>
    1926:	80 e1       	ldi	r24, 0x10	; 16
    1928:	c8 9f       	mul	r28, r24
    192a:	b0 01       	movw	r22, r0
    192c:	11 24       	eor	r1, r1
    192e:	6d 2b       	or	r22, r29
    1930:	c8 01       	movw	r24, r16
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	df cf       	rjmp	.-66     	; 0x18fa <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000193c <_ZN17LiquidCrystal_I2C7commandEh>:
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	e9 cf       	rjmp	.-46     	; 0x1912 <_ZN17LiquidCrystal_I2C4sendEhh>

00001940 <_ZN17LiquidCrystal_I2C5clearEv>:
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	fc df       	rcall	.-8      	; 0x193c <_ZN17LiquidCrystal_I2C7commandEh>
    1944:	80 ed       	ldi	r24, 0xD0	; 208
    1946:	97 e0       	ldi	r25, 0x07	; 7
    1948:	73 ce       	rjmp	.-794    	; 0x1630 <delayMicroseconds>

0000194a <_ZN17LiquidCrystal_I2C4homeEv>:
    194a:	62 e0       	ldi	r22, 0x02	; 2
    194c:	f7 df       	rcall	.-18     	; 0x193c <_ZN17LiquidCrystal_I2C7commandEh>
    194e:	80 ed       	ldi	r24, 0xD0	; 208
    1950:	97 e0       	ldi	r25, 0x07	; 7
    1952:	6e ce       	rjmp	.-804    	; 0x1630 <delayMicroseconds>

00001954 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	28 97       	sbiw	r28, 0x08	; 8
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	9c 01       	movw	r18, r24
    196a:	88 e0       	ldi	r24, 0x08	; 8
    196c:	e3 e0       	ldi	r30, 0x03	; 3
    196e:	f2 e0       	ldi	r31, 0x02	; 2
    1970:	de 01       	movw	r26, r28
    1972:	11 96       	adiw	r26, 0x01	; 1
    1974:	01 90       	ld	r0, Z+
    1976:	0d 92       	st	X+, r0
    1978:	8a 95       	dec	r24
    197a:	e1 f7       	brne	.-8      	; 0x1974 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    197c:	f9 01       	movw	r30, r18
    197e:	80 85       	ldd	r24, Z+8	; 0x08
    1980:	84 17       	cp	r24, r20
    1982:	10 f4       	brcc	.+4      	; 0x1988 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    1984:	4f ef       	ldi	r20, 0xFF	; 255
    1986:	48 0f       	add	r20, r24
    1988:	fe 01       	movw	r30, r28
    198a:	31 96       	adiw	r30, 0x01	; 1
    198c:	e4 0f       	add	r30, r20
    198e:	f1 1d       	adc	r31, r1
    1990:	e4 0f       	add	r30, r20
    1992:	f1 1d       	adc	r31, r1
    1994:	90 81       	ld	r25, Z
    1996:	69 0f       	add	r22, r25
    1998:	60 68       	ori	r22, 0x80	; 128
    199a:	c9 01       	movw	r24, r18
    199c:	28 96       	adiw	r28, 0x08	; 8
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	c7 cf       	rjmp	.-114    	; 0x193c <_ZN17LiquidCrystal_I2C7commandEh>

000019ae <_ZN17LiquidCrystal_I2C7displayEv>:
    19ae:	fc 01       	movw	r30, r24
    19b0:	66 81       	ldd	r22, Z+6	; 0x06
    19b2:	26 2f       	mov	r18, r22
    19b4:	24 60       	ori	r18, 0x04	; 4
    19b6:	26 83       	std	Z+6, r18	; 0x06
    19b8:	6c 60       	ori	r22, 0x0C	; 12
    19ba:	c0 cf       	rjmp	.-128    	; 0x193c <_ZN17LiquidCrystal_I2C7commandEh>

000019bc <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	a9 df       	rcall	.-174    	; 0x1912 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	08 95       	ret

000019c6 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	ec 01       	movw	r28, r24
	if (lines > 1) {
    19cc:	42 30       	cpi	r20, 0x02	; 2
    19ce:	18 f0       	brcs	.+6      	; 0x19d6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    19d0:	8d 81       	ldd	r24, Y+5	; 0x05
    19d2:	88 60       	ori	r24, 0x08	; 8
    19d4:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    19d6:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    19d8:	22 23       	and	r18, r18
    19da:	29 f0       	breq	.+10     	; 0x19e6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    19dc:	41 30       	cpi	r20, 0x01	; 1
    19de:	19 f4       	brne	.+6      	; 0x19e6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	84 60       	ori	r24, 0x04	; 4
    19e4:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    19e6:	62 e3       	ldi	r22, 0x32	; 50
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	e7 dd       	rcall	.-1074   	; 0x15be <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    19f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f2:	ce 01       	movw	r24, r28
    19f4:	55 df       	rcall	.-342    	; 0x18a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    19f6:	68 ee       	ldi	r22, 0xE8	; 232
    19f8:	73 e0       	ldi	r23, 0x03	; 3
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	df dd       	rcall	.-1090   	; 0x15be <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    1a00:	60 e3       	ldi	r22, 0x30	; 48
    1a02:	ce 01       	movw	r24, r28
    1a04:	7a df       	rcall	.-268    	; 0x18fa <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1a06:	84 e9       	ldi	r24, 0x94	; 148
    1a08:	91 e1       	ldi	r25, 0x11	; 17
    1a0a:	12 de       	rcall	.-988    	; 0x1630 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    1a0c:	60 e3       	ldi	r22, 0x30	; 48
    1a0e:	ce 01       	movw	r24, r28
    1a10:	74 df       	rcall	.-280    	; 0x18fa <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1a12:	84 e9       	ldi	r24, 0x94	; 148
    1a14:	91 e1       	ldi	r25, 0x11	; 17
    1a16:	0c de       	rcall	.-1000   	; 0x1630 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    1a18:	60 e3       	ldi	r22, 0x30	; 48
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	6e df       	rcall	.-292    	; 0x18fa <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    1a1e:	86 e9       	ldi	r24, 0x96	; 150
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	06 de       	rcall	.-1012   	; 0x1630 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    1a24:	60 e2       	ldi	r22, 0x20	; 32
    1a26:	ce 01       	movw	r24, r28
    1a28:	68 df       	rcall	.-304    	; 0x18fa <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    1a2a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a2c:	60 62       	ori	r22, 0x20	; 32
    1a2e:	ce 01       	movw	r24, r28
    1a30:	85 df       	rcall	.-246    	; 0x193c <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1a32:	84 e0       	ldi	r24, 0x04	; 4
    1a34:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1a36:	ce 01       	movw	r24, r28
    1a38:	ba df       	rcall	.-140    	; 0x19ae <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	81 df       	rcall	.-254    	; 0x1940 <_ZN17LiquidCrystal_I2C5clearEv>
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1a40:	8f 83       	std	Y+7, r24	; 0x07
    1a42:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1a44:	ce 01       	movw	r24, r28
    1a46:	7a df       	rcall	.-268    	; 0x193c <_ZN17LiquidCrystal_I2C7commandEh>
    1a48:	ce 01       	movw	r24, r28
    1a4a:	df 91       	pop	r29
	
	home();
    1a4c:	cf 91       	pop	r28
  
}
    1a4e:	7d cf       	rjmp	.-262    	; 0x194a <_ZN17LiquidCrystal_I2C4homeEv>

00001a50 <_ZN17LiquidCrystal_I2C9init_privEv>:
    1a50:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    1a52:	df 93       	push	r29
    1a54:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    1a56:	8c e8       	ldi	r24, 0x8C	; 140
    1a58:	94 e0       	ldi	r25, 0x04	; 4
    1a5a:	d5 d0       	rcall	.+426    	; 0x1c06 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    1a5c:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a62:	69 85       	ldd	r22, Y+9	; 0x09
    1a64:	ce 01       	movw	r24, r28
}
    1a66:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    1a68:	cf 91       	pop	r28
    1a6a:	ad cf       	rjmp	.-166    	; 0x19c6 <_ZN17LiquidCrystal_I2C5beginEhhh>

00001a6c <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    1a6c:	f1 cf       	rjmp	.-30     	; 0x1a50 <_ZN17LiquidCrystal_I2C9init_privEv>

00001a6e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1a6e:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <_ZN7TwoWire14rxBufferLengthE>
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <_ZN7TwoWire13rxBufferIndexE>
    1a78:	82 1b       	sub	r24, r18
    1a7a:	91 09       	sbc	r25, r1
    1a7c:	08 95       	ret

00001a7e <_ZN7TwoWire4readEv>:
    1a7e:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <_ZN7TwoWire13rxBufferIndexE>
    1a82:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <_ZN7TwoWire14rxBufferLengthE>
    1a86:	98 17       	cp	r25, r24
    1a88:	50 f4       	brcc	.+20     	; 0x1a9e <_ZN7TwoWire4readEv+0x20>
    1a8a:	e9 2f       	mov	r30, r25
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	ee 53       	subi	r30, 0x3E	; 62
    1a90:	fb 4f       	sbci	r31, 0xFB	; 251
    1a92:	20 81       	ld	r18, Z
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	9f 5f       	subi	r25, 0xFF	; 255
    1a98:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <_ZN7TwoWire13rxBufferIndexE>
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <_ZN7TwoWire4readEv+0x24>
    1a9e:	2f ef       	ldi	r18, 0xFF	; 255
    1aa0:	3f ef       	ldi	r19, 0xFF	; 255
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	08 95       	ret

00001aa6 <_ZN7TwoWire4peekEv>:
    1aa6:	e0 91 c1 04 	lds	r30, 0x04C1	; 0x8004c1 <_ZN7TwoWire13rxBufferIndexE>
    1aaa:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <_ZN7TwoWire14rxBufferLengthE>
    1aae:	e8 17       	cp	r30, r24
    1ab0:	30 f4       	brcc	.+12     	; 0x1abe <_ZN7TwoWire4peekEv+0x18>
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	ee 53       	subi	r30, 0x3E	; 62
    1ab6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ab8:	80 81       	ld	r24, Z
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	08 95       	ret
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	9f ef       	ldi	r25, 0xFF	; 255
    1ac2:	08 95       	ret

00001ac4 <_ZN7TwoWire5flushEv>:
    1ac4:	08 95       	ret

00001ac6 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	ec 01       	movw	r28, r24
    1acc:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <_ZN7TwoWire14user_onReceiveE>
    1ad0:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <_ZN7TwoWire14user_onReceiveE+0x1>
    1ad4:	30 97       	sbiw	r30, 0x00	; 0
    1ad6:	f1 f0       	breq	.+60     	; 0x1b14 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1ad8:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <_ZN7TwoWire13rxBufferIndexE>
    1adc:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <_ZN7TwoWire14rxBufferLengthE>
    1ae0:	98 17       	cp	r25, r24
    1ae2:	c0 f0       	brcs	.+48     	; 0x1b14 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	29 2f       	mov	r18, r25
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	26 17       	cp	r18, r22
    1aec:	37 07       	cpc	r19, r23
    1aee:	54 f4       	brge	.+20     	; 0x1b04 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1af0:	de 01       	movw	r26, r28
    1af2:	a2 0f       	add	r26, r18
    1af4:	b3 1f       	adc	r27, r19
    1af6:	4c 91       	ld	r20, X
    1af8:	d9 01       	movw	r26, r18
    1afa:	ae 53       	subi	r26, 0x3E	; 62
    1afc:	bb 4f       	sbci	r27, 0xFB	; 251
    1afe:	4c 93       	st	X, r20
    1b00:	9f 5f       	subi	r25, 0xFF	; 255
    1b02:	f1 cf       	rjmp	.-30     	; 0x1ae6 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1b04:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <_ZN7TwoWire13rxBufferIndexE>
    1b08:	60 93 c0 04 	sts	0x04C0, r22	; 0x8004c0 <_ZN7TwoWire14rxBufferLengthE>
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	19 94       	eijmp
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	08 95       	ret

00001b1a <_ZN7TwoWire16onRequestServiceEv>:
    1b1a:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <_ZN7TwoWire14user_onRequestE>
    1b1e:	f0 91 9b 04 	lds	r31, 0x049B	; 0x80049b <_ZN7TwoWire14user_onRequestE+0x1>
    1b22:	30 97       	sbiw	r30, 0x00	; 0
    1b24:	29 f0       	breq	.+10     	; 0x1b30 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1b26:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZN7TwoWire13txBufferIndexE>
    1b2a:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZN7TwoWire14txBufferLengthE>
    1b2e:	19 94       	eijmp
    1b30:	08 95       	ret

00001b32 <_ZN7TwoWire5writeEPKhj>:
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	7c 01       	movw	r14, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	8a 01       	movw	r16, r20
    1b48:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <_ZN7TwoWire12transmittingE>
    1b4c:	22 23       	and	r18, r18
    1b4e:	89 f0       	breq	.+34     	; 0x1b72 <_ZN7TwoWire5writeEPKhj+0x40>
    1b50:	eb 01       	movw	r28, r22
    1b52:	6b 01       	movw	r12, r22
    1b54:	c4 0e       	add	r12, r20
    1b56:	d5 1e       	adc	r13, r21
    1b58:	cc 15       	cp	r28, r12
    1b5a:	dd 05       	cpc	r29, r13
    1b5c:	61 f0       	breq	.+24     	; 0x1b76 <_ZN7TwoWire5writeEPKhj+0x44>
    1b5e:	69 91       	ld	r22, Y+
    1b60:	d7 01       	movw	r26, r14
    1b62:	ed 91       	ld	r30, X+
    1b64:	fc 91       	ld	r31, X
    1b66:	01 90       	ld	r0, Z+
    1b68:	f0 81       	ld	r31, Z
    1b6a:	e0 2d       	mov	r30, r0
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	19 95       	eicall
    1b70:	f3 cf       	rjmp	.-26     	; 0x1b58 <_ZN7TwoWire5writeEPKhj+0x26>
    1b72:	64 2f       	mov	r22, r20
    1b74:	eb d0       	rcall	.+470    	; 0x1d4c <twi_transmit>
    1b76:	c8 01       	movw	r24, r16
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	df 90       	pop	r13
    1b86:	cf 90       	pop	r12
    1b88:	08 95       	ret

00001b8a <_ZN7TwoWire5writeEh>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	1f 92       	push	r1
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	69 83       	std	Y+1, r22	; 0x01
    1b96:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <_ZN7TwoWire12transmittingE>
    1b9a:	22 23       	and	r18, r18
    1b9c:	d1 f0       	breq	.+52     	; 0x1bd2 <_ZN7TwoWire5writeEh+0x48>
    1b9e:	20 91 9d 04 	lds	r18, 0x049D	; 0x80049d <_ZN7TwoWire14txBufferLengthE>
    1ba2:	20 32       	cpi	r18, 0x20	; 32
    1ba4:	40 f0       	brcs	.+16     	; 0x1bb6 <_ZN7TwoWire5writeEh+0x2c>
    1ba6:	21 e0       	ldi	r18, 0x01	; 1
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	fc 01       	movw	r30, r24
    1bac:	33 83       	std	Z+3, r19	; 0x03
    1bae:	22 83       	std	Z+2, r18	; 0x02
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	14 c0       	rjmp	.+40     	; 0x1bde <_ZN7TwoWire5writeEh+0x54>
    1bb6:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <_ZN7TwoWire13txBufferIndexE>
    1bba:	e8 2f       	mov	r30, r24
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	e1 56       	subi	r30, 0x61	; 97
    1bc0:	fb 4f       	sbci	r31, 0xFB	; 251
    1bc2:	99 81       	ldd	r25, Y+1	; 0x01
    1bc4:	90 83       	st	Z, r25
    1bc6:	8f 5f       	subi	r24, 0xFF	; 255
    1bc8:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <_ZN7TwoWire13txBufferIndexE>
    1bcc:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <_ZN7TwoWire14txBufferLengthE>
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <_ZN7TwoWire5writeEh+0x50>
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	b9 d0       	rcall	.+370    	; 0x1d4c <twi_transmit>
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0f 90       	pop	r0
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <_ZN7TwoWireC1Ev>:
    1be6:	fc 01       	movw	r30, r24
    1be8:	13 82       	std	Z+3, r1	; 0x03
    1bea:	12 82       	std	Z+2, r1	; 0x02
    1bec:	88 ee       	ldi	r24, 0xE8	; 232
    1bee:	93 e0       	ldi	r25, 0x03	; 3
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	84 83       	std	Z+4, r24	; 0x04
    1bf6:	95 83       	std	Z+5, r25	; 0x05
    1bf8:	a6 83       	std	Z+6, r26	; 0x06
    1bfa:	b7 83       	std	Z+7, r27	; 0x07
    1bfc:	8f e1       	ldi	r24, 0x1F	; 31
    1bfe:	93 e0       	ldi	r25, 0x03	; 3
    1c00:	91 83       	std	Z+1, r25	; 0x01
    1c02:	80 83       	st	Z, r24
    1c04:	08 95       	ret

00001c06 <_ZN7TwoWire5beginEv>:
    1c06:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <_ZN7TwoWire13rxBufferIndexE>
    1c0a:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <_ZN7TwoWire14rxBufferLengthE>
    1c0e:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZN7TwoWire13txBufferIndexE>
    1c12:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZN7TwoWire14txBufferLengthE>
    1c16:	28 d0       	rcall	.+80     	; 0x1c68 <twi_init>
    1c18:	8d e8       	ldi	r24, 0x8D	; 141
    1c1a:	9d e0       	ldi	r25, 0x0D	; 13
    1c1c:	c4 d0       	rcall	.+392    	; 0x1da6 <twi_attachSlaveTxEvent>
    1c1e:	83 e6       	ldi	r24, 0x63	; 99
    1c20:	9d e0       	ldi	r25, 0x0D	; 13
    1c22:	bc c0       	rjmp	.+376    	; 0x1d9c <twi_attachSlaveRxEvent>

00001c24 <_ZN7TwoWire17beginTransmissionEh>:
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_ZN7TwoWire12transmittingE>
    1c2a:	60 93 bf 04 	sts	0x04BF, r22	; 0x8004bf <_ZN7TwoWire9txAddressE>
    1c2e:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZN7TwoWire13txBufferIndexE>
    1c32:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZN7TwoWire14txBufferLengthE>
    1c36:	08 95       	ret

00001c38 <_ZN7TwoWire15endTransmissionEh>:
    1c38:	0f 93       	push	r16
    1c3a:	06 2f       	mov	r16, r22
    1c3c:	21 e0       	ldi	r18, 0x01	; 1
    1c3e:	40 91 9d 04 	lds	r20, 0x049D	; 0x80049d <_ZN7TwoWire14txBufferLengthE>
    1c42:	6f e9       	ldi	r22, 0x9F	; 159
    1c44:	74 e0       	ldi	r23, 0x04	; 4
    1c46:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <_ZN7TwoWire9txAddressE>
    1c4a:	2a d0       	rcall	.+84     	; 0x1ca0 <twi_writeTo>
    1c4c:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZN7TwoWire13txBufferIndexE>
    1c50:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZN7TwoWire14txBufferLengthE>
    1c54:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZN7TwoWire12transmittingE>
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <_ZN7TwoWire15endTransmissionEv>:
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	ec cf       	rjmp	.-40     	; 0x1c38 <_ZN7TwoWire15endTransmissionEh>

00001c60 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1c60:	8c e8       	ldi	r24, 0x8C	; 140
    1c62:	94 e0       	ldi	r25, 0x04	; 4
    1c64:	c0 cf       	rjmp	.-128    	; 0x1be6 <_ZN7TwoWireC1Ev>

00001c66 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1c66:	08 95       	ret

00001c68 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c68:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <twi_state>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <twi_sendStop>
    1c72:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <twi_inRepStart>
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	84 e1       	ldi	r24, 0x14	; 20
    1c7a:	d8 dd       	rcall	.-1104   	; 0x182c <digitalWrite>
    1c7c:	61 e0       	ldi	r22, 0x01	; 1
    1c7e:	85 e1       	ldi	r24, 0x15	; 21
    1c80:	d5 dd       	rcall	.-1110   	; 0x182c <digitalWrite>
    1c82:	e9 eb       	ldi	r30, 0xB9	; 185
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8e 7f       	andi	r24, 0xFE	; 254
    1c8a:	80 83       	st	Z, r24
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8d 7f       	andi	r24, 0xFD	; 253
    1c90:	80 83       	st	Z, r24
    1c92:	88 e4       	ldi	r24, 0x48	; 72
    1c94:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1c98:	85 e4       	ldi	r24, 0x45	; 69
    1c9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c9e:	08 95       	ret

00001ca0 <twi_writeTo>:
    1ca0:	0f 93       	push	r16
    1ca2:	41 32       	cpi	r20, 0x21	; 33
    1ca4:	08 f0       	brcs	.+2      	; 0x1ca8 <twi_writeTo+0x8>
    1ca6:	4a c0       	rjmp	.+148    	; 0x1d3c <twi_writeTo+0x9c>
    1ca8:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <twi_state>
    1cac:	91 11       	cpse	r25, r1
    1cae:	fc cf       	rjmp	.-8      	; 0x1ca8 <twi_writeTo+0x8>
    1cb0:	32 e0       	ldi	r19, 0x02	; 2
    1cb2:	30 93 4f 05 	sts	0x054F, r19	; 0x80054f <twi_state>
    1cb6:	00 93 4d 05 	sts	0x054D, r16	; 0x80054d <twi_sendStop>
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	30 93 e2 04 	sts	0x04E2, r19	; 0x8004e2 <twi_error>
    1cc0:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <twi_masterBufferIndex>
    1cc4:	40 93 26 05 	sts	0x0526, r20	; 0x800526 <twi_masterBufferLength>
    1cc8:	56 2f       	mov	r21, r22
    1cca:	a8 e2       	ldi	r26, 0x28	; 40
    1ccc:	b5 e0       	ldi	r27, 0x05	; 5
    1cce:	fb 01       	movw	r30, r22
    1cd0:	3e 2f       	mov	r19, r30
    1cd2:	35 1b       	sub	r19, r21
    1cd4:	34 17       	cp	r19, r20
    1cd6:	18 f4       	brcc	.+6      	; 0x1cde <twi_writeTo+0x3e>
    1cd8:	31 91       	ld	r19, Z+
    1cda:	3d 93       	st	X+, r19
    1cdc:	f9 cf       	rjmp	.-14     	; 0x1cd0 <twi_writeTo+0x30>
    1cde:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <twi_slarw>
    1ce2:	30 91 4e 05 	lds	r19, 0x054E	; 0x80054e <twi_slarw>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	83 2b       	or	r24, r19
    1cea:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <twi_slarw>
    1cee:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <twi_inRepStart>
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	61 f4       	brne	.+24     	; 0x1d0e <twi_writeTo+0x6e>
    1cf6:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <twi_inRepStart>
    1cfa:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <twi_slarw>
    1cfe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1d02:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1d06:	83 fd       	sbrc	r24, 3
    1d08:	f8 cf       	rjmp	.-16     	; 0x1cfa <twi_writeTo+0x5a>
    1d0a:	85 ec       	ldi	r24, 0xC5	; 197
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <twi_writeTo+0x70>
    1d0e:	85 ee       	ldi	r24, 0xE5	; 229
    1d10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1d14:	22 23       	and	r18, r18
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <twi_writeTo+0x80>
    1d18:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <twi_state>
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	d1 f3       	breq	.-12     	; 0x1d14 <twi_writeTo+0x74>
    1d20:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_error>
    1d24:	8f 3f       	cpi	r24, 0xFF	; 255
    1d26:	79 f0       	breq	.+30     	; 0x1d46 <twi_writeTo+0xa6>
    1d28:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_error>
    1d2c:	80 32       	cpi	r24, 0x20	; 32
    1d2e:	41 f0       	breq	.+16     	; 0x1d40 <twi_writeTo+0xa0>
    1d30:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_error>
    1d34:	80 33       	cpi	r24, 0x30	; 48
    1d36:	31 f0       	breq	.+12     	; 0x1d44 <twi_writeTo+0xa4>
    1d38:	94 e0       	ldi	r25, 0x04	; 4
    1d3a:	05 c0       	rjmp	.+10     	; 0x1d46 <twi_writeTo+0xa6>
    1d3c:	91 e0       	ldi	r25, 0x01	; 1
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <twi_writeTo+0xa6>
    1d40:	92 e0       	ldi	r25, 0x02	; 2
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <twi_writeTo+0xa6>
    1d44:	93 e0       	ldi	r25, 0x03	; 3
    1d46:	89 2f       	mov	r24, r25
    1d48:	0f 91       	pop	r16
    1d4a:	08 95       	ret

00001d4c <twi_transmit>:
    1d4c:	40 91 04 05 	lds	r20, 0x0504	; 0x800504 <twi_txBufferLength>
    1d50:	26 2f       	mov	r18, r22
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	24 0f       	add	r18, r20
    1d56:	31 1d       	adc	r19, r1
    1d58:	21 32       	cpi	r18, 0x21	; 33
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	dc f4       	brge	.+54     	; 0x1d94 <twi_transmit+0x48>
    1d5e:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <twi_state>
    1d62:	24 30       	cpi	r18, 0x04	; 4
    1d64:	c9 f4       	brne	.+50     	; 0x1d98 <twi_transmit+0x4c>
    1d66:	fc 01       	movw	r30, r24
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	86 17       	cp	r24, r22
    1d6e:	58 f4       	brcc	.+22     	; 0x1d86 <twi_transmit+0x3a>
    1d70:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <twi_txBufferLength>
    1d74:	21 91       	ld	r18, Z+
    1d76:	dc 01       	movw	r26, r24
    1d78:	aa 5f       	subi	r26, 0xFA	; 250
    1d7a:	ba 4f       	sbci	r27, 0xFA	; 250
    1d7c:	a3 0f       	add	r26, r19
    1d7e:	b1 1d       	adc	r27, r1
    1d80:	2c 93       	st	X, r18
    1d82:	01 96       	adiw	r24, 0x01	; 1
    1d84:	f3 cf       	rjmp	.-26     	; 0x1d6c <twi_transmit+0x20>
    1d86:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_txBufferLength>
    1d8a:	68 0f       	add	r22, r24
    1d8c:	60 93 04 05 	sts	0x0504, r22	; 0x800504 <twi_txBufferLength>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	08 95       	ret
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	08 95       	ret
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	08 95       	ret

00001d9c <twi_attachSlaveRxEvent>:
    1d9c:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <twi_onSlaveReceive+0x1>
    1da0:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_onSlaveReceive>
    1da4:	08 95       	ret

00001da6 <twi_attachSlaveTxEvent>:
    1da6:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <twi_onSlaveTransmit+0x1>
    1daa:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_onSlaveTransmit>
    1dae:	08 95       	ret

00001db0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1db0:	85 ed       	ldi	r24, 0xD5	; 213
    1db2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1db6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1dba:	84 fd       	sbrc	r24, 4
    1dbc:	fc cf       	rjmp	.-8      	; 0x1db6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1dbe:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <twi_state>
    1dc2:	08 95       	ret

00001dc4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1dc4:	85 ec       	ldi	r24, 0xC5	; 197
    1dc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    1dca:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <twi_state>
    1dce:	08 95       	ret

00001dd0 <__vector_39>:
}

ISR(TWI_vect)
{
    1dd0:	1f 92       	push	r1
    1dd2:	0f 92       	push	r0
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	0f 92       	push	r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	0b b6       	in	r0, 0x3b	; 59
    1ddc:	0f 92       	push	r0
    1dde:	2f 93       	push	r18
    1de0:	3f 93       	push	r19
    1de2:	4f 93       	push	r20
    1de4:	5f 93       	push	r21
    1de6:	6f 93       	push	r22
    1de8:	7f 93       	push	r23
    1dea:	8f 93       	push	r24
    1dec:	9f 93       	push	r25
    1dee:	af 93       	push	r26
    1df0:	bf 93       	push	r27
    1df2:	ef 93       	push	r30
    1df4:	ff 93       	push	r31
  switch(TW_STATUS){
    1df6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1dfa:	88 7f       	andi	r24, 0xF8	; 248
    1dfc:	80 36       	cpi	r24, 0x60	; 96
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <__vector_39+0x32>
    1e00:	9d c0       	rjmp	.+314    	; 0x1f3c <__vector_39+0x16c>
    1e02:	70 f5       	brcc	.+92     	; 0x1e60 <__vector_39+0x90>
    1e04:	88 32       	cpi	r24, 0x28	; 40
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <__vector_39+0x3a>
    1e08:	5c c0       	rjmp	.+184    	; 0x1ec2 <__vector_39+0xf2>
    1e0a:	90 f4       	brcc	.+36     	; 0x1e30 <__vector_39+0x60>
    1e0c:	80 31       	cpi	r24, 0x10	; 16
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <__vector_39+0x42>
    1e10:	55 c0       	rjmp	.+170    	; 0x1ebc <__vector_39+0xec>
    1e12:	38 f4       	brcc	.+14     	; 0x1e22 <__vector_39+0x52>
    1e14:	88 23       	and	r24, r24
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <__vector_39+0x4a>
    1e18:	f3 c0       	rjmp	.+486    	; 0x2000 <__vector_39+0x230>
    1e1a:	88 30       	cpi	r24, 0x08	; 8
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <__vector_39+0x50>
    1e1e:	4e c0       	rjmp	.+156    	; 0x1ebc <__vector_39+0xec>
    1e20:	f2 c0       	rjmp	.+484    	; 0x2006 <__vector_39+0x236>
    1e22:	88 31       	cpi	r24, 0x18	; 24
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <__vector_39+0x58>
    1e26:	4d c0       	rjmp	.+154    	; 0x1ec2 <__vector_39+0xf2>
    1e28:	80 32       	cpi	r24, 0x20	; 32
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <__vector_39+0x5e>
    1e2c:	5e c0       	rjmp	.+188    	; 0x1eea <__vector_39+0x11a>
    1e2e:	eb c0       	rjmp	.+470    	; 0x2006 <__vector_39+0x236>
    1e30:	80 34       	cpi	r24, 0x40	; 64
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <__vector_39+0x66>
    1e34:	69 c0       	rjmp	.+210    	; 0x1f08 <__vector_39+0x138>
    1e36:	50 f4       	brcc	.+20     	; 0x1e4c <__vector_39+0x7c>
    1e38:	80 33       	cpi	r24, 0x30	; 48
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <__vector_39+0x6e>
    1e3c:	56 c0       	rjmp	.+172    	; 0x1eea <__vector_39+0x11a>
    1e3e:	88 33       	cpi	r24, 0x38	; 56
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <__vector_39+0x74>
    1e42:	e1 c0       	rjmp	.+450    	; 0x2006 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e44:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <twi_error>
      twi_releaseBus();
    1e48:	bd df       	rcall	.-134    	; 0x1dc4 <twi_releaseBus>
      break;
    1e4a:	dd c0       	rjmp	.+442    	; 0x2006 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e4c:	80 35       	cpi	r24, 0x50	; 80
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <__vector_39+0x82>
    1e50:	4f c0       	rjmp	.+158    	; 0x1ef0 <__vector_39+0x120>
    1e52:	88 35       	cpi	r24, 0x58	; 88
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <__vector_39+0x88>
    1e56:	5d c0       	rjmp	.+186    	; 0x1f12 <__vector_39+0x142>
    1e58:	88 34       	cpi	r24, 0x48	; 72
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <__vector_39+0x8e>
    1e5c:	d4 c0       	rjmp	.+424    	; 0x2006 <__vector_39+0x236>
    1e5e:	d2 c0       	rjmp	.+420    	; 0x2004 <__vector_39+0x234>
    1e60:	88 39       	cpi	r24, 0x98	; 152
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <__vector_39+0x96>
    1e64:	c3 c0       	rjmp	.+390    	; 0x1fec <__vector_39+0x21c>
    1e66:	a8 f4       	brcc	.+42     	; 0x1e92 <__vector_39+0xc2>
    1e68:	88 37       	cpi	r24, 0x78	; 120
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <__vector_39+0x9e>
    1e6c:	67 c0       	rjmp	.+206    	; 0x1f3c <__vector_39+0x16c>
    1e6e:	38 f4       	brcc	.+14     	; 0x1e7e <__vector_39+0xae>
    1e70:	88 36       	cpi	r24, 0x68	; 104
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <__vector_39+0xa6>
    1e74:	63 c0       	rjmp	.+198    	; 0x1f3c <__vector_39+0x16c>
    1e76:	80 37       	cpi	r24, 0x70	; 112
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <__vector_39+0xac>
    1e7a:	60 c0       	rjmp	.+192    	; 0x1f3c <__vector_39+0x16c>
    1e7c:	c4 c0       	rjmp	.+392    	; 0x2006 <__vector_39+0x236>
    1e7e:	88 38       	cpi	r24, 0x88	; 136
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <__vector_39+0xb4>
    1e82:	b4 c0       	rjmp	.+360    	; 0x1fec <__vector_39+0x21c>
    1e84:	80 39       	cpi	r24, 0x90	; 144
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <__vector_39+0xba>
    1e88:	5f c0       	rjmp	.+190    	; 0x1f48 <__vector_39+0x178>
    1e8a:	80 38       	cpi	r24, 0x80	; 128
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <__vector_39+0xc0>
    1e8e:	bb c0       	rjmp	.+374    	; 0x2006 <__vector_39+0x236>
    1e90:	5b c0       	rjmp	.+182    	; 0x1f48 <__vector_39+0x178>
    1e92:	80 3b       	cpi	r24, 0xB0	; 176
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <__vector_39+0xc8>
    1e96:	82 c0       	rjmp	.+260    	; 0x1f9c <__vector_39+0x1cc>
    1e98:	38 f4       	brcc	.+14     	; 0x1ea8 <__vector_39+0xd8>
    1e9a:	80 3a       	cpi	r24, 0xA0	; 160
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <__vector_39+0xd0>
    1e9e:	66 c0       	rjmp	.+204    	; 0x1f6c <__vector_39+0x19c>
    1ea0:	88 3a       	cpi	r24, 0xA8	; 168
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <__vector_39+0xd6>
    1ea4:	7b c0       	rjmp	.+246    	; 0x1f9c <__vector_39+0x1cc>
    1ea6:	af c0       	rjmp	.+350    	; 0x2006 <__vector_39+0x236>
    1ea8:	80 3c       	cpi	r24, 0xC0	; 192
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <__vector_39+0xde>
    1eac:	a3 c0       	rjmp	.+326    	; 0x1ff4 <__vector_39+0x224>
    1eae:	88 3c       	cpi	r24, 0xC8	; 200
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <__vector_39+0xe4>
    1eb2:	a0 c0       	rjmp	.+320    	; 0x1ff4 <__vector_39+0x224>
    1eb4:	88 3b       	cpi	r24, 0xB8	; 184
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <__vector_39+0xea>
    1eb8:	86 c0       	rjmp	.+268    	; 0x1fc6 <__vector_39+0x1f6>
    1eba:	a5 c0       	rjmp	.+330    	; 0x2006 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1ebc:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <twi_slarw>
    1ec0:	10 c0       	rjmp	.+32     	; 0x1ee2 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ec2:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <twi_masterBufferIndex>
    1ec6:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <twi_masterBufferLength>
    1eca:	98 17       	cp	r25, r24
    1ecc:	70 f5       	brcc	.+92     	; 0x1f2a <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1ece:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <twi_masterBufferIndex>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	8e 0f       	add	r24, r30
    1ed6:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <twi_masterBufferIndex>
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	e8 5d       	subi	r30, 0xD8	; 216
    1ede:	fa 4f       	sbci	r31, 0xFA	; 250
    1ee0:	80 81       	ld	r24, Z
    1ee2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ee6:	85 ec       	ldi	r24, 0xC5	; 197
    1ee8:	82 c0       	rjmp	.+260    	; 0x1fee <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1eea:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <twi_error>
    1eee:	8a c0       	rjmp	.+276    	; 0x2004 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1ef0:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <twi_masterBufferIndex>
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	8e 0f       	add	r24, r30
    1ef8:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <twi_masterBufferIndex>
    1efc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	e8 5d       	subi	r30, 0xD8	; 216
    1f04:	fa 4f       	sbci	r31, 0xFA	; 250
    1f06:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f08:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <twi_masterBufferIndex>
    1f0c:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <twi_masterBufferLength>
    1f10:	6a c0       	rjmp	.+212    	; 0x1fe6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f12:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <twi_masterBufferIndex>
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	8e 0f       	add	r24, r30
    1f1a:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <twi_masterBufferIndex>
    1f1e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	e8 5d       	subi	r30, 0xD8	; 216
    1f26:	fa 4f       	sbci	r31, 0xFA	; 250
    1f28:	80 83       	st	Z, r24
	if (twi_sendStop)
    1f2a:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <twi_sendStop>
    1f2e:	81 11       	cpse	r24, r1
    1f30:	69 c0       	rjmp	.+210    	; 0x2004 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1f38:	84 ea       	ldi	r24, 0xA4	; 164
    1f3a:	5d c0       	rjmp	.+186    	; 0x1ff6 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1f3c:	83 e0       	ldi	r24, 0x03	; 3
    1f3e:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1f42:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_rxBufferIndex>
    1f46:	cf cf       	rjmp	.-98     	; 0x1ee6 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f48:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    1f4c:	80 32       	cpi	r24, 0x20	; 32
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <__vector_39+0x182>
    1f50:	4d c0       	rjmp	.+154    	; 0x1fec <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1f52:	e0 91 e3 04 	lds	r30, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	8e 0f       	add	r24, r30
    1f5a:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_rxBufferIndex>
    1f5e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	ec 51       	subi	r30, 0x1C	; 28
    1f66:	fb 4f       	sbci	r31, 0xFB	; 251
    1f68:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1f6a:	bd cf       	rjmp	.-134    	; 0x1ee6 <__vector_39+0x116>
    1f6c:	2b df       	rcall	.-426    	; 0x1dc4 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f6e:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    1f72:	80 32       	cpi	r24, 0x20	; 32
    1f74:	30 f4       	brcc	.+12     	; 0x1f82 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1f76:	e0 91 e3 04 	lds	r30, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	ec 51       	subi	r30, 0x1C	; 28
    1f7e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f80:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1f82:	60 91 e3 04 	lds	r22, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    1f86:	70 e0       	ldi	r23, 0x00	; 0
    1f88:	e0 91 48 05 	lds	r30, 0x0548	; 0x800548 <twi_onSlaveReceive>
    1f8c:	f0 91 49 05 	lds	r31, 0x0549	; 0x800549 <twi_onSlaveReceive+0x1>
    1f90:	84 ee       	ldi	r24, 0xE4	; 228
    1f92:	94 e0       	ldi	r25, 0x04	; 4
    1f94:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1f96:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_rxBufferIndex>
      break;
    1f9a:	35 c0       	rjmp	.+106    	; 0x2006 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1f9c:	84 e0       	ldi	r24, 0x04	; 4
    1f9e:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1fa2:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1fa6:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1faa:	e0 91 4a 05 	lds	r30, 0x054A	; 0x80054a <twi_onSlaveTransmit>
    1fae:	f0 91 4b 05 	lds	r31, 0x054B	; 0x80054b <twi_onSlaveTransmit+0x1>
    1fb2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1fb4:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_txBufferLength>
    1fb8:	81 11       	cpse	r24, r1
    1fba:	05 c0       	rjmp	.+10     	; 0x1fc6 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1fc2:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1fc6:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <twi_txBufferIndex>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	8e 0f       	add	r24, r30
    1fce:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_txBufferIndex>
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	ea 5f       	subi	r30, 0xFA	; 250
    1fd6:	fa 4f       	sbci	r31, 0xFA	; 250
    1fd8:	80 81       	ld	r24, Z
    1fda:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1fde:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <twi_txBufferIndex>
    1fe2:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_txBufferLength>
    1fe6:	98 17       	cp	r25, r24
    1fe8:	08 f4       	brcc	.+2      	; 0x1fec <__vector_39+0x21c>
    1fea:	7d cf       	rjmp	.-262    	; 0x1ee6 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1fec:	85 e8       	ldi	r24, 0x85	; 133
    1fee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ff2:	09 c0       	rjmp	.+18     	; 0x2006 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ff4:	85 ec       	ldi	r24, 0xC5	; 197
    1ff6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1ffa:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <twi_state>
      break;
    1ffe:	03 c0       	rjmp	.+6      	; 0x2006 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2000:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <twi_error>
      twi_stop();
    2004:	d5 de       	rcall	.-598    	; 0x1db0 <twi_stop>
      break;
  }
}
    2006:	ff 91       	pop	r31
    2008:	ef 91       	pop	r30
    200a:	bf 91       	pop	r27
    200c:	af 91       	pop	r26
    200e:	9f 91       	pop	r25
    2010:	8f 91       	pop	r24
    2012:	7f 91       	pop	r23
    2014:	6f 91       	pop	r22
    2016:	5f 91       	pop	r21
    2018:	4f 91       	pop	r20
    201a:	3f 91       	pop	r19
    201c:	2f 91       	pop	r18
    201e:	0f 90       	pop	r0
    2020:	0b be       	out	0x3b, r0	; 59
    2022:	0f 90       	pop	r0
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	0f 90       	pop	r0
    2028:	1f 90       	pop	r1
    202a:	18 95       	reti

0000202c <__udivmodsi4>:
    202c:	a1 e2       	ldi	r26, 0x21	; 33
    202e:	1a 2e       	mov	r1, r26
    2030:	aa 1b       	sub	r26, r26
    2032:	bb 1b       	sub	r27, r27
    2034:	fd 01       	movw	r30, r26
    2036:	0d c0       	rjmp	.+26     	; 0x2052 <__udivmodsi4_ep>

00002038 <__udivmodsi4_loop>:
    2038:	aa 1f       	adc	r26, r26
    203a:	bb 1f       	adc	r27, r27
    203c:	ee 1f       	adc	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	a2 17       	cp	r26, r18
    2042:	b3 07       	cpc	r27, r19
    2044:	e4 07       	cpc	r30, r20
    2046:	f5 07       	cpc	r31, r21
    2048:	20 f0       	brcs	.+8      	; 0x2052 <__udivmodsi4_ep>
    204a:	a2 1b       	sub	r26, r18
    204c:	b3 0b       	sbc	r27, r19
    204e:	e4 0b       	sbc	r30, r20
    2050:	f5 0b       	sbc	r31, r21

00002052 <__udivmodsi4_ep>:
    2052:	66 1f       	adc	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	88 1f       	adc	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	1a 94       	dec	r1
    205c:	69 f7       	brne	.-38     	; 0x2038 <__udivmodsi4_loop>
    205e:	60 95       	com	r22
    2060:	70 95       	com	r23
    2062:	80 95       	com	r24
    2064:	90 95       	com	r25
    2066:	9b 01       	movw	r18, r22
    2068:	ac 01       	movw	r20, r24
    206a:	bd 01       	movw	r22, r26
    206c:	cf 01       	movw	r24, r30
    206e:	08 95       	ret

00002070 <__tablejump2__>:
    2070:	ee 0f       	add	r30, r30
    2072:	ff 1f       	adc	r31, r31
    2074:	88 1f       	adc	r24, r24
    2076:	8b bf       	out	0x3b, r24	; 59
    2078:	07 90       	elpm	r0, Z+
    207a:	f6 91       	elpm	r31, Z
    207c:	e0 2d       	mov	r30, r0
    207e:	19 94       	eijmp

00002080 <sprintf>:
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	2e 97       	sbiw	r28, 0x0e	; 14
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	0e 89       	ldd	r16, Y+22	; 0x16
    209a:	1f 89       	ldd	r17, Y+23	; 0x17
    209c:	86 e0       	ldi	r24, 0x06	; 6
    209e:	8c 83       	std	Y+4, r24	; 0x04
    20a0:	1a 83       	std	Y+2, r17	; 0x02
    20a2:	09 83       	std	Y+1, r16	; 0x01
    20a4:	8f ef       	ldi	r24, 0xFF	; 255
    20a6:	9f e7       	ldi	r25, 0x7F	; 127
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	ae 01       	movw	r20, r28
    20ae:	46 5e       	subi	r20, 0xE6	; 230
    20b0:	5f 4f       	sbci	r21, 0xFF	; 255
    20b2:	68 8d       	ldd	r22, Y+24	; 0x18
    20b4:	79 8d       	ldd	r23, Y+25	; 0x19
    20b6:	ce 01       	movw	r24, r28
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	10 d0       	rcall	.+32     	; 0x20dc <vfprintf>
    20bc:	ef 81       	ldd	r30, Y+7	; 0x07
    20be:	f8 85       	ldd	r31, Y+8	; 0x08
    20c0:	e0 0f       	add	r30, r16
    20c2:	f1 1f       	adc	r31, r17
    20c4:	10 82       	st	Z, r1
    20c6:	2e 96       	adiw	r28, 0x0e	; 14
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	1f 91       	pop	r17
    20d8:	0f 91       	pop	r16
    20da:	08 95       	ret

000020dc <vfprintf>:
    20dc:	2f 92       	push	r2
    20de:	3f 92       	push	r3
    20e0:	4f 92       	push	r4
    20e2:	5f 92       	push	r5
    20e4:	6f 92       	push	r6
    20e6:	7f 92       	push	r7
    20e8:	8f 92       	push	r8
    20ea:	9f 92       	push	r9
    20ec:	af 92       	push	r10
    20ee:	bf 92       	push	r11
    20f0:	cf 92       	push	r12
    20f2:	df 92       	push	r13
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	2b 97       	sbiw	r28, 0x0b	; 11
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	6c 01       	movw	r12, r24
    2112:	7b 01       	movw	r14, r22
    2114:	8a 01       	movw	r16, r20
    2116:	fc 01       	movw	r30, r24
    2118:	17 82       	std	Z+7, r1	; 0x07
    211a:	16 82       	std	Z+6, r1	; 0x06
    211c:	83 81       	ldd	r24, Z+3	; 0x03
    211e:	81 ff       	sbrs	r24, 1
    2120:	bf c1       	rjmp	.+894    	; 0x24a0 <__stack+0x2a1>
    2122:	ce 01       	movw	r24, r28
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	3c 01       	movw	r6, r24
    2128:	f6 01       	movw	r30, r12
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	f7 01       	movw	r30, r14
    212e:	93 fd       	sbrc	r25, 3
    2130:	85 91       	lpm	r24, Z+
    2132:	93 ff       	sbrs	r25, 3
    2134:	81 91       	ld	r24, Z+
    2136:	7f 01       	movw	r14, r30
    2138:	88 23       	and	r24, r24
    213a:	09 f4       	brne	.+2      	; 0x213e <vfprintf+0x62>
    213c:	ad c1       	rjmp	.+858    	; 0x2498 <__stack+0x299>
    213e:	85 32       	cpi	r24, 0x25	; 37
    2140:	39 f4       	brne	.+14     	; 0x2150 <vfprintf+0x74>
    2142:	93 fd       	sbrc	r25, 3
    2144:	85 91       	lpm	r24, Z+
    2146:	93 ff       	sbrs	r25, 3
    2148:	81 91       	ld	r24, Z+
    214a:	7f 01       	movw	r14, r30
    214c:	85 32       	cpi	r24, 0x25	; 37
    214e:	21 f4       	brne	.+8      	; 0x2158 <vfprintf+0x7c>
    2150:	b6 01       	movw	r22, r12
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	d6 d1       	rcall	.+940    	; 0x2502 <fputc>
    2156:	e8 cf       	rjmp	.-48     	; 0x2128 <vfprintf+0x4c>
    2158:	91 2c       	mov	r9, r1
    215a:	21 2c       	mov	r2, r1
    215c:	31 2c       	mov	r3, r1
    215e:	ff e1       	ldi	r31, 0x1F	; 31
    2160:	f3 15       	cp	r31, r3
    2162:	d8 f0       	brcs	.+54     	; 0x219a <vfprintf+0xbe>
    2164:	8b 32       	cpi	r24, 0x2B	; 43
    2166:	79 f0       	breq	.+30     	; 0x2186 <vfprintf+0xaa>
    2168:	38 f4       	brcc	.+14     	; 0x2178 <vfprintf+0x9c>
    216a:	80 32       	cpi	r24, 0x20	; 32
    216c:	79 f0       	breq	.+30     	; 0x218c <vfprintf+0xb0>
    216e:	83 32       	cpi	r24, 0x23	; 35
    2170:	a1 f4       	brne	.+40     	; 0x219a <vfprintf+0xbe>
    2172:	23 2d       	mov	r18, r3
    2174:	20 61       	ori	r18, 0x10	; 16
    2176:	1d c0       	rjmp	.+58     	; 0x21b2 <vfprintf+0xd6>
    2178:	8d 32       	cpi	r24, 0x2D	; 45
    217a:	61 f0       	breq	.+24     	; 0x2194 <vfprintf+0xb8>
    217c:	80 33       	cpi	r24, 0x30	; 48
    217e:	69 f4       	brne	.+26     	; 0x219a <vfprintf+0xbe>
    2180:	23 2d       	mov	r18, r3
    2182:	21 60       	ori	r18, 0x01	; 1
    2184:	16 c0       	rjmp	.+44     	; 0x21b2 <vfprintf+0xd6>
    2186:	83 2d       	mov	r24, r3
    2188:	82 60       	ori	r24, 0x02	; 2
    218a:	38 2e       	mov	r3, r24
    218c:	e3 2d       	mov	r30, r3
    218e:	e4 60       	ori	r30, 0x04	; 4
    2190:	3e 2e       	mov	r3, r30
    2192:	2a c0       	rjmp	.+84     	; 0x21e8 <vfprintf+0x10c>
    2194:	f3 2d       	mov	r31, r3
    2196:	f8 60       	ori	r31, 0x08	; 8
    2198:	1d c0       	rjmp	.+58     	; 0x21d4 <vfprintf+0xf8>
    219a:	37 fc       	sbrc	r3, 7
    219c:	2d c0       	rjmp	.+90     	; 0x21f8 <vfprintf+0x11c>
    219e:	20 ed       	ldi	r18, 0xD0	; 208
    21a0:	28 0f       	add	r18, r24
    21a2:	2a 30       	cpi	r18, 0x0A	; 10
    21a4:	40 f0       	brcs	.+16     	; 0x21b6 <vfprintf+0xda>
    21a6:	8e 32       	cpi	r24, 0x2E	; 46
    21a8:	b9 f4       	brne	.+46     	; 0x21d8 <vfprintf+0xfc>
    21aa:	36 fc       	sbrc	r3, 6
    21ac:	75 c1       	rjmp	.+746    	; 0x2498 <__stack+0x299>
    21ae:	23 2d       	mov	r18, r3
    21b0:	20 64       	ori	r18, 0x40	; 64
    21b2:	32 2e       	mov	r3, r18
    21b4:	19 c0       	rjmp	.+50     	; 0x21e8 <vfprintf+0x10c>
    21b6:	36 fe       	sbrs	r3, 6
    21b8:	06 c0       	rjmp	.+12     	; 0x21c6 <vfprintf+0xea>
    21ba:	8a e0       	ldi	r24, 0x0A	; 10
    21bc:	98 9e       	mul	r9, r24
    21be:	20 0d       	add	r18, r0
    21c0:	11 24       	eor	r1, r1
    21c2:	92 2e       	mov	r9, r18
    21c4:	11 c0       	rjmp	.+34     	; 0x21e8 <vfprintf+0x10c>
    21c6:	ea e0       	ldi	r30, 0x0A	; 10
    21c8:	2e 9e       	mul	r2, r30
    21ca:	20 0d       	add	r18, r0
    21cc:	11 24       	eor	r1, r1
    21ce:	22 2e       	mov	r2, r18
    21d0:	f3 2d       	mov	r31, r3
    21d2:	f0 62       	ori	r31, 0x20	; 32
    21d4:	3f 2e       	mov	r3, r31
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <vfprintf+0x10c>
    21d8:	8c 36       	cpi	r24, 0x6C	; 108
    21da:	21 f4       	brne	.+8      	; 0x21e4 <vfprintf+0x108>
    21dc:	83 2d       	mov	r24, r3
    21de:	80 68       	ori	r24, 0x80	; 128
    21e0:	38 2e       	mov	r3, r24
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <vfprintf+0x10c>
    21e4:	88 36       	cpi	r24, 0x68	; 104
    21e6:	41 f4       	brne	.+16     	; 0x21f8 <vfprintf+0x11c>
    21e8:	f7 01       	movw	r30, r14
    21ea:	93 fd       	sbrc	r25, 3
    21ec:	85 91       	lpm	r24, Z+
    21ee:	93 ff       	sbrs	r25, 3
    21f0:	81 91       	ld	r24, Z+
    21f2:	7f 01       	movw	r14, r30
    21f4:	81 11       	cpse	r24, r1
    21f6:	b3 cf       	rjmp	.-154    	; 0x215e <vfprintf+0x82>
    21f8:	98 2f       	mov	r25, r24
    21fa:	9f 7d       	andi	r25, 0xDF	; 223
    21fc:	95 54       	subi	r25, 0x45	; 69
    21fe:	93 30       	cpi	r25, 0x03	; 3
    2200:	28 f4       	brcc	.+10     	; 0x220c <__stack+0xd>
    2202:	0c 5f       	subi	r16, 0xFC	; 252
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	9f e3       	ldi	r25, 0x3F	; 63
    2208:	99 83       	std	Y+1, r25	; 0x01
    220a:	0d c0       	rjmp	.+26     	; 0x2226 <__stack+0x27>
    220c:	83 36       	cpi	r24, 0x63	; 99
    220e:	31 f0       	breq	.+12     	; 0x221c <__stack+0x1d>
    2210:	83 37       	cpi	r24, 0x73	; 115
    2212:	71 f0       	breq	.+28     	; 0x2230 <__stack+0x31>
    2214:	83 35       	cpi	r24, 0x53	; 83
    2216:	09 f0       	breq	.+2      	; 0x221a <__stack+0x1b>
    2218:	55 c0       	rjmp	.+170    	; 0x22c4 <__stack+0xc5>
    221a:	20 c0       	rjmp	.+64     	; 0x225c <__stack+0x5d>
    221c:	f8 01       	movw	r30, r16
    221e:	80 81       	ld	r24, Z
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	0e 5f       	subi	r16, 0xFE	; 254
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	88 24       	eor	r8, r8
    2228:	83 94       	inc	r8
    222a:	91 2c       	mov	r9, r1
    222c:	53 01       	movw	r10, r6
    222e:	12 c0       	rjmp	.+36     	; 0x2254 <__stack+0x55>
    2230:	28 01       	movw	r4, r16
    2232:	f2 e0       	ldi	r31, 0x02	; 2
    2234:	4f 0e       	add	r4, r31
    2236:	51 1c       	adc	r5, r1
    2238:	f8 01       	movw	r30, r16
    223a:	a0 80       	ld	r10, Z
    223c:	b1 80       	ldd	r11, Z+1	; 0x01
    223e:	36 fe       	sbrs	r3, 6
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <__stack+0x49>
    2242:	69 2d       	mov	r22, r9
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	02 c0       	rjmp	.+4      	; 0x224c <__stack+0x4d>
    2248:	6f ef       	ldi	r22, 0xFF	; 255
    224a:	7f ef       	ldi	r23, 0xFF	; 255
    224c:	c5 01       	movw	r24, r10
    224e:	4e d1       	rcall	.+668    	; 0x24ec <strnlen>
    2250:	4c 01       	movw	r8, r24
    2252:	82 01       	movw	r16, r4
    2254:	f3 2d       	mov	r31, r3
    2256:	ff 77       	andi	r31, 0x7F	; 127
    2258:	3f 2e       	mov	r3, r31
    225a:	15 c0       	rjmp	.+42     	; 0x2286 <__stack+0x87>
    225c:	28 01       	movw	r4, r16
    225e:	22 e0       	ldi	r18, 0x02	; 2
    2260:	42 0e       	add	r4, r18
    2262:	51 1c       	adc	r5, r1
    2264:	f8 01       	movw	r30, r16
    2266:	a0 80       	ld	r10, Z
    2268:	b1 80       	ldd	r11, Z+1	; 0x01
    226a:	36 fe       	sbrs	r3, 6
    226c:	03 c0       	rjmp	.+6      	; 0x2274 <__stack+0x75>
    226e:	69 2d       	mov	r22, r9
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <__stack+0x79>
    2274:	6f ef       	ldi	r22, 0xFF	; 255
    2276:	7f ef       	ldi	r23, 0xFF	; 255
    2278:	c5 01       	movw	r24, r10
    227a:	2d d1       	rcall	.+602    	; 0x24d6 <strnlen_P>
    227c:	4c 01       	movw	r8, r24
    227e:	f3 2d       	mov	r31, r3
    2280:	f0 68       	ori	r31, 0x80	; 128
    2282:	3f 2e       	mov	r3, r31
    2284:	82 01       	movw	r16, r4
    2286:	33 fc       	sbrc	r3, 3
    2288:	19 c0       	rjmp	.+50     	; 0x22bc <__stack+0xbd>
    228a:	82 2d       	mov	r24, r2
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	88 16       	cp	r8, r24
    2290:	99 06       	cpc	r9, r25
    2292:	a0 f4       	brcc	.+40     	; 0x22bc <__stack+0xbd>
    2294:	b6 01       	movw	r22, r12
    2296:	80 e2       	ldi	r24, 0x20	; 32
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	33 d1       	rcall	.+614    	; 0x2502 <fputc>
    229c:	2a 94       	dec	r2
    229e:	f5 cf       	rjmp	.-22     	; 0x228a <__stack+0x8b>
    22a0:	f5 01       	movw	r30, r10
    22a2:	37 fc       	sbrc	r3, 7
    22a4:	85 91       	lpm	r24, Z+
    22a6:	37 fe       	sbrs	r3, 7
    22a8:	81 91       	ld	r24, Z+
    22aa:	5f 01       	movw	r10, r30
    22ac:	b6 01       	movw	r22, r12
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	28 d1       	rcall	.+592    	; 0x2502 <fputc>
    22b2:	21 10       	cpse	r2, r1
    22b4:	2a 94       	dec	r2
    22b6:	21 e0       	ldi	r18, 0x01	; 1
    22b8:	82 1a       	sub	r8, r18
    22ba:	91 08       	sbc	r9, r1
    22bc:	81 14       	cp	r8, r1
    22be:	91 04       	cpc	r9, r1
    22c0:	79 f7       	brne	.-34     	; 0x22a0 <__stack+0xa1>
    22c2:	e1 c0       	rjmp	.+450    	; 0x2486 <__stack+0x287>
    22c4:	84 36       	cpi	r24, 0x64	; 100
    22c6:	11 f0       	breq	.+4      	; 0x22cc <__stack+0xcd>
    22c8:	89 36       	cpi	r24, 0x69	; 105
    22ca:	39 f5       	brne	.+78     	; 0x231a <__stack+0x11b>
    22cc:	f8 01       	movw	r30, r16
    22ce:	37 fe       	sbrs	r3, 7
    22d0:	07 c0       	rjmp	.+14     	; 0x22e0 <__stack+0xe1>
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	0c 5f       	subi	r16, 0xFC	; 252
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
    22de:	08 c0       	rjmp	.+16     	; 0x22f0 <__stack+0xf1>
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	07 2e       	mov	r0, r23
    22e6:	00 0c       	add	r0, r0
    22e8:	88 0b       	sbc	r24, r24
    22ea:	99 0b       	sbc	r25, r25
    22ec:	0e 5f       	subi	r16, 0xFE	; 254
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	f3 2d       	mov	r31, r3
    22f2:	ff 76       	andi	r31, 0x6F	; 111
    22f4:	3f 2e       	mov	r3, r31
    22f6:	97 ff       	sbrs	r25, 7
    22f8:	09 c0       	rjmp	.+18     	; 0x230c <__stack+0x10d>
    22fa:	90 95       	com	r25
    22fc:	80 95       	com	r24
    22fe:	70 95       	com	r23
    2300:	61 95       	neg	r22
    2302:	7f 4f       	sbci	r23, 0xFF	; 255
    2304:	8f 4f       	sbci	r24, 0xFF	; 255
    2306:	9f 4f       	sbci	r25, 0xFF	; 255
    2308:	f0 68       	ori	r31, 0x80	; 128
    230a:	3f 2e       	mov	r3, r31
    230c:	2a e0       	ldi	r18, 0x0A	; 10
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	a3 01       	movw	r20, r6
    2312:	33 d1       	rcall	.+614    	; 0x257a <__ultoa_invert>
    2314:	88 2e       	mov	r8, r24
    2316:	86 18       	sub	r8, r6
    2318:	44 c0       	rjmp	.+136    	; 0x23a2 <__stack+0x1a3>
    231a:	85 37       	cpi	r24, 0x75	; 117
    231c:	31 f4       	brne	.+12     	; 0x232a <__stack+0x12b>
    231e:	23 2d       	mov	r18, r3
    2320:	2f 7e       	andi	r18, 0xEF	; 239
    2322:	b2 2e       	mov	r11, r18
    2324:	2a e0       	ldi	r18, 0x0A	; 10
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	25 c0       	rjmp	.+74     	; 0x2374 <__stack+0x175>
    232a:	93 2d       	mov	r25, r3
    232c:	99 7f       	andi	r25, 0xF9	; 249
    232e:	b9 2e       	mov	r11, r25
    2330:	8f 36       	cpi	r24, 0x6F	; 111
    2332:	c1 f0       	breq	.+48     	; 0x2364 <__stack+0x165>
    2334:	18 f4       	brcc	.+6      	; 0x233c <__stack+0x13d>
    2336:	88 35       	cpi	r24, 0x58	; 88
    2338:	79 f0       	breq	.+30     	; 0x2358 <__stack+0x159>
    233a:	ae c0       	rjmp	.+348    	; 0x2498 <__stack+0x299>
    233c:	80 37       	cpi	r24, 0x70	; 112
    233e:	19 f0       	breq	.+6      	; 0x2346 <__stack+0x147>
    2340:	88 37       	cpi	r24, 0x78	; 120
    2342:	21 f0       	breq	.+8      	; 0x234c <__stack+0x14d>
    2344:	a9 c0       	rjmp	.+338    	; 0x2498 <__stack+0x299>
    2346:	e9 2f       	mov	r30, r25
    2348:	e0 61       	ori	r30, 0x10	; 16
    234a:	be 2e       	mov	r11, r30
    234c:	b4 fe       	sbrs	r11, 4
    234e:	0d c0       	rjmp	.+26     	; 0x236a <__stack+0x16b>
    2350:	fb 2d       	mov	r31, r11
    2352:	f4 60       	ori	r31, 0x04	; 4
    2354:	bf 2e       	mov	r11, r31
    2356:	09 c0       	rjmp	.+18     	; 0x236a <__stack+0x16b>
    2358:	34 fe       	sbrs	r3, 4
    235a:	0a c0       	rjmp	.+20     	; 0x2370 <__stack+0x171>
    235c:	29 2f       	mov	r18, r25
    235e:	26 60       	ori	r18, 0x06	; 6
    2360:	b2 2e       	mov	r11, r18
    2362:	06 c0       	rjmp	.+12     	; 0x2370 <__stack+0x171>
    2364:	28 e0       	ldi	r18, 0x08	; 8
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <__stack+0x175>
    236a:	20 e1       	ldi	r18, 0x10	; 16
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <__stack+0x175>
    2370:	20 e1       	ldi	r18, 0x10	; 16
    2372:	32 e0       	ldi	r19, 0x02	; 2
    2374:	f8 01       	movw	r30, r16
    2376:	b7 fe       	sbrs	r11, 7
    2378:	07 c0       	rjmp	.+14     	; 0x2388 <__stack+0x189>
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	0c 5f       	subi	r16, 0xFC	; 252
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <__stack+0x195>
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 5f       	subi	r16, 0xFE	; 254
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	a3 01       	movw	r20, r6
    2396:	f1 d0       	rcall	.+482    	; 0x257a <__ultoa_invert>
    2398:	88 2e       	mov	r8, r24
    239a:	86 18       	sub	r8, r6
    239c:	fb 2d       	mov	r31, r11
    239e:	ff 77       	andi	r31, 0x7F	; 127
    23a0:	3f 2e       	mov	r3, r31
    23a2:	36 fe       	sbrs	r3, 6
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <__stack+0x1c1>
    23a6:	23 2d       	mov	r18, r3
    23a8:	2e 7f       	andi	r18, 0xFE	; 254
    23aa:	a2 2e       	mov	r10, r18
    23ac:	89 14       	cp	r8, r9
    23ae:	58 f4       	brcc	.+22     	; 0x23c6 <__stack+0x1c7>
    23b0:	34 fe       	sbrs	r3, 4
    23b2:	0b c0       	rjmp	.+22     	; 0x23ca <__stack+0x1cb>
    23b4:	32 fc       	sbrc	r3, 2
    23b6:	09 c0       	rjmp	.+18     	; 0x23ca <__stack+0x1cb>
    23b8:	83 2d       	mov	r24, r3
    23ba:	8e 7e       	andi	r24, 0xEE	; 238
    23bc:	a8 2e       	mov	r10, r24
    23be:	05 c0       	rjmp	.+10     	; 0x23ca <__stack+0x1cb>
    23c0:	b8 2c       	mov	r11, r8
    23c2:	a3 2c       	mov	r10, r3
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <__stack+0x1cd>
    23c6:	b8 2c       	mov	r11, r8
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <__stack+0x1cd>
    23ca:	b9 2c       	mov	r11, r9
    23cc:	a4 fe       	sbrs	r10, 4
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <__stack+0x1ef>
    23d0:	fe 01       	movw	r30, r28
    23d2:	e8 0d       	add	r30, r8
    23d4:	f1 1d       	adc	r31, r1
    23d6:	80 81       	ld	r24, Z
    23d8:	80 33       	cpi	r24, 0x30	; 48
    23da:	21 f4       	brne	.+8      	; 0x23e4 <__stack+0x1e5>
    23dc:	9a 2d       	mov	r25, r10
    23de:	99 7e       	andi	r25, 0xE9	; 233
    23e0:	a9 2e       	mov	r10, r25
    23e2:	09 c0       	rjmp	.+18     	; 0x23f6 <__stack+0x1f7>
    23e4:	a2 fe       	sbrs	r10, 2
    23e6:	06 c0       	rjmp	.+12     	; 0x23f4 <__stack+0x1f5>
    23e8:	b3 94       	inc	r11
    23ea:	b3 94       	inc	r11
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <__stack+0x1f7>
    23ee:	8a 2d       	mov	r24, r10
    23f0:	86 78       	andi	r24, 0x86	; 134
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <__stack+0x1f7>
    23f4:	b3 94       	inc	r11
    23f6:	a3 fc       	sbrc	r10, 3
    23f8:	10 c0       	rjmp	.+32     	; 0x241a <__stack+0x21b>
    23fa:	a0 fe       	sbrs	r10, 0
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <__stack+0x20b>
    23fe:	b2 14       	cp	r11, r2
    2400:	80 f4       	brcc	.+32     	; 0x2422 <__stack+0x223>
    2402:	28 0c       	add	r2, r8
    2404:	92 2c       	mov	r9, r2
    2406:	9b 18       	sub	r9, r11
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <__stack+0x225>
    240a:	b2 14       	cp	r11, r2
    240c:	58 f4       	brcc	.+22     	; 0x2424 <__stack+0x225>
    240e:	b6 01       	movw	r22, r12
    2410:	80 e2       	ldi	r24, 0x20	; 32
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	76 d0       	rcall	.+236    	; 0x2502 <fputc>
    2416:	b3 94       	inc	r11
    2418:	f8 cf       	rjmp	.-16     	; 0x240a <__stack+0x20b>
    241a:	b2 14       	cp	r11, r2
    241c:	18 f4       	brcc	.+6      	; 0x2424 <__stack+0x225>
    241e:	2b 18       	sub	r2, r11
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <__stack+0x227>
    2422:	98 2c       	mov	r9, r8
    2424:	21 2c       	mov	r2, r1
    2426:	a4 fe       	sbrs	r10, 4
    2428:	0f c0       	rjmp	.+30     	; 0x2448 <__stack+0x249>
    242a:	b6 01       	movw	r22, r12
    242c:	80 e3       	ldi	r24, 0x30	; 48
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	68 d0       	rcall	.+208    	; 0x2502 <fputc>
    2432:	a2 fe       	sbrs	r10, 2
    2434:	16 c0       	rjmp	.+44     	; 0x2462 <__stack+0x263>
    2436:	a1 fc       	sbrc	r10, 1
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <__stack+0x241>
    243a:	88 e7       	ldi	r24, 0x78	; 120
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <__stack+0x245>
    2440:	88 e5       	ldi	r24, 0x58	; 88
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	b6 01       	movw	r22, r12
    2446:	0c c0       	rjmp	.+24     	; 0x2460 <__stack+0x261>
    2448:	8a 2d       	mov	r24, r10
    244a:	86 78       	andi	r24, 0x86	; 134
    244c:	51 f0       	breq	.+20     	; 0x2462 <__stack+0x263>
    244e:	a1 fe       	sbrs	r10, 1
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <__stack+0x257>
    2452:	8b e2       	ldi	r24, 0x2B	; 43
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <__stack+0x259>
    2456:	80 e2       	ldi	r24, 0x20	; 32
    2458:	a7 fc       	sbrc	r10, 7
    245a:	8d e2       	ldi	r24, 0x2D	; 45
    245c:	b6 01       	movw	r22, r12
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	50 d0       	rcall	.+160    	; 0x2502 <fputc>
    2462:	89 14       	cp	r8, r9
    2464:	30 f4       	brcc	.+12     	; 0x2472 <__stack+0x273>
    2466:	b6 01       	movw	r22, r12
    2468:	80 e3       	ldi	r24, 0x30	; 48
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	4a d0       	rcall	.+148    	; 0x2502 <fputc>
    246e:	9a 94       	dec	r9
    2470:	f8 cf       	rjmp	.-16     	; 0x2462 <__stack+0x263>
    2472:	8a 94       	dec	r8
    2474:	f3 01       	movw	r30, r6
    2476:	e8 0d       	add	r30, r8
    2478:	f1 1d       	adc	r31, r1
    247a:	80 81       	ld	r24, Z
    247c:	b6 01       	movw	r22, r12
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	40 d0       	rcall	.+128    	; 0x2502 <fputc>
    2482:	81 10       	cpse	r8, r1
    2484:	f6 cf       	rjmp	.-20     	; 0x2472 <__stack+0x273>
    2486:	22 20       	and	r2, r2
    2488:	09 f4       	brne	.+2      	; 0x248c <__stack+0x28d>
    248a:	4e ce       	rjmp	.-868    	; 0x2128 <vfprintf+0x4c>
    248c:	b6 01       	movw	r22, r12
    248e:	80 e2       	ldi	r24, 0x20	; 32
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	37 d0       	rcall	.+110    	; 0x2502 <fputc>
    2494:	2a 94       	dec	r2
    2496:	f7 cf       	rjmp	.-18     	; 0x2486 <__stack+0x287>
    2498:	f6 01       	movw	r30, r12
    249a:	86 81       	ldd	r24, Z+6	; 0x06
    249c:	97 81       	ldd	r25, Z+7	; 0x07
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <__stack+0x2a5>
    24a0:	8f ef       	ldi	r24, 0xFF	; 255
    24a2:	9f ef       	ldi	r25, 0xFF	; 255
    24a4:	2b 96       	adiw	r28, 0x0b	; 11
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	ff 90       	pop	r15
    24ba:	ef 90       	pop	r14
    24bc:	df 90       	pop	r13
    24be:	cf 90       	pop	r12
    24c0:	bf 90       	pop	r11
    24c2:	af 90       	pop	r10
    24c4:	9f 90       	pop	r9
    24c6:	8f 90       	pop	r8
    24c8:	7f 90       	pop	r7
    24ca:	6f 90       	pop	r6
    24cc:	5f 90       	pop	r5
    24ce:	4f 90       	pop	r4
    24d0:	3f 90       	pop	r3
    24d2:	2f 90       	pop	r2
    24d4:	08 95       	ret

000024d6 <strnlen_P>:
    24d6:	fc 01       	movw	r30, r24
    24d8:	05 90       	lpm	r0, Z+
    24da:	61 50       	subi	r22, 0x01	; 1
    24dc:	70 40       	sbci	r23, 0x00	; 0
    24de:	01 10       	cpse	r0, r1
    24e0:	d8 f7       	brcc	.-10     	; 0x24d8 <strnlen_P+0x2>
    24e2:	80 95       	com	r24
    24e4:	90 95       	com	r25
    24e6:	8e 0f       	add	r24, r30
    24e8:	9f 1f       	adc	r25, r31
    24ea:	08 95       	ret

000024ec <strnlen>:
    24ec:	fc 01       	movw	r30, r24
    24ee:	61 50       	subi	r22, 0x01	; 1
    24f0:	70 40       	sbci	r23, 0x00	; 0
    24f2:	01 90       	ld	r0, Z+
    24f4:	01 10       	cpse	r0, r1
    24f6:	d8 f7       	brcc	.-10     	; 0x24ee <strnlen+0x2>
    24f8:	80 95       	com	r24
    24fa:	90 95       	com	r25
    24fc:	8e 0f       	add	r24, r30
    24fe:	9f 1f       	adc	r25, r31
    2500:	08 95       	ret

00002502 <fputc>:
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	fb 01       	movw	r30, r22
    250c:	23 81       	ldd	r18, Z+3	; 0x03
    250e:	21 fd       	sbrc	r18, 1
    2510:	03 c0       	rjmp	.+6      	; 0x2518 <fputc+0x16>
    2512:	8f ef       	ldi	r24, 0xFF	; 255
    2514:	9f ef       	ldi	r25, 0xFF	; 255
    2516:	2c c0       	rjmp	.+88     	; 0x2570 <fputc+0x6e>
    2518:	22 ff       	sbrs	r18, 2
    251a:	16 c0       	rjmp	.+44     	; 0x2548 <fputc+0x46>
    251c:	46 81       	ldd	r20, Z+6	; 0x06
    251e:	57 81       	ldd	r21, Z+7	; 0x07
    2520:	24 81       	ldd	r18, Z+4	; 0x04
    2522:	35 81       	ldd	r19, Z+5	; 0x05
    2524:	42 17       	cp	r20, r18
    2526:	53 07       	cpc	r21, r19
    2528:	44 f4       	brge	.+16     	; 0x253a <fputc+0x38>
    252a:	a0 81       	ld	r26, Z
    252c:	b1 81       	ldd	r27, Z+1	; 0x01
    252e:	9d 01       	movw	r18, r26
    2530:	2f 5f       	subi	r18, 0xFF	; 255
    2532:	3f 4f       	sbci	r19, 0xFF	; 255
    2534:	31 83       	std	Z+1, r19	; 0x01
    2536:	20 83       	st	Z, r18
    2538:	8c 93       	st	X, r24
    253a:	26 81       	ldd	r18, Z+6	; 0x06
    253c:	37 81       	ldd	r19, Z+7	; 0x07
    253e:	2f 5f       	subi	r18, 0xFF	; 255
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	37 83       	std	Z+7, r19	; 0x07
    2544:	26 83       	std	Z+6, r18	; 0x06
    2546:	14 c0       	rjmp	.+40     	; 0x2570 <fputc+0x6e>
    2548:	8b 01       	movw	r16, r22
    254a:	ec 01       	movw	r28, r24
    254c:	fb 01       	movw	r30, r22
    254e:	00 84       	ldd	r0, Z+8	; 0x08
    2550:	f1 85       	ldd	r31, Z+9	; 0x09
    2552:	e0 2d       	mov	r30, r0
    2554:	19 95       	eicall
    2556:	89 2b       	or	r24, r25
    2558:	e1 f6       	brne	.-72     	; 0x2512 <fputc+0x10>
    255a:	d8 01       	movw	r26, r16
    255c:	16 96       	adiw	r26, 0x06	; 6
    255e:	8d 91       	ld	r24, X+
    2560:	9c 91       	ld	r25, X
    2562:	17 97       	sbiw	r26, 0x07	; 7
    2564:	01 96       	adiw	r24, 0x01	; 1
    2566:	17 96       	adiw	r26, 0x07	; 7
    2568:	9c 93       	st	X, r25
    256a:	8e 93       	st	-X, r24
    256c:	16 97       	sbiw	r26, 0x06	; 6
    256e:	ce 01       	movw	r24, r28
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	08 95       	ret

0000257a <__ultoa_invert>:
    257a:	fa 01       	movw	r30, r20
    257c:	aa 27       	eor	r26, r26
    257e:	28 30       	cpi	r18, 0x08	; 8
    2580:	51 f1       	breq	.+84     	; 0x25d6 <__ultoa_invert+0x5c>
    2582:	20 31       	cpi	r18, 0x10	; 16
    2584:	81 f1       	breq	.+96     	; 0x25e6 <__ultoa_invert+0x6c>
    2586:	e8 94       	clt
    2588:	6f 93       	push	r22
    258a:	6e 7f       	andi	r22, 0xFE	; 254
    258c:	6e 5f       	subi	r22, 0xFE	; 254
    258e:	7f 4f       	sbci	r23, 0xFF	; 255
    2590:	8f 4f       	sbci	r24, 0xFF	; 255
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	af 4f       	sbci	r26, 0xFF	; 255
    2596:	b1 e0       	ldi	r27, 0x01	; 1
    2598:	3e d0       	rcall	.+124    	; 0x2616 <__ultoa_invert+0x9c>
    259a:	b4 e0       	ldi	r27, 0x04	; 4
    259c:	3c d0       	rcall	.+120    	; 0x2616 <__ultoa_invert+0x9c>
    259e:	67 0f       	add	r22, r23
    25a0:	78 1f       	adc	r23, r24
    25a2:	89 1f       	adc	r24, r25
    25a4:	9a 1f       	adc	r25, r26
    25a6:	a1 1d       	adc	r26, r1
    25a8:	68 0f       	add	r22, r24
    25aa:	79 1f       	adc	r23, r25
    25ac:	8a 1f       	adc	r24, r26
    25ae:	91 1d       	adc	r25, r1
    25b0:	a1 1d       	adc	r26, r1
    25b2:	6a 0f       	add	r22, r26
    25b4:	71 1d       	adc	r23, r1
    25b6:	81 1d       	adc	r24, r1
    25b8:	91 1d       	adc	r25, r1
    25ba:	a1 1d       	adc	r26, r1
    25bc:	20 d0       	rcall	.+64     	; 0x25fe <__ultoa_invert+0x84>
    25be:	09 f4       	brne	.+2      	; 0x25c2 <__ultoa_invert+0x48>
    25c0:	68 94       	set
    25c2:	3f 91       	pop	r19
    25c4:	2a e0       	ldi	r18, 0x0A	; 10
    25c6:	26 9f       	mul	r18, r22
    25c8:	11 24       	eor	r1, r1
    25ca:	30 19       	sub	r19, r0
    25cc:	30 5d       	subi	r19, 0xD0	; 208
    25ce:	31 93       	st	Z+, r19
    25d0:	de f6       	brtc	.-74     	; 0x2588 <__ultoa_invert+0xe>
    25d2:	cf 01       	movw	r24, r30
    25d4:	08 95       	ret
    25d6:	46 2f       	mov	r20, r22
    25d8:	47 70       	andi	r20, 0x07	; 7
    25da:	40 5d       	subi	r20, 0xD0	; 208
    25dc:	41 93       	st	Z+, r20
    25de:	b3 e0       	ldi	r27, 0x03	; 3
    25e0:	0f d0       	rcall	.+30     	; 0x2600 <__ultoa_invert+0x86>
    25e2:	c9 f7       	brne	.-14     	; 0x25d6 <__ultoa_invert+0x5c>
    25e4:	f6 cf       	rjmp	.-20     	; 0x25d2 <__ultoa_invert+0x58>
    25e6:	46 2f       	mov	r20, r22
    25e8:	4f 70       	andi	r20, 0x0F	; 15
    25ea:	40 5d       	subi	r20, 0xD0	; 208
    25ec:	4a 33       	cpi	r20, 0x3A	; 58
    25ee:	18 f0       	brcs	.+6      	; 0x25f6 <__ultoa_invert+0x7c>
    25f0:	49 5d       	subi	r20, 0xD9	; 217
    25f2:	31 fd       	sbrc	r19, 1
    25f4:	40 52       	subi	r20, 0x20	; 32
    25f6:	41 93       	st	Z+, r20
    25f8:	02 d0       	rcall	.+4      	; 0x25fe <__ultoa_invert+0x84>
    25fa:	a9 f7       	brne	.-22     	; 0x25e6 <__ultoa_invert+0x6c>
    25fc:	ea cf       	rjmp	.-44     	; 0x25d2 <__ultoa_invert+0x58>
    25fe:	b4 e0       	ldi	r27, 0x04	; 4
    2600:	a6 95       	lsr	r26
    2602:	97 95       	ror	r25
    2604:	87 95       	ror	r24
    2606:	77 95       	ror	r23
    2608:	67 95       	ror	r22
    260a:	ba 95       	dec	r27
    260c:	c9 f7       	brne	.-14     	; 0x2600 <__ultoa_invert+0x86>
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	61 05       	cpc	r22, r1
    2612:	71 05       	cpc	r23, r1
    2614:	08 95       	ret
    2616:	9b 01       	movw	r18, r22
    2618:	ac 01       	movw	r20, r24
    261a:	0a 2e       	mov	r0, r26
    261c:	06 94       	lsr	r0
    261e:	57 95       	ror	r21
    2620:	47 95       	ror	r20
    2622:	37 95       	ror	r19
    2624:	27 95       	ror	r18
    2626:	ba 95       	dec	r27
    2628:	c9 f7       	brne	.-14     	; 0x261c <__ultoa_invert+0xa2>
    262a:	62 0f       	add	r22, r18
    262c:	73 1f       	adc	r23, r19
    262e:	84 1f       	adc	r24, r20
    2630:	95 1f       	adc	r25, r21
    2632:	a0 1d       	adc	r26, r0
    2634:	08 95       	ret

00002636 <_exit>:
    2636:	f8 94       	cli

00002638 <__stop_program>:
    2638:	ff cf       	rjmp	.-2      	; 0x2638 <__stop_program>
