
toImportToAS7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800200  000024c8  0000255c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000222  00800320  00800320  0000267c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000718  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012594  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000318c  00000000  00000000  000153c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a4f  00000000  00000000  00018550  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014bc  00000000  00000000  0001bfa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003953  00000000  00000000  0001d45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006567  00000000  00000000  00020daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  00027316  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c1       	rjmp	.+532    	; 0x216 <__ctors_end>
       2:	00 00       	nop
       4:	38 c1       	rjmp	.+624    	; 0x276 <__bad_interrupt>
       6:	00 00       	nop
       8:	36 c1       	rjmp	.+620    	; 0x276 <__bad_interrupt>
       a:	00 00       	nop
       c:	34 c1       	rjmp	.+616    	; 0x276 <__bad_interrupt>
       e:	00 00       	nop
      10:	32 c1       	rjmp	.+612    	; 0x276 <__bad_interrupt>
      12:	00 00       	nop
      14:	30 c1       	rjmp	.+608    	; 0x276 <__bad_interrupt>
      16:	00 00       	nop
      18:	2e c1       	rjmp	.+604    	; 0x276 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2c c1       	rjmp	.+600    	; 0x276 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2a c1       	rjmp	.+596    	; 0x276 <__bad_interrupt>
      22:	00 00       	nop
      24:	b8 c2       	rjmp	.+1392   	; 0x596 <__vector_9>
      26:	00 00       	nop
      28:	26 c1       	rjmp	.+588    	; 0x276 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	24 c1       	rjmp	.+584    	; 0x276 <__bad_interrupt>
      2e:	00 00       	nop
      30:	22 c1       	rjmp	.+580    	; 0x276 <__bad_interrupt>
      32:	00 00       	nop
      34:	20 c1       	rjmp	.+576    	; 0x276 <__bad_interrupt>
      36:	00 00       	nop
      38:	1e c1       	rjmp	.+572    	; 0x276 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1c c1       	rjmp	.+568    	; 0x276 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1a c1       	rjmp	.+564    	; 0x276 <__bad_interrupt>
      42:	00 00       	nop
      44:	18 c1       	rjmp	.+560    	; 0x276 <__bad_interrupt>
      46:	00 00       	nop
      48:	16 c1       	rjmp	.+556    	; 0x276 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	14 c1       	rjmp	.+552    	; 0x276 <__bad_interrupt>
      4e:	00 00       	nop
      50:	12 c1       	rjmp	.+548    	; 0x276 <__bad_interrupt>
      52:	00 00       	nop
      54:	10 c1       	rjmp	.+544    	; 0x276 <__bad_interrupt>
      56:	00 00       	nop
      58:	0e c1       	rjmp	.+540    	; 0x276 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_23>
      60:	0a c1       	rjmp	.+532    	; 0x276 <__bad_interrupt>
      62:	00 00       	nop
      64:	aa c7       	rjmp	.+3924   	; 0xfba <__vector_25>
      66:	00 00       	nop
      68:	de c7       	rjmp	.+4028   	; 0x1026 <__vector_26>
      6a:	00 00       	nop
      6c:	04 c1       	rjmp	.+520    	; 0x276 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__bad_interrupt>
      72:	00 00       	nop
      74:	00 c1       	rjmp	.+512    	; 0x276 <__bad_interrupt>
      76:	00 00       	nop
      78:	fe c0       	rjmp	.+508    	; 0x276 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fc c0       	rjmp	.+504    	; 0x276 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fa c0       	rjmp	.+500    	; 0x276 <__bad_interrupt>
      82:	00 00       	nop
      84:	f8 c0       	rjmp	.+496    	; 0x276 <__bad_interrupt>
      86:	00 00       	nop
      88:	f6 c0       	rjmp	.+492    	; 0x276 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 c0       	rjmp	.+488    	; 0x276 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_36>
      94:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__vector_37>
      98:	ee c0       	rjmp	.+476    	; 0x276 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_39>
      a0:	ea c0       	rjmp	.+468    	; 0x276 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e8 c0       	rjmp	.+464    	; 0x276 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e6 c0       	rjmp	.+460    	; 0x276 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e4 c0       	rjmp	.+456    	; 0x276 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e2 c0       	rjmp	.+452    	; 0x276 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e0 c0       	rjmp	.+448    	; 0x276 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	de c0       	rjmp	.+444    	; 0x276 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dc c0       	rjmp	.+440    	; 0x276 <__bad_interrupt>
      be:	00 00       	nop
      c0:	da c0       	rjmp	.+436    	; 0x276 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d8 c0       	rjmp	.+432    	; 0x276 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d6 c0       	rjmp	.+428    	; 0x276 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d4 c0       	rjmp	.+424    	; 0x276 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d2 c0       	rjmp	.+420    	; 0x276 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d0 c0       	rjmp	.+416    	; 0x276 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ce c0       	rjmp	.+412    	; 0x276 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cc c0       	rjmp	.+408    	; 0x276 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ca c0       	rjmp	.+404    	; 0x276 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e6 0a       	sbc	r14, r22
      e6:	e9 0a       	sbc	r14, r25
      e8:	d8 0a       	sbc	r13, r24
      ea:	dc 0a       	sbc	r13, r28
      ec:	e2 0a       	sbc	r14, r18
      ee:	20 0b       	sbc	r18, r16
      f0:	ed 0a       	sbc	r14, r29
      f2:	f1 0a       	sbc	r15, r17
      f4:	f7 0a       	sbc	r15, r23
      f6:	fb 0a       	sbc	r15, r27
      f8:	ff 0a       	sbc	r15, r31
      fa:	05 0b       	sbc	r16, r21
      fc:	09 0b       	sbc	r16, r25
      fe:	0d 0b       	sbc	r16, r29
     100:	20 0b       	sbc	r18, r16
     102:	13 0b       	sbc	r17, r19
     104:	17 0b       	sbc	r17, r23
     106:	1b 0b       	sbc	r17, r27

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	e6 01       	movw	r28, r12
     210:	45 08       	sbc	r4, r5
     212:	da 08       	sbc	r13, r10
     214:	77 0d       	add	r23, r7

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	d1 e2       	ldi	r29, 0x21	; 33
     21e:	de bf       	out	0x3e, r29	; 62
     220:	cd bf       	out	0x3d, r28	; 61
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0c bf       	out	0x3c, r16	; 60

00000226 <__do_copy_data>:
     226:	13 e0       	ldi	r17, 0x03	; 3
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b2 e0       	ldi	r27, 0x02	; 2
     22c:	e8 ec       	ldi	r30, 0xC8	; 200
     22e:	f4 e2       	ldi	r31, 0x24	; 36
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	a0 32       	cpi	r26, 0x20	; 32
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	25 e0       	ldi	r18, 0x05	; 5
     242:	a0 e2       	ldi	r26, 0x20	; 32
     244:	b3 e0       	ldi	r27, 0x03	; 3
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	a2 34       	cpi	r26, 0x42	; 66
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>

00000250 <__do_global_ctors>:
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	cb e0       	ldi	r28, 0x0B	; 11
     254:	d1 e0       	ldi	r29, 0x01	; 1
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	06 c0       	rjmp	.+12     	; 0x266 <__do_global_ctors+0x16>
     25a:	21 97       	sbiw	r28, 0x01	; 1
     25c:	01 09       	sbc	r16, r1
     25e:	80 2f       	mov	r24, r16
     260:	fe 01       	movw	r30, r28
     262:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__tablejump2__>
     266:	c7 30       	cpi	r28, 0x07	; 7
     268:	d1 07       	cpc	r29, r17
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	08 07       	cpc	r16, r24
     26e:	a9 f7       	brne	.-22     	; 0x25a <__do_global_ctors+0xa>
     270:	cf d7       	rcall	.+3998   	; 0x1210 <main>
     272:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <_exit>

00000276 <__bad_interrupt>:
     276:	c4 ce       	rjmp	.-632    	; 0x0 <__vectors>

00000278 <_ZN14HardwareSerial5writeEi>:
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	Serial.println("## End #####################");
     278:	dc 01       	movw	r26, r24
     27a:	ed 91       	ld	r30, X+
     27c:	fc 91       	ld	r31, X
     27e:	01 90       	ld	r0, Z+
     280:	f0 81       	ld	r31, Z
     282:	e0 2d       	mov	r30, r0
     284:	19 94       	eijmp

00000286 <_Z9printLCD1hhi>:
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	1f 92       	push	r1
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	f8 2e       	mov	r15, r24
     29a:	e6 2e       	mov	r14, r22
     29c:	5f 93       	push	r21
     29e:	4f 93       	push	r20
     2a0:	89 e5       	ldi	r24, 0x59	; 89
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	9f 93       	push	r25
     2a6:	8f 93       	push	r24
     2a8:	8e 01       	movw	r16, r28
     2aa:	0f 5f       	subi	r16, 0xFF	; 255
     2ac:	1f 4f       	sbci	r17, 0xFF	; 255
     2ae:	1f 93       	push	r17
     2b0:	0f 93       	push	r16
     2b2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <sprintf>
     2b6:	4e 2d       	mov	r20, r14
     2b8:	6f 2d       	mov	r22, r15
     2ba:	80 e2       	ldi	r24, 0x20	; 32
     2bc:	93 e0       	ldi	r25, 0x03	; 3
     2be:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     2c2:	b8 01       	movw	r22, r16
     2c4:	80 e2       	ldi	r24, 0x20	; 32
     2c6:	93 e0       	ldi	r25, 0x03	; 3
     2c8:	ec d7       	rcall	.+4056   	; 0x12a2 <_ZN5Print5printEPKc>
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <_Z9printLCD3hhi>:
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <_Z9printLCD3hhi+0xe>
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	f8 2e       	mov	r15, r24
     2fa:	e6 2e       	mov	r14, r22
     2fc:	5f 93       	push	r21
     2fe:	4f 93       	push	r20
     300:	83 e6       	ldi	r24, 0x63	; 99
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	9f 93       	push	r25
     306:	8f 93       	push	r24
     308:	8e 01       	movw	r16, r28
     30a:	0f 5f       	subi	r16, 0xFF	; 255
     30c:	1f 4f       	sbci	r17, 0xFF	; 255
     30e:	1f 93       	push	r17
     310:	0f 93       	push	r16
     312:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <sprintf>
     316:	4e 2d       	mov	r20, r14
     318:	6f 2d       	mov	r22, r15
     31a:	80 e2       	ldi	r24, 0x20	; 32
     31c:	93 e0       	ldi	r25, 0x03	; 3
     31e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     322:	b8 01       	movw	r22, r16
     324:	80 e2       	ldi	r24, 0x20	; 32
     326:	93 e0       	ldi	r25, 0x03	; 3
     328:	bc d7       	rcall	.+3960   	; 0x12a2 <_ZN5Print5printEPKc>
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	ff 90       	pop	r15
     346:	ef 90       	pop	r14
     348:	08 95       	ret

0000034a <_Z9printLCD4hhi>:
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	00 d0       	rcall	.+0      	; 0x358 <_Z9printLCD4hhi+0xe>
     358:	1f 92       	push	r1
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	f8 2e       	mov	r15, r24
     360:	e6 2e       	mov	r14, r22
     362:	5f 93       	push	r21
     364:	4f 93       	push	r20
     366:	87 e6       	ldi	r24, 0x67	; 103
     368:	92 e0       	ldi	r25, 0x02	; 2
     36a:	9f 93       	push	r25
     36c:	8f 93       	push	r24
     36e:	8e 01       	movw	r16, r28
     370:	0f 5f       	subi	r16, 0xFF	; 255
     372:	1f 4f       	sbci	r17, 0xFF	; 255
     374:	1f 93       	push	r17
     376:	0f 93       	push	r16
     378:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <sprintf>
     37c:	4e 2d       	mov	r20, r14
     37e:	6f 2d       	mov	r22, r15
     380:	80 e2       	ldi	r24, 0x20	; 32
     382:	93 e0       	ldi	r25, 0x03	; 3
     384:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     388:	b8 01       	movw	r22, r16
     38a:	80 e2       	ldi	r24, 0x20	; 32
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	89 d7       	rcall	.+3858   	; 0x12a2 <_ZN5Print5printEPKc>
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	08 95       	ret

000003b2 <_Z8sumBytesPhh>:
     3b2:	38 2f       	mov	r19, r24
     3b4:	fc 01       	movw	r30, r24
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	2e 2f       	mov	r18, r30
     3bc:	23 1b       	sub	r18, r19
     3be:	26 17       	cp	r18, r22
     3c0:	20 f4       	brcc	.+8      	; 0x3ca <_Z8sumBytesPhh+0x18>
     3c2:	21 91       	ld	r18, Z+
     3c4:	82 0f       	add	r24, r18
     3c6:	91 1d       	adc	r25, r1
     3c8:	f8 cf       	rjmp	.-16     	; 0x3ba <_Z8sumBytesPhh+0x8>
     3ca:	08 95       	ret

000003cc <_GLOBAL__sub_I_Load_High_Byte>:
     3cc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <millis>
     3d0:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <startTime>
     3d4:	70 93 38 03 	sts	0x0338, r23	; 0x800338 <startTime+0x1>
     3d8:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <startTime+0x2>
     3dc:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <startTime+0x3>
     3e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3e4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3e8:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <currPos+0x1>
     3ec:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <currPos>
     3f0:	24 e0       	ldi	r18, 0x04	; 4
     3f2:	44 e1       	ldi	r20, 0x14	; 20
     3f4:	67 e2       	ldi	r22, 0x27	; 39
     3f6:	80 e2       	ldi	r24, 0x20	; 32
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <_ZN17LiquidCrystal_I2CC1Ehhh>

000003fe <_Z10writeServohhPhh>:
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	f8 2e       	mov	r15, r24
     410:	e6 2e       	mov	r14, r22
     412:	6a 01       	movw	r12, r20
     414:	02 2f       	mov	r16, r18
     416:	66 e0       	ldi	r22, 0x06	; 6
     418:	6e 0d       	add	r22, r14
     41a:	d6 2f       	mov	r29, r22
     41c:	d2 0f       	add	r29, r18
     41e:	62 2f       	mov	r22, r18
     420:	ca 01       	movw	r24, r20
     422:	c7 df       	rcall	.-114    	; 0x3b2 <_Z8sumBytesPhh>
     424:	c8 2f       	mov	r28, r24
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <digitalWrite>
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <digitalWrite>
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 26 0a 	call	0x144c	; 0x144c <delay>
     442:	6f ef       	ldi	r22, 0xFF	; 255
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	88 ed       	ldi	r24, 0xD8	; 216
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	16 df       	rcall	.-468    	; 0x278 <_ZN14HardwareSerial5writeEi>
     44c:	6f ef       	ldi	r22, 0xFF	; 255
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	88 ed       	ldi	r24, 0xD8	; 216
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	11 df       	rcall	.-478    	; 0x278 <_ZN14HardwareSerial5writeEi>
     456:	6f 2d       	mov	r22, r15
     458:	88 ed       	ldi	r24, 0xD8	; 216
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	da d4       	rcall	.+2484   	; 0xe12 <_ZN14HardwareSerial5writeEh>
     45e:	10 e0       	ldi	r17, 0x00	; 0
     460:	b8 01       	movw	r22, r16
     462:	6d 5f       	subi	r22, 0xFD	; 253
     464:	7f 4f       	sbci	r23, 0xFF	; 255
     466:	88 ed       	ldi	r24, 0xD8	; 216
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	06 df       	rcall	.-500    	; 0x278 <_ZN14HardwareSerial5writeEi>
     46c:	63 e0       	ldi	r22, 0x03	; 3
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	88 ed       	ldi	r24, 0xD8	; 216
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	01 df       	rcall	.-510    	; 0x278 <_ZN14HardwareSerial5writeEi>
     476:	6e 2d       	mov	r22, r14
     478:	88 ed       	ldi	r24, 0xD8	; 216
     47a:	93 e0       	ldi	r25, 0x03	; 3
     47c:	ca d4       	rcall	.+2452   	; 0xe12 <_ZN14HardwareSerial5writeEh>
     47e:	a8 01       	movw	r20, r16
     480:	b6 01       	movw	r22, r12
     482:	88 ed       	ldi	r24, 0xD8	; 216
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	ce d6       	rcall	.+3484   	; 0x1224 <_ZN5Print5writeEPKhj>
     488:	df 0d       	add	r29, r15
     48a:	cd 0f       	add	r28, r29
     48c:	c0 95       	com	r28
     48e:	6c 2f       	mov	r22, r28
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	88 ed       	ldi	r24, 0xD8	; 216
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	f0 de       	rcall	.-544    	; 0x278 <_ZN14HardwareSerial5writeEi>
     498:	88 ed       	ldi	r24, 0xD8	; 216
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	06 d5       	rcall	.+2572   	; 0xeaa <_ZN14HardwareSerial5flushEv>
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <digitalWrite>
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <digitalWrite>
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	c2 c7       	rjmp	.+3972   	; 0x144c <delay>

000004c8 <_Z9moveSpeedhii>:
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <_Z9moveSpeedhii+0xa>
     4d2:	1f 92       	push	r1
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	8b 01       	movw	r16, r22
     4da:	9c ef       	ldi	r25, 0xFC	; 252
     4dc:	98 0f       	add	r25, r24
     4de:	92 30       	cpi	r25, 0x02	; 2
     4e0:	58 f4       	brcc	.+22     	; 0x4f8 <_Z9moveSpeedhii+0x30>
     4e2:	64 3e       	cpi	r22, 0xE4	; 228
     4e4:	72 40       	sbci	r23, 0x02	; 2
     4e6:	14 f4       	brge	.+4      	; 0x4ec <_Z9moveSpeedhii+0x24>
     4e8:	04 ee       	ldi	r16, 0xE4	; 228
     4ea:	12 e0       	ldi	r17, 0x02	; 2
     4ec:	05 3a       	cpi	r16, 0xA5	; 165
     4ee:	96 e0       	ldi	r25, 0x06	; 6
     4f0:	19 07       	cpc	r17, r25
     4f2:	14 f0       	brlt	.+4      	; 0x4f8 <_Z9moveSpeedhii+0x30>
     4f4:	04 ea       	ldi	r16, 0xA4	; 164
     4f6:	16 e0       	ldi	r17, 0x06	; 6
     4f8:	09 83       	std	Y+1, r16	; 0x01
     4fa:	1a 83       	std	Y+2, r17	; 0x02
     4fc:	4b 83       	std	Y+3, r20	; 0x03
     4fe:	5c 83       	std	Y+4, r21	; 0x04
     500:	24 e0       	ldi	r18, 0x04	; 4
     502:	ae 01       	movw	r20, r28
     504:	4f 5f       	subi	r20, 0xFF	; 255
     506:	5f 4f       	sbci	r21, 0xFF	; 255
     508:	6e e1       	ldi	r22, 0x1E	; 30
     50a:	79 df       	rcall	.-270    	; 0x3fe <_Z10writeServohhPhh>
     50c:	10 93 32 03 	sts	0x0332, r17	; 0x800332 <currPos+0x1>
     510:	00 93 31 03 	sts	0x0331, r16	; 0x800331 <currPos>
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	08 95       	ret

00000526 <_Z10setEndlesshb.part.0>:
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	00 d0       	rcall	.+0      	; 0x52c <_Z10setEndlesshb.part.0+0x6>
     52c:	1f 92       	push	r1
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	19 82       	std	Y+1, r1	; 0x01
     534:	1a 82       	std	Y+2, r1	; 0x02
     536:	1b 82       	std	Y+3, r1	; 0x03
     538:	1c 82       	std	Y+4, r1	; 0x04
     53a:	24 e0       	ldi	r18, 0x04	; 4
     53c:	ae 01       	movw	r20, r28
     53e:	4f 5f       	subi	r20, 0xFF	; 255
     540:	5f 4f       	sbci	r21, 0xFF	; 255
     542:	66 e0       	ldi	r22, 0x06	; 6
     544:	5c df       	rcall	.-328    	; 0x3fe <_Z10writeServohhPhh>
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <_Z10setEndlesshb>:
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	00 d0       	rcall	.+0      	; 0x55a <_Z10setEndlesshb+0x6>
     55a:	1f 92       	push	r1
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	66 23       	and	r22, r22
     562:	11 f0       	breq	.+4      	; 0x568 <_Z10setEndlesshb+0x14>
     564:	e0 df       	rcall	.-64     	; 0x526 <_Z10setEndlesshb.part.0>
     566:	0e c0       	rjmp	.+28     	; 0x584 <_Z10setEndlesshb+0x30>
     568:	94 ee       	ldi	r25, 0xE4	; 228
     56a:	99 83       	std	Y+1, r25	; 0x01
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	9a 83       	std	Y+2, r25	; 0x02
     570:	94 ea       	ldi	r25, 0xA4	; 164
     572:	9b 83       	std	Y+3, r25	; 0x03
     574:	96 e0       	ldi	r25, 0x06	; 6
     576:	9c 83       	std	Y+4, r25	; 0x04
     578:	24 e0       	ldi	r18, 0x04	; 4
     57a:	ae 01       	movw	r20, r28
     57c:	4f 5f       	subi	r20, 0xFF	; 255
     57e:	5f 4f       	sbci	r21, 0xFF	; 255
     580:	66 e0       	ldi	r22, 0x06	; 6
     582:	3d df       	rcall	.-390    	; 0x3fe <_Z10writeServohhPhh>
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <_Z12clearEndlessh>:
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	df cf       	rjmp	.-66     	; 0x554 <_Z10setEndlesshb>

00000596 <__vector_9>:
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	0f 92       	push	r0
     59e:	11 24       	eor	r1, r1
     5a0:	0b b6       	in	r0, 0x3b	; 59
     5a2:	0f 92       	push	r0
     5a4:	2f 93       	push	r18
     5a6:	3f 93       	push	r19
     5a8:	4f 93       	push	r20
     5aa:	5f 93       	push	r21
     5ac:	6f 93       	push	r22
     5ae:	7f 93       	push	r23
     5b0:	8f 93       	push	r24
     5b2:	9f 93       	push	r25
     5b4:	af 93       	push	r26
     5b6:	bf 93       	push	r27
     5b8:	ef 93       	push	r30
     5ba:	ff 93       	push	r31
     5bc:	18 9b       	sbis	0x03, 0	; 3
     5be:	1b c0       	rjmp	.+54     	; 0x5f6 <__vector_9+0x60>
     5c0:	1f 9a       	sbi	0x03, 7	; 3
     5c2:	18 9b       	sbis	0x03, 0	; 3
     5c4:	18 c0       	rjmp	.+48     	; 0x5f6 <__vector_9+0x60>
     5c6:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <currPos>
     5ca:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <currPos+0x1>
     5ce:	65 3e       	cpi	r22, 0xE5	; 229
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	78 07       	cpc	r23, r24
     5d4:	1c f0       	brlt	.+6      	; 0x5dc <__vector_9+0x46>
     5d6:	61 50       	subi	r22, 0x01	; 1
     5d8:	71 09       	sbc	r23, r1
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <__vector_9+0x4a>
     5dc:	64 ee       	ldi	r22, 0xE4	; 228
     5de:	72 e0       	ldi	r23, 0x02	; 2
     5e0:	44 e1       	ldi	r20, 0x14	; 20
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     5e8:	6f df       	rcall	.-290    	; 0x4c8 <_Z9moveSpeedhii>
     5ea:	68 ec       	ldi	r22, 0xC8	; 200
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	2c d7       	rcall	.+3672   	; 0x144c <delay>
     5f4:	e6 cf       	rjmp	.-52     	; 0x5c2 <__vector_9+0x2c>
     5f6:	19 9b       	sbis	0x03, 1	; 3
     5f8:	1b c0       	rjmp	.+54     	; 0x630 <__vector_9+0x9a>
     5fa:	2f 98       	cbi	0x05, 7	; 5
     5fc:	19 9b       	sbis	0x03, 1	; 3
     5fe:	18 c0       	rjmp	.+48     	; 0x630 <__vector_9+0x9a>
     600:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <currPos>
     604:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <currPos+0x1>
     608:	64 3a       	cpi	r22, 0xA4	; 164
     60a:	86 e0       	ldi	r24, 0x06	; 6
     60c:	78 07       	cpc	r23, r24
     60e:	1c f4       	brge	.+6      	; 0x616 <__vector_9+0x80>
     610:	6f 5f       	subi	r22, 0xFF	; 255
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	02 c0       	rjmp	.+4      	; 0x61a <__vector_9+0x84>
     616:	64 ea       	ldi	r22, 0xA4	; 164
     618:	76 e0       	ldi	r23, 0x06	; 6
     61a:	44 e1       	ldi	r20, 0x14	; 20
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     622:	52 df       	rcall	.-348    	; 0x4c8 <_Z9moveSpeedhii>
     624:	68 ec       	ldi	r22, 0xC8	; 200
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0f d7       	rcall	.+3614   	; 0x144c <delay>
     62e:	e6 cf       	rjmp	.-52     	; 0x5fc <__vector_9+0x66>
     630:	1a 9b       	sbis	0x03, 2	; 3
     632:	0b c0       	rjmp	.+22     	; 0x64a <__vector_9+0xb4>
     634:	2f 9a       	sbi	0x05, 7	; 5
     636:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     63a:	84 30       	cpi	r24, 0x04	; 4
     63c:	11 f0       	breq	.+4      	; 0x642 <__vector_9+0xac>
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	01 c0       	rjmp	.+2      	; 0x644 <__vector_9+0xae>
     642:	85 e0       	ldi	r24, 0x05	; 5
     644:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <id>
     648:	a4 df       	rcall	.-184    	; 0x592 <_Z12clearEndlessh>
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0b be       	out	0x3b, r0	; 59
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <_Z9readServohhh>:
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	c8 2f       	mov	r28, r24
     678:	d6 2f       	mov	r29, r22
     67a:	14 2f       	mov	r17, r20
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <digitalWrite>
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <digitalWrite>
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	db d6       	rcall	.+3510   	; 0x144c <delay>
     696:	6f ef       	ldi	r22, 0xFF	; 255
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	88 ed       	ldi	r24, 0xD8	; 216
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	ec dd       	rcall	.-1064   	; 0x278 <_ZN14HardwareSerial5writeEi>
     6a0:	6f ef       	ldi	r22, 0xFF	; 255
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	88 ed       	ldi	r24, 0xD8	; 216
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	e7 dd       	rcall	.-1074   	; 0x278 <_ZN14HardwareSerial5writeEi>
     6aa:	6c 2f       	mov	r22, r28
     6ac:	88 ed       	ldi	r24, 0xD8	; 216
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	b0 d3       	rcall	.+1888   	; 0xe12 <_ZN14HardwareSerial5writeEh>
     6b2:	64 e0       	ldi	r22, 0x04	; 4
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	88 ed       	ldi	r24, 0xD8	; 216
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	de dd       	rcall	.-1092   	; 0x278 <_ZN14HardwareSerial5writeEi>
     6bc:	62 e0       	ldi	r22, 0x02	; 2
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	88 ed       	ldi	r24, 0xD8	; 216
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	d9 dd       	rcall	.-1102   	; 0x278 <_ZN14HardwareSerial5writeEi>
     6c6:	6d 2f       	mov	r22, r29
     6c8:	88 ed       	ldi	r24, 0xD8	; 216
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	a2 d3       	rcall	.+1860   	; 0xe12 <_ZN14HardwareSerial5writeEh>
     6ce:	61 2f       	mov	r22, r17
     6d0:	88 ed       	ldi	r24, 0xD8	; 216
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	9e d3       	rcall	.+1852   	; 0xe12 <_ZN14HardwareSerial5writeEh>
     6d6:	1a 5f       	subi	r17, 0xFA	; 250
     6d8:	d1 0f       	add	r29, r17
     6da:	cd 0f       	add	r28, r29
     6dc:	c0 95       	com	r28
     6de:	6c 2f       	mov	r22, r28
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	88 ed       	ldi	r24, 0xD8	; 216
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	c8 dd       	rcall	.-1136   	; 0x278 <_ZN14HardwareSerial5writeEi>
     6e8:	88 ed       	ldi	r24, 0xD8	; 216
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	de d3       	rcall	.+1980   	; 0xeaa <_ZN14HardwareSerial5flushEv>
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	e3 d7       	rcall	.+4038   	; 0x16ba <digitalWrite>
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	e0 d7       	rcall	.+4032   	; 0x16ba <digitalWrite>
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	a1 c6       	rjmp	.+3394   	; 0x144c <delay>

0000070a <setup>:
     70a:	2f 98       	cbi	0x05, 7	; 5
     70c:	8f ef       	ldi	r24, 0xFF	; 255
     70e:	84 b9       	out	0x04, r24	; 4
     710:	84 b1       	in	r24, 0x04	; 4
     712:	88 7f       	andi	r24, 0xF8	; 248
     714:	84 b9       	out	0x04, r24	; 4
     716:	eb e6       	ldi	r30, 0x6B	; 107
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	87 60       	ori	r24, 0x07	; 7
     71e:	80 83       	st	Z, r24
     720:	e8 e6       	ldi	r30, 0x68	; 104
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	81 60       	ori	r24, 0x01	; 1
     728:	80 83       	st	Z, r24
     72a:	78 94       	sei
     72c:	80 e2       	ldi	r24, 0x20	; 32
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN17LiquidCrystal_I2C4initEv>
     734:	80 e2       	ldi	r24, 0x20	; 32
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN17LiquidCrystal_I2C9backlightEv>
     73c:	80 e2       	ldi	r24, 0x20	; 32
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN17LiquidCrystal_I2C5clearEv>
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	7c d7       	rcall	.+3832   	; 0x1642 <pinMode>
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	79 d7       	rcall	.+3826   	; 0x1642 <pinMode>
     750:	26 e0       	ldi	r18, 0x06	; 6
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	51 ee       	ldi	r21, 0xE1	; 225
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	8b e3       	ldi	r24, 0x3B	; 59
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	c6 d3       	rcall	.+1932   	; 0xeec <_ZN14HardwareSerial5beginEmh>
     760:	26 e0       	ldi	r18, 0x06	; 6
     762:	47 e3       	ldi	r20, 0x37	; 55
     764:	5f ed       	ldi	r21, 0xDF	; 223
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	88 ed       	ldi	r24, 0xD8	; 216
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	be d3       	rcall	.+1916   	; 0xeec <_ZN14HardwareSerial5beginEmh>
     770:	88 ed       	ldi	r24, 0xD8	; 216
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	9a d3       	rcall	.+1844   	; 0xeaa <_ZN14HardwareSerial5flushEv>
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	80 e2       	ldi	r24, 0x20	; 32
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     782:	6b e6       	ldi	r22, 0x6B	; 107
     784:	72 e0       	ldi	r23, 0x02	; 2
     786:	80 e2       	ldi	r24, 0x20	; 32
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	8b d5       	rcall	.+2838   	; 0x12a2 <_ZN5Print5printEPKc>
     78c:	41 e0       	ldi	r20, 0x01	; 1
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	80 e2       	ldi	r24, 0x20	; 32
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     798:	60 e7       	ldi	r22, 0x70	; 112
     79a:	72 e0       	ldi	r23, 0x02	; 2
     79c:	80 e2       	ldi	r24, 0x20	; 32
     79e:	93 e0       	ldi	r25, 0x03	; 3
     7a0:	80 d5       	rcall	.+2816   	; 0x12a2 <_ZN5Print5printEPKc>
     7a2:	42 e0       	ldi	r20, 0x02	; 2
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	80 e2       	ldi	r24, 0x20	; 32
     7a8:	93 e0       	ldi	r25, 0x03	; 3
     7aa:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     7ae:	65 e7       	ldi	r22, 0x75	; 117
     7b0:	72 e0       	ldi	r23, 0x02	; 2
     7b2:	80 e2       	ldi	r24, 0x20	; 32
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	75 d5       	rcall	.+2794   	; 0x12a2 <_ZN5Print5printEPKc>
     7b8:	43 e0       	ldi	r20, 0x03	; 3
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	80 e2       	ldi	r24, 0x20	; 32
     7be:	93 e0       	ldi	r25, 0x03	; 3
     7c0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     7c4:	6a e7       	ldi	r22, 0x7A	; 122
     7c6:	72 e0       	ldi	r23, 0x02	; 2
     7c8:	80 e2       	ldi	r24, 0x20	; 32
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	6a d5       	rcall	.+2772   	; 0x12a2 <_ZN5Print5printEPKc>
     7ce:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     7d2:	df de       	rcall	.-578    	; 0x592 <_Z12clearEndlessh>
     7d4:	42 e2       	ldi	r20, 0x22	; 34
     7d6:	64 e2       	ldi	r22, 0x24	; 36
     7d8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     7dc:	49 df       	rcall	.-366    	; 0x670 <_Z9readServohhh>
     7de:	62 e0       	ldi	r22, 0x02	; 2
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	32 c6       	rjmp	.+3172   	; 0x144c <delay>

000007e8 <_Z12printDataLCDv>:
	char buffer[4];
	sprintf(buffer, "%4d", value);
	lcd.setCursor(col, row);
	lcd.print(buffer);
}
void printDataLCD() {
     7e8:	af 92       	push	r10
     7ea:	bf 92       	push	r11
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
	delay(10);
     7fc:	6a e0       	ldi	r22, 0x0A	; 10
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	23 d6       	rcall	.+3142   	; 0x144c <delay>
	int punch;
	int current;
	bool speedDirection, loadDirection;
	byte i = 0;
	
	if (Serial1.available() > 0){
     806:	88 ed       	ldi	r24, 0xD8	; 216
     808:	93 e0       	ldi	r25, 0x03	; 3
     80a:	69 d2       	rcall	.+1234   	; 0xcde <_ZN14HardwareSerial9availableEv>
     80c:	18 16       	cp	r1, r24
     80e:	19 06       	cpc	r1, r25
     810:	0c f0       	brlt	.+2      	; 0x814 <_Z12printDataLCDv+0x2c>
     812:	32 c1       	rjmp	.+612    	; 0xa78 <_Z12printDataLCDv+0x290>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     814:	88 ed       	ldi	r24, 0xD8	; 216
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	7c d2       	rcall	.+1272   	; 0xd12 <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     81a:	8f 3f       	cpi	r24, 0xFF	; 255
     81c:	91 05       	cpc	r25, r1
     81e:	09 f0       	breq	.+2      	; 0x822 <_Z12printDataLCDv+0x3a>
     820:	2b c1       	rjmp	.+598    	; 0xa78 <_Z12printDataLCDv+0x290>
     822:	88 ed       	ldi	r24, 0xD8	; 216
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	75 d2       	rcall	.+1258   	; 0xd12 <_ZN14HardwareSerial4readEv>
     828:	8f 3f       	cpi	r24, 0xFF	; 255
     82a:	91 05       	cpc	r25, r1
     82c:	09 f0       	breq	.+2      	; 0x830 <_Z12printDataLCDv+0x48>
			servoID = Serial1.read(); // servo ID
     82e:	24 c1       	rjmp	.+584    	; 0xa78 <_Z12printDataLCDv+0x290>
     830:	88 ed       	ldi	r24, 0xD8	; 216
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	6e d2       	rcall	.+1244   	; 0xd12 <_ZN14HardwareSerial4readEv>
			msgLength = Serial1.read(); // msg Length
     836:	7c 01       	movw	r14, r24
     838:	88 ed       	ldi	r24, 0xD8	; 216
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	6a d2       	rcall	.+1236   	; 0xd12 <_ZN14HardwareSerial4readEv>
			error_byte = Serial1.read();
     83e:	d8 2f       	mov	r29, r24
     840:	88 ed       	ldi	r24, 0xD8	; 216
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	66 d2       	rcall	.+1228   	; 0xd12 <_ZN14HardwareSerial4readEv>
     846:	c8 2f       	mov	r28, r24
			error_byte_old = error_byte ? error_byte : error_byte_old;
     848:	81 11       	cpse	r24, r1
     84a:	03 c0       	rjmp	.+6      	; 0x852 <_Z12printDataLCDv+0x6a>
     84c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <error_byte_old>
     850:	01 c0       	rjmp	.+2      	; 0x854 <_Z12printDataLCDv+0x6c>
     852:	8c 2f       	mov	r24, r28
     854:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <error_byte_old>
			
			lcd.setCursor(7,0);
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	67 e0       	ldi	r22, 0x07	; 7
     85c:	80 e2       	ldi	r24, 0x20	; 32
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	c0 d7       	rcall	.+3968   	; 0x17e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     862:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <error_counter>
     866:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <error_counter+0x1>
			if (error_byte || error_counter) {	
     86a:	c1 11       	cpse	r28, r1
     86c:	02 c0       	rjmp	.+4      	; 0x872 <_Z12printDataLCDv+0x8a>
     86e:	00 97       	sbiw	r24, 0x00	; 0
     870:	d1 f0       	breq	.+52     	; 0x8a6 <_Z12printDataLCDv+0xbe>
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     872:	8b 30       	cpi	r24, 0x0B	; 11
     874:	91 05       	cpc	r25, r1
     876:	14 f4       	brge	.+4      	; 0x87c <_Z12printDataLCDv+0x94>
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	02 c0       	rjmp	.+4      	; 0x880 <_Z12printDataLCDv+0x98>
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <error_counter+0x1>
     884:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <error_counter>
				lcd.print("ERROR:");
     888:	6e ed       	ldi	r22, 0xDE	; 222
     88a:	72 e0       	ldi	r23, 0x02	; 2
     88c:	80 e2       	ldi	r24, 0x20	; 32
     88e:	93 e0       	ldi	r25, 0x03	; 3
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
     890:	08 d5       	rcall	.+2576   	; 0x12a2 <_ZN5Print5printEPKc>
     892:	4a e0       	ldi	r20, 0x0A	; 10
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	60 91 30 03 	lds	r22, 0x0330	; 0x800330 <error_byte_old>
     89a:	80 e2       	ldi	r24, 0x20	; 32
     89c:	93 e0       	ldi	r25, 0x03	; 3
				lcd.print("   ");
     89e:	55 d5       	rcall	.+2730   	; 0x134a <_ZN5Print5printEhi>
     8a0:	6c ee       	ldi	r22, 0xEC	; 236
     8a2:	72 e0       	ldi	r23, 0x02	; 2
			} else {
				lcd.print("          ");
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <_Z12printDataLCDv+0xc2>
     8a6:	65 ee       	ldi	r22, 0xE5	; 229
     8a8:	72 e0       	ldi	r23, 0x02	; 2
     8aa:	80 e2       	ldi	r24, 0x20	; 32
     8ac:	93 e0       	ldi	r25, 0x03	; 3
			}
			if (msgLength > 2) {
     8ae:	f9 d4       	rcall	.+2546   	; 0x12a2 <_ZN5Print5printEPKc>
     8b0:	d3 30       	cpi	r29, 0x03	; 3
     8b2:	08 f4       	brcc	.+2      	; 0x8b6 <_Z12printDataLCDv+0xce>
				position = Serial1.read();
     8b4:	b4 c0       	rjmp	.+360    	; 0xa1e <_Z12printDataLCDv+0x236>
     8b6:	88 ed       	ldi	r24, 0xD8	; 216
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	2b d2       	rcall	.+1110   	; 0xd12 <_ZN14HardwareSerial4readEv>
     8bc:	ec 01       	movw	r28, r24
				position = (Serial1.read() * 255) + position;
     8be:	88 ed       	ldi	r24, 0xD8	; 216
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	27 d2       	rcall	.+1102   	; 0xd12 <_ZN14HardwareSerial4readEv>
     8c4:	2f ef       	ldi	r18, 0xFF	; 255
     8c6:	ac 01       	movw	r20, r24
     8c8:	24 9f       	mul	r18, r20
     8ca:	c0 01       	movw	r24, r0
     8cc:	25 9f       	mul	r18, r21
     8ce:	90 0d       	add	r25, r0
     8d0:	11 24       	eor	r1, r1
     8d2:	6c 01       	movw	r12, r24
     8d4:	cc 0e       	add	r12, r28
     8d6:	dd 1e       	adc	r13, r29
     8d8:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <position_old>
				rotations = position_old > position ? rotations + 1 : rotations;
     8dc:	30 91 36 03 	lds	r19, 0x0336	; 0x800336 <position_old+0x1>
     8e0:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <rotations>
     8e4:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <rotations+0x1>
     8e8:	c2 16       	cp	r12, r18
     8ea:	d3 06       	cpc	r13, r19
     8ec:	0c f4       	brge	.+2      	; 0x8f0 <_Z12printDataLCDv+0x108>
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <rotations+0x1>
     8f4:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <rotations>
				position_old = position;
     8f8:	d0 92 36 03 	sts	0x0336, r13	; 0x800336 <position_old+0x1>
     8fc:	c0 92 35 03 	sts	0x0335, r12	; 0x800335 <position_old>
				
				//Serial.println(position);
				speed = Serial1.read();
     900:	88 ed       	ldi	r24, 0xD8	; 216
     902:	93 e0       	ldi	r25, 0x03	; 3
     904:	06 d2       	rcall	.+1036   	; 0xd12 <_ZN14HardwareSerial4readEv>
     906:	8c 01       	movw	r16, r24
				speed = (Serial1.read() * 255) + speed;
     908:	88 ed       	ldi	r24, 0xD8	; 216
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	02 d2       	rcall	.+1028   	; 0xd12 <_ZN14HardwareSerial4readEv>
     90e:	df ef       	ldi	r29, 0xFF	; 255
     910:	9c 01       	movw	r18, r24
     912:	d2 9f       	mul	r29, r18
     914:	c0 01       	movw	r24, r0
     916:	d3 9f       	mul	r29, r19
     918:	90 0d       	add	r25, r0
     91a:	11 24       	eor	r1, r1
     91c:	08 0f       	add	r16, r24
				//Serial.println(speed);
				load = Serial1.read();
     91e:	19 1f       	adc	r17, r25
     920:	88 ed       	ldi	r24, 0xD8	; 216
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	f6 d1       	rcall	.+1004   	; 0xd12 <_ZN14HardwareSerial4readEv>
				load = (Serial1.read() * 255) + load;
     926:	5c 01       	movw	r10, r24
     928:	88 ed       	ldi	r24, 0xD8	; 216
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	f2 d1       	rcall	.+996    	; 0xd12 <_ZN14HardwareSerial4readEv>
     92e:	ac 01       	movw	r20, r24
     930:	d4 9f       	mul	r29, r20
     932:	c0 01       	movw	r24, r0
     934:	d5 9f       	mul	r29, r21
     936:	90 0d       	add	r25, r0
     938:	11 24       	eor	r1, r1
				voltage = Serial1.read();
     93a:	ec 01       	movw	r28, r24
     93c:	ca 0d       	add	r28, r10
     93e:	db 1d       	adc	r29, r11
				temperature = Serial1.read();
     940:	88 ed       	ldi	r24, 0xD8	; 216
     942:	93 e0       	ldi	r25, 0x03	; 3
     944:	e6 d1       	rcall	.+972    	; 0xd12 <_ZN14HardwareSerial4readEv>
				registered = Serial1.read();
     946:	88 ed       	ldi	r24, 0xD8	; 216
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	e3 d1       	rcall	.+966    	; 0xd12 <_ZN14HardwareSerial4readEv>
				moving = Serial1.read();
     94c:	88 ed       	ldi	r24, 0xD8	; 216
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	e0 d1       	rcall	.+960    	; 0xd12 <_ZN14HardwareSerial4readEv>
     952:	88 ed       	ldi	r24, 0xD8	; 216
				lock = Serial1.read();
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	dd d1       	rcall	.+954    	; 0xd12 <_ZN14HardwareSerial4readEv>
     958:	88 ed       	ldi	r24, 0xD8	; 216
     95a:	93 e0       	ldi	r25, 0x03	; 3
				punch = Serial1.read();
     95c:	da d1       	rcall	.+948    	; 0xd12 <_ZN14HardwareSerial4readEv>
     95e:	88 ed       	ldi	r24, 0xD8	; 216
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	d7 d1       	rcall	.+942    	; 0xd12 <_ZN14HardwareSerial4readEv>
				punch = (Serial1.read() * 255) + punch;
     964:	88 ed       	ldi	r24, 0xD8	; 216
     966:	93 e0       	ldi	r25, 0x03	; 3
     968:	d4 d1       	rcall	.+936    	; 0xd12 <_ZN14HardwareSerial4readEv>
     96a:	88 ed       	ldi	r24, 0xD8	; 216
				current = Serial1.read();
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	d1 d1       	rcall	.+930    	; 0xd12 <_ZN14HardwareSerial4readEv>
     970:	88 ed       	ldi	r24, 0xD8	; 216
     972:	93 e0       	ldi	r25, 0x03	; 3
				current = (Serial1.read() * 255) + current;
     974:	ce d1       	rcall	.+924    	; 0xd12 <_ZN14HardwareSerial4readEv>
     976:	01 15       	cp	r16, r1
     978:	54 e0       	ldi	r21, 0x04	; 4
				//Serial.println(load);
				if (speed > 0x3FF) {
     97a:	15 07       	cpc	r17, r21
     97c:	24 f0       	brlt	.+8      	; 0x986 <_Z12printDataLCDv+0x19e>
     97e:	14 50       	subi	r17, 0x04	; 4
					speedDirection = CW;
					speed = speed - 0x400;
     980:	aa 24       	eor	r10, r10
				punch = (Serial1.read() * 255) + punch;
				current = Serial1.read();
				current = (Serial1.read() * 255) + current;
				//Serial.println(load);
				if (speed > 0x3FF) {
					speedDirection = CW;
     982:	a3 94       	inc	r10
     984:	01 c0       	rjmp	.+2      	; 0x988 <_Z12printDataLCDv+0x1a0>
     986:	a1 2c       	mov	r10, r1
					speed = speed - 0x400;
					} else {
					speedDirection = CCW;
				}
				if (load > 0x3FF) {
     988:	c1 15       	cp	r28, r1
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	d8 07       	cpc	r29, r24
     98e:	24 f0       	brlt	.+8      	; 0x998 <_Z12printDataLCDv+0x1b0>
					loadDirection = CW;
     990:	d4 50       	subi	r29, 0x04	; 4
     992:	bb 24       	eor	r11, r11
     994:	b3 94       	inc	r11
					load = load - 0x400;
					} else {
					loadDirection = CCW;
     996:	01 c0       	rjmp	.+2      	; 0x99a <_Z12printDataLCDv+0x1b2>

				//Serial.println("================");
				//lcd.clear();
				//char buffer[16];
				//sprintf(buffer, "Servo ID: %d", servoID);
				printLCD1(LCD_COL1, 0, servoID);
     998:	b1 2c       	mov	r11, r1
     99a:	a7 01       	movw	r20, r14
     99c:	55 27       	eor	r21, r21
     99e:	60 e0       	ldi	r22, 0x00	; 0
				printLCD4(LCD_COL1, 1, position);
     9a0:	84 e0       	ldi	r24, 0x04	; 4
     9a2:	71 dc       	rcall	.-1822   	; 0x286 <_Z9printLCD1hhi>
     9a4:	a6 01       	movw	r20, r12
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	84 e0       	ldi	r24, 0x04	; 4
				printLCD4(LCD_COL2, 1, currPos);
     9aa:	cf dc       	rcall	.-1634   	; 0x34a <_Z9printLCD4hhi>
     9ac:	40 91 31 03 	lds	r20, 0x0331	; 0x800331 <currPos>
     9b0:	50 91 32 03 	lds	r21, 0x0332	; 0x800332 <currPos+0x1>
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	8a e0       	ldi	r24, 0x0A	; 10
				// 			lcd.setCursor(LCD_COL2 ,1);
				// 			lcd.print((int)(currPos));
				//lcd.setCursor(10,1);
				//lcd.print(rotations);
				printLCD3(LCD_COL1, 2, speed * MX_PRESENT_SPEED_RPM);
     9b8:	c8 dc       	rcall	.-1648   	; 0x34a <_Z9printLCD4hhi>
     9ba:	b8 01       	movw	r22, r16
     9bc:	11 0f       	add	r17, r17
     9be:	88 0b       	sbc	r24, r24
     9c0:	99 0b       	sbc	r25, r25
     9c2:	9e d0       	rcall	.+316    	; 0xb00 <__floatsisf>
     9c4:	2e ea       	ldi	r18, 0xAE	; 174
     9c6:	37 e4       	ldi	r19, 0x47	; 71
     9c8:	41 ee       	ldi	r20, 0xE1	; 225
     9ca:	5d e3       	ldi	r21, 0x3D	; 61
     9cc:	fd d0       	rcall	.+506    	; 0xbc8 <__mulsf3>
     9ce:	65 d0       	rcall	.+202    	; 0xa9a <__fixsfsi>
     9d0:	ab 01       	movw	r20, r22
     9d2:	62 e0       	ldi	r22, 0x02	; 2
     9d4:	84 e0       	ldi	r24, 0x04	; 4
				lcd.print(speedDirection ? "CW " : "CCW");
     9d6:	87 dc       	rcall	.-1778   	; 0x2e6 <_Z9printLCD3hhi>
     9d8:	a1 10       	cpse	r10, r1
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <_Z12printDataLCDv+0x1fa>
     9dc:	6a ed       	ldi	r22, 0xDA	; 218
     9de:	72 e0       	ldi	r23, 0x02	; 2
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <_Z12printDataLCDv+0x1fe>
     9e2:	66 ed       	ldi	r22, 0xD6	; 214
     9e4:	72 e0       	ldi	r23, 0x02	; 2
     9e6:	80 e2       	ldi	r24, 0x20	; 32
				printLCD3(LCD_COL1, 3, load * MX_PRESENT_LOAD_PERCENT);
     9e8:	93 e0       	ldi	r25, 0x03	; 3
     9ea:	5b d4       	rcall	.+2230   	; 0x12a2 <_ZN5Print5printEPKc>
     9ec:	be 01       	movw	r22, r28
     9ee:	dd 0f       	add	r29, r29
     9f0:	88 0b       	sbc	r24, r24
     9f2:	99 0b       	sbc	r25, r25
     9f4:	85 d0       	rcall	.+266    	; 0xb00 <__floatsisf>
     9f6:	2e e5       	ldi	r18, 0x5E	; 94
     9f8:	3b e4       	ldi	r19, 0x4B	; 75
     9fa:	48 ec       	ldi	r20, 0xC8	; 200
     9fc:	5d e3       	ldi	r21, 0x3D	; 61
     9fe:	e4 d0       	rcall	.+456    	; 0xbc8 <__mulsf3>
     a00:	4c d0       	rcall	.+152    	; 0xa9a <__fixsfsi>
     a02:	ab 01       	movw	r20, r22
     a04:	63 e0       	ldi	r22, 0x03	; 3
     a06:	84 e0       	ldi	r24, 0x04	; 4
     a08:	6e dc       	rcall	.-1828   	; 0x2e6 <_Z9printLCD3hhi>
				lcd.print(loadDirection ? "CW " : "CCW");
     a0a:	b1 10       	cpse	r11, r1
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <_Z12printDataLCDv+0x22c>
     a0e:	6a ed       	ldi	r22, 0xDA	; 218
     a10:	72 e0       	ldi	r23, 0x02	; 2
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <_Z12printDataLCDv+0x230>
     a14:	66 ed       	ldi	r22, 0xD6	; 214
     a16:	72 e0       	ldi	r23, 0x02	; 2
     a18:	80 e2       	ldi	r24, 0x20	; 32
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	42 d4       	rcall	.+2180   	; 0x12a2 <_ZN5Print5printEPKc>
     a1e:	88 ed       	ldi	r24, 0xD8	; 216
				//printLCD3(LCD_COL2, 3, (45*(current-2048)));
			}
			while(Serial1.available() > 0) {
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	5d d1       	rcall	.+698    	; 0xcde <_ZN14HardwareSerial9availableEv>
     a24:	18 16       	cp	r1, r24
     a26:	19 06       	cpc	r1, r25
     a28:	24 f4       	brge	.+8      	; 0xa32 <_Z12printDataLCDv+0x24a>
     a2a:	88 ed       	ldi	r24, 0xD8	; 216
				//Serial.println(Serial1.read());
				Serial1.read();
     a2c:	93 e0       	ldi	r25, 0x03	; 3
     a2e:	71 d1       	rcall	.+738    	; 0xd12 <_ZN14HardwareSerial4readEv>
     a30:	f6 cf       	rjmp	.-20     	; 0xa1e <_Z12printDataLCDv+0x236>
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	70 e0       	ldi	r23, 0x00	; 0
			}
			
			delay(1);
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	08 d5       	rcall	.+2576   	; 0x144c <delay>
     a3c:	40 91 2c 03 	lds	r20, 0x032C	; 0x80032c <cycle_counter>
     a40:	50 91 2d 03 	lds	r21, 0x032D	; 0x80032d <cycle_counter+0x1>
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
     a44:	40 31       	cpi	r20, 0x10	; 16
     a46:	27 e2       	ldi	r18, 0x27	; 39
     a48:	52 07       	cpc	r21, r18
     a4a:	1c f4       	brge	.+6      	; 0xa52 <_Z12printDataLCDv+0x26a>
     a4c:	4f 5f       	subi	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <_Z12printDataLCDv+0x26e>
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	50 93 2d 03 	sts	0x032D, r21	; 0x80032d <cycle_counter+0x1>
     a5a:	40 93 2c 03 	sts	0x032C, r20	; 0x80032c <cycle_counter>
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	80 e1       	ldi	r24, 0x10	; 16
     a62:	df 91       	pop	r29
			printLCD4(16, 0, cycle_counter);
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
		}
	}
}
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	69 cc       	rjmp	.-1838   	; 0x34a <_Z9printLCD4hhi>
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
				Serial1.read();
			}
			
			delay(1);
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
			printLCD4(16, 0, cycle_counter);
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
		}
	}
}
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	08 95       	ret

00000a8e <loop>:
     a8e:	42 e2       	ldi	r20, 0x22	; 34
     a90:	64 e2       	ldi	r22, 0x24	; 36
     a92:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
	//setMaxTorque (0,1023);

	//  x =readLoad(3);
	 
	//delay(2);
	readServo(id, 0x24, 34);
     a96:	ec dd       	rcall	.-1064   	; 0x670 <_Z9readServohhh>
	printDataLCD();
     a98:	a7 ce       	rjmp	.-690    	; 0x7e8 <_Z12printDataLCDv>

00000a9a <__fixsfsi>:
     a9a:	04 d0       	rcall	.+8      	; 0xaa4 <__fixunssfsi>
     a9c:	68 94       	set
     a9e:	b1 11       	cpse	r27, r1
     aa0:	8d c0       	rjmp	.+282    	; 0xbbc <__fp_szero>
     aa2:	08 95       	ret

00000aa4 <__fixunssfsi>:
     aa4:	70 d0       	rcall	.+224    	; 0xb86 <__fp_splitA>
     aa6:	88 f0       	brcs	.+34     	; 0xaca <__fixunssfsi+0x26>
     aa8:	9f 57       	subi	r25, 0x7F	; 127
     aaa:	90 f0       	brcs	.+36     	; 0xad0 <__fixunssfsi+0x2c>
     aac:	b9 2f       	mov	r27, r25
     aae:	99 27       	eor	r25, r25
     ab0:	b7 51       	subi	r27, 0x17	; 23
     ab2:	a0 f0       	brcs	.+40     	; 0xadc <__fixunssfsi+0x38>
     ab4:	d1 f0       	breq	.+52     	; 0xaea <__fixunssfsi+0x46>
     ab6:	66 0f       	add	r22, r22
     ab8:	77 1f       	adc	r23, r23
     aba:	88 1f       	adc	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	1a f0       	brmi	.+6      	; 0xac6 <__fixunssfsi+0x22>
     ac0:	ba 95       	dec	r27
     ac2:	c9 f7       	brne	.-14     	; 0xab6 <__fixunssfsi+0x12>
     ac4:	12 c0       	rjmp	.+36     	; 0xaea <__fixunssfsi+0x46>
     ac6:	b1 30       	cpi	r27, 0x01	; 1
     ac8:	81 f0       	breq	.+32     	; 0xaea <__fixunssfsi+0x46>
     aca:	77 d0       	rcall	.+238    	; 0xbba <__fp_zero>
     acc:	b1 e0       	ldi	r27, 0x01	; 1
     ace:	08 95       	ret
     ad0:	74 c0       	rjmp	.+232    	; 0xbba <__fp_zero>
     ad2:	67 2f       	mov	r22, r23
     ad4:	78 2f       	mov	r23, r24
     ad6:	88 27       	eor	r24, r24
     ad8:	b8 5f       	subi	r27, 0xF8	; 248
     ada:	39 f0       	breq	.+14     	; 0xaea <__fixunssfsi+0x46>
     adc:	b9 3f       	cpi	r27, 0xF9	; 249
     ade:	cc f3       	brlt	.-14     	; 0xad2 <__fixunssfsi+0x2e>
     ae0:	86 95       	lsr	r24
     ae2:	77 95       	ror	r23
     ae4:	67 95       	ror	r22
     ae6:	b3 95       	inc	r27
     ae8:	d9 f7       	brne	.-10     	; 0xae0 <__fixunssfsi+0x3c>
     aea:	3e f4       	brtc	.+14     	; 0xafa <__fixunssfsi+0x56>
     aec:	90 95       	com	r25
     aee:	80 95       	com	r24
     af0:	70 95       	com	r23
     af2:	61 95       	neg	r22
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	8f 4f       	sbci	r24, 0xFF	; 255
     af8:	9f 4f       	sbci	r25, 0xFF	; 255
     afa:	08 95       	ret

00000afc <__floatunsisf>:
     afc:	e8 94       	clt
     afe:	09 c0       	rjmp	.+18     	; 0xb12 <__floatsisf+0x12>

00000b00 <__floatsisf>:
     b00:	97 fb       	bst	r25, 7
     b02:	3e f4       	brtc	.+14     	; 0xb12 <__floatsisf+0x12>
     b04:	90 95       	com	r25
     b06:	80 95       	com	r24
     b08:	70 95       	com	r23
     b0a:	61 95       	neg	r22
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	8f 4f       	sbci	r24, 0xFF	; 255
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	99 23       	and	r25, r25
     b14:	a9 f0       	breq	.+42     	; 0xb40 <__floatsisf+0x40>
     b16:	f9 2f       	mov	r31, r25
     b18:	96 e9       	ldi	r25, 0x96	; 150
     b1a:	bb 27       	eor	r27, r27
     b1c:	93 95       	inc	r25
     b1e:	f6 95       	lsr	r31
     b20:	87 95       	ror	r24
     b22:	77 95       	ror	r23
     b24:	67 95       	ror	r22
     b26:	b7 95       	ror	r27
     b28:	f1 11       	cpse	r31, r1
     b2a:	f8 cf       	rjmp	.-16     	; 0xb1c <__floatsisf+0x1c>
     b2c:	fa f4       	brpl	.+62     	; 0xb6c <__floatsisf+0x6c>
     b2e:	bb 0f       	add	r27, r27
     b30:	11 f4       	brne	.+4      	; 0xb36 <__floatsisf+0x36>
     b32:	60 ff       	sbrs	r22, 0
     b34:	1b c0       	rjmp	.+54     	; 0xb6c <__floatsisf+0x6c>
     b36:	6f 5f       	subi	r22, 0xFF	; 255
     b38:	7f 4f       	sbci	r23, 0xFF	; 255
     b3a:	8f 4f       	sbci	r24, 0xFF	; 255
     b3c:	9f 4f       	sbci	r25, 0xFF	; 255
     b3e:	16 c0       	rjmp	.+44     	; 0xb6c <__floatsisf+0x6c>
     b40:	88 23       	and	r24, r24
     b42:	11 f0       	breq	.+4      	; 0xb48 <__floatsisf+0x48>
     b44:	96 e9       	ldi	r25, 0x96	; 150
     b46:	11 c0       	rjmp	.+34     	; 0xb6a <__floatsisf+0x6a>
     b48:	77 23       	and	r23, r23
     b4a:	21 f0       	breq	.+8      	; 0xb54 <__floatsisf+0x54>
     b4c:	9e e8       	ldi	r25, 0x8E	; 142
     b4e:	87 2f       	mov	r24, r23
     b50:	76 2f       	mov	r23, r22
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <__floatsisf+0x5e>
     b54:	66 23       	and	r22, r22
     b56:	71 f0       	breq	.+28     	; 0xb74 <__floatsisf+0x74>
     b58:	96 e8       	ldi	r25, 0x86	; 134
     b5a:	86 2f       	mov	r24, r22
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	2a f0       	brmi	.+10     	; 0xb6c <__floatsisf+0x6c>
     b62:	9a 95       	dec	r25
     b64:	66 0f       	add	r22, r22
     b66:	77 1f       	adc	r23, r23
     b68:	88 1f       	adc	r24, r24
     b6a:	da f7       	brpl	.-10     	; 0xb62 <__floatsisf+0x62>
     b6c:	88 0f       	add	r24, r24
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	97 f9       	bld	r25, 7
     b74:	08 95       	ret

00000b76 <__fp_split3>:
     b76:	57 fd       	sbrc	r21, 7
     b78:	90 58       	subi	r25, 0x80	; 128
     b7a:	44 0f       	add	r20, r20
     b7c:	55 1f       	adc	r21, r21
     b7e:	59 f0       	breq	.+22     	; 0xb96 <__fp_splitA+0x10>
     b80:	5f 3f       	cpi	r21, 0xFF	; 255
     b82:	71 f0       	breq	.+28     	; 0xba0 <__fp_splitA+0x1a>
     b84:	47 95       	ror	r20

00000b86 <__fp_splitA>:
     b86:	88 0f       	add	r24, r24
     b88:	97 fb       	bst	r25, 7
     b8a:	99 1f       	adc	r25, r25
     b8c:	61 f0       	breq	.+24     	; 0xba6 <__fp_splitA+0x20>
     b8e:	9f 3f       	cpi	r25, 0xFF	; 255
     b90:	79 f0       	breq	.+30     	; 0xbb0 <__fp_splitA+0x2a>
     b92:	87 95       	ror	r24
     b94:	08 95       	ret
     b96:	12 16       	cp	r1, r18
     b98:	13 06       	cpc	r1, r19
     b9a:	14 06       	cpc	r1, r20
     b9c:	55 1f       	adc	r21, r21
     b9e:	f2 cf       	rjmp	.-28     	; 0xb84 <__fp_split3+0xe>
     ba0:	46 95       	lsr	r20
     ba2:	f1 df       	rcall	.-30     	; 0xb86 <__fp_splitA>
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <__fp_splitA+0x30>
     ba6:	16 16       	cp	r1, r22
     ba8:	17 06       	cpc	r1, r23
     baa:	18 06       	cpc	r1, r24
     bac:	99 1f       	adc	r25, r25
     bae:	f1 cf       	rjmp	.-30     	; 0xb92 <__fp_splitA+0xc>
     bb0:	86 95       	lsr	r24
     bb2:	71 05       	cpc	r23, r1
     bb4:	61 05       	cpc	r22, r1
     bb6:	08 94       	sec
     bb8:	08 95       	ret

00000bba <__fp_zero>:
     bba:	e8 94       	clt

00000bbc <__fp_szero>:
     bbc:	bb 27       	eor	r27, r27
     bbe:	66 27       	eor	r22, r22
     bc0:	77 27       	eor	r23, r23
     bc2:	cb 01       	movw	r24, r22
     bc4:	97 f9       	bld	r25, 7
     bc6:	08 95       	ret

00000bc8 <__mulsf3>:
     bc8:	0b d0       	rcall	.+22     	; 0xbe0 <__mulsf3x>
     bca:	78 c0       	rjmp	.+240    	; 0xcbc <__fp_round>
     bcc:	69 d0       	rcall	.+210    	; 0xca0 <__fp_pscA>
     bce:	28 f0       	brcs	.+10     	; 0xbda <__mulsf3+0x12>
     bd0:	6e d0       	rcall	.+220    	; 0xcae <__fp_pscB>
     bd2:	18 f0       	brcs	.+6      	; 0xbda <__mulsf3+0x12>
     bd4:	95 23       	and	r25, r21
     bd6:	09 f0       	breq	.+2      	; 0xbda <__mulsf3+0x12>
     bd8:	5a c0       	rjmp	.+180    	; 0xc8e <__fp_inf>
     bda:	5f c0       	rjmp	.+190    	; 0xc9a <__fp_nan>
     bdc:	11 24       	eor	r1, r1
     bde:	ee cf       	rjmp	.-36     	; 0xbbc <__fp_szero>

00000be0 <__mulsf3x>:
     be0:	ca df       	rcall	.-108    	; 0xb76 <__fp_split3>
     be2:	a0 f3       	brcs	.-24     	; 0xbcc <__mulsf3+0x4>

00000be4 <__mulsf3_pse>:
     be4:	95 9f       	mul	r25, r21
     be6:	d1 f3       	breq	.-12     	; 0xbdc <__mulsf3+0x14>
     be8:	95 0f       	add	r25, r21
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	55 1f       	adc	r21, r21
     bee:	62 9f       	mul	r22, r18
     bf0:	f0 01       	movw	r30, r0
     bf2:	72 9f       	mul	r23, r18
     bf4:	bb 27       	eor	r27, r27
     bf6:	f0 0d       	add	r31, r0
     bf8:	b1 1d       	adc	r27, r1
     bfa:	63 9f       	mul	r22, r19
     bfc:	aa 27       	eor	r26, r26
     bfe:	f0 0d       	add	r31, r0
     c00:	b1 1d       	adc	r27, r1
     c02:	aa 1f       	adc	r26, r26
     c04:	64 9f       	mul	r22, r20
     c06:	66 27       	eor	r22, r22
     c08:	b0 0d       	add	r27, r0
     c0a:	a1 1d       	adc	r26, r1
     c0c:	66 1f       	adc	r22, r22
     c0e:	82 9f       	mul	r24, r18
     c10:	22 27       	eor	r18, r18
     c12:	b0 0d       	add	r27, r0
     c14:	a1 1d       	adc	r26, r1
     c16:	62 1f       	adc	r22, r18
     c18:	73 9f       	mul	r23, r19
     c1a:	b0 0d       	add	r27, r0
     c1c:	a1 1d       	adc	r26, r1
     c1e:	62 1f       	adc	r22, r18
     c20:	83 9f       	mul	r24, r19
     c22:	a0 0d       	add	r26, r0
     c24:	61 1d       	adc	r22, r1
     c26:	22 1f       	adc	r18, r18
     c28:	74 9f       	mul	r23, r20
     c2a:	33 27       	eor	r19, r19
     c2c:	a0 0d       	add	r26, r0
     c2e:	61 1d       	adc	r22, r1
     c30:	23 1f       	adc	r18, r19
     c32:	84 9f       	mul	r24, r20
     c34:	60 0d       	add	r22, r0
     c36:	21 1d       	adc	r18, r1
     c38:	82 2f       	mov	r24, r18
     c3a:	76 2f       	mov	r23, r22
     c3c:	6a 2f       	mov	r22, r26
     c3e:	11 24       	eor	r1, r1
     c40:	9f 57       	subi	r25, 0x7F	; 127
     c42:	50 40       	sbci	r21, 0x00	; 0
     c44:	8a f0       	brmi	.+34     	; 0xc68 <__mulsf3_pse+0x84>
     c46:	e1 f0       	breq	.+56     	; 0xc80 <__mulsf3_pse+0x9c>
     c48:	88 23       	and	r24, r24
     c4a:	4a f0       	brmi	.+18     	; 0xc5e <__mulsf3_pse+0x7a>
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	bb 1f       	adc	r27, r27
     c52:	66 1f       	adc	r22, r22
     c54:	77 1f       	adc	r23, r23
     c56:	88 1f       	adc	r24, r24
     c58:	91 50       	subi	r25, 0x01	; 1
     c5a:	50 40       	sbci	r21, 0x00	; 0
     c5c:	a9 f7       	brne	.-22     	; 0xc48 <__mulsf3_pse+0x64>
     c5e:	9e 3f       	cpi	r25, 0xFE	; 254
     c60:	51 05       	cpc	r21, r1
     c62:	70 f0       	brcs	.+28     	; 0xc80 <__mulsf3_pse+0x9c>
     c64:	14 c0       	rjmp	.+40     	; 0xc8e <__fp_inf>
     c66:	aa cf       	rjmp	.-172    	; 0xbbc <__fp_szero>
     c68:	5f 3f       	cpi	r21, 0xFF	; 255
     c6a:	ec f3       	brlt	.-6      	; 0xc66 <__mulsf3_pse+0x82>
     c6c:	98 3e       	cpi	r25, 0xE8	; 232
     c6e:	dc f3       	brlt	.-10     	; 0xc66 <__mulsf3_pse+0x82>
     c70:	86 95       	lsr	r24
     c72:	77 95       	ror	r23
     c74:	67 95       	ror	r22
     c76:	b7 95       	ror	r27
     c78:	f7 95       	ror	r31
     c7a:	e7 95       	ror	r30
     c7c:	9f 5f       	subi	r25, 0xFF	; 255
     c7e:	c1 f7       	brne	.-16     	; 0xc70 <__mulsf3_pse+0x8c>
     c80:	fe 2b       	or	r31, r30
     c82:	88 0f       	add	r24, r24
     c84:	91 1d       	adc	r25, r1
     c86:	96 95       	lsr	r25
     c88:	87 95       	ror	r24
     c8a:	97 f9       	bld	r25, 7
     c8c:	08 95       	ret

00000c8e <__fp_inf>:
     c8e:	97 f9       	bld	r25, 7
     c90:	9f 67       	ori	r25, 0x7F	; 127
     c92:	80 e8       	ldi	r24, 0x80	; 128
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	08 95       	ret

00000c9a <__fp_nan>:
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	80 ec       	ldi	r24, 0xC0	; 192
     c9e:	08 95       	ret

00000ca0 <__fp_pscA>:
     ca0:	00 24       	eor	r0, r0
     ca2:	0a 94       	dec	r0
     ca4:	16 16       	cp	r1, r22
     ca6:	17 06       	cpc	r1, r23
     ca8:	18 06       	cpc	r1, r24
     caa:	09 06       	cpc	r0, r25
     cac:	08 95       	ret

00000cae <__fp_pscB>:
     cae:	00 24       	eor	r0, r0
     cb0:	0a 94       	dec	r0
     cb2:	12 16       	cp	r1, r18
     cb4:	13 06       	cpc	r1, r19
     cb6:	14 06       	cpc	r1, r20
     cb8:	05 06       	cpc	r0, r21
     cba:	08 95       	ret

00000cbc <__fp_round>:
     cbc:	09 2e       	mov	r0, r25
     cbe:	03 94       	inc	r0
     cc0:	00 0c       	add	r0, r0
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <__fp_round+0xc>
     cc4:	88 23       	and	r24, r24
     cc6:	52 f0       	brmi	.+20     	; 0xcdc <__fp_round+0x20>
     cc8:	bb 0f       	add	r27, r27
     cca:	40 f4       	brcc	.+16     	; 0xcdc <__fp_round+0x20>
     ccc:	bf 2b       	or	r27, r31
     cce:	11 f4       	brne	.+4      	; 0xcd4 <__fp_round+0x18>
     cd0:	60 ff       	sbrs	r22, 0
     cd2:	04 c0       	rjmp	.+8      	; 0xcdc <__fp_round+0x20>
     cd4:	6f 5f       	subi	r22, 0xFF	; 255
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	8f 4f       	sbci	r24, 0xFF	; 255
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	08 95       	ret

00000cde <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     cde:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     ce0:	91 8d       	ldd	r25, Z+25	; 0x19
     ce2:	22 8d       	ldd	r18, Z+26	; 0x1a
     ce4:	89 2f       	mov	r24, r25
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	80 5c       	subi	r24, 0xC0	; 192
     cea:	9f 4f       	sbci	r25, 0xFF	; 255
     cec:	82 1b       	sub	r24, r18
     cee:	91 09       	sbc	r25, r1
}
     cf0:	8f 73       	andi	r24, 0x3F	; 63
     cf2:	99 27       	eor	r25, r25
     cf4:	08 95       	ret

00000cf6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     cf6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     cf8:	91 8d       	ldd	r25, Z+25	; 0x19
     cfa:	82 8d       	ldd	r24, Z+26	; 0x1a
     cfc:	98 17       	cp	r25, r24
     cfe:	31 f0       	breq	.+12     	; 0xd0c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d00:	82 8d       	ldd	r24, Z+26	; 0x1a
     d02:	e8 0f       	add	r30, r24
     d04:	f1 1d       	adc	r31, r1
     d06:	85 8d       	ldd	r24, Z+29	; 0x1d
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d10:	08 95       	ret

00000d12 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d12:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d14:	91 8d       	ldd	r25, Z+25	; 0x19
     d16:	82 8d       	ldd	r24, Z+26	; 0x1a
     d18:	98 17       	cp	r25, r24
     d1a:	61 f0       	breq	.+24     	; 0xd34 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d1e:	df 01       	movw	r26, r30
     d20:	a8 0f       	add	r26, r24
     d22:	b1 1d       	adc	r27, r1
     d24:	5d 96       	adiw	r26, 0x1d	; 29
     d26:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     d28:	92 8d       	ldd	r25, Z+26	; 0x1a
     d2a:	9f 5f       	subi	r25, 0xFF	; 255
     d2c:	9f 73       	andi	r25, 0x3F	; 63
     d2e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     d38:	08 95       	ret

00000d3a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     d3a:	fc 01       	movw	r30, r24
     d3c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     d3e:	44 8d       	ldd	r20, Z+28	; 0x1c
     d40:	25 2f       	mov	r18, r21
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	84 2f       	mov	r24, r20
     d46:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     d48:	82 1b       	sub	r24, r18
     d4a:	93 0b       	sbc	r25, r19
     d4c:	54 17       	cp	r21, r20
     d4e:	10 f0       	brcs	.+4      	; 0xd54 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     d50:	cf 96       	adiw	r24, 0x3f	; 63
     d52:	08 95       	ret
  return tail - head - 1;
     d54:	01 97       	sbiw	r24, 0x01	; 1
}
     d56:	08 95       	ret

00000d58 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d58:	8c e3       	ldi	r24, 0x3C	; 60
     d5a:	98 e0       	ldi	r25, 0x08	; 8
     d5c:	89 2b       	or	r24, r25
     d5e:	39 f0       	breq	.+14     	; 0xd6e <_Z14serialEventRunv+0x16>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	89 2b       	or	r24, r25
     d66:	19 f0       	breq	.+6      	; 0xd6e <_Z14serialEventRunv+0x16>
     d68:	87 d1       	rcall	.+782    	; 0x1078 <_Z17Serial0_availablev>
     d6a:	81 11       	cpse	r24, r1
     d6c:	24 c0       	rjmp	.+72     	; 0xdb6 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     d6e:	81 ed       	ldi	r24, 0xD1	; 209
     d70:	98 e0       	ldi	r25, 0x08	; 8
     d72:	89 2b       	or	r24, r25
     d74:	39 f0       	breq	.+14     	; 0xd84 <_Z14serialEventRunv+0x2c>
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	89 2b       	or	r24, r25
     d7c:	19 f0       	breq	.+6      	; 0xd84 <_Z14serialEventRunv+0x2c>
     d7e:	11 d2       	rcall	.+1058   	; 0x11a2 <_Z17Serial1_availablev>
     d80:	81 11       	cpse	r24, r1
     d82:	1c c0       	rjmp	.+56     	; 0xdbc <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	89 2b       	or	r24, r25
     d8a:	41 f0       	breq	.+16     	; 0xd9c <_Z14serialEventRunv+0x44>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	89 2b       	or	r24, r25
     d92:	21 f0       	breq	.+8      	; 0xd9c <_Z14serialEventRunv+0x44>
     d94:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d98:	81 11       	cpse	r24, r1
     d9a:	13 c0       	rjmp	.+38     	; 0xdc2 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	89 2b       	or	r24, r25
     da2:	a1 f0       	breq	.+40     	; 0xdcc <_Z14serialEventRunv+0x74>
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	89 2b       	or	r24, r25
     daa:	81 f0       	breq	.+32     	; 0xdcc <_Z14serialEventRunv+0x74>
     dac:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     db0:	81 11       	cpse	r24, r1
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <_Z14serialEventRunv+0x70>
     db4:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     db6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dba:	d9 cf       	rjmp	.-78     	; 0xd6e <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     dbc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dc0:	e1 cf       	rjmp	.-62     	; 0xd84 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     dc2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dc6:	ea cf       	rjmp	.-44     	; 0xd9c <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     dc8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     dcc:	08 95       	ret

00000dce <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     dce:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     dd0:	84 8d       	ldd	r24, Z+28	; 0x1c
     dd2:	df 01       	movw	r26, r30
     dd4:	a8 0f       	add	r26, r24
     dd6:	b1 1d       	adc	r27, r1
     dd8:	a3 5a       	subi	r26, 0xA3	; 163
     dda:	bf 4f       	sbci	r27, 0xFF	; 255
     ddc:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     dde:	84 8d       	ldd	r24, Z+28	; 0x1c
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	8f 73       	andi	r24, 0x3F	; 63
     de6:	99 27       	eor	r25, r25
     de8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     dea:	a6 89       	ldd	r26, Z+22	; 0x16
     dec:	b7 89       	ldd	r27, Z+23	; 0x17
     dee:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     df0:	a0 89       	ldd	r26, Z+16	; 0x10
     df2:	b1 89       	ldd	r27, Z+17	; 0x11
     df4:	8c 91       	ld	r24, X
     df6:	83 70       	andi	r24, 0x03	; 3
     df8:	80 64       	ori	r24, 0x40	; 64
     dfa:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     dfc:	93 8d       	ldd	r25, Z+27	; 0x1b
     dfe:	84 8d       	ldd	r24, Z+28	; 0x1c
     e00:	98 13       	cpse	r25, r24
     e02:	06 c0       	rjmp	.+12     	; 0xe10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     e04:	02 88       	ldd	r0, Z+18	; 0x12
     e06:	f3 89       	ldd	r31, Z+19	; 0x13
     e08:	e0 2d       	mov	r30, r0
     e0a:	80 81       	ld	r24, Z
     e0c:	8f 7d       	andi	r24, 0xDF	; 223
     e0e:	80 83       	st	Z, r24
     e10:	08 95       	ret

00000e12 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ec 01       	movw	r28, r24
  _written = true;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e24:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e26:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e28:	98 13       	cpse	r25, r24
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <_ZN14HardwareSerial5writeEh+0x24>
     e2c:	e8 89       	ldd	r30, Y+16	; 0x10
     e2e:	f9 89       	ldd	r31, Y+17	; 0x11
     e30:	80 81       	ld	r24, Z
     e32:	85 fd       	sbrc	r24, 5
     e34:	25 c0       	rjmp	.+74     	; 0xe80 <_ZN14HardwareSerial5writeEh+0x6e>
     e36:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e38:	0b 8d       	ldd	r16, Y+27	; 0x1b
     e3a:	10 e0       	ldi	r17, 0x00	; 0
     e3c:	0f 5f       	subi	r16, 0xFF	; 255
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	0f 73       	andi	r16, 0x3F	; 63
     e42:	11 27       	eor	r17, r17
     e44:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e46:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e48:	e8 12       	cpse	r14, r24
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	07 fc       	sbrc	r0, 7
     e50:	fa cf       	rjmp	.-12     	; 0xe46 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e52:	e8 89       	ldd	r30, Y+16	; 0x10
     e54:	f9 89       	ldd	r31, Y+17	; 0x11
     e56:	80 81       	ld	r24, Z
     e58:	85 ff       	sbrs	r24, 5
     e5a:	f5 cf       	rjmp	.-22     	; 0xe46 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     e5c:	ce 01       	movw	r24, r28
     e5e:	b7 df       	rcall	.-146    	; 0xdce <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e60:	f2 cf       	rjmp	.-28     	; 0xe46 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e64:	fe 01       	movw	r30, r28
     e66:	e8 0f       	add	r30, r24
     e68:	f1 1d       	adc	r31, r1
     e6a:	e3 5a       	subi	r30, 0xA3	; 163
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e70:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e72:	f8 94       	cli
    _tx_buffer_head = i;
     e74:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     e76:	ea 89       	ldd	r30, Y+18	; 0x12
     e78:	fb 89       	ldd	r31, Y+19	; 0x13
     e7a:	80 81       	ld	r24, Z
     e7c:	80 62       	ori	r24, 0x20	; 32
     e7e:	0a c0       	rjmp	.+20     	; 0xe94 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e80:	9f b7       	in	r25, 0x3f	; 63
     e82:	f8 94       	cli
      *_udr = c;
     e84:	ee 89       	ldd	r30, Y+22	; 0x16
     e86:	ff 89       	ldd	r31, Y+23	; 0x17
     e88:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     e8a:	e8 89       	ldd	r30, Y+16	; 0x10
     e8c:	f9 89       	ldd	r31, Y+17	; 0x11
     e8e:	80 81       	ld	r24, Z
     e90:	83 70       	andi	r24, 0x03	; 3
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e96:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	08 95       	ret

00000eaa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     eb0:	88 8d       	ldd	r24, Y+24	; 0x18
     eb2:	88 23       	and	r24, r24
     eb4:	c1 f0       	breq	.+48     	; 0xee6 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     eb6:	ea 89       	ldd	r30, Y+18	; 0x12
     eb8:	fb 89       	ldd	r31, Y+19	; 0x13
     eba:	80 81       	ld	r24, Z
     ebc:	85 fd       	sbrc	r24, 5
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <_ZN14HardwareSerial5flushEv+0x20>
     ec0:	a8 89       	ldd	r26, Y+16	; 0x10
     ec2:	b9 89       	ldd	r27, Y+17	; 0x11
     ec4:	8c 91       	ld	r24, X
     ec6:	86 fd       	sbrc	r24, 6
     ec8:	0e c0       	rjmp	.+28     	; 0xee6 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	07 fc       	sbrc	r0, 7
     ece:	f5 cf       	rjmp	.-22     	; 0xeba <_ZN14HardwareSerial5flushEv+0x10>
     ed0:	80 81       	ld	r24, Z
     ed2:	85 ff       	sbrs	r24, 5
     ed4:	f2 cf       	rjmp	.-28     	; 0xeba <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     ed6:	a8 89       	ldd	r26, Y+16	; 0x10
     ed8:	b9 89       	ldd	r27, Y+17	; 0x11
     eda:	8c 91       	ld	r24, X
     edc:	85 ff       	sbrs	r24, 5
     ede:	ed cf       	rjmp	.-38     	; 0xeba <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ee0:	ce 01       	movw	r24, r28
     ee2:	75 df       	rcall	.-278    	; 0xdce <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ee4:	e8 cf       	rjmp	.-48     	; 0xeb6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     eec:	cf 92       	push	r12
     eee:	df 92       	push	r13
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ec 01       	movw	r28, r24
     efc:	6a 01       	movw	r12, r20
     efe:	7b 01       	movw	r14, r22
     f00:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f02:	e8 89       	ldd	r30, Y+16	; 0x10
     f04:	f9 89       	ldd	r31, Y+17	; 0x11
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f0a:	41 15       	cp	r20, r1
     f0c:	51 4e       	sbci	r21, 0xE1	; 225
     f0e:	61 05       	cpc	r22, r1
     f10:	71 05       	cpc	r23, r1
     f12:	a9 f0       	breq	.+42     	; 0xf3e <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	79 e0       	ldi	r23, 0x09	; 9
     f18:	8d e3       	ldi	r24, 0x3D	; 61
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a7 01       	movw	r20, r14
     f1e:	96 01       	movw	r18, r12
     f20:	cc d7       	rcall	.+3992   	; 0x1eba <__udivmodsi4>
     f22:	da 01       	movw	r26, r20
     f24:	c9 01       	movw	r24, r18
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	a1 09       	sbc	r26, r1
     f2a:	b1 09       	sbc	r27, r1
     f2c:	b6 95       	lsr	r27
     f2e:	a7 95       	ror	r26
     f30:	97 95       	ror	r25
     f32:	87 95       	ror	r24
     f34:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f36:	21 15       	cp	r18, r1
     f38:	80 e1       	ldi	r24, 0x10	; 16
     f3a:	38 07       	cpc	r19, r24
     f3c:	a0 f0       	brcs	.+40     	; 0xf66 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     f3e:	e8 89       	ldd	r30, Y+16	; 0x10
     f40:	f9 89       	ldd	r31, Y+17	; 0x11
     f42:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f44:	60 e8       	ldi	r22, 0x80	; 128
     f46:	74 e8       	ldi	r23, 0x84	; 132
     f48:	8e e1       	ldi	r24, 0x1E	; 30
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a7 01       	movw	r20, r14
     f4e:	96 01       	movw	r18, r12
     f50:	b4 d7       	rcall	.+3944   	; 0x1eba <__udivmodsi4>
     f52:	da 01       	movw	r26, r20
     f54:	c9 01       	movw	r24, r18
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	a1 09       	sbc	r26, r1
     f5a:	b1 09       	sbc	r27, r1
     f5c:	b6 95       	lsr	r27
     f5e:	a7 95       	ror	r26
     f60:	97 95       	ror	r25
     f62:	87 95       	ror	r24
     f64:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f66:	ec 85       	ldd	r30, Y+12	; 0x0c
     f68:	fd 85       	ldd	r31, Y+13	; 0x0d
     f6a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     f6c:	ee 85       	ldd	r30, Y+14	; 0x0e
     f6e:	ff 85       	ldd	r31, Y+15	; 0x0f
     f70:	20 83       	st	Z, r18

  _written = false;
     f72:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     f74:	ec 89       	ldd	r30, Y+20	; 0x14
     f76:	fd 89       	ldd	r31, Y+21	; 0x15
     f78:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     f7a:	ea 89       	ldd	r30, Y+18	; 0x12
     f7c:	fb 89       	ldd	r31, Y+19	; 0x13
     f7e:	80 81       	ld	r24, Z
     f80:	80 61       	ori	r24, 0x10	; 16
     f82:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     f84:	ea 89       	ldd	r30, Y+18	; 0x12
     f86:	fb 89       	ldd	r31, Y+19	; 0x13
     f88:	80 81       	ld	r24, Z
     f8a:	88 60       	ori	r24, 0x08	; 8
     f8c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     f8e:	ea 89       	ldd	r30, Y+18	; 0x12
     f90:	fb 89       	ldd	r31, Y+19	; 0x13
     f92:	80 81       	ld	r24, Z
     f94:	80 68       	ori	r24, 0x80	; 128
     f96:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     f98:	ea 89       	ldd	r30, Y+18	; 0x12
     f9a:	fb 89       	ldd	r31, Y+19	; 0x13
     f9c:	80 81       	ld	r24, Z
     f9e:	8f 7d       	andi	r24, 0xDF	; 223
     fa0:	80 83       	st	Z, r24
}
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	cf 90       	pop	r12
     fb0:	08 95       	ret

00000fb2 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	08 95       	ret

00000fb8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     fb8:	08 95       	ret

00000fba <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	0b b6       	in	r0, 0x3b	; 59
     fc6:	0f 92       	push	r0
     fc8:	2f 93       	push	r18
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     fd2:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <Serial+0x10>
     fd6:	f0 91 4c 03 	lds	r31, 0x034C	; 0x80034c <Serial+0x11>
     fda:	80 81       	ld	r24, Z
     fdc:	e0 91 51 03 	lds	r30, 0x0351	; 0x800351 <Serial+0x16>
     fe0:	f0 91 52 03 	lds	r31, 0x0352	; 0x800352 <Serial+0x17>
     fe4:	82 fd       	sbrc	r24, 2
     fe6:	12 c0       	rjmp	.+36     	; 0x100c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     fe8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     fea:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <Serial+0x19>
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ff2:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <Serial+0x1a>
     ff6:	82 17       	cp	r24, r18
     ff8:	51 f0       	breq	.+20     	; 0x100e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     ffa:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <Serial+0x19>
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	e5 5c       	subi	r30, 0xC5	; 197
    1002:	fc 4f       	sbci	r31, 0xFC	; 252
    1004:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1006:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <Serial+0x19>
    100a:	01 c0       	rjmp	.+2      	; 0x100e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    100c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    100e:	ff 91       	pop	r31
    1010:	ef 91       	pop	r30
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0b be       	out	0x3b, r0	; 59
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	0b b6       	in	r0, 0x3b	; 59
    1032:	0f 92       	push	r0
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    104c:	8b e3       	ldi	r24, 0x3B	; 59
    104e:	93 e0       	ldi	r25, 0x03	; 3
    1050:	be de       	rcall	.-644    	; 0xdce <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1052:	ff 91       	pop	r31
    1054:	ef 91       	pop	r30
    1056:	bf 91       	pop	r27
    1058:	af 91       	pop	r26
    105a:	9f 91       	pop	r25
    105c:	8f 91       	pop	r24
    105e:	7f 91       	pop	r23
    1060:	6f 91       	pop	r22
    1062:	5f 91       	pop	r21
    1064:	4f 91       	pop	r20
    1066:	3f 91       	pop	r19
    1068:	2f 91       	pop	r18
    106a:	0f 90       	pop	r0
    106c:	0b be       	out	0x3b, r0	; 59
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1078:	8b e3       	ldi	r24, 0x3B	; 59
    107a:	93 e0       	ldi	r25, 0x03	; 3
    107c:	30 de       	rcall	.-928    	; 0xcde <_ZN14HardwareSerial9availableEv>
    107e:	21 e0       	ldi	r18, 0x01	; 1
    1080:	89 2b       	or	r24, r25
    1082:	09 f4       	brne	.+2      	; 0x1086 <_Z17Serial0_availablev+0xe>
    1084:	20 e0       	ldi	r18, 0x00	; 0
}
    1086:	82 2f       	mov	r24, r18
    1088:	08 95       	ret

0000108a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f3 e0       	ldi	r31, 0x03	; 3
    108e:	13 82       	std	Z+3, r1	; 0x03
    1090:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1092:	88 ee       	ldi	r24, 0xE8	; 232
    1094:	93 e0       	ldi	r25, 0x03	; 3
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	84 83       	std	Z+4, r24	; 0x04
    109c:	95 83       	std	Z+5, r25	; 0x05
    109e:	a6 83       	std	Z+6, r26	; 0x06
    10a0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    10a2:	84 ef       	ldi	r24, 0xF4	; 244
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	80 83       	st	Z, r24
    10aa:	85 ec       	ldi	r24, 0xC5	; 197
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	95 87       	std	Z+13, r25	; 0x0d
    10b0:	84 87       	std	Z+12, r24	; 0x0c
    10b2:	84 ec       	ldi	r24, 0xC4	; 196
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	97 87       	std	Z+15, r25	; 0x0f
    10b8:	86 87       	std	Z+14, r24	; 0x0e
    10ba:	80 ec       	ldi	r24, 0xC0	; 192
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	91 8b       	std	Z+17, r25	; 0x11
    10c0:	80 8b       	std	Z+16, r24	; 0x10
    10c2:	81 ec       	ldi	r24, 0xC1	; 193
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	93 8b       	std	Z+19, r25	; 0x13
    10c8:	82 8b       	std	Z+18, r24	; 0x12
    10ca:	82 ec       	ldi	r24, 0xC2	; 194
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	95 8b       	std	Z+21, r25	; 0x15
    10d0:	84 8b       	std	Z+20, r24	; 0x14
    10d2:	86 ec       	ldi	r24, 0xC6	; 198
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	97 8b       	std	Z+23, r25	; 0x17
    10d8:	86 8b       	std	Z+22, r24	; 0x16
    10da:	11 8e       	std	Z+25, r1	; 0x19
    10dc:	12 8e       	std	Z+26, r1	; 0x1a
    10de:	13 8e       	std	Z+27, r1	; 0x1b
    10e0:	14 8e       	std	Z+28, r1	; 0x1c
    10e2:	08 95       	ret

000010e4 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	0b b6       	in	r0, 0x3b	; 59
    10f0:	0f 92       	push	r0
    10f2:	2f 93       	push	r18
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	ef 93       	push	r30
    10fa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    10fc:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <Serial1+0x10>
    1100:	f0 91 e9 03 	lds	r31, 0x03E9	; 0x8003e9 <Serial1+0x11>
    1104:	80 81       	ld	r24, Z
    1106:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <Serial1+0x16>
    110a:	f0 91 ef 03 	lds	r31, 0x03EF	; 0x8003ef <Serial1+0x17>
    110e:	82 fd       	sbrc	r24, 2
    1110:	12 c0       	rjmp	.+36     	; 0x1136 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1112:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1114:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <Serial1+0x19>
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    111c:	20 91 f2 03 	lds	r18, 0x03F2	; 0x8003f2 <Serial1+0x1a>
    1120:	82 17       	cp	r24, r18
    1122:	51 f0       	breq	.+20     	; 0x1138 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1124:	e0 91 f1 03 	lds	r30, 0x03F1	; 0x8003f1 <Serial1+0x19>
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	e8 52       	subi	r30, 0x28	; 40
    112c:	fc 4f       	sbci	r31, 0xFC	; 252
    112e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1130:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <Serial1+0x19>
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1136:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0b be       	out	0x3b, r0	; 59
    1146:	0f 90       	pop	r0
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	0f 90       	pop	r0
    114c:	1f 90       	pop	r1
    114e:	18 95       	reti

00001150 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1150:	1f 92       	push	r1
    1152:	0f 92       	push	r0
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	0f 92       	push	r0
    1158:	11 24       	eor	r1, r1
    115a:	0b b6       	in	r0, 0x3b	; 59
    115c:	0f 92       	push	r0
    115e:	2f 93       	push	r18
    1160:	3f 93       	push	r19
    1162:	4f 93       	push	r20
    1164:	5f 93       	push	r21
    1166:	6f 93       	push	r22
    1168:	7f 93       	push	r23
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    116e:	af 93       	push	r26
    1170:	bf 93       	push	r27
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1176:	88 ed       	ldi	r24, 0xD8	; 216
    1178:	93 e0       	ldi	r25, 0x03	; 3
    117a:	29 de       	rcall	.-942    	; 0xdce <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0b be       	out	0x3b, r0	; 59
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    11a2:	88 ed       	ldi	r24, 0xD8	; 216
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	9b dd       	rcall	.-1226   	; 0xcde <_ZN14HardwareSerial9availableEv>
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	89 2b       	or	r24, r25
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <_Z17Serial1_availablev+0xe>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
}
    11b0:	82 2f       	mov	r24, r18
    11b2:	08 95       	ret

000011b4 <_GLOBAL__sub_I___vector_36>:
    11b4:	e8 ed       	ldi	r30, 0xD8	; 216
    11b6:	f3 e0       	ldi	r31, 0x03	; 3
    11b8:	13 82       	std	Z+3, r1	; 0x03
    11ba:	12 82       	std	Z+2, r1	; 0x02
    11bc:	88 ee       	ldi	r24, 0xE8	; 232
    11be:	93 e0       	ldi	r25, 0x03	; 3
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	84 83       	std	Z+4, r24	; 0x04
    11c6:	95 83       	std	Z+5, r25	; 0x05
    11c8:	a6 83       	std	Z+6, r26	; 0x06
    11ca:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    11cc:	84 ef       	ldi	r24, 0xF4	; 244
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	80 83       	st	Z, r24
    11d4:	8d ec       	ldi	r24, 0xCD	; 205
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	95 87       	std	Z+13, r25	; 0x0d
    11da:	84 87       	std	Z+12, r24	; 0x0c
    11dc:	8c ec       	ldi	r24, 0xCC	; 204
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	97 87       	std	Z+15, r25	; 0x0f
    11e2:	86 87       	std	Z+14, r24	; 0x0e
    11e4:	88 ec       	ldi	r24, 0xC8	; 200
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	91 8b       	std	Z+17, r25	; 0x11
    11ea:	80 8b       	std	Z+16, r24	; 0x10
    11ec:	89 ec       	ldi	r24, 0xC9	; 201
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	93 8b       	std	Z+19, r25	; 0x13
    11f2:	82 8b       	std	Z+18, r24	; 0x12
    11f4:	8a ec       	ldi	r24, 0xCA	; 202
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	95 8b       	std	Z+21, r25	; 0x15
    11fa:	84 8b       	std	Z+20, r24	; 0x14
    11fc:	8e ec       	ldi	r24, 0xCE	; 206
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	97 8b       	std	Z+23, r25	; 0x17
    1202:	86 8b       	std	Z+22, r24	; 0x16
    1204:	11 8e       	std	Z+25, r1	; 0x19
    1206:	12 8e       	std	Z+26, r1	; 0x1a
    1208:	13 8e       	std	Z+27, r1	; 0x1b
    120a:	14 8e       	std	Z+28, r1	; 0x1c
    120c:	08 95       	ret

0000120e <initVariant>:
    120e:	08 95       	ret

00001210 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1210:	61 d1       	rcall	.+706    	; 0x14d4 <init>

	initVariant();
    1212:	fd df       	rcall	.-6      	; 0x120e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1214:	7a da       	rcall	.-2828   	; 0x70a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1216:	cc ea       	ldi	r28, 0xAC	; 172
    1218:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    121a:	39 dc       	rcall	.-1934   	; 0xa8e <loop>
		if (serialEventRun) serialEventRun();
    121c:	20 97       	sbiw	r28, 0x00	; 0
    121e:	e9 f3       	breq	.-6      	; 0x121a <main+0xa>
    1220:	9b dd       	rcall	.-1226   	; 0xd58 <_Z14serialEventRunv>
    1222:	fb cf       	rjmp	.-10     	; 0x121a <main+0xa>

00001224 <_ZN5Print5writeEPKhj>:
    1224:	cf 92       	push	r12
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    1226:	df 92       	push	r13
    1228:	ef 92       	push	r14
    122a:	ff 92       	push	r15
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	6c 01       	movw	r12, r24
    1236:	7a 01       	movw	r14, r20
    1238:	8b 01       	movw	r16, r22
    123a:	c0 e0       	ldi	r28, 0x00	; 0
    123c:	d0 e0       	ldi	r29, 0x00	; 0
    123e:	ce 15       	cp	r28, r14
    1240:	df 05       	cpc	r29, r15
    1242:	81 f0       	breq	.+32     	; 0x1264 <_ZN5Print5writeEPKhj+0x40>
    1244:	d8 01       	movw	r26, r16
    1246:	6d 91       	ld	r22, X+
    1248:	8d 01       	movw	r16, r26
    124a:	d6 01       	movw	r26, r12
    124c:	ed 91       	ld	r30, X+
    124e:	fc 91       	ld	r31, X
    1250:	01 90       	ld	r0, Z+
    1252:	f0 81       	ld	r31, Z
    1254:	e0 2d       	mov	r30, r0
    1256:	c6 01       	movw	r24, r12
    1258:	19 95       	eicall
    125a:	89 2b       	or	r24, r25
    125c:	11 f0       	breq	.+4      	; 0x1262 <_ZN5Print5writeEPKhj+0x3e>
    125e:	21 96       	adiw	r28, 0x01	; 1
    1260:	ee cf       	rjmp	.-36     	; 0x123e <_ZN5Print5writeEPKhj+0x1a>
    1262:	7e 01       	movw	r14, r28
    1264:	c7 01       	movw	r24, r14
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	cf 90       	pop	r12
    1276:	08 95       	ret

00001278 <_ZN5Print5writeEPKc>:
    1278:	61 15       	cp	r22, r1
    127a:	71 05       	cpc	r23, r1
    127c:	79 f0       	breq	.+30     	; 0x129c <_ZN5Print5writeEPKc+0x24>
    127e:	fb 01       	movw	r30, r22
    1280:	01 90       	ld	r0, Z+
    1282:	00 20       	and	r0, r0
    1284:	e9 f7       	brne	.-6      	; 0x1280 <_ZN5Print5writeEPKc+0x8>
    1286:	31 97       	sbiw	r30, 0x01	; 1
    1288:	af 01       	movw	r20, r30
    128a:	46 1b       	sub	r20, r22
    128c:	57 0b       	sbc	r21, r23
    128e:	dc 01       	movw	r26, r24
    1290:	ed 91       	ld	r30, X+
    1292:	fc 91       	ld	r31, X
    1294:	02 80       	ldd	r0, Z+2	; 0x02
    1296:	f3 81       	ldd	r31, Z+3	; 0x03
    1298:	e0 2d       	mov	r30, r0
    129a:	19 94       	eijmp
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	08 95       	ret

000012a2 <_ZN5Print5printEPKc>:
    12a2:	ea cf       	rjmp	.-44     	; 0x1278 <_ZN5Print5writeEPKc>

000012a4 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    12a4:	8f 92       	push	r8
    12a6:	9f 92       	push	r9
    12a8:	af 92       	push	r10
    12aa:	bf 92       	push	r11
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	a1 97       	sbiw	r28, 0x21	; 33
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	7c 01       	movw	r14, r24
    12ca:	fa 01       	movw	r30, r20
    12cc:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    12ce:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <_ZN5Print11printNumberEmh+0x32>
    12d4:	2a e0       	ldi	r18, 0x0A	; 10
    12d6:	8e 01       	movw	r16, r28
    12d8:	0f 5d       	subi	r16, 0xDF	; 223
    12da:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    12dc:	82 2e       	mov	r8, r18
    12de:	91 2c       	mov	r9, r1
    12e0:	a1 2c       	mov	r10, r1
    12e2:	b1 2c       	mov	r11, r1
    12e4:	bf 01       	movw	r22, r30
    12e6:	a5 01       	movw	r20, r10
    12e8:	94 01       	movw	r18, r8
    12ea:	e7 d5       	rcall	.+3022   	; 0x1eba <__udivmodsi4>
    n /= base;
    12ec:	f9 01       	movw	r30, r18
    12ee:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    12f0:	01 50       	subi	r16, 0x01	; 1
    12f2:	11 09       	sbc	r17, r1
    12f4:	6a 30       	cpi	r22, 0x0A	; 10
    12f6:	10 f4       	brcc	.+4      	; 0x12fc <_ZN5Print11printNumberEmh+0x58>
    12f8:	60 5d       	subi	r22, 0xD0	; 208
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <_ZN5Print11printNumberEmh+0x5a>
    12fc:	69 5c       	subi	r22, 0xC9	; 201
    12fe:	d8 01       	movw	r26, r16
    1300:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1302:	23 2b       	or	r18, r19
    1304:	24 2b       	or	r18, r20
    1306:	25 2b       	or	r18, r21
    1308:	69 f7       	brne	.-38     	; 0x12e4 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    130a:	b8 01       	movw	r22, r16
    130c:	c7 01       	movw	r24, r14
    130e:	b4 df       	rcall	.-152    	; 0x1278 <_ZN5Print5writeEPKc>
}
    1310:	a1 96       	adiw	r28, 0x21	; 33
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	bf 90       	pop	r11
    132a:	af 90       	pop	r10
    132c:	9f 90       	pop	r9
    132e:	8f 90       	pop	r8
    1330:	08 95       	ret

00001332 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1332:	21 15       	cp	r18, r1
    1334:	31 05       	cpc	r19, r1
    1336:	41 f4       	brne	.+16     	; 0x1348 <_ZN5Print5printEmi+0x16>
    1338:	dc 01       	movw	r26, r24
    133a:	ed 91       	ld	r30, X+
    133c:	fc 91       	ld	r31, X
    133e:	01 90       	ld	r0, Z+
    1340:	f0 81       	ld	r31, Z
    1342:	e0 2d       	mov	r30, r0
    1344:	64 2f       	mov	r22, r20
    1346:	19 94       	eijmp
  else return printNumber(n, base);
    1348:	ad cf       	rjmp	.-166    	; 0x12a4 <_ZN5Print11printNumberEmh>

0000134a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    134a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    134c:	46 2f       	mov	r20, r22
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	ee cf       	rjmp	.-36     	; 0x1332 <_ZN5Print5printEmi>

00001356 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    136c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <timer0_millis>
    1370:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <timer0_millis+0x1>
    1374:	a0 91 78 04 	lds	r26, 0x0478	; 0x800478 <timer0_millis+0x2>
    1378:	b0 91 79 04 	lds	r27, 0x0479	; 0x800479 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    137c:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1380:	23 e0       	ldi	r18, 0x03	; 3
    1382:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1384:	2d 37       	cpi	r18, 0x7D	; 125
    1386:	20 f4       	brcc	.+8      	; 0x1390 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	a1 1d       	adc	r26, r1
    138c:	b1 1d       	adc	r27, r1
    138e:	05 c0       	rjmp	.+10     	; 0x139a <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1390:	26 e8       	ldi	r18, 0x86	; 134
    1392:	23 0f       	add	r18, r19
		m += 1;
    1394:	02 96       	adiw	r24, 0x02	; 2
    1396:	a1 1d       	adc	r26, r1
    1398:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    139a:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <timer0_fract>
	timer0_millis = m;
    139e:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <timer0_millis>
    13a2:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <timer0_millis+0x1>
    13a6:	a0 93 78 04 	sts	0x0478, r26	; 0x800478 <timer0_millis+0x2>
    13aa:	b0 93 79 04 	sts	0x0479, r27	; 0x800479 <timer0_millis+0x3>
	timer0_overflow_count++;
    13ae:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <timer0_overflow_count>
    13b2:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <timer0_overflow_count+0x1>
    13b6:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <timer0_overflow_count+0x2>
    13ba:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <timer0_overflow_count+0x3>
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	a1 1d       	adc	r26, r1
    13c2:	b1 1d       	adc	r27, r1
    13c4:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <timer0_overflow_count>
    13c8:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <timer0_overflow_count+0x1>
    13cc:	a0 93 7c 04 	sts	0x047C, r26	; 0x80047c <timer0_overflow_count+0x2>
    13d0:	b0 93 7d 04 	sts	0x047D, r27	; 0x80047d <timer0_overflow_count+0x3>
}
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    13ea:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    13ec:	f8 94       	cli
	m = timer0_millis;
    13ee:	60 91 76 04 	lds	r22, 0x0476	; 0x800476 <timer0_millis>
    13f2:	70 91 77 04 	lds	r23, 0x0477	; 0x800477 <timer0_millis+0x1>
    13f6:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <timer0_millis+0x2>
    13fa:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <timer0_millis+0x3>
	SREG = oldSREG;
    13fe:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1400:	08 95       	ret

00001402 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1402:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1404:	f8 94       	cli
	m = timer0_overflow_count;
    1406:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <timer0_overflow_count>
    140a:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <timer0_overflow_count+0x1>
    140e:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <timer0_overflow_count+0x2>
    1412:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1416:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1418:	a8 9b       	sbis	0x15, 0	; 21
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <micros+0x24>
    141c:	2f 3f       	cpi	r18, 0xFF	; 255
    141e:	19 f0       	breq	.+6      	; 0x1426 <micros+0x24>
		m++;
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	a1 1d       	adc	r26, r1
    1424:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1426:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1428:	ba 2f       	mov	r27, r26
    142a:	a9 2f       	mov	r26, r25
    142c:	98 2f       	mov	r25, r24
    142e:	88 27       	eor	r24, r24
    1430:	82 0f       	add	r24, r18
    1432:	91 1d       	adc	r25, r1
    1434:	a1 1d       	adc	r26, r1
    1436:	b1 1d       	adc	r27, r1
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	42 e0       	ldi	r20, 0x02	; 2
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	4a 95       	dec	r20
    1448:	d1 f7       	brne	.-12     	; 0x143e <micros+0x3c>
}
    144a:	08 95       	ret

0000144c <delay>:

void delay(unsigned long ms)
{
    144c:	8f 92       	push	r8
    144e:	9f 92       	push	r9
    1450:	af 92       	push	r10
    1452:	bf 92       	push	r11
    1454:	cf 92       	push	r12
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	6b 01       	movw	r12, r22
    145e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1460:	d0 df       	rcall	.-96     	; 0x1402 <micros>
    1462:	4b 01       	movw	r8, r22
    1464:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1466:	c1 14       	cp	r12, r1
    1468:	d1 04       	cpc	r13, r1
    146a:	e1 04       	cpc	r14, r1
    146c:	f1 04       	cpc	r15, r1
		yield();
    146e:	f1 f0       	breq	.+60     	; 0x14ac <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1470:	41 d3       	rcall	.+1666   	; 0x1af4 <yield>
    1472:	c7 df       	rcall	.-114    	; 0x1402 <micros>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	88 19       	sub	r24, r8
    147a:	99 09       	sbc	r25, r9
    147c:	aa 09       	sbc	r26, r10
    147e:	bb 09       	sbc	r27, r11
    1480:	88 3e       	cpi	r24, 0xE8	; 232
    1482:	93 40       	sbci	r25, 0x03	; 3
    1484:	a1 05       	cpc	r26, r1
    1486:	b1 05       	cpc	r27, r1
    1488:	70 f3       	brcs	.-36     	; 0x1466 <delay+0x1a>
			ms--;
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	c2 1a       	sub	r12, r18
    148e:	d1 08       	sbc	r13, r1
    1490:	e1 08       	sbc	r14, r1
    1492:	f1 08       	sbc	r15, r1
			start += 1000;
    1494:	88 ee       	ldi	r24, 0xE8	; 232
    1496:	88 0e       	add	r8, r24
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	98 1e       	adc	r9, r24
    149c:	a1 1c       	adc	r10, r1
    149e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    14a0:	c1 14       	cp	r12, r1
    14a2:	d1 04       	cpc	r13, r1
    14a4:	e1 04       	cpc	r14, r1
    14a6:	f1 04       	cpc	r15, r1
    14a8:	21 f7       	brne	.-56     	; 0x1472 <delay+0x26>
    14aa:	dd cf       	rjmp	.-70     	; 0x1466 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	bf 90       	pop	r11
    14b6:	af 90       	pop	r10
    14b8:	9f 90       	pop	r9
    14ba:	8f 90       	pop	r8
    14bc:	08 95       	ret

000014be <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	91 05       	cpc	r25, r1
    14c2:	38 f0       	brcs	.+14     	; 0x14d2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    14cc:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <delayMicroseconds+0x10>
    14d2:	08 95       	ret

000014d4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    14d4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    14d6:	84 b5       	in	r24, 0x24	; 36
    14d8:	82 60       	ori	r24, 0x02	; 2
    14da:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    14dc:	84 b5       	in	r24, 0x24	; 36
    14de:	81 60       	ori	r24, 0x01	; 1
    14e0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    14e2:	85 b5       	in	r24, 0x25	; 37
    14e4:	82 60       	ori	r24, 0x02	; 2
    14e6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    14e8:	85 b5       	in	r24, 0x25	; 37
    14ea:	81 60       	ori	r24, 0x01	; 1
    14ec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    14ee:	ee e6       	ldi	r30, 0x6E	; 110
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	81 60       	ori	r24, 0x01	; 1
    14f6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    14f8:	e1 e8       	ldi	r30, 0x81	; 129
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    14fe:	80 81       	ld	r24, Z
    1500:	82 60       	ori	r24, 0x02	; 2
    1502:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1504:	80 81       	ld	r24, Z
    1506:	81 60       	ori	r24, 0x01	; 1
    1508:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    150a:	e0 e8       	ldi	r30, 0x80	; 128
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	81 60       	ori	r24, 0x01	; 1
    1512:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1514:	e1 eb       	ldi	r30, 0xB1	; 177
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	84 60       	ori	r24, 0x04	; 4
    151c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    151e:	e0 eb       	ldi	r30, 0xB0	; 176
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	81 60       	ori	r24, 0x01	; 1
    1526:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1528:	e1 e9       	ldi	r30, 0x91	; 145
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	82 60       	ori	r24, 0x02	; 2
    1530:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1532:	80 81       	ld	r24, Z
    1534:	81 60       	ori	r24, 0x01	; 1
    1536:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1538:	e0 e9       	ldi	r30, 0x90	; 144
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	81 60       	ori	r24, 0x01	; 1
    1540:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1542:	e1 ea       	ldi	r30, 0xA1	; 161
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	82 60       	ori	r24, 0x02	; 2
    154a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    154c:	80 81       	ld	r24, Z
    154e:	81 60       	ori	r24, 0x01	; 1
    1550:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1552:	e0 ea       	ldi	r30, 0xA0	; 160
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	81 60       	ori	r24, 0x01	; 1
    155a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    155c:	e1 e2       	ldi	r30, 0x21	; 33
    155e:	f1 e0       	ldi	r31, 0x01	; 1
    1560:	80 81       	ld	r24, Z
    1562:	82 60       	ori	r24, 0x02	; 2
    1564:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1566:	80 81       	ld	r24, Z
    1568:	81 60       	ori	r24, 0x01	; 1
    156a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    156c:	e0 e2       	ldi	r30, 0x20	; 32
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	80 81       	ld	r24, Z
    1572:	81 60       	ori	r24, 0x01	; 1
    1574:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1576:	ea e7       	ldi	r30, 0x7A	; 122
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	84 60       	ori	r24, 0x04	; 4
    157e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1580:	80 81       	ld	r24, Z
    1582:	82 60       	ori	r24, 0x02	; 2
    1584:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1586:	80 81       	ld	r24, Z
    1588:	81 60       	ori	r24, 0x01	; 1
    158a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    158c:	80 81       	ld	r24, Z
    158e:	80 68       	ori	r24, 0x80	; 128
    1590:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1592:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1596:	08 95       	ret

00001598 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	fc 01       	movw	r30, r24
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	e2 31       	cpi	r30, 0x12	; 18
    15a0:	f1 05       	cpc	r31, r1
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <turnOffPWM+0xe>
    15a4:	4d c0       	rjmp	.+154    	; 0x1640 <turnOffPWM+0xa8>
    15a6:	88 27       	eor	r24, r24
    15a8:	ee 58       	subi	r30, 0x8E	; 142
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	8f 4f       	sbci	r24, 0xFF	; 255
    15ae:	a7 c4       	rjmp	.+2382   	; 0x1efe <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    15b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15b4:	8f 77       	andi	r24, 0x7F	; 127
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    15b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15bc:	8f 7d       	andi	r24, 0xDF	; 223
    15be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15c2:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    15c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15c8:	87 7f       	andi	r24, 0xF7	; 247
    15ca:	f9 cf       	rjmp	.-14     	; 0x15be <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    15cc:	84 b5       	in	r24, 0x24	; 36
    15ce:	8f 77       	andi	r24, 0x7F	; 127
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    15d2:	84 b5       	in	r24, 0x24	; 36
    15d4:	8f 7d       	andi	r24, 0xDF	; 223
    15d6:	84 bd       	out	0x24, r24	; 36
    15d8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    15da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15de:	8f 77       	andi	r24, 0x7F	; 127
    15e0:	03 c0       	rjmp	.+6      	; 0x15e8 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    15e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15e6:	8f 7d       	andi	r24, 0xDF	; 223
    15e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15ec:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    15ee:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    15f2:	8f 77       	andi	r24, 0x7F	; 127
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    15f6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    15fa:	8f 7d       	andi	r24, 0xDF	; 223
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    15fe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1602:	87 7f       	andi	r24, 0xF7	; 247
    1604:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1608:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    160a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    160e:	8f 77       	andi	r24, 0x7F	; 127
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1612:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1616:	8f 7d       	andi	r24, 0xDF	; 223
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    161a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    161e:	87 7f       	andi	r24, 0xF7	; 247
    1620:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1624:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1626:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    162a:	8f 77       	andi	r24, 0x7F	; 127
    162c:	07 c0       	rjmp	.+14     	; 0x163c <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    162e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1632:	8f 7d       	andi	r24, 0xDF	; 223
    1634:	03 c0       	rjmp	.+6      	; 0x163c <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1636:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    163a:	87 7f       	andi	r24, 0xF7	; 247
    163c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1640:	08 95       	ret

00001642 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	fc 01       	movw	r30, r24
    164a:	e2 5b       	subi	r30, 0xB2	; 178
    164c:	fe 4f       	sbci	r31, 0xFE	; 254
    164e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1650:	fc 01       	movw	r30, r24
    1652:	ec 56       	subi	r30, 0x6C	; 108
    1654:	fe 4f       	sbci	r31, 0xFE	; 254
    1656:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1658:	88 23       	and	r24, r24
    165a:	61 f1       	breq	.+88     	; 0x16b4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	fc 01       	movw	r30, r24
    1664:	ec 50       	subi	r30, 0x0C	; 12
    1666:	fe 4f       	sbci	r31, 0xFE	; 254
    1668:	c5 91       	lpm	r28, Z+
    166a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    166c:	fc 01       	movw	r30, r24
    166e:	e6 52       	subi	r30, 0x26	; 38
    1670:	fe 4f       	sbci	r31, 0xFE	; 254
    1672:	a5 91       	lpm	r26, Z+
    1674:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1676:	61 11       	cpse	r22, r1
    1678:	09 c0       	rjmp	.+18     	; 0x168c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    167a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    167c:	f8 94       	cli
		*reg &= ~bit;
    167e:	88 81       	ld	r24, Y
    1680:	20 95       	com	r18
    1682:	82 23       	and	r24, r18
    1684:	88 83       	st	Y, r24
		*out &= ~bit;
    1686:	ec 91       	ld	r30, X
    1688:	2e 23       	and	r18, r30
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    168c:	62 30       	cpi	r22, 0x02	; 2
    168e:	61 f4       	brne	.+24     	; 0x16a8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1690:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1692:	f8 94       	cli
		*reg &= ~bit;
    1694:	88 81       	ld	r24, Y
    1696:	32 2f       	mov	r19, r18
    1698:	30 95       	com	r19
    169a:	83 23       	and	r24, r19
    169c:	88 83       	st	Y, r24
		*out |= bit;
    169e:	ec 91       	ld	r30, X
    16a0:	2e 2b       	or	r18, r30
    16a2:	2c 93       	st	X, r18
		SREG = oldSREG;
    16a4:	9f bf       	out	0x3f, r25	; 63
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    16a8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    16aa:	f8 94       	cli
		*reg |= bit;
    16ac:	e8 81       	ld	r30, Y
    16ae:	2e 2b       	or	r18, r30
    16b0:	28 83       	st	Y, r18
		SREG = oldSREG;
    16b2:	8f bf       	out	0x3f, r24	; 63
	}
}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	f9 01       	movw	r30, r18
    16c6:	e8 5f       	subi	r30, 0xF8	; 248
    16c8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ca:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    16cc:	f9 01       	movw	r30, r18
    16ce:	e2 5b       	subi	r30, 0xB2	; 178
    16d0:	fe 4f       	sbci	r31, 0xFE	; 254
    16d2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    16d4:	f9 01       	movw	r30, r18
    16d6:	ec 56       	subi	r30, 0x6C	; 108
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    16dc:	cc 23       	and	r28, r28
    16de:	b9 f0       	breq	.+46     	; 0x170e <digitalWrite+0x54>
    16e0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    16e2:	81 11       	cpse	r24, r1
    16e4:	59 df       	rcall	.-334    	; 0x1598 <turnOffPWM>

	out = portOutputRegister(port);
    16e6:	ec 2f       	mov	r30, r28
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	e6 52       	subi	r30, 0x26	; 38
    16f0:	fe 4f       	sbci	r31, 0xFE	; 254
    16f2:	a5 91       	lpm	r26, Z+
    16f4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    16f6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    16f8:	f8 94       	cli

	if (val == LOW) {
    16fa:	11 11       	cpse	r17, r1
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <digitalWrite+0x4c>
		*out &= ~bit;
    16fe:	8c 91       	ld	r24, X
    1700:	d0 95       	com	r29
    1702:	d8 23       	and	r29, r24
    1704:	02 c0       	rjmp	.+4      	; 0x170a <digitalWrite+0x50>
	} else {
		*out |= bit;
    1706:	ec 91       	ld	r30, X
    1708:	de 2b       	or	r29, r30
    170a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    170c:	9f bf       	out	0x3f, r25	; 63
}
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	08 95       	ret

00001716 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    1716:	fc 01       	movw	r30, r24
    1718:	13 82       	std	Z+3, r1	; 0x03
    171a:	12 82       	std	Z+2, r1	; 0x02
    171c:	86 e0       	ldi	r24, 0x06	; 6
    171e:	93 e0       	ldi	r25, 0x03	; 3
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	64 83       	std	Z+4, r22	; 0x04
    1726:	41 87       	std	Z+9, r20	; 0x09
    1728:	22 87       	std	Z+10, r18	; 0x0a
    172a:	13 86       	std	Z+11, r1	; 0x0b
    172c:	08 95       	ret

0000172e <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	ec 01       	movw	r28, r24
    1736:	16 2f       	mov	r17, r22
    1738:	6c 81       	ldd	r22, Y+4	; 0x04
    173a:	8e e7       	ldi	r24, 0x7E	; 126
    173c:	94 e0       	ldi	r25, 0x04	; 4
    173e:	b9 d1       	rcall	.+882    	; 0x1ab2 <_ZN7TwoWire17beginTransmissionEh>
    1740:	6b 85       	ldd	r22, Y+11	; 0x0b
    1742:	61 2b       	or	r22, r17
    1744:	8e e7       	ldi	r24, 0x7E	; 126
    1746:	94 e0       	ldi	r25, 0x04	; 4
    1748:	67 d1       	rcall	.+718    	; 0x1a18 <_ZN7TwoWire5writeEh>
    174a:	8e e7       	ldi	r24, 0x7E	; 126
    174c:	94 e0       	ldi	r25, 0x04	; 4
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	ca c1       	rjmp	.+916    	; 0x1aea <_ZN7TwoWire15endTransmissionEv>

00001756 <_ZN17LiquidCrystal_I2C9backlightEv>:
    1756:	28 e0       	ldi	r18, 0x08	; 8
    1758:	fc 01       	movw	r30, r24
    175a:	23 87       	std	Z+11, r18	; 0x0b
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	e7 cf       	rjmp	.-50     	; 0x172e <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00001760 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	8c 01       	movw	r16, r24
    1768:	c6 2f       	mov	r28, r22
    176a:	64 60       	ori	r22, 0x04	; 4
    176c:	e0 df       	rcall	.-64     	; 0x172e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a5 de       	rcall	.-694    	; 0x14be <delayMicroseconds>
    1774:	6c 2f       	mov	r22, r28
    1776:	6b 7f       	andi	r22, 0xFB	; 251
    1778:	c8 01       	movw	r24, r16
    177a:	d9 df       	rcall	.-78     	; 0x172e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    177c:	82 e3       	ldi	r24, 0x32	; 50
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	9b ce       	rjmp	.-714    	; 0x14be <delayMicroseconds>

00001788 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	ec 01       	movw	r28, r24
    1790:	16 2f       	mov	r17, r22
    1792:	cd df       	rcall	.-102    	; 0x172e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1794:	61 2f       	mov	r22, r17
    1796:	ce 01       	movw	r24, r28
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	e0 cf       	rjmp	.-64     	; 0x1760 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000017a0 <_ZN17LiquidCrystal_I2C4sendEhh>:
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	8c 01       	movw	r16, r24
    17aa:	c6 2f       	mov	r28, r22
    17ac:	d4 2f       	mov	r29, r20
    17ae:	60 7f       	andi	r22, 0xF0	; 240
    17b0:	64 2b       	or	r22, r20
    17b2:	ea df       	rcall	.-44     	; 0x1788 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    17b4:	80 e1       	ldi	r24, 0x10	; 16
    17b6:	c8 9f       	mul	r28, r24
    17b8:	b0 01       	movw	r22, r0
    17ba:	11 24       	eor	r1, r1
    17bc:	6d 2b       	or	r22, r29
    17be:	c8 01       	movw	r24, r16
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	df cf       	rjmp	.-66     	; 0x1788 <_ZN17LiquidCrystal_I2C10write4bitsEh>

000017ca <_ZN17LiquidCrystal_I2C7commandEh>:
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	e9 cf       	rjmp	.-46     	; 0x17a0 <_ZN17LiquidCrystal_I2C4sendEhh>

000017ce <_ZN17LiquidCrystal_I2C5clearEv>:
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	fc df       	rcall	.-8      	; 0x17ca <_ZN17LiquidCrystal_I2C7commandEh>
    17d2:	80 ed       	ldi	r24, 0xD0	; 208
    17d4:	97 e0       	ldi	r25, 0x07	; 7
    17d6:	73 ce       	rjmp	.-794    	; 0x14be <delayMicroseconds>

000017d8 <_ZN17LiquidCrystal_I2C4homeEv>:
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	f7 df       	rcall	.-18     	; 0x17ca <_ZN17LiquidCrystal_I2C7commandEh>
    17dc:	80 ed       	ldi	r24, 0xD0	; 208
    17de:	97 e0       	ldi	r25, 0x07	; 7
    17e0:	6e ce       	rjmp	.-804    	; 0x14be <delayMicroseconds>

000017e2 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	28 97       	sbiw	r28, 0x08	; 8
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	9c 01       	movw	r18, r24
    17f8:	88 e0       	ldi	r24, 0x08	; 8
    17fa:	e3 e0       	ldi	r30, 0x03	; 3
    17fc:	f2 e0       	ldi	r31, 0x02	; 2
    17fe:	de 01       	movw	r26, r28
    1800:	11 96       	adiw	r26, 0x01	; 1
    1802:	01 90       	ld	r0, Z+
    1804:	0d 92       	st	X+, r0
    1806:	8a 95       	dec	r24
    1808:	e1 f7       	brne	.-8      	; 0x1802 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    180a:	f9 01       	movw	r30, r18
    180c:	80 85       	ldd	r24, Z+8	; 0x08
    180e:	84 17       	cp	r24, r20
    1810:	10 f4       	brcc	.+4      	; 0x1816 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    1812:	4f ef       	ldi	r20, 0xFF	; 255
    1814:	48 0f       	add	r20, r24
    1816:	fe 01       	movw	r30, r28
    1818:	31 96       	adiw	r30, 0x01	; 1
    181a:	e4 0f       	add	r30, r20
    181c:	f1 1d       	adc	r31, r1
    181e:	e4 0f       	add	r30, r20
    1820:	f1 1d       	adc	r31, r1
    1822:	90 81       	ld	r25, Z
    1824:	69 0f       	add	r22, r25
    1826:	60 68       	ori	r22, 0x80	; 128
    1828:	c9 01       	movw	r24, r18
    182a:	28 96       	adiw	r28, 0x08	; 8
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	c7 cf       	rjmp	.-114    	; 0x17ca <_ZN17LiquidCrystal_I2C7commandEh>

0000183c <_ZN17LiquidCrystal_I2C7displayEv>:
    183c:	fc 01       	movw	r30, r24
    183e:	66 81       	ldd	r22, Z+6	; 0x06
    1840:	26 2f       	mov	r18, r22
    1842:	24 60       	ori	r18, 0x04	; 4
    1844:	26 83       	std	Z+6, r18	; 0x06
    1846:	6c 60       	ori	r22, 0x0C	; 12
    1848:	c0 cf       	rjmp	.-128    	; 0x17ca <_ZN17LiquidCrystal_I2C7commandEh>

0000184a <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	a9 df       	rcall	.-174    	; 0x17a0 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	08 95       	ret

00001854 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	ec 01       	movw	r28, r24
	if (lines > 1) {
    185a:	42 30       	cpi	r20, 0x02	; 2
    185c:	18 f0       	brcs	.+6      	; 0x1864 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	88 60       	ori	r24, 0x08	; 8
    1862:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    1864:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    1866:	22 23       	and	r18, r18
    1868:	29 f0       	breq	.+10     	; 0x1874 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    186a:	41 30       	cpi	r20, 0x01	; 1
    186c:	19 f4       	brne	.+6      	; 0x1874 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    186e:	8d 81       	ldd	r24, Y+5	; 0x05
    1870:	84 60       	ori	r24, 0x04	; 4
    1872:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    1874:	62 e3       	ldi	r22, 0x32	; 50
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	e7 dd       	rcall	.-1074   	; 0x144c <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    187e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1880:	ce 01       	movw	r24, r28
    1882:	55 df       	rcall	.-342    	; 0x172e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    1884:	68 ee       	ldi	r22, 0xE8	; 232
    1886:	73 e0       	ldi	r23, 0x03	; 3
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	df dd       	rcall	.-1090   	; 0x144c <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    188e:	60 e3       	ldi	r22, 0x30	; 48
    1890:	ce 01       	movw	r24, r28
    1892:	7a df       	rcall	.-268    	; 0x1788 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1894:	84 e9       	ldi	r24, 0x94	; 148
    1896:	91 e1       	ldi	r25, 0x11	; 17
    1898:	12 de       	rcall	.-988    	; 0x14be <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    189a:	60 e3       	ldi	r22, 0x30	; 48
    189c:	ce 01       	movw	r24, r28
    189e:	74 df       	rcall	.-280    	; 0x1788 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    18a0:	84 e9       	ldi	r24, 0x94	; 148
    18a2:	91 e1       	ldi	r25, 0x11	; 17
    18a4:	0c de       	rcall	.-1000   	; 0x14be <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    18a6:	60 e3       	ldi	r22, 0x30	; 48
    18a8:	ce 01       	movw	r24, r28
    18aa:	6e df       	rcall	.-292    	; 0x1788 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    18ac:	86 e9       	ldi	r24, 0x96	; 150
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	06 de       	rcall	.-1012   	; 0x14be <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    18b2:	60 e2       	ldi	r22, 0x20	; 32
    18b4:	ce 01       	movw	r24, r28
    18b6:	68 df       	rcall	.-304    	; 0x1788 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    18b8:	6d 81       	ldd	r22, Y+5	; 0x05
    18ba:	60 62       	ori	r22, 0x20	; 32
    18bc:	ce 01       	movw	r24, r28
    18be:	85 df       	rcall	.-246    	; 0x17ca <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    18c0:	84 e0       	ldi	r24, 0x04	; 4
    18c2:	8e 83       	std	Y+6, r24	; 0x06
	display();
    18c4:	ce 01       	movw	r24, r28
    18c6:	ba df       	rcall	.-140    	; 0x183c <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    18c8:	ce 01       	movw	r24, r28
    18ca:	81 df       	rcall	.-254    	; 0x17ce <_ZN17LiquidCrystal_I2C5clearEv>
    18cc:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    18ce:	8f 83       	std	Y+7, r24	; 0x07
    18d0:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    18d2:	ce 01       	movw	r24, r28
    18d4:	7a df       	rcall	.-268    	; 0x17ca <_ZN17LiquidCrystal_I2C7commandEh>
    18d6:	ce 01       	movw	r24, r28
    18d8:	df 91       	pop	r29
	
	home();
    18da:	cf 91       	pop	r28
  
}
    18dc:	7d cf       	rjmp	.-262    	; 0x17d8 <_ZN17LiquidCrystal_I2C4homeEv>

000018de <_ZN17LiquidCrystal_I2C9init_privEv>:
    18de:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    18e0:	df 93       	push	r29
    18e2:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    18e4:	8e e7       	ldi	r24, 0x7E	; 126
    18e6:	94 e0       	ldi	r25, 0x04	; 4
    18e8:	d5 d0       	rcall	.+426    	; 0x1a94 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    18ea:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	4a 85       	ldd	r20, Y+10	; 0x0a
    18f0:	69 85       	ldd	r22, Y+9	; 0x09
    18f2:	ce 01       	movw	r24, r28
}
    18f4:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    18f6:	cf 91       	pop	r28
    18f8:	ad cf       	rjmp	.-166    	; 0x1854 <_ZN17LiquidCrystal_I2C5beginEhhh>

000018fa <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    18fa:	f1 cf       	rjmp	.-30     	; 0x18de <_ZN17LiquidCrystal_I2C9init_privEv>

000018fc <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    18fc:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <_ZN7TwoWire14rxBufferLengthE>
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	20 91 b3 04 	lds	r18, 0x04B3	; 0x8004b3 <_ZN7TwoWire13rxBufferIndexE>
    1906:	82 1b       	sub	r24, r18
    1908:	91 09       	sbc	r25, r1
    190a:	08 95       	ret

0000190c <_ZN7TwoWire4readEv>:
    190c:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <_ZN7TwoWire13rxBufferIndexE>
    1910:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <_ZN7TwoWire14rxBufferLengthE>
    1914:	98 17       	cp	r25, r24
    1916:	50 f4       	brcc	.+20     	; 0x192c <_ZN7TwoWire4readEv+0x20>
    1918:	e9 2f       	mov	r30, r25
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	ec 54       	subi	r30, 0x4C	; 76
    191e:	fb 4f       	sbci	r31, 0xFB	; 251
    1920:	20 81       	ld	r18, Z
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	9f 5f       	subi	r25, 0xFF	; 255
    1926:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <_ZN7TwoWire13rxBufferIndexE>
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <_ZN7TwoWire4readEv+0x24>
    192c:	2f ef       	ldi	r18, 0xFF	; 255
    192e:	3f ef       	ldi	r19, 0xFF	; 255
    1930:	c9 01       	movw	r24, r18
    1932:	08 95       	ret

00001934 <_ZN7TwoWire4peekEv>:
    1934:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <_ZN7TwoWire13rxBufferIndexE>
    1938:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <_ZN7TwoWire14rxBufferLengthE>
    193c:	e8 17       	cp	r30, r24
    193e:	30 f4       	brcc	.+12     	; 0x194c <_ZN7TwoWire4peekEv+0x18>
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	ec 54       	subi	r30, 0x4C	; 76
    1944:	fb 4f       	sbci	r31, 0xFB	; 251
    1946:	80 81       	ld	r24, Z
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	08 95       	ret
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	9f ef       	ldi	r25, 0xFF	; 255
    1950:	08 95       	ret

00001952 <_ZN7TwoWire5flushEv>:
    1952:	08 95       	ret

00001954 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	ec 01       	movw	r28, r24
    195a:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <_ZN7TwoWire14user_onReceiveE>
    195e:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <_ZN7TwoWire14user_onReceiveE+0x1>
    1962:	30 97       	sbiw	r30, 0x00	; 0
    1964:	f1 f0       	breq	.+60     	; 0x19a2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1966:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <_ZN7TwoWire13rxBufferIndexE>
    196a:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <_ZN7TwoWire14rxBufferLengthE>
    196e:	98 17       	cp	r25, r24
    1970:	c0 f0       	brcs	.+48     	; 0x19a2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	29 2f       	mov	r18, r25
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	26 17       	cp	r18, r22
    197a:	37 07       	cpc	r19, r23
    197c:	54 f4       	brge	.+20     	; 0x1992 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    197e:	de 01       	movw	r26, r28
    1980:	a2 0f       	add	r26, r18
    1982:	b3 1f       	adc	r27, r19
    1984:	4c 91       	ld	r20, X
    1986:	d9 01       	movw	r26, r18
    1988:	ac 54       	subi	r26, 0x4C	; 76
    198a:	bb 4f       	sbci	r27, 0xFB	; 251
    198c:	4c 93       	st	X, r20
    198e:	9f 5f       	subi	r25, 0xFF	; 255
    1990:	f1 cf       	rjmp	.-30     	; 0x1974 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1992:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <_ZN7TwoWire13rxBufferIndexE>
    1996:	60 93 b2 04 	sts	0x04B2, r22	; 0x8004b2 <_ZN7TwoWire14rxBufferLengthE>
    199a:	cb 01       	movw	r24, r22
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	19 94       	eijmp
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <_ZN7TwoWire16onRequestServiceEv>:
    19a8:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <_ZN7TwoWire14user_onRequestE>
    19ac:	f0 91 8d 04 	lds	r31, 0x048D	; 0x80048d <_ZN7TwoWire14user_onRequestE+0x1>
    19b0:	30 97       	sbiw	r30, 0x00	; 0
    19b2:	29 f0       	breq	.+10     	; 0x19be <_ZN7TwoWire16onRequestServiceEv+0x16>
    19b4:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZN7TwoWire13txBufferIndexE>
    19b8:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <_ZN7TwoWire14txBufferLengthE>
    19bc:	19 94       	eijmp
    19be:	08 95       	ret

000019c0 <_ZN7TwoWire5writeEPKhj>:
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	7c 01       	movw	r14, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	8a 01       	movw	r16, r20
    19d6:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <_ZN7TwoWire12transmittingE>
    19da:	22 23       	and	r18, r18
    19dc:	89 f0       	breq	.+34     	; 0x1a00 <_ZN7TwoWire5writeEPKhj+0x40>
    19de:	eb 01       	movw	r28, r22
    19e0:	6b 01       	movw	r12, r22
    19e2:	c4 0e       	add	r12, r20
    19e4:	d5 1e       	adc	r13, r21
    19e6:	cc 15       	cp	r28, r12
    19e8:	dd 05       	cpc	r29, r13
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <_ZN7TwoWire5writeEPKhj+0x44>
    19ec:	69 91       	ld	r22, Y+
    19ee:	d7 01       	movw	r26, r14
    19f0:	ed 91       	ld	r30, X+
    19f2:	fc 91       	ld	r31, X
    19f4:	01 90       	ld	r0, Z+
    19f6:	f0 81       	ld	r31, Z
    19f8:	e0 2d       	mov	r30, r0
    19fa:	c7 01       	movw	r24, r14
    19fc:	19 95       	eicall
    19fe:	f3 cf       	rjmp	.-26     	; 0x19e6 <_ZN7TwoWire5writeEPKhj+0x26>
    1a00:	64 2f       	mov	r22, r20
    1a02:	eb d0       	rcall	.+470    	; 0x1bda <twi_transmit>
    1a04:	c8 01       	movw	r24, r16
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	08 95       	ret

00001a18 <_ZN7TwoWire5writeEh>:
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	1f 92       	push	r1
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	69 83       	std	Y+1, r22	; 0x01
    1a24:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <_ZN7TwoWire12transmittingE>
    1a28:	22 23       	and	r18, r18
    1a2a:	d1 f0       	breq	.+52     	; 0x1a60 <_ZN7TwoWire5writeEh+0x48>
    1a2c:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <_ZN7TwoWire14txBufferLengthE>
    1a30:	20 32       	cpi	r18, 0x20	; 32
    1a32:	40 f0       	brcs	.+16     	; 0x1a44 <_ZN7TwoWire5writeEh+0x2c>
    1a34:	21 e0       	ldi	r18, 0x01	; 1
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	fc 01       	movw	r30, r24
    1a3a:	33 83       	std	Z+3, r19	; 0x03
    1a3c:	22 83       	std	Z+2, r18	; 0x02
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	14 c0       	rjmp	.+40     	; 0x1a6c <_ZN7TwoWire5writeEh+0x54>
    1a44:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZN7TwoWire13txBufferIndexE>
    1a48:	e8 2f       	mov	r30, r24
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	ef 56       	subi	r30, 0x6F	; 111
    1a4e:	fb 4f       	sbci	r31, 0xFB	; 251
    1a50:	99 81       	ldd	r25, Y+1	; 0x01
    1a52:	90 83       	st	Z, r25
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZN7TwoWire13txBufferIndexE>
    1a5a:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <_ZN7TwoWire14txBufferLengthE>
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <_ZN7TwoWire5writeEh+0x50>
    1a60:	61 e0       	ldi	r22, 0x01	; 1
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	b9 d0       	rcall	.+370    	; 0x1bda <twi_transmit>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0f 90       	pop	r0
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <_ZN7TwoWireC1Ev>:
    1a74:	fc 01       	movw	r30, r24
    1a76:	13 82       	std	Z+3, r1	; 0x03
    1a78:	12 82       	std	Z+2, r1	; 0x02
    1a7a:	88 ee       	ldi	r24, 0xE8	; 232
    1a7c:	93 e0       	ldi	r25, 0x03	; 3
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	84 83       	std	Z+4, r24	; 0x04
    1a84:	95 83       	std	Z+5, r25	; 0x05
    1a86:	a6 83       	std	Z+6, r26	; 0x06
    1a88:	b7 83       	std	Z+7, r27	; 0x07
    1a8a:	82 e1       	ldi	r24, 0x12	; 18
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
    1a92:	08 95       	ret

00001a94 <_ZN7TwoWire5beginEv>:
    1a94:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <_ZN7TwoWire13rxBufferIndexE>
    1a98:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <_ZN7TwoWire14rxBufferLengthE>
    1a9c:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZN7TwoWire13txBufferIndexE>
    1aa0:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <_ZN7TwoWire14txBufferLengthE>
    1aa4:	28 d0       	rcall	.+80     	; 0x1af6 <twi_init>
    1aa6:	84 ed       	ldi	r24, 0xD4	; 212
    1aa8:	9c e0       	ldi	r25, 0x0C	; 12
    1aaa:	c4 d0       	rcall	.+392    	; 0x1c34 <twi_attachSlaveTxEvent>
    1aac:	8a ea       	ldi	r24, 0xAA	; 170
    1aae:	9c e0       	ldi	r25, 0x0C	; 12
    1ab0:	bc c0       	rjmp	.+376    	; 0x1c2a <twi_attachSlaveRxEvent>

00001ab2 <_ZN7TwoWire17beginTransmissionEh>:
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZN7TwoWire12transmittingE>
    1ab8:	60 93 b1 04 	sts	0x04B1, r22	; 0x8004b1 <_ZN7TwoWire9txAddressE>
    1abc:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZN7TwoWire13txBufferIndexE>
    1ac0:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <_ZN7TwoWire14txBufferLengthE>
    1ac4:	08 95       	ret

00001ac6 <_ZN7TwoWire15endTransmissionEh>:
    1ac6:	0f 93       	push	r16
    1ac8:	06 2f       	mov	r16, r22
    1aca:	21 e0       	ldi	r18, 0x01	; 1
    1acc:	40 91 8f 04 	lds	r20, 0x048F	; 0x80048f <_ZN7TwoWire14txBufferLengthE>
    1ad0:	61 e9       	ldi	r22, 0x91	; 145
    1ad2:	74 e0       	ldi	r23, 0x04	; 4
    1ad4:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <_ZN7TwoWire9txAddressE>
    1ad8:	2a d0       	rcall	.+84     	; 0x1b2e <twi_writeTo>
    1ada:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZN7TwoWire13txBufferIndexE>
    1ade:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <_ZN7TwoWire14txBufferLengthE>
    1ae2:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <_ZN7TwoWire12transmittingE>
    1ae6:	0f 91       	pop	r16
    1ae8:	08 95       	ret

00001aea <_ZN7TwoWire15endTransmissionEv>:
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	ec cf       	rjmp	.-40     	; 0x1ac6 <_ZN7TwoWire15endTransmissionEh>

00001aee <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1aee:	8e e7       	ldi	r24, 0x7E	; 126
    1af0:	94 e0       	ldi	r25, 0x04	; 4
    1af2:	c0 cf       	rjmp	.-128    	; 0x1a74 <_ZN7TwoWireC1Ev>

00001af4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1af4:	08 95       	ret

00001af6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1af6:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <twi_state>
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <twi_sendStop>
    1b00:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <twi_inRepStart>
    1b04:	61 e0       	ldi	r22, 0x01	; 1
    1b06:	84 e1       	ldi	r24, 0x14	; 20
    1b08:	d8 dd       	rcall	.-1104   	; 0x16ba <digitalWrite>
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	85 e1       	ldi	r24, 0x15	; 21
    1b0e:	d5 dd       	rcall	.-1110   	; 0x16ba <digitalWrite>
    1b10:	e9 eb       	ldi	r30, 0xB9	; 185
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8e 7f       	andi	r24, 0xFE	; 254
    1b18:	80 83       	st	Z, r24
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8d 7f       	andi	r24, 0xFD	; 253
    1b1e:	80 83       	st	Z, r24
    1b20:	88 e4       	ldi	r24, 0x48	; 72
    1b22:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1b26:	85 e4       	ldi	r24, 0x45	; 69
    1b28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b2c:	08 95       	ret

00001b2e <twi_writeTo>:
    1b2e:	0f 93       	push	r16
    1b30:	41 32       	cpi	r20, 0x21	; 33
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <twi_writeTo+0x8>
    1b34:	4a c0       	rjmp	.+148    	; 0x1bca <twi_writeTo+0x9c>
    1b36:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <twi_state>
    1b3a:	91 11       	cpse	r25, r1
    1b3c:	fc cf       	rjmp	.-8      	; 0x1b36 <twi_writeTo+0x8>
    1b3e:	32 e0       	ldi	r19, 0x02	; 2
    1b40:	30 93 41 05 	sts	0x0541, r19	; 0x800541 <twi_state>
    1b44:	00 93 3f 05 	sts	0x053F, r16	; 0x80053f <twi_sendStop>
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	30 93 d4 04 	sts	0x04D4, r19	; 0x8004d4 <twi_error>
    1b4e:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <twi_masterBufferIndex>
    1b52:	40 93 18 05 	sts	0x0518, r20	; 0x800518 <twi_masterBufferLength>
    1b56:	56 2f       	mov	r21, r22
    1b58:	aa e1       	ldi	r26, 0x1A	; 26
    1b5a:	b5 e0       	ldi	r27, 0x05	; 5
    1b5c:	fb 01       	movw	r30, r22
    1b5e:	3e 2f       	mov	r19, r30
    1b60:	35 1b       	sub	r19, r21
    1b62:	34 17       	cp	r19, r20
    1b64:	18 f4       	brcc	.+6      	; 0x1b6c <twi_writeTo+0x3e>
    1b66:	31 91       	ld	r19, Z+
    1b68:	3d 93       	st	X+, r19
    1b6a:	f9 cf       	rjmp	.-14     	; 0x1b5e <twi_writeTo+0x30>
    1b6c:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <twi_slarw>
    1b70:	30 91 40 05 	lds	r19, 0x0540	; 0x800540 <twi_slarw>
    1b74:	88 0f       	add	r24, r24
    1b76:	83 2b       	or	r24, r19
    1b78:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <twi_slarw>
    1b7c:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <twi_inRepStart>
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	61 f4       	brne	.+24     	; 0x1b9c <twi_writeTo+0x6e>
    1b84:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <twi_inRepStart>
    1b88:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <twi_slarw>
    1b8c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1b90:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b94:	83 fd       	sbrc	r24, 3
    1b96:	f8 cf       	rjmp	.-16     	; 0x1b88 <twi_writeTo+0x5a>
    1b98:	85 ec       	ldi	r24, 0xC5	; 197
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <twi_writeTo+0x70>
    1b9c:	85 ee       	ldi	r24, 0xE5	; 229
    1b9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ba2:	22 23       	and	r18, r18
    1ba4:	21 f0       	breq	.+8      	; 0x1bae <twi_writeTo+0x80>
    1ba6:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <twi_state>
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	d1 f3       	breq	.-12     	; 0x1ba2 <twi_writeTo+0x74>
    1bae:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <twi_error>
    1bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb4:	79 f0       	breq	.+30     	; 0x1bd4 <twi_writeTo+0xa6>
    1bb6:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <twi_error>
    1bba:	80 32       	cpi	r24, 0x20	; 32
    1bbc:	41 f0       	breq	.+16     	; 0x1bce <twi_writeTo+0xa0>
    1bbe:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <twi_error>
    1bc2:	80 33       	cpi	r24, 0x30	; 48
    1bc4:	31 f0       	breq	.+12     	; 0x1bd2 <twi_writeTo+0xa4>
    1bc6:	94 e0       	ldi	r25, 0x04	; 4
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <twi_writeTo+0xa6>
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	03 c0       	rjmp	.+6      	; 0x1bd4 <twi_writeTo+0xa6>
    1bce:	92 e0       	ldi	r25, 0x02	; 2
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <twi_writeTo+0xa6>
    1bd2:	93 e0       	ldi	r25, 0x03	; 3
    1bd4:	89 2f       	mov	r24, r25
    1bd6:	0f 91       	pop	r16
    1bd8:	08 95       	ret

00001bda <twi_transmit>:
    1bda:	40 91 f6 04 	lds	r20, 0x04F6	; 0x8004f6 <twi_txBufferLength>
    1bde:	26 2f       	mov	r18, r22
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	24 0f       	add	r18, r20
    1be4:	31 1d       	adc	r19, r1
    1be6:	21 32       	cpi	r18, 0x21	; 33
    1be8:	31 05       	cpc	r19, r1
    1bea:	dc f4       	brge	.+54     	; 0x1c22 <twi_transmit+0x48>
    1bec:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <twi_state>
    1bf0:	24 30       	cpi	r18, 0x04	; 4
    1bf2:	c9 f4       	brne	.+50     	; 0x1c26 <twi_transmit+0x4c>
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	86 17       	cp	r24, r22
    1bfc:	58 f4       	brcc	.+22     	; 0x1c14 <twi_transmit+0x3a>
    1bfe:	30 91 f6 04 	lds	r19, 0x04F6	; 0x8004f6 <twi_txBufferLength>
    1c02:	21 91       	ld	r18, Z+
    1c04:	dc 01       	movw	r26, r24
    1c06:	a8 50       	subi	r26, 0x08	; 8
    1c08:	bb 4f       	sbci	r27, 0xFB	; 251
    1c0a:	a3 0f       	add	r26, r19
    1c0c:	b1 1d       	adc	r27, r1
    1c0e:	2c 93       	st	X, r18
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	f3 cf       	rjmp	.-26     	; 0x1bfa <twi_transmit+0x20>
    1c14:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_txBufferLength>
    1c18:	68 0f       	add	r22, r24
    1c1a:	60 93 f6 04 	sts	0x04F6, r22	; 0x8004f6 <twi_txBufferLength>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	08 95       	ret
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	08 95       	ret
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	08 95       	ret

00001c2a <twi_attachSlaveRxEvent>:
    1c2a:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <twi_onSlaveReceive+0x1>
    1c2e:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <twi_onSlaveReceive>
    1c32:	08 95       	ret

00001c34 <twi_attachSlaveTxEvent>:
    1c34:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <twi_onSlaveTransmit+0x1>
    1c38:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <twi_onSlaveTransmit>
    1c3c:	08 95       	ret

00001c3e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1c3e:	85 ed       	ldi	r24, 0xD5	; 213
    1c40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1c44:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c48:	84 fd       	sbrc	r24, 4
    1c4a:	fc cf       	rjmp	.-8      	; 0x1c44 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1c4c:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <twi_state>
    1c50:	08 95       	ret

00001c52 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1c52:	85 ec       	ldi	r24, 0xC5	; 197
    1c54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    1c58:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <twi_state>
    1c5c:	08 95       	ret

00001c5e <__vector_39>:
}

ISR(TWI_vect)
{
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
    1c68:	0b b6       	in	r0, 0x3b	; 59
    1c6a:	0f 92       	push	r0
    1c6c:	2f 93       	push	r18
    1c6e:	3f 93       	push	r19
    1c70:	4f 93       	push	r20
    1c72:	5f 93       	push	r21
    1c74:	6f 93       	push	r22
    1c76:	7f 93       	push	r23
    1c78:	8f 93       	push	r24
    1c7a:	9f 93       	push	r25
    1c7c:	af 93       	push	r26
    1c7e:	bf 93       	push	r27
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31
  switch(TW_STATUS){
    1c84:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1c88:	88 7f       	andi	r24, 0xF8	; 248
    1c8a:	80 36       	cpi	r24, 0x60	; 96
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <__vector_39+0x32>
    1c8e:	9d c0       	rjmp	.+314    	; 0x1dca <__vector_39+0x16c>
    1c90:	70 f5       	brcc	.+92     	; 0x1cee <__vector_39+0x90>
    1c92:	88 32       	cpi	r24, 0x28	; 40
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <__vector_39+0x3a>
    1c96:	5c c0       	rjmp	.+184    	; 0x1d50 <__vector_39+0xf2>
    1c98:	90 f4       	brcc	.+36     	; 0x1cbe <__vector_39+0x60>
    1c9a:	80 31       	cpi	r24, 0x10	; 16
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <__vector_39+0x42>
    1c9e:	55 c0       	rjmp	.+170    	; 0x1d4a <__vector_39+0xec>
    1ca0:	38 f4       	brcc	.+14     	; 0x1cb0 <__vector_39+0x52>
    1ca2:	88 23       	and	r24, r24
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <__vector_39+0x4a>
    1ca6:	f3 c0       	rjmp	.+486    	; 0x1e8e <__vector_39+0x230>
    1ca8:	88 30       	cpi	r24, 0x08	; 8
    1caa:	09 f4       	brne	.+2      	; 0x1cae <__vector_39+0x50>
    1cac:	4e c0       	rjmp	.+156    	; 0x1d4a <__vector_39+0xec>
    1cae:	f2 c0       	rjmp	.+484    	; 0x1e94 <__vector_39+0x236>
    1cb0:	88 31       	cpi	r24, 0x18	; 24
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <__vector_39+0x58>
    1cb4:	4d c0       	rjmp	.+154    	; 0x1d50 <__vector_39+0xf2>
    1cb6:	80 32       	cpi	r24, 0x20	; 32
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <__vector_39+0x5e>
    1cba:	5e c0       	rjmp	.+188    	; 0x1d78 <__vector_39+0x11a>
    1cbc:	eb c0       	rjmp	.+470    	; 0x1e94 <__vector_39+0x236>
    1cbe:	80 34       	cpi	r24, 0x40	; 64
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <__vector_39+0x66>
    1cc2:	69 c0       	rjmp	.+210    	; 0x1d96 <__vector_39+0x138>
    1cc4:	50 f4       	brcc	.+20     	; 0x1cda <__vector_39+0x7c>
    1cc6:	80 33       	cpi	r24, 0x30	; 48
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <__vector_39+0x6e>
    1cca:	56 c0       	rjmp	.+172    	; 0x1d78 <__vector_39+0x11a>
    1ccc:	88 33       	cpi	r24, 0x38	; 56
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <__vector_39+0x74>
    1cd0:	e1 c0       	rjmp	.+450    	; 0x1e94 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1cd2:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <twi_error>
      twi_releaseBus();
    1cd6:	bd df       	rcall	.-134    	; 0x1c52 <twi_releaseBus>
      break;
    1cd8:	dd c0       	rjmp	.+442    	; 0x1e94 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1cda:	80 35       	cpi	r24, 0x50	; 80
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <__vector_39+0x82>
    1cde:	4f c0       	rjmp	.+158    	; 0x1d7e <__vector_39+0x120>
    1ce0:	88 35       	cpi	r24, 0x58	; 88
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <__vector_39+0x88>
    1ce4:	5d c0       	rjmp	.+186    	; 0x1da0 <__vector_39+0x142>
    1ce6:	88 34       	cpi	r24, 0x48	; 72
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <__vector_39+0x8e>
    1cea:	d4 c0       	rjmp	.+424    	; 0x1e94 <__vector_39+0x236>
    1cec:	d2 c0       	rjmp	.+420    	; 0x1e92 <__vector_39+0x234>
    1cee:	88 39       	cpi	r24, 0x98	; 152
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <__vector_39+0x96>
    1cf2:	c3 c0       	rjmp	.+390    	; 0x1e7a <__vector_39+0x21c>
    1cf4:	a8 f4       	brcc	.+42     	; 0x1d20 <__vector_39+0xc2>
    1cf6:	88 37       	cpi	r24, 0x78	; 120
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <__vector_39+0x9e>
    1cfa:	67 c0       	rjmp	.+206    	; 0x1dca <__vector_39+0x16c>
    1cfc:	38 f4       	brcc	.+14     	; 0x1d0c <__vector_39+0xae>
    1cfe:	88 36       	cpi	r24, 0x68	; 104
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <__vector_39+0xa6>
    1d02:	63 c0       	rjmp	.+198    	; 0x1dca <__vector_39+0x16c>
    1d04:	80 37       	cpi	r24, 0x70	; 112
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <__vector_39+0xac>
    1d08:	60 c0       	rjmp	.+192    	; 0x1dca <__vector_39+0x16c>
    1d0a:	c4 c0       	rjmp	.+392    	; 0x1e94 <__vector_39+0x236>
    1d0c:	88 38       	cpi	r24, 0x88	; 136
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <__vector_39+0xb4>
    1d10:	b4 c0       	rjmp	.+360    	; 0x1e7a <__vector_39+0x21c>
    1d12:	80 39       	cpi	r24, 0x90	; 144
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <__vector_39+0xba>
    1d16:	5f c0       	rjmp	.+190    	; 0x1dd6 <__vector_39+0x178>
    1d18:	80 38       	cpi	r24, 0x80	; 128
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <__vector_39+0xc0>
    1d1c:	bb c0       	rjmp	.+374    	; 0x1e94 <__vector_39+0x236>
    1d1e:	5b c0       	rjmp	.+182    	; 0x1dd6 <__vector_39+0x178>
    1d20:	80 3b       	cpi	r24, 0xB0	; 176
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <__vector_39+0xc8>
    1d24:	82 c0       	rjmp	.+260    	; 0x1e2a <__vector_39+0x1cc>
    1d26:	38 f4       	brcc	.+14     	; 0x1d36 <__vector_39+0xd8>
    1d28:	80 3a       	cpi	r24, 0xA0	; 160
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <__vector_39+0xd0>
    1d2c:	66 c0       	rjmp	.+204    	; 0x1dfa <__vector_39+0x19c>
    1d2e:	88 3a       	cpi	r24, 0xA8	; 168
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <__vector_39+0xd6>
    1d32:	7b c0       	rjmp	.+246    	; 0x1e2a <__vector_39+0x1cc>
    1d34:	af c0       	rjmp	.+350    	; 0x1e94 <__vector_39+0x236>
    1d36:	80 3c       	cpi	r24, 0xC0	; 192
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <__vector_39+0xde>
    1d3a:	a3 c0       	rjmp	.+326    	; 0x1e82 <__vector_39+0x224>
    1d3c:	88 3c       	cpi	r24, 0xC8	; 200
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <__vector_39+0xe4>
    1d40:	a0 c0       	rjmp	.+320    	; 0x1e82 <__vector_39+0x224>
    1d42:	88 3b       	cpi	r24, 0xB8	; 184
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <__vector_39+0xea>
    1d46:	86 c0       	rjmp	.+268    	; 0x1e54 <__vector_39+0x1f6>
    1d48:	a5 c0       	rjmp	.+330    	; 0x1e94 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1d4a:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <twi_slarw>
    1d4e:	10 c0       	rjmp	.+32     	; 0x1d70 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1d50:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <twi_masterBufferIndex>
    1d54:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <twi_masterBufferLength>
    1d58:	98 17       	cp	r25, r24
    1d5a:	70 f5       	brcc	.+92     	; 0x1db8 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1d5c:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <twi_masterBufferIndex>
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	8e 0f       	add	r24, r30
    1d64:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <twi_masterBufferIndex>
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	e6 5e       	subi	r30, 0xE6	; 230
    1d6c:	fa 4f       	sbci	r31, 0xFA	; 250
    1d6e:	80 81       	ld	r24, Z
    1d70:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1d74:	85 ec       	ldi	r24, 0xC5	; 197
    1d76:	82 c0       	rjmp	.+260    	; 0x1e7c <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1d78:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <twi_error>
    1d7c:	8a c0       	rjmp	.+276    	; 0x1e92 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1d7e:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <twi_masterBufferIndex>
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	8e 0f       	add	r24, r30
    1d86:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <twi_masterBufferIndex>
    1d8a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	e6 5e       	subi	r30, 0xE6	; 230
    1d92:	fa 4f       	sbci	r31, 0xFA	; 250
    1d94:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1d96:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <twi_masterBufferIndex>
    1d9a:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <twi_masterBufferLength>
    1d9e:	6a c0       	rjmp	.+212    	; 0x1e74 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1da0:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <twi_masterBufferIndex>
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	8e 0f       	add	r24, r30
    1da8:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <twi_masterBufferIndex>
    1dac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	e6 5e       	subi	r30, 0xE6	; 230
    1db4:	fa 4f       	sbci	r31, 0xFA	; 250
    1db6:	80 83       	st	Z, r24
	if (twi_sendStop)
    1db8:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_sendStop>
    1dbc:	81 11       	cpse	r24, r1
    1dbe:	69 c0       	rjmp	.+210    	; 0x1e92 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1dc6:	84 ea       	ldi	r24, 0xA4	; 164
    1dc8:	5d c0       	rjmp	.+186    	; 0x1e84 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1dd0:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <twi_rxBufferIndex>
    1dd4:	cf cf       	rjmp	.-98     	; 0x1d74 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1dd6:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <twi_rxBufferIndex>
    1dda:	80 32       	cpi	r24, 0x20	; 32
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <__vector_39+0x182>
    1dde:	4d c0       	rjmp	.+154    	; 0x1e7a <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1de0:	e0 91 d5 04 	lds	r30, 0x04D5	; 0x8004d5 <twi_rxBufferIndex>
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	8e 0f       	add	r24, r30
    1de8:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <twi_rxBufferIndex>
    1dec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	ea 52       	subi	r30, 0x2A	; 42
    1df4:	fb 4f       	sbci	r31, 0xFB	; 251
    1df6:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1df8:	bd cf       	rjmp	.-134    	; 0x1d74 <__vector_39+0x116>
    1dfa:	2b df       	rcall	.-426    	; 0x1c52 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1dfc:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <twi_rxBufferIndex>
    1e00:	80 32       	cpi	r24, 0x20	; 32
    1e02:	30 f4       	brcc	.+12     	; 0x1e10 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1e04:	e0 91 d5 04 	lds	r30, 0x04D5	; 0x8004d5 <twi_rxBufferIndex>
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	ea 52       	subi	r30, 0x2A	; 42
    1e0c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e0e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1e10:	60 91 d5 04 	lds	r22, 0x04D5	; 0x8004d5 <twi_rxBufferIndex>
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <twi_onSlaveReceive>
    1e1a:	f0 91 3b 05 	lds	r31, 0x053B	; 0x80053b <twi_onSlaveReceive+0x1>
    1e1e:	86 ed       	ldi	r24, 0xD6	; 214
    1e20:	94 e0       	ldi	r25, 0x04	; 4
    1e22:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1e24:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <twi_rxBufferIndex>
      break;
    1e28:	35 c0       	rjmp	.+106    	; 0x1e94 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1e2a:	84 e0       	ldi	r24, 0x04	; 4
    1e2c:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1e30:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1e34:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1e38:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <twi_onSlaveTransmit>
    1e3c:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <twi_onSlaveTransmit+0x1>
    1e40:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1e42:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_txBufferLength>
    1e46:	81 11       	cpse	r24, r1
    1e48:	05 c0       	rjmp	.+10     	; 0x1e54 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1e50:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1e54:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <twi_txBufferIndex>
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	8e 0f       	add	r24, r30
    1e5c:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <twi_txBufferIndex>
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	e8 50       	subi	r30, 0x08	; 8
    1e64:	fb 4f       	sbci	r31, 0xFB	; 251
    1e66:	80 81       	ld	r24, Z
    1e68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1e6c:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <twi_txBufferIndex>
    1e70:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_txBufferLength>
    1e74:	98 17       	cp	r25, r24
    1e76:	08 f4       	brcc	.+2      	; 0x1e7a <__vector_39+0x21c>
    1e78:	7d cf       	rjmp	.-262    	; 0x1d74 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e7a:	85 e8       	ldi	r24, 0x85	; 133
    1e7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1e80:	09 c0       	rjmp	.+18     	; 0x1e94 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1e82:	85 ec       	ldi	r24, 0xC5	; 197
    1e84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1e88:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <twi_state>
      break;
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1e8e:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <twi_error>
      twi_stop();
    1e92:	d5 de       	rcall	.-598    	; 0x1c3e <twi_stop>
      break;
  }
}
    1e94:	ff 91       	pop	r31
    1e96:	ef 91       	pop	r30
    1e98:	bf 91       	pop	r27
    1e9a:	af 91       	pop	r26
    1e9c:	9f 91       	pop	r25
    1e9e:	8f 91       	pop	r24
    1ea0:	7f 91       	pop	r23
    1ea2:	6f 91       	pop	r22
    1ea4:	5f 91       	pop	r21
    1ea6:	4f 91       	pop	r20
    1ea8:	3f 91       	pop	r19
    1eaa:	2f 91       	pop	r18
    1eac:	0f 90       	pop	r0
    1eae:	0b be       	out	0x3b, r0	; 59
    1eb0:	0f 90       	pop	r0
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	0f 90       	pop	r0
    1eb6:	1f 90       	pop	r1
    1eb8:	18 95       	reti

00001eba <__udivmodsi4>:
    1eba:	a1 e2       	ldi	r26, 0x21	; 33
    1ebc:	1a 2e       	mov	r1, r26
    1ebe:	aa 1b       	sub	r26, r26
    1ec0:	bb 1b       	sub	r27, r27
    1ec2:	fd 01       	movw	r30, r26
    1ec4:	0d c0       	rjmp	.+26     	; 0x1ee0 <__udivmodsi4_ep>

00001ec6 <__udivmodsi4_loop>:
    1ec6:	aa 1f       	adc	r26, r26
    1ec8:	bb 1f       	adc	r27, r27
    1eca:	ee 1f       	adc	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	a2 17       	cp	r26, r18
    1ed0:	b3 07       	cpc	r27, r19
    1ed2:	e4 07       	cpc	r30, r20
    1ed4:	f5 07       	cpc	r31, r21
    1ed6:	20 f0       	brcs	.+8      	; 0x1ee0 <__udivmodsi4_ep>
    1ed8:	a2 1b       	sub	r26, r18
    1eda:	b3 0b       	sbc	r27, r19
    1edc:	e4 0b       	sbc	r30, r20
    1ede:	f5 0b       	sbc	r31, r21

00001ee0 <__udivmodsi4_ep>:
    1ee0:	66 1f       	adc	r22, r22
    1ee2:	77 1f       	adc	r23, r23
    1ee4:	88 1f       	adc	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	1a 94       	dec	r1
    1eea:	69 f7       	brne	.-38     	; 0x1ec6 <__udivmodsi4_loop>
    1eec:	60 95       	com	r22
    1eee:	70 95       	com	r23
    1ef0:	80 95       	com	r24
    1ef2:	90 95       	com	r25
    1ef4:	9b 01       	movw	r18, r22
    1ef6:	ac 01       	movw	r20, r24
    1ef8:	bd 01       	movw	r22, r26
    1efa:	cf 01       	movw	r24, r30
    1efc:	08 95       	ret

00001efe <__tablejump2__>:
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	88 1f       	adc	r24, r24
    1f04:	8b bf       	out	0x3b, r24	; 59
    1f06:	07 90       	elpm	r0, Z+
    1f08:	f6 91       	elpm	r31, Z
    1f0a:	e0 2d       	mov	r30, r0
    1f0c:	19 94       	eijmp

00001f0e <sprintf>:
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	2e 97       	sbiw	r28, 0x0e	; 14
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	0e 89       	ldd	r16, Y+22	; 0x16
    1f28:	1f 89       	ldd	r17, Y+23	; 0x17
    1f2a:	86 e0       	ldi	r24, 0x06	; 6
    1f2c:	8c 83       	std	Y+4, r24	; 0x04
    1f2e:	1a 83       	std	Y+2, r17	; 0x02
    1f30:	09 83       	std	Y+1, r16	; 0x01
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	9f e7       	ldi	r25, 0x7F	; 127
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	ae 01       	movw	r20, r28
    1f3c:	46 5e       	subi	r20, 0xE6	; 230
    1f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f40:	68 8d       	ldd	r22, Y+24	; 0x18
    1f42:	79 8d       	ldd	r23, Y+25	; 0x19
    1f44:	ce 01       	movw	r24, r28
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	10 d0       	rcall	.+32     	; 0x1f6a <vfprintf>
    1f4a:	ef 81       	ldd	r30, Y+7	; 0x07
    1f4c:	f8 85       	ldd	r31, Y+8	; 0x08
    1f4e:	e0 0f       	add	r30, r16
    1f50:	f1 1f       	adc	r31, r17
    1f52:	10 82       	st	Z, r1
    1f54:	2e 96       	adiw	r28, 0x0e	; 14
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <vfprintf>:
    1f6a:	2f 92       	push	r2
    1f6c:	3f 92       	push	r3
    1f6e:	4f 92       	push	r4
    1f70:	5f 92       	push	r5
    1f72:	6f 92       	push	r6
    1f74:	7f 92       	push	r7
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	2b 97       	sbiw	r28, 0x0b	; 11
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	6c 01       	movw	r12, r24
    1fa0:	7b 01       	movw	r14, r22
    1fa2:	8a 01       	movw	r16, r20
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	17 82       	std	Z+7, r1	; 0x07
    1fa8:	16 82       	std	Z+6, r1	; 0x06
    1faa:	83 81       	ldd	r24, Z+3	; 0x03
    1fac:	81 ff       	sbrs	r24, 1
    1fae:	bf c1       	rjmp	.+894    	; 0x232e <__stack+0x12f>
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	3c 01       	movw	r6, r24
    1fb6:	f6 01       	movw	r30, r12
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	f7 01       	movw	r30, r14
    1fbc:	93 fd       	sbrc	r25, 3
    1fbe:	85 91       	lpm	r24, Z+
    1fc0:	93 ff       	sbrs	r25, 3
    1fc2:	81 91       	ld	r24, Z+
    1fc4:	7f 01       	movw	r14, r30
    1fc6:	88 23       	and	r24, r24
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <vfprintf+0x62>
    1fca:	ad c1       	rjmp	.+858    	; 0x2326 <__stack+0x127>
    1fcc:	85 32       	cpi	r24, 0x25	; 37
    1fce:	39 f4       	brne	.+14     	; 0x1fde <vfprintf+0x74>
    1fd0:	93 fd       	sbrc	r25, 3
    1fd2:	85 91       	lpm	r24, Z+
    1fd4:	93 ff       	sbrs	r25, 3
    1fd6:	81 91       	ld	r24, Z+
    1fd8:	7f 01       	movw	r14, r30
    1fda:	85 32       	cpi	r24, 0x25	; 37
    1fdc:	21 f4       	brne	.+8      	; 0x1fe6 <vfprintf+0x7c>
    1fde:	b6 01       	movw	r22, r12
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	d6 d1       	rcall	.+940    	; 0x2390 <fputc>
    1fe4:	e8 cf       	rjmp	.-48     	; 0x1fb6 <vfprintf+0x4c>
    1fe6:	91 2c       	mov	r9, r1
    1fe8:	21 2c       	mov	r2, r1
    1fea:	31 2c       	mov	r3, r1
    1fec:	ff e1       	ldi	r31, 0x1F	; 31
    1fee:	f3 15       	cp	r31, r3
    1ff0:	d8 f0       	brcs	.+54     	; 0x2028 <vfprintf+0xbe>
    1ff2:	8b 32       	cpi	r24, 0x2B	; 43
    1ff4:	79 f0       	breq	.+30     	; 0x2014 <vfprintf+0xaa>
    1ff6:	38 f4       	brcc	.+14     	; 0x2006 <vfprintf+0x9c>
    1ff8:	80 32       	cpi	r24, 0x20	; 32
    1ffa:	79 f0       	breq	.+30     	; 0x201a <vfprintf+0xb0>
    1ffc:	83 32       	cpi	r24, 0x23	; 35
    1ffe:	a1 f4       	brne	.+40     	; 0x2028 <vfprintf+0xbe>
    2000:	23 2d       	mov	r18, r3
    2002:	20 61       	ori	r18, 0x10	; 16
    2004:	1d c0       	rjmp	.+58     	; 0x2040 <vfprintf+0xd6>
    2006:	8d 32       	cpi	r24, 0x2D	; 45
    2008:	61 f0       	breq	.+24     	; 0x2022 <vfprintf+0xb8>
    200a:	80 33       	cpi	r24, 0x30	; 48
    200c:	69 f4       	brne	.+26     	; 0x2028 <vfprintf+0xbe>
    200e:	23 2d       	mov	r18, r3
    2010:	21 60       	ori	r18, 0x01	; 1
    2012:	16 c0       	rjmp	.+44     	; 0x2040 <vfprintf+0xd6>
    2014:	83 2d       	mov	r24, r3
    2016:	82 60       	ori	r24, 0x02	; 2
    2018:	38 2e       	mov	r3, r24
    201a:	e3 2d       	mov	r30, r3
    201c:	e4 60       	ori	r30, 0x04	; 4
    201e:	3e 2e       	mov	r3, r30
    2020:	2a c0       	rjmp	.+84     	; 0x2076 <vfprintf+0x10c>
    2022:	f3 2d       	mov	r31, r3
    2024:	f8 60       	ori	r31, 0x08	; 8
    2026:	1d c0       	rjmp	.+58     	; 0x2062 <vfprintf+0xf8>
    2028:	37 fc       	sbrc	r3, 7
    202a:	2d c0       	rjmp	.+90     	; 0x2086 <vfprintf+0x11c>
    202c:	20 ed       	ldi	r18, 0xD0	; 208
    202e:	28 0f       	add	r18, r24
    2030:	2a 30       	cpi	r18, 0x0A	; 10
    2032:	40 f0       	brcs	.+16     	; 0x2044 <vfprintf+0xda>
    2034:	8e 32       	cpi	r24, 0x2E	; 46
    2036:	b9 f4       	brne	.+46     	; 0x2066 <vfprintf+0xfc>
    2038:	36 fc       	sbrc	r3, 6
    203a:	75 c1       	rjmp	.+746    	; 0x2326 <__stack+0x127>
    203c:	23 2d       	mov	r18, r3
    203e:	20 64       	ori	r18, 0x40	; 64
    2040:	32 2e       	mov	r3, r18
    2042:	19 c0       	rjmp	.+50     	; 0x2076 <vfprintf+0x10c>
    2044:	36 fe       	sbrs	r3, 6
    2046:	06 c0       	rjmp	.+12     	; 0x2054 <vfprintf+0xea>
    2048:	8a e0       	ldi	r24, 0x0A	; 10
    204a:	98 9e       	mul	r9, r24
    204c:	20 0d       	add	r18, r0
    204e:	11 24       	eor	r1, r1
    2050:	92 2e       	mov	r9, r18
    2052:	11 c0       	rjmp	.+34     	; 0x2076 <vfprintf+0x10c>
    2054:	ea e0       	ldi	r30, 0x0A	; 10
    2056:	2e 9e       	mul	r2, r30
    2058:	20 0d       	add	r18, r0
    205a:	11 24       	eor	r1, r1
    205c:	22 2e       	mov	r2, r18
    205e:	f3 2d       	mov	r31, r3
    2060:	f0 62       	ori	r31, 0x20	; 32
    2062:	3f 2e       	mov	r3, r31
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <vfprintf+0x10c>
    2066:	8c 36       	cpi	r24, 0x6C	; 108
    2068:	21 f4       	brne	.+8      	; 0x2072 <vfprintf+0x108>
    206a:	83 2d       	mov	r24, r3
    206c:	80 68       	ori	r24, 0x80	; 128
    206e:	38 2e       	mov	r3, r24
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <vfprintf+0x10c>
    2072:	88 36       	cpi	r24, 0x68	; 104
    2074:	41 f4       	brne	.+16     	; 0x2086 <vfprintf+0x11c>
    2076:	f7 01       	movw	r30, r14
    2078:	93 fd       	sbrc	r25, 3
    207a:	85 91       	lpm	r24, Z+
    207c:	93 ff       	sbrs	r25, 3
    207e:	81 91       	ld	r24, Z+
    2080:	7f 01       	movw	r14, r30
    2082:	81 11       	cpse	r24, r1
    2084:	b3 cf       	rjmp	.-154    	; 0x1fec <vfprintf+0x82>
    2086:	98 2f       	mov	r25, r24
    2088:	9f 7d       	andi	r25, 0xDF	; 223
    208a:	95 54       	subi	r25, 0x45	; 69
    208c:	93 30       	cpi	r25, 0x03	; 3
    208e:	28 f4       	brcc	.+10     	; 0x209a <vfprintf+0x130>
    2090:	0c 5f       	subi	r16, 0xFC	; 252
    2092:	1f 4f       	sbci	r17, 0xFF	; 255
    2094:	9f e3       	ldi	r25, 0x3F	; 63
    2096:	99 83       	std	Y+1, r25	; 0x01
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <vfprintf+0x14a>
    209a:	83 36       	cpi	r24, 0x63	; 99
    209c:	31 f0       	breq	.+12     	; 0x20aa <vfprintf+0x140>
    209e:	83 37       	cpi	r24, 0x73	; 115
    20a0:	71 f0       	breq	.+28     	; 0x20be <vfprintf+0x154>
    20a2:	83 35       	cpi	r24, 0x53	; 83
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <vfprintf+0x13e>
    20a6:	55 c0       	rjmp	.+170    	; 0x2152 <vfprintf+0x1e8>
    20a8:	20 c0       	rjmp	.+64     	; 0x20ea <vfprintf+0x180>
    20aa:	f8 01       	movw	r30, r16
    20ac:	80 81       	ld	r24, Z
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	0e 5f       	subi	r16, 0xFE	; 254
    20b2:	1f 4f       	sbci	r17, 0xFF	; 255
    20b4:	88 24       	eor	r8, r8
    20b6:	83 94       	inc	r8
    20b8:	91 2c       	mov	r9, r1
    20ba:	53 01       	movw	r10, r6
    20bc:	12 c0       	rjmp	.+36     	; 0x20e2 <vfprintf+0x178>
    20be:	28 01       	movw	r4, r16
    20c0:	f2 e0       	ldi	r31, 0x02	; 2
    20c2:	4f 0e       	add	r4, r31
    20c4:	51 1c       	adc	r5, r1
    20c6:	f8 01       	movw	r30, r16
    20c8:	a0 80       	ld	r10, Z
    20ca:	b1 80       	ldd	r11, Z+1	; 0x01
    20cc:	36 fe       	sbrs	r3, 6
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <vfprintf+0x16c>
    20d0:	69 2d       	mov	r22, r9
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <vfprintf+0x170>
    20d6:	6f ef       	ldi	r22, 0xFF	; 255
    20d8:	7f ef       	ldi	r23, 0xFF	; 255
    20da:	c5 01       	movw	r24, r10
    20dc:	4e d1       	rcall	.+668    	; 0x237a <strnlen>
    20de:	4c 01       	movw	r8, r24
    20e0:	82 01       	movw	r16, r4
    20e2:	f3 2d       	mov	r31, r3
    20e4:	ff 77       	andi	r31, 0x7F	; 127
    20e6:	3f 2e       	mov	r3, r31
    20e8:	15 c0       	rjmp	.+42     	; 0x2114 <vfprintf+0x1aa>
    20ea:	28 01       	movw	r4, r16
    20ec:	22 e0       	ldi	r18, 0x02	; 2
    20ee:	42 0e       	add	r4, r18
    20f0:	51 1c       	adc	r5, r1
    20f2:	f8 01       	movw	r30, r16
    20f4:	a0 80       	ld	r10, Z
    20f6:	b1 80       	ldd	r11, Z+1	; 0x01
    20f8:	36 fe       	sbrs	r3, 6
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <vfprintf+0x198>
    20fc:	69 2d       	mov	r22, r9
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <vfprintf+0x19c>
    2102:	6f ef       	ldi	r22, 0xFF	; 255
    2104:	7f ef       	ldi	r23, 0xFF	; 255
    2106:	c5 01       	movw	r24, r10
    2108:	2d d1       	rcall	.+602    	; 0x2364 <strnlen_P>
    210a:	4c 01       	movw	r8, r24
    210c:	f3 2d       	mov	r31, r3
    210e:	f0 68       	ori	r31, 0x80	; 128
    2110:	3f 2e       	mov	r3, r31
    2112:	82 01       	movw	r16, r4
    2114:	33 fc       	sbrc	r3, 3
    2116:	19 c0       	rjmp	.+50     	; 0x214a <vfprintf+0x1e0>
    2118:	82 2d       	mov	r24, r2
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	88 16       	cp	r8, r24
    211e:	99 06       	cpc	r9, r25
    2120:	a0 f4       	brcc	.+40     	; 0x214a <vfprintf+0x1e0>
    2122:	b6 01       	movw	r22, r12
    2124:	80 e2       	ldi	r24, 0x20	; 32
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	33 d1       	rcall	.+614    	; 0x2390 <fputc>
    212a:	2a 94       	dec	r2
    212c:	f5 cf       	rjmp	.-22     	; 0x2118 <vfprintf+0x1ae>
    212e:	f5 01       	movw	r30, r10
    2130:	37 fc       	sbrc	r3, 7
    2132:	85 91       	lpm	r24, Z+
    2134:	37 fe       	sbrs	r3, 7
    2136:	81 91       	ld	r24, Z+
    2138:	5f 01       	movw	r10, r30
    213a:	b6 01       	movw	r22, r12
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	28 d1       	rcall	.+592    	; 0x2390 <fputc>
    2140:	21 10       	cpse	r2, r1
    2142:	2a 94       	dec	r2
    2144:	21 e0       	ldi	r18, 0x01	; 1
    2146:	82 1a       	sub	r8, r18
    2148:	91 08       	sbc	r9, r1
    214a:	81 14       	cp	r8, r1
    214c:	91 04       	cpc	r9, r1
    214e:	79 f7       	brne	.-34     	; 0x212e <vfprintf+0x1c4>
    2150:	e1 c0       	rjmp	.+450    	; 0x2314 <__stack+0x115>
    2152:	84 36       	cpi	r24, 0x64	; 100
    2154:	11 f0       	breq	.+4      	; 0x215a <vfprintf+0x1f0>
    2156:	89 36       	cpi	r24, 0x69	; 105
    2158:	39 f5       	brne	.+78     	; 0x21a8 <vfprintf+0x23e>
    215a:	f8 01       	movw	r30, r16
    215c:	37 fe       	sbrs	r3, 7
    215e:	07 c0       	rjmp	.+14     	; 0x216e <vfprintf+0x204>
    2160:	60 81       	ld	r22, Z
    2162:	71 81       	ldd	r23, Z+1	; 0x01
    2164:	82 81       	ldd	r24, Z+2	; 0x02
    2166:	93 81       	ldd	r25, Z+3	; 0x03
    2168:	0c 5f       	subi	r16, 0xFC	; 252
    216a:	1f 4f       	sbci	r17, 0xFF	; 255
    216c:	08 c0       	rjmp	.+16     	; 0x217e <vfprintf+0x214>
    216e:	60 81       	ld	r22, Z
    2170:	71 81       	ldd	r23, Z+1	; 0x01
    2172:	07 2e       	mov	r0, r23
    2174:	00 0c       	add	r0, r0
    2176:	88 0b       	sbc	r24, r24
    2178:	99 0b       	sbc	r25, r25
    217a:	0e 5f       	subi	r16, 0xFE	; 254
    217c:	1f 4f       	sbci	r17, 0xFF	; 255
    217e:	f3 2d       	mov	r31, r3
    2180:	ff 76       	andi	r31, 0x6F	; 111
    2182:	3f 2e       	mov	r3, r31
    2184:	97 ff       	sbrs	r25, 7
    2186:	09 c0       	rjmp	.+18     	; 0x219a <vfprintf+0x230>
    2188:	90 95       	com	r25
    218a:	80 95       	com	r24
    218c:	70 95       	com	r23
    218e:	61 95       	neg	r22
    2190:	7f 4f       	sbci	r23, 0xFF	; 255
    2192:	8f 4f       	sbci	r24, 0xFF	; 255
    2194:	9f 4f       	sbci	r25, 0xFF	; 255
    2196:	f0 68       	ori	r31, 0x80	; 128
    2198:	3f 2e       	mov	r3, r31
    219a:	2a e0       	ldi	r18, 0x0A	; 10
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	a3 01       	movw	r20, r6
    21a0:	33 d1       	rcall	.+614    	; 0x2408 <__ultoa_invert>
    21a2:	88 2e       	mov	r8, r24
    21a4:	86 18       	sub	r8, r6
    21a6:	44 c0       	rjmp	.+136    	; 0x2230 <__stack+0x31>
    21a8:	85 37       	cpi	r24, 0x75	; 117
    21aa:	31 f4       	brne	.+12     	; 0x21b8 <vfprintf+0x24e>
    21ac:	23 2d       	mov	r18, r3
    21ae:	2f 7e       	andi	r18, 0xEF	; 239
    21b0:	b2 2e       	mov	r11, r18
    21b2:	2a e0       	ldi	r18, 0x0A	; 10
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	25 c0       	rjmp	.+74     	; 0x2202 <__stack+0x3>
    21b8:	93 2d       	mov	r25, r3
    21ba:	99 7f       	andi	r25, 0xF9	; 249
    21bc:	b9 2e       	mov	r11, r25
    21be:	8f 36       	cpi	r24, 0x6F	; 111
    21c0:	c1 f0       	breq	.+48     	; 0x21f2 <vfprintf+0x288>
    21c2:	18 f4       	brcc	.+6      	; 0x21ca <vfprintf+0x260>
    21c4:	88 35       	cpi	r24, 0x58	; 88
    21c6:	79 f0       	breq	.+30     	; 0x21e6 <vfprintf+0x27c>
    21c8:	ae c0       	rjmp	.+348    	; 0x2326 <__stack+0x127>
    21ca:	80 37       	cpi	r24, 0x70	; 112
    21cc:	19 f0       	breq	.+6      	; 0x21d4 <vfprintf+0x26a>
    21ce:	88 37       	cpi	r24, 0x78	; 120
    21d0:	21 f0       	breq	.+8      	; 0x21da <vfprintf+0x270>
    21d2:	a9 c0       	rjmp	.+338    	; 0x2326 <__stack+0x127>
    21d4:	e9 2f       	mov	r30, r25
    21d6:	e0 61       	ori	r30, 0x10	; 16
    21d8:	be 2e       	mov	r11, r30
    21da:	b4 fe       	sbrs	r11, 4
    21dc:	0d c0       	rjmp	.+26     	; 0x21f8 <vfprintf+0x28e>
    21de:	fb 2d       	mov	r31, r11
    21e0:	f4 60       	ori	r31, 0x04	; 4
    21e2:	bf 2e       	mov	r11, r31
    21e4:	09 c0       	rjmp	.+18     	; 0x21f8 <vfprintf+0x28e>
    21e6:	34 fe       	sbrs	r3, 4
    21e8:	0a c0       	rjmp	.+20     	; 0x21fe <vfprintf+0x294>
    21ea:	29 2f       	mov	r18, r25
    21ec:	26 60       	ori	r18, 0x06	; 6
    21ee:	b2 2e       	mov	r11, r18
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <vfprintf+0x294>
    21f2:	28 e0       	ldi	r18, 0x08	; 8
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	05 c0       	rjmp	.+10     	; 0x2202 <__stack+0x3>
    21f8:	20 e1       	ldi	r18, 0x10	; 16
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <__stack+0x3>
    21fe:	20 e1       	ldi	r18, 0x10	; 16
    2200:	32 e0       	ldi	r19, 0x02	; 2
    2202:	f8 01       	movw	r30, r16
    2204:	b7 fe       	sbrs	r11, 7
    2206:	07 c0       	rjmp	.+14     	; 0x2216 <__stack+0x17>
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	0c 5f       	subi	r16, 0xFC	; 252
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	06 c0       	rjmp	.+12     	; 0x2222 <__stack+0x23>
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 5f       	subi	r16, 0xFE	; 254
    2220:	1f 4f       	sbci	r17, 0xFF	; 255
    2222:	a3 01       	movw	r20, r6
    2224:	f1 d0       	rcall	.+482    	; 0x2408 <__ultoa_invert>
    2226:	88 2e       	mov	r8, r24
    2228:	86 18       	sub	r8, r6
    222a:	fb 2d       	mov	r31, r11
    222c:	ff 77       	andi	r31, 0x7F	; 127
    222e:	3f 2e       	mov	r3, r31
    2230:	36 fe       	sbrs	r3, 6
    2232:	0d c0       	rjmp	.+26     	; 0x224e <__stack+0x4f>
    2234:	23 2d       	mov	r18, r3
    2236:	2e 7f       	andi	r18, 0xFE	; 254
    2238:	a2 2e       	mov	r10, r18
    223a:	89 14       	cp	r8, r9
    223c:	58 f4       	brcc	.+22     	; 0x2254 <__stack+0x55>
    223e:	34 fe       	sbrs	r3, 4
    2240:	0b c0       	rjmp	.+22     	; 0x2258 <__stack+0x59>
    2242:	32 fc       	sbrc	r3, 2
    2244:	09 c0       	rjmp	.+18     	; 0x2258 <__stack+0x59>
    2246:	83 2d       	mov	r24, r3
    2248:	8e 7e       	andi	r24, 0xEE	; 238
    224a:	a8 2e       	mov	r10, r24
    224c:	05 c0       	rjmp	.+10     	; 0x2258 <__stack+0x59>
    224e:	b8 2c       	mov	r11, r8
    2250:	a3 2c       	mov	r10, r3
    2252:	03 c0       	rjmp	.+6      	; 0x225a <__stack+0x5b>
    2254:	b8 2c       	mov	r11, r8
    2256:	01 c0       	rjmp	.+2      	; 0x225a <__stack+0x5b>
    2258:	b9 2c       	mov	r11, r9
    225a:	a4 fe       	sbrs	r10, 4
    225c:	0f c0       	rjmp	.+30     	; 0x227c <__stack+0x7d>
    225e:	fe 01       	movw	r30, r28
    2260:	e8 0d       	add	r30, r8
    2262:	f1 1d       	adc	r31, r1
    2264:	80 81       	ld	r24, Z
    2266:	80 33       	cpi	r24, 0x30	; 48
    2268:	21 f4       	brne	.+8      	; 0x2272 <__stack+0x73>
    226a:	9a 2d       	mov	r25, r10
    226c:	99 7e       	andi	r25, 0xE9	; 233
    226e:	a9 2e       	mov	r10, r25
    2270:	09 c0       	rjmp	.+18     	; 0x2284 <__stack+0x85>
    2272:	a2 fe       	sbrs	r10, 2
    2274:	06 c0       	rjmp	.+12     	; 0x2282 <__stack+0x83>
    2276:	b3 94       	inc	r11
    2278:	b3 94       	inc	r11
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <__stack+0x85>
    227c:	8a 2d       	mov	r24, r10
    227e:	86 78       	andi	r24, 0x86	; 134
    2280:	09 f0       	breq	.+2      	; 0x2284 <__stack+0x85>
    2282:	b3 94       	inc	r11
    2284:	a3 fc       	sbrc	r10, 3
    2286:	10 c0       	rjmp	.+32     	; 0x22a8 <__stack+0xa9>
    2288:	a0 fe       	sbrs	r10, 0
    228a:	06 c0       	rjmp	.+12     	; 0x2298 <__stack+0x99>
    228c:	b2 14       	cp	r11, r2
    228e:	80 f4       	brcc	.+32     	; 0x22b0 <__stack+0xb1>
    2290:	28 0c       	add	r2, r8
    2292:	92 2c       	mov	r9, r2
    2294:	9b 18       	sub	r9, r11
    2296:	0d c0       	rjmp	.+26     	; 0x22b2 <__stack+0xb3>
    2298:	b2 14       	cp	r11, r2
    229a:	58 f4       	brcc	.+22     	; 0x22b2 <__stack+0xb3>
    229c:	b6 01       	movw	r22, r12
    229e:	80 e2       	ldi	r24, 0x20	; 32
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	76 d0       	rcall	.+236    	; 0x2390 <fputc>
    22a4:	b3 94       	inc	r11
    22a6:	f8 cf       	rjmp	.-16     	; 0x2298 <__stack+0x99>
    22a8:	b2 14       	cp	r11, r2
    22aa:	18 f4       	brcc	.+6      	; 0x22b2 <__stack+0xb3>
    22ac:	2b 18       	sub	r2, r11
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <__stack+0xb5>
    22b0:	98 2c       	mov	r9, r8
    22b2:	21 2c       	mov	r2, r1
    22b4:	a4 fe       	sbrs	r10, 4
    22b6:	0f c0       	rjmp	.+30     	; 0x22d6 <__stack+0xd7>
    22b8:	b6 01       	movw	r22, r12
    22ba:	80 e3       	ldi	r24, 0x30	; 48
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	68 d0       	rcall	.+208    	; 0x2390 <fputc>
    22c0:	a2 fe       	sbrs	r10, 2
    22c2:	16 c0       	rjmp	.+44     	; 0x22f0 <__stack+0xf1>
    22c4:	a1 fc       	sbrc	r10, 1
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <__stack+0xcf>
    22c8:	88 e7       	ldi	r24, 0x78	; 120
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <__stack+0xd3>
    22ce:	88 e5       	ldi	r24, 0x58	; 88
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	b6 01       	movw	r22, r12
    22d4:	0c c0       	rjmp	.+24     	; 0x22ee <__stack+0xef>
    22d6:	8a 2d       	mov	r24, r10
    22d8:	86 78       	andi	r24, 0x86	; 134
    22da:	51 f0       	breq	.+20     	; 0x22f0 <__stack+0xf1>
    22dc:	a1 fe       	sbrs	r10, 1
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <__stack+0xe5>
    22e0:	8b e2       	ldi	r24, 0x2B	; 43
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <__stack+0xe7>
    22e4:	80 e2       	ldi	r24, 0x20	; 32
    22e6:	a7 fc       	sbrc	r10, 7
    22e8:	8d e2       	ldi	r24, 0x2D	; 45
    22ea:	b6 01       	movw	r22, r12
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	50 d0       	rcall	.+160    	; 0x2390 <fputc>
    22f0:	89 14       	cp	r8, r9
    22f2:	30 f4       	brcc	.+12     	; 0x2300 <__stack+0x101>
    22f4:	b6 01       	movw	r22, r12
    22f6:	80 e3       	ldi	r24, 0x30	; 48
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	4a d0       	rcall	.+148    	; 0x2390 <fputc>
    22fc:	9a 94       	dec	r9
    22fe:	f8 cf       	rjmp	.-16     	; 0x22f0 <__stack+0xf1>
    2300:	8a 94       	dec	r8
    2302:	f3 01       	movw	r30, r6
    2304:	e8 0d       	add	r30, r8
    2306:	f1 1d       	adc	r31, r1
    2308:	80 81       	ld	r24, Z
    230a:	b6 01       	movw	r22, r12
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	40 d0       	rcall	.+128    	; 0x2390 <fputc>
    2310:	81 10       	cpse	r8, r1
    2312:	f6 cf       	rjmp	.-20     	; 0x2300 <__stack+0x101>
    2314:	22 20       	and	r2, r2
    2316:	09 f4       	brne	.+2      	; 0x231a <__stack+0x11b>
    2318:	4e ce       	rjmp	.-868    	; 0x1fb6 <vfprintf+0x4c>
    231a:	b6 01       	movw	r22, r12
    231c:	80 e2       	ldi	r24, 0x20	; 32
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	37 d0       	rcall	.+110    	; 0x2390 <fputc>
    2322:	2a 94       	dec	r2
    2324:	f7 cf       	rjmp	.-18     	; 0x2314 <__stack+0x115>
    2326:	f6 01       	movw	r30, r12
    2328:	86 81       	ldd	r24, Z+6	; 0x06
    232a:	97 81       	ldd	r25, Z+7	; 0x07
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <__stack+0x133>
    232e:	8f ef       	ldi	r24, 0xFF	; 255
    2330:	9f ef       	ldi	r25, 0xFF	; 255
    2332:	2b 96       	adiw	r28, 0x0b	; 11
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
    234e:	bf 90       	pop	r11
    2350:	af 90       	pop	r10
    2352:	9f 90       	pop	r9
    2354:	8f 90       	pop	r8
    2356:	7f 90       	pop	r7
    2358:	6f 90       	pop	r6
    235a:	5f 90       	pop	r5
    235c:	4f 90       	pop	r4
    235e:	3f 90       	pop	r3
    2360:	2f 90       	pop	r2
    2362:	08 95       	ret

00002364 <strnlen_P>:
    2364:	fc 01       	movw	r30, r24
    2366:	05 90       	lpm	r0, Z+
    2368:	61 50       	subi	r22, 0x01	; 1
    236a:	70 40       	sbci	r23, 0x00	; 0
    236c:	01 10       	cpse	r0, r1
    236e:	d8 f7       	brcc	.-10     	; 0x2366 <strnlen_P+0x2>
    2370:	80 95       	com	r24
    2372:	90 95       	com	r25
    2374:	8e 0f       	add	r24, r30
    2376:	9f 1f       	adc	r25, r31
    2378:	08 95       	ret

0000237a <strnlen>:
    237a:	fc 01       	movw	r30, r24
    237c:	61 50       	subi	r22, 0x01	; 1
    237e:	70 40       	sbci	r23, 0x00	; 0
    2380:	01 90       	ld	r0, Z+
    2382:	01 10       	cpse	r0, r1
    2384:	d8 f7       	brcc	.-10     	; 0x237c <strnlen+0x2>
    2386:	80 95       	com	r24
    2388:	90 95       	com	r25
    238a:	8e 0f       	add	r24, r30
    238c:	9f 1f       	adc	r25, r31
    238e:	08 95       	ret

00002390 <fputc>:
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	fb 01       	movw	r30, r22
    239a:	23 81       	ldd	r18, Z+3	; 0x03
    239c:	21 fd       	sbrc	r18, 1
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <fputc+0x16>
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	9f ef       	ldi	r25, 0xFF	; 255
    23a4:	2c c0       	rjmp	.+88     	; 0x23fe <fputc+0x6e>
    23a6:	22 ff       	sbrs	r18, 2
    23a8:	16 c0       	rjmp	.+44     	; 0x23d6 <fputc+0x46>
    23aa:	46 81       	ldd	r20, Z+6	; 0x06
    23ac:	57 81       	ldd	r21, Z+7	; 0x07
    23ae:	24 81       	ldd	r18, Z+4	; 0x04
    23b0:	35 81       	ldd	r19, Z+5	; 0x05
    23b2:	42 17       	cp	r20, r18
    23b4:	53 07       	cpc	r21, r19
    23b6:	44 f4       	brge	.+16     	; 0x23c8 <fputc+0x38>
    23b8:	a0 81       	ld	r26, Z
    23ba:	b1 81       	ldd	r27, Z+1	; 0x01
    23bc:	9d 01       	movw	r18, r26
    23be:	2f 5f       	subi	r18, 0xFF	; 255
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	31 83       	std	Z+1, r19	; 0x01
    23c4:	20 83       	st	Z, r18
    23c6:	8c 93       	st	X, r24
    23c8:	26 81       	ldd	r18, Z+6	; 0x06
    23ca:	37 81       	ldd	r19, Z+7	; 0x07
    23cc:	2f 5f       	subi	r18, 0xFF	; 255
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
    23d0:	37 83       	std	Z+7, r19	; 0x07
    23d2:	26 83       	std	Z+6, r18	; 0x06
    23d4:	14 c0       	rjmp	.+40     	; 0x23fe <fputc+0x6e>
    23d6:	8b 01       	movw	r16, r22
    23d8:	ec 01       	movw	r28, r24
    23da:	fb 01       	movw	r30, r22
    23dc:	00 84       	ldd	r0, Z+8	; 0x08
    23de:	f1 85       	ldd	r31, Z+9	; 0x09
    23e0:	e0 2d       	mov	r30, r0
    23e2:	19 95       	eicall
    23e4:	89 2b       	or	r24, r25
    23e6:	e1 f6       	brne	.-72     	; 0x23a0 <fputc+0x10>
    23e8:	d8 01       	movw	r26, r16
    23ea:	16 96       	adiw	r26, 0x06	; 6
    23ec:	8d 91       	ld	r24, X+
    23ee:	9c 91       	ld	r25, X
    23f0:	17 97       	sbiw	r26, 0x07	; 7
    23f2:	01 96       	adiw	r24, 0x01	; 1
    23f4:	17 96       	adiw	r26, 0x07	; 7
    23f6:	9c 93       	st	X, r25
    23f8:	8e 93       	st	-X, r24
    23fa:	16 97       	sbiw	r26, 0x06	; 6
    23fc:	ce 01       	movw	r24, r28
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	08 95       	ret

00002408 <__ultoa_invert>:
    2408:	fa 01       	movw	r30, r20
    240a:	aa 27       	eor	r26, r26
    240c:	28 30       	cpi	r18, 0x08	; 8
    240e:	51 f1       	breq	.+84     	; 0x2464 <__ultoa_invert+0x5c>
    2410:	20 31       	cpi	r18, 0x10	; 16
    2412:	81 f1       	breq	.+96     	; 0x2474 <__ultoa_invert+0x6c>
    2414:	e8 94       	clt
    2416:	6f 93       	push	r22
    2418:	6e 7f       	andi	r22, 0xFE	; 254
    241a:	6e 5f       	subi	r22, 0xFE	; 254
    241c:	7f 4f       	sbci	r23, 0xFF	; 255
    241e:	8f 4f       	sbci	r24, 0xFF	; 255
    2420:	9f 4f       	sbci	r25, 0xFF	; 255
    2422:	af 4f       	sbci	r26, 0xFF	; 255
    2424:	b1 e0       	ldi	r27, 0x01	; 1
    2426:	3e d0       	rcall	.+124    	; 0x24a4 <__ultoa_invert+0x9c>
    2428:	b4 e0       	ldi	r27, 0x04	; 4
    242a:	3c d0       	rcall	.+120    	; 0x24a4 <__ultoa_invert+0x9c>
    242c:	67 0f       	add	r22, r23
    242e:	78 1f       	adc	r23, r24
    2430:	89 1f       	adc	r24, r25
    2432:	9a 1f       	adc	r25, r26
    2434:	a1 1d       	adc	r26, r1
    2436:	68 0f       	add	r22, r24
    2438:	79 1f       	adc	r23, r25
    243a:	8a 1f       	adc	r24, r26
    243c:	91 1d       	adc	r25, r1
    243e:	a1 1d       	adc	r26, r1
    2440:	6a 0f       	add	r22, r26
    2442:	71 1d       	adc	r23, r1
    2444:	81 1d       	adc	r24, r1
    2446:	91 1d       	adc	r25, r1
    2448:	a1 1d       	adc	r26, r1
    244a:	20 d0       	rcall	.+64     	; 0x248c <__ultoa_invert+0x84>
    244c:	09 f4       	brne	.+2      	; 0x2450 <__ultoa_invert+0x48>
    244e:	68 94       	set
    2450:	3f 91       	pop	r19
    2452:	2a e0       	ldi	r18, 0x0A	; 10
    2454:	26 9f       	mul	r18, r22
    2456:	11 24       	eor	r1, r1
    2458:	30 19       	sub	r19, r0
    245a:	30 5d       	subi	r19, 0xD0	; 208
    245c:	31 93       	st	Z+, r19
    245e:	de f6       	brtc	.-74     	; 0x2416 <__ultoa_invert+0xe>
    2460:	cf 01       	movw	r24, r30
    2462:	08 95       	ret
    2464:	46 2f       	mov	r20, r22
    2466:	47 70       	andi	r20, 0x07	; 7
    2468:	40 5d       	subi	r20, 0xD0	; 208
    246a:	41 93       	st	Z+, r20
    246c:	b3 e0       	ldi	r27, 0x03	; 3
    246e:	0f d0       	rcall	.+30     	; 0x248e <__ultoa_invert+0x86>
    2470:	c9 f7       	brne	.-14     	; 0x2464 <__ultoa_invert+0x5c>
    2472:	f6 cf       	rjmp	.-20     	; 0x2460 <__ultoa_invert+0x58>
    2474:	46 2f       	mov	r20, r22
    2476:	4f 70       	andi	r20, 0x0F	; 15
    2478:	40 5d       	subi	r20, 0xD0	; 208
    247a:	4a 33       	cpi	r20, 0x3A	; 58
    247c:	18 f0       	brcs	.+6      	; 0x2484 <__ultoa_invert+0x7c>
    247e:	49 5d       	subi	r20, 0xD9	; 217
    2480:	31 fd       	sbrc	r19, 1
    2482:	40 52       	subi	r20, 0x20	; 32
    2484:	41 93       	st	Z+, r20
    2486:	02 d0       	rcall	.+4      	; 0x248c <__ultoa_invert+0x84>
    2488:	a9 f7       	brne	.-22     	; 0x2474 <__ultoa_invert+0x6c>
    248a:	ea cf       	rjmp	.-44     	; 0x2460 <__ultoa_invert+0x58>
    248c:	b4 e0       	ldi	r27, 0x04	; 4
    248e:	a6 95       	lsr	r26
    2490:	97 95       	ror	r25
    2492:	87 95       	ror	r24
    2494:	77 95       	ror	r23
    2496:	67 95       	ror	r22
    2498:	ba 95       	dec	r27
    249a:	c9 f7       	brne	.-14     	; 0x248e <__ultoa_invert+0x86>
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	61 05       	cpc	r22, r1
    24a0:	71 05       	cpc	r23, r1
    24a2:	08 95       	ret
    24a4:	9b 01       	movw	r18, r22
    24a6:	ac 01       	movw	r20, r24
    24a8:	0a 2e       	mov	r0, r26
    24aa:	06 94       	lsr	r0
    24ac:	57 95       	ror	r21
    24ae:	47 95       	ror	r20
    24b0:	37 95       	ror	r19
    24b2:	27 95       	ror	r18
    24b4:	ba 95       	dec	r27
    24b6:	c9 f7       	brne	.-14     	; 0x24aa <__ultoa_invert+0xa2>
    24b8:	62 0f       	add	r22, r18
    24ba:	73 1f       	adc	r23, r19
    24bc:	84 1f       	adc	r24, r20
    24be:	95 1f       	adc	r25, r21
    24c0:	a0 1d       	adc	r26, r0
    24c2:	08 95       	ret

000024c4 <_exit>:
    24c4:	f8 94       	cli

000024c6 <__stop_program>:
    24c6:	ff cf       	rjmp	.-2      	; 0x24c6 <__stop_program>
