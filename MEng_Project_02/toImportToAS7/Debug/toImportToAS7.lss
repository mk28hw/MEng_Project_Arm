
toImportToAS7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800200  00001f54  00001fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021b  00800298  00800298  00002080  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b8  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010ef7  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fa7  00000000  00000000  0001369f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000375f  00000000  00000000  00016646  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012c4  00000000  00000000  00019da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000037bf  00000000  00000000  0001b06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c5d  00000000  00000000  0001e82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  00024488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c1       	rjmp	.+532    	; 0x216 <__ctors_end>
       2:	00 00       	nop
       4:	38 c1       	rjmp	.+624    	; 0x276 <__bad_interrupt>
       6:	00 00       	nop
       8:	36 c1       	rjmp	.+620    	; 0x276 <__bad_interrupt>
       a:	00 00       	nop
       c:	34 c1       	rjmp	.+616    	; 0x276 <__bad_interrupt>
       e:	00 00       	nop
      10:	32 c1       	rjmp	.+612    	; 0x276 <__bad_interrupt>
      12:	00 00       	nop
      14:	30 c1       	rjmp	.+608    	; 0x276 <__bad_interrupt>
      16:	00 00       	nop
      18:	2e c1       	rjmp	.+604    	; 0x276 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2c c1       	rjmp	.+600    	; 0x276 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2a c1       	rjmp	.+596    	; 0x276 <__bad_interrupt>
      22:	00 00       	nop
      24:	28 c1       	rjmp	.+592    	; 0x276 <__bad_interrupt>
      26:	00 00       	nop
      28:	26 c1       	rjmp	.+588    	; 0x276 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	24 c1       	rjmp	.+584    	; 0x276 <__bad_interrupt>
      2e:	00 00       	nop
      30:	22 c1       	rjmp	.+580    	; 0x276 <__bad_interrupt>
      32:	00 00       	nop
      34:	20 c1       	rjmp	.+576    	; 0x276 <__bad_interrupt>
      36:	00 00       	nop
      38:	1e c1       	rjmp	.+572    	; 0x276 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1c c1       	rjmp	.+568    	; 0x276 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1a c1       	rjmp	.+564    	; 0x276 <__bad_interrupt>
      42:	00 00       	nop
      44:	18 c1       	rjmp	.+560    	; 0x276 <__bad_interrupt>
      46:	00 00       	nop
      48:	16 c1       	rjmp	.+556    	; 0x276 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	14 c1       	rjmp	.+552    	; 0x276 <__bad_interrupt>
      4e:	00 00       	nop
      50:	12 c1       	rjmp	.+548    	; 0x276 <__bad_interrupt>
      52:	00 00       	nop
      54:	10 c1       	rjmp	.+544    	; 0x276 <__bad_interrupt>
      56:	00 00       	nop
      58:	0e c1       	rjmp	.+540    	; 0x276 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_23>
      60:	0a c1       	rjmp	.+532    	; 0x276 <__bad_interrupt>
      62:	00 00       	nop
      64:	79 c7       	rjmp	.+3826   	; 0xf58 <__vector_25>
      66:	00 00       	nop
      68:	ad c7       	rjmp	.+3930   	; 0xfc4 <__vector_26>
      6a:	00 00       	nop
      6c:	04 c1       	rjmp	.+520    	; 0x276 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__bad_interrupt>
      72:	00 00       	nop
      74:	00 c1       	rjmp	.+512    	; 0x276 <__bad_interrupt>
      76:	00 00       	nop
      78:	fe c0       	rjmp	.+508    	; 0x276 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fc c0       	rjmp	.+504    	; 0x276 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fa c0       	rjmp	.+500    	; 0x276 <__bad_interrupt>
      82:	00 00       	nop
      84:	f8 c0       	rjmp	.+496    	; 0x276 <__bad_interrupt>
      86:	00 00       	nop
      88:	f6 c0       	rjmp	.+492    	; 0x276 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 c0       	rjmp	.+488    	; 0x276 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c7       	rjmp	.+4080   	; 0x1082 <__vector_36>
      92:	00 00       	nop
      94:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_37>
      98:	ee c0       	rjmp	.+476    	; 0x276 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__vector_39>
      a0:	ea c0       	rjmp	.+468    	; 0x276 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e8 c0       	rjmp	.+464    	; 0x276 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e6 c0       	rjmp	.+460    	; 0x276 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e4 c0       	rjmp	.+456    	; 0x276 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e2 c0       	rjmp	.+452    	; 0x276 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e0 c0       	rjmp	.+448    	; 0x276 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	de c0       	rjmp	.+444    	; 0x276 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dc c0       	rjmp	.+440    	; 0x276 <__bad_interrupt>
      be:	00 00       	nop
      c0:	da c0       	rjmp	.+436    	; 0x276 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d8 c0       	rjmp	.+432    	; 0x276 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d6 c0       	rjmp	.+428    	; 0x276 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d4 c0       	rjmp	.+424    	; 0x276 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d2 c0       	rjmp	.+420    	; 0x276 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d0 c0       	rjmp	.+416    	; 0x276 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ce c0       	rjmp	.+412    	; 0x276 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cc c0       	rjmp	.+408    	; 0x276 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ca c0       	rjmp	.+404    	; 0x276 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 0b       	sbc	r16, r23
      e6:	0a 0b       	sbc	r16, r26
      e8:	f9 0a       	sbc	r15, r25
      ea:	fd 0a       	sbc	r15, r29
      ec:	03 0b       	sbc	r16, r19
      ee:	41 0b       	sbc	r20, r17
      f0:	0e 0b       	sbc	r16, r30
      f2:	12 0b       	sbc	r17, r18
      f4:	18 0b       	sbc	r17, r24
      f6:	1c 0b       	sbc	r17, r28
      f8:	20 0b       	sbc	r18, r16
      fa:	26 0b       	sbc	r18, r22
      fc:	2a 0b       	sbc	r18, r26
      fe:	2e 0b       	sbc	r18, r30
     100:	41 0b       	sbc	r20, r17
     102:	34 0b       	sbc	r19, r20
     104:	38 0b       	sbc	r19, r24
     106:	3c 0b       	sbc	r19, r28

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	50 01       	movw	r10, r0
     210:	14 08       	sbc	r1, r4
     212:	a9 08       	sbc	r10, r9
     214:	98 0d       	add	r25, r8

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	d1 e2       	ldi	r29, 0x21	; 33
     21e:	de bf       	out	0x3e, r29	; 62
     220:	cd bf       	out	0x3d, r28	; 61
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0c bf       	out	0x3c, r16	; 60

00000226 <__do_copy_data>:
     226:	12 e0       	ldi	r17, 0x02	; 2
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b2 e0       	ldi	r27, 0x02	; 2
     22c:	e4 e5       	ldi	r30, 0x54	; 84
     22e:	ff e1       	ldi	r31, 0x1F	; 31
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	a8 39       	cpi	r26, 0x98	; 152
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	24 e0       	ldi	r18, 0x04	; 4
     242:	a8 e9       	ldi	r26, 0x98	; 152
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	a3 3b       	cpi	r26, 0xB3	; 179
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>

00000250 <__do_global_ctors>:
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	cb e0       	ldi	r28, 0x0B	; 11
     254:	d1 e0       	ldi	r29, 0x01	; 1
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	06 c0       	rjmp	.+12     	; 0x266 <__do_global_ctors+0x16>
     25a:	21 97       	sbiw	r28, 0x01	; 1
     25c:	01 09       	sbc	r16, r1
     25e:	80 2f       	mov	r24, r16
     260:	fe 01       	movw	r30, r28
     262:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__tablejump2__>
     266:	c7 30       	cpi	r28, 0x07	; 7
     268:	d1 07       	cpc	r29, r17
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	08 07       	cpc	r16, r24
     26e:	a9 f7       	brne	.-22     	; 0x25a <__do_global_ctors+0xa>
     270:	9e d7       	rcall	.+3900   	; 0x11ae <main>
     272:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <_exit>

00000276 <__bad_interrupt>:
     276:	c4 ce       	rjmp	.-632    	; 0x0 <__vectors>

00000278 <_ZN14HardwareSerial5writeEi>:
  delay(20);
  while(Serial1.available()){
	Serial.println("########################");
    Serial.println(Serial1.available());
    Serial.println(Serial1.read());
    delay(1);
     278:	dc 01       	movw	r26, r24
     27a:	ed 91       	ld	r30, X+
     27c:	fc 91       	ld	r31, X
     27e:	01 90       	ld	r0, Z+
     280:	f0 81       	ld	r31, Z
     282:	e0 2d       	mov	r30, r0
     284:	19 94       	eijmp

00000286 <_Z8sumBytesPhh>:
     286:	38 2f       	mov	r19, r24
     288:	fc 01       	movw	r30, r24
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2e 2f       	mov	r18, r30
     290:	23 1b       	sub	r18, r19
     292:	26 17       	cp	r18, r22
     294:	20 f4       	brcc	.+8      	; 0x29e <_Z8sumBytesPhh+0x18>
     296:	21 91       	ld	r18, Z+
     298:	82 0f       	add	r24, r18
     29a:	91 1d       	adc	r25, r1
     29c:	f8 cf       	rjmp	.-16     	; 0x28e <_Z8sumBytesPhh+0x8>
     29e:	08 95       	ret

000002a0 <_GLOBAL__sub_I_Load_High_Byte>:
     2a0:	0e 94 16 0a 	call	0x142c	; 0x142c <millis>
     2a4:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <startTime>
     2a8:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <startTime+0x1>
     2ac:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <startTime+0x2>
     2b0:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <startTime+0x3>
     2b4:	24 e0       	ldi	r18, 0x04	; 4
     2b6:	44 e1       	ldi	r20, 0x14	; 20
     2b8:	67 e2       	ldi	r22, 0x27	; 39
     2ba:	88 e9       	ldi	r24, 0x98	; 152
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <_ZN17LiquidCrystal_I2CC1Ehhh>

000002c2 <_Z10writeServohhPhh>:
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	f8 2e       	mov	r15, r24
     2d4:	e6 2e       	mov	r14, r22
     2d6:	6a 01       	movw	r12, r20
     2d8:	02 2f       	mov	r16, r18
     2da:	66 e0       	ldi	r22, 0x06	; 6
     2dc:	6e 0d       	add	r22, r14
     2de:	d6 2f       	mov	r29, r22
     2e0:	d2 0f       	add	r29, r18
     2e2:	62 2f       	mov	r22, r18
     2e4:	ca 01       	movw	r24, r20
     2e6:	cf df       	rcall	.-98     	; 0x286 <_Z8sumBytesPhh>
     2e8:	c8 2f       	mov	r28, r24
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 47 0a 	call	0x148e	; 0x148e <delay>
     306:	6f ef       	ldi	r22, 0xFF	; 255
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	89 e4       	ldi	r24, 0x49	; 73
     30c:	93 e0       	ldi	r25, 0x03	; 3
     30e:	b4 df       	rcall	.-152    	; 0x278 <_ZN14HardwareSerial5writeEi>
     310:	6f ef       	ldi	r22, 0xFF	; 255
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	89 e4       	ldi	r24, 0x49	; 73
     316:	93 e0       	ldi	r25, 0x03	; 3
     318:	af df       	rcall	.-162    	; 0x278 <_ZN14HardwareSerial5writeEi>
     31a:	6f 2d       	mov	r22, r15
     31c:	89 e4       	ldi	r24, 0x49	; 73
     31e:	93 e0       	ldi	r25, 0x03	; 3
     320:	45 d5       	rcall	.+2698   	; 0xdac <_ZN14HardwareSerial5writeEh>
     322:	10 e0       	ldi	r17, 0x00	; 0
     324:	b8 01       	movw	r22, r16
     326:	6d 5f       	subi	r22, 0xFD	; 253
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	89 e4       	ldi	r24, 0x49	; 73
     32c:	93 e0       	ldi	r25, 0x03	; 3
     32e:	a4 df       	rcall	.-184    	; 0x278 <_ZN14HardwareSerial5writeEi>
     330:	63 e0       	ldi	r22, 0x03	; 3
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	89 e4       	ldi	r24, 0x49	; 73
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	9f df       	rcall	.-194    	; 0x278 <_ZN14HardwareSerial5writeEi>
     33a:	6e 2d       	mov	r22, r14
     33c:	89 e4       	ldi	r24, 0x49	; 73
     33e:	93 e0       	ldi	r25, 0x03	; 3
     340:	35 d5       	rcall	.+2666   	; 0xdac <_ZN14HardwareSerial5writeEh>
     342:	a8 01       	movw	r20, r16
     344:	b6 01       	movw	r22, r12
     346:	89 e4       	ldi	r24, 0x49	; 73
     348:	93 e0       	ldi	r25, 0x03	; 3
     34a:	3b d7       	rcall	.+3702   	; 0x11c2 <_ZN5Print5writeEPKhj>
     34c:	df 0d       	add	r29, r15
     34e:	cd 0f       	add	r28, r29
     350:	c0 95       	com	r28
     352:	6c 2f       	mov	r22, r28
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	89 e4       	ldi	r24, 0x49	; 73
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	8e df       	rcall	.-228    	; 0x278 <_ZN14HardwareSerial5writeEi>
     35c:	89 e4       	ldi	r24, 0x49	; 73
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	71 d5       	rcall	.+2786   	; 0xe44 <_ZN14HardwareSerial5flushEv>
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	0c 94 47 0a 	jmp	0x148e	; 0x148e <delay>

0000038e <_Z9moveSpeedhii>:
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <_Z9moveSpeedhii+0x6>
     394:	1f 92       	push	r1
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	69 83       	std	Y+1, r22	; 0x01
     39c:	7a 83       	std	Y+2, r23	; 0x02
     39e:	4b 83       	std	Y+3, r20	; 0x03
     3a0:	5c 83       	std	Y+4, r21	; 0x04
     3a2:	24 e0       	ldi	r18, 0x04	; 4
     3a4:	ae 01       	movw	r20, r28
     3a6:	4f 5f       	subi	r20, 0xFF	; 255
     3a8:	5f 4f       	sbci	r21, 0xFF	; 255
     3aa:	6e e1       	ldi	r22, 0x1E	; 30
     3ac:	8a df       	rcall	.-236    	; 0x2c2 <_Z10writeServohhPhh>
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <_Z9readServohhh>:
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	c8 2f       	mov	r28, r24
     3c4:	d6 2f       	mov	r29, r22
     3c6:	14 2f       	mov	r17, r20
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 47 0a 	call	0x148e	; 0x148e <delay>
     3e4:	6f ef       	ldi	r22, 0xFF	; 255
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	89 e4       	ldi	r24, 0x49	; 73
     3ea:	93 e0       	ldi	r25, 0x03	; 3
     3ec:	45 df       	rcall	.-374    	; 0x278 <_ZN14HardwareSerial5writeEi>
     3ee:	6f ef       	ldi	r22, 0xFF	; 255
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	89 e4       	ldi	r24, 0x49	; 73
     3f4:	93 e0       	ldi	r25, 0x03	; 3
     3f6:	40 df       	rcall	.-384    	; 0x278 <_ZN14HardwareSerial5writeEi>
     3f8:	6c 2f       	mov	r22, r28
     3fa:	89 e4       	ldi	r24, 0x49	; 73
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	d6 d4       	rcall	.+2476   	; 0xdac <_ZN14HardwareSerial5writeEh>
     400:	64 e0       	ldi	r22, 0x04	; 4
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	89 e4       	ldi	r24, 0x49	; 73
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	37 df       	rcall	.-402    	; 0x278 <_ZN14HardwareSerial5writeEi>
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	89 e4       	ldi	r24, 0x49	; 73
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	32 df       	rcall	.-412    	; 0x278 <_ZN14HardwareSerial5writeEi>
     414:	6d 2f       	mov	r22, r29
     416:	89 e4       	ldi	r24, 0x49	; 73
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	c8 d4       	rcall	.+2448   	; 0xdac <_ZN14HardwareSerial5writeEh>
     41c:	61 2f       	mov	r22, r17
     41e:	89 e4       	ldi	r24, 0x49	; 73
     420:	93 e0       	ldi	r25, 0x03	; 3
     422:	c4 d4       	rcall	.+2440   	; 0xdac <_ZN14HardwareSerial5writeEh>
     424:	1a 5f       	subi	r17, 0xFA	; 250
     426:	d1 0f       	add	r29, r17
     428:	cd 0f       	add	r28, r29
     42a:	c0 95       	com	r28
     42c:	6c 2f       	mov	r22, r28
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	89 e4       	ldi	r24, 0x49	; 73
     432:	93 e0       	ldi	r25, 0x03	; 3
     434:	21 df       	rcall	.-446    	; 0x278 <_ZN14HardwareSerial5writeEi>
     436:	89 e4       	ldi	r24, 0x49	; 73
     438:	93 e0       	ldi	r25, 0x03	; 3
     43a:	04 d5       	rcall	.+2568   	; 0xe44 <_ZN14HardwareSerial5flushEv>
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0c 94 47 0a 	jmp	0x148e	; 0x148e <delay>

0000045e <_Z4turnhbi>:
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	18 2f       	mov	r17, r24
     466:	d4 2f       	mov	r29, r20
     468:	61 11       	cpse	r22, r1
     46a:	02 c0       	rjmp	.+4      	; 0x470 <_Z4turnhbi+0x12>
     46c:	c5 2f       	mov	r28, r21
     46e:	02 c0       	rjmp	.+4      	; 0x474 <_Z4turnhbi+0x16>
     470:	c4 e0       	ldi	r28, 0x04	; 4
     472:	c5 0f       	add	r28, r21
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 47 0a 	call	0x148e	; 0x148e <delay>
     490:	6f ef       	ldi	r22, 0xFF	; 255
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	89 e4       	ldi	r24, 0x49	; 73
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	ef de       	rcall	.-546    	; 0x278 <_ZN14HardwareSerial5writeEi>
     49a:	6f ef       	ldi	r22, 0xFF	; 255
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	89 e4       	ldi	r24, 0x49	; 73
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	ea de       	rcall	.-556    	; 0x278 <_ZN14HardwareSerial5writeEi>
     4a4:	61 2f       	mov	r22, r17
     4a6:	89 e4       	ldi	r24, 0x49	; 73
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	80 d4       	rcall	.+2304   	; 0xdac <_ZN14HardwareSerial5writeEh>
     4ac:	65 e0       	ldi	r22, 0x05	; 5
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	89 e4       	ldi	r24, 0x49	; 73
     4b2:	93 e0       	ldi	r25, 0x03	; 3
     4b4:	e1 de       	rcall	.-574    	; 0x278 <_ZN14HardwareSerial5writeEi>
     4b6:	63 e0       	ldi	r22, 0x03	; 3
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	89 e4       	ldi	r24, 0x49	; 73
     4bc:	93 e0       	ldi	r25, 0x03	; 3
     4be:	dc de       	rcall	.-584    	; 0x278 <_ZN14HardwareSerial5writeEi>
     4c0:	60 e2       	ldi	r22, 0x20	; 32
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	89 e4       	ldi	r24, 0x49	; 73
     4c6:	93 e0       	ldi	r25, 0x03	; 3
     4c8:	d7 de       	rcall	.-594    	; 0x278 <_ZN14HardwareSerial5writeEi>
     4ca:	6d 2f       	mov	r22, r29
     4cc:	89 e4       	ldi	r24, 0x49	; 73
     4ce:	93 e0       	ldi	r25, 0x03	; 3
     4d0:	6d d4       	rcall	.+2266   	; 0xdac <_ZN14HardwareSerial5writeEh>
     4d2:	6c 2f       	mov	r22, r28
     4d4:	89 e4       	ldi	r24, 0x49	; 73
     4d6:	93 e0       	ldi	r25, 0x03	; 3
     4d8:	69 d4       	rcall	.+2258   	; 0xdac <_ZN14HardwareSerial5writeEh>
     4da:	18 5d       	subi	r17, 0xD8	; 216
     4dc:	c1 0f       	add	r28, r17
     4de:	cd 0f       	add	r28, r29
     4e0:	6c 2f       	mov	r22, r28
     4e2:	60 95       	com	r22
     4e4:	89 e4       	ldi	r24, 0x49	; 73
     4e6:	93 e0       	ldi	r25, 0x03	; 3
     4e8:	61 d4       	rcall	.+2242   	; 0xdac <_ZN14HardwareSerial5writeEh>
     4ea:	89 e4       	ldi	r24, 0x49	; 73
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	aa d4       	rcall	.+2388   	; 0xe44 <_ZN14HardwareSerial5flushEv>
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	bf c7       	rjmp	.+3966   	; 0x148e <delay>

00000510 <_Z10setEndlesshb>:
     510:	cf 93       	push	r28
     512:	c8 2f       	mov	r28, r24
     514:	66 23       	and	r22, r22
     516:	09 f4       	brne	.+2      	; 0x51a <_Z10setEndlesshb+0xa>
     518:	39 c0       	rjmp	.+114    	; 0x58c <_Z10setEndlesshb+0x7c>
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	83 e0       	ldi	r24, 0x03	; 3
     526:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	ad d7       	rcall	.+3930   	; 0x148e <delay>
     534:	6f ef       	ldi	r22, 0xFF	; 255
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	89 e4       	ldi	r24, 0x49	; 73
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	9d de       	rcall	.-710    	; 0x278 <_ZN14HardwareSerial5writeEi>
     53e:	6f ef       	ldi	r22, 0xFF	; 255
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	89 e4       	ldi	r24, 0x49	; 73
     544:	93 e0       	ldi	r25, 0x03	; 3
     546:	98 de       	rcall	.-720    	; 0x278 <_ZN14HardwareSerial5writeEi>
     548:	6c 2f       	mov	r22, r28
     54a:	89 e4       	ldi	r24, 0x49	; 73
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	2e d4       	rcall	.+2140   	; 0xdac <_ZN14HardwareSerial5writeEh>
     550:	65 e0       	ldi	r22, 0x05	; 5
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	89 e4       	ldi	r24, 0x49	; 73
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	8f de       	rcall	.-738    	; 0x278 <_ZN14HardwareSerial5writeEi>
     55a:	63 e0       	ldi	r22, 0x03	; 3
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	89 e4       	ldi	r24, 0x49	; 73
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	8a de       	rcall	.-748    	; 0x278 <_ZN14HardwareSerial5writeEi>
     564:	68 e0       	ldi	r22, 0x08	; 8
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	89 e4       	ldi	r24, 0x49	; 73
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	85 de       	rcall	.-758    	; 0x278 <_ZN14HardwareSerial5writeEi>
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	89 e4       	ldi	r24, 0x49	; 73
     572:	93 e0       	ldi	r25, 0x03	; 3
     574:	1b d4       	rcall	.+2102   	; 0xdac <_ZN14HardwareSerial5writeEh>
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	89 e4       	ldi	r24, 0x49	; 73
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	17 d4       	rcall	.+2094   	; 0xdac <_ZN14HardwareSerial5writeEh>
     57e:	60 e1       	ldi	r22, 0x10	; 16
     580:	6c 0f       	add	r22, r28
     582:	60 95       	com	r22
     584:	89 e4       	ldi	r24, 0x49	; 73
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	11 d4       	rcall	.+2082   	; 0xdac <_ZN14HardwareSerial5writeEh>
     58a:	3f c0       	rjmp	.+126    	; 0x60a <_Z10setEndlesshb+0xfa>
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	65 df       	rcall	.-310    	; 0x45e <_Z4turnhbi>
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	70 d7       	rcall	.+3808   	; 0x148e <delay>
     5ae:	6f ef       	ldi	r22, 0xFF	; 255
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	89 e4       	ldi	r24, 0x49	; 73
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	60 de       	rcall	.-832    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5b8:	6f ef       	ldi	r22, 0xFF	; 255
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	89 e4       	ldi	r24, 0x49	; 73
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	5b de       	rcall	.-842    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5c2:	6c 2f       	mov	r22, r28
     5c4:	89 e4       	ldi	r24, 0x49	; 73
     5c6:	93 e0       	ldi	r25, 0x03	; 3
     5c8:	f1 d3       	rcall	.+2018   	; 0xdac <_ZN14HardwareSerial5writeEh>
     5ca:	65 e0       	ldi	r22, 0x05	; 5
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	89 e4       	ldi	r24, 0x49	; 73
     5d0:	93 e0       	ldi	r25, 0x03	; 3
     5d2:	52 de       	rcall	.-860    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5d4:	63 e0       	ldi	r22, 0x03	; 3
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	89 e4       	ldi	r24, 0x49	; 73
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	4d de       	rcall	.-870    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5de:	68 e0       	ldi	r22, 0x08	; 8
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	89 e4       	ldi	r24, 0x49	; 73
     5e4:	93 e0       	ldi	r25, 0x03	; 3
     5e6:	48 de       	rcall	.-880    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5e8:	6f ef       	ldi	r22, 0xFF	; 255
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	89 e4       	ldi	r24, 0x49	; 73
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	43 de       	rcall	.-890    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5f2:	63 e0       	ldi	r22, 0x03	; 3
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	89 e4       	ldi	r24, 0x49	; 73
     5f8:	93 e0       	ldi	r25, 0x03	; 3
     5fa:	3e de       	rcall	.-900    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5fc:	ce 5e       	subi	r28, 0xEE	; 238
     5fe:	c0 95       	com	r28
     600:	6c 2f       	mov	r22, r28
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	89 e4       	ldi	r24, 0x49	; 73
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	37 de       	rcall	.-914    	; 0x278 <_ZN14HardwareSerial5writeEi>
     60a:	89 e4       	ldi	r24, 0x49	; 73
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	1a d4       	rcall	.+2100   	; 0xe44 <_ZN14HardwareSerial5flushEv>
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	cf 91       	pop	r28
     62a:	31 c7       	rjmp	.+3682   	; 0x148e <delay>

0000062c <_Z12setMaxTorquehi>:
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	f8 2e       	mov	r15, r24
     638:	8b 01       	movw	r16, r22
     63a:	c7 2f       	mov	r28, r23
     63c:	dd 27       	eor	r29, r29
     63e:	c7 fd       	sbrc	r28, 7
     640:	da 95       	dec	r29
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	19 d7       	rcall	.+3634   	; 0x148e <delay>
     65c:	6f ef       	ldi	r22, 0xFF	; 255
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	89 e4       	ldi	r24, 0x49	; 73
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	09 de       	rcall	.-1006   	; 0x278 <_ZN14HardwareSerial5writeEi>
     666:	6f ef       	ldi	r22, 0xFF	; 255
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	89 e4       	ldi	r24, 0x49	; 73
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	04 de       	rcall	.-1016   	; 0x278 <_ZN14HardwareSerial5writeEi>
     670:	6f 2d       	mov	r22, r15
     672:	89 e4       	ldi	r24, 0x49	; 73
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	9a d3       	rcall	.+1844   	; 0xdac <_ZN14HardwareSerial5writeEh>
     678:	65 e0       	ldi	r22, 0x05	; 5
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	89 e4       	ldi	r24, 0x49	; 73
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	fb dd       	rcall	.-1034   	; 0x278 <_ZN14HardwareSerial5writeEi>
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	89 e4       	ldi	r24, 0x49	; 73
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	f6 dd       	rcall	.-1044   	; 0x278 <_ZN14HardwareSerial5writeEi>
     68c:	6e e0       	ldi	r22, 0x0E	; 14
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	89 e4       	ldi	r24, 0x49	; 73
     692:	93 e0       	ldi	r25, 0x03	; 3
     694:	f1 dd       	rcall	.-1054   	; 0x278 <_ZN14HardwareSerial5writeEi>
     696:	b8 01       	movw	r22, r16
     698:	77 27       	eor	r23, r23
     69a:	89 e4       	ldi	r24, 0x49	; 73
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	ec dd       	rcall	.-1064   	; 0x278 <_ZN14HardwareSerial5writeEi>
     6a0:	be 01       	movw	r22, r28
     6a2:	77 27       	eor	r23, r23
     6a4:	89 e4       	ldi	r24, 0x49	; 73
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	e7 dd       	rcall	.-1074   	; 0x278 <_ZN14HardwareSerial5writeEi>
     6aa:	66 e1       	ldi	r22, 0x16	; 22
     6ac:	6f 0d       	add	r22, r15
     6ae:	06 0f       	add	r16, r22
     6b0:	c0 0f       	add	r28, r16
     6b2:	c0 95       	com	r28
     6b4:	6c 2f       	mov	r22, r28
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	89 e4       	ldi	r24, 0x49	; 73
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	dd dd       	rcall	.-1094   	; 0x278 <_ZN14HardwareSerial5writeEi>
     6be:	89 e4       	ldi	r24, 0x49	; 73
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	c0 d3       	rcall	.+1920   	; 0xe44 <_ZN14HardwareSerial5flushEv>
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <digitalWrite>
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	d3 c6       	rjmp	.+3494   	; 0x148e <delay>

000006e8 <setup>:
     6e8:	88 e9       	ldi	r24, 0x98	; 152
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	0e 94 9e 0c 	call	0x193c	; 0x193c <_ZN17LiquidCrystal_I2C4initEv>
     6f0:	88 e9       	ldi	r24, 0x98	; 152
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	0e 94 9e 0c 	call	0x193c	; 0x193c <_ZN17LiquidCrystal_I2C4initEv>
     6f8:	88 e9       	ldi	r24, 0x98	; 152
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN17LiquidCrystal_I2C9backlightEv>
     700:	88 e9       	ldi	r24, 0x98	; 152
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN17LiquidCrystal_I2C5clearEv>
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	bb d7       	rcall	.+3958   	; 0x1684 <pinMode>
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	b8 d7       	rcall	.+3952   	; 0x1684 <pinMode>
     714:	26 e0       	ldi	r18, 0x06	; 6
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	51 ee       	ldi	r21, 0xE1	; 225
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	8c ea       	ldi	r24, 0xAC	; 172
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	b1 d3       	rcall	.+1890   	; 0xe86 <_ZN14HardwareSerial5beginEmh>
     724:	26 e0       	ldi	r18, 0x06	; 6
     726:	47 e3       	ldi	r20, 0x37	; 55
     728:	5f ed       	ldi	r21, 0xDF	; 223
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	89 e4       	ldi	r24, 0x49	; 73
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	a9 d3       	rcall	.+1874   	; 0xe86 <_ZN14HardwareSerial5beginEmh>
     734:	89 e4       	ldi	r24, 0x49	; 73
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	85 d3       	rcall	.+1802   	; 0xe44 <_ZN14HardwareSerial5flushEv>
     73a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     73e:	9c ef       	ldi	r25, 0xFC	; 252
     740:	98 0f       	add	r25, r24
     742:	92 30       	cpi	r25, 0x02	; 2
     744:	a0 f4       	brcc	.+40     	; 0x76e <setup+0x86>
     746:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     74a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     74e:	24 3e       	cpi	r18, 0xE4	; 228
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	39 07       	cpc	r19, r25
     754:	14 f4       	brge	.+4      	; 0x75a <setup+0x72>
     756:	24 ee       	ldi	r18, 0xE4	; 228
     758:	32 e0       	ldi	r19, 0x02	; 2
     75a:	25 3a       	cpi	r18, 0xA5	; 165
     75c:	96 e0       	ldi	r25, 0x06	; 6
     75e:	39 07       	cpc	r19, r25
     760:	14 f0       	brlt	.+4      	; 0x766 <setup+0x7e>
     762:	24 ea       	ldi	r18, 0xA4	; 164
     764:	36 e0       	ldi	r19, 0x06	; 6
     766:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
     76a:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	cf de       	rcall	.-610    	; 0x510 <_Z10setEndlesshb>
     772:	6f ef       	ldi	r22, 0xFF	; 255
     774:	73 e0       	ldi	r23, 0x03	; 3
     776:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     77a:	58 df       	rcall	.-336    	; 0x62c <_Z12setMaxTorquehi>
     77c:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__data_start>
     780:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__data_start+0x1>
     784:	4c ed       	ldi	r20, 0xDC	; 220
     786:	55 e0       	ldi	r21, 0x05	; 5
     788:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     78c:	00 de       	rcall	.-1024   	; 0x38e <_Z9moveSpeedhii>
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	88 e9       	ldi	r24, 0x98	; 152
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     79a:	61 e2       	ldi	r22, 0x21	; 33
     79c:	72 e0       	ldi	r23, 0x02	; 2
     79e:	88 e9       	ldi	r24, 0x98	; 152
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	4e d5       	rcall	.+2716   	; 0x1240 <_ZN5Print5printEPKc>
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	88 e9       	ldi	r24, 0x98	; 152
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     7b0:	66 e2       	ldi	r22, 0x26	; 38
     7b2:	72 e0       	ldi	r23, 0x02	; 2
     7b4:	88 e9       	ldi	r24, 0x98	; 152
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	43 d5       	rcall	.+2694   	; 0x1240 <_ZN5Print5printEPKc>
     7ba:	42 e0       	ldi	r20, 0x02	; 2
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	88 e9       	ldi	r24, 0x98	; 152
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     7c6:	6b e2       	ldi	r22, 0x2B	; 43
     7c8:	72 e0       	ldi	r23, 0x02	; 2
     7ca:	88 e9       	ldi	r24, 0x98	; 152
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	38 d5       	rcall	.+2672   	; 0x1240 <_ZN5Print5printEPKc>
     7d0:	43 e0       	ldi	r20, 0x03	; 3
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	88 e9       	ldi	r24, 0x98	; 152
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     7dc:	60 e3       	ldi	r22, 0x30	; 48
     7de:	72 e0       	ldi	r23, 0x02	; 2
     7e0:	88 e9       	ldi	r24, 0x98	; 152
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	2d d5       	rcall	.+2650   	; 0x1240 <_ZN5Print5printEPKc>
     7e6:	62 e0       	ldi	r22, 0x02	; 2
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	4f c6       	rjmp	.+3230   	; 0x148e <delay>

000007f0 <_Z12printDataLCDv>:
  }
}
void printDataLCD() {
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
	delay(10);
     802:	6a e0       	ldi	r22, 0x0A	; 10
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	41 d6       	rcall	.+3202   	; 0x148e <delay>
	int speed;
	int load;
	bool speedDirection, loadDirection;
	byte i = 0;
	
	if (Serial1.available() > 0){
     80c:	89 e4       	ldi	r24, 0x49	; 73
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	33 d2       	rcall	.+1126   	; 0xc78 <_ZN14HardwareSerial9availableEv>
     812:	18 16       	cp	r1, r24
     814:	19 06       	cpc	r1, r25
     816:	0c f0       	brlt	.+2      	; 0x81a <_Z12printDataLCDv+0x2a>
     818:	f3 c0       	rjmp	.+486    	; 0xa00 <_Z12printDataLCDv+0x210>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     81a:	89 e4       	ldi	r24, 0x49	; 73
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	46 d2       	rcall	.+1164   	; 0xcac <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     820:	8f 3f       	cpi	r24, 0xFF	; 255
     822:	91 05       	cpc	r25, r1
     824:	09 f0       	breq	.+2      	; 0x828 <_Z12printDataLCDv+0x38>
     826:	ec c0       	rjmp	.+472    	; 0xa00 <_Z12printDataLCDv+0x210>
     828:	89 e4       	ldi	r24, 0x49	; 73
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	3f d2       	rcall	.+1150   	; 0xcac <_ZN14HardwareSerial4readEv>
     82e:	8f 3f       	cpi	r24, 0xFF	; 255
     830:	91 05       	cpc	r25, r1
     832:	09 f0       	breq	.+2      	; 0x836 <_Z12printDataLCDv+0x46>
			servoID = Serial1.read(); // servo ID
     834:	e5 c0       	rjmp	.+458    	; 0xa00 <_Z12printDataLCDv+0x210>
     836:	89 e4       	ldi	r24, 0x49	; 73
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	38 d2       	rcall	.+1136   	; 0xcac <_ZN14HardwareSerial4readEv>
			msgLength = Serial1.read(); // msg Length
     83c:	b8 2e       	mov	r11, r24
     83e:	89 e4       	ldi	r24, 0x49	; 73
     840:	93 e0       	ldi	r25, 0x03	; 3
			Serial1.read(); // zero
     842:	34 d2       	rcall	.+1128   	; 0xcac <_ZN14HardwareSerial4readEv>
     844:	89 e4       	ldi	r24, 0x49	; 73
     846:	93 e0       	ldi	r25, 0x03	; 3
			
			position = Serial1.read();
     848:	31 d2       	rcall	.+1122   	; 0xcac <_ZN14HardwareSerial4readEv>
     84a:	89 e4       	ldi	r24, 0x49	; 73
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	2e d2       	rcall	.+1116   	; 0xcac <_ZN14HardwareSerial4readEv>
     850:	ec 01       	movw	r28, r24
			position = (Serial1.read() * 255) + position;
     852:	89 e4       	ldi	r24, 0x49	; 73
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	2a d2       	rcall	.+1108   	; 0xcac <_ZN14HardwareSerial4readEv>
     858:	2f ef       	ldi	r18, 0xFF	; 255
     85a:	ac 01       	movw	r20, r24
     85c:	24 9f       	mul	r18, r20
     85e:	c0 01       	movw	r24, r0
     860:	25 9f       	mul	r18, r21
     862:	90 0d       	add	r25, r0
     864:	11 24       	eor	r1, r1
     866:	7c 01       	movw	r14, r24
     868:	ec 0e       	add	r14, r28
     86a:	fd 1e       	adc	r15, r29
     86c:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <position_old>
			rotations = position_old > position ? rotations + 1 : rotations;
     870:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <position_old+0x1>
     874:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <rotations>
     878:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <rotations+0x1>
     87c:	e2 16       	cp	r14, r18
     87e:	f3 06       	cpc	r15, r19
     880:	0c f4       	brge	.+2      	; 0x884 <_Z12printDataLCDv+0x94>
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <rotations+0x1>
     888:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <rotations>
			position_old = position;
     88c:	f0 92 a7 02 	sts	0x02A7, r15	; 0x8002a7 <position_old+0x1>
     890:	e0 92 a6 02 	sts	0x02A6, r14	; 0x8002a6 <position_old>
			
			//Serial.println(position);
			speed = Serial1.read();
     894:	89 e4       	ldi	r24, 0x49	; 73
     896:	93 e0       	ldi	r25, 0x03	; 3
     898:	09 d2       	rcall	.+1042   	; 0xcac <_ZN14HardwareSerial4readEv>
     89a:	8c 01       	movw	r16, r24
			speed = (Serial1.read() * 255) + speed;
     89c:	89 e4       	ldi	r24, 0x49	; 73
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	05 d2       	rcall	.+1034   	; 0xcac <_ZN14HardwareSerial4readEv>
     8a2:	df ef       	ldi	r29, 0xFF	; 255
     8a4:	9c 01       	movw	r18, r24
     8a6:	d2 9f       	mul	r29, r18
     8a8:	c0 01       	movw	r24, r0
     8aa:	d3 9f       	mul	r29, r19
     8ac:	90 0d       	add	r25, r0
     8ae:	11 24       	eor	r1, r1
     8b0:	08 0f       	add	r16, r24
			//Serial.println(speed);
			load = Serial1.read();
     8b2:	19 1f       	adc	r17, r25
     8b4:	89 e4       	ldi	r24, 0x49	; 73
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	f9 d1       	rcall	.+1010   	; 0xcac <_ZN14HardwareSerial4readEv>
     8ba:	6c 01       	movw	r12, r24
			load = (Serial1.read() * 255) + load;
     8bc:	89 e4       	ldi	r24, 0x49	; 73
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	f5 d1       	rcall	.+1002   	; 0xcac <_ZN14HardwareSerial4readEv>
     8c2:	ac 01       	movw	r20, r24
     8c4:	d4 9f       	mul	r29, r20
     8c6:	c0 01       	movw	r24, r0
     8c8:	d5 9f       	mul	r29, r21
     8ca:	90 0d       	add	r25, r0
     8cc:	11 24       	eor	r1, r1
     8ce:	ec 01       	movw	r28, r24
     8d0:	cc 0d       	add	r28, r12
     8d2:	dd 1d       	adc	r29, r13
     8d4:	01 15       	cp	r16, r1
			//Serial.println(load);
			if (speed > 0x3FF) {
     8d6:	54 e0       	ldi	r21, 0x04	; 4
     8d8:	15 07       	cpc	r17, r21
     8da:	24 f0       	brlt	.+8      	; 0x8e4 <_Z12printDataLCDv+0xf4>
     8dc:	14 50       	subi	r17, 0x04	; 4
				speedDirection = CW;
				speed = speed - 0x400;
     8de:	cc 24       	eor	r12, r12
			//Serial.println(speed);
			load = Serial1.read();
			load = (Serial1.read() * 255) + load;
			//Serial.println(load);
			if (speed > 0x3FF) {
				speedDirection = CW;
     8e0:	c3 94       	inc	r12
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <_Z12printDataLCDv+0xf6>
				speed = speed - 0x400;
			} else {
				speedDirection = CCW;
     8e4:	c1 2c       	mov	r12, r1
			}
			if (load > 0x3FF) {
     8e6:	c1 15       	cp	r28, r1
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	d8 07       	cpc	r29, r24
     8ec:	24 f0       	brlt	.+8      	; 0x8f6 <_Z12printDataLCDv+0x106>
				loadDirection = CW;
     8ee:	d4 50       	subi	r29, 0x04	; 4
     8f0:	dd 24       	eor	r13, r13
     8f2:	d3 94       	inc	r13
				load = load - 0x400;
				} else {
				loadDirection = CCW;
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <_Z12printDataLCDv+0x108>
			}
			while(Serial1.available() > 0) { 
     8f6:	d1 2c       	mov	r13, r1
     8f8:	89 e4       	ldi	r24, 0x49	; 73
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	bd d1       	rcall	.+890    	; 0xc78 <_ZN14HardwareSerial9availableEv>
     8fe:	18 16       	cp	r1, r24
     900:	19 06       	cpc	r1, r25
				//Serial.println(Serial1.read()); 
				Serial1.read();
     902:	24 f4       	brge	.+8      	; 0x90c <_Z12printDataLCDv+0x11c>
     904:	89 e4       	ldi	r24, 0x49	; 73
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	d1 d1       	rcall	.+930    	; 0xcac <_ZN14HardwareSerial4readEv>
			}
			//Serial.println("================");
			//lcd.clear();
			lcd.setCursor(4,0);
     90a:	f6 cf       	rjmp	.-20     	; 0x8f8 <_Z12printDataLCDv+0x108>
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	64 e0       	ldi	r22, 0x04	; 4
     910:	88 e9       	ldi	r24, 0x98	; 152
     912:	92 e0       	ldi	r25, 0x02	; 2
			//char buffer[16];
			//sprintf(buffer, "Servo ID: %d", servoID);
			lcd.print((byte)servoID);
     914:	87 d7       	rcall	.+3854   	; 0x1824 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     916:	4a e0       	ldi	r20, 0x0A	; 10
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	6b 2d       	mov	r22, r11
     91c:	88 e9       	ldi	r24, 0x98	; 152
     91e:	92 e0       	ldi	r25, 0x02	; 2
			lcd.print("  ");
     920:	ea d4       	rcall	.+2516   	; 0x12f6 <_ZN5Print5printEhi>
     922:	60 e5       	ldi	r22, 0x50	; 80
     924:	72 e0       	ldi	r23, 0x02	; 2
     926:	88 e9       	ldi	r24, 0x98	; 152
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	8a d4       	rcall	.+2324   	; 0x1240 <_ZN5Print5printEPKc>
			lcd.setCursor(4,1);
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	64 e0       	ldi	r22, 0x04	; 4
     930:	88 e9       	ldi	r24, 0x98	; 152
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	77 d7       	rcall	.+3822   	; 0x1824 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     936:	4a e0       	ldi	r20, 0x0A	; 10
			lcd.print((int)(position));
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	b7 01       	movw	r22, r14
     93c:	88 e9       	ldi	r24, 0x98	; 152
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	25 d5       	rcall	.+2634   	; 0x138c <_ZN5Print5printEii>
     942:	2a e0       	ldi	r18, 0x0A	; 10
			lcd.print(position > 9 ? position > 99 ? "    " : "   " : "  ");
     944:	e2 16       	cp	r14, r18
     946:	f1 04       	cpc	r15, r1
     948:	3c f0       	brlt	.+14     	; 0x958 <_Z12printDataLCDv+0x168>
     94a:	34 e6       	ldi	r19, 0x64	; 100
     94c:	e3 16       	cp	r14, r19
     94e:	f1 04       	cpc	r15, r1
     950:	34 f4       	brge	.+12     	; 0x95e <_Z12printDataLCDv+0x16e>
     952:	6f e4       	ldi	r22, 0x4F	; 79
     954:	72 e0       	ldi	r23, 0x02	; 2
     956:	05 c0       	rjmp	.+10     	; 0x962 <_Z12printDataLCDv+0x172>
     958:	60 e5       	ldi	r22, 0x50	; 80
     95a:	72 e0       	ldi	r23, 0x02	; 2
     95c:	02 c0       	rjmp	.+4      	; 0x962 <_Z12printDataLCDv+0x172>
     95e:	6e e4       	ldi	r22, 0x4E	; 78
     960:	72 e0       	ldi	r23, 0x02	; 2
     962:	88 e9       	ldi	r24, 0x98	; 152
			//lcd.setCursor(10,1);
			//lcd.print(rotations);
			lcd.setCursor(4,2);
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	6c d4       	rcall	.+2264   	; 0x1240 <_ZN5Print5printEPKc>
     968:	42 e0       	ldi	r20, 0x02	; 2
     96a:	64 e0       	ldi	r22, 0x04	; 4
     96c:	88 e9       	ldi	r24, 0x98	; 152
     96e:	92 e0       	ldi	r25, 0x02	; 2
			lcd.print((int)(speed * MX_PRESENT_SPEED_RPM));
     970:	59 d7       	rcall	.+3762   	; 0x1824 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     972:	b8 01       	movw	r22, r16
     974:	11 0f       	add	r17, r17
     976:	88 0b       	sbc	r24, r24
     978:	99 0b       	sbc	r25, r25
     97a:	8f d0       	rcall	.+286    	; 0xa9a <__floatsisf>
     97c:	2e ea       	ldi	r18, 0xAE	; 174
     97e:	37 e4       	ldi	r19, 0x47	; 71
     980:	41 ee       	ldi	r20, 0xE1	; 225
     982:	5d e3       	ldi	r21, 0x3D	; 61
     984:	ee d0       	rcall	.+476    	; 0xb62 <__mulsf3>
     986:	56 d0       	rcall	.+172    	; 0xa34 <__fixsfsi>
     988:	4a e0       	ldi	r20, 0x0A	; 10
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	88 e9       	ldi	r24, 0x98	; 152
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	fd d4       	rcall	.+2554   	; 0x138c <_ZN5Print5printEii>
			lcd.print(speedDirection ? " CW  " : " CCW  ");
     992:	c1 10       	cpse	r12, r1
     994:	03 c0       	rjmp	.+6      	; 0x99c <_Z12printDataLCDv+0x1ac>
     996:	69 e5       	ldi	r22, 0x59	; 89
     998:	72 e0       	ldi	r23, 0x02	; 2
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <_Z12printDataLCDv+0x1b0>
     99c:	63 e5       	ldi	r22, 0x53	; 83
     99e:	72 e0       	ldi	r23, 0x02	; 2
     9a0:	88 e9       	ldi	r24, 0x98	; 152
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	4d d4       	rcall	.+2202   	; 0x1240 <_ZN5Print5printEPKc>
			lcd.setCursor(4,3);
     9a6:	43 e0       	ldi	r20, 0x03	; 3
     9a8:	64 e0       	ldi	r22, 0x04	; 4
     9aa:	88 e9       	ldi	r24, 0x98	; 152
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	3a d7       	rcall	.+3700   	; 0x1824 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print((int)(load * MX_PRESENT_LOAD_PERCENT));
     9b0:	be 01       	movw	r22, r28
     9b2:	dd 0f       	add	r29, r29
     9b4:	88 0b       	sbc	r24, r24
     9b6:	99 0b       	sbc	r25, r25
     9b8:	70 d0       	rcall	.+224    	; 0xa9a <__floatsisf>
     9ba:	2e e5       	ldi	r18, 0x5E	; 94
     9bc:	3b e4       	ldi	r19, 0x4B	; 75
     9be:	48 ec       	ldi	r20, 0xC8	; 200
     9c0:	5d e3       	ldi	r21, 0x3D	; 61
     9c2:	cf d0       	rcall	.+414    	; 0xb62 <__mulsf3>
     9c4:	37 d0       	rcall	.+110    	; 0xa34 <__fixsfsi>
     9c6:	4a e0       	ldi	r20, 0x0A	; 10
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	88 e9       	ldi	r24, 0x98	; 152
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	de d4       	rcall	.+2492   	; 0x138c <_ZN5Print5printEii>
     9d0:	d1 10       	cpse	r13, r1
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <_Z12printDataLCDv+0x1ea>
     9d4:	69 e5       	ldi	r22, 0x59	; 89
			lcd.print(loadDirection ? " CW   " : " CCW  ");
     9d6:	72 e0       	ldi	r23, 0x02	; 2
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <_Z12printDataLCDv+0x1ee>
     9da:	60 e6       	ldi	r22, 0x60	; 96
     9dc:	72 e0       	ldi	r23, 0x02	; 2
     9de:	88 e9       	ldi	r24, 0x98	; 152
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	2e d4       	rcall	.+2140   	; 0x1240 <_ZN5Print5printEPKc>
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
			delay(1);
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
		}
	}
}
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	47 c5       	rjmp	.+2702   	; 0x148e <delay>
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
			lcd.print((int)(speed * MX_PRESENT_SPEED_RPM));
			lcd.print(speedDirection ? " CW  " : " CCW  ");
			lcd.setCursor(4,3);
			lcd.print((int)(load * MX_PRESENT_LOAD_PERCENT));
			lcd.print(loadDirection ? " CW   " : " CCW  ");
			delay(1);
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
		}
	}
}
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	bf 90       	pop	r11
     a12:	08 95       	ret

00000a14 <loop>:
     a14:	62 e0       	ldi	r22, 0x02	; 2
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	38 d5       	rcall	.+2672   	; 0x148e <delay>
	//setMaxTorque (0,1023);

	//  x =readLoad(3);
	 
	delay(2);
	readServo(id, 0x24, 6);
     a1e:	46 e0       	ldi	r20, 0x06	; 6
     a20:	64 e2       	ldi	r22, 0x24	; 36
     a22:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
	printDataLCD();
     a26:	ca dc       	rcall	.-1644   	; 0x3bc <_Z9readServohhh>
     a28:	e3 de       	rcall	.-570    	; 0x7f0 <_Z12printDataLCDv>
	delay(200);
     a2a:	68 ec       	ldi	r22, 0xC8	; 200
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	2d c5       	rjmp	.+2650   	; 0x148e <delay>

00000a34 <__fixsfsi>:
     a34:	04 d0       	rcall	.+8      	; 0xa3e <__fixunssfsi>
     a36:	68 94       	set
     a38:	b1 11       	cpse	r27, r1
     a3a:	8d c0       	rjmp	.+282    	; 0xb56 <__fp_szero>
     a3c:	08 95       	ret

00000a3e <__fixunssfsi>:
     a3e:	70 d0       	rcall	.+224    	; 0xb20 <__fp_splitA>
     a40:	88 f0       	brcs	.+34     	; 0xa64 <__fixunssfsi+0x26>
     a42:	9f 57       	subi	r25, 0x7F	; 127
     a44:	90 f0       	brcs	.+36     	; 0xa6a <__fixunssfsi+0x2c>
     a46:	b9 2f       	mov	r27, r25
     a48:	99 27       	eor	r25, r25
     a4a:	b7 51       	subi	r27, 0x17	; 23
     a4c:	a0 f0       	brcs	.+40     	; 0xa76 <__fixunssfsi+0x38>
     a4e:	d1 f0       	breq	.+52     	; 0xa84 <__fixunssfsi+0x46>
     a50:	66 0f       	add	r22, r22
     a52:	77 1f       	adc	r23, r23
     a54:	88 1f       	adc	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	1a f0       	brmi	.+6      	; 0xa60 <__fixunssfsi+0x22>
     a5a:	ba 95       	dec	r27
     a5c:	c9 f7       	brne	.-14     	; 0xa50 <__fixunssfsi+0x12>
     a5e:	12 c0       	rjmp	.+36     	; 0xa84 <__fixunssfsi+0x46>
     a60:	b1 30       	cpi	r27, 0x01	; 1
     a62:	81 f0       	breq	.+32     	; 0xa84 <__fixunssfsi+0x46>
     a64:	77 d0       	rcall	.+238    	; 0xb54 <__fp_zero>
     a66:	b1 e0       	ldi	r27, 0x01	; 1
     a68:	08 95       	ret
     a6a:	74 c0       	rjmp	.+232    	; 0xb54 <__fp_zero>
     a6c:	67 2f       	mov	r22, r23
     a6e:	78 2f       	mov	r23, r24
     a70:	88 27       	eor	r24, r24
     a72:	b8 5f       	subi	r27, 0xF8	; 248
     a74:	39 f0       	breq	.+14     	; 0xa84 <__fixunssfsi+0x46>
     a76:	b9 3f       	cpi	r27, 0xF9	; 249
     a78:	cc f3       	brlt	.-14     	; 0xa6c <__fixunssfsi+0x2e>
     a7a:	86 95       	lsr	r24
     a7c:	77 95       	ror	r23
     a7e:	67 95       	ror	r22
     a80:	b3 95       	inc	r27
     a82:	d9 f7       	brne	.-10     	; 0xa7a <__fixunssfsi+0x3c>
     a84:	3e f4       	brtc	.+14     	; 0xa94 <__fixunssfsi+0x56>
     a86:	90 95       	com	r25
     a88:	80 95       	com	r24
     a8a:	70 95       	com	r23
     a8c:	61 95       	neg	r22
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	8f 4f       	sbci	r24, 0xFF	; 255
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	08 95       	ret

00000a96 <__floatunsisf>:
     a96:	e8 94       	clt
     a98:	09 c0       	rjmp	.+18     	; 0xaac <__floatsisf+0x12>

00000a9a <__floatsisf>:
     a9a:	97 fb       	bst	r25, 7
     a9c:	3e f4       	brtc	.+14     	; 0xaac <__floatsisf+0x12>
     a9e:	90 95       	com	r25
     aa0:	80 95       	com	r24
     aa2:	70 95       	com	r23
     aa4:	61 95       	neg	r22
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8f 4f       	sbci	r24, 0xFF	; 255
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	99 23       	and	r25, r25
     aae:	a9 f0       	breq	.+42     	; 0xada <__floatsisf+0x40>
     ab0:	f9 2f       	mov	r31, r25
     ab2:	96 e9       	ldi	r25, 0x96	; 150
     ab4:	bb 27       	eor	r27, r27
     ab6:	93 95       	inc	r25
     ab8:	f6 95       	lsr	r31
     aba:	87 95       	ror	r24
     abc:	77 95       	ror	r23
     abe:	67 95       	ror	r22
     ac0:	b7 95       	ror	r27
     ac2:	f1 11       	cpse	r31, r1
     ac4:	f8 cf       	rjmp	.-16     	; 0xab6 <__floatsisf+0x1c>
     ac6:	fa f4       	brpl	.+62     	; 0xb06 <__floatsisf+0x6c>
     ac8:	bb 0f       	add	r27, r27
     aca:	11 f4       	brne	.+4      	; 0xad0 <__floatsisf+0x36>
     acc:	60 ff       	sbrs	r22, 0
     ace:	1b c0       	rjmp	.+54     	; 0xb06 <__floatsisf+0x6c>
     ad0:	6f 5f       	subi	r22, 0xFF	; 255
     ad2:	7f 4f       	sbci	r23, 0xFF	; 255
     ad4:	8f 4f       	sbci	r24, 0xFF	; 255
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
     ad8:	16 c0       	rjmp	.+44     	; 0xb06 <__floatsisf+0x6c>
     ada:	88 23       	and	r24, r24
     adc:	11 f0       	breq	.+4      	; 0xae2 <__floatsisf+0x48>
     ade:	96 e9       	ldi	r25, 0x96	; 150
     ae0:	11 c0       	rjmp	.+34     	; 0xb04 <__floatsisf+0x6a>
     ae2:	77 23       	and	r23, r23
     ae4:	21 f0       	breq	.+8      	; 0xaee <__floatsisf+0x54>
     ae6:	9e e8       	ldi	r25, 0x8E	; 142
     ae8:	87 2f       	mov	r24, r23
     aea:	76 2f       	mov	r23, r22
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <__floatsisf+0x5e>
     aee:	66 23       	and	r22, r22
     af0:	71 f0       	breq	.+28     	; 0xb0e <__floatsisf+0x74>
     af2:	96 e8       	ldi	r25, 0x86	; 134
     af4:	86 2f       	mov	r24, r22
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	2a f0       	brmi	.+10     	; 0xb06 <__floatsisf+0x6c>
     afc:	9a 95       	dec	r25
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 1f       	adc	r24, r24
     b04:	da f7       	brpl	.-10     	; 0xafc <__floatsisf+0x62>
     b06:	88 0f       	add	r24, r24
     b08:	96 95       	lsr	r25
     b0a:	87 95       	ror	r24
     b0c:	97 f9       	bld	r25, 7
     b0e:	08 95       	ret

00000b10 <__fp_split3>:
     b10:	57 fd       	sbrc	r21, 7
     b12:	90 58       	subi	r25, 0x80	; 128
     b14:	44 0f       	add	r20, r20
     b16:	55 1f       	adc	r21, r21
     b18:	59 f0       	breq	.+22     	; 0xb30 <__fp_splitA+0x10>
     b1a:	5f 3f       	cpi	r21, 0xFF	; 255
     b1c:	71 f0       	breq	.+28     	; 0xb3a <__fp_splitA+0x1a>
     b1e:	47 95       	ror	r20

00000b20 <__fp_splitA>:
     b20:	88 0f       	add	r24, r24
     b22:	97 fb       	bst	r25, 7
     b24:	99 1f       	adc	r25, r25
     b26:	61 f0       	breq	.+24     	; 0xb40 <__fp_splitA+0x20>
     b28:	9f 3f       	cpi	r25, 0xFF	; 255
     b2a:	79 f0       	breq	.+30     	; 0xb4a <__fp_splitA+0x2a>
     b2c:	87 95       	ror	r24
     b2e:	08 95       	ret
     b30:	12 16       	cp	r1, r18
     b32:	13 06       	cpc	r1, r19
     b34:	14 06       	cpc	r1, r20
     b36:	55 1f       	adc	r21, r21
     b38:	f2 cf       	rjmp	.-28     	; 0xb1e <__fp_split3+0xe>
     b3a:	46 95       	lsr	r20
     b3c:	f1 df       	rcall	.-30     	; 0xb20 <__fp_splitA>
     b3e:	08 c0       	rjmp	.+16     	; 0xb50 <__fp_splitA+0x30>
     b40:	16 16       	cp	r1, r22
     b42:	17 06       	cpc	r1, r23
     b44:	18 06       	cpc	r1, r24
     b46:	99 1f       	adc	r25, r25
     b48:	f1 cf       	rjmp	.-30     	; 0xb2c <__fp_splitA+0xc>
     b4a:	86 95       	lsr	r24
     b4c:	71 05       	cpc	r23, r1
     b4e:	61 05       	cpc	r22, r1
     b50:	08 94       	sec
     b52:	08 95       	ret

00000b54 <__fp_zero>:
     b54:	e8 94       	clt

00000b56 <__fp_szero>:
     b56:	bb 27       	eor	r27, r27
     b58:	66 27       	eor	r22, r22
     b5a:	77 27       	eor	r23, r23
     b5c:	cb 01       	movw	r24, r22
     b5e:	97 f9       	bld	r25, 7
     b60:	08 95       	ret

00000b62 <__mulsf3>:
     b62:	0b d0       	rcall	.+22     	; 0xb7a <__mulsf3x>
     b64:	78 c0       	rjmp	.+240    	; 0xc56 <__fp_round>
     b66:	69 d0       	rcall	.+210    	; 0xc3a <__fp_pscA>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__mulsf3+0x12>
     b6a:	6e d0       	rcall	.+220    	; 0xc48 <__fp_pscB>
     b6c:	18 f0       	brcs	.+6      	; 0xb74 <__mulsf3+0x12>
     b6e:	95 23       	and	r25, r21
     b70:	09 f0       	breq	.+2      	; 0xb74 <__mulsf3+0x12>
     b72:	5a c0       	rjmp	.+180    	; 0xc28 <__fp_inf>
     b74:	5f c0       	rjmp	.+190    	; 0xc34 <__fp_nan>
     b76:	11 24       	eor	r1, r1
     b78:	ee cf       	rjmp	.-36     	; 0xb56 <__fp_szero>

00000b7a <__mulsf3x>:
     b7a:	ca df       	rcall	.-108    	; 0xb10 <__fp_split3>
     b7c:	a0 f3       	brcs	.-24     	; 0xb66 <__mulsf3+0x4>

00000b7e <__mulsf3_pse>:
     b7e:	95 9f       	mul	r25, r21
     b80:	d1 f3       	breq	.-12     	; 0xb76 <__mulsf3+0x14>
     b82:	95 0f       	add	r25, r21
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	55 1f       	adc	r21, r21
     b88:	62 9f       	mul	r22, r18
     b8a:	f0 01       	movw	r30, r0
     b8c:	72 9f       	mul	r23, r18
     b8e:	bb 27       	eor	r27, r27
     b90:	f0 0d       	add	r31, r0
     b92:	b1 1d       	adc	r27, r1
     b94:	63 9f       	mul	r22, r19
     b96:	aa 27       	eor	r26, r26
     b98:	f0 0d       	add	r31, r0
     b9a:	b1 1d       	adc	r27, r1
     b9c:	aa 1f       	adc	r26, r26
     b9e:	64 9f       	mul	r22, r20
     ba0:	66 27       	eor	r22, r22
     ba2:	b0 0d       	add	r27, r0
     ba4:	a1 1d       	adc	r26, r1
     ba6:	66 1f       	adc	r22, r22
     ba8:	82 9f       	mul	r24, r18
     baa:	22 27       	eor	r18, r18
     bac:	b0 0d       	add	r27, r0
     bae:	a1 1d       	adc	r26, r1
     bb0:	62 1f       	adc	r22, r18
     bb2:	73 9f       	mul	r23, r19
     bb4:	b0 0d       	add	r27, r0
     bb6:	a1 1d       	adc	r26, r1
     bb8:	62 1f       	adc	r22, r18
     bba:	83 9f       	mul	r24, r19
     bbc:	a0 0d       	add	r26, r0
     bbe:	61 1d       	adc	r22, r1
     bc0:	22 1f       	adc	r18, r18
     bc2:	74 9f       	mul	r23, r20
     bc4:	33 27       	eor	r19, r19
     bc6:	a0 0d       	add	r26, r0
     bc8:	61 1d       	adc	r22, r1
     bca:	23 1f       	adc	r18, r19
     bcc:	84 9f       	mul	r24, r20
     bce:	60 0d       	add	r22, r0
     bd0:	21 1d       	adc	r18, r1
     bd2:	82 2f       	mov	r24, r18
     bd4:	76 2f       	mov	r23, r22
     bd6:	6a 2f       	mov	r22, r26
     bd8:	11 24       	eor	r1, r1
     bda:	9f 57       	subi	r25, 0x7F	; 127
     bdc:	50 40       	sbci	r21, 0x00	; 0
     bde:	8a f0       	brmi	.+34     	; 0xc02 <__mulsf3_pse+0x84>
     be0:	e1 f0       	breq	.+56     	; 0xc1a <__mulsf3_pse+0x9c>
     be2:	88 23       	and	r24, r24
     be4:	4a f0       	brmi	.+18     	; 0xbf8 <__mulsf3_pse+0x7a>
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	bb 1f       	adc	r27, r27
     bec:	66 1f       	adc	r22, r22
     bee:	77 1f       	adc	r23, r23
     bf0:	88 1f       	adc	r24, r24
     bf2:	91 50       	subi	r25, 0x01	; 1
     bf4:	50 40       	sbci	r21, 0x00	; 0
     bf6:	a9 f7       	brne	.-22     	; 0xbe2 <__mulsf3_pse+0x64>
     bf8:	9e 3f       	cpi	r25, 0xFE	; 254
     bfa:	51 05       	cpc	r21, r1
     bfc:	70 f0       	brcs	.+28     	; 0xc1a <__mulsf3_pse+0x9c>
     bfe:	14 c0       	rjmp	.+40     	; 0xc28 <__fp_inf>
     c00:	aa cf       	rjmp	.-172    	; 0xb56 <__fp_szero>
     c02:	5f 3f       	cpi	r21, 0xFF	; 255
     c04:	ec f3       	brlt	.-6      	; 0xc00 <__mulsf3_pse+0x82>
     c06:	98 3e       	cpi	r25, 0xE8	; 232
     c08:	dc f3       	brlt	.-10     	; 0xc00 <__mulsf3_pse+0x82>
     c0a:	86 95       	lsr	r24
     c0c:	77 95       	ror	r23
     c0e:	67 95       	ror	r22
     c10:	b7 95       	ror	r27
     c12:	f7 95       	ror	r31
     c14:	e7 95       	ror	r30
     c16:	9f 5f       	subi	r25, 0xFF	; 255
     c18:	c1 f7       	brne	.-16     	; 0xc0a <__mulsf3_pse+0x8c>
     c1a:	fe 2b       	or	r31, r30
     c1c:	88 0f       	add	r24, r24
     c1e:	91 1d       	adc	r25, r1
     c20:	96 95       	lsr	r25
     c22:	87 95       	ror	r24
     c24:	97 f9       	bld	r25, 7
     c26:	08 95       	ret

00000c28 <__fp_inf>:
     c28:	97 f9       	bld	r25, 7
     c2a:	9f 67       	ori	r25, 0x7F	; 127
     c2c:	80 e8       	ldi	r24, 0x80	; 128
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	08 95       	ret

00000c34 <__fp_nan>:
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	80 ec       	ldi	r24, 0xC0	; 192
     c38:	08 95       	ret

00000c3a <__fp_pscA>:
     c3a:	00 24       	eor	r0, r0
     c3c:	0a 94       	dec	r0
     c3e:	16 16       	cp	r1, r22
     c40:	17 06       	cpc	r1, r23
     c42:	18 06       	cpc	r1, r24
     c44:	09 06       	cpc	r0, r25
     c46:	08 95       	ret

00000c48 <__fp_pscB>:
     c48:	00 24       	eor	r0, r0
     c4a:	0a 94       	dec	r0
     c4c:	12 16       	cp	r1, r18
     c4e:	13 06       	cpc	r1, r19
     c50:	14 06       	cpc	r1, r20
     c52:	05 06       	cpc	r0, r21
     c54:	08 95       	ret

00000c56 <__fp_round>:
     c56:	09 2e       	mov	r0, r25
     c58:	03 94       	inc	r0
     c5a:	00 0c       	add	r0, r0
     c5c:	11 f4       	brne	.+4      	; 0xc62 <__fp_round+0xc>
     c5e:	88 23       	and	r24, r24
     c60:	52 f0       	brmi	.+20     	; 0xc76 <__fp_round+0x20>
     c62:	bb 0f       	add	r27, r27
     c64:	40 f4       	brcc	.+16     	; 0xc76 <__fp_round+0x20>
     c66:	bf 2b       	or	r27, r31
     c68:	11 f4       	brne	.+4      	; 0xc6e <__fp_round+0x18>
     c6a:	60 ff       	sbrs	r22, 0
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <__fp_round+0x20>
     c6e:	6f 5f       	subi	r22, 0xFF	; 255
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	8f 4f       	sbci	r24, 0xFF	; 255
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	08 95       	ret

00000c78 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     c78:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     c7a:	91 8d       	ldd	r25, Z+25	; 0x19
     c7c:	22 8d       	ldd	r18, Z+26	; 0x1a
     c7e:	89 2f       	mov	r24, r25
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	80 5c       	subi	r24, 0xC0	; 192
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	82 1b       	sub	r24, r18
     c88:	91 09       	sbc	r25, r1
}
     c8a:	8f 73       	andi	r24, 0x3F	; 63
     c8c:	99 27       	eor	r25, r25
     c8e:	08 95       	ret

00000c90 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     c90:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     c92:	91 8d       	ldd	r25, Z+25	; 0x19
     c94:	82 8d       	ldd	r24, Z+26	; 0x1a
     c96:	98 17       	cp	r25, r24
     c98:	31 f0       	breq	.+12     	; 0xca6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     c9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     c9c:	e8 0f       	add	r30, r24
     c9e:	f1 1d       	adc	r31, r1
     ca0:	85 8d       	ldd	r24, Z+29	; 0x1d
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     caa:	08 95       	ret

00000cac <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     cac:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     cae:	91 8d       	ldd	r25, Z+25	; 0x19
     cb0:	82 8d       	ldd	r24, Z+26	; 0x1a
     cb2:	98 17       	cp	r25, r24
     cb4:	61 f0       	breq	.+24     	; 0xcce <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     cb6:	82 8d       	ldd	r24, Z+26	; 0x1a
     cb8:	df 01       	movw	r26, r30
     cba:	a8 0f       	add	r26, r24
     cbc:	b1 1d       	adc	r27, r1
     cbe:	5d 96       	adiw	r26, 0x1d	; 29
     cc0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     cc2:	92 8d       	ldd	r25, Z+26	; 0x1a
     cc4:	9f 5f       	subi	r25, 0xFF	; 255
     cc6:	9f 73       	andi	r25, 0x3F	; 63
     cc8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     cd2:	08 95       	ret

00000cd4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     cd4:	fc 01       	movw	r30, r24
     cd6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     cd8:	44 8d       	ldd	r20, Z+28	; 0x1c
     cda:	25 2f       	mov	r18, r21
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	84 2f       	mov	r24, r20
     ce0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     ce2:	82 1b       	sub	r24, r18
     ce4:	93 0b       	sbc	r25, r19
     ce6:	54 17       	cp	r21, r20
     ce8:	10 f0       	brcs	.+4      	; 0xcee <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     cea:	cf 96       	adiw	r24, 0x3f	; 63
     cec:	08 95       	ret
  return tail - head - 1;
     cee:	01 97       	sbiw	r24, 0x01	; 1
}
     cf0:	08 95       	ret

00000cf2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     cf2:	8b e0       	ldi	r24, 0x0B	; 11
     cf4:	98 e0       	ldi	r25, 0x08	; 8
     cf6:	89 2b       	or	r24, r25
     cf8:	39 f0       	breq	.+14     	; 0xd08 <_Z14serialEventRunv+0x16>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	89 2b       	or	r24, r25
     d00:	19 f0       	breq	.+6      	; 0xd08 <_Z14serialEventRunv+0x16>
     d02:	89 d1       	rcall	.+786    	; 0x1016 <_Z17Serial0_availablev>
     d04:	81 11       	cpse	r24, r1
     d06:	24 c0       	rjmp	.+72     	; 0xd50 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     d08:	80 ea       	ldi	r24, 0xA0	; 160
     d0a:	98 e0       	ldi	r25, 0x08	; 8
     d0c:	89 2b       	or	r24, r25
     d0e:	39 f0       	breq	.+14     	; 0xd1e <_Z14serialEventRunv+0x2c>
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	89 2b       	or	r24, r25
     d16:	19 f0       	breq	.+6      	; 0xd1e <_Z14serialEventRunv+0x2c>
     d18:	13 d2       	rcall	.+1062   	; 0x1140 <_Z17Serial1_availablev>
     d1a:	81 11       	cpse	r24, r1
     d1c:	1c c0       	rjmp	.+56     	; 0xd56 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	89 2b       	or	r24, r25
     d24:	41 f0       	breq	.+16     	; 0xd36 <_Z14serialEventRunv+0x44>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	89 2b       	or	r24, r25
     d2c:	21 f0       	breq	.+8      	; 0xd36 <_Z14serialEventRunv+0x44>
     d2e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d32:	81 11       	cpse	r24, r1
     d34:	13 c0       	rjmp	.+38     	; 0xd5c <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	89 2b       	or	r24, r25
     d3c:	a1 f0       	breq	.+40     	; 0xd66 <_Z14serialEventRunv+0x74>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	89 2b       	or	r24, r25
     d44:	81 f0       	breq	.+32     	; 0xd66 <_Z14serialEventRunv+0x74>
     d46:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d4a:	81 11       	cpse	r24, r1
     d4c:	0a c0       	rjmp	.+20     	; 0xd62 <_Z14serialEventRunv+0x70>
     d4e:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d50:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d54:	d9 cf       	rjmp	.-78     	; 0xd08 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     d56:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d5a:	e1 cf       	rjmp	.-62     	; 0xd1e <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     d5c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d60:	ea cf       	rjmp	.-44     	; 0xd36 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     d62:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     d66:	08 95       	ret

00000d68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     d68:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     d6a:	84 8d       	ldd	r24, Z+28	; 0x1c
     d6c:	df 01       	movw	r26, r30
     d6e:	a8 0f       	add	r26, r24
     d70:	b1 1d       	adc	r27, r1
     d72:	a3 5a       	subi	r26, 0xA3	; 163
     d74:	bf 4f       	sbci	r27, 0xFF	; 255
     d76:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     d78:	84 8d       	ldd	r24, Z+28	; 0x1c
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	8f 73       	andi	r24, 0x3F	; 63
     d80:	99 27       	eor	r25, r25
     d82:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     d84:	a6 89       	ldd	r26, Z+22	; 0x16
     d86:	b7 89       	ldd	r27, Z+23	; 0x17
     d88:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     d8a:	a0 89       	ldd	r26, Z+16	; 0x10
     d8c:	b1 89       	ldd	r27, Z+17	; 0x11
     d8e:	8c 91       	ld	r24, X
     d90:	83 70       	andi	r24, 0x03	; 3
     d92:	80 64       	ori	r24, 0x40	; 64
     d94:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     d96:	93 8d       	ldd	r25, Z+27	; 0x1b
     d98:	84 8d       	ldd	r24, Z+28	; 0x1c
     d9a:	98 13       	cpse	r25, r24
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     d9e:	02 88       	ldd	r0, Z+18	; 0x12
     da0:	f3 89       	ldd	r31, Z+19	; 0x13
     da2:	e0 2d       	mov	r30, r0
     da4:	80 81       	ld	r24, Z
     da6:	8f 7d       	andi	r24, 0xDF	; 223
     da8:	80 83       	st	Z, r24
     daa:	08 95       	ret

00000dac <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	ec 01       	movw	r28, r24
  _written = true;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     dbe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     dc0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dc2:	98 13       	cpse	r25, r24
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <_ZN14HardwareSerial5writeEh+0x24>
     dc6:	e8 89       	ldd	r30, Y+16	; 0x10
     dc8:	f9 89       	ldd	r31, Y+17	; 0x11
     dca:	80 81       	ld	r24, Z
     dcc:	85 fd       	sbrc	r24, 5
     dce:	25 c0       	rjmp	.+74     	; 0xe1a <_ZN14HardwareSerial5writeEh+0x6e>
     dd0:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     dd2:	0b 8d       	ldd	r16, Y+27	; 0x1b
     dd4:	10 e0       	ldi	r17, 0x00	; 0
     dd6:	0f 5f       	subi	r16, 0xFF	; 255
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	0f 73       	andi	r16, 0x3F	; 63
     ddc:	11 27       	eor	r17, r17
     dde:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     de0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     de2:	e8 12       	cpse	r14, r24
     de4:	0b c0       	rjmp	.+22     	; 0xdfc <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	07 fc       	sbrc	r0, 7
     dea:	fa cf       	rjmp	.-12     	; 0xde0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     dec:	e8 89       	ldd	r30, Y+16	; 0x10
     dee:	f9 89       	ldd	r31, Y+17	; 0x11
     df0:	80 81       	ld	r24, Z
     df2:	85 ff       	sbrs	r24, 5
     df4:	f5 cf       	rjmp	.-22     	; 0xde0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     df6:	ce 01       	movw	r24, r28
     df8:	b7 df       	rcall	.-146    	; 0xd68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     dfa:	f2 cf       	rjmp	.-28     	; 0xde0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     dfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dfe:	fe 01       	movw	r30, r28
     e00:	e8 0f       	add	r30, r24
     e02:	f1 1d       	adc	r31, r1
     e04:	e3 5a       	subi	r30, 0xA3	; 163
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e0a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e0c:	f8 94       	cli
    _tx_buffer_head = i;
     e0e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     e10:	ea 89       	ldd	r30, Y+18	; 0x12
     e12:	fb 89       	ldd	r31, Y+19	; 0x13
     e14:	80 81       	ld	r24, Z
     e16:	80 62       	ori	r24, 0x20	; 32
     e18:	0a c0       	rjmp	.+20     	; 0xe2e <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e1a:	9f b7       	in	r25, 0x3f	; 63
     e1c:	f8 94       	cli
      *_udr = c;
     e1e:	ee 89       	ldd	r30, Y+22	; 0x16
     e20:	ff 89       	ldd	r31, Y+23	; 0x17
     e22:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     e24:	e8 89       	ldd	r30, Y+16	; 0x10
     e26:	f9 89       	ldd	r31, Y+17	; 0x11
     e28:	80 81       	ld	r24, Z
     e2a:	83 70       	andi	r24, 0x03	; 3
     e2c:	80 64       	ori	r24, 0x40	; 64
     e2e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e30:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	08 95       	ret

00000e44 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     e4a:	88 8d       	ldd	r24, Y+24	; 0x18
     e4c:	88 23       	and	r24, r24
     e4e:	c1 f0       	breq	.+48     	; 0xe80 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     e50:	ea 89       	ldd	r30, Y+18	; 0x12
     e52:	fb 89       	ldd	r31, Y+19	; 0x13
     e54:	80 81       	ld	r24, Z
     e56:	85 fd       	sbrc	r24, 5
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <_ZN14HardwareSerial5flushEv+0x20>
     e5a:	a8 89       	ldd	r26, Y+16	; 0x10
     e5c:	b9 89       	ldd	r27, Y+17	; 0x11
     e5e:	8c 91       	ld	r24, X
     e60:	86 fd       	sbrc	r24, 6
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	07 fc       	sbrc	r0, 7
     e68:	f5 cf       	rjmp	.-22     	; 0xe54 <_ZN14HardwareSerial5flushEv+0x10>
     e6a:	80 81       	ld	r24, Z
     e6c:	85 ff       	sbrs	r24, 5
     e6e:	f2 cf       	rjmp	.-28     	; 0xe54 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     e70:	a8 89       	ldd	r26, Y+16	; 0x10
     e72:	b9 89       	ldd	r27, Y+17	; 0x11
     e74:	8c 91       	ld	r24, X
     e76:	85 ff       	sbrs	r24, 5
     e78:	ed cf       	rjmp	.-38     	; 0xe54 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     e7a:	ce 01       	movw	r24, r28
     e7c:	75 df       	rcall	.-278    	; 0xd68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e7e:	e8 cf       	rjmp	.-48     	; 0xe50 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ec 01       	movw	r28, r24
     e96:	6a 01       	movw	r12, r20
     e98:	7b 01       	movw	r14, r22
     e9a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     e9c:	e8 89       	ldd	r30, Y+16	; 0x10
     e9e:	f9 89       	ldd	r31, Y+17	; 0x11
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ea4:	41 15       	cp	r20, r1
     ea6:	51 4e       	sbci	r21, 0xE1	; 225
     ea8:	61 05       	cpc	r22, r1
     eaa:	71 05       	cpc	r23, r1
     eac:	b1 f0       	breq	.+44     	; 0xeda <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	79 e0       	ldi	r23, 0x09	; 9
     eb2:	8d e3       	ldi	r24, 0x3D	; 61
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a7 01       	movw	r20, r14
     eb8:	96 01       	movw	r18, r12
     eba:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__udivmodsi4>
     ebe:	da 01       	movw	r26, r20
     ec0:	c9 01       	movw	r24, r18
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	a1 09       	sbc	r26, r1
     ec6:	b1 09       	sbc	r27, r1
     ec8:	b6 95       	lsr	r27
     eca:	a7 95       	ror	r26
     ecc:	97 95       	ror	r25
     ece:	87 95       	ror	r24
     ed0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ed2:	21 15       	cp	r18, r1
     ed4:	80 e1       	ldi	r24, 0x10	; 16
     ed6:	38 07       	cpc	r19, r24
     ed8:	a8 f0       	brcs	.+42     	; 0xf04 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     eda:	e8 89       	ldd	r30, Y+16	; 0x10
     edc:	f9 89       	ldd	r31, Y+17	; 0x11
     ede:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ee0:	60 e8       	ldi	r22, 0x80	; 128
     ee2:	74 e8       	ldi	r23, 0x84	; 132
     ee4:	8e e1       	ldi	r24, 0x1E	; 30
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a7 01       	movw	r20, r14
     eea:	96 01       	movw	r18, r12
     eec:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__udivmodsi4>
     ef0:	da 01       	movw	r26, r20
     ef2:	c9 01       	movw	r24, r18
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	a1 09       	sbc	r26, r1
     ef8:	b1 09       	sbc	r27, r1
     efa:	b6 95       	lsr	r27
     efc:	a7 95       	ror	r26
     efe:	97 95       	ror	r25
     f00:	87 95       	ror	r24
     f02:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f04:	ec 85       	ldd	r30, Y+12	; 0x0c
     f06:	fd 85       	ldd	r31, Y+13	; 0x0d
     f08:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     f0a:	ee 85       	ldd	r30, Y+14	; 0x0e
     f0c:	ff 85       	ldd	r31, Y+15	; 0x0f
     f0e:	20 83       	st	Z, r18

  _written = false;
     f10:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     f12:	ec 89       	ldd	r30, Y+20	; 0x14
     f14:	fd 89       	ldd	r31, Y+21	; 0x15
     f16:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     f18:	ea 89       	ldd	r30, Y+18	; 0x12
     f1a:	fb 89       	ldd	r31, Y+19	; 0x13
     f1c:	80 81       	ld	r24, Z
     f1e:	80 61       	ori	r24, 0x10	; 16
     f20:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     f22:	ea 89       	ldd	r30, Y+18	; 0x12
     f24:	fb 89       	ldd	r31, Y+19	; 0x13
     f26:	80 81       	ld	r24, Z
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     f2c:	ea 89       	ldd	r30, Y+18	; 0x12
     f2e:	fb 89       	ldd	r31, Y+19	; 0x13
     f30:	80 81       	ld	r24, Z
     f32:	80 68       	ori	r24, 0x80	; 128
     f34:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     f36:	ea 89       	ldd	r30, Y+18	; 0x12
     f38:	fb 89       	ldd	r31, Y+19	; 0x13
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7d       	andi	r24, 0xDF	; 223
     f3e:	80 83       	st	Z, r24
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	08 95       	ret

00000f50 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	08 95       	ret

00000f56 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     f56:	08 95       	ret

00000f58 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	0b b6       	in	r0, 0x3b	; 59
     f64:	0f 92       	push	r0
     f66:	2f 93       	push	r18
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     f70:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <Serial+0x10>
     f74:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <Serial+0x11>
     f78:	80 81       	ld	r24, Z
     f7a:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <Serial+0x16>
     f7e:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <Serial+0x17>
     f82:	82 fd       	sbrc	r24, 2
     f84:	12 c0       	rjmp	.+36     	; 0xfaa <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     f86:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     f88:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <Serial+0x19>
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     f90:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <Serial+0x1a>
     f94:	82 17       	cp	r24, r18
     f96:	51 f0       	breq	.+20     	; 0xfac <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     f98:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <Serial+0x19>
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	e4 55       	subi	r30, 0x54	; 84
     fa0:	fd 4f       	sbci	r31, 0xFD	; 253
     fa2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     fa4:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <Serial+0x19>
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     faa:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	2f 91       	pop	r18
     fb6:	0f 90       	pop	r0
     fb8:	0b be       	out	0x3b, r0	; 59
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     fc4:	1f 92       	push	r1
     fc6:	0f 92       	push	r0
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	0f 92       	push	r0
     fcc:	11 24       	eor	r1, r1
     fce:	0b b6       	in	r0, 0x3b	; 59
     fd0:	0f 92       	push	r0
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     fea:	8c ea       	ldi	r24, 0xAC	; 172
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	bc de       	rcall	.-648    	; 0xd68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0b be       	out	0x3b, r0	; 59
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1016:	8c ea       	ldi	r24, 0xAC	; 172
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	2e de       	rcall	.-932    	; 0xc78 <_ZN14HardwareSerial9availableEv>
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	89 2b       	or	r24, r25
    1020:	09 f4       	brne	.+2      	; 0x1024 <_Z17Serial0_availablev+0xe>
    1022:	20 e0       	ldi	r18, 0x00	; 0
}
    1024:	82 2f       	mov	r24, r18
    1026:	08 95       	ret

00001028 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1028:	ec ea       	ldi	r30, 0xAC	; 172
    102a:	f2 e0       	ldi	r31, 0x02	; 2
    102c:	13 82       	std	Z+3, r1	; 0x03
    102e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1030:	88 ee       	ldi	r24, 0xE8	; 232
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	a0 e0       	ldi	r26, 0x00	; 0
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	84 83       	std	Z+4, r24	; 0x04
    103a:	95 83       	std	Z+5, r25	; 0x05
    103c:	a6 83       	std	Z+6, r26	; 0x06
    103e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1040:	8b e6       	ldi	r24, 0x6B	; 107
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
    1048:	85 ec       	ldi	r24, 0xC5	; 197
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	95 87       	std	Z+13, r25	; 0x0d
    104e:	84 87       	std	Z+12, r24	; 0x0c
    1050:	84 ec       	ldi	r24, 0xC4	; 196
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	97 87       	std	Z+15, r25	; 0x0f
    1056:	86 87       	std	Z+14, r24	; 0x0e
    1058:	80 ec       	ldi	r24, 0xC0	; 192
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	91 8b       	std	Z+17, r25	; 0x11
    105e:	80 8b       	std	Z+16, r24	; 0x10
    1060:	81 ec       	ldi	r24, 0xC1	; 193
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	93 8b       	std	Z+19, r25	; 0x13
    1066:	82 8b       	std	Z+18, r24	; 0x12
    1068:	82 ec       	ldi	r24, 0xC2	; 194
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	95 8b       	std	Z+21, r25	; 0x15
    106e:	84 8b       	std	Z+20, r24	; 0x14
    1070:	86 ec       	ldi	r24, 0xC6	; 198
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	97 8b       	std	Z+23, r25	; 0x17
    1076:	86 8b       	std	Z+22, r24	; 0x16
    1078:	11 8e       	std	Z+25, r1	; 0x19
    107a:	12 8e       	std	Z+26, r1	; 0x1a
    107c:	13 8e       	std	Z+27, r1	; 0x1b
    107e:	14 8e       	std	Z+28, r1	; 0x1c
    1080:	08 95       	ret

00001082 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	0b b6       	in	r0, 0x3b	; 59
    108e:	0f 92       	push	r0
    1090:	2f 93       	push	r18
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	ef 93       	push	r30
    1098:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    109a:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <Serial1+0x10>
    109e:	f0 91 5a 03 	lds	r31, 0x035A	; 0x80035a <Serial1+0x11>
    10a2:	80 81       	ld	r24, Z
    10a4:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <Serial1+0x16>
    10a8:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <Serial1+0x17>
    10ac:	82 fd       	sbrc	r24, 2
    10ae:	12 c0       	rjmp	.+36     	; 0x10d4 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    10b0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    10b2:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <Serial1+0x19>
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    10ba:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <Serial1+0x1a>
    10be:	82 17       	cp	r24, r18
    10c0:	51 f0       	breq	.+20     	; 0x10d6 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    10c2:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <Serial1+0x19>
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	e7 5b       	subi	r30, 0xB7	; 183
    10ca:	fc 4f       	sbci	r31, 0xFC	; 252
    10cc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    10ce:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <Serial1+0x19>
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    10d4:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0b be       	out	0x3b, r0	; 59
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	0b b6       	in	r0, 0x3b	; 59
    10fa:	0f 92       	push	r0
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1114:	89 e4       	ldi	r24, 0x49	; 73
    1116:	93 e0       	ldi	r25, 0x03	; 3
    1118:	27 de       	rcall	.-946    	; 0xd68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0b be       	out	0x3b, r0	; 59
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1140:	89 e4       	ldi	r24, 0x49	; 73
    1142:	93 e0       	ldi	r25, 0x03	; 3
    1144:	99 dd       	rcall	.-1230   	; 0xc78 <_ZN14HardwareSerial9availableEv>
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	89 2b       	or	r24, r25
    114a:	09 f4       	brne	.+2      	; 0x114e <_Z17Serial1_availablev+0xe>
    114c:	20 e0       	ldi	r18, 0x00	; 0
}
    114e:	82 2f       	mov	r24, r18
    1150:	08 95       	ret

00001152 <_GLOBAL__sub_I___vector_36>:
    1152:	e9 e4       	ldi	r30, 0x49	; 73
    1154:	f3 e0       	ldi	r31, 0x03	; 3
    1156:	13 82       	std	Z+3, r1	; 0x03
    1158:	12 82       	std	Z+2, r1	; 0x02
    115a:	88 ee       	ldi	r24, 0xE8	; 232
    115c:	93 e0       	ldi	r25, 0x03	; 3
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	84 83       	std	Z+4, r24	; 0x04
    1164:	95 83       	std	Z+5, r25	; 0x05
    1166:	a6 83       	std	Z+6, r26	; 0x06
    1168:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    116a:	8b e6       	ldi	r24, 0x6B	; 107
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
    1172:	8d ec       	ldi	r24, 0xCD	; 205
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	95 87       	std	Z+13, r25	; 0x0d
    1178:	84 87       	std	Z+12, r24	; 0x0c
    117a:	8c ec       	ldi	r24, 0xCC	; 204
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	97 87       	std	Z+15, r25	; 0x0f
    1180:	86 87       	std	Z+14, r24	; 0x0e
    1182:	88 ec       	ldi	r24, 0xC8	; 200
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	91 8b       	std	Z+17, r25	; 0x11
    1188:	80 8b       	std	Z+16, r24	; 0x10
    118a:	89 ec       	ldi	r24, 0xC9	; 201
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	93 8b       	std	Z+19, r25	; 0x13
    1190:	82 8b       	std	Z+18, r24	; 0x12
    1192:	8a ec       	ldi	r24, 0xCA	; 202
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	95 8b       	std	Z+21, r25	; 0x15
    1198:	84 8b       	std	Z+20, r24	; 0x14
    119a:	8e ec       	ldi	r24, 0xCE	; 206
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	97 8b       	std	Z+23, r25	; 0x17
    11a0:	86 8b       	std	Z+22, r24	; 0x16
    11a2:	11 8e       	std	Z+25, r1	; 0x19
    11a4:	12 8e       	std	Z+26, r1	; 0x1a
    11a6:	13 8e       	std	Z+27, r1	; 0x1b
    11a8:	14 8e       	std	Z+28, r1	; 0x1c
    11aa:	08 95       	ret

000011ac <initVariant>:
    11ac:	08 95       	ret

000011ae <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    11ae:	b3 d1       	rcall	.+870    	; 0x1516 <init>

	initVariant();
    11b0:	fd df       	rcall	.-6      	; 0x11ac <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    11b2:	9a da       	rcall	.-2764   	; 0x6e8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    11b4:	c9 e7       	ldi	r28, 0x79	; 121
    11b6:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    11b8:	2d dc       	rcall	.-1958   	; 0xa14 <loop>
		if (serialEventRun) serialEventRun();
    11ba:	20 97       	sbiw	r28, 0x00	; 0
    11bc:	e9 f3       	breq	.-6      	; 0x11b8 <main+0xa>
    11be:	99 dd       	rcall	.-1230   	; 0xcf2 <_Z14serialEventRunv>
    11c0:	fb cf       	rjmp	.-10     	; 0x11b8 <main+0xa>

000011c2 <_ZN5Print5writeEPKhj>:
    11c2:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	6c 01       	movw	r12, r24
    11d4:	7a 01       	movw	r14, r20
    11d6:	8b 01       	movw	r16, r22
    11d8:	c0 e0       	ldi	r28, 0x00	; 0
    11da:	d0 e0       	ldi	r29, 0x00	; 0
    11dc:	ce 15       	cp	r28, r14
    11de:	df 05       	cpc	r29, r15
    11e0:	81 f0       	breq	.+32     	; 0x1202 <_ZN5Print5writeEPKhj+0x40>
    11e2:	d8 01       	movw	r26, r16
    11e4:	6d 91       	ld	r22, X+
    11e6:	8d 01       	movw	r16, r26
    11e8:	d6 01       	movw	r26, r12
    11ea:	ed 91       	ld	r30, X+
    11ec:	fc 91       	ld	r31, X
    11ee:	01 90       	ld	r0, Z+
    11f0:	f0 81       	ld	r31, Z
    11f2:	e0 2d       	mov	r30, r0
    11f4:	c6 01       	movw	r24, r12
    11f6:	19 95       	eicall
    11f8:	89 2b       	or	r24, r25
    11fa:	11 f0       	breq	.+4      	; 0x1200 <_ZN5Print5writeEPKhj+0x3e>
    11fc:	21 96       	adiw	r28, 0x01	; 1
    11fe:	ee cf       	rjmp	.-36     	; 0x11dc <_ZN5Print5writeEPKhj+0x1a>
    1200:	7e 01       	movw	r14, r28
    1202:	c7 01       	movw	r24, r14
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	08 95       	ret

00001216 <_ZN5Print5writeEPKc>:
    1216:	61 15       	cp	r22, r1
    1218:	71 05       	cpc	r23, r1
    121a:	79 f0       	breq	.+30     	; 0x123a <_ZN5Print5writeEPKc+0x24>
    121c:	fb 01       	movw	r30, r22
    121e:	01 90       	ld	r0, Z+
    1220:	00 20       	and	r0, r0
    1222:	e9 f7       	brne	.-6      	; 0x121e <_ZN5Print5writeEPKc+0x8>
    1224:	31 97       	sbiw	r30, 0x01	; 1
    1226:	af 01       	movw	r20, r30
    1228:	46 1b       	sub	r20, r22
    122a:	57 0b       	sbc	r21, r23
    122c:	dc 01       	movw	r26, r24
    122e:	ed 91       	ld	r30, X+
    1230:	fc 91       	ld	r31, X
    1232:	02 80       	ldd	r0, Z+2	; 0x02
    1234:	f3 81       	ldd	r31, Z+3	; 0x03
    1236:	e0 2d       	mov	r30, r0
    1238:	19 94       	eijmp
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	08 95       	ret

00001240 <_ZN5Print5printEPKc>:
    1240:	ea cf       	rjmp	.-44     	; 0x1216 <_ZN5Print5writeEPKc>

00001242 <_ZN5Print5printEc>:
    1242:	dc 01       	movw	r26, r24
    1244:	ed 91       	ld	r30, X+
    1246:	fc 91       	ld	r31, X
    1248:	01 90       	ld	r0, Z+
    124a:	f0 81       	ld	r31, Z
    124c:	e0 2d       	mov	r30, r0
    124e:	19 94       	eijmp

00001250 <_ZN5Print11printNumberEmh>:
    1250:	8f 92       	push	r8
    1252:	9f 92       	push	r9
    1254:	af 92       	push	r10
    1256:	bf 92       	push	r11
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	a1 97       	sbiw	r28, 0x21	; 33
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	7c 01       	movw	r14, r24
    1276:	fa 01       	movw	r30, r20
    1278:	cb 01       	movw	r24, r22
    127a:	19 a2       	std	Y+33, r1	; 0x21
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	08 f4       	brcc	.+2      	; 0x1282 <_ZN5Print11printNumberEmh+0x32>
    1280:	2a e0       	ldi	r18, 0x0A	; 10
    1282:	8e 01       	movw	r16, r28
    1284:	0f 5d       	subi	r16, 0xDF	; 223
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	82 2e       	mov	r8, r18
    128a:	91 2c       	mov	r9, r1
    128c:	a1 2c       	mov	r10, r1
    128e:	b1 2c       	mov	r11, r1
    1290:	bf 01       	movw	r22, r30
    1292:	a5 01       	movw	r20, r10
    1294:	94 01       	movw	r18, r8
    1296:	32 d6       	rcall	.+3172   	; 0x1efc <__udivmodsi4>
    1298:	f9 01       	movw	r30, r18
    129a:	ca 01       	movw	r24, r20
    129c:	01 50       	subi	r16, 0x01	; 1
    129e:	11 09       	sbc	r17, r1
    12a0:	6a 30       	cpi	r22, 0x0A	; 10
    12a2:	10 f4       	brcc	.+4      	; 0x12a8 <_ZN5Print11printNumberEmh+0x58>
    12a4:	60 5d       	subi	r22, 0xD0	; 208
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <_ZN5Print11printNumberEmh+0x5a>
    12a8:	69 5c       	subi	r22, 0xC9	; 201
    12aa:	d8 01       	movw	r26, r16
    12ac:	6c 93       	st	X, r22
    12ae:	23 2b       	or	r18, r19
    12b0:	24 2b       	or	r18, r20
    12b2:	25 2b       	or	r18, r21
    12b4:	69 f7       	brne	.-38     	; 0x1290 <_ZN5Print11printNumberEmh+0x40>
    12b6:	b8 01       	movw	r22, r16
    12b8:	c7 01       	movw	r24, r14
    12ba:	ad df       	rcall	.-166    	; 0x1216 <_ZN5Print5writeEPKc>
    12bc:	a1 96       	adiw	r28, 0x21	; 33
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	9f 90       	pop	r9
    12da:	8f 90       	pop	r8
    12dc:	08 95       	ret

000012de <_ZN5Print5printEmi>:
    12de:	21 15       	cp	r18, r1
    12e0:	31 05       	cpc	r19, r1
    12e2:	41 f4       	brne	.+16     	; 0x12f4 <_ZN5Print5printEmi+0x16>
    12e4:	dc 01       	movw	r26, r24
    12e6:	ed 91       	ld	r30, X+
    12e8:	fc 91       	ld	r31, X
    12ea:	01 90       	ld	r0, Z+
    12ec:	f0 81       	ld	r31, Z
    12ee:	e0 2d       	mov	r30, r0
    12f0:	64 2f       	mov	r22, r20
    12f2:	19 94       	eijmp
    12f4:	ad cf       	rjmp	.-166    	; 0x1250 <_ZN5Print11printNumberEmh>

000012f6 <_ZN5Print5printEhi>:
    12f6:	9a 01       	movw	r18, r20
    12f8:	46 2f       	mov	r20, r22
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	ee cf       	rjmp	.-36     	; 0x12de <_ZN5Print5printEmi>

00001302 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1302:	cf 92       	push	r12
    1304:	df 92       	push	r13
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
  if (base == 0) {
    1312:	21 15       	cp	r18, r1
    1314:	31 05       	cpc	r19, r1
    1316:	81 f4       	brne	.+32     	; 0x1338 <_ZN5Print5printEli+0x36>
    return write(n);
    1318:	dc 01       	movw	r26, r24
    131a:	ed 91       	ld	r30, X+
    131c:	fc 91       	ld	r31, X
    131e:	01 90       	ld	r0, Z+
    1320:	f0 81       	ld	r31, Z
    1322:	e0 2d       	mov	r30, r0
    1324:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1336:	19 94       	eijmp
  } else if (base == 10) {
    1338:	2a 30       	cpi	r18, 0x0A	; 10
    133a:	31 05       	cpc	r19, r1
    133c:	f1 f4       	brne	.+60     	; 0x137a <_ZN5Print5printEli+0x78>
    if (n < 0) {
    133e:	77 ff       	sbrs	r23, 7
    1340:	1b c0       	rjmp	.+54     	; 0x1378 <_ZN5Print5printEli+0x76>
    1342:	6a 01       	movw	r12, r20
    1344:	7b 01       	movw	r14, r22
    1346:	ec 01       	movw	r28, r24
      int t = print('-');
    1348:	6d e2       	ldi	r22, 0x2D	; 45
    134a:	7b df       	rcall	.-266    	; 0x1242 <_ZN5Print5printEc>
    134c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    134e:	44 27       	eor	r20, r20
    1350:	55 27       	eor	r21, r21
    1352:	ba 01       	movw	r22, r20
    1354:	4c 19       	sub	r20, r12
    1356:	5d 09       	sbc	r21, r13
    1358:	6e 09       	sbc	r22, r14
    135a:	7f 09       	sbc	r23, r15
    135c:	2a e0       	ldi	r18, 0x0A	; 10
    135e:	ce 01       	movw	r24, r28
    1360:	77 df       	rcall	.-274    	; 0x1250 <_ZN5Print11printNumberEmh>
    1362:	80 0f       	add	r24, r16
    1364:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	df 90       	pop	r13
    1374:	cf 90       	pop	r12
    1376:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1378:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1388:	cf 90       	pop	r12
    138a:	62 cf       	rjmp	.-316    	; 0x1250 <_ZN5Print11printNumberEmh>

0000138c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    138c:	9a 01       	movw	r18, r20
  return print((long) n, base);
    138e:	ab 01       	movw	r20, r22
    1390:	77 0f       	add	r23, r23
    1392:	66 0b       	sbc	r22, r22
    1394:	77 0b       	sbc	r23, r23
    1396:	b5 cf       	rjmp	.-150    	; 0x1302 <_ZN5Print5printEli>

00001398 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    13ae:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <timer0_millis>
    13b2:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <timer0_millis+0x1>
    13b6:	a0 91 e9 03 	lds	r26, 0x03E9	; 0x8003e9 <timer0_millis+0x2>
    13ba:	b0 91 ea 03 	lds	r27, 0x03EA	; 0x8003ea <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    13be:	30 91 e6 03 	lds	r19, 0x03E6	; 0x8003e6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    13c2:	23 e0       	ldi	r18, 0x03	; 3
    13c4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    13c6:	2d 37       	cpi	r18, 0x7D	; 125
    13c8:	20 f4       	brcc	.+8      	; 0x13d2 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	a1 1d       	adc	r26, r1
    13ce:	b1 1d       	adc	r27, r1
    13d0:	05 c0       	rjmp	.+10     	; 0x13dc <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    13d2:	26 e8       	ldi	r18, 0x86	; 134
    13d4:	23 0f       	add	r18, r19
		m += 1;
    13d6:	02 96       	adiw	r24, 0x02	; 2
    13d8:	a1 1d       	adc	r26, r1
    13da:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    13dc:	20 93 e6 03 	sts	0x03E6, r18	; 0x8003e6 <timer0_fract>
	timer0_millis = m;
    13e0:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <timer0_millis>
    13e4:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <timer0_millis+0x1>
    13e8:	a0 93 e9 03 	sts	0x03E9, r26	; 0x8003e9 <timer0_millis+0x2>
    13ec:	b0 93 ea 03 	sts	0x03EA, r27	; 0x8003ea <timer0_millis+0x3>
	timer0_overflow_count++;
    13f0:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <timer0_overflow_count>
    13f4:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <timer0_overflow_count+0x1>
    13f8:	a0 91 ed 03 	lds	r26, 0x03ED	; 0x8003ed <timer0_overflow_count+0x2>
    13fc:	b0 91 ee 03 	lds	r27, 0x03EE	; 0x8003ee <timer0_overflow_count+0x3>
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	a1 1d       	adc	r26, r1
    1404:	b1 1d       	adc	r27, r1
    1406:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <timer0_overflow_count>
    140a:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <timer0_overflow_count+0x1>
    140e:	a0 93 ed 03 	sts	0x03ED, r26	; 0x8003ed <timer0_overflow_count+0x2>
    1412:	b0 93 ee 03 	sts	0x03EE, r27	; 0x8003ee <timer0_overflow_count+0x3>
}
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    142c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    142e:	f8 94       	cli
	m = timer0_millis;
    1430:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <timer0_millis>
    1434:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <timer0_millis+0x1>
    1438:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer0_millis+0x2>
    143c:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <timer0_millis+0x3>
	SREG = oldSREG;
    1440:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1442:	08 95       	ret

00001444 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1444:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1446:	f8 94       	cli
	m = timer0_overflow_count;
    1448:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <timer0_overflow_count>
    144c:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <timer0_overflow_count+0x1>
    1450:	a0 91 ed 03 	lds	r26, 0x03ED	; 0x8003ed <timer0_overflow_count+0x2>
    1454:	b0 91 ee 03 	lds	r27, 0x03EE	; 0x8003ee <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1458:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    145a:	a8 9b       	sbis	0x15, 0	; 21
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <micros+0x24>
    145e:	2f 3f       	cpi	r18, 0xFF	; 255
    1460:	19 f0       	breq	.+6      	; 0x1468 <micros+0x24>
		m++;
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	a1 1d       	adc	r26, r1
    1466:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1468:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    146a:	ba 2f       	mov	r27, r26
    146c:	a9 2f       	mov	r26, r25
    146e:	98 2f       	mov	r25, r24
    1470:	88 27       	eor	r24, r24
    1472:	82 0f       	add	r24, r18
    1474:	91 1d       	adc	r25, r1
    1476:	a1 1d       	adc	r26, r1
    1478:	b1 1d       	adc	r27, r1
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	42 e0       	ldi	r20, 0x02	; 2
    1480:	66 0f       	add	r22, r22
    1482:	77 1f       	adc	r23, r23
    1484:	88 1f       	adc	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	4a 95       	dec	r20
    148a:	d1 f7       	brne	.-12     	; 0x1480 <micros+0x3c>
}
    148c:	08 95       	ret

0000148e <delay>:

void delay(unsigned long ms)
{
    148e:	8f 92       	push	r8
    1490:	9f 92       	push	r9
    1492:	af 92       	push	r10
    1494:	bf 92       	push	r11
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	6b 01       	movw	r12, r22
    14a0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    14a2:	d0 df       	rcall	.-96     	; 0x1444 <micros>
    14a4:	4b 01       	movw	r8, r22
    14a6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    14a8:	c1 14       	cp	r12, r1
    14aa:	d1 04       	cpc	r13, r1
    14ac:	e1 04       	cpc	r14, r1
    14ae:	f1 04       	cpc	r15, r1
		yield();
    14b0:	f1 f0       	breq	.+60     	; 0x14ee <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    14b2:	41 d3       	rcall	.+1666   	; 0x1b36 <yield>
    14b4:	c7 df       	rcall	.-114    	; 0x1444 <micros>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	88 19       	sub	r24, r8
    14bc:	99 09       	sbc	r25, r9
    14be:	aa 09       	sbc	r26, r10
    14c0:	bb 09       	sbc	r27, r11
    14c2:	88 3e       	cpi	r24, 0xE8	; 232
    14c4:	93 40       	sbci	r25, 0x03	; 3
    14c6:	a1 05       	cpc	r26, r1
    14c8:	b1 05       	cpc	r27, r1
    14ca:	70 f3       	brcs	.-36     	; 0x14a8 <delay+0x1a>
			ms--;
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	c2 1a       	sub	r12, r18
    14d0:	d1 08       	sbc	r13, r1
    14d2:	e1 08       	sbc	r14, r1
    14d4:	f1 08       	sbc	r15, r1
			start += 1000;
    14d6:	88 ee       	ldi	r24, 0xE8	; 232
    14d8:	88 0e       	add	r8, r24
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	98 1e       	adc	r9, r24
    14de:	a1 1c       	adc	r10, r1
    14e0:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    14e2:	c1 14       	cp	r12, r1
    14e4:	d1 04       	cpc	r13, r1
    14e6:	e1 04       	cpc	r14, r1
    14e8:	f1 04       	cpc	r15, r1
    14ea:	21 f7       	brne	.-56     	; 0x14b4 <delay+0x26>
    14ec:	dd cf       	rjmp	.-70     	; 0x14a8 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	9f 90       	pop	r9
    14fc:	8f 90       	pop	r8
    14fe:	08 95       	ret

00001500 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	91 05       	cpc	r25, r1
    1504:	38 f0       	brcs	.+14     	; 0x1514 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    150e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <delayMicroseconds+0x10>
    1514:	08 95       	ret

00001516 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1516:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1518:	84 b5       	in	r24, 0x24	; 36
    151a:	82 60       	ori	r24, 0x02	; 2
    151c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    151e:	84 b5       	in	r24, 0x24	; 36
    1520:	81 60       	ori	r24, 0x01	; 1
    1522:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1524:	85 b5       	in	r24, 0x25	; 37
    1526:	82 60       	ori	r24, 0x02	; 2
    1528:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    152a:	85 b5       	in	r24, 0x25	; 37
    152c:	81 60       	ori	r24, 0x01	; 1
    152e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1530:	ee e6       	ldi	r30, 0x6E	; 110
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    153a:	e1 e8       	ldi	r30, 0x81	; 129
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1540:	80 81       	ld	r24, Z
    1542:	82 60       	ori	r24, 0x02	; 2
    1544:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1546:	80 81       	ld	r24, Z
    1548:	81 60       	ori	r24, 0x01	; 1
    154a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    154c:	e0 e8       	ldi	r30, 0x80	; 128
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	81 60       	ori	r24, 0x01	; 1
    1554:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1556:	e1 eb       	ldi	r30, 0xB1	; 177
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	84 60       	ori	r24, 0x04	; 4
    155e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1560:	e0 eb       	ldi	r30, 0xB0	; 176
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	81 60       	ori	r24, 0x01	; 1
    1568:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    156a:	e1 e9       	ldi	r30, 0x91	; 145
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	82 60       	ori	r24, 0x02	; 2
    1572:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1574:	80 81       	ld	r24, Z
    1576:	81 60       	ori	r24, 0x01	; 1
    1578:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    157a:	e0 e9       	ldi	r30, 0x90	; 144
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	81 60       	ori	r24, 0x01	; 1
    1582:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1584:	e1 ea       	ldi	r30, 0xA1	; 161
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	82 60       	ori	r24, 0x02	; 2
    158c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    158e:	80 81       	ld	r24, Z
    1590:	81 60       	ori	r24, 0x01	; 1
    1592:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1594:	e0 ea       	ldi	r30, 0xA0	; 160
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	81 60       	ori	r24, 0x01	; 1
    159c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    159e:	e1 e2       	ldi	r30, 0x21	; 33
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	80 81       	ld	r24, Z
    15a4:	82 60       	ori	r24, 0x02	; 2
    15a6:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    15a8:	80 81       	ld	r24, Z
    15aa:	81 60       	ori	r24, 0x01	; 1
    15ac:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    15ae:	e0 e2       	ldi	r30, 0x20	; 32
    15b0:	f1 e0       	ldi	r31, 0x01	; 1
    15b2:	80 81       	ld	r24, Z
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    15b8:	ea e7       	ldi	r30, 0x7A	; 122
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	84 60       	ori	r24, 0x04	; 4
    15c0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    15c2:	80 81       	ld	r24, Z
    15c4:	82 60       	ori	r24, 0x02	; 2
    15c6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    15c8:	80 81       	ld	r24, Z
    15ca:	81 60       	ori	r24, 0x01	; 1
    15cc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    15ce:	80 81       	ld	r24, Z
    15d0:	80 68       	ori	r24, 0x80	; 128
    15d2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    15d4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    15d8:	08 95       	ret

000015da <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	fc 01       	movw	r30, r24
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	e2 31       	cpi	r30, 0x12	; 18
    15e2:	f1 05       	cpc	r31, r1
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <turnOffPWM+0xe>
    15e6:	4d c0       	rjmp	.+154    	; 0x1682 <turnOffPWM+0xa8>
    15e8:	88 27       	eor	r24, r24
    15ea:	ee 58       	subi	r30, 0x8E	; 142
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	8f 4f       	sbci	r24, 0xFF	; 255
    15f0:	a7 c4       	rjmp	.+2382   	; 0x1f40 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    15f2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15f6:	8f 77       	andi	r24, 0x7F	; 127
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    15fa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15fe:	8f 7d       	andi	r24, 0xDF	; 223
    1600:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1604:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1606:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    160a:	87 7f       	andi	r24, 0xF7	; 247
    160c:	f9 cf       	rjmp	.-14     	; 0x1600 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    160e:	84 b5       	in	r24, 0x24	; 36
    1610:	8f 77       	andi	r24, 0x7F	; 127
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1614:	84 b5       	in	r24, 0x24	; 36
    1616:	8f 7d       	andi	r24, 0xDF	; 223
    1618:	84 bd       	out	0x24, r24	; 36
    161a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    161c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1620:	8f 77       	andi	r24, 0x7F	; 127
    1622:	03 c0       	rjmp	.+6      	; 0x162a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1624:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1628:	8f 7d       	andi	r24, 0xDF	; 223
    162a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    162e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1630:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1634:	8f 77       	andi	r24, 0x7F	; 127
    1636:	07 c0       	rjmp	.+14     	; 0x1646 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1638:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    163c:	8f 7d       	andi	r24, 0xDF	; 223
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1640:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1644:	87 7f       	andi	r24, 0xF7	; 247
    1646:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    164a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    164c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1650:	8f 77       	andi	r24, 0x7F	; 127
    1652:	07 c0       	rjmp	.+14     	; 0x1662 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1654:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1658:	8f 7d       	andi	r24, 0xDF	; 223
    165a:	03 c0       	rjmp	.+6      	; 0x1662 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    165c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1660:	87 7f       	andi	r24, 0xF7	; 247
    1662:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1666:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1668:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    166c:	8f 77       	andi	r24, 0x7F	; 127
    166e:	07 c0       	rjmp	.+14     	; 0x167e <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1670:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1674:	8f 7d       	andi	r24, 0xDF	; 223
    1676:	03 c0       	rjmp	.+6      	; 0x167e <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1678:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    167c:	87 7f       	andi	r24, 0xF7	; 247
    167e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1682:	08 95       	ret

00001684 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	fc 01       	movw	r30, r24
    168c:	e2 5b       	subi	r30, 0xB2	; 178
    168e:	fe 4f       	sbci	r31, 0xFE	; 254
    1690:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1692:	fc 01       	movw	r30, r24
    1694:	ec 56       	subi	r30, 0x6C	; 108
    1696:	fe 4f       	sbci	r31, 0xFE	; 254
    1698:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    169a:	88 23       	and	r24, r24
    169c:	61 f1       	breq	.+88     	; 0x16f6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	fc 01       	movw	r30, r24
    16a6:	ec 50       	subi	r30, 0x0C	; 12
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	c5 91       	lpm	r28, Z+
    16ac:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    16ae:	fc 01       	movw	r30, r24
    16b0:	e6 52       	subi	r30, 0x26	; 38
    16b2:	fe 4f       	sbci	r31, 0xFE	; 254
    16b4:	a5 91       	lpm	r26, Z+
    16b6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    16b8:	61 11       	cpse	r22, r1
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    16bc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    16be:	f8 94       	cli
		*reg &= ~bit;
    16c0:	88 81       	ld	r24, Y
    16c2:	20 95       	com	r18
    16c4:	82 23       	and	r24, r18
    16c6:	88 83       	st	Y, r24
		*out &= ~bit;
    16c8:	ec 91       	ld	r30, X
    16ca:	2e 23       	and	r18, r30
    16cc:	0b c0       	rjmp	.+22     	; 0x16e4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    16ce:	62 30       	cpi	r22, 0x02	; 2
    16d0:	61 f4       	brne	.+24     	; 0x16ea <pinMode+0x66>
		uint8_t oldSREG = SREG;
    16d2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    16d4:	f8 94       	cli
		*reg &= ~bit;
    16d6:	88 81       	ld	r24, Y
    16d8:	32 2f       	mov	r19, r18
    16da:	30 95       	com	r19
    16dc:	83 23       	and	r24, r19
    16de:	88 83       	st	Y, r24
		*out |= bit;
    16e0:	ec 91       	ld	r30, X
    16e2:	2e 2b       	or	r18, r30
    16e4:	2c 93       	st	X, r18
		SREG = oldSREG;
    16e6:	9f bf       	out	0x3f, r25	; 63
    16e8:	06 c0       	rjmp	.+12     	; 0x16f6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    16ea:	8f b7       	in	r24, 0x3f	; 63
                cli();
    16ec:	f8 94       	cli
		*reg |= bit;
    16ee:	e8 81       	ld	r30, Y
    16f0:	2e 2b       	or	r18, r30
    16f2:	28 83       	st	Y, r18
		SREG = oldSREG;
    16f4:	8f bf       	out	0x3f, r24	; 63
	}
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	f9 01       	movw	r30, r18
    1708:	e8 5f       	subi	r30, 0xF8	; 248
    170a:	fe 4f       	sbci	r31, 0xFE	; 254
    170c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    170e:	f9 01       	movw	r30, r18
    1710:	e2 5b       	subi	r30, 0xB2	; 178
    1712:	fe 4f       	sbci	r31, 0xFE	; 254
    1714:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1716:	f9 01       	movw	r30, r18
    1718:	ec 56       	subi	r30, 0x6C	; 108
    171a:	fe 4f       	sbci	r31, 0xFE	; 254
    171c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    171e:	cc 23       	and	r28, r28
    1720:	b9 f0       	breq	.+46     	; 0x1750 <digitalWrite+0x54>
    1722:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1724:	81 11       	cpse	r24, r1
    1726:	59 df       	rcall	.-334    	; 0x15da <turnOffPWM>

	out = portOutputRegister(port);
    1728:	ec 2f       	mov	r30, r28
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	e6 52       	subi	r30, 0x26	; 38
    1732:	fe 4f       	sbci	r31, 0xFE	; 254
    1734:	a5 91       	lpm	r26, Z+
    1736:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1738:	9f b7       	in	r25, 0x3f	; 63
	cli();
    173a:	f8 94       	cli

	if (val == LOW) {
    173c:	11 11       	cpse	r17, r1
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <digitalWrite+0x4c>
		*out &= ~bit;
    1740:	8c 91       	ld	r24, X
    1742:	d0 95       	com	r29
    1744:	d8 23       	and	r29, r24
    1746:	02 c0       	rjmp	.+4      	; 0x174c <digitalWrite+0x50>
	} else {
		*out |= bit;
    1748:	ec 91       	ld	r30, X
    174a:	de 2b       	or	r29, r30
    174c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    174e:	9f bf       	out	0x3f, r25	; 63
}
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	08 95       	ret

00001758 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    1758:	fc 01       	movw	r30, r24
    175a:	13 82       	std	Z+3, r1	; 0x03
    175c:	12 82       	std	Z+2, r1	; 0x02
    175e:	8d e7       	ldi	r24, 0x7D	; 125
    1760:	92 e0       	ldi	r25, 0x02	; 2
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	80 83       	st	Z, r24
    1766:	64 83       	std	Z+4, r22	; 0x04
    1768:	41 87       	std	Z+9, r20	; 0x09
    176a:	22 87       	std	Z+10, r18	; 0x0a
    176c:	13 86       	std	Z+11, r1	; 0x0b
    176e:	08 95       	ret

00001770 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ec 01       	movw	r28, r24
    1778:	16 2f       	mov	r17, r22
    177a:	6c 81       	ldd	r22, Y+4	; 0x04
    177c:	8f ee       	ldi	r24, 0xEF	; 239
    177e:	93 e0       	ldi	r25, 0x03	; 3
    1780:	b9 d1       	rcall	.+882    	; 0x1af4 <_ZN7TwoWire17beginTransmissionEh>
    1782:	6b 85       	ldd	r22, Y+11	; 0x0b
    1784:	61 2b       	or	r22, r17
    1786:	8f ee       	ldi	r24, 0xEF	; 239
    1788:	93 e0       	ldi	r25, 0x03	; 3
    178a:	67 d1       	rcall	.+718    	; 0x1a5a <_ZN7TwoWire5writeEh>
    178c:	8f ee       	ldi	r24, 0xEF	; 239
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	ca c1       	rjmp	.+916    	; 0x1b2c <_ZN7TwoWire15endTransmissionEv>

00001798 <_ZN17LiquidCrystal_I2C9backlightEv>:
    1798:	28 e0       	ldi	r18, 0x08	; 8
    179a:	fc 01       	movw	r30, r24
    179c:	23 87       	std	Z+11, r18	; 0x0b
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	e7 cf       	rjmp	.-50     	; 0x1770 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000017a2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	8c 01       	movw	r16, r24
    17aa:	c6 2f       	mov	r28, r22
    17ac:	64 60       	ori	r22, 0x04	; 4
    17ae:	e0 df       	rcall	.-64     	; 0x1770 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a5 de       	rcall	.-694    	; 0x1500 <delayMicroseconds>
    17b6:	6c 2f       	mov	r22, r28
    17b8:	6b 7f       	andi	r22, 0xFB	; 251
    17ba:	c8 01       	movw	r24, r16
    17bc:	d9 df       	rcall	.-78     	; 0x1770 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    17be:	82 e3       	ldi	r24, 0x32	; 50
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	9b ce       	rjmp	.-714    	; 0x1500 <delayMicroseconds>

000017ca <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	ec 01       	movw	r28, r24
    17d2:	16 2f       	mov	r17, r22
    17d4:	cd df       	rcall	.-102    	; 0x1770 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    17d6:	61 2f       	mov	r22, r17
    17d8:	ce 01       	movw	r24, r28
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	e0 cf       	rjmp	.-64     	; 0x17a2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000017e2 <_ZN17LiquidCrystal_I2C4sendEhh>:
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	8c 01       	movw	r16, r24
    17ec:	c6 2f       	mov	r28, r22
    17ee:	d4 2f       	mov	r29, r20
    17f0:	60 7f       	andi	r22, 0xF0	; 240
    17f2:	64 2b       	or	r22, r20
    17f4:	ea df       	rcall	.-44     	; 0x17ca <_ZN17LiquidCrystal_I2C10write4bitsEh>
    17f6:	80 e1       	ldi	r24, 0x10	; 16
    17f8:	c8 9f       	mul	r28, r24
    17fa:	b0 01       	movw	r22, r0
    17fc:	11 24       	eor	r1, r1
    17fe:	6d 2b       	or	r22, r29
    1800:	c8 01       	movw	r24, r16
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	df cf       	rjmp	.-66     	; 0x17ca <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000180c <_ZN17LiquidCrystal_I2C7commandEh>:
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	e9 cf       	rjmp	.-46     	; 0x17e2 <_ZN17LiquidCrystal_I2C4sendEhh>

00001810 <_ZN17LiquidCrystal_I2C5clearEv>:
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	fc df       	rcall	.-8      	; 0x180c <_ZN17LiquidCrystal_I2C7commandEh>
    1814:	80 ed       	ldi	r24, 0xD0	; 208
    1816:	97 e0       	ldi	r25, 0x07	; 7
    1818:	73 ce       	rjmp	.-794    	; 0x1500 <delayMicroseconds>

0000181a <_ZN17LiquidCrystal_I2C4homeEv>:
    181a:	62 e0       	ldi	r22, 0x02	; 2
    181c:	f7 df       	rcall	.-18     	; 0x180c <_ZN17LiquidCrystal_I2C7commandEh>
    181e:	80 ed       	ldi	r24, 0xD0	; 208
    1820:	97 e0       	ldi	r25, 0x07	; 7
    1822:	6e ce       	rjmp	.-804    	; 0x1500 <delayMicroseconds>

00001824 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	28 97       	sbiw	r28, 0x08	; 8
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	9c 01       	movw	r18, r24
    183a:	88 e0       	ldi	r24, 0x08	; 8
    183c:	e3 e0       	ldi	r30, 0x03	; 3
    183e:	f2 e0       	ldi	r31, 0x02	; 2
    1840:	de 01       	movw	r26, r28
    1842:	11 96       	adiw	r26, 0x01	; 1
    1844:	01 90       	ld	r0, Z+
    1846:	0d 92       	st	X+, r0
    1848:	8a 95       	dec	r24
    184a:	e1 f7       	brne	.-8      	; 0x1844 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    184c:	f9 01       	movw	r30, r18
    184e:	80 85       	ldd	r24, Z+8	; 0x08
    1850:	84 17       	cp	r24, r20
    1852:	10 f4       	brcc	.+4      	; 0x1858 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    1854:	4f ef       	ldi	r20, 0xFF	; 255
    1856:	48 0f       	add	r20, r24
    1858:	fe 01       	movw	r30, r28
    185a:	31 96       	adiw	r30, 0x01	; 1
    185c:	e4 0f       	add	r30, r20
    185e:	f1 1d       	adc	r31, r1
    1860:	e4 0f       	add	r30, r20
    1862:	f1 1d       	adc	r31, r1
    1864:	90 81       	ld	r25, Z
    1866:	69 0f       	add	r22, r25
    1868:	60 68       	ori	r22, 0x80	; 128
    186a:	c9 01       	movw	r24, r18
    186c:	28 96       	adiw	r28, 0x08	; 8
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	c7 cf       	rjmp	.-114    	; 0x180c <_ZN17LiquidCrystal_I2C7commandEh>

0000187e <_ZN17LiquidCrystal_I2C7displayEv>:
    187e:	fc 01       	movw	r30, r24
    1880:	66 81       	ldd	r22, Z+6	; 0x06
    1882:	26 2f       	mov	r18, r22
    1884:	24 60       	ori	r18, 0x04	; 4
    1886:	26 83       	std	Z+6, r18	; 0x06
    1888:	6c 60       	ori	r22, 0x0C	; 12
    188a:	c0 cf       	rjmp	.-128    	; 0x180c <_ZN17LiquidCrystal_I2C7commandEh>

0000188c <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	a9 df       	rcall	.-174    	; 0x17e2 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	08 95       	ret

00001896 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	ec 01       	movw	r28, r24
	if (lines > 1) {
    189c:	42 30       	cpi	r20, 0x02	; 2
    189e:	18 f0       	brcs	.+6      	; 0x18a6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	88 60       	ori	r24, 0x08	; 8
    18a4:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    18a6:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    18a8:	22 23       	and	r18, r18
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    18ac:	41 30       	cpi	r20, 0x01	; 1
    18ae:	19 f4       	brne	.+6      	; 0x18b6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	84 60       	ori	r24, 0x04	; 4
    18b4:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    18b6:	62 e3       	ldi	r22, 0x32	; 50
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	e7 dd       	rcall	.-1074   	; 0x148e <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    18c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c2:	ce 01       	movw	r24, r28
    18c4:	55 df       	rcall	.-342    	; 0x1770 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    18c6:	68 ee       	ldi	r22, 0xE8	; 232
    18c8:	73 e0       	ldi	r23, 0x03	; 3
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	df dd       	rcall	.-1090   	; 0x148e <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    18d0:	60 e3       	ldi	r22, 0x30	; 48
    18d2:	ce 01       	movw	r24, r28
    18d4:	7a df       	rcall	.-268    	; 0x17ca <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    18d6:	84 e9       	ldi	r24, 0x94	; 148
    18d8:	91 e1       	ldi	r25, 0x11	; 17
    18da:	12 de       	rcall	.-988    	; 0x1500 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    18dc:	60 e3       	ldi	r22, 0x30	; 48
    18de:	ce 01       	movw	r24, r28
    18e0:	74 df       	rcall	.-280    	; 0x17ca <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    18e2:	84 e9       	ldi	r24, 0x94	; 148
    18e4:	91 e1       	ldi	r25, 0x11	; 17
    18e6:	0c de       	rcall	.-1000   	; 0x1500 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    18e8:	60 e3       	ldi	r22, 0x30	; 48
    18ea:	ce 01       	movw	r24, r28
    18ec:	6e df       	rcall	.-292    	; 0x17ca <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    18ee:	86 e9       	ldi	r24, 0x96	; 150
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	06 de       	rcall	.-1012   	; 0x1500 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    18f4:	60 e2       	ldi	r22, 0x20	; 32
    18f6:	ce 01       	movw	r24, r28
    18f8:	68 df       	rcall	.-304    	; 0x17ca <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    18fa:	6d 81       	ldd	r22, Y+5	; 0x05
    18fc:	60 62       	ori	r22, 0x20	; 32
    18fe:	ce 01       	movw	r24, r28
    1900:	85 df       	rcall	.-246    	; 0x180c <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1902:	84 e0       	ldi	r24, 0x04	; 4
    1904:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1906:	ce 01       	movw	r24, r28
    1908:	ba df       	rcall	.-140    	; 0x187e <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    190a:	ce 01       	movw	r24, r28
    190c:	81 df       	rcall	.-254    	; 0x1810 <_ZN17LiquidCrystal_I2C5clearEv>
    190e:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1910:	8f 83       	std	Y+7, r24	; 0x07
    1912:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1914:	ce 01       	movw	r24, r28
    1916:	7a df       	rcall	.-268    	; 0x180c <_ZN17LiquidCrystal_I2C7commandEh>
    1918:	ce 01       	movw	r24, r28
    191a:	df 91       	pop	r29
	
	home();
    191c:	cf 91       	pop	r28
  
}
    191e:	7d cf       	rjmp	.-262    	; 0x181a <_ZN17LiquidCrystal_I2C4homeEv>

00001920 <_ZN17LiquidCrystal_I2C9init_privEv>:
    1920:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    1922:	df 93       	push	r29
    1924:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    1926:	8f ee       	ldi	r24, 0xEF	; 239
    1928:	93 e0       	ldi	r25, 0x03	; 3
    192a:	d5 d0       	rcall	.+426    	; 0x1ad6 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    192c:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	4a 85       	ldd	r20, Y+10	; 0x0a
    1932:	69 85       	ldd	r22, Y+9	; 0x09
    1934:	ce 01       	movw	r24, r28
}
    1936:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    1938:	cf 91       	pop	r28
    193a:	ad cf       	rjmp	.-166    	; 0x1896 <_ZN17LiquidCrystal_I2C5beginEhhh>

0000193c <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    193c:	f1 cf       	rjmp	.-30     	; 0x1920 <_ZN17LiquidCrystal_I2C9init_privEv>

0000193e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    193e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZN7TwoWire14rxBufferLengthE>
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	20 91 24 04 	lds	r18, 0x0424	; 0x800424 <_ZN7TwoWire13rxBufferIndexE>
    1948:	82 1b       	sub	r24, r18
    194a:	91 09       	sbc	r25, r1
    194c:	08 95       	ret

0000194e <_ZN7TwoWire4readEv>:
    194e:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZN7TwoWire13rxBufferIndexE>
    1952:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZN7TwoWire14rxBufferLengthE>
    1956:	98 17       	cp	r25, r24
    1958:	50 f4       	brcc	.+20     	; 0x196e <_ZN7TwoWire4readEv+0x20>
    195a:	e9 2f       	mov	r30, r25
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	eb 5d       	subi	r30, 0xDB	; 219
    1960:	fb 4f       	sbci	r31, 0xFB	; 251
    1962:	20 81       	ld	r18, Z
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	9f 5f       	subi	r25, 0xFF	; 255
    1968:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZN7TwoWire13rxBufferIndexE>
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <_ZN7TwoWire4readEv+0x24>
    196e:	2f ef       	ldi	r18, 0xFF	; 255
    1970:	3f ef       	ldi	r19, 0xFF	; 255
    1972:	c9 01       	movw	r24, r18
    1974:	08 95       	ret

00001976 <_ZN7TwoWire4peekEv>:
    1976:	e0 91 24 04 	lds	r30, 0x0424	; 0x800424 <_ZN7TwoWire13rxBufferIndexE>
    197a:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZN7TwoWire14rxBufferLengthE>
    197e:	e8 17       	cp	r30, r24
    1980:	30 f4       	brcc	.+12     	; 0x198e <_ZN7TwoWire4peekEv+0x18>
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	eb 5d       	subi	r30, 0xDB	; 219
    1986:	fb 4f       	sbci	r31, 0xFB	; 251
    1988:	80 81       	ld	r24, Z
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	08 95       	ret
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	9f ef       	ldi	r25, 0xFF	; 255
    1992:	08 95       	ret

00001994 <_ZN7TwoWire5flushEv>:
    1994:	08 95       	ret

00001996 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ec 01       	movw	r28, r24
    199c:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <_ZN7TwoWire14user_onReceiveE>
    19a0:	f0 91 fc 03 	lds	r31, 0x03FC	; 0x8003fc <_ZN7TwoWire14user_onReceiveE+0x1>
    19a4:	30 97       	sbiw	r30, 0x00	; 0
    19a6:	f1 f0       	breq	.+60     	; 0x19e4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    19a8:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZN7TwoWire13rxBufferIndexE>
    19ac:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZN7TwoWire14rxBufferLengthE>
    19b0:	98 17       	cp	r25, r24
    19b2:	c0 f0       	brcs	.+48     	; 0x19e4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	29 2f       	mov	r18, r25
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	26 17       	cp	r18, r22
    19bc:	37 07       	cpc	r19, r23
    19be:	54 f4       	brge	.+20     	; 0x19d4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    19c0:	de 01       	movw	r26, r28
    19c2:	a2 0f       	add	r26, r18
    19c4:	b3 1f       	adc	r27, r19
    19c6:	4c 91       	ld	r20, X
    19c8:	d9 01       	movw	r26, r18
    19ca:	ab 5d       	subi	r26, 0xDB	; 219
    19cc:	bb 4f       	sbci	r27, 0xFB	; 251
    19ce:	4c 93       	st	X, r20
    19d0:	9f 5f       	subi	r25, 0xFF	; 255
    19d2:	f1 cf       	rjmp	.-30     	; 0x19b6 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    19d4:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <_ZN7TwoWire13rxBufferIndexE>
    19d8:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <_ZN7TwoWire14rxBufferLengthE>
    19dc:	cb 01       	movw	r24, r22
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	19 94       	eijmp
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <_ZN7TwoWire16onRequestServiceEv>:
    19ea:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <_ZN7TwoWire14user_onRequestE>
    19ee:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <_ZN7TwoWire14user_onRequestE+0x1>
    19f2:	30 97       	sbiw	r30, 0x00	; 0
    19f4:	29 f0       	breq	.+10     	; 0x1a00 <_ZN7TwoWire16onRequestServiceEv+0x16>
    19f6:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZN7TwoWire13txBufferIndexE>
    19fa:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire14txBufferLengthE>
    19fe:	19 94       	eijmp
    1a00:	08 95       	ret

00001a02 <_ZN7TwoWire5writeEPKhj>:
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	7c 01       	movw	r14, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8a 01       	movw	r16, r20
    1a18:	20 91 ff 03 	lds	r18, 0x03FF	; 0x8003ff <_ZN7TwoWire12transmittingE>
    1a1c:	22 23       	and	r18, r18
    1a1e:	89 f0       	breq	.+34     	; 0x1a42 <_ZN7TwoWire5writeEPKhj+0x40>
    1a20:	eb 01       	movw	r28, r22
    1a22:	6b 01       	movw	r12, r22
    1a24:	c4 0e       	add	r12, r20
    1a26:	d5 1e       	adc	r13, r21
    1a28:	cc 15       	cp	r28, r12
    1a2a:	dd 05       	cpc	r29, r13
    1a2c:	61 f0       	breq	.+24     	; 0x1a46 <_ZN7TwoWire5writeEPKhj+0x44>
    1a2e:	69 91       	ld	r22, Y+
    1a30:	d7 01       	movw	r26, r14
    1a32:	ed 91       	ld	r30, X+
    1a34:	fc 91       	ld	r31, X
    1a36:	01 90       	ld	r0, Z+
    1a38:	f0 81       	ld	r31, Z
    1a3a:	e0 2d       	mov	r30, r0
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	19 95       	eicall
    1a40:	f3 cf       	rjmp	.-26     	; 0x1a28 <_ZN7TwoWire5writeEPKhj+0x26>
    1a42:	64 2f       	mov	r22, r20
    1a44:	eb d0       	rcall	.+470    	; 0x1c1c <twi_transmit>
    1a46:	c8 01       	movw	r24, r16
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	cf 90       	pop	r12
    1a58:	08 95       	ret

00001a5a <_ZN7TwoWire5writeEh>:
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	1f 92       	push	r1
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	69 83       	std	Y+1, r22	; 0x01
    1a66:	20 91 ff 03 	lds	r18, 0x03FF	; 0x8003ff <_ZN7TwoWire12transmittingE>
    1a6a:	22 23       	and	r18, r18
    1a6c:	d1 f0       	breq	.+52     	; 0x1aa2 <_ZN7TwoWire5writeEh+0x48>
    1a6e:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <_ZN7TwoWire14txBufferLengthE>
    1a72:	20 32       	cpi	r18, 0x20	; 32
    1a74:	40 f0       	brcs	.+16     	; 0x1a86 <_ZN7TwoWire5writeEh+0x2c>
    1a76:	21 e0       	ldi	r18, 0x01	; 1
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	33 83       	std	Z+3, r19	; 0x03
    1a7e:	22 83       	std	Z+2, r18	; 0x02
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <_ZN7TwoWire5writeEh+0x54>
    1a86:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <_ZN7TwoWire13txBufferIndexE>
    1a8a:	e8 2f       	mov	r30, r24
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	ee 5f       	subi	r30, 0xFE	; 254
    1a90:	fb 4f       	sbci	r31, 0xFB	; 251
    1a92:	99 81       	ldd	r25, Y+1	; 0x01
    1a94:	90 83       	st	Z, r25
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
    1a98:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <_ZN7TwoWire13txBufferIndexE>
    1a9c:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <_ZN7TwoWire14txBufferLengthE>
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <_ZN7TwoWire5writeEh+0x50>
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	b9 d0       	rcall	.+370    	; 0x1c1c <twi_transmit>
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0f 90       	pop	r0
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	08 95       	ret

00001ab6 <_ZN7TwoWireC1Ev>:
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	13 82       	std	Z+3, r1	; 0x03
    1aba:	12 82       	std	Z+2, r1	; 0x02
    1abc:	88 ee       	ldi	r24, 0xE8	; 232
    1abe:	93 e0       	ldi	r25, 0x03	; 3
    1ac0:	a0 e0       	ldi	r26, 0x00	; 0
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	84 83       	std	Z+4, r24	; 0x04
    1ac6:	95 83       	std	Z+5, r25	; 0x05
    1ac8:	a6 83       	std	Z+6, r26	; 0x06
    1aca:	b7 83       	std	Z+7, r27	; 0x07
    1acc:	89 e8       	ldi	r24, 0x89	; 137
    1ace:	92 e0       	ldi	r25, 0x02	; 2
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
    1ad4:	08 95       	ret

00001ad6 <_ZN7TwoWire5beginEv>:
    1ad6:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <_ZN7TwoWire13rxBufferIndexE>
    1ada:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_ZN7TwoWire14rxBufferLengthE>
    1ade:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZN7TwoWire13txBufferIndexE>
    1ae2:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire14txBufferLengthE>
    1ae6:	28 d0       	rcall	.+80     	; 0x1b38 <twi_init>
    1ae8:	85 ef       	ldi	r24, 0xF5	; 245
    1aea:	9c e0       	ldi	r25, 0x0C	; 12
    1aec:	c4 d0       	rcall	.+392    	; 0x1c76 <twi_attachSlaveTxEvent>
    1aee:	8b ec       	ldi	r24, 0xCB	; 203
    1af0:	9c e0       	ldi	r25, 0x0C	; 12
    1af2:	bc c0       	rjmp	.+376    	; 0x1c6c <twi_attachSlaveRxEvent>

00001af4 <_ZN7TwoWire17beginTransmissionEh>:
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <_ZN7TwoWire12transmittingE>
    1afa:	60 93 22 04 	sts	0x0422, r22	; 0x800422 <_ZN7TwoWire9txAddressE>
    1afe:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZN7TwoWire13txBufferIndexE>
    1b02:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire14txBufferLengthE>
    1b06:	08 95       	ret

00001b08 <_ZN7TwoWire15endTransmissionEh>:
    1b08:	0f 93       	push	r16
    1b0a:	06 2f       	mov	r16, r22
    1b0c:	21 e0       	ldi	r18, 0x01	; 1
    1b0e:	40 91 00 04 	lds	r20, 0x0400	; 0x800400 <_ZN7TwoWire14txBufferLengthE>
    1b12:	62 e0       	ldi	r22, 0x02	; 2
    1b14:	74 e0       	ldi	r23, 0x04	; 4
    1b16:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_ZN7TwoWire9txAddressE>
    1b1a:	2a d0       	rcall	.+84     	; 0x1b70 <twi_writeTo>
    1b1c:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZN7TwoWire13txBufferIndexE>
    1b20:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire14txBufferLengthE>
    1b24:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <_ZN7TwoWire12transmittingE>
    1b28:	0f 91       	pop	r16
    1b2a:	08 95       	ret

00001b2c <_ZN7TwoWire15endTransmissionEv>:
    1b2c:	61 e0       	ldi	r22, 0x01	; 1
    1b2e:	ec cf       	rjmp	.-40     	; 0x1b08 <_ZN7TwoWire15endTransmissionEh>

00001b30 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1b30:	8f ee       	ldi	r24, 0xEF	; 239
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	c0 cf       	rjmp	.-128    	; 0x1ab6 <_ZN7TwoWireC1Ev>

00001b36 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1b36:	08 95       	ret

00001b38 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b38:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <twi_state>
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <twi_sendStop>
    1b42:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_inRepStart>
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	84 e1       	ldi	r24, 0x14	; 20
    1b4a:	d8 dd       	rcall	.-1104   	; 0x16fc <digitalWrite>
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	85 e1       	ldi	r24, 0x15	; 21
    1b50:	d5 dd       	rcall	.-1110   	; 0x16fc <digitalWrite>
    1b52:	e9 eb       	ldi	r30, 0xB9	; 185
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8e 7f       	andi	r24, 0xFE	; 254
    1b5a:	80 83       	st	Z, r24
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8d 7f       	andi	r24, 0xFD	; 253
    1b60:	80 83       	st	Z, r24
    1b62:	88 e4       	ldi	r24, 0x48	; 72
    1b64:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1b68:	85 e4       	ldi	r24, 0x45	; 69
    1b6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b6e:	08 95       	ret

00001b70 <twi_writeTo>:
    1b70:	0f 93       	push	r16
    1b72:	41 32       	cpi	r20, 0x21	; 33
    1b74:	08 f0       	brcs	.+2      	; 0x1b78 <twi_writeTo+0x8>
    1b76:	4a c0       	rjmp	.+148    	; 0x1c0c <twi_writeTo+0x9c>
    1b78:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <twi_state>
    1b7c:	91 11       	cpse	r25, r1
    1b7e:	fc cf       	rjmp	.-8      	; 0x1b78 <twi_writeTo+0x8>
    1b80:	32 e0       	ldi	r19, 0x02	; 2
    1b82:	30 93 b2 04 	sts	0x04B2, r19	; 0x8004b2 <twi_state>
    1b86:	00 93 b0 04 	sts	0x04B0, r16	; 0x8004b0 <twi_sendStop>
    1b8a:	3f ef       	ldi	r19, 0xFF	; 255
    1b8c:	30 93 45 04 	sts	0x0445, r19	; 0x800445 <twi_error>
    1b90:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <twi_masterBufferIndex>
    1b94:	40 93 89 04 	sts	0x0489, r20	; 0x800489 <twi_masterBufferLength>
    1b98:	56 2f       	mov	r21, r22
    1b9a:	ab e8       	ldi	r26, 0x8B	; 139
    1b9c:	b4 e0       	ldi	r27, 0x04	; 4
    1b9e:	fb 01       	movw	r30, r22
    1ba0:	3e 2f       	mov	r19, r30
    1ba2:	35 1b       	sub	r19, r21
    1ba4:	34 17       	cp	r19, r20
    1ba6:	18 f4       	brcc	.+6      	; 0x1bae <twi_writeTo+0x3e>
    1ba8:	31 91       	ld	r19, Z+
    1baa:	3d 93       	st	X+, r19
    1bac:	f9 cf       	rjmp	.-14     	; 0x1ba0 <twi_writeTo+0x30>
    1bae:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <twi_slarw>
    1bb2:	30 91 b1 04 	lds	r19, 0x04B1	; 0x8004b1 <twi_slarw>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	83 2b       	or	r24, r19
    1bba:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <twi_slarw>
    1bbe:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <twi_inRepStart>
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	61 f4       	brne	.+24     	; 0x1bde <twi_writeTo+0x6e>
    1bc6:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_inRepStart>
    1bca:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <twi_slarw>
    1bce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1bd2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1bd6:	83 fd       	sbrc	r24, 3
    1bd8:	f8 cf       	rjmp	.-16     	; 0x1bca <twi_writeTo+0x5a>
    1bda:	85 ec       	ldi	r24, 0xC5	; 197
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <twi_writeTo+0x70>
    1bde:	85 ee       	ldi	r24, 0xE5	; 229
    1be0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1be4:	22 23       	and	r18, r18
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <twi_writeTo+0x80>
    1be8:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <twi_state>
    1bec:	82 30       	cpi	r24, 0x02	; 2
    1bee:	d1 f3       	breq	.-12     	; 0x1be4 <twi_writeTo+0x74>
    1bf0:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_error>
    1bf4:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf6:	79 f0       	breq	.+30     	; 0x1c16 <twi_writeTo+0xa6>
    1bf8:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_error>
    1bfc:	80 32       	cpi	r24, 0x20	; 32
    1bfe:	41 f0       	breq	.+16     	; 0x1c10 <twi_writeTo+0xa0>
    1c00:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_error>
    1c04:	80 33       	cpi	r24, 0x30	; 48
    1c06:	31 f0       	breq	.+12     	; 0x1c14 <twi_writeTo+0xa4>
    1c08:	94 e0       	ldi	r25, 0x04	; 4
    1c0a:	05 c0       	rjmp	.+10     	; 0x1c16 <twi_writeTo+0xa6>
    1c0c:	91 e0       	ldi	r25, 0x01	; 1
    1c0e:	03 c0       	rjmp	.+6      	; 0x1c16 <twi_writeTo+0xa6>
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <twi_writeTo+0xa6>
    1c14:	93 e0       	ldi	r25, 0x03	; 3
    1c16:	89 2f       	mov	r24, r25
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <twi_transmit>:
    1c1c:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <twi_txBufferLength>
    1c20:	26 2f       	mov	r18, r22
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	24 0f       	add	r18, r20
    1c26:	31 1d       	adc	r19, r1
    1c28:	21 32       	cpi	r18, 0x21	; 33
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	dc f4       	brge	.+54     	; 0x1c64 <twi_transmit+0x48>
    1c2e:	20 91 b2 04 	lds	r18, 0x04B2	; 0x8004b2 <twi_state>
    1c32:	24 30       	cpi	r18, 0x04	; 4
    1c34:	c9 f4       	brne	.+50     	; 0x1c68 <twi_transmit+0x4c>
    1c36:	fc 01       	movw	r30, r24
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	86 17       	cp	r24, r22
    1c3e:	58 f4       	brcc	.+22     	; 0x1c56 <twi_transmit+0x3a>
    1c40:	30 91 67 04 	lds	r19, 0x0467	; 0x800467 <twi_txBufferLength>
    1c44:	21 91       	ld	r18, Z+
    1c46:	dc 01       	movw	r26, r24
    1c48:	a7 59       	subi	r26, 0x97	; 151
    1c4a:	bb 4f       	sbci	r27, 0xFB	; 251
    1c4c:	a3 0f       	add	r26, r19
    1c4e:	b1 1d       	adc	r27, r1
    1c50:	2c 93       	st	X, r18
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	f3 cf       	rjmp	.-26     	; 0x1c3c <twi_transmit+0x20>
    1c56:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <twi_txBufferLength>
    1c5a:	68 0f       	add	r22, r24
    1c5c:	60 93 67 04 	sts	0x0467, r22	; 0x800467 <twi_txBufferLength>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	08 95       	ret
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	08 95       	ret
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	08 95       	ret

00001c6c <twi_attachSlaveRxEvent>:
    1c6c:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <twi_onSlaveReceive+0x1>
    1c70:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <twi_onSlaveReceive>
    1c74:	08 95       	ret

00001c76 <twi_attachSlaveTxEvent>:
    1c76:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <twi_onSlaveTransmit+0x1>
    1c7a:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <twi_onSlaveTransmit>
    1c7e:	08 95       	ret

00001c80 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1c80:	85 ed       	ldi	r24, 0xD5	; 213
    1c82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1c86:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c8a:	84 fd       	sbrc	r24, 4
    1c8c:	fc cf       	rjmp	.-8      	; 0x1c86 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1c8e:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <twi_state>
    1c92:	08 95       	ret

00001c94 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1c94:	85 ec       	ldi	r24, 0xC5	; 197
    1c96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    1c9a:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <twi_state>
    1c9e:	08 95       	ret

00001ca0 <__vector_39>:
}

ISR(TWI_vect)
{
    1ca0:	1f 92       	push	r1
    1ca2:	0f 92       	push	r0
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	0f 92       	push	r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	0b b6       	in	r0, 0x3b	; 59
    1cac:	0f 92       	push	r0
    1cae:	2f 93       	push	r18
    1cb0:	3f 93       	push	r19
    1cb2:	4f 93       	push	r20
    1cb4:	5f 93       	push	r21
    1cb6:	6f 93       	push	r22
    1cb8:	7f 93       	push	r23
    1cba:	8f 93       	push	r24
    1cbc:	9f 93       	push	r25
    1cbe:	af 93       	push	r26
    1cc0:	bf 93       	push	r27
    1cc2:	ef 93       	push	r30
    1cc4:	ff 93       	push	r31
  switch(TW_STATUS){
    1cc6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1cca:	88 7f       	andi	r24, 0xF8	; 248
    1ccc:	80 36       	cpi	r24, 0x60	; 96
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <__vector_39+0x32>
    1cd0:	9d c0       	rjmp	.+314    	; 0x1e0c <__vector_39+0x16c>
    1cd2:	70 f5       	brcc	.+92     	; 0x1d30 <__vector_39+0x90>
    1cd4:	88 32       	cpi	r24, 0x28	; 40
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <__vector_39+0x3a>
    1cd8:	5c c0       	rjmp	.+184    	; 0x1d92 <__vector_39+0xf2>
    1cda:	90 f4       	brcc	.+36     	; 0x1d00 <__vector_39+0x60>
    1cdc:	80 31       	cpi	r24, 0x10	; 16
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <__vector_39+0x42>
    1ce0:	55 c0       	rjmp	.+170    	; 0x1d8c <__vector_39+0xec>
    1ce2:	38 f4       	brcc	.+14     	; 0x1cf2 <__vector_39+0x52>
    1ce4:	88 23       	and	r24, r24
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <__vector_39+0x4a>
    1ce8:	f3 c0       	rjmp	.+486    	; 0x1ed0 <__vector_39+0x230>
    1cea:	88 30       	cpi	r24, 0x08	; 8
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <__vector_39+0x50>
    1cee:	4e c0       	rjmp	.+156    	; 0x1d8c <__vector_39+0xec>
    1cf0:	f2 c0       	rjmp	.+484    	; 0x1ed6 <__vector_39+0x236>
    1cf2:	88 31       	cpi	r24, 0x18	; 24
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <__vector_39+0x58>
    1cf6:	4d c0       	rjmp	.+154    	; 0x1d92 <__vector_39+0xf2>
    1cf8:	80 32       	cpi	r24, 0x20	; 32
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <__vector_39+0x5e>
    1cfc:	5e c0       	rjmp	.+188    	; 0x1dba <__vector_39+0x11a>
    1cfe:	eb c0       	rjmp	.+470    	; 0x1ed6 <__vector_39+0x236>
    1d00:	80 34       	cpi	r24, 0x40	; 64
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <__vector_39+0x66>
    1d04:	69 c0       	rjmp	.+210    	; 0x1dd8 <__vector_39+0x138>
    1d06:	50 f4       	brcc	.+20     	; 0x1d1c <__vector_39+0x7c>
    1d08:	80 33       	cpi	r24, 0x30	; 48
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <__vector_39+0x6e>
    1d0c:	56 c0       	rjmp	.+172    	; 0x1dba <__vector_39+0x11a>
    1d0e:	88 33       	cpi	r24, 0x38	; 56
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <__vector_39+0x74>
    1d12:	e1 c0       	rjmp	.+450    	; 0x1ed6 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1d14:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_error>
      twi_releaseBus();
    1d18:	bd df       	rcall	.-134    	; 0x1c94 <twi_releaseBus>
      break;
    1d1a:	dd c0       	rjmp	.+442    	; 0x1ed6 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d1c:	80 35       	cpi	r24, 0x50	; 80
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <__vector_39+0x82>
    1d20:	4f c0       	rjmp	.+158    	; 0x1dc0 <__vector_39+0x120>
    1d22:	88 35       	cpi	r24, 0x58	; 88
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <__vector_39+0x88>
    1d26:	5d c0       	rjmp	.+186    	; 0x1de2 <__vector_39+0x142>
    1d28:	88 34       	cpi	r24, 0x48	; 72
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <__vector_39+0x8e>
    1d2c:	d4 c0       	rjmp	.+424    	; 0x1ed6 <__vector_39+0x236>
    1d2e:	d2 c0       	rjmp	.+420    	; 0x1ed4 <__vector_39+0x234>
    1d30:	88 39       	cpi	r24, 0x98	; 152
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <__vector_39+0x96>
    1d34:	c3 c0       	rjmp	.+390    	; 0x1ebc <__vector_39+0x21c>
    1d36:	a8 f4       	brcc	.+42     	; 0x1d62 <__vector_39+0xc2>
    1d38:	88 37       	cpi	r24, 0x78	; 120
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <__vector_39+0x9e>
    1d3c:	67 c0       	rjmp	.+206    	; 0x1e0c <__vector_39+0x16c>
    1d3e:	38 f4       	brcc	.+14     	; 0x1d4e <__vector_39+0xae>
    1d40:	88 36       	cpi	r24, 0x68	; 104
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <__vector_39+0xa6>
    1d44:	63 c0       	rjmp	.+198    	; 0x1e0c <__vector_39+0x16c>
    1d46:	80 37       	cpi	r24, 0x70	; 112
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <__vector_39+0xac>
    1d4a:	60 c0       	rjmp	.+192    	; 0x1e0c <__vector_39+0x16c>
    1d4c:	c4 c0       	rjmp	.+392    	; 0x1ed6 <__vector_39+0x236>
    1d4e:	88 38       	cpi	r24, 0x88	; 136
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <__vector_39+0xb4>
    1d52:	b4 c0       	rjmp	.+360    	; 0x1ebc <__vector_39+0x21c>
    1d54:	80 39       	cpi	r24, 0x90	; 144
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <__vector_39+0xba>
    1d58:	5f c0       	rjmp	.+190    	; 0x1e18 <__vector_39+0x178>
    1d5a:	80 38       	cpi	r24, 0x80	; 128
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <__vector_39+0xc0>
    1d5e:	bb c0       	rjmp	.+374    	; 0x1ed6 <__vector_39+0x236>
    1d60:	5b c0       	rjmp	.+182    	; 0x1e18 <__vector_39+0x178>
    1d62:	80 3b       	cpi	r24, 0xB0	; 176
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <__vector_39+0xc8>
    1d66:	82 c0       	rjmp	.+260    	; 0x1e6c <__vector_39+0x1cc>
    1d68:	38 f4       	brcc	.+14     	; 0x1d78 <__vector_39+0xd8>
    1d6a:	80 3a       	cpi	r24, 0xA0	; 160
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <__vector_39+0xd0>
    1d6e:	66 c0       	rjmp	.+204    	; 0x1e3c <__vector_39+0x19c>
    1d70:	88 3a       	cpi	r24, 0xA8	; 168
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <__vector_39+0xd6>
    1d74:	7b c0       	rjmp	.+246    	; 0x1e6c <__vector_39+0x1cc>
    1d76:	af c0       	rjmp	.+350    	; 0x1ed6 <__vector_39+0x236>
    1d78:	80 3c       	cpi	r24, 0xC0	; 192
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <__vector_39+0xde>
    1d7c:	a3 c0       	rjmp	.+326    	; 0x1ec4 <__vector_39+0x224>
    1d7e:	88 3c       	cpi	r24, 0xC8	; 200
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <__vector_39+0xe4>
    1d82:	a0 c0       	rjmp	.+320    	; 0x1ec4 <__vector_39+0x224>
    1d84:	88 3b       	cpi	r24, 0xB8	; 184
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <__vector_39+0xea>
    1d88:	86 c0       	rjmp	.+268    	; 0x1e96 <__vector_39+0x1f6>
    1d8a:	a5 c0       	rjmp	.+330    	; 0x1ed6 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1d8c:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <twi_slarw>
    1d90:	10 c0       	rjmp	.+32     	; 0x1db2 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1d92:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <twi_masterBufferIndex>
    1d96:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <twi_masterBufferLength>
    1d9a:	98 17       	cp	r25, r24
    1d9c:	70 f5       	brcc	.+92     	; 0x1dfa <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1d9e:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <twi_masterBufferIndex>
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	8e 0f       	add	r24, r30
    1da6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <twi_masterBufferIndex>
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	e5 57       	subi	r30, 0x75	; 117
    1dae:	fb 4f       	sbci	r31, 0xFB	; 251
    1db0:	80 81       	ld	r24, Z
    1db2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1db6:	85 ec       	ldi	r24, 0xC5	; 197
    1db8:	82 c0       	rjmp	.+260    	; 0x1ebe <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1dba:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_error>
    1dbe:	8a c0       	rjmp	.+276    	; 0x1ed4 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1dc0:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <twi_masterBufferIndex>
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	8e 0f       	add	r24, r30
    1dc8:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <twi_masterBufferIndex>
    1dcc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	e5 57       	subi	r30, 0x75	; 117
    1dd4:	fb 4f       	sbci	r31, 0xFB	; 251
    1dd6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1dd8:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <twi_masterBufferIndex>
    1ddc:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <twi_masterBufferLength>
    1de0:	6a c0       	rjmp	.+212    	; 0x1eb6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1de2:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <twi_masterBufferIndex>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	8e 0f       	add	r24, r30
    1dea:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <twi_masterBufferIndex>
    1dee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	e5 57       	subi	r30, 0x75	; 117
    1df6:	fb 4f       	sbci	r31, 0xFB	; 251
    1df8:	80 83       	st	Z, r24
	if (twi_sendStop)
    1dfa:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_sendStop>
    1dfe:	81 11       	cpse	r24, r1
    1e00:	69 c0       	rjmp	.+210    	; 0x1ed4 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1e08:	84 ea       	ldi	r24, 0xA4	; 164
    1e0a:	5d c0       	rjmp	.+186    	; 0x1ec6 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1e0c:	83 e0       	ldi	r24, 0x03	; 3
    1e0e:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1e12:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <twi_rxBufferIndex>
    1e16:	cf cf       	rjmp	.-98     	; 0x1db6 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e18:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_rxBufferIndex>
    1e1c:	80 32       	cpi	r24, 0x20	; 32
    1e1e:	08 f0       	brcs	.+2      	; 0x1e22 <__vector_39+0x182>
    1e20:	4d c0       	rjmp	.+154    	; 0x1ebc <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1e22:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <twi_rxBufferIndex>
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	8e 0f       	add	r24, r30
    1e2a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_rxBufferIndex>
    1e2e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	e9 5b       	subi	r30, 0xB9	; 185
    1e36:	fb 4f       	sbci	r31, 0xFB	; 251
    1e38:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1e3a:	bd cf       	rjmp	.-134    	; 0x1db6 <__vector_39+0x116>
    1e3c:	2b df       	rcall	.-426    	; 0x1c94 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e3e:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_rxBufferIndex>
    1e42:	80 32       	cpi	r24, 0x20	; 32
    1e44:	30 f4       	brcc	.+12     	; 0x1e52 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1e46:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <twi_rxBufferIndex>
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	e9 5b       	subi	r30, 0xB9	; 185
    1e4e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e50:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1e52:	60 91 46 04 	lds	r22, 0x0446	; 0x800446 <twi_rxBufferIndex>
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <twi_onSlaveReceive>
    1e5c:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <twi_onSlaveReceive+0x1>
    1e60:	87 e4       	ldi	r24, 0x47	; 71
    1e62:	94 e0       	ldi	r25, 0x04	; 4
    1e64:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1e66:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <twi_rxBufferIndex>
      break;
    1e6a:	35 c0       	rjmp	.+106    	; 0x1ed6 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1e6c:	84 e0       	ldi	r24, 0x04	; 4
    1e6e:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1e72:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1e76:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1e7a:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <twi_onSlaveTransmit>
    1e7e:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <twi_onSlaveTransmit+0x1>
    1e82:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1e84:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <twi_txBufferLength>
    1e88:	81 11       	cpse	r24, r1
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1e92:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1e96:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <twi_txBufferIndex>
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	8e 0f       	add	r24, r30
    1e9e:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <twi_txBufferIndex>
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	e7 59       	subi	r30, 0x97	; 151
    1ea6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1eae:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <twi_txBufferIndex>
    1eb2:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <twi_txBufferLength>
    1eb6:	98 17       	cp	r25, r24
    1eb8:	08 f4       	brcc	.+2      	; 0x1ebc <__vector_39+0x21c>
    1eba:	7d cf       	rjmp	.-262    	; 0x1db6 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1ebc:	85 e8       	ldi	r24, 0x85	; 133
    1ebe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ec4:	85 ec       	ldi	r24, 0xC5	; 197
    1ec6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1eca:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <twi_state>
      break;
    1ece:	03 c0       	rjmp	.+6      	; 0x1ed6 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1ed0:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_error>
      twi_stop();
    1ed4:	d5 de       	rcall	.-598    	; 0x1c80 <twi_stop>
      break;
  }
}
    1ed6:	ff 91       	pop	r31
    1ed8:	ef 91       	pop	r30
    1eda:	bf 91       	pop	r27
    1edc:	af 91       	pop	r26
    1ede:	9f 91       	pop	r25
    1ee0:	8f 91       	pop	r24
    1ee2:	7f 91       	pop	r23
    1ee4:	6f 91       	pop	r22
    1ee6:	5f 91       	pop	r21
    1ee8:	4f 91       	pop	r20
    1eea:	3f 91       	pop	r19
    1eec:	2f 91       	pop	r18
    1eee:	0f 90       	pop	r0
    1ef0:	0b be       	out	0x3b, r0	; 59
    1ef2:	0f 90       	pop	r0
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	0f 90       	pop	r0
    1ef8:	1f 90       	pop	r1
    1efa:	18 95       	reti

00001efc <__udivmodsi4>:
    1efc:	a1 e2       	ldi	r26, 0x21	; 33
    1efe:	1a 2e       	mov	r1, r26
    1f00:	aa 1b       	sub	r26, r26
    1f02:	bb 1b       	sub	r27, r27
    1f04:	fd 01       	movw	r30, r26
    1f06:	0d c0       	rjmp	.+26     	; 0x1f22 <__udivmodsi4_ep>

00001f08 <__udivmodsi4_loop>:
    1f08:	aa 1f       	adc	r26, r26
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	ee 1f       	adc	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	a2 17       	cp	r26, r18
    1f12:	b3 07       	cpc	r27, r19
    1f14:	e4 07       	cpc	r30, r20
    1f16:	f5 07       	cpc	r31, r21
    1f18:	20 f0       	brcs	.+8      	; 0x1f22 <__udivmodsi4_ep>
    1f1a:	a2 1b       	sub	r26, r18
    1f1c:	b3 0b       	sbc	r27, r19
    1f1e:	e4 0b       	sbc	r30, r20
    1f20:	f5 0b       	sbc	r31, r21

00001f22 <__udivmodsi4_ep>:
    1f22:	66 1f       	adc	r22, r22
    1f24:	77 1f       	adc	r23, r23
    1f26:	88 1f       	adc	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	1a 94       	dec	r1
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <__udivmodsi4_loop>
    1f2e:	60 95       	com	r22
    1f30:	70 95       	com	r23
    1f32:	80 95       	com	r24
    1f34:	90 95       	com	r25
    1f36:	9b 01       	movw	r18, r22
    1f38:	ac 01       	movw	r20, r24
    1f3a:	bd 01       	movw	r22, r26
    1f3c:	cf 01       	movw	r24, r30
    1f3e:	08 95       	ret

00001f40 <__tablejump2__>:
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	88 1f       	adc	r24, r24
    1f46:	8b bf       	out	0x3b, r24	; 59
    1f48:	07 90       	elpm	r0, Z+
    1f4a:	f6 91       	elpm	r31, Z
    1f4c:	e0 2d       	mov	r30, r0
    1f4e:	19 94       	eijmp

00001f50 <_exit>:
    1f50:	f8 94       	cli

00001f52 <__stop_program>:
    1f52:	ff cf       	rjmp	.-2      	; 0x1f52 <__stop_program>
