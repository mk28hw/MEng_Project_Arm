
toImportToAS7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800200  00001fe2  00002076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021b  00800294  00800294  0000210a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b8  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010f45  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fb6  00000000  00000000  00013779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003765  00000000  00000000  0001672f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012c4  00000000  00000000  00019e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000037b8  00000000  00000000  0001b158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c6a  00000000  00000000  0001e910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  0002457a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c1       	rjmp	.+532    	; 0x216 <__ctors_end>
       2:	00 00       	nop
       4:	38 c1       	rjmp	.+624    	; 0x276 <__bad_interrupt>
       6:	00 00       	nop
       8:	36 c1       	rjmp	.+620    	; 0x276 <__bad_interrupt>
       a:	00 00       	nop
       c:	34 c1       	rjmp	.+616    	; 0x276 <__bad_interrupt>
       e:	00 00       	nop
      10:	32 c1       	rjmp	.+612    	; 0x276 <__bad_interrupt>
      12:	00 00       	nop
      14:	30 c1       	rjmp	.+608    	; 0x276 <__bad_interrupt>
      16:	00 00       	nop
      18:	2e c1       	rjmp	.+604    	; 0x276 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2c c1       	rjmp	.+600    	; 0x276 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2a c1       	rjmp	.+596    	; 0x276 <__bad_interrupt>
      22:	00 00       	nop
      24:	28 c1       	rjmp	.+592    	; 0x276 <__bad_interrupt>
      26:	00 00       	nop
      28:	26 c1       	rjmp	.+588    	; 0x276 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	24 c1       	rjmp	.+584    	; 0x276 <__bad_interrupt>
      2e:	00 00       	nop
      30:	22 c1       	rjmp	.+580    	; 0x276 <__bad_interrupt>
      32:	00 00       	nop
      34:	20 c1       	rjmp	.+576    	; 0x276 <__bad_interrupt>
      36:	00 00       	nop
      38:	1e c1       	rjmp	.+572    	; 0x276 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1c c1       	rjmp	.+568    	; 0x276 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1a c1       	rjmp	.+564    	; 0x276 <__bad_interrupt>
      42:	00 00       	nop
      44:	18 c1       	rjmp	.+560    	; 0x276 <__bad_interrupt>
      46:	00 00       	nop
      48:	16 c1       	rjmp	.+556    	; 0x276 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	14 c1       	rjmp	.+552    	; 0x276 <__bad_interrupt>
      4e:	00 00       	nop
      50:	12 c1       	rjmp	.+548    	; 0x276 <__bad_interrupt>
      52:	00 00       	nop
      54:	10 c1       	rjmp	.+544    	; 0x276 <__bad_interrupt>
      56:	00 00       	nop
      58:	0e c1       	rjmp	.+540    	; 0x276 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_23>
      60:	0a c1       	rjmp	.+532    	; 0x276 <__bad_interrupt>
      62:	00 00       	nop
      64:	c0 c7       	rjmp	.+3968   	; 0xfe6 <__vector_25>
      66:	00 00       	nop
      68:	f4 c7       	rjmp	.+4072   	; 0x1052 <__vector_26>
      6a:	00 00       	nop
      6c:	04 c1       	rjmp	.+520    	; 0x276 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__bad_interrupt>
      72:	00 00       	nop
      74:	00 c1       	rjmp	.+512    	; 0x276 <__bad_interrupt>
      76:	00 00       	nop
      78:	fe c0       	rjmp	.+508    	; 0x276 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fc c0       	rjmp	.+504    	; 0x276 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fa c0       	rjmp	.+500    	; 0x276 <__bad_interrupt>
      82:	00 00       	nop
      84:	f8 c0       	rjmp	.+496    	; 0x276 <__bad_interrupt>
      86:	00 00       	nop
      88:	f6 c0       	rjmp	.+492    	; 0x276 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 c0       	rjmp	.+488    	; 0x276 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__vector_36>
      94:	0c 94 be 08 	jmp	0x117c	; 0x117c <__vector_37>
      98:	ee c0       	rjmp	.+476    	; 0x276 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__vector_39>
      a0:	ea c0       	rjmp	.+468    	; 0x276 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e8 c0       	rjmp	.+464    	; 0x276 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e6 c0       	rjmp	.+460    	; 0x276 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e4 c0       	rjmp	.+456    	; 0x276 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e2 c0       	rjmp	.+452    	; 0x276 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e0 c0       	rjmp	.+448    	; 0x276 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	de c0       	rjmp	.+444    	; 0x276 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dc c0       	rjmp	.+440    	; 0x276 <__bad_interrupt>
      be:	00 00       	nop
      c0:	da c0       	rjmp	.+436    	; 0x276 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d8 c0       	rjmp	.+432    	; 0x276 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d6 c0       	rjmp	.+428    	; 0x276 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d4 c0       	rjmp	.+424    	; 0x276 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d2 c0       	rjmp	.+420    	; 0x276 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d0 c0       	rjmp	.+416    	; 0x276 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ce c0       	rjmp	.+412    	; 0x276 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cc c0       	rjmp	.+408    	; 0x276 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ca c0       	rjmp	.+404    	; 0x276 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4e 0b       	sbc	r20, r30
      e6:	51 0b       	sbc	r21, r17
      e8:	40 0b       	sbc	r20, r16
      ea:	44 0b       	sbc	r20, r20
      ec:	4a 0b       	sbc	r20, r26
      ee:	88 0b       	sbc	r24, r24
      f0:	55 0b       	sbc	r21, r21
      f2:	59 0b       	sbc	r21, r25
      f4:	5f 0b       	sbc	r21, r31
      f6:	63 0b       	sbc	r22, r19
      f8:	67 0b       	sbc	r22, r23
      fa:	6d 0b       	sbc	r22, r29
      fc:	71 0b       	sbc	r23, r17
      fe:	75 0b       	sbc	r23, r21
     100:	88 0b       	sbc	r24, r24
     102:	7b 0b       	sbc	r23, r27
     104:	7f 0b       	sbc	r23, r31
     106:	83 0b       	sbc	r24, r19

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	50 01       	movw	r10, r0
     210:	5b 08       	sbc	r5, r11
     212:	f0 08       	sbc	r15, r0
     214:	df 0d       	add	r29, r15

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	d1 e2       	ldi	r29, 0x21	; 33
     21e:	de bf       	out	0x3e, r29	; 62
     220:	cd bf       	out	0x3d, r28	; 61
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0c bf       	out	0x3c, r16	; 60

00000226 <__do_copy_data>:
     226:	12 e0       	ldi	r17, 0x02	; 2
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b2 e0       	ldi	r27, 0x02	; 2
     22c:	e2 ee       	ldi	r30, 0xE2	; 226
     22e:	ff e1       	ldi	r31, 0x1F	; 31
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	a4 39       	cpi	r26, 0x94	; 148
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	24 e0       	ldi	r18, 0x04	; 4
     242:	a4 e9       	ldi	r26, 0x94	; 148
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	af 3a       	cpi	r26, 0xAF	; 175
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>

00000250 <__do_global_ctors>:
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	cb e0       	ldi	r28, 0x0B	; 11
     254:	d1 e0       	ldi	r29, 0x01	; 1
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	06 c0       	rjmp	.+12     	; 0x266 <__do_global_ctors+0x16>
     25a:	21 97       	sbiw	r28, 0x01	; 1
     25c:	01 09       	sbc	r16, r1
     25e:	80 2f       	mov	r24, r16
     260:	fe 01       	movw	r30, r28
     262:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__tablejump2__>
     266:	c7 30       	cpi	r28, 0x07	; 7
     268:	d1 07       	cpc	r29, r17
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	08 07       	cpc	r16, r24
     26e:	a9 f7       	brne	.-22     	; 0x25a <__do_global_ctors+0xa>
     270:	e5 d7       	rcall	.+4042   	; 0x123c <main>
     272:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <_exit>

00000276 <__bad_interrupt>:
     276:	c4 ce       	rjmp	.-632    	; 0x0 <__vectors>

00000278 <_ZN14HardwareSerial5writeEi>:
  delay(20);
  while(Serial1.available()){
	Serial.println("########################");
    Serial.println(Serial1.available());
    Serial.println(Serial1.read());
    delay(1);
     278:	dc 01       	movw	r26, r24
     27a:	ed 91       	ld	r30, X+
     27c:	fc 91       	ld	r31, X
     27e:	01 90       	ld	r0, Z+
     280:	f0 81       	ld	r31, Z
     282:	e0 2d       	mov	r30, r0
     284:	19 94       	eijmp

00000286 <_Z8sumBytesPhh>:
     286:	38 2f       	mov	r19, r24
     288:	fc 01       	movw	r30, r24
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2e 2f       	mov	r18, r30
     290:	23 1b       	sub	r18, r19
     292:	26 17       	cp	r18, r22
     294:	20 f4       	brcc	.+8      	; 0x29e <_Z8sumBytesPhh+0x18>
     296:	21 91       	ld	r18, Z+
     298:	82 0f       	add	r24, r18
     29a:	91 1d       	adc	r25, r1
     29c:	f8 cf       	rjmp	.-16     	; 0x28e <_Z8sumBytesPhh+0x8>
     29e:	08 95       	ret

000002a0 <_GLOBAL__sub_I_Load_High_Byte>:
     2a0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <millis>
     2a4:	60 93 a4 02 	sts	0x02A4, r22	; 0x8002a4 <startTime>
     2a8:	70 93 a5 02 	sts	0x02A5, r23	; 0x8002a5 <startTime+0x1>
     2ac:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <startTime+0x2>
     2b0:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <startTime+0x3>
     2b4:	24 e0       	ldi	r18, 0x04	; 4
     2b6:	44 e1       	ldi	r20, 0x14	; 20
     2b8:	67 e2       	ldi	r22, 0x27	; 39
     2ba:	84 e9       	ldi	r24, 0x94	; 148
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <_ZN17LiquidCrystal_I2CC1Ehhh>

000002c2 <_Z10writeServohhPhh>:
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	f8 2e       	mov	r15, r24
     2d4:	e6 2e       	mov	r14, r22
     2d6:	6a 01       	movw	r12, r20
     2d8:	02 2f       	mov	r16, r18
     2da:	66 e0       	ldi	r22, 0x06	; 6
     2dc:	6e 0d       	add	r22, r14
     2de:	d6 2f       	mov	r29, r22
     2e0:	d2 0f       	add	r29, r18
     2e2:	62 2f       	mov	r22, r18
     2e4:	ca 01       	movw	r24, r20
     2e6:	cf df       	rcall	.-98     	; 0x286 <_Z8sumBytesPhh>
     2e8:	c8 2f       	mov	r28, r24
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 8e 0a 	call	0x151c	; 0x151c <delay>
     306:	6f ef       	ldi	r22, 0xFF	; 255
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	85 e4       	ldi	r24, 0x45	; 69
     30c:	93 e0       	ldi	r25, 0x03	; 3
     30e:	b4 df       	rcall	.-152    	; 0x278 <_ZN14HardwareSerial5writeEi>
     310:	6f ef       	ldi	r22, 0xFF	; 255
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	85 e4       	ldi	r24, 0x45	; 69
     316:	93 e0       	ldi	r25, 0x03	; 3
     318:	af df       	rcall	.-162    	; 0x278 <_ZN14HardwareSerial5writeEi>
     31a:	6f 2d       	mov	r22, r15
     31c:	85 e4       	ldi	r24, 0x45	; 69
     31e:	93 e0       	ldi	r25, 0x03	; 3
     320:	8c d5       	rcall	.+2840   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     322:	10 e0       	ldi	r17, 0x00	; 0
     324:	b8 01       	movw	r22, r16
     326:	6d 5f       	subi	r22, 0xFD	; 253
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	85 e4       	ldi	r24, 0x45	; 69
     32c:	93 e0       	ldi	r25, 0x03	; 3
     32e:	a4 df       	rcall	.-184    	; 0x278 <_ZN14HardwareSerial5writeEi>
     330:	63 e0       	ldi	r22, 0x03	; 3
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	85 e4       	ldi	r24, 0x45	; 69
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	9f df       	rcall	.-194    	; 0x278 <_ZN14HardwareSerial5writeEi>
     33a:	6e 2d       	mov	r22, r14
     33c:	85 e4       	ldi	r24, 0x45	; 69
     33e:	93 e0       	ldi	r25, 0x03	; 3
     340:	7c d5       	rcall	.+2808   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     342:	a8 01       	movw	r20, r16
     344:	b6 01       	movw	r22, r12
     346:	85 e4       	ldi	r24, 0x45	; 69
     348:	93 e0       	ldi	r25, 0x03	; 3
     34a:	82 d7       	rcall	.+3844   	; 0x1250 <_ZN5Print5writeEPKhj>
     34c:	df 0d       	add	r29, r15
     34e:	cd 0f       	add	r28, r29
     350:	c0 95       	com	r28
     352:	6c 2f       	mov	r22, r28
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	85 e4       	ldi	r24, 0x45	; 69
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	8e df       	rcall	.-228    	; 0x278 <_ZN14HardwareSerial5writeEi>
     35c:	85 e4       	ldi	r24, 0x45	; 69
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	b8 d5       	rcall	.+2928   	; 0xed2 <_ZN14HardwareSerial5flushEv>
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <delay>

0000038e <_Z9moveSpeedhii>:
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <_Z9moveSpeedhii+0x6>
     394:	1f 92       	push	r1
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	69 83       	std	Y+1, r22	; 0x01
     39c:	7a 83       	std	Y+2, r23	; 0x02
     39e:	4b 83       	std	Y+3, r20	; 0x03
     3a0:	5c 83       	std	Y+4, r21	; 0x04
     3a2:	24 e0       	ldi	r18, 0x04	; 4
     3a4:	ae 01       	movw	r20, r28
     3a6:	4f 5f       	subi	r20, 0xFF	; 255
     3a8:	5f 4f       	sbci	r21, 0xFF	; 255
     3aa:	6e e1       	ldi	r22, 0x1E	; 30
     3ac:	8a df       	rcall	.-236    	; 0x2c2 <_Z10writeServohhPhh>
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <_Z9readServohhh>:
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	c8 2f       	mov	r28, r24
     3c4:	d6 2f       	mov	r29, r22
     3c6:	14 2f       	mov	r17, r20
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 8e 0a 	call	0x151c	; 0x151c <delay>
     3e4:	6f ef       	ldi	r22, 0xFF	; 255
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	85 e4       	ldi	r24, 0x45	; 69
     3ea:	93 e0       	ldi	r25, 0x03	; 3
     3ec:	45 df       	rcall	.-374    	; 0x278 <_ZN14HardwareSerial5writeEi>
     3ee:	6f ef       	ldi	r22, 0xFF	; 255
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	85 e4       	ldi	r24, 0x45	; 69
     3f4:	93 e0       	ldi	r25, 0x03	; 3
     3f6:	40 df       	rcall	.-384    	; 0x278 <_ZN14HardwareSerial5writeEi>
     3f8:	6c 2f       	mov	r22, r28
     3fa:	85 e4       	ldi	r24, 0x45	; 69
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	1d d5       	rcall	.+2618   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     400:	64 e0       	ldi	r22, 0x04	; 4
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	85 e4       	ldi	r24, 0x45	; 69
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	37 df       	rcall	.-402    	; 0x278 <_ZN14HardwareSerial5writeEi>
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	85 e4       	ldi	r24, 0x45	; 69
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	32 df       	rcall	.-412    	; 0x278 <_ZN14HardwareSerial5writeEi>
     414:	6d 2f       	mov	r22, r29
     416:	85 e4       	ldi	r24, 0x45	; 69
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	0f d5       	rcall	.+2590   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     41c:	61 2f       	mov	r22, r17
     41e:	85 e4       	ldi	r24, 0x45	; 69
     420:	93 e0       	ldi	r25, 0x03	; 3
     422:	0b d5       	rcall	.+2582   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     424:	1a 5f       	subi	r17, 0xFA	; 250
     426:	d1 0f       	add	r29, r17
     428:	cd 0f       	add	r28, r29
     42a:	c0 95       	com	r28
     42c:	6c 2f       	mov	r22, r28
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	85 e4       	ldi	r24, 0x45	; 69
     432:	93 e0       	ldi	r25, 0x03	; 3
     434:	21 df       	rcall	.-446    	; 0x278 <_ZN14HardwareSerial5writeEi>
     436:	85 e4       	ldi	r24, 0x45	; 69
     438:	93 e0       	ldi	r25, 0x03	; 3
     43a:	4b d5       	rcall	.+2710   	; 0xed2 <_ZN14HardwareSerial5flushEv>
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <delay>

0000045e <_Z5setIDh>:
     45e:	cf 93       	push	r28
     460:	c8 2f       	mov	r28, r24
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 8e 0a 	call	0x151c	; 0x151c <delay>
     47e:	6f ef       	ldi	r22, 0xFF	; 255
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	85 e4       	ldi	r24, 0x45	; 69
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	f8 de       	rcall	.-528    	; 0x278 <_ZN14HardwareSerial5writeEi>
     488:	6f ef       	ldi	r22, 0xFF	; 255
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	85 e4       	ldi	r24, 0x45	; 69
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	f3 de       	rcall	.-538    	; 0x278 <_ZN14HardwareSerial5writeEi>
     492:	6e ef       	ldi	r22, 0xFE	; 254
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	85 e4       	ldi	r24, 0x45	; 69
     498:	93 e0       	ldi	r25, 0x03	; 3
     49a:	ee de       	rcall	.-548    	; 0x278 <_ZN14HardwareSerial5writeEi>
     49c:	64 e0       	ldi	r22, 0x04	; 4
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	85 e4       	ldi	r24, 0x45	; 69
     4a2:	93 e0       	ldi	r25, 0x03	; 3
     4a4:	e9 de       	rcall	.-558    	; 0x278 <_ZN14HardwareSerial5writeEi>
     4a6:	63 e0       	ldi	r22, 0x03	; 3
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	85 e4       	ldi	r24, 0x45	; 69
     4ac:	93 e0       	ldi	r25, 0x03	; 3
     4ae:	e4 de       	rcall	.-568    	; 0x278 <_ZN14HardwareSerial5writeEi>
     4b0:	63 e0       	ldi	r22, 0x03	; 3
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	85 e4       	ldi	r24, 0x45	; 69
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	df de       	rcall	.-578    	; 0x278 <_ZN14HardwareSerial5writeEi>
     4ba:	6c 2f       	mov	r22, r28
     4bc:	85 e4       	ldi	r24, 0x45	; 69
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	bc d4       	rcall	.+2424   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     4c2:	c8 5f       	subi	r28, 0xF8	; 248
     4c4:	c0 95       	com	r28
     4c6:	6c 2f       	mov	r22, r28
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	85 e4       	ldi	r24, 0x45	; 69
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	d4 de       	rcall	.-600    	; 0x278 <_ZN14HardwareSerial5writeEi>
     4d0:	85 e4       	ldi	r24, 0x45	; 69
     4d2:	93 e0       	ldi	r25, 0x03	; 3
     4d4:	fe d4       	rcall	.+2556   	; 0xed2 <_ZN14HardwareSerial5flushEv>
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	cf 91       	pop	r28
     4f0:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <delay>

000004f4 <_Z4turnhbi>:
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	18 2f       	mov	r17, r24
     4fc:	d4 2f       	mov	r29, r20
     4fe:	61 11       	cpse	r22, r1
     500:	02 c0       	rjmp	.+4      	; 0x506 <_Z4turnhbi+0x12>
     502:	c5 2f       	mov	r28, r21
     504:	02 c0       	rjmp	.+4      	; 0x50a <_Z4turnhbi+0x16>
     506:	c4 e0       	ldi	r28, 0x04	; 4
     508:	c5 0f       	add	r28, r21
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	83 e0       	ldi	r24, 0x03	; 3
     516:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	fc d7       	rcall	.+4088   	; 0x151c <delay>
     524:	6f ef       	ldi	r22, 0xFF	; 255
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	85 e4       	ldi	r24, 0x45	; 69
     52a:	93 e0       	ldi	r25, 0x03	; 3
     52c:	a5 de       	rcall	.-694    	; 0x278 <_ZN14HardwareSerial5writeEi>
     52e:	6f ef       	ldi	r22, 0xFF	; 255
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	85 e4       	ldi	r24, 0x45	; 69
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	a0 de       	rcall	.-704    	; 0x278 <_ZN14HardwareSerial5writeEi>
     538:	61 2f       	mov	r22, r17
     53a:	85 e4       	ldi	r24, 0x45	; 69
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	7d d4       	rcall	.+2298   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     540:	65 e0       	ldi	r22, 0x05	; 5
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	85 e4       	ldi	r24, 0x45	; 69
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	97 de       	rcall	.-722    	; 0x278 <_ZN14HardwareSerial5writeEi>
     54a:	63 e0       	ldi	r22, 0x03	; 3
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	85 e4       	ldi	r24, 0x45	; 69
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	92 de       	rcall	.-732    	; 0x278 <_ZN14HardwareSerial5writeEi>
     554:	60 e2       	ldi	r22, 0x20	; 32
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	85 e4       	ldi	r24, 0x45	; 69
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	8d de       	rcall	.-742    	; 0x278 <_ZN14HardwareSerial5writeEi>
     55e:	6d 2f       	mov	r22, r29
     560:	85 e4       	ldi	r24, 0x45	; 69
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	6a d4       	rcall	.+2260   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     566:	6c 2f       	mov	r22, r28
     568:	85 e4       	ldi	r24, 0x45	; 69
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	66 d4       	rcall	.+2252   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     56e:	18 5d       	subi	r17, 0xD8	; 216
     570:	c1 0f       	add	r28, r17
     572:	cd 0f       	add	r28, r29
     574:	6c 2f       	mov	r22, r28
     576:	60 95       	com	r22
     578:	85 e4       	ldi	r24, 0x45	; 69
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	5e d4       	rcall	.+2236   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     57e:	85 e4       	ldi	r24, 0x45	; 69
     580:	93 e0       	ldi	r25, 0x03	; 3
     582:	a7 d4       	rcall	.+2382   	; 0xed2 <_ZN14HardwareSerial5flushEv>
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	bc c7       	rjmp	.+3960   	; 0x151c <delay>

000005a4 <_Z10setEndlesshb>:
     5a4:	cf 93       	push	r28
     5a6:	c8 2f       	mov	r28, r24
     5a8:	66 23       	and	r22, r22
     5aa:	09 f4       	brne	.+2      	; 0x5ae <_Z10setEndlesshb+0xa>
     5ac:	39 c0       	rjmp	.+114    	; 0x620 <_Z10setEndlesshb+0x7c>
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	aa d7       	rcall	.+3924   	; 0x151c <delay>
     5c8:	6f ef       	ldi	r22, 0xFF	; 255
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	85 e4       	ldi	r24, 0x45	; 69
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	53 de       	rcall	.-858    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5d2:	6f ef       	ldi	r22, 0xFF	; 255
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	85 e4       	ldi	r24, 0x45	; 69
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	4e de       	rcall	.-868    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5dc:	6c 2f       	mov	r22, r28
     5de:	85 e4       	ldi	r24, 0x45	; 69
     5e0:	93 e0       	ldi	r25, 0x03	; 3
     5e2:	2b d4       	rcall	.+2134   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     5e4:	65 e0       	ldi	r22, 0x05	; 5
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	85 e4       	ldi	r24, 0x45	; 69
     5ea:	93 e0       	ldi	r25, 0x03	; 3
     5ec:	45 de       	rcall	.-886    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5ee:	63 e0       	ldi	r22, 0x03	; 3
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	85 e4       	ldi	r24, 0x45	; 69
     5f4:	93 e0       	ldi	r25, 0x03	; 3
     5f6:	40 de       	rcall	.-896    	; 0x278 <_ZN14HardwareSerial5writeEi>
     5f8:	68 e0       	ldi	r22, 0x08	; 8
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	85 e4       	ldi	r24, 0x45	; 69
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	3b de       	rcall	.-906    	; 0x278 <_ZN14HardwareSerial5writeEi>
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	85 e4       	ldi	r24, 0x45	; 69
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	18 d4       	rcall	.+2096   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	85 e4       	ldi	r24, 0x45	; 69
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	14 d4       	rcall	.+2088   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     612:	60 e1       	ldi	r22, 0x10	; 16
     614:	6c 0f       	add	r22, r28
     616:	60 95       	com	r22
     618:	85 e4       	ldi	r24, 0x45	; 69
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	0e d4       	rcall	.+2076   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     61e:	3f c0       	rjmp	.+126    	; 0x69e <_Z10setEndlesshb+0xfa>
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	66 df       	rcall	.-308    	; 0x4f4 <_Z4turnhbi>
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	6d d7       	rcall	.+3802   	; 0x151c <delay>
     642:	6f ef       	ldi	r22, 0xFF	; 255
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	85 e4       	ldi	r24, 0x45	; 69
     648:	93 e0       	ldi	r25, 0x03	; 3
     64a:	16 de       	rcall	.-980    	; 0x278 <_ZN14HardwareSerial5writeEi>
     64c:	6f ef       	ldi	r22, 0xFF	; 255
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	85 e4       	ldi	r24, 0x45	; 69
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	11 de       	rcall	.-990    	; 0x278 <_ZN14HardwareSerial5writeEi>
     656:	6c 2f       	mov	r22, r28
     658:	85 e4       	ldi	r24, 0x45	; 69
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	ee d3       	rcall	.+2012   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     65e:	65 e0       	ldi	r22, 0x05	; 5
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	85 e4       	ldi	r24, 0x45	; 69
     664:	93 e0       	ldi	r25, 0x03	; 3
     666:	08 de       	rcall	.-1008   	; 0x278 <_ZN14HardwareSerial5writeEi>
     668:	63 e0       	ldi	r22, 0x03	; 3
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	85 e4       	ldi	r24, 0x45	; 69
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	03 de       	rcall	.-1018   	; 0x278 <_ZN14HardwareSerial5writeEi>
     672:	68 e0       	ldi	r22, 0x08	; 8
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	85 e4       	ldi	r24, 0x45	; 69
     678:	93 e0       	ldi	r25, 0x03	; 3
     67a:	fe dd       	rcall	.-1028   	; 0x278 <_ZN14HardwareSerial5writeEi>
     67c:	6f ef       	ldi	r22, 0xFF	; 255
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	85 e4       	ldi	r24, 0x45	; 69
     682:	93 e0       	ldi	r25, 0x03	; 3
     684:	f9 dd       	rcall	.-1038   	; 0x278 <_ZN14HardwareSerial5writeEi>
     686:	63 e0       	ldi	r22, 0x03	; 3
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	85 e4       	ldi	r24, 0x45	; 69
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	f4 dd       	rcall	.-1048   	; 0x278 <_ZN14HardwareSerial5writeEi>
     690:	ce 5e       	subi	r28, 0xEE	; 238
     692:	c0 95       	com	r28
     694:	6c 2f       	mov	r22, r28
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	85 e4       	ldi	r24, 0x45	; 69
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	ed dd       	rcall	.-1062   	; 0x278 <_ZN14HardwareSerial5writeEi>
     69e:	85 e4       	ldi	r24, 0x45	; 69
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	17 d4       	rcall	.+2094   	; 0xed2 <_ZN14HardwareSerial5flushEv>
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	cf 91       	pop	r28
     6be:	2e c7       	rjmp	.+3676   	; 0x151c <delay>

000006c0 <_Z12setMaxTorquehi>:
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	f8 2e       	mov	r15, r24
     6cc:	8b 01       	movw	r16, r22
     6ce:	c7 2f       	mov	r28, r23
     6d0:	dd 27       	eor	r29, r29
     6d2:	c7 fd       	sbrc	r28, 7
     6d4:	da 95       	dec	r29
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	83 e0       	ldi	r24, 0x03	; 3
     6e2:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	16 d7       	rcall	.+3628   	; 0x151c <delay>
     6f0:	6f ef       	ldi	r22, 0xFF	; 255
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	85 e4       	ldi	r24, 0x45	; 69
     6f6:	93 e0       	ldi	r25, 0x03	; 3
     6f8:	bf dd       	rcall	.-1154   	; 0x278 <_ZN14HardwareSerial5writeEi>
     6fa:	6f ef       	ldi	r22, 0xFF	; 255
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	85 e4       	ldi	r24, 0x45	; 69
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	ba dd       	rcall	.-1164   	; 0x278 <_ZN14HardwareSerial5writeEi>
     704:	6f 2d       	mov	r22, r15
     706:	85 e4       	ldi	r24, 0x45	; 69
     708:	93 e0       	ldi	r25, 0x03	; 3
     70a:	97 d3       	rcall	.+1838   	; 0xe3a <_ZN14HardwareSerial5writeEh>
     70c:	65 e0       	ldi	r22, 0x05	; 5
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	85 e4       	ldi	r24, 0x45	; 69
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	b1 dd       	rcall	.-1182   	; 0x278 <_ZN14HardwareSerial5writeEi>
     716:	63 e0       	ldi	r22, 0x03	; 3
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	85 e4       	ldi	r24, 0x45	; 69
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	ac dd       	rcall	.-1192   	; 0x278 <_ZN14HardwareSerial5writeEi>
     720:	6e e0       	ldi	r22, 0x0E	; 14
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	85 e4       	ldi	r24, 0x45	; 69
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	a7 dd       	rcall	.-1202   	; 0x278 <_ZN14HardwareSerial5writeEi>
     72a:	b8 01       	movw	r22, r16
     72c:	77 27       	eor	r23, r23
     72e:	85 e4       	ldi	r24, 0x45	; 69
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	a2 dd       	rcall	.-1212   	; 0x278 <_ZN14HardwareSerial5writeEi>
     734:	be 01       	movw	r22, r28
     736:	77 27       	eor	r23, r23
     738:	85 e4       	ldi	r24, 0x45	; 69
     73a:	93 e0       	ldi	r25, 0x03	; 3
     73c:	9d dd       	rcall	.-1222   	; 0x278 <_ZN14HardwareSerial5writeEi>
     73e:	66 e1       	ldi	r22, 0x16	; 22
     740:	6f 0d       	add	r22, r15
     742:	06 0f       	add	r16, r22
     744:	c0 0f       	add	r28, r16
     746:	c0 95       	com	r28
     748:	6c 2f       	mov	r22, r28
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	85 e4       	ldi	r24, 0x45	; 69
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	93 dd       	rcall	.-1242   	; 0x278 <_ZN14HardwareSerial5writeEi>
     752:	85 e4       	ldi	r24, 0x45	; 69
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	bd d3       	rcall	.+1914   	; 0xed2 <_ZN14HardwareSerial5flushEv>
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	0e 94 c5 0b 	call	0x178a	; 0x178a <digitalWrite>
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	d0 c6       	rjmp	.+3488   	; 0x151c <delay>

0000077c <setup>:
     77c:	84 e9       	ldi	r24, 0x94	; 148
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN17LiquidCrystal_I2C4initEv>
     784:	84 e9       	ldi	r24, 0x94	; 148
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN17LiquidCrystal_I2C4initEv>
     78c:	84 e9       	ldi	r24, 0x94	; 148
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN17LiquidCrystal_I2C9backlightEv>
     794:	84 e9       	ldi	r24, 0x94	; 148
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN17LiquidCrystal_I2C5clearEv>
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	b8 d7       	rcall	.+3952   	; 0x1712 <pinMode>
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	b5 d7       	rcall	.+3946   	; 0x1712 <pinMode>
     7a8:	26 e0       	ldi	r18, 0x06	; 6
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	51 ee       	ldi	r21, 0xE1	; 225
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	88 ea       	ldi	r24, 0xA8	; 168
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	ae d3       	rcall	.+1884   	; 0xf14 <_ZN14HardwareSerial5beginEmh>
     7b8:	26 e0       	ldi	r18, 0x06	; 6
     7ba:	47 e3       	ldi	r20, 0x37	; 55
     7bc:	5f ed       	ldi	r21, 0xDF	; 223
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	85 e4       	ldi	r24, 0x45	; 69
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	a6 d3       	rcall	.+1868   	; 0xf14 <_ZN14HardwareSerial5beginEmh>
     7c8:	85 e4       	ldi	r24, 0x45	; 69
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	82 d3       	rcall	.+1796   	; 0xed2 <_ZN14HardwareSerial5flushEv>
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	e8 de       	rcall	.-560    	; 0x5a4 <_Z10setEndlesshb>
     7d4:	6f ef       	ldi	r22, 0xFF	; 255
     7d6:	73 e0       	ldi	r23, 0x03	; 3
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	72 df       	rcall	.-284    	; 0x6c0 <_Z12setMaxTorquehi>
     7dc:	4c ed       	ldi	r20, 0xDC	; 220
     7de:	55 e0       	ldi	r21, 0x05	; 5
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	d3 dd       	rcall	.-1114   	; 0x38e <_Z9moveSpeedhii>
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	84 e9       	ldi	r24, 0x94	; 148
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     7f4:	6e e1       	ldi	r22, 0x1E	; 30
     7f6:	72 e0       	ldi	r23, 0x02	; 2
     7f8:	84 e9       	ldi	r24, 0x94	; 148
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	68 d5       	rcall	.+2768   	; 0x12ce <_ZN5Print5printEPKc>
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	84 e9       	ldi	r24, 0x94	; 148
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     80a:	63 e2       	ldi	r22, 0x23	; 35
     80c:	72 e0       	ldi	r23, 0x02	; 2
     80e:	84 e9       	ldi	r24, 0x94	; 148
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	5d d5       	rcall	.+2746   	; 0x12ce <_ZN5Print5printEPKc>
     814:	42 e0       	ldi	r20, 0x02	; 2
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	84 e9       	ldi	r24, 0x94	; 148
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     820:	68 e2       	ldi	r22, 0x28	; 40
     822:	72 e0       	ldi	r23, 0x02	; 2
     824:	84 e9       	ldi	r24, 0x94	; 148
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	52 d5       	rcall	.+2724   	; 0x12ce <_ZN5Print5printEPKc>
     82a:	43 e0       	ldi	r20, 0x03	; 3
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	84 e9       	ldi	r24, 0x94	; 148
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     836:	6d e2       	ldi	r22, 0x2D	; 45
     838:	72 e0       	ldi	r23, 0x02	; 2
     83a:	84 e9       	ldi	r24, 0x94	; 148
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	47 d5       	rcall	.+2702   	; 0x12ce <_ZN5Print5printEPKc>
     840:	84 e0       	ldi	r24, 0x04	; 4
     842:	0d de       	rcall	.-998    	; 0x45e <_Z5setIDh>
     844:	62 e0       	ldi	r22, 0x02	; 2
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	67 c6       	rjmp	.+3278   	; 0x151c <delay>

0000084e <_Z12printDataLCDv>:
  }
}
void printDataLCD() {
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
	delay(10);
     860:	6a e0       	ldi	r22, 0x0A	; 10
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	59 d6       	rcall	.+3250   	; 0x151c <delay>
	int speed;
	int load;
	bool speedDirection, loadDirection;
	byte i = 0;
	
	if (Serial1.available() > 0){
     86a:	85 e4       	ldi	r24, 0x45	; 69
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	4b d2       	rcall	.+1174   	; 0xd06 <_ZN14HardwareSerial9availableEv>
     870:	18 16       	cp	r1, r24
     872:	19 06       	cpc	r1, r25
     874:	0c f0       	brlt	.+2      	; 0x878 <_Z12printDataLCDv+0x2a>
     876:	0c c1       	rjmp	.+536    	; 0xa90 <_Z12printDataLCDv+0x242>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     878:	85 e4       	ldi	r24, 0x45	; 69
     87a:	93 e0       	ldi	r25, 0x03	; 3
     87c:	5e d2       	rcall	.+1212   	; 0xd3a <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     87e:	8f 3f       	cpi	r24, 0xFF	; 255
     880:	91 05       	cpc	r25, r1
     882:	09 f0       	breq	.+2      	; 0x886 <_Z12printDataLCDv+0x38>
     884:	05 c1       	rjmp	.+522    	; 0xa90 <_Z12printDataLCDv+0x242>
     886:	85 e4       	ldi	r24, 0x45	; 69
     888:	93 e0       	ldi	r25, 0x03	; 3
     88a:	57 d2       	rcall	.+1198   	; 0xd3a <_ZN14HardwareSerial4readEv>
     88c:	8f 3f       	cpi	r24, 0xFF	; 255
     88e:	91 05       	cpc	r25, r1
     890:	09 f0       	breq	.+2      	; 0x894 <_Z12printDataLCDv+0x46>
			servoID = Serial1.read(); // servo ID
     892:	fe c0       	rjmp	.+508    	; 0xa90 <_Z12printDataLCDv+0x242>
     894:	85 e4       	ldi	r24, 0x45	; 69
     896:	93 e0       	ldi	r25, 0x03	; 3
     898:	50 d2       	rcall	.+1184   	; 0xd3a <_ZN14HardwareSerial4readEv>
			msgLength = Serial1.read(); // msg Length
     89a:	b8 2e       	mov	r11, r24
     89c:	85 e4       	ldi	r24, 0x45	; 69
     89e:	93 e0       	ldi	r25, 0x03	; 3
			Serial1.read(); // zero
     8a0:	4c d2       	rcall	.+1176   	; 0xd3a <_ZN14HardwareSerial4readEv>
     8a2:	85 e4       	ldi	r24, 0x45	; 69
     8a4:	93 e0       	ldi	r25, 0x03	; 3
			
			position = Serial1.read();
     8a6:	49 d2       	rcall	.+1170   	; 0xd3a <_ZN14HardwareSerial4readEv>
     8a8:	85 e4       	ldi	r24, 0x45	; 69
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	46 d2       	rcall	.+1164   	; 0xd3a <_ZN14HardwareSerial4readEv>
     8ae:	ec 01       	movw	r28, r24
			position = (Serial1.read() * 255) + position;
     8b0:	85 e4       	ldi	r24, 0x45	; 69
     8b2:	93 e0       	ldi	r25, 0x03	; 3
     8b4:	42 d2       	rcall	.+1156   	; 0xd3a <_ZN14HardwareSerial4readEv>
     8b6:	2f ef       	ldi	r18, 0xFF	; 255
     8b8:	ac 01       	movw	r20, r24
     8ba:	24 9f       	mul	r18, r20
     8bc:	c0 01       	movw	r24, r0
     8be:	25 9f       	mul	r18, r21
     8c0:	90 0d       	add	r25, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	7c 01       	movw	r14, r24
     8c6:	ec 0e       	add	r14, r28
     8c8:	fd 1e       	adc	r15, r29
     8ca:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <position_old>
			rotations = position_old > position ? rotations + 1 : rotations;
     8ce:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <position_old+0x1>
     8d2:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <rotations>
     8d6:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <rotations+0x1>
     8da:	e2 16       	cp	r14, r18
     8dc:	f3 06       	cpc	r15, r19
     8de:	0c f4       	brge	.+2      	; 0x8e2 <_Z12printDataLCDv+0x94>
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <rotations+0x1>
     8e6:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <rotations>
			position_old = position;
     8ea:	f0 92 a3 02 	sts	0x02A3, r15	; 0x8002a3 <position_old+0x1>
     8ee:	e0 92 a2 02 	sts	0x02A2, r14	; 0x8002a2 <position_old>
			
			//Serial.println(position);
			speed = Serial1.read();
     8f2:	85 e4       	ldi	r24, 0x45	; 69
     8f4:	93 e0       	ldi	r25, 0x03	; 3
     8f6:	21 d2       	rcall	.+1090   	; 0xd3a <_ZN14HardwareSerial4readEv>
     8f8:	8c 01       	movw	r16, r24
			speed = (Serial1.read() * 255) + speed;
     8fa:	85 e4       	ldi	r24, 0x45	; 69
     8fc:	93 e0       	ldi	r25, 0x03	; 3
     8fe:	1d d2       	rcall	.+1082   	; 0xd3a <_ZN14HardwareSerial4readEv>
     900:	df ef       	ldi	r29, 0xFF	; 255
     902:	9c 01       	movw	r18, r24
     904:	d2 9f       	mul	r29, r18
     906:	c0 01       	movw	r24, r0
     908:	d3 9f       	mul	r29, r19
     90a:	90 0d       	add	r25, r0
     90c:	11 24       	eor	r1, r1
     90e:	08 0f       	add	r16, r24
			//Serial.println(speed);
			load = Serial1.read();
     910:	19 1f       	adc	r17, r25
     912:	85 e4       	ldi	r24, 0x45	; 69
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	11 d2       	rcall	.+1058   	; 0xd3a <_ZN14HardwareSerial4readEv>
     918:	6c 01       	movw	r12, r24
			load = (Serial1.read() * 255) + load;
     91a:	85 e4       	ldi	r24, 0x45	; 69
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	0d d2       	rcall	.+1050   	; 0xd3a <_ZN14HardwareSerial4readEv>
     920:	ac 01       	movw	r20, r24
     922:	d4 9f       	mul	r29, r20
     924:	c0 01       	movw	r24, r0
     926:	d5 9f       	mul	r29, r21
     928:	90 0d       	add	r25, r0
     92a:	11 24       	eor	r1, r1
     92c:	ec 01       	movw	r28, r24
     92e:	cc 0d       	add	r28, r12
     930:	dd 1d       	adc	r29, r13
     932:	01 15       	cp	r16, r1
			//Serial.println(load);
			if (speed > 0x3FF) {
     934:	54 e0       	ldi	r21, 0x04	; 4
     936:	15 07       	cpc	r17, r21
     938:	24 f0       	brlt	.+8      	; 0x942 <_Z12printDataLCDv+0xf4>
     93a:	14 50       	subi	r17, 0x04	; 4
				speedDirection = CW;
				speed = speed - 0x400;
     93c:	cc 24       	eor	r12, r12
			//Serial.println(speed);
			load = Serial1.read();
			load = (Serial1.read() * 255) + load;
			//Serial.println(load);
			if (speed > 0x3FF) {
				speedDirection = CW;
     93e:	c3 94       	inc	r12
     940:	01 c0       	rjmp	.+2      	; 0x944 <_Z12printDataLCDv+0xf6>
				speed = speed - 0x400;
			} else {
				speedDirection = CCW;
     942:	c1 2c       	mov	r12, r1
			}
			if (load > 0x3FF) {
     944:	c1 15       	cp	r28, r1
     946:	84 e0       	ldi	r24, 0x04	; 4
     948:	d8 07       	cpc	r29, r24
     94a:	24 f0       	brlt	.+8      	; 0x954 <_Z12printDataLCDv+0x106>
				loadDirection = CW;
     94c:	d4 50       	subi	r29, 0x04	; 4
     94e:	dd 24       	eor	r13, r13
     950:	d3 94       	inc	r13
				load = load - 0x400;
				} else {
				loadDirection = CCW;
     952:	01 c0       	rjmp	.+2      	; 0x956 <_Z12printDataLCDv+0x108>
			}
			while(Serial1.available() > 0) { 
     954:	d1 2c       	mov	r13, r1
     956:	85 e4       	ldi	r24, 0x45	; 69
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	d5 d1       	rcall	.+938    	; 0xd06 <_ZN14HardwareSerial9availableEv>
     95c:	18 16       	cp	r1, r24
     95e:	19 06       	cpc	r1, r25
				//Serial.println(Serial1.read()); 
				Serial1.read();
     960:	24 f4       	brge	.+8      	; 0x96a <_Z12printDataLCDv+0x11c>
     962:	85 e4       	ldi	r24, 0x45	; 69
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	e9 d1       	rcall	.+978    	; 0xd3a <_ZN14HardwareSerial4readEv>
			}
			//Serial.println("================");
			//lcd.clear();
			lcd.setCursor(4,0);
     968:	f6 cf       	rjmp	.-20     	; 0x956 <_Z12printDataLCDv+0x108>
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	64 e0       	ldi	r22, 0x04	; 4
     96e:	84 e9       	ldi	r24, 0x94	; 148
     970:	92 e0       	ldi	r25, 0x02	; 2
			//char buffer[16];
			//sprintf(buffer, "Servo ID: %d", servoID);
			lcd.print((byte)servoID);
     972:	9f d7       	rcall	.+3902   	; 0x18b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     974:	4a e0       	ldi	r20, 0x0A	; 10
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	6b 2d       	mov	r22, r11
     97a:	84 e9       	ldi	r24, 0x94	; 148
     97c:	92 e0       	ldi	r25, 0x02	; 2
			lcd.print("  ");
     97e:	02 d5       	rcall	.+2564   	; 0x1384 <_ZN5Print5printEhi>
     980:	6d e4       	ldi	r22, 0x4D	; 77
     982:	72 e0       	ldi	r23, 0x02	; 2
     984:	84 e9       	ldi	r24, 0x94	; 148
     986:	92 e0       	ldi	r25, 0x02	; 2
			lcd.setCursor(4,1);
     988:	a2 d4       	rcall	.+2372   	; 0x12ce <_ZN5Print5printEPKc>
     98a:	41 e0       	ldi	r20, 0x01	; 1
     98c:	64 e0       	ldi	r22, 0x04	; 4
     98e:	84 e9       	ldi	r24, 0x94	; 148
     990:	92 e0       	ldi	r25, 0x02	; 2
			lcd.print((int)(position * MX_PRESENT_POSITION_DEGREE));
     992:	8f d7       	rcall	.+3870   	; 0x18b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     994:	b7 01       	movw	r22, r14
     996:	0f 2c       	mov	r0, r15
     998:	00 0c       	add	r0, r0
     99a:	88 0b       	sbc	r24, r24
     99c:	99 0b       	sbc	r25, r25
     99e:	c4 d0       	rcall	.+392    	; 0xb28 <__floatsisf>
     9a0:	28 e5       	ldi	r18, 0x58	; 88
     9a2:	39 e3       	ldi	r19, 0x39	; 57
     9a4:	44 eb       	ldi	r20, 0xB4	; 180
     9a6:	5d e3       	ldi	r21, 0x3D	; 61
     9a8:	23 d1       	rcall	.+582    	; 0xbf0 <__mulsf3>
     9aa:	8b d0       	rcall	.+278    	; 0xac2 <__fixsfsi>
     9ac:	4a e0       	ldi	r20, 0x0A	; 10
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	84 e9       	ldi	r24, 0x94	; 148
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	32 d5       	rcall	.+2660   	; 0x141a <_ZN5Print5printEii>
     9b6:	2a e0       	ldi	r18, 0x0A	; 10
     9b8:	e2 16       	cp	r14, r18
			lcd.print(position > 9 ? position > 99 ? "    " : "   " : "  ");
     9ba:	f1 04       	cpc	r15, r1
     9bc:	3c f0       	brlt	.+14     	; 0x9cc <_Z12printDataLCDv+0x17e>
     9be:	34 e6       	ldi	r19, 0x64	; 100
     9c0:	e3 16       	cp	r14, r19
     9c2:	f1 04       	cpc	r15, r1
     9c4:	34 f4       	brge	.+12     	; 0x9d2 <_Z12printDataLCDv+0x184>
     9c6:	6c e4       	ldi	r22, 0x4C	; 76
     9c8:	72 e0       	ldi	r23, 0x02	; 2
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <_Z12printDataLCDv+0x188>
     9cc:	6d e4       	ldi	r22, 0x4D	; 77
     9ce:	72 e0       	ldi	r23, 0x02	; 2
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <_Z12printDataLCDv+0x188>
     9d2:	6b e4       	ldi	r22, 0x4B	; 75
     9d4:	72 e0       	ldi	r23, 0x02	; 2
     9d6:	84 e9       	ldi	r24, 0x94	; 148
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	79 d4       	rcall	.+2290   	; 0x12ce <_ZN5Print5printEPKc>
			lcd.setCursor(10,1);
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	6a e0       	ldi	r22, 0x0A	; 10
     9e0:	84 e9       	ldi	r24, 0x94	; 148
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	66 d7       	rcall	.+3788   	; 0x18b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(rotations);
     9e6:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <rotations>
     9ea:	70 91 a1 02 	lds	r23, 0x02A1	; 0x8002a1 <rotations+0x1>
     9ee:	4a e0       	ldi	r20, 0x0A	; 10
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	84 e9       	ldi	r24, 0x94	; 148
     9f4:	92 e0       	ldi	r25, 0x02	; 2
			lcd.setCursor(4,2);
     9f6:	11 d5       	rcall	.+2594   	; 0x141a <_ZN5Print5printEii>
     9f8:	42 e0       	ldi	r20, 0x02	; 2
     9fa:	64 e0       	ldi	r22, 0x04	; 4
     9fc:	84 e9       	ldi	r24, 0x94	; 148
     9fe:	92 e0       	ldi	r25, 0x02	; 2
			lcd.print((int)(speed * MX_PRESENT_SPEED_RPM));
     a00:	58 d7       	rcall	.+3760   	; 0x18b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     a02:	b8 01       	movw	r22, r16
     a04:	11 0f       	add	r17, r17
     a06:	88 0b       	sbc	r24, r24
     a08:	99 0b       	sbc	r25, r25
     a0a:	8e d0       	rcall	.+284    	; 0xb28 <__floatsisf>
     a0c:	2e ea       	ldi	r18, 0xAE	; 174
     a0e:	37 e4       	ldi	r19, 0x47	; 71
     a10:	41 ee       	ldi	r20, 0xE1	; 225
     a12:	5d e3       	ldi	r21, 0x3D	; 61
     a14:	ed d0       	rcall	.+474    	; 0xbf0 <__mulsf3>
     a16:	55 d0       	rcall	.+170    	; 0xac2 <__fixsfsi>
     a18:	4a e0       	ldi	r20, 0x0A	; 10
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	84 e9       	ldi	r24, 0x94	; 148
     a1e:	92 e0       	ldi	r25, 0x02	; 2
			lcd.print(speedDirection ? " CW  " : " CCW  ");
     a20:	fc d4       	rcall	.+2552   	; 0x141a <_ZN5Print5printEii>
     a22:	c1 10       	cpse	r12, r1
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <_Z12printDataLCDv+0x1de>
     a26:	66 e5       	ldi	r22, 0x56	; 86
     a28:	72 e0       	ldi	r23, 0x02	; 2
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <_Z12printDataLCDv+0x1e2>
     a2c:	60 e5       	ldi	r22, 0x50	; 80
     a2e:	72 e0       	ldi	r23, 0x02	; 2
     a30:	84 e9       	ldi	r24, 0x94	; 148
     a32:	92 e0       	ldi	r25, 0x02	; 2
			lcd.setCursor(4,3);
     a34:	4c d4       	rcall	.+2200   	; 0x12ce <_ZN5Print5printEPKc>
     a36:	43 e0       	ldi	r20, 0x03	; 3
     a38:	64 e0       	ldi	r22, 0x04	; 4
     a3a:	84 e9       	ldi	r24, 0x94	; 148
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	39 d7       	rcall	.+3698   	; 0x18b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print((int)(load * MX_PRESENT_LOAD_PERCENT));
     a40:	be 01       	movw	r22, r28
     a42:	dd 0f       	add	r29, r29
     a44:	88 0b       	sbc	r24, r24
     a46:	99 0b       	sbc	r25, r25
     a48:	6f d0       	rcall	.+222    	; 0xb28 <__floatsisf>
     a4a:	2e e5       	ldi	r18, 0x5E	; 94
     a4c:	3b e4       	ldi	r19, 0x4B	; 75
     a4e:	48 ec       	ldi	r20, 0xC8	; 200
     a50:	5d e3       	ldi	r21, 0x3D	; 61
     a52:	ce d0       	rcall	.+412    	; 0xbf0 <__mulsf3>
     a54:	36 d0       	rcall	.+108    	; 0xac2 <__fixsfsi>
     a56:	4a e0       	ldi	r20, 0x0A	; 10
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	84 e9       	ldi	r24, 0x94	; 148
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	dd d4       	rcall	.+2490   	; 0x141a <_ZN5Print5printEii>
     a60:	d1 10       	cpse	r13, r1
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <_Z12printDataLCDv+0x21c>
     a64:	66 e5       	ldi	r22, 0x56	; 86
			lcd.print(loadDirection ? " CW   " : " CCW  ");
     a66:	72 e0       	ldi	r23, 0x02	; 2
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <_Z12printDataLCDv+0x220>
     a6a:	6d e5       	ldi	r22, 0x5D	; 93
     a6c:	72 e0       	ldi	r23, 0x02	; 2
     a6e:	84 e9       	ldi	r24, 0x94	; 148
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	2d d4       	rcall	.+2138   	; 0x12ce <_ZN5Print5printEPKc>
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
			delay(1);
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
		}
	}
}
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	bf 90       	pop	r11
     a8e:	46 c5       	rjmp	.+2700   	; 0x151c <delay>
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
			lcd.print((int)(speed * MX_PRESENT_SPEED_RPM));
			lcd.print(speedDirection ? " CW  " : " CCW  ");
			lcd.setCursor(4,3);
			lcd.print((int)(load * MX_PRESENT_LOAD_PERCENT));
			lcd.print(loadDirection ? " CW   " : " CCW  ");
			delay(1);
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
		}
	}
}
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	bf 90       	pop	r11
     aa2:	08 95       	ret

00000aa4 <loop>:
     aa4:	62 e0       	ldi	r22, 0x02	; 2
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	37 d5       	rcall	.+2670   	; 0x151c <delay>
	//setMaxTorque (0,1023);

	//  x =readLoad(3);
	 
	delay(2);
	readServo(4, 0x24, 6);
     aae:	46 e0       	ldi	r20, 0x06	; 6
     ab0:	64 e2       	ldi	r22, 0x24	; 36
     ab2:	84 e0       	ldi	r24, 0x04	; 4
	printDataLCD();
     ab4:	83 dc       	rcall	.-1786   	; 0x3bc <_Z9readServohhh>
     ab6:	cb de       	rcall	.-618    	; 0x84e <_Z12printDataLCDv>
	delay(200);
     ab8:	68 ec       	ldi	r22, 0xC8	; 200
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	2d c5       	rjmp	.+2650   	; 0x151c <delay>

00000ac2 <__fixsfsi>:
     ac2:	04 d0       	rcall	.+8      	; 0xacc <__fixunssfsi>
     ac4:	68 94       	set
     ac6:	b1 11       	cpse	r27, r1
     ac8:	8d c0       	rjmp	.+282    	; 0xbe4 <__fp_szero>
     aca:	08 95       	ret

00000acc <__fixunssfsi>:
     acc:	70 d0       	rcall	.+224    	; 0xbae <__fp_splitA>
     ace:	88 f0       	brcs	.+34     	; 0xaf2 <__fixunssfsi+0x26>
     ad0:	9f 57       	subi	r25, 0x7F	; 127
     ad2:	90 f0       	brcs	.+36     	; 0xaf8 <__fixunssfsi+0x2c>
     ad4:	b9 2f       	mov	r27, r25
     ad6:	99 27       	eor	r25, r25
     ad8:	b7 51       	subi	r27, 0x17	; 23
     ada:	a0 f0       	brcs	.+40     	; 0xb04 <__fixunssfsi+0x38>
     adc:	d1 f0       	breq	.+52     	; 0xb12 <__fixunssfsi+0x46>
     ade:	66 0f       	add	r22, r22
     ae0:	77 1f       	adc	r23, r23
     ae2:	88 1f       	adc	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	1a f0       	brmi	.+6      	; 0xaee <__fixunssfsi+0x22>
     ae8:	ba 95       	dec	r27
     aea:	c9 f7       	brne	.-14     	; 0xade <__fixunssfsi+0x12>
     aec:	12 c0       	rjmp	.+36     	; 0xb12 <__fixunssfsi+0x46>
     aee:	b1 30       	cpi	r27, 0x01	; 1
     af0:	81 f0       	breq	.+32     	; 0xb12 <__fixunssfsi+0x46>
     af2:	77 d0       	rcall	.+238    	; 0xbe2 <__fp_zero>
     af4:	b1 e0       	ldi	r27, 0x01	; 1
     af6:	08 95       	ret
     af8:	74 c0       	rjmp	.+232    	; 0xbe2 <__fp_zero>
     afa:	67 2f       	mov	r22, r23
     afc:	78 2f       	mov	r23, r24
     afe:	88 27       	eor	r24, r24
     b00:	b8 5f       	subi	r27, 0xF8	; 248
     b02:	39 f0       	breq	.+14     	; 0xb12 <__fixunssfsi+0x46>
     b04:	b9 3f       	cpi	r27, 0xF9	; 249
     b06:	cc f3       	brlt	.-14     	; 0xafa <__fixunssfsi+0x2e>
     b08:	86 95       	lsr	r24
     b0a:	77 95       	ror	r23
     b0c:	67 95       	ror	r22
     b0e:	b3 95       	inc	r27
     b10:	d9 f7       	brne	.-10     	; 0xb08 <__fixunssfsi+0x3c>
     b12:	3e f4       	brtc	.+14     	; 0xb22 <__fixunssfsi+0x56>
     b14:	90 95       	com	r25
     b16:	80 95       	com	r24
     b18:	70 95       	com	r23
     b1a:	61 95       	neg	r22
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	8f 4f       	sbci	r24, 0xFF	; 255
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
     b22:	08 95       	ret

00000b24 <__floatunsisf>:
     b24:	e8 94       	clt
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <__floatsisf+0x12>

00000b28 <__floatsisf>:
     b28:	97 fb       	bst	r25, 7
     b2a:	3e f4       	brtc	.+14     	; 0xb3a <__floatsisf+0x12>
     b2c:	90 95       	com	r25
     b2e:	80 95       	com	r24
     b30:	70 95       	com	r23
     b32:	61 95       	neg	r22
     b34:	7f 4f       	sbci	r23, 0xFF	; 255
     b36:	8f 4f       	sbci	r24, 0xFF	; 255
     b38:	9f 4f       	sbci	r25, 0xFF	; 255
     b3a:	99 23       	and	r25, r25
     b3c:	a9 f0       	breq	.+42     	; 0xb68 <__floatsisf+0x40>
     b3e:	f9 2f       	mov	r31, r25
     b40:	96 e9       	ldi	r25, 0x96	; 150
     b42:	bb 27       	eor	r27, r27
     b44:	93 95       	inc	r25
     b46:	f6 95       	lsr	r31
     b48:	87 95       	ror	r24
     b4a:	77 95       	ror	r23
     b4c:	67 95       	ror	r22
     b4e:	b7 95       	ror	r27
     b50:	f1 11       	cpse	r31, r1
     b52:	f8 cf       	rjmp	.-16     	; 0xb44 <__floatsisf+0x1c>
     b54:	fa f4       	brpl	.+62     	; 0xb94 <__floatsisf+0x6c>
     b56:	bb 0f       	add	r27, r27
     b58:	11 f4       	brne	.+4      	; 0xb5e <__floatsisf+0x36>
     b5a:	60 ff       	sbrs	r22, 0
     b5c:	1b c0       	rjmp	.+54     	; 0xb94 <__floatsisf+0x6c>
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	8f 4f       	sbci	r24, 0xFF	; 255
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	16 c0       	rjmp	.+44     	; 0xb94 <__floatsisf+0x6c>
     b68:	88 23       	and	r24, r24
     b6a:	11 f0       	breq	.+4      	; 0xb70 <__floatsisf+0x48>
     b6c:	96 e9       	ldi	r25, 0x96	; 150
     b6e:	11 c0       	rjmp	.+34     	; 0xb92 <__floatsisf+0x6a>
     b70:	77 23       	and	r23, r23
     b72:	21 f0       	breq	.+8      	; 0xb7c <__floatsisf+0x54>
     b74:	9e e8       	ldi	r25, 0x8E	; 142
     b76:	87 2f       	mov	r24, r23
     b78:	76 2f       	mov	r23, r22
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <__floatsisf+0x5e>
     b7c:	66 23       	and	r22, r22
     b7e:	71 f0       	breq	.+28     	; 0xb9c <__floatsisf+0x74>
     b80:	96 e8       	ldi	r25, 0x86	; 134
     b82:	86 2f       	mov	r24, r22
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	2a f0       	brmi	.+10     	; 0xb94 <__floatsisf+0x6c>
     b8a:	9a 95       	dec	r25
     b8c:	66 0f       	add	r22, r22
     b8e:	77 1f       	adc	r23, r23
     b90:	88 1f       	adc	r24, r24
     b92:	da f7       	brpl	.-10     	; 0xb8a <__floatsisf+0x62>
     b94:	88 0f       	add	r24, r24
     b96:	96 95       	lsr	r25
     b98:	87 95       	ror	r24
     b9a:	97 f9       	bld	r25, 7
     b9c:	08 95       	ret

00000b9e <__fp_split3>:
     b9e:	57 fd       	sbrc	r21, 7
     ba0:	90 58       	subi	r25, 0x80	; 128
     ba2:	44 0f       	add	r20, r20
     ba4:	55 1f       	adc	r21, r21
     ba6:	59 f0       	breq	.+22     	; 0xbbe <__fp_splitA+0x10>
     ba8:	5f 3f       	cpi	r21, 0xFF	; 255
     baa:	71 f0       	breq	.+28     	; 0xbc8 <__fp_splitA+0x1a>
     bac:	47 95       	ror	r20

00000bae <__fp_splitA>:
     bae:	88 0f       	add	r24, r24
     bb0:	97 fb       	bst	r25, 7
     bb2:	99 1f       	adc	r25, r25
     bb4:	61 f0       	breq	.+24     	; 0xbce <__fp_splitA+0x20>
     bb6:	9f 3f       	cpi	r25, 0xFF	; 255
     bb8:	79 f0       	breq	.+30     	; 0xbd8 <__fp_splitA+0x2a>
     bba:	87 95       	ror	r24
     bbc:	08 95       	ret
     bbe:	12 16       	cp	r1, r18
     bc0:	13 06       	cpc	r1, r19
     bc2:	14 06       	cpc	r1, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	f2 cf       	rjmp	.-28     	; 0xbac <__fp_split3+0xe>
     bc8:	46 95       	lsr	r20
     bca:	f1 df       	rcall	.-30     	; 0xbae <__fp_splitA>
     bcc:	08 c0       	rjmp	.+16     	; 0xbde <__fp_splitA+0x30>
     bce:	16 16       	cp	r1, r22
     bd0:	17 06       	cpc	r1, r23
     bd2:	18 06       	cpc	r1, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	f1 cf       	rjmp	.-30     	; 0xbba <__fp_splitA+0xc>
     bd8:	86 95       	lsr	r24
     bda:	71 05       	cpc	r23, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	08 94       	sec
     be0:	08 95       	ret

00000be2 <__fp_zero>:
     be2:	e8 94       	clt

00000be4 <__fp_szero>:
     be4:	bb 27       	eor	r27, r27
     be6:	66 27       	eor	r22, r22
     be8:	77 27       	eor	r23, r23
     bea:	cb 01       	movw	r24, r22
     bec:	97 f9       	bld	r25, 7
     bee:	08 95       	ret

00000bf0 <__mulsf3>:
     bf0:	0b d0       	rcall	.+22     	; 0xc08 <__mulsf3x>
     bf2:	78 c0       	rjmp	.+240    	; 0xce4 <__fp_round>
     bf4:	69 d0       	rcall	.+210    	; 0xcc8 <__fp_pscA>
     bf6:	28 f0       	brcs	.+10     	; 0xc02 <__mulsf3+0x12>
     bf8:	6e d0       	rcall	.+220    	; 0xcd6 <__fp_pscB>
     bfa:	18 f0       	brcs	.+6      	; 0xc02 <__mulsf3+0x12>
     bfc:	95 23       	and	r25, r21
     bfe:	09 f0       	breq	.+2      	; 0xc02 <__mulsf3+0x12>
     c00:	5a c0       	rjmp	.+180    	; 0xcb6 <__fp_inf>
     c02:	5f c0       	rjmp	.+190    	; 0xcc2 <__fp_nan>
     c04:	11 24       	eor	r1, r1
     c06:	ee cf       	rjmp	.-36     	; 0xbe4 <__fp_szero>

00000c08 <__mulsf3x>:
     c08:	ca df       	rcall	.-108    	; 0xb9e <__fp_split3>
     c0a:	a0 f3       	brcs	.-24     	; 0xbf4 <__mulsf3+0x4>

00000c0c <__mulsf3_pse>:
     c0c:	95 9f       	mul	r25, r21
     c0e:	d1 f3       	breq	.-12     	; 0xc04 <__mulsf3+0x14>
     c10:	95 0f       	add	r25, r21
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	55 1f       	adc	r21, r21
     c16:	62 9f       	mul	r22, r18
     c18:	f0 01       	movw	r30, r0
     c1a:	72 9f       	mul	r23, r18
     c1c:	bb 27       	eor	r27, r27
     c1e:	f0 0d       	add	r31, r0
     c20:	b1 1d       	adc	r27, r1
     c22:	63 9f       	mul	r22, r19
     c24:	aa 27       	eor	r26, r26
     c26:	f0 0d       	add	r31, r0
     c28:	b1 1d       	adc	r27, r1
     c2a:	aa 1f       	adc	r26, r26
     c2c:	64 9f       	mul	r22, r20
     c2e:	66 27       	eor	r22, r22
     c30:	b0 0d       	add	r27, r0
     c32:	a1 1d       	adc	r26, r1
     c34:	66 1f       	adc	r22, r22
     c36:	82 9f       	mul	r24, r18
     c38:	22 27       	eor	r18, r18
     c3a:	b0 0d       	add	r27, r0
     c3c:	a1 1d       	adc	r26, r1
     c3e:	62 1f       	adc	r22, r18
     c40:	73 9f       	mul	r23, r19
     c42:	b0 0d       	add	r27, r0
     c44:	a1 1d       	adc	r26, r1
     c46:	62 1f       	adc	r22, r18
     c48:	83 9f       	mul	r24, r19
     c4a:	a0 0d       	add	r26, r0
     c4c:	61 1d       	adc	r22, r1
     c4e:	22 1f       	adc	r18, r18
     c50:	74 9f       	mul	r23, r20
     c52:	33 27       	eor	r19, r19
     c54:	a0 0d       	add	r26, r0
     c56:	61 1d       	adc	r22, r1
     c58:	23 1f       	adc	r18, r19
     c5a:	84 9f       	mul	r24, r20
     c5c:	60 0d       	add	r22, r0
     c5e:	21 1d       	adc	r18, r1
     c60:	82 2f       	mov	r24, r18
     c62:	76 2f       	mov	r23, r22
     c64:	6a 2f       	mov	r22, r26
     c66:	11 24       	eor	r1, r1
     c68:	9f 57       	subi	r25, 0x7F	; 127
     c6a:	50 40       	sbci	r21, 0x00	; 0
     c6c:	8a f0       	brmi	.+34     	; 0xc90 <__mulsf3_pse+0x84>
     c6e:	e1 f0       	breq	.+56     	; 0xca8 <__mulsf3_pse+0x9c>
     c70:	88 23       	and	r24, r24
     c72:	4a f0       	brmi	.+18     	; 0xc86 <__mulsf3_pse+0x7a>
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	bb 1f       	adc	r27, r27
     c7a:	66 1f       	adc	r22, r22
     c7c:	77 1f       	adc	r23, r23
     c7e:	88 1f       	adc	r24, r24
     c80:	91 50       	subi	r25, 0x01	; 1
     c82:	50 40       	sbci	r21, 0x00	; 0
     c84:	a9 f7       	brne	.-22     	; 0xc70 <__mulsf3_pse+0x64>
     c86:	9e 3f       	cpi	r25, 0xFE	; 254
     c88:	51 05       	cpc	r21, r1
     c8a:	70 f0       	brcs	.+28     	; 0xca8 <__mulsf3_pse+0x9c>
     c8c:	14 c0       	rjmp	.+40     	; 0xcb6 <__fp_inf>
     c8e:	aa cf       	rjmp	.-172    	; 0xbe4 <__fp_szero>
     c90:	5f 3f       	cpi	r21, 0xFF	; 255
     c92:	ec f3       	brlt	.-6      	; 0xc8e <__mulsf3_pse+0x82>
     c94:	98 3e       	cpi	r25, 0xE8	; 232
     c96:	dc f3       	brlt	.-10     	; 0xc8e <__mulsf3_pse+0x82>
     c98:	86 95       	lsr	r24
     c9a:	77 95       	ror	r23
     c9c:	67 95       	ror	r22
     c9e:	b7 95       	ror	r27
     ca0:	f7 95       	ror	r31
     ca2:	e7 95       	ror	r30
     ca4:	9f 5f       	subi	r25, 0xFF	; 255
     ca6:	c1 f7       	brne	.-16     	; 0xc98 <__mulsf3_pse+0x8c>
     ca8:	fe 2b       	or	r31, r30
     caa:	88 0f       	add	r24, r24
     cac:	91 1d       	adc	r25, r1
     cae:	96 95       	lsr	r25
     cb0:	87 95       	ror	r24
     cb2:	97 f9       	bld	r25, 7
     cb4:	08 95       	ret

00000cb6 <__fp_inf>:
     cb6:	97 f9       	bld	r25, 7
     cb8:	9f 67       	ori	r25, 0x7F	; 127
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	08 95       	ret

00000cc2 <__fp_nan>:
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
     cc4:	80 ec       	ldi	r24, 0xC0	; 192
     cc6:	08 95       	ret

00000cc8 <__fp_pscA>:
     cc8:	00 24       	eor	r0, r0
     cca:	0a 94       	dec	r0
     ccc:	16 16       	cp	r1, r22
     cce:	17 06       	cpc	r1, r23
     cd0:	18 06       	cpc	r1, r24
     cd2:	09 06       	cpc	r0, r25
     cd4:	08 95       	ret

00000cd6 <__fp_pscB>:
     cd6:	00 24       	eor	r0, r0
     cd8:	0a 94       	dec	r0
     cda:	12 16       	cp	r1, r18
     cdc:	13 06       	cpc	r1, r19
     cde:	14 06       	cpc	r1, r20
     ce0:	05 06       	cpc	r0, r21
     ce2:	08 95       	ret

00000ce4 <__fp_round>:
     ce4:	09 2e       	mov	r0, r25
     ce6:	03 94       	inc	r0
     ce8:	00 0c       	add	r0, r0
     cea:	11 f4       	brne	.+4      	; 0xcf0 <__fp_round+0xc>
     cec:	88 23       	and	r24, r24
     cee:	52 f0       	brmi	.+20     	; 0xd04 <__fp_round+0x20>
     cf0:	bb 0f       	add	r27, r27
     cf2:	40 f4       	brcc	.+16     	; 0xd04 <__fp_round+0x20>
     cf4:	bf 2b       	or	r27, r31
     cf6:	11 f4       	brne	.+4      	; 0xcfc <__fp_round+0x18>
     cf8:	60 ff       	sbrs	r22, 0
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <__fp_round+0x20>
     cfc:	6f 5f       	subi	r22, 0xFF	; 255
     cfe:	7f 4f       	sbci	r23, 0xFF	; 255
     d00:	8f 4f       	sbci	r24, 0xFF	; 255
     d02:	9f 4f       	sbci	r25, 0xFF	; 255
     d04:	08 95       	ret

00000d06 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d06:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d08:	91 8d       	ldd	r25, Z+25	; 0x19
     d0a:	22 8d       	ldd	r18, Z+26	; 0x1a
     d0c:	89 2f       	mov	r24, r25
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	80 5c       	subi	r24, 0xC0	; 192
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	82 1b       	sub	r24, r18
     d16:	91 09       	sbc	r25, r1
}
     d18:	8f 73       	andi	r24, 0x3F	; 63
     d1a:	99 27       	eor	r25, r25
     d1c:	08 95       	ret

00000d1e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d1e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d20:	91 8d       	ldd	r25, Z+25	; 0x19
     d22:	82 8d       	ldd	r24, Z+26	; 0x1a
     d24:	98 17       	cp	r25, r24
     d26:	31 f0       	breq	.+12     	; 0xd34 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d28:	82 8d       	ldd	r24, Z+26	; 0x1a
     d2a:	e8 0f       	add	r30, r24
     d2c:	f1 1d       	adc	r31, r1
     d2e:	85 8d       	ldd	r24, Z+29	; 0x1d
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d38:	08 95       	ret

00000d3a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d3a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d3c:	91 8d       	ldd	r25, Z+25	; 0x19
     d3e:	82 8d       	ldd	r24, Z+26	; 0x1a
     d40:	98 17       	cp	r25, r24
     d42:	61 f0       	breq	.+24     	; 0xd5c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d44:	82 8d       	ldd	r24, Z+26	; 0x1a
     d46:	df 01       	movw	r26, r30
     d48:	a8 0f       	add	r26, r24
     d4a:	b1 1d       	adc	r27, r1
     d4c:	5d 96       	adiw	r26, 0x1d	; 29
     d4e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     d50:	92 8d       	ldd	r25, Z+26	; 0x1a
     d52:	9f 5f       	subi	r25, 0xFF	; 255
     d54:	9f 73       	andi	r25, 0x3F	; 63
     d56:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     d60:	08 95       	ret

00000d62 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     d62:	fc 01       	movw	r30, r24
     d64:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     d66:	44 8d       	ldd	r20, Z+28	; 0x1c
     d68:	25 2f       	mov	r18, r21
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	84 2f       	mov	r24, r20
     d6e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     d70:	82 1b       	sub	r24, r18
     d72:	93 0b       	sbc	r25, r19
     d74:	54 17       	cp	r21, r20
     d76:	10 f0       	brcs	.+4      	; 0xd7c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     d78:	cf 96       	adiw	r24, 0x3f	; 63
     d7a:	08 95       	ret
  return tail - head - 1;
     d7c:	01 97       	sbiw	r24, 0x01	; 1
}
     d7e:	08 95       	ret

00000d80 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d80:	82 e5       	ldi	r24, 0x52	; 82
     d82:	98 e0       	ldi	r25, 0x08	; 8
     d84:	89 2b       	or	r24, r25
     d86:	39 f0       	breq	.+14     	; 0xd96 <_Z14serialEventRunv+0x16>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	89 2b       	or	r24, r25
     d8e:	19 f0       	breq	.+6      	; 0xd96 <_Z14serialEventRunv+0x16>
     d90:	89 d1       	rcall	.+786    	; 0x10a4 <_Z17Serial0_availablev>
     d92:	81 11       	cpse	r24, r1
     d94:	24 c0       	rjmp	.+72     	; 0xdde <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     d96:	87 ee       	ldi	r24, 0xE7	; 231
     d98:	98 e0       	ldi	r25, 0x08	; 8
     d9a:	89 2b       	or	r24, r25
     d9c:	39 f0       	breq	.+14     	; 0xdac <_Z14serialEventRunv+0x2c>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	89 2b       	or	r24, r25
     da4:	19 f0       	breq	.+6      	; 0xdac <_Z14serialEventRunv+0x2c>
     da6:	13 d2       	rcall	.+1062   	; 0x11ce <_Z17Serial1_availablev>
     da8:	81 11       	cpse	r24, r1
     daa:	1c c0       	rjmp	.+56     	; 0xde4 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	89 2b       	or	r24, r25
     db2:	41 f0       	breq	.+16     	; 0xdc4 <_Z14serialEventRunv+0x44>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	89 2b       	or	r24, r25
     dba:	21 f0       	breq	.+8      	; 0xdc4 <_Z14serialEventRunv+0x44>
     dbc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dc0:	81 11       	cpse	r24, r1
     dc2:	13 c0       	rjmp	.+38     	; 0xdea <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	89 2b       	or	r24, r25
     dca:	a1 f0       	breq	.+40     	; 0xdf4 <_Z14serialEventRunv+0x74>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	89 2b       	or	r24, r25
     dd2:	81 f0       	breq	.+32     	; 0xdf4 <_Z14serialEventRunv+0x74>
     dd4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dd8:	81 11       	cpse	r24, r1
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <_Z14serialEventRunv+0x70>
     ddc:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     dde:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     de2:	d9 cf       	rjmp	.-78     	; 0xd96 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     de4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     de8:	e1 cf       	rjmp	.-62     	; 0xdac <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     dea:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dee:	ea cf       	rjmp	.-44     	; 0xdc4 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     df0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     df4:	08 95       	ret

00000df6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     df6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     df8:	84 8d       	ldd	r24, Z+28	; 0x1c
     dfa:	df 01       	movw	r26, r30
     dfc:	a8 0f       	add	r26, r24
     dfe:	b1 1d       	adc	r27, r1
     e00:	a3 5a       	subi	r26, 0xA3	; 163
     e02:	bf 4f       	sbci	r27, 0xFF	; 255
     e04:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     e06:	84 8d       	ldd	r24, Z+28	; 0x1c
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	8f 73       	andi	r24, 0x3F	; 63
     e0e:	99 27       	eor	r25, r25
     e10:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     e12:	a6 89       	ldd	r26, Z+22	; 0x16
     e14:	b7 89       	ldd	r27, Z+23	; 0x17
     e16:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     e18:	a0 89       	ldd	r26, Z+16	; 0x10
     e1a:	b1 89       	ldd	r27, Z+17	; 0x11
     e1c:	8c 91       	ld	r24, X
     e1e:	83 70       	andi	r24, 0x03	; 3
     e20:	80 64       	ori	r24, 0x40	; 64
     e22:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     e24:	93 8d       	ldd	r25, Z+27	; 0x1b
     e26:	84 8d       	ldd	r24, Z+28	; 0x1c
     e28:	98 13       	cpse	r25, r24
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     e2c:	02 88       	ldd	r0, Z+18	; 0x12
     e2e:	f3 89       	ldd	r31, Z+19	; 0x13
     e30:	e0 2d       	mov	r30, r0
     e32:	80 81       	ld	r24, Z
     e34:	8f 7d       	andi	r24, 0xDF	; 223
     e36:	80 83       	st	Z, r24
     e38:	08 95       	ret

00000e3a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	ec 01       	movw	r28, r24
  _written = true;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e50:	98 13       	cpse	r25, r24
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <_ZN14HardwareSerial5writeEh+0x24>
     e54:	e8 89       	ldd	r30, Y+16	; 0x10
     e56:	f9 89       	ldd	r31, Y+17	; 0x11
     e58:	80 81       	ld	r24, Z
     e5a:	85 fd       	sbrc	r24, 5
     e5c:	25 c0       	rjmp	.+74     	; 0xea8 <_ZN14HardwareSerial5writeEh+0x6e>
     e5e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e60:	0b 8d       	ldd	r16, Y+27	; 0x1b
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	0f 5f       	subi	r16, 0xFF	; 255
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	0f 73       	andi	r16, 0x3F	; 63
     e6a:	11 27       	eor	r17, r17
     e6c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e70:	e8 12       	cpse	r14, r24
     e72:	0b c0       	rjmp	.+22     	; 0xe8a <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	07 fc       	sbrc	r0, 7
     e78:	fa cf       	rjmp	.-12     	; 0xe6e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e7a:	e8 89       	ldd	r30, Y+16	; 0x10
     e7c:	f9 89       	ldd	r31, Y+17	; 0x11
     e7e:	80 81       	ld	r24, Z
     e80:	85 ff       	sbrs	r24, 5
     e82:	f5 cf       	rjmp	.-22     	; 0xe6e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     e84:	ce 01       	movw	r24, r28
     e86:	b7 df       	rcall	.-146    	; 0xdf6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e88:	f2 cf       	rjmp	.-28     	; 0xe6e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e8c:	fe 01       	movw	r30, r28
     e8e:	e8 0f       	add	r30, r24
     e90:	f1 1d       	adc	r31, r1
     e92:	e3 5a       	subi	r30, 0xA3	; 163
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e98:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e9a:	f8 94       	cli
    _tx_buffer_head = i;
     e9c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     e9e:	ea 89       	ldd	r30, Y+18	; 0x12
     ea0:	fb 89       	ldd	r31, Y+19	; 0x13
     ea2:	80 81       	ld	r24, Z
     ea4:	80 62       	ori	r24, 0x20	; 32
     ea6:	0a c0       	rjmp	.+20     	; 0xebc <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ea8:	9f b7       	in	r25, 0x3f	; 63
     eaa:	f8 94       	cli
      *_udr = c;
     eac:	ee 89       	ldd	r30, Y+22	; 0x16
     eae:	ff 89       	ldd	r31, Y+23	; 0x17
     eb0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     eb2:	e8 89       	ldd	r30, Y+16	; 0x10
     eb4:	f9 89       	ldd	r31, Y+17	; 0x11
     eb6:	80 81       	ld	r24, Z
     eb8:	83 70       	andi	r24, 0x03	; 3
     eba:	80 64       	ori	r24, 0x40	; 64
     ebc:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ebe:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	08 95       	ret

00000ed2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     ed8:	88 8d       	ldd	r24, Y+24	; 0x18
     eda:	88 23       	and	r24, r24
     edc:	c1 f0       	breq	.+48     	; 0xf0e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     ede:	ea 89       	ldd	r30, Y+18	; 0x12
     ee0:	fb 89       	ldd	r31, Y+19	; 0x13
     ee2:	80 81       	ld	r24, Z
     ee4:	85 fd       	sbrc	r24, 5
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <_ZN14HardwareSerial5flushEv+0x20>
     ee8:	a8 89       	ldd	r26, Y+16	; 0x10
     eea:	b9 89       	ldd	r27, Y+17	; 0x11
     eec:	8c 91       	ld	r24, X
     eee:	86 fd       	sbrc	r24, 6
     ef0:	0e c0       	rjmp	.+28     	; 0xf0e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	07 fc       	sbrc	r0, 7
     ef6:	f5 cf       	rjmp	.-22     	; 0xee2 <_ZN14HardwareSerial5flushEv+0x10>
     ef8:	80 81       	ld	r24, Z
     efa:	85 ff       	sbrs	r24, 5
     efc:	f2 cf       	rjmp	.-28     	; 0xee2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     efe:	a8 89       	ldd	r26, Y+16	; 0x10
     f00:	b9 89       	ldd	r27, Y+17	; 0x11
     f02:	8c 91       	ld	r24, X
     f04:	85 ff       	sbrs	r24, 5
     f06:	ed cf       	rjmp	.-38     	; 0xee2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     f08:	ce 01       	movw	r24, r28
     f0a:	75 df       	rcall	.-278    	; 0xdf6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f0c:	e8 cf       	rjmp	.-48     	; 0xede <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
     f24:	6a 01       	movw	r12, r20
     f26:	7b 01       	movw	r14, r22
     f28:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f2a:	e8 89       	ldd	r30, Y+16	; 0x10
     f2c:	f9 89       	ldd	r31, Y+17	; 0x11
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f32:	41 15       	cp	r20, r1
     f34:	51 4e       	sbci	r21, 0xE1	; 225
     f36:	61 05       	cpc	r22, r1
     f38:	71 05       	cpc	r23, r1
     f3a:	b1 f0       	breq	.+44     	; 0xf68 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	79 e0       	ldi	r23, 0x09	; 9
     f40:	8d e3       	ldi	r24, 0x3D	; 61
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a7 01       	movw	r20, r14
     f46:	96 01       	movw	r18, r12
     f48:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__udivmodsi4>
     f4c:	da 01       	movw	r26, r20
     f4e:	c9 01       	movw	r24, r18
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	a1 09       	sbc	r26, r1
     f54:	b1 09       	sbc	r27, r1
     f56:	b6 95       	lsr	r27
     f58:	a7 95       	ror	r26
     f5a:	97 95       	ror	r25
     f5c:	87 95       	ror	r24
     f5e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f60:	21 15       	cp	r18, r1
     f62:	80 e1       	ldi	r24, 0x10	; 16
     f64:	38 07       	cpc	r19, r24
     f66:	a8 f0       	brcs	.+42     	; 0xf92 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     f68:	e8 89       	ldd	r30, Y+16	; 0x10
     f6a:	f9 89       	ldd	r31, Y+17	; 0x11
     f6c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f6e:	60 e8       	ldi	r22, 0x80	; 128
     f70:	74 e8       	ldi	r23, 0x84	; 132
     f72:	8e e1       	ldi	r24, 0x1E	; 30
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a7 01       	movw	r20, r14
     f78:	96 01       	movw	r18, r12
     f7a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__udivmodsi4>
     f7e:	da 01       	movw	r26, r20
     f80:	c9 01       	movw	r24, r18
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	a1 09       	sbc	r26, r1
     f86:	b1 09       	sbc	r27, r1
     f88:	b6 95       	lsr	r27
     f8a:	a7 95       	ror	r26
     f8c:	97 95       	ror	r25
     f8e:	87 95       	ror	r24
     f90:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f92:	ec 85       	ldd	r30, Y+12	; 0x0c
     f94:	fd 85       	ldd	r31, Y+13	; 0x0d
     f96:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     f98:	ee 85       	ldd	r30, Y+14	; 0x0e
     f9a:	ff 85       	ldd	r31, Y+15	; 0x0f
     f9c:	20 83       	st	Z, r18

  _written = false;
     f9e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     fa0:	ec 89       	ldd	r30, Y+20	; 0x14
     fa2:	fd 89       	ldd	r31, Y+21	; 0x15
     fa4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     fa6:	ea 89       	ldd	r30, Y+18	; 0x12
     fa8:	fb 89       	ldd	r31, Y+19	; 0x13
     faa:	80 81       	ld	r24, Z
     fac:	80 61       	ori	r24, 0x10	; 16
     fae:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     fb0:	ea 89       	ldd	r30, Y+18	; 0x12
     fb2:	fb 89       	ldd	r31, Y+19	; 0x13
     fb4:	80 81       	ld	r24, Z
     fb6:	88 60       	ori	r24, 0x08	; 8
     fb8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     fba:	ea 89       	ldd	r30, Y+18	; 0x12
     fbc:	fb 89       	ldd	r31, Y+19	; 0x13
     fbe:	80 81       	ld	r24, Z
     fc0:	80 68       	ori	r24, 0x80	; 128
     fc2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     fc4:	ea 89       	ldd	r30, Y+18	; 0x12
     fc6:	fb 89       	ldd	r31, Y+19	; 0x13
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7d       	andi	r24, 0xDF	; 223
     fcc:	80 83       	st	Z, r24
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	08 95       	ret

00000fde <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	08 95       	ret

00000fe4 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     fe4:	08 95       	ret

00000fe6 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	0b b6       	in	r0, 0x3b	; 59
     ff2:	0f 92       	push	r0
     ff4:	2f 93       	push	r18
     ff6:	8f 93       	push	r24
     ff8:	9f 93       	push	r25
     ffa:	ef 93       	push	r30
     ffc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     ffe:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <Serial+0x10>
    1002:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <Serial+0x11>
    1006:	80 81       	ld	r24, Z
    1008:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <Serial+0x16>
    100c:	f0 91 bf 02 	lds	r31, 0x02BF	; 0x8002bf <Serial+0x17>
    1010:	82 fd       	sbrc	r24, 2
    1012:	12 c0       	rjmp	.+36     	; 0x1038 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1014:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1016:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <Serial+0x19>
    101a:	8f 5f       	subi	r24, 0xFF	; 255
    101c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    101e:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <Serial+0x1a>
    1022:	82 17       	cp	r24, r18
    1024:	51 f0       	breq	.+20     	; 0x103a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1026:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <Serial+0x19>
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	e8 55       	subi	r30, 0x58	; 88
    102e:	fd 4f       	sbci	r31, 0xFD	; 253
    1030:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1032:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <Serial+0x19>
    1036:	01 c0       	rjmp	.+2      	; 0x103a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1038:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0b be       	out	0x3b, r0	; 59
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	0b b6       	in	r0, 0x3b	; 59
    105e:	0f 92       	push	r0
    1060:	2f 93       	push	r18
    1062:	3f 93       	push	r19
    1064:	4f 93       	push	r20
    1066:	5f 93       	push	r21
    1068:	6f 93       	push	r22
    106a:	7f 93       	push	r23
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
    1070:	af 93       	push	r26
    1072:	bf 93       	push	r27
    1074:	ef 93       	push	r30
    1076:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1078:	88 ea       	ldi	r24, 0xA8	; 168
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	bc de       	rcall	.-648    	; 0xdf6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    107e:	ff 91       	pop	r31
    1080:	ef 91       	pop	r30
    1082:	bf 91       	pop	r27
    1084:	af 91       	pop	r26
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	7f 91       	pop	r23
    108c:	6f 91       	pop	r22
    108e:	5f 91       	pop	r21
    1090:	4f 91       	pop	r20
    1092:	3f 91       	pop	r19
    1094:	2f 91       	pop	r18
    1096:	0f 90       	pop	r0
    1098:	0b be       	out	0x3b, r0	; 59
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    10a4:	88 ea       	ldi	r24, 0xA8	; 168
    10a6:	92 e0       	ldi	r25, 0x02	; 2
    10a8:	2e de       	rcall	.-932    	; 0xd06 <_ZN14HardwareSerial9availableEv>
    10aa:	21 e0       	ldi	r18, 0x01	; 1
    10ac:	89 2b       	or	r24, r25
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <_Z17Serial0_availablev+0xe>
    10b0:	20 e0       	ldi	r18, 0x00	; 0
}
    10b2:	82 2f       	mov	r24, r18
    10b4:	08 95       	ret

000010b6 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    10b6:	e8 ea       	ldi	r30, 0xA8	; 168
    10b8:	f2 e0       	ldi	r31, 0x02	; 2
    10ba:	13 82       	std	Z+3, r1	; 0x03
    10bc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    10be:	88 ee       	ldi	r24, 0xE8	; 232
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	84 83       	std	Z+4, r24	; 0x04
    10c8:	95 83       	std	Z+5, r25	; 0x05
    10ca:	a6 83       	std	Z+6, r26	; 0x06
    10cc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    10ce:	88 e6       	ldi	r24, 0x68	; 104
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
    10d6:	85 ec       	ldi	r24, 0xC5	; 197
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	95 87       	std	Z+13, r25	; 0x0d
    10dc:	84 87       	std	Z+12, r24	; 0x0c
    10de:	84 ec       	ldi	r24, 0xC4	; 196
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	97 87       	std	Z+15, r25	; 0x0f
    10e4:	86 87       	std	Z+14, r24	; 0x0e
    10e6:	80 ec       	ldi	r24, 0xC0	; 192
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	91 8b       	std	Z+17, r25	; 0x11
    10ec:	80 8b       	std	Z+16, r24	; 0x10
    10ee:	81 ec       	ldi	r24, 0xC1	; 193
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	93 8b       	std	Z+19, r25	; 0x13
    10f4:	82 8b       	std	Z+18, r24	; 0x12
    10f6:	82 ec       	ldi	r24, 0xC2	; 194
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	95 8b       	std	Z+21, r25	; 0x15
    10fc:	84 8b       	std	Z+20, r24	; 0x14
    10fe:	86 ec       	ldi	r24, 0xC6	; 198
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	97 8b       	std	Z+23, r25	; 0x17
    1104:	86 8b       	std	Z+22, r24	; 0x16
    1106:	11 8e       	std	Z+25, r1	; 0x19
    1108:	12 8e       	std	Z+26, r1	; 0x1a
    110a:	13 8e       	std	Z+27, r1	; 0x1b
    110c:	14 8e       	std	Z+28, r1	; 0x1c
    110e:	08 95       	ret

00001110 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1110:	1f 92       	push	r1
    1112:	0f 92       	push	r0
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	0f 92       	push	r0
    1118:	11 24       	eor	r1, r1
    111a:	0b b6       	in	r0, 0x3b	; 59
    111c:	0f 92       	push	r0
    111e:	2f 93       	push	r18
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1128:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <Serial1+0x10>
    112c:	f0 91 56 03 	lds	r31, 0x0356	; 0x800356 <Serial1+0x11>
    1130:	80 81       	ld	r24, Z
    1132:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <Serial1+0x16>
    1136:	f0 91 5c 03 	lds	r31, 0x035C	; 0x80035c <Serial1+0x17>
    113a:	82 fd       	sbrc	r24, 2
    113c:	12 c0       	rjmp	.+36     	; 0x1162 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    113e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1140:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <Serial1+0x19>
    1144:	8f 5f       	subi	r24, 0xFF	; 255
    1146:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1148:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <Serial1+0x1a>
    114c:	82 17       	cp	r24, r18
    114e:	51 f0       	breq	.+20     	; 0x1164 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1150:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <Serial1+0x19>
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	eb 5b       	subi	r30, 0xBB	; 187
    1158:	fc 4f       	sbci	r31, 0xFC	; 252
    115a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    115c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <Serial1+0x19>
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1162:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0b be       	out	0x3b, r0	; 59
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    117c:	1f 92       	push	r1
    117e:	0f 92       	push	r0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	0f 92       	push	r0
    1184:	11 24       	eor	r1, r1
    1186:	0b b6       	in	r0, 0x3b	; 59
    1188:	0f 92       	push	r0
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    11a2:	85 e4       	ldi	r24, 0x45	; 69
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	27 de       	rcall	.-946    	; 0xdf6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    11a8:	ff 91       	pop	r31
    11aa:	ef 91       	pop	r30
    11ac:	bf 91       	pop	r27
    11ae:	af 91       	pop	r26
    11b0:	9f 91       	pop	r25
    11b2:	8f 91       	pop	r24
    11b4:	7f 91       	pop	r23
    11b6:	6f 91       	pop	r22
    11b8:	5f 91       	pop	r21
    11ba:	4f 91       	pop	r20
    11bc:	3f 91       	pop	r19
    11be:	2f 91       	pop	r18
    11c0:	0f 90       	pop	r0
    11c2:	0b be       	out	0x3b, r0	; 59
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    11ce:	85 e4       	ldi	r24, 0x45	; 69
    11d0:	93 e0       	ldi	r25, 0x03	; 3
    11d2:	99 dd       	rcall	.-1230   	; 0xd06 <_ZN14HardwareSerial9availableEv>
    11d4:	21 e0       	ldi	r18, 0x01	; 1
    11d6:	89 2b       	or	r24, r25
    11d8:	09 f4       	brne	.+2      	; 0x11dc <_Z17Serial1_availablev+0xe>
    11da:	20 e0       	ldi	r18, 0x00	; 0
}
    11dc:	82 2f       	mov	r24, r18
    11de:	08 95       	ret

000011e0 <_GLOBAL__sub_I___vector_36>:
    11e0:	e5 e4       	ldi	r30, 0x45	; 69
    11e2:	f3 e0       	ldi	r31, 0x03	; 3
    11e4:	13 82       	std	Z+3, r1	; 0x03
    11e6:	12 82       	std	Z+2, r1	; 0x02
    11e8:	88 ee       	ldi	r24, 0xE8	; 232
    11ea:	93 e0       	ldi	r25, 0x03	; 3
    11ec:	a0 e0       	ldi	r26, 0x00	; 0
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	84 83       	std	Z+4, r24	; 0x04
    11f2:	95 83       	std	Z+5, r25	; 0x05
    11f4:	a6 83       	std	Z+6, r26	; 0x06
    11f6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    11f8:	88 e6       	ldi	r24, 0x68	; 104
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
    1200:	8d ec       	ldi	r24, 0xCD	; 205
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	95 87       	std	Z+13, r25	; 0x0d
    1206:	84 87       	std	Z+12, r24	; 0x0c
    1208:	8c ec       	ldi	r24, 0xCC	; 204
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	97 87       	std	Z+15, r25	; 0x0f
    120e:	86 87       	std	Z+14, r24	; 0x0e
    1210:	88 ec       	ldi	r24, 0xC8	; 200
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	91 8b       	std	Z+17, r25	; 0x11
    1216:	80 8b       	std	Z+16, r24	; 0x10
    1218:	89 ec       	ldi	r24, 0xC9	; 201
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	93 8b       	std	Z+19, r25	; 0x13
    121e:	82 8b       	std	Z+18, r24	; 0x12
    1220:	8a ec       	ldi	r24, 0xCA	; 202
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	95 8b       	std	Z+21, r25	; 0x15
    1226:	84 8b       	std	Z+20, r24	; 0x14
    1228:	8e ec       	ldi	r24, 0xCE	; 206
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	97 8b       	std	Z+23, r25	; 0x17
    122e:	86 8b       	std	Z+22, r24	; 0x16
    1230:	11 8e       	std	Z+25, r1	; 0x19
    1232:	12 8e       	std	Z+26, r1	; 0x1a
    1234:	13 8e       	std	Z+27, r1	; 0x1b
    1236:	14 8e       	std	Z+28, r1	; 0x1c
    1238:	08 95       	ret

0000123a <initVariant>:
    123a:	08 95       	ret

0000123c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    123c:	b3 d1       	rcall	.+870    	; 0x15a4 <init>

	initVariant();
    123e:	fd df       	rcall	.-6      	; 0x123a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1240:	9d da       	rcall	.-2758   	; 0x77c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1242:	c0 ec       	ldi	r28, 0xC0	; 192
    1244:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1246:	2e dc       	rcall	.-1956   	; 0xaa4 <loop>
		if (serialEventRun) serialEventRun();
    1248:	20 97       	sbiw	r28, 0x00	; 0
    124a:	e9 f3       	breq	.-6      	; 0x1246 <main+0xa>
    124c:	99 dd       	rcall	.-1230   	; 0xd80 <_Z14serialEventRunv>
    124e:	fb cf       	rjmp	.-10     	; 0x1246 <main+0xa>

00001250 <_ZN5Print5writeEPKhj>:
    1250:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	6c 01       	movw	r12, r24
    1262:	7a 01       	movw	r14, r20
    1264:	8b 01       	movw	r16, r22
    1266:	c0 e0       	ldi	r28, 0x00	; 0
    1268:	d0 e0       	ldi	r29, 0x00	; 0
    126a:	ce 15       	cp	r28, r14
    126c:	df 05       	cpc	r29, r15
    126e:	81 f0       	breq	.+32     	; 0x1290 <_ZN5Print5writeEPKhj+0x40>
    1270:	d8 01       	movw	r26, r16
    1272:	6d 91       	ld	r22, X+
    1274:	8d 01       	movw	r16, r26
    1276:	d6 01       	movw	r26, r12
    1278:	ed 91       	ld	r30, X+
    127a:	fc 91       	ld	r31, X
    127c:	01 90       	ld	r0, Z+
    127e:	f0 81       	ld	r31, Z
    1280:	e0 2d       	mov	r30, r0
    1282:	c6 01       	movw	r24, r12
    1284:	19 95       	eicall
    1286:	89 2b       	or	r24, r25
    1288:	11 f0       	breq	.+4      	; 0x128e <_ZN5Print5writeEPKhj+0x3e>
    128a:	21 96       	adiw	r28, 0x01	; 1
    128c:	ee cf       	rjmp	.-36     	; 0x126a <_ZN5Print5writeEPKhj+0x1a>
    128e:	7e 01       	movw	r14, r28
    1290:	c7 01       	movw	r24, r14
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	08 95       	ret

000012a4 <_ZN5Print5writeEPKc>:
    12a4:	61 15       	cp	r22, r1
    12a6:	71 05       	cpc	r23, r1
    12a8:	79 f0       	breq	.+30     	; 0x12c8 <_ZN5Print5writeEPKc+0x24>
    12aa:	fb 01       	movw	r30, r22
    12ac:	01 90       	ld	r0, Z+
    12ae:	00 20       	and	r0, r0
    12b0:	e9 f7       	brne	.-6      	; 0x12ac <_ZN5Print5writeEPKc+0x8>
    12b2:	31 97       	sbiw	r30, 0x01	; 1
    12b4:	af 01       	movw	r20, r30
    12b6:	46 1b       	sub	r20, r22
    12b8:	57 0b       	sbc	r21, r23
    12ba:	dc 01       	movw	r26, r24
    12bc:	ed 91       	ld	r30, X+
    12be:	fc 91       	ld	r31, X
    12c0:	02 80       	ldd	r0, Z+2	; 0x02
    12c2:	f3 81       	ldd	r31, Z+3	; 0x03
    12c4:	e0 2d       	mov	r30, r0
    12c6:	19 94       	eijmp
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	08 95       	ret

000012ce <_ZN5Print5printEPKc>:
    12ce:	ea cf       	rjmp	.-44     	; 0x12a4 <_ZN5Print5writeEPKc>

000012d0 <_ZN5Print5printEc>:
    12d0:	dc 01       	movw	r26, r24
    12d2:	ed 91       	ld	r30, X+
    12d4:	fc 91       	ld	r31, X
    12d6:	01 90       	ld	r0, Z+
    12d8:	f0 81       	ld	r31, Z
    12da:	e0 2d       	mov	r30, r0
    12dc:	19 94       	eijmp

000012de <_ZN5Print11printNumberEmh>:
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	a1 97       	sbiw	r28, 0x21	; 33
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	7c 01       	movw	r14, r24
    1304:	fa 01       	movw	r30, r20
    1306:	cb 01       	movw	r24, r22
    1308:	19 a2       	std	Y+33, r1	; 0x21
    130a:	22 30       	cpi	r18, 0x02	; 2
    130c:	08 f4       	brcc	.+2      	; 0x1310 <_ZN5Print11printNumberEmh+0x32>
    130e:	2a e0       	ldi	r18, 0x0A	; 10
    1310:	8e 01       	movw	r16, r28
    1312:	0f 5d       	subi	r16, 0xDF	; 223
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	82 2e       	mov	r8, r18
    1318:	91 2c       	mov	r9, r1
    131a:	a1 2c       	mov	r10, r1
    131c:	b1 2c       	mov	r11, r1
    131e:	bf 01       	movw	r22, r30
    1320:	a5 01       	movw	r20, r10
    1322:	94 01       	movw	r18, r8
    1324:	32 d6       	rcall	.+3172   	; 0x1f8a <__udivmodsi4>
    1326:	f9 01       	movw	r30, r18
    1328:	ca 01       	movw	r24, r20
    132a:	01 50       	subi	r16, 0x01	; 1
    132c:	11 09       	sbc	r17, r1
    132e:	6a 30       	cpi	r22, 0x0A	; 10
    1330:	10 f4       	brcc	.+4      	; 0x1336 <_ZN5Print11printNumberEmh+0x58>
    1332:	60 5d       	subi	r22, 0xD0	; 208
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <_ZN5Print11printNumberEmh+0x5a>
    1336:	69 5c       	subi	r22, 0xC9	; 201
    1338:	d8 01       	movw	r26, r16
    133a:	6c 93       	st	X, r22
    133c:	23 2b       	or	r18, r19
    133e:	24 2b       	or	r18, r20
    1340:	25 2b       	or	r18, r21
    1342:	69 f7       	brne	.-38     	; 0x131e <_ZN5Print11printNumberEmh+0x40>
    1344:	b8 01       	movw	r22, r16
    1346:	c7 01       	movw	r24, r14
    1348:	ad df       	rcall	.-166    	; 0x12a4 <_ZN5Print5writeEPKc>
    134a:	a1 96       	adiw	r28, 0x21	; 33
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	bf 90       	pop	r11
    1364:	af 90       	pop	r10
    1366:	9f 90       	pop	r9
    1368:	8f 90       	pop	r8
    136a:	08 95       	ret

0000136c <_ZN5Print5printEmi>:
    136c:	21 15       	cp	r18, r1
    136e:	31 05       	cpc	r19, r1
    1370:	41 f4       	brne	.+16     	; 0x1382 <_ZN5Print5printEmi+0x16>
    1372:	dc 01       	movw	r26, r24
    1374:	ed 91       	ld	r30, X+
    1376:	fc 91       	ld	r31, X
    1378:	01 90       	ld	r0, Z+
    137a:	f0 81       	ld	r31, Z
    137c:	e0 2d       	mov	r30, r0
    137e:	64 2f       	mov	r22, r20
    1380:	19 94       	eijmp
    1382:	ad cf       	rjmp	.-166    	; 0x12de <_ZN5Print11printNumberEmh>

00001384 <_ZN5Print5printEhi>:
    1384:	9a 01       	movw	r18, r20
    1386:	46 2f       	mov	r20, r22
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	ee cf       	rjmp	.-36     	; 0x136c <_ZN5Print5printEmi>

00001390 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1390:	cf 92       	push	r12
    1392:	df 92       	push	r13
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
  if (base == 0) {
    13a0:	21 15       	cp	r18, r1
    13a2:	31 05       	cpc	r19, r1
    13a4:	81 f4       	brne	.+32     	; 0x13c6 <_ZN5Print5printEli+0x36>
    return write(n);
    13a6:	dc 01       	movw	r26, r24
    13a8:	ed 91       	ld	r30, X+
    13aa:	fc 91       	ld	r31, X
    13ac:	01 90       	ld	r0, Z+
    13ae:	f0 81       	ld	r31, Z
    13b0:	e0 2d       	mov	r30, r0
    13b2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    13c4:	19 94       	eijmp
  } else if (base == 10) {
    13c6:	2a 30       	cpi	r18, 0x0A	; 10
    13c8:	31 05       	cpc	r19, r1
    13ca:	f1 f4       	brne	.+60     	; 0x1408 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    13cc:	77 ff       	sbrs	r23, 7
    13ce:	1b c0       	rjmp	.+54     	; 0x1406 <_ZN5Print5printEli+0x76>
    13d0:	6a 01       	movw	r12, r20
    13d2:	7b 01       	movw	r14, r22
    13d4:	ec 01       	movw	r28, r24
      int t = print('-');
    13d6:	6d e2       	ldi	r22, 0x2D	; 45
    13d8:	7b df       	rcall	.-266    	; 0x12d0 <_ZN5Print5printEc>
    13da:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    13dc:	44 27       	eor	r20, r20
    13de:	55 27       	eor	r21, r21
    13e0:	ba 01       	movw	r22, r20
    13e2:	4c 19       	sub	r20, r12
    13e4:	5d 09       	sbc	r21, r13
    13e6:	6e 09       	sbc	r22, r14
    13e8:	7f 09       	sbc	r23, r15
    13ea:	2a e0       	ldi	r18, 0x0A	; 10
    13ec:	ce 01       	movw	r24, r28
    13ee:	77 df       	rcall	.-274    	; 0x12de <_ZN5Print11printNumberEmh>
    13f0:	80 0f       	add	r24, r16
    13f2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1406:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1416:	cf 90       	pop	r12
    1418:	62 cf       	rjmp	.-316    	; 0x12de <_ZN5Print11printNumberEmh>

0000141a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    141a:	9a 01       	movw	r18, r20
  return print((long) n, base);
    141c:	ab 01       	movw	r20, r22
    141e:	77 0f       	add	r23, r23
    1420:	66 0b       	sbc	r22, r22
    1422:	77 0b       	sbc	r23, r23
    1424:	b5 cf       	rjmp	.-150    	; 0x1390 <_ZN5Print5printEli>

00001426 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	8f 93       	push	r24
    1436:	9f 93       	push	r25
    1438:	af 93       	push	r26
    143a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    143c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <timer0_millis>
    1440:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <timer0_millis+0x1>
    1444:	a0 91 e5 03 	lds	r26, 0x03E5	; 0x8003e5 <timer0_millis+0x2>
    1448:	b0 91 e6 03 	lds	r27, 0x03E6	; 0x8003e6 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    144c:	30 91 e2 03 	lds	r19, 0x03E2	; 0x8003e2 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1450:	23 e0       	ldi	r18, 0x03	; 3
    1452:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1454:	2d 37       	cpi	r18, 0x7D	; 125
    1456:	20 f4       	brcc	.+8      	; 0x1460 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	a1 1d       	adc	r26, r1
    145c:	b1 1d       	adc	r27, r1
    145e:	05 c0       	rjmp	.+10     	; 0x146a <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1460:	26 e8       	ldi	r18, 0x86	; 134
    1462:	23 0f       	add	r18, r19
		m += 1;
    1464:	02 96       	adiw	r24, 0x02	; 2
    1466:	a1 1d       	adc	r26, r1
    1468:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    146a:	20 93 e2 03 	sts	0x03E2, r18	; 0x8003e2 <timer0_fract>
	timer0_millis = m;
    146e:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <timer0_millis>
    1472:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <timer0_millis+0x1>
    1476:	a0 93 e5 03 	sts	0x03E5, r26	; 0x8003e5 <timer0_millis+0x2>
    147a:	b0 93 e6 03 	sts	0x03E6, r27	; 0x8003e6 <timer0_millis+0x3>
	timer0_overflow_count++;
    147e:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <timer0_overflow_count>
    1482:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <timer0_overflow_count+0x1>
    1486:	a0 91 e9 03 	lds	r26, 0x03E9	; 0x8003e9 <timer0_overflow_count+0x2>
    148a:	b0 91 ea 03 	lds	r27, 0x03EA	; 0x8003ea <timer0_overflow_count+0x3>
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	a1 1d       	adc	r26, r1
    1492:	b1 1d       	adc	r27, r1
    1494:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <timer0_overflow_count>
    1498:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <timer0_overflow_count+0x1>
    149c:	a0 93 e9 03 	sts	0x03E9, r26	; 0x8003e9 <timer0_overflow_count+0x2>
    14a0:	b0 93 ea 03 	sts	0x03EA, r27	; 0x8003ea <timer0_overflow_count+0x3>
}
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	3f 91       	pop	r19
    14ae:	2f 91       	pop	r18
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f 90       	pop	r0
    14b6:	1f 90       	pop	r1
    14b8:	18 95       	reti

000014ba <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    14ba:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    14bc:	f8 94       	cli
	m = timer0_millis;
    14be:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <timer0_millis>
    14c2:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <timer0_millis+0x1>
    14c6:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <timer0_millis+0x2>
    14ca:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <timer0_millis+0x3>
	SREG = oldSREG;
    14ce:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    14d0:	08 95       	ret

000014d2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    14d2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    14d4:	f8 94       	cli
	m = timer0_overflow_count;
    14d6:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <timer0_overflow_count>
    14da:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <timer0_overflow_count+0x1>
    14de:	a0 91 e9 03 	lds	r26, 0x03E9	; 0x8003e9 <timer0_overflow_count+0x2>
    14e2:	b0 91 ea 03 	lds	r27, 0x03EA	; 0x8003ea <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    14e6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    14e8:	a8 9b       	sbis	0x15, 0	; 21
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <micros+0x24>
    14ec:	2f 3f       	cpi	r18, 0xFF	; 255
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <micros+0x24>
		m++;
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	a1 1d       	adc	r26, r1
    14f4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    14f6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    14f8:	ba 2f       	mov	r27, r26
    14fa:	a9 2f       	mov	r26, r25
    14fc:	98 2f       	mov	r25, r24
    14fe:	88 27       	eor	r24, r24
    1500:	82 0f       	add	r24, r18
    1502:	91 1d       	adc	r25, r1
    1504:	a1 1d       	adc	r26, r1
    1506:	b1 1d       	adc	r27, r1
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	42 e0       	ldi	r20, 0x02	; 2
    150e:	66 0f       	add	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	88 1f       	adc	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	4a 95       	dec	r20
    1518:	d1 f7       	brne	.-12     	; 0x150e <micros+0x3c>
}
    151a:	08 95       	ret

0000151c <delay>:

void delay(unsigned long ms)
{
    151c:	8f 92       	push	r8
    151e:	9f 92       	push	r9
    1520:	af 92       	push	r10
    1522:	bf 92       	push	r11
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	6b 01       	movw	r12, r22
    152e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1530:	d0 df       	rcall	.-96     	; 0x14d2 <micros>
    1532:	4b 01       	movw	r8, r22
    1534:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1536:	c1 14       	cp	r12, r1
    1538:	d1 04       	cpc	r13, r1
    153a:	e1 04       	cpc	r14, r1
    153c:	f1 04       	cpc	r15, r1
		yield();
    153e:	f1 f0       	breq	.+60     	; 0x157c <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1540:	41 d3       	rcall	.+1666   	; 0x1bc4 <yield>
    1542:	c7 df       	rcall	.-114    	; 0x14d2 <micros>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	88 19       	sub	r24, r8
    154a:	99 09       	sbc	r25, r9
    154c:	aa 09       	sbc	r26, r10
    154e:	bb 09       	sbc	r27, r11
    1550:	88 3e       	cpi	r24, 0xE8	; 232
    1552:	93 40       	sbci	r25, 0x03	; 3
    1554:	a1 05       	cpc	r26, r1
    1556:	b1 05       	cpc	r27, r1
    1558:	70 f3       	brcs	.-36     	; 0x1536 <delay+0x1a>
			ms--;
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	c2 1a       	sub	r12, r18
    155e:	d1 08       	sbc	r13, r1
    1560:	e1 08       	sbc	r14, r1
    1562:	f1 08       	sbc	r15, r1
			start += 1000;
    1564:	88 ee       	ldi	r24, 0xE8	; 232
    1566:	88 0e       	add	r8, r24
    1568:	83 e0       	ldi	r24, 0x03	; 3
    156a:	98 1e       	adc	r9, r24
    156c:	a1 1c       	adc	r10, r1
    156e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1570:	c1 14       	cp	r12, r1
    1572:	d1 04       	cpc	r13, r1
    1574:	e1 04       	cpc	r14, r1
    1576:	f1 04       	cpc	r15, r1
    1578:	21 f7       	brne	.-56     	; 0x1542 <delay+0x26>
    157a:	dd cf       	rjmp	.-70     	; 0x1536 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	df 90       	pop	r13
    1582:	cf 90       	pop	r12
    1584:	bf 90       	pop	r11
    1586:	af 90       	pop	r10
    1588:	9f 90       	pop	r9
    158a:	8f 90       	pop	r8
    158c:	08 95       	ret

0000158e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    158e:	82 30       	cpi	r24, 0x02	; 2
    1590:	91 05       	cpc	r25, r1
    1592:	38 f0       	brcs	.+14     	; 0x15a2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    159c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <delayMicroseconds+0x10>
    15a2:	08 95       	ret

000015a4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    15a4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    15a6:	84 b5       	in	r24, 0x24	; 36
    15a8:	82 60       	ori	r24, 0x02	; 2
    15aa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    15ac:	84 b5       	in	r24, 0x24	; 36
    15ae:	81 60       	ori	r24, 0x01	; 1
    15b0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    15b2:	85 b5       	in	r24, 0x25	; 37
    15b4:	82 60       	ori	r24, 0x02	; 2
    15b6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    15b8:	85 b5       	in	r24, 0x25	; 37
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    15be:	ee e6       	ldi	r30, 0x6E	; 110
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	81 60       	ori	r24, 0x01	; 1
    15c6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    15c8:	e1 e8       	ldi	r30, 0x81	; 129
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    15ce:	80 81       	ld	r24, Z
    15d0:	82 60       	ori	r24, 0x02	; 2
    15d2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    15d4:	80 81       	ld	r24, Z
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    15da:	e0 e8       	ldi	r30, 0x80	; 128
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	81 60       	ori	r24, 0x01	; 1
    15e2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    15e4:	e1 eb       	ldi	r30, 0xB1	; 177
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	84 60       	ori	r24, 0x04	; 4
    15ec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    15ee:	e0 eb       	ldi	r30, 0xB0	; 176
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	81 60       	ori	r24, 0x01	; 1
    15f6:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    15f8:	e1 e9       	ldi	r30, 0x91	; 145
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	82 60       	ori	r24, 0x02	; 2
    1600:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1602:	80 81       	ld	r24, Z
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1608:	e0 e9       	ldi	r30, 0x90	; 144
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	81 60       	ori	r24, 0x01	; 1
    1610:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1612:	e1 ea       	ldi	r30, 0xA1	; 161
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	82 60       	ori	r24, 0x02	; 2
    161a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    161c:	80 81       	ld	r24, Z
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1622:	e0 ea       	ldi	r30, 0xA0	; 160
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	81 60       	ori	r24, 0x01	; 1
    162a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    162c:	e1 e2       	ldi	r30, 0x21	; 33
    162e:	f1 e0       	ldi	r31, 0x01	; 1
    1630:	80 81       	ld	r24, Z
    1632:	82 60       	ori	r24, 0x02	; 2
    1634:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1636:	80 81       	ld	r24, Z
    1638:	81 60       	ori	r24, 0x01	; 1
    163a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    163c:	e0 e2       	ldi	r30, 0x20	; 32
    163e:	f1 e0       	ldi	r31, 0x01	; 1
    1640:	80 81       	ld	r24, Z
    1642:	81 60       	ori	r24, 0x01	; 1
    1644:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1646:	ea e7       	ldi	r30, 0x7A	; 122
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	84 60       	ori	r24, 0x04	; 4
    164e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1650:	80 81       	ld	r24, Z
    1652:	82 60       	ori	r24, 0x02	; 2
    1654:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1656:	80 81       	ld	r24, Z
    1658:	81 60       	ori	r24, 0x01	; 1
    165a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    165c:	80 81       	ld	r24, Z
    165e:	80 68       	ori	r24, 0x80	; 128
    1660:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1662:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1666:	08 95       	ret

00001668 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	fc 01       	movw	r30, r24
    166c:	31 97       	sbiw	r30, 0x01	; 1
    166e:	e2 31       	cpi	r30, 0x12	; 18
    1670:	f1 05       	cpc	r31, r1
    1672:	08 f0       	brcs	.+2      	; 0x1676 <turnOffPWM+0xe>
    1674:	4d c0       	rjmp	.+154    	; 0x1710 <turnOffPWM+0xa8>
    1676:	88 27       	eor	r24, r24
    1678:	ee 58       	subi	r30, 0x8E	; 142
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	8f 4f       	sbci	r24, 0xFF	; 255
    167e:	a7 c4       	rjmp	.+2382   	; 0x1fce <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1680:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1684:	8f 77       	andi	r24, 0x7F	; 127
    1686:	03 c0       	rjmp	.+6      	; 0x168e <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1688:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    168c:	8f 7d       	andi	r24, 0xDF	; 223
    168e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1692:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1694:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1698:	87 7f       	andi	r24, 0xF7	; 247
    169a:	f9 cf       	rjmp	.-14     	; 0x168e <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    169c:	84 b5       	in	r24, 0x24	; 36
    169e:	8f 77       	andi	r24, 0x7F	; 127
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    16a2:	84 b5       	in	r24, 0x24	; 36
    16a4:	8f 7d       	andi	r24, 0xDF	; 223
    16a6:	84 bd       	out	0x24, r24	; 36
    16a8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    16aa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    16ae:	8f 77       	andi	r24, 0x7F	; 127
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    16b2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    16b6:	8f 7d       	andi	r24, 0xDF	; 223
    16b8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    16bc:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    16be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    16c2:	8f 77       	andi	r24, 0x7F	; 127
    16c4:	07 c0       	rjmp	.+14     	; 0x16d4 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    16c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    16ca:	8f 7d       	andi	r24, 0xDF	; 223
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    16ce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    16d2:	87 7f       	andi	r24, 0xF7	; 247
    16d4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    16d8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    16da:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    16de:	8f 77       	andi	r24, 0x7F	; 127
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    16e2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    16e6:	8f 7d       	andi	r24, 0xDF	; 223
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    16ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    16ee:	87 7f       	andi	r24, 0xF7	; 247
    16f0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    16f4:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    16f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    16fa:	8f 77       	andi	r24, 0x7F	; 127
    16fc:	07 c0       	rjmp	.+14     	; 0x170c <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    16fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1702:	8f 7d       	andi	r24, 0xDF	; 223
    1704:	03 c0       	rjmp	.+6      	; 0x170c <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1706:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    170a:	87 7f       	andi	r24, 0xF7	; 247
    170c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1710:	08 95       	ret

00001712 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	fc 01       	movw	r30, r24
    171a:	e2 5b       	subi	r30, 0xB2	; 178
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1720:	fc 01       	movw	r30, r24
    1722:	ec 56       	subi	r30, 0x6C	; 108
    1724:	fe 4f       	sbci	r31, 0xFE	; 254
    1726:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1728:	88 23       	and	r24, r24
    172a:	61 f1       	breq	.+88     	; 0x1784 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	fc 01       	movw	r30, r24
    1734:	ec 50       	subi	r30, 0x0C	; 12
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	c5 91       	lpm	r28, Z+
    173a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    173c:	fc 01       	movw	r30, r24
    173e:	e6 52       	subi	r30, 0x26	; 38
    1740:	fe 4f       	sbci	r31, 0xFE	; 254
    1742:	a5 91       	lpm	r26, Z+
    1744:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1746:	61 11       	cpse	r22, r1
    1748:	09 c0       	rjmp	.+18     	; 0x175c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    174a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    174c:	f8 94       	cli
		*reg &= ~bit;
    174e:	88 81       	ld	r24, Y
    1750:	20 95       	com	r18
    1752:	82 23       	and	r24, r18
    1754:	88 83       	st	Y, r24
		*out &= ~bit;
    1756:	ec 91       	ld	r30, X
    1758:	2e 23       	and	r18, r30
    175a:	0b c0       	rjmp	.+22     	; 0x1772 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    175c:	62 30       	cpi	r22, 0x02	; 2
    175e:	61 f4       	brne	.+24     	; 0x1778 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1760:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1762:	f8 94       	cli
		*reg &= ~bit;
    1764:	88 81       	ld	r24, Y
    1766:	32 2f       	mov	r19, r18
    1768:	30 95       	com	r19
    176a:	83 23       	and	r24, r19
    176c:	88 83       	st	Y, r24
		*out |= bit;
    176e:	ec 91       	ld	r30, X
    1770:	2e 2b       	or	r18, r30
    1772:	2c 93       	st	X, r18
		SREG = oldSREG;
    1774:	9f bf       	out	0x3f, r25	; 63
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1778:	8f b7       	in	r24, 0x3f	; 63
                cli();
    177a:	f8 94       	cli
		*reg |= bit;
    177c:	e8 81       	ld	r30, Y
    177e:	2e 2b       	or	r18, r30
    1780:	28 83       	st	Y, r18
		SREG = oldSREG;
    1782:	8f bf       	out	0x3f, r24	; 63
	}
}
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	e8 5f       	subi	r30, 0xF8	; 248
    1798:	fe 4f       	sbci	r31, 0xFE	; 254
    179a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    179c:	f9 01       	movw	r30, r18
    179e:	e2 5b       	subi	r30, 0xB2	; 178
    17a0:	fe 4f       	sbci	r31, 0xFE	; 254
    17a2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    17a4:	f9 01       	movw	r30, r18
    17a6:	ec 56       	subi	r30, 0x6C	; 108
    17a8:	fe 4f       	sbci	r31, 0xFE	; 254
    17aa:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    17ac:	cc 23       	and	r28, r28
    17ae:	b9 f0       	breq	.+46     	; 0x17de <digitalWrite+0x54>
    17b0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    17b2:	81 11       	cpse	r24, r1
    17b4:	59 df       	rcall	.-334    	; 0x1668 <turnOffPWM>

	out = portOutputRegister(port);
    17b6:	ec 2f       	mov	r30, r28
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	ee 0f       	add	r30, r30
    17bc:	ff 1f       	adc	r31, r31
    17be:	e6 52       	subi	r30, 0x26	; 38
    17c0:	fe 4f       	sbci	r31, 0xFE	; 254
    17c2:	a5 91       	lpm	r26, Z+
    17c4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    17c6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    17c8:	f8 94       	cli

	if (val == LOW) {
    17ca:	11 11       	cpse	r17, r1
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <digitalWrite+0x4c>
		*out &= ~bit;
    17ce:	8c 91       	ld	r24, X
    17d0:	d0 95       	com	r29
    17d2:	d8 23       	and	r29, r24
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <digitalWrite+0x50>
	} else {
		*out |= bit;
    17d6:	ec 91       	ld	r30, X
    17d8:	de 2b       	or	r29, r30
    17da:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    17dc:	9f bf       	out	0x3f, r25	; 63
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	08 95       	ret

000017e6 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    17e6:	fc 01       	movw	r30, r24
    17e8:	13 82       	std	Z+3, r1	; 0x03
    17ea:	12 82       	std	Z+2, r1	; 0x02
    17ec:	8a e7       	ldi	r24, 0x7A	; 122
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24
    17f4:	64 83       	std	Z+4, r22	; 0x04
    17f6:	41 87       	std	Z+9, r20	; 0x09
    17f8:	22 87       	std	Z+10, r18	; 0x0a
    17fa:	13 86       	std	Z+11, r1	; 0x0b
    17fc:	08 95       	ret

000017fe <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	ec 01       	movw	r28, r24
    1806:	16 2f       	mov	r17, r22
    1808:	6c 81       	ldd	r22, Y+4	; 0x04
    180a:	8b ee       	ldi	r24, 0xEB	; 235
    180c:	93 e0       	ldi	r25, 0x03	; 3
    180e:	b9 d1       	rcall	.+882    	; 0x1b82 <_ZN7TwoWire17beginTransmissionEh>
    1810:	6b 85       	ldd	r22, Y+11	; 0x0b
    1812:	61 2b       	or	r22, r17
    1814:	8b ee       	ldi	r24, 0xEB	; 235
    1816:	93 e0       	ldi	r25, 0x03	; 3
    1818:	67 d1       	rcall	.+718    	; 0x1ae8 <_ZN7TwoWire5writeEh>
    181a:	8b ee       	ldi	r24, 0xEB	; 235
    181c:	93 e0       	ldi	r25, 0x03	; 3
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	ca c1       	rjmp	.+916    	; 0x1bba <_ZN7TwoWire15endTransmissionEv>

00001826 <_ZN17LiquidCrystal_I2C9backlightEv>:
    1826:	28 e0       	ldi	r18, 0x08	; 8
    1828:	fc 01       	movw	r30, r24
    182a:	23 87       	std	Z+11, r18	; 0x0b
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	e7 cf       	rjmp	.-50     	; 0x17fe <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00001830 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	8c 01       	movw	r16, r24
    1838:	c6 2f       	mov	r28, r22
    183a:	64 60       	ori	r22, 0x04	; 4
    183c:	e0 df       	rcall	.-64     	; 0x17fe <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a5 de       	rcall	.-694    	; 0x158e <delayMicroseconds>
    1844:	6c 2f       	mov	r22, r28
    1846:	6b 7f       	andi	r22, 0xFB	; 251
    1848:	c8 01       	movw	r24, r16
    184a:	d9 df       	rcall	.-78     	; 0x17fe <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    184c:	82 e3       	ldi	r24, 0x32	; 50
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	9b ce       	rjmp	.-714    	; 0x158e <delayMicroseconds>

00001858 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	ec 01       	movw	r28, r24
    1860:	16 2f       	mov	r17, r22
    1862:	cd df       	rcall	.-102    	; 0x17fe <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1864:	61 2f       	mov	r22, r17
    1866:	ce 01       	movw	r24, r28
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	e0 cf       	rjmp	.-64     	; 0x1830 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00001870 <_ZN17LiquidCrystal_I2C4sendEhh>:
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	8c 01       	movw	r16, r24
    187a:	c6 2f       	mov	r28, r22
    187c:	d4 2f       	mov	r29, r20
    187e:	60 7f       	andi	r22, 0xF0	; 240
    1880:	64 2b       	or	r22, r20
    1882:	ea df       	rcall	.-44     	; 0x1858 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    1884:	80 e1       	ldi	r24, 0x10	; 16
    1886:	c8 9f       	mul	r28, r24
    1888:	b0 01       	movw	r22, r0
    188a:	11 24       	eor	r1, r1
    188c:	6d 2b       	or	r22, r29
    188e:	c8 01       	movw	r24, r16
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	df cf       	rjmp	.-66     	; 0x1858 <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000189a <_ZN17LiquidCrystal_I2C7commandEh>:
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	e9 cf       	rjmp	.-46     	; 0x1870 <_ZN17LiquidCrystal_I2C4sendEhh>

0000189e <_ZN17LiquidCrystal_I2C5clearEv>:
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	fc df       	rcall	.-8      	; 0x189a <_ZN17LiquidCrystal_I2C7commandEh>
    18a2:	80 ed       	ldi	r24, 0xD0	; 208
    18a4:	97 e0       	ldi	r25, 0x07	; 7
    18a6:	73 ce       	rjmp	.-794    	; 0x158e <delayMicroseconds>

000018a8 <_ZN17LiquidCrystal_I2C4homeEv>:
    18a8:	62 e0       	ldi	r22, 0x02	; 2
    18aa:	f7 df       	rcall	.-18     	; 0x189a <_ZN17LiquidCrystal_I2C7commandEh>
    18ac:	80 ed       	ldi	r24, 0xD0	; 208
    18ae:	97 e0       	ldi	r25, 0x07	; 7
    18b0:	6e ce       	rjmp	.-804    	; 0x158e <delayMicroseconds>

000018b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	28 97       	sbiw	r28, 0x08	; 8
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	9c 01       	movw	r18, r24
    18c8:	88 e0       	ldi	r24, 0x08	; 8
    18ca:	e0 e0       	ldi	r30, 0x00	; 0
    18cc:	f2 e0       	ldi	r31, 0x02	; 2
    18ce:	de 01       	movw	r26, r28
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	01 90       	ld	r0, Z+
    18d4:	0d 92       	st	X+, r0
    18d6:	8a 95       	dec	r24
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    18da:	f9 01       	movw	r30, r18
    18dc:	80 85       	ldd	r24, Z+8	; 0x08
    18de:	84 17       	cp	r24, r20
    18e0:	10 f4       	brcc	.+4      	; 0x18e6 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    18e2:	4f ef       	ldi	r20, 0xFF	; 255
    18e4:	48 0f       	add	r20, r24
    18e6:	fe 01       	movw	r30, r28
    18e8:	31 96       	adiw	r30, 0x01	; 1
    18ea:	e4 0f       	add	r30, r20
    18ec:	f1 1d       	adc	r31, r1
    18ee:	e4 0f       	add	r30, r20
    18f0:	f1 1d       	adc	r31, r1
    18f2:	90 81       	ld	r25, Z
    18f4:	69 0f       	add	r22, r25
    18f6:	60 68       	ori	r22, 0x80	; 128
    18f8:	c9 01       	movw	r24, r18
    18fa:	28 96       	adiw	r28, 0x08	; 8
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	c7 cf       	rjmp	.-114    	; 0x189a <_ZN17LiquidCrystal_I2C7commandEh>

0000190c <_ZN17LiquidCrystal_I2C7displayEv>:
    190c:	fc 01       	movw	r30, r24
    190e:	66 81       	ldd	r22, Z+6	; 0x06
    1910:	26 2f       	mov	r18, r22
    1912:	24 60       	ori	r18, 0x04	; 4
    1914:	26 83       	std	Z+6, r18	; 0x06
    1916:	6c 60       	ori	r22, 0x0C	; 12
    1918:	c0 cf       	rjmp	.-128    	; 0x189a <_ZN17LiquidCrystal_I2C7commandEh>

0000191a <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	a9 df       	rcall	.-174    	; 0x1870 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	08 95       	ret

00001924 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	ec 01       	movw	r28, r24
	if (lines > 1) {
    192a:	42 30       	cpi	r20, 0x02	; 2
    192c:	18 f0       	brcs	.+6      	; 0x1934 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	88 60       	ori	r24, 0x08	; 8
    1932:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    1934:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    1936:	22 23       	and	r18, r18
    1938:	29 f0       	breq	.+10     	; 0x1944 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    193a:	41 30       	cpi	r20, 0x01	; 1
    193c:	19 f4       	brne	.+6      	; 0x1944 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	84 60       	ori	r24, 0x04	; 4
    1942:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    1944:	62 e3       	ldi	r22, 0x32	; 50
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	e7 dd       	rcall	.-1074   	; 0x151c <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    194e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1950:	ce 01       	movw	r24, r28
    1952:	55 df       	rcall	.-342    	; 0x17fe <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    1954:	68 ee       	ldi	r22, 0xE8	; 232
    1956:	73 e0       	ldi	r23, 0x03	; 3
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	df dd       	rcall	.-1090   	; 0x151c <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    195e:	60 e3       	ldi	r22, 0x30	; 48
    1960:	ce 01       	movw	r24, r28
    1962:	7a df       	rcall	.-268    	; 0x1858 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1964:	84 e9       	ldi	r24, 0x94	; 148
    1966:	91 e1       	ldi	r25, 0x11	; 17
    1968:	12 de       	rcall	.-988    	; 0x158e <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    196a:	60 e3       	ldi	r22, 0x30	; 48
    196c:	ce 01       	movw	r24, r28
    196e:	74 df       	rcall	.-280    	; 0x1858 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1970:	84 e9       	ldi	r24, 0x94	; 148
    1972:	91 e1       	ldi	r25, 0x11	; 17
    1974:	0c de       	rcall	.-1000   	; 0x158e <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    1976:	60 e3       	ldi	r22, 0x30	; 48
    1978:	ce 01       	movw	r24, r28
    197a:	6e df       	rcall	.-292    	; 0x1858 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    197c:	86 e9       	ldi	r24, 0x96	; 150
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	06 de       	rcall	.-1012   	; 0x158e <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    1982:	60 e2       	ldi	r22, 0x20	; 32
    1984:	ce 01       	movw	r24, r28
    1986:	68 df       	rcall	.-304    	; 0x1858 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    1988:	6d 81       	ldd	r22, Y+5	; 0x05
    198a:	60 62       	ori	r22, 0x20	; 32
    198c:	ce 01       	movw	r24, r28
    198e:	85 df       	rcall	.-246    	; 0x189a <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1990:	84 e0       	ldi	r24, 0x04	; 4
    1992:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1994:	ce 01       	movw	r24, r28
    1996:	ba df       	rcall	.-140    	; 0x190c <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    1998:	ce 01       	movw	r24, r28
    199a:	81 df       	rcall	.-254    	; 0x189e <_ZN17LiquidCrystal_I2C5clearEv>
    199c:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    199e:	8f 83       	std	Y+7, r24	; 0x07
    19a0:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    19a2:	ce 01       	movw	r24, r28
    19a4:	7a df       	rcall	.-268    	; 0x189a <_ZN17LiquidCrystal_I2C7commandEh>
    19a6:	ce 01       	movw	r24, r28
    19a8:	df 91       	pop	r29
	
	home();
    19aa:	cf 91       	pop	r28
  
}
    19ac:	7d cf       	rjmp	.-262    	; 0x18a8 <_ZN17LiquidCrystal_I2C4homeEv>

000019ae <_ZN17LiquidCrystal_I2C9init_privEv>:
    19ae:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    19b0:	df 93       	push	r29
    19b2:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    19b4:	8b ee       	ldi	r24, 0xEB	; 235
    19b6:	93 e0       	ldi	r25, 0x03	; 3
    19b8:	d5 d0       	rcall	.+426    	; 0x1b64 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    19ba:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	4a 85       	ldd	r20, Y+10	; 0x0a
    19c0:	69 85       	ldd	r22, Y+9	; 0x09
    19c2:	ce 01       	movw	r24, r28
}
    19c4:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    19c6:	cf 91       	pop	r28
    19c8:	ad cf       	rjmp	.-166    	; 0x1924 <_ZN17LiquidCrystal_I2C5beginEhhh>

000019ca <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    19ca:	f1 cf       	rjmp	.-30     	; 0x19ae <_ZN17LiquidCrystal_I2C9init_privEv>

000019cc <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    19cc:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZN7TwoWire14rxBufferLengthE>
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <_ZN7TwoWire13rxBufferIndexE>
    19d6:	82 1b       	sub	r24, r18
    19d8:	91 09       	sbc	r25, r1
    19da:	08 95       	ret

000019dc <_ZN7TwoWire4readEv>:
    19dc:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <_ZN7TwoWire13rxBufferIndexE>
    19e0:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZN7TwoWire14rxBufferLengthE>
    19e4:	98 17       	cp	r25, r24
    19e6:	50 f4       	brcc	.+20     	; 0x19fc <_ZN7TwoWire4readEv+0x20>
    19e8:	e9 2f       	mov	r30, r25
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	ef 5d       	subi	r30, 0xDF	; 223
    19ee:	fb 4f       	sbci	r31, 0xFB	; 251
    19f0:	20 81       	ld	r18, Z
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	9f 5f       	subi	r25, 0xFF	; 255
    19f6:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <_ZN7TwoWire13rxBufferIndexE>
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <_ZN7TwoWire4readEv+0x24>
    19fc:	2f ef       	ldi	r18, 0xFF	; 255
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	c9 01       	movw	r24, r18
    1a02:	08 95       	ret

00001a04 <_ZN7TwoWire4peekEv>:
    1a04:	e0 91 20 04 	lds	r30, 0x0420	; 0x800420 <_ZN7TwoWire13rxBufferIndexE>
    1a08:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZN7TwoWire14rxBufferLengthE>
    1a0c:	e8 17       	cp	r30, r24
    1a0e:	30 f4       	brcc	.+12     	; 0x1a1c <_ZN7TwoWire4peekEv+0x18>
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	ef 5d       	subi	r30, 0xDF	; 223
    1a14:	fb 4f       	sbci	r31, 0xFB	; 251
    1a16:	80 81       	ld	r24, Z
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	08 95       	ret
    1a1c:	8f ef       	ldi	r24, 0xFF	; 255
    1a1e:	9f ef       	ldi	r25, 0xFF	; 255
    1a20:	08 95       	ret

00001a22 <_ZN7TwoWire5flushEv>:
    1a22:	08 95       	ret

00001a24 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	ec 01       	movw	r28, r24
    1a2a:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <_ZN7TwoWire14user_onReceiveE>
    1a2e:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <_ZN7TwoWire14user_onReceiveE+0x1>
    1a32:	30 97       	sbiw	r30, 0x00	; 0
    1a34:	f1 f0       	breq	.+60     	; 0x1a72 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1a36:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <_ZN7TwoWire13rxBufferIndexE>
    1a3a:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZN7TwoWire14rxBufferLengthE>
    1a3e:	98 17       	cp	r25, r24
    1a40:	c0 f0       	brcs	.+48     	; 0x1a72 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	29 2f       	mov	r18, r25
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	26 17       	cp	r18, r22
    1a4a:	37 07       	cpc	r19, r23
    1a4c:	54 f4       	brge	.+20     	; 0x1a62 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1a4e:	de 01       	movw	r26, r28
    1a50:	a2 0f       	add	r26, r18
    1a52:	b3 1f       	adc	r27, r19
    1a54:	4c 91       	ld	r20, X
    1a56:	d9 01       	movw	r26, r18
    1a58:	af 5d       	subi	r26, 0xDF	; 223
    1a5a:	bb 4f       	sbci	r27, 0xFB	; 251
    1a5c:	4c 93       	st	X, r20
    1a5e:	9f 5f       	subi	r25, 0xFF	; 255
    1a60:	f1 cf       	rjmp	.-30     	; 0x1a44 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1a62:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <_ZN7TwoWire13rxBufferIndexE>
    1a66:	60 93 1f 04 	sts	0x041F, r22	; 0x80041f <_ZN7TwoWire14rxBufferLengthE>
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	19 94       	eijmp
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <_ZN7TwoWire16onRequestServiceEv>:
    1a78:	e0 91 f9 03 	lds	r30, 0x03F9	; 0x8003f9 <_ZN7TwoWire14user_onRequestE>
    1a7c:	f0 91 fa 03 	lds	r31, 0x03FA	; 0x8003fa <_ZN7TwoWire14user_onRequestE+0x1>
    1a80:	30 97       	sbiw	r30, 0x00	; 0
    1a82:	29 f0       	breq	.+10     	; 0x1a8e <_ZN7TwoWire16onRequestServiceEv+0x16>
    1a84:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <_ZN7TwoWire13txBufferIndexE>
    1a88:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <_ZN7TwoWire14txBufferLengthE>
    1a8c:	19 94       	eijmp
    1a8e:	08 95       	ret

00001a90 <_ZN7TwoWire5writeEPKhj>:
    1a90:	cf 92       	push	r12
    1a92:	df 92       	push	r13
    1a94:	ef 92       	push	r14
    1a96:	ff 92       	push	r15
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	7c 01       	movw	r14, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	8a 01       	movw	r16, r20
    1aa6:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <_ZN7TwoWire12transmittingE>
    1aaa:	22 23       	and	r18, r18
    1aac:	89 f0       	breq	.+34     	; 0x1ad0 <_ZN7TwoWire5writeEPKhj+0x40>
    1aae:	eb 01       	movw	r28, r22
    1ab0:	6b 01       	movw	r12, r22
    1ab2:	c4 0e       	add	r12, r20
    1ab4:	d5 1e       	adc	r13, r21
    1ab6:	cc 15       	cp	r28, r12
    1ab8:	dd 05       	cpc	r29, r13
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <_ZN7TwoWire5writeEPKhj+0x44>
    1abc:	69 91       	ld	r22, Y+
    1abe:	d7 01       	movw	r26, r14
    1ac0:	ed 91       	ld	r30, X+
    1ac2:	fc 91       	ld	r31, X
    1ac4:	01 90       	ld	r0, Z+
    1ac6:	f0 81       	ld	r31, Z
    1ac8:	e0 2d       	mov	r30, r0
    1aca:	c7 01       	movw	r24, r14
    1acc:	19 95       	eicall
    1ace:	f3 cf       	rjmp	.-26     	; 0x1ab6 <_ZN7TwoWire5writeEPKhj+0x26>
    1ad0:	64 2f       	mov	r22, r20
    1ad2:	eb d0       	rcall	.+470    	; 0x1caa <twi_transmit>
    1ad4:	c8 01       	movw	r24, r16
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	df 90       	pop	r13
    1ae4:	cf 90       	pop	r12
    1ae6:	08 95       	ret

00001ae8 <_ZN7TwoWire5writeEh>:
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	1f 92       	push	r1
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	69 83       	std	Y+1, r22	; 0x01
    1af4:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <_ZN7TwoWire12transmittingE>
    1af8:	22 23       	and	r18, r18
    1afa:	d1 f0       	breq	.+52     	; 0x1b30 <_ZN7TwoWire5writeEh+0x48>
    1afc:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <_ZN7TwoWire14txBufferLengthE>
    1b00:	20 32       	cpi	r18, 0x20	; 32
    1b02:	40 f0       	brcs	.+16     	; 0x1b14 <_ZN7TwoWire5writeEh+0x2c>
    1b04:	21 e0       	ldi	r18, 0x01	; 1
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	fc 01       	movw	r30, r24
    1b0a:	33 83       	std	Z+3, r19	; 0x03
    1b0c:	22 83       	std	Z+2, r18	; 0x02
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <_ZN7TwoWire5writeEh+0x54>
    1b14:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <_ZN7TwoWire13txBufferIndexE>
    1b18:	e8 2f       	mov	r30, r24
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	e2 50       	subi	r30, 0x02	; 2
    1b1e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b20:	99 81       	ldd	r25, Y+1	; 0x01
    1b22:	90 83       	st	Z, r25
    1b24:	8f 5f       	subi	r24, 0xFF	; 255
    1b26:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <_ZN7TwoWire13txBufferIndexE>
    1b2a:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <_ZN7TwoWire14txBufferLengthE>
    1b2e:	04 c0       	rjmp	.+8      	; 0x1b38 <_ZN7TwoWire5writeEh+0x50>
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	b9 d0       	rcall	.+370    	; 0x1caa <twi_transmit>
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0f 90       	pop	r0
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <_ZN7TwoWireC1Ev>:
    1b44:	fc 01       	movw	r30, r24
    1b46:	13 82       	std	Z+3, r1	; 0x03
    1b48:	12 82       	std	Z+2, r1	; 0x02
    1b4a:	88 ee       	ldi	r24, 0xE8	; 232
    1b4c:	93 e0       	ldi	r25, 0x03	; 3
    1b4e:	a0 e0       	ldi	r26, 0x00	; 0
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	84 83       	std	Z+4, r24	; 0x04
    1b54:	95 83       	std	Z+5, r25	; 0x05
    1b56:	a6 83       	std	Z+6, r26	; 0x06
    1b58:	b7 83       	std	Z+7, r27	; 0x07
    1b5a:	86 e8       	ldi	r24, 0x86	; 134
    1b5c:	92 e0       	ldi	r25, 0x02	; 2
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
    1b62:	08 95       	ret

00001b64 <_ZN7TwoWire5beginEv>:
    1b64:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <_ZN7TwoWire13rxBufferIndexE>
    1b68:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <_ZN7TwoWire14rxBufferLengthE>
    1b6c:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <_ZN7TwoWire13txBufferIndexE>
    1b70:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <_ZN7TwoWire14txBufferLengthE>
    1b74:	28 d0       	rcall	.+80     	; 0x1bc6 <twi_init>
    1b76:	8c e3       	ldi	r24, 0x3C	; 60
    1b78:	9d e0       	ldi	r25, 0x0D	; 13
    1b7a:	c4 d0       	rcall	.+392    	; 0x1d04 <twi_attachSlaveTxEvent>
    1b7c:	82 e1       	ldi	r24, 0x12	; 18
    1b7e:	9d e0       	ldi	r25, 0x0D	; 13
    1b80:	bc c0       	rjmp	.+376    	; 0x1cfa <twi_attachSlaveRxEvent>

00001b82 <_ZN7TwoWire17beginTransmissionEh>:
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <_ZN7TwoWire12transmittingE>
    1b88:	60 93 1e 04 	sts	0x041E, r22	; 0x80041e <_ZN7TwoWire9txAddressE>
    1b8c:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <_ZN7TwoWire13txBufferIndexE>
    1b90:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <_ZN7TwoWire14txBufferLengthE>
    1b94:	08 95       	ret

00001b96 <_ZN7TwoWire15endTransmissionEh>:
    1b96:	0f 93       	push	r16
    1b98:	06 2f       	mov	r16, r22
    1b9a:	21 e0       	ldi	r18, 0x01	; 1
    1b9c:	40 91 fc 03 	lds	r20, 0x03FC	; 0x8003fc <_ZN7TwoWire14txBufferLengthE>
    1ba0:	6e ef       	ldi	r22, 0xFE	; 254
    1ba2:	73 e0       	ldi	r23, 0x03	; 3
    1ba4:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_ZN7TwoWire9txAddressE>
    1ba8:	2a d0       	rcall	.+84     	; 0x1bfe <twi_writeTo>
    1baa:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <_ZN7TwoWire13txBufferIndexE>
    1bae:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <_ZN7TwoWire14txBufferLengthE>
    1bb2:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <_ZN7TwoWire12transmittingE>
    1bb6:	0f 91       	pop	r16
    1bb8:	08 95       	ret

00001bba <_ZN7TwoWire15endTransmissionEv>:
    1bba:	61 e0       	ldi	r22, 0x01	; 1
    1bbc:	ec cf       	rjmp	.-40     	; 0x1b96 <_ZN7TwoWire15endTransmissionEh>

00001bbe <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1bbe:	8b ee       	ldi	r24, 0xEB	; 235
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	c0 cf       	rjmp	.-128    	; 0x1b44 <_ZN7TwoWireC1Ev>

00001bc4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1bc4:	08 95       	ret

00001bc6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1bc6:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <twi_state>
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <twi_sendStop>
    1bd0:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <twi_inRepStart>
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	84 e1       	ldi	r24, 0x14	; 20
    1bd8:	d8 dd       	rcall	.-1104   	; 0x178a <digitalWrite>
    1bda:	61 e0       	ldi	r22, 0x01	; 1
    1bdc:	85 e1       	ldi	r24, 0x15	; 21
    1bde:	d5 dd       	rcall	.-1110   	; 0x178a <digitalWrite>
    1be0:	e9 eb       	ldi	r30, 0xB9	; 185
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8e 7f       	andi	r24, 0xFE	; 254
    1be8:	80 83       	st	Z, r24
    1bea:	80 81       	ld	r24, Z
    1bec:	8d 7f       	andi	r24, 0xFD	; 253
    1bee:	80 83       	st	Z, r24
    1bf0:	88 e4       	ldi	r24, 0x48	; 72
    1bf2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1bf6:	85 e4       	ldi	r24, 0x45	; 69
    1bf8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1bfc:	08 95       	ret

00001bfe <twi_writeTo>:
    1bfe:	0f 93       	push	r16
    1c00:	41 32       	cpi	r20, 0x21	; 33
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <twi_writeTo+0x8>
    1c04:	4a c0       	rjmp	.+148    	; 0x1c9a <twi_writeTo+0x9c>
    1c06:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <twi_state>
    1c0a:	91 11       	cpse	r25, r1
    1c0c:	fc cf       	rjmp	.-8      	; 0x1c06 <twi_writeTo+0x8>
    1c0e:	32 e0       	ldi	r19, 0x02	; 2
    1c10:	30 93 ae 04 	sts	0x04AE, r19	; 0x8004ae <twi_state>
    1c14:	00 93 ac 04 	sts	0x04AC, r16	; 0x8004ac <twi_sendStop>
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	30 93 41 04 	sts	0x0441, r19	; 0x800441 <twi_error>
    1c1e:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <twi_masterBufferIndex>
    1c22:	40 93 85 04 	sts	0x0485, r20	; 0x800485 <twi_masterBufferLength>
    1c26:	56 2f       	mov	r21, r22
    1c28:	a7 e8       	ldi	r26, 0x87	; 135
    1c2a:	b4 e0       	ldi	r27, 0x04	; 4
    1c2c:	fb 01       	movw	r30, r22
    1c2e:	3e 2f       	mov	r19, r30
    1c30:	35 1b       	sub	r19, r21
    1c32:	34 17       	cp	r19, r20
    1c34:	18 f4       	brcc	.+6      	; 0x1c3c <twi_writeTo+0x3e>
    1c36:	31 91       	ld	r19, Z+
    1c38:	3d 93       	st	X+, r19
    1c3a:	f9 cf       	rjmp	.-14     	; 0x1c2e <twi_writeTo+0x30>
    1c3c:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <twi_slarw>
    1c40:	30 91 ad 04 	lds	r19, 0x04AD	; 0x8004ad <twi_slarw>
    1c44:	88 0f       	add	r24, r24
    1c46:	83 2b       	or	r24, r19
    1c48:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <twi_slarw>
    1c4c:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <twi_inRepStart>
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	61 f4       	brne	.+24     	; 0x1c6c <twi_writeTo+0x6e>
    1c54:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <twi_inRepStart>
    1c58:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <twi_slarw>
    1c5c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1c60:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c64:	83 fd       	sbrc	r24, 3
    1c66:	f8 cf       	rjmp	.-16     	; 0x1c58 <twi_writeTo+0x5a>
    1c68:	85 ec       	ldi	r24, 0xC5	; 197
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <twi_writeTo+0x70>
    1c6c:	85 ee       	ldi	r24, 0xE5	; 229
    1c6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c72:	22 23       	and	r18, r18
    1c74:	21 f0       	breq	.+8      	; 0x1c7e <twi_writeTo+0x80>
    1c76:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_state>
    1c7a:	82 30       	cpi	r24, 0x02	; 2
    1c7c:	d1 f3       	breq	.-12     	; 0x1c72 <twi_writeTo+0x74>
    1c7e:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <twi_error>
    1c82:	8f 3f       	cpi	r24, 0xFF	; 255
    1c84:	79 f0       	breq	.+30     	; 0x1ca4 <twi_writeTo+0xa6>
    1c86:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <twi_error>
    1c8a:	80 32       	cpi	r24, 0x20	; 32
    1c8c:	41 f0       	breq	.+16     	; 0x1c9e <twi_writeTo+0xa0>
    1c8e:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <twi_error>
    1c92:	80 33       	cpi	r24, 0x30	; 48
    1c94:	31 f0       	breq	.+12     	; 0x1ca2 <twi_writeTo+0xa4>
    1c96:	94 e0       	ldi	r25, 0x04	; 4
    1c98:	05 c0       	rjmp	.+10     	; 0x1ca4 <twi_writeTo+0xa6>
    1c9a:	91 e0       	ldi	r25, 0x01	; 1
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <twi_writeTo+0xa6>
    1c9e:	92 e0       	ldi	r25, 0x02	; 2
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <twi_writeTo+0xa6>
    1ca2:	93 e0       	ldi	r25, 0x03	; 3
    1ca4:	89 2f       	mov	r24, r25
    1ca6:	0f 91       	pop	r16
    1ca8:	08 95       	ret

00001caa <twi_transmit>:
    1caa:	40 91 63 04 	lds	r20, 0x0463	; 0x800463 <twi_txBufferLength>
    1cae:	26 2f       	mov	r18, r22
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	24 0f       	add	r18, r20
    1cb4:	31 1d       	adc	r19, r1
    1cb6:	21 32       	cpi	r18, 0x21	; 33
    1cb8:	31 05       	cpc	r19, r1
    1cba:	dc f4       	brge	.+54     	; 0x1cf2 <twi_transmit+0x48>
    1cbc:	20 91 ae 04 	lds	r18, 0x04AE	; 0x8004ae <twi_state>
    1cc0:	24 30       	cpi	r18, 0x04	; 4
    1cc2:	c9 f4       	brne	.+50     	; 0x1cf6 <twi_transmit+0x4c>
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	86 17       	cp	r24, r22
    1ccc:	58 f4       	brcc	.+22     	; 0x1ce4 <twi_transmit+0x3a>
    1cce:	30 91 63 04 	lds	r19, 0x0463	; 0x800463 <twi_txBufferLength>
    1cd2:	21 91       	ld	r18, Z+
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	ab 59       	subi	r26, 0x9B	; 155
    1cd8:	bb 4f       	sbci	r27, 0xFB	; 251
    1cda:	a3 0f       	add	r26, r19
    1cdc:	b1 1d       	adc	r27, r1
    1cde:	2c 93       	st	X, r18
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	f3 cf       	rjmp	.-26     	; 0x1cca <twi_transmit+0x20>
    1ce4:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <twi_txBufferLength>
    1ce8:	68 0f       	add	r22, r24
    1cea:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <twi_txBufferLength>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	08 95       	ret
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	08 95       	ret
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	08 95       	ret

00001cfa <twi_attachSlaveRxEvent>:
    1cfa:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <twi_onSlaveReceive+0x1>
    1cfe:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <twi_onSlaveReceive>
    1d02:	08 95       	ret

00001d04 <twi_attachSlaveTxEvent>:
    1d04:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <twi_onSlaveTransmit+0x1>
    1d08:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <twi_onSlaveTransmit>
    1d0c:	08 95       	ret

00001d0e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1d0e:	85 ed       	ldi	r24, 0xD5	; 213
    1d10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1d14:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1d18:	84 fd       	sbrc	r24, 4
    1d1a:	fc cf       	rjmp	.-8      	; 0x1d14 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1d1c:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <twi_state>
    1d20:	08 95       	ret

00001d22 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1d22:	85 ec       	ldi	r24, 0xC5	; 197
    1d24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    1d28:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <twi_state>
    1d2c:	08 95       	ret

00001d2e <__vector_39>:
}

ISR(TWI_vect)
{
    1d2e:	1f 92       	push	r1
    1d30:	0f 92       	push	r0
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	0f 92       	push	r0
    1d36:	11 24       	eor	r1, r1
    1d38:	0b b6       	in	r0, 0x3b	; 59
    1d3a:	0f 92       	push	r0
    1d3c:	2f 93       	push	r18
    1d3e:	3f 93       	push	r19
    1d40:	4f 93       	push	r20
    1d42:	5f 93       	push	r21
    1d44:	6f 93       	push	r22
    1d46:	7f 93       	push	r23
    1d48:	8f 93       	push	r24
    1d4a:	9f 93       	push	r25
    1d4c:	af 93       	push	r26
    1d4e:	bf 93       	push	r27
    1d50:	ef 93       	push	r30
    1d52:	ff 93       	push	r31
  switch(TW_STATUS){
    1d54:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1d58:	88 7f       	andi	r24, 0xF8	; 248
    1d5a:	80 36       	cpi	r24, 0x60	; 96
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <__vector_39+0x32>
    1d5e:	9d c0       	rjmp	.+314    	; 0x1e9a <__vector_39+0x16c>
    1d60:	70 f5       	brcc	.+92     	; 0x1dbe <__vector_39+0x90>
    1d62:	88 32       	cpi	r24, 0x28	; 40
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <__vector_39+0x3a>
    1d66:	5c c0       	rjmp	.+184    	; 0x1e20 <__vector_39+0xf2>
    1d68:	90 f4       	brcc	.+36     	; 0x1d8e <__vector_39+0x60>
    1d6a:	80 31       	cpi	r24, 0x10	; 16
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <__vector_39+0x42>
    1d6e:	55 c0       	rjmp	.+170    	; 0x1e1a <__vector_39+0xec>
    1d70:	38 f4       	brcc	.+14     	; 0x1d80 <__vector_39+0x52>
    1d72:	88 23       	and	r24, r24
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <__vector_39+0x4a>
    1d76:	f3 c0       	rjmp	.+486    	; 0x1f5e <__vector_39+0x230>
    1d78:	88 30       	cpi	r24, 0x08	; 8
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <__vector_39+0x50>
    1d7c:	4e c0       	rjmp	.+156    	; 0x1e1a <__vector_39+0xec>
    1d7e:	f2 c0       	rjmp	.+484    	; 0x1f64 <__vector_39+0x236>
    1d80:	88 31       	cpi	r24, 0x18	; 24
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <__vector_39+0x58>
    1d84:	4d c0       	rjmp	.+154    	; 0x1e20 <__vector_39+0xf2>
    1d86:	80 32       	cpi	r24, 0x20	; 32
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <__vector_39+0x5e>
    1d8a:	5e c0       	rjmp	.+188    	; 0x1e48 <__vector_39+0x11a>
    1d8c:	eb c0       	rjmp	.+470    	; 0x1f64 <__vector_39+0x236>
    1d8e:	80 34       	cpi	r24, 0x40	; 64
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <__vector_39+0x66>
    1d92:	69 c0       	rjmp	.+210    	; 0x1e66 <__vector_39+0x138>
    1d94:	50 f4       	brcc	.+20     	; 0x1daa <__vector_39+0x7c>
    1d96:	80 33       	cpi	r24, 0x30	; 48
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <__vector_39+0x6e>
    1d9a:	56 c0       	rjmp	.+172    	; 0x1e48 <__vector_39+0x11a>
    1d9c:	88 33       	cpi	r24, 0x38	; 56
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <__vector_39+0x74>
    1da0:	e1 c0       	rjmp	.+450    	; 0x1f64 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1da2:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <twi_error>
      twi_releaseBus();
    1da6:	bd df       	rcall	.-134    	; 0x1d22 <twi_releaseBus>
      break;
    1da8:	dd c0       	rjmp	.+442    	; 0x1f64 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1daa:	80 35       	cpi	r24, 0x50	; 80
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <__vector_39+0x82>
    1dae:	4f c0       	rjmp	.+158    	; 0x1e4e <__vector_39+0x120>
    1db0:	88 35       	cpi	r24, 0x58	; 88
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <__vector_39+0x88>
    1db4:	5d c0       	rjmp	.+186    	; 0x1e70 <__vector_39+0x142>
    1db6:	88 34       	cpi	r24, 0x48	; 72
    1db8:	09 f0       	breq	.+2      	; 0x1dbc <__vector_39+0x8e>
    1dba:	d4 c0       	rjmp	.+424    	; 0x1f64 <__vector_39+0x236>
    1dbc:	d2 c0       	rjmp	.+420    	; 0x1f62 <__vector_39+0x234>
    1dbe:	88 39       	cpi	r24, 0x98	; 152
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <__vector_39+0x96>
    1dc2:	c3 c0       	rjmp	.+390    	; 0x1f4a <__vector_39+0x21c>
    1dc4:	a8 f4       	brcc	.+42     	; 0x1df0 <__vector_39+0xc2>
    1dc6:	88 37       	cpi	r24, 0x78	; 120
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <__vector_39+0x9e>
    1dca:	67 c0       	rjmp	.+206    	; 0x1e9a <__vector_39+0x16c>
    1dcc:	38 f4       	brcc	.+14     	; 0x1ddc <__vector_39+0xae>
    1dce:	88 36       	cpi	r24, 0x68	; 104
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <__vector_39+0xa6>
    1dd2:	63 c0       	rjmp	.+198    	; 0x1e9a <__vector_39+0x16c>
    1dd4:	80 37       	cpi	r24, 0x70	; 112
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <__vector_39+0xac>
    1dd8:	60 c0       	rjmp	.+192    	; 0x1e9a <__vector_39+0x16c>
    1dda:	c4 c0       	rjmp	.+392    	; 0x1f64 <__vector_39+0x236>
    1ddc:	88 38       	cpi	r24, 0x88	; 136
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <__vector_39+0xb4>
    1de0:	b4 c0       	rjmp	.+360    	; 0x1f4a <__vector_39+0x21c>
    1de2:	80 39       	cpi	r24, 0x90	; 144
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <__vector_39+0xba>
    1de6:	5f c0       	rjmp	.+190    	; 0x1ea6 <__vector_39+0x178>
    1de8:	80 38       	cpi	r24, 0x80	; 128
    1dea:	09 f0       	breq	.+2      	; 0x1dee <__vector_39+0xc0>
    1dec:	bb c0       	rjmp	.+374    	; 0x1f64 <__vector_39+0x236>
    1dee:	5b c0       	rjmp	.+182    	; 0x1ea6 <__vector_39+0x178>
    1df0:	80 3b       	cpi	r24, 0xB0	; 176
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <__vector_39+0xc8>
    1df4:	82 c0       	rjmp	.+260    	; 0x1efa <__vector_39+0x1cc>
    1df6:	38 f4       	brcc	.+14     	; 0x1e06 <__vector_39+0xd8>
    1df8:	80 3a       	cpi	r24, 0xA0	; 160
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <__vector_39+0xd0>
    1dfc:	66 c0       	rjmp	.+204    	; 0x1eca <__vector_39+0x19c>
    1dfe:	88 3a       	cpi	r24, 0xA8	; 168
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <__vector_39+0xd6>
    1e02:	7b c0       	rjmp	.+246    	; 0x1efa <__vector_39+0x1cc>
    1e04:	af c0       	rjmp	.+350    	; 0x1f64 <__vector_39+0x236>
    1e06:	80 3c       	cpi	r24, 0xC0	; 192
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <__vector_39+0xde>
    1e0a:	a3 c0       	rjmp	.+326    	; 0x1f52 <__vector_39+0x224>
    1e0c:	88 3c       	cpi	r24, 0xC8	; 200
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <__vector_39+0xe4>
    1e10:	a0 c0       	rjmp	.+320    	; 0x1f52 <__vector_39+0x224>
    1e12:	88 3b       	cpi	r24, 0xB8	; 184
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <__vector_39+0xea>
    1e16:	86 c0       	rjmp	.+268    	; 0x1f24 <__vector_39+0x1f6>
    1e18:	a5 c0       	rjmp	.+330    	; 0x1f64 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1e1a:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <twi_slarw>
    1e1e:	10 c0       	rjmp	.+32     	; 0x1e40 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e20:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <twi_masterBufferIndex>
    1e24:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <twi_masterBufferLength>
    1e28:	98 17       	cp	r25, r24
    1e2a:	70 f5       	brcc	.+92     	; 0x1e88 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1e2c:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <twi_masterBufferIndex>
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	8e 0f       	add	r24, r30
    1e34:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <twi_masterBufferIndex>
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	e9 57       	subi	r30, 0x79	; 121
    1e3c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e3e:	80 81       	ld	r24, Z
    1e40:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1e44:	85 ec       	ldi	r24, 0xC5	; 197
    1e46:	82 c0       	rjmp	.+260    	; 0x1f4c <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1e48:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <twi_error>
    1e4c:	8a c0       	rjmp	.+276    	; 0x1f62 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e4e:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <twi_masterBufferIndex>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	8e 0f       	add	r24, r30
    1e56:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <twi_masterBufferIndex>
    1e5a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	e9 57       	subi	r30, 0x79	; 121
    1e62:	fb 4f       	sbci	r31, 0xFB	; 251
    1e64:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e66:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <twi_masterBufferIndex>
    1e6a:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <twi_masterBufferLength>
    1e6e:	6a c0       	rjmp	.+212    	; 0x1f44 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e70:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <twi_masterBufferIndex>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	8e 0f       	add	r24, r30
    1e78:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <twi_masterBufferIndex>
    1e7c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	e9 57       	subi	r30, 0x79	; 121
    1e84:	fb 4f       	sbci	r31, 0xFB	; 251
    1e86:	80 83       	st	Z, r24
	if (twi_sendStop)
    1e88:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <twi_sendStop>
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	69 c0       	rjmp	.+210    	; 0x1f62 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1e96:	84 ea       	ldi	r24, 0xA4	; 164
    1e98:	5d c0       	rjmp	.+186    	; 0x1f54 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1ea0:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <twi_rxBufferIndex>
    1ea4:	cf cf       	rjmp	.-98     	; 0x1e44 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1ea6:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <twi_rxBufferIndex>
    1eaa:	80 32       	cpi	r24, 0x20	; 32
    1eac:	08 f0       	brcs	.+2      	; 0x1eb0 <__vector_39+0x182>
    1eae:	4d c0       	rjmp	.+154    	; 0x1f4a <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1eb0:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <twi_rxBufferIndex>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	8e 0f       	add	r24, r30
    1eb8:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <twi_rxBufferIndex>
    1ebc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	ed 5b       	subi	r30, 0xBD	; 189
    1ec4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ec6:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1ec8:	bd cf       	rjmp	.-134    	; 0x1e44 <__vector_39+0x116>
    1eca:	2b df       	rcall	.-426    	; 0x1d22 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1ecc:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <twi_rxBufferIndex>
    1ed0:	80 32       	cpi	r24, 0x20	; 32
    1ed2:	30 f4       	brcc	.+12     	; 0x1ee0 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1ed4:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <twi_rxBufferIndex>
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	ed 5b       	subi	r30, 0xBD	; 189
    1edc:	fb 4f       	sbci	r31, 0xFB	; 251
    1ede:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1ee0:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <twi_rxBufferIndex>
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	e0 91 a7 04 	lds	r30, 0x04A7	; 0x8004a7 <twi_onSlaveReceive>
    1eea:	f0 91 a8 04 	lds	r31, 0x04A8	; 0x8004a8 <twi_onSlaveReceive+0x1>
    1eee:	83 e4       	ldi	r24, 0x43	; 67
    1ef0:	94 e0       	ldi	r25, 0x04	; 4
    1ef2:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1ef4:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <twi_rxBufferIndex>
      break;
    1ef8:	35 c0       	rjmp	.+106    	; 0x1f64 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1efa:	84 e0       	ldi	r24, 0x04	; 4
    1efc:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1f00:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1f04:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1f08:	e0 91 a9 04 	lds	r30, 0x04A9	; 0x8004a9 <twi_onSlaveTransmit>
    1f0c:	f0 91 aa 04 	lds	r31, 0x04AA	; 0x8004aa <twi_onSlaveTransmit+0x1>
    1f10:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1f12:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <twi_txBufferLength>
    1f16:	81 11       	cpse	r24, r1
    1f18:	05 c0       	rjmp	.+10     	; 0x1f24 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1f20:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1f24:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <twi_txBufferIndex>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	8e 0f       	add	r24, r30
    1f2c:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <twi_txBufferIndex>
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	eb 59       	subi	r30, 0x9B	; 155
    1f34:	fb 4f       	sbci	r31, 0xFB	; 251
    1f36:	80 81       	ld	r24, Z
    1f38:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1f3c:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <twi_txBufferIndex>
    1f40:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <twi_txBufferLength>
    1f44:	98 17       	cp	r25, r24
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <__vector_39+0x21c>
    1f48:	7d cf       	rjmp	.-262    	; 0x1e44 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f4a:	85 e8       	ldi	r24, 0x85	; 133
    1f4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1f50:	09 c0       	rjmp	.+18     	; 0x1f64 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f52:	85 ec       	ldi	r24, 0xC5	; 197
    1f54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1f58:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <twi_state>
      break;
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1f5e:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <twi_error>
      twi_stop();
    1f62:	d5 de       	rcall	.-598    	; 0x1d0e <twi_stop>
      break;
  }
}
    1f64:	ff 91       	pop	r31
    1f66:	ef 91       	pop	r30
    1f68:	bf 91       	pop	r27
    1f6a:	af 91       	pop	r26
    1f6c:	9f 91       	pop	r25
    1f6e:	8f 91       	pop	r24
    1f70:	7f 91       	pop	r23
    1f72:	6f 91       	pop	r22
    1f74:	5f 91       	pop	r21
    1f76:	4f 91       	pop	r20
    1f78:	3f 91       	pop	r19
    1f7a:	2f 91       	pop	r18
    1f7c:	0f 90       	pop	r0
    1f7e:	0b be       	out	0x3b, r0	; 59
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__udivmodsi4>:
    1f8a:	a1 e2       	ldi	r26, 0x21	; 33
    1f8c:	1a 2e       	mov	r1, r26
    1f8e:	aa 1b       	sub	r26, r26
    1f90:	bb 1b       	sub	r27, r27
    1f92:	fd 01       	movw	r30, r26
    1f94:	0d c0       	rjmp	.+26     	; 0x1fb0 <__udivmodsi4_ep>

00001f96 <__udivmodsi4_loop>:
    1f96:	aa 1f       	adc	r26, r26
    1f98:	bb 1f       	adc	r27, r27
    1f9a:	ee 1f       	adc	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	a2 17       	cp	r26, r18
    1fa0:	b3 07       	cpc	r27, r19
    1fa2:	e4 07       	cpc	r30, r20
    1fa4:	f5 07       	cpc	r31, r21
    1fa6:	20 f0       	brcs	.+8      	; 0x1fb0 <__udivmodsi4_ep>
    1fa8:	a2 1b       	sub	r26, r18
    1faa:	b3 0b       	sbc	r27, r19
    1fac:	e4 0b       	sbc	r30, r20
    1fae:	f5 0b       	sbc	r31, r21

00001fb0 <__udivmodsi4_ep>:
    1fb0:	66 1f       	adc	r22, r22
    1fb2:	77 1f       	adc	r23, r23
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	1a 94       	dec	r1
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <__udivmodsi4_loop>
    1fbc:	60 95       	com	r22
    1fbe:	70 95       	com	r23
    1fc0:	80 95       	com	r24
    1fc2:	90 95       	com	r25
    1fc4:	9b 01       	movw	r18, r22
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	bd 01       	movw	r22, r26
    1fca:	cf 01       	movw	r24, r30
    1fcc:	08 95       	ret

00001fce <__tablejump2__>:
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	88 1f       	adc	r24, r24
    1fd4:	8b bf       	out	0x3b, r24	; 59
    1fd6:	07 90       	elpm	r0, Z+
    1fd8:	f6 91       	elpm	r31, Z
    1fda:	e0 2d       	mov	r30, r0
    1fdc:	19 94       	eijmp

00001fde <_exit>:
    1fde:	f8 94       	cli

00001fe0 <__stop_program>:
    1fe0:	ff cf       	rjmp	.-2      	; 0x1fe0 <__stop_program>
