
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800200  000026d4  00002768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000222  008002fe  008002fe  00002866  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002866  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000728  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012214  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031ce  00000000  00000000  00015240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a23  00000000  00000000  0001840e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001500  00000000  00000000  0001be34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003973  00000000  00000000  0001d334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066af  00000000  00000000  00020ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c8  00000000  00000000  00027356  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c1       	rjmp	.+532    	; 0x216 <__ctors_end>
       2:	00 00       	nop
       4:	39 c1       	rjmp	.+626    	; 0x278 <__bad_interrupt>
       6:	00 00       	nop
       8:	37 c1       	rjmp	.+622    	; 0x278 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c1       	rjmp	.+618    	; 0x278 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c1       	rjmp	.+614    	; 0x278 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c1       	rjmp	.+610    	; 0x278 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c1       	rjmp	.+606    	; 0x278 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2d c1       	rjmp	.+602    	; 0x278 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2b c1       	rjmp	.+598    	; 0x278 <__bad_interrupt>
      22:	00 00       	nop
      24:	ce c2       	rjmp	.+1436   	; 0x5c2 <__vector_9>
      26:	00 00       	nop
      28:	27 c1       	rjmp	.+590    	; 0x278 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	25 c1       	rjmp	.+586    	; 0x278 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c1       	rjmp	.+582    	; 0x278 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c1       	rjmp	.+578    	; 0x278 <__bad_interrupt>
      36:	00 00       	nop
      38:	1f c1       	rjmp	.+574    	; 0x278 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c1       	rjmp	.+570    	; 0x278 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c1       	rjmp	.+566    	; 0x278 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c1       	rjmp	.+562    	; 0x278 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c1       	rjmp	.+558    	; 0x278 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c1       	rjmp	.+554    	; 0x278 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c1       	rjmp	.+550    	; 0x278 <__bad_interrupt>
      52:	00 00       	nop
      54:	11 c1       	rjmp	.+546    	; 0x278 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c1       	rjmp	.+542    	; 0x278 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_23>
      60:	0b c1       	rjmp	.+534    	; 0x278 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_25>
      68:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__vector_26>
      6c:	05 c1       	rjmp	.+522    	; 0x278 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__bad_interrupt>
      72:	00 00       	nop
      74:	01 c1       	rjmp	.+514    	; 0x278 <__bad_interrupt>
      76:	00 00       	nop
      78:	ff c0       	rjmp	.+510    	; 0x278 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd c0       	rjmp	.+506    	; 0x278 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fb c0       	rjmp	.+502    	; 0x278 <__bad_interrupt>
      82:	00 00       	nop
      84:	f9 c0       	rjmp	.+498    	; 0x278 <__bad_interrupt>
      86:	00 00       	nop
      88:	f7 c0       	rjmp	.+494    	; 0x278 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f5 c0       	rjmp	.+490    	; 0x278 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_36>
      94:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_37>
      98:	ef c0       	rjmp	.+478    	; 0x278 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__vector_39>
      a0:	eb c0       	rjmp	.+470    	; 0x278 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e9 c0       	rjmp	.+466    	; 0x278 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e7 c0       	rjmp	.+462    	; 0x278 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e5 c0       	rjmp	.+458    	; 0x278 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e3 c0       	rjmp	.+454    	; 0x278 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e1 c0       	rjmp	.+450    	; 0x278 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	df c0       	rjmp	.+446    	; 0x278 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dd c0       	rjmp	.+442    	; 0x278 <__bad_interrupt>
      be:	00 00       	nop
      c0:	db c0       	rjmp	.+438    	; 0x278 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d9 c0       	rjmp	.+434    	; 0x278 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d7 c0       	rjmp	.+430    	; 0x278 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d5 c0       	rjmp	.+426    	; 0x278 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d3 c0       	rjmp	.+422    	; 0x278 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d1 c0       	rjmp	.+418    	; 0x278 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cf c0       	rjmp	.+414    	; 0x278 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cd c0       	rjmp	.+410    	; 0x278 <__bad_interrupt>
      de:	00 00       	nop
      e0:	cb c0       	rjmp	.+406    	; 0x278 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ec 0b       	sbc	r30, r28
      e6:	ef 0b       	sbc	r30, r31
      e8:	de 0b       	sbc	r29, r30
      ea:	e2 0b       	sbc	r30, r18
      ec:	e8 0b       	sbc	r30, r24
      ee:	26 0c       	add	r2, r6
      f0:	f3 0b       	sbc	r31, r19
      f2:	f7 0b       	sbc	r31, r23
      f4:	fd 0b       	sbc	r31, r29
      f6:	01 0c       	add	r0, r1
      f8:	05 0c       	add	r0, r5
      fa:	0b 0c       	add	r0, r11
      fc:	0f 0c       	add	r0, r15
      fe:	13 0c       	add	r1, r3
     100:	26 0c       	add	r2, r6
     102:	19 0c       	add	r1, r9
     104:	1d 0c       	add	r1, r13
     106:	21 0c       	add	r2, r1

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	fb 01       	movw	r30, r22
     210:	d6 08       	sbc	r13, r6
     212:	6b 09       	sbc	r22, r11
     214:	7d 0e       	add	r7, r29

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	d1 e2       	ldi	r29, 0x21	; 33
     21e:	de bf       	out	0x3e, r29	; 62
     220:	cd bf       	out	0x3d, r28	; 61
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0c bf       	out	0x3c, r16	; 60

00000226 <__do_copy_data>:
     226:	12 e0       	ldi	r17, 0x02	; 2
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b2 e0       	ldi	r27, 0x02	; 2
     22c:	e4 ed       	ldi	r30, 0xD4	; 212
     22e:	f6 e2       	ldi	r31, 0x26	; 38
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	ae 3f       	cpi	r26, 0xFE	; 254
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	25 e0       	ldi	r18, 0x05	; 5
     242:	ae ef       	ldi	r26, 0xFE	; 254
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	a0 32       	cpi	r26, 0x20	; 32
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>

00000250 <__do_global_ctors>:
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	cb e0       	ldi	r28, 0x0B	; 11
     254:	d1 e0       	ldi	r29, 0x01	; 1
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	06 c0       	rjmp	.+12     	; 0x266 <__do_global_ctors+0x16>
     25a:	21 97       	sbiw	r28, 0x01	; 1
     25c:	01 09       	sbc	r16, r1
     25e:	80 2f       	mov	r24, r16
     260:	fe 01       	movw	r30, r28
     262:	0e 94 85 10 	call	0x210a	; 0x210a <__tablejump2__>
     266:	c7 30       	cpi	r28, 0x07	; 7
     268:	d1 07       	cpc	r29, r17
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	08 07       	cpc	r16, r24
     26e:	a9 f7       	brne	.-22     	; 0x25a <__do_global_ctors+0xa>
     270:	0e 94 99 09 	call	0x1332	; 0x1332 <main>
     274:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <_exit>

00000278 <__bad_interrupt>:
     278:	c3 ce       	rjmp	.-634    	; 0x0 <__vectors>

0000027a <_ZN14HardwareSerial5writeEi>:
  Serial1.write(MX_TORQUE_LENGTH);
  Serial1.write(MX_INSTRUCTION_WRITE_DATA);
  Serial1.write(MX_TORQUE_ENABLE);
  Serial1.write(Status);
  Serial1.write(Checksum);
  RS485_RX_ON
     27a:	dc 01       	movw	r26, r24
     27c:	ed 91       	ld	r30, X+
     27e:	fc 91       	ld	r31, X
     280:	01 90       	ld	r0, Z+
     282:	f0 81       	ld	r31, Z
     284:	e0 2d       	mov	r30, r0
     286:	19 94       	eijmp

00000288 <_Z9printLCD1hhi>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	1f 92       	push	r1
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	f8 2e       	mov	r15, r24
     29c:	e6 2e       	mov	r14, r22
     29e:	5f 93       	push	r21
     2a0:	4f 93       	push	r20
     2a2:	81 e1       	ldi	r24, 0x11	; 17
     2a4:	92 e0       	ldi	r25, 0x02	; 2
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	8e 01       	movw	r16, r28
     2ac:	0f 5f       	subi	r16, 0xFF	; 255
     2ae:	1f 4f       	sbci	r17, 0xFF	; 255
     2b0:	1f 93       	push	r17
     2b2:	0f 93       	push	r16
     2b4:	0e 94 8d 10 	call	0x211a	; 0x211a <sprintf>
     2b8:	4e 2d       	mov	r20, r14
     2ba:	6f 2d       	mov	r22, r15
     2bc:	8e ef       	ldi	r24, 0xFE	; 254
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN17LiquidCrystal_I2C9setCursorEhh>
     2c4:	b8 01       	movw	r22, r16
     2c6:	8e ef       	ldi	r24, 0xFE	; 254
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN5Print5printEPKc>
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	08 95       	ret

000002ea <_Z9printLCD3hhi>:
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <_Z9printLCD3hhi+0xe>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	f8 2e       	mov	r15, r24
     2fe:	e6 2e       	mov	r14, r22
     300:	5f 93       	push	r21
     302:	4f 93       	push	r20
     304:	8b e1       	ldi	r24, 0x1B	; 27
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	8e 01       	movw	r16, r28
     30e:	0f 5f       	subi	r16, 0xFF	; 255
     310:	1f 4f       	sbci	r17, 0xFF	; 255
     312:	1f 93       	push	r17
     314:	0f 93       	push	r16
     316:	0e 94 8d 10 	call	0x211a	; 0x211a <sprintf>
     31a:	4e 2d       	mov	r20, r14
     31c:	6f 2d       	mov	r22, r15
     31e:	8e ef       	ldi	r24, 0xFE	; 254
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN17LiquidCrystal_I2C9setCursorEhh>
     326:	b8 01       	movw	r22, r16
     328:	8e ef       	ldi	r24, 0xFE	; 254
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN5Print5printEPKc>
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	ff 90       	pop	r15
     34c:	ef 90       	pop	r14
     34e:	08 95       	ret

00000350 <_Z9printLCD4hhi>:
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <_Z9printLCD4hhi+0xe>
     35e:	1f 92       	push	r1
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	f8 2e       	mov	r15, r24
     366:	e6 2e       	mov	r14, r22
     368:	5f 93       	push	r21
     36a:	4f 93       	push	r20
     36c:	8f e1       	ldi	r24, 0x1F	; 31
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	9f 93       	push	r25
     372:	8f 93       	push	r24
     374:	8e 01       	movw	r16, r28
     376:	0f 5f       	subi	r16, 0xFF	; 255
     378:	1f 4f       	sbci	r17, 0xFF	; 255
     37a:	1f 93       	push	r17
     37c:	0f 93       	push	r16
     37e:	0e 94 8d 10 	call	0x211a	; 0x211a <sprintf>
     382:	4e 2d       	mov	r20, r14
     384:	6f 2d       	mov	r22, r15
     386:	8e ef       	ldi	r24, 0xFE	; 254
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN17LiquidCrystal_I2C9setCursorEhh>
     38e:	b8 01       	movw	r22, r16
     390:	8e ef       	ldi	r24, 0xFE	; 254
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN5Print5printEPKc>
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	08 95       	ret

000003ba <_Z13setupSwitchesv>:
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	84 b9       	out	0x04, r24	; 4
     3be:	84 b1       	in	r24, 0x04	; 4
     3c0:	88 7f       	andi	r24, 0xF8	; 248
     3c2:	84 b9       	out	0x04, r24	; 4
     3c4:	eb e6       	ldi	r30, 0x6B	; 107
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	87 60       	ori	r24, 0x07	; 7
     3cc:	80 83       	st	Z, r24
     3ce:	e8 e6       	ldi	r30, 0x68	; 104
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	81 60       	ori	r24, 0x01	; 1
     3d6:	80 83       	st	Z, r24
     3d8:	78 94       	sei
     3da:	08 95       	ret

000003dc <_Z8sumBytesPhh>:
     3dc:	38 2f       	mov	r19, r24
     3de:	fc 01       	movw	r30, r24
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	2e 2f       	mov	r18, r30
     3e6:	23 1b       	sub	r18, r19
     3e8:	26 17       	cp	r18, r22
     3ea:	20 f4       	brcc	.+8      	; 0x3f4 <_Z8sumBytesPhh+0x18>
     3ec:	21 91       	ld	r18, Z+
     3ee:	82 0f       	add	r24, r18
     3f0:	91 1d       	adc	r25, r1
     3f2:	f8 cf       	rjmp	.-16     	; 0x3e4 <_Z8sumBytesPhh+0x8>
     3f4:	08 95       	ret

000003f6 <_GLOBAL__sub_I_Load_High_Byte>:
     3f6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <millis>
     3fa:	60 93 15 03 	sts	0x0315, r22	; 0x800315 <startTime>
     3fe:	70 93 16 03 	sts	0x0316, r23	; 0x800316 <startTime+0x1>
     402:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <startTime+0x2>
     406:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <startTime+0x3>
     40a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     40e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     412:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <currPos+0x1>
     416:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <currPos>
     41a:	24 e0       	ldi	r18, 0x04	; 4
     41c:	44 e1       	ldi	r20, 0x14	; 20
     41e:	67 e2       	ldi	r22, 0x27	; 39
     420:	8e ef       	ldi	r24, 0xFE	; 254
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <_ZN17LiquidCrystal_I2CC1Ehhh>

00000428 <_Z10writeServohhPhh>:
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	f8 2e       	mov	r15, r24
     43a:	e6 2e       	mov	r14, r22
     43c:	6a 01       	movw	r12, r20
     43e:	02 2f       	mov	r16, r18
     440:	66 e0       	ldi	r22, 0x06	; 6
     442:	6e 0d       	add	r22, r14
     444:	d6 2f       	mov	r29, r22
     446:	d2 0f       	add	r29, r18
     448:	62 2f       	mov	r22, r18
     44a:	ca 01       	movw	r24, r20
     44c:	c7 df       	rcall	.-114    	; 0x3dc <_Z8sumBytesPhh>
     44e:	c8 2f       	mov	r28, r24
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 2c 0b 	call	0x1658	; 0x1658 <delay>
     46c:	6f ef       	ldi	r22, 0xFF	; 255
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	86 eb       	ldi	r24, 0xB6	; 182
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	02 df       	rcall	.-508    	; 0x27a <_ZN14HardwareSerial5writeEi>
     476:	6f ef       	ldi	r22, 0xFF	; 255
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	86 eb       	ldi	r24, 0xB6	; 182
     47c:	93 e0       	ldi	r25, 0x03	; 3
     47e:	fd de       	rcall	.-518    	; 0x27a <_ZN14HardwareSerial5writeEi>
     480:	6f 2d       	mov	r22, r15
     482:	86 eb       	ldi	r24, 0xB6	; 182
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	54 d5       	rcall	.+2728   	; 0xf30 <_ZN14HardwareSerial5writeEh>
     488:	10 e0       	ldi	r17, 0x00	; 0
     48a:	b8 01       	movw	r22, r16
     48c:	6d 5f       	subi	r22, 0xFD	; 253
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	86 eb       	ldi	r24, 0xB6	; 182
     492:	93 e0       	ldi	r25, 0x03	; 3
     494:	f2 de       	rcall	.-540    	; 0x27a <_ZN14HardwareSerial5writeEi>
     496:	63 e0       	ldi	r22, 0x03	; 3
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	86 eb       	ldi	r24, 0xB6	; 182
     49c:	93 e0       	ldi	r25, 0x03	; 3
     49e:	ed de       	rcall	.-550    	; 0x27a <_ZN14HardwareSerial5writeEi>
     4a0:	6e 2d       	mov	r22, r14
     4a2:	86 eb       	ldi	r24, 0xB6	; 182
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	44 d5       	rcall	.+2696   	; 0xf30 <_ZN14HardwareSerial5writeEh>
     4a8:	a8 01       	movw	r20, r16
     4aa:	b6 01       	movw	r22, r12
     4ac:	86 eb       	ldi	r24, 0xB6	; 182
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	4a d7       	rcall	.+3732   	; 0x1346 <_ZN5Print5writeEPKhj>
     4b2:	df 0d       	add	r29, r15
     4b4:	cd 0f       	add	r28, r29
     4b6:	c0 95       	com	r28
     4b8:	6c 2f       	mov	r22, r28
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	86 eb       	ldi	r24, 0xB6	; 182
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	dc de       	rcall	.-584    	; 0x27a <_ZN14HardwareSerial5writeEi>
     4c2:	86 eb       	ldi	r24, 0xB6	; 182
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	80 d5       	rcall	.+2816   	; 0xfc8 <_ZN14HardwareSerial5flushEv>
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <delay>

000004f4 <_Z9moveSpeedhii>:
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <_Z9moveSpeedhii+0xa>
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	8b 01       	movw	r16, r22
     506:	9c ef       	ldi	r25, 0xFC	; 252
     508:	98 0f       	add	r25, r24
     50a:	92 30       	cpi	r25, 0x02	; 2
     50c:	58 f4       	brcc	.+22     	; 0x524 <_Z9moveSpeedhii+0x30>
     50e:	64 3e       	cpi	r22, 0xE4	; 228
     510:	72 40       	sbci	r23, 0x02	; 2
     512:	14 f4       	brge	.+4      	; 0x518 <_Z9moveSpeedhii+0x24>
     514:	04 ee       	ldi	r16, 0xE4	; 228
     516:	12 e0       	ldi	r17, 0x02	; 2
     518:	05 3a       	cpi	r16, 0xA5	; 165
     51a:	96 e0       	ldi	r25, 0x06	; 6
     51c:	19 07       	cpc	r17, r25
     51e:	14 f0       	brlt	.+4      	; 0x524 <_Z9moveSpeedhii+0x30>
     520:	04 ea       	ldi	r16, 0xA4	; 164
     522:	16 e0       	ldi	r17, 0x06	; 6
     524:	09 83       	std	Y+1, r16	; 0x01
     526:	1a 83       	std	Y+2, r17	; 0x02
     528:	4b 83       	std	Y+3, r20	; 0x03
     52a:	5c 83       	std	Y+4, r21	; 0x04
     52c:	24 e0       	ldi	r18, 0x04	; 4
     52e:	ae 01       	movw	r20, r28
     530:	4f 5f       	subi	r20, 0xFF	; 255
     532:	5f 4f       	sbci	r21, 0xFF	; 255
     534:	6e e1       	ldi	r22, 0x1E	; 30
     536:	78 df       	rcall	.-272    	; 0x428 <_Z10writeServohhPhh>
     538:	10 93 10 03 	sts	0x0310, r17	; 0x800310 <currPos+0x1>
     53c:	00 93 0f 03 	sts	0x030F, r16	; 0x80030f <currPos>
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	08 95       	ret

00000552 <_Z10setEndlesshb.part.0>:
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <_Z10setEndlesshb.part.0+0x6>
     558:	1f 92       	push	r1
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	19 82       	std	Y+1, r1	; 0x01
     560:	1a 82       	std	Y+2, r1	; 0x02
     562:	1b 82       	std	Y+3, r1	; 0x03
     564:	1c 82       	std	Y+4, r1	; 0x04
     566:	24 e0       	ldi	r18, 0x04	; 4
     568:	ae 01       	movw	r20, r28
     56a:	4f 5f       	subi	r20, 0xFF	; 255
     56c:	5f 4f       	sbci	r21, 0xFF	; 255
     56e:	66 e0       	ldi	r22, 0x06	; 6
     570:	5b df       	rcall	.-330    	; 0x428 <_Z10writeServohhPhh>
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <_Z10setEndlesshb>:
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	00 d0       	rcall	.+0      	; 0x586 <_Z10setEndlesshb+0x6>
     586:	1f 92       	push	r1
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	66 23       	and	r22, r22
     58e:	11 f0       	breq	.+4      	; 0x594 <_Z10setEndlesshb+0x14>
     590:	e0 df       	rcall	.-64     	; 0x552 <_Z10setEndlesshb.part.0>
     592:	0e c0       	rjmp	.+28     	; 0x5b0 <_Z10setEndlesshb+0x30>
     594:	94 ee       	ldi	r25, 0xE4	; 228
     596:	99 83       	std	Y+1, r25	; 0x01
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	94 ea       	ldi	r25, 0xA4	; 164
     59e:	9b 83       	std	Y+3, r25	; 0x03
     5a0:	96 e0       	ldi	r25, 0x06	; 6
     5a2:	9c 83       	std	Y+4, r25	; 0x04
     5a4:	24 e0       	ldi	r18, 0x04	; 4
     5a6:	ae 01       	movw	r20, r28
     5a8:	4f 5f       	subi	r20, 0xFF	; 255
     5aa:	5f 4f       	sbci	r21, 0xFF	; 255
     5ac:	66 e0       	ldi	r22, 0x06	; 6
     5ae:	3c df       	rcall	.-392    	; 0x428 <_Z10writeServohhPhh>
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <_Z12clearEndlessh>:
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	df cf       	rjmp	.-66     	; 0x580 <_Z10setEndlesshb>

000005c2 <__vector_9>:
     5c2:	1f 92       	push	r1
     5c4:	0f 92       	push	r0
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	0b b6       	in	r0, 0x3b	; 59
     5ce:	0f 92       	push	r0
     5d0:	2f 93       	push	r18
     5d2:	3f 93       	push	r19
     5d4:	4f 93       	push	r20
     5d6:	5f 93       	push	r21
     5d8:	6f 93       	push	r22
     5da:	7f 93       	push	r23
     5dc:	8f 93       	push	r24
     5de:	9f 93       	push	r25
     5e0:	af 93       	push	r26
     5e2:	bf 93       	push	r27
     5e4:	ef 93       	push	r30
     5e6:	ff 93       	push	r31
     5e8:	18 9b       	sbis	0x03, 0	; 3
     5ea:	1d c0       	rjmp	.+58     	; 0x626 <__vector_9+0x64>
     5ec:	2f 9a       	sbi	0x05, 7	; 5
     5ee:	18 9b       	sbis	0x03, 0	; 3
     5f0:	19 c0       	rjmp	.+50     	; 0x624 <__vector_9+0x62>
     5f2:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <currPos>
     5f6:	70 91 10 03 	lds	r23, 0x0310	; 0x800310 <currPos+0x1>
     5fa:	65 3e       	cpi	r22, 0xE5	; 229
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	78 07       	cpc	r23, r24
     600:	1c f0       	brlt	.+6      	; 0x608 <__vector_9+0x46>
     602:	61 50       	subi	r22, 0x01	; 1
     604:	71 09       	sbc	r23, r1
     606:	02 c0       	rjmp	.+4      	; 0x60c <__vector_9+0x4a>
     608:	64 ee       	ldi	r22, 0xE4	; 228
     60a:	72 e0       	ldi	r23, 0x02	; 2
     60c:	44 e1       	ldi	r20, 0x14	; 20
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     614:	6f df       	rcall	.-290    	; 0x4f4 <_Z9moveSpeedhii>
     616:	68 ec       	ldi	r22, 0xC8	; 200
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <delay>
     622:	e5 cf       	rjmp	.-54     	; 0x5ee <__vector_9+0x2c>
     624:	2f 98       	cbi	0x05, 7	; 5
     626:	19 9b       	sbis	0x03, 1	; 3
     628:	1c c0       	rjmp	.+56     	; 0x662 <__vector_9+0xa0>
     62a:	2f 9a       	sbi	0x05, 7	; 5
     62c:	19 9b       	sbis	0x03, 1	; 3
     62e:	18 c0       	rjmp	.+48     	; 0x660 <__vector_9+0x9e>
     630:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <currPos>
     634:	70 91 10 03 	lds	r23, 0x0310	; 0x800310 <currPos+0x1>
     638:	64 3a       	cpi	r22, 0xA4	; 164
     63a:	86 e0       	ldi	r24, 0x06	; 6
     63c:	78 07       	cpc	r23, r24
     63e:	1c f4       	brge	.+6      	; 0x646 <__vector_9+0x84>
     640:	6f 5f       	subi	r22, 0xFF	; 255
     642:	7f 4f       	sbci	r23, 0xFF	; 255
     644:	02 c0       	rjmp	.+4      	; 0x64a <__vector_9+0x88>
     646:	64 ea       	ldi	r22, 0xA4	; 164
     648:	76 e0       	ldi	r23, 0x06	; 6
     64a:	44 e1       	ldi	r20, 0x14	; 20
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     652:	50 df       	rcall	.-352    	; 0x4f4 <_Z9moveSpeedhii>
     654:	68 ec       	ldi	r22, 0xC8	; 200
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	fd d7       	rcall	.+4090   	; 0x1658 <delay>
     65e:	e6 cf       	rjmp	.-52     	; 0x62c <__vector_9+0x6a>
     660:	2f 98       	cbi	0x05, 7	; 5
     662:	1a 9b       	sbis	0x03, 2	; 3
     664:	0b c0       	rjmp	.+22     	; 0x67c <__vector_9+0xba>
     666:	1f 9a       	sbi	0x03, 7	; 3
     668:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     66c:	85 30       	cpi	r24, 0x05	; 5
     66e:	10 f4       	brcc	.+4      	; 0x674 <__vector_9+0xb2>
     670:	8f 5f       	subi	r24, 0xFF	; 255
     672:	01 c0       	rjmp	.+2      	; 0x676 <__vector_9+0xb4>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <id>
     67a:	a1 df       	rcall	.-190    	; 0x5be <_Z12clearEndlessh>
     67c:	ff 91       	pop	r31
     67e:	ef 91       	pop	r30
     680:	bf 91       	pop	r27
     682:	af 91       	pop	r26
     684:	9f 91       	pop	r25
     686:	8f 91       	pop	r24
     688:	7f 91       	pop	r23
     68a:	6f 91       	pop	r22
     68c:	5f 91       	pop	r21
     68e:	4f 91       	pop	r20
     690:	3f 91       	pop	r19
     692:	2f 91       	pop	r18
     694:	0f 90       	pop	r0
     696:	0b be       	out	0x3b, r0	; 59
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <_Z10writeServohhh>:
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	c8 2f       	mov	r28, r24
     6aa:	d6 2f       	mov	r29, r22
     6ac:	14 2f       	mov	r17, r20
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	c8 d7       	rcall	.+3984   	; 0x1658 <delay>
     6c8:	6f ef       	ldi	r22, 0xFF	; 255
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	86 eb       	ldi	r24, 0xB6	; 182
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	d4 dd       	rcall	.-1112   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6d2:	6f ef       	ldi	r22, 0xFF	; 255
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	86 eb       	ldi	r24, 0xB6	; 182
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	cf dd       	rcall	.-1122   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6dc:	6c 2f       	mov	r22, r28
     6de:	86 eb       	ldi	r24, 0xB6	; 182
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	26 d4       	rcall	.+2124   	; 0xf30 <_ZN14HardwareSerial5writeEh>
     6e4:	64 e0       	ldi	r22, 0x04	; 4
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	86 eb       	ldi	r24, 0xB6	; 182
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	c6 dd       	rcall	.-1140   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6ee:	63 e0       	ldi	r22, 0x03	; 3
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	86 eb       	ldi	r24, 0xB6	; 182
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	c1 dd       	rcall	.-1150   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6f8:	6d 2f       	mov	r22, r29
     6fa:	86 eb       	ldi	r24, 0xB6	; 182
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	18 d4       	rcall	.+2096   	; 0xf30 <_ZN14HardwareSerial5writeEh>
     700:	61 2f       	mov	r22, r17
     702:	86 eb       	ldi	r24, 0xB6	; 182
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	14 d4       	rcall	.+2088   	; 0xf30 <_ZN14HardwareSerial5writeEh>
     708:	19 5f       	subi	r17, 0xF9	; 249
     70a:	d1 0f       	add	r29, r17
     70c:	cd 0f       	add	r28, r29
     70e:	c0 95       	com	r28
     710:	6c 2f       	mov	r22, r28
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	86 eb       	ldi	r24, 0xB6	; 182
     716:	93 e0       	ldi	r25, 0x03	; 3
     718:	b0 dd       	rcall	.-1184   	; 0x27a <_ZN14HardwareSerial5writeEi>
     71a:	86 eb       	ldi	r24, 0xB6	; 182
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	54 d4       	rcall	.+2216   	; 0xfc8 <_ZN14HardwareSerial5flushEv>
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	8c c7       	rjmp	.+3864   	; 0x1658 <delay>

00000740 <_Z9readServohhh>:
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	c8 2f       	mov	r28, r24
     748:	d6 2f       	mov	r29, r22
     74a:	14 2f       	mov	r17, r20
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	79 d7       	rcall	.+3826   	; 0x1658 <delay>
     766:	6f ef       	ldi	r22, 0xFF	; 255
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	86 eb       	ldi	r24, 0xB6	; 182
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	85 dd       	rcall	.-1270   	; 0x27a <_ZN14HardwareSerial5writeEi>
     770:	6f ef       	ldi	r22, 0xFF	; 255
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	86 eb       	ldi	r24, 0xB6	; 182
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	80 dd       	rcall	.-1280   	; 0x27a <_ZN14HardwareSerial5writeEi>
     77a:	6c 2f       	mov	r22, r28
     77c:	86 eb       	ldi	r24, 0xB6	; 182
     77e:	93 e0       	ldi	r25, 0x03	; 3
     780:	d7 d3       	rcall	.+1966   	; 0xf30 <_ZN14HardwareSerial5writeEh>
     782:	64 e0       	ldi	r22, 0x04	; 4
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	86 eb       	ldi	r24, 0xB6	; 182
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	77 dd       	rcall	.-1298   	; 0x27a <_ZN14HardwareSerial5writeEi>
     78c:	62 e0       	ldi	r22, 0x02	; 2
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	86 eb       	ldi	r24, 0xB6	; 182
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	72 dd       	rcall	.-1308   	; 0x27a <_ZN14HardwareSerial5writeEi>
     796:	6d 2f       	mov	r22, r29
     798:	86 eb       	ldi	r24, 0xB6	; 182
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	c9 d3       	rcall	.+1938   	; 0xf30 <_ZN14HardwareSerial5writeEh>
     79e:	61 2f       	mov	r22, r17
     7a0:	86 eb       	ldi	r24, 0xB6	; 182
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	c5 d3       	rcall	.+1930   	; 0xf30 <_ZN14HardwareSerial5writeEh>
     7a6:	1a 5f       	subi	r17, 0xFA	; 250
     7a8:	d1 0f       	add	r29, r17
     7aa:	cd 0f       	add	r28, r29
     7ac:	c0 95       	com	r28
     7ae:	6c 2f       	mov	r22, r28
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	86 eb       	ldi	r24, 0xB6	; 182
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	61 dd       	rcall	.-1342   	; 0x27a <_ZN14HardwareSerial5writeEi>
     7b8:	86 eb       	ldi	r24, 0xB6	; 182
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	05 d4       	rcall	.+2058   	; 0xfc8 <_ZN14HardwareSerial5flushEv>
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	83 e0       	ldi	r24, 0x03	; 3
     7ca:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <digitalWrite>
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	3d c7       	rjmp	.+3706   	; 0x1658 <delay>

000007de <_Z11printBufferv>:
 *  |0xFF|0xFF|ID|LENGTH|INSTRUCTION|PARAM_1|...|PARAM_N|CHECKSUM
 */
void printBuffer() {
	//delay(20);
	//byte start_1, start_2, servo_id, msg_length, er_byte, chck_sum;
	Serial.print("## Start: ");
     7de:	67 e5       	ldi	r22, 0x57	; 87
     7e0:	72 e0       	ldi	r23, 0x02	; 2
     7e2:	89 e1       	ldi	r24, 0x19	; 25
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	ee d5       	rcall	.+3036   	; 0x13c4 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     7e8:	86 eb       	ldi	r24, 0xB6	; 182
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	07 d3       	rcall	.+1550   	; 0xdfc <_ZN14HardwareSerial9availableEv>
     7ee:	4a e0       	ldi	r20, 0x0A	; 10
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	bc 01       	movw	r22, r24
     7f4:	89 e1       	ldi	r24, 0x19	; 25
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	9e d6       	rcall	.+3388   	; 0x1536 <_ZN5Print5printEii>
	Serial.println(" ####################");
     7fa:	62 e6       	ldi	r22, 0x62	; 98
     7fc:	72 e0       	ldi	r23, 0x02	; 2
     7fe:	89 e1       	ldi	r24, 0x19	; 25
     800:	93 e0       	ldi	r25, 0x03	; 3
	while(Serial1.available()){
     802:	eb d5       	rcall	.+3030   	; 0x13da <_ZN5Print7printlnEPKc>
     804:	86 eb       	ldi	r24, 0xB6	; 182
     806:	93 e0       	ldi	r25, 0x03	; 3
     808:	f9 d2       	rcall	.+1522   	; 0xdfc <_ZN14HardwareSerial9availableEv>
     80a:	89 2b       	or	r24, r25
		
		Serial.print(Serial1.available());
     80c:	e9 f0       	breq	.+58     	; 0x848 <_Z11printBufferv+0x6a>
     80e:	86 eb       	ldi	r24, 0xB6	; 182
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	f4 d2       	rcall	.+1512   	; 0xdfc <_ZN14HardwareSerial9availableEv>
     814:	4a e0       	ldi	r20, 0x0A	; 10
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	bc 01       	movw	r22, r24
     81a:	89 e1       	ldi	r24, 0x19	; 25
     81c:	93 e0       	ldi	r25, 0x03	; 3
		Serial.print(", ");
     81e:	8b d6       	rcall	.+3350   	; 0x1536 <_ZN5Print5printEii>
     820:	68 e7       	ldi	r22, 0x78	; 120
     822:	72 e0       	ldi	r23, 0x02	; 2
     824:	89 e1       	ldi	r24, 0x19	; 25
     826:	93 e0       	ldi	r25, 0x03	; 3
		Serial.println(Serial1.read());
     828:	cd d5       	rcall	.+2970   	; 0x13c4 <_ZN5Print5printEPKc>
     82a:	86 eb       	ldi	r24, 0xB6	; 182
     82c:	93 e0       	ldi	r25, 0x03	; 3
     82e:	00 d3       	rcall	.+1536   	; 0xe30 <_ZN14HardwareSerial4readEv>
     830:	4a e0       	ldi	r20, 0x0A	; 10
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	bc 01       	movw	r22, r24
     836:	89 e1       	ldi	r24, 0x19	; 25
     838:	93 e0       	ldi	r25, 0x03	; 3
		delay(1);
     83a:	83 d6       	rcall	.+3334   	; 0x1542 <_ZN5Print7printlnEii>
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
	//delay(20);
	//byte start_1, start_2, servo_id, msg_length, er_byte, chck_sum;
	Serial.print("## Start: ");
	Serial.print(Serial1.available());
	Serial.println(" ####################");
	while(Serial1.available()){
     844:	09 d7       	rcall	.+3602   	; 0x1658 <delay>
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	Serial.println("## End #####################");
     846:	de cf       	rjmp	.-68     	; 0x804 <_Z11printBufferv+0x26>
     848:	6b e7       	ldi	r22, 0x7B	; 123
     84a:	72 e0       	ldi	r23, 0x02	; 2
     84c:	89 e1       	ldi	r24, 0x19	; 25
     84e:	93 e0       	ldi	r25, 0x03	; 3
     850:	c4 c5       	rjmp	.+2952   	; 0x13da <_ZN5Print7printlnEPKc>

00000852 <setup>:

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
	setupSwitches();					// Setup the arm control switches
     852:	b3 dd       	rcall	.-1178   	; 0x3ba <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
     854:	8e ef       	ldi	r24, 0xFE	; 254
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     85c:	8e ef       	ldi	r24, 0xFE	; 254
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     864:	8e ef       	ldi	r24, 0xFE	; 254
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	ee d7       	rcall	.+4060   	; 0x184e <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	83 e0       	ldi	r24, 0x03	; 3
     876:	eb d7       	rcall	.+4054   	; 0x184e <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     878:	26 e0       	ldi	r18, 0x06	; 6
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	51 ee       	ldi	r21, 0xE1	; 225
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	89 e1       	ldi	r24, 0x19	; 25
     884:	93 e0       	ldi	r25, 0x03	; 3
     886:	c1 d3       	rcall	.+1922   	; 0x100a <_ZN14HardwareSerial5beginEmh>
     888:	26 e0       	ldi	r18, 0x06	; 6
     88a:	47 e3       	ldi	r20, 0x37	; 55
     88c:	5f ed       	ldi	r21, 0xDF	; 223
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	86 eb       	ldi	r24, 0xB6	; 182
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	b9 d3       	rcall	.+1906   	; 0x100a <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
     898:	86 eb       	ldi	r24, 0xB6	; 182
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	95 d3       	rcall	.+1834   	; 0xfc8 <_ZN14HardwareSerial5flushEv>
     89e:	40 e0       	ldi	r20, 0x00	; 0

	lcd.setCursor(0,0);
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	8e ef       	ldi	r24, 0xFE	; 254
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN17LiquidCrystal_I2C9setCursorEhh>
     8aa:	68 e9       	ldi	r22, 0x98	; 152
	lcd.print("sID:");
     8ac:	72 e0       	ldi	r23, 0x02	; 2
     8ae:	8e ef       	ldi	r24, 0xFE	; 254
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	88 d5       	rcall	.+2832   	; 0x13c4 <_ZN5Print5printEPKc>
     8b4:	41 e0       	ldi	r20, 0x01	; 1
	lcd.setCursor(0,1);
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	8e ef       	ldi	r24, 0xFE	; 254
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("deg:");
     8c0:	6d e9       	ldi	r22, 0x9D	; 157
     8c2:	72 e0       	ldi	r23, 0x02	; 2
     8c4:	8e ef       	ldi	r24, 0xFE	; 254
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	7d d5       	rcall	.+2810   	; 0x13c4 <_ZN5Print5printEPKc>
     8ca:	42 e0       	ldi	r20, 0x02	; 2
	lcd.setCursor(0,2);
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	8e ef       	ldi	r24, 0xFE	; 254
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("rpm:");
     8d6:	62 ea       	ldi	r22, 0xA2	; 162
     8d8:	72 e0       	ldi	r23, 0x02	; 2
     8da:	8e ef       	ldi	r24, 0xFE	; 254
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	72 d5       	rcall	.+2788   	; 0x13c4 <_ZN5Print5printEPKc>
     8e0:	43 e0       	ldi	r20, 0x03	; 3
	lcd.setCursor(0,3);
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	8e ef       	ldi	r24, 0xFE	; 254
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("ld%:");
     8ec:	67 ea       	ldi	r22, 0xA7	; 167
     8ee:	72 e0       	ldi	r23, 0x02	; 2
     8f0:	8e ef       	ldi	r24, 0xFE	; 254
     8f2:	92 e0       	ldi	r25, 0x02	; 2
	
	clearEndless(id);
     8f4:	67 d5       	rcall	.+2766   	; 0x13c4 <_ZN5Print5printEPKc>
     8f6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>

	writeServo(5,0x18,1);
     8fa:	61 de       	rcall	.-830    	; 0x5be <_Z12clearEndlessh>
     8fc:	41 e0       	ldi	r20, 0x01	; 1
     8fe:	68 e1       	ldi	r22, 0x18	; 24
     900:	85 e0       	ldi	r24, 0x05	; 5
	readServo(id, 0x18, 8);
     902:	cf de       	rcall	.-610    	; 0x6a2 <_Z10writeServohhh>
     904:	48 e0       	ldi	r20, 0x08	; 8
     906:	68 e1       	ldi	r22, 0x18	; 24
     908:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
	printBuffer();
     90c:	19 df       	rcall	.-462    	; 0x740 <_Z9readServohhh>
     90e:	67 df       	rcall	.-306    	; 0x7de <_Z11printBufferv>
	delay(2);
     910:	62 e0       	ldi	r22, 0x02	; 2
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	9f c6       	rjmp	.+3390   	; 0x1658 <delay>

0000091a <_Z12printDataLCDv>:
     91a:	af 92       	push	r10
void printSerial(String title, int value) {
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
void printDataLCD() {
     91c:	bf 92       	push	r11
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
	delay(10);
     92e:	6a e0       	ldi	r22, 0x0A	; 10
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	90 d6       	rcall	.+3360   	; 0x1658 <delay>
	int lock;
	int punch;
	int current;
	bool speedDirection, loadDirection;
	byte i = 0;
	int available = Serial1.available();
     938:	86 eb       	ldi	r24, 0xB6	; 182
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	5f d2       	rcall	.+1214   	; 0xdfc <_ZN14HardwareSerial9availableEv>
	if (available > 0){
     93e:	18 16       	cp	r1, r24
     940:	19 06       	cpc	r1, r25
     942:	0c f0       	brlt	.+2      	; 0x946 <_Z12printDataLCDv+0x2c>
     944:	28 c1       	rjmp	.+592    	; 0xb96 <_Z12printDataLCDv+0x27c>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     946:	86 eb       	ldi	r24, 0xB6	; 182
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	72 d2       	rcall	.+1252   	; 0xe30 <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     94c:	8f 3f       	cpi	r24, 0xFF	; 255
     94e:	91 05       	cpc	r25, r1
     950:	09 f0       	breq	.+2      	; 0x954 <_Z12printDataLCDv+0x3a>
     952:	21 c1       	rjmp	.+578    	; 0xb96 <_Z12printDataLCDv+0x27c>
     954:	86 eb       	ldi	r24, 0xB6	; 182
     956:	93 e0       	ldi	r25, 0x03	; 3
     958:	6b d2       	rcall	.+1238   	; 0xe30 <_ZN14HardwareSerial4readEv>
     95a:	8f 3f       	cpi	r24, 0xFF	; 255
     95c:	91 05       	cpc	r25, r1
     95e:	09 f0       	breq	.+2      	; 0x962 <_Z12printDataLCDv+0x48>
			servoID = Serial1.read(); // servo ID
     960:	1a c1       	rjmp	.+564    	; 0xb96 <_Z12printDataLCDv+0x27c>
     962:	86 eb       	ldi	r24, 0xB6	; 182
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	64 d2       	rcall	.+1224   	; 0xe30 <_ZN14HardwareSerial4readEv>
			msgLength = Serial1.read(); // msg Length
     968:	7c 01       	movw	r14, r24
     96a:	86 eb       	ldi	r24, 0xB6	; 182
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	60 d2       	rcall	.+1216   	; 0xe30 <_ZN14HardwareSerial4readEv>
			error_byte = Serial1.read();
     970:	d8 2f       	mov	r29, r24
     972:	86 eb       	ldi	r24, 0xB6	; 182
     974:	93 e0       	ldi	r25, 0x03	; 3
     976:	5c d2       	rcall	.+1208   	; 0xe30 <_ZN14HardwareSerial4readEv>
     978:	c8 2f       	mov	r28, r24
			error_byte_old = error_byte ? error_byte : error_byte_old;
     97a:	81 11       	cpse	r24, r1
     97c:	03 c0       	rjmp	.+6      	; 0x984 <_Z12printDataLCDv+0x6a>
     97e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <error_byte_old>
     982:	01 c0       	rjmp	.+2      	; 0x986 <_Z12printDataLCDv+0x6c>
     984:	8c 2f       	mov	r24, r28
     986:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <error_byte_old>
			
			lcd.setCursor(7,0);
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	67 e0       	ldi	r22, 0x07	; 7
     98e:	8e ef       	ldi	r24, 0xFE	; 254
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN17LiquidCrystal_I2C9setCursorEhh>
     996:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <error_counter>
     99a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <error_counter+0x1>
			if (error_byte || error_counter) {	
     99e:	c1 11       	cpse	r28, r1
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <_Z12printDataLCDv+0x8c>
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	d1 f0       	breq	.+52     	; 0x9da <_Z12printDataLCDv+0xc0>
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     9a6:	8b 30       	cpi	r24, 0x0B	; 11
     9a8:	91 05       	cpc	r25, r1
     9aa:	14 f4       	brge	.+4      	; 0x9b0 <_Z12printDataLCDv+0x96>
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <_Z12printDataLCDv+0x9a>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <error_counter+0x1>
     9b8:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <error_counter>
				lcd.print("ERROR:");
     9bc:	6c ea       	ldi	r22, 0xAC	; 172
     9be:	72 e0       	ldi	r23, 0x02	; 2
     9c0:	8e ef       	ldi	r24, 0xFE	; 254
     9c2:	92 e0       	ldi	r25, 0x02	; 2
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
     9c4:	ff d4       	rcall	.+2558   	; 0x13c4 <_ZN5Print5printEPKc>
     9c6:	4a e0       	ldi	r20, 0x0A	; 10
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <error_byte_old>
     9ce:	8e ef       	ldi	r24, 0xFE	; 254
     9d0:	92 e0       	ldi	r25, 0x02	; 2
				lcd.print("   ");
     9d2:	66 d5       	rcall	.+2764   	; 0x14a0 <_ZN5Print5printEhi>
     9d4:	6a eb       	ldi	r22, 0xBA	; 186
     9d6:	72 e0       	ldi	r23, 0x02	; 2
			} else {
				lcd.print("          ");
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <_Z12printDataLCDv+0xc4>
     9da:	63 eb       	ldi	r22, 0xB3	; 179
     9dc:	72 e0       	ldi	r23, 0x02	; 2
     9de:	8e ef       	ldi	r24, 0xFE	; 254
     9e0:	92 e0       	ldi	r25, 0x02	; 2
			}
			
			if (msgLength > 2) {
     9e2:	f0 d4       	rcall	.+2528   	; 0x13c4 <_ZN5Print5printEPKc>
     9e4:	d3 30       	cpi	r29, 0x03	; 3
     9e6:	08 f4       	brcc	.+2      	; 0x9ea <_Z12printDataLCDv+0xd0>
				position = Serial1.read();
     9e8:	a9 c0       	rjmp	.+338    	; 0xb3c <_Z12printDataLCDv+0x222>
     9ea:	86 eb       	ldi	r24, 0xB6	; 182
     9ec:	93 e0       	ldi	r25, 0x03	; 3
     9ee:	20 d2       	rcall	.+1088   	; 0xe30 <_ZN14HardwareSerial4readEv>
     9f0:	ec 01       	movw	r28, r24
				position = (Serial1.read() * 255) + position;
     9f2:	86 eb       	ldi	r24, 0xB6	; 182
     9f4:	93 e0       	ldi	r25, 0x03	; 3
     9f6:	1c d2       	rcall	.+1080   	; 0xe30 <_ZN14HardwareSerial4readEv>
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	ac 01       	movw	r20, r24
     9fc:	24 9f       	mul	r18, r20
     9fe:	c0 01       	movw	r24, r0
     a00:	25 9f       	mul	r18, r21
     a02:	90 0d       	add	r25, r0
     a04:	11 24       	eor	r1, r1
     a06:	6c 01       	movw	r12, r24
     a08:	cc 0e       	add	r12, r28
     a0a:	dd 1e       	adc	r13, r29
     a0c:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <position_old>
				rotations = position_old > position ? rotations + 1 : rotations;
     a10:	30 91 14 03 	lds	r19, 0x0314	; 0x800314 <position_old+0x1>
     a14:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <rotations>
     a18:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <rotations+0x1>
     a1c:	c2 16       	cp	r12, r18
     a1e:	d3 06       	cpc	r13, r19
     a20:	0c f4       	brge	.+2      	; 0xa24 <_Z12printDataLCDv+0x10a>
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <rotations+0x1>
     a28:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <rotations>
				position_old = position;
     a2c:	d0 92 14 03 	sts	0x0314, r13	; 0x800314 <position_old+0x1>
     a30:	c0 92 13 03 	sts	0x0313, r12	; 0x800313 <position_old>
				
				//Serial.println(position);
				speed = Serial1.read();
     a34:	86 eb       	ldi	r24, 0xB6	; 182
     a36:	93 e0       	ldi	r25, 0x03	; 3
     a38:	fb d1       	rcall	.+1014   	; 0xe30 <_ZN14HardwareSerial4readEv>
     a3a:	8c 01       	movw	r16, r24
				speed = (Serial1.read() * 255) + speed;
     a3c:	86 eb       	ldi	r24, 0xB6	; 182
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	f7 d1       	rcall	.+1006   	; 0xe30 <_ZN14HardwareSerial4readEv>
     a42:	df ef       	ldi	r29, 0xFF	; 255
     a44:	9c 01       	movw	r18, r24
     a46:	d2 9f       	mul	r29, r18
     a48:	c0 01       	movw	r24, r0
     a4a:	d3 9f       	mul	r29, r19
     a4c:	90 0d       	add	r25, r0
     a4e:	11 24       	eor	r1, r1
     a50:	08 0f       	add	r16, r24
				//Serial.println(speed);
				load = Serial1.read();
     a52:	19 1f       	adc	r17, r25
     a54:	86 eb       	ldi	r24, 0xB6	; 182
     a56:	93 e0       	ldi	r25, 0x03	; 3
     a58:	eb d1       	rcall	.+982    	; 0xe30 <_ZN14HardwareSerial4readEv>
				load = (Serial1.read() * 255) + load;
     a5a:	5c 01       	movw	r10, r24
     a5c:	86 eb       	ldi	r24, 0xB6	; 182
     a5e:	93 e0       	ldi	r25, 0x03	; 3
     a60:	e7 d1       	rcall	.+974    	; 0xe30 <_ZN14HardwareSerial4readEv>
     a62:	ac 01       	movw	r20, r24
     a64:	d4 9f       	mul	r29, r20
     a66:	c0 01       	movw	r24, r0
     a68:	d5 9f       	mul	r29, r21
     a6a:	90 0d       	add	r25, r0
     a6c:	11 24       	eor	r1, r1
				voltage = Serial1.read();
     a6e:	ec 01       	movw	r28, r24
     a70:	ca 0d       	add	r28, r10
     a72:	db 1d       	adc	r29, r11
				temperature = Serial1.read();
     a74:	86 eb       	ldi	r24, 0xB6	; 182
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	db d1       	rcall	.+950    	; 0xe30 <_ZN14HardwareSerial4readEv>
				registered = Serial1.read();
     a7a:	86 eb       	ldi	r24, 0xB6	; 182
     a7c:	93 e0       	ldi	r25, 0x03	; 3
     a7e:	d8 d1       	rcall	.+944    	; 0xe30 <_ZN14HardwareSerial4readEv>
				moving = Serial1.read();
     a80:	86 eb       	ldi	r24, 0xB6	; 182
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	d5 d1       	rcall	.+938    	; 0xe30 <_ZN14HardwareSerial4readEv>
     a86:	86 eb       	ldi	r24, 0xB6	; 182
				lock = Serial1.read();
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	d2 d1       	rcall	.+932    	; 0xe30 <_ZN14HardwareSerial4readEv>
     a8c:	86 eb       	ldi	r24, 0xB6	; 182
     a8e:	93 e0       	ldi	r25, 0x03	; 3
				punch = Serial1.read();		
     a90:	cf d1       	rcall	.+926    	; 0xe30 <_ZN14HardwareSerial4readEv>
     a92:	86 eb       	ldi	r24, 0xB6	; 182
     a94:	93 e0       	ldi	r25, 0x03	; 3
     a96:	cc d1       	rcall	.+920    	; 0xe30 <_ZN14HardwareSerial4readEv>
				punch = (Serial1.read() * 255) + punch;
     a98:	86 eb       	ldi	r24, 0xB6	; 182
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	c9 d1       	rcall	.+914    	; 0xe30 <_ZN14HardwareSerial4readEv>
     a9e:	86 eb       	ldi	r24, 0xB6	; 182
				current = Serial1.read();
     aa0:	93 e0       	ldi	r25, 0x03	; 3
     aa2:	c6 d1       	rcall	.+908    	; 0xe30 <_ZN14HardwareSerial4readEv>
     aa4:	86 eb       	ldi	r24, 0xB6	; 182
     aa6:	93 e0       	ldi	r25, 0x03	; 3
				current = (Serial1.read() * 255) + current;
     aa8:	c3 d1       	rcall	.+902    	; 0xe30 <_ZN14HardwareSerial4readEv>
     aaa:	01 15       	cp	r16, r1
     aac:	54 e0       	ldi	r21, 0x04	; 4
				//Serial.println(load);
				if (speed > 0x3FF) {
     aae:	15 07       	cpc	r17, r21
     ab0:	24 f0       	brlt	.+8      	; 0xaba <_Z12printDataLCDv+0x1a0>
     ab2:	14 50       	subi	r17, 0x04	; 4
					speedDirection = CW;
					speed = speed - 0x400;
     ab4:	aa 24       	eor	r10, r10
				punch = (Serial1.read() * 255) + punch;
				current = Serial1.read();
				current = (Serial1.read() * 255) + current;
				//Serial.println(load);
				if (speed > 0x3FF) {
					speedDirection = CW;
     ab6:	a3 94       	inc	r10
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <_Z12printDataLCDv+0x1a2>
					speed = speed - 0x400;
					} else {
					speedDirection = CCW;
				}
				if (load > 0x3FF) {
     aba:	a1 2c       	mov	r10, r1
     abc:	c1 15       	cp	r28, r1
     abe:	84 e0       	ldi	r24, 0x04	; 4
					loadDirection = CW;
					load = load - 0x400;
     ac0:	d8 07       	cpc	r29, r24
					speed = speed - 0x400;
					} else {
					speedDirection = CCW;
				}
				if (load > 0x3FF) {
					loadDirection = CW;
     ac2:	24 f0       	brlt	.+8      	; 0xacc <_Z12printDataLCDv+0x1b2>
     ac4:	d4 50       	subi	r29, 0x04	; 4
					load = load - 0x400;
					} else {
					loadDirection = CCW;
     ac6:	bb 24       	eor	r11, r11

				//Serial.println("================");
				//lcd.clear();
				//char buffer[16];
				//sprintf(buffer, "Servo ID: %d", servoID);
				printLCD1(LCD_COL1, 0, servoID);
     ac8:	b3 94       	inc	r11
     aca:	01 c0       	rjmp	.+2      	; 0xace <_Z12printDataLCDv+0x1b4>
     acc:	b1 2c       	mov	r11, r1
     ace:	a7 01       	movw	r20, r14
     ad0:	55 27       	eor	r21, r21
				printLCD3(LCD_COL1, 1, position * MX_PRESENT_POSITION_DEGREE);
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	d8 db       	rcall	.-2128   	; 0x288 <_Z9printLCD1hhi>
     ad8:	b6 01       	movw	r22, r12
     ada:	dd 0c       	add	r13, r13
     adc:	88 0b       	sbc	r24, r24
     ade:	99 0b       	sbc	r25, r25
     ae0:	9e d0       	rcall	.+316    	; 0xc1e <__floatsisf>
     ae2:	28 e5       	ldi	r18, 0x58	; 88
     ae4:	39 e3       	ldi	r19, 0x39	; 57
     ae6:	44 eb       	ldi	r20, 0xB4	; 180
     ae8:	5d e3       	ldi	r21, 0x3D	; 61
     aea:	fd d0       	rcall	.+506    	; 0xce6 <__mulsf3>
     aec:	65 d0       	rcall	.+202    	; 0xbb8 <__fixsfsi>
     aee:	ab 01       	movw	r20, r22
     af0:	61 e0       	ldi	r22, 0x01	; 1
				lcd.print((char)CH_DEG);
     af2:	84 e0       	ldi	r24, 0x04	; 4
     af4:	fa db       	rcall	.-2060   	; 0x2ea <_Z9printLCD3hhi>
     af6:	6f ed       	ldi	r22, 0xDF	; 223
     af8:	8e ef       	ldi	r24, 0xFE	; 254
				printLCD4(LCD_COL2, 1, currPos);
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	64 d4       	rcall	.+2248   	; 0x13c6 <_ZN5Print5printEc>
     afe:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <currPos>
     b02:	50 91 10 03 	lds	r21, 0x0310	; 0x800310 <currPos+0x1>
     b06:	61 e0       	ldi	r22, 0x01	; 1
				// 			lcd.setCursor(LCD_COL2 ,1);
				// 			lcd.print((int)(currPos));
				//lcd.setCursor(10,1);
				//lcd.print(rotations);
				printLCD3(LCD_COL1, 2, speed);
     b08:	8a e0       	ldi	r24, 0x0A	; 10
     b0a:	22 dc       	rcall	.-1980   	; 0x350 <_Z9printLCD4hhi>
     b0c:	a8 01       	movw	r20, r16
     b0e:	62 e0       	ldi	r22, 0x02	; 2
				lcd.print(speedDirection ? (char)CH_ARR : (char)CH_ARL);
     b10:	84 e0       	ldi	r24, 0x04	; 4
     b12:	eb db       	rcall	.-2090   	; 0x2ea <_Z9printLCD3hhi>
     b14:	a1 10       	cpse	r10, r1
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <_Z12printDataLCDv+0x202>
     b18:	6f e7       	ldi	r22, 0x7F	; 127
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <_Z12printDataLCDv+0x204>
     b1c:	6e e7       	ldi	r22, 0x7E	; 126
     b1e:	8e ef       	ldi	r24, 0xFE	; 254
				printLCD3(LCD_COL1, 3, load);
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	51 d4       	rcall	.+2210   	; 0x13c6 <_ZN5Print5printEc>
     b24:	ae 01       	movw	r20, r28
     b26:	63 e0       	ldi	r22, 0x03	; 3
     b28:	84 e0       	ldi	r24, 0x04	; 4
				//lcd.setCursor(LCD_COL1, 3);
				//lcd.print(load);
				lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
     b2a:	df db       	rcall	.-2114   	; 0x2ea <_Z9printLCD3hhi>
     b2c:	b1 10       	cpse	r11, r1
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <_Z12printDataLCDv+0x21a>
     b30:	6f e7       	ldi	r22, 0x7F	; 127
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <_Z12printDataLCDv+0x21c>
     b34:	6e e7       	ldi	r22, 0x7E	; 126
     b36:	8e ef       	ldi	r24, 0xFE	; 254
     b38:	92 e0       	ldi	r25, 0x02	; 2
     b3a:	45 d4       	rcall	.+2186   	; 0x13c6 <_ZN5Print5printEc>
				//printLCD3(LCD_COL2, 3, (45*(current-2048)));
			}
			while(Serial1.available() > 0) {
     b3c:	86 eb       	ldi	r24, 0xB6	; 182
     b3e:	93 e0       	ldi	r25, 0x03	; 3
     b40:	5d d1       	rcall	.+698    	; 0xdfc <_ZN14HardwareSerial9availableEv>
     b42:	18 16       	cp	r1, r24
     b44:	19 06       	cpc	r1, r25
     b46:	24 f4       	brge	.+8      	; 0xb50 <_Z12printDataLCDv+0x236>
     b48:	86 eb       	ldi	r24, 0xB6	; 182
				//Serial.println(Serial1.read());
				Serial1.read();
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	71 d1       	rcall	.+738    	; 0xe30 <_ZN14HardwareSerial4readEv>
     b4e:	f6 cf       	rjmp	.-20     	; 0xb3c <_Z12printDataLCDv+0x222>
     b50:	61 e0       	ldi	r22, 0x01	; 1
			}
			
			delay(1);
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	7f d5       	rcall	.+2814   	; 0x1658 <delay>
     b5a:	40 91 0a 03 	lds	r20, 0x030A	; 0x80030a <cycle_counter>
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
     b5e:	50 91 0b 03 	lds	r21, 0x030B	; 0x80030b <cycle_counter+0x1>
     b62:	40 31       	cpi	r20, 0x10	; 16
     b64:	27 e2       	ldi	r18, 0x27	; 39
     b66:	52 07       	cpc	r21, r18
     b68:	1c f4       	brge	.+6      	; 0xb70 <_Z12printDataLCDv+0x256>
     b6a:	4f 5f       	subi	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <_Z12printDataLCDv+0x25a>
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	50 93 0b 03 	sts	0x030B, r21	; 0x80030b <cycle_counter+0x1>
     b78:	40 93 0a 03 	sts	0x030A, r20	; 0x80030a <cycle_counter>
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	80 e1       	ldi	r24, 0x10	; 16
			printLCD4(16, 0, cycle_counter);
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
		}
	}
}
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	bf 90       	pop	r11
     b92:	af 90       	pop	r10
     b94:	dd cb       	rjmp	.-2118   	; 0x350 <_Z9printLCD4hhi>
     b96:	df 91       	pop	r29
				Serial1.read();
			}
			
			delay(1);
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
			printLCD4(16, 0, cycle_counter);
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
		}
	}
}
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	08 95       	ret

00000bac <loop>:
     bac:	42 e2       	ldi	r20, 0x22	; 34
     bae:	64 e2       	ldi	r22, 0x24	; 36
     bb0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {

	readServo(id, 0x24, 34);
     bb4:	c5 dd       	rcall	.-1142   	; 0x740 <_Z9readServohhh>
	printDataLCD();
     bb6:	b1 ce       	rjmp	.-670    	; 0x91a <_Z12printDataLCDv>

00000bb8 <__fixsfsi>:
     bb8:	04 d0       	rcall	.+8      	; 0xbc2 <__fixunssfsi>
     bba:	68 94       	set
     bbc:	b1 11       	cpse	r27, r1
     bbe:	8d c0       	rjmp	.+282    	; 0xcda <__fp_szero>
     bc0:	08 95       	ret

00000bc2 <__fixunssfsi>:
     bc2:	70 d0       	rcall	.+224    	; 0xca4 <__fp_splitA>
     bc4:	88 f0       	brcs	.+34     	; 0xbe8 <__fixunssfsi+0x26>
     bc6:	9f 57       	subi	r25, 0x7F	; 127
     bc8:	90 f0       	brcs	.+36     	; 0xbee <__fixunssfsi+0x2c>
     bca:	b9 2f       	mov	r27, r25
     bcc:	99 27       	eor	r25, r25
     bce:	b7 51       	subi	r27, 0x17	; 23
     bd0:	a0 f0       	brcs	.+40     	; 0xbfa <__fixunssfsi+0x38>
     bd2:	d1 f0       	breq	.+52     	; 0xc08 <__fixunssfsi+0x46>
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	88 1f       	adc	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	1a f0       	brmi	.+6      	; 0xbe4 <__fixunssfsi+0x22>
     bde:	ba 95       	dec	r27
     be0:	c9 f7       	brne	.-14     	; 0xbd4 <__fixunssfsi+0x12>
     be2:	12 c0       	rjmp	.+36     	; 0xc08 <__fixunssfsi+0x46>
     be4:	b1 30       	cpi	r27, 0x01	; 1
     be6:	81 f0       	breq	.+32     	; 0xc08 <__fixunssfsi+0x46>
     be8:	77 d0       	rcall	.+238    	; 0xcd8 <__fp_zero>
     bea:	b1 e0       	ldi	r27, 0x01	; 1
     bec:	08 95       	ret
     bee:	74 c0       	rjmp	.+232    	; 0xcd8 <__fp_zero>
     bf0:	67 2f       	mov	r22, r23
     bf2:	78 2f       	mov	r23, r24
     bf4:	88 27       	eor	r24, r24
     bf6:	b8 5f       	subi	r27, 0xF8	; 248
     bf8:	39 f0       	breq	.+14     	; 0xc08 <__fixunssfsi+0x46>
     bfa:	b9 3f       	cpi	r27, 0xF9	; 249
     bfc:	cc f3       	brlt	.-14     	; 0xbf0 <__fixunssfsi+0x2e>
     bfe:	86 95       	lsr	r24
     c00:	77 95       	ror	r23
     c02:	67 95       	ror	r22
     c04:	b3 95       	inc	r27
     c06:	d9 f7       	brne	.-10     	; 0xbfe <__fixunssfsi+0x3c>
     c08:	3e f4       	brtc	.+14     	; 0xc18 <__fixunssfsi+0x56>
     c0a:	90 95       	com	r25
     c0c:	80 95       	com	r24
     c0e:	70 95       	com	r23
     c10:	61 95       	neg	r22
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	08 95       	ret

00000c1a <__floatunsisf>:
     c1a:	e8 94       	clt
     c1c:	09 c0       	rjmp	.+18     	; 0xc30 <__floatsisf+0x12>

00000c1e <__floatsisf>:
     c1e:	97 fb       	bst	r25, 7
     c20:	3e f4       	brtc	.+14     	; 0xc30 <__floatsisf+0x12>
     c22:	90 95       	com	r25
     c24:	80 95       	com	r24
     c26:	70 95       	com	r23
     c28:	61 95       	neg	r22
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	8f 4f       	sbci	r24, 0xFF	; 255
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	99 23       	and	r25, r25
     c32:	a9 f0       	breq	.+42     	; 0xc5e <__floatsisf+0x40>
     c34:	f9 2f       	mov	r31, r25
     c36:	96 e9       	ldi	r25, 0x96	; 150
     c38:	bb 27       	eor	r27, r27
     c3a:	93 95       	inc	r25
     c3c:	f6 95       	lsr	r31
     c3e:	87 95       	ror	r24
     c40:	77 95       	ror	r23
     c42:	67 95       	ror	r22
     c44:	b7 95       	ror	r27
     c46:	f1 11       	cpse	r31, r1
     c48:	f8 cf       	rjmp	.-16     	; 0xc3a <__floatsisf+0x1c>
     c4a:	fa f4       	brpl	.+62     	; 0xc8a <__floatsisf+0x6c>
     c4c:	bb 0f       	add	r27, r27
     c4e:	11 f4       	brne	.+4      	; 0xc54 <__floatsisf+0x36>
     c50:	60 ff       	sbrs	r22, 0
     c52:	1b c0       	rjmp	.+54     	; 0xc8a <__floatsisf+0x6c>
     c54:	6f 5f       	subi	r22, 0xFF	; 255
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	8f 4f       	sbci	r24, 0xFF	; 255
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	16 c0       	rjmp	.+44     	; 0xc8a <__floatsisf+0x6c>
     c5e:	88 23       	and	r24, r24
     c60:	11 f0       	breq	.+4      	; 0xc66 <__floatsisf+0x48>
     c62:	96 e9       	ldi	r25, 0x96	; 150
     c64:	11 c0       	rjmp	.+34     	; 0xc88 <__floatsisf+0x6a>
     c66:	77 23       	and	r23, r23
     c68:	21 f0       	breq	.+8      	; 0xc72 <__floatsisf+0x54>
     c6a:	9e e8       	ldi	r25, 0x8E	; 142
     c6c:	87 2f       	mov	r24, r23
     c6e:	76 2f       	mov	r23, r22
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <__floatsisf+0x5e>
     c72:	66 23       	and	r22, r22
     c74:	71 f0       	breq	.+28     	; 0xc92 <__floatsisf+0x74>
     c76:	96 e8       	ldi	r25, 0x86	; 134
     c78:	86 2f       	mov	r24, r22
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	2a f0       	brmi	.+10     	; 0xc8a <__floatsisf+0x6c>
     c80:	9a 95       	dec	r25
     c82:	66 0f       	add	r22, r22
     c84:	77 1f       	adc	r23, r23
     c86:	88 1f       	adc	r24, r24
     c88:	da f7       	brpl	.-10     	; 0xc80 <__floatsisf+0x62>
     c8a:	88 0f       	add	r24, r24
     c8c:	96 95       	lsr	r25
     c8e:	87 95       	ror	r24
     c90:	97 f9       	bld	r25, 7
     c92:	08 95       	ret

00000c94 <__fp_split3>:
     c94:	57 fd       	sbrc	r21, 7
     c96:	90 58       	subi	r25, 0x80	; 128
     c98:	44 0f       	add	r20, r20
     c9a:	55 1f       	adc	r21, r21
     c9c:	59 f0       	breq	.+22     	; 0xcb4 <__fp_splitA+0x10>
     c9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ca0:	71 f0       	breq	.+28     	; 0xcbe <__fp_splitA+0x1a>
     ca2:	47 95       	ror	r20

00000ca4 <__fp_splitA>:
     ca4:	88 0f       	add	r24, r24
     ca6:	97 fb       	bst	r25, 7
     ca8:	99 1f       	adc	r25, r25
     caa:	61 f0       	breq	.+24     	; 0xcc4 <__fp_splitA+0x20>
     cac:	9f 3f       	cpi	r25, 0xFF	; 255
     cae:	79 f0       	breq	.+30     	; 0xcce <__fp_splitA+0x2a>
     cb0:	87 95       	ror	r24
     cb2:	08 95       	ret
     cb4:	12 16       	cp	r1, r18
     cb6:	13 06       	cpc	r1, r19
     cb8:	14 06       	cpc	r1, r20
     cba:	55 1f       	adc	r21, r21
     cbc:	f2 cf       	rjmp	.-28     	; 0xca2 <__fp_split3+0xe>
     cbe:	46 95       	lsr	r20
     cc0:	f1 df       	rcall	.-30     	; 0xca4 <__fp_splitA>
     cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <__fp_splitA+0x30>
     cc4:	16 16       	cp	r1, r22
     cc6:	17 06       	cpc	r1, r23
     cc8:	18 06       	cpc	r1, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	f1 cf       	rjmp	.-30     	; 0xcb0 <__fp_splitA+0xc>
     cce:	86 95       	lsr	r24
     cd0:	71 05       	cpc	r23, r1
     cd2:	61 05       	cpc	r22, r1
     cd4:	08 94       	sec
     cd6:	08 95       	ret

00000cd8 <__fp_zero>:
     cd8:	e8 94       	clt

00000cda <__fp_szero>:
     cda:	bb 27       	eor	r27, r27
     cdc:	66 27       	eor	r22, r22
     cde:	77 27       	eor	r23, r23
     ce0:	cb 01       	movw	r24, r22
     ce2:	97 f9       	bld	r25, 7
     ce4:	08 95       	ret

00000ce6 <__mulsf3>:
     ce6:	0b d0       	rcall	.+22     	; 0xcfe <__mulsf3x>
     ce8:	78 c0       	rjmp	.+240    	; 0xdda <__fp_round>
     cea:	69 d0       	rcall	.+210    	; 0xdbe <__fp_pscA>
     cec:	28 f0       	brcs	.+10     	; 0xcf8 <__mulsf3+0x12>
     cee:	6e d0       	rcall	.+220    	; 0xdcc <__fp_pscB>
     cf0:	18 f0       	brcs	.+6      	; 0xcf8 <__mulsf3+0x12>
     cf2:	95 23       	and	r25, r21
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <__mulsf3+0x12>
     cf6:	5a c0       	rjmp	.+180    	; 0xdac <__fp_inf>
     cf8:	5f c0       	rjmp	.+190    	; 0xdb8 <__fp_nan>
     cfa:	11 24       	eor	r1, r1
     cfc:	ee cf       	rjmp	.-36     	; 0xcda <__fp_szero>

00000cfe <__mulsf3x>:
     cfe:	ca df       	rcall	.-108    	; 0xc94 <__fp_split3>
     d00:	a0 f3       	brcs	.-24     	; 0xcea <__mulsf3+0x4>

00000d02 <__mulsf3_pse>:
     d02:	95 9f       	mul	r25, r21
     d04:	d1 f3       	breq	.-12     	; 0xcfa <__mulsf3+0x14>
     d06:	95 0f       	add	r25, r21
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	55 1f       	adc	r21, r21
     d0c:	62 9f       	mul	r22, r18
     d0e:	f0 01       	movw	r30, r0
     d10:	72 9f       	mul	r23, r18
     d12:	bb 27       	eor	r27, r27
     d14:	f0 0d       	add	r31, r0
     d16:	b1 1d       	adc	r27, r1
     d18:	63 9f       	mul	r22, r19
     d1a:	aa 27       	eor	r26, r26
     d1c:	f0 0d       	add	r31, r0
     d1e:	b1 1d       	adc	r27, r1
     d20:	aa 1f       	adc	r26, r26
     d22:	64 9f       	mul	r22, r20
     d24:	66 27       	eor	r22, r22
     d26:	b0 0d       	add	r27, r0
     d28:	a1 1d       	adc	r26, r1
     d2a:	66 1f       	adc	r22, r22
     d2c:	82 9f       	mul	r24, r18
     d2e:	22 27       	eor	r18, r18
     d30:	b0 0d       	add	r27, r0
     d32:	a1 1d       	adc	r26, r1
     d34:	62 1f       	adc	r22, r18
     d36:	73 9f       	mul	r23, r19
     d38:	b0 0d       	add	r27, r0
     d3a:	a1 1d       	adc	r26, r1
     d3c:	62 1f       	adc	r22, r18
     d3e:	83 9f       	mul	r24, r19
     d40:	a0 0d       	add	r26, r0
     d42:	61 1d       	adc	r22, r1
     d44:	22 1f       	adc	r18, r18
     d46:	74 9f       	mul	r23, r20
     d48:	33 27       	eor	r19, r19
     d4a:	a0 0d       	add	r26, r0
     d4c:	61 1d       	adc	r22, r1
     d4e:	23 1f       	adc	r18, r19
     d50:	84 9f       	mul	r24, r20
     d52:	60 0d       	add	r22, r0
     d54:	21 1d       	adc	r18, r1
     d56:	82 2f       	mov	r24, r18
     d58:	76 2f       	mov	r23, r22
     d5a:	6a 2f       	mov	r22, r26
     d5c:	11 24       	eor	r1, r1
     d5e:	9f 57       	subi	r25, 0x7F	; 127
     d60:	50 40       	sbci	r21, 0x00	; 0
     d62:	8a f0       	brmi	.+34     	; 0xd86 <__mulsf3_pse+0x84>
     d64:	e1 f0       	breq	.+56     	; 0xd9e <__mulsf3_pse+0x9c>
     d66:	88 23       	and	r24, r24
     d68:	4a f0       	brmi	.+18     	; 0xd7c <__mulsf3_pse+0x7a>
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	bb 1f       	adc	r27, r27
     d70:	66 1f       	adc	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	88 1f       	adc	r24, r24
     d76:	91 50       	subi	r25, 0x01	; 1
     d78:	50 40       	sbci	r21, 0x00	; 0
     d7a:	a9 f7       	brne	.-22     	; 0xd66 <__mulsf3_pse+0x64>
     d7c:	9e 3f       	cpi	r25, 0xFE	; 254
     d7e:	51 05       	cpc	r21, r1
     d80:	70 f0       	brcs	.+28     	; 0xd9e <__mulsf3_pse+0x9c>
     d82:	14 c0       	rjmp	.+40     	; 0xdac <__fp_inf>
     d84:	aa cf       	rjmp	.-172    	; 0xcda <__fp_szero>
     d86:	5f 3f       	cpi	r21, 0xFF	; 255
     d88:	ec f3       	brlt	.-6      	; 0xd84 <__mulsf3_pse+0x82>
     d8a:	98 3e       	cpi	r25, 0xE8	; 232
     d8c:	dc f3       	brlt	.-10     	; 0xd84 <__mulsf3_pse+0x82>
     d8e:	86 95       	lsr	r24
     d90:	77 95       	ror	r23
     d92:	67 95       	ror	r22
     d94:	b7 95       	ror	r27
     d96:	f7 95       	ror	r31
     d98:	e7 95       	ror	r30
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	c1 f7       	brne	.-16     	; 0xd8e <__mulsf3_pse+0x8c>
     d9e:	fe 2b       	or	r31, r30
     da0:	88 0f       	add	r24, r24
     da2:	91 1d       	adc	r25, r1
     da4:	96 95       	lsr	r25
     da6:	87 95       	ror	r24
     da8:	97 f9       	bld	r25, 7
     daa:	08 95       	ret

00000dac <__fp_inf>:
     dac:	97 f9       	bld	r25, 7
     dae:	9f 67       	ori	r25, 0x7F	; 127
     db0:	80 e8       	ldi	r24, 0x80	; 128
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	08 95       	ret

00000db8 <__fp_nan>:
     db8:	9f ef       	ldi	r25, 0xFF	; 255
     dba:	80 ec       	ldi	r24, 0xC0	; 192
     dbc:	08 95       	ret

00000dbe <__fp_pscA>:
     dbe:	00 24       	eor	r0, r0
     dc0:	0a 94       	dec	r0
     dc2:	16 16       	cp	r1, r22
     dc4:	17 06       	cpc	r1, r23
     dc6:	18 06       	cpc	r1, r24
     dc8:	09 06       	cpc	r0, r25
     dca:	08 95       	ret

00000dcc <__fp_pscB>:
     dcc:	00 24       	eor	r0, r0
     dce:	0a 94       	dec	r0
     dd0:	12 16       	cp	r1, r18
     dd2:	13 06       	cpc	r1, r19
     dd4:	14 06       	cpc	r1, r20
     dd6:	05 06       	cpc	r0, r21
     dd8:	08 95       	ret

00000dda <__fp_round>:
     dda:	09 2e       	mov	r0, r25
     ddc:	03 94       	inc	r0
     dde:	00 0c       	add	r0, r0
     de0:	11 f4       	brne	.+4      	; 0xde6 <__fp_round+0xc>
     de2:	88 23       	and	r24, r24
     de4:	52 f0       	brmi	.+20     	; 0xdfa <__fp_round+0x20>
     de6:	bb 0f       	add	r27, r27
     de8:	40 f4       	brcc	.+16     	; 0xdfa <__fp_round+0x20>
     dea:	bf 2b       	or	r27, r31
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__fp_round+0x18>
     dee:	60 ff       	sbrs	r22, 0
     df0:	04 c0       	rjmp	.+8      	; 0xdfa <__fp_round+0x20>
     df2:	6f 5f       	subi	r22, 0xFF	; 255
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	8f 4f       	sbci	r24, 0xFF	; 255
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	08 95       	ret

00000dfc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     dfc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     dfe:	91 8d       	ldd	r25, Z+25	; 0x19
     e00:	22 8d       	ldd	r18, Z+26	; 0x1a
     e02:	89 2f       	mov	r24, r25
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	80 5c       	subi	r24, 0xC0	; 192
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	82 1b       	sub	r24, r18
     e0c:	91 09       	sbc	r25, r1
}
     e0e:	8f 73       	andi	r24, 0x3F	; 63
     e10:	99 27       	eor	r25, r25
     e12:	08 95       	ret

00000e14 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     e14:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     e16:	91 8d       	ldd	r25, Z+25	; 0x19
     e18:	82 8d       	ldd	r24, Z+26	; 0x1a
     e1a:	98 17       	cp	r25, r24
     e1c:	31 f0       	breq	.+12     	; 0xe2a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     e1e:	82 8d       	ldd	r24, Z+26	; 0x1a
     e20:	e8 0f       	add	r30, r24
     e22:	f1 1d       	adc	r31, r1
     e24:	85 8d       	ldd	r24, Z+29	; 0x1d
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     e2e:	08 95       	ret

00000e30 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     e30:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     e32:	91 8d       	ldd	r25, Z+25	; 0x19
     e34:	82 8d       	ldd	r24, Z+26	; 0x1a
     e36:	98 17       	cp	r25, r24
     e38:	61 f0       	breq	.+24     	; 0xe52 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     e3a:	82 8d       	ldd	r24, Z+26	; 0x1a
     e3c:	df 01       	movw	r26, r30
     e3e:	a8 0f       	add	r26, r24
     e40:	b1 1d       	adc	r27, r1
     e42:	5d 96       	adiw	r26, 0x1d	; 29
     e44:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     e46:	92 8d       	ldd	r25, Z+26	; 0x1a
     e48:	9f 5f       	subi	r25, 0xFF	; 255
     e4a:	9f 73       	andi	r25, 0x3F	; 63
     e4c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     e56:	08 95       	ret

00000e58 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     e58:	fc 01       	movw	r30, r24
     e5a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     e5c:	44 8d       	ldd	r20, Z+28	; 0x1c
     e5e:	25 2f       	mov	r18, r21
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	84 2f       	mov	r24, r20
     e64:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     e66:	82 1b       	sub	r24, r18
     e68:	93 0b       	sbc	r25, r19
     e6a:	54 17       	cp	r21, r20
     e6c:	10 f0       	brcs	.+4      	; 0xe72 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     e6e:	cf 96       	adiw	r24, 0x3f	; 63
     e70:	08 95       	ret
  return tail - head - 1;
     e72:	01 97       	sbiw	r24, 0x01	; 1
}
     e74:	08 95       	ret

00000e76 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e76:	8d ec       	ldi	r24, 0xCD	; 205
     e78:	98 e0       	ldi	r25, 0x08	; 8
     e7a:	89 2b       	or	r24, r25
     e7c:	39 f0       	breq	.+14     	; 0xe8c <_Z14serialEventRunv+0x16>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	89 2b       	or	r24, r25
     e84:	19 f0       	breq	.+6      	; 0xe8c <_Z14serialEventRunv+0x16>
     e86:	89 d1       	rcall	.+786    	; 0x119a <_Z17Serial0_availablev>
     e88:	81 11       	cpse	r24, r1
     e8a:	24 c0       	rjmp	.+72     	; 0xed4 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     e8c:	82 e6       	ldi	r24, 0x62	; 98
     e8e:	99 e0       	ldi	r25, 0x09	; 9
     e90:	89 2b       	or	r24, r25
     e92:	39 f0       	breq	.+14     	; 0xea2 <_Z14serialEventRunv+0x2c>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	89 2b       	or	r24, r25
     e9a:	19 f0       	breq	.+6      	; 0xea2 <_Z14serialEventRunv+0x2c>
     e9c:	13 d2       	rcall	.+1062   	; 0x12c4 <_Z17Serial1_availablev>
     e9e:	81 11       	cpse	r24, r1
     ea0:	1c c0       	rjmp	.+56     	; 0xeda <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	89 2b       	or	r24, r25
     ea8:	41 f0       	breq	.+16     	; 0xeba <_Z14serialEventRunv+0x44>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	89 2b       	or	r24, r25
     eb0:	21 f0       	breq	.+8      	; 0xeba <_Z14serialEventRunv+0x44>
     eb2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     eb6:	81 11       	cpse	r24, r1
     eb8:	13 c0       	rjmp	.+38     	; 0xee0 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	89 2b       	or	r24, r25
     ec0:	a1 f0       	breq	.+40     	; 0xeea <_Z14serialEventRunv+0x74>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	89 2b       	or	r24, r25
     ec8:	81 f0       	breq	.+32     	; 0xeea <_Z14serialEventRunv+0x74>
     eca:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ece:	81 11       	cpse	r24, r1
     ed0:	0a c0       	rjmp	.+20     	; 0xee6 <_Z14serialEventRunv+0x70>
     ed2:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     ed4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ed8:	d9 cf       	rjmp	.-78     	; 0xe8c <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     eda:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ede:	e1 cf       	rjmp	.-62     	; 0xea2 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     ee0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ee4:	ea cf       	rjmp	.-44     	; 0xeba <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     ee6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     eea:	08 95       	ret

00000eec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     eec:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     eee:	84 8d       	ldd	r24, Z+28	; 0x1c
     ef0:	df 01       	movw	r26, r30
     ef2:	a8 0f       	add	r26, r24
     ef4:	b1 1d       	adc	r27, r1
     ef6:	a3 5a       	subi	r26, 0xA3	; 163
     ef8:	bf 4f       	sbci	r27, 0xFF	; 255
     efa:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     efc:	84 8d       	ldd	r24, Z+28	; 0x1c
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	8f 73       	andi	r24, 0x3F	; 63
     f04:	99 27       	eor	r25, r25
     f06:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     f08:	a6 89       	ldd	r26, Z+22	; 0x16
     f0a:	b7 89       	ldd	r27, Z+23	; 0x17
     f0c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     f0e:	a0 89       	ldd	r26, Z+16	; 0x10
     f10:	b1 89       	ldd	r27, Z+17	; 0x11
     f12:	8c 91       	ld	r24, X
     f14:	83 70       	andi	r24, 0x03	; 3
     f16:	80 64       	ori	r24, 0x40	; 64
     f18:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     f1a:	93 8d       	ldd	r25, Z+27	; 0x1b
     f1c:	84 8d       	ldd	r24, Z+28	; 0x1c
     f1e:	98 13       	cpse	r25, r24
     f20:	06 c0       	rjmp	.+12     	; 0xf2e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     f22:	02 88       	ldd	r0, Z+18	; 0x12
     f24:	f3 89       	ldd	r31, Z+19	; 0x13
     f26:	e0 2d       	mov	r30, r0
     f28:	80 81       	ld	r24, Z
     f2a:	8f 7d       	andi	r24, 0xDF	; 223
     f2c:	80 83       	st	Z, r24
     f2e:	08 95       	ret

00000f30 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
  _written = true;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     f42:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f44:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f46:	98 13       	cpse	r25, r24
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <_ZN14HardwareSerial5writeEh+0x24>
     f4a:	e8 89       	ldd	r30, Y+16	; 0x10
     f4c:	f9 89       	ldd	r31, Y+17	; 0x11
     f4e:	80 81       	ld	r24, Z
     f50:	85 fd       	sbrc	r24, 5
     f52:	25 c0       	rjmp	.+74     	; 0xf9e <_ZN14HardwareSerial5writeEh+0x6e>
     f54:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     f56:	0b 8d       	ldd	r16, Y+27	; 0x1b
     f58:	10 e0       	ldi	r17, 0x00	; 0
     f5a:	0f 5f       	subi	r16, 0xFF	; 255
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	0f 73       	andi	r16, 0x3F	; 63
     f60:	11 27       	eor	r17, r17
     f62:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     f64:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f66:	e8 12       	cpse	r14, r24
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	07 fc       	sbrc	r0, 7
     f6e:	fa cf       	rjmp	.-12     	; 0xf64 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     f70:	e8 89       	ldd	r30, Y+16	; 0x10
     f72:	f9 89       	ldd	r31, Y+17	; 0x11
     f74:	80 81       	ld	r24, Z
     f76:	85 ff       	sbrs	r24, 5
     f78:	f5 cf       	rjmp	.-22     	; 0xf64 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     f7a:	ce 01       	movw	r24, r28
     f7c:	b7 df       	rcall	.-146    	; 0xeec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f7e:	f2 cf       	rjmp	.-28     	; 0xf64 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	fe 01       	movw	r30, r28
     f84:	e8 0f       	add	r30, r24
     f86:	f1 1d       	adc	r31, r1
     f88:	e3 5a       	subi	r30, 0xA3	; 163
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     f8e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f90:	f8 94       	cli
    _tx_buffer_head = i;
     f92:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     f94:	ea 89       	ldd	r30, Y+18	; 0x12
     f96:	fb 89       	ldd	r31, Y+19	; 0x13
     f98:	80 81       	ld	r24, Z
     f9a:	80 62       	ori	r24, 0x20	; 32
     f9c:	0a c0       	rjmp	.+20     	; 0xfb2 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     f9e:	9f b7       	in	r25, 0x3f	; 63
     fa0:	f8 94       	cli
      *_udr = c;
     fa2:	ee 89       	ldd	r30, Y+22	; 0x16
     fa4:	ff 89       	ldd	r31, Y+23	; 0x17
     fa6:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     fa8:	e8 89       	ldd	r30, Y+16	; 0x10
     faa:	f9 89       	ldd	r31, Y+17	; 0x11
     fac:	80 81       	ld	r24, Z
     fae:	83 70       	andi	r24, 0x03	; 3
     fb0:	80 64       	ori	r24, 0x40	; 64
     fb2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fb4:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	08 95       	ret

00000fc8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     fce:	88 8d       	ldd	r24, Y+24	; 0x18
     fd0:	88 23       	and	r24, r24
     fd2:	c1 f0       	breq	.+48     	; 0x1004 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     fd4:	ea 89       	ldd	r30, Y+18	; 0x12
     fd6:	fb 89       	ldd	r31, Y+19	; 0x13
     fd8:	80 81       	ld	r24, Z
     fda:	85 fd       	sbrc	r24, 5
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <_ZN14HardwareSerial5flushEv+0x20>
     fde:	a8 89       	ldd	r26, Y+16	; 0x10
     fe0:	b9 89       	ldd	r27, Y+17	; 0x11
     fe2:	8c 91       	ld	r24, X
     fe4:	86 fd       	sbrc	r24, 6
     fe6:	0e c0       	rjmp	.+28     	; 0x1004 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	07 fc       	sbrc	r0, 7
     fec:	f5 cf       	rjmp	.-22     	; 0xfd8 <_ZN14HardwareSerial5flushEv+0x10>
     fee:	80 81       	ld	r24, Z
     ff0:	85 ff       	sbrs	r24, 5
     ff2:	f2 cf       	rjmp	.-28     	; 0xfd8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     ff4:	a8 89       	ldd	r26, Y+16	; 0x10
     ff6:	b9 89       	ldd	r27, Y+17	; 0x11
     ff8:	8c 91       	ld	r24, X
     ffa:	85 ff       	sbrs	r24, 5
     ffc:	ed cf       	rjmp	.-38     	; 0xfd8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ffe:	ce 01       	movw	r24, r28
    1000:	75 df       	rcall	.-278    	; 0xeec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1002:	e8 cf       	rjmp	.-48     	; 0xfd4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	ec 01       	movw	r28, r24
    101a:	6a 01       	movw	r12, r20
    101c:	7b 01       	movw	r14, r22
    101e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1020:	e8 89       	ldd	r30, Y+16	; 0x10
    1022:	f9 89       	ldd	r31, Y+17	; 0x11
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1028:	41 15       	cp	r20, r1
    102a:	51 4e       	sbci	r21, 0xE1	; 225
    102c:	61 05       	cpc	r22, r1
    102e:	71 05       	cpc	r23, r1
    1030:	b1 f0       	breq	.+44     	; 0x105e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	79 e0       	ldi	r23, 0x09	; 9
    1036:	8d e3       	ldi	r24, 0x3D	; 61
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a7 01       	movw	r20, r14
    103c:	96 01       	movw	r18, r12
    103e:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__udivmodsi4>
    1042:	da 01       	movw	r26, r20
    1044:	c9 01       	movw	r24, r18
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	a1 09       	sbc	r26, r1
    104a:	b1 09       	sbc	r27, r1
    104c:	b6 95       	lsr	r27
    104e:	a7 95       	ror	r26
    1050:	97 95       	ror	r25
    1052:	87 95       	ror	r24
    1054:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1056:	21 15       	cp	r18, r1
    1058:	80 e1       	ldi	r24, 0x10	; 16
    105a:	38 07       	cpc	r19, r24
    105c:	a8 f0       	brcs	.+42     	; 0x1088 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    105e:	e8 89       	ldd	r30, Y+16	; 0x10
    1060:	f9 89       	ldd	r31, Y+17	; 0x11
    1062:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1064:	60 e8       	ldi	r22, 0x80	; 128
    1066:	74 e8       	ldi	r23, 0x84	; 132
    1068:	8e e1       	ldi	r24, 0x1E	; 30
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a7 01       	movw	r20, r14
    106e:	96 01       	movw	r18, r12
    1070:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__udivmodsi4>
    1074:	da 01       	movw	r26, r20
    1076:	c9 01       	movw	r24, r18
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	a1 09       	sbc	r26, r1
    107c:	b1 09       	sbc	r27, r1
    107e:	b6 95       	lsr	r27
    1080:	a7 95       	ror	r26
    1082:	97 95       	ror	r25
    1084:	87 95       	ror	r24
    1086:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1088:	ec 85       	ldd	r30, Y+12	; 0x0c
    108a:	fd 85       	ldd	r31, Y+13	; 0x0d
    108c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    108e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1090:	ff 85       	ldd	r31, Y+15	; 0x0f
    1092:	20 83       	st	Z, r18

  _written = false;
    1094:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1096:	ec 89       	ldd	r30, Y+20	; 0x14
    1098:	fd 89       	ldd	r31, Y+21	; 0x15
    109a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    109c:	ea 89       	ldd	r30, Y+18	; 0x12
    109e:	fb 89       	ldd	r31, Y+19	; 0x13
    10a0:	80 81       	ld	r24, Z
    10a2:	80 61       	ori	r24, 0x10	; 16
    10a4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    10a6:	ea 89       	ldd	r30, Y+18	; 0x12
    10a8:	fb 89       	ldd	r31, Y+19	; 0x13
    10aa:	80 81       	ld	r24, Z
    10ac:	88 60       	ori	r24, 0x08	; 8
    10ae:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    10b0:	ea 89       	ldd	r30, Y+18	; 0x12
    10b2:	fb 89       	ldd	r31, Y+19	; 0x13
    10b4:	80 81       	ld	r24, Z
    10b6:	80 68       	ori	r24, 0x80	; 128
    10b8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    10ba:	ea 89       	ldd	r30, Y+18	; 0x12
    10bc:	fb 89       	ldd	r31, Y+19	; 0x13
    10be:	80 81       	ld	r24, Z
    10c0:	8f 7d       	andi	r24, 0xDF	; 223
    10c2:	80 83       	st	Z, r24
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	08 95       	ret

000010d4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	08 95       	ret

000010da <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    10da:	08 95       	ret

000010dc <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	0b b6       	in	r0, 0x3b	; 59
    10e8:	0f 92       	push	r0
    10ea:	2f 93       	push	r18
    10ec:	8f 93       	push	r24
    10ee:	9f 93       	push	r25
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    10f4:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <Serial+0x10>
    10f8:	f0 91 2a 03 	lds	r31, 0x032A	; 0x80032a <Serial+0x11>
    10fc:	80 81       	ld	r24, Z
    10fe:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <Serial+0x16>
    1102:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <Serial+0x17>
    1106:	82 fd       	sbrc	r24, 2
    1108:	12 c0       	rjmp	.+36     	; 0x112e <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    110a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    110c:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <Serial+0x19>
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1114:	20 91 33 03 	lds	r18, 0x0333	; 0x800333 <Serial+0x1a>
    1118:	82 17       	cp	r24, r18
    111a:	51 f0       	breq	.+20     	; 0x1130 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    111c:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <Serial+0x19>
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	e7 5e       	subi	r30, 0xE7	; 231
    1124:	fc 4f       	sbci	r31, 0xFC	; 252
    1126:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1128:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <Serial+0x19>
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    112e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1130:	ff 91       	pop	r31
    1132:	ef 91       	pop	r30
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0b be       	out	0x3b, r0	; 59
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	0b b6       	in	r0, 0x3b	; 59
    1154:	0f 92       	push	r0
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    116e:	89 e1       	ldi	r24, 0x19	; 25
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	bc de       	rcall	.-648    	; 0xeec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1174:	ff 91       	pop	r31
    1176:	ef 91       	pop	r30
    1178:	bf 91       	pop	r27
    117a:	af 91       	pop	r26
    117c:	9f 91       	pop	r25
    117e:	8f 91       	pop	r24
    1180:	7f 91       	pop	r23
    1182:	6f 91       	pop	r22
    1184:	5f 91       	pop	r21
    1186:	4f 91       	pop	r20
    1188:	3f 91       	pop	r19
    118a:	2f 91       	pop	r18
    118c:	0f 90       	pop	r0
    118e:	0b be       	out	0x3b, r0	; 59
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    119a:	89 e1       	ldi	r24, 0x19	; 25
    119c:	93 e0       	ldi	r25, 0x03	; 3
    119e:	2e de       	rcall	.-932    	; 0xdfc <_ZN14HardwareSerial9availableEv>
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	89 2b       	or	r24, r25
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <_Z17Serial0_availablev+0xe>
    11a6:	20 e0       	ldi	r18, 0x00	; 0
}
    11a8:	82 2f       	mov	r24, r18
    11aa:	08 95       	ret

000011ac <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    11ac:	e9 e1       	ldi	r30, 0x19	; 25
    11ae:	f3 e0       	ldi	r31, 0x03	; 3
    11b0:	13 82       	std	Z+3, r1	; 0x03
    11b2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    11b4:	88 ee       	ldi	r24, 0xE8	; 232
    11b6:	93 e0       	ldi	r25, 0x03	; 3
    11b8:	a0 e0       	ldi	r26, 0x00	; 0
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	84 83       	std	Z+4, r24	; 0x04
    11be:	95 83       	std	Z+5, r25	; 0x05
    11c0:	a6 83       	std	Z+6, r26	; 0x06
    11c2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    11c4:	82 ec       	ldi	r24, 0xC2	; 194
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	91 83       	std	Z+1, r25	; 0x01
    11ca:	80 83       	st	Z, r24
    11cc:	85 ec       	ldi	r24, 0xC5	; 197
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	95 87       	std	Z+13, r25	; 0x0d
    11d2:	84 87       	std	Z+12, r24	; 0x0c
    11d4:	84 ec       	ldi	r24, 0xC4	; 196
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	97 87       	std	Z+15, r25	; 0x0f
    11da:	86 87       	std	Z+14, r24	; 0x0e
    11dc:	80 ec       	ldi	r24, 0xC0	; 192
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	91 8b       	std	Z+17, r25	; 0x11
    11e2:	80 8b       	std	Z+16, r24	; 0x10
    11e4:	81 ec       	ldi	r24, 0xC1	; 193
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	93 8b       	std	Z+19, r25	; 0x13
    11ea:	82 8b       	std	Z+18, r24	; 0x12
    11ec:	82 ec       	ldi	r24, 0xC2	; 194
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	95 8b       	std	Z+21, r25	; 0x15
    11f2:	84 8b       	std	Z+20, r24	; 0x14
    11f4:	86 ec       	ldi	r24, 0xC6	; 198
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	97 8b       	std	Z+23, r25	; 0x17
    11fa:	86 8b       	std	Z+22, r24	; 0x16
    11fc:	11 8e       	std	Z+25, r1	; 0x19
    11fe:	12 8e       	std	Z+26, r1	; 0x1a
    1200:	13 8e       	std	Z+27, r1	; 0x1b
    1202:	14 8e       	std	Z+28, r1	; 0x1c
    1204:	08 95       	ret

00001206 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	0b b6       	in	r0, 0x3b	; 59
    1212:	0f 92       	push	r0
    1214:	2f 93       	push	r18
    1216:	8f 93       	push	r24
    1218:	9f 93       	push	r25
    121a:	ef 93       	push	r30
    121c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    121e:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <Serial1+0x10>
    1222:	f0 91 c7 03 	lds	r31, 0x03C7	; 0x8003c7 <Serial1+0x11>
    1226:	80 81       	ld	r24, Z
    1228:	e0 91 cc 03 	lds	r30, 0x03CC	; 0x8003cc <Serial1+0x16>
    122c:	f0 91 cd 03 	lds	r31, 0x03CD	; 0x8003cd <Serial1+0x17>
    1230:	82 fd       	sbrc	r24, 2
    1232:	12 c0       	rjmp	.+36     	; 0x1258 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1234:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1236:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <Serial1+0x19>
    123a:	8f 5f       	subi	r24, 0xFF	; 255
    123c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    123e:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <Serial1+0x1a>
    1242:	82 17       	cp	r24, r18
    1244:	51 f0       	breq	.+20     	; 0x125a <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1246:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Serial1+0x19>
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	ea 54       	subi	r30, 0x4A	; 74
    124e:	fc 4f       	sbci	r31, 0xFC	; 252
    1250:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1252:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <Serial1+0x19>
    1256:	01 c0       	rjmp	.+2      	; 0x125a <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1258:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0b be       	out	0x3b, r0	; 59
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	0b b6       	in	r0, 0x3b	; 59
    127e:	0f 92       	push	r0
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1298:	86 eb       	ldi	r24, 0xB6	; 182
    129a:	93 e0       	ldi	r25, 0x03	; 3
    129c:	27 de       	rcall	.-946    	; 0xeec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	0f 90       	pop	r0
    12b8:	0b be       	out	0x3b, r0	; 59
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    12c4:	86 eb       	ldi	r24, 0xB6	; 182
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	99 dd       	rcall	.-1230   	; 0xdfc <_ZN14HardwareSerial9availableEv>
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	89 2b       	or	r24, r25
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_Z17Serial1_availablev+0xe>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
}
    12d2:	82 2f       	mov	r24, r18
    12d4:	08 95       	ret

000012d6 <_GLOBAL__sub_I___vector_36>:
    12d6:	e6 eb       	ldi	r30, 0xB6	; 182
    12d8:	f3 e0       	ldi	r31, 0x03	; 3
    12da:	13 82       	std	Z+3, r1	; 0x03
    12dc:	12 82       	std	Z+2, r1	; 0x02
    12de:	88 ee       	ldi	r24, 0xE8	; 232
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	84 83       	std	Z+4, r24	; 0x04
    12e8:	95 83       	std	Z+5, r25	; 0x05
    12ea:	a6 83       	std	Z+6, r26	; 0x06
    12ec:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    12ee:	82 ec       	ldi	r24, 0xC2	; 194
    12f0:	92 e0       	ldi	r25, 0x02	; 2
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
    12f6:	8d ec       	ldi	r24, 0xCD	; 205
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	95 87       	std	Z+13, r25	; 0x0d
    12fc:	84 87       	std	Z+12, r24	; 0x0c
    12fe:	8c ec       	ldi	r24, 0xCC	; 204
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	97 87       	std	Z+15, r25	; 0x0f
    1304:	86 87       	std	Z+14, r24	; 0x0e
    1306:	88 ec       	ldi	r24, 0xC8	; 200
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	91 8b       	std	Z+17, r25	; 0x11
    130c:	80 8b       	std	Z+16, r24	; 0x10
    130e:	89 ec       	ldi	r24, 0xC9	; 201
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	93 8b       	std	Z+19, r25	; 0x13
    1314:	82 8b       	std	Z+18, r24	; 0x12
    1316:	8a ec       	ldi	r24, 0xCA	; 202
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	95 8b       	std	Z+21, r25	; 0x15
    131c:	84 8b       	std	Z+20, r24	; 0x14
    131e:	8e ec       	ldi	r24, 0xCE	; 206
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	97 8b       	std	Z+23, r25	; 0x17
    1324:	86 8b       	std	Z+22, r24	; 0x16
    1326:	11 8e       	std	Z+25, r1	; 0x19
    1328:	12 8e       	std	Z+26, r1	; 0x1a
    132a:	13 8e       	std	Z+27, r1	; 0x1b
    132c:	14 8e       	std	Z+28, r1	; 0x1c
    132e:	08 95       	ret

00001330 <initVariant>:
    1330:	08 95       	ret

00001332 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1332:	d6 d1       	rcall	.+940    	; 0x16e0 <init>

	initVariant();
    1334:	fd df       	rcall	.-6      	; 0x1330 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1336:	8d da       	rcall	.-2790   	; 0x852 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1338:	cb e3       	ldi	r28, 0x3B	; 59
    133a:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    133c:	37 dc       	rcall	.-1938   	; 0xbac <loop>
		if (serialEventRun) serialEventRun();
    133e:	20 97       	sbiw	r28, 0x00	; 0
    1340:	e9 f3       	breq	.-6      	; 0x133c <main+0xa>
    1342:	99 dd       	rcall	.-1230   	; 0xe76 <_Z14serialEventRunv>
    1344:	fb cf       	rjmp	.-10     	; 0x133c <main+0xa>

00001346 <_ZN5Print5writeEPKhj>:
    1346:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	6c 01       	movw	r12, r24
    1358:	7a 01       	movw	r14, r20
    135a:	8b 01       	movw	r16, r22
    135c:	c0 e0       	ldi	r28, 0x00	; 0
    135e:	d0 e0       	ldi	r29, 0x00	; 0
    1360:	ce 15       	cp	r28, r14
    1362:	df 05       	cpc	r29, r15
    1364:	81 f0       	breq	.+32     	; 0x1386 <_ZN5Print5writeEPKhj+0x40>
    1366:	d8 01       	movw	r26, r16
    1368:	6d 91       	ld	r22, X+
    136a:	8d 01       	movw	r16, r26
    136c:	d6 01       	movw	r26, r12
    136e:	ed 91       	ld	r30, X+
    1370:	fc 91       	ld	r31, X
    1372:	01 90       	ld	r0, Z+
    1374:	f0 81       	ld	r31, Z
    1376:	e0 2d       	mov	r30, r0
    1378:	c6 01       	movw	r24, r12
    137a:	19 95       	eicall
    137c:	89 2b       	or	r24, r25
    137e:	11 f0       	breq	.+4      	; 0x1384 <_ZN5Print5writeEPKhj+0x3e>
    1380:	21 96       	adiw	r28, 0x01	; 1
    1382:	ee cf       	rjmp	.-36     	; 0x1360 <_ZN5Print5writeEPKhj+0x1a>
    1384:	7e 01       	movw	r14, r28
    1386:	c7 01       	movw	r24, r14
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	08 95       	ret

0000139a <_ZN5Print5writeEPKc>:
    139a:	61 15       	cp	r22, r1
    139c:	71 05       	cpc	r23, r1
    139e:	79 f0       	breq	.+30     	; 0x13be <_ZN5Print5writeEPKc+0x24>
    13a0:	fb 01       	movw	r30, r22
    13a2:	01 90       	ld	r0, Z+
    13a4:	00 20       	and	r0, r0
    13a6:	e9 f7       	brne	.-6      	; 0x13a2 <_ZN5Print5writeEPKc+0x8>
    13a8:	31 97       	sbiw	r30, 0x01	; 1
    13aa:	af 01       	movw	r20, r30
    13ac:	46 1b       	sub	r20, r22
    13ae:	57 0b       	sbc	r21, r23
    13b0:	dc 01       	movw	r26, r24
    13b2:	ed 91       	ld	r30, X+
    13b4:	fc 91       	ld	r31, X
    13b6:	02 80       	ldd	r0, Z+2	; 0x02
    13b8:	f3 81       	ldd	r31, Z+3	; 0x03
    13ba:	e0 2d       	mov	r30, r0
    13bc:	19 94       	eijmp
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	08 95       	ret

000013c4 <_ZN5Print5printEPKc>:
    13c4:	ea cf       	rjmp	.-44     	; 0x139a <_ZN5Print5writeEPKc>

000013c6 <_ZN5Print5printEc>:
    13c6:	dc 01       	movw	r26, r24
    13c8:	ed 91       	ld	r30, X+
    13ca:	fc 91       	ld	r31, X
    13cc:	01 90       	ld	r0, Z+
    13ce:	f0 81       	ld	r31, Z
    13d0:	e0 2d       	mov	r30, r0
    13d2:	19 94       	eijmp

000013d4 <_ZN5Print7printlnEv>:
    13d4:	60 ed       	ldi	r22, 0xD0	; 208
    13d6:	72 e0       	ldi	r23, 0x02	; 2
    13d8:	e0 cf       	rjmp	.-64     	; 0x139a <_ZN5Print5writeEPKc>

000013da <_ZN5Print7printlnEPKc>:
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	ec 01       	movw	r28, r24
    13e4:	da df       	rcall	.-76     	; 0x139a <_ZN5Print5writeEPKc>
    13e6:	8c 01       	movw	r16, r24
    13e8:	ce 01       	movw	r24, r28
    13ea:	f4 df       	rcall	.-24     	; 0x13d4 <_ZN5Print7printlnEv>
    13ec:	80 0f       	add	r24, r16
    13ee:	91 1f       	adc	r25, r17
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	08 95       	ret

000013fa <_ZN5Print11printNumberEmh>:
    13fa:	8f 92       	push	r8
    13fc:	9f 92       	push	r9
    13fe:	af 92       	push	r10
    1400:	bf 92       	push	r11
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	a1 97       	sbiw	r28, 0x21	; 33
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	7c 01       	movw	r14, r24
    1420:	fa 01       	movw	r30, r20
    1422:	cb 01       	movw	r24, r22
    1424:	19 a2       	std	Y+33, r1	; 0x21
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	08 f4       	brcc	.+2      	; 0x142c <_ZN5Print11printNumberEmh+0x32>
    142a:	2a e0       	ldi	r18, 0x0A	; 10
    142c:	8e 01       	movw	r16, r28
    142e:	0f 5d       	subi	r16, 0xDF	; 223
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	82 2e       	mov	r8, r18
    1434:	91 2c       	mov	r9, r1
    1436:	a1 2c       	mov	r10, r1
    1438:	b1 2c       	mov	r11, r1
    143a:	bf 01       	movw	r22, r30
    143c:	a5 01       	movw	r20, r10
    143e:	94 01       	movw	r18, r8
    1440:	42 d6       	rcall	.+3204   	; 0x20c6 <__udivmodsi4>
    1442:	f9 01       	movw	r30, r18
    1444:	ca 01       	movw	r24, r20
    1446:	01 50       	subi	r16, 0x01	; 1
    1448:	11 09       	sbc	r17, r1
    144a:	6a 30       	cpi	r22, 0x0A	; 10
    144c:	10 f4       	brcc	.+4      	; 0x1452 <_ZN5Print11printNumberEmh+0x58>
    144e:	60 5d       	subi	r22, 0xD0	; 208
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <_ZN5Print11printNumberEmh+0x5a>
    1452:	69 5c       	subi	r22, 0xC9	; 201
    1454:	d8 01       	movw	r26, r16
    1456:	6c 93       	st	X, r22
    1458:	23 2b       	or	r18, r19
    145a:	24 2b       	or	r18, r20
    145c:	25 2b       	or	r18, r21
    145e:	69 f7       	brne	.-38     	; 0x143a <_ZN5Print11printNumberEmh+0x40>
    1460:	b8 01       	movw	r22, r16
    1462:	c7 01       	movw	r24, r14
    1464:	9a df       	rcall	.-204    	; 0x139a <_ZN5Print5writeEPKc>
    1466:	a1 96       	adiw	r28, 0x21	; 33
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	bf 90       	pop	r11
    1480:	af 90       	pop	r10
    1482:	9f 90       	pop	r9
    1484:	8f 90       	pop	r8
    1486:	08 95       	ret

00001488 <_ZN5Print5printEmi>:
    1488:	21 15       	cp	r18, r1
    148a:	31 05       	cpc	r19, r1
    148c:	41 f4       	brne	.+16     	; 0x149e <_ZN5Print5printEmi+0x16>
    148e:	dc 01       	movw	r26, r24
    1490:	ed 91       	ld	r30, X+
    1492:	fc 91       	ld	r31, X
    1494:	01 90       	ld	r0, Z+
    1496:	f0 81       	ld	r31, Z
    1498:	e0 2d       	mov	r30, r0
    149a:	64 2f       	mov	r22, r20
    149c:	19 94       	eijmp
    149e:	ad cf       	rjmp	.-166    	; 0x13fa <_ZN5Print11printNumberEmh>

000014a0 <_ZN5Print5printEhi>:
    14a0:	9a 01       	movw	r18, r20
    14a2:	46 2f       	mov	r20, r22
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	ee cf       	rjmp	.-36     	; 0x1488 <_ZN5Print5printEmi>

000014ac <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
  if (base == 0) {
    14bc:	21 15       	cp	r18, r1
    14be:	31 05       	cpc	r19, r1
    14c0:	81 f4       	brne	.+32     	; 0x14e2 <_ZN5Print5printEli+0x36>
    return write(n);
    14c2:	dc 01       	movw	r26, r24
    14c4:	ed 91       	ld	r30, X+
    14c6:	fc 91       	ld	r31, X
    14c8:	01 90       	ld	r0, Z+
    14ca:	f0 81       	ld	r31, Z
    14cc:	e0 2d       	mov	r30, r0
    14ce:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    14e0:	19 94       	eijmp
  } else if (base == 10) {
    14e2:	2a 30       	cpi	r18, 0x0A	; 10
    14e4:	31 05       	cpc	r19, r1
    14e6:	f1 f4       	brne	.+60     	; 0x1524 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    14e8:	77 ff       	sbrs	r23, 7
    14ea:	1b c0       	rjmp	.+54     	; 0x1522 <_ZN5Print5printEli+0x76>
    14ec:	6a 01       	movw	r12, r20
    14ee:	7b 01       	movw	r14, r22
    14f0:	ec 01       	movw	r28, r24
      int t = print('-');
    14f2:	6d e2       	ldi	r22, 0x2D	; 45
    14f4:	68 df       	rcall	.-304    	; 0x13c6 <_ZN5Print5printEc>
    14f6:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    14f8:	44 27       	eor	r20, r20
    14fa:	55 27       	eor	r21, r21
    14fc:	ba 01       	movw	r22, r20
    14fe:	4c 19       	sub	r20, r12
    1500:	5d 09       	sbc	r21, r13
    1502:	6e 09       	sbc	r22, r14
    1504:	7f 09       	sbc	r23, r15
    1506:	2a e0       	ldi	r18, 0x0A	; 10
    1508:	ce 01       	movw	r24, r28
    150a:	77 df       	rcall	.-274    	; 0x13fa <_ZN5Print11printNumberEmh>
    150c:	80 0f       	add	r24, r16
    150e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1522:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1532:	cf 90       	pop	r12
    1534:	62 cf       	rjmp	.-316    	; 0x13fa <_ZN5Print11printNumberEmh>

00001536 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1536:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1538:	ab 01       	movw	r20, r22
    153a:	77 0f       	add	r23, r23
    153c:	66 0b       	sbc	r22, r22
    153e:	77 0b       	sbc	r23, r23
    1540:	b5 cf       	rjmp	.-150    	; 0x14ac <_ZN5Print5printEli>

00001542 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    154c:	f4 df       	rcall	.-24     	; 0x1536 <_ZN5Print5printEii>
    154e:	8c 01       	movw	r16, r24
  n += println();
    1550:	ce 01       	movw	r24, r28
    1552:	40 df       	rcall	.-384    	; 0x13d4 <_ZN5Print7printlnEv>
  return n;
}
    1554:	80 0f       	add	r24, r16
    1556:	91 1f       	adc	r25, r17
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret

00001562 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1562:	1f 92       	push	r1
    1564:	0f 92       	push	r0
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	0f 92       	push	r0
    156a:	11 24       	eor	r1, r1
    156c:	2f 93       	push	r18
    156e:	3f 93       	push	r19
    1570:	8f 93       	push	r24
    1572:	9f 93       	push	r25
    1574:	af 93       	push	r26
    1576:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1578:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <timer0_millis>
    157c:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <timer0_millis+0x1>
    1580:	a0 91 56 04 	lds	r26, 0x0456	; 0x800456 <timer0_millis+0x2>
    1584:	b0 91 57 04 	lds	r27, 0x0457	; 0x800457 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1588:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    158c:	23 e0       	ldi	r18, 0x03	; 3
    158e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1590:	2d 37       	cpi	r18, 0x7D	; 125
    1592:	20 f4       	brcc	.+8      	; 0x159c <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	a1 1d       	adc	r26, r1
    1598:	b1 1d       	adc	r27, r1
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    159c:	26 e8       	ldi	r18, 0x86	; 134
    159e:	23 0f       	add	r18, r19
		m += 1;
    15a0:	02 96       	adiw	r24, 0x02	; 2
    15a2:	a1 1d       	adc	r26, r1
    15a4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    15a6:	20 93 53 04 	sts	0x0453, r18	; 0x800453 <timer0_fract>
	timer0_millis = m;
    15aa:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <timer0_millis>
    15ae:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <timer0_millis+0x1>
    15b2:	a0 93 56 04 	sts	0x0456, r26	; 0x800456 <timer0_millis+0x2>
    15b6:	b0 93 57 04 	sts	0x0457, r27	; 0x800457 <timer0_millis+0x3>
	timer0_overflow_count++;
    15ba:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <timer0_overflow_count>
    15be:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <timer0_overflow_count+0x1>
    15c2:	a0 91 5a 04 	lds	r26, 0x045A	; 0x80045a <timer0_overflow_count+0x2>
    15c6:	b0 91 5b 04 	lds	r27, 0x045B	; 0x80045b <timer0_overflow_count+0x3>
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	a1 1d       	adc	r26, r1
    15ce:	b1 1d       	adc	r27, r1
    15d0:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <timer0_overflow_count>
    15d4:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <timer0_overflow_count+0x1>
    15d8:	a0 93 5a 04 	sts	0x045A, r26	; 0x80045a <timer0_overflow_count+0x2>
    15dc:	b0 93 5b 04 	sts	0x045B, r27	; 0x80045b <timer0_overflow_count+0x3>
}
    15e0:	bf 91       	pop	r27
    15e2:	af 91       	pop	r26
    15e4:	9f 91       	pop	r25
    15e6:	8f 91       	pop	r24
    15e8:	3f 91       	pop	r19
    15ea:	2f 91       	pop	r18
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	0f 90       	pop	r0
    15f2:	1f 90       	pop	r1
    15f4:	18 95       	reti

000015f6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    15f6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    15f8:	f8 94       	cli
	m = timer0_millis;
    15fa:	60 91 54 04 	lds	r22, 0x0454	; 0x800454 <timer0_millis>
    15fe:	70 91 55 04 	lds	r23, 0x0455	; 0x800455 <timer0_millis+0x1>
    1602:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <timer0_millis+0x2>
    1606:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <timer0_millis+0x3>
	SREG = oldSREG;
    160a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    160c:	08 95       	ret

0000160e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    160e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1610:	f8 94       	cli
	m = timer0_overflow_count;
    1612:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <timer0_overflow_count>
    1616:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <timer0_overflow_count+0x1>
    161a:	a0 91 5a 04 	lds	r26, 0x045A	; 0x80045a <timer0_overflow_count+0x2>
    161e:	b0 91 5b 04 	lds	r27, 0x045B	; 0x80045b <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1622:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1624:	a8 9b       	sbis	0x15, 0	; 21
    1626:	05 c0       	rjmp	.+10     	; 0x1632 <micros+0x24>
    1628:	2f 3f       	cpi	r18, 0xFF	; 255
    162a:	19 f0       	breq	.+6      	; 0x1632 <micros+0x24>
		m++;
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	a1 1d       	adc	r26, r1
    1630:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1632:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1634:	ba 2f       	mov	r27, r26
    1636:	a9 2f       	mov	r26, r25
    1638:	98 2f       	mov	r25, r24
    163a:	88 27       	eor	r24, r24
    163c:	82 0f       	add	r24, r18
    163e:	91 1d       	adc	r25, r1
    1640:	a1 1d       	adc	r26, r1
    1642:	b1 1d       	adc	r27, r1
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	42 e0       	ldi	r20, 0x02	; 2
    164a:	66 0f       	add	r22, r22
    164c:	77 1f       	adc	r23, r23
    164e:	88 1f       	adc	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	4a 95       	dec	r20
    1654:	d1 f7       	brne	.-12     	; 0x164a <micros+0x3c>
}
    1656:	08 95       	ret

00001658 <delay>:

void delay(unsigned long ms)
{
    1658:	8f 92       	push	r8
    165a:	9f 92       	push	r9
    165c:	af 92       	push	r10
    165e:	bf 92       	push	r11
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	6b 01       	movw	r12, r22
    166a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    166c:	d0 df       	rcall	.-96     	; 0x160e <micros>
    166e:	4b 01       	movw	r8, r22
    1670:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1672:	c1 14       	cp	r12, r1
    1674:	d1 04       	cpc	r13, r1
    1676:	e1 04       	cpc	r14, r1
    1678:	f1 04       	cpc	r15, r1
		yield();
    167a:	f1 f0       	breq	.+60     	; 0x16b8 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    167c:	41 d3       	rcall	.+1666   	; 0x1d00 <yield>
    167e:	c7 df       	rcall	.-114    	; 0x160e <micros>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	88 19       	sub	r24, r8
    1686:	99 09       	sbc	r25, r9
    1688:	aa 09       	sbc	r26, r10
    168a:	bb 09       	sbc	r27, r11
    168c:	88 3e       	cpi	r24, 0xE8	; 232
    168e:	93 40       	sbci	r25, 0x03	; 3
    1690:	a1 05       	cpc	r26, r1
    1692:	b1 05       	cpc	r27, r1
    1694:	70 f3       	brcs	.-36     	; 0x1672 <delay+0x1a>
			ms--;
    1696:	21 e0       	ldi	r18, 0x01	; 1
    1698:	c2 1a       	sub	r12, r18
    169a:	d1 08       	sbc	r13, r1
    169c:	e1 08       	sbc	r14, r1
    169e:	f1 08       	sbc	r15, r1
			start += 1000;
    16a0:	88 ee       	ldi	r24, 0xE8	; 232
    16a2:	88 0e       	add	r8, r24
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	98 1e       	adc	r9, r24
    16a8:	a1 1c       	adc	r10, r1
    16aa:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    16ac:	c1 14       	cp	r12, r1
    16ae:	d1 04       	cpc	r13, r1
    16b0:	e1 04       	cpc	r14, r1
    16b2:	f1 04       	cpc	r15, r1
    16b4:	21 f7       	brne	.-56     	; 0x167e <delay+0x26>
    16b6:	dd cf       	rjmp	.-70     	; 0x1672 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    16b8:	ff 90       	pop	r15
    16ba:	ef 90       	pop	r14
    16bc:	df 90       	pop	r13
    16be:	cf 90       	pop	r12
    16c0:	bf 90       	pop	r11
    16c2:	af 90       	pop	r10
    16c4:	9f 90       	pop	r9
    16c6:	8f 90       	pop	r8
    16c8:	08 95       	ret

000016ca <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	91 05       	cpc	r25, r1
    16ce:	38 f0       	brcs	.+14     	; 0x16de <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    16d8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <delayMicroseconds+0x10>
    16de:	08 95       	ret

000016e0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    16e0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    16e2:	84 b5       	in	r24, 0x24	; 36
    16e4:	82 60       	ori	r24, 0x02	; 2
    16e6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    16e8:	84 b5       	in	r24, 0x24	; 36
    16ea:	81 60       	ori	r24, 0x01	; 1
    16ec:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    16ee:	85 b5       	in	r24, 0x25	; 37
    16f0:	82 60       	ori	r24, 0x02	; 2
    16f2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    16f4:	85 b5       	in	r24, 0x25	; 37
    16f6:	81 60       	ori	r24, 0x01	; 1
    16f8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    16fa:	ee e6       	ldi	r30, 0x6E	; 110
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	81 60       	ori	r24, 0x01	; 1
    1702:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1704:	e1 e8       	ldi	r30, 0x81	; 129
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    170a:	80 81       	ld	r24, Z
    170c:	82 60       	ori	r24, 0x02	; 2
    170e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1710:	80 81       	ld	r24, Z
    1712:	81 60       	ori	r24, 0x01	; 1
    1714:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1716:	e0 e8       	ldi	r30, 0x80	; 128
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	81 60       	ori	r24, 0x01	; 1
    171e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1720:	e1 eb       	ldi	r30, 0xB1	; 177
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	84 60       	ori	r24, 0x04	; 4
    1728:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    172a:	e0 eb       	ldi	r30, 0xB0	; 176
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	81 60       	ori	r24, 0x01	; 1
    1732:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1734:	e1 e9       	ldi	r30, 0x91	; 145
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	82 60       	ori	r24, 0x02	; 2
    173c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    173e:	80 81       	ld	r24, Z
    1740:	81 60       	ori	r24, 0x01	; 1
    1742:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1744:	e0 e9       	ldi	r30, 0x90	; 144
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	81 60       	ori	r24, 0x01	; 1
    174c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    174e:	e1 ea       	ldi	r30, 0xA1	; 161
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	82 60       	ori	r24, 0x02	; 2
    1756:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1758:	80 81       	ld	r24, Z
    175a:	81 60       	ori	r24, 0x01	; 1
    175c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    175e:	e0 ea       	ldi	r30, 0xA0	; 160
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	81 60       	ori	r24, 0x01	; 1
    1766:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1768:	e1 e2       	ldi	r30, 0x21	; 33
    176a:	f1 e0       	ldi	r31, 0x01	; 1
    176c:	80 81       	ld	r24, Z
    176e:	82 60       	ori	r24, 0x02	; 2
    1770:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1772:	80 81       	ld	r24, Z
    1774:	81 60       	ori	r24, 0x01	; 1
    1776:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1778:	e0 e2       	ldi	r30, 0x20	; 32
    177a:	f1 e0       	ldi	r31, 0x01	; 1
    177c:	80 81       	ld	r24, Z
    177e:	81 60       	ori	r24, 0x01	; 1
    1780:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1782:	ea e7       	ldi	r30, 0x7A	; 122
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	84 60       	ori	r24, 0x04	; 4
    178a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    178c:	80 81       	ld	r24, Z
    178e:	82 60       	ori	r24, 0x02	; 2
    1790:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1792:	80 81       	ld	r24, Z
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1798:	80 81       	ld	r24, Z
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    179e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    17a2:	08 95       	ret

000017a4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	fc 01       	movw	r30, r24
    17a8:	31 97       	sbiw	r30, 0x01	; 1
    17aa:	e2 31       	cpi	r30, 0x12	; 18
    17ac:	f1 05       	cpc	r31, r1
    17ae:	08 f0       	brcs	.+2      	; 0x17b2 <turnOffPWM+0xe>
    17b0:	4d c0       	rjmp	.+154    	; 0x184c <turnOffPWM+0xa8>
    17b2:	88 27       	eor	r24, r24
    17b4:	ee 58       	subi	r30, 0x8E	; 142
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ba:	a7 c4       	rjmp	.+2382   	; 0x210a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    17bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    17c0:	8f 77       	andi	r24, 0x7F	; 127
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    17c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    17c8:	8f 7d       	andi	r24, 0xDF	; 223
    17ca:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    17ce:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    17d0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    17d4:	87 7f       	andi	r24, 0xF7	; 247
    17d6:	f9 cf       	rjmp	.-14     	; 0x17ca <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    17d8:	84 b5       	in	r24, 0x24	; 36
    17da:	8f 77       	andi	r24, 0x7F	; 127
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    17de:	84 b5       	in	r24, 0x24	; 36
    17e0:	8f 7d       	andi	r24, 0xDF	; 223
    17e2:	84 bd       	out	0x24, r24	; 36
    17e4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    17e6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    17ea:	8f 77       	andi	r24, 0x7F	; 127
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    17ee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    17f2:	8f 7d       	andi	r24, 0xDF	; 223
    17f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    17f8:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    17fa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    17fe:	8f 77       	andi	r24, 0x7F	; 127
    1800:	07 c0       	rjmp	.+14     	; 0x1810 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1802:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1806:	8f 7d       	andi	r24, 0xDF	; 223
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    180a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    180e:	87 7f       	andi	r24, 0xF7	; 247
    1810:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1814:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1816:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    181a:	8f 77       	andi	r24, 0x7F	; 127
    181c:	07 c0       	rjmp	.+14     	; 0x182c <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    181e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1822:	8f 7d       	andi	r24, 0xDF	; 223
    1824:	03 c0       	rjmp	.+6      	; 0x182c <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1826:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    182a:	87 7f       	andi	r24, 0xF7	; 247
    182c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1830:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1832:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1836:	8f 77       	andi	r24, 0x7F	; 127
    1838:	07 c0       	rjmp	.+14     	; 0x1848 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    183a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    183e:	8f 7d       	andi	r24, 0xDF	; 223
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1842:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1846:	87 7f       	andi	r24, 0xF7	; 247
    1848:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    184c:	08 95       	ret

0000184e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	e2 5b       	subi	r30, 0xB2	; 178
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    185c:	fc 01       	movw	r30, r24
    185e:	ec 56       	subi	r30, 0x6C	; 108
    1860:	fe 4f       	sbci	r31, 0xFE	; 254
    1862:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1864:	88 23       	and	r24, r24
    1866:	61 f1       	breq	.+88     	; 0x18c0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	fc 01       	movw	r30, r24
    1870:	ec 50       	subi	r30, 0x0C	; 12
    1872:	fe 4f       	sbci	r31, 0xFE	; 254
    1874:	c5 91       	lpm	r28, Z+
    1876:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1878:	fc 01       	movw	r30, r24
    187a:	e6 52       	subi	r30, 0x26	; 38
    187c:	fe 4f       	sbci	r31, 0xFE	; 254
    187e:	a5 91       	lpm	r26, Z+
    1880:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1882:	61 11       	cpse	r22, r1
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1886:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1888:	f8 94       	cli
		*reg &= ~bit;
    188a:	88 81       	ld	r24, Y
    188c:	20 95       	com	r18
    188e:	82 23       	and	r24, r18
    1890:	88 83       	st	Y, r24
		*out &= ~bit;
    1892:	ec 91       	ld	r30, X
    1894:	2e 23       	and	r18, r30
    1896:	0b c0       	rjmp	.+22     	; 0x18ae <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1898:	62 30       	cpi	r22, 0x02	; 2
    189a:	61 f4       	brne	.+24     	; 0x18b4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    189c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    189e:	f8 94       	cli
		*reg &= ~bit;
    18a0:	88 81       	ld	r24, Y
    18a2:	32 2f       	mov	r19, r18
    18a4:	30 95       	com	r19
    18a6:	83 23       	and	r24, r19
    18a8:	88 83       	st	Y, r24
		*out |= bit;
    18aa:	ec 91       	ld	r30, X
    18ac:	2e 2b       	or	r18, r30
    18ae:	2c 93       	st	X, r18
		SREG = oldSREG;
    18b0:	9f bf       	out	0x3f, r25	; 63
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    18b4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    18b6:	f8 94       	cli
		*reg |= bit;
    18b8:	e8 81       	ld	r30, Y
    18ba:	2e 2b       	or	r18, r30
    18bc:	28 83       	st	Y, r18
		SREG = oldSREG;
    18be:	8f bf       	out	0x3f, r24	; 63
	}
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	f9 01       	movw	r30, r18
    18d2:	e8 5f       	subi	r30, 0xF8	; 248
    18d4:	fe 4f       	sbci	r31, 0xFE	; 254
    18d6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    18d8:	f9 01       	movw	r30, r18
    18da:	e2 5b       	subi	r30, 0xB2	; 178
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    18e0:	f9 01       	movw	r30, r18
    18e2:	ec 56       	subi	r30, 0x6C	; 108
    18e4:	fe 4f       	sbci	r31, 0xFE	; 254
    18e6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    18e8:	cc 23       	and	r28, r28
    18ea:	b9 f0       	breq	.+46     	; 0x191a <digitalWrite+0x54>
    18ec:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    18ee:	81 11       	cpse	r24, r1
    18f0:	59 df       	rcall	.-334    	; 0x17a4 <turnOffPWM>

	out = portOutputRegister(port);
    18f2:	ec 2f       	mov	r30, r28
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	e6 52       	subi	r30, 0x26	; 38
    18fc:	fe 4f       	sbci	r31, 0xFE	; 254
    18fe:	a5 91       	lpm	r26, Z+
    1900:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1902:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1904:	f8 94       	cli

	if (val == LOW) {
    1906:	11 11       	cpse	r17, r1
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <digitalWrite+0x4c>
		*out &= ~bit;
    190a:	8c 91       	ld	r24, X
    190c:	d0 95       	com	r29
    190e:	d8 23       	and	r29, r24
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1912:	ec 91       	ld	r30, X
    1914:	de 2b       	or	r29, r30
    1916:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1918:	9f bf       	out	0x3f, r25	; 63
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	08 95       	ret

00001922 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    1922:	fc 01       	movw	r30, r24
    1924:	13 82       	std	Z+3, r1	; 0x03
    1926:	12 82       	std	Z+2, r1	; 0x02
    1928:	83 ee       	ldi	r24, 0xE3	; 227
    192a:	92 e0       	ldi	r25, 0x02	; 2
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
    1930:	64 83       	std	Z+4, r22	; 0x04
    1932:	41 87       	std	Z+9, r20	; 0x09
    1934:	22 87       	std	Z+10, r18	; 0x0a
    1936:	13 86       	std	Z+11, r1	; 0x0b
    1938:	08 95       	ret

0000193a <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	ec 01       	movw	r28, r24
    1942:	16 2f       	mov	r17, r22
    1944:	6c 81       	ldd	r22, Y+4	; 0x04
    1946:	8c e5       	ldi	r24, 0x5C	; 92
    1948:	94 e0       	ldi	r25, 0x04	; 4
    194a:	b9 d1       	rcall	.+882    	; 0x1cbe <_ZN7TwoWire17beginTransmissionEh>
    194c:	6b 85       	ldd	r22, Y+11	; 0x0b
    194e:	61 2b       	or	r22, r17
    1950:	8c e5       	ldi	r24, 0x5C	; 92
    1952:	94 e0       	ldi	r25, 0x04	; 4
    1954:	67 d1       	rcall	.+718    	; 0x1c24 <_ZN7TwoWire5writeEh>
    1956:	8c e5       	ldi	r24, 0x5C	; 92
    1958:	94 e0       	ldi	r25, 0x04	; 4
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	ca c1       	rjmp	.+916    	; 0x1cf6 <_ZN7TwoWire15endTransmissionEv>

00001962 <_ZN17LiquidCrystal_I2C9backlightEv>:
    1962:	28 e0       	ldi	r18, 0x08	; 8
    1964:	fc 01       	movw	r30, r24
    1966:	23 87       	std	Z+11, r18	; 0x0b
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	e7 cf       	rjmp	.-50     	; 0x193a <_ZN17LiquidCrystal_I2C13expanderWriteEh>

0000196c <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	8c 01       	movw	r16, r24
    1974:	c6 2f       	mov	r28, r22
    1976:	64 60       	ori	r22, 0x04	; 4
    1978:	e0 df       	rcall	.-64     	; 0x193a <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a5 de       	rcall	.-694    	; 0x16ca <delayMicroseconds>
    1980:	6c 2f       	mov	r22, r28
    1982:	6b 7f       	andi	r22, 0xFB	; 251
    1984:	c8 01       	movw	r24, r16
    1986:	d9 df       	rcall	.-78     	; 0x193a <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1988:	82 e3       	ldi	r24, 0x32	; 50
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	9b ce       	rjmp	.-714    	; 0x16ca <delayMicroseconds>

00001994 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ec 01       	movw	r28, r24
    199c:	16 2f       	mov	r17, r22
    199e:	cd df       	rcall	.-102    	; 0x193a <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    19a0:	61 2f       	mov	r22, r17
    19a2:	ce 01       	movw	r24, r28
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	e0 cf       	rjmp	.-64     	; 0x196c <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000019ac <_ZN17LiquidCrystal_I2C4sendEhh>:
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	8c 01       	movw	r16, r24
    19b6:	c6 2f       	mov	r28, r22
    19b8:	d4 2f       	mov	r29, r20
    19ba:	60 7f       	andi	r22, 0xF0	; 240
    19bc:	64 2b       	or	r22, r20
    19be:	ea df       	rcall	.-44     	; 0x1994 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    19c0:	80 e1       	ldi	r24, 0x10	; 16
    19c2:	c8 9f       	mul	r28, r24
    19c4:	b0 01       	movw	r22, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	6d 2b       	or	r22, r29
    19ca:	c8 01       	movw	r24, r16
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	df cf       	rjmp	.-66     	; 0x1994 <_ZN17LiquidCrystal_I2C10write4bitsEh>

000019d6 <_ZN17LiquidCrystal_I2C7commandEh>:
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	e9 cf       	rjmp	.-46     	; 0x19ac <_ZN17LiquidCrystal_I2C4sendEhh>

000019da <_ZN17LiquidCrystal_I2C5clearEv>:
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	fc df       	rcall	.-8      	; 0x19d6 <_ZN17LiquidCrystal_I2C7commandEh>
    19de:	80 ed       	ldi	r24, 0xD0	; 208
    19e0:	97 e0       	ldi	r25, 0x07	; 7
    19e2:	73 ce       	rjmp	.-794    	; 0x16ca <delayMicroseconds>

000019e4 <_ZN17LiquidCrystal_I2C4homeEv>:
    19e4:	62 e0       	ldi	r22, 0x02	; 2
    19e6:	f7 df       	rcall	.-18     	; 0x19d6 <_ZN17LiquidCrystal_I2C7commandEh>
    19e8:	80 ed       	ldi	r24, 0xD0	; 208
    19ea:	97 e0       	ldi	r25, 0x07	; 7
    19ec:	6e ce       	rjmp	.-804    	; 0x16ca <delayMicroseconds>

000019ee <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	28 97       	sbiw	r28, 0x08	; 8
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	9c 01       	movw	r18, r24
    1a04:	88 e0       	ldi	r24, 0x08	; 8
    1a06:	e3 e0       	ldi	r30, 0x03	; 3
    1a08:	f2 e0       	ldi	r31, 0x02	; 2
    1a0a:	de 01       	movw	r26, r28
    1a0c:	11 96       	adiw	r26, 0x01	; 1
    1a0e:	01 90       	ld	r0, Z+
    1a10:	0d 92       	st	X+, r0
    1a12:	8a 95       	dec	r24
    1a14:	e1 f7       	brne	.-8      	; 0x1a0e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    1a16:	f9 01       	movw	r30, r18
    1a18:	80 85       	ldd	r24, Z+8	; 0x08
    1a1a:	84 17       	cp	r24, r20
    1a1c:	10 f4       	brcc	.+4      	; 0x1a22 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    1a1e:	4f ef       	ldi	r20, 0xFF	; 255
    1a20:	48 0f       	add	r20, r24
    1a22:	fe 01       	movw	r30, r28
    1a24:	31 96       	adiw	r30, 0x01	; 1
    1a26:	e4 0f       	add	r30, r20
    1a28:	f1 1d       	adc	r31, r1
    1a2a:	e4 0f       	add	r30, r20
    1a2c:	f1 1d       	adc	r31, r1
    1a2e:	90 81       	ld	r25, Z
    1a30:	69 0f       	add	r22, r25
    1a32:	60 68       	ori	r22, 0x80	; 128
    1a34:	c9 01       	movw	r24, r18
    1a36:	28 96       	adiw	r28, 0x08	; 8
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	c7 cf       	rjmp	.-114    	; 0x19d6 <_ZN17LiquidCrystal_I2C7commandEh>

00001a48 <_ZN17LiquidCrystal_I2C7displayEv>:
    1a48:	fc 01       	movw	r30, r24
    1a4a:	66 81       	ldd	r22, Z+6	; 0x06
    1a4c:	26 2f       	mov	r18, r22
    1a4e:	24 60       	ori	r18, 0x04	; 4
    1a50:	26 83       	std	Z+6, r18	; 0x06
    1a52:	6c 60       	ori	r22, 0x0C	; 12
    1a54:	c0 cf       	rjmp	.-128    	; 0x19d6 <_ZN17LiquidCrystal_I2C7commandEh>

00001a56 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	a9 df       	rcall	.-174    	; 0x19ac <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	08 95       	ret

00001a60 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	ec 01       	movw	r28, r24
	if (lines > 1) {
    1a66:	42 30       	cpi	r20, 0x02	; 2
    1a68:	18 f0       	brcs	.+6      	; 0x1a70 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	88 60       	ori	r24, 0x08	; 8
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    1a70:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    1a72:	22 23       	and	r18, r18
    1a74:	29 f0       	breq	.+10     	; 0x1a80 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    1a76:	41 30       	cpi	r20, 0x01	; 1
    1a78:	19 f4       	brne	.+6      	; 0x1a80 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	84 60       	ori	r24, 0x04	; 4
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    1a80:	62 e3       	ldi	r22, 0x32	; 50
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	e7 dd       	rcall	.-1074   	; 0x1658 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    1a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	55 df       	rcall	.-342    	; 0x193a <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    1a90:	68 ee       	ldi	r22, 0xE8	; 232
    1a92:	73 e0       	ldi	r23, 0x03	; 3
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	df dd       	rcall	.-1090   	; 0x1658 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    1a9a:	60 e3       	ldi	r22, 0x30	; 48
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	7a df       	rcall	.-268    	; 0x1994 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1aa0:	84 e9       	ldi	r24, 0x94	; 148
    1aa2:	91 e1       	ldi	r25, 0x11	; 17
    1aa4:	12 de       	rcall	.-988    	; 0x16ca <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    1aa6:	60 e3       	ldi	r22, 0x30	; 48
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	74 df       	rcall	.-280    	; 0x1994 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1aac:	84 e9       	ldi	r24, 0x94	; 148
    1aae:	91 e1       	ldi	r25, 0x11	; 17
    1ab0:	0c de       	rcall	.-1000   	; 0x16ca <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    1ab2:	60 e3       	ldi	r22, 0x30	; 48
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	6e df       	rcall	.-292    	; 0x1994 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    1ab8:	86 e9       	ldi	r24, 0x96	; 150
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	06 de       	rcall	.-1012   	; 0x16ca <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    1abe:	60 e2       	ldi	r22, 0x20	; 32
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	68 df       	rcall	.-304    	; 0x1994 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    1ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac6:	60 62       	ori	r22, 0x20	; 32
    1ac8:	ce 01       	movw	r24, r28
    1aca:	85 df       	rcall	.-246    	; 0x19d6 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1acc:	84 e0       	ldi	r24, 0x04	; 4
    1ace:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	ba df       	rcall	.-140    	; 0x1a48 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	81 df       	rcall	.-254    	; 0x19da <_ZN17LiquidCrystal_I2C5clearEv>
    1ad8:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1ada:	8f 83       	std	Y+7, r24	; 0x07
    1adc:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1ade:	ce 01       	movw	r24, r28
    1ae0:	7a df       	rcall	.-268    	; 0x19d6 <_ZN17LiquidCrystal_I2C7commandEh>
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	df 91       	pop	r29
	
	home();
    1ae6:	cf 91       	pop	r28
  
}
    1ae8:	7d cf       	rjmp	.-262    	; 0x19e4 <_ZN17LiquidCrystal_I2C4homeEv>

00001aea <_ZN17LiquidCrystal_I2C9init_privEv>:
    1aea:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    1aec:	df 93       	push	r29
    1aee:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    1af0:	8c e5       	ldi	r24, 0x5C	; 92
    1af2:	94 e0       	ldi	r25, 0x04	; 4
    1af4:	d5 d0       	rcall	.+426    	; 0x1ca0 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    1af6:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	4a 85       	ldd	r20, Y+10	; 0x0a
    1afc:	69 85       	ldd	r22, Y+9	; 0x09
    1afe:	ce 01       	movw	r24, r28
}
    1b00:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    1b02:	cf 91       	pop	r28
    1b04:	ad cf       	rjmp	.-166    	; 0x1a60 <_ZN17LiquidCrystal_I2C5beginEhhh>

00001b06 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    1b06:	f1 cf       	rjmp	.-30     	; 0x1aea <_ZN17LiquidCrystal_I2C9init_privEv>

00001b08 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1b08:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZN7TwoWire14rxBufferLengthE>
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	20 91 91 04 	lds	r18, 0x0491	; 0x800491 <_ZN7TwoWire13rxBufferIndexE>
    1b12:	82 1b       	sub	r24, r18
    1b14:	91 09       	sbc	r25, r1
    1b16:	08 95       	ret

00001b18 <_ZN7TwoWire4readEv>:
    1b18:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <_ZN7TwoWire13rxBufferIndexE>
    1b1c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZN7TwoWire14rxBufferLengthE>
    1b20:	98 17       	cp	r25, r24
    1b22:	50 f4       	brcc	.+20     	; 0x1b38 <_ZN7TwoWire4readEv+0x20>
    1b24:	e9 2f       	mov	r30, r25
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	ee 56       	subi	r30, 0x6E	; 110
    1b2a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b2c:	20 81       	ld	r18, Z
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	9f 5f       	subi	r25, 0xFF	; 255
    1b32:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <_ZN7TwoWire13rxBufferIndexE>
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <_ZN7TwoWire4readEv+0x24>
    1b38:	2f ef       	ldi	r18, 0xFF	; 255
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	c9 01       	movw	r24, r18
    1b3e:	08 95       	ret

00001b40 <_ZN7TwoWire4peekEv>:
    1b40:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <_ZN7TwoWire13rxBufferIndexE>
    1b44:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZN7TwoWire14rxBufferLengthE>
    1b48:	e8 17       	cp	r30, r24
    1b4a:	30 f4       	brcc	.+12     	; 0x1b58 <_ZN7TwoWire4peekEv+0x18>
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	ee 56       	subi	r30, 0x6E	; 110
    1b50:	fb 4f       	sbci	r31, 0xFB	; 251
    1b52:	80 81       	ld	r24, Z
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	08 95       	ret
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	9f ef       	ldi	r25, 0xFF	; 255
    1b5c:	08 95       	ret

00001b5e <_ZN7TwoWire5flushEv>:
    1b5e:	08 95       	ret

00001b60 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
    1b66:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <_ZN7TwoWire14user_onReceiveE>
    1b6a:	f0 91 69 04 	lds	r31, 0x0469	; 0x800469 <_ZN7TwoWire14user_onReceiveE+0x1>
    1b6e:	30 97       	sbiw	r30, 0x00	; 0
    1b70:	f1 f0       	breq	.+60     	; 0x1bae <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b72:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <_ZN7TwoWire13rxBufferIndexE>
    1b76:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZN7TwoWire14rxBufferLengthE>
    1b7a:	98 17       	cp	r25, r24
    1b7c:	c0 f0       	brcs	.+48     	; 0x1bae <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	29 2f       	mov	r18, r25
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	26 17       	cp	r18, r22
    1b86:	37 07       	cpc	r19, r23
    1b88:	54 f4       	brge	.+20     	; 0x1b9e <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1b8a:	de 01       	movw	r26, r28
    1b8c:	a2 0f       	add	r26, r18
    1b8e:	b3 1f       	adc	r27, r19
    1b90:	4c 91       	ld	r20, X
    1b92:	d9 01       	movw	r26, r18
    1b94:	ae 56       	subi	r26, 0x6E	; 110
    1b96:	bb 4f       	sbci	r27, 0xFB	; 251
    1b98:	4c 93       	st	X, r20
    1b9a:	9f 5f       	subi	r25, 0xFF	; 255
    1b9c:	f1 cf       	rjmp	.-30     	; 0x1b80 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1b9e:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <_ZN7TwoWire13rxBufferIndexE>
    1ba2:	60 93 90 04 	sts	0x0490, r22	; 0x800490 <_ZN7TwoWire14rxBufferLengthE>
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	19 94       	eijmp
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <_ZN7TwoWire16onRequestServiceEv>:
    1bb4:	e0 91 6a 04 	lds	r30, 0x046A	; 0x80046a <_ZN7TwoWire14user_onRequestE>
    1bb8:	f0 91 6b 04 	lds	r31, 0x046B	; 0x80046b <_ZN7TwoWire14user_onRequestE+0x1>
    1bbc:	30 97       	sbiw	r30, 0x00	; 0
    1bbe:	29 f0       	breq	.+10     	; 0x1bca <_ZN7TwoWire16onRequestServiceEv+0x16>
    1bc0:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZN7TwoWire13txBufferIndexE>
    1bc4:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZN7TwoWire14txBufferLengthE>
    1bc8:	19 94       	eijmp
    1bca:	08 95       	ret

00001bcc <_ZN7TwoWire5writeEPKhj>:
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	7c 01       	movw	r14, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	8a 01       	movw	r16, r20
    1be2:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <_ZN7TwoWire12transmittingE>
    1be6:	22 23       	and	r18, r18
    1be8:	89 f0       	breq	.+34     	; 0x1c0c <_ZN7TwoWire5writeEPKhj+0x40>
    1bea:	eb 01       	movw	r28, r22
    1bec:	6b 01       	movw	r12, r22
    1bee:	c4 0e       	add	r12, r20
    1bf0:	d5 1e       	adc	r13, r21
    1bf2:	cc 15       	cp	r28, r12
    1bf4:	dd 05       	cpc	r29, r13
    1bf6:	61 f0       	breq	.+24     	; 0x1c10 <_ZN7TwoWire5writeEPKhj+0x44>
    1bf8:	69 91       	ld	r22, Y+
    1bfa:	d7 01       	movw	r26, r14
    1bfc:	ed 91       	ld	r30, X+
    1bfe:	fc 91       	ld	r31, X
    1c00:	01 90       	ld	r0, Z+
    1c02:	f0 81       	ld	r31, Z
    1c04:	e0 2d       	mov	r30, r0
    1c06:	c7 01       	movw	r24, r14
    1c08:	19 95       	eicall
    1c0a:	f3 cf       	rjmp	.-26     	; 0x1bf2 <_ZN7TwoWire5writeEPKhj+0x26>
    1c0c:	64 2f       	mov	r22, r20
    1c0e:	eb d0       	rcall	.+470    	; 0x1de6 <twi_transmit>
    1c10:	c8 01       	movw	r24, r16
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	08 95       	ret

00001c24 <_ZN7TwoWire5writeEh>:
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	1f 92       	push	r1
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	69 83       	std	Y+1, r22	; 0x01
    1c30:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <_ZN7TwoWire12transmittingE>
    1c34:	22 23       	and	r18, r18
    1c36:	d1 f0       	breq	.+52     	; 0x1c6c <_ZN7TwoWire5writeEh+0x48>
    1c38:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <_ZN7TwoWire14txBufferLengthE>
    1c3c:	20 32       	cpi	r18, 0x20	; 32
    1c3e:	40 f0       	brcs	.+16     	; 0x1c50 <_ZN7TwoWire5writeEh+0x2c>
    1c40:	21 e0       	ldi	r18, 0x01	; 1
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	fc 01       	movw	r30, r24
    1c46:	33 83       	std	Z+3, r19	; 0x03
    1c48:	22 83       	std	Z+2, r18	; 0x02
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <_ZN7TwoWire5writeEh+0x54>
    1c50:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <_ZN7TwoWire13txBufferIndexE>
    1c54:	e8 2f       	mov	r30, r24
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	e1 59       	subi	r30, 0x91	; 145
    1c5a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c5c:	99 81       	ldd	r25, Y+1	; 0x01
    1c5e:	90 83       	st	Z, r25
    1c60:	8f 5f       	subi	r24, 0xFF	; 255
    1c62:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <_ZN7TwoWire13txBufferIndexE>
    1c66:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <_ZN7TwoWire14txBufferLengthE>
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <_ZN7TwoWire5writeEh+0x50>
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	ce 01       	movw	r24, r28
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	b9 d0       	rcall	.+370    	; 0x1de6 <twi_transmit>
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <_ZN7TwoWireC1Ev>:
    1c80:	fc 01       	movw	r30, r24
    1c82:	13 82       	std	Z+3, r1	; 0x03
    1c84:	12 82       	std	Z+2, r1	; 0x02
    1c86:	88 ee       	ldi	r24, 0xE8	; 232
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	a0 e0       	ldi	r26, 0x00	; 0
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	84 83       	std	Z+4, r24	; 0x04
    1c90:	95 83       	std	Z+5, r25	; 0x05
    1c92:	a6 83       	std	Z+6, r26	; 0x06
    1c94:	b7 83       	std	Z+7, r27	; 0x07
    1c96:	8f ee       	ldi	r24, 0xEF	; 239
    1c98:	92 e0       	ldi	r25, 0x02	; 2
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	08 95       	ret

00001ca0 <_ZN7TwoWire5beginEv>:
    1ca0:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <_ZN7TwoWire13rxBufferIndexE>
    1ca4:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZN7TwoWire14rxBufferLengthE>
    1ca8:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZN7TwoWire13txBufferIndexE>
    1cac:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZN7TwoWire14txBufferLengthE>
    1cb0:	28 d0       	rcall	.+80     	; 0x1d02 <twi_init>
    1cb2:	8a ed       	ldi	r24, 0xDA	; 218
    1cb4:	9d e0       	ldi	r25, 0x0D	; 13
    1cb6:	c4 d0       	rcall	.+392    	; 0x1e40 <twi_attachSlaveTxEvent>
    1cb8:	80 eb       	ldi	r24, 0xB0	; 176
    1cba:	9d e0       	ldi	r25, 0x0D	; 13
    1cbc:	bc c0       	rjmp	.+376    	; 0x1e36 <twi_attachSlaveRxEvent>

00001cbe <_ZN7TwoWire17beginTransmissionEh>:
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <_ZN7TwoWire12transmittingE>
    1cc4:	60 93 8f 04 	sts	0x048F, r22	; 0x80048f <_ZN7TwoWire9txAddressE>
    1cc8:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZN7TwoWire13txBufferIndexE>
    1ccc:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZN7TwoWire14txBufferLengthE>
    1cd0:	08 95       	ret

00001cd2 <_ZN7TwoWire15endTransmissionEh>:
    1cd2:	0f 93       	push	r16
    1cd4:	06 2f       	mov	r16, r22
    1cd6:	21 e0       	ldi	r18, 0x01	; 1
    1cd8:	40 91 6d 04 	lds	r20, 0x046D	; 0x80046d <_ZN7TwoWire14txBufferLengthE>
    1cdc:	6f e6       	ldi	r22, 0x6F	; 111
    1cde:	74 e0       	ldi	r23, 0x04	; 4
    1ce0:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <_ZN7TwoWire9txAddressE>
    1ce4:	2a d0       	rcall	.+84     	; 0x1d3a <twi_writeTo>
    1ce6:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZN7TwoWire13txBufferIndexE>
    1cea:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZN7TwoWire14txBufferLengthE>
    1cee:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <_ZN7TwoWire12transmittingE>
    1cf2:	0f 91       	pop	r16
    1cf4:	08 95       	ret

00001cf6 <_ZN7TwoWire15endTransmissionEv>:
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	ec cf       	rjmp	.-40     	; 0x1cd2 <_ZN7TwoWire15endTransmissionEh>

00001cfa <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1cfa:	8c e5       	ldi	r24, 0x5C	; 92
    1cfc:	94 e0       	ldi	r25, 0x04	; 4
    1cfe:	c0 cf       	rjmp	.-128    	; 0x1c80 <_ZN7TwoWireC1Ev>

00001d00 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1d00:	08 95       	ret

00001d02 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1d02:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <twi_state>
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <twi_sendStop>
    1d0c:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <twi_inRepStart>
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	84 e1       	ldi	r24, 0x14	; 20
    1d14:	d8 dd       	rcall	.-1104   	; 0x18c6 <digitalWrite>
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	85 e1       	ldi	r24, 0x15	; 21
    1d1a:	d5 dd       	rcall	.-1110   	; 0x18c6 <digitalWrite>
    1d1c:	e9 eb       	ldi	r30, 0xB9	; 185
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	8e 7f       	andi	r24, 0xFE	; 254
    1d24:	80 83       	st	Z, r24
    1d26:	80 81       	ld	r24, Z
    1d28:	8d 7f       	andi	r24, 0xFD	; 253
    1d2a:	80 83       	st	Z, r24
    1d2c:	88 e4       	ldi	r24, 0x48	; 72
    1d2e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1d32:	85 e4       	ldi	r24, 0x45	; 69
    1d34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1d38:	08 95       	ret

00001d3a <twi_writeTo>:
    1d3a:	0f 93       	push	r16
    1d3c:	41 32       	cpi	r20, 0x21	; 33
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <twi_writeTo+0x8>
    1d40:	4a c0       	rjmp	.+148    	; 0x1dd6 <twi_writeTo+0x9c>
    1d42:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <twi_state>
    1d46:	91 11       	cpse	r25, r1
    1d48:	fc cf       	rjmp	.-8      	; 0x1d42 <twi_writeTo+0x8>
    1d4a:	32 e0       	ldi	r19, 0x02	; 2
    1d4c:	30 93 1f 05 	sts	0x051F, r19	; 0x80051f <twi_state>
    1d50:	00 93 1d 05 	sts	0x051D, r16	; 0x80051d <twi_sendStop>
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	30 93 b2 04 	sts	0x04B2, r19	; 0x8004b2 <twi_error>
    1d5a:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <twi_masterBufferIndex>
    1d5e:	40 93 f6 04 	sts	0x04F6, r20	; 0x8004f6 <twi_masterBufferLength>
    1d62:	56 2f       	mov	r21, r22
    1d64:	a8 ef       	ldi	r26, 0xF8	; 248
    1d66:	b4 e0       	ldi	r27, 0x04	; 4
    1d68:	fb 01       	movw	r30, r22
    1d6a:	3e 2f       	mov	r19, r30
    1d6c:	35 1b       	sub	r19, r21
    1d6e:	34 17       	cp	r19, r20
    1d70:	18 f4       	brcc	.+6      	; 0x1d78 <twi_writeTo+0x3e>
    1d72:	31 91       	ld	r19, Z+
    1d74:	3d 93       	st	X+, r19
    1d76:	f9 cf       	rjmp	.-14     	; 0x1d6a <twi_writeTo+0x30>
    1d78:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <twi_slarw>
    1d7c:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <twi_slarw>
    1d80:	88 0f       	add	r24, r24
    1d82:	83 2b       	or	r24, r19
    1d84:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <twi_slarw>
    1d88:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <twi_inRepStart>
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	61 f4       	brne	.+24     	; 0x1da8 <twi_writeTo+0x6e>
    1d90:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <twi_inRepStart>
    1d94:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <twi_slarw>
    1d98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1d9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1da0:	83 fd       	sbrc	r24, 3
    1da2:	f8 cf       	rjmp	.-16     	; 0x1d94 <twi_writeTo+0x5a>
    1da4:	85 ec       	ldi	r24, 0xC5	; 197
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <twi_writeTo+0x70>
    1da8:	85 ee       	ldi	r24, 0xE5	; 229
    1daa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1dae:	22 23       	and	r18, r18
    1db0:	21 f0       	breq	.+8      	; 0x1dba <twi_writeTo+0x80>
    1db2:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <twi_state>
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	d1 f3       	breq	.-12     	; 0x1dae <twi_writeTo+0x74>
    1dba:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <twi_error>
    1dbe:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc0:	79 f0       	breq	.+30     	; 0x1de0 <twi_writeTo+0xa6>
    1dc2:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <twi_error>
    1dc6:	80 32       	cpi	r24, 0x20	; 32
    1dc8:	41 f0       	breq	.+16     	; 0x1dda <twi_writeTo+0xa0>
    1dca:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <twi_error>
    1dce:	80 33       	cpi	r24, 0x30	; 48
    1dd0:	31 f0       	breq	.+12     	; 0x1dde <twi_writeTo+0xa4>
    1dd2:	94 e0       	ldi	r25, 0x04	; 4
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <twi_writeTo+0xa6>
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	03 c0       	rjmp	.+6      	; 0x1de0 <twi_writeTo+0xa6>
    1dda:	92 e0       	ldi	r25, 0x02	; 2
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <twi_writeTo+0xa6>
    1dde:	93 e0       	ldi	r25, 0x03	; 3
    1de0:	89 2f       	mov	r24, r25
    1de2:	0f 91       	pop	r16
    1de4:	08 95       	ret

00001de6 <twi_transmit>:
    1de6:	40 91 d4 04 	lds	r20, 0x04D4	; 0x8004d4 <twi_txBufferLength>
    1dea:	26 2f       	mov	r18, r22
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	24 0f       	add	r18, r20
    1df0:	31 1d       	adc	r19, r1
    1df2:	21 32       	cpi	r18, 0x21	; 33
    1df4:	31 05       	cpc	r19, r1
    1df6:	dc f4       	brge	.+54     	; 0x1e2e <twi_transmit+0x48>
    1df8:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <twi_state>
    1dfc:	24 30       	cpi	r18, 0x04	; 4
    1dfe:	c9 f4       	brne	.+50     	; 0x1e32 <twi_transmit+0x4c>
    1e00:	fc 01       	movw	r30, r24
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	86 17       	cp	r24, r22
    1e08:	58 f4       	brcc	.+22     	; 0x1e20 <twi_transmit+0x3a>
    1e0a:	30 91 d4 04 	lds	r19, 0x04D4	; 0x8004d4 <twi_txBufferLength>
    1e0e:	21 91       	ld	r18, Z+
    1e10:	dc 01       	movw	r26, r24
    1e12:	aa 52       	subi	r26, 0x2A	; 42
    1e14:	bb 4f       	sbci	r27, 0xFB	; 251
    1e16:	a3 0f       	add	r26, r19
    1e18:	b1 1d       	adc	r27, r1
    1e1a:	2c 93       	st	X, r18
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	f3 cf       	rjmp	.-26     	; 0x1e06 <twi_transmit+0x20>
    1e20:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <twi_txBufferLength>
    1e24:	68 0f       	add	r22, r24
    1e26:	60 93 d4 04 	sts	0x04D4, r22	; 0x8004d4 <twi_txBufferLength>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	08 95       	ret
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	08 95       	ret
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	08 95       	ret

00001e36 <twi_attachSlaveRxEvent>:
    1e36:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <twi_onSlaveReceive+0x1>
    1e3a:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <twi_onSlaveReceive>
    1e3e:	08 95       	ret

00001e40 <twi_attachSlaveTxEvent>:
    1e40:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <twi_onSlaveTransmit+0x1>
    1e44:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <twi_onSlaveTransmit>
    1e48:	08 95       	ret

00001e4a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1e4a:	85 ed       	ldi	r24, 0xD5	; 213
    1e4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1e50:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1e54:	84 fd       	sbrc	r24, 4
    1e56:	fc cf       	rjmp	.-8      	; 0x1e50 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1e58:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <twi_state>
    1e5c:	08 95       	ret

00001e5e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1e5e:	85 ec       	ldi	r24, 0xC5	; 197
    1e60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    1e64:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <twi_state>
    1e68:	08 95       	ret

00001e6a <__vector_39>:
}

ISR(TWI_vect)
{
    1e6a:	1f 92       	push	r1
    1e6c:	0f 92       	push	r0
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	0f 92       	push	r0
    1e72:	11 24       	eor	r1, r1
    1e74:	0b b6       	in	r0, 0x3b	; 59
    1e76:	0f 92       	push	r0
    1e78:	2f 93       	push	r18
    1e7a:	3f 93       	push	r19
    1e7c:	4f 93       	push	r20
    1e7e:	5f 93       	push	r21
    1e80:	6f 93       	push	r22
    1e82:	7f 93       	push	r23
    1e84:	8f 93       	push	r24
    1e86:	9f 93       	push	r25
    1e88:	af 93       	push	r26
    1e8a:	bf 93       	push	r27
    1e8c:	ef 93       	push	r30
    1e8e:	ff 93       	push	r31
  switch(TW_STATUS){
    1e90:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1e94:	88 7f       	andi	r24, 0xF8	; 248
    1e96:	80 36       	cpi	r24, 0x60	; 96
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <__vector_39+0x32>
    1e9a:	9d c0       	rjmp	.+314    	; 0x1fd6 <__vector_39+0x16c>
    1e9c:	70 f5       	brcc	.+92     	; 0x1efa <__vector_39+0x90>
    1e9e:	88 32       	cpi	r24, 0x28	; 40
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <__vector_39+0x3a>
    1ea2:	5c c0       	rjmp	.+184    	; 0x1f5c <__vector_39+0xf2>
    1ea4:	90 f4       	brcc	.+36     	; 0x1eca <__vector_39+0x60>
    1ea6:	80 31       	cpi	r24, 0x10	; 16
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <__vector_39+0x42>
    1eaa:	55 c0       	rjmp	.+170    	; 0x1f56 <__vector_39+0xec>
    1eac:	38 f4       	brcc	.+14     	; 0x1ebc <__vector_39+0x52>
    1eae:	88 23       	and	r24, r24
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <__vector_39+0x4a>
    1eb2:	f3 c0       	rjmp	.+486    	; 0x209a <__vector_39+0x230>
    1eb4:	88 30       	cpi	r24, 0x08	; 8
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <__vector_39+0x50>
    1eb8:	4e c0       	rjmp	.+156    	; 0x1f56 <__vector_39+0xec>
    1eba:	f2 c0       	rjmp	.+484    	; 0x20a0 <__vector_39+0x236>
    1ebc:	88 31       	cpi	r24, 0x18	; 24
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <__vector_39+0x58>
    1ec0:	4d c0       	rjmp	.+154    	; 0x1f5c <__vector_39+0xf2>
    1ec2:	80 32       	cpi	r24, 0x20	; 32
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <__vector_39+0x5e>
    1ec6:	5e c0       	rjmp	.+188    	; 0x1f84 <__vector_39+0x11a>
    1ec8:	eb c0       	rjmp	.+470    	; 0x20a0 <__vector_39+0x236>
    1eca:	80 34       	cpi	r24, 0x40	; 64
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <__vector_39+0x66>
    1ece:	69 c0       	rjmp	.+210    	; 0x1fa2 <__vector_39+0x138>
    1ed0:	50 f4       	brcc	.+20     	; 0x1ee6 <__vector_39+0x7c>
    1ed2:	80 33       	cpi	r24, 0x30	; 48
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <__vector_39+0x6e>
    1ed6:	56 c0       	rjmp	.+172    	; 0x1f84 <__vector_39+0x11a>
    1ed8:	88 33       	cpi	r24, 0x38	; 56
    1eda:	09 f0       	breq	.+2      	; 0x1ede <__vector_39+0x74>
    1edc:	e1 c0       	rjmp	.+450    	; 0x20a0 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1ede:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_error>
      twi_releaseBus();
    1ee2:	bd df       	rcall	.-134    	; 0x1e5e <twi_releaseBus>
      break;
    1ee4:	dd c0       	rjmp	.+442    	; 0x20a0 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ee6:	80 35       	cpi	r24, 0x50	; 80
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <__vector_39+0x82>
    1eea:	4f c0       	rjmp	.+158    	; 0x1f8a <__vector_39+0x120>
    1eec:	88 35       	cpi	r24, 0x58	; 88
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <__vector_39+0x88>
    1ef0:	5d c0       	rjmp	.+186    	; 0x1fac <__vector_39+0x142>
    1ef2:	88 34       	cpi	r24, 0x48	; 72
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <__vector_39+0x8e>
    1ef6:	d4 c0       	rjmp	.+424    	; 0x20a0 <__vector_39+0x236>
    1ef8:	d2 c0       	rjmp	.+420    	; 0x209e <__vector_39+0x234>
    1efa:	88 39       	cpi	r24, 0x98	; 152
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <__vector_39+0x96>
    1efe:	c3 c0       	rjmp	.+390    	; 0x2086 <__vector_39+0x21c>
    1f00:	a8 f4       	brcc	.+42     	; 0x1f2c <__vector_39+0xc2>
    1f02:	88 37       	cpi	r24, 0x78	; 120
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <__vector_39+0x9e>
    1f06:	67 c0       	rjmp	.+206    	; 0x1fd6 <__vector_39+0x16c>
    1f08:	38 f4       	brcc	.+14     	; 0x1f18 <__vector_39+0xae>
    1f0a:	88 36       	cpi	r24, 0x68	; 104
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <__vector_39+0xa6>
    1f0e:	63 c0       	rjmp	.+198    	; 0x1fd6 <__vector_39+0x16c>
    1f10:	80 37       	cpi	r24, 0x70	; 112
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <__vector_39+0xac>
    1f14:	60 c0       	rjmp	.+192    	; 0x1fd6 <__vector_39+0x16c>
    1f16:	c4 c0       	rjmp	.+392    	; 0x20a0 <__vector_39+0x236>
    1f18:	88 38       	cpi	r24, 0x88	; 136
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <__vector_39+0xb4>
    1f1c:	b4 c0       	rjmp	.+360    	; 0x2086 <__vector_39+0x21c>
    1f1e:	80 39       	cpi	r24, 0x90	; 144
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <__vector_39+0xba>
    1f22:	5f c0       	rjmp	.+190    	; 0x1fe2 <__vector_39+0x178>
    1f24:	80 38       	cpi	r24, 0x80	; 128
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <__vector_39+0xc0>
    1f28:	bb c0       	rjmp	.+374    	; 0x20a0 <__vector_39+0x236>
    1f2a:	5b c0       	rjmp	.+182    	; 0x1fe2 <__vector_39+0x178>
    1f2c:	80 3b       	cpi	r24, 0xB0	; 176
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <__vector_39+0xc8>
    1f30:	82 c0       	rjmp	.+260    	; 0x2036 <__vector_39+0x1cc>
    1f32:	38 f4       	brcc	.+14     	; 0x1f42 <__vector_39+0xd8>
    1f34:	80 3a       	cpi	r24, 0xA0	; 160
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <__vector_39+0xd0>
    1f38:	66 c0       	rjmp	.+204    	; 0x2006 <__vector_39+0x19c>
    1f3a:	88 3a       	cpi	r24, 0xA8	; 168
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <__vector_39+0xd6>
    1f3e:	7b c0       	rjmp	.+246    	; 0x2036 <__vector_39+0x1cc>
    1f40:	af c0       	rjmp	.+350    	; 0x20a0 <__vector_39+0x236>
    1f42:	80 3c       	cpi	r24, 0xC0	; 192
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <__vector_39+0xde>
    1f46:	a3 c0       	rjmp	.+326    	; 0x208e <__vector_39+0x224>
    1f48:	88 3c       	cpi	r24, 0xC8	; 200
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <__vector_39+0xe4>
    1f4c:	a0 c0       	rjmp	.+320    	; 0x208e <__vector_39+0x224>
    1f4e:	88 3b       	cpi	r24, 0xB8	; 184
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <__vector_39+0xea>
    1f52:	86 c0       	rjmp	.+268    	; 0x2060 <__vector_39+0x1f6>
    1f54:	a5 c0       	rjmp	.+330    	; 0x20a0 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1f56:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <twi_slarw>
    1f5a:	10 c0       	rjmp	.+32     	; 0x1f7c <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f5c:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <twi_masterBufferIndex>
    1f60:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_masterBufferLength>
    1f64:	98 17       	cp	r25, r24
    1f66:	70 f5       	brcc	.+92     	; 0x1fc4 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f68:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <twi_masterBufferIndex>
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	8e 0f       	add	r24, r30
    1f70:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <twi_masterBufferIndex>
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	e8 50       	subi	r30, 0x08	; 8
    1f78:	fb 4f       	sbci	r31, 0xFB	; 251
    1f7a:	80 81       	ld	r24, Z
    1f7c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f80:	85 ec       	ldi	r24, 0xC5	; 197
    1f82:	82 c0       	rjmp	.+260    	; 0x2088 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1f84:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_error>
    1f88:	8a c0       	rjmp	.+276    	; 0x209e <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f8a:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <twi_masterBufferIndex>
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	8e 0f       	add	r24, r30
    1f92:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <twi_masterBufferIndex>
    1f96:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	e8 50       	subi	r30, 0x08	; 8
    1f9e:	fb 4f       	sbci	r31, 0xFB	; 251
    1fa0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1fa2:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <twi_masterBufferIndex>
    1fa6:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_masterBufferLength>
    1faa:	6a c0       	rjmp	.+212    	; 0x2080 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1fac:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <twi_masterBufferIndex>
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	8e 0f       	add	r24, r30
    1fb4:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <twi_masterBufferIndex>
    1fb8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	e8 50       	subi	r30, 0x08	; 8
    1fc0:	fb 4f       	sbci	r31, 0xFB	; 251
    1fc2:	80 83       	st	Z, r24
	if (twi_sendStop)
    1fc4:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <twi_sendStop>
    1fc8:	81 11       	cpse	r24, r1
    1fca:	69 c0       	rjmp	.+210    	; 0x209e <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1fd2:	84 ea       	ldi	r24, 0xA4	; 164
    1fd4:	5d c0       	rjmp	.+186    	; 0x2090 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1fdc:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <twi_rxBufferIndex>
    1fe0:	cf cf       	rjmp	.-98     	; 0x1f80 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1fe2:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <twi_rxBufferIndex>
    1fe6:	80 32       	cpi	r24, 0x20	; 32
    1fe8:	08 f0       	brcs	.+2      	; 0x1fec <__vector_39+0x182>
    1fea:	4d c0       	rjmp	.+154    	; 0x2086 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1fec:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <twi_rxBufferIndex>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	8e 0f       	add	r24, r30
    1ff4:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <twi_rxBufferIndex>
    1ff8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	ec 54       	subi	r30, 0x4C	; 76
    2000:	fb 4f       	sbci	r31, 0xFB	; 251
    2002:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2004:	bd cf       	rjmp	.-134    	; 0x1f80 <__vector_39+0x116>
    2006:	2b df       	rcall	.-426    	; 0x1e5e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2008:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <twi_rxBufferIndex>
    200c:	80 32       	cpi	r24, 0x20	; 32
    200e:	30 f4       	brcc	.+12     	; 0x201c <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2010:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <twi_rxBufferIndex>
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	ec 54       	subi	r30, 0x4C	; 76
    2018:	fb 4f       	sbci	r31, 0xFB	; 251
    201a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    201c:	60 91 b3 04 	lds	r22, 0x04B3	; 0x8004b3 <twi_rxBufferIndex>
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <twi_onSlaveReceive>
    2026:	f0 91 19 05 	lds	r31, 0x0519	; 0x800519 <twi_onSlaveReceive+0x1>
    202a:	84 eb       	ldi	r24, 0xB4	; 180
    202c:	94 e0       	ldi	r25, 0x04	; 4
    202e:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2030:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <twi_rxBufferIndex>
      break;
    2034:	35 c0       	rjmp	.+106    	; 0x20a0 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2036:	84 e0       	ldi	r24, 0x04	; 4
    2038:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    203c:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2040:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2044:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <twi_onSlaveTransmit>
    2048:	f0 91 1b 05 	lds	r31, 0x051B	; 0x80051b <twi_onSlaveTransmit+0x1>
    204c:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    204e:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <twi_txBufferLength>
    2052:	81 11       	cpse	r24, r1
    2054:	05 c0       	rjmp	.+10     	; 0x2060 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    205c:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2060:	e0 91 d5 04 	lds	r30, 0x04D5	; 0x8004d5 <twi_txBufferIndex>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	8e 0f       	add	r24, r30
    2068:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <twi_txBufferIndex>
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	ea 52       	subi	r30, 0x2A	; 42
    2070:	fb 4f       	sbci	r31, 0xFB	; 251
    2072:	80 81       	ld	r24, Z
    2074:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2078:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <twi_txBufferIndex>
    207c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <twi_txBufferLength>
    2080:	98 17       	cp	r25, r24
    2082:	08 f4       	brcc	.+2      	; 0x2086 <__vector_39+0x21c>
    2084:	7d cf       	rjmp	.-262    	; 0x1f80 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2086:	85 e8       	ldi	r24, 0x85	; 133
    2088:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    208c:	09 c0       	rjmp	.+18     	; 0x20a0 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    208e:	85 ec       	ldi	r24, 0xC5	; 197
    2090:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2094:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <twi_state>
      break;
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    209a:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <twi_error>
      twi_stop();
    209e:	d5 de       	rcall	.-598    	; 0x1e4a <twi_stop>
      break;
  }
}
    20a0:	ff 91       	pop	r31
    20a2:	ef 91       	pop	r30
    20a4:	bf 91       	pop	r27
    20a6:	af 91       	pop	r26
    20a8:	9f 91       	pop	r25
    20aa:	8f 91       	pop	r24
    20ac:	7f 91       	pop	r23
    20ae:	6f 91       	pop	r22
    20b0:	5f 91       	pop	r21
    20b2:	4f 91       	pop	r20
    20b4:	3f 91       	pop	r19
    20b6:	2f 91       	pop	r18
    20b8:	0f 90       	pop	r0
    20ba:	0b be       	out	0x3b, r0	; 59
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	0f 90       	pop	r0
    20c2:	1f 90       	pop	r1
    20c4:	18 95       	reti

000020c6 <__udivmodsi4>:
    20c6:	a1 e2       	ldi	r26, 0x21	; 33
    20c8:	1a 2e       	mov	r1, r26
    20ca:	aa 1b       	sub	r26, r26
    20cc:	bb 1b       	sub	r27, r27
    20ce:	fd 01       	movw	r30, r26
    20d0:	0d c0       	rjmp	.+26     	; 0x20ec <__udivmodsi4_ep>

000020d2 <__udivmodsi4_loop>:
    20d2:	aa 1f       	adc	r26, r26
    20d4:	bb 1f       	adc	r27, r27
    20d6:	ee 1f       	adc	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	a2 17       	cp	r26, r18
    20dc:	b3 07       	cpc	r27, r19
    20de:	e4 07       	cpc	r30, r20
    20e0:	f5 07       	cpc	r31, r21
    20e2:	20 f0       	brcs	.+8      	; 0x20ec <__udivmodsi4_ep>
    20e4:	a2 1b       	sub	r26, r18
    20e6:	b3 0b       	sbc	r27, r19
    20e8:	e4 0b       	sbc	r30, r20
    20ea:	f5 0b       	sbc	r31, r21

000020ec <__udivmodsi4_ep>:
    20ec:	66 1f       	adc	r22, r22
    20ee:	77 1f       	adc	r23, r23
    20f0:	88 1f       	adc	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	1a 94       	dec	r1
    20f6:	69 f7       	brne	.-38     	; 0x20d2 <__udivmodsi4_loop>
    20f8:	60 95       	com	r22
    20fa:	70 95       	com	r23
    20fc:	80 95       	com	r24
    20fe:	90 95       	com	r25
    2100:	9b 01       	movw	r18, r22
    2102:	ac 01       	movw	r20, r24
    2104:	bd 01       	movw	r22, r26
    2106:	cf 01       	movw	r24, r30
    2108:	08 95       	ret

0000210a <__tablejump2__>:
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	88 1f       	adc	r24, r24
    2110:	8b bf       	out	0x3b, r24	; 59
    2112:	07 90       	elpm	r0, Z+
    2114:	f6 91       	elpm	r31, Z
    2116:	e0 2d       	mov	r30, r0
    2118:	19 94       	eijmp

0000211a <sprintf>:
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	2e 97       	sbiw	r28, 0x0e	; 14
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	0e 89       	ldd	r16, Y+22	; 0x16
    2134:	1f 89       	ldd	r17, Y+23	; 0x17
    2136:	86 e0       	ldi	r24, 0x06	; 6
    2138:	8c 83       	std	Y+4, r24	; 0x04
    213a:	1a 83       	std	Y+2, r17	; 0x02
    213c:	09 83       	std	Y+1, r16	; 0x01
    213e:	8f ef       	ldi	r24, 0xFF	; 255
    2140:	9f e7       	ldi	r25, 0x7F	; 127
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	ae 01       	movw	r20, r28
    2148:	46 5e       	subi	r20, 0xE6	; 230
    214a:	5f 4f       	sbci	r21, 0xFF	; 255
    214c:	68 8d       	ldd	r22, Y+24	; 0x18
    214e:	79 8d       	ldd	r23, Y+25	; 0x19
    2150:	ce 01       	movw	r24, r28
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	10 d0       	rcall	.+32     	; 0x2176 <vfprintf>
    2156:	ef 81       	ldd	r30, Y+7	; 0x07
    2158:	f8 85       	ldd	r31, Y+8	; 0x08
    215a:	e0 0f       	add	r30, r16
    215c:	f1 1f       	adc	r31, r17
    215e:	10 82       	st	Z, r1
    2160:	2e 96       	adiw	r28, 0x0e	; 14
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	08 95       	ret

00002176 <vfprintf>:
    2176:	2f 92       	push	r2
    2178:	3f 92       	push	r3
    217a:	4f 92       	push	r4
    217c:	5f 92       	push	r5
    217e:	6f 92       	push	r6
    2180:	7f 92       	push	r7
    2182:	8f 92       	push	r8
    2184:	9f 92       	push	r9
    2186:	af 92       	push	r10
    2188:	bf 92       	push	r11
    218a:	cf 92       	push	r12
    218c:	df 92       	push	r13
    218e:	ef 92       	push	r14
    2190:	ff 92       	push	r15
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	2b 97       	sbiw	r28, 0x0b	; 11
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	6c 01       	movw	r12, r24
    21ac:	7b 01       	movw	r14, r22
    21ae:	8a 01       	movw	r16, r20
    21b0:	fc 01       	movw	r30, r24
    21b2:	17 82       	std	Z+7, r1	; 0x07
    21b4:	16 82       	std	Z+6, r1	; 0x06
    21b6:	83 81       	ldd	r24, Z+3	; 0x03
    21b8:	81 ff       	sbrs	r24, 1
    21ba:	bf c1       	rjmp	.+894    	; 0x253a <__stack+0x33b>
    21bc:	ce 01       	movw	r24, r28
    21be:	01 96       	adiw	r24, 0x01	; 1
    21c0:	3c 01       	movw	r6, r24
    21c2:	f6 01       	movw	r30, r12
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	f7 01       	movw	r30, r14
    21c8:	93 fd       	sbrc	r25, 3
    21ca:	85 91       	lpm	r24, Z+
    21cc:	93 ff       	sbrs	r25, 3
    21ce:	81 91       	ld	r24, Z+
    21d0:	7f 01       	movw	r14, r30
    21d2:	88 23       	and	r24, r24
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <vfprintf+0x62>
    21d6:	ad c1       	rjmp	.+858    	; 0x2532 <__stack+0x333>
    21d8:	85 32       	cpi	r24, 0x25	; 37
    21da:	39 f4       	brne	.+14     	; 0x21ea <vfprintf+0x74>
    21dc:	93 fd       	sbrc	r25, 3
    21de:	85 91       	lpm	r24, Z+
    21e0:	93 ff       	sbrs	r25, 3
    21e2:	81 91       	ld	r24, Z+
    21e4:	7f 01       	movw	r14, r30
    21e6:	85 32       	cpi	r24, 0x25	; 37
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <vfprintf+0x7c>
    21ea:	b6 01       	movw	r22, r12
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	d6 d1       	rcall	.+940    	; 0x259c <fputc>
    21f0:	e8 cf       	rjmp	.-48     	; 0x21c2 <vfprintf+0x4c>
    21f2:	91 2c       	mov	r9, r1
    21f4:	21 2c       	mov	r2, r1
    21f6:	31 2c       	mov	r3, r1
    21f8:	ff e1       	ldi	r31, 0x1F	; 31
    21fa:	f3 15       	cp	r31, r3
    21fc:	d8 f0       	brcs	.+54     	; 0x2234 <__stack+0x35>
    21fe:	8b 32       	cpi	r24, 0x2B	; 43
    2200:	79 f0       	breq	.+30     	; 0x2220 <__stack+0x21>
    2202:	38 f4       	brcc	.+14     	; 0x2212 <__stack+0x13>
    2204:	80 32       	cpi	r24, 0x20	; 32
    2206:	79 f0       	breq	.+30     	; 0x2226 <__stack+0x27>
    2208:	83 32       	cpi	r24, 0x23	; 35
    220a:	a1 f4       	brne	.+40     	; 0x2234 <__stack+0x35>
    220c:	23 2d       	mov	r18, r3
    220e:	20 61       	ori	r18, 0x10	; 16
    2210:	1d c0       	rjmp	.+58     	; 0x224c <__stack+0x4d>
    2212:	8d 32       	cpi	r24, 0x2D	; 45
    2214:	61 f0       	breq	.+24     	; 0x222e <__stack+0x2f>
    2216:	80 33       	cpi	r24, 0x30	; 48
    2218:	69 f4       	brne	.+26     	; 0x2234 <__stack+0x35>
    221a:	23 2d       	mov	r18, r3
    221c:	21 60       	ori	r18, 0x01	; 1
    221e:	16 c0       	rjmp	.+44     	; 0x224c <__stack+0x4d>
    2220:	83 2d       	mov	r24, r3
    2222:	82 60       	ori	r24, 0x02	; 2
    2224:	38 2e       	mov	r3, r24
    2226:	e3 2d       	mov	r30, r3
    2228:	e4 60       	ori	r30, 0x04	; 4
    222a:	3e 2e       	mov	r3, r30
    222c:	2a c0       	rjmp	.+84     	; 0x2282 <__stack+0x83>
    222e:	f3 2d       	mov	r31, r3
    2230:	f8 60       	ori	r31, 0x08	; 8
    2232:	1d c0       	rjmp	.+58     	; 0x226e <__stack+0x6f>
    2234:	37 fc       	sbrc	r3, 7
    2236:	2d c0       	rjmp	.+90     	; 0x2292 <__stack+0x93>
    2238:	20 ed       	ldi	r18, 0xD0	; 208
    223a:	28 0f       	add	r18, r24
    223c:	2a 30       	cpi	r18, 0x0A	; 10
    223e:	40 f0       	brcs	.+16     	; 0x2250 <__stack+0x51>
    2240:	8e 32       	cpi	r24, 0x2E	; 46
    2242:	b9 f4       	brne	.+46     	; 0x2272 <__stack+0x73>
    2244:	36 fc       	sbrc	r3, 6
    2246:	75 c1       	rjmp	.+746    	; 0x2532 <__stack+0x333>
    2248:	23 2d       	mov	r18, r3
    224a:	20 64       	ori	r18, 0x40	; 64
    224c:	32 2e       	mov	r3, r18
    224e:	19 c0       	rjmp	.+50     	; 0x2282 <__stack+0x83>
    2250:	36 fe       	sbrs	r3, 6
    2252:	06 c0       	rjmp	.+12     	; 0x2260 <__stack+0x61>
    2254:	8a e0       	ldi	r24, 0x0A	; 10
    2256:	98 9e       	mul	r9, r24
    2258:	20 0d       	add	r18, r0
    225a:	11 24       	eor	r1, r1
    225c:	92 2e       	mov	r9, r18
    225e:	11 c0       	rjmp	.+34     	; 0x2282 <__stack+0x83>
    2260:	ea e0       	ldi	r30, 0x0A	; 10
    2262:	2e 9e       	mul	r2, r30
    2264:	20 0d       	add	r18, r0
    2266:	11 24       	eor	r1, r1
    2268:	22 2e       	mov	r2, r18
    226a:	f3 2d       	mov	r31, r3
    226c:	f0 62       	ori	r31, 0x20	; 32
    226e:	3f 2e       	mov	r3, r31
    2270:	08 c0       	rjmp	.+16     	; 0x2282 <__stack+0x83>
    2272:	8c 36       	cpi	r24, 0x6C	; 108
    2274:	21 f4       	brne	.+8      	; 0x227e <__stack+0x7f>
    2276:	83 2d       	mov	r24, r3
    2278:	80 68       	ori	r24, 0x80	; 128
    227a:	38 2e       	mov	r3, r24
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <__stack+0x83>
    227e:	88 36       	cpi	r24, 0x68	; 104
    2280:	41 f4       	brne	.+16     	; 0x2292 <__stack+0x93>
    2282:	f7 01       	movw	r30, r14
    2284:	93 fd       	sbrc	r25, 3
    2286:	85 91       	lpm	r24, Z+
    2288:	93 ff       	sbrs	r25, 3
    228a:	81 91       	ld	r24, Z+
    228c:	7f 01       	movw	r14, r30
    228e:	81 11       	cpse	r24, r1
    2290:	b3 cf       	rjmp	.-154    	; 0x21f8 <vfprintf+0x82>
    2292:	98 2f       	mov	r25, r24
    2294:	9f 7d       	andi	r25, 0xDF	; 223
    2296:	95 54       	subi	r25, 0x45	; 69
    2298:	93 30       	cpi	r25, 0x03	; 3
    229a:	28 f4       	brcc	.+10     	; 0x22a6 <__stack+0xa7>
    229c:	0c 5f       	subi	r16, 0xFC	; 252
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	9f e3       	ldi	r25, 0x3F	; 63
    22a2:	99 83       	std	Y+1, r25	; 0x01
    22a4:	0d c0       	rjmp	.+26     	; 0x22c0 <__stack+0xc1>
    22a6:	83 36       	cpi	r24, 0x63	; 99
    22a8:	31 f0       	breq	.+12     	; 0x22b6 <__stack+0xb7>
    22aa:	83 37       	cpi	r24, 0x73	; 115
    22ac:	71 f0       	breq	.+28     	; 0x22ca <__stack+0xcb>
    22ae:	83 35       	cpi	r24, 0x53	; 83
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <__stack+0xb5>
    22b2:	55 c0       	rjmp	.+170    	; 0x235e <__stack+0x15f>
    22b4:	20 c0       	rjmp	.+64     	; 0x22f6 <__stack+0xf7>
    22b6:	f8 01       	movw	r30, r16
    22b8:	80 81       	ld	r24, Z
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	0e 5f       	subi	r16, 0xFE	; 254
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	88 24       	eor	r8, r8
    22c2:	83 94       	inc	r8
    22c4:	91 2c       	mov	r9, r1
    22c6:	53 01       	movw	r10, r6
    22c8:	12 c0       	rjmp	.+36     	; 0x22ee <__stack+0xef>
    22ca:	28 01       	movw	r4, r16
    22cc:	f2 e0       	ldi	r31, 0x02	; 2
    22ce:	4f 0e       	add	r4, r31
    22d0:	51 1c       	adc	r5, r1
    22d2:	f8 01       	movw	r30, r16
    22d4:	a0 80       	ld	r10, Z
    22d6:	b1 80       	ldd	r11, Z+1	; 0x01
    22d8:	36 fe       	sbrs	r3, 6
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <__stack+0xe3>
    22dc:	69 2d       	mov	r22, r9
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <__stack+0xe7>
    22e2:	6f ef       	ldi	r22, 0xFF	; 255
    22e4:	7f ef       	ldi	r23, 0xFF	; 255
    22e6:	c5 01       	movw	r24, r10
    22e8:	4e d1       	rcall	.+668    	; 0x2586 <strnlen>
    22ea:	4c 01       	movw	r8, r24
    22ec:	82 01       	movw	r16, r4
    22ee:	f3 2d       	mov	r31, r3
    22f0:	ff 77       	andi	r31, 0x7F	; 127
    22f2:	3f 2e       	mov	r3, r31
    22f4:	15 c0       	rjmp	.+42     	; 0x2320 <__stack+0x121>
    22f6:	28 01       	movw	r4, r16
    22f8:	22 e0       	ldi	r18, 0x02	; 2
    22fa:	42 0e       	add	r4, r18
    22fc:	51 1c       	adc	r5, r1
    22fe:	f8 01       	movw	r30, r16
    2300:	a0 80       	ld	r10, Z
    2302:	b1 80       	ldd	r11, Z+1	; 0x01
    2304:	36 fe       	sbrs	r3, 6
    2306:	03 c0       	rjmp	.+6      	; 0x230e <__stack+0x10f>
    2308:	69 2d       	mov	r22, r9
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <__stack+0x113>
    230e:	6f ef       	ldi	r22, 0xFF	; 255
    2310:	7f ef       	ldi	r23, 0xFF	; 255
    2312:	c5 01       	movw	r24, r10
    2314:	2d d1       	rcall	.+602    	; 0x2570 <strnlen_P>
    2316:	4c 01       	movw	r8, r24
    2318:	f3 2d       	mov	r31, r3
    231a:	f0 68       	ori	r31, 0x80	; 128
    231c:	3f 2e       	mov	r3, r31
    231e:	82 01       	movw	r16, r4
    2320:	33 fc       	sbrc	r3, 3
    2322:	19 c0       	rjmp	.+50     	; 0x2356 <__stack+0x157>
    2324:	82 2d       	mov	r24, r2
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	88 16       	cp	r8, r24
    232a:	99 06       	cpc	r9, r25
    232c:	a0 f4       	brcc	.+40     	; 0x2356 <__stack+0x157>
    232e:	b6 01       	movw	r22, r12
    2330:	80 e2       	ldi	r24, 0x20	; 32
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	33 d1       	rcall	.+614    	; 0x259c <fputc>
    2336:	2a 94       	dec	r2
    2338:	f5 cf       	rjmp	.-22     	; 0x2324 <__stack+0x125>
    233a:	f5 01       	movw	r30, r10
    233c:	37 fc       	sbrc	r3, 7
    233e:	85 91       	lpm	r24, Z+
    2340:	37 fe       	sbrs	r3, 7
    2342:	81 91       	ld	r24, Z+
    2344:	5f 01       	movw	r10, r30
    2346:	b6 01       	movw	r22, r12
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	28 d1       	rcall	.+592    	; 0x259c <fputc>
    234c:	21 10       	cpse	r2, r1
    234e:	2a 94       	dec	r2
    2350:	21 e0       	ldi	r18, 0x01	; 1
    2352:	82 1a       	sub	r8, r18
    2354:	91 08       	sbc	r9, r1
    2356:	81 14       	cp	r8, r1
    2358:	91 04       	cpc	r9, r1
    235a:	79 f7       	brne	.-34     	; 0x233a <__stack+0x13b>
    235c:	e1 c0       	rjmp	.+450    	; 0x2520 <__stack+0x321>
    235e:	84 36       	cpi	r24, 0x64	; 100
    2360:	11 f0       	breq	.+4      	; 0x2366 <__stack+0x167>
    2362:	89 36       	cpi	r24, 0x69	; 105
    2364:	39 f5       	brne	.+78     	; 0x23b4 <__stack+0x1b5>
    2366:	f8 01       	movw	r30, r16
    2368:	37 fe       	sbrs	r3, 7
    236a:	07 c0       	rjmp	.+14     	; 0x237a <__stack+0x17b>
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	0c 5f       	subi	r16, 0xFC	; 252
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	08 c0       	rjmp	.+16     	; 0x238a <__stack+0x18b>
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	07 2e       	mov	r0, r23
    2380:	00 0c       	add	r0, r0
    2382:	88 0b       	sbc	r24, r24
    2384:	99 0b       	sbc	r25, r25
    2386:	0e 5f       	subi	r16, 0xFE	; 254
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	f3 2d       	mov	r31, r3
    238c:	ff 76       	andi	r31, 0x6F	; 111
    238e:	3f 2e       	mov	r3, r31
    2390:	97 ff       	sbrs	r25, 7
    2392:	09 c0       	rjmp	.+18     	; 0x23a6 <__stack+0x1a7>
    2394:	90 95       	com	r25
    2396:	80 95       	com	r24
    2398:	70 95       	com	r23
    239a:	61 95       	neg	r22
    239c:	7f 4f       	sbci	r23, 0xFF	; 255
    239e:	8f 4f       	sbci	r24, 0xFF	; 255
    23a0:	9f 4f       	sbci	r25, 0xFF	; 255
    23a2:	f0 68       	ori	r31, 0x80	; 128
    23a4:	3f 2e       	mov	r3, r31
    23a6:	2a e0       	ldi	r18, 0x0A	; 10
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	a3 01       	movw	r20, r6
    23ac:	33 d1       	rcall	.+614    	; 0x2614 <__ultoa_invert>
    23ae:	88 2e       	mov	r8, r24
    23b0:	86 18       	sub	r8, r6
    23b2:	44 c0       	rjmp	.+136    	; 0x243c <__stack+0x23d>
    23b4:	85 37       	cpi	r24, 0x75	; 117
    23b6:	31 f4       	brne	.+12     	; 0x23c4 <__stack+0x1c5>
    23b8:	23 2d       	mov	r18, r3
    23ba:	2f 7e       	andi	r18, 0xEF	; 239
    23bc:	b2 2e       	mov	r11, r18
    23be:	2a e0       	ldi	r18, 0x0A	; 10
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	25 c0       	rjmp	.+74     	; 0x240e <__stack+0x20f>
    23c4:	93 2d       	mov	r25, r3
    23c6:	99 7f       	andi	r25, 0xF9	; 249
    23c8:	b9 2e       	mov	r11, r25
    23ca:	8f 36       	cpi	r24, 0x6F	; 111
    23cc:	c1 f0       	breq	.+48     	; 0x23fe <__stack+0x1ff>
    23ce:	18 f4       	brcc	.+6      	; 0x23d6 <__stack+0x1d7>
    23d0:	88 35       	cpi	r24, 0x58	; 88
    23d2:	79 f0       	breq	.+30     	; 0x23f2 <__stack+0x1f3>
    23d4:	ae c0       	rjmp	.+348    	; 0x2532 <__stack+0x333>
    23d6:	80 37       	cpi	r24, 0x70	; 112
    23d8:	19 f0       	breq	.+6      	; 0x23e0 <__stack+0x1e1>
    23da:	88 37       	cpi	r24, 0x78	; 120
    23dc:	21 f0       	breq	.+8      	; 0x23e6 <__stack+0x1e7>
    23de:	a9 c0       	rjmp	.+338    	; 0x2532 <__stack+0x333>
    23e0:	e9 2f       	mov	r30, r25
    23e2:	e0 61       	ori	r30, 0x10	; 16
    23e4:	be 2e       	mov	r11, r30
    23e6:	b4 fe       	sbrs	r11, 4
    23e8:	0d c0       	rjmp	.+26     	; 0x2404 <__stack+0x205>
    23ea:	fb 2d       	mov	r31, r11
    23ec:	f4 60       	ori	r31, 0x04	; 4
    23ee:	bf 2e       	mov	r11, r31
    23f0:	09 c0       	rjmp	.+18     	; 0x2404 <__stack+0x205>
    23f2:	34 fe       	sbrs	r3, 4
    23f4:	0a c0       	rjmp	.+20     	; 0x240a <__stack+0x20b>
    23f6:	29 2f       	mov	r18, r25
    23f8:	26 60       	ori	r18, 0x06	; 6
    23fa:	b2 2e       	mov	r11, r18
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <__stack+0x20b>
    23fe:	28 e0       	ldi	r18, 0x08	; 8
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	05 c0       	rjmp	.+10     	; 0x240e <__stack+0x20f>
    2404:	20 e1       	ldi	r18, 0x10	; 16
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	02 c0       	rjmp	.+4      	; 0x240e <__stack+0x20f>
    240a:	20 e1       	ldi	r18, 0x10	; 16
    240c:	32 e0       	ldi	r19, 0x02	; 2
    240e:	f8 01       	movw	r30, r16
    2410:	b7 fe       	sbrs	r11, 7
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <__stack+0x223>
    2414:	60 81       	ld	r22, Z
    2416:	71 81       	ldd	r23, Z+1	; 0x01
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	0c 5f       	subi	r16, 0xFC	; 252
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	06 c0       	rjmp	.+12     	; 0x242e <__stack+0x22f>
    2422:	60 81       	ld	r22, Z
    2424:	71 81       	ldd	r23, Z+1	; 0x01
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 5f       	subi	r16, 0xFE	; 254
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
    242e:	a3 01       	movw	r20, r6
    2430:	f1 d0       	rcall	.+482    	; 0x2614 <__ultoa_invert>
    2432:	88 2e       	mov	r8, r24
    2434:	86 18       	sub	r8, r6
    2436:	fb 2d       	mov	r31, r11
    2438:	ff 77       	andi	r31, 0x7F	; 127
    243a:	3f 2e       	mov	r3, r31
    243c:	36 fe       	sbrs	r3, 6
    243e:	0d c0       	rjmp	.+26     	; 0x245a <__stack+0x25b>
    2440:	23 2d       	mov	r18, r3
    2442:	2e 7f       	andi	r18, 0xFE	; 254
    2444:	a2 2e       	mov	r10, r18
    2446:	89 14       	cp	r8, r9
    2448:	58 f4       	brcc	.+22     	; 0x2460 <__stack+0x261>
    244a:	34 fe       	sbrs	r3, 4
    244c:	0b c0       	rjmp	.+22     	; 0x2464 <__stack+0x265>
    244e:	32 fc       	sbrc	r3, 2
    2450:	09 c0       	rjmp	.+18     	; 0x2464 <__stack+0x265>
    2452:	83 2d       	mov	r24, r3
    2454:	8e 7e       	andi	r24, 0xEE	; 238
    2456:	a8 2e       	mov	r10, r24
    2458:	05 c0       	rjmp	.+10     	; 0x2464 <__stack+0x265>
    245a:	b8 2c       	mov	r11, r8
    245c:	a3 2c       	mov	r10, r3
    245e:	03 c0       	rjmp	.+6      	; 0x2466 <__stack+0x267>
    2460:	b8 2c       	mov	r11, r8
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <__stack+0x267>
    2464:	b9 2c       	mov	r11, r9
    2466:	a4 fe       	sbrs	r10, 4
    2468:	0f c0       	rjmp	.+30     	; 0x2488 <__stack+0x289>
    246a:	fe 01       	movw	r30, r28
    246c:	e8 0d       	add	r30, r8
    246e:	f1 1d       	adc	r31, r1
    2470:	80 81       	ld	r24, Z
    2472:	80 33       	cpi	r24, 0x30	; 48
    2474:	21 f4       	brne	.+8      	; 0x247e <__stack+0x27f>
    2476:	9a 2d       	mov	r25, r10
    2478:	99 7e       	andi	r25, 0xE9	; 233
    247a:	a9 2e       	mov	r10, r25
    247c:	09 c0       	rjmp	.+18     	; 0x2490 <__stack+0x291>
    247e:	a2 fe       	sbrs	r10, 2
    2480:	06 c0       	rjmp	.+12     	; 0x248e <__stack+0x28f>
    2482:	b3 94       	inc	r11
    2484:	b3 94       	inc	r11
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <__stack+0x291>
    2488:	8a 2d       	mov	r24, r10
    248a:	86 78       	andi	r24, 0x86	; 134
    248c:	09 f0       	breq	.+2      	; 0x2490 <__stack+0x291>
    248e:	b3 94       	inc	r11
    2490:	a3 fc       	sbrc	r10, 3
    2492:	10 c0       	rjmp	.+32     	; 0x24b4 <__stack+0x2b5>
    2494:	a0 fe       	sbrs	r10, 0
    2496:	06 c0       	rjmp	.+12     	; 0x24a4 <__stack+0x2a5>
    2498:	b2 14       	cp	r11, r2
    249a:	80 f4       	brcc	.+32     	; 0x24bc <__stack+0x2bd>
    249c:	28 0c       	add	r2, r8
    249e:	92 2c       	mov	r9, r2
    24a0:	9b 18       	sub	r9, r11
    24a2:	0d c0       	rjmp	.+26     	; 0x24be <__stack+0x2bf>
    24a4:	b2 14       	cp	r11, r2
    24a6:	58 f4       	brcc	.+22     	; 0x24be <__stack+0x2bf>
    24a8:	b6 01       	movw	r22, r12
    24aa:	80 e2       	ldi	r24, 0x20	; 32
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	76 d0       	rcall	.+236    	; 0x259c <fputc>
    24b0:	b3 94       	inc	r11
    24b2:	f8 cf       	rjmp	.-16     	; 0x24a4 <__stack+0x2a5>
    24b4:	b2 14       	cp	r11, r2
    24b6:	18 f4       	brcc	.+6      	; 0x24be <__stack+0x2bf>
    24b8:	2b 18       	sub	r2, r11
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <__stack+0x2c1>
    24bc:	98 2c       	mov	r9, r8
    24be:	21 2c       	mov	r2, r1
    24c0:	a4 fe       	sbrs	r10, 4
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <__stack+0x2e3>
    24c4:	b6 01       	movw	r22, r12
    24c6:	80 e3       	ldi	r24, 0x30	; 48
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	68 d0       	rcall	.+208    	; 0x259c <fputc>
    24cc:	a2 fe       	sbrs	r10, 2
    24ce:	16 c0       	rjmp	.+44     	; 0x24fc <__stack+0x2fd>
    24d0:	a1 fc       	sbrc	r10, 1
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <__stack+0x2db>
    24d4:	88 e7       	ldi	r24, 0x78	; 120
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <__stack+0x2df>
    24da:	88 e5       	ldi	r24, 0x58	; 88
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	b6 01       	movw	r22, r12
    24e0:	0c c0       	rjmp	.+24     	; 0x24fa <__stack+0x2fb>
    24e2:	8a 2d       	mov	r24, r10
    24e4:	86 78       	andi	r24, 0x86	; 134
    24e6:	51 f0       	breq	.+20     	; 0x24fc <__stack+0x2fd>
    24e8:	a1 fe       	sbrs	r10, 1
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <__stack+0x2f1>
    24ec:	8b e2       	ldi	r24, 0x2B	; 43
    24ee:	01 c0       	rjmp	.+2      	; 0x24f2 <__stack+0x2f3>
    24f0:	80 e2       	ldi	r24, 0x20	; 32
    24f2:	a7 fc       	sbrc	r10, 7
    24f4:	8d e2       	ldi	r24, 0x2D	; 45
    24f6:	b6 01       	movw	r22, r12
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	50 d0       	rcall	.+160    	; 0x259c <fputc>
    24fc:	89 14       	cp	r8, r9
    24fe:	30 f4       	brcc	.+12     	; 0x250c <__stack+0x30d>
    2500:	b6 01       	movw	r22, r12
    2502:	80 e3       	ldi	r24, 0x30	; 48
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	4a d0       	rcall	.+148    	; 0x259c <fputc>
    2508:	9a 94       	dec	r9
    250a:	f8 cf       	rjmp	.-16     	; 0x24fc <__stack+0x2fd>
    250c:	8a 94       	dec	r8
    250e:	f3 01       	movw	r30, r6
    2510:	e8 0d       	add	r30, r8
    2512:	f1 1d       	adc	r31, r1
    2514:	80 81       	ld	r24, Z
    2516:	b6 01       	movw	r22, r12
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	40 d0       	rcall	.+128    	; 0x259c <fputc>
    251c:	81 10       	cpse	r8, r1
    251e:	f6 cf       	rjmp	.-20     	; 0x250c <__stack+0x30d>
    2520:	22 20       	and	r2, r2
    2522:	09 f4       	brne	.+2      	; 0x2526 <__stack+0x327>
    2524:	4e ce       	rjmp	.-868    	; 0x21c2 <vfprintf+0x4c>
    2526:	b6 01       	movw	r22, r12
    2528:	80 e2       	ldi	r24, 0x20	; 32
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	37 d0       	rcall	.+110    	; 0x259c <fputc>
    252e:	2a 94       	dec	r2
    2530:	f7 cf       	rjmp	.-18     	; 0x2520 <__stack+0x321>
    2532:	f6 01       	movw	r30, r12
    2534:	86 81       	ldd	r24, Z+6	; 0x06
    2536:	97 81       	ldd	r25, Z+7	; 0x07
    2538:	02 c0       	rjmp	.+4      	; 0x253e <__stack+0x33f>
    253a:	8f ef       	ldi	r24, 0xFF	; 255
    253c:	9f ef       	ldi	r25, 0xFF	; 255
    253e:	2b 96       	adiw	r28, 0x0b	; 11
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	1f 91       	pop	r17
    2550:	0f 91       	pop	r16
    2552:	ff 90       	pop	r15
    2554:	ef 90       	pop	r14
    2556:	df 90       	pop	r13
    2558:	cf 90       	pop	r12
    255a:	bf 90       	pop	r11
    255c:	af 90       	pop	r10
    255e:	9f 90       	pop	r9
    2560:	8f 90       	pop	r8
    2562:	7f 90       	pop	r7
    2564:	6f 90       	pop	r6
    2566:	5f 90       	pop	r5
    2568:	4f 90       	pop	r4
    256a:	3f 90       	pop	r3
    256c:	2f 90       	pop	r2
    256e:	08 95       	ret

00002570 <strnlen_P>:
    2570:	fc 01       	movw	r30, r24
    2572:	05 90       	lpm	r0, Z+
    2574:	61 50       	subi	r22, 0x01	; 1
    2576:	70 40       	sbci	r23, 0x00	; 0
    2578:	01 10       	cpse	r0, r1
    257a:	d8 f7       	brcc	.-10     	; 0x2572 <strnlen_P+0x2>
    257c:	80 95       	com	r24
    257e:	90 95       	com	r25
    2580:	8e 0f       	add	r24, r30
    2582:	9f 1f       	adc	r25, r31
    2584:	08 95       	ret

00002586 <strnlen>:
    2586:	fc 01       	movw	r30, r24
    2588:	61 50       	subi	r22, 0x01	; 1
    258a:	70 40       	sbci	r23, 0x00	; 0
    258c:	01 90       	ld	r0, Z+
    258e:	01 10       	cpse	r0, r1
    2590:	d8 f7       	brcc	.-10     	; 0x2588 <strnlen+0x2>
    2592:	80 95       	com	r24
    2594:	90 95       	com	r25
    2596:	8e 0f       	add	r24, r30
    2598:	9f 1f       	adc	r25, r31
    259a:	08 95       	ret

0000259c <fputc>:
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	fb 01       	movw	r30, r22
    25a6:	23 81       	ldd	r18, Z+3	; 0x03
    25a8:	21 fd       	sbrc	r18, 1
    25aa:	03 c0       	rjmp	.+6      	; 0x25b2 <fputc+0x16>
    25ac:	8f ef       	ldi	r24, 0xFF	; 255
    25ae:	9f ef       	ldi	r25, 0xFF	; 255
    25b0:	2c c0       	rjmp	.+88     	; 0x260a <fputc+0x6e>
    25b2:	22 ff       	sbrs	r18, 2
    25b4:	16 c0       	rjmp	.+44     	; 0x25e2 <fputc+0x46>
    25b6:	46 81       	ldd	r20, Z+6	; 0x06
    25b8:	57 81       	ldd	r21, Z+7	; 0x07
    25ba:	24 81       	ldd	r18, Z+4	; 0x04
    25bc:	35 81       	ldd	r19, Z+5	; 0x05
    25be:	42 17       	cp	r20, r18
    25c0:	53 07       	cpc	r21, r19
    25c2:	44 f4       	brge	.+16     	; 0x25d4 <fputc+0x38>
    25c4:	a0 81       	ld	r26, Z
    25c6:	b1 81       	ldd	r27, Z+1	; 0x01
    25c8:	9d 01       	movw	r18, r26
    25ca:	2f 5f       	subi	r18, 0xFF	; 255
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
    25ce:	31 83       	std	Z+1, r19	; 0x01
    25d0:	20 83       	st	Z, r18
    25d2:	8c 93       	st	X, r24
    25d4:	26 81       	ldd	r18, Z+6	; 0x06
    25d6:	37 81       	ldd	r19, Z+7	; 0x07
    25d8:	2f 5f       	subi	r18, 0xFF	; 255
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	37 83       	std	Z+7, r19	; 0x07
    25de:	26 83       	std	Z+6, r18	; 0x06
    25e0:	14 c0       	rjmp	.+40     	; 0x260a <fputc+0x6e>
    25e2:	8b 01       	movw	r16, r22
    25e4:	ec 01       	movw	r28, r24
    25e6:	fb 01       	movw	r30, r22
    25e8:	00 84       	ldd	r0, Z+8	; 0x08
    25ea:	f1 85       	ldd	r31, Z+9	; 0x09
    25ec:	e0 2d       	mov	r30, r0
    25ee:	19 95       	eicall
    25f0:	89 2b       	or	r24, r25
    25f2:	e1 f6       	brne	.-72     	; 0x25ac <fputc+0x10>
    25f4:	d8 01       	movw	r26, r16
    25f6:	16 96       	adiw	r26, 0x06	; 6
    25f8:	8d 91       	ld	r24, X+
    25fa:	9c 91       	ld	r25, X
    25fc:	17 97       	sbiw	r26, 0x07	; 7
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	17 96       	adiw	r26, 0x07	; 7
    2602:	9c 93       	st	X, r25
    2604:	8e 93       	st	-X, r24
    2606:	16 97       	sbiw	r26, 0x06	; 6
    2608:	ce 01       	movw	r24, r28
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	08 95       	ret

00002614 <__ultoa_invert>:
    2614:	fa 01       	movw	r30, r20
    2616:	aa 27       	eor	r26, r26
    2618:	28 30       	cpi	r18, 0x08	; 8
    261a:	51 f1       	breq	.+84     	; 0x2670 <__ultoa_invert+0x5c>
    261c:	20 31       	cpi	r18, 0x10	; 16
    261e:	81 f1       	breq	.+96     	; 0x2680 <__ultoa_invert+0x6c>
    2620:	e8 94       	clt
    2622:	6f 93       	push	r22
    2624:	6e 7f       	andi	r22, 0xFE	; 254
    2626:	6e 5f       	subi	r22, 0xFE	; 254
    2628:	7f 4f       	sbci	r23, 0xFF	; 255
    262a:	8f 4f       	sbci	r24, 0xFF	; 255
    262c:	9f 4f       	sbci	r25, 0xFF	; 255
    262e:	af 4f       	sbci	r26, 0xFF	; 255
    2630:	b1 e0       	ldi	r27, 0x01	; 1
    2632:	3e d0       	rcall	.+124    	; 0x26b0 <__ultoa_invert+0x9c>
    2634:	b4 e0       	ldi	r27, 0x04	; 4
    2636:	3c d0       	rcall	.+120    	; 0x26b0 <__ultoa_invert+0x9c>
    2638:	67 0f       	add	r22, r23
    263a:	78 1f       	adc	r23, r24
    263c:	89 1f       	adc	r24, r25
    263e:	9a 1f       	adc	r25, r26
    2640:	a1 1d       	adc	r26, r1
    2642:	68 0f       	add	r22, r24
    2644:	79 1f       	adc	r23, r25
    2646:	8a 1f       	adc	r24, r26
    2648:	91 1d       	adc	r25, r1
    264a:	a1 1d       	adc	r26, r1
    264c:	6a 0f       	add	r22, r26
    264e:	71 1d       	adc	r23, r1
    2650:	81 1d       	adc	r24, r1
    2652:	91 1d       	adc	r25, r1
    2654:	a1 1d       	adc	r26, r1
    2656:	20 d0       	rcall	.+64     	; 0x2698 <__ultoa_invert+0x84>
    2658:	09 f4       	brne	.+2      	; 0x265c <__ultoa_invert+0x48>
    265a:	68 94       	set
    265c:	3f 91       	pop	r19
    265e:	2a e0       	ldi	r18, 0x0A	; 10
    2660:	26 9f       	mul	r18, r22
    2662:	11 24       	eor	r1, r1
    2664:	30 19       	sub	r19, r0
    2666:	30 5d       	subi	r19, 0xD0	; 208
    2668:	31 93       	st	Z+, r19
    266a:	de f6       	brtc	.-74     	; 0x2622 <__ultoa_invert+0xe>
    266c:	cf 01       	movw	r24, r30
    266e:	08 95       	ret
    2670:	46 2f       	mov	r20, r22
    2672:	47 70       	andi	r20, 0x07	; 7
    2674:	40 5d       	subi	r20, 0xD0	; 208
    2676:	41 93       	st	Z+, r20
    2678:	b3 e0       	ldi	r27, 0x03	; 3
    267a:	0f d0       	rcall	.+30     	; 0x269a <__ultoa_invert+0x86>
    267c:	c9 f7       	brne	.-14     	; 0x2670 <__ultoa_invert+0x5c>
    267e:	f6 cf       	rjmp	.-20     	; 0x266c <__ultoa_invert+0x58>
    2680:	46 2f       	mov	r20, r22
    2682:	4f 70       	andi	r20, 0x0F	; 15
    2684:	40 5d       	subi	r20, 0xD0	; 208
    2686:	4a 33       	cpi	r20, 0x3A	; 58
    2688:	18 f0       	brcs	.+6      	; 0x2690 <__ultoa_invert+0x7c>
    268a:	49 5d       	subi	r20, 0xD9	; 217
    268c:	31 fd       	sbrc	r19, 1
    268e:	40 52       	subi	r20, 0x20	; 32
    2690:	41 93       	st	Z+, r20
    2692:	02 d0       	rcall	.+4      	; 0x2698 <__ultoa_invert+0x84>
    2694:	a9 f7       	brne	.-22     	; 0x2680 <__ultoa_invert+0x6c>
    2696:	ea cf       	rjmp	.-44     	; 0x266c <__ultoa_invert+0x58>
    2698:	b4 e0       	ldi	r27, 0x04	; 4
    269a:	a6 95       	lsr	r26
    269c:	97 95       	ror	r25
    269e:	87 95       	ror	r24
    26a0:	77 95       	ror	r23
    26a2:	67 95       	ror	r22
    26a4:	ba 95       	dec	r27
    26a6:	c9 f7       	brne	.-14     	; 0x269a <__ultoa_invert+0x86>
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	61 05       	cpc	r22, r1
    26ac:	71 05       	cpc	r23, r1
    26ae:	08 95       	ret
    26b0:	9b 01       	movw	r18, r22
    26b2:	ac 01       	movw	r20, r24
    26b4:	0a 2e       	mov	r0, r26
    26b6:	06 94       	lsr	r0
    26b8:	57 95       	ror	r21
    26ba:	47 95       	ror	r20
    26bc:	37 95       	ror	r19
    26be:	27 95       	ror	r18
    26c0:	ba 95       	dec	r27
    26c2:	c9 f7       	brne	.-14     	; 0x26b6 <__ultoa_invert+0xa2>
    26c4:	62 0f       	add	r22, r18
    26c6:	73 1f       	adc	r23, r19
    26c8:	84 1f       	adc	r24, r20
    26ca:	95 1f       	adc	r25, r21
    26cc:	a0 1d       	adc	r26, r0
    26ce:	08 95       	ret

000026d0 <_exit>:
    26d0:	f8 94       	cli

000026d2 <__stop_program>:
    26d2:	ff cf       	rjmp	.-2      	; 0x26d2 <__stop_program>
