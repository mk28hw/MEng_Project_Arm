
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800200  00003922  000039b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003922  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028a  00800358  00800358  00003b0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003b0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c8  00000000  00000000  00003bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016077  00000000  00000000  00004574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036a8  00000000  00000000  0001a5eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005052  00000000  00000000  0001dc93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f20  00000000  00000000  00022ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d59  00000000  00000000  00024c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a4ac  00000000  00000000  00028961  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000978  00000000  00000000  00032e0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c5       	rjmp	.+2756   	; 0xaea <__vector_9>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__vector_25>
      68:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__vector_36>
      94:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z10writeServohhPhh+0x7e>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	6a 12       	cpse	r6, r26
     168:	6d 12       	cpse	r6, r29
     16a:	5c 12       	cpse	r5, r28
     16c:	60 12       	cpse	r6, r16
     16e:	66 12       	cpse	r6, r22
     170:	a4 12       	cpse	r10, r20
     172:	71 12       	cpse	r7, r17
     174:	75 12       	cpse	r7, r21
     176:	7b 12       	cpse	r7, r27
     178:	7f 12       	cpse	r7, r31
     17a:	83 12       	cpse	r8, r19
     17c:	89 12       	cpse	r8, r25
     17e:	8d 12       	cpse	r8, r29
     180:	91 12       	cpse	r9, r17
     182:	a4 12       	cpse	r10, r20
     184:	97 12       	cpse	r9, r23
     186:	9b 12       	cpse	r9, r27
     188:	9f 12       	cpse	r9, r31

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
     290:	62 04       	cpc	r6, r2
     292:	52 0f       	add	r21, r18
     294:	e7 0f       	add	r30, r23
     296:	93 15       	cp	r25, r3

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	e2 e2       	ldi	r30, 0x22	; 34
     2b0:	f9 e3       	ldi	r31, 0x39	; 57
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a8 35       	cpi	r26, 0x58	; 88
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	25 e0       	ldi	r18, 0x05	; 5
     2c4:	a8 e5       	ldi	r26, 0x58	; 88
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	a2 3e       	cpi	r26, 0xE2	; 226
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__tablejump2__>
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 15 10 	call	0x202a	; 0x202a <main>
     2f6:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	serialWriting = NO;
	RS485_RX_ON
}
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	8a 01       	movw	r16, r20
     33a:	d2 2e       	mov	r13, r18
     33c:	ad b6       	in	r10, 0x3d	; 61
     33e:	be b6       	in	r11, 0x3e	; 62
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	82 1b       	sub	r24, r18
     346:	91 09       	sbc	r25, r1
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	9e bf       	out	0x3e, r25	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	62 2f       	mov	r22, r18
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	0e 94 ad 0b 	call	0x175a	; 0x175a <pow>
     372:	2b 01       	movw	r4, r22
     374:	3c 01       	movw	r6, r24
     376:	b8 01       	movw	r22, r16
     378:	01 2e       	mov	r0, r17
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__floatsisf>
     384:	a3 01       	movw	r20, r6
     386:	92 01       	movw	r18, r4
     388:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__cmpsf2>
     38c:	87 fd       	sbrc	r24, 7
     38e:	0b c0       	rjmp	.+22     	; 0x3a6 <_Z8printLCDhhih+0x9c>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e8       	ldi	r20, 0x80	; 128
     396:	5f e3       	ldi	r21, 0x3F	; 63
     398:	c3 01       	movw	r24, r6
     39a:	b2 01       	movw	r22, r4
     39c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__subsf3>
     3a0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fixsfsi>
     3a4:	8b 01       	movw	r16, r22
     3a6:	1f 92       	push	r1
     3a8:	df 92       	push	r13
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	6c 01       	movw	r12, r24
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	df 92       	push	r13
     3c6:	cf 92       	push	r12
     3c8:	ff 92       	push	r15
     3ca:	ef 92       	push	r14
     3cc:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     3d0:	48 2d       	mov	r20, r8
     3d2:	69 2d       	mov	r22, r9
     3d4:	8a e5       	ldi	r24, 0x5A	; 90
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 0d 14 	call	0x281a	; 0x281a <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3dc:	b7 01       	movw	r22, r14
     3de:	8a e5       	ldi	r24, 0x5A	; 90
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN5Print5printEPKc>
     3e6:	8d b7       	in	r24, 0x3d	; 61
     3e8:	9e b7       	in	r25, 0x3e	; 62
     3ea:	0c 96       	adiw	r24, 0x0c	; 12
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	9e bf       	out	0x3e, r25	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	8d bf       	out	0x3d, r24	; 61
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	be be       	out	0x3e, r11	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	ad be       	out	0x3d, r10	; 61
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	4f 90       	pop	r4
     42a:	08 95       	ret

0000042c <_Z12printCharLCDhhc>:
     42c:	cf 93       	push	r28
     42e:	c4 2f       	mov	r28, r20
     430:	46 2f       	mov	r20, r22
     432:	68 2f       	mov	r22, r24
     434:	8a e5       	ldi	r24, 0x5A	; 90
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	0e 94 0d 14 	call	0x281a	; 0x281a <_ZN17LiquidCrystal_I2C9setCursorEhh>
     43c:	6c 2f       	mov	r22, r28
     43e:	8a e5       	ldi	r24, 0x5A	; 90
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	cf 91       	pop	r28
     444:	0c 94 6d 10 	jmp	0x20da	; 0x20da <_ZN5Print5printEc>

00000448 <_Z13setupSwitchesv>:
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	84 b9       	out	0x04, r24	; 4
     44c:	84 b1       	in	r24, 0x04	; 4
     44e:	88 7f       	andi	r24, 0xF8	; 248
     450:	84 b9       	out	0x04, r24	; 4
     452:	eb e6       	ldi	r30, 0x6B	; 107
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	87 60       	ori	r24, 0x07	; 7
     45a:	80 83       	st	Z, r24
     45c:	e8 e6       	ldi	r30, 0x68	; 104
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	81 60       	ori	r24, 0x01	; 1
     464:	80 83       	st	Z, r24
     466:	78 94       	sei
     468:	08 95       	ret

0000046a <_Z13checkPositionhi>:
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	30 f4       	brcc	.+12     	; 0x47a <_Z13checkPositionhi+0x10>
     46e:	cb 01       	movw	r24, r22
     470:	77 ff       	sbrs	r23, 7
     472:	1b c0       	rjmp	.+54     	; 0x4aa <_Z13checkPositionhi+0x40>
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	18 c0       	rjmp	.+48     	; 0x4aa <_Z13checkPositionhi+0x40>
     47a:	83 30       	cpi	r24, 0x03	; 3
     47c:	69 f4       	brne	.+26     	; 0x498 <_Z13checkPositionhi+0x2e>
     47e:	cb 01       	movw	r24, r22
     480:	61 15       	cp	r22, r1
     482:	78 4f       	sbci	r23, 0xF8	; 248
     484:	14 f4       	brge	.+4      	; 0x48a <_Z13checkPositionhi+0x20>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	98 ef       	ldi	r25, 0xF8	; 248
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	28 e0       	ldi	r18, 0x08	; 8
     48e:	92 07       	cpc	r25, r18
     490:	ac f0       	brlt	.+42     	; 0x4bc <_Z13checkPositionhi+0x52>
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	98 e0       	ldi	r25, 0x08	; 8
     496:	08 95       	ret
     498:	84 50       	subi	r24, 0x04	; 4
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	68 f4       	brcc	.+26     	; 0x4b8 <_Z13checkPositionhi+0x4e>
     49e:	cb 01       	movw	r24, r22
     4a0:	64 3e       	cpi	r22, 0xE4	; 228
     4a2:	72 40       	sbci	r23, 0x02	; 2
     4a4:	14 f4       	brge	.+4      	; 0x4aa <_Z13checkPositionhi+0x40>
     4a6:	84 ee       	ldi	r24, 0xE4	; 228
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	85 3a       	cpi	r24, 0xA5	; 165
     4ac:	26 e0       	ldi	r18, 0x06	; 6
     4ae:	92 07       	cpc	r25, r18
     4b0:	2c f0       	brlt	.+10     	; 0x4bc <_Z13checkPositionhi+0x52>
     4b2:	84 ea       	ldi	r24, 0xA4	; 164
     4b4:	96 e0       	ldi	r25, 0x06	; 6
     4b6:	08 95       	ret
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
     4bc:	08 95       	ret

000004be <_Z11printSerial6Stringi>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	eb 01       	movw	r28, r22
     4c4:	bc 01       	movw	r22, r24
     4c6:	87 ed       	ldi	r24, 0xD7	; 215
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZN5Print5printERK6String>
     4ce:	69 e5       	ldi	r22, 0x59	; 89
     4d0:	72 e0       	ldi	r23, 0x02	; 2
     4d2:	87 ed       	ldi	r24, 0xD7	; 215
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN5Print5printEPKc>
     4da:	4a e0       	ldi	r20, 0x0A	; 10
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	be 01       	movw	r22, r28
     4e0:	87 ed       	ldi	r24, 0xD7	; 215
     4e2:	93 e0       	ldi	r25, 0x03	; 3
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <_ZN5Print7printlnEii>

000004ec <_Z12error_decodeh>:
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	e6 97       	sbiw	r28, 0x36	; 54
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	08 2f       	mov	r16, r24
     50e:	6c e2       	ldi	r22, 0x2C	; 44
     510:	73 e0       	ldi	r23, 0x03	; 3
     512:	ce 01       	movw	r24, r28
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	7c 01       	movw	r14, r24
     518:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     51c:	6c e2       	ldi	r22, 0x2C	; 44
     51e:	73 e0       	ldi	r23, 0x03	; 3
     520:	ce 01       	movw	r24, r28
     522:	07 96       	adiw	r24, 0x07	; 7
     524:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     528:	10 2f       	mov	r17, r16
     52a:	11 70       	andi	r17, 0x01	; 1
     52c:	00 fd       	sbrc	r16, 0
     52e:	03 c0       	rjmp	.+6      	; 0x536 <_Z12error_decodeh+0x4a>
     530:	6c e2       	ldi	r22, 0x2C	; 44
     532:	73 e0       	ldi	r23, 0x03	; 3
     534:	02 c0       	rjmp	.+4      	; 0x53a <_Z12error_decodeh+0x4e>
     536:	66 e1       	ldi	r22, 0x16	; 22
     538:	72 e0       	ldi	r23, 0x02	; 2
     53a:	ce 01       	movw	r24, r28
     53c:	0d 96       	adiw	r24, 0x0d	; 13
     53e:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     542:	11 11       	cpse	r17, r1
     544:	03 c0       	rjmp	.+6      	; 0x54c <_Z12error_decodeh+0x60>
     546:	6c e2       	ldi	r22, 0x2C	; 44
     548:	73 e0       	ldi	r23, 0x03	; 3
     54a:	02 c0       	rjmp	.+4      	; 0x550 <_Z12error_decodeh+0x64>
     54c:	6a e1       	ldi	r22, 0x1A	; 26
     54e:	72 e0       	ldi	r23, 0x02	; 2
     550:	ce 01       	movw	r24, r28
     552:	43 96       	adiw	r24, 0x13	; 19
     554:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     558:	11 11       	cpse	r17, r1
     55a:	03 c0       	rjmp	.+6      	; 0x562 <_Z12error_decodeh+0x76>
     55c:	6c e2       	ldi	r22, 0x2C	; 44
     55e:	73 e0       	ldi	r23, 0x03	; 3
     560:	02 c0       	rjmp	.+4      	; 0x566 <_Z12error_decodeh+0x7a>
     562:	6e e1       	ldi	r22, 0x1E	; 30
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	ce 01       	movw	r24, r28
     568:	49 96       	adiw	r24, 0x19	; 25
     56a:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     56e:	11 11       	cpse	r17, r1
     570:	03 c0       	rjmp	.+6      	; 0x578 <_Z12error_decodeh+0x8c>
     572:	6c e2       	ldi	r22, 0x2C	; 44
     574:	73 e0       	ldi	r23, 0x03	; 3
     576:	02 c0       	rjmp	.+4      	; 0x57c <_Z12error_decodeh+0x90>
     578:	62 e2       	ldi	r22, 0x22	; 34
     57a:	72 e0       	ldi	r23, 0x02	; 2
     57c:	ce 01       	movw	r24, r28
     57e:	4f 96       	adiw	r24, 0x1f	; 31
     580:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     584:	11 11       	cpse	r17, r1
     586:	03 c0       	rjmp	.+6      	; 0x58e <_Z12error_decodeh+0xa2>
     588:	6c e2       	ldi	r22, 0x2C	; 44
     58a:	73 e0       	ldi	r23, 0x03	; 3
     58c:	02 c0       	rjmp	.+4      	; 0x592 <_Z12error_decodeh+0xa6>
     58e:	66 e2       	ldi	r22, 0x26	; 38
     590:	72 e0       	ldi	r23, 0x02	; 2
     592:	ce 01       	movw	r24, r28
     594:	85 96       	adiw	r24, 0x25	; 37
     596:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     59a:	6c e2       	ldi	r22, 0x2C	; 44
     59c:	73 e0       	ldi	r23, 0x03	; 3
     59e:	ce 01       	movw	r24, r28
     5a0:	8b 96       	adiw	r24, 0x2b	; 43
     5a2:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     5a6:	67 01       	movw	r12, r14
     5a8:	00 e0       	ldi	r16, 0x00	; 0
     5aa:	10 e0       	ldi	r17, 0x00	; 0
     5ac:	b6 01       	movw	r22, r12
     5ae:	ce 01       	movw	r24, r28
     5b0:	c1 96       	adiw	r24, 0x31	; 49
     5b2:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN6StringC1ERKS_>
     5b6:	b8 01       	movw	r22, r16
     5b8:	ce 01       	movw	r24, r28
     5ba:	c1 96       	adiw	r24, 0x31	; 49
     5bc:	80 df       	rcall	.-256    	; 0x4be <_Z11printSerial6Stringi>
     5be:	ce 01       	movw	r24, r28
     5c0:	c1 96       	adiw	r24, 0x31	; 49
     5c2:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
     5c6:	0f 5f       	subi	r16, 0xFF	; 255
     5c8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ca:	96 e0       	ldi	r25, 0x06	; 6
     5cc:	c9 0e       	add	r12, r25
     5ce:	d1 1c       	adc	r13, r1
     5d0:	08 30       	cpi	r16, 0x08	; 8
     5d2:	11 05       	cpc	r17, r1
     5d4:	59 f7       	brne	.-42     	; 0x5ac <_Z12error_decodeh+0xc0>
     5d6:	8e 01       	movw	r16, r28
     5d8:	0f 5c       	subi	r16, 0xCF	; 207
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	06 50       	subi	r16, 0x06	; 6
     5de:	11 09       	sbc	r17, r1
     5e0:	c8 01       	movw	r24, r16
     5e2:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
     5e6:	e0 16       	cp	r14, r16
     5e8:	f1 06       	cpc	r15, r17
     5ea:	c1 f7       	brne	.-16     	; 0x5dc <_Z12error_decodeh+0xf0>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	e6 96       	adiw	r28, 0x36	; 54
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	08 95       	ret

0000060e <_Z15printArmDataLCDv>:
     60e:	cf 93       	push	r28
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	6a e0       	ldi	r22, 0x0A	; 10
     614:	8a e5       	ldi	r24, 0x5A	; 90
     616:	93 e0       	ldi	r25, 0x03	; 3
     618:	0e 94 0d 14 	call	0x281a	; 0x281a <_ZN17LiquidCrystal_I2C9setCursorEhh>
     61c:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <arm>
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	c1 e1       	ldi	r28, 0x11	; 17
     624:	c8 9f       	mul	r28, r24
     626:	f0 01       	movw	r30, r0
     628:	c9 9f       	mul	r28, r25
     62a:	f0 0d       	add	r31, r0
     62c:	11 24       	eor	r1, r1
     62e:	e6 59       	subi	r30, 0x96	; 150
     630:	fc 4f       	sbci	r31, 0xFC	; 252
     632:	20 89       	ldd	r18, Z+16	; 0x10
     634:	22 23       	and	r18, r18
     636:	19 f1       	breq	.+70     	; 0x67e <_Z15printArmDataLCDv+0x70>
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	c8 9f       	mul	r28, r24
     63c:	f0 01       	movw	r30, r0
     63e:	c9 9f       	mul	r28, r25
     640:	f0 0d       	add	r31, r0
     642:	11 24       	eor	r1, r1
     644:	e6 59       	subi	r30, 0x96	; 150
     646:	fc 4f       	sbci	r31, 0xFC	; 252
     648:	80 81       	ld	r24, Z
     64a:	50 df       	rcall	.-352    	; 0x4ec <_Z12error_decodeh>
     64c:	69 e3       	ldi	r22, 0x39	; 57
     64e:	72 e0       	ldi	r23, 0x02	; 2
     650:	8a e5       	ldi	r24, 0x5A	; 90
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN5Print5printEPKc>
     658:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <arm>
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	c8 9f       	mul	r28, r24
     662:	f0 01       	movw	r30, r0
     664:	c9 9f       	mul	r28, r25
     666:	f0 0d       	add	r31, r0
     668:	11 24       	eor	r1, r1
     66a:	e6 59       	subi	r30, 0x96	; 150
     66c:	fc 4f       	sbci	r31, 0xFC	; 252
     66e:	4a e0       	ldi	r20, 0x0A	; 10
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	60 81       	ld	r22, Z
     674:	8a e5       	ldi	r24, 0x5A	; 90
     676:	93 e0       	ldi	r25, 0x03	; 3
     678:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_ZN5Print5printEhi>
     67c:	06 c0       	rjmp	.+12     	; 0x68a <_Z15printArmDataLCDv+0x7c>
     67e:	6d e3       	ldi	r22, 0x3D	; 61
     680:	72 e0       	ldi	r23, 0x02	; 2
     682:	8a e5       	ldi	r24, 0x5A	; 90
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN5Print5printEPKc>
     68a:	40 91 6a 03 	lds	r20, 0x036A	; 0x80036a <arm>
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	21 e0       	ldi	r18, 0x01	; 1
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	84 e0       	ldi	r24, 0x04	; 4
     696:	39 de       	rcall	.-910    	; 0x30a <_Z8printLCDhhih>
     698:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <arm>
     69c:	81 e1       	ldi	r24, 0x11	; 17
     69e:	e8 9f       	mul	r30, r24
     6a0:	f0 01       	movw	r30, r0
     6a2:	11 24       	eor	r1, r1
     6a4:	e6 59       	subi	r30, 0x96	; 150
     6a6:	fc 4f       	sbci	r31, 0xFC	; 252
     6a8:	83 81       	ldd	r24, Z+3	; 0x03
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	29 f0       	breq	.+10     	; 0x6b8 <_Z15printArmDataLCDv+0xaa>
     6ae:	82 30       	cpi	r24, 0x02	; 2
     6b0:	31 f0       	breq	.+12     	; 0x6be <_Z15printArmDataLCDv+0xb0>
     6b2:	6a e2       	ldi	r22, 0x2A	; 42
     6b4:	72 e0       	ldi	r23, 0x02	; 2
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <_Z15printArmDataLCDv+0xb4>
     6b8:	6f e2       	ldi	r22, 0x2F	; 47
     6ba:	72 e0       	ldi	r23, 0x02	; 2
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <_Z15printArmDataLCDv+0xb4>
     6be:	64 e3       	ldi	r22, 0x34	; 52
     6c0:	72 e0       	ldi	r23, 0x02	; 2
     6c2:	8a e5       	ldi	r24, 0x5A	; 90
     6c4:	93 e0       	ldi	r25, 0x03	; 3
     6c6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN5Print5printEPKc>
     6ca:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <arm>
     6ce:	c1 e1       	ldi	r28, 0x11	; 17
     6d0:	ce 9f       	mul	r28, r30
     6d2:	f0 01       	movw	r30, r0
     6d4:	11 24       	eor	r1, r1
     6d6:	e6 59       	subi	r30, 0x96	; 150
     6d8:	fc 4f       	sbci	r31, 0xFC	; 252
     6da:	64 81       	ldd	r22, Z+4	; 0x04
     6dc:	75 81       	ldd	r23, Z+5	; 0x05
     6de:	07 2e       	mov	r0, r23
     6e0:	00 0c       	add	r0, r0
     6e2:	88 0b       	sbc	r24, r24
     6e4:	99 0b       	sbc	r25, r25
     6e6:	26 d7       	rcall	.+3660   	; 0x1534 <__floatsisf>
     6e8:	28 e5       	ldi	r18, 0x58	; 88
     6ea:	39 e3       	ldi	r19, 0x39	; 57
     6ec:	44 eb       	ldi	r20, 0xB4	; 180
     6ee:	5d e3       	ldi	r21, 0x3D	; 61
     6f0:	d1 d7       	rcall	.+4002   	; 0x1694 <__mulsf3>
     6f2:	ed d6       	rcall	.+3546   	; 0x14ce <__fixsfsi>
     6f4:	24 e0       	ldi	r18, 0x04	; 4
     6f6:	ab 01       	movw	r20, r22
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	06 de       	rcall	.-1012   	; 0x30a <_Z8printLCDhhih>
     6fe:	6f ed       	ldi	r22, 0xDF	; 223
     700:	8a e5       	ldi	r24, 0x5A	; 90
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN5Print5printEc>
     708:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <arm>
     70c:	ce 9f       	mul	r28, r30
     70e:	f0 01       	movw	r30, r0
     710:	11 24       	eor	r1, r1
     712:	e6 59       	subi	r30, 0x96	; 150
     714:	fc 4f       	sbci	r31, 0xFC	; 252
     716:	44 85       	ldd	r20, Z+12	; 0x0c
     718:	04 2e       	mov	r0, r20
     71a:	00 0c       	add	r0, r0
     71c:	55 0b       	sbc	r21, r21
     71e:	23 e0       	ldi	r18, 0x03	; 3
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	8b e0       	ldi	r24, 0x0B	; 11
     724:	f2 dd       	rcall	.-1052   	; 0x30a <_Z8printLCDhhih>
     726:	68 e4       	ldi	r22, 0x48	; 72
     728:	72 e0       	ldi	r23, 0x02	; 2
     72a:	8a e5       	ldi	r24, 0x5A	; 90
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN5Print5printEPKc>
     732:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <arm>
     736:	ce 9f       	mul	r28, r30
     738:	f0 01       	movw	r30, r0
     73a:	11 24       	eor	r1, r1
     73c:	e6 59       	subi	r30, 0x96	; 150
     73e:	fc 4f       	sbci	r31, 0xFC	; 252
     740:	64 81       	ldd	r22, Z+4	; 0x04
     742:	75 81       	ldd	r23, Z+5	; 0x05
     744:	07 2e       	mov	r0, r23
     746:	00 0c       	add	r0, r0
     748:	88 0b       	sbc	r24, r24
     74a:	99 0b       	sbc	r25, r25
     74c:	f3 d6       	rcall	.+3558   	; 0x1534 <__floatsisf>
     74e:	28 e5       	ldi	r18, 0x58	; 88
     750:	39 e3       	ldi	r19, 0x39	; 57
     752:	44 eb       	ldi	r20, 0xB4	; 180
     754:	5d e3       	ldi	r21, 0x3D	; 61
     756:	9e d7       	rcall	.+3900   	; 0x1694 <__mulsf3>
     758:	ba d6       	rcall	.+3444   	; 0x14ce <__fixsfsi>
     75a:	24 e0       	ldi	r18, 0x04	; 4
     75c:	ab 01       	movw	r20, r22
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	8f e0       	ldi	r24, 0x0F	; 15
     762:	d3 dd       	rcall	.-1114   	; 0x30a <_Z8printLCDhhih>
     764:	6f ed       	ldi	r22, 0xDF	; 223
     766:	8a e5       	ldi	r24, 0x5A	; 90
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN5Print5printEc>
     76e:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <arm>
     772:	ce 9f       	mul	r28, r30
     774:	f0 01       	movw	r30, r0
     776:	11 24       	eor	r1, r1
     778:	e6 59       	subi	r30, 0x96	; 150
     77a:	fc 4f       	sbci	r31, 0xFC	; 252
     77c:	41 85       	ldd	r20, Z+9	; 0x09
     77e:	52 85       	ldd	r21, Z+10	; 0x0a
     780:	24 e0       	ldi	r18, 0x04	; 4
     782:	62 e0       	ldi	r22, 0x02	; 2
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	c1 dd       	rcall	.-1150   	; 0x30a <_Z8printLCDhhih>
     788:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <arm>
     78c:	ce 9f       	mul	r28, r30
     78e:	f0 01       	movw	r30, r0
     790:	11 24       	eor	r1, r1
     792:	e6 59       	subi	r30, 0x96	; 150
     794:	fc 4f       	sbci	r31, 0xFC	; 252
     796:	87 85       	ldd	r24, Z+15	; 0x0f
     798:	81 11       	cpse	r24, r1
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <_Z15printArmDataLCDv+0x192>
     79c:	6f e7       	ldi	r22, 0x7F	; 127
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <_Z15printArmDataLCDv+0x194>
     7a0:	6e e7       	ldi	r22, 0x7E	; 126
     7a2:	8a e5       	ldi	r24, 0x5A	; 90
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN5Print5printEc>
     7aa:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <arm>
     7ae:	c1 e1       	ldi	r28, 0x11	; 17
     7b0:	ce 9f       	mul	r28, r30
     7b2:	f0 01       	movw	r30, r0
     7b4:	11 24       	eor	r1, r1
     7b6:	e6 59       	subi	r30, 0x96	; 150
     7b8:	fc 4f       	sbci	r31, 0xFC	; 252
     7ba:	41 85       	ldd	r20, Z+9	; 0x09
     7bc:	52 85       	ldd	r21, Z+10	; 0x0a
     7be:	24 e0       	ldi	r18, 0x04	; 4
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	89 e0       	ldi	r24, 0x09	; 9
     7c4:	a2 dd       	rcall	.-1212   	; 0x30a <_Z8printLCDhhih>
     7c6:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <lastButtonPressed>
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	21 e0       	ldi	r18, 0x01	; 1
     7ce:	62 e0       	ldi	r22, 0x02	; 2
     7d0:	8e e0       	ldi	r24, 0x0E	; 14
     7d2:	9b dd       	rcall	.-1226   	; 0x30a <_Z8printLCDhhih>
     7d4:	60 91 d3 03 	lds	r22, 0x03D3	; 0x8003d3 <buttonsState+0x2>
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	4a e0       	ldi	r20, 0x0A	; 10
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	8a e5       	ldi	r24, 0x5A	; 90
     7e0:	93 e0       	ldi	r25, 0x03	; 3
     7e2:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN5Print5printEii>
     7e6:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <buttonsState+0x1>
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	4a e0       	ldi	r20, 0x0A	; 10
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	8a e5       	ldi	r24, 0x5A	; 90
     7f2:	93 e0       	ldi	r25, 0x03	; 3
     7f4:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN5Print5printEii>
     7f8:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <arm>
     7fc:	ce 9f       	mul	r28, r30
     7fe:	f0 01       	movw	r30, r0
     800:	11 24       	eor	r1, r1
     802:	e6 59       	subi	r30, 0x96	; 150
     804:	fc 4f       	sbci	r31, 0xFC	; 252
     806:	45 85       	ldd	r20, Z+13	; 0x0d
     808:	56 85       	ldd	r21, Z+14	; 0x0e
     80a:	24 e0       	ldi	r18, 0x04	; 4
     80c:	63 e0       	ldi	r22, 0x03	; 3
     80e:	84 e0       	ldi	r24, 0x04	; 4
     810:	7c dd       	rcall	.-1288   	; 0x30a <_Z8printLCDhhih>
     812:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <arm>
     816:	ce 9f       	mul	r28, r30
     818:	f0 01       	movw	r30, r0
     81a:	11 24       	eor	r1, r1
     81c:	e6 59       	subi	r30, 0x96	; 150
     81e:	fc 4f       	sbci	r31, 0xFC	; 252
     820:	87 85       	ldd	r24, Z+15	; 0x0f
     822:	81 11       	cpse	r24, r1
     824:	02 c0       	rjmp	.+4      	; 0x82a <_Z15printArmDataLCDv+0x21c>
     826:	6f e7       	ldi	r22, 0x7F	; 127
     828:	01 c0       	rjmp	.+2      	; 0x82c <_Z15printArmDataLCDv+0x21e>
     82a:	6e e7       	ldi	r22, 0x7E	; 126
     82c:	8a e5       	ldi	r24, 0x5A	; 90
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN5Print5printEc>
     834:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <arm+0x20>
     838:	81 11       	cpse	r24, r1
     83a:	02 c0       	rjmp	.+4      	; 0x840 <_Z15printArmDataLCDv+0x232>
     83c:	43 e2       	ldi	r20, 0x23	; 35
     83e:	01 c0       	rjmp	.+2      	; 0x842 <_Z15printArmDataLCDv+0x234>
     840:	4e e7       	ldi	r20, 0x7E	; 126
     842:	63 e0       	ldi	r22, 0x03	; 3
     844:	8e e0       	ldi	r24, 0x0E	; 14
     846:	f2 dd       	rcall	.-1052   	; 0x42c <_Z12printCharLCDhhc>
     848:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <arm+0x31>
     84c:	81 11       	cpse	r24, r1
     84e:	02 c0       	rjmp	.+4      	; 0x854 <_Z15printArmDataLCDv+0x246>
     850:	43 e2       	ldi	r20, 0x23	; 35
     852:	01 c0       	rjmp	.+2      	; 0x856 <_Z15printArmDataLCDv+0x248>
     854:	4e e7       	ldi	r20, 0x7E	; 126
     856:	63 e0       	ldi	r22, 0x03	; 3
     858:	8f e0       	ldi	r24, 0x0F	; 15
     85a:	e8 dd       	rcall	.-1072   	; 0x42c <_Z12printCharLCDhhc>
     85c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <arm+0x42>
     860:	81 11       	cpse	r24, r1
     862:	02 c0       	rjmp	.+4      	; 0x868 <_Z15printArmDataLCDv+0x25a>
     864:	43 e2       	ldi	r20, 0x23	; 35
     866:	01 c0       	rjmp	.+2      	; 0x86a <_Z15printArmDataLCDv+0x25c>
     868:	4e e7       	ldi	r20, 0x7E	; 126
     86a:	63 e0       	ldi	r22, 0x03	; 3
     86c:	80 e1       	ldi	r24, 0x10	; 16
     86e:	de dd       	rcall	.-1092   	; 0x42c <_Z12printCharLCDhhc>
     870:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <arm+0x53>
     874:	81 11       	cpse	r24, r1
     876:	02 c0       	rjmp	.+4      	; 0x87c <_Z15printArmDataLCDv+0x26e>
     878:	43 e2       	ldi	r20, 0x23	; 35
     87a:	01 c0       	rjmp	.+2      	; 0x87e <_Z15printArmDataLCDv+0x270>
     87c:	4e e7       	ldi	r20, 0x7E	; 126
     87e:	63 e0       	ldi	r22, 0x03	; 3
     880:	81 e1       	ldi	r24, 0x11	; 17
     882:	d4 dd       	rcall	.-1112   	; 0x42c <_Z12printCharLCDhhc>
     884:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <arm+0x64>
     888:	81 11       	cpse	r24, r1
     88a:	02 c0       	rjmp	.+4      	; 0x890 <_Z15printArmDataLCDv+0x282>
     88c:	43 e2       	ldi	r20, 0x23	; 35
     88e:	01 c0       	rjmp	.+2      	; 0x892 <_Z15printArmDataLCDv+0x284>
     890:	4e e7       	ldi	r20, 0x7E	; 126
     892:	63 e0       	ldi	r22, 0x03	; 3
     894:	82 e1       	ldi	r24, 0x12	; 18
     896:	ca dd       	rcall	.-1132   	; 0x42c <_Z12printCharLCDhhc>
     898:	40 91 66 03 	lds	r20, 0x0366	; 0x800366 <cycle_counter>
     89c:	50 91 67 03 	lds	r21, 0x0367	; 0x800367 <cycle_counter+0x1>
     8a0:	24 e0       	ldi	r18, 0x04	; 4
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	80 e1       	ldi	r24, 0x10	; 16
     8a6:	cf 91       	pop	r28
     8a8:	30 cd       	rjmp	.-1440   	; 0x30a <_Z8printLCDhhih>

000008aa <_Z8sumBytesPhh>:
     8aa:	38 2f       	mov	r19, r24
     8ac:	fc 01       	movw	r30, r24
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	2e 2f       	mov	r18, r30
     8b4:	23 1b       	sub	r18, r19
     8b6:	26 17       	cp	r18, r22
     8b8:	20 f4       	brcc	.+8      	; 0x8c2 <_Z8sumBytesPhh+0x18>
     8ba:	21 91       	ld	r18, Z+
     8bc:	82 0f       	add	r24, r18
     8be:	91 1d       	adc	r25, r1
     8c0:	f8 cf       	rjmp	.-16     	; 0x8b2 <_Z8sumBytesPhh+0x8>
     8c2:	08 95       	ret

000008c4 <_GLOBAL__sub_I_position_old>:
     8c4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     8c8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     8cc:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <currPos+0x1>
     8d0:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <currPos>
     8d4:	24 e0       	ldi	r18, 0x04	; 4
     8d6:	44 e1       	ldi	r20, 0x14	; 20
     8d8:	67 e2       	ldi	r22, 0x27	; 39
     8da:	8a e5       	ldi	r24, 0x5A	; 90
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	0c 94 a7 13 	jmp	0x274e	; 0x274e <_ZN17LiquidCrystal_I2CC1Ehhh>

000008e2 <_Z10writeServohhPhh>:
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	18 2f       	mov	r17, r24
     8f0:	d6 2f       	mov	r29, r22
     8f2:	7a 01       	movw	r14, r20
     8f4:	02 2f       	mov	r16, r18
     8f6:	c6 e0       	ldi	r28, 0x06	; 6
     8f8:	c6 0f       	add	r28, r22
     8fa:	c2 0f       	add	r28, r18
     8fc:	62 2f       	mov	r22, r18
     8fe:	ca 01       	movw	r24, r20
     900:	d4 df       	rcall	.-88     	; 0x8aa <_Z8sumBytesPhh>
     902:	c1 0f       	add	r28, r17
     904:	8c 0f       	add	r24, r28
     906:	c8 2f       	mov	r28, r24
     908:	c0 95       	com	r28
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <digitalWrite>
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <digitalWrite>
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
     926:	6f ef       	ldi	r22, 0xFF	; 255
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	84 e7       	ldi	r24, 0x74	; 116
     92c:	94 e0       	ldi	r25, 0x04	; 4
     92e:	e6 dc       	rcall	.-1588   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     930:	6f ef       	ldi	r22, 0xFF	; 255
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	84 e7       	ldi	r24, 0x74	; 116
     936:	94 e0       	ldi	r25, 0x04	; 4
     938:	e1 dc       	rcall	.-1598   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     93a:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <serialWriting>
     93e:	88 23       	and	r24, r24
     940:	39 f0       	breq	.+14     	; 0x950 <_Z10writeServohhPhh+0x6e>
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
     94e:	f5 cf       	rjmp	.-22     	; 0x93a <_Z10writeServohhPhh+0x58>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <serialWriting>
     956:	61 2f       	mov	r22, r17
     958:	84 e7       	ldi	r24, 0x74	; 116
     95a:	94 e0       	ldi	r25, 0x04	; 4
     95c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN14HardwareSerial5writeEh>
     960:	10 e0       	ldi	r17, 0x00	; 0
     962:	b8 01       	movw	r22, r16
     964:	6d 5f       	subi	r22, 0xFD	; 253
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	84 e7       	ldi	r24, 0x74	; 116
     96a:	94 e0       	ldi	r25, 0x04	; 4
     96c:	c7 dc       	rcall	.-1650   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     96e:	63 e0       	ldi	r22, 0x03	; 3
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	84 e7       	ldi	r24, 0x74	; 116
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	c2 dc       	rcall	.-1660   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     978:	6d 2f       	mov	r22, r29
     97a:	84 e7       	ldi	r24, 0x74	; 116
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN14HardwareSerial5writeEh>
     982:	a8 01       	movw	r20, r16
     984:	b7 01       	movw	r22, r14
     986:	84 e7       	ldi	r24, 0x74	; 116
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	0e 94 1f 10 	call	0x203e	; 0x203e <_ZN5Print5writeEPKhj>
     98e:	6c 2f       	mov	r22, r28
     990:	84 e7       	ldi	r24, 0x74	; 116
     992:	94 e0       	ldi	r25, 0x04	; 4
     994:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN14HardwareSerial5writeEh>
     998:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <serialWriting>
     99c:	84 e7       	ldi	r24, 0x74	; 116
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN14HardwareSerial5flushEv>
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <digitalWrite>
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <digitalWrite>
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <delay>

000009cc <_Z9moveSpeedhii>:
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <_Z9moveSpeedhii+0x10>
     9dc:	1f 92       	push	r1
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	18 2f       	mov	r17, r24
     9e4:	d4 2e       	mov	r13, r20
     9e6:	e5 2e       	mov	r14, r21
     9e8:	40 dd       	rcall	.-1408   	; 0x46a <_Z13checkPositionhi>
     9ea:	f8 2e       	mov	r15, r24
     9ec:	09 2f       	mov	r16, r25
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	db 82       	std	Y+3, r13	; 0x03
     9f4:	ec 82       	std	Y+4, r14	; 0x04
     9f6:	24 e0       	ldi	r18, 0x04	; 4
     9f8:	ae 01       	movw	r20, r28
     9fa:	4f 5f       	subi	r20, 0xFF	; 255
     9fc:	5f 4f       	sbci	r21, 0xFF	; 255
     9fe:	6e e1       	ldi	r22, 0x1E	; 30
     a00:	81 2f       	mov	r24, r17
     a02:	6f df       	rcall	.-290    	; 0x8e2 <_Z10writeServohhPhh>
     a04:	81 e1       	ldi	r24, 0x11	; 17
     a06:	18 9f       	mul	r17, r24
     a08:	f0 01       	movw	r30, r0
     a0a:	11 24       	eor	r1, r1
     a0c:	e6 59       	subi	r30, 0x96	; 150
     a0e:	fc 4f       	sbci	r31, 0xFC	; 252
     a10:	f4 82       	std	Z+4, r15	; 0x04
     a12:	05 83       	std	Z+5, r16	; 0x05
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	08 95       	ret

00000a2c <_Z14setTorqueLimithi>:
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	1f 92       	push	r1
     a32:	1f 92       	push	r1
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	69 83       	std	Y+1, r22	; 0x01
     a3a:	7a 83       	std	Y+2, r23	; 0x02
     a3c:	22 e0       	ldi	r18, 0x02	; 2
     a3e:	ae 01       	movw	r20, r28
     a40:	4f 5f       	subi	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	62 e2       	ldi	r22, 0x22	; 34
     a46:	4d df       	rcall	.-358    	; 0x8e2 <_Z10writeServohhPhh>
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <_Z7setModehh>:
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <_Z7setModehh+0xa>
     a5c:	1f 92       	push	r1
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	18 2f       	mov	r17, r24
     a64:	06 2f       	mov	r16, r22
     a66:	61 30       	cpi	r22, 0x01	; 1
     a68:	29 f4       	brne	.+10     	; 0xa74 <_Z7setModehh+0x22>
     a6a:	19 82       	std	Y+1, r1	; 0x01
     a6c:	1a 82       	std	Y+2, r1	; 0x02
     a6e:	1b 82       	std	Y+3, r1	; 0x03
     a70:	1c 82       	std	Y+4, r1	; 0x04
     a72:	08 c0       	rjmp	.+16     	; 0xa84 <_Z7setModehh+0x32>
     a74:	62 30       	cpi	r22, 0x02	; 2
     a76:	81 f4       	brne	.+32     	; 0xa98 <_Z7setModehh+0x46>
     a78:	9f ef       	ldi	r25, 0xFF	; 255
     a7a:	99 83       	std	Y+1, r25	; 0x01
     a7c:	8f e0       	ldi	r24, 0x0F	; 15
     a7e:	8a 83       	std	Y+2, r24	; 0x02
     a80:	9b 83       	std	Y+3, r25	; 0x03
     a82:	8c 83       	std	Y+4, r24	; 0x04
     a84:	24 e0       	ldi	r18, 0x04	; 4
     a86:	ae 01       	movw	r20, r28
     a88:	4f 5f       	subi	r20, 0xFF	; 255
     a8a:	5f 4f       	sbci	r21, 0xFF	; 255
     a8c:	66 e0       	ldi	r22, 0x06	; 6
     a8e:	81 2f       	mov	r24, r17
     a90:	28 df       	rcall	.-432    	; 0x8e2 <_Z10writeServohhPhh>
     a92:	16 30       	cpi	r17, 0x06	; 6
     a94:	a0 f0       	brcs	.+40     	; 0xabe <_Z7setModehh+0x6c>
     a96:	1a c0       	rjmp	.+52     	; 0xacc <_Z7setModehh+0x7a>
     a98:	84 ee       	ldi	r24, 0xE4	; 228
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	8a 83       	std	Y+2, r24	; 0x02
     aa0:	84 ea       	ldi	r24, 0xA4	; 164
     aa2:	8b 83       	std	Y+3, r24	; 0x03
     aa4:	86 e0       	ldi	r24, 0x06	; 6
     aa6:	8c 83       	std	Y+4, r24	; 0x04
     aa8:	24 e0       	ldi	r18, 0x04	; 4
     aaa:	ae 01       	movw	r20, r28
     aac:	4f 5f       	subi	r20, 0xFF	; 255
     aae:	5f 4f       	sbci	r21, 0xFF	; 255
     ab0:	66 e0       	ldi	r22, 0x06	; 6
     ab2:	81 2f       	mov	r24, r17
     ab4:	16 df       	rcall	.-468    	; 0x8e2 <_Z10writeServohhPhh>
     ab6:	16 30       	cpi	r17, 0x06	; 6
     ab8:	48 f4       	brcc	.+18     	; 0xacc <_Z7setModehh+0x7a>
     aba:	03 30       	cpi	r16, 0x03	; 3
     abc:	38 f4       	brcc	.+14     	; 0xacc <_Z7setModehh+0x7a>
     abe:	81 e1       	ldi	r24, 0x11	; 17
     ac0:	18 9f       	mul	r17, r24
     ac2:	f0 01       	movw	r30, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	e6 59       	subi	r30, 0x96	; 150
     ac8:	fc 4f       	sbci	r31, 0xFC	; 252
     aca:	03 83       	std	Z+3, r16	; 0x03
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	08 95       	ret

00000ade <_Z12setModeWheelh>:
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	b8 cf       	rjmp	.-144    	; 0xa52 <_Z7setModehh>

00000ae2 <_Z12setModeJointh>:
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	b6 cf       	rjmp	.-148    	; 0xa52 <_Z7setModehh>

00000ae6 <_Z16setModeMultiTurnh>:
     ae6:	62 e0       	ldi	r22, 0x02	; 2
     ae8:	b4 cf       	rjmp	.-152    	; 0xa52 <_Z7setModehh>

00000aea <__vector_9>:
     aea:	1f 92       	push	r1
     aec:	0f 92       	push	r0
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	0f 92       	push	r0
     af2:	11 24       	eor	r1, r1
     af4:	0b b6       	in	r0, 0x3b	; 59
     af6:	0f 92       	push	r0
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	2f 93       	push	r18
     b02:	3f 93       	push	r19
     b04:	4f 93       	push	r20
     b06:	5f 93       	push	r21
     b08:	6f 93       	push	r22
     b0a:	7f 93       	push	r23
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
     b10:	af 93       	push	r26
     b12:	bf 93       	push	r27
     b14:	cf 93       	push	r28
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	c0 91 6a 03 	lds	r28, 0x036A	; 0x80036a <arm>
     b1e:	18 9b       	sbis	0x03, 0	; 3
     b20:	38 c0       	rjmp	.+112    	; 0xb92 <__vector_9+0xa8>
     b22:	2f 9a       	sbi	0x05, 7	; 5
     b24:	81 e1       	ldi	r24, 0x11	; 17
     b26:	c8 9f       	mul	r28, r24
     b28:	80 01       	movw	r16, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	06 59       	subi	r16, 0x96	; 150
     b2e:	1c 4f       	sbci	r17, 0xFC	; 252
     b30:	78 01       	movw	r14, r16
     b32:	e4 e0       	ldi	r30, 0x04	; 4
     b34:	ee 0e       	add	r14, r30
     b36:	f1 1c       	adc	r15, r1
     b38:	07 5f       	subi	r16, 0xF7	; 247
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	18 9b       	sbis	0x03, 0	; 3
     b3e:	20 c0       	rjmp	.+64     	; 0xb80 <__vector_9+0x96>
     b40:	f7 01       	movw	r30, r14
     b42:	60 81       	ld	r22, Z
     b44:	71 81       	ldd	r23, Z+1	; 0x01
     b46:	61 50       	subi	r22, 0x01	; 1
     b48:	71 09       	sbc	r23, r1
     b4a:	71 83       	std	Z+1, r23	; 0x01
     b4c:	60 83       	st	Z, r22
     b4e:	c3 30       	cpi	r28, 0x03	; 3
     b50:	40 f4       	brcc	.+16     	; 0xb62 <__vector_9+0x78>
     b52:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <lastButtonPressed>
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	21 f4       	brne	.+8      	; 0xb62 <__vector_9+0x78>
     b5a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <buttonsState+0x1>
     b5e:	81 11       	cpse	r24, r1
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <__vector_9+0x80>
     b62:	f8 01       	movw	r30, r16
     b64:	40 81       	ld	r20, Z
     b66:	51 81       	ldd	r21, Z+1	; 0x01
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <__vector_9+0x84>
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	8c 2f       	mov	r24, r28
     b70:	2d df       	rcall	.-422    	; 0x9cc <_Z9moveSpeedhii>
     b72:	68 ec       	ldi	r22, 0xC8	; 200
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
     b7e:	de cf       	rjmp	.-68     	; 0xb3c <__vector_9+0x52>
     b80:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <buttonsState+0x1>
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	89 27       	eor	r24, r25
     b88:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <buttonsState+0x1>
     b8c:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <lastButtonPressed>
     b90:	2f 98       	cbi	0x05, 7	; 5
     b92:	19 9b       	sbis	0x03, 1	; 3
     b94:	6c c0       	rjmp	.+216    	; 0xc6e <__vector_9+0x184>
     b96:	2f 9a       	sbi	0x05, 7	; 5
     b98:	f1 e1       	ldi	r31, 0x11	; 17
     b9a:	cf 9f       	mul	r28, r31
     b9c:	80 01       	movw	r16, r0
     b9e:	11 24       	eor	r1, r1
     ba0:	06 59       	subi	r16, 0x96	; 150
     ba2:	1c 4f       	sbci	r17, 0xFC	; 252
     ba4:	78 01       	movw	r14, r16
     ba6:	84 e0       	ldi	r24, 0x04	; 4
     ba8:	e8 0e       	add	r14, r24
     baa:	f1 1c       	adc	r15, r1
     bac:	07 5f       	subi	r16, 0xF7	; 247
     bae:	1f 4f       	sbci	r17, 0xFF	; 255
     bb0:	19 9b       	sbis	0x03, 1	; 3
     bb2:	53 c0       	rjmp	.+166    	; 0xc5a <__vector_9+0x170>
     bb4:	f7 01       	movw	r30, r14
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	80 83       	st	Z, r24
     bc0:	18 9b       	sbis	0x03, 0	; 3
     bc2:	2a c0       	rjmp	.+84     	; 0xc18 <__vector_9+0x12e>
     bc4:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <arm+0x1c>
     bc8:	81 11       	cpse	r24, r1
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <__vector_9+0xe8>
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <__vector_9+0xec>
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	54 e0       	ldi	r21, 0x04	; 4
     bd6:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <arm+0x15>
     bda:	70 91 80 03 	lds	r23, 0x0380	; 0x800380 <arm+0x16>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	f5 de       	rcall	.-534    	; 0x9cc <_Z9moveSpeedhii>
     be2:	62 e3       	ldi	r22, 0x32	; 50
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
     bee:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <arm+0x2d>
     bf2:	81 11       	cpse	r24, r1
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <__vector_9+0x112>
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <__vector_9+0x116>
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	54 e0       	ldi	r21, 0x04	; 4
     c00:	60 91 90 03 	lds	r22, 0x0390	; 0x800390 <arm+0x26>
     c04:	70 91 91 03 	lds	r23, 0x0391	; 0x800391 <arm+0x27>
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	e0 de       	rcall	.-576    	; 0x9cc <_Z9moveSpeedhii>
     c0c:	62 e3       	ldi	r22, 0x32	; 50
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
     c18:	c3 30       	cpi	r28, 0x03	; 3
     c1a:	68 f4       	brcc	.+26     	; 0xc36 <__vector_9+0x14c>
     c1c:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <lastButtonPressed>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	21 f4       	brne	.+8      	; 0xc2c <__vector_9+0x142>
     c24:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <buttonsState+0x2>
     c28:	81 11       	cpse	r24, r1
     c2a:	09 c0       	rjmp	.+18     	; 0xc3e <__vector_9+0x154>
     c2c:	f8 01       	movw	r30, r16
     c2e:	40 81       	ld	r20, Z
     c30:	51 81       	ldd	r21, Z+1	; 0x01
     c32:	5c 5f       	subi	r21, 0xFC	; 252
     c34:	06 c0       	rjmp	.+12     	; 0xc42 <__vector_9+0x158>
     c36:	f8 01       	movw	r30, r16
     c38:	40 81       	ld	r20, Z
     c3a:	51 81       	ldd	r21, Z+1	; 0x01
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <__vector_9+0x158>
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	54 e0       	ldi	r21, 0x04	; 4
     c42:	f7 01       	movw	r30, r14
     c44:	60 81       	ld	r22, Z
     c46:	71 81       	ldd	r23, Z+1	; 0x01
     c48:	8c 2f       	mov	r24, r28
     c4a:	c0 de       	rcall	.-640    	; 0x9cc <_Z9moveSpeedhii>
     c4c:	68 ec       	ldi	r22, 0xC8	; 200
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
     c58:	ab cf       	rjmp	.-170    	; 0xbb0 <__vector_9+0xc6>
     c5a:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <buttonsState+0x2>
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	89 27       	eor	r24, r25
     c62:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <buttonsState+0x2>
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <lastButtonPressed>
     c6c:	2f 98       	cbi	0x05, 7	; 5
     c6e:	1a 9b       	sbis	0x03, 2	; 3
     c70:	26 c0       	rjmp	.+76     	; 0xcbe <__vector_9+0x1d4>
     c72:	1f 9a       	sbi	0x03, 7	; 3
     c74:	64 e1       	ldi	r22, 0x14	; 20
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
     c80:	1a 9b       	sbis	0x03, 2	; 3
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <__vector_9+0x1a4>
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	f7 cf       	rjmp	.-18     	; 0xc7c <__vector_9+0x192>
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	c5 30       	cpi	r28, 0x05	; 5
     c92:	08 f4       	brcc	.+2      	; 0xc96 <__vector_9+0x1ac>
     c94:	8c 0f       	add	r24, r28
     c96:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <arm>
     c9a:	84 30       	cpi	r24, 0x04	; 4
     c9c:	10 f0       	brcs	.+4      	; 0xca2 <__vector_9+0x1b8>
     c9e:	21 df       	rcall	.-446    	; 0xae2 <_Z12setModeJointh>
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <__vector_9+0x1c2>
     ca2:	83 30       	cpi	r24, 0x03	; 3
     ca4:	11 f4       	brne	.+4      	; 0xcaa <__vector_9+0x1c0>
     ca6:	1f df       	rcall	.-450    	; 0xae6 <_Z16setModeMultiTurnh>
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <__vector_9+0x1c2>
     caa:	19 df       	rcall	.-462    	; 0xade <_Z12setModeWheelh>
     cac:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <lastButtonPressed>
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	89 27       	eor	r24, r25
     cb4:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <lastButtonPressed>
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <lastButtonPressed>
     cbe:	ff 91       	pop	r31
     cc0:	ef 91       	pop	r30
     cc2:	cf 91       	pop	r28
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	0f 90       	pop	r0
     ce2:	0b be       	out	0x3b, r0	; 59
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <_Z9readServohhh>:
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	c8 2f       	mov	r28, r24
     cf6:	d6 2f       	mov	r29, r22
     cf8:	14 2f       	mov	r17, r20
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <digitalWrite>
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <digitalWrite>
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
     d16:	6f ef       	ldi	r22, 0xFF	; 255
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	84 e7       	ldi	r24, 0x74	; 116
     d1c:	94 e0       	ldi	r25, 0x04	; 4
     d1e:	ee da       	rcall	.-2596   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     d20:	6f ef       	ldi	r22, 0xFF	; 255
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	84 e7       	ldi	r24, 0x74	; 116
     d26:	94 e0       	ldi	r25, 0x04	; 4
     d28:	e9 da       	rcall	.-2606   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <serialWriting>
     d30:	6c 2f       	mov	r22, r28
     d32:	84 e7       	ldi	r24, 0x74	; 116
     d34:	94 e0       	ldi	r25, 0x04	; 4
     d36:	78 d7       	rcall	.+3824   	; 0x1c28 <_ZN14HardwareSerial5writeEh>
     d38:	64 e0       	ldi	r22, 0x04	; 4
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	84 e7       	ldi	r24, 0x74	; 116
     d3e:	94 e0       	ldi	r25, 0x04	; 4
     d40:	dd da       	rcall	.-2630   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     d42:	62 e0       	ldi	r22, 0x02	; 2
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	84 e7       	ldi	r24, 0x74	; 116
     d48:	94 e0       	ldi	r25, 0x04	; 4
     d4a:	d8 da       	rcall	.-2640   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     d4c:	6d 2f       	mov	r22, r29
     d4e:	84 e7       	ldi	r24, 0x74	; 116
     d50:	94 e0       	ldi	r25, 0x04	; 4
     d52:	6a d7       	rcall	.+3796   	; 0x1c28 <_ZN14HardwareSerial5writeEh>
     d54:	61 2f       	mov	r22, r17
     d56:	84 e7       	ldi	r24, 0x74	; 116
     d58:	94 e0       	ldi	r25, 0x04	; 4
     d5a:	66 d7       	rcall	.+3788   	; 0x1c28 <_ZN14HardwareSerial5writeEh>
     d5c:	66 e0       	ldi	r22, 0x06	; 6
     d5e:	61 0f       	add	r22, r17
     d60:	6d 0f       	add	r22, r29
     d62:	6c 0f       	add	r22, r28
     d64:	60 95       	com	r22
     d66:	84 e7       	ldi	r24, 0x74	; 116
     d68:	94 e0       	ldi	r25, 0x04	; 4
     d6a:	5e d7       	rcall	.+3772   	; 0x1c28 <_ZN14HardwareSerial5writeEh>
     d6c:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <serialWriting>
     d70:	84 e7       	ldi	r24, 0x74	; 116
     d72:	94 e0       	ldi	r25, 0x04	; 4
     d74:	a5 d7       	rcall	.+3914   	; 0x1cc0 <_ZN14HardwareSerial5flushEv>
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <digitalWrite>
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <digitalWrite>
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <delay>

00000d98 <_Z7getDatahhh>:

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
     d98:	2f 92       	push	r2
     d9a:	3f 92       	push	r3
     d9c:	4f 92       	push	r4
     d9e:	5f 92       	push	r5
     da0:	6f 92       	push	r6
     da2:	7f 92       	push	r7
     da4:	8f 92       	push	r8
     da6:	9f 92       	push	r9
     da8:	af 92       	push	r10
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <_Z7getDatahhh+0x26>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <_Z7getDatahhh+0x28>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	f4 2e       	mov	r15, r20
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;

	int msgData;
	readServo(id, ctrlData, askedLength);
     dc6:	93 df       	rcall	.-218    	; 0xcee <_Z9readServohhh>
	delay(10);
     dc8:	6a e0       	ldi	r22, 0x0A	; 10
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
	serialReading = YES;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
     dda:	84 e7       	ldi	r24, 0x74	; 116
     ddc:	94 e0       	ldi	r25, 0x04	; 4
     dde:	a4 d6       	rcall	.+3400   	; 0x1b28 <_ZN14HardwareSerial4readEv>
     de0:	18 2f       	mov	r17, r24
	//Serial1.availableForWrite();
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
     de2:	84 e7       	ldi	r24, 0x74	; 116
     de4:	94 e0       	ldi	r25, 0x04	; 4
     de6:	a0 d6       	rcall	.+3392   	; 0x1b28 <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
     de8:	1f 3f       	cpi	r17, 0xFF	; 255
     dea:	19 f4       	brne	.+6      	; 0xdf2 <_Z7getDatahhh+0x5a>
     dec:	11 e0       	ldi	r17, 0x01	; 1
     dee:	8f 3f       	cpi	r24, 0xFF	; 255
     df0:	09 f0       	breq	.+2      	; 0xdf4 <_Z7getDatahhh+0x5c>
     df2:	10 e0       	ldi	r17, 0x00	; 0
	Serial.print("## Start 01: ");
     df4:	6e e4       	ldi	r22, 0x4E	; 78
     df6:	72 e0       	ldi	r23, 0x02	; 2
     df8:	87 ed       	ldi	r24, 0xD7	; 215
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     e00:	84 e7       	ldi	r24, 0x74	; 116
     e02:	94 e0       	ldi	r25, 0x04	; 4
     e04:	77 d6       	rcall	.+3310   	; 0x1af4 <_ZN14HardwareSerial9availableEv>
     e06:	4a e0       	ldi	r20, 0x0A	; 10
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	bc 01       	movw	r22, r24
     e0c:	87 ed       	ldi	r24, 0xD7	; 215
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN5Print5printEii>
	Serial.println(" ####################");
     e14:	6c e5       	ldi	r22, 0x5C	; 92
     e16:	72 e0       	ldi	r23, 0x02	; 2
     e18:	87 ed       	ldi	r24, 0xD7	; 215
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN5Print7printlnEPKc>
	if (msgStarted) {
     e20:	11 23       	and	r17, r17
     e22:	09 f4       	brne	.+2      	; 0xe26 <_Z7getDatahhh+0x8e>
		msgId = Serial1.read();
     e24:	a0 c0       	rjmp	.+320    	; 0xf66 <_Z7getDatahhh+0x1ce>
     e26:	84 e7       	ldi	r24, 0x74	; 116
     e28:	94 e0       	ldi	r25, 0x04	; 4
     e2a:	7e d6       	rcall	.+3324   	; 0x1b28 <_ZN14HardwareSerial4readEv>
     e2c:	5c 01       	movw	r10, r24
		printSerial("Servo ID   ", msgId);
     e2e:	62 e7       	ldi	r22, 0x72	; 114
     e30:	72 e0       	ldi	r23, 0x02	; 2
     e32:	ce 01       	movw	r24, r28
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     e3a:	b5 01       	movw	r22, r10
     e3c:	77 27       	eor	r23, r23
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	3d db       	rcall	.-2438   	; 0x4be <_Z11printSerial6Stringi>
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
		msgLength = Serial1.read();
     e4c:	84 e7       	ldi	r24, 0x74	; 116
     e4e:	94 e0       	ldi	r25, 0x04	; 4
     e50:	6b d6       	rcall	.+3286   	; 0x1b28 <_ZN14HardwareSerial4readEv>
     e52:	4c 01       	movw	r8, r24
		printSerial("Msg Length ", msgLength);
     e54:	6e e7       	ldi	r22, 0x7E	; 126
     e56:	72 e0       	ldi	r23, 0x02	; 2
     e58:	ce 01       	movw	r24, r28
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     e60:	b4 01       	movw	r22, r8
     e62:	77 27       	eor	r23, r23
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	2a db       	rcall	.-2476   	; 0x4be <_Z11printSerial6Stringi>
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
		msgError = Serial1.read();
     e72:	84 e7       	ldi	r24, 0x74	; 116
     e74:	94 e0       	ldi	r25, 0x04	; 4
     e76:	58 d6       	rcall	.+3248   	; 0x1b28 <_ZN14HardwareSerial4readEv>
     e78:	8c 01       	movw	r16, r24
     e7a:	38 2e       	mov	r3, r24
		printSerial("Msg Error  ", msgError);
     e7c:	6a e8       	ldi	r22, 0x8A	; 138
     e7e:	72 e0       	ldi	r23, 0x02	; 2
     e80:	ce 01       	movw	r24, r28
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     e88:	b8 01       	movw	r22, r16
     e8a:	77 27       	eor	r23, r23
     e8c:	ce 01       	movw	r24, r28
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	16 db       	rcall	.-2516   	; 0x4be <_Z11printSerial6Stringi>
     e92:	ce 01       	movw	r24, r28
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
		msgData_1 = Serial1.read();
     e9a:	84 e7       	ldi	r24, 0x74	; 116
     e9c:	94 e0       	ldi	r25, 0x04	; 4
     e9e:	44 d6       	rcall	.+3208   	; 0x1b28 <_ZN14HardwareSerial4readEv>
     ea0:	6c 01       	movw	r12, r24
     ea2:	3c 01       	movw	r6, r24
		printSerial("Msg Data L ", msgData_1);
     ea4:	77 24       	eor	r7, r7
     ea6:	66 e9       	ldi	r22, 0x96	; 150
     ea8:	72 e0       	ldi	r23, 0x02	; 2
     eaa:	ce 01       	movw	r24, r28
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     eb2:	b3 01       	movw	r22, r6
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	02 db       	rcall	.-2556   	; 0x4be <_Z11printSerial6Stringi>
     eba:	ce 01       	movw	r24, r28
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
		if (askedLength>1) {
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	8f 15       	cp	r24, r15
			msgData_2 = Serial1.read();
     ec6:	30 f5       	brcc	.+76     	; 0xf14 <_Z7getDatahhh+0x17c>
     ec8:	84 e7       	ldi	r24, 0x74	; 116
     eca:	94 e0       	ldi	r25, 0x04	; 4
     ecc:	2d d6       	rcall	.+3162   	; 0x1b28 <_ZN14HardwareSerial4readEv>
     ece:	28 2e       	mov	r2, r24
     ed0:	7c 01       	movw	r14, r24
     ed2:	ff 24       	eor	r15, r15
			msgData = msgData_1 + (msgData_2<<8);
     ed4:	5e 2c       	mov	r5, r14
     ed6:	44 24       	eor	r4, r4
     ed8:	46 0c       	add	r4, r6
			printSerial("Msg Data H ", msgData_2);
     eda:	57 1c       	adc	r5, r7
     edc:	62 ea       	ldi	r22, 0xA2	; 162
     ede:	72 e0       	ldi	r23, 0x02	; 2
     ee0:	ce 01       	movw	r24, r28
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     ee8:	b7 01       	movw	r22, r14
     eea:	ce 01       	movw	r24, r28
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	e7 da       	rcall	.-2610   	; 0x4be <_Z11printSerial6Stringi>
     ef0:	ce 01       	movw	r24, r28
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
			printSerial("Msg Data   ", msgData);
     ef8:	6e ea       	ldi	r22, 0xAE	; 174
     efa:	72 e0       	ldi	r23, 0x02	; 2
     efc:	ce 01       	movw	r24, r28
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     f04:	b2 01       	movw	r22, r4
     f06:	ce 01       	movw	r24, r28
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	d9 da       	rcall	.-2638   	; 0x4be <_Z11printSerial6Stringi>
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
		}
		msgChecksum = Serial1.read();
     f14:	84 e7       	ldi	r24, 0x74	; 116
     f16:	94 e0       	ldi	r25, 0x04	; 4
     f18:	07 d6       	rcall	.+3086   	; 0x1b28 <_ZN14HardwareSerial4readEv>
     f1a:	7c 01       	movw	r14, r24
		printSerial("Checksum   ", msgChecksum);
     f1c:	6a eb       	ldi	r22, 0xBA	; 186
     f1e:	72 e0       	ldi	r23, 0x02	; 2
     f20:	ce 01       	movw	r24, r28
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     f28:	b7 01       	movw	r22, r14
     f2a:	77 27       	eor	r23, r23
     f2c:	ce 01       	movw	r24, r28
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	c6 da       	rcall	.-2676   	; 0x4be <_Z11printSerial6Stringi>
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
     f3a:	a8 0c       	add	r10, r8
     f3c:	0a 0d       	add	r16, r10
     f3e:	0c 0d       	add	r16, r12
     f40:	20 0e       	add	r2, r16
     f42:	20 94       	com	r2
		printSerial("Checksum~  ", Checksum);
     f44:	66 ec       	ldi	r22, 0xC6	; 198
     f46:	72 e0       	ldi	r23, 0x02	; 2
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
     f50:	62 2d       	mov	r22, r2
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	b2 da       	rcall	.-2716   	; 0x4be <_Z11printSerial6Stringi>
     f5a:	ce 01       	movw	r24, r28
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
     f62:	11 e0       	ldi	r17, 0x01	; 1
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
     f64:	2e 10       	cpse	r2, r14
		printSerial("Checksum   ", msgChecksum);
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		printSerial("Checksum~  ", Checksum);
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
     f66:	10 e0       	ldi	r17, 0x00	; 0
     f68:	84 e7       	ldi	r24, 0x74	; 116
     f6a:	94 e0       	ldi	r25, 0x04	; 4
     f6c:	c3 d5       	rcall	.+2950   	; 0x1af4 <_ZN14HardwareSerial9availableEv>
     f6e:	89 2b       	or	r24, r25
     f70:	21 f0       	breq	.+8      	; 0xf7a <_Z7getDatahhh+0x1e2>
     f72:	84 e7       	ldi	r24, 0x74	; 116
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	d8 d5       	rcall	.+2992   	; 0x1b28 <_ZN14HardwareSerial4readEv>
     f78:	f7 cf       	rjmp	.-18     	; 0xf68 <_Z7getDatahhh+0x1d0>
     f7a:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
	serialReading = NO;
     f7e:	11 23       	and	r17, r17
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
     f80:	41 f0       	breq	.+16     	; 0xf92 <_Z7getDatahhh+0x1fa>
     f82:	33 20       	and	r3, r3
     f84:	49 f0       	breq	.+18     	; 0xf98 <_Z7getDatahhh+0x200>
     f86:	83 2d       	mov	r24, r3
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	91 95       	neg	r25
     f8c:	81 95       	neg	r24
     f8e:	91 09       	sbc	r25, r1
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <_Z7getDatahhh+0x202>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	9f ef       	ldi	r25, 0xFF	; 255
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <_Z7getDatahhh+0x202>
     f98:	c2 01       	movw	r24, r4
     f9a:	26 96       	adiw	r28, 0x06	; 6
}
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	bf 90       	pop	r11
     fb8:	af 90       	pop	r10
     fba:	9f 90       	pop	r9
     fbc:	8f 90       	pop	r8
     fbe:	7f 90       	pop	r7
     fc0:	6f 90       	pop	r6
     fc2:	5f 90       	pop	r5
     fc4:	4f 90       	pop	r4
     fc6:	3f 90       	pop	r3
     fc8:	2f 90       	pop	r2
     fca:	08 95       	ret

00000fcc <_Z11printBufferv>:
     fcc:	62 ed       	ldi	r22, 0xD2	; 210
 */
void printBuffer() {
	//delay(20);
	//uint8_t start_1, start_2, servo_id, msg_length, er_byte, chck_sum;

	Serial.print("## Start: ");
     fce:	72 e0       	ldi	r23, 0x02	; 2
     fd0:	87 ed       	ldi	r24, 0xD7	; 215
     fd2:	93 e0       	ldi	r25, 0x03	; 3
     fd4:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     fd8:	84 e7       	ldi	r24, 0x74	; 116
     fda:	94 e0       	ldi	r25, 0x04	; 4
     fdc:	8b d5       	rcall	.+2838   	; 0x1af4 <_ZN14HardwareSerial9availableEv>
     fde:	4a e0       	ldi	r20, 0x0A	; 10
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	bc 01       	movw	r22, r24
     fe4:	87 ed       	ldi	r24, 0xD7	; 215
     fe6:	93 e0       	ldi	r25, 0x03	; 3
     fe8:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN5Print5printEii>
	Serial.println(" ####################");
     fec:	6c e5       	ldi	r22, 0x5C	; 92
     fee:	72 e0       	ldi	r23, 0x02	; 2
     ff0:	87 ed       	ldi	r24, 0xD7	; 215
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN5Print7printlnEPKc>
	serialReading = YES;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
	while(Serial1.available()){
     ffe:	84 e7       	ldi	r24, 0x74	; 116
    1000:	94 e0       	ldi	r25, 0x04	; 4
    1002:	78 d5       	rcall	.+2800   	; 0x1af4 <_ZN14HardwareSerial9availableEv>
    1004:	89 2b       	or	r24, r25
    1006:	09 f1       	breq	.+66     	; 0x104a <_Z11printBufferv+0x7e>

		Serial.print(Serial1.available());
    1008:	84 e7       	ldi	r24, 0x74	; 116
    100a:	94 e0       	ldi	r25, 0x04	; 4
    100c:	73 d5       	rcall	.+2790   	; 0x1af4 <_ZN14HardwareSerial9availableEv>
    100e:	4a e0       	ldi	r20, 0x0A	; 10
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	bc 01       	movw	r22, r24
    1014:	87 ed       	ldi	r24, 0xD7	; 215
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN5Print5printEii>
		Serial.print(", ");
    101c:	6d ed       	ldi	r22, 0xDD	; 221
    101e:	72 e0       	ldi	r23, 0x02	; 2
    1020:	87 ed       	ldi	r24, 0xD7	; 215
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN5Print5printEPKc>
		Serial.println(Serial1.read());
    1028:	84 e7       	ldi	r24, 0x74	; 116
    102a:	94 e0       	ldi	r25, 0x04	; 4
    102c:	7d d5       	rcall	.+2810   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    102e:	4a e0       	ldi	r20, 0x0A	; 10
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	bc 01       	movw	r22, r24
    1034:	87 ed       	ldi	r24, 0xD7	; 215
    1036:	93 e0       	ldi	r25, 0x03	; 3
    1038:	0e 94 2b 11 	call	0x2256	; 0x2256 <_ZN5Print7printlnEii>
		delay(1);
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>

	Serial.print("## Start: ");
	Serial.print(Serial1.available());
	Serial.println(" ####################");
	serialReading = YES;
	while(Serial1.available()){
    1048:	da cf       	rjmp	.-76     	; 0xffe <_Z11printBufferv+0x32>
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	serialReading = NO;
    104a:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
	Serial.println("## End #####################");
    104e:	60 ee       	ldi	r22, 0xE0	; 224
    1050:	72 e0       	ldi	r23, 0x02	; 2
    1052:	87 ed       	ldi	r24, 0xD7	; 215
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <_ZN5Print7printlnEPKc>

0000105a <setup>:
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	00 d0       	rcall	.+0      	; 0x1066 <setup+0xc>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <setup+0xe>
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
    106c:	ed d9       	rcall	.-3110   	; 0x448 <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
    106e:	8a e5       	ldi	r24, 0x5A	; 90
    1070:	93 e0       	ldi	r25, 0x03	; 3
    1072:	0e 94 99 14 	call	0x2932	; 0x2932 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    1076:	8a e5       	ldi	r24, 0x5A	; 90
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	0e 94 c7 13 	call	0x278e	; 0x278e <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    107e:	8a e5       	ldi	r24, 0x5A	; 90
    1080:	93 e0       	ldi	r25, 0x03	; 3
    1082:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	0e 94 a5 12 	call	0x254a	; 0x254a <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
    108e:	61 e0       	ldi	r22, 0x01	; 1
    1090:	83 e0       	ldi	r24, 0x03	; 3
    1092:	0e 94 a5 12 	call	0x254a	; 0x254a <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1096:	26 e0       	ldi	r18, 0x06	; 6
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	51 ee       	ldi	r21, 0xE1	; 225
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	87 ed       	ldi	r24, 0xD7	; 215
    10a2:	93 e0       	ldi	r25, 0x03	; 3
    10a4:	2e d6       	rcall	.+3164   	; 0x1d02 <_ZN14HardwareSerial5beginEmh>
    10a6:	26 e0       	ldi	r18, 0x06	; 6
    10a8:	47 e3       	ldi	r20, 0x37	; 55
    10aa:	5f ed       	ldi	r21, 0xDF	; 223
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	84 e7       	ldi	r24, 0x74	; 116
    10b2:	94 e0       	ldi	r25, 0x04	; 4
    10b4:	26 d6       	rcall	.+3148   	; 0x1d02 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
    10b6:	84 e7       	ldi	r24, 0x74	; 116
    10b8:	94 e0       	ldi	r25, 0x04	; 4
    10ba:	02 d6       	rcall	.+3076   	; 0x1cc0 <_ZN14HardwareSerial5flushEv>
    10bc:	85 e0       	ldi	r24, 0x05	; 5
	arm.id = 5;
    10be:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <arm>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	0c dd       	rcall	.-1512   	; 0xade <_Z12setModeWheelh>
	setModeWheel(2);
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	0a dd       	rcall	.-1516   	; 0xade <_Z12setModeWheelh>
	setModeMultiTurn(3);
    10ca:	83 e0       	ldi	r24, 0x03	; 3
    10cc:	0c dd       	rcall	.-1512   	; 0xae6 <_Z16setModeMultiTurnh>
    10ce:	84 e0       	ldi	r24, 0x04	; 4
	setModeJoint(4);
    10d0:	08 dd       	rcall	.-1520   	; 0xae2 <_Z12setModeJointh>
    10d2:	85 e0       	ldi	r24, 0x05	; 5
    10d4:	06 dd       	rcall	.-1524   	; 0xae2 <_Z12setModeJointh>
	setModeJoint(5);
    10d6:	86 e9       	ldi	r24, 0x96	; 150
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <arm+0x1b>
	/* Set the speeds of the servos */
	arm.servos[1].speed = 150;
    10de:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <arm+0x1a>
    10e2:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <arm+0x2c>
    10e6:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <arm+0x2b>
	arm.servos[2].speed = 150;
    10ea:	8e e1       	ldi	r24, 0x1E	; 30
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <arm+0x3d>
	arm.servos[3].speed = 30;
    10f2:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <arm+0x3c>
    10f6:	8f e0       	ldi	r24, 0x0F	; 15
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <arm+0x4e>
	arm.servos[4].speed = 15;
    10fe:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <arm+0x4d>
    1102:	84 e1       	ldi	r24, 0x14	; 20
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <arm+0x5f>
	arm.servos[5].speed = 20;
    110a:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <arm+0x5e>
    110e:	8a e6       	ldi	r24, 0x6A	; 106
    1110:	e8 2e       	mov	r14, r24
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	f8 2e       	mov	r15, r24
    1116:	11 e0       	ldi	r17, 0x01	; 1
    1118:	6f ef       	ldi	r22, 0xFF	; 255
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    111a:	73 e0       	ldi	r23, 0x03	; 3
		setTorqueLimit(i, MAX_TORQUE);
    111c:	81 2f       	mov	r24, r17
    111e:	86 dc       	rcall	.-1780   	; 0xa2c <_Z14setTorqueLimithi>
    1120:	f7 01       	movw	r30, r14
    1122:	15 8e       	std	Z+29, r1	; 0x1d
    1124:	1f 5f       	subi	r17, 0xFF	; 255
		arm.servos[i].turns = 0;
    1126:	f1 e1       	ldi	r31, 0x11	; 17
    1128:	ef 0e       	add	r14, r31
	arm.servos[2].speed = 150;
	arm.servos[3].speed = 30;
	arm.servos[4].speed = 15;
	arm.servos[5].speed = 20;
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
    112a:	f1 1c       	adc	r15, r1
    112c:	16 30       	cpi	r17, 0x06	; 6
    112e:	a1 f7       	brne	.-24     	; 0x1118 <setup+0xbe>
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	8a e5       	ldi	r24, 0x5A	; 90
		setTorqueLimit(i, MAX_TORQUE);
		arm.servos[i].turns = 0;
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
    1136:	93 e0       	ldi	r25, 0x03	; 3
    1138:	0e 94 0d 14 	call	0x281a	; 0x281a <_ZN17LiquidCrystal_I2C9setCursorEhh>
    113c:	6d ef       	ldi	r22, 0xFD	; 253
    113e:	72 e0       	ldi	r23, 0x02	; 2
	lcd.print("sID:");
    1140:	8a e5       	ldi	r24, 0x5A	; 90
    1142:	93 e0       	ldi	r25, 0x03	; 3
    1144:	c9 d7       	rcall	.+3986   	; 0x20d8 <_ZN5Print5printEPKc>
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	60 e0       	ldi	r22, 0x00	; 0
	lcd.setCursor(0,1);
    114a:	8a e5       	ldi	r24, 0x5A	; 90
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	0e 94 0d 14 	call	0x281a	; 0x281a <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1152:	62 e0       	ldi	r22, 0x02	; 2
    1154:	73 e0       	ldi	r23, 0x03	; 3
	lcd.print("deg:");
    1156:	8a e5       	ldi	r24, 0x5A	; 90
    1158:	93 e0       	ldi	r25, 0x03	; 3
    115a:	be d7       	rcall	.+3964   	; 0x20d8 <_ZN5Print5printEPKc>
    115c:	42 e0       	ldi	r20, 0x02	; 2
    115e:	60 e0       	ldi	r22, 0x00	; 0
	lcd.setCursor(0,2);
    1160:	8a e5       	ldi	r24, 0x5A	; 90
    1162:	93 e0       	ldi	r25, 0x03	; 3
    1164:	0e 94 0d 14 	call	0x281a	; 0x281a <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1168:	67 e0       	ldi	r22, 0x07	; 7
    116a:	73 e0       	ldi	r23, 0x03	; 3
	lcd.print("rpm:");
    116c:	8a e5       	ldi	r24, 0x5A	; 90
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	b3 d7       	rcall	.+3942   	; 0x20d8 <_ZN5Print5printEPKc>
    1172:	43 e0       	ldi	r20, 0x03	; 3
    1174:	60 e0       	ldi	r22, 0x00	; 0
	lcd.setCursor(0,3);
    1176:	8a e5       	ldi	r24, 0x5A	; 90
    1178:	93 e0       	ldi	r25, 0x03	; 3
    117a:	0e 94 0d 14 	call	0x281a	; 0x281a <_ZN17LiquidCrystal_I2C9setCursorEhh>
    117e:	6c e0       	ldi	r22, 0x0C	; 12
    1180:	73 e0       	ldi	r23, 0x03	; 3
	lcd.print("ld%:");
    1182:	8a e5       	ldi	r24, 0x5A	; 90
    1184:	93 e0       	ldi	r25, 0x03	; 3
    1186:	a8 d7       	rcall	.+3920   	; 0x20d8 <_ZN5Print5printEPKc>
    1188:	48 e0       	ldi	r20, 0x08	; 8

	readServo(arm.id, 0x18, 8);
    118a:	68 e1       	ldi	r22, 0x18	; 24
    118c:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <arm>
    1190:	ae dd       	rcall	.-1188   	; 0xcee <_Z9readServohhh>
    1192:	1c df       	rcall	.-456    	; 0xfcc <_Z11printBufferv>
	printBuffer();
    1194:	62 e0       	ldi	r22, 0x02	; 2
    1196:	70 e0       	ldi	r23, 0x00	; 0
	delay(2);
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
    11a0:	42 e0       	ldi	r20, 0x02	; 2
    11a2:	64 e4       	ldi	r22, 0x44	; 68
	int somthe = getData(5, MX_CURRENT_L, 2);
    11a4:	85 e0       	ldi	r24, 0x05	; 5
    11a6:	f8 dd       	rcall	.-1040   	; 0xd98 <_Z7getDatahhh>
    11a8:	7c 01       	movw	r14, r24
    11aa:	61 e1       	ldi	r22, 0x11	; 17
    11ac:	73 e0       	ldi	r23, 0x03	; 3
	printSerial("return", somthe);
    11ae:	ce 01       	movw	r24, r28
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN6StringC1EPKc>
    11b6:	b7 01       	movw	r22, r14
    11b8:	ce 01       	movw	r24, r28
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	80 d9       	rcall	.-3328   	; 0x4be <_Z11printSerial6Stringi>
    11be:	ce 01       	movw	r24, r28
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	0e 94 0f 13 	call	0x261e	; 0x261e <_ZN6StringD1Ev>
    11c6:	26 96       	adiw	r28, 0x06	; 6
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
	//printBuffer();
}
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	08 95       	ret

000011de <_Z13updateArmDatav>:
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
void printSerial(String title, int value) {
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
void updateArmData() {
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
	delay(10);
    11ee:	6a e0       	ldi	r22, 0x0A	; 10
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 aa 11 	call	0x2354	; 0x2354 <delay>
	uint8_t temperature;
	uint8_t registered;
	uint8_t moving;
	bool speedDirection, loadDirection;
	uint8_t i = 0;
	int available = Serial1.available();
    11fa:	84 e7       	ldi	r24, 0x74	; 116
    11fc:	94 e0       	ldi	r25, 0x04	; 4
    11fe:	7a d4       	rcall	.+2292   	; 0x1af4 <_ZN14HardwareSerial9availableEv>
	if (available > 0){
    1200:	18 16       	cp	r1, r24
    1202:	19 06       	cpc	r1, r25
    1204:	0c f0       	brlt	.+2      	; 0x1208 <_Z13updateArmDatav+0x2a>
    1206:	e8 c0       	rjmp	.+464    	; 0x13d8 <_Z13updateArmDatav+0x1fa>
		serialReading = YES;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
    120e:	84 e7       	ldi	r24, 0x74	; 116
    1210:	94 e0       	ldi	r25, 0x04	; 4
    1212:	8a d4       	rcall	.+2324   	; 0x1b28 <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
    1214:	8f 3f       	cpi	r24, 0xFF	; 255
    1216:	91 05       	cpc	r25, r1
    1218:	09 f0       	breq	.+2      	; 0x121c <_Z13updateArmDatav+0x3e>
    121a:	de c0       	rjmp	.+444    	; 0x13d8 <_Z13updateArmDatav+0x1fa>
    121c:	84 e7       	ldi	r24, 0x74	; 116
    121e:	94 e0       	ldi	r25, 0x04	; 4
    1220:	83 d4       	rcall	.+2310   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    1222:	8f 3f       	cpi	r24, 0xFF	; 255
    1224:	91 05       	cpc	r25, r1
    1226:	09 f0       	breq	.+2      	; 0x122a <_Z13updateArmDatav+0x4c>
    1228:	d7 c0       	rjmp	.+430    	; 0x13d8 <_Z13updateArmDatav+0x1fa>
			do { servoID = Serial1.read(); } while (servoID == 0xFF); // this make sure you wait for real data
    122a:	84 e7       	ldi	r24, 0x74	; 116
    122c:	94 e0       	ldi	r25, 0x04	; 4
    122e:	7c d4       	rcall	.+2296   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    1230:	ec 01       	movw	r28, r24
    1232:	8f 3f       	cpi	r24, 0xFF	; 255
    1234:	d1 f3       	breq	.-12     	; 0x122a <_Z13updateArmDatav+0x4c>
			msgLength = Serial1.read(); // msg Length
    1236:	84 e7       	ldi	r24, 0x74	; 116
    1238:	94 e0       	ldi	r25, 0x04	; 4
    123a:	76 d4       	rcall	.+2284   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    123c:	18 2f       	mov	r17, r24
			error_byte = Serial1.read();
    123e:	84 e7       	ldi	r24, 0x74	; 116
    1240:	94 e0       	ldi	r25, 0x04	; 4
    1242:	72 d4       	rcall	.+2276   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    1244:	c0 93 6a 03 	sts	0x036A, r28	; 0x80036a <arm>
			arm.id = servoID;
    1248:	dd 27       	eor	r29, r29
    124a:	88 23       	and	r24, r24
			if (error_byte) {
    124c:	89 f0       	breq	.+34     	; 0x1270 <_Z13updateArmDatav+0x92>
    124e:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <error_counter+0x1>
				error_counter = 0;
    1252:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <error_counter>
    1256:	9e 01       	movw	r18, r28
				arm.servos[servoID].lastError = error_byte; // keep old error
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	91 e1       	ldi	r25, 0x11	; 17
    125e:	92 9f       	mul	r25, r18
    1260:	f0 01       	movw	r30, r0
    1262:	93 9f       	mul	r25, r19
    1264:	f0 0d       	add	r31, r0
    1266:	11 24       	eor	r1, r1
    1268:	e6 59       	subi	r30, 0x96	; 150
    126a:	fc 4f       	sbci	r31, 0xFC	; 252
    126c:	80 83       	st	Z, r24
    126e:	83 c0       	rjmp	.+262    	; 0x1376 <_Z13updateArmDatav+0x198>
    1270:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <error_counter>
			} else { // No Error :)
				error_counter++;
    1274:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <error_counter+0x1>
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <error_counter+0x1>
    127e:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <error_counter>
				if (msgLength > 2) {
    1282:	13 30       	cpi	r17, 0x03	; 3
    1284:	08 f4       	brcc	.+2      	; 0x1288 <_Z13updateArmDatav+0xaa>
    1286:	77 c0       	rjmp	.+238    	; 0x1376 <_Z13updateArmDatav+0x198>
					position = Serial1.read();
    1288:	84 e7       	ldi	r24, 0x74	; 116
    128a:	94 e0       	ldi	r25, 0x04	; 4
    128c:	4d d4       	rcall	.+2202   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    128e:	8c 01       	movw	r16, r24
					position = (Serial1.read()<<8) + position;
    1290:	84 e7       	ldi	r24, 0x74	; 116
    1292:	94 e0       	ldi	r25, 0x04	; 4
    1294:	49 d4       	rcall	.+2194   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	38 2f       	mov	r19, r24
    129c:	02 0f       	add	r16, r18
    129e:	13 1f       	adc	r17, r19
    12a0:	81 e1       	ldi	r24, 0x11	; 17
					/* Tracking the Turns */
					if (arm.servos[servoID].speedDirection){
    12a2:	8c 9f       	mul	r24, r28
    12a4:	f0 01       	movw	r30, r0
    12a6:	8d 9f       	mul	r24, r29
    12a8:	f0 0d       	add	r31, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	e6 59       	subi	r30, 0x96	; 150
    12ae:	fc 4f       	sbci	r31, 0xFC	; 252
    12b0:	83 85       	ldd	r24, Z+11	; 0x0b
    12b2:	24 81       	ldd	r18, Z+4	; 0x04
    12b4:	35 81       	ldd	r19, Z+5	; 0x05
    12b6:	94 85       	ldd	r25, Z+12	; 0x0c
    12b8:	88 23       	and	r24, r24
    12ba:	41 f0       	breq	.+16     	; 0x12cc <_Z13updateArmDatav+0xee>
    12bc:	a8 01       	movw	r20, r16
						arm.servos[servoID].turns = (arm.servos[servoID].position > (position+100))
							? arm.servos[servoID].turns + 1
							: arm.servos[servoID].turns;
    12be:	4c 59       	subi	r20, 0x9C	; 156
    12c0:	5f 4f       	sbci	r21, 0xFF	; 255
    12c2:	42 17       	cp	r20, r18
    12c4:	53 07       	cpc	r21, r19
    12c6:	44 f4       	brge	.+16     	; 0x12d8 <_Z13updateArmDatav+0xfa>
    12c8:	9f 5f       	subi	r25, 0xFF	; 255
    12ca:	06 c0       	rjmp	.+12     	; 0x12d8 <_Z13updateArmDatav+0xfa>
    12cc:	2c 59       	subi	r18, 0x9C	; 156
					} else {
						arm.servos[servoID].turns = ((arm.servos[servoID].position+100) < position)
							? arm.servos[servoID].turns - 1
							: arm.servos[servoID].turns;
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	20 17       	cp	r18, r16
    12d2:	31 07       	cpc	r19, r17
    12d4:	0c f4       	brge	.+2      	; 0x12d8 <_Z13updateArmDatav+0xfa>
    12d6:	91 50       	subi	r25, 0x01	; 1
    12d8:	81 e1       	ldi	r24, 0x11	; 17
    12da:	8c 9f       	mul	r24, r28
    12dc:	f0 01       	movw	r30, r0
    12de:	8d 9f       	mul	r24, r29
    12e0:	f0 0d       	add	r31, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	e6 59       	subi	r30, 0x96	; 150
    12e6:	fc 4f       	sbci	r31, 0xFC	; 252
					}
					speed = Serial1.read();
    12e8:	94 87       	std	Z+12, r25	; 0x0c
    12ea:	84 e7       	ldi	r24, 0x74	; 116
    12ec:	94 e0       	ldi	r25, 0x04	; 4
    12ee:	1c d4       	rcall	.+2104   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    12f0:	6c 01       	movw	r12, r24
					speed = (Serial1.read()<<8) + speed;
    12f2:	84 e7       	ldi	r24, 0x74	; 116
    12f4:	94 e0       	ldi	r25, 0x04	; 4
    12f6:	18 d4       	rcall	.+2096   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	38 2f       	mov	r19, r24
    12fe:	c2 0e       	add	r12, r18
					load = Serial1.read();
    1300:	d3 1e       	adc	r13, r19
    1302:	84 e7       	ldi	r24, 0x74	; 116
    1304:	94 e0       	ldi	r25, 0x04	; 4
    1306:	10 d4       	rcall	.+2080   	; 0x1b28 <_ZN14HardwareSerial4readEv>
					load = (Serial1.read()<<8) + load;
    1308:	7c 01       	movw	r14, r24
    130a:	84 e7       	ldi	r24, 0x74	; 116
    130c:	94 e0       	ldi	r25, 0x04	; 4
    130e:	0c d4       	rcall	.+2072   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	38 2f       	mov	r19, r24
					voltage = Serial1.read();
    1316:	e2 0e       	add	r14, r18
    1318:	f3 1e       	adc	r15, r19
    131a:	84 e7       	ldi	r24, 0x74	; 116
    131c:	94 e0       	ldi	r25, 0x04	; 4
					temperature = Serial1.read();
    131e:	04 d4       	rcall	.+2056   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    1320:	84 e7       	ldi	r24, 0x74	; 116
    1322:	94 e0       	ldi	r25, 0x04	; 4
    1324:	01 d4       	rcall	.+2050   	; 0x1b28 <_ZN14HardwareSerial4readEv>
					registered = Serial1.read();
    1326:	84 e7       	ldi	r24, 0x74	; 116
    1328:	94 e0       	ldi	r25, 0x04	; 4
    132a:	fe d3       	rcall	.+2044   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    132c:	84 e7       	ldi	r24, 0x74	; 116
					moving = Serial1.read();
    132e:	94 e0       	ldi	r25, 0x04	; 4
    1330:	fb d3       	rcall	.+2038   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    1332:	c1 14       	cp	r12, r1
    1334:	24 e0       	ldi	r18, 0x04	; 4
					
					if (speed > 0x3FF) {
    1336:	d2 06       	cpc	r13, r18
    1338:	24 f0       	brlt	.+8      	; 0x1342 <_Z13updateArmDatav+0x164>
    133a:	84 e0       	ldi	r24, 0x04	; 4
    133c:	d8 1a       	sub	r13, r24
						speedDirection = CW;
						speed = speed - 0x400;
    133e:	91 e0       	ldi	r25, 0x01	; 1
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <_Z13updateArmDatav+0x166>
					temperature = Serial1.read();
					registered = Serial1.read();
					moving = Serial1.read();
					
					if (speed > 0x3FF) {
						speedDirection = CW;
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	e1 14       	cp	r14, r1
						speed = speed - 0x400;
					} else { speedDirection = CCW; }
    1346:	24 e0       	ldi	r18, 0x04	; 4
						
					if (load > 0x3FF) {
    1348:	f2 06       	cpc	r15, r18
    134a:	24 f0       	brlt	.+8      	; 0x1354 <_Z13updateArmDatav+0x176>
    134c:	84 e0       	ldi	r24, 0x04	; 4
    134e:	f8 1a       	sub	r15, r24
						loadDirection = CW;
						load = load - 0x400;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <_Z13updateArmDatav+0x178>
						speedDirection = CW;
						speed = speed - 0x400;
					} else { speedDirection = CCW; }
						
					if (load > 0x3FF) {
						loadDirection = CW;
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	21 e1       	ldi	r18, 0x11	; 17
						load = load - 0x400;
					} else { loadDirection = CCW; }
    1358:	2c 9f       	mul	r18, r28
						
					/* Update the Arm Object */
					arm.servos[servoID].position = position;
    135a:	f0 01       	movw	r30, r0
    135c:	2d 9f       	mul	r18, r29
    135e:	f0 0d       	add	r31, r0
    1360:	11 24       	eor	r1, r1
    1362:	e6 59       	subi	r30, 0x96	; 150
    1364:	fc 4f       	sbci	r31, 0xFC	; 252
    1366:	15 83       	std	Z+5, r17	; 0x05
    1368:	04 83       	std	Z+4, r16	; 0x04
    136a:	d2 86       	std	Z+10, r13	; 0x0a
    136c:	c1 86       	std	Z+9, r12	; 0x09
					arm.servos[servoID].speed = speed;
    136e:	93 87       	std	Z+11, r25	; 0x0b
    1370:	f6 86       	std	Z+14, r15	; 0x0e
					arm.servos[servoID].speedDirection = speedDirection;
    1372:	e5 86       	std	Z+13, r14	; 0x0d
					arm.servos[servoID].load = load;
    1374:	87 87       	std	Z+15, r24	; 0x0f
    1376:	81 e1       	ldi	r24, 0x11	; 17
					arm.servos[servoID].loadDirection = loadDirection;
    1378:	8c 9f       	mul	r24, r28
				}
			}
			arm.servos[servoID].showError = error_counter < 25 ? YES : NO;
    137a:	f0 01       	movw	r30, r0
    137c:	8d 9f       	mul	r24, r29
    137e:	f0 0d       	add	r31, r0
    1380:	11 24       	eor	r1, r1
    1382:	e6 59       	subi	r30, 0x96	; 150
    1384:	fc 4f       	sbci	r31, 0xFC	; 252
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <error_counter>
    138c:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <error_counter+0x1>
    1390:	29 31       	cpi	r18, 0x19	; 25
    1392:	31 05       	cpc	r19, r1
    1394:	0c f0       	brlt	.+2      	; 0x1398 <_Z13updateArmDatav+0x1ba>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	80 8b       	std	Z+16, r24	; 0x10
			while(Serial1.available() > 0) { Serial1.read(); }
    139a:	84 e7       	ldi	r24, 0x74	; 116
    139c:	94 e0       	ldi	r25, 0x04	; 4
    139e:	aa d3       	rcall	.+1876   	; 0x1af4 <_ZN14HardwareSerial9availableEv>
    13a0:	18 16       	cp	r1, r24
    13a2:	19 06       	cpc	r1, r25
    13a4:	24 f4       	brge	.+8      	; 0x13ae <_Z13updateArmDatav+0x1d0>
    13a6:	84 e7       	ldi	r24, 0x74	; 116
    13a8:	94 e0       	ldi	r25, 0x04	; 4
    13aa:	be d3       	rcall	.+1916   	; 0x1b28 <_ZN14HardwareSerial4readEv>
    13ac:	f6 cf       	rjmp	.-20     	; 0x139a <_Z13updateArmDatav+0x1bc>
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	70 e0       	ldi	r23, 0x00	; 0
			delay(1);
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	ce d7       	rcall	.+3996   	; 0x2354 <delay>
    13b8:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <cycle_counter>
    13bc:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <cycle_counter+0x1>
			cycle_counter = cycle_counter > 999 ? 0 : cycle_counter + 1;
    13c0:	88 3e       	cpi	r24, 0xE8	; 232
    13c2:	23 e0       	ldi	r18, 0x03	; 3
    13c4:	92 07       	cpc	r25, r18
    13c6:	14 f4       	brge	.+4      	; 0x13cc <_Z13updateArmDatav+0x1ee>
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <_Z13updateArmDatav+0x1f2>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <cycle_counter+0x1>
    13d4:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <cycle_counter>
    13d8:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
    13dc:	df 91       	pop	r29
		}
	}
	serialReading = NO;
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
}
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	08 95       	ret

000013ee <loop>:
    13ee:	42 e2       	ldi	r20, 0x22	; 34
    13f0:	64 e2       	ldi	r22, 0x24	; 36
    13f2:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <arm>
/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {

	readServo(arm.id, 0x24, 34);
    13f6:	7b dc       	rcall	.-1802   	; 0xcee <_Z9readServohhh>
	updateArmData();
    13f8:	f2 de       	rcall	.-540    	; 0x11de <_Z13updateArmDatav>
	printArmDataLCD();
    13fa:	09 c9       	rjmp	.-3566   	; 0x60e <_Z15printArmDataLCDv>

000013fc <__subsf3>:
    13fc:	50 58       	subi	r21, 0x80	; 128

000013fe <__addsf3>:
    13fe:	bb 27       	eor	r27, r27
    1400:	aa 27       	eor	r26, r26
    1402:	0e d0       	rcall	.+28     	; 0x1420 <__addsf3x>
    1404:	0d c1       	rjmp	.+538    	; 0x1620 <__fp_round>
    1406:	fe d0       	rcall	.+508    	; 0x1604 <__fp_pscA>
    1408:	30 f0       	brcs	.+12     	; 0x1416 <__addsf3+0x18>
    140a:	03 d1       	rcall	.+518    	; 0x1612 <__fp_pscB>
    140c:	20 f0       	brcs	.+8      	; 0x1416 <__addsf3+0x18>
    140e:	31 f4       	brne	.+12     	; 0x141c <__addsf3+0x1e>
    1410:	9f 3f       	cpi	r25, 0xFF	; 255
    1412:	11 f4       	brne	.+4      	; 0x1418 <__addsf3+0x1a>
    1414:	1e f4       	brtc	.+6      	; 0x141c <__addsf3+0x1e>
    1416:	f3 c0       	rjmp	.+486    	; 0x15fe <__fp_nan>
    1418:	0e f4       	brtc	.+2      	; 0x141c <__addsf3+0x1e>
    141a:	e0 95       	com	r30
    141c:	e7 fb       	bst	r30, 7
    141e:	e9 c0       	rjmp	.+466    	; 0x15f2 <__fp_inf>

00001420 <__addsf3x>:
    1420:	e9 2f       	mov	r30, r25
    1422:	0f d1       	rcall	.+542    	; 0x1642 <__fp_split3>
    1424:	80 f3       	brcs	.-32     	; 0x1406 <__addsf3+0x8>
    1426:	ba 17       	cp	r27, r26
    1428:	62 07       	cpc	r22, r18
    142a:	73 07       	cpc	r23, r19
    142c:	84 07       	cpc	r24, r20
    142e:	95 07       	cpc	r25, r21
    1430:	18 f0       	brcs	.+6      	; 0x1438 <__addsf3x+0x18>
    1432:	71 f4       	brne	.+28     	; 0x1450 <__addsf3x+0x30>
    1434:	9e f5       	brtc	.+102    	; 0x149c <__addsf3x+0x7c>
    1436:	27 c1       	rjmp	.+590    	; 0x1686 <__fp_zero>
    1438:	0e f4       	brtc	.+2      	; 0x143c <__addsf3x+0x1c>
    143a:	e0 95       	com	r30
    143c:	0b 2e       	mov	r0, r27
    143e:	ba 2f       	mov	r27, r26
    1440:	a0 2d       	mov	r26, r0
    1442:	0b 01       	movw	r0, r22
    1444:	b9 01       	movw	r22, r18
    1446:	90 01       	movw	r18, r0
    1448:	0c 01       	movw	r0, r24
    144a:	ca 01       	movw	r24, r20
    144c:	a0 01       	movw	r20, r0
    144e:	11 24       	eor	r1, r1
    1450:	ff 27       	eor	r31, r31
    1452:	59 1b       	sub	r21, r25
    1454:	99 f0       	breq	.+38     	; 0x147c <__addsf3x+0x5c>
    1456:	59 3f       	cpi	r21, 0xF9	; 249
    1458:	50 f4       	brcc	.+20     	; 0x146e <__addsf3x+0x4e>
    145a:	50 3e       	cpi	r21, 0xE0	; 224
    145c:	68 f1       	brcs	.+90     	; 0x14b8 <__addsf3x+0x98>
    145e:	1a 16       	cp	r1, r26
    1460:	f0 40       	sbci	r31, 0x00	; 0
    1462:	a2 2f       	mov	r26, r18
    1464:	23 2f       	mov	r18, r19
    1466:	34 2f       	mov	r19, r20
    1468:	44 27       	eor	r20, r20
    146a:	58 5f       	subi	r21, 0xF8	; 248
    146c:	f3 cf       	rjmp	.-26     	; 0x1454 <__addsf3x+0x34>
    146e:	46 95       	lsr	r20
    1470:	37 95       	ror	r19
    1472:	27 95       	ror	r18
    1474:	a7 95       	ror	r26
    1476:	f0 40       	sbci	r31, 0x00	; 0
    1478:	53 95       	inc	r21
    147a:	c9 f7       	brne	.-14     	; 0x146e <__addsf3x+0x4e>
    147c:	7e f4       	brtc	.+30     	; 0x149c <__addsf3x+0x7c>
    147e:	1f 16       	cp	r1, r31
    1480:	ba 0b       	sbc	r27, r26
    1482:	62 0b       	sbc	r22, r18
    1484:	73 0b       	sbc	r23, r19
    1486:	84 0b       	sbc	r24, r20
    1488:	ba f0       	brmi	.+46     	; 0x14b8 <__addsf3x+0x98>
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	a1 f0       	breq	.+40     	; 0x14b6 <__addsf3x+0x96>
    148e:	ff 0f       	add	r31, r31
    1490:	bb 1f       	adc	r27, r27
    1492:	66 1f       	adc	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	88 1f       	adc	r24, r24
    1498:	c2 f7       	brpl	.-16     	; 0x148a <__addsf3x+0x6a>
    149a:	0e c0       	rjmp	.+28     	; 0x14b8 <__addsf3x+0x98>
    149c:	ba 0f       	add	r27, r26
    149e:	62 1f       	adc	r22, r18
    14a0:	73 1f       	adc	r23, r19
    14a2:	84 1f       	adc	r24, r20
    14a4:	48 f4       	brcc	.+18     	; 0x14b8 <__addsf3x+0x98>
    14a6:	87 95       	ror	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	b7 95       	ror	r27
    14ae:	f7 95       	ror	r31
    14b0:	9e 3f       	cpi	r25, 0xFE	; 254
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <__addsf3x+0x96>
    14b4:	b3 cf       	rjmp	.-154    	; 0x141c <__addsf3+0x1e>
    14b6:	93 95       	inc	r25
    14b8:	88 0f       	add	r24, r24
    14ba:	08 f0       	brcs	.+2      	; 0x14be <__addsf3x+0x9e>
    14bc:	99 27       	eor	r25, r25
    14be:	ee 0f       	add	r30, r30
    14c0:	97 95       	ror	r25
    14c2:	87 95       	ror	r24
    14c4:	08 95       	ret

000014c6 <__cmpsf2>:
    14c6:	71 d0       	rcall	.+226    	; 0x15aa <__fp_cmp>
    14c8:	08 f4       	brcc	.+2      	; 0x14cc <__cmpsf2+0x6>
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	08 95       	ret

000014ce <__fixsfsi>:
    14ce:	04 d0       	rcall	.+8      	; 0x14d8 <__fixunssfsi>
    14d0:	68 94       	set
    14d2:	b1 11       	cpse	r27, r1
    14d4:	d9 c0       	rjmp	.+434    	; 0x1688 <__fp_szero>
    14d6:	08 95       	ret

000014d8 <__fixunssfsi>:
    14d8:	bc d0       	rcall	.+376    	; 0x1652 <__fp_splitA>
    14da:	88 f0       	brcs	.+34     	; 0x14fe <__fixunssfsi+0x26>
    14dc:	9f 57       	subi	r25, 0x7F	; 127
    14de:	90 f0       	brcs	.+36     	; 0x1504 <__fixunssfsi+0x2c>
    14e0:	b9 2f       	mov	r27, r25
    14e2:	99 27       	eor	r25, r25
    14e4:	b7 51       	subi	r27, 0x17	; 23
    14e6:	a0 f0       	brcs	.+40     	; 0x1510 <__fixunssfsi+0x38>
    14e8:	d1 f0       	breq	.+52     	; 0x151e <__fixunssfsi+0x46>
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	1a f0       	brmi	.+6      	; 0x14fa <__fixunssfsi+0x22>
    14f4:	ba 95       	dec	r27
    14f6:	c9 f7       	brne	.-14     	; 0x14ea <__fixunssfsi+0x12>
    14f8:	12 c0       	rjmp	.+36     	; 0x151e <__fixunssfsi+0x46>
    14fa:	b1 30       	cpi	r27, 0x01	; 1
    14fc:	81 f0       	breq	.+32     	; 0x151e <__fixunssfsi+0x46>
    14fe:	c3 d0       	rcall	.+390    	; 0x1686 <__fp_zero>
    1500:	b1 e0       	ldi	r27, 0x01	; 1
    1502:	08 95       	ret
    1504:	c0 c0       	rjmp	.+384    	; 0x1686 <__fp_zero>
    1506:	67 2f       	mov	r22, r23
    1508:	78 2f       	mov	r23, r24
    150a:	88 27       	eor	r24, r24
    150c:	b8 5f       	subi	r27, 0xF8	; 248
    150e:	39 f0       	breq	.+14     	; 0x151e <__fixunssfsi+0x46>
    1510:	b9 3f       	cpi	r27, 0xF9	; 249
    1512:	cc f3       	brlt	.-14     	; 0x1506 <__fixunssfsi+0x2e>
    1514:	86 95       	lsr	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	b3 95       	inc	r27
    151c:	d9 f7       	brne	.-10     	; 0x1514 <__fixunssfsi+0x3c>
    151e:	3e f4       	brtc	.+14     	; 0x152e <__fixunssfsi+0x56>
    1520:	90 95       	com	r25
    1522:	80 95       	com	r24
    1524:	70 95       	com	r23
    1526:	61 95       	neg	r22
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	8f 4f       	sbci	r24, 0xFF	; 255
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	08 95       	ret

00001530 <__floatunsisf>:
    1530:	e8 94       	clt
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <__floatsisf+0x12>

00001534 <__floatsisf>:
    1534:	97 fb       	bst	r25, 7
    1536:	3e f4       	brtc	.+14     	; 0x1546 <__floatsisf+0x12>
    1538:	90 95       	com	r25
    153a:	80 95       	com	r24
    153c:	70 95       	com	r23
    153e:	61 95       	neg	r22
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	8f 4f       	sbci	r24, 0xFF	; 255
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	99 23       	and	r25, r25
    1548:	a9 f0       	breq	.+42     	; 0x1574 <__floatsisf+0x40>
    154a:	f9 2f       	mov	r31, r25
    154c:	96 e9       	ldi	r25, 0x96	; 150
    154e:	bb 27       	eor	r27, r27
    1550:	93 95       	inc	r25
    1552:	f6 95       	lsr	r31
    1554:	87 95       	ror	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f1 11       	cpse	r31, r1
    155e:	f8 cf       	rjmp	.-16     	; 0x1550 <__floatsisf+0x1c>
    1560:	fa f4       	brpl	.+62     	; 0x15a0 <__floatsisf+0x6c>
    1562:	bb 0f       	add	r27, r27
    1564:	11 f4       	brne	.+4      	; 0x156a <__floatsisf+0x36>
    1566:	60 ff       	sbrs	r22, 0
    1568:	1b c0       	rjmp	.+54     	; 0x15a0 <__floatsisf+0x6c>
    156a:	6f 5f       	subi	r22, 0xFF	; 255
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	8f 4f       	sbci	r24, 0xFF	; 255
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	16 c0       	rjmp	.+44     	; 0x15a0 <__floatsisf+0x6c>
    1574:	88 23       	and	r24, r24
    1576:	11 f0       	breq	.+4      	; 0x157c <__floatsisf+0x48>
    1578:	96 e9       	ldi	r25, 0x96	; 150
    157a:	11 c0       	rjmp	.+34     	; 0x159e <__floatsisf+0x6a>
    157c:	77 23       	and	r23, r23
    157e:	21 f0       	breq	.+8      	; 0x1588 <__floatsisf+0x54>
    1580:	9e e8       	ldi	r25, 0x8E	; 142
    1582:	87 2f       	mov	r24, r23
    1584:	76 2f       	mov	r23, r22
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <__floatsisf+0x5e>
    1588:	66 23       	and	r22, r22
    158a:	71 f0       	breq	.+28     	; 0x15a8 <__floatsisf+0x74>
    158c:	96 e8       	ldi	r25, 0x86	; 134
    158e:	86 2f       	mov	r24, r22
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	2a f0       	brmi	.+10     	; 0x15a0 <__floatsisf+0x6c>
    1596:	9a 95       	dec	r25
    1598:	66 0f       	add	r22, r22
    159a:	77 1f       	adc	r23, r23
    159c:	88 1f       	adc	r24, r24
    159e:	da f7       	brpl	.-10     	; 0x1596 <__floatsisf+0x62>
    15a0:	88 0f       	add	r24, r24
    15a2:	96 95       	lsr	r25
    15a4:	87 95       	ror	r24
    15a6:	97 f9       	bld	r25, 7
    15a8:	08 95       	ret

000015aa <__fp_cmp>:
    15aa:	99 0f       	add	r25, r25
    15ac:	00 08       	sbc	r0, r0
    15ae:	55 0f       	add	r21, r21
    15b0:	aa 0b       	sbc	r26, r26
    15b2:	e0 e8       	ldi	r30, 0x80	; 128
    15b4:	fe ef       	ldi	r31, 0xFE	; 254
    15b6:	16 16       	cp	r1, r22
    15b8:	17 06       	cpc	r1, r23
    15ba:	e8 07       	cpc	r30, r24
    15bc:	f9 07       	cpc	r31, r25
    15be:	c0 f0       	brcs	.+48     	; 0x15f0 <__fp_cmp+0x46>
    15c0:	12 16       	cp	r1, r18
    15c2:	13 06       	cpc	r1, r19
    15c4:	e4 07       	cpc	r30, r20
    15c6:	f5 07       	cpc	r31, r21
    15c8:	98 f0       	brcs	.+38     	; 0x15f0 <__fp_cmp+0x46>
    15ca:	62 1b       	sub	r22, r18
    15cc:	73 0b       	sbc	r23, r19
    15ce:	84 0b       	sbc	r24, r20
    15d0:	95 0b       	sbc	r25, r21
    15d2:	39 f4       	brne	.+14     	; 0x15e2 <__fp_cmp+0x38>
    15d4:	0a 26       	eor	r0, r26
    15d6:	61 f0       	breq	.+24     	; 0x15f0 <__fp_cmp+0x46>
    15d8:	23 2b       	or	r18, r19
    15da:	24 2b       	or	r18, r20
    15dc:	25 2b       	or	r18, r21
    15de:	21 f4       	brne	.+8      	; 0x15e8 <__fp_cmp+0x3e>
    15e0:	08 95       	ret
    15e2:	0a 26       	eor	r0, r26
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <__fp_cmp+0x3e>
    15e6:	a1 40       	sbci	r26, 0x01	; 1
    15e8:	a6 95       	lsr	r26
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	81 1d       	adc	r24, r1
    15ee:	81 1d       	adc	r24, r1
    15f0:	08 95       	ret

000015f2 <__fp_inf>:
    15f2:	97 f9       	bld	r25, 7
    15f4:	9f 67       	ori	r25, 0x7F	; 127
    15f6:	80 e8       	ldi	r24, 0x80	; 128
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	08 95       	ret

000015fe <__fp_nan>:
    15fe:	9f ef       	ldi	r25, 0xFF	; 255
    1600:	80 ec       	ldi	r24, 0xC0	; 192
    1602:	08 95       	ret

00001604 <__fp_pscA>:
    1604:	00 24       	eor	r0, r0
    1606:	0a 94       	dec	r0
    1608:	16 16       	cp	r1, r22
    160a:	17 06       	cpc	r1, r23
    160c:	18 06       	cpc	r1, r24
    160e:	09 06       	cpc	r0, r25
    1610:	08 95       	ret

00001612 <__fp_pscB>:
    1612:	00 24       	eor	r0, r0
    1614:	0a 94       	dec	r0
    1616:	12 16       	cp	r1, r18
    1618:	13 06       	cpc	r1, r19
    161a:	14 06       	cpc	r1, r20
    161c:	05 06       	cpc	r0, r21
    161e:	08 95       	ret

00001620 <__fp_round>:
    1620:	09 2e       	mov	r0, r25
    1622:	03 94       	inc	r0
    1624:	00 0c       	add	r0, r0
    1626:	11 f4       	brne	.+4      	; 0x162c <__fp_round+0xc>
    1628:	88 23       	and	r24, r24
    162a:	52 f0       	brmi	.+20     	; 0x1640 <__fp_round+0x20>
    162c:	bb 0f       	add	r27, r27
    162e:	40 f4       	brcc	.+16     	; 0x1640 <__fp_round+0x20>
    1630:	bf 2b       	or	r27, r31
    1632:	11 f4       	brne	.+4      	; 0x1638 <__fp_round+0x18>
    1634:	60 ff       	sbrs	r22, 0
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <__fp_round+0x20>
    1638:	6f 5f       	subi	r22, 0xFF	; 255
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	8f 4f       	sbci	r24, 0xFF	; 255
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	08 95       	ret

00001642 <__fp_split3>:
    1642:	57 fd       	sbrc	r21, 7
    1644:	90 58       	subi	r25, 0x80	; 128
    1646:	44 0f       	add	r20, r20
    1648:	55 1f       	adc	r21, r21
    164a:	59 f0       	breq	.+22     	; 0x1662 <__fp_splitA+0x10>
    164c:	5f 3f       	cpi	r21, 0xFF	; 255
    164e:	71 f0       	breq	.+28     	; 0x166c <__fp_splitA+0x1a>
    1650:	47 95       	ror	r20

00001652 <__fp_splitA>:
    1652:	88 0f       	add	r24, r24
    1654:	97 fb       	bst	r25, 7
    1656:	99 1f       	adc	r25, r25
    1658:	61 f0       	breq	.+24     	; 0x1672 <__fp_splitA+0x20>
    165a:	9f 3f       	cpi	r25, 0xFF	; 255
    165c:	79 f0       	breq	.+30     	; 0x167c <__fp_splitA+0x2a>
    165e:	87 95       	ror	r24
    1660:	08 95       	ret
    1662:	12 16       	cp	r1, r18
    1664:	13 06       	cpc	r1, r19
    1666:	14 06       	cpc	r1, r20
    1668:	55 1f       	adc	r21, r21
    166a:	f2 cf       	rjmp	.-28     	; 0x1650 <__fp_split3+0xe>
    166c:	46 95       	lsr	r20
    166e:	f1 df       	rcall	.-30     	; 0x1652 <__fp_splitA>
    1670:	08 c0       	rjmp	.+16     	; 0x1682 <__fp_splitA+0x30>
    1672:	16 16       	cp	r1, r22
    1674:	17 06       	cpc	r1, r23
    1676:	18 06       	cpc	r1, r24
    1678:	99 1f       	adc	r25, r25
    167a:	f1 cf       	rjmp	.-30     	; 0x165e <__fp_splitA+0xc>
    167c:	86 95       	lsr	r24
    167e:	71 05       	cpc	r23, r1
    1680:	61 05       	cpc	r22, r1
    1682:	08 94       	sec
    1684:	08 95       	ret

00001686 <__fp_zero>:
    1686:	e8 94       	clt

00001688 <__fp_szero>:
    1688:	bb 27       	eor	r27, r27
    168a:	66 27       	eor	r22, r22
    168c:	77 27       	eor	r23, r23
    168e:	cb 01       	movw	r24, r22
    1690:	97 f9       	bld	r25, 7
    1692:	08 95       	ret

00001694 <__mulsf3>:
    1694:	0b d0       	rcall	.+22     	; 0x16ac <__mulsf3x>
    1696:	c4 cf       	rjmp	.-120    	; 0x1620 <__fp_round>
    1698:	b5 df       	rcall	.-150    	; 0x1604 <__fp_pscA>
    169a:	28 f0       	brcs	.+10     	; 0x16a6 <__mulsf3+0x12>
    169c:	ba df       	rcall	.-140    	; 0x1612 <__fp_pscB>
    169e:	18 f0       	brcs	.+6      	; 0x16a6 <__mulsf3+0x12>
    16a0:	95 23       	and	r25, r21
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <__mulsf3+0x12>
    16a4:	a6 cf       	rjmp	.-180    	; 0x15f2 <__fp_inf>
    16a6:	ab cf       	rjmp	.-170    	; 0x15fe <__fp_nan>
    16a8:	11 24       	eor	r1, r1
    16aa:	ee cf       	rjmp	.-36     	; 0x1688 <__fp_szero>

000016ac <__mulsf3x>:
    16ac:	ca df       	rcall	.-108    	; 0x1642 <__fp_split3>
    16ae:	a0 f3       	brcs	.-24     	; 0x1698 <__mulsf3+0x4>

000016b0 <__mulsf3_pse>:
    16b0:	95 9f       	mul	r25, r21
    16b2:	d1 f3       	breq	.-12     	; 0x16a8 <__mulsf3+0x14>
    16b4:	95 0f       	add	r25, r21
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	55 1f       	adc	r21, r21
    16ba:	62 9f       	mul	r22, r18
    16bc:	f0 01       	movw	r30, r0
    16be:	72 9f       	mul	r23, r18
    16c0:	bb 27       	eor	r27, r27
    16c2:	f0 0d       	add	r31, r0
    16c4:	b1 1d       	adc	r27, r1
    16c6:	63 9f       	mul	r22, r19
    16c8:	aa 27       	eor	r26, r26
    16ca:	f0 0d       	add	r31, r0
    16cc:	b1 1d       	adc	r27, r1
    16ce:	aa 1f       	adc	r26, r26
    16d0:	64 9f       	mul	r22, r20
    16d2:	66 27       	eor	r22, r22
    16d4:	b0 0d       	add	r27, r0
    16d6:	a1 1d       	adc	r26, r1
    16d8:	66 1f       	adc	r22, r22
    16da:	82 9f       	mul	r24, r18
    16dc:	22 27       	eor	r18, r18
    16de:	b0 0d       	add	r27, r0
    16e0:	a1 1d       	adc	r26, r1
    16e2:	62 1f       	adc	r22, r18
    16e4:	73 9f       	mul	r23, r19
    16e6:	b0 0d       	add	r27, r0
    16e8:	a1 1d       	adc	r26, r1
    16ea:	62 1f       	adc	r22, r18
    16ec:	83 9f       	mul	r24, r19
    16ee:	a0 0d       	add	r26, r0
    16f0:	61 1d       	adc	r22, r1
    16f2:	22 1f       	adc	r18, r18
    16f4:	74 9f       	mul	r23, r20
    16f6:	33 27       	eor	r19, r19
    16f8:	a0 0d       	add	r26, r0
    16fa:	61 1d       	adc	r22, r1
    16fc:	23 1f       	adc	r18, r19
    16fe:	84 9f       	mul	r24, r20
    1700:	60 0d       	add	r22, r0
    1702:	21 1d       	adc	r18, r1
    1704:	82 2f       	mov	r24, r18
    1706:	76 2f       	mov	r23, r22
    1708:	6a 2f       	mov	r22, r26
    170a:	11 24       	eor	r1, r1
    170c:	9f 57       	subi	r25, 0x7F	; 127
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	8a f0       	brmi	.+34     	; 0x1734 <__mulsf3_pse+0x84>
    1712:	e1 f0       	breq	.+56     	; 0x174c <__mulsf3_pse+0x9c>
    1714:	88 23       	and	r24, r24
    1716:	4a f0       	brmi	.+18     	; 0x172a <__mulsf3_pse+0x7a>
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	bb 1f       	adc	r27, r27
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	a9 f7       	brne	.-22     	; 0x1714 <__mulsf3_pse+0x64>
    172a:	9e 3f       	cpi	r25, 0xFE	; 254
    172c:	51 05       	cpc	r21, r1
    172e:	70 f0       	brcs	.+28     	; 0x174c <__mulsf3_pse+0x9c>
    1730:	60 cf       	rjmp	.-320    	; 0x15f2 <__fp_inf>
    1732:	aa cf       	rjmp	.-172    	; 0x1688 <__fp_szero>
    1734:	5f 3f       	cpi	r21, 0xFF	; 255
    1736:	ec f3       	brlt	.-6      	; 0x1732 <__mulsf3_pse+0x82>
    1738:	98 3e       	cpi	r25, 0xE8	; 232
    173a:	dc f3       	brlt	.-10     	; 0x1732 <__mulsf3_pse+0x82>
    173c:	86 95       	lsr	r24
    173e:	77 95       	ror	r23
    1740:	67 95       	ror	r22
    1742:	b7 95       	ror	r27
    1744:	f7 95       	ror	r31
    1746:	e7 95       	ror	r30
    1748:	9f 5f       	subi	r25, 0xFF	; 255
    174a:	c1 f7       	brne	.-16     	; 0x173c <__mulsf3_pse+0x8c>
    174c:	fe 2b       	or	r31, r30
    174e:	88 0f       	add	r24, r24
    1750:	91 1d       	adc	r25, r1
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	97 f9       	bld	r25, 7
    1758:	08 95       	ret

0000175a <pow>:
    175a:	fa 01       	movw	r30, r20
    175c:	ee 0f       	add	r30, r30
    175e:	ff 1f       	adc	r31, r31
    1760:	30 96       	adiw	r30, 0x00	; 0
    1762:	21 05       	cpc	r18, r1
    1764:	31 05       	cpc	r19, r1
    1766:	99 f1       	breq	.+102    	; 0x17ce <pow+0x74>
    1768:	61 15       	cp	r22, r1
    176a:	71 05       	cpc	r23, r1
    176c:	61 f4       	brne	.+24     	; 0x1786 <pow+0x2c>
    176e:	80 38       	cpi	r24, 0x80	; 128
    1770:	bf e3       	ldi	r27, 0x3F	; 63
    1772:	9b 07       	cpc	r25, r27
    1774:	49 f1       	breq	.+82     	; 0x17c8 <pow+0x6e>
    1776:	68 94       	set
    1778:	90 38       	cpi	r25, 0x80	; 128
    177a:	81 05       	cpc	r24, r1
    177c:	61 f0       	breq	.+24     	; 0x1796 <pow+0x3c>
    177e:	80 38       	cpi	r24, 0x80	; 128
    1780:	bf ef       	ldi	r27, 0xFF	; 255
    1782:	9b 07       	cpc	r25, r27
    1784:	41 f0       	breq	.+16     	; 0x1796 <pow+0x3c>
    1786:	99 23       	and	r25, r25
    1788:	42 f5       	brpl	.+80     	; 0x17da <pow+0x80>
    178a:	ff 3f       	cpi	r31, 0xFF	; 255
    178c:	e1 05       	cpc	r30, r1
    178e:	31 05       	cpc	r19, r1
    1790:	21 05       	cpc	r18, r1
    1792:	11 f1       	breq	.+68     	; 0x17d8 <pow+0x7e>
    1794:	e8 94       	clt
    1796:	08 94       	sec
    1798:	e7 95       	ror	r30
    179a:	d9 01       	movw	r26, r18
    179c:	aa 23       	and	r26, r26
    179e:	29 f4       	brne	.+10     	; 0x17aa <pow+0x50>
    17a0:	ab 2f       	mov	r26, r27
    17a2:	be 2f       	mov	r27, r30
    17a4:	f8 5f       	subi	r31, 0xF8	; 248
    17a6:	d0 f3       	brcs	.-12     	; 0x179c <pow+0x42>
    17a8:	10 c0       	rjmp	.+32     	; 0x17ca <pow+0x70>
    17aa:	ff 5f       	subi	r31, 0xFF	; 255
    17ac:	70 f4       	brcc	.+28     	; 0x17ca <pow+0x70>
    17ae:	a6 95       	lsr	r26
    17b0:	e0 f7       	brcc	.-8      	; 0x17aa <pow+0x50>
    17b2:	f7 39       	cpi	r31, 0x97	; 151
    17b4:	50 f0       	brcs	.+20     	; 0x17ca <pow+0x70>
    17b6:	19 f0       	breq	.+6      	; 0x17be <pow+0x64>
    17b8:	ff 3a       	cpi	r31, 0xAF	; 175
    17ba:	38 f4       	brcc	.+14     	; 0x17ca <pow+0x70>
    17bc:	9f 77       	andi	r25, 0x7F	; 127
    17be:	9f 93       	push	r25
    17c0:	0c d0       	rcall	.+24     	; 0x17da <pow+0x80>
    17c2:	0f 90       	pop	r0
    17c4:	07 fc       	sbrc	r0, 7
    17c6:	90 58       	subi	r25, 0x80	; 128
    17c8:	08 95       	ret
    17ca:	3e f0       	brts	.+14     	; 0x17da <pow+0x80>
    17cc:	18 cf       	rjmp	.-464    	; 0x15fe <__fp_nan>
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	80 e8       	ldi	r24, 0x80	; 128
    17d4:	9f e3       	ldi	r25, 0x3F	; 63
    17d6:	08 95       	ret
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	9f 77       	andi	r25, 0x7F	; 127
    17dc:	5f 93       	push	r21
    17de:	4f 93       	push	r20
    17e0:	3f 93       	push	r19
    17e2:	2f 93       	push	r18
    17e4:	9e d0       	rcall	.+316    	; 0x1922 <log>
    17e6:	2f 91       	pop	r18
    17e8:	3f 91       	pop	r19
    17ea:	4f 91       	pop	r20
    17ec:	5f 91       	pop	r21
    17ee:	52 df       	rcall	.-348    	; 0x1694 <__mulsf3>
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <exp>
    17f2:	19 f4       	brne	.+6      	; 0x17fa <pow+0xa0>
    17f4:	0e f0       	brts	.+2      	; 0x17f8 <pow+0x9e>
    17f6:	fd ce       	rjmp	.-518    	; 0x15f2 <__fp_inf>
    17f8:	46 cf       	rjmp	.-372    	; 0x1686 <__fp_zero>
    17fa:	01 cf       	rjmp	.-510    	; 0x15fe <__fp_nan>

000017fc <exp>:
    17fc:	2a df       	rcall	.-428    	; 0x1652 <__fp_splitA>
    17fe:	c8 f3       	brcs	.-14     	; 0x17f2 <pow+0x98>
    1800:	96 38       	cpi	r25, 0x86	; 134
    1802:	c0 f7       	brcc	.-16     	; 0x17f4 <pow+0x9a>
    1804:	07 f8       	bld	r0, 7
    1806:	0f 92       	push	r0
    1808:	e8 94       	clt
    180a:	2b e3       	ldi	r18, 0x3B	; 59
    180c:	3a ea       	ldi	r19, 0xAA	; 170
    180e:	48 eb       	ldi	r20, 0xB8	; 184
    1810:	5f e7       	ldi	r21, 0x7F	; 127
    1812:	4e df       	rcall	.-356    	; 0x16b0 <__mulsf3_pse>
    1814:	0f 92       	push	r0
    1816:	0f 92       	push	r0
    1818:	0f 92       	push	r0
    181a:	4d b7       	in	r20, 0x3d	; 61
    181c:	5e b7       	in	r21, 0x3e	; 62
    181e:	0f 92       	push	r0
    1820:	c0 d0       	rcall	.+384    	; 0x19a2 <modf>
    1822:	e4 ee       	ldi	r30, 0xE4	; 228
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	16 d0       	rcall	.+44     	; 0x1854 <__fp_powser>
    1828:	4f 91       	pop	r20
    182a:	5f 91       	pop	r21
    182c:	ef 91       	pop	r30
    182e:	ff 91       	pop	r31
    1830:	e5 95       	asr	r30
    1832:	ee 1f       	adc	r30, r30
    1834:	ff 1f       	adc	r31, r31
    1836:	49 f0       	breq	.+18     	; 0x184a <exp+0x4e>
    1838:	fe 57       	subi	r31, 0x7E	; 126
    183a:	e0 68       	ori	r30, 0x80	; 128
    183c:	44 27       	eor	r20, r20
    183e:	ee 0f       	add	r30, r30
    1840:	44 1f       	adc	r20, r20
    1842:	fa 95       	dec	r31
    1844:	e1 f7       	brne	.-8      	; 0x183e <exp+0x42>
    1846:	41 95       	neg	r20
    1848:	55 0b       	sbc	r21, r21
    184a:	32 d0       	rcall	.+100    	; 0x18b0 <ldexp>
    184c:	0f 90       	pop	r0
    184e:	07 fe       	sbrs	r0, 7
    1850:	26 c0       	rjmp	.+76     	; 0x189e <inverse>
    1852:	08 95       	ret

00001854 <__fp_powser>:
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	1f 93       	push	r17
    185a:	0f 93       	push	r16
    185c:	ff 92       	push	r15
    185e:	ef 92       	push	r14
    1860:	df 92       	push	r13
    1862:	7b 01       	movw	r14, r22
    1864:	8c 01       	movw	r16, r24
    1866:	68 94       	set
    1868:	05 c0       	rjmp	.+10     	; 0x1874 <__fp_powser+0x20>
    186a:	da 2e       	mov	r13, r26
    186c:	ef 01       	movw	r28, r30
    186e:	1e df       	rcall	.-452    	; 0x16ac <__mulsf3x>
    1870:	fe 01       	movw	r30, r28
    1872:	e8 94       	clt
    1874:	a5 91       	lpm	r26, Z+
    1876:	25 91       	lpm	r18, Z+
    1878:	35 91       	lpm	r19, Z+
    187a:	45 91       	lpm	r20, Z+
    187c:	55 91       	lpm	r21, Z+
    187e:	ae f3       	brts	.-22     	; 0x186a <__fp_powser+0x16>
    1880:	ef 01       	movw	r28, r30
    1882:	ce dd       	rcall	.-1124   	; 0x1420 <__addsf3x>
    1884:	fe 01       	movw	r30, r28
    1886:	97 01       	movw	r18, r14
    1888:	a8 01       	movw	r20, r16
    188a:	da 94       	dec	r13
    188c:	79 f7       	brne	.-34     	; 0x186c <__fp_powser+0x18>
    188e:	df 90       	pop	r13
    1890:	ef 90       	pop	r14
    1892:	ff 90       	pop	r15
    1894:	0f 91       	pop	r16
    1896:	1f 91       	pop	r17
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <inverse>:
    189e:	9b 01       	movw	r18, r22
    18a0:	ac 01       	movw	r20, r24
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	80 e8       	ldi	r24, 0x80	; 128
    18a8:	9f e3       	ldi	r25, 0x3F	; 63
    18aa:	ae c0       	rjmp	.+348    	; 0x1a08 <__divsf3>
    18ac:	a2 ce       	rjmp	.-700    	; 0x15f2 <__fp_inf>
    18ae:	14 c1       	rjmp	.+552    	; 0x1ad8 <__fp_mpack>

000018b0 <ldexp>:
    18b0:	d0 de       	rcall	.-608    	; 0x1652 <__fp_splitA>
    18b2:	e8 f3       	brcs	.-6      	; 0x18ae <inverse+0x10>
    18b4:	99 23       	and	r25, r25
    18b6:	d9 f3       	breq	.-10     	; 0x18ae <inverse+0x10>
    18b8:	94 0f       	add	r25, r20
    18ba:	51 1d       	adc	r21, r1
    18bc:	bb f3       	brvs	.-18     	; 0x18ac <inverse+0xe>
    18be:	91 50       	subi	r25, 0x01	; 1
    18c0:	50 40       	sbci	r21, 0x00	; 0
    18c2:	94 f0       	brlt	.+36     	; 0x18e8 <ldexp+0x38>
    18c4:	59 f0       	breq	.+22     	; 0x18dc <ldexp+0x2c>
    18c6:	88 23       	and	r24, r24
    18c8:	32 f0       	brmi	.+12     	; 0x18d6 <ldexp+0x26>
    18ca:	66 0f       	add	r22, r22
    18cc:	77 1f       	adc	r23, r23
    18ce:	88 1f       	adc	r24, r24
    18d0:	91 50       	subi	r25, 0x01	; 1
    18d2:	50 40       	sbci	r21, 0x00	; 0
    18d4:	c1 f7       	brne	.-16     	; 0x18c6 <ldexp+0x16>
    18d6:	9e 3f       	cpi	r25, 0xFE	; 254
    18d8:	51 05       	cpc	r21, r1
    18da:	44 f7       	brge	.-48     	; 0x18ac <inverse+0xe>
    18dc:	88 0f       	add	r24, r24
    18de:	91 1d       	adc	r25, r1
    18e0:	96 95       	lsr	r25
    18e2:	87 95       	ror	r24
    18e4:	97 f9       	bld	r25, 7
    18e6:	08 95       	ret
    18e8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ea:	ac f0       	brlt	.+42     	; 0x1916 <ldexp+0x66>
    18ec:	98 3e       	cpi	r25, 0xE8	; 232
    18ee:	9c f0       	brlt	.+38     	; 0x1916 <ldexp+0x66>
    18f0:	bb 27       	eor	r27, r27
    18f2:	86 95       	lsr	r24
    18f4:	77 95       	ror	r23
    18f6:	67 95       	ror	r22
    18f8:	b7 95       	ror	r27
    18fa:	08 f4       	brcc	.+2      	; 0x18fe <ldexp+0x4e>
    18fc:	b1 60       	ori	r27, 0x01	; 1
    18fe:	93 95       	inc	r25
    1900:	c1 f7       	brne	.-16     	; 0x18f2 <ldexp+0x42>
    1902:	bb 0f       	add	r27, r27
    1904:	58 f7       	brcc	.-42     	; 0x18dc <ldexp+0x2c>
    1906:	11 f4       	brne	.+4      	; 0x190c <ldexp+0x5c>
    1908:	60 ff       	sbrs	r22, 0
    190a:	e8 cf       	rjmp	.-48     	; 0x18dc <ldexp+0x2c>
    190c:	6f 5f       	subi	r22, 0xFF	; 255
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	8f 4f       	sbci	r24, 0xFF	; 255
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	e3 cf       	rjmp	.-58     	; 0x18dc <ldexp+0x2c>
    1916:	b8 ce       	rjmp	.-656    	; 0x1688 <__fp_szero>
    1918:	0e f0       	brts	.+2      	; 0x191c <ldexp+0x6c>
    191a:	de c0       	rjmp	.+444    	; 0x1ad8 <__fp_mpack>
    191c:	70 ce       	rjmp	.-800    	; 0x15fe <__fp_nan>
    191e:	68 94       	set
    1920:	68 ce       	rjmp	.-816    	; 0x15f2 <__fp_inf>

00001922 <log>:
    1922:	97 de       	rcall	.-722    	; 0x1652 <__fp_splitA>
    1924:	c8 f3       	brcs	.-14     	; 0x1918 <ldexp+0x68>
    1926:	99 23       	and	r25, r25
    1928:	d1 f3       	breq	.-12     	; 0x191e <ldexp+0x6e>
    192a:	c6 f3       	brts	.-16     	; 0x191c <ldexp+0x6c>
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	1f 93       	push	r17
    1932:	0f 93       	push	r16
    1934:	ff 92       	push	r15
    1936:	c9 2f       	mov	r28, r25
    1938:	dd 27       	eor	r29, r29
    193a:	88 23       	and	r24, r24
    193c:	2a f0       	brmi	.+10     	; 0x1948 <log+0x26>
    193e:	21 97       	sbiw	r28, 0x01	; 1
    1940:	66 0f       	add	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	da f7       	brpl	.-10     	; 0x193e <log+0x1c>
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e8       	ldi	r20, 0x80	; 128
    194e:	5f eb       	ldi	r21, 0xBF	; 191
    1950:	9f e3       	ldi	r25, 0x3F	; 63
    1952:	88 39       	cpi	r24, 0x98	; 152
    1954:	20 f0       	brcs	.+8      	; 0x195e <log+0x3c>
    1956:	80 3e       	cpi	r24, 0xE0	; 224
    1958:	30 f0       	brcs	.+12     	; 0x1966 <log+0x44>
    195a:	21 96       	adiw	r28, 0x01	; 1
    195c:	8f 77       	andi	r24, 0x7F	; 127
    195e:	4f dd       	rcall	.-1378   	; 0x13fe <__addsf3>
    1960:	ec e0       	ldi	r30, 0x0C	; 12
    1962:	f1 e0       	ldi	r31, 0x01	; 1
    1964:	03 c0       	rjmp	.+6      	; 0x196c <log+0x4a>
    1966:	4b dd       	rcall	.-1386   	; 0x13fe <__addsf3>
    1968:	e9 e3       	ldi	r30, 0x39	; 57
    196a:	f1 e0       	ldi	r31, 0x01	; 1
    196c:	73 df       	rcall	.-282    	; 0x1854 <__fp_powser>
    196e:	8b 01       	movw	r16, r22
    1970:	be 01       	movw	r22, r28
    1972:	ec 01       	movw	r28, r24
    1974:	fb 2e       	mov	r15, r27
    1976:	6f 57       	subi	r22, 0x7F	; 127
    1978:	71 09       	sbc	r23, r1
    197a:	75 95       	asr	r23
    197c:	77 1f       	adc	r23, r23
    197e:	88 0b       	sbc	r24, r24
    1980:	99 0b       	sbc	r25, r25
    1982:	d8 dd       	rcall	.-1104   	; 0x1534 <__floatsisf>
    1984:	28 e1       	ldi	r18, 0x18	; 24
    1986:	32 e7       	ldi	r19, 0x72	; 114
    1988:	41 e3       	ldi	r20, 0x31	; 49
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	8f de       	rcall	.-738    	; 0x16ac <__mulsf3x>
    198e:	af 2d       	mov	r26, r15
    1990:	98 01       	movw	r18, r16
    1992:	ae 01       	movw	r20, r28
    1994:	ff 90       	pop	r15
    1996:	0f 91       	pop	r16
    1998:	1f 91       	pop	r17
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	40 dd       	rcall	.-1408   	; 0x1420 <__addsf3x>
    19a0:	3f ce       	rjmp	.-898    	; 0x1620 <__fp_round>

000019a2 <modf>:
    19a2:	fa 01       	movw	r30, r20
    19a4:	dc 01       	movw	r26, r24
    19a6:	aa 0f       	add	r26, r26
    19a8:	bb 1f       	adc	r27, r27
    19aa:	9b 01       	movw	r18, r22
    19ac:	ac 01       	movw	r20, r24
    19ae:	bf 57       	subi	r27, 0x7F	; 127
    19b0:	28 f4       	brcc	.+10     	; 0x19bc <modf+0x1a>
    19b2:	22 27       	eor	r18, r18
    19b4:	33 27       	eor	r19, r19
    19b6:	44 27       	eor	r20, r20
    19b8:	50 78       	andi	r21, 0x80	; 128
    19ba:	1f c0       	rjmp	.+62     	; 0x19fa <modf+0x58>
    19bc:	b7 51       	subi	r27, 0x17	; 23
    19be:	88 f4       	brcc	.+34     	; 0x19e2 <modf+0x40>
    19c0:	ab 2f       	mov	r26, r27
    19c2:	00 24       	eor	r0, r0
    19c4:	46 95       	lsr	r20
    19c6:	37 95       	ror	r19
    19c8:	27 95       	ror	r18
    19ca:	01 1c       	adc	r0, r1
    19cc:	a3 95       	inc	r26
    19ce:	d2 f3       	brmi	.-12     	; 0x19c4 <modf+0x22>
    19d0:	00 20       	and	r0, r0
    19d2:	69 f0       	breq	.+26     	; 0x19ee <modf+0x4c>
    19d4:	22 0f       	add	r18, r18
    19d6:	33 1f       	adc	r19, r19
    19d8:	44 1f       	adc	r20, r20
    19da:	b3 95       	inc	r27
    19dc:	da f3       	brmi	.-10     	; 0x19d4 <modf+0x32>
    19de:	0d d0       	rcall	.+26     	; 0x19fa <modf+0x58>
    19e0:	0d cd       	rjmp	.-1510   	; 0x13fc <__subsf3>
    19e2:	61 30       	cpi	r22, 0x01	; 1
    19e4:	71 05       	cpc	r23, r1
    19e6:	a0 e8       	ldi	r26, 0x80	; 128
    19e8:	8a 07       	cpc	r24, r26
    19ea:	b9 46       	sbci	r27, 0x69	; 105
    19ec:	30 f4       	brcc	.+12     	; 0x19fa <modf+0x58>
    19ee:	9b 01       	movw	r18, r22
    19f0:	ac 01       	movw	r20, r24
    19f2:	66 27       	eor	r22, r22
    19f4:	77 27       	eor	r23, r23
    19f6:	88 27       	eor	r24, r24
    19f8:	90 78       	andi	r25, 0x80	; 128
    19fa:	30 96       	adiw	r30, 0x00	; 0
    19fc:	21 f0       	breq	.+8      	; 0x1a06 <modf+0x64>
    19fe:	20 83       	st	Z, r18
    1a00:	31 83       	std	Z+1, r19	; 0x01
    1a02:	42 83       	std	Z+2, r20	; 0x02
    1a04:	53 83       	std	Z+3, r21	; 0x03
    1a06:	08 95       	ret

00001a08 <__divsf3>:
    1a08:	0c d0       	rcall	.+24     	; 0x1a22 <__divsf3x>
    1a0a:	0a ce       	rjmp	.-1004   	; 0x1620 <__fp_round>
    1a0c:	02 de       	rcall	.-1020   	; 0x1612 <__fp_pscB>
    1a0e:	40 f0       	brcs	.+16     	; 0x1a20 <__divsf3+0x18>
    1a10:	f9 dd       	rcall	.-1038   	; 0x1604 <__fp_pscA>
    1a12:	30 f0       	brcs	.+12     	; 0x1a20 <__divsf3+0x18>
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <__divsf3+0x16>
    1a16:	5f 3f       	cpi	r21, 0xFF	; 255
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <__divsf3+0x18>
    1a1a:	eb cd       	rjmp	.-1066   	; 0x15f2 <__fp_inf>
    1a1c:	51 11       	cpse	r21, r1
    1a1e:	34 ce       	rjmp	.-920    	; 0x1688 <__fp_szero>
    1a20:	ee cd       	rjmp	.-1060   	; 0x15fe <__fp_nan>

00001a22 <__divsf3x>:
    1a22:	0f de       	rcall	.-994    	; 0x1642 <__fp_split3>
    1a24:	98 f3       	brcs	.-26     	; 0x1a0c <__divsf3+0x4>

00001a26 <__divsf3_pse>:
    1a26:	99 23       	and	r25, r25
    1a28:	c9 f3       	breq	.-14     	; 0x1a1c <__divsf3+0x14>
    1a2a:	55 23       	and	r21, r21
    1a2c:	b1 f3       	breq	.-20     	; 0x1a1a <__divsf3+0x12>
    1a2e:	95 1b       	sub	r25, r21
    1a30:	55 0b       	sbc	r21, r21
    1a32:	bb 27       	eor	r27, r27
    1a34:	aa 27       	eor	r26, r26
    1a36:	62 17       	cp	r22, r18
    1a38:	73 07       	cpc	r23, r19
    1a3a:	84 07       	cpc	r24, r20
    1a3c:	38 f0       	brcs	.+14     	; 0x1a4c <__divsf3_pse+0x26>
    1a3e:	9f 5f       	subi	r25, 0xFF	; 255
    1a40:	5f 4f       	sbci	r21, 0xFF	; 255
    1a42:	22 0f       	add	r18, r18
    1a44:	33 1f       	adc	r19, r19
    1a46:	44 1f       	adc	r20, r20
    1a48:	aa 1f       	adc	r26, r26
    1a4a:	a9 f3       	breq	.-22     	; 0x1a36 <__divsf3_pse+0x10>
    1a4c:	33 d0       	rcall	.+102    	; 0x1ab4 <__divsf3_pse+0x8e>
    1a4e:	0e 2e       	mov	r0, r30
    1a50:	3a f0       	brmi	.+14     	; 0x1a60 <__divsf3_pse+0x3a>
    1a52:	e0 e8       	ldi	r30, 0x80	; 128
    1a54:	30 d0       	rcall	.+96     	; 0x1ab6 <__divsf3_pse+0x90>
    1a56:	91 50       	subi	r25, 0x01	; 1
    1a58:	50 40       	sbci	r21, 0x00	; 0
    1a5a:	e6 95       	lsr	r30
    1a5c:	00 1c       	adc	r0, r0
    1a5e:	ca f7       	brpl	.-14     	; 0x1a52 <__divsf3_pse+0x2c>
    1a60:	29 d0       	rcall	.+82     	; 0x1ab4 <__divsf3_pse+0x8e>
    1a62:	fe 2f       	mov	r31, r30
    1a64:	27 d0       	rcall	.+78     	; 0x1ab4 <__divsf3_pse+0x8e>
    1a66:	66 0f       	add	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	bb 1f       	adc	r27, r27
    1a6e:	26 17       	cp	r18, r22
    1a70:	37 07       	cpc	r19, r23
    1a72:	48 07       	cpc	r20, r24
    1a74:	ab 07       	cpc	r26, r27
    1a76:	b0 e8       	ldi	r27, 0x80	; 128
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <__divsf3_pse+0x56>
    1a7a:	bb 0b       	sbc	r27, r27
    1a7c:	80 2d       	mov	r24, r0
    1a7e:	bf 01       	movw	r22, r30
    1a80:	ff 27       	eor	r31, r31
    1a82:	93 58       	subi	r25, 0x83	; 131
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	2a f0       	brmi	.+10     	; 0x1a92 <__divsf3_pse+0x6c>
    1a88:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8a:	51 05       	cpc	r21, r1
    1a8c:	68 f0       	brcs	.+26     	; 0x1aa8 <__divsf3_pse+0x82>
    1a8e:	b1 cd       	rjmp	.-1182   	; 0x15f2 <__fp_inf>
    1a90:	fb cd       	rjmp	.-1034   	; 0x1688 <__fp_szero>
    1a92:	5f 3f       	cpi	r21, 0xFF	; 255
    1a94:	ec f3       	brlt	.-6      	; 0x1a90 <__divsf3_pse+0x6a>
    1a96:	98 3e       	cpi	r25, 0xE8	; 232
    1a98:	dc f3       	brlt	.-10     	; 0x1a90 <__divsf3_pse+0x6a>
    1a9a:	86 95       	lsr	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	b7 95       	ror	r27
    1aa2:	f7 95       	ror	r31
    1aa4:	9f 5f       	subi	r25, 0xFF	; 255
    1aa6:	c9 f7       	brne	.-14     	; 0x1a9a <__divsf3_pse+0x74>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	91 1d       	adc	r25, r1
    1aac:	96 95       	lsr	r25
    1aae:	87 95       	ror	r24
    1ab0:	97 f9       	bld	r25, 7
    1ab2:	08 95       	ret
    1ab4:	e1 e0       	ldi	r30, 0x01	; 1
    1ab6:	66 0f       	add	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	88 1f       	adc	r24, r24
    1abc:	bb 1f       	adc	r27, r27
    1abe:	62 17       	cp	r22, r18
    1ac0:	73 07       	cpc	r23, r19
    1ac2:	84 07       	cpc	r24, r20
    1ac4:	ba 07       	cpc	r27, r26
    1ac6:	20 f0       	brcs	.+8      	; 0x1ad0 <__divsf3_pse+0xaa>
    1ac8:	62 1b       	sub	r22, r18
    1aca:	73 0b       	sbc	r23, r19
    1acc:	84 0b       	sbc	r24, r20
    1ace:	ba 0b       	sbc	r27, r26
    1ad0:	ee 1f       	adc	r30, r30
    1ad2:	88 f7       	brcc	.-30     	; 0x1ab6 <__divsf3_pse+0x90>
    1ad4:	e0 95       	com	r30
    1ad6:	08 95       	ret

00001ad8 <__fp_mpack>:
    1ad8:	9f 3f       	cpi	r25, 0xFF	; 255
    1ada:	31 f0       	breq	.+12     	; 0x1ae8 <__fp_mpack_finite+0xc>

00001adc <__fp_mpack_finite>:
    1adc:	91 50       	subi	r25, 0x01	; 1
    1ade:	20 f4       	brcc	.+8      	; 0x1ae8 <__fp_mpack_finite+0xc>
    1ae0:	87 95       	ror	r24
    1ae2:	77 95       	ror	r23
    1ae4:	67 95       	ror	r22
    1ae6:	b7 95       	ror	r27
    1ae8:	88 0f       	add	r24, r24
    1aea:	91 1d       	adc	r25, r1
    1aec:	96 95       	lsr	r25
    1aee:	87 95       	ror	r24
    1af0:	97 f9       	bld	r25, 7
    1af2:	08 95       	ret

00001af4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1af4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1af6:	91 8d       	ldd	r25, Z+25	; 0x19
    1af8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1afa:	89 2f       	mov	r24, r25
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	80 5c       	subi	r24, 0xC0	; 192
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	82 1b       	sub	r24, r18
    1b04:	91 09       	sbc	r25, r1
}
    1b06:	8f 73       	andi	r24, 0x3F	; 63
    1b08:	99 27       	eor	r25, r25
    1b0a:	08 95       	ret

00001b0c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1b0c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b0e:	91 8d       	ldd	r25, Z+25	; 0x19
    1b10:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b12:	98 17       	cp	r25, r24
    1b14:	31 f0       	breq	.+12     	; 0x1b22 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1b16:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b18:	e8 0f       	add	r30, r24
    1b1a:	f1 1d       	adc	r31, r1
    1b1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
    1b24:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1b26:	08 95       	ret

00001b28 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1b28:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b2a:	91 8d       	ldd	r25, Z+25	; 0x19
    1b2c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b2e:	98 17       	cp	r25, r24
    1b30:	61 f0       	breq	.+24     	; 0x1b4a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1b32:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b34:	df 01       	movw	r26, r30
    1b36:	a8 0f       	add	r26, r24
    1b38:	b1 1d       	adc	r27, r1
    1b3a:	5d 96       	adiw	r26, 0x1d	; 29
    1b3c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1b3e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b40:	9f 5f       	subi	r25, 0xFF	; 255
    1b42:	9f 73       	andi	r25, 0x3F	; 63
    1b44:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1b4e:	08 95       	ret

00001b50 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1b50:	fc 01       	movw	r30, r24
    1b52:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1b54:	44 8d       	ldd	r20, Z+28	; 0x1c
    1b56:	25 2f       	mov	r18, r21
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	84 2f       	mov	r24, r20
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1b5e:	82 1b       	sub	r24, r18
    1b60:	93 0b       	sbc	r25, r19
    1b62:	54 17       	cp	r21, r20
    1b64:	10 f0       	brcs	.+4      	; 0x1b6a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1b66:	cf 96       	adiw	r24, 0x3f	; 63
    1b68:	08 95       	ret
  return tail - head - 1;
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
}
    1b6c:	08 95       	ret

00001b6e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b6e:	89 e4       	ldi	r24, 0x49	; 73
    1b70:	9f e0       	ldi	r25, 0x0F	; 15
    1b72:	89 2b       	or	r24, r25
    1b74:	39 f0       	breq	.+14     	; 0x1b84 <_Z14serialEventRunv+0x16>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	89 2b       	or	r24, r25
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <_Z14serialEventRunv+0x16>
    1b7e:	89 d1       	rcall	.+786    	; 0x1e92 <_Z17Serial0_availablev>
    1b80:	81 11       	cpse	r24, r1
    1b82:	24 c0       	rjmp	.+72     	; 0x1bcc <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1b84:	8e ed       	ldi	r24, 0xDE	; 222
    1b86:	9f e0       	ldi	r25, 0x0F	; 15
    1b88:	89 2b       	or	r24, r25
    1b8a:	39 f0       	breq	.+14     	; 0x1b9a <_Z14serialEventRunv+0x2c>
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	89 2b       	or	r24, r25
    1b92:	19 f0       	breq	.+6      	; 0x1b9a <_Z14serialEventRunv+0x2c>
    1b94:	13 d2       	rcall	.+1062   	; 0x1fbc <_Z17Serial1_availablev>
    1b96:	81 11       	cpse	r24, r1
    1b98:	1c c0       	rjmp	.+56     	; 0x1bd2 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	89 2b       	or	r24, r25
    1ba0:	41 f0       	breq	.+16     	; 0x1bb2 <_Z14serialEventRunv+0x44>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	89 2b       	or	r24, r25
    1ba8:	21 f0       	breq	.+8      	; 0x1bb2 <_Z14serialEventRunv+0x44>
    1baa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1bae:	81 11       	cpse	r24, r1
    1bb0:	13 c0       	rjmp	.+38     	; 0x1bd8 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	89 2b       	or	r24, r25
    1bb8:	a1 f0       	breq	.+40     	; 0x1be2 <_Z14serialEventRunv+0x74>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	89 2b       	or	r24, r25
    1bc0:	81 f0       	breq	.+32     	; 0x1be2 <_Z14serialEventRunv+0x74>
    1bc2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1bc6:	81 11       	cpse	r24, r1
    1bc8:	0a c0       	rjmp	.+20     	; 0x1bde <_Z14serialEventRunv+0x70>
    1bca:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1bcc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1bd0:	d9 cf       	rjmp	.-78     	; 0x1b84 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1bd2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1bd6:	e1 cf       	rjmp	.-62     	; 0x1b9a <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1bd8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1bdc:	ea cf       	rjmp	.-44     	; 0x1bb2 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1bde:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1be2:	08 95       	ret

00001be4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1be4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1be6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1be8:	df 01       	movw	r26, r30
    1bea:	a8 0f       	add	r26, r24
    1bec:	b1 1d       	adc	r27, r1
    1bee:	a3 5a       	subi	r26, 0xA3	; 163
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1bf4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	8f 73       	andi	r24, 0x3F	; 63
    1bfc:	99 27       	eor	r25, r25
    1bfe:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1c00:	a6 89       	ldd	r26, Z+22	; 0x16
    1c02:	b7 89       	ldd	r27, Z+23	; 0x17
    1c04:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1c06:	a0 89       	ldd	r26, Z+16	; 0x10
    1c08:	b1 89       	ldd	r27, Z+17	; 0x11
    1c0a:	8c 91       	ld	r24, X
    1c0c:	83 70       	andi	r24, 0x03	; 3
    1c0e:	80 64       	ori	r24, 0x40	; 64
    1c10:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1c12:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c14:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c16:	98 13       	cpse	r25, r24
    1c18:	06 c0       	rjmp	.+12     	; 0x1c26 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1c1a:	02 88       	ldd	r0, Z+18	; 0x12
    1c1c:	f3 89       	ldd	r31, Z+19	; 0x13
    1c1e:	e0 2d       	mov	r30, r0
    1c20:	80 81       	ld	r24, Z
    1c22:	8f 7d       	andi	r24, 0xDF	; 223
    1c24:	80 83       	st	Z, r24
    1c26:	08 95       	ret

00001c28 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	ec 01       	movw	r28, r24
  _written = true;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1c3a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c3e:	98 13       	cpse	r25, r24
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <_ZN14HardwareSerial5writeEh+0x24>
    1c42:	e8 89       	ldd	r30, Y+16	; 0x10
    1c44:	f9 89       	ldd	r31, Y+17	; 0x11
    1c46:	80 81       	ld	r24, Z
    1c48:	85 fd       	sbrc	r24, 5
    1c4a:	25 c0       	rjmp	.+74     	; 0x1c96 <_ZN14HardwareSerial5writeEh+0x6e>
    1c4c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1c4e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1c50:	10 e0       	ldi	r17, 0x00	; 0
    1c52:	0f 5f       	subi	r16, 0xFF	; 255
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	0f 73       	andi	r16, 0x3F	; 63
    1c58:	11 27       	eor	r17, r17
    1c5a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1c5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c5e:	e8 12       	cpse	r14, r24
    1c60:	0b c0       	rjmp	.+22     	; 0x1c78 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	07 fc       	sbrc	r0, 7
    1c66:	fa cf       	rjmp	.-12     	; 0x1c5c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1c68:	e8 89       	ldd	r30, Y+16	; 0x10
    1c6a:	f9 89       	ldd	r31, Y+17	; 0x11
    1c6c:	80 81       	ld	r24, Z
    1c6e:	85 ff       	sbrs	r24, 5
    1c70:	f5 cf       	rjmp	.-22     	; 0x1c5c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1c72:	ce 01       	movw	r24, r28
    1c74:	b7 df       	rcall	.-146    	; 0x1be4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c76:	f2 cf       	rjmp	.-28     	; 0x1c5c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e8 0f       	add	r30, r24
    1c7e:	f1 1d       	adc	r31, r1
    1c80:	e3 5a       	subi	r30, 0xA3	; 163
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c86:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c88:	f8 94       	cli
    _tx_buffer_head = i;
    1c8a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1c8c:	ea 89       	ldd	r30, Y+18	; 0x12
    1c8e:	fb 89       	ldd	r31, Y+19	; 0x13
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	0a c0       	rjmp	.+20     	; 0x1caa <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c96:	9f b7       	in	r25, 0x3f	; 63
    1c98:	f8 94       	cli
      *_udr = c;
    1c9a:	ee 89       	ldd	r30, Y+22	; 0x16
    1c9c:	ff 89       	ldd	r31, Y+23	; 0x17
    1c9e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1ca0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ca2:	f9 89       	ldd	r31, Y+17	; 0x11
    1ca4:	80 81       	ld	r24, Z
    1ca6:	83 70       	andi	r24, 0x03	; 3
    1ca8:	80 64       	ori	r24, 0x40	; 64
    1caa:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1cac:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	08 95       	ret

00001cc0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1cc6:	88 8d       	ldd	r24, Y+24	; 0x18
    1cc8:	88 23       	and	r24, r24
    1cca:	c1 f0       	breq	.+48     	; 0x1cfc <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1ccc:	ea 89       	ldd	r30, Y+18	; 0x12
    1cce:	fb 89       	ldd	r31, Y+19	; 0x13
    1cd0:	80 81       	ld	r24, Z
    1cd2:	85 fd       	sbrc	r24, 5
    1cd4:	05 c0       	rjmp	.+10     	; 0x1ce0 <_ZN14HardwareSerial5flushEv+0x20>
    1cd6:	a8 89       	ldd	r26, Y+16	; 0x10
    1cd8:	b9 89       	ldd	r27, Y+17	; 0x11
    1cda:	8c 91       	ld	r24, X
    1cdc:	86 fd       	sbrc	r24, 6
    1cde:	0e c0       	rjmp	.+28     	; 0x1cfc <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	07 fc       	sbrc	r0, 7
    1ce4:	f5 cf       	rjmp	.-22     	; 0x1cd0 <_ZN14HardwareSerial5flushEv+0x10>
    1ce6:	80 81       	ld	r24, Z
    1ce8:	85 ff       	sbrs	r24, 5
    1cea:	f2 cf       	rjmp	.-28     	; 0x1cd0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1cec:	a8 89       	ldd	r26, Y+16	; 0x10
    1cee:	b9 89       	ldd	r27, Y+17	; 0x11
    1cf0:	8c 91       	ld	r24, X
    1cf2:	85 ff       	sbrs	r24, 5
    1cf4:	ed cf       	rjmp	.-38     	; 0x1cd0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	75 df       	rcall	.-278    	; 0x1be4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1cfa:	e8 cf       	rjmp	.-48     	; 0x1ccc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	08 95       	ret

00001d02 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1d02:	cf 92       	push	r12
    1d04:	df 92       	push	r13
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	ec 01       	movw	r28, r24
    1d12:	6a 01       	movw	r12, r20
    1d14:	7b 01       	movw	r14, r22
    1d16:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1d18:	e8 89       	ldd	r30, Y+16	; 0x10
    1d1a:	f9 89       	ldd	r31, Y+17	; 0x11
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1d20:	41 15       	cp	r20, r1
    1d22:	51 4e       	sbci	r21, 0xE1	; 225
    1d24:	61 05       	cpc	r22, r1
    1d26:	71 05       	cpc	r23, r1
    1d28:	b1 f0       	breq	.+44     	; 0x1d56 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	79 e0       	ldi	r23, 0x09	; 9
    1d2e:	8d e3       	ldi	r24, 0x3D	; 61
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a7 01       	movw	r20, r14
    1d34:	96 01       	movw	r18, r12
    1d36:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__udivmodsi4>
    1d3a:	da 01       	movw	r26, r20
    1d3c:	c9 01       	movw	r24, r18
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	a1 09       	sbc	r26, r1
    1d42:	b1 09       	sbc	r27, r1
    1d44:	b6 95       	lsr	r27
    1d46:	a7 95       	ror	r26
    1d48:	97 95       	ror	r25
    1d4a:	87 95       	ror	r24
    1d4c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1d4e:	21 15       	cp	r18, r1
    1d50:	80 e1       	ldi	r24, 0x10	; 16
    1d52:	38 07       	cpc	r19, r24
    1d54:	a8 f0       	brcs	.+42     	; 0x1d80 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1d56:	e8 89       	ldd	r30, Y+16	; 0x10
    1d58:	f9 89       	ldd	r31, Y+17	; 0x11
    1d5a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1d5c:	60 e8       	ldi	r22, 0x80	; 128
    1d5e:	74 e8       	ldi	r23, 0x84	; 132
    1d60:	8e e1       	ldi	r24, 0x1E	; 30
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a7 01       	movw	r20, r14
    1d66:	96 01       	movw	r18, r12
    1d68:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__udivmodsi4>
    1d6c:	da 01       	movw	r26, r20
    1d6e:	c9 01       	movw	r24, r18
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	a1 09       	sbc	r26, r1
    1d74:	b1 09       	sbc	r27, r1
    1d76:	b6 95       	lsr	r27
    1d78:	a7 95       	ror	r26
    1d7a:	97 95       	ror	r25
    1d7c:	87 95       	ror	r24
    1d7e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1d80:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d82:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d84:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1d86:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d88:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d8a:	20 83       	st	Z, r18

  _written = false;
    1d8c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1d8e:	ec 89       	ldd	r30, Y+20	; 0x14
    1d90:	fd 89       	ldd	r31, Y+21	; 0x15
    1d92:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1d94:	ea 89       	ldd	r30, Y+18	; 0x12
    1d96:	fb 89       	ldd	r31, Y+19	; 0x13
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 61       	ori	r24, 0x10	; 16
    1d9c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1d9e:	ea 89       	ldd	r30, Y+18	; 0x12
    1da0:	fb 89       	ldd	r31, Y+19	; 0x13
    1da2:	80 81       	ld	r24, Z
    1da4:	88 60       	ori	r24, 0x08	; 8
    1da6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1da8:	ea 89       	ldd	r30, Y+18	; 0x12
    1daa:	fb 89       	ldd	r31, Y+19	; 0x13
    1dac:	80 81       	ld	r24, Z
    1dae:	80 68       	ori	r24, 0x80	; 128
    1db0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1db2:	ea 89       	ldd	r30, Y+18	; 0x12
    1db4:	fb 89       	ldd	r31, Y+19	; 0x13
    1db6:	80 81       	ld	r24, Z
    1db8:	8f 7d       	andi	r24, 0xDF	; 223
    1dba:	80 83       	st	Z, r24
}
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	08 95       	ret

00001dcc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	08 95       	ret

00001dd2 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1dd2:	08 95       	ret

00001dd4 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1dd4:	1f 92       	push	r1
    1dd6:	0f 92       	push	r0
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	0f 92       	push	r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	0b b6       	in	r0, 0x3b	; 59
    1de0:	0f 92       	push	r0
    1de2:	2f 93       	push	r18
    1de4:	8f 93       	push	r24
    1de6:	9f 93       	push	r25
    1de8:	ef 93       	push	r30
    1dea:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1dec:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <Serial+0x10>
    1df0:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <Serial+0x11>
    1df4:	80 81       	ld	r24, Z
    1df6:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <Serial+0x16>
    1dfa:	f0 91 ee 03 	lds	r31, 0x03EE	; 0x8003ee <Serial+0x17>
    1dfe:	82 fd       	sbrc	r24, 2
    1e00:	12 c0       	rjmp	.+36     	; 0x1e26 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1e02:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e04:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <Serial+0x19>
    1e08:	8f 5f       	subi	r24, 0xFF	; 255
    1e0a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1e0c:	20 91 f1 03 	lds	r18, 0x03F1	; 0x8003f1 <Serial+0x1a>
    1e10:	82 17       	cp	r24, r18
    1e12:	51 f0       	breq	.+20     	; 0x1e28 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1e14:	e0 91 f0 03 	lds	r30, 0x03F0	; 0x8003f0 <Serial+0x19>
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	e9 52       	subi	r30, 0x29	; 41
    1e1c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e1e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1e20:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <Serial+0x19>
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1e26:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1e28:	ff 91       	pop	r31
    1e2a:	ef 91       	pop	r30
    1e2c:	9f 91       	pop	r25
    1e2e:	8f 91       	pop	r24
    1e30:	2f 91       	pop	r18
    1e32:	0f 90       	pop	r0
    1e34:	0b be       	out	0x3b, r0	; 59
    1e36:	0f 90       	pop	r0
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	0f 90       	pop	r0
    1e3c:	1f 90       	pop	r1
    1e3e:	18 95       	reti

00001e40 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	0b b6       	in	r0, 0x3b	; 59
    1e4c:	0f 92       	push	r0
    1e4e:	2f 93       	push	r18
    1e50:	3f 93       	push	r19
    1e52:	4f 93       	push	r20
    1e54:	5f 93       	push	r21
    1e56:	6f 93       	push	r22
    1e58:	7f 93       	push	r23
    1e5a:	8f 93       	push	r24
    1e5c:	9f 93       	push	r25
    1e5e:	af 93       	push	r26
    1e60:	bf 93       	push	r27
    1e62:	ef 93       	push	r30
    1e64:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1e66:	87 ed       	ldi	r24, 0xD7	; 215
    1e68:	93 e0       	ldi	r25, 0x03	; 3
    1e6a:	bc de       	rcall	.-648    	; 0x1be4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	bf 91       	pop	r27
    1e72:	af 91       	pop	r26
    1e74:	9f 91       	pop	r25
    1e76:	8f 91       	pop	r24
    1e78:	7f 91       	pop	r23
    1e7a:	6f 91       	pop	r22
    1e7c:	5f 91       	pop	r21
    1e7e:	4f 91       	pop	r20
    1e80:	3f 91       	pop	r19
    1e82:	2f 91       	pop	r18
    1e84:	0f 90       	pop	r0
    1e86:	0b be       	out	0x3b, r0	; 59
    1e88:	0f 90       	pop	r0
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	0f 90       	pop	r0
    1e8e:	1f 90       	pop	r1
    1e90:	18 95       	reti

00001e92 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1e92:	87 ed       	ldi	r24, 0xD7	; 215
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	2e de       	rcall	.-932    	; 0x1af4 <_ZN14HardwareSerial9availableEv>
    1e98:	21 e0       	ldi	r18, 0x01	; 1
    1e9a:	89 2b       	or	r24, r25
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <_Z17Serial0_availablev+0xe>
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
}
    1ea0:	82 2f       	mov	r24, r18
    1ea2:	08 95       	ret

00001ea4 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ea4:	e7 ed       	ldi	r30, 0xD7	; 215
    1ea6:	f3 e0       	ldi	r31, 0x03	; 3
    1ea8:	13 82       	std	Z+3, r1	; 0x03
    1eaa:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1eac:	88 ee       	ldi	r24, 0xE8	; 232
    1eae:	93 e0       	ldi	r25, 0x03	; 3
    1eb0:	a0 e0       	ldi	r26, 0x00	; 0
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	84 83       	std	Z+4, r24	; 0x04
    1eb6:	95 83       	std	Z+5, r25	; 0x05
    1eb8:	a6 83       	std	Z+6, r26	; 0x06
    1eba:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1ebc:	8c e1       	ldi	r24, 0x1C	; 28
    1ebe:	93 e0       	ldi	r25, 0x03	; 3
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
    1ec4:	85 ec       	ldi	r24, 0xC5	; 197
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	95 87       	std	Z+13, r25	; 0x0d
    1eca:	84 87       	std	Z+12, r24	; 0x0c
    1ecc:	84 ec       	ldi	r24, 0xC4	; 196
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	97 87       	std	Z+15, r25	; 0x0f
    1ed2:	86 87       	std	Z+14, r24	; 0x0e
    1ed4:	80 ec       	ldi	r24, 0xC0	; 192
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	91 8b       	std	Z+17, r25	; 0x11
    1eda:	80 8b       	std	Z+16, r24	; 0x10
    1edc:	81 ec       	ldi	r24, 0xC1	; 193
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	93 8b       	std	Z+19, r25	; 0x13
    1ee2:	82 8b       	std	Z+18, r24	; 0x12
    1ee4:	82 ec       	ldi	r24, 0xC2	; 194
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	95 8b       	std	Z+21, r25	; 0x15
    1eea:	84 8b       	std	Z+20, r24	; 0x14
    1eec:	86 ec       	ldi	r24, 0xC6	; 198
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	97 8b       	std	Z+23, r25	; 0x17
    1ef2:	86 8b       	std	Z+22, r24	; 0x16
    1ef4:	11 8e       	std	Z+25, r1	; 0x19
    1ef6:	12 8e       	std	Z+26, r1	; 0x1a
    1ef8:	13 8e       	std	Z+27, r1	; 0x1b
    1efa:	14 8e       	std	Z+28, r1	; 0x1c
    1efc:	08 95       	ret

00001efe <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1efe:	1f 92       	push	r1
    1f00:	0f 92       	push	r0
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	0f 92       	push	r0
    1f06:	11 24       	eor	r1, r1
    1f08:	0b b6       	in	r0, 0x3b	; 59
    1f0a:	0f 92       	push	r0
    1f0c:	2f 93       	push	r18
    1f0e:	8f 93       	push	r24
    1f10:	9f 93       	push	r25
    1f12:	ef 93       	push	r30
    1f14:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1f16:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <Serial1+0x10>
    1f1a:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <Serial1+0x11>
    1f1e:	80 81       	ld	r24, Z
    1f20:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <Serial1+0x16>
    1f24:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <Serial1+0x17>
    1f28:	82 fd       	sbrc	r24, 2
    1f2a:	12 c0       	rjmp	.+36     	; 0x1f50 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1f2c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1f2e:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <Serial1+0x19>
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
    1f34:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1f36:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <Serial1+0x1a>
    1f3a:	82 17       	cp	r24, r18
    1f3c:	51 f0       	breq	.+20     	; 0x1f52 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1f3e:	e0 91 8d 04 	lds	r30, 0x048D	; 0x80048d <Serial1+0x19>
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	ec 58       	subi	r30, 0x8C	; 140
    1f46:	fb 4f       	sbci	r31, 0xFB	; 251
    1f48:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1f4a:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <Serial1+0x19>
    1f4e:	01 c0       	rjmp	.+2      	; 0x1f52 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1f50:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1f52:	ff 91       	pop	r31
    1f54:	ef 91       	pop	r30
    1f56:	9f 91       	pop	r25
    1f58:	8f 91       	pop	r24
    1f5a:	2f 91       	pop	r18
    1f5c:	0f 90       	pop	r0
    1f5e:	0b be       	out	0x3b, r0	; 59
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	0f 90       	pop	r0
    1f66:	1f 90       	pop	r1
    1f68:	18 95       	reti

00001f6a <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1f6a:	1f 92       	push	r1
    1f6c:	0f 92       	push	r0
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	0f 92       	push	r0
    1f72:	11 24       	eor	r1, r1
    1f74:	0b b6       	in	r0, 0x3b	; 59
    1f76:	0f 92       	push	r0
    1f78:	2f 93       	push	r18
    1f7a:	3f 93       	push	r19
    1f7c:	4f 93       	push	r20
    1f7e:	5f 93       	push	r21
    1f80:	6f 93       	push	r22
    1f82:	7f 93       	push	r23
    1f84:	8f 93       	push	r24
    1f86:	9f 93       	push	r25
    1f88:	af 93       	push	r26
    1f8a:	bf 93       	push	r27
    1f8c:	ef 93       	push	r30
    1f8e:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1f90:	84 e7       	ldi	r24, 0x74	; 116
    1f92:	94 e0       	ldi	r25, 0x04	; 4
    1f94:	27 de       	rcall	.-946    	; 0x1be4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1f96:	ff 91       	pop	r31
    1f98:	ef 91       	pop	r30
    1f9a:	bf 91       	pop	r27
    1f9c:	af 91       	pop	r26
    1f9e:	9f 91       	pop	r25
    1fa0:	8f 91       	pop	r24
    1fa2:	7f 91       	pop	r23
    1fa4:	6f 91       	pop	r22
    1fa6:	5f 91       	pop	r21
    1fa8:	4f 91       	pop	r20
    1faa:	3f 91       	pop	r19
    1fac:	2f 91       	pop	r18
    1fae:	0f 90       	pop	r0
    1fb0:	0b be       	out	0x3b, r0	; 59
    1fb2:	0f 90       	pop	r0
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	0f 90       	pop	r0
    1fb8:	1f 90       	pop	r1
    1fba:	18 95       	reti

00001fbc <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1fbc:	84 e7       	ldi	r24, 0x74	; 116
    1fbe:	94 e0       	ldi	r25, 0x04	; 4
    1fc0:	99 dd       	rcall	.-1230   	; 0x1af4 <_ZN14HardwareSerial9availableEv>
    1fc2:	21 e0       	ldi	r18, 0x01	; 1
    1fc4:	89 2b       	or	r24, r25
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <_Z17Serial1_availablev+0xe>
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
}
    1fca:	82 2f       	mov	r24, r18
    1fcc:	08 95       	ret

00001fce <_GLOBAL__sub_I___vector_36>:
    1fce:	e4 e7       	ldi	r30, 0x74	; 116
    1fd0:	f4 e0       	ldi	r31, 0x04	; 4
    1fd2:	13 82       	std	Z+3, r1	; 0x03
    1fd4:	12 82       	std	Z+2, r1	; 0x02
    1fd6:	88 ee       	ldi	r24, 0xE8	; 232
    1fd8:	93 e0       	ldi	r25, 0x03	; 3
    1fda:	a0 e0       	ldi	r26, 0x00	; 0
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	84 83       	std	Z+4, r24	; 0x04
    1fe0:	95 83       	std	Z+5, r25	; 0x05
    1fe2:	a6 83       	std	Z+6, r26	; 0x06
    1fe4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1fe6:	8c e1       	ldi	r24, 0x1C	; 28
    1fe8:	93 e0       	ldi	r25, 0x03	; 3
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
    1fee:	8d ec       	ldi	r24, 0xCD	; 205
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	95 87       	std	Z+13, r25	; 0x0d
    1ff4:	84 87       	std	Z+12, r24	; 0x0c
    1ff6:	8c ec       	ldi	r24, 0xCC	; 204
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	97 87       	std	Z+15, r25	; 0x0f
    1ffc:	86 87       	std	Z+14, r24	; 0x0e
    1ffe:	88 ec       	ldi	r24, 0xC8	; 200
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	91 8b       	std	Z+17, r25	; 0x11
    2004:	80 8b       	std	Z+16, r24	; 0x10
    2006:	89 ec       	ldi	r24, 0xC9	; 201
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	93 8b       	std	Z+19, r25	; 0x13
    200c:	82 8b       	std	Z+18, r24	; 0x12
    200e:	8a ec       	ldi	r24, 0xCA	; 202
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	95 8b       	std	Z+21, r25	; 0x15
    2014:	84 8b       	std	Z+20, r24	; 0x14
    2016:	8e ec       	ldi	r24, 0xCE	; 206
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	97 8b       	std	Z+23, r25	; 0x17
    201c:	86 8b       	std	Z+22, r24	; 0x16
    201e:	11 8e       	std	Z+25, r1	; 0x19
    2020:	12 8e       	std	Z+26, r1	; 0x1a
    2022:	13 8e       	std	Z+27, r1	; 0x1b
    2024:	14 8e       	std	Z+28, r1	; 0x1c
    2026:	08 95       	ret

00002028 <initVariant>:
    2028:	08 95       	ret

0000202a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    202a:	d8 d1       	rcall	.+944    	; 0x23dc <init>

	initVariant();
    202c:	fd df       	rcall	.-6      	; 0x2028 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    202e:	15 d8       	rcall	.-4054   	; 0x105a <setup>
    2030:	c7 eb       	ldi	r28, 0xB7	; 183
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2032:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    2034:	dc d9       	rcall	.-3144   	; 0x13ee <loop>
		if (serialEventRun) serialEventRun();
    2036:	20 97       	sbiw	r28, 0x00	; 0
    2038:	e9 f3       	breq	.-6      	; 0x2034 <main+0xa>
    203a:	99 dd       	rcall	.-1230   	; 0x1b6e <_Z14serialEventRunv>
    203c:	fb cf       	rjmp	.-10     	; 0x2034 <main+0xa>

0000203e <_ZN5Print5writeEPKhj>:
    203e:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2040:	df 92       	push	r13
    2042:	ef 92       	push	r14
    2044:	ff 92       	push	r15
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	6c 01       	movw	r12, r24
    2050:	7a 01       	movw	r14, r20
    2052:	8b 01       	movw	r16, r22
    2054:	c0 e0       	ldi	r28, 0x00	; 0
    2056:	d0 e0       	ldi	r29, 0x00	; 0
    2058:	ce 15       	cp	r28, r14
    205a:	df 05       	cpc	r29, r15
    205c:	81 f0       	breq	.+32     	; 0x207e <_ZN5Print5writeEPKhj+0x40>
    205e:	d8 01       	movw	r26, r16
    2060:	6d 91       	ld	r22, X+
    2062:	8d 01       	movw	r16, r26
    2064:	d6 01       	movw	r26, r12
    2066:	ed 91       	ld	r30, X+
    2068:	fc 91       	ld	r31, X
    206a:	01 90       	ld	r0, Z+
    206c:	f0 81       	ld	r31, Z
    206e:	e0 2d       	mov	r30, r0
    2070:	c6 01       	movw	r24, r12
    2072:	19 95       	eicall
    2074:	89 2b       	or	r24, r25
    2076:	11 f0       	breq	.+4      	; 0x207c <_ZN5Print5writeEPKhj+0x3e>
    2078:	21 96       	adiw	r28, 0x01	; 1
    207a:	ee cf       	rjmp	.-36     	; 0x2058 <_ZN5Print5writeEPKhj+0x1a>
    207c:	7e 01       	movw	r14, r28
    207e:	c7 01       	movw	r24, r14
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	ff 90       	pop	r15
    208a:	ef 90       	pop	r14
    208c:	df 90       	pop	r13
    208e:	cf 90       	pop	r12
    2090:	08 95       	ret

00002092 <_ZN5Print5writeEPKc>:
    2092:	61 15       	cp	r22, r1
    2094:	71 05       	cpc	r23, r1
    2096:	79 f0       	breq	.+30     	; 0x20b6 <_ZN5Print5writeEPKc+0x24>
    2098:	fb 01       	movw	r30, r22
    209a:	01 90       	ld	r0, Z+
    209c:	00 20       	and	r0, r0
    209e:	e9 f7       	brne	.-6      	; 0x209a <_ZN5Print5writeEPKc+0x8>
    20a0:	31 97       	sbiw	r30, 0x01	; 1
    20a2:	af 01       	movw	r20, r30
    20a4:	46 1b       	sub	r20, r22
    20a6:	57 0b       	sbc	r21, r23
    20a8:	dc 01       	movw	r26, r24
    20aa:	ed 91       	ld	r30, X+
    20ac:	fc 91       	ld	r31, X
    20ae:	02 80       	ldd	r0, Z+2	; 0x02
    20b0:	f3 81       	ldd	r31, Z+3	; 0x03
    20b2:	e0 2d       	mov	r30, r0
    20b4:	19 94       	eijmp
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	08 95       	ret

000020bc <_ZN5Print5printERK6String>:
    20bc:	db 01       	movw	r26, r22
    20be:	14 96       	adiw	r26, 0x04	; 4
    20c0:	4d 91       	ld	r20, X+
    20c2:	5c 91       	ld	r21, X
    20c4:	15 97       	sbiw	r26, 0x05	; 5
    20c6:	6d 91       	ld	r22, X+
    20c8:	7c 91       	ld	r23, X
    20ca:	dc 01       	movw	r26, r24
    20cc:	ed 91       	ld	r30, X+
    20ce:	fc 91       	ld	r31, X
    20d0:	02 80       	ldd	r0, Z+2	; 0x02
    20d2:	f3 81       	ldd	r31, Z+3	; 0x03
    20d4:	e0 2d       	mov	r30, r0
    20d6:	19 94       	eijmp

000020d8 <_ZN5Print5printEPKc>:
    20d8:	dc cf       	rjmp	.-72     	; 0x2092 <_ZN5Print5writeEPKc>

000020da <_ZN5Print5printEc>:
    20da:	dc 01       	movw	r26, r24
    20dc:	ed 91       	ld	r30, X+
    20de:	fc 91       	ld	r31, X
    20e0:	01 90       	ld	r0, Z+
    20e2:	f0 81       	ld	r31, Z
    20e4:	e0 2d       	mov	r30, r0
    20e6:	19 94       	eijmp

000020e8 <_ZN5Print7printlnEv>:
    20e8:	6a e2       	ldi	r22, 0x2A	; 42
    20ea:	73 e0       	ldi	r23, 0x03	; 3
    20ec:	d2 cf       	rjmp	.-92     	; 0x2092 <_ZN5Print5writeEPKc>

000020ee <_ZN5Print7printlnEPKc>:
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	ec 01       	movw	r28, r24
    20f8:	cc df       	rcall	.-104    	; 0x2092 <_ZN5Print5writeEPKc>
    20fa:	8c 01       	movw	r16, r24
    20fc:	ce 01       	movw	r24, r28
    20fe:	f4 df       	rcall	.-24     	; 0x20e8 <_ZN5Print7printlnEv>
    2100:	80 0f       	add	r24, r16
    2102:	91 1f       	adc	r25, r17
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	08 95       	ret

0000210e <_ZN5Print11printNumberEmh>:
    210e:	8f 92       	push	r8
    2110:	9f 92       	push	r9
    2112:	af 92       	push	r10
    2114:	bf 92       	push	r11
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	a1 97       	sbiw	r28, 0x21	; 33
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	7c 01       	movw	r14, r24
    2134:	fa 01       	movw	r30, r20
    2136:	cb 01       	movw	r24, r22
    2138:	19 a2       	std	Y+33, r1	; 0x21
    213a:	22 30       	cpi	r18, 0x02	; 2
    213c:	08 f4       	brcc	.+2      	; 0x2140 <_ZN5Print11printNumberEmh+0x32>
    213e:	2a e0       	ldi	r18, 0x0A	; 10
    2140:	8e 01       	movw	r16, r28
    2142:	0f 5d       	subi	r16, 0xDF	; 223
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	82 2e       	mov	r8, r18
    2148:	91 2c       	mov	r9, r1
    214a:	a1 2c       	mov	r10, r1
    214c:	b1 2c       	mov	r11, r1
    214e:	bf 01       	movw	r22, r30
    2150:	a5 01       	movw	r20, r10
    2152:	94 01       	movw	r18, r8
    2154:	ce d6       	rcall	.+3484   	; 0x2ef2 <__udivmodsi4>
    2156:	f9 01       	movw	r30, r18
    2158:	ca 01       	movw	r24, r20
    215a:	01 50       	subi	r16, 0x01	; 1
    215c:	11 09       	sbc	r17, r1
    215e:	6a 30       	cpi	r22, 0x0A	; 10
    2160:	10 f4       	brcc	.+4      	; 0x2166 <_ZN5Print11printNumberEmh+0x58>
    2162:	60 5d       	subi	r22, 0xD0	; 208
    2164:	01 c0       	rjmp	.+2      	; 0x2168 <_ZN5Print11printNumberEmh+0x5a>
    2166:	69 5c       	subi	r22, 0xC9	; 201
    2168:	d8 01       	movw	r26, r16
    216a:	6c 93       	st	X, r22
    216c:	23 2b       	or	r18, r19
    216e:	24 2b       	or	r18, r20
    2170:	25 2b       	or	r18, r21
    2172:	69 f7       	brne	.-38     	; 0x214e <_ZN5Print11printNumberEmh+0x40>
    2174:	b8 01       	movw	r22, r16
    2176:	c7 01       	movw	r24, r14
    2178:	8c df       	rcall	.-232    	; 0x2092 <_ZN5Print5writeEPKc>
    217a:	a1 96       	adiw	r28, 0x21	; 33
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	bf 90       	pop	r11
    2194:	af 90       	pop	r10
    2196:	9f 90       	pop	r9
    2198:	8f 90       	pop	r8
    219a:	08 95       	ret

0000219c <_ZN5Print5printEmi>:
    219c:	21 15       	cp	r18, r1
    219e:	31 05       	cpc	r19, r1
    21a0:	41 f4       	brne	.+16     	; 0x21b2 <_ZN5Print5printEmi+0x16>
    21a2:	dc 01       	movw	r26, r24
    21a4:	ed 91       	ld	r30, X+
    21a6:	fc 91       	ld	r31, X
    21a8:	01 90       	ld	r0, Z+
    21aa:	f0 81       	ld	r31, Z
    21ac:	e0 2d       	mov	r30, r0
    21ae:	64 2f       	mov	r22, r20
    21b0:	19 94       	eijmp
    21b2:	ad cf       	rjmp	.-166    	; 0x210e <_ZN5Print11printNumberEmh>

000021b4 <_ZN5Print5printEhi>:
    21b4:	9a 01       	movw	r18, r20
    21b6:	46 2f       	mov	r20, r22
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	70 e0       	ldi	r23, 0x00	; 0
    21be:	ee cf       	rjmp	.-36     	; 0x219c <_ZN5Print5printEmi>

000021c0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
  if (base == 0) {
    21d0:	21 15       	cp	r18, r1
    21d2:	31 05       	cpc	r19, r1
    21d4:	81 f4       	brne	.+32     	; 0x21f6 <_ZN5Print5printEli+0x36>
    return write(n);
    21d6:	dc 01       	movw	r26, r24
    21d8:	ed 91       	ld	r30, X+
    21da:	fc 91       	ld	r31, X
    21dc:	01 90       	ld	r0, Z+
    21de:	f0 81       	ld	r31, Z
    21e0:	e0 2d       	mov	r30, r0
    21e2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	1f 91       	pop	r17
    21ea:	0f 91       	pop	r16
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    21f4:	19 94       	eijmp
  } else if (base == 10) {
    21f6:	2a 30       	cpi	r18, 0x0A	; 10
    21f8:	31 05       	cpc	r19, r1
    21fa:	f1 f4       	brne	.+60     	; 0x2238 <__stack+0x39>
    if (n < 0) {
    21fc:	77 ff       	sbrs	r23, 7
    21fe:	1b c0       	rjmp	.+54     	; 0x2236 <__stack+0x37>
    2200:	6a 01       	movw	r12, r20
    2202:	7b 01       	movw	r14, r22
    2204:	ec 01       	movw	r28, r24
      int t = print('-');
    2206:	6d e2       	ldi	r22, 0x2D	; 45
    2208:	68 df       	rcall	.-304    	; 0x20da <_ZN5Print5printEc>
    220a:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    220c:	44 27       	eor	r20, r20
    220e:	55 27       	eor	r21, r21
    2210:	ba 01       	movw	r22, r20
    2212:	4c 19       	sub	r20, r12
    2214:	5d 09       	sbc	r21, r13
    2216:	6e 09       	sbc	r22, r14
    2218:	7f 09       	sbc	r23, r15
    221a:	2a e0       	ldi	r18, 0x0A	; 10
    221c:	ce 01       	movw	r24, r28
    221e:	77 df       	rcall	.-274    	; 0x210e <_ZN5Print11printNumberEmh>
    2220:	80 0f       	add	r24, r16
    2222:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	df 90       	pop	r13
    2232:	cf 90       	pop	r12
    2234:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2236:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2246:	cf 90       	pop	r12
    2248:	62 cf       	rjmp	.-316    	; 0x210e <_ZN5Print11printNumberEmh>

0000224a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    224a:	9a 01       	movw	r18, r20
  return print((long) n, base);
    224c:	ab 01       	movw	r20, r22
    224e:	77 0f       	add	r23, r23
    2250:	66 0b       	sbc	r22, r22
    2252:	77 0b       	sbc	r23, r23
    2254:	b5 cf       	rjmp	.-150    	; 0x21c0 <_ZN5Print5printEli>

00002256 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2260:	f4 df       	rcall	.-24     	; 0x224a <_ZN5Print5printEii>
    2262:	8c 01       	movw	r16, r24
  n += println();
    2264:	ce 01       	movw	r24, r28
    2266:	40 df       	rcall	.-384    	; 0x20e8 <_ZN5Print7printlnEv>
  return n;
}
    2268:	80 0f       	add	r24, r16
    226a:	91 1f       	adc	r25, r17
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	1f 91       	pop	r17
    2272:	0f 91       	pop	r16
    2274:	08 95       	ret

00002276 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2276:	1f 92       	push	r1
    2278:	0f 92       	push	r0
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	0f 92       	push	r0
    227e:	11 24       	eor	r1, r1
    2280:	2f 93       	push	r18
    2282:	3f 93       	push	r19
    2284:	8f 93       	push	r24
    2286:	9f 93       	push	r25
    2288:	af 93       	push	r26
    228a:	bf 93       	push	r27
    228c:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <timer0_millis>
    2290:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <timer0_millis+0x1>
    2294:	a0 91 14 05 	lds	r26, 0x0514	; 0x800514 <timer0_millis+0x2>
    2298:	b0 91 15 05 	lds	r27, 0x0515	; 0x800515 <timer0_millis+0x3>
    229c:	30 91 11 05 	lds	r19, 0x0511	; 0x800511 <timer0_fract>
    22a0:	23 e0       	ldi	r18, 0x03	; 3
    22a2:	23 0f       	add	r18, r19
    22a4:	2d 37       	cpi	r18, 0x7D	; 125
    22a6:	20 f4       	brcc	.+8      	; 0x22b0 <__vector_23+0x3a>
    22a8:	01 96       	adiw	r24, 0x01	; 1
    22aa:	a1 1d       	adc	r26, r1
    22ac:	b1 1d       	adc	r27, r1
    22ae:	05 c0       	rjmp	.+10     	; 0x22ba <__vector_23+0x44>
    22b0:	26 e8       	ldi	r18, 0x86	; 134
    22b2:	23 0f       	add	r18, r19
    22b4:	02 96       	adiw	r24, 0x02	; 2
    22b6:	a1 1d       	adc	r26, r1
    22b8:	b1 1d       	adc	r27, r1
    22ba:	20 93 11 05 	sts	0x0511, r18	; 0x800511 <timer0_fract>
    22be:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <timer0_millis>
    22c2:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <timer0_millis+0x1>
    22c6:	a0 93 14 05 	sts	0x0514, r26	; 0x800514 <timer0_millis+0x2>
    22ca:	b0 93 15 05 	sts	0x0515, r27	; 0x800515 <timer0_millis+0x3>
    22ce:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <timer0_overflow_count>
    22d2:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <timer0_overflow_count+0x1>
    22d6:	a0 91 18 05 	lds	r26, 0x0518	; 0x800518 <timer0_overflow_count+0x2>
    22da:	b0 91 19 05 	lds	r27, 0x0519	; 0x800519 <timer0_overflow_count+0x3>
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	a1 1d       	adc	r26, r1
    22e2:	b1 1d       	adc	r27, r1
    22e4:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <timer0_overflow_count>
    22e8:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <timer0_overflow_count+0x1>
    22ec:	a0 93 18 05 	sts	0x0518, r26	; 0x800518 <timer0_overflow_count+0x2>
    22f0:	b0 93 19 05 	sts	0x0519, r27	; 0x800519 <timer0_overflow_count+0x3>
    22f4:	bf 91       	pop	r27
    22f6:	af 91       	pop	r26
    22f8:	9f 91       	pop	r25
    22fa:	8f 91       	pop	r24
    22fc:	3f 91       	pop	r19
    22fe:	2f 91       	pop	r18
    2300:	0f 90       	pop	r0
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	0f 90       	pop	r0
    2306:	1f 90       	pop	r1
    2308:	18 95       	reti

0000230a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    230a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    230c:	f8 94       	cli
	m = timer0_overflow_count;
    230e:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <timer0_overflow_count>
    2312:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <timer0_overflow_count+0x1>
    2316:	a0 91 18 05 	lds	r26, 0x0518	; 0x800518 <timer0_overflow_count+0x2>
    231a:	b0 91 19 05 	lds	r27, 0x0519	; 0x800519 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    231e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2320:	a8 9b       	sbis	0x15, 0	; 21
    2322:	05 c0       	rjmp	.+10     	; 0x232e <micros+0x24>
    2324:	2f 3f       	cpi	r18, 0xFF	; 255
    2326:	19 f0       	breq	.+6      	; 0x232e <micros+0x24>
		m++;
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	a1 1d       	adc	r26, r1
    232c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    232e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2330:	ba 2f       	mov	r27, r26
    2332:	a9 2f       	mov	r26, r25
    2334:	98 2f       	mov	r25, r24
    2336:	88 27       	eor	r24, r24
    2338:	82 0f       	add	r24, r18
    233a:	91 1d       	adc	r25, r1
    233c:	a1 1d       	adc	r26, r1
    233e:	b1 1d       	adc	r27, r1
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	42 e0       	ldi	r20, 0x02	; 2
    2346:	66 0f       	add	r22, r22
    2348:	77 1f       	adc	r23, r23
    234a:	88 1f       	adc	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	4a 95       	dec	r20
    2350:	d1 f7       	brne	.-12     	; 0x2346 <micros+0x3c>
}
    2352:	08 95       	ret

00002354 <delay>:

void delay(unsigned long ms)
{
    2354:	8f 92       	push	r8
    2356:	9f 92       	push	r9
    2358:	af 92       	push	r10
    235a:	bf 92       	push	r11
    235c:	cf 92       	push	r12
    235e:	df 92       	push	r13
    2360:	ef 92       	push	r14
    2362:	ff 92       	push	r15
    2364:	6b 01       	movw	r12, r22
    2366:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2368:	d0 df       	rcall	.-96     	; 0x230a <micros>
    236a:	4b 01       	movw	r8, r22
    236c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    236e:	c1 14       	cp	r12, r1
    2370:	d1 04       	cpc	r13, r1
    2372:	e1 04       	cpc	r14, r1
    2374:	f1 04       	cpc	r15, r1
		yield();
    2376:	f1 f0       	breq	.+60     	; 0x23b4 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2378:	d9 d3       	rcall	.+1970   	; 0x2b2c <yield>
    237a:	c7 df       	rcall	.-114    	; 0x230a <micros>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	88 19       	sub	r24, r8
    2382:	99 09       	sbc	r25, r9
    2384:	aa 09       	sbc	r26, r10
    2386:	bb 09       	sbc	r27, r11
    2388:	88 3e       	cpi	r24, 0xE8	; 232
    238a:	93 40       	sbci	r25, 0x03	; 3
    238c:	a1 05       	cpc	r26, r1
    238e:	b1 05       	cpc	r27, r1
    2390:	70 f3       	brcs	.-36     	; 0x236e <delay+0x1a>
			ms--;
    2392:	21 e0       	ldi	r18, 0x01	; 1
    2394:	c2 1a       	sub	r12, r18
    2396:	d1 08       	sbc	r13, r1
    2398:	e1 08       	sbc	r14, r1
    239a:	f1 08       	sbc	r15, r1
			start += 1000;
    239c:	88 ee       	ldi	r24, 0xE8	; 232
    239e:	88 0e       	add	r8, r24
    23a0:	83 e0       	ldi	r24, 0x03	; 3
    23a2:	98 1e       	adc	r9, r24
    23a4:	a1 1c       	adc	r10, r1
    23a6:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    23a8:	c1 14       	cp	r12, r1
    23aa:	d1 04       	cpc	r13, r1
    23ac:	e1 04       	cpc	r14, r1
    23ae:	f1 04       	cpc	r15, r1
    23b0:	21 f7       	brne	.-56     	; 0x237a <delay+0x26>
    23b2:	dd cf       	rjmp	.-70     	; 0x236e <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	df 90       	pop	r13
    23ba:	cf 90       	pop	r12
    23bc:	bf 90       	pop	r11
    23be:	af 90       	pop	r10
    23c0:	9f 90       	pop	r9
    23c2:	8f 90       	pop	r8
    23c4:	08 95       	ret

000023c6 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	91 05       	cpc	r25, r1
    23ca:	38 f0       	brcs	.+14     	; 0x23da <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    23d4:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <delayMicroseconds+0x10>
    23da:	08 95       	ret

000023dc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    23dc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    23de:	84 b5       	in	r24, 0x24	; 36
    23e0:	82 60       	ori	r24, 0x02	; 2
    23e2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    23e4:	84 b5       	in	r24, 0x24	; 36
    23e6:	81 60       	ori	r24, 0x01	; 1
    23e8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    23ea:	85 b5       	in	r24, 0x25	; 37
    23ec:	82 60       	ori	r24, 0x02	; 2
    23ee:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    23f0:	85 b5       	in	r24, 0x25	; 37
    23f2:	81 60       	ori	r24, 0x01	; 1
    23f4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    23f6:	ee e6       	ldi	r30, 0x6E	; 110
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	81 60       	ori	r24, 0x01	; 1
    23fe:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2400:	e1 e8       	ldi	r30, 0x81	; 129
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2406:	80 81       	ld	r24, Z
    2408:	82 60       	ori	r24, 0x02	; 2
    240a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    240c:	80 81       	ld	r24, Z
    240e:	81 60       	ori	r24, 0x01	; 1
    2410:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2412:	e0 e8       	ldi	r30, 0x80	; 128
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	81 60       	ori	r24, 0x01	; 1
    241a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    241c:	e1 eb       	ldi	r30, 0xB1	; 177
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	84 60       	ori	r24, 0x04	; 4
    2424:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2426:	e0 eb       	ldi	r30, 0xB0	; 176
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	81 60       	ori	r24, 0x01	; 1
    242e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2430:	e1 e9       	ldi	r30, 0x91	; 145
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	82 60       	ori	r24, 0x02	; 2
    2438:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    243a:	80 81       	ld	r24, Z
    243c:	81 60       	ori	r24, 0x01	; 1
    243e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2440:	e0 e9       	ldi	r30, 0x90	; 144
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	81 60       	ori	r24, 0x01	; 1
    2448:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    244a:	e1 ea       	ldi	r30, 0xA1	; 161
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	82 60       	ori	r24, 0x02	; 2
    2452:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2454:	80 81       	ld	r24, Z
    2456:	81 60       	ori	r24, 0x01	; 1
    2458:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    245a:	e0 ea       	ldi	r30, 0xA0	; 160
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	81 60       	ori	r24, 0x01	; 1
    2462:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2464:	e1 e2       	ldi	r30, 0x21	; 33
    2466:	f1 e0       	ldi	r31, 0x01	; 1
    2468:	80 81       	ld	r24, Z
    246a:	82 60       	ori	r24, 0x02	; 2
    246c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    246e:	80 81       	ld	r24, Z
    2470:	81 60       	ori	r24, 0x01	; 1
    2472:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2474:	e0 e2       	ldi	r30, 0x20	; 32
    2476:	f1 e0       	ldi	r31, 0x01	; 1
    2478:	80 81       	ld	r24, Z
    247a:	81 60       	ori	r24, 0x01	; 1
    247c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    247e:	ea e7       	ldi	r30, 0x7A	; 122
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	84 60       	ori	r24, 0x04	; 4
    2486:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2488:	80 81       	ld	r24, Z
    248a:	82 60       	ori	r24, 0x02	; 2
    248c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    248e:	80 81       	ld	r24, Z
    2490:	81 60       	ori	r24, 0x01	; 1
    2492:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2494:	80 81       	ld	r24, Z
    2496:	80 68       	ori	r24, 0x80	; 128
    2498:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    249a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    249e:	08 95       	ret

000024a0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	fc 01       	movw	r30, r24
    24a4:	31 97       	sbiw	r30, 0x01	; 1
    24a6:	e2 31       	cpi	r30, 0x12	; 18
    24a8:	f1 05       	cpc	r31, r1
    24aa:	08 f0       	brcs	.+2      	; 0x24ae <turnOffPWM+0xe>
    24ac:	4d c0       	rjmp	.+154    	; 0x2548 <turnOffPWM+0xa8>
    24ae:	88 27       	eor	r24, r24
    24b0:	ed 54       	subi	r30, 0x4D	; 77
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	8f 4f       	sbci	r24, 0xFF	; 255
    24b6:	3f c5       	rjmp	.+2686   	; 0x2f36 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    24b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    24bc:	8f 77       	andi	r24, 0x7F	; 127
    24be:	03 c0       	rjmp	.+6      	; 0x24c6 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24c0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    24c4:	8f 7d       	andi	r24, 0xDF	; 223
    24c6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    24ca:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    24cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    24d0:	87 7f       	andi	r24, 0xF7	; 247
    24d2:	f9 cf       	rjmp	.-14     	; 0x24c6 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    24d4:	84 b5       	in	r24, 0x24	; 36
    24d6:	8f 77       	andi	r24, 0x7F	; 127
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    24da:	84 b5       	in	r24, 0x24	; 36
    24dc:	8f 7d       	andi	r24, 0xDF	; 223
    24de:	84 bd       	out	0x24, r24	; 36
    24e0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    24e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    24e6:	8f 77       	andi	r24, 0x7F	; 127
    24e8:	03 c0       	rjmp	.+6      	; 0x24f0 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    24ea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    24ee:	8f 7d       	andi	r24, 0xDF	; 223
    24f0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    24f4:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    24f6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    24fa:	8f 77       	andi	r24, 0x7F	; 127
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    24fe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2502:	8f 7d       	andi	r24, 0xDF	; 223
    2504:	03 c0       	rjmp	.+6      	; 0x250c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2506:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    250a:	87 7f       	andi	r24, 0xF7	; 247
    250c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2510:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2512:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2516:	8f 77       	andi	r24, 0x7F	; 127
    2518:	07 c0       	rjmp	.+14     	; 0x2528 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    251a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    251e:	8f 7d       	andi	r24, 0xDF	; 223
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2522:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2526:	87 7f       	andi	r24, 0xF7	; 247
    2528:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    252c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    252e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2532:	8f 77       	andi	r24, 0x7F	; 127
    2534:	07 c0       	rjmp	.+14     	; 0x2544 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2536:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    253a:	8f 7d       	andi	r24, 0xDF	; 223
    253c:	03 c0       	rjmp	.+6      	; 0x2544 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    253e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2542:	87 7f       	andi	r24, 0xF7	; 247
    2544:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2548:	08 95       	ret

0000254a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	fc 01       	movw	r30, r24
    2552:	e0 53       	subi	r30, 0x30	; 48
    2554:	fe 4f       	sbci	r31, 0xFE	; 254
    2556:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2558:	fc 01       	movw	r30, r24
    255a:	ea 5e       	subi	r30, 0xEA	; 234
    255c:	fd 4f       	sbci	r31, 0xFD	; 253
    255e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2560:	88 23       	and	r24, r24
    2562:	61 f1       	breq	.+88     	; 0x25bc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	fc 01       	movw	r30, r24
    256c:	ea 58       	subi	r30, 0x8A	; 138
    256e:	fd 4f       	sbci	r31, 0xFD	; 253
    2570:	c5 91       	lpm	r28, Z+
    2572:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2574:	fc 01       	movw	r30, r24
    2576:	e4 5a       	subi	r30, 0xA4	; 164
    2578:	fd 4f       	sbci	r31, 0xFD	; 253
    257a:	a5 91       	lpm	r26, Z+
    257c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    257e:	61 11       	cpse	r22, r1
    2580:	09 c0       	rjmp	.+18     	; 0x2594 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2582:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2584:	f8 94       	cli
		*reg &= ~bit;
    2586:	88 81       	ld	r24, Y
    2588:	20 95       	com	r18
    258a:	82 23       	and	r24, r18
    258c:	88 83       	st	Y, r24
		*out &= ~bit;
    258e:	ec 91       	ld	r30, X
    2590:	2e 23       	and	r18, r30
    2592:	0b c0       	rjmp	.+22     	; 0x25aa <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2594:	62 30       	cpi	r22, 0x02	; 2
    2596:	61 f4       	brne	.+24     	; 0x25b0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2598:	9f b7       	in	r25, 0x3f	; 63
                cli();
    259a:	f8 94       	cli
		*reg &= ~bit;
    259c:	88 81       	ld	r24, Y
    259e:	32 2f       	mov	r19, r18
    25a0:	30 95       	com	r19
    25a2:	83 23       	and	r24, r19
    25a4:	88 83       	st	Y, r24
		*out |= bit;
    25a6:	ec 91       	ld	r30, X
    25a8:	2e 2b       	or	r18, r30
    25aa:	2c 93       	st	X, r18
		SREG = oldSREG;
    25ac:	9f bf       	out	0x3f, r25	; 63
    25ae:	06 c0       	rjmp	.+12     	; 0x25bc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    25b0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    25b2:	f8 94       	cli
		*reg |= bit;
    25b4:	e8 81       	ld	r30, Y
    25b6:	2e 2b       	or	r18, r30
    25b8:	28 83       	st	Y, r18
		SREG = oldSREG;
    25ba:	8f bf       	out	0x3f, r24	; 63
	}
}
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	08 95       	ret

000025c2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	f9 01       	movw	r30, r18
    25ce:	e6 57       	subi	r30, 0x76	; 118
    25d0:	fe 4f       	sbci	r31, 0xFE	; 254
    25d2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    25d4:	f9 01       	movw	r30, r18
    25d6:	e0 53       	subi	r30, 0x30	; 48
    25d8:	fe 4f       	sbci	r31, 0xFE	; 254
    25da:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    25dc:	f9 01       	movw	r30, r18
    25de:	ea 5e       	subi	r30, 0xEA	; 234
    25e0:	fd 4f       	sbci	r31, 0xFD	; 253
    25e2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    25e4:	cc 23       	and	r28, r28
    25e6:	b9 f0       	breq	.+46     	; 0x2616 <digitalWrite+0x54>
    25e8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    25ea:	81 11       	cpse	r24, r1
    25ec:	59 df       	rcall	.-334    	; 0x24a0 <turnOffPWM>

	out = portOutputRegister(port);
    25ee:	ec 2f       	mov	r30, r28
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	ee 0f       	add	r30, r30
    25f4:	ff 1f       	adc	r31, r31
    25f6:	e4 5a       	subi	r30, 0xA4	; 164
    25f8:	fd 4f       	sbci	r31, 0xFD	; 253
    25fa:	a5 91       	lpm	r26, Z+
    25fc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    25fe:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2600:	f8 94       	cli

	if (val == LOW) {
    2602:	11 11       	cpse	r17, r1
    2604:	04 c0       	rjmp	.+8      	; 0x260e <digitalWrite+0x4c>
		*out &= ~bit;
    2606:	8c 91       	ld	r24, X
    2608:	d0 95       	com	r29
    260a:	d8 23       	and	r29, r24
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <digitalWrite+0x50>
	} else {
		*out |= bit;
    260e:	ec 91       	ld	r30, X
    2610:	de 2b       	or	r29, r30
    2612:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2614:	9f bf       	out	0x3f, r25	; 63
}
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	08 95       	ret

0000261e <_ZN6StringD1Ev>:
	move(rval);
}
String::String(StringSumHelper &&rval)
{
	init();
	move(rval);
    261e:	fc 01       	movw	r30, r24
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	28 c5       	rjmp	.+2640   	; 0x3076 <free>

00002626 <_ZN6String10invalidateEv>:
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	ec 01       	movw	r28, r24
    262c:	88 81       	ld	r24, Y
    262e:	99 81       	ldd	r25, Y+1	; 0x01
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	09 f0       	breq	.+2      	; 0x2636 <_ZN6String10invalidateEv+0x10>
    2634:	20 d5       	rcall	.+2624   	; 0x3076 <free>
    2636:	19 82       	std	Y+1, r1	; 0x01
    2638:	18 82       	st	Y, r1
    263a:	1d 82       	std	Y+5, r1	; 0x05
    263c:	1c 82       	std	Y+4, r1	; 0x04
    263e:	1b 82       	std	Y+3, r1	; 0x03
    2640:	1a 82       	std	Y+2, r1	; 0x02
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	08 95       	ret

00002648 <_ZN6String12changeBufferEj>:
    2648:	0f 93       	push	r16
    264a:	1f 93       	push	r17
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	ec 01       	movw	r28, r24
    2652:	8b 01       	movw	r16, r22
    2654:	6f 5f       	subi	r22, 0xFF	; 255
    2656:	7f 4f       	sbci	r23, 0xFF	; 255
    2658:	88 81       	ld	r24, Y
    265a:	99 81       	ldd	r25, Y+1	; 0x01
    265c:	95 d5       	rcall	.+2858   	; 0x3188 <realloc>
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	31 f0       	breq	.+12     	; 0x266e <_ZN6String12changeBufferEj+0x26>
    2662:	99 83       	std	Y+1, r25	; 0x01
    2664:	88 83       	st	Y, r24
    2666:	1b 83       	std	Y+3, r17	; 0x03
    2668:	0a 83       	std	Y+2, r16	; 0x02
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <_ZN6String12changeBufferEj+0x28>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <_ZN6String7reserveEj>:
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	ec 01       	movw	r28, r24
    2680:	88 81       	ld	r24, Y
    2682:	99 81       	ldd	r25, Y+1	; 0x01
    2684:	89 2b       	or	r24, r25
    2686:	29 f0       	breq	.+10     	; 0x2692 <_ZN6String7reserveEj+0x18>
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	86 17       	cp	r24, r22
    268e:	97 07       	cpc	r25, r23
    2690:	58 f4       	brcc	.+22     	; 0x26a8 <_ZN6String7reserveEj+0x2e>
    2692:	ce 01       	movw	r24, r28
    2694:	d9 df       	rcall	.-78     	; 0x2648 <_ZN6String12changeBufferEj>
    2696:	88 23       	and	r24, r24
    2698:	41 f0       	breq	.+16     	; 0x26aa <_ZN6String7reserveEj+0x30>
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	9d 81       	ldd	r25, Y+5	; 0x05
    269e:	89 2b       	or	r24, r25
    26a0:	19 f4       	brne	.+6      	; 0x26a8 <_ZN6String7reserveEj+0x2e>
    26a2:	e8 81       	ld	r30, Y
    26a4:	f9 81       	ldd	r31, Y+1	; 0x01
    26a6:	10 82       	st	Z, r1
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <_ZN6String4copyEPKcj>:
    26b0:	ef 92       	push	r14
    26b2:	ff 92       	push	r15
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	ec 01       	movw	r28, r24
    26be:	7b 01       	movw	r14, r22
    26c0:	8a 01       	movw	r16, r20
    26c2:	ba 01       	movw	r22, r20
    26c4:	da df       	rcall	.-76     	; 0x267a <_ZN6String7reserveEj>
    26c6:	81 11       	cpse	r24, r1
    26c8:	03 c0       	rjmp	.+6      	; 0x26d0 <_ZN6String4copyEPKcj+0x20>
    26ca:	ce 01       	movw	r24, r28
    26cc:	ac df       	rcall	.-168    	; 0x2626 <_ZN6String10invalidateEv>
    26ce:	06 c0       	rjmp	.+12     	; 0x26dc <_ZN6String4copyEPKcj+0x2c>
    26d0:	1d 83       	std	Y+5, r17	; 0x05
    26d2:	0c 83       	std	Y+4, r16	; 0x04
    26d4:	b7 01       	movw	r22, r14
    26d6:	88 81       	ld	r24, Y
    26d8:	99 81       	ldd	r25, Y+1	; 0x01
    26da:	3f d6       	rcall	.+3198   	; 0x335a <strcpy>
    26dc:	ce 01       	movw	r24, r28
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	1f 91       	pop	r17
    26e4:	0f 91       	pop	r16
    26e6:	ff 90       	pop	r15
    26e8:	ef 90       	pop	r14
    26ea:	08 95       	ret

000026ec <_ZN6StringC1EPKc>:
    26ec:	fc 01       	movw	r30, r24
    26ee:	11 82       	std	Z+1, r1	; 0x01
    26f0:	10 82       	st	Z, r1
    26f2:	13 82       	std	Z+3, r1	; 0x03
    26f4:	12 82       	std	Z+2, r1	; 0x02
    26f6:	15 82       	std	Z+5, r1	; 0x05
    26f8:	14 82       	std	Z+4, r1	; 0x04
    26fa:	61 15       	cp	r22, r1
    26fc:	71 05       	cpc	r23, r1
    26fe:	49 f0       	breq	.+18     	; 0x2712 <_ZN6StringC1EPKc+0x26>
    2700:	fb 01       	movw	r30, r22
    2702:	01 90       	ld	r0, Z+
    2704:	00 20       	and	r0, r0
    2706:	e9 f7       	brne	.-6      	; 0x2702 <_ZN6StringC1EPKc+0x16>
    2708:	31 97       	sbiw	r30, 0x01	; 1
    270a:	af 01       	movw	r20, r30
    270c:	46 1b       	sub	r20, r22
    270e:	57 0b       	sbc	r21, r23
    2710:	cf cf       	rjmp	.-98     	; 0x26b0 <_ZN6String4copyEPKcj>
    2712:	08 95       	ret

00002714 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	ec 01       	movw	r28, r24
    271a:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    271c:	86 17       	cp	r24, r22
    271e:	97 07       	cpc	r25, r23
    2720:	51 f0       	breq	.+20     	; 0x2736 <_ZN6StringaSERKS_+0x22>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2722:	60 81       	ld	r22, Z
    2724:	71 81       	ldd	r23, Z+1	; 0x01
    2726:	61 15       	cp	r22, r1
    2728:	71 05       	cpc	r23, r1
    272a:	21 f0       	breq	.+8      	; 0x2734 <_ZN6StringaSERKS_+0x20>
    272c:	44 81       	ldd	r20, Z+4	; 0x04
    272e:	55 81       	ldd	r21, Z+5	; 0x05
    2730:	bf df       	rcall	.-130    	; 0x26b0 <_ZN6String4copyEPKcj>
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <_ZN6StringaSERKS_+0x22>
	else invalidate();
    2734:	78 df       	rcall	.-272    	; 0x2626 <_ZN6String10invalidateEv>
    2736:	ce 01       	movw	r24, r28
	
	return *this;
}
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	08 95       	ret

0000273e <_ZN6StringC1ERKS_>:
    273e:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2740:	11 82       	std	Z+1, r1	; 0x01
    2742:	10 82       	st	Z, r1
	capacity = 0;
    2744:	13 82       	std	Z+3, r1	; 0x03
    2746:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2748:	15 82       	std	Z+5, r1	; 0x05
    274a:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    274c:	e3 cf       	rjmp	.-58     	; 0x2714 <_ZN6StringaSERKS_>

0000274e <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    274e:	fc 01       	movw	r30, r24
    2750:	13 82       	std	Z+3, r1	; 0x03
    2752:	12 82       	std	Z+2, r1	; 0x02
    2754:	8d e3       	ldi	r24, 0x3D	; 61
    2756:	93 e0       	ldi	r25, 0x03	; 3
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
    275c:	64 83       	std	Z+4, r22	; 0x04
    275e:	41 87       	std	Z+9, r20	; 0x09
    2760:	22 87       	std	Z+10, r18	; 0x0a
    2762:	13 86       	std	Z+11, r1	; 0x0b
    2764:	08 95       	ret

00002766 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	ec 01       	movw	r28, r24
    276e:	16 2f       	mov	r17, r22
    2770:	6c 81       	ldd	r22, Y+4	; 0x04
    2772:	8a e1       	ldi	r24, 0x1A	; 26
    2774:	95 e0       	ldi	r25, 0x05	; 5
    2776:	b9 d1       	rcall	.+882    	; 0x2aea <_ZN7TwoWire17beginTransmissionEh>
    2778:	6b 85       	ldd	r22, Y+11	; 0x0b
    277a:	61 2b       	or	r22, r17
    277c:	8a e1       	ldi	r24, 0x1A	; 26
    277e:	95 e0       	ldi	r25, 0x05	; 5
    2780:	67 d1       	rcall	.+718    	; 0x2a50 <_ZN7TwoWire5writeEh>
    2782:	8a e1       	ldi	r24, 0x1A	; 26
    2784:	95 e0       	ldi	r25, 0x05	; 5
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	ca c1       	rjmp	.+916    	; 0x2b22 <_ZN7TwoWire15endTransmissionEv>

0000278e <_ZN17LiquidCrystal_I2C9backlightEv>:
    278e:	28 e0       	ldi	r18, 0x08	; 8
    2790:	fc 01       	movw	r30, r24
    2792:	23 87       	std	Z+11, r18	; 0x0b
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	e7 cf       	rjmp	.-50     	; 0x2766 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002798 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2798:	0f 93       	push	r16
    279a:	1f 93       	push	r17
    279c:	cf 93       	push	r28
    279e:	8c 01       	movw	r16, r24
    27a0:	c6 2f       	mov	r28, r22
    27a2:	64 60       	ori	r22, 0x04	; 4
    27a4:	e0 df       	rcall	.-64     	; 0x2766 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0d de       	rcall	.-998    	; 0x23c6 <delayMicroseconds>
    27ac:	6c 2f       	mov	r22, r28
    27ae:	6b 7f       	andi	r22, 0xFB	; 251
    27b0:	c8 01       	movw	r24, r16
    27b2:	d9 df       	rcall	.-78     	; 0x2766 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    27b4:	82 e3       	ldi	r24, 0x32	; 50
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	03 ce       	rjmp	.-1018   	; 0x23c6 <delayMicroseconds>

000027c0 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    27c0:	1f 93       	push	r17
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	ec 01       	movw	r28, r24
    27c8:	16 2f       	mov	r17, r22
    27ca:	cd df       	rcall	.-102    	; 0x2766 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    27cc:	61 2f       	mov	r22, r17
    27ce:	ce 01       	movw	r24, r28
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	e0 cf       	rjmp	.-64     	; 0x2798 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000027d8 <_ZN17LiquidCrystal_I2C4sendEhh>:
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	8c 01       	movw	r16, r24
    27e2:	c6 2f       	mov	r28, r22
    27e4:	d4 2f       	mov	r29, r20
    27e6:	60 7f       	andi	r22, 0xF0	; 240
    27e8:	64 2b       	or	r22, r20
    27ea:	ea df       	rcall	.-44     	; 0x27c0 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    27ec:	80 e1       	ldi	r24, 0x10	; 16
    27ee:	c8 9f       	mul	r28, r24
    27f0:	b0 01       	movw	r22, r0
    27f2:	11 24       	eor	r1, r1
    27f4:	6d 2b       	or	r22, r29
    27f6:	c8 01       	movw	r24, r16
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	1f 91       	pop	r17
    27fe:	0f 91       	pop	r16
    2800:	df cf       	rjmp	.-66     	; 0x27c0 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002802 <_ZN17LiquidCrystal_I2C7commandEh>:
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	e9 cf       	rjmp	.-46     	; 0x27d8 <_ZN17LiquidCrystal_I2C4sendEhh>

00002806 <_ZN17LiquidCrystal_I2C5clearEv>:
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	fc df       	rcall	.-8      	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
    280a:	80 ed       	ldi	r24, 0xD0	; 208
    280c:	97 e0       	ldi	r25, 0x07	; 7
    280e:	db cd       	rjmp	.-1098   	; 0x23c6 <delayMicroseconds>

00002810 <_ZN17LiquidCrystal_I2C4homeEv>:
    2810:	62 e0       	ldi	r22, 0x02	; 2
    2812:	f7 df       	rcall	.-18     	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
    2814:	80 ed       	ldi	r24, 0xD0	; 208
    2816:	97 e0       	ldi	r25, 0x07	; 7
    2818:	d6 cd       	rjmp	.-1108   	; 0x23c6 <delayMicroseconds>

0000281a <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	28 97       	sbiw	r28, 0x08	; 8
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	9c 01       	movw	r18, r24
    2830:	88 e0       	ldi	r24, 0x08	; 8
    2832:	e8 e0       	ldi	r30, 0x08	; 8
    2834:	f2 e0       	ldi	r31, 0x02	; 2
    2836:	de 01       	movw	r26, r28
    2838:	11 96       	adiw	r26, 0x01	; 1
    283a:	01 90       	ld	r0, Z+
    283c:	0d 92       	st	X+, r0
    283e:	8a 95       	dec	r24
    2840:	e1 f7       	brne	.-8      	; 0x283a <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2842:	f9 01       	movw	r30, r18
    2844:	80 85       	ldd	r24, Z+8	; 0x08
    2846:	84 17       	cp	r24, r20
    2848:	10 f4       	brcc	.+4      	; 0x284e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    284a:	4f ef       	ldi	r20, 0xFF	; 255
    284c:	48 0f       	add	r20, r24
    284e:	fe 01       	movw	r30, r28
    2850:	31 96       	adiw	r30, 0x01	; 1
    2852:	e4 0f       	add	r30, r20
    2854:	f1 1d       	adc	r31, r1
    2856:	e4 0f       	add	r30, r20
    2858:	f1 1d       	adc	r31, r1
    285a:	90 81       	ld	r25, Z
    285c:	69 0f       	add	r22, r25
    285e:	60 68       	ori	r22, 0x80	; 128
    2860:	c9 01       	movw	r24, r18
    2862:	28 96       	adiw	r28, 0x08	; 8
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	de bf       	out	0x3e, r29	; 62
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	cd bf       	out	0x3d, r28	; 61
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	c7 cf       	rjmp	.-114    	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>

00002874 <_ZN17LiquidCrystal_I2C7displayEv>:
    2874:	fc 01       	movw	r30, r24
    2876:	66 81       	ldd	r22, Z+6	; 0x06
    2878:	26 2f       	mov	r18, r22
    287a:	24 60       	ori	r18, 0x04	; 4
    287c:	26 83       	std	Z+6, r18	; 0x06
    287e:	6c 60       	ori	r22, 0x0C	; 12
    2880:	c0 cf       	rjmp	.-128    	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>

00002882 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	a9 df       	rcall	.-174    	; 0x27d8 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	08 95       	ret

0000288c <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2892:	42 30       	cpi	r20, 0x02	; 2
    2894:	18 f0       	brcs	.+6      	; 0x289c <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	88 60       	ori	r24, 0x08	; 8
    289a:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    289c:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    289e:	22 23       	and	r18, r18
    28a0:	29 f0       	breq	.+10     	; 0x28ac <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    28a2:	41 30       	cpi	r20, 0x01	; 1
    28a4:	19 f4       	brne	.+6      	; 0x28ac <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    28a6:	8d 81       	ldd	r24, Y+5	; 0x05
    28a8:	84 60       	ori	r24, 0x04	; 4
    28aa:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    28ac:	62 e3       	ldi	r22, 0x32	; 50
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	4f dd       	rcall	.-1378   	; 0x2354 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    28b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b8:	ce 01       	movw	r24, r28
    28ba:	55 df       	rcall	.-342    	; 0x2766 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    28bc:	68 ee       	ldi	r22, 0xE8	; 232
    28be:	73 e0       	ldi	r23, 0x03	; 3
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	47 dd       	rcall	.-1394   	; 0x2354 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    28c6:	60 e3       	ldi	r22, 0x30	; 48
    28c8:	ce 01       	movw	r24, r28
    28ca:	7a df       	rcall	.-268    	; 0x27c0 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    28cc:	84 e9       	ldi	r24, 0x94	; 148
    28ce:	91 e1       	ldi	r25, 0x11	; 17
    28d0:	7a dd       	rcall	.-1292   	; 0x23c6 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    28d2:	60 e3       	ldi	r22, 0x30	; 48
    28d4:	ce 01       	movw	r24, r28
    28d6:	74 df       	rcall	.-280    	; 0x27c0 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    28d8:	84 e9       	ldi	r24, 0x94	; 148
    28da:	91 e1       	ldi	r25, 0x11	; 17
    28dc:	74 dd       	rcall	.-1304   	; 0x23c6 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    28de:	60 e3       	ldi	r22, 0x30	; 48
    28e0:	ce 01       	movw	r24, r28
    28e2:	6e df       	rcall	.-292    	; 0x27c0 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    28e4:	86 e9       	ldi	r24, 0x96	; 150
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	6e dd       	rcall	.-1316   	; 0x23c6 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    28ea:	60 e2       	ldi	r22, 0x20	; 32
    28ec:	ce 01       	movw	r24, r28
    28ee:	68 df       	rcall	.-304    	; 0x27c0 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    28f0:	6d 81       	ldd	r22, Y+5	; 0x05
    28f2:	60 62       	ori	r22, 0x20	; 32
    28f4:	ce 01       	movw	r24, r28
    28f6:	85 df       	rcall	.-246    	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    28f8:	84 e0       	ldi	r24, 0x04	; 4
    28fa:	8e 83       	std	Y+6, r24	; 0x06
	display();
    28fc:	ce 01       	movw	r24, r28
    28fe:	ba df       	rcall	.-140    	; 0x2874 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2900:	ce 01       	movw	r24, r28
    2902:	81 df       	rcall	.-254    	; 0x2806 <_ZN17LiquidCrystal_I2C5clearEv>
    2904:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2906:	8f 83       	std	Y+7, r24	; 0x07
    2908:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    290a:	ce 01       	movw	r24, r28
    290c:	7a df       	rcall	.-268    	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
    290e:	ce 01       	movw	r24, r28
    2910:	df 91       	pop	r29
	
	home();
    2912:	cf 91       	pop	r28
  
}
    2914:	7d cf       	rjmp	.-262    	; 0x2810 <_ZN17LiquidCrystal_I2C4homeEv>

00002916 <_ZN17LiquidCrystal_I2C9init_privEv>:
    2916:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2918:	df 93       	push	r29
    291a:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    291c:	8a e1       	ldi	r24, 0x1A	; 26
    291e:	95 e0       	ldi	r25, 0x05	; 5
    2920:	d5 d0       	rcall	.+426    	; 0x2acc <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2922:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	4a 85       	ldd	r20, Y+10	; 0x0a
    2928:	69 85       	ldd	r22, Y+9	; 0x09
    292a:	ce 01       	movw	r24, r28
}
    292c:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    292e:	cf 91       	pop	r28
    2930:	ad cf       	rjmp	.-166    	; 0x288c <_ZN17LiquidCrystal_I2C5beginEhhh>

00002932 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2932:	f1 cf       	rjmp	.-30     	; 0x2916 <_ZN17LiquidCrystal_I2C9init_privEv>

00002934 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2934:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <_ZN7TwoWire14rxBufferLengthE>
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <_ZN7TwoWire13rxBufferIndexE>
    293e:	82 1b       	sub	r24, r18
    2940:	91 09       	sbc	r25, r1
    2942:	08 95       	ret

00002944 <_ZN7TwoWire4readEv>:
    2944:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <_ZN7TwoWire13rxBufferIndexE>
    2948:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <_ZN7TwoWire14rxBufferLengthE>
    294c:	98 17       	cp	r25, r24
    294e:	50 f4       	brcc	.+20     	; 0x2964 <_ZN7TwoWire4readEv+0x20>
    2950:	e9 2f       	mov	r30, r25
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	e0 5b       	subi	r30, 0xB0	; 176
    2956:	fa 4f       	sbci	r31, 0xFA	; 250
    2958:	20 81       	ld	r18, Z
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	9f 5f       	subi	r25, 0xFF	; 255
    295e:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <_ZN7TwoWire13rxBufferIndexE>
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <_ZN7TwoWire4readEv+0x24>
    2964:	2f ef       	ldi	r18, 0xFF	; 255
    2966:	3f ef       	ldi	r19, 0xFF	; 255
    2968:	c9 01       	movw	r24, r18
    296a:	08 95       	ret

0000296c <_ZN7TwoWire4peekEv>:
    296c:	e0 91 4f 05 	lds	r30, 0x054F	; 0x80054f <_ZN7TwoWire13rxBufferIndexE>
    2970:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <_ZN7TwoWire14rxBufferLengthE>
    2974:	e8 17       	cp	r30, r24
    2976:	30 f4       	brcc	.+12     	; 0x2984 <_ZN7TwoWire4peekEv+0x18>
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	e0 5b       	subi	r30, 0xB0	; 176
    297c:	fa 4f       	sbci	r31, 0xFA	; 250
    297e:	80 81       	ld	r24, Z
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	08 95       	ret
    2984:	8f ef       	ldi	r24, 0xFF	; 255
    2986:	9f ef       	ldi	r25, 0xFF	; 255
    2988:	08 95       	ret

0000298a <_ZN7TwoWire5flushEv>:
    298a:	08 95       	ret

0000298c <_ZN7TwoWire16onReceiveServiceEPhi>:
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	ec 01       	movw	r28, r24
    2992:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <_ZN7TwoWire14user_onReceiveE>
    2996:	f0 91 27 05 	lds	r31, 0x0527	; 0x800527 <_ZN7TwoWire14user_onReceiveE+0x1>
    299a:	30 97       	sbiw	r30, 0x00	; 0
    299c:	f1 f0       	breq	.+60     	; 0x29da <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    299e:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <_ZN7TwoWire13rxBufferIndexE>
    29a2:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <_ZN7TwoWire14rxBufferLengthE>
    29a6:	98 17       	cp	r25, r24
    29a8:	c0 f0       	brcs	.+48     	; 0x29da <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	29 2f       	mov	r18, r25
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	26 17       	cp	r18, r22
    29b2:	37 07       	cpc	r19, r23
    29b4:	54 f4       	brge	.+20     	; 0x29ca <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    29b6:	de 01       	movw	r26, r28
    29b8:	a2 0f       	add	r26, r18
    29ba:	b3 1f       	adc	r27, r19
    29bc:	4c 91       	ld	r20, X
    29be:	d9 01       	movw	r26, r18
    29c0:	a0 5b       	subi	r26, 0xB0	; 176
    29c2:	ba 4f       	sbci	r27, 0xFA	; 250
    29c4:	4c 93       	st	X, r20
    29c6:	9f 5f       	subi	r25, 0xFF	; 255
    29c8:	f1 cf       	rjmp	.-30     	; 0x29ac <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    29ca:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <_ZN7TwoWire13rxBufferIndexE>
    29ce:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <_ZN7TwoWire14rxBufferLengthE>
    29d2:	cb 01       	movw	r24, r22
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	19 94       	eijmp
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret

000029e0 <_ZN7TwoWire16onRequestServiceEv>:
    29e0:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <_ZN7TwoWire14user_onRequestE>
    29e4:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <_ZN7TwoWire14user_onRequestE+0x1>
    29e8:	30 97       	sbiw	r30, 0x00	; 0
    29ea:	29 f0       	breq	.+10     	; 0x29f6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    29ec:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <_ZN7TwoWire13txBufferIndexE>
    29f0:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZN7TwoWire14txBufferLengthE>
    29f4:	19 94       	eijmp
    29f6:	08 95       	ret

000029f8 <_ZN7TwoWire5writeEPKhj>:
    29f8:	cf 92       	push	r12
    29fa:	df 92       	push	r13
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	7c 01       	movw	r14, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	8a 01       	movw	r16, r20
    2a0e:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <_ZN7TwoWire12transmittingE>
    2a12:	22 23       	and	r18, r18
    2a14:	89 f0       	breq	.+34     	; 0x2a38 <_ZN7TwoWire5writeEPKhj+0x40>
    2a16:	eb 01       	movw	r28, r22
    2a18:	6b 01       	movw	r12, r22
    2a1a:	c4 0e       	add	r12, r20
    2a1c:	d5 1e       	adc	r13, r21
    2a1e:	cc 15       	cp	r28, r12
    2a20:	dd 05       	cpc	r29, r13
    2a22:	61 f0       	breq	.+24     	; 0x2a3c <_ZN7TwoWire5writeEPKhj+0x44>
    2a24:	69 91       	ld	r22, Y+
    2a26:	d7 01       	movw	r26, r14
    2a28:	ed 91       	ld	r30, X+
    2a2a:	fc 91       	ld	r31, X
    2a2c:	01 90       	ld	r0, Z+
    2a2e:	f0 81       	ld	r31, Z
    2a30:	e0 2d       	mov	r30, r0
    2a32:	c7 01       	movw	r24, r14
    2a34:	19 95       	eicall
    2a36:	f3 cf       	rjmp	.-26     	; 0x2a1e <_ZN7TwoWire5writeEPKhj+0x26>
    2a38:	64 2f       	mov	r22, r20
    2a3a:	eb d0       	rcall	.+470    	; 0x2c12 <twi_transmit>
    2a3c:	c8 01       	movw	r24, r16
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	ff 90       	pop	r15
    2a48:	ef 90       	pop	r14
    2a4a:	df 90       	pop	r13
    2a4c:	cf 90       	pop	r12
    2a4e:	08 95       	ret

00002a50 <_ZN7TwoWire5writeEh>:
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	1f 92       	push	r1
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	69 83       	std	Y+1, r22	; 0x01
    2a5c:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <_ZN7TwoWire12transmittingE>
    2a60:	22 23       	and	r18, r18
    2a62:	d1 f0       	breq	.+52     	; 0x2a98 <_ZN7TwoWire5writeEh+0x48>
    2a64:	20 91 2b 05 	lds	r18, 0x052B	; 0x80052b <_ZN7TwoWire14txBufferLengthE>
    2a68:	20 32       	cpi	r18, 0x20	; 32
    2a6a:	40 f0       	brcs	.+16     	; 0x2a7c <_ZN7TwoWire5writeEh+0x2c>
    2a6c:	21 e0       	ldi	r18, 0x01	; 1
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	fc 01       	movw	r30, r24
    2a72:	33 83       	std	Z+3, r19	; 0x03
    2a74:	22 83       	std	Z+2, r18	; 0x02
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	14 c0       	rjmp	.+40     	; 0x2aa4 <_ZN7TwoWire5writeEh+0x54>
    2a7c:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <_ZN7TwoWire13txBufferIndexE>
    2a80:	e8 2f       	mov	r30, r24
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	e3 5d       	subi	r30, 0xD3	; 211
    2a86:	fa 4f       	sbci	r31, 0xFA	; 250
    2a88:	99 81       	ldd	r25, Y+1	; 0x01
    2a8a:	90 83       	st	Z, r25
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <_ZN7TwoWire13txBufferIndexE>
    2a92:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <_ZN7TwoWire14txBufferLengthE>
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <_ZN7TwoWire5writeEh+0x50>
    2a98:	61 e0       	ldi	r22, 0x01	; 1
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	01 96       	adiw	r24, 0x01	; 1
    2a9e:	b9 d0       	rcall	.+370    	; 0x2c12 <twi_transmit>
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0f 90       	pop	r0
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	08 95       	ret

00002aac <_ZN7TwoWireC1Ev>:
    2aac:	fc 01       	movw	r30, r24
    2aae:	13 82       	std	Z+3, r1	; 0x03
    2ab0:	12 82       	std	Z+2, r1	; 0x02
    2ab2:	88 ee       	ldi	r24, 0xE8	; 232
    2ab4:	93 e0       	ldi	r25, 0x03	; 3
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	84 83       	std	Z+4, r24	; 0x04
    2abc:	95 83       	std	Z+5, r25	; 0x05
    2abe:	a6 83       	std	Z+6, r26	; 0x06
    2ac0:	b7 83       	std	Z+7, r27	; 0x07
    2ac2:	89 e4       	ldi	r24, 0x49	; 73
    2ac4:	93 e0       	ldi	r25, 0x03	; 3
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
    2aca:	08 95       	ret

00002acc <_ZN7TwoWire5beginEv>:
    2acc:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <_ZN7TwoWire13rxBufferIndexE>
    2ad0:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <_ZN7TwoWire14rxBufferLengthE>
    2ad4:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <_ZN7TwoWire13txBufferIndexE>
    2ad8:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZN7TwoWire14txBufferLengthE>
    2adc:	28 d0       	rcall	.+80     	; 0x2b2e <twi_init>
    2ade:	80 ef       	ldi	r24, 0xF0	; 240
    2ae0:	94 e1       	ldi	r25, 0x14	; 20
    2ae2:	c4 d0       	rcall	.+392    	; 0x2c6c <twi_attachSlaveTxEvent>
    2ae4:	86 ec       	ldi	r24, 0xC6	; 198
    2ae6:	94 e1       	ldi	r25, 0x14	; 20
    2ae8:	bc c0       	rjmp	.+376    	; 0x2c62 <twi_attachSlaveRxEvent>

00002aea <_ZN7TwoWire17beginTransmissionEh>:
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <_ZN7TwoWire12transmittingE>
    2af0:	60 93 4d 05 	sts	0x054D, r22	; 0x80054d <_ZN7TwoWire9txAddressE>
    2af4:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <_ZN7TwoWire13txBufferIndexE>
    2af8:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZN7TwoWire14txBufferLengthE>
    2afc:	08 95       	ret

00002afe <_ZN7TwoWire15endTransmissionEh>:
    2afe:	0f 93       	push	r16
    2b00:	06 2f       	mov	r16, r22
    2b02:	21 e0       	ldi	r18, 0x01	; 1
    2b04:	40 91 2b 05 	lds	r20, 0x052B	; 0x80052b <_ZN7TwoWire14txBufferLengthE>
    2b08:	6d e2       	ldi	r22, 0x2D	; 45
    2b0a:	75 e0       	ldi	r23, 0x05	; 5
    2b0c:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <_ZN7TwoWire9txAddressE>
    2b10:	2a d0       	rcall	.+84     	; 0x2b66 <twi_writeTo>
    2b12:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <_ZN7TwoWire13txBufferIndexE>
    2b16:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <_ZN7TwoWire14txBufferLengthE>
    2b1a:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <_ZN7TwoWire12transmittingE>
    2b1e:	0f 91       	pop	r16
    2b20:	08 95       	ret

00002b22 <_ZN7TwoWire15endTransmissionEv>:
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	ec cf       	rjmp	.-40     	; 0x2afe <_ZN7TwoWire15endTransmissionEh>

00002b26 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2b26:	8a e1       	ldi	r24, 0x1A	; 26
    2b28:	95 e0       	ldi	r25, 0x05	; 5
    2b2a:	c0 cf       	rjmp	.-128    	; 0x2aac <_ZN7TwoWireC1Ev>

00002b2c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2b2c:	08 95       	ret

00002b2e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2b2e:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <twi_state>
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <twi_sendStop>
    2b38:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <twi_inRepStart>
    2b3c:	61 e0       	ldi	r22, 0x01	; 1
    2b3e:	84 e1       	ldi	r24, 0x14	; 20
    2b40:	40 dd       	rcall	.-1408   	; 0x25c2 <digitalWrite>
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	85 e1       	ldi	r24, 0x15	; 21
    2b46:	3d dd       	rcall	.-1414   	; 0x25c2 <digitalWrite>
    2b48:	e9 eb       	ldi	r30, 0xB9	; 185
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	8e 7f       	andi	r24, 0xFE	; 254
    2b50:	80 83       	st	Z, r24
    2b52:	80 81       	ld	r24, Z
    2b54:	8d 7f       	andi	r24, 0xFD	; 253
    2b56:	80 83       	st	Z, r24
    2b58:	88 e4       	ldi	r24, 0x48	; 72
    2b5a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2b5e:	85 e4       	ldi	r24, 0x45	; 69
    2b60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b64:	08 95       	ret

00002b66 <twi_writeTo>:
    2b66:	0f 93       	push	r16
    2b68:	41 32       	cpi	r20, 0x21	; 33
    2b6a:	08 f0       	brcs	.+2      	; 0x2b6e <twi_writeTo+0x8>
    2b6c:	4a c0       	rjmp	.+148    	; 0x2c02 <twi_writeTo+0x9c>
    2b6e:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <twi_state>
    2b72:	91 11       	cpse	r25, r1
    2b74:	fc cf       	rjmp	.-8      	; 0x2b6e <twi_writeTo+0x8>
    2b76:	32 e0       	ldi	r19, 0x02	; 2
    2b78:	30 93 dd 05 	sts	0x05DD, r19	; 0x8005dd <twi_state>
    2b7c:	00 93 db 05 	sts	0x05DB, r16	; 0x8005db <twi_sendStop>
    2b80:	3f ef       	ldi	r19, 0xFF	; 255
    2b82:	30 93 70 05 	sts	0x0570, r19	; 0x800570 <twi_error>
    2b86:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <twi_masterBufferIndex>
    2b8a:	40 93 b4 05 	sts	0x05B4, r20	; 0x8005b4 <twi_masterBufferLength>
    2b8e:	56 2f       	mov	r21, r22
    2b90:	a6 eb       	ldi	r26, 0xB6	; 182
    2b92:	b5 e0       	ldi	r27, 0x05	; 5
    2b94:	fb 01       	movw	r30, r22
    2b96:	3e 2f       	mov	r19, r30
    2b98:	35 1b       	sub	r19, r21
    2b9a:	34 17       	cp	r19, r20
    2b9c:	18 f4       	brcc	.+6      	; 0x2ba4 <twi_writeTo+0x3e>
    2b9e:	31 91       	ld	r19, Z+
    2ba0:	3d 93       	st	X+, r19
    2ba2:	f9 cf       	rjmp	.-14     	; 0x2b96 <twi_writeTo+0x30>
    2ba4:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <twi_slarw>
    2ba8:	30 91 dc 05 	lds	r19, 0x05DC	; 0x8005dc <twi_slarw>
    2bac:	88 0f       	add	r24, r24
    2bae:	83 2b       	or	r24, r19
    2bb0:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <twi_slarw>
    2bb4:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <twi_inRepStart>
    2bb8:	81 30       	cpi	r24, 0x01	; 1
    2bba:	61 f4       	brne	.+24     	; 0x2bd4 <twi_writeTo+0x6e>
    2bbc:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <twi_inRepStart>
    2bc0:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <twi_slarw>
    2bc4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2bc8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2bcc:	83 fd       	sbrc	r24, 3
    2bce:	f8 cf       	rjmp	.-16     	; 0x2bc0 <twi_writeTo+0x5a>
    2bd0:	85 ec       	ldi	r24, 0xC5	; 197
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <twi_writeTo+0x70>
    2bd4:	85 ee       	ldi	r24, 0xE5	; 229
    2bd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2bda:	22 23       	and	r18, r18
    2bdc:	21 f0       	breq	.+8      	; 0x2be6 <twi_writeTo+0x80>
    2bde:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <twi_state>
    2be2:	82 30       	cpi	r24, 0x02	; 2
    2be4:	d1 f3       	breq	.-12     	; 0x2bda <twi_writeTo+0x74>
    2be6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <twi_error>
    2bea:	8f 3f       	cpi	r24, 0xFF	; 255
    2bec:	79 f0       	breq	.+30     	; 0x2c0c <twi_writeTo+0xa6>
    2bee:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <twi_error>
    2bf2:	80 32       	cpi	r24, 0x20	; 32
    2bf4:	41 f0       	breq	.+16     	; 0x2c06 <twi_writeTo+0xa0>
    2bf6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <twi_error>
    2bfa:	80 33       	cpi	r24, 0x30	; 48
    2bfc:	31 f0       	breq	.+12     	; 0x2c0a <twi_writeTo+0xa4>
    2bfe:	94 e0       	ldi	r25, 0x04	; 4
    2c00:	05 c0       	rjmp	.+10     	; 0x2c0c <twi_writeTo+0xa6>
    2c02:	91 e0       	ldi	r25, 0x01	; 1
    2c04:	03 c0       	rjmp	.+6      	; 0x2c0c <twi_writeTo+0xa6>
    2c06:	92 e0       	ldi	r25, 0x02	; 2
    2c08:	01 c0       	rjmp	.+2      	; 0x2c0c <twi_writeTo+0xa6>
    2c0a:	93 e0       	ldi	r25, 0x03	; 3
    2c0c:	89 2f       	mov	r24, r25
    2c0e:	0f 91       	pop	r16
    2c10:	08 95       	ret

00002c12 <twi_transmit>:
    2c12:	40 91 92 05 	lds	r20, 0x0592	; 0x800592 <twi_txBufferLength>
    2c16:	26 2f       	mov	r18, r22
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	24 0f       	add	r18, r20
    2c1c:	31 1d       	adc	r19, r1
    2c1e:	21 32       	cpi	r18, 0x21	; 33
    2c20:	31 05       	cpc	r19, r1
    2c22:	dc f4       	brge	.+54     	; 0x2c5a <twi_transmit+0x48>
    2c24:	20 91 dd 05 	lds	r18, 0x05DD	; 0x8005dd <twi_state>
    2c28:	24 30       	cpi	r18, 0x04	; 4
    2c2a:	c9 f4       	brne	.+50     	; 0x2c5e <twi_transmit+0x4c>
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	86 17       	cp	r24, r22
    2c34:	58 f4       	brcc	.+22     	; 0x2c4c <twi_transmit+0x3a>
    2c36:	30 91 92 05 	lds	r19, 0x0592	; 0x800592 <twi_txBufferLength>
    2c3a:	21 91       	ld	r18, Z+
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	ac 56       	subi	r26, 0x6C	; 108
    2c40:	ba 4f       	sbci	r27, 0xFA	; 250
    2c42:	a3 0f       	add	r26, r19
    2c44:	b1 1d       	adc	r27, r1
    2c46:	2c 93       	st	X, r18
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	f3 cf       	rjmp	.-26     	; 0x2c32 <twi_transmit+0x20>
    2c4c:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <twi_txBufferLength>
    2c50:	68 0f       	add	r22, r24
    2c52:	60 93 92 05 	sts	0x0592, r22	; 0x800592 <twi_txBufferLength>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	08 95       	ret
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	08 95       	ret
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	08 95       	ret

00002c62 <twi_attachSlaveRxEvent>:
    2c62:	90 93 d7 05 	sts	0x05D7, r25	; 0x8005d7 <twi_onSlaveReceive+0x1>
    2c66:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <twi_onSlaveReceive>
    2c6a:	08 95       	ret

00002c6c <twi_attachSlaveTxEvent>:
    2c6c:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <twi_onSlaveTransmit+0x1>
    2c70:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <twi_onSlaveTransmit>
    2c74:	08 95       	ret

00002c76 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2c76:	85 ed       	ldi	r24, 0xD5	; 213
    2c78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2c7c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2c80:	84 fd       	sbrc	r24, 4
    2c82:	fc cf       	rjmp	.-8      	; 0x2c7c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2c84:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <twi_state>
    2c88:	08 95       	ret

00002c8a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2c8a:	85 ec       	ldi	r24, 0xC5	; 197
    2c8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2c90:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <twi_state>
    2c94:	08 95       	ret

00002c96 <__vector_39>:
}

ISR(TWI_vect)
{
    2c96:	1f 92       	push	r1
    2c98:	0f 92       	push	r0
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	0f 92       	push	r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	0b b6       	in	r0, 0x3b	; 59
    2ca2:	0f 92       	push	r0
    2ca4:	2f 93       	push	r18
    2ca6:	3f 93       	push	r19
    2ca8:	4f 93       	push	r20
    2caa:	5f 93       	push	r21
    2cac:	6f 93       	push	r22
    2cae:	7f 93       	push	r23
    2cb0:	8f 93       	push	r24
    2cb2:	9f 93       	push	r25
    2cb4:	af 93       	push	r26
    2cb6:	bf 93       	push	r27
    2cb8:	ef 93       	push	r30
    2cba:	ff 93       	push	r31
  switch(TW_STATUS){
    2cbc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2cc0:	88 7f       	andi	r24, 0xF8	; 248
    2cc2:	80 36       	cpi	r24, 0x60	; 96
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <__vector_39+0x32>
    2cc6:	9d c0       	rjmp	.+314    	; 0x2e02 <__vector_39+0x16c>
    2cc8:	70 f5       	brcc	.+92     	; 0x2d26 <__vector_39+0x90>
    2cca:	88 32       	cpi	r24, 0x28	; 40
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <__vector_39+0x3a>
    2cce:	5c c0       	rjmp	.+184    	; 0x2d88 <__vector_39+0xf2>
    2cd0:	90 f4       	brcc	.+36     	; 0x2cf6 <__vector_39+0x60>
    2cd2:	80 31       	cpi	r24, 0x10	; 16
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <__vector_39+0x42>
    2cd6:	55 c0       	rjmp	.+170    	; 0x2d82 <__vector_39+0xec>
    2cd8:	38 f4       	brcc	.+14     	; 0x2ce8 <__vector_39+0x52>
    2cda:	88 23       	and	r24, r24
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <__vector_39+0x4a>
    2cde:	f3 c0       	rjmp	.+486    	; 0x2ec6 <__vector_39+0x230>
    2ce0:	88 30       	cpi	r24, 0x08	; 8
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <__vector_39+0x50>
    2ce4:	4e c0       	rjmp	.+156    	; 0x2d82 <__vector_39+0xec>
    2ce6:	f2 c0       	rjmp	.+484    	; 0x2ecc <__vector_39+0x236>
    2ce8:	88 31       	cpi	r24, 0x18	; 24
    2cea:	09 f4       	brne	.+2      	; 0x2cee <__vector_39+0x58>
    2cec:	4d c0       	rjmp	.+154    	; 0x2d88 <__vector_39+0xf2>
    2cee:	80 32       	cpi	r24, 0x20	; 32
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <__vector_39+0x5e>
    2cf2:	5e c0       	rjmp	.+188    	; 0x2db0 <__vector_39+0x11a>
    2cf4:	eb c0       	rjmp	.+470    	; 0x2ecc <__vector_39+0x236>
    2cf6:	80 34       	cpi	r24, 0x40	; 64
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <__vector_39+0x66>
    2cfa:	69 c0       	rjmp	.+210    	; 0x2dce <__vector_39+0x138>
    2cfc:	50 f4       	brcc	.+20     	; 0x2d12 <__vector_39+0x7c>
    2cfe:	80 33       	cpi	r24, 0x30	; 48
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <__vector_39+0x6e>
    2d02:	56 c0       	rjmp	.+172    	; 0x2db0 <__vector_39+0x11a>
    2d04:	88 33       	cpi	r24, 0x38	; 56
    2d06:	09 f0       	breq	.+2      	; 0x2d0a <__vector_39+0x74>
    2d08:	e1 c0       	rjmp	.+450    	; 0x2ecc <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2d0a:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <twi_error>
      twi_releaseBus();
    2d0e:	bd df       	rcall	.-134    	; 0x2c8a <twi_releaseBus>
      break;
    2d10:	dd c0       	rjmp	.+442    	; 0x2ecc <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2d12:	80 35       	cpi	r24, 0x50	; 80
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <__vector_39+0x82>
    2d16:	4f c0       	rjmp	.+158    	; 0x2db6 <__vector_39+0x120>
    2d18:	88 35       	cpi	r24, 0x58	; 88
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <__vector_39+0x88>
    2d1c:	5d c0       	rjmp	.+186    	; 0x2dd8 <__vector_39+0x142>
    2d1e:	88 34       	cpi	r24, 0x48	; 72
    2d20:	09 f0       	breq	.+2      	; 0x2d24 <__vector_39+0x8e>
    2d22:	d4 c0       	rjmp	.+424    	; 0x2ecc <__vector_39+0x236>
    2d24:	d2 c0       	rjmp	.+420    	; 0x2eca <__vector_39+0x234>
    2d26:	88 39       	cpi	r24, 0x98	; 152
    2d28:	09 f4       	brne	.+2      	; 0x2d2c <__vector_39+0x96>
    2d2a:	c3 c0       	rjmp	.+390    	; 0x2eb2 <__vector_39+0x21c>
    2d2c:	a8 f4       	brcc	.+42     	; 0x2d58 <__vector_39+0xc2>
    2d2e:	88 37       	cpi	r24, 0x78	; 120
    2d30:	09 f4       	brne	.+2      	; 0x2d34 <__vector_39+0x9e>
    2d32:	67 c0       	rjmp	.+206    	; 0x2e02 <__vector_39+0x16c>
    2d34:	38 f4       	brcc	.+14     	; 0x2d44 <__vector_39+0xae>
    2d36:	88 36       	cpi	r24, 0x68	; 104
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <__vector_39+0xa6>
    2d3a:	63 c0       	rjmp	.+198    	; 0x2e02 <__vector_39+0x16c>
    2d3c:	80 37       	cpi	r24, 0x70	; 112
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <__vector_39+0xac>
    2d40:	60 c0       	rjmp	.+192    	; 0x2e02 <__vector_39+0x16c>
    2d42:	c4 c0       	rjmp	.+392    	; 0x2ecc <__vector_39+0x236>
    2d44:	88 38       	cpi	r24, 0x88	; 136
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <__vector_39+0xb4>
    2d48:	b4 c0       	rjmp	.+360    	; 0x2eb2 <__vector_39+0x21c>
    2d4a:	80 39       	cpi	r24, 0x90	; 144
    2d4c:	09 f4       	brne	.+2      	; 0x2d50 <__vector_39+0xba>
    2d4e:	5f c0       	rjmp	.+190    	; 0x2e0e <__vector_39+0x178>
    2d50:	80 38       	cpi	r24, 0x80	; 128
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <__vector_39+0xc0>
    2d54:	bb c0       	rjmp	.+374    	; 0x2ecc <__vector_39+0x236>
    2d56:	5b c0       	rjmp	.+182    	; 0x2e0e <__vector_39+0x178>
    2d58:	80 3b       	cpi	r24, 0xB0	; 176
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <__vector_39+0xc8>
    2d5c:	82 c0       	rjmp	.+260    	; 0x2e62 <__vector_39+0x1cc>
    2d5e:	38 f4       	brcc	.+14     	; 0x2d6e <__vector_39+0xd8>
    2d60:	80 3a       	cpi	r24, 0xA0	; 160
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <__vector_39+0xd0>
    2d64:	66 c0       	rjmp	.+204    	; 0x2e32 <__vector_39+0x19c>
    2d66:	88 3a       	cpi	r24, 0xA8	; 168
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <__vector_39+0xd6>
    2d6a:	7b c0       	rjmp	.+246    	; 0x2e62 <__vector_39+0x1cc>
    2d6c:	af c0       	rjmp	.+350    	; 0x2ecc <__vector_39+0x236>
    2d6e:	80 3c       	cpi	r24, 0xC0	; 192
    2d70:	09 f4       	brne	.+2      	; 0x2d74 <__vector_39+0xde>
    2d72:	a3 c0       	rjmp	.+326    	; 0x2eba <__vector_39+0x224>
    2d74:	88 3c       	cpi	r24, 0xC8	; 200
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <__vector_39+0xe4>
    2d78:	a0 c0       	rjmp	.+320    	; 0x2eba <__vector_39+0x224>
    2d7a:	88 3b       	cpi	r24, 0xB8	; 184
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <__vector_39+0xea>
    2d7e:	86 c0       	rjmp	.+268    	; 0x2e8c <__vector_39+0x1f6>
    2d80:	a5 c0       	rjmp	.+330    	; 0x2ecc <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2d82:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <twi_slarw>
    2d86:	10 c0       	rjmp	.+32     	; 0x2da8 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2d88:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <twi_masterBufferIndex>
    2d8c:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <twi_masterBufferLength>
    2d90:	98 17       	cp	r25, r24
    2d92:	70 f5       	brcc	.+92     	; 0x2df0 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2d94:	e0 91 b5 05 	lds	r30, 0x05B5	; 0x8005b5 <twi_masterBufferIndex>
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	8e 0f       	add	r24, r30
    2d9c:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <twi_masterBufferIndex>
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	ea 54       	subi	r30, 0x4A	; 74
    2da4:	fa 4f       	sbci	r31, 0xFA	; 250
    2da6:	80 81       	ld	r24, Z
    2da8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2dac:	85 ec       	ldi	r24, 0xC5	; 197
    2dae:	82 c0       	rjmp	.+260    	; 0x2eb4 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2db0:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <twi_error>
    2db4:	8a c0       	rjmp	.+276    	; 0x2eca <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2db6:	e0 91 b5 05 	lds	r30, 0x05B5	; 0x8005b5 <twi_masterBufferIndex>
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	8e 0f       	add	r24, r30
    2dbe:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <twi_masterBufferIndex>
    2dc2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	ea 54       	subi	r30, 0x4A	; 74
    2dca:	fa 4f       	sbci	r31, 0xFA	; 250
    2dcc:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2dce:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <twi_masterBufferIndex>
    2dd2:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <twi_masterBufferLength>
    2dd6:	6a c0       	rjmp	.+212    	; 0x2eac <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2dd8:	e0 91 b5 05 	lds	r30, 0x05B5	; 0x8005b5 <twi_masterBufferIndex>
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	8e 0f       	add	r24, r30
    2de0:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <twi_masterBufferIndex>
    2de4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	ea 54       	subi	r30, 0x4A	; 74
    2dec:	fa 4f       	sbci	r31, 0xFA	; 250
    2dee:	80 83       	st	Z, r24
	if (twi_sendStop)
    2df0:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <twi_sendStop>
    2df4:	81 11       	cpse	r24, r1
    2df6:	69 c0       	rjmp	.+210    	; 0x2eca <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2dfe:	84 ea       	ldi	r24, 0xA4	; 164
    2e00:	5d c0       	rjmp	.+186    	; 0x2ebc <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2e02:	83 e0       	ldi	r24, 0x03	; 3
    2e04:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2e08:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <twi_rxBufferIndex>
    2e0c:	cf cf       	rjmp	.-98     	; 0x2dac <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e0e:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_rxBufferIndex>
    2e12:	80 32       	cpi	r24, 0x20	; 32
    2e14:	08 f0       	brcs	.+2      	; 0x2e18 <__vector_39+0x182>
    2e16:	4d c0       	rjmp	.+154    	; 0x2eb2 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2e18:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <twi_rxBufferIndex>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	8e 0f       	add	r24, r30
    2e20:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <twi_rxBufferIndex>
    2e24:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	ee 58       	subi	r30, 0x8E	; 142
    2e2c:	fa 4f       	sbci	r31, 0xFA	; 250
    2e2e:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2e30:	bd cf       	rjmp	.-134    	; 0x2dac <__vector_39+0x116>
    2e32:	2b df       	rcall	.-426    	; 0x2c8a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e34:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_rxBufferIndex>
    2e38:	80 32       	cpi	r24, 0x20	; 32
    2e3a:	30 f4       	brcc	.+12     	; 0x2e48 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2e3c:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <twi_rxBufferIndex>
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	ee 58       	subi	r30, 0x8E	; 142
    2e44:	fa 4f       	sbci	r31, 0xFA	; 250
    2e46:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2e48:	60 91 71 05 	lds	r22, 0x0571	; 0x800571 <twi_rxBufferIndex>
    2e4c:	70 e0       	ldi	r23, 0x00	; 0
    2e4e:	e0 91 d6 05 	lds	r30, 0x05D6	; 0x8005d6 <twi_onSlaveReceive>
    2e52:	f0 91 d7 05 	lds	r31, 0x05D7	; 0x8005d7 <twi_onSlaveReceive+0x1>
    2e56:	82 e7       	ldi	r24, 0x72	; 114
    2e58:	95 e0       	ldi	r25, 0x05	; 5
    2e5a:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2e5c:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <twi_rxBufferIndex>
      break;
    2e60:	35 c0       	rjmp	.+106    	; 0x2ecc <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2e62:	84 e0       	ldi	r24, 0x04	; 4
    2e64:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2e68:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2e6c:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2e70:	e0 91 d8 05 	lds	r30, 0x05D8	; 0x8005d8 <twi_onSlaveTransmit>
    2e74:	f0 91 d9 05 	lds	r31, 0x05D9	; 0x8005d9 <twi_onSlaveTransmit+0x1>
    2e78:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2e7a:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <twi_txBufferLength>
    2e7e:	81 11       	cpse	r24, r1
    2e80:	05 c0       	rjmp	.+10     	; 0x2e8c <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2e88:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2e8c:	e0 91 93 05 	lds	r30, 0x0593	; 0x800593 <twi_txBufferIndex>
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	8e 0f       	add	r24, r30
    2e94:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <twi_txBufferIndex>
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	ec 56       	subi	r30, 0x6C	; 108
    2e9c:	fa 4f       	sbci	r31, 0xFA	; 250
    2e9e:	80 81       	ld	r24, Z
    2ea0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2ea4:	90 91 93 05 	lds	r25, 0x0593	; 0x800593 <twi_txBufferIndex>
    2ea8:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <twi_txBufferLength>
    2eac:	98 17       	cp	r25, r24
    2eae:	08 f4       	brcc	.+2      	; 0x2eb2 <__vector_39+0x21c>
    2eb0:	7d cf       	rjmp	.-262    	; 0x2dac <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2eb2:	85 e8       	ldi	r24, 0x85	; 133
    2eb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2eb8:	09 c0       	rjmp	.+18     	; 0x2ecc <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2eba:	85 ec       	ldi	r24, 0xC5	; 197
    2ebc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2ec0:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <twi_state>
      break;
    2ec4:	03 c0       	rjmp	.+6      	; 0x2ecc <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2ec6:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <twi_error>
      twi_stop();
    2eca:	d5 de       	rcall	.-598    	; 0x2c76 <twi_stop>
      break;
  }
}
    2ecc:	ff 91       	pop	r31
    2ece:	ef 91       	pop	r30
    2ed0:	bf 91       	pop	r27
    2ed2:	af 91       	pop	r26
    2ed4:	9f 91       	pop	r25
    2ed6:	8f 91       	pop	r24
    2ed8:	7f 91       	pop	r23
    2eda:	6f 91       	pop	r22
    2edc:	5f 91       	pop	r21
    2ede:	4f 91       	pop	r20
    2ee0:	3f 91       	pop	r19
    2ee2:	2f 91       	pop	r18
    2ee4:	0f 90       	pop	r0
    2ee6:	0b be       	out	0x3b, r0	; 59
    2ee8:	0f 90       	pop	r0
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	0f 90       	pop	r0
    2eee:	1f 90       	pop	r1
    2ef0:	18 95       	reti

00002ef2 <__udivmodsi4>:
    2ef2:	a1 e2       	ldi	r26, 0x21	; 33
    2ef4:	1a 2e       	mov	r1, r26
    2ef6:	aa 1b       	sub	r26, r26
    2ef8:	bb 1b       	sub	r27, r27
    2efa:	fd 01       	movw	r30, r26
    2efc:	0d c0       	rjmp	.+26     	; 0x2f18 <__udivmodsi4_ep>

00002efe <__udivmodsi4_loop>:
    2efe:	aa 1f       	adc	r26, r26
    2f00:	bb 1f       	adc	r27, r27
    2f02:	ee 1f       	adc	r30, r30
    2f04:	ff 1f       	adc	r31, r31
    2f06:	a2 17       	cp	r26, r18
    2f08:	b3 07       	cpc	r27, r19
    2f0a:	e4 07       	cpc	r30, r20
    2f0c:	f5 07       	cpc	r31, r21
    2f0e:	20 f0       	brcs	.+8      	; 0x2f18 <__udivmodsi4_ep>
    2f10:	a2 1b       	sub	r26, r18
    2f12:	b3 0b       	sbc	r27, r19
    2f14:	e4 0b       	sbc	r30, r20
    2f16:	f5 0b       	sbc	r31, r21

00002f18 <__udivmodsi4_ep>:
    2f18:	66 1f       	adc	r22, r22
    2f1a:	77 1f       	adc	r23, r23
    2f1c:	88 1f       	adc	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	1a 94       	dec	r1
    2f22:	69 f7       	brne	.-38     	; 0x2efe <__udivmodsi4_loop>
    2f24:	60 95       	com	r22
    2f26:	70 95       	com	r23
    2f28:	80 95       	com	r24
    2f2a:	90 95       	com	r25
    2f2c:	9b 01       	movw	r18, r22
    2f2e:	ac 01       	movw	r20, r24
    2f30:	bd 01       	movw	r22, r26
    2f32:	cf 01       	movw	r24, r30
    2f34:	08 95       	ret

00002f36 <__tablejump2__>:
    2f36:	ee 0f       	add	r30, r30
    2f38:	ff 1f       	adc	r31, r31
    2f3a:	88 1f       	adc	r24, r24
    2f3c:	8b bf       	out	0x3b, r24	; 59
    2f3e:	07 90       	elpm	r0, Z+
    2f40:	f6 91       	elpm	r31, Z
    2f42:	e0 2d       	mov	r30, r0
    2f44:	19 94       	eijmp

00002f46 <malloc>:
    2f46:	0f 93       	push	r16
    2f48:	1f 93       	push	r17
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	82 30       	cpi	r24, 0x02	; 2
    2f50:	91 05       	cpc	r25, r1
    2f52:	10 f4       	brcc	.+4      	; 0x2f58 <malloc+0x12>
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	e0 91 e0 05 	lds	r30, 0x05E0	; 0x8005e0 <__flp>
    2f5c:	f0 91 e1 05 	lds	r31, 0x05E1	; 0x8005e1 <__flp+0x1>
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	a0 e0       	ldi	r26, 0x00	; 0
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	30 97       	sbiw	r30, 0x00	; 0
    2f6a:	19 f1       	breq	.+70     	; 0x2fb2 <malloc+0x6c>
    2f6c:	40 81       	ld	r20, Z
    2f6e:	51 81       	ldd	r21, Z+1	; 0x01
    2f70:	02 81       	ldd	r16, Z+2	; 0x02
    2f72:	13 81       	ldd	r17, Z+3	; 0x03
    2f74:	48 17       	cp	r20, r24
    2f76:	59 07       	cpc	r21, r25
    2f78:	c8 f0       	brcs	.+50     	; 0x2fac <malloc+0x66>
    2f7a:	84 17       	cp	r24, r20
    2f7c:	95 07       	cpc	r25, r21
    2f7e:	69 f4       	brne	.+26     	; 0x2f9a <malloc+0x54>
    2f80:	10 97       	sbiw	r26, 0x00	; 0
    2f82:	31 f0       	breq	.+12     	; 0x2f90 <malloc+0x4a>
    2f84:	12 96       	adiw	r26, 0x02	; 2
    2f86:	0c 93       	st	X, r16
    2f88:	12 97       	sbiw	r26, 0x02	; 2
    2f8a:	13 96       	adiw	r26, 0x03	; 3
    2f8c:	1c 93       	st	X, r17
    2f8e:	27 c0       	rjmp	.+78     	; 0x2fde <malloc+0x98>
    2f90:	00 93 e0 05 	sts	0x05E0, r16	; 0x8005e0 <__flp>
    2f94:	10 93 e1 05 	sts	0x05E1, r17	; 0x8005e1 <__flp+0x1>
    2f98:	22 c0       	rjmp	.+68     	; 0x2fde <malloc+0x98>
    2f9a:	21 15       	cp	r18, r1
    2f9c:	31 05       	cpc	r19, r1
    2f9e:	19 f0       	breq	.+6      	; 0x2fa6 <malloc+0x60>
    2fa0:	42 17       	cp	r20, r18
    2fa2:	53 07       	cpc	r21, r19
    2fa4:	18 f4       	brcc	.+6      	; 0x2fac <malloc+0x66>
    2fa6:	9a 01       	movw	r18, r20
    2fa8:	bd 01       	movw	r22, r26
    2faa:	ef 01       	movw	r28, r30
    2fac:	df 01       	movw	r26, r30
    2fae:	f8 01       	movw	r30, r16
    2fb0:	db cf       	rjmp	.-74     	; 0x2f68 <malloc+0x22>
    2fb2:	21 15       	cp	r18, r1
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	f9 f0       	breq	.+62     	; 0x2ff6 <malloc+0xb0>
    2fb8:	28 1b       	sub	r18, r24
    2fba:	39 0b       	sbc	r19, r25
    2fbc:	24 30       	cpi	r18, 0x04	; 4
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	80 f4       	brcc	.+32     	; 0x2fe2 <malloc+0x9c>
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc6:	61 15       	cp	r22, r1
    2fc8:	71 05       	cpc	r23, r1
    2fca:	21 f0       	breq	.+8      	; 0x2fd4 <malloc+0x8e>
    2fcc:	fb 01       	movw	r30, r22
    2fce:	93 83       	std	Z+3, r25	; 0x03
    2fd0:	82 83       	std	Z+2, r24	; 0x02
    2fd2:	04 c0       	rjmp	.+8      	; 0x2fdc <malloc+0x96>
    2fd4:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <__flp+0x1>
    2fd8:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <__flp>
    2fdc:	fe 01       	movw	r30, r28
    2fde:	32 96       	adiw	r30, 0x02	; 2
    2fe0:	44 c0       	rjmp	.+136    	; 0x306a <malloc+0x124>
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e2 0f       	add	r30, r18
    2fe6:	f3 1f       	adc	r31, r19
    2fe8:	81 93       	st	Z+, r24
    2fea:	91 93       	st	Z+, r25
    2fec:	22 50       	subi	r18, 0x02	; 2
    2fee:	31 09       	sbc	r19, r1
    2ff0:	39 83       	std	Y+1, r19	; 0x01
    2ff2:	28 83       	st	Y, r18
    2ff4:	3a c0       	rjmp	.+116    	; 0x306a <malloc+0x124>
    2ff6:	20 91 de 05 	lds	r18, 0x05DE	; 0x8005de <__brkval>
    2ffa:	30 91 df 05 	lds	r19, 0x05DF	; 0x8005df <__brkval+0x1>
    2ffe:	23 2b       	or	r18, r19
    3000:	41 f4       	brne	.+16     	; 0x3012 <malloc+0xcc>
    3002:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3006:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    300a:	30 93 df 05 	sts	0x05DF, r19	; 0x8005df <__brkval+0x1>
    300e:	20 93 de 05 	sts	0x05DE, r18	; 0x8005de <__brkval>
    3012:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3016:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    301a:	21 15       	cp	r18, r1
    301c:	31 05       	cpc	r19, r1
    301e:	41 f4       	brne	.+16     	; 0x3030 <malloc+0xea>
    3020:	2d b7       	in	r18, 0x3d	; 61
    3022:	3e b7       	in	r19, 0x3e	; 62
    3024:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3028:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    302c:	24 1b       	sub	r18, r20
    302e:	35 0b       	sbc	r19, r21
    3030:	e0 91 de 05 	lds	r30, 0x05DE	; 0x8005de <__brkval>
    3034:	f0 91 df 05 	lds	r31, 0x05DF	; 0x8005df <__brkval+0x1>
    3038:	e2 17       	cp	r30, r18
    303a:	f3 07       	cpc	r31, r19
    303c:	a0 f4       	brcc	.+40     	; 0x3066 <malloc+0x120>
    303e:	2e 1b       	sub	r18, r30
    3040:	3f 0b       	sbc	r19, r31
    3042:	28 17       	cp	r18, r24
    3044:	39 07       	cpc	r19, r25
    3046:	78 f0       	brcs	.+30     	; 0x3066 <malloc+0x120>
    3048:	ac 01       	movw	r20, r24
    304a:	4e 5f       	subi	r20, 0xFE	; 254
    304c:	5f 4f       	sbci	r21, 0xFF	; 255
    304e:	24 17       	cp	r18, r20
    3050:	35 07       	cpc	r19, r21
    3052:	48 f0       	brcs	.+18     	; 0x3066 <malloc+0x120>
    3054:	4e 0f       	add	r20, r30
    3056:	5f 1f       	adc	r21, r31
    3058:	50 93 df 05 	sts	0x05DF, r21	; 0x8005df <__brkval+0x1>
    305c:	40 93 de 05 	sts	0x05DE, r20	; 0x8005de <__brkval>
    3060:	81 93       	st	Z+, r24
    3062:	91 93       	st	Z+, r25
    3064:	02 c0       	rjmp	.+4      	; 0x306a <malloc+0x124>
    3066:	e0 e0       	ldi	r30, 0x00	; 0
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	cf 01       	movw	r24, r30
    306c:	df 91       	pop	r29
    306e:	cf 91       	pop	r28
    3070:	1f 91       	pop	r17
    3072:	0f 91       	pop	r16
    3074:	08 95       	ret

00003076 <free>:
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	00 97       	sbiw	r24, 0x00	; 0
    307c:	09 f4       	brne	.+2      	; 0x3080 <free+0xa>
    307e:	81 c0       	rjmp	.+258    	; 0x3182 <free+0x10c>
    3080:	fc 01       	movw	r30, r24
    3082:	32 97       	sbiw	r30, 0x02	; 2
    3084:	13 82       	std	Z+3, r1	; 0x03
    3086:	12 82       	std	Z+2, r1	; 0x02
    3088:	a0 91 e0 05 	lds	r26, 0x05E0	; 0x8005e0 <__flp>
    308c:	b0 91 e1 05 	lds	r27, 0x05E1	; 0x8005e1 <__flp+0x1>
    3090:	10 97       	sbiw	r26, 0x00	; 0
    3092:	81 f4       	brne	.+32     	; 0x30b4 <free+0x3e>
    3094:	20 81       	ld	r18, Z
    3096:	31 81       	ldd	r19, Z+1	; 0x01
    3098:	82 0f       	add	r24, r18
    309a:	93 1f       	adc	r25, r19
    309c:	20 91 de 05 	lds	r18, 0x05DE	; 0x8005de <__brkval>
    30a0:	30 91 df 05 	lds	r19, 0x05DF	; 0x8005df <__brkval+0x1>
    30a4:	28 17       	cp	r18, r24
    30a6:	39 07       	cpc	r19, r25
    30a8:	51 f5       	brne	.+84     	; 0x30fe <free+0x88>
    30aa:	f0 93 df 05 	sts	0x05DF, r31	; 0x8005df <__brkval+0x1>
    30ae:	e0 93 de 05 	sts	0x05DE, r30	; 0x8005de <__brkval>
    30b2:	67 c0       	rjmp	.+206    	; 0x3182 <free+0x10c>
    30b4:	ed 01       	movw	r28, r26
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	ce 17       	cp	r28, r30
    30bc:	df 07       	cpc	r29, r31
    30be:	40 f4       	brcc	.+16     	; 0x30d0 <free+0x5a>
    30c0:	4a 81       	ldd	r20, Y+2	; 0x02
    30c2:	5b 81       	ldd	r21, Y+3	; 0x03
    30c4:	9e 01       	movw	r18, r28
    30c6:	41 15       	cp	r20, r1
    30c8:	51 05       	cpc	r21, r1
    30ca:	f1 f0       	breq	.+60     	; 0x3108 <free+0x92>
    30cc:	ea 01       	movw	r28, r20
    30ce:	f5 cf       	rjmp	.-22     	; 0x30ba <free+0x44>
    30d0:	d3 83       	std	Z+3, r29	; 0x03
    30d2:	c2 83       	std	Z+2, r28	; 0x02
    30d4:	40 81       	ld	r20, Z
    30d6:	51 81       	ldd	r21, Z+1	; 0x01
    30d8:	84 0f       	add	r24, r20
    30da:	95 1f       	adc	r25, r21
    30dc:	c8 17       	cp	r28, r24
    30de:	d9 07       	cpc	r29, r25
    30e0:	59 f4       	brne	.+22     	; 0x30f8 <free+0x82>
    30e2:	88 81       	ld	r24, Y
    30e4:	99 81       	ldd	r25, Y+1	; 0x01
    30e6:	84 0f       	add	r24, r20
    30e8:	95 1f       	adc	r25, r21
    30ea:	02 96       	adiw	r24, 0x02	; 2
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	80 83       	st	Z, r24
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	9b 81       	ldd	r25, Y+3	; 0x03
    30f4:	93 83       	std	Z+3, r25	; 0x03
    30f6:	82 83       	std	Z+2, r24	; 0x02
    30f8:	21 15       	cp	r18, r1
    30fa:	31 05       	cpc	r19, r1
    30fc:	29 f4       	brne	.+10     	; 0x3108 <free+0x92>
    30fe:	f0 93 e1 05 	sts	0x05E1, r31	; 0x8005e1 <__flp+0x1>
    3102:	e0 93 e0 05 	sts	0x05E0, r30	; 0x8005e0 <__flp>
    3106:	3d c0       	rjmp	.+122    	; 0x3182 <free+0x10c>
    3108:	e9 01       	movw	r28, r18
    310a:	fb 83       	std	Y+3, r31	; 0x03
    310c:	ea 83       	std	Y+2, r30	; 0x02
    310e:	49 91       	ld	r20, Y+
    3110:	59 91       	ld	r21, Y+
    3112:	c4 0f       	add	r28, r20
    3114:	d5 1f       	adc	r29, r21
    3116:	ec 17       	cp	r30, r28
    3118:	fd 07       	cpc	r31, r29
    311a:	61 f4       	brne	.+24     	; 0x3134 <free+0xbe>
    311c:	80 81       	ld	r24, Z
    311e:	91 81       	ldd	r25, Z+1	; 0x01
    3120:	84 0f       	add	r24, r20
    3122:	95 1f       	adc	r25, r21
    3124:	02 96       	adiw	r24, 0x02	; 2
    3126:	e9 01       	movw	r28, r18
    3128:	99 83       	std	Y+1, r25	; 0x01
    312a:	88 83       	st	Y, r24
    312c:	82 81       	ldd	r24, Z+2	; 0x02
    312e:	93 81       	ldd	r25, Z+3	; 0x03
    3130:	9b 83       	std	Y+3, r25	; 0x03
    3132:	8a 83       	std	Y+2, r24	; 0x02
    3134:	e0 e0       	ldi	r30, 0x00	; 0
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	12 96       	adiw	r26, 0x02	; 2
    313a:	8d 91       	ld	r24, X+
    313c:	9c 91       	ld	r25, X
    313e:	13 97       	sbiw	r26, 0x03	; 3
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	19 f0       	breq	.+6      	; 0x314a <free+0xd4>
    3144:	fd 01       	movw	r30, r26
    3146:	dc 01       	movw	r26, r24
    3148:	f7 cf       	rjmp	.-18     	; 0x3138 <free+0xc2>
    314a:	8d 91       	ld	r24, X+
    314c:	9c 91       	ld	r25, X
    314e:	11 97       	sbiw	r26, 0x01	; 1
    3150:	9d 01       	movw	r18, r26
    3152:	2e 5f       	subi	r18, 0xFE	; 254
    3154:	3f 4f       	sbci	r19, 0xFF	; 255
    3156:	82 0f       	add	r24, r18
    3158:	93 1f       	adc	r25, r19
    315a:	20 91 de 05 	lds	r18, 0x05DE	; 0x8005de <__brkval>
    315e:	30 91 df 05 	lds	r19, 0x05DF	; 0x8005df <__brkval+0x1>
    3162:	28 17       	cp	r18, r24
    3164:	39 07       	cpc	r19, r25
    3166:	69 f4       	brne	.+26     	; 0x3182 <free+0x10c>
    3168:	30 97       	sbiw	r30, 0x00	; 0
    316a:	29 f4       	brne	.+10     	; 0x3176 <free+0x100>
    316c:	10 92 e1 05 	sts	0x05E1, r1	; 0x8005e1 <__flp+0x1>
    3170:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <__flp>
    3174:	02 c0       	rjmp	.+4      	; 0x317a <free+0x104>
    3176:	13 82       	std	Z+3, r1	; 0x03
    3178:	12 82       	std	Z+2, r1	; 0x02
    317a:	b0 93 df 05 	sts	0x05DF, r27	; 0x8005df <__brkval+0x1>
    317e:	a0 93 de 05 	sts	0x05DE, r26	; 0x8005de <__brkval>
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	08 95       	ret

00003188 <realloc>:
    3188:	6f 92       	push	r6
    318a:	7f 92       	push	r7
    318c:	8f 92       	push	r8
    318e:	9f 92       	push	r9
    3190:	af 92       	push	r10
    3192:	bf 92       	push	r11
    3194:	cf 92       	push	r12
    3196:	df 92       	push	r13
    3198:	ef 92       	push	r14
    319a:	ff 92       	push	r15
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	00 97       	sbiw	r24, 0x00	; 0
    31a6:	81 f4       	brne	.+32     	; 0x31c8 <realloc+0x40>
    31a8:	cb 01       	movw	r24, r22
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	1f 91       	pop	r17
    31b0:	0f 91       	pop	r16
    31b2:	ff 90       	pop	r15
    31b4:	ef 90       	pop	r14
    31b6:	df 90       	pop	r13
    31b8:	cf 90       	pop	r12
    31ba:	bf 90       	pop	r11
    31bc:	af 90       	pop	r10
    31be:	9f 90       	pop	r9
    31c0:	8f 90       	pop	r8
    31c2:	7f 90       	pop	r7
    31c4:	6f 90       	pop	r6
    31c6:	bf ce       	rjmp	.-642    	; 0x2f46 <malloc>
    31c8:	fc 01       	movw	r30, r24
    31ca:	e6 0f       	add	r30, r22
    31cc:	f7 1f       	adc	r31, r23
    31ce:	9c 01       	movw	r18, r24
    31d0:	22 50       	subi	r18, 0x02	; 2
    31d2:	31 09       	sbc	r19, r1
    31d4:	e2 17       	cp	r30, r18
    31d6:	f3 07       	cpc	r31, r19
    31d8:	08 f4       	brcc	.+2      	; 0x31dc <realloc+0x54>
    31da:	a5 c0       	rjmp	.+330    	; 0x3326 <realloc+0x19e>
    31dc:	ec 01       	movw	r28, r24
    31de:	d9 01       	movw	r26, r18
    31e0:	0d 91       	ld	r16, X+
    31e2:	1c 91       	ld	r17, X
    31e4:	11 97       	sbiw	r26, 0x01	; 1
    31e6:	06 17       	cp	r16, r22
    31e8:	17 07       	cpc	r17, r23
    31ea:	a8 f0       	brcs	.+42     	; 0x3216 <realloc+0x8e>
    31ec:	05 30       	cpi	r16, 0x05	; 5
    31ee:	11 05       	cpc	r17, r1
    31f0:	08 f4       	brcc	.+2      	; 0x31f4 <realloc+0x6c>
    31f2:	97 c0       	rjmp	.+302    	; 0x3322 <realloc+0x19a>
    31f4:	c8 01       	movw	r24, r16
    31f6:	04 97       	sbiw	r24, 0x04	; 4
    31f8:	86 17       	cp	r24, r22
    31fa:	97 07       	cpc	r25, r23
    31fc:	08 f4       	brcc	.+2      	; 0x3200 <realloc+0x78>
    31fe:	91 c0       	rjmp	.+290    	; 0x3322 <realloc+0x19a>
    3200:	02 50       	subi	r16, 0x02	; 2
    3202:	11 09       	sbc	r17, r1
    3204:	06 1b       	sub	r16, r22
    3206:	17 0b       	sbc	r17, r23
    3208:	01 93       	st	Z+, r16
    320a:	11 93       	st	Z+, r17
    320c:	6d 93       	st	X+, r22
    320e:	7c 93       	st	X, r23
    3210:	cf 01       	movw	r24, r30
    3212:	31 df       	rcall	.-414    	; 0x3076 <free>
    3214:	86 c0       	rjmp	.+268    	; 0x3322 <realloc+0x19a>
    3216:	5b 01       	movw	r10, r22
    3218:	a0 1a       	sub	r10, r16
    321a:	b1 0a       	sbc	r11, r17
    321c:	4c 01       	movw	r8, r24
    321e:	80 0e       	add	r8, r16
    3220:	91 1e       	adc	r9, r17
    3222:	a0 91 e0 05 	lds	r26, 0x05E0	; 0x8005e0 <__flp>
    3226:	b0 91 e1 05 	lds	r27, 0x05E1	; 0x8005e1 <__flp+0x1>
    322a:	61 2c       	mov	r6, r1
    322c:	71 2c       	mov	r7, r1
    322e:	e1 2c       	mov	r14, r1
    3230:	f1 2c       	mov	r15, r1
    3232:	10 97       	sbiw	r26, 0x00	; 0
    3234:	09 f4       	brne	.+2      	; 0x3238 <realloc+0xb0>
    3236:	46 c0       	rjmp	.+140    	; 0x32c4 <realloc+0x13c>
    3238:	8d 91       	ld	r24, X+
    323a:	9c 91       	ld	r25, X
    323c:	11 97       	sbiw	r26, 0x01	; 1
    323e:	a8 15       	cp	r26, r8
    3240:	b9 05       	cpc	r27, r9
    3242:	b1 f5       	brne	.+108    	; 0x32b0 <realloc+0x128>
    3244:	6c 01       	movw	r12, r24
    3246:	42 e0       	ldi	r20, 0x02	; 2
    3248:	c4 0e       	add	r12, r20
    324a:	d1 1c       	adc	r13, r1
    324c:	ca 14       	cp	r12, r10
    324e:	db 04       	cpc	r13, r11
    3250:	78 f1       	brcs	.+94     	; 0x32b0 <realloc+0x128>
    3252:	4c 01       	movw	r8, r24
    3254:	8a 18       	sub	r8, r10
    3256:	9b 08       	sbc	r9, r11
    3258:	64 01       	movw	r12, r8
    325a:	42 e0       	ldi	r20, 0x02	; 2
    325c:	c4 0e       	add	r12, r20
    325e:	d1 1c       	adc	r13, r1
    3260:	12 96       	adiw	r26, 0x02	; 2
    3262:	bc 90       	ld	r11, X
    3264:	12 97       	sbiw	r26, 0x02	; 2
    3266:	13 96       	adiw	r26, 0x03	; 3
    3268:	ac 91       	ld	r26, X
    326a:	b5 e0       	ldi	r27, 0x05	; 5
    326c:	cb 16       	cp	r12, r27
    326e:	d1 04       	cpc	r13, r1
    3270:	40 f0       	brcs	.+16     	; 0x3282 <realloc+0xfa>
    3272:	b2 82       	std	Z+2, r11	; 0x02
    3274:	a3 83       	std	Z+3, r26	; 0x03
    3276:	91 82       	std	Z+1, r9	; 0x01
    3278:	80 82       	st	Z, r8
    327a:	d9 01       	movw	r26, r18
    327c:	6d 93       	st	X+, r22
    327e:	7c 93       	st	X, r23
    3280:	09 c0       	rjmp	.+18     	; 0x3294 <realloc+0x10c>
    3282:	0e 5f       	subi	r16, 0xFE	; 254
    3284:	1f 4f       	sbci	r17, 0xFF	; 255
    3286:	80 0f       	add	r24, r16
    3288:	91 1f       	adc	r25, r17
    328a:	f9 01       	movw	r30, r18
    328c:	91 83       	std	Z+1, r25	; 0x01
    328e:	80 83       	st	Z, r24
    3290:	eb 2d       	mov	r30, r11
    3292:	fa 2f       	mov	r31, r26
    3294:	e1 14       	cp	r14, r1
    3296:	f1 04       	cpc	r15, r1
    3298:	31 f0       	breq	.+12     	; 0x32a6 <realloc+0x11e>
    329a:	d7 01       	movw	r26, r14
    329c:	13 96       	adiw	r26, 0x03	; 3
    329e:	fc 93       	st	X, r31
    32a0:	ee 93       	st	-X, r30
    32a2:	12 97       	sbiw	r26, 0x02	; 2
    32a4:	3e c0       	rjmp	.+124    	; 0x3322 <realloc+0x19a>
    32a6:	f0 93 e1 05 	sts	0x05E1, r31	; 0x8005e1 <__flp+0x1>
    32aa:	e0 93 e0 05 	sts	0x05E0, r30	; 0x8005e0 <__flp>
    32ae:	39 c0       	rjmp	.+114    	; 0x3322 <realloc+0x19a>
    32b0:	68 16       	cp	r6, r24
    32b2:	79 06       	cpc	r7, r25
    32b4:	08 f4       	brcc	.+2      	; 0x32b8 <realloc+0x130>
    32b6:	3c 01       	movw	r6, r24
    32b8:	7d 01       	movw	r14, r26
    32ba:	12 96       	adiw	r26, 0x02	; 2
    32bc:	0d 90       	ld	r0, X+
    32be:	bc 91       	ld	r27, X
    32c0:	a0 2d       	mov	r26, r0
    32c2:	b7 cf       	rjmp	.-146    	; 0x3232 <realloc+0xaa>
    32c4:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <__brkval>
    32c8:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <__brkval+0x1>
    32cc:	88 16       	cp	r8, r24
    32ce:	99 06       	cpc	r9, r25
    32d0:	e1 f4       	brne	.+56     	; 0x330a <realloc+0x182>
    32d2:	66 16       	cp	r6, r22
    32d4:	77 06       	cpc	r7, r23
    32d6:	c8 f4       	brcc	.+50     	; 0x330a <realloc+0x182>
    32d8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    32dc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	41 f4       	brne	.+16     	; 0x32f4 <realloc+0x16c>
    32e4:	8d b7       	in	r24, 0x3d	; 61
    32e6:	9e b7       	in	r25, 0x3e	; 62
    32e8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    32ec:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    32f0:	84 1b       	sub	r24, r20
    32f2:	95 0b       	sbc	r25, r21
    32f4:	e8 17       	cp	r30, r24
    32f6:	f9 07       	cpc	r31, r25
    32f8:	b0 f4       	brcc	.+44     	; 0x3326 <realloc+0x19e>
    32fa:	f0 93 df 05 	sts	0x05DF, r31	; 0x8005df <__brkval+0x1>
    32fe:	e0 93 de 05 	sts	0x05DE, r30	; 0x8005de <__brkval>
    3302:	f9 01       	movw	r30, r18
    3304:	71 83       	std	Z+1, r23	; 0x01
    3306:	60 83       	st	Z, r22
    3308:	0c c0       	rjmp	.+24     	; 0x3322 <realloc+0x19a>
    330a:	cb 01       	movw	r24, r22
    330c:	1c de       	rcall	.-968    	; 0x2f46 <malloc>
    330e:	7c 01       	movw	r14, r24
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	49 f0       	breq	.+18     	; 0x3326 <realloc+0x19e>
    3314:	a8 01       	movw	r20, r16
    3316:	be 01       	movw	r22, r28
    3318:	17 d0       	rcall	.+46     	; 0x3348 <memcpy>
    331a:	ce 01       	movw	r24, r28
    331c:	ac de       	rcall	.-680    	; 0x3076 <free>
    331e:	c7 01       	movw	r24, r14
    3320:	04 c0       	rjmp	.+8      	; 0x332a <realloc+0x1a2>
    3322:	ce 01       	movw	r24, r28
    3324:	02 c0       	rjmp	.+4      	; 0x332a <realloc+0x1a2>
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	1f 91       	pop	r17
    3330:	0f 91       	pop	r16
    3332:	ff 90       	pop	r15
    3334:	ef 90       	pop	r14
    3336:	df 90       	pop	r13
    3338:	cf 90       	pop	r12
    333a:	bf 90       	pop	r11
    333c:	af 90       	pop	r10
    333e:	9f 90       	pop	r9
    3340:	8f 90       	pop	r8
    3342:	7f 90       	pop	r7
    3344:	6f 90       	pop	r6
    3346:	08 95       	ret

00003348 <memcpy>:
    3348:	fb 01       	movw	r30, r22
    334a:	dc 01       	movw	r26, r24
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <memcpy+0xa>
    334e:	01 90       	ld	r0, Z+
    3350:	0d 92       	st	X+, r0
    3352:	41 50       	subi	r20, 0x01	; 1
    3354:	50 40       	sbci	r21, 0x00	; 0
    3356:	d8 f7       	brcc	.-10     	; 0x334e <memcpy+0x6>
    3358:	08 95       	ret

0000335a <strcpy>:
    335a:	fb 01       	movw	r30, r22
    335c:	dc 01       	movw	r26, r24
    335e:	01 90       	ld	r0, Z+
    3360:	0d 92       	st	X+, r0
    3362:	00 20       	and	r0, r0
    3364:	e1 f7       	brne	.-8      	; 0x335e <strcpy+0x4>
    3366:	08 95       	ret

00003368 <sprintf>:
    3368:	0f 93       	push	r16
    336a:	1f 93       	push	r17
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	2e 97       	sbiw	r28, 0x0e	; 14
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	0e 89       	ldd	r16, Y+22	; 0x16
    3382:	1f 89       	ldd	r17, Y+23	; 0x17
    3384:	86 e0       	ldi	r24, 0x06	; 6
    3386:	8c 83       	std	Y+4, r24	; 0x04
    3388:	1a 83       	std	Y+2, r17	; 0x02
    338a:	09 83       	std	Y+1, r16	; 0x01
    338c:	8f ef       	ldi	r24, 0xFF	; 255
    338e:	9f e7       	ldi	r25, 0x7F	; 127
    3390:	9e 83       	std	Y+6, r25	; 0x06
    3392:	8d 83       	std	Y+5, r24	; 0x05
    3394:	ae 01       	movw	r20, r28
    3396:	46 5e       	subi	r20, 0xE6	; 230
    3398:	5f 4f       	sbci	r21, 0xFF	; 255
    339a:	68 8d       	ldd	r22, Y+24	; 0x18
    339c:	79 8d       	ldd	r23, Y+25	; 0x19
    339e:	ce 01       	movw	r24, r28
    33a0:	01 96       	adiw	r24, 0x01	; 1
    33a2:	10 d0       	rcall	.+32     	; 0x33c4 <vfprintf>
    33a4:	ef 81       	ldd	r30, Y+7	; 0x07
    33a6:	f8 85       	ldd	r31, Y+8	; 0x08
    33a8:	e0 0f       	add	r30, r16
    33aa:	f1 1f       	adc	r31, r17
    33ac:	10 82       	st	Z, r1
    33ae:	2e 96       	adiw	r28, 0x0e	; 14
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	08 95       	ret

000033c4 <vfprintf>:
    33c4:	2f 92       	push	r2
    33c6:	3f 92       	push	r3
    33c8:	4f 92       	push	r4
    33ca:	5f 92       	push	r5
    33cc:	6f 92       	push	r6
    33ce:	7f 92       	push	r7
    33d0:	8f 92       	push	r8
    33d2:	9f 92       	push	r9
    33d4:	af 92       	push	r10
    33d6:	bf 92       	push	r11
    33d8:	cf 92       	push	r12
    33da:	df 92       	push	r13
    33dc:	ef 92       	push	r14
    33de:	ff 92       	push	r15
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	2b 97       	sbiw	r28, 0x0b	; 11
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	6c 01       	movw	r12, r24
    33fa:	7b 01       	movw	r14, r22
    33fc:	8a 01       	movw	r16, r20
    33fe:	fc 01       	movw	r30, r24
    3400:	17 82       	std	Z+7, r1	; 0x07
    3402:	16 82       	std	Z+6, r1	; 0x06
    3404:	83 81       	ldd	r24, Z+3	; 0x03
    3406:	81 ff       	sbrs	r24, 1
    3408:	bf c1       	rjmp	.+894    	; 0x3788 <vfprintf+0x3c4>
    340a:	ce 01       	movw	r24, r28
    340c:	01 96       	adiw	r24, 0x01	; 1
    340e:	3c 01       	movw	r6, r24
    3410:	f6 01       	movw	r30, r12
    3412:	93 81       	ldd	r25, Z+3	; 0x03
    3414:	f7 01       	movw	r30, r14
    3416:	93 fd       	sbrc	r25, 3
    3418:	85 91       	lpm	r24, Z+
    341a:	93 ff       	sbrs	r25, 3
    341c:	81 91       	ld	r24, Z+
    341e:	7f 01       	movw	r14, r30
    3420:	88 23       	and	r24, r24
    3422:	09 f4       	brne	.+2      	; 0x3426 <vfprintf+0x62>
    3424:	ad c1       	rjmp	.+858    	; 0x3780 <vfprintf+0x3bc>
    3426:	85 32       	cpi	r24, 0x25	; 37
    3428:	39 f4       	brne	.+14     	; 0x3438 <vfprintf+0x74>
    342a:	93 fd       	sbrc	r25, 3
    342c:	85 91       	lpm	r24, Z+
    342e:	93 ff       	sbrs	r25, 3
    3430:	81 91       	ld	r24, Z+
    3432:	7f 01       	movw	r14, r30
    3434:	85 32       	cpi	r24, 0x25	; 37
    3436:	21 f4       	brne	.+8      	; 0x3440 <vfprintf+0x7c>
    3438:	b6 01       	movw	r22, r12
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	d6 d1       	rcall	.+940    	; 0x37ea <fputc>
    343e:	e8 cf       	rjmp	.-48     	; 0x3410 <vfprintf+0x4c>
    3440:	91 2c       	mov	r9, r1
    3442:	21 2c       	mov	r2, r1
    3444:	31 2c       	mov	r3, r1
    3446:	ff e1       	ldi	r31, 0x1F	; 31
    3448:	f3 15       	cp	r31, r3
    344a:	d8 f0       	brcs	.+54     	; 0x3482 <vfprintf+0xbe>
    344c:	8b 32       	cpi	r24, 0x2B	; 43
    344e:	79 f0       	breq	.+30     	; 0x346e <vfprintf+0xaa>
    3450:	38 f4       	brcc	.+14     	; 0x3460 <vfprintf+0x9c>
    3452:	80 32       	cpi	r24, 0x20	; 32
    3454:	79 f0       	breq	.+30     	; 0x3474 <vfprintf+0xb0>
    3456:	83 32       	cpi	r24, 0x23	; 35
    3458:	a1 f4       	brne	.+40     	; 0x3482 <vfprintf+0xbe>
    345a:	23 2d       	mov	r18, r3
    345c:	20 61       	ori	r18, 0x10	; 16
    345e:	1d c0       	rjmp	.+58     	; 0x349a <vfprintf+0xd6>
    3460:	8d 32       	cpi	r24, 0x2D	; 45
    3462:	61 f0       	breq	.+24     	; 0x347c <vfprintf+0xb8>
    3464:	80 33       	cpi	r24, 0x30	; 48
    3466:	69 f4       	brne	.+26     	; 0x3482 <vfprintf+0xbe>
    3468:	23 2d       	mov	r18, r3
    346a:	21 60       	ori	r18, 0x01	; 1
    346c:	16 c0       	rjmp	.+44     	; 0x349a <vfprintf+0xd6>
    346e:	83 2d       	mov	r24, r3
    3470:	82 60       	ori	r24, 0x02	; 2
    3472:	38 2e       	mov	r3, r24
    3474:	e3 2d       	mov	r30, r3
    3476:	e4 60       	ori	r30, 0x04	; 4
    3478:	3e 2e       	mov	r3, r30
    347a:	2a c0       	rjmp	.+84     	; 0x34d0 <vfprintf+0x10c>
    347c:	f3 2d       	mov	r31, r3
    347e:	f8 60       	ori	r31, 0x08	; 8
    3480:	1d c0       	rjmp	.+58     	; 0x34bc <vfprintf+0xf8>
    3482:	37 fc       	sbrc	r3, 7
    3484:	2d c0       	rjmp	.+90     	; 0x34e0 <vfprintf+0x11c>
    3486:	20 ed       	ldi	r18, 0xD0	; 208
    3488:	28 0f       	add	r18, r24
    348a:	2a 30       	cpi	r18, 0x0A	; 10
    348c:	40 f0       	brcs	.+16     	; 0x349e <vfprintf+0xda>
    348e:	8e 32       	cpi	r24, 0x2E	; 46
    3490:	b9 f4       	brne	.+46     	; 0x34c0 <vfprintf+0xfc>
    3492:	36 fc       	sbrc	r3, 6
    3494:	75 c1       	rjmp	.+746    	; 0x3780 <vfprintf+0x3bc>
    3496:	23 2d       	mov	r18, r3
    3498:	20 64       	ori	r18, 0x40	; 64
    349a:	32 2e       	mov	r3, r18
    349c:	19 c0       	rjmp	.+50     	; 0x34d0 <vfprintf+0x10c>
    349e:	36 fe       	sbrs	r3, 6
    34a0:	06 c0       	rjmp	.+12     	; 0x34ae <vfprintf+0xea>
    34a2:	8a e0       	ldi	r24, 0x0A	; 10
    34a4:	98 9e       	mul	r9, r24
    34a6:	20 0d       	add	r18, r0
    34a8:	11 24       	eor	r1, r1
    34aa:	92 2e       	mov	r9, r18
    34ac:	11 c0       	rjmp	.+34     	; 0x34d0 <vfprintf+0x10c>
    34ae:	ea e0       	ldi	r30, 0x0A	; 10
    34b0:	2e 9e       	mul	r2, r30
    34b2:	20 0d       	add	r18, r0
    34b4:	11 24       	eor	r1, r1
    34b6:	22 2e       	mov	r2, r18
    34b8:	f3 2d       	mov	r31, r3
    34ba:	f0 62       	ori	r31, 0x20	; 32
    34bc:	3f 2e       	mov	r3, r31
    34be:	08 c0       	rjmp	.+16     	; 0x34d0 <vfprintf+0x10c>
    34c0:	8c 36       	cpi	r24, 0x6C	; 108
    34c2:	21 f4       	brne	.+8      	; 0x34cc <vfprintf+0x108>
    34c4:	83 2d       	mov	r24, r3
    34c6:	80 68       	ori	r24, 0x80	; 128
    34c8:	38 2e       	mov	r3, r24
    34ca:	02 c0       	rjmp	.+4      	; 0x34d0 <vfprintf+0x10c>
    34cc:	88 36       	cpi	r24, 0x68	; 104
    34ce:	41 f4       	brne	.+16     	; 0x34e0 <vfprintf+0x11c>
    34d0:	f7 01       	movw	r30, r14
    34d2:	93 fd       	sbrc	r25, 3
    34d4:	85 91       	lpm	r24, Z+
    34d6:	93 ff       	sbrs	r25, 3
    34d8:	81 91       	ld	r24, Z+
    34da:	7f 01       	movw	r14, r30
    34dc:	81 11       	cpse	r24, r1
    34de:	b3 cf       	rjmp	.-154    	; 0x3446 <vfprintf+0x82>
    34e0:	98 2f       	mov	r25, r24
    34e2:	9f 7d       	andi	r25, 0xDF	; 223
    34e4:	95 54       	subi	r25, 0x45	; 69
    34e6:	93 30       	cpi	r25, 0x03	; 3
    34e8:	28 f4       	brcc	.+10     	; 0x34f4 <vfprintf+0x130>
    34ea:	0c 5f       	subi	r16, 0xFC	; 252
    34ec:	1f 4f       	sbci	r17, 0xFF	; 255
    34ee:	9f e3       	ldi	r25, 0x3F	; 63
    34f0:	99 83       	std	Y+1, r25	; 0x01
    34f2:	0d c0       	rjmp	.+26     	; 0x350e <vfprintf+0x14a>
    34f4:	83 36       	cpi	r24, 0x63	; 99
    34f6:	31 f0       	breq	.+12     	; 0x3504 <vfprintf+0x140>
    34f8:	83 37       	cpi	r24, 0x73	; 115
    34fa:	71 f0       	breq	.+28     	; 0x3518 <vfprintf+0x154>
    34fc:	83 35       	cpi	r24, 0x53	; 83
    34fe:	09 f0       	breq	.+2      	; 0x3502 <vfprintf+0x13e>
    3500:	55 c0       	rjmp	.+170    	; 0x35ac <vfprintf+0x1e8>
    3502:	20 c0       	rjmp	.+64     	; 0x3544 <vfprintf+0x180>
    3504:	f8 01       	movw	r30, r16
    3506:	80 81       	ld	r24, Z
    3508:	89 83       	std	Y+1, r24	; 0x01
    350a:	0e 5f       	subi	r16, 0xFE	; 254
    350c:	1f 4f       	sbci	r17, 0xFF	; 255
    350e:	88 24       	eor	r8, r8
    3510:	83 94       	inc	r8
    3512:	91 2c       	mov	r9, r1
    3514:	53 01       	movw	r10, r6
    3516:	12 c0       	rjmp	.+36     	; 0x353c <vfprintf+0x178>
    3518:	28 01       	movw	r4, r16
    351a:	f2 e0       	ldi	r31, 0x02	; 2
    351c:	4f 0e       	add	r4, r31
    351e:	51 1c       	adc	r5, r1
    3520:	f8 01       	movw	r30, r16
    3522:	a0 80       	ld	r10, Z
    3524:	b1 80       	ldd	r11, Z+1	; 0x01
    3526:	36 fe       	sbrs	r3, 6
    3528:	03 c0       	rjmp	.+6      	; 0x3530 <vfprintf+0x16c>
    352a:	69 2d       	mov	r22, r9
    352c:	70 e0       	ldi	r23, 0x00	; 0
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <vfprintf+0x170>
    3530:	6f ef       	ldi	r22, 0xFF	; 255
    3532:	7f ef       	ldi	r23, 0xFF	; 255
    3534:	c5 01       	movw	r24, r10
    3536:	4e d1       	rcall	.+668    	; 0x37d4 <strnlen>
    3538:	4c 01       	movw	r8, r24
    353a:	82 01       	movw	r16, r4
    353c:	f3 2d       	mov	r31, r3
    353e:	ff 77       	andi	r31, 0x7F	; 127
    3540:	3f 2e       	mov	r3, r31
    3542:	15 c0       	rjmp	.+42     	; 0x356e <vfprintf+0x1aa>
    3544:	28 01       	movw	r4, r16
    3546:	22 e0       	ldi	r18, 0x02	; 2
    3548:	42 0e       	add	r4, r18
    354a:	51 1c       	adc	r5, r1
    354c:	f8 01       	movw	r30, r16
    354e:	a0 80       	ld	r10, Z
    3550:	b1 80       	ldd	r11, Z+1	; 0x01
    3552:	36 fe       	sbrs	r3, 6
    3554:	03 c0       	rjmp	.+6      	; 0x355c <vfprintf+0x198>
    3556:	69 2d       	mov	r22, r9
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	02 c0       	rjmp	.+4      	; 0x3560 <vfprintf+0x19c>
    355c:	6f ef       	ldi	r22, 0xFF	; 255
    355e:	7f ef       	ldi	r23, 0xFF	; 255
    3560:	c5 01       	movw	r24, r10
    3562:	2d d1       	rcall	.+602    	; 0x37be <strnlen_P>
    3564:	4c 01       	movw	r8, r24
    3566:	f3 2d       	mov	r31, r3
    3568:	f0 68       	ori	r31, 0x80	; 128
    356a:	3f 2e       	mov	r3, r31
    356c:	82 01       	movw	r16, r4
    356e:	33 fc       	sbrc	r3, 3
    3570:	19 c0       	rjmp	.+50     	; 0x35a4 <vfprintf+0x1e0>
    3572:	82 2d       	mov	r24, r2
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	88 16       	cp	r8, r24
    3578:	99 06       	cpc	r9, r25
    357a:	a0 f4       	brcc	.+40     	; 0x35a4 <vfprintf+0x1e0>
    357c:	b6 01       	movw	r22, r12
    357e:	80 e2       	ldi	r24, 0x20	; 32
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	33 d1       	rcall	.+614    	; 0x37ea <fputc>
    3584:	2a 94       	dec	r2
    3586:	f5 cf       	rjmp	.-22     	; 0x3572 <vfprintf+0x1ae>
    3588:	f5 01       	movw	r30, r10
    358a:	37 fc       	sbrc	r3, 7
    358c:	85 91       	lpm	r24, Z+
    358e:	37 fe       	sbrs	r3, 7
    3590:	81 91       	ld	r24, Z+
    3592:	5f 01       	movw	r10, r30
    3594:	b6 01       	movw	r22, r12
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	28 d1       	rcall	.+592    	; 0x37ea <fputc>
    359a:	21 10       	cpse	r2, r1
    359c:	2a 94       	dec	r2
    359e:	21 e0       	ldi	r18, 0x01	; 1
    35a0:	82 1a       	sub	r8, r18
    35a2:	91 08       	sbc	r9, r1
    35a4:	81 14       	cp	r8, r1
    35a6:	91 04       	cpc	r9, r1
    35a8:	79 f7       	brne	.-34     	; 0x3588 <vfprintf+0x1c4>
    35aa:	e1 c0       	rjmp	.+450    	; 0x376e <vfprintf+0x3aa>
    35ac:	84 36       	cpi	r24, 0x64	; 100
    35ae:	11 f0       	breq	.+4      	; 0x35b4 <vfprintf+0x1f0>
    35b0:	89 36       	cpi	r24, 0x69	; 105
    35b2:	39 f5       	brne	.+78     	; 0x3602 <vfprintf+0x23e>
    35b4:	f8 01       	movw	r30, r16
    35b6:	37 fe       	sbrs	r3, 7
    35b8:	07 c0       	rjmp	.+14     	; 0x35c8 <vfprintf+0x204>
    35ba:	60 81       	ld	r22, Z
    35bc:	71 81       	ldd	r23, Z+1	; 0x01
    35be:	82 81       	ldd	r24, Z+2	; 0x02
    35c0:	93 81       	ldd	r25, Z+3	; 0x03
    35c2:	0c 5f       	subi	r16, 0xFC	; 252
    35c4:	1f 4f       	sbci	r17, 0xFF	; 255
    35c6:	08 c0       	rjmp	.+16     	; 0x35d8 <vfprintf+0x214>
    35c8:	60 81       	ld	r22, Z
    35ca:	71 81       	ldd	r23, Z+1	; 0x01
    35cc:	07 2e       	mov	r0, r23
    35ce:	00 0c       	add	r0, r0
    35d0:	88 0b       	sbc	r24, r24
    35d2:	99 0b       	sbc	r25, r25
    35d4:	0e 5f       	subi	r16, 0xFE	; 254
    35d6:	1f 4f       	sbci	r17, 0xFF	; 255
    35d8:	f3 2d       	mov	r31, r3
    35da:	ff 76       	andi	r31, 0x6F	; 111
    35dc:	3f 2e       	mov	r3, r31
    35de:	97 ff       	sbrs	r25, 7
    35e0:	09 c0       	rjmp	.+18     	; 0x35f4 <vfprintf+0x230>
    35e2:	90 95       	com	r25
    35e4:	80 95       	com	r24
    35e6:	70 95       	com	r23
    35e8:	61 95       	neg	r22
    35ea:	7f 4f       	sbci	r23, 0xFF	; 255
    35ec:	8f 4f       	sbci	r24, 0xFF	; 255
    35ee:	9f 4f       	sbci	r25, 0xFF	; 255
    35f0:	f0 68       	ori	r31, 0x80	; 128
    35f2:	3f 2e       	mov	r3, r31
    35f4:	2a e0       	ldi	r18, 0x0A	; 10
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	a3 01       	movw	r20, r6
    35fa:	33 d1       	rcall	.+614    	; 0x3862 <__ultoa_invert>
    35fc:	88 2e       	mov	r8, r24
    35fe:	86 18       	sub	r8, r6
    3600:	44 c0       	rjmp	.+136    	; 0x368a <vfprintf+0x2c6>
    3602:	85 37       	cpi	r24, 0x75	; 117
    3604:	31 f4       	brne	.+12     	; 0x3612 <vfprintf+0x24e>
    3606:	23 2d       	mov	r18, r3
    3608:	2f 7e       	andi	r18, 0xEF	; 239
    360a:	b2 2e       	mov	r11, r18
    360c:	2a e0       	ldi	r18, 0x0A	; 10
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	25 c0       	rjmp	.+74     	; 0x365c <vfprintf+0x298>
    3612:	93 2d       	mov	r25, r3
    3614:	99 7f       	andi	r25, 0xF9	; 249
    3616:	b9 2e       	mov	r11, r25
    3618:	8f 36       	cpi	r24, 0x6F	; 111
    361a:	c1 f0       	breq	.+48     	; 0x364c <vfprintf+0x288>
    361c:	18 f4       	brcc	.+6      	; 0x3624 <vfprintf+0x260>
    361e:	88 35       	cpi	r24, 0x58	; 88
    3620:	79 f0       	breq	.+30     	; 0x3640 <vfprintf+0x27c>
    3622:	ae c0       	rjmp	.+348    	; 0x3780 <vfprintf+0x3bc>
    3624:	80 37       	cpi	r24, 0x70	; 112
    3626:	19 f0       	breq	.+6      	; 0x362e <vfprintf+0x26a>
    3628:	88 37       	cpi	r24, 0x78	; 120
    362a:	21 f0       	breq	.+8      	; 0x3634 <vfprintf+0x270>
    362c:	a9 c0       	rjmp	.+338    	; 0x3780 <vfprintf+0x3bc>
    362e:	e9 2f       	mov	r30, r25
    3630:	e0 61       	ori	r30, 0x10	; 16
    3632:	be 2e       	mov	r11, r30
    3634:	b4 fe       	sbrs	r11, 4
    3636:	0d c0       	rjmp	.+26     	; 0x3652 <vfprintf+0x28e>
    3638:	fb 2d       	mov	r31, r11
    363a:	f4 60       	ori	r31, 0x04	; 4
    363c:	bf 2e       	mov	r11, r31
    363e:	09 c0       	rjmp	.+18     	; 0x3652 <vfprintf+0x28e>
    3640:	34 fe       	sbrs	r3, 4
    3642:	0a c0       	rjmp	.+20     	; 0x3658 <vfprintf+0x294>
    3644:	29 2f       	mov	r18, r25
    3646:	26 60       	ori	r18, 0x06	; 6
    3648:	b2 2e       	mov	r11, r18
    364a:	06 c0       	rjmp	.+12     	; 0x3658 <vfprintf+0x294>
    364c:	28 e0       	ldi	r18, 0x08	; 8
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	05 c0       	rjmp	.+10     	; 0x365c <vfprintf+0x298>
    3652:	20 e1       	ldi	r18, 0x10	; 16
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	02 c0       	rjmp	.+4      	; 0x365c <vfprintf+0x298>
    3658:	20 e1       	ldi	r18, 0x10	; 16
    365a:	32 e0       	ldi	r19, 0x02	; 2
    365c:	f8 01       	movw	r30, r16
    365e:	b7 fe       	sbrs	r11, 7
    3660:	07 c0       	rjmp	.+14     	; 0x3670 <vfprintf+0x2ac>
    3662:	60 81       	ld	r22, Z
    3664:	71 81       	ldd	r23, Z+1	; 0x01
    3666:	82 81       	ldd	r24, Z+2	; 0x02
    3668:	93 81       	ldd	r25, Z+3	; 0x03
    366a:	0c 5f       	subi	r16, 0xFC	; 252
    366c:	1f 4f       	sbci	r17, 0xFF	; 255
    366e:	06 c0       	rjmp	.+12     	; 0x367c <vfprintf+0x2b8>
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	0e 5f       	subi	r16, 0xFE	; 254
    367a:	1f 4f       	sbci	r17, 0xFF	; 255
    367c:	a3 01       	movw	r20, r6
    367e:	f1 d0       	rcall	.+482    	; 0x3862 <__ultoa_invert>
    3680:	88 2e       	mov	r8, r24
    3682:	86 18       	sub	r8, r6
    3684:	fb 2d       	mov	r31, r11
    3686:	ff 77       	andi	r31, 0x7F	; 127
    3688:	3f 2e       	mov	r3, r31
    368a:	36 fe       	sbrs	r3, 6
    368c:	0d c0       	rjmp	.+26     	; 0x36a8 <vfprintf+0x2e4>
    368e:	23 2d       	mov	r18, r3
    3690:	2e 7f       	andi	r18, 0xFE	; 254
    3692:	a2 2e       	mov	r10, r18
    3694:	89 14       	cp	r8, r9
    3696:	58 f4       	brcc	.+22     	; 0x36ae <vfprintf+0x2ea>
    3698:	34 fe       	sbrs	r3, 4
    369a:	0b c0       	rjmp	.+22     	; 0x36b2 <vfprintf+0x2ee>
    369c:	32 fc       	sbrc	r3, 2
    369e:	09 c0       	rjmp	.+18     	; 0x36b2 <vfprintf+0x2ee>
    36a0:	83 2d       	mov	r24, r3
    36a2:	8e 7e       	andi	r24, 0xEE	; 238
    36a4:	a8 2e       	mov	r10, r24
    36a6:	05 c0       	rjmp	.+10     	; 0x36b2 <vfprintf+0x2ee>
    36a8:	b8 2c       	mov	r11, r8
    36aa:	a3 2c       	mov	r10, r3
    36ac:	03 c0       	rjmp	.+6      	; 0x36b4 <vfprintf+0x2f0>
    36ae:	b8 2c       	mov	r11, r8
    36b0:	01 c0       	rjmp	.+2      	; 0x36b4 <vfprintf+0x2f0>
    36b2:	b9 2c       	mov	r11, r9
    36b4:	a4 fe       	sbrs	r10, 4
    36b6:	0f c0       	rjmp	.+30     	; 0x36d6 <vfprintf+0x312>
    36b8:	fe 01       	movw	r30, r28
    36ba:	e8 0d       	add	r30, r8
    36bc:	f1 1d       	adc	r31, r1
    36be:	80 81       	ld	r24, Z
    36c0:	80 33       	cpi	r24, 0x30	; 48
    36c2:	21 f4       	brne	.+8      	; 0x36cc <vfprintf+0x308>
    36c4:	9a 2d       	mov	r25, r10
    36c6:	99 7e       	andi	r25, 0xE9	; 233
    36c8:	a9 2e       	mov	r10, r25
    36ca:	09 c0       	rjmp	.+18     	; 0x36de <vfprintf+0x31a>
    36cc:	a2 fe       	sbrs	r10, 2
    36ce:	06 c0       	rjmp	.+12     	; 0x36dc <vfprintf+0x318>
    36d0:	b3 94       	inc	r11
    36d2:	b3 94       	inc	r11
    36d4:	04 c0       	rjmp	.+8      	; 0x36de <vfprintf+0x31a>
    36d6:	8a 2d       	mov	r24, r10
    36d8:	86 78       	andi	r24, 0x86	; 134
    36da:	09 f0       	breq	.+2      	; 0x36de <vfprintf+0x31a>
    36dc:	b3 94       	inc	r11
    36de:	a3 fc       	sbrc	r10, 3
    36e0:	10 c0       	rjmp	.+32     	; 0x3702 <vfprintf+0x33e>
    36e2:	a0 fe       	sbrs	r10, 0
    36e4:	06 c0       	rjmp	.+12     	; 0x36f2 <vfprintf+0x32e>
    36e6:	b2 14       	cp	r11, r2
    36e8:	80 f4       	brcc	.+32     	; 0x370a <vfprintf+0x346>
    36ea:	28 0c       	add	r2, r8
    36ec:	92 2c       	mov	r9, r2
    36ee:	9b 18       	sub	r9, r11
    36f0:	0d c0       	rjmp	.+26     	; 0x370c <vfprintf+0x348>
    36f2:	b2 14       	cp	r11, r2
    36f4:	58 f4       	brcc	.+22     	; 0x370c <vfprintf+0x348>
    36f6:	b6 01       	movw	r22, r12
    36f8:	80 e2       	ldi	r24, 0x20	; 32
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	76 d0       	rcall	.+236    	; 0x37ea <fputc>
    36fe:	b3 94       	inc	r11
    3700:	f8 cf       	rjmp	.-16     	; 0x36f2 <vfprintf+0x32e>
    3702:	b2 14       	cp	r11, r2
    3704:	18 f4       	brcc	.+6      	; 0x370c <vfprintf+0x348>
    3706:	2b 18       	sub	r2, r11
    3708:	02 c0       	rjmp	.+4      	; 0x370e <vfprintf+0x34a>
    370a:	98 2c       	mov	r9, r8
    370c:	21 2c       	mov	r2, r1
    370e:	a4 fe       	sbrs	r10, 4
    3710:	0f c0       	rjmp	.+30     	; 0x3730 <vfprintf+0x36c>
    3712:	b6 01       	movw	r22, r12
    3714:	80 e3       	ldi	r24, 0x30	; 48
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	68 d0       	rcall	.+208    	; 0x37ea <fputc>
    371a:	a2 fe       	sbrs	r10, 2
    371c:	16 c0       	rjmp	.+44     	; 0x374a <vfprintf+0x386>
    371e:	a1 fc       	sbrc	r10, 1
    3720:	03 c0       	rjmp	.+6      	; 0x3728 <vfprintf+0x364>
    3722:	88 e7       	ldi	r24, 0x78	; 120
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	02 c0       	rjmp	.+4      	; 0x372c <vfprintf+0x368>
    3728:	88 e5       	ldi	r24, 0x58	; 88
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	b6 01       	movw	r22, r12
    372e:	0c c0       	rjmp	.+24     	; 0x3748 <vfprintf+0x384>
    3730:	8a 2d       	mov	r24, r10
    3732:	86 78       	andi	r24, 0x86	; 134
    3734:	51 f0       	breq	.+20     	; 0x374a <vfprintf+0x386>
    3736:	a1 fe       	sbrs	r10, 1
    3738:	02 c0       	rjmp	.+4      	; 0x373e <vfprintf+0x37a>
    373a:	8b e2       	ldi	r24, 0x2B	; 43
    373c:	01 c0       	rjmp	.+2      	; 0x3740 <vfprintf+0x37c>
    373e:	80 e2       	ldi	r24, 0x20	; 32
    3740:	a7 fc       	sbrc	r10, 7
    3742:	8d e2       	ldi	r24, 0x2D	; 45
    3744:	b6 01       	movw	r22, r12
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	50 d0       	rcall	.+160    	; 0x37ea <fputc>
    374a:	89 14       	cp	r8, r9
    374c:	30 f4       	brcc	.+12     	; 0x375a <vfprintf+0x396>
    374e:	b6 01       	movw	r22, r12
    3750:	80 e3       	ldi	r24, 0x30	; 48
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	4a d0       	rcall	.+148    	; 0x37ea <fputc>
    3756:	9a 94       	dec	r9
    3758:	f8 cf       	rjmp	.-16     	; 0x374a <vfprintf+0x386>
    375a:	8a 94       	dec	r8
    375c:	f3 01       	movw	r30, r6
    375e:	e8 0d       	add	r30, r8
    3760:	f1 1d       	adc	r31, r1
    3762:	80 81       	ld	r24, Z
    3764:	b6 01       	movw	r22, r12
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	40 d0       	rcall	.+128    	; 0x37ea <fputc>
    376a:	81 10       	cpse	r8, r1
    376c:	f6 cf       	rjmp	.-20     	; 0x375a <vfprintf+0x396>
    376e:	22 20       	and	r2, r2
    3770:	09 f4       	brne	.+2      	; 0x3774 <vfprintf+0x3b0>
    3772:	4e ce       	rjmp	.-868    	; 0x3410 <vfprintf+0x4c>
    3774:	b6 01       	movw	r22, r12
    3776:	80 e2       	ldi	r24, 0x20	; 32
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	37 d0       	rcall	.+110    	; 0x37ea <fputc>
    377c:	2a 94       	dec	r2
    377e:	f7 cf       	rjmp	.-18     	; 0x376e <vfprintf+0x3aa>
    3780:	f6 01       	movw	r30, r12
    3782:	86 81       	ldd	r24, Z+6	; 0x06
    3784:	97 81       	ldd	r25, Z+7	; 0x07
    3786:	02 c0       	rjmp	.+4      	; 0x378c <vfprintf+0x3c8>
    3788:	8f ef       	ldi	r24, 0xFF	; 255
    378a:	9f ef       	ldi	r25, 0xFF	; 255
    378c:	2b 96       	adiw	r28, 0x0b	; 11
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	f8 94       	cli
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	1f 91       	pop	r17
    379e:	0f 91       	pop	r16
    37a0:	ff 90       	pop	r15
    37a2:	ef 90       	pop	r14
    37a4:	df 90       	pop	r13
    37a6:	cf 90       	pop	r12
    37a8:	bf 90       	pop	r11
    37aa:	af 90       	pop	r10
    37ac:	9f 90       	pop	r9
    37ae:	8f 90       	pop	r8
    37b0:	7f 90       	pop	r7
    37b2:	6f 90       	pop	r6
    37b4:	5f 90       	pop	r5
    37b6:	4f 90       	pop	r4
    37b8:	3f 90       	pop	r3
    37ba:	2f 90       	pop	r2
    37bc:	08 95       	ret

000037be <strnlen_P>:
    37be:	fc 01       	movw	r30, r24
    37c0:	05 90       	lpm	r0, Z+
    37c2:	61 50       	subi	r22, 0x01	; 1
    37c4:	70 40       	sbci	r23, 0x00	; 0
    37c6:	01 10       	cpse	r0, r1
    37c8:	d8 f7       	brcc	.-10     	; 0x37c0 <strnlen_P+0x2>
    37ca:	80 95       	com	r24
    37cc:	90 95       	com	r25
    37ce:	8e 0f       	add	r24, r30
    37d0:	9f 1f       	adc	r25, r31
    37d2:	08 95       	ret

000037d4 <strnlen>:
    37d4:	fc 01       	movw	r30, r24
    37d6:	61 50       	subi	r22, 0x01	; 1
    37d8:	70 40       	sbci	r23, 0x00	; 0
    37da:	01 90       	ld	r0, Z+
    37dc:	01 10       	cpse	r0, r1
    37de:	d8 f7       	brcc	.-10     	; 0x37d6 <strnlen+0x2>
    37e0:	80 95       	com	r24
    37e2:	90 95       	com	r25
    37e4:	8e 0f       	add	r24, r30
    37e6:	9f 1f       	adc	r25, r31
    37e8:	08 95       	ret

000037ea <fputc>:
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	fb 01       	movw	r30, r22
    37f4:	23 81       	ldd	r18, Z+3	; 0x03
    37f6:	21 fd       	sbrc	r18, 1
    37f8:	03 c0       	rjmp	.+6      	; 0x3800 <fputc+0x16>
    37fa:	8f ef       	ldi	r24, 0xFF	; 255
    37fc:	9f ef       	ldi	r25, 0xFF	; 255
    37fe:	2c c0       	rjmp	.+88     	; 0x3858 <fputc+0x6e>
    3800:	22 ff       	sbrs	r18, 2
    3802:	16 c0       	rjmp	.+44     	; 0x3830 <fputc+0x46>
    3804:	46 81       	ldd	r20, Z+6	; 0x06
    3806:	57 81       	ldd	r21, Z+7	; 0x07
    3808:	24 81       	ldd	r18, Z+4	; 0x04
    380a:	35 81       	ldd	r19, Z+5	; 0x05
    380c:	42 17       	cp	r20, r18
    380e:	53 07       	cpc	r21, r19
    3810:	44 f4       	brge	.+16     	; 0x3822 <fputc+0x38>
    3812:	a0 81       	ld	r26, Z
    3814:	b1 81       	ldd	r27, Z+1	; 0x01
    3816:	9d 01       	movw	r18, r26
    3818:	2f 5f       	subi	r18, 0xFF	; 255
    381a:	3f 4f       	sbci	r19, 0xFF	; 255
    381c:	31 83       	std	Z+1, r19	; 0x01
    381e:	20 83       	st	Z, r18
    3820:	8c 93       	st	X, r24
    3822:	26 81       	ldd	r18, Z+6	; 0x06
    3824:	37 81       	ldd	r19, Z+7	; 0x07
    3826:	2f 5f       	subi	r18, 0xFF	; 255
    3828:	3f 4f       	sbci	r19, 0xFF	; 255
    382a:	37 83       	std	Z+7, r19	; 0x07
    382c:	26 83       	std	Z+6, r18	; 0x06
    382e:	14 c0       	rjmp	.+40     	; 0x3858 <fputc+0x6e>
    3830:	8b 01       	movw	r16, r22
    3832:	ec 01       	movw	r28, r24
    3834:	fb 01       	movw	r30, r22
    3836:	00 84       	ldd	r0, Z+8	; 0x08
    3838:	f1 85       	ldd	r31, Z+9	; 0x09
    383a:	e0 2d       	mov	r30, r0
    383c:	19 95       	eicall
    383e:	89 2b       	or	r24, r25
    3840:	e1 f6       	brne	.-72     	; 0x37fa <fputc+0x10>
    3842:	d8 01       	movw	r26, r16
    3844:	16 96       	adiw	r26, 0x06	; 6
    3846:	8d 91       	ld	r24, X+
    3848:	9c 91       	ld	r25, X
    384a:	17 97       	sbiw	r26, 0x07	; 7
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	17 96       	adiw	r26, 0x07	; 7
    3850:	9c 93       	st	X, r25
    3852:	8e 93       	st	-X, r24
    3854:	16 97       	sbiw	r26, 0x06	; 6
    3856:	ce 01       	movw	r24, r28
    3858:	df 91       	pop	r29
    385a:	cf 91       	pop	r28
    385c:	1f 91       	pop	r17
    385e:	0f 91       	pop	r16
    3860:	08 95       	ret

00003862 <__ultoa_invert>:
    3862:	fa 01       	movw	r30, r20
    3864:	aa 27       	eor	r26, r26
    3866:	28 30       	cpi	r18, 0x08	; 8
    3868:	51 f1       	breq	.+84     	; 0x38be <__ultoa_invert+0x5c>
    386a:	20 31       	cpi	r18, 0x10	; 16
    386c:	81 f1       	breq	.+96     	; 0x38ce <__ultoa_invert+0x6c>
    386e:	e8 94       	clt
    3870:	6f 93       	push	r22
    3872:	6e 7f       	andi	r22, 0xFE	; 254
    3874:	6e 5f       	subi	r22, 0xFE	; 254
    3876:	7f 4f       	sbci	r23, 0xFF	; 255
    3878:	8f 4f       	sbci	r24, 0xFF	; 255
    387a:	9f 4f       	sbci	r25, 0xFF	; 255
    387c:	af 4f       	sbci	r26, 0xFF	; 255
    387e:	b1 e0       	ldi	r27, 0x01	; 1
    3880:	3e d0       	rcall	.+124    	; 0x38fe <__ultoa_invert+0x9c>
    3882:	b4 e0       	ldi	r27, 0x04	; 4
    3884:	3c d0       	rcall	.+120    	; 0x38fe <__ultoa_invert+0x9c>
    3886:	67 0f       	add	r22, r23
    3888:	78 1f       	adc	r23, r24
    388a:	89 1f       	adc	r24, r25
    388c:	9a 1f       	adc	r25, r26
    388e:	a1 1d       	adc	r26, r1
    3890:	68 0f       	add	r22, r24
    3892:	79 1f       	adc	r23, r25
    3894:	8a 1f       	adc	r24, r26
    3896:	91 1d       	adc	r25, r1
    3898:	a1 1d       	adc	r26, r1
    389a:	6a 0f       	add	r22, r26
    389c:	71 1d       	adc	r23, r1
    389e:	81 1d       	adc	r24, r1
    38a0:	91 1d       	adc	r25, r1
    38a2:	a1 1d       	adc	r26, r1
    38a4:	20 d0       	rcall	.+64     	; 0x38e6 <__ultoa_invert+0x84>
    38a6:	09 f4       	brne	.+2      	; 0x38aa <__ultoa_invert+0x48>
    38a8:	68 94       	set
    38aa:	3f 91       	pop	r19
    38ac:	2a e0       	ldi	r18, 0x0A	; 10
    38ae:	26 9f       	mul	r18, r22
    38b0:	11 24       	eor	r1, r1
    38b2:	30 19       	sub	r19, r0
    38b4:	30 5d       	subi	r19, 0xD0	; 208
    38b6:	31 93       	st	Z+, r19
    38b8:	de f6       	brtc	.-74     	; 0x3870 <__ultoa_invert+0xe>
    38ba:	cf 01       	movw	r24, r30
    38bc:	08 95       	ret
    38be:	46 2f       	mov	r20, r22
    38c0:	47 70       	andi	r20, 0x07	; 7
    38c2:	40 5d       	subi	r20, 0xD0	; 208
    38c4:	41 93       	st	Z+, r20
    38c6:	b3 e0       	ldi	r27, 0x03	; 3
    38c8:	0f d0       	rcall	.+30     	; 0x38e8 <__ultoa_invert+0x86>
    38ca:	c9 f7       	brne	.-14     	; 0x38be <__ultoa_invert+0x5c>
    38cc:	f6 cf       	rjmp	.-20     	; 0x38ba <__ultoa_invert+0x58>
    38ce:	46 2f       	mov	r20, r22
    38d0:	4f 70       	andi	r20, 0x0F	; 15
    38d2:	40 5d       	subi	r20, 0xD0	; 208
    38d4:	4a 33       	cpi	r20, 0x3A	; 58
    38d6:	18 f0       	brcs	.+6      	; 0x38de <__ultoa_invert+0x7c>
    38d8:	49 5d       	subi	r20, 0xD9	; 217
    38da:	31 fd       	sbrc	r19, 1
    38dc:	40 52       	subi	r20, 0x20	; 32
    38de:	41 93       	st	Z+, r20
    38e0:	02 d0       	rcall	.+4      	; 0x38e6 <__ultoa_invert+0x84>
    38e2:	a9 f7       	brne	.-22     	; 0x38ce <__ultoa_invert+0x6c>
    38e4:	ea cf       	rjmp	.-44     	; 0x38ba <__ultoa_invert+0x58>
    38e6:	b4 e0       	ldi	r27, 0x04	; 4
    38e8:	a6 95       	lsr	r26
    38ea:	97 95       	ror	r25
    38ec:	87 95       	ror	r24
    38ee:	77 95       	ror	r23
    38f0:	67 95       	ror	r22
    38f2:	ba 95       	dec	r27
    38f4:	c9 f7       	brne	.-14     	; 0x38e8 <__ultoa_invert+0x86>
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	61 05       	cpc	r22, r1
    38fa:	71 05       	cpc	r23, r1
    38fc:	08 95       	ret
    38fe:	9b 01       	movw	r18, r22
    3900:	ac 01       	movw	r20, r24
    3902:	0a 2e       	mov	r0, r26
    3904:	06 94       	lsr	r0
    3906:	57 95       	ror	r21
    3908:	47 95       	ror	r20
    390a:	37 95       	ror	r19
    390c:	27 95       	ror	r18
    390e:	ba 95       	dec	r27
    3910:	c9 f7       	brne	.-14     	; 0x3904 <__ultoa_invert+0xa2>
    3912:	62 0f       	add	r22, r18
    3914:	73 1f       	adc	r23, r19
    3916:	84 1f       	adc	r24, r20
    3918:	95 1f       	adc	r25, r21
    391a:	a0 1d       	adc	r26, r0
    391c:	08 95       	ret

0000391e <_exit>:
    391e:	f8 94       	cli

00003920 <__stop_program>:
    3920:	ff cf       	rjmp	.-2      	; 0x3920 <__stop_program>
