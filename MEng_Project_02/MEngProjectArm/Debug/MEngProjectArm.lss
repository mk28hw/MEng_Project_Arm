
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800200  0000261a  000026ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000261a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  008002e8  008002e8  00002796  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002796  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f8  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000114fb  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003220  00000000  00000000  00014427  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037c7  00000000  00000000  00017647  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013d4  00000000  00000000  0001ae10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003813  00000000  00000000  0001c1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005d88  00000000  00000000  0001f9f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000680  00000000  00000000  0002577f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c1       	rjmp	.+532    	; 0x216 <__ctors_end>
       2:	00 00       	nop
       4:	39 c1       	rjmp	.+626    	; 0x278 <__bad_interrupt>
       6:	00 00       	nop
       8:	37 c1       	rjmp	.+622    	; 0x278 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c1       	rjmp	.+618    	; 0x278 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c1       	rjmp	.+614    	; 0x278 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c1       	rjmp	.+610    	; 0x278 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c1       	rjmp	.+606    	; 0x278 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2d c1       	rjmp	.+602    	; 0x278 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2b c1       	rjmp	.+598    	; 0x278 <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c2       	rjmp	.+1366   	; 0x57c <__vector_9>
      26:	00 00       	nop
      28:	27 c1       	rjmp	.+590    	; 0x278 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	25 c1       	rjmp	.+586    	; 0x278 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c1       	rjmp	.+582    	; 0x278 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c1       	rjmp	.+578    	; 0x278 <__bad_interrupt>
      36:	00 00       	nop
      38:	1f c1       	rjmp	.+574    	; 0x278 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c1       	rjmp	.+570    	; 0x278 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c1       	rjmp	.+566    	; 0x278 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c1       	rjmp	.+562    	; 0x278 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c1       	rjmp	.+558    	; 0x278 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c1       	rjmp	.+554    	; 0x278 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c1       	rjmp	.+550    	; 0x278 <__bad_interrupt>
      52:	00 00       	nop
      54:	11 c1       	rjmp	.+546    	; 0x278 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c1       	rjmp	.+542    	; 0x278 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_23>
      60:	0b c1       	rjmp	.+534    	; 0x278 <__bad_interrupt>
      62:	00 00       	nop
      64:	ea c7       	rjmp	.+4052   	; 0x103a <__vector_25>
      66:	00 00       	nop
      68:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_26>
      6c:	05 c1       	rjmp	.+522    	; 0x278 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__bad_interrupt>
      72:	00 00       	nop
      74:	01 c1       	rjmp	.+514    	; 0x278 <__bad_interrupt>
      76:	00 00       	nop
      78:	ff c0       	rjmp	.+510    	; 0x278 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd c0       	rjmp	.+506    	; 0x278 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fb c0       	rjmp	.+502    	; 0x278 <__bad_interrupt>
      82:	00 00       	nop
      84:	f9 c0       	rjmp	.+498    	; 0x278 <__bad_interrupt>
      86:	00 00       	nop
      88:	f7 c0       	rjmp	.+494    	; 0x278 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f5 c0       	rjmp	.+490    	; 0x278 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__vector_36>
      94:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_37>
      98:	ef c0       	rjmp	.+478    	; 0x278 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__vector_39>
      a0:	eb c0       	rjmp	.+470    	; 0x278 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e9 c0       	rjmp	.+466    	; 0x278 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e7 c0       	rjmp	.+462    	; 0x278 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e5 c0       	rjmp	.+458    	; 0x278 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e3 c0       	rjmp	.+454    	; 0x278 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e1 c0       	rjmp	.+450    	; 0x278 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	df c0       	rjmp	.+446    	; 0x278 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dd c0       	rjmp	.+442    	; 0x278 <__bad_interrupt>
      be:	00 00       	nop
      c0:	db c0       	rjmp	.+438    	; 0x278 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d9 c0       	rjmp	.+434    	; 0x278 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d7 c0       	rjmp	.+430    	; 0x278 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d5 c0       	rjmp	.+426    	; 0x278 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d3 c0       	rjmp	.+422    	; 0x278 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d1 c0       	rjmp	.+418    	; 0x278 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cf c0       	rjmp	.+414    	; 0x278 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cd c0       	rjmp	.+410    	; 0x278 <__bad_interrupt>
      de:	00 00       	nop
      e0:	cb c0       	rjmp	.+406    	; 0x278 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8f 0b       	sbc	r24, r31
      e6:	92 0b       	sbc	r25, r18
      e8:	81 0b       	sbc	r24, r17
      ea:	85 0b       	sbc	r24, r21
      ec:	8b 0b       	sbc	r24, r27
      ee:	c9 0b       	sbc	r28, r25
      f0:	96 0b       	sbc	r25, r22
      f2:	9a 0b       	sbc	r25, r26
      f4:	a0 0b       	sbc	r26, r16
      f6:	a4 0b       	sbc	r26, r20
      f8:	a8 0b       	sbc	r26, r24
      fa:	ae 0b       	sbc	r26, r30
      fc:	b2 0b       	sbc	r27, r18
      fe:	b6 0b       	sbc	r27, r22
     100:	c9 0b       	sbc	r28, r25
     102:	bc 0b       	sbc	r27, r28
     104:	c0 0b       	sbc	r28, r16
     106:	c4 0b       	sbc	r28, r20

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	c5 01       	movw	r24, r10
     210:	85 08       	sbc	r8, r5
     212:	1a 09       	sbc	r17, r10
     214:	20 0e       	add	r2, r16

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	d1 e2       	ldi	r29, 0x21	; 33
     21e:	de bf       	out	0x3e, r29	; 62
     220:	cd bf       	out	0x3d, r28	; 61
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0c bf       	out	0x3c, r16	; 60

00000226 <__do_copy_data>:
     226:	12 e0       	ldi	r17, 0x02	; 2
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b2 e0       	ldi	r27, 0x02	; 2
     22c:	ea e1       	ldi	r30, 0x1A	; 26
     22e:	f6 e2       	ldi	r31, 0x26	; 38
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	a8 3e       	cpi	r26, 0xE8	; 232
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	25 e0       	ldi	r18, 0x05	; 5
     242:	a8 ee       	ldi	r26, 0xE8	; 232
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	a6 30       	cpi	r26, 0x06	; 6
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>

00000250 <__do_global_ctors>:
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	cb e0       	ldi	r28, 0x0B	; 11
     254:	d1 e0       	ldi	r29, 0x01	; 1
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	06 c0       	rjmp	.+12     	; 0x266 <__do_global_ctors+0x16>
     25a:	21 97       	sbiw	r28, 0x01	; 1
     25c:	01 09       	sbc	r16, r1
     25e:	80 2f       	mov	r24, r16
     260:	fe 01       	movw	r30, r28
     262:	0e 94 28 10 	call	0x2050	; 0x2050 <__tablejump2__>
     266:	c7 30       	cpi	r28, 0x07	; 7
     268:	d1 07       	cpc	r29, r17
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	08 07       	cpc	r16, r24
     26e:	a9 f7       	brne	.-22     	; 0x25a <__do_global_ctors+0xa>
     270:	0e 94 48 09 	call	0x1290	; 0x1290 <main>
     274:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <_exit>

00000278 <__bad_interrupt>:
     278:	c3 ce       	rjmp	.-634    	; 0x0 <__vectors>

0000027a <_ZN14HardwareSerial5writeEi>:
	Serial1.write(pcktCmnd);				// Write Command
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	RS485_RX_ON
}
void readServo(byte pcktID, byte pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     27a:	dc 01       	movw	r26, r24
     27c:	ed 91       	ld	r30, X+
     27e:	fc 91       	ld	r31, X
     280:	01 90       	ld	r0, Z+
     282:	f0 81       	ld	r31, Z
     284:	e0 2d       	mov	r30, r0
     286:	19 94       	eijmp

00000288 <_Z8printLCDhhih>:
     288:	8f 92       	push	r8
     28a:	9f 92       	push	r9
     28c:	af 92       	push	r10
     28e:	bf 92       	push	r11
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <_Z8printLCDhhih+0x1a>
     2a2:	1f 92       	push	r1
     2a4:	1f 92       	push	r1
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	b8 2e       	mov	r11, r24
     2ac:	a6 2e       	mov	r10, r22
     2ae:	94 2e       	mov	r9, r20
     2b0:	85 2e       	mov	r8, r21
     2b2:	cd b6       	in	r12, 0x3d	; 61
     2b4:	de b6       	in	r13, 0x3e	; 62
     2b6:	8d b7       	in	r24, 0x3d	; 61
     2b8:	9e b7       	in	r25, 0x3e	; 62
     2ba:	82 1b       	sub	r24, r18
     2bc:	91 09       	sbc	r25, r1
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	9e bf       	out	0x3e, r25	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	8d bf       	out	0x3d, r24	; 61
     2c8:	0d b7       	in	r16, 0x3d	; 61
     2ca:	1e b7       	in	r17, 0x3e	; 62
     2cc:	0f 5f       	subi	r16, 0xFF	; 255
     2ce:	1f 4f       	sbci	r17, 0xFF	; 255
     2d0:	1f 92       	push	r1
     2d2:	2f 93       	push	r18
     2d4:	8b e0       	ldi	r24, 0x0B	; 11
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	9f 93       	push	r25
     2da:	8f 93       	push	r24
     2dc:	ce 01       	movw	r24, r28
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	7c 01       	movw	r14, r24
     2e2:	9f 93       	push	r25
     2e4:	8f 93       	push	r24
     2e6:	0e 94 30 10 	call	0x2060	; 0x2060 <sprintf>
     2ea:	8f 92       	push	r8
     2ec:	9f 92       	push	r9
     2ee:	ff 92       	push	r15
     2f0:	ef 92       	push	r14
     2f2:	1f 93       	push	r17
     2f4:	0f 93       	push	r16
     2f6:	0e 94 30 10 	call	0x2060	; 0x2060 <sprintf>
     2fa:	4a 2d       	mov	r20, r10
     2fc:	6b 2d       	mov	r22, r11
     2fe:	88 ee       	ldi	r24, 0xE8	; 232
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     306:	b8 01       	movw	r22, r16
     308:	88 ee       	ldi	r24, 0xE8	; 232
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN5Print5printEPKc>
     310:	8d b7       	in	r24, 0x3d	; 61
     312:	9e b7       	in	r25, 0x3e	; 62
     314:	0c 96       	adiw	r24, 0x0c	; 12
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	9e bf       	out	0x3e, r25	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	8d bf       	out	0x3d, r24	; 61
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de be       	out	0x3e, r13	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd be       	out	0x3d, r12	; 61
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	bf 90       	pop	r11
     346:	af 90       	pop	r10
     348:	9f 90       	pop	r9
     34a:	8f 90       	pop	r8
     34c:	08 95       	ret

0000034e <_Z13setupSwitchesv>:
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	84 b9       	out	0x04, r24	; 4
     352:	84 b1       	in	r24, 0x04	; 4
     354:	88 7f       	andi	r24, 0xF8	; 248
     356:	84 b9       	out	0x04, r24	; 4
     358:	eb e6       	ldi	r30, 0x6B	; 107
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	87 60       	ori	r24, 0x07	; 7
     360:	80 83       	st	Z, r24
     362:	e8 e6       	ldi	r30, 0x68	; 104
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	80 83       	st	Z, r24
     36c:	78 94       	sei
     36e:	08 95       	ret

00000370 <_Z8sumBytesPhh>:
     370:	38 2f       	mov	r19, r24
     372:	fc 01       	movw	r30, r24
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	2e 2f       	mov	r18, r30
     37a:	23 1b       	sub	r18, r19
     37c:	26 17       	cp	r18, r22
     37e:	20 f4       	brcc	.+8      	; 0x388 <_Z8sumBytesPhh+0x18>
     380:	21 91       	ld	r18, Z+
     382:	82 0f       	add	r24, r18
     384:	91 1d       	adc	r25, r1
     386:	f8 cf       	rjmp	.-16     	; 0x378 <_Z8sumBytesPhh+0x8>
     388:	08 95       	ret

0000038a <_GLOBAL__sub_I_position_old>:
     38a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     38e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     392:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <currPos+0x1>
     396:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <currPos>
     39a:	24 e0       	ldi	r18, 0x04	; 4
     39c:	44 e1       	ldi	r20, 0x14	; 20
     39e:	67 e2       	ldi	r22, 0x27	; 39
     3a0:	88 ee       	ldi	r24, 0xE8	; 232
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <_ZN17LiquidCrystal_I2CC1Ehhh>

000003a8 <_Z10writeServohhPhh>:
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	f8 2e       	mov	r15, r24
     3ba:	e6 2e       	mov	r14, r22
     3bc:	6a 01       	movw	r12, r20
     3be:	02 2f       	mov	r16, r18
     3c0:	66 e0       	ldi	r22, 0x06	; 6
     3c2:	6e 0d       	add	r22, r14
     3c4:	d6 2f       	mov	r29, r22
     3c6:	d2 0f       	add	r29, r18
     3c8:	62 2f       	mov	r22, r18
     3ca:	ca 01       	movw	r24, r20
     3cc:	d1 df       	rcall	.-94     	; 0x370 <_Z8sumBytesPhh>
     3ce:	c8 2f       	mov	r28, r24
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	0e 94 06 0c 	call	0x180c	; 0x180c <digitalWrite>
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	0e 94 06 0c 	call	0x180c	; 0x180c <digitalWrite>
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 cf 0a 	call	0x159e	; 0x159e <delay>
     3ec:	6f ef       	ldi	r22, 0xFF	; 255
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	8c e9       	ldi	r24, 0x9C	; 156
     3f2:	93 e0       	ldi	r25, 0x03	; 3
     3f4:	42 df       	rcall	.-380    	; 0x27a <_ZN14HardwareSerial5writeEi>
     3f6:	6f ef       	ldi	r22, 0xFF	; 255
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	8c e9       	ldi	r24, 0x9C	; 156
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	3d df       	rcall	.-390    	; 0x27a <_ZN14HardwareSerial5writeEi>
     400:	6f 2d       	mov	r22, r15
     402:	8c e9       	ldi	r24, 0x9C	; 156
     404:	93 e0       	ldi	r25, 0x03	; 3
     406:	43 d5       	rcall	.+2694   	; 0xe8e <_ZN14HardwareSerial5writeEh>
     408:	10 e0       	ldi	r17, 0x00	; 0
     40a:	b8 01       	movw	r22, r16
     40c:	6d 5f       	subi	r22, 0xFD	; 253
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	8c e9       	ldi	r24, 0x9C	; 156
     412:	93 e0       	ldi	r25, 0x03	; 3
     414:	32 df       	rcall	.-412    	; 0x27a <_ZN14HardwareSerial5writeEi>
     416:	63 e0       	ldi	r22, 0x03	; 3
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	8c e9       	ldi	r24, 0x9C	; 156
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	2d df       	rcall	.-422    	; 0x27a <_ZN14HardwareSerial5writeEi>
     420:	6e 2d       	mov	r22, r14
     422:	8c e9       	ldi	r24, 0x9C	; 156
     424:	93 e0       	ldi	r25, 0x03	; 3
     426:	33 d5       	rcall	.+2662   	; 0xe8e <_ZN14HardwareSerial5writeEh>
     428:	a8 01       	movw	r20, r16
     42a:	b6 01       	movw	r22, r12
     42c:	8c e9       	ldi	r24, 0x9C	; 156
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	39 d7       	rcall	.+3698   	; 0x12a4 <_ZN5Print5writeEPKhj>
     432:	df 0d       	add	r29, r15
     434:	cd 0f       	add	r28, r29
     436:	c0 95       	com	r28
     438:	6c 2f       	mov	r22, r28
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	8c e9       	ldi	r24, 0x9C	; 156
     43e:	93 e0       	ldi	r25, 0x03	; 3
     440:	1c df       	rcall	.-456    	; 0x27a <_ZN14HardwareSerial5writeEi>
     442:	8c e9       	ldi	r24, 0x9C	; 156
     444:	93 e0       	ldi	r25, 0x03	; 3
     446:	6f d5       	rcall	.+2782   	; 0xf26 <_ZN14HardwareSerial5flushEv>
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	0e 94 06 0c 	call	0x180c	; 0x180c <digitalWrite>
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	0e 94 06 0c 	call	0x180c	; 0x180c <digitalWrite>
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	df 90       	pop	r13
     46e:	cf 90       	pop	r12
     470:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <delay>

00000474 <_Z9moveSpeedhii>:
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	00 d0       	rcall	.+0      	; 0x47e <_Z9moveSpeedhii+0xa>
     47e:	1f 92       	push	r1
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	8b 01       	movw	r16, r22
     486:	9c ef       	ldi	r25, 0xFC	; 252
     488:	98 0f       	add	r25, r24
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	58 f4       	brcc	.+22     	; 0x4a4 <_Z9moveSpeedhii+0x30>
     48e:	64 3e       	cpi	r22, 0xE4	; 228
     490:	72 40       	sbci	r23, 0x02	; 2
     492:	14 f4       	brge	.+4      	; 0x498 <_Z9moveSpeedhii+0x24>
     494:	04 ee       	ldi	r16, 0xE4	; 228
     496:	12 e0       	ldi	r17, 0x02	; 2
     498:	05 3a       	cpi	r16, 0xA5	; 165
     49a:	96 e0       	ldi	r25, 0x06	; 6
     49c:	19 07       	cpc	r17, r25
     49e:	14 f0       	brlt	.+4      	; 0x4a4 <_Z9moveSpeedhii+0x30>
     4a0:	04 ea       	ldi	r16, 0xA4	; 164
     4a2:	16 e0       	ldi	r17, 0x06	; 6
     4a4:	09 83       	std	Y+1, r16	; 0x01
     4a6:	1a 83       	std	Y+2, r17	; 0x02
     4a8:	4b 83       	std	Y+3, r20	; 0x03
     4aa:	5c 83       	std	Y+4, r21	; 0x04
     4ac:	24 e0       	ldi	r18, 0x04	; 4
     4ae:	ae 01       	movw	r20, r28
     4b0:	4f 5f       	subi	r20, 0xFF	; 255
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	6e e1       	ldi	r22, 0x1E	; 30
     4b6:	78 df       	rcall	.-272    	; 0x3a8 <_Z10writeServohhPhh>
     4b8:	10 93 fa 02 	sts	0x02FA, r17	; 0x8002fa <currPos+0x1>
     4bc:	00 93 f9 02 	sts	0x02F9, r16	; 0x8002f9 <currPos>
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	08 95       	ret

000004d2 <_Z14setTorqueLimithi>:
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	1f 92       	push	r1
     4d8:	1f 92       	push	r1
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	69 83       	std	Y+1, r22	; 0x01
     4e0:	7a 83       	std	Y+2, r23	; 0x02
     4e2:	22 e0       	ldi	r18, 0x02	; 2
     4e4:	ae 01       	movw	r20, r28
     4e6:	4f 5f       	subi	r20, 0xFF	; 255
     4e8:	5f 4f       	sbci	r21, 0xFF	; 255
     4ea:	62 e2       	ldi	r22, 0x22	; 34
     4ec:	5d df       	rcall	.-326    	; 0x3a8 <_Z10writeServohhPhh>
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <_Z7setModehh.part.0>:
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <_Z7setModehh.part.0+0x6>
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	19 82       	std	Y+1, r1	; 0x01
     506:	1a 82       	std	Y+2, r1	; 0x02
     508:	1b 82       	std	Y+3, r1	; 0x03
     50a:	1c 82       	std	Y+4, r1	; 0x04
     50c:	24 e0       	ldi	r18, 0x04	; 4
     50e:	ae 01       	movw	r20, r28
     510:	4f 5f       	subi	r20, 0xFF	; 255
     512:	5f 4f       	sbci	r21, 0xFF	; 255
     514:	66 e0       	ldi	r22, 0x06	; 6
     516:	48 df       	rcall	.-368    	; 0x3a8 <_Z10writeServohhPhh>
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <_Z7setModehh>:
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	00 d0       	rcall	.+0      	; 0x52c <_Z7setModehh+0x6>
     52c:	1f 92       	push	r1
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	61 30       	cpi	r22, 0x01	; 1
     534:	11 f4       	brne	.+4      	; 0x53a <_Z7setModehh+0x14>
     536:	e0 df       	rcall	.-64     	; 0x4f8 <_Z7setModehh.part.0>
     538:	16 c0       	rjmp	.+44     	; 0x566 <_Z7setModehh+0x40>
     53a:	62 30       	cpi	r22, 0x02	; 2
     53c:	31 f4       	brne	.+12     	; 0x54a <_Z7setModehh+0x24>
     53e:	2f ef       	ldi	r18, 0xFF	; 255
     540:	29 83       	std	Y+1, r18	; 0x01
     542:	9f e0       	ldi	r25, 0x0F	; 15
     544:	9a 83       	std	Y+2, r25	; 0x02
     546:	2b 83       	std	Y+3, r18	; 0x03
     548:	07 c0       	rjmp	.+14     	; 0x558 <_Z7setModehh+0x32>
     54a:	94 ee       	ldi	r25, 0xE4	; 228
     54c:	99 83       	std	Y+1, r25	; 0x01
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	9a 83       	std	Y+2, r25	; 0x02
     552:	94 ea       	ldi	r25, 0xA4	; 164
     554:	9b 83       	std	Y+3, r25	; 0x03
     556:	96 e0       	ldi	r25, 0x06	; 6
     558:	9c 83       	std	Y+4, r25	; 0x04
     55a:	24 e0       	ldi	r18, 0x04	; 4
     55c:	ae 01       	movw	r20, r28
     55e:	4f 5f       	subi	r20, 0xFF	; 255
     560:	5f 4f       	sbci	r21, 0xFF	; 255
     562:	66 e0       	ldi	r22, 0x06	; 6
     564:	21 df       	rcall	.-446    	; 0x3a8 <_Z10writeServohhPhh>
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <_Z12setModeJointh>:
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	d7 cf       	rjmp	.-82     	; 0x526 <_Z7setModehh>

00000578 <_Z16setModeMultiTurnh>:
     578:	62 e0       	ldi	r22, 0x02	; 2
     57a:	d5 cf       	rjmp	.-86     	; 0x526 <_Z7setModehh>

0000057c <__vector_9>:
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	0b b6       	in	r0, 0x3b	; 59
     588:	0f 92       	push	r0
     58a:	2f 93       	push	r18
     58c:	3f 93       	push	r19
     58e:	4f 93       	push	r20
     590:	5f 93       	push	r21
     592:	6f 93       	push	r22
     594:	7f 93       	push	r23
     596:	8f 93       	push	r24
     598:	9f 93       	push	r25
     59a:	af 93       	push	r26
     59c:	bf 93       	push	r27
     59e:	ef 93       	push	r30
     5a0:	ff 93       	push	r31
     5a2:	18 9b       	sbis	0x03, 0	; 3
     5a4:	15 c0       	rjmp	.+42     	; 0x5d0 <__vector_9+0x54>
     5a6:	2f 9a       	sbi	0x05, 7	; 5
     5a8:	18 9b       	sbis	0x03, 0	; 3
     5aa:	11 c0       	rjmp	.+34     	; 0x5ce <__vector_9+0x52>
     5ac:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <currPos>
     5b0:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <currPos+0x1>
     5b4:	61 50       	subi	r22, 0x01	; 1
     5b6:	71 09       	sbc	r23, r1
     5b8:	44 e1       	ldi	r20, 0x14	; 20
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     5c0:	59 df       	rcall	.-334    	; 0x474 <_Z9moveSpeedhii>
     5c2:	68 ec       	ldi	r22, 0xC8	; 200
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	e9 d7       	rcall	.+4050   	; 0x159e <delay>
     5cc:	ed cf       	rjmp	.-38     	; 0x5a8 <__vector_9+0x2c>
     5ce:	2f 98       	cbi	0x05, 7	; 5
     5d0:	19 9b       	sbis	0x03, 1	; 3
     5d2:	15 c0       	rjmp	.+42     	; 0x5fe <__vector_9+0x82>
     5d4:	2f 9a       	sbi	0x05, 7	; 5
     5d6:	19 9b       	sbis	0x03, 1	; 3
     5d8:	11 c0       	rjmp	.+34     	; 0x5fc <__vector_9+0x80>
     5da:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <currPos>
     5de:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <currPos+0x1>
     5e2:	6f 5f       	subi	r22, 0xFF	; 255
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	44 e1       	ldi	r20, 0x14	; 20
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     5ee:	42 df       	rcall	.-380    	; 0x474 <_Z9moveSpeedhii>
     5f0:	68 ec       	ldi	r22, 0xC8	; 200
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	d2 d7       	rcall	.+4004   	; 0x159e <delay>
     5fa:	ed cf       	rjmp	.-38     	; 0x5d6 <__vector_9+0x5a>
     5fc:	2f 98       	cbi	0x05, 7	; 5
     5fe:	1a 9b       	sbis	0x03, 2	; 3
     600:	1f c0       	rjmp	.+62     	; 0x640 <__vector_9+0xc4>
     602:	1f 9a       	sbi	0x03, 7	; 3
     604:	64 e1       	ldi	r22, 0x14	; 20
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	c8 d7       	rcall	.+3984   	; 0x159e <delay>
     60e:	1a 9b       	sbis	0x03, 2	; 3
     610:	05 c0       	rjmp	.+10     	; 0x61c <__vector_9+0xa0>
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	f8 cf       	rjmp	.-16     	; 0x60c <__vector_9+0x90>
     61c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     620:	85 30       	cpi	r24, 0x05	; 5
     622:	10 f4       	brcc	.+4      	; 0x628 <__vector_9+0xac>
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	01 c0       	rjmp	.+2      	; 0x62a <__vector_9+0xae>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <id>
     62e:	84 30       	cpi	r24, 0x04	; 4
     630:	10 f0       	brcs	.+4      	; 0x636 <__vector_9+0xba>
     632:	a0 df       	rcall	.-192    	; 0x574 <_Z12setModeJointh>
     634:	05 c0       	rjmp	.+10     	; 0x640 <__vector_9+0xc4>
     636:	83 30       	cpi	r24, 0x03	; 3
     638:	11 f4       	brne	.+4      	; 0x63e <__vector_9+0xc2>
     63a:	9e df       	rcall	.-196    	; 0x578 <_Z16setModeMultiTurnh>
     63c:	01 c0       	rjmp	.+2      	; 0x640 <__vector_9+0xc4>
     63e:	5c df       	rcall	.-328    	; 0x4f8 <_Z7setModehh.part.0>
     640:	ff 91       	pop	r31
     642:	ef 91       	pop	r30
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	7f 91       	pop	r23
     64e:	6f 91       	pop	r22
     650:	5f 91       	pop	r21
     652:	4f 91       	pop	r20
     654:	3f 91       	pop	r19
     656:	2f 91       	pop	r18
     658:	0f 90       	pop	r0
     65a:	0b be       	out	0x3b, r0	; 59
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	1f 90       	pop	r1
     664:	18 95       	reti

00000666 <_Z9readServohhh>:
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	c8 2f       	mov	r28, r24
     66e:	d6 2f       	mov	r29, r22
     670:	14 2f       	mov	r17, r20
     672:	61 e0       	ldi	r22, 0x01	; 1
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	0e 94 06 0c 	call	0x180c	; 0x180c <digitalWrite>
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	0e 94 06 0c 	call	0x180c	; 0x180c <digitalWrite>
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	89 d7       	rcall	.+3858   	; 0x159e <delay>
     68c:	6f ef       	ldi	r22, 0xFF	; 255
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	8c e9       	ldi	r24, 0x9C	; 156
     692:	93 e0       	ldi	r25, 0x03	; 3
     694:	f2 dd       	rcall	.-1052   	; 0x27a <_ZN14HardwareSerial5writeEi>
     696:	6f ef       	ldi	r22, 0xFF	; 255
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8c e9       	ldi	r24, 0x9C	; 156
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	ed dd       	rcall	.-1062   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6a0:	6c 2f       	mov	r22, r28
     6a2:	8c e9       	ldi	r24, 0x9C	; 156
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	f3 d3       	rcall	.+2022   	; 0xe8e <_ZN14HardwareSerial5writeEh>
     6a8:	64 e0       	ldi	r22, 0x04	; 4
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	8c e9       	ldi	r24, 0x9C	; 156
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	e4 dd       	rcall	.-1080   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6b2:	62 e0       	ldi	r22, 0x02	; 2
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	8c e9       	ldi	r24, 0x9C	; 156
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	df dd       	rcall	.-1090   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6bc:	6d 2f       	mov	r22, r29
     6be:	8c e9       	ldi	r24, 0x9C	; 156
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	e5 d3       	rcall	.+1994   	; 0xe8e <_ZN14HardwareSerial5writeEh>
     6c4:	61 2f       	mov	r22, r17
     6c6:	8c e9       	ldi	r24, 0x9C	; 156
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	e1 d3       	rcall	.+1986   	; 0xe8e <_ZN14HardwareSerial5writeEh>
     6cc:	1a 5f       	subi	r17, 0xFA	; 250
     6ce:	d1 0f       	add	r29, r17
     6d0:	cd 0f       	add	r28, r29
     6d2:	c0 95       	com	r28
     6d4:	6c 2f       	mov	r22, r28
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	8c e9       	ldi	r24, 0x9C	; 156
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	ce dd       	rcall	.-1124   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6de:	8c e9       	ldi	r24, 0x9C	; 156
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	21 d4       	rcall	.+2114   	; 0xf26 <_ZN14HardwareSerial5flushEv>
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	0e 94 06 0c 	call	0x180c	; 0x180c <digitalWrite>
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	0e 94 06 0c 	call	0x180c	; 0x180c <digitalWrite>
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	4d c7       	rjmp	.+3738   	; 0x159e <delay>

00000704 <_Z11printBufferv>:
 *  |0xFF|0xFF|ID|LENGTH|INSTRUCTION|PARAM_1|...|PARAM_N|CHECKSUM
 */
void printBuffer() {
	//delay(20);
	//byte start_1, start_2, servo_id, msg_length, er_byte, chck_sum;
	Serial.print("## Start: ");
     704:	61 e4       	ldi	r22, 0x41	; 65
     706:	72 e0       	ldi	r23, 0x02	; 2
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0a d6       	rcall	.+3092   	; 0x1322 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     70e:	8c e9       	ldi	r24, 0x9C	; 156
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	23 d3       	rcall	.+1606   	; 0xd5a <_ZN14HardwareSerial9availableEv>
     714:	4a e0       	ldi	r20, 0x0A	; 10
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	bc 01       	movw	r22, r24
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	ba d6       	rcall	.+3444   	; 0x1494 <_ZN5Print5printEii>
	Serial.println(" ####################");
     720:	6c e4       	ldi	r22, 0x4C	; 76
     722:	72 e0       	ldi	r23, 0x02	; 2
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	92 e0       	ldi	r25, 0x02	; 2
	while(Serial1.available()){
     728:	07 d6       	rcall	.+3086   	; 0x1338 <_ZN5Print7printlnEPKc>
     72a:	8c e9       	ldi	r24, 0x9C	; 156
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	15 d3       	rcall	.+1578   	; 0xd5a <_ZN14HardwareSerial9availableEv>
     730:	89 2b       	or	r24, r25
		
		Serial.print(Serial1.available());
     732:	e9 f0       	breq	.+58     	; 0x76e <_Z11printBufferv+0x6a>
     734:	8c e9       	ldi	r24, 0x9C	; 156
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	10 d3       	rcall	.+1568   	; 0xd5a <_ZN14HardwareSerial9availableEv>
     73a:	4a e0       	ldi	r20, 0x0A	; 10
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	bc 01       	movw	r22, r24
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	92 e0       	ldi	r25, 0x02	; 2
		Serial.print(", ");
     744:	a7 d6       	rcall	.+3406   	; 0x1494 <_ZN5Print5printEii>
     746:	62 e6       	ldi	r22, 0x62	; 98
     748:	72 e0       	ldi	r23, 0x02	; 2
     74a:	8f ef       	ldi	r24, 0xFF	; 255
     74c:	92 e0       	ldi	r25, 0x02	; 2
		Serial.println(Serial1.read());
     74e:	e9 d5       	rcall	.+3026   	; 0x1322 <_ZN5Print5printEPKc>
     750:	8c e9       	ldi	r24, 0x9C	; 156
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	1c d3       	rcall	.+1592   	; 0xd8e <_ZN14HardwareSerial4readEv>
     756:	4a e0       	ldi	r20, 0x0A	; 10
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	bc 01       	movw	r22, r24
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	92 e0       	ldi	r25, 0x02	; 2
		delay(1);
     760:	9f d6       	rcall	.+3390   	; 0x14a0 <_ZN5Print7printlnEii>
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
	//delay(20);
	//byte start_1, start_2, servo_id, msg_length, er_byte, chck_sum;
	Serial.print("## Start: ");
	Serial.print(Serial1.available());
	Serial.println(" ####################");
	while(Serial1.available()){
     76a:	19 d7       	rcall	.+3634   	; 0x159e <delay>
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	Serial.println("## End #####################");
     76c:	de cf       	rjmp	.-68     	; 0x72a <_Z11printBufferv+0x26>
     76e:	65 e6       	ldi	r22, 0x65	; 101
     770:	72 e0       	ldi	r23, 0x02	; 2
     772:	8f ef       	ldi	r24, 0xFF	; 255
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	e0 c5       	rjmp	.+3008   	; 0x1338 <_ZN5Print7printlnEPKc>

00000778 <setup>:
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
     778:	cf 93       	push	r28
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
     77a:	e9 dd       	rcall	.-1070   	; 0x34e <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
     77c:	88 ee       	ldi	r24, 0xE8	; 232
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     784:	88 ee       	ldi	r24, 0xE8	; 232
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     78c:	88 ee       	ldi	r24, 0xE8	; 232
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	0e 94 90 0c 	call	0x1920	; 0x1920 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	fd d7       	rcall	.+4090   	; 0x1794 <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	fa d7       	rcall	.+4084   	; 0x1794 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     7a0:	26 e0       	ldi	r18, 0x06	; 6
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	51 ee       	ldi	r21, 0xE1	; 225
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	dc d3       	rcall	.+1976   	; 0xf68 <_ZN14HardwareSerial5beginEmh>
     7b0:	26 e0       	ldi	r18, 0x06	; 6
     7b2:	47 e3       	ldi	r20, 0x37	; 55
     7b4:	5f ed       	ldi	r21, 0xDF	; 223
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	8c e9       	ldi	r24, 0x9C	; 156
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	d4 d3       	rcall	.+1960   	; 0xf68 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
     7c0:	8c e9       	ldi	r24, 0x9C	; 156
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	b0 d3       	rcall	.+1888   	; 0xf26 <_ZN14HardwareSerial5flushEv>
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	97 de       	rcall	.-722    	; 0x4f8 <_Z7setModehh.part.0>
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	95 de       	rcall	.-726    	; 0x4f8 <_Z7setModehh.part.0>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
	setModeWheel(2);
	setModeMultiTurn(3);
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	d3 de       	rcall	.-602    	; 0x578 <_Z16setModeMultiTurnh>
     7d2:	84 e0       	ldi	r24, 0x04	; 4
	setModeJoint(4);
     7d4:	cf de       	rcall	.-610    	; 0x574 <_Z12setModeJointh>
     7d6:	85 e0       	ldi	r24, 0x05	; 5
	setModeJoint(5);
     7d8:	cd de       	rcall	.-614    	; 0x574 <_Z12setModeJointh>
     7da:	c1 e0       	ldi	r28, 0x01	; 1
     7dc:	6f ef       	ldi	r22, 0xFF	; 255
	/* Enable Toques for Joints (4 and 5) */
	for (unsigned char i=1; i<6; i++) {
     7de:	73 e0       	ldi	r23, 0x03	; 3
		setTorqueLimit(i, MAX_TORQUE);
     7e0:	8c 2f       	mov	r24, r28
     7e2:	77 de       	rcall	.-786    	; 0x4d2 <_Z14setTorqueLimithi>
     7e4:	cf 5f       	subi	r28, 0xFF	; 255
     7e6:	c6 30       	cpi	r28, 0x06	; 6
     7e8:	c9 f7       	brne	.-14     	; 0x7dc <setup+0x64>
	setModeWheel(2);
	setModeMultiTurn(3);
	setModeJoint(4);
	setModeJoint(5);
	/* Enable Toques for Joints (4 and 5) */
	for (unsigned char i=1; i<6; i++) {
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	88 ee       	ldi	r24, 0xE8	; 232
		setTorqueLimit(i, MAX_TORQUE);
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     7f6:	62 e8       	ldi	r22, 0x82	; 130
     7f8:	72 e0       	ldi	r23, 0x02	; 2
	lcd.print("sID:");
     7fa:	88 ee       	ldi	r24, 0xE8	; 232
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	91 d5       	rcall	.+2850   	; 0x1322 <_ZN5Print5printEPKc>
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	60 e0       	ldi	r22, 0x00	; 0
	lcd.setCursor(0,1);
     804:	88 ee       	ldi	r24, 0xE8	; 232
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     80c:	67 e8       	ldi	r22, 0x87	; 135
     80e:	72 e0       	ldi	r23, 0x02	; 2
	lcd.print("deg:");
     810:	88 ee       	ldi	r24, 0xE8	; 232
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	86 d5       	rcall	.+2828   	; 0x1322 <_ZN5Print5printEPKc>
     816:	42 e0       	ldi	r20, 0x02	; 2
     818:	60 e0       	ldi	r22, 0x00	; 0
	lcd.setCursor(0,2);
     81a:	88 ee       	ldi	r24, 0xE8	; 232
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     822:	6c e8       	ldi	r22, 0x8C	; 140
     824:	72 e0       	ldi	r23, 0x02	; 2
	lcd.print("rpm:");
     826:	88 ee       	ldi	r24, 0xE8	; 232
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	7b d5       	rcall	.+2806   	; 0x1322 <_ZN5Print5printEPKc>
     82c:	43 e0       	ldi	r20, 0x03	; 3
     82e:	60 e0       	ldi	r22, 0x00	; 0
	lcd.setCursor(0,3);
     830:	88 ee       	ldi	r24, 0xE8	; 232
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("ld%:");
     838:	61 e9       	ldi	r22, 0x91	; 145
     83a:	72 e0       	ldi	r23, 0x02	; 2
     83c:	88 ee       	ldi	r24, 0xE8	; 232
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	70 d5       	rcall	.+2784   	; 0x1322 <_ZN5Print5printEPKc>

	readServo(id, 0x18, 8);
     842:	48 e0       	ldi	r20, 0x08	; 8
     844:	68 e1       	ldi	r22, 0x18	; 24
     846:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     84a:	0d df       	rcall	.-486    	; 0x666 <_Z9readServohhh>
     84c:	5b df       	rcall	.-330    	; 0x704 <_Z11printBufferv>
	printBuffer();
     84e:	62 e0       	ldi	r22, 0x02	; 2
     850:	70 e0       	ldi	r23, 0x00	; 0
	delay(2);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	cf 91       	pop	r28
     858:	a2 c6       	rjmp	.+3396   	; 0x159e <delay>

0000085a <_Z12printDataLCDv>:
}
     85a:	af 92       	push	r10
	lcd.setCursor(0,3);
	lcd.print("ld%:");

	readServo(id, 0x18, 8);
	printBuffer();
	delay(2);
     85c:	bf 92       	push	r11
     85e:	cf 92       	push	r12
void printSerial(String title, int value) {
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
void printDataLCD() {
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
	delay(10);
     86e:	6a e0       	ldi	r22, 0x0A	; 10
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	93 d6       	rcall	.+3366   	; 0x159e <delay>
	int lock;
	int punch;
	int current;
	bool speedDirection, loadDirection;
	byte i = 0;
	int available = Serial1.available();
     878:	8c e9       	ldi	r24, 0x9C	; 156
     87a:	93 e0       	ldi	r25, 0x03	; 3
     87c:	6e d2       	rcall	.+1244   	; 0xd5a <_ZN14HardwareSerial9availableEv>
	if (available > 0){
     87e:	18 16       	cp	r1, r24
     880:	19 06       	cpc	r1, r25
     882:	0c f0       	brlt	.+2      	; 0x886 <_Z12printDataLCDv+0x2c>
     884:	37 c1       	rjmp	.+622    	; 0xaf4 <_Z12printDataLCDv+0x29a>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     886:	8c e9       	ldi	r24, 0x9C	; 156
     888:	93 e0       	ldi	r25, 0x03	; 3
     88a:	81 d2       	rcall	.+1282   	; 0xd8e <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     88c:	8f 3f       	cpi	r24, 0xFF	; 255
     88e:	91 05       	cpc	r25, r1
     890:	09 f0       	breq	.+2      	; 0x894 <_Z12printDataLCDv+0x3a>
     892:	30 c1       	rjmp	.+608    	; 0xaf4 <_Z12printDataLCDv+0x29a>
     894:	8c e9       	ldi	r24, 0x9C	; 156
     896:	93 e0       	ldi	r25, 0x03	; 3
     898:	7a d2       	rcall	.+1268   	; 0xd8e <_ZN14HardwareSerial4readEv>
     89a:	8f 3f       	cpi	r24, 0xFF	; 255
     89c:	91 05       	cpc	r25, r1
     89e:	09 f0       	breq	.+2      	; 0x8a2 <_Z12printDataLCDv+0x48>
			servoID = Serial1.read(); // servo ID
     8a0:	29 c1       	rjmp	.+594    	; 0xaf4 <_Z12printDataLCDv+0x29a>
     8a2:	8c e9       	ldi	r24, 0x9C	; 156
     8a4:	93 e0       	ldi	r25, 0x03	; 3
     8a6:	73 d2       	rcall	.+1254   	; 0xd8e <_ZN14HardwareSerial4readEv>
			msgLength = Serial1.read(); // msg Length
     8a8:	6c 01       	movw	r12, r24
     8aa:	8c e9       	ldi	r24, 0x9C	; 156
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	6f d2       	rcall	.+1246   	; 0xd8e <_ZN14HardwareSerial4readEv>
			error_byte = Serial1.read();
     8b0:	d8 2f       	mov	r29, r24
     8b2:	8c e9       	ldi	r24, 0x9C	; 156
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	6b d2       	rcall	.+1238   	; 0xd8e <_ZN14HardwareSerial4readEv>
     8b8:	c8 2f       	mov	r28, r24
			error_byte_old = error_byte ? error_byte : error_byte_old;
     8ba:	81 11       	cpse	r24, r1
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <_Z12printDataLCDv+0x6a>
     8be:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <error_byte_old>
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <_Z12printDataLCDv+0x6c>
     8c4:	8c 2f       	mov	r24, r28
     8c6:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <error_byte_old>
			
			lcd.setCursor(7,0);
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	67 e0       	ldi	r22, 0x07	; 7
     8ce:	88 ee       	ldi	r24, 0xE8	; 232
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     8d6:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <error_counter>
     8da:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <error_counter+0x1>
			if (error_byte || error_counter) {	
     8de:	c1 11       	cpse	r28, r1
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <_Z12printDataLCDv+0x8c>
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	e9 f0       	breq	.+58     	; 0x920 <_Z12printDataLCDv+0xc6>
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     8e6:	8b 30       	cpi	r24, 0x0B	; 11
     8e8:	91 05       	cpc	r25, r1
     8ea:	14 f4       	brge	.+4      	; 0x8f0 <_Z12printDataLCDv+0x96>
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <_Z12printDataLCDv+0x9a>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <error_counter+0x1>
     8f8:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <error_counter>
				lcd.print("ERROR:");
     8fc:	66 e9       	ldi	r22, 0x96	; 150
     8fe:	72 e0       	ldi	r23, 0x02	; 2
     900:	88 ee       	ldi	r24, 0xE8	; 232
     902:	92 e0       	ldi	r25, 0x02	; 2
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
     904:	0e d5       	rcall	.+2588   	; 0x1322 <_ZN5Print5printEPKc>
     906:	4a e0       	ldi	r20, 0x0A	; 10
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <error_byte_old>
     90e:	88 ee       	ldi	r24, 0xE8	; 232
     910:	92 e0       	ldi	r25, 0x02	; 2
				lcd.print("   ");
     912:	75 d5       	rcall	.+2794   	; 0x13fe <_ZN5Print5printEhi>
     914:	64 ea       	ldi	r22, 0xA4	; 164
     916:	72 e0       	ldi	r23, 0x02	; 2
     918:	88 ee       	ldi	r24, 0xE8	; 232
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	02 d5       	rcall	.+2564   	; 0x1322 <_ZN5Print5printEPKc>
			} else { // No Error :)
				lcd.print("          ");
     91e:	bc c0       	rjmp	.+376    	; 0xa98 <_Z12printDataLCDv+0x23e>
     920:	6d e9       	ldi	r22, 0x9D	; 157
     922:	72 e0       	ldi	r23, 0x02	; 2
     924:	88 ee       	ldi	r24, 0xE8	; 232
				if (msgLength > 2) {
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	fc d4       	rcall	.+2552   	; 0x1322 <_ZN5Print5printEPKc>
     92a:	d3 30       	cpi	r29, 0x03	; 3
					position = Serial1.read();
     92c:	08 f4       	brcc	.+2      	; 0x930 <_Z12printDataLCDv+0xd6>
     92e:	b4 c0       	rjmp	.+360    	; 0xa98 <_Z12printDataLCDv+0x23e>
     930:	8c e9       	ldi	r24, 0x9C	; 156
     932:	93 e0       	ldi	r25, 0x03	; 3
     934:	2c d2       	rcall	.+1112   	; 0xd8e <_ZN14HardwareSerial4readEv>
					position = (Serial1.read() * 255) + position;
     936:	ec 01       	movw	r28, r24
     938:	8c e9       	ldi	r24, 0x9C	; 156
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	28 d2       	rcall	.+1104   	; 0xd8e <_ZN14HardwareSerial4readEv>
     93e:	2f ef       	ldi	r18, 0xFF	; 255
     940:	ac 01       	movw	r20, r24
     942:	24 9f       	mul	r18, r20
     944:	c0 01       	movw	r24, r0
     946:	25 9f       	mul	r18, r21
     948:	90 0d       	add	r25, r0
     94a:	11 24       	eor	r1, r1
     94c:	7c 01       	movw	r14, r24
     94e:	ec 0e       	add	r14, r28
     950:	fd 1e       	adc	r15, r29
					rotations = position_old > position ? rotations + 1 : rotations;
     952:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <position_old>
     956:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <position_old+0x1>
     95a:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <rotations>
     95e:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <rotations+0x1>
     962:	e2 16       	cp	r14, r18
     964:	f3 06       	cpc	r15, r19
     966:	0c f4       	brge	.+2      	; 0x96a <_Z12printDataLCDv+0x110>
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <rotations+0x1>
					position_old = position;
     96e:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <rotations>
     972:	f0 92 fe 02 	sts	0x02FE, r15	; 0x8002fe <position_old+0x1>
								
					//Serial.println(position);
					speed = Serial1.read();
     976:	e0 92 fd 02 	sts	0x02FD, r14	; 0x8002fd <position_old>
     97a:	8c e9       	ldi	r24, 0x9C	; 156
     97c:	93 e0       	ldi	r25, 0x03	; 3
     97e:	07 d2       	rcall	.+1038   	; 0xd8e <_ZN14HardwareSerial4readEv>
					speed = (Serial1.read() * 255) + speed;
     980:	8c 01       	movw	r16, r24
     982:	8c e9       	ldi	r24, 0x9C	; 156
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	03 d2       	rcall	.+1030   	; 0xd8e <_ZN14HardwareSerial4readEv>
     988:	df ef       	ldi	r29, 0xFF	; 255
     98a:	9c 01       	movw	r18, r24
     98c:	d2 9f       	mul	r29, r18
     98e:	c0 01       	movw	r24, r0
     990:	d3 9f       	mul	r29, r19
     992:	90 0d       	add	r25, r0
     994:	11 24       	eor	r1, r1
					//Serial.println(speed);
					load = Serial1.read();
     996:	08 0f       	add	r16, r24
     998:	19 1f       	adc	r17, r25
     99a:	8c e9       	ldi	r24, 0x9C	; 156
     99c:	93 e0       	ldi	r25, 0x03	; 3
					load = (Serial1.read() * 255) + load;
     99e:	f7 d1       	rcall	.+1006   	; 0xd8e <_ZN14HardwareSerial4readEv>
     9a0:	5c 01       	movw	r10, r24
     9a2:	8c e9       	ldi	r24, 0x9C	; 156
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	f3 d1       	rcall	.+998    	; 0xd8e <_ZN14HardwareSerial4readEv>
     9a8:	ac 01       	movw	r20, r24
     9aa:	d4 9f       	mul	r29, r20
     9ac:	c0 01       	movw	r24, r0
     9ae:	d5 9f       	mul	r29, r21
     9b0:	90 0d       	add	r25, r0
					voltage = Serial1.read();
     9b2:	11 24       	eor	r1, r1
     9b4:	ec 01       	movw	r28, r24
     9b6:	ca 0d       	add	r28, r10
					temperature = Serial1.read();
     9b8:	db 1d       	adc	r29, r11
     9ba:	8c e9       	ldi	r24, 0x9C	; 156
     9bc:	93 e0       	ldi	r25, 0x03	; 3
					registered = Serial1.read();
     9be:	e7 d1       	rcall	.+974    	; 0xd8e <_ZN14HardwareSerial4readEv>
     9c0:	8c e9       	ldi	r24, 0x9C	; 156
     9c2:	93 e0       	ldi	r25, 0x03	; 3
					moving = Serial1.read();
     9c4:	e4 d1       	rcall	.+968    	; 0xd8e <_ZN14HardwareSerial4readEv>
     9c6:	8c e9       	ldi	r24, 0x9C	; 156
     9c8:	93 e0       	ldi	r25, 0x03	; 3
     9ca:	e1 d1       	rcall	.+962    	; 0xd8e <_ZN14HardwareSerial4readEv>
					lock = Serial1.read();
     9cc:	8c e9       	ldi	r24, 0x9C	; 156
     9ce:	93 e0       	ldi	r25, 0x03	; 3
     9d0:	de d1       	rcall	.+956    	; 0xd8e <_ZN14HardwareSerial4readEv>
     9d2:	8c e9       	ldi	r24, 0x9C	; 156
					punch = Serial1.read();
     9d4:	93 e0       	ldi	r25, 0x03	; 3
     9d6:	db d1       	rcall	.+950    	; 0xd8e <_ZN14HardwareSerial4readEv>
     9d8:	8c e9       	ldi	r24, 0x9C	; 156
     9da:	93 e0       	ldi	r25, 0x03	; 3
					punch = (Serial1.read() * 255) + punch;
     9dc:	d8 d1       	rcall	.+944    	; 0xd8e <_ZN14HardwareSerial4readEv>
     9de:	8c e9       	ldi	r24, 0x9C	; 156
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	d5 d1       	rcall	.+938    	; 0xd8e <_ZN14HardwareSerial4readEv>
					current = Serial1.read();
     9e4:	8c e9       	ldi	r24, 0x9C	; 156
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	d2 d1       	rcall	.+932    	; 0xd8e <_ZN14HardwareSerial4readEv>
     9ea:	8c e9       	ldi	r24, 0x9C	; 156
					current = (Serial1.read() * 255) + current;
     9ec:	93 e0       	ldi	r25, 0x03	; 3
     9ee:	cf d1       	rcall	.+926    	; 0xd8e <_ZN14HardwareSerial4readEv>
     9f0:	01 15       	cp	r16, r1
					//Serial.println(load);
					if (speed > 0x3FF) {
     9f2:	54 e0       	ldi	r21, 0x04	; 4
     9f4:	15 07       	cpc	r17, r21
     9f6:	24 f0       	brlt	.+8      	; 0xa00 <_Z12printDataLCDv+0x1a6>
						speedDirection = CW;
						speed = speed - 0x400;
     9f8:	14 50       	subi	r17, 0x04	; 4
					punch = (Serial1.read() * 255) + punch;
					current = Serial1.read();
					current = (Serial1.read() * 255) + current;
					//Serial.println(load);
					if (speed > 0x3FF) {
						speedDirection = CW;
     9fa:	aa 24       	eor	r10, r10
     9fc:	a3 94       	inc	r10
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <_Z12printDataLCDv+0x1a8>
						speed = speed - 0x400;
						} else {
						speedDirection = CCW;
					}
					if (load > 0x3FF) {
     a00:	a1 2c       	mov	r10, r1
     a02:	c1 15       	cp	r28, r1
     a04:	84 e0       	ldi	r24, 0x04	; 4
						loadDirection = CW;
						load = load - 0x400;
     a06:	d8 07       	cpc	r29, r24
						speed = speed - 0x400;
						} else {
						speedDirection = CCW;
					}
					if (load > 0x3FF) {
						loadDirection = CW;
     a08:	24 f0       	brlt	.+8      	; 0xa12 <_Z12printDataLCDv+0x1b8>
     a0a:	d4 50       	subi	r29, 0x04	; 4
						load = load - 0x400;
						} else {
						loadDirection = CCW;
     a0c:	bb 24       	eor	r11, r11

					//Serial.println("================");
					//lcd.clear();
					//char buffer[16];
					//sprintf(buffer, "Servo ID: %d", servoID);
					printLCD(LCD_COL1, 0, servoID, 1);
     a0e:	b3 94       	inc	r11
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <_Z12printDataLCDv+0x1ba>
     a12:	b1 2c       	mov	r11, r1
     a14:	a6 01       	movw	r20, r12
     a16:	55 27       	eor	r21, r21
					printLCD(LCD_COL1, 1, position * MX_PRESENT_POSITION_DEGREE, 3);
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	84 e0       	ldi	r24, 0x04	; 4
     a1e:	34 dc       	rcall	.-1944   	; 0x288 <_Z8printLCDhhih>
     a20:	b7 01       	movw	r22, r14
     a22:	0f 2c       	mov	r0, r15
     a24:	00 0c       	add	r0, r0
     a26:	88 0b       	sbc	r24, r24
     a28:	99 0b       	sbc	r25, r25
     a2a:	a8 d0       	rcall	.+336    	; 0xb7c <__floatsisf>
     a2c:	28 e5       	ldi	r18, 0x58	; 88
     a2e:	39 e3       	ldi	r19, 0x39	; 57
     a30:	44 eb       	ldi	r20, 0xB4	; 180
     a32:	5d e3       	ldi	r21, 0x3D	; 61
     a34:	07 d1       	rcall	.+526    	; 0xc44 <__mulsf3>
     a36:	6f d0       	rcall	.+222    	; 0xb16 <__fixsfsi>
     a38:	23 e0       	ldi	r18, 0x03	; 3
     a3a:	ab 01       	movw	r20, r22
     a3c:	61 e0       	ldi	r22, 0x01	; 1
					lcd.print((char)CH_DEG);
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	23 dc       	rcall	.-1978   	; 0x288 <_Z8printLCDhhih>
     a42:	6f ed       	ldi	r22, 0xDF	; 223
     a44:	88 ee       	ldi	r24, 0xE8	; 232
					printLCD(LCD_COL2, 1, position, 4);
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	6d d4       	rcall	.+2266   	; 0x1324 <_ZN5Print5printEc>
     a4a:	24 e0       	ldi	r18, 0x04	; 4
     a4c:	a7 01       	movw	r20, r14
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	8a e0       	ldi	r24, 0x0A	; 10
					printLCD(LCD_COL2+5, 1, currPos, 4);
     a52:	1a dc       	rcall	.-1996   	; 0x288 <_Z8printLCDhhih>
     a54:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <currPos>
     a58:	50 91 fa 02 	lds	r21, 0x02FA	; 0x8002fa <currPos+0x1>
     a5c:	24 e0       	ldi	r18, 0x04	; 4
     a5e:	61 e0       	ldi	r22, 0x01	; 1
					// 			lcd.setCursor(LCD_COL2 ,1);
					// 			lcd.print((int)(currPos));
					//lcd.setCursor(10,1);
					//lcd.print(rotations);
					printLCD(LCD_COL1, 2, speed, 3);
     a60:	8f e0       	ldi	r24, 0x0F	; 15
     a62:	12 dc       	rcall	.-2012   	; 0x288 <_Z8printLCDhhih>
     a64:	23 e0       	ldi	r18, 0x03	; 3
     a66:	a8 01       	movw	r20, r16
     a68:	62 e0       	ldi	r22, 0x02	; 2
					lcd.print(speedDirection ? (char)CH_ARR : (char)CH_ARL);
     a6a:	84 e0       	ldi	r24, 0x04	; 4
     a6c:	0d dc       	rcall	.-2022   	; 0x288 <_Z8printLCDhhih>
     a6e:	a1 10       	cpse	r10, r1
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <_Z12printDataLCDv+0x21c>
     a72:	6f e7       	ldi	r22, 0x7F	; 127
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <_Z12printDataLCDv+0x21e>
     a76:	6e e7       	ldi	r22, 0x7E	; 126
     a78:	88 ee       	ldi	r24, 0xE8	; 232
					printLCD(LCD_COL1, 3, load, 3);
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	53 d4       	rcall	.+2214   	; 0x1324 <_ZN5Print5printEc>
     a7e:	23 e0       	ldi	r18, 0x03	; 3
     a80:	ae 01       	movw	r20, r28
     a82:	63 e0       	ldi	r22, 0x03	; 3
     a84:	84 e0       	ldi	r24, 0x04	; 4
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
     a86:	00 dc       	rcall	.-2048   	; 0x288 <_Z8printLCDhhih>
     a88:	b1 10       	cpse	r11, r1
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <_Z12printDataLCDv+0x236>
     a8c:	6f e7       	ldi	r22, 0x7F	; 127
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <_Z12printDataLCDv+0x238>
     a90:	6e e7       	ldi	r22, 0x7E	; 126
     a92:	88 ee       	ldi	r24, 0xE8	; 232
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	46 d4       	rcall	.+2188   	; 0x1324 <_ZN5Print5printEc>
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
				}
			}
			while(Serial1.available() > 0) {
     a98:	8c e9       	ldi	r24, 0x9C	; 156
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	5e d1       	rcall	.+700    	; 0xd5a <_ZN14HardwareSerial9availableEv>
     a9e:	18 16       	cp	r1, r24
     aa0:	19 06       	cpc	r1, r25
     aa2:	24 f4       	brge	.+8      	; 0xaac <_Z12printDataLCDv+0x252>
     aa4:	8c e9       	ldi	r24, 0x9C	; 156
				//Serial.println(Serial1.read());
				Serial1.read();
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	72 d1       	rcall	.+740    	; 0xd8e <_ZN14HardwareSerial4readEv>
     aaa:	f6 cf       	rjmp	.-20     	; 0xa98 <_Z12printDataLCDv+0x23e>
     aac:	61 e0       	ldi	r22, 0x01	; 1
			}
			
			delay(1);
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	74 d5       	rcall	.+2792   	; 0x159e <delay>
     ab6:	40 91 f4 02 	lds	r20, 0x02F4	; 0x8002f4 <cycle_counter>
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
     aba:	50 91 f5 02 	lds	r21, 0x02F5	; 0x8002f5 <cycle_counter+0x1>
     abe:	40 31       	cpi	r20, 0x10	; 16
     ac0:	27 e2       	ldi	r18, 0x27	; 39
     ac2:	52 07       	cpc	r21, r18
     ac4:	1c f4       	brge	.+6      	; 0xacc <_Z12printDataLCDv+0x272>
     ac6:	4f 5f       	subi	r20, 0xFF	; 255
     ac8:	5f 4f       	sbci	r21, 0xFF	; 255
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <_Z12printDataLCDv+0x276>
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	50 93 f5 02 	sts	0x02F5, r21	; 0x8002f5 <cycle_counter+0x1>
     ad4:	40 93 f4 02 	sts	0x02F4, r20	; 0x8002f4 <cycle_counter>
     ad8:	24 e0       	ldi	r18, 0x04	; 4
     ada:	60 e0       	ldi	r22, 0x00	; 0
			printLCD(16, 0, cycle_counter, 4);
     adc:	80 e1       	ldi	r24, 0x10	; 16
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
		}
	}
}
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	ca cb       	rjmp	.-2156   	; 0x288 <_Z8printLCDhhih>
     af4:	df 91       	pop	r29
				Serial1.read();
			}
			
			delay(1);
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
			printLCD(16, 0, cycle_counter, 4);
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
		}
	}
}
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	08 95       	ret

00000b0a <loop>:
     b0a:	42 e2       	ldi	r20, 0x22	; 34
     b0c:	64 e2       	ldi	r22, 0x24	; 36
     b0e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {

	readServo(id, 0x24, 34);
     b12:	a9 dd       	rcall	.-1198   	; 0x666 <_Z9readServohhh>
	printDataLCD();
     b14:	a2 ce       	rjmp	.-700    	; 0x85a <_Z12printDataLCDv>

00000b16 <__fixsfsi>:
     b16:	04 d0       	rcall	.+8      	; 0xb20 <__fixunssfsi>
     b18:	68 94       	set
     b1a:	b1 11       	cpse	r27, r1
     b1c:	8d c0       	rjmp	.+282    	; 0xc38 <__fp_szero>
     b1e:	08 95       	ret

00000b20 <__fixunssfsi>:
     b20:	70 d0       	rcall	.+224    	; 0xc02 <__fp_splitA>
     b22:	88 f0       	brcs	.+34     	; 0xb46 <__fixunssfsi+0x26>
     b24:	9f 57       	subi	r25, 0x7F	; 127
     b26:	90 f0       	brcs	.+36     	; 0xb4c <__fixunssfsi+0x2c>
     b28:	b9 2f       	mov	r27, r25
     b2a:	99 27       	eor	r25, r25
     b2c:	b7 51       	subi	r27, 0x17	; 23
     b2e:	a0 f0       	brcs	.+40     	; 0xb58 <__fixunssfsi+0x38>
     b30:	d1 f0       	breq	.+52     	; 0xb66 <__fixunssfsi+0x46>
     b32:	66 0f       	add	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	88 1f       	adc	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	1a f0       	brmi	.+6      	; 0xb42 <__fixunssfsi+0x22>
     b3c:	ba 95       	dec	r27
     b3e:	c9 f7       	brne	.-14     	; 0xb32 <__fixunssfsi+0x12>
     b40:	12 c0       	rjmp	.+36     	; 0xb66 <__fixunssfsi+0x46>
     b42:	b1 30       	cpi	r27, 0x01	; 1
     b44:	81 f0       	breq	.+32     	; 0xb66 <__fixunssfsi+0x46>
     b46:	77 d0       	rcall	.+238    	; 0xc36 <__fp_zero>
     b48:	b1 e0       	ldi	r27, 0x01	; 1
     b4a:	08 95       	ret
     b4c:	74 c0       	rjmp	.+232    	; 0xc36 <__fp_zero>
     b4e:	67 2f       	mov	r22, r23
     b50:	78 2f       	mov	r23, r24
     b52:	88 27       	eor	r24, r24
     b54:	b8 5f       	subi	r27, 0xF8	; 248
     b56:	39 f0       	breq	.+14     	; 0xb66 <__fixunssfsi+0x46>
     b58:	b9 3f       	cpi	r27, 0xF9	; 249
     b5a:	cc f3       	brlt	.-14     	; 0xb4e <__fixunssfsi+0x2e>
     b5c:	86 95       	lsr	r24
     b5e:	77 95       	ror	r23
     b60:	67 95       	ror	r22
     b62:	b3 95       	inc	r27
     b64:	d9 f7       	brne	.-10     	; 0xb5c <__fixunssfsi+0x3c>
     b66:	3e f4       	brtc	.+14     	; 0xb76 <__fixunssfsi+0x56>
     b68:	90 95       	com	r25
     b6a:	80 95       	com	r24
     b6c:	70 95       	com	r23
     b6e:	61 95       	neg	r22
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	08 95       	ret

00000b78 <__floatunsisf>:
     b78:	e8 94       	clt
     b7a:	09 c0       	rjmp	.+18     	; 0xb8e <__floatsisf+0x12>

00000b7c <__floatsisf>:
     b7c:	97 fb       	bst	r25, 7
     b7e:	3e f4       	brtc	.+14     	; 0xb8e <__floatsisf+0x12>
     b80:	90 95       	com	r25
     b82:	80 95       	com	r24
     b84:	70 95       	com	r23
     b86:	61 95       	neg	r22
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	8f 4f       	sbci	r24, 0xFF	; 255
     b8c:	9f 4f       	sbci	r25, 0xFF	; 255
     b8e:	99 23       	and	r25, r25
     b90:	a9 f0       	breq	.+42     	; 0xbbc <__floatsisf+0x40>
     b92:	f9 2f       	mov	r31, r25
     b94:	96 e9       	ldi	r25, 0x96	; 150
     b96:	bb 27       	eor	r27, r27
     b98:	93 95       	inc	r25
     b9a:	f6 95       	lsr	r31
     b9c:	87 95       	ror	r24
     b9e:	77 95       	ror	r23
     ba0:	67 95       	ror	r22
     ba2:	b7 95       	ror	r27
     ba4:	f1 11       	cpse	r31, r1
     ba6:	f8 cf       	rjmp	.-16     	; 0xb98 <__floatsisf+0x1c>
     ba8:	fa f4       	brpl	.+62     	; 0xbe8 <__floatsisf+0x6c>
     baa:	bb 0f       	add	r27, r27
     bac:	11 f4       	brne	.+4      	; 0xbb2 <__floatsisf+0x36>
     bae:	60 ff       	sbrs	r22, 0
     bb0:	1b c0       	rjmp	.+54     	; 0xbe8 <__floatsisf+0x6c>
     bb2:	6f 5f       	subi	r22, 0xFF	; 255
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255
     bb6:	8f 4f       	sbci	r24, 0xFF	; 255
     bb8:	9f 4f       	sbci	r25, 0xFF	; 255
     bba:	16 c0       	rjmp	.+44     	; 0xbe8 <__floatsisf+0x6c>
     bbc:	88 23       	and	r24, r24
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <__floatsisf+0x48>
     bc0:	96 e9       	ldi	r25, 0x96	; 150
     bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <__floatsisf+0x6a>
     bc4:	77 23       	and	r23, r23
     bc6:	21 f0       	breq	.+8      	; 0xbd0 <__floatsisf+0x54>
     bc8:	9e e8       	ldi	r25, 0x8E	; 142
     bca:	87 2f       	mov	r24, r23
     bcc:	76 2f       	mov	r23, r22
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__floatsisf+0x5e>
     bd0:	66 23       	and	r22, r22
     bd2:	71 f0       	breq	.+28     	; 0xbf0 <__floatsisf+0x74>
     bd4:	96 e8       	ldi	r25, 0x86	; 134
     bd6:	86 2f       	mov	r24, r22
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	2a f0       	brmi	.+10     	; 0xbe8 <__floatsisf+0x6c>
     bde:	9a 95       	dec	r25
     be0:	66 0f       	add	r22, r22
     be2:	77 1f       	adc	r23, r23
     be4:	88 1f       	adc	r24, r24
     be6:	da f7       	brpl	.-10     	; 0xbde <__floatsisf+0x62>
     be8:	88 0f       	add	r24, r24
     bea:	96 95       	lsr	r25
     bec:	87 95       	ror	r24
     bee:	97 f9       	bld	r25, 7
     bf0:	08 95       	ret

00000bf2 <__fp_split3>:
     bf2:	57 fd       	sbrc	r21, 7
     bf4:	90 58       	subi	r25, 0x80	; 128
     bf6:	44 0f       	add	r20, r20
     bf8:	55 1f       	adc	r21, r21
     bfa:	59 f0       	breq	.+22     	; 0xc12 <__fp_splitA+0x10>
     bfc:	5f 3f       	cpi	r21, 0xFF	; 255
     bfe:	71 f0       	breq	.+28     	; 0xc1c <__fp_splitA+0x1a>
     c00:	47 95       	ror	r20

00000c02 <__fp_splitA>:
     c02:	88 0f       	add	r24, r24
     c04:	97 fb       	bst	r25, 7
     c06:	99 1f       	adc	r25, r25
     c08:	61 f0       	breq	.+24     	; 0xc22 <__fp_splitA+0x20>
     c0a:	9f 3f       	cpi	r25, 0xFF	; 255
     c0c:	79 f0       	breq	.+30     	; 0xc2c <__fp_splitA+0x2a>
     c0e:	87 95       	ror	r24
     c10:	08 95       	ret
     c12:	12 16       	cp	r1, r18
     c14:	13 06       	cpc	r1, r19
     c16:	14 06       	cpc	r1, r20
     c18:	55 1f       	adc	r21, r21
     c1a:	f2 cf       	rjmp	.-28     	; 0xc00 <__fp_split3+0xe>
     c1c:	46 95       	lsr	r20
     c1e:	f1 df       	rcall	.-30     	; 0xc02 <__fp_splitA>
     c20:	08 c0       	rjmp	.+16     	; 0xc32 <__fp_splitA+0x30>
     c22:	16 16       	cp	r1, r22
     c24:	17 06       	cpc	r1, r23
     c26:	18 06       	cpc	r1, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	f1 cf       	rjmp	.-30     	; 0xc0e <__fp_splitA+0xc>
     c2c:	86 95       	lsr	r24
     c2e:	71 05       	cpc	r23, r1
     c30:	61 05       	cpc	r22, r1
     c32:	08 94       	sec
     c34:	08 95       	ret

00000c36 <__fp_zero>:
     c36:	e8 94       	clt

00000c38 <__fp_szero>:
     c38:	bb 27       	eor	r27, r27
     c3a:	66 27       	eor	r22, r22
     c3c:	77 27       	eor	r23, r23
     c3e:	cb 01       	movw	r24, r22
     c40:	97 f9       	bld	r25, 7
     c42:	08 95       	ret

00000c44 <__mulsf3>:
     c44:	0b d0       	rcall	.+22     	; 0xc5c <__mulsf3x>
     c46:	78 c0       	rjmp	.+240    	; 0xd38 <__fp_round>
     c48:	69 d0       	rcall	.+210    	; 0xd1c <__fp_pscA>
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__mulsf3+0x12>
     c4c:	6e d0       	rcall	.+220    	; 0xd2a <__fp_pscB>
     c4e:	18 f0       	brcs	.+6      	; 0xc56 <__mulsf3+0x12>
     c50:	95 23       	and	r25, r21
     c52:	09 f0       	breq	.+2      	; 0xc56 <__mulsf3+0x12>
     c54:	5a c0       	rjmp	.+180    	; 0xd0a <__fp_inf>
     c56:	5f c0       	rjmp	.+190    	; 0xd16 <__fp_nan>
     c58:	11 24       	eor	r1, r1
     c5a:	ee cf       	rjmp	.-36     	; 0xc38 <__fp_szero>

00000c5c <__mulsf3x>:
     c5c:	ca df       	rcall	.-108    	; 0xbf2 <__fp_split3>
     c5e:	a0 f3       	brcs	.-24     	; 0xc48 <__mulsf3+0x4>

00000c60 <__mulsf3_pse>:
     c60:	95 9f       	mul	r25, r21
     c62:	d1 f3       	breq	.-12     	; 0xc58 <__mulsf3+0x14>
     c64:	95 0f       	add	r25, r21
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	55 1f       	adc	r21, r21
     c6a:	62 9f       	mul	r22, r18
     c6c:	f0 01       	movw	r30, r0
     c6e:	72 9f       	mul	r23, r18
     c70:	bb 27       	eor	r27, r27
     c72:	f0 0d       	add	r31, r0
     c74:	b1 1d       	adc	r27, r1
     c76:	63 9f       	mul	r22, r19
     c78:	aa 27       	eor	r26, r26
     c7a:	f0 0d       	add	r31, r0
     c7c:	b1 1d       	adc	r27, r1
     c7e:	aa 1f       	adc	r26, r26
     c80:	64 9f       	mul	r22, r20
     c82:	66 27       	eor	r22, r22
     c84:	b0 0d       	add	r27, r0
     c86:	a1 1d       	adc	r26, r1
     c88:	66 1f       	adc	r22, r22
     c8a:	82 9f       	mul	r24, r18
     c8c:	22 27       	eor	r18, r18
     c8e:	b0 0d       	add	r27, r0
     c90:	a1 1d       	adc	r26, r1
     c92:	62 1f       	adc	r22, r18
     c94:	73 9f       	mul	r23, r19
     c96:	b0 0d       	add	r27, r0
     c98:	a1 1d       	adc	r26, r1
     c9a:	62 1f       	adc	r22, r18
     c9c:	83 9f       	mul	r24, r19
     c9e:	a0 0d       	add	r26, r0
     ca0:	61 1d       	adc	r22, r1
     ca2:	22 1f       	adc	r18, r18
     ca4:	74 9f       	mul	r23, r20
     ca6:	33 27       	eor	r19, r19
     ca8:	a0 0d       	add	r26, r0
     caa:	61 1d       	adc	r22, r1
     cac:	23 1f       	adc	r18, r19
     cae:	84 9f       	mul	r24, r20
     cb0:	60 0d       	add	r22, r0
     cb2:	21 1d       	adc	r18, r1
     cb4:	82 2f       	mov	r24, r18
     cb6:	76 2f       	mov	r23, r22
     cb8:	6a 2f       	mov	r22, r26
     cba:	11 24       	eor	r1, r1
     cbc:	9f 57       	subi	r25, 0x7F	; 127
     cbe:	50 40       	sbci	r21, 0x00	; 0
     cc0:	8a f0       	brmi	.+34     	; 0xce4 <__mulsf3_pse+0x84>
     cc2:	e1 f0       	breq	.+56     	; 0xcfc <__mulsf3_pse+0x9c>
     cc4:	88 23       	and	r24, r24
     cc6:	4a f0       	brmi	.+18     	; 0xcda <__mulsf3_pse+0x7a>
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	bb 1f       	adc	r27, r27
     cce:	66 1f       	adc	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	88 1f       	adc	r24, r24
     cd4:	91 50       	subi	r25, 0x01	; 1
     cd6:	50 40       	sbci	r21, 0x00	; 0
     cd8:	a9 f7       	brne	.-22     	; 0xcc4 <__mulsf3_pse+0x64>
     cda:	9e 3f       	cpi	r25, 0xFE	; 254
     cdc:	51 05       	cpc	r21, r1
     cde:	70 f0       	brcs	.+28     	; 0xcfc <__mulsf3_pse+0x9c>
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <__fp_inf>
     ce2:	aa cf       	rjmp	.-172    	; 0xc38 <__fp_szero>
     ce4:	5f 3f       	cpi	r21, 0xFF	; 255
     ce6:	ec f3       	brlt	.-6      	; 0xce2 <__mulsf3_pse+0x82>
     ce8:	98 3e       	cpi	r25, 0xE8	; 232
     cea:	dc f3       	brlt	.-10     	; 0xce2 <__mulsf3_pse+0x82>
     cec:	86 95       	lsr	r24
     cee:	77 95       	ror	r23
     cf0:	67 95       	ror	r22
     cf2:	b7 95       	ror	r27
     cf4:	f7 95       	ror	r31
     cf6:	e7 95       	ror	r30
     cf8:	9f 5f       	subi	r25, 0xFF	; 255
     cfa:	c1 f7       	brne	.-16     	; 0xcec <__mulsf3_pse+0x8c>
     cfc:	fe 2b       	or	r31, r30
     cfe:	88 0f       	add	r24, r24
     d00:	91 1d       	adc	r25, r1
     d02:	96 95       	lsr	r25
     d04:	87 95       	ror	r24
     d06:	97 f9       	bld	r25, 7
     d08:	08 95       	ret

00000d0a <__fp_inf>:
     d0a:	97 f9       	bld	r25, 7
     d0c:	9f 67       	ori	r25, 0x7F	; 127
     d0e:	80 e8       	ldi	r24, 0x80	; 128
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	08 95       	ret

00000d16 <__fp_nan>:
     d16:	9f ef       	ldi	r25, 0xFF	; 255
     d18:	80 ec       	ldi	r24, 0xC0	; 192
     d1a:	08 95       	ret

00000d1c <__fp_pscA>:
     d1c:	00 24       	eor	r0, r0
     d1e:	0a 94       	dec	r0
     d20:	16 16       	cp	r1, r22
     d22:	17 06       	cpc	r1, r23
     d24:	18 06       	cpc	r1, r24
     d26:	09 06       	cpc	r0, r25
     d28:	08 95       	ret

00000d2a <__fp_pscB>:
     d2a:	00 24       	eor	r0, r0
     d2c:	0a 94       	dec	r0
     d2e:	12 16       	cp	r1, r18
     d30:	13 06       	cpc	r1, r19
     d32:	14 06       	cpc	r1, r20
     d34:	05 06       	cpc	r0, r21
     d36:	08 95       	ret

00000d38 <__fp_round>:
     d38:	09 2e       	mov	r0, r25
     d3a:	03 94       	inc	r0
     d3c:	00 0c       	add	r0, r0
     d3e:	11 f4       	brne	.+4      	; 0xd44 <__fp_round+0xc>
     d40:	88 23       	and	r24, r24
     d42:	52 f0       	brmi	.+20     	; 0xd58 <__fp_round+0x20>
     d44:	bb 0f       	add	r27, r27
     d46:	40 f4       	brcc	.+16     	; 0xd58 <__fp_round+0x20>
     d48:	bf 2b       	or	r27, r31
     d4a:	11 f4       	brne	.+4      	; 0xd50 <__fp_round+0x18>
     d4c:	60 ff       	sbrs	r22, 0
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <__fp_round+0x20>
     d50:	6f 5f       	subi	r22, 0xFF	; 255
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	08 95       	ret

00000d5a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d5a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d5c:	91 8d       	ldd	r25, Z+25	; 0x19
     d5e:	22 8d       	ldd	r18, Z+26	; 0x1a
     d60:	89 2f       	mov	r24, r25
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	80 5c       	subi	r24, 0xC0	; 192
     d66:	9f 4f       	sbci	r25, 0xFF	; 255
     d68:	82 1b       	sub	r24, r18
     d6a:	91 09       	sbc	r25, r1
}
     d6c:	8f 73       	andi	r24, 0x3F	; 63
     d6e:	99 27       	eor	r25, r25
     d70:	08 95       	ret

00000d72 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d72:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d74:	91 8d       	ldd	r25, Z+25	; 0x19
     d76:	82 8d       	ldd	r24, Z+26	; 0x1a
     d78:	98 17       	cp	r25, r24
     d7a:	31 f0       	breq	.+12     	; 0xd88 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d7c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d7e:	e8 0f       	add	r30, r24
     d80:	f1 1d       	adc	r31, r1
     d82:	85 8d       	ldd	r24, Z+29	; 0x1d
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d88:	8f ef       	ldi	r24, 0xFF	; 255
     d8a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d8c:	08 95       	ret

00000d8e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d8e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d90:	91 8d       	ldd	r25, Z+25	; 0x19
     d92:	82 8d       	ldd	r24, Z+26	; 0x1a
     d94:	98 17       	cp	r25, r24
     d96:	61 f0       	breq	.+24     	; 0xdb0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d98:	82 8d       	ldd	r24, Z+26	; 0x1a
     d9a:	df 01       	movw	r26, r30
     d9c:	a8 0f       	add	r26, r24
     d9e:	b1 1d       	adc	r27, r1
     da0:	5d 96       	adiw	r26, 0x1d	; 29
     da2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     da4:	92 8d       	ldd	r25, Z+26	; 0x1a
     da6:	9f 5f       	subi	r25, 0xFF	; 255
     da8:	9f 73       	andi	r25, 0x3F	; 63
     daa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     db4:	08 95       	ret

00000db6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     db6:	fc 01       	movw	r30, r24
     db8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     dba:	44 8d       	ldd	r20, Z+28	; 0x1c
     dbc:	25 2f       	mov	r18, r21
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	84 2f       	mov	r24, r20
     dc2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     dc4:	82 1b       	sub	r24, r18
     dc6:	93 0b       	sbc	r25, r19
     dc8:	54 17       	cp	r21, r20
     dca:	10 f0       	brcs	.+4      	; 0xdd0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     dcc:	cf 96       	adiw	r24, 0x3f	; 63
     dce:	08 95       	ret
  return tail - head - 1;
     dd0:	01 97       	sbiw	r24, 0x01	; 1
}
     dd2:	08 95       	ret

00000dd4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     dd4:	8c e7       	ldi	r24, 0x7C	; 124
     dd6:	98 e0       	ldi	r25, 0x08	; 8
     dd8:	89 2b       	or	r24, r25
     dda:	39 f0       	breq	.+14     	; 0xdea <_Z14serialEventRunv+0x16>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	89 2b       	or	r24, r25
     de2:	19 f0       	breq	.+6      	; 0xdea <_Z14serialEventRunv+0x16>
     de4:	89 d1       	rcall	.+786    	; 0x10f8 <_Z17Serial0_availablev>
     de6:	81 11       	cpse	r24, r1
     de8:	24 c0       	rjmp	.+72     	; 0xe32 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     dea:	81 e1       	ldi	r24, 0x11	; 17
     dec:	99 e0       	ldi	r25, 0x09	; 9
     dee:	89 2b       	or	r24, r25
     df0:	39 f0       	breq	.+14     	; 0xe00 <_Z14serialEventRunv+0x2c>
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	89 2b       	or	r24, r25
     df8:	19 f0       	breq	.+6      	; 0xe00 <_Z14serialEventRunv+0x2c>
     dfa:	13 d2       	rcall	.+1062   	; 0x1222 <_Z17Serial1_availablev>
     dfc:	81 11       	cpse	r24, r1
     dfe:	1c c0       	rjmp	.+56     	; 0xe38 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	89 2b       	or	r24, r25
     e06:	41 f0       	breq	.+16     	; 0xe18 <_Z14serialEventRunv+0x44>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	89 2b       	or	r24, r25
     e0e:	21 f0       	breq	.+8      	; 0xe18 <_Z14serialEventRunv+0x44>
     e10:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e14:	81 11       	cpse	r24, r1
     e16:	13 c0       	rjmp	.+38     	; 0xe3e <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	89 2b       	or	r24, r25
     e1e:	a1 f0       	breq	.+40     	; 0xe48 <_Z14serialEventRunv+0x74>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	89 2b       	or	r24, r25
     e26:	81 f0       	breq	.+32     	; 0xe48 <_Z14serialEventRunv+0x74>
     e28:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e2c:	81 11       	cpse	r24, r1
     e2e:	0a c0       	rjmp	.+20     	; 0xe44 <_Z14serialEventRunv+0x70>
     e30:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e32:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e36:	d9 cf       	rjmp	.-78     	; 0xdea <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     e38:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e3c:	e1 cf       	rjmp	.-62     	; 0xe00 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     e3e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e42:	ea cf       	rjmp	.-44     	; 0xe18 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     e44:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     e48:	08 95       	ret

00000e4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     e4a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     e4c:	84 8d       	ldd	r24, Z+28	; 0x1c
     e4e:	df 01       	movw	r26, r30
     e50:	a8 0f       	add	r26, r24
     e52:	b1 1d       	adc	r27, r1
     e54:	a3 5a       	subi	r26, 0xA3	; 163
     e56:	bf 4f       	sbci	r27, 0xFF	; 255
     e58:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     e5a:	84 8d       	ldd	r24, Z+28	; 0x1c
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	8f 73       	andi	r24, 0x3F	; 63
     e62:	99 27       	eor	r25, r25
     e64:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     e66:	a6 89       	ldd	r26, Z+22	; 0x16
     e68:	b7 89       	ldd	r27, Z+23	; 0x17
     e6a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     e6c:	a0 89       	ldd	r26, Z+16	; 0x10
     e6e:	b1 89       	ldd	r27, Z+17	; 0x11
     e70:	8c 91       	ld	r24, X
     e72:	83 70       	andi	r24, 0x03	; 3
     e74:	80 64       	ori	r24, 0x40	; 64
     e76:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     e78:	93 8d       	ldd	r25, Z+27	; 0x1b
     e7a:	84 8d       	ldd	r24, Z+28	; 0x1c
     e7c:	98 13       	cpse	r25, r24
     e7e:	06 c0       	rjmp	.+12     	; 0xe8c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     e80:	02 88       	ldd	r0, Z+18	; 0x12
     e82:	f3 89       	ldd	r31, Z+19	; 0x13
     e84:	e0 2d       	mov	r30, r0
     e86:	80 81       	ld	r24, Z
     e88:	8f 7d       	andi	r24, 0xDF	; 223
     e8a:	80 83       	st	Z, r24
     e8c:	08 95       	ret

00000e8e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	ec 01       	movw	r28, r24
  _written = true;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     ea0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ea2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ea4:	98 13       	cpse	r25, r24
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <_ZN14HardwareSerial5writeEh+0x24>
     ea8:	e8 89       	ldd	r30, Y+16	; 0x10
     eaa:	f9 89       	ldd	r31, Y+17	; 0x11
     eac:	80 81       	ld	r24, Z
     eae:	85 fd       	sbrc	r24, 5
     eb0:	25 c0       	rjmp	.+74     	; 0xefc <_ZN14HardwareSerial5writeEh+0x6e>
     eb2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     eb4:	0b 8d       	ldd	r16, Y+27	; 0x1b
     eb6:	10 e0       	ldi	r17, 0x00	; 0
     eb8:	0f 5f       	subi	r16, 0xFF	; 255
     eba:	1f 4f       	sbci	r17, 0xFF	; 255
     ebc:	0f 73       	andi	r16, 0x3F	; 63
     ebe:	11 27       	eor	r17, r17
     ec0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     ec2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ec4:	e8 12       	cpse	r14, r24
     ec6:	0b c0       	rjmp	.+22     	; 0xede <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	07 fc       	sbrc	r0, 7
     ecc:	fa cf       	rjmp	.-12     	; 0xec2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     ece:	e8 89       	ldd	r30, Y+16	; 0x10
     ed0:	f9 89       	ldd	r31, Y+17	; 0x11
     ed2:	80 81       	ld	r24, Z
     ed4:	85 ff       	sbrs	r24, 5
     ed6:	f5 cf       	rjmp	.-22     	; 0xec2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     ed8:	ce 01       	movw	r24, r28
     eda:	b7 df       	rcall	.-146    	; 0xe4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     edc:	f2 cf       	rjmp	.-28     	; 0xec2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee0:	fe 01       	movw	r30, r28
     ee2:	e8 0f       	add	r30, r24
     ee4:	f1 1d       	adc	r31, r1
     ee6:	e3 5a       	subi	r30, 0xA3	; 163
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     eec:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     eee:	f8 94       	cli
    _tx_buffer_head = i;
     ef0:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     ef2:	ea 89       	ldd	r30, Y+18	; 0x12
     ef4:	fb 89       	ldd	r31, Y+19	; 0x13
     ef6:	80 81       	ld	r24, Z
     ef8:	80 62       	ori	r24, 0x20	; 32
     efa:	0a c0       	rjmp	.+20     	; 0xf10 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     efc:	9f b7       	in	r25, 0x3f	; 63
     efe:	f8 94       	cli
      *_udr = c;
     f00:	ee 89       	ldd	r30, Y+22	; 0x16
     f02:	ff 89       	ldd	r31, Y+23	; 0x17
     f04:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     f06:	e8 89       	ldd	r30, Y+16	; 0x10
     f08:	f9 89       	ldd	r31, Y+17	; 0x11
     f0a:	80 81       	ld	r24, Z
     f0c:	83 70       	andi	r24, 0x03	; 3
     f0e:	80 64       	ori	r24, 0x40	; 64
     f10:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f12:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	08 95       	ret

00000f26 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     f2c:	88 8d       	ldd	r24, Y+24	; 0x18
     f2e:	88 23       	and	r24, r24
     f30:	c1 f0       	breq	.+48     	; 0xf62 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     f32:	ea 89       	ldd	r30, Y+18	; 0x12
     f34:	fb 89       	ldd	r31, Y+19	; 0x13
     f36:	80 81       	ld	r24, Z
     f38:	85 fd       	sbrc	r24, 5
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <_ZN14HardwareSerial5flushEv+0x20>
     f3c:	a8 89       	ldd	r26, Y+16	; 0x10
     f3e:	b9 89       	ldd	r27, Y+17	; 0x11
     f40:	8c 91       	ld	r24, X
     f42:	86 fd       	sbrc	r24, 6
     f44:	0e c0       	rjmp	.+28     	; 0xf62 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	07 fc       	sbrc	r0, 7
     f4a:	f5 cf       	rjmp	.-22     	; 0xf36 <_ZN14HardwareSerial5flushEv+0x10>
     f4c:	80 81       	ld	r24, Z
     f4e:	85 ff       	sbrs	r24, 5
     f50:	f2 cf       	rjmp	.-28     	; 0xf36 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     f52:	a8 89       	ldd	r26, Y+16	; 0x10
     f54:	b9 89       	ldd	r27, Y+17	; 0x11
     f56:	8c 91       	ld	r24, X
     f58:	85 ff       	sbrs	r24, 5
     f5a:	ed cf       	rjmp	.-38     	; 0xf36 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     f5c:	ce 01       	movw	r24, r28
     f5e:	75 df       	rcall	.-278    	; 0xe4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f60:	e8 cf       	rjmp	.-48     	; 0xf32 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	6a 01       	movw	r12, r20
     f7a:	7b 01       	movw	r14, r22
     f7c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f7e:	e8 89       	ldd	r30, Y+16	; 0x10
     f80:	f9 89       	ldd	r31, Y+17	; 0x11
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f86:	41 15       	cp	r20, r1
     f88:	51 4e       	sbci	r21, 0xE1	; 225
     f8a:	61 05       	cpc	r22, r1
     f8c:	71 05       	cpc	r23, r1
     f8e:	b1 f0       	breq	.+44     	; 0xfbc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	79 e0       	ldi	r23, 0x09	; 9
     f94:	8d e3       	ldi	r24, 0x3D	; 61
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a7 01       	movw	r20, r14
     f9a:	96 01       	movw	r18, r12
     f9c:	0e 94 06 10 	call	0x200c	; 0x200c <__udivmodsi4>
     fa0:	da 01       	movw	r26, r20
     fa2:	c9 01       	movw	r24, r18
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	a1 09       	sbc	r26, r1
     fa8:	b1 09       	sbc	r27, r1
     faa:	b6 95       	lsr	r27
     fac:	a7 95       	ror	r26
     fae:	97 95       	ror	r25
     fb0:	87 95       	ror	r24
     fb2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     fb4:	21 15       	cp	r18, r1
     fb6:	80 e1       	ldi	r24, 0x10	; 16
     fb8:	38 07       	cpc	r19, r24
     fba:	a8 f0       	brcs	.+42     	; 0xfe6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     fbc:	e8 89       	ldd	r30, Y+16	; 0x10
     fbe:	f9 89       	ldd	r31, Y+17	; 0x11
     fc0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     fc2:	60 e8       	ldi	r22, 0x80	; 128
     fc4:	74 e8       	ldi	r23, 0x84	; 132
     fc6:	8e e1       	ldi	r24, 0x1E	; 30
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a7 01       	movw	r20, r14
     fcc:	96 01       	movw	r18, r12
     fce:	0e 94 06 10 	call	0x200c	; 0x200c <__udivmodsi4>
     fd2:	da 01       	movw	r26, r20
     fd4:	c9 01       	movw	r24, r18
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	a1 09       	sbc	r26, r1
     fda:	b1 09       	sbc	r27, r1
     fdc:	b6 95       	lsr	r27
     fde:	a7 95       	ror	r26
     fe0:	97 95       	ror	r25
     fe2:	87 95       	ror	r24
     fe4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     fe6:	ec 85       	ldd	r30, Y+12	; 0x0c
     fe8:	fd 85       	ldd	r31, Y+13	; 0x0d
     fea:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     fec:	ee 85       	ldd	r30, Y+14	; 0x0e
     fee:	ff 85       	ldd	r31, Y+15	; 0x0f
     ff0:	20 83       	st	Z, r18

  _written = false;
     ff2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     ff4:	ec 89       	ldd	r30, Y+20	; 0x14
     ff6:	fd 89       	ldd	r31, Y+21	; 0x15
     ff8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     ffa:	ea 89       	ldd	r30, Y+18	; 0x12
     ffc:	fb 89       	ldd	r31, Y+19	; 0x13
     ffe:	80 81       	ld	r24, Z
    1000:	80 61       	ori	r24, 0x10	; 16
    1002:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1004:	ea 89       	ldd	r30, Y+18	; 0x12
    1006:	fb 89       	ldd	r31, Y+19	; 0x13
    1008:	80 81       	ld	r24, Z
    100a:	88 60       	ori	r24, 0x08	; 8
    100c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    100e:	ea 89       	ldd	r30, Y+18	; 0x12
    1010:	fb 89       	ldd	r31, Y+19	; 0x13
    1012:	80 81       	ld	r24, Z
    1014:	80 68       	ori	r24, 0x80	; 128
    1016:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1018:	ea 89       	ldd	r30, Y+18	; 0x12
    101a:	fb 89       	ldd	r31, Y+19	; 0x13
    101c:	80 81       	ld	r24, Z
    101e:	8f 7d       	andi	r24, 0xDF	; 223
    1020:	80 83       	st	Z, r24
}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	08 95       	ret

00001032 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	08 95       	ret

00001038 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1038:	08 95       	ret

0000103a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	0b b6       	in	r0, 0x3b	; 59
    1046:	0f 92       	push	r0
    1048:	2f 93       	push	r18
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	ef 93       	push	r30
    1050:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1052:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <Serial+0x10>
    1056:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <Serial+0x11>
    105a:	80 81       	ld	r24, Z
    105c:	e0 91 15 03 	lds	r30, 0x0315	; 0x800315 <Serial+0x16>
    1060:	f0 91 16 03 	lds	r31, 0x0316	; 0x800316 <Serial+0x17>
    1064:	82 fd       	sbrc	r24, 2
    1066:	12 c0       	rjmp	.+36     	; 0x108c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1068:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    106a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <Serial+0x19>
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1072:	20 91 19 03 	lds	r18, 0x0319	; 0x800319 <Serial+0x1a>
    1076:	82 17       	cp	r24, r18
    1078:	51 f0       	breq	.+20     	; 0x108e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    107a:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <Serial+0x19>
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	e1 50       	subi	r30, 0x01	; 1
    1082:	fd 4f       	sbci	r31, 0xFD	; 253
    1084:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1086:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <Serial+0x19>
    108a:	01 c0       	rjmp	.+2      	; 0x108e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    108c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0b be       	out	0x3b, r0	; 59
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
    10b0:	0b b6       	in	r0, 0x3b	; 59
    10b2:	0f 92       	push	r0
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	4f 93       	push	r20
    10ba:	5f 93       	push	r21
    10bc:	6f 93       	push	r22
    10be:	7f 93       	push	r23
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	af 93       	push	r26
    10c6:	bf 93       	push	r27
    10c8:	ef 93       	push	r30
    10ca:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	bc de       	rcall	.-648    	; 0xe4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	0b be       	out	0x3b, r0	; 59
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	2e de       	rcall	.-932    	; 0xd5a <_ZN14HardwareSerial9availableEv>
    10fe:	21 e0       	ldi	r18, 0x01	; 1
    1100:	89 2b       	or	r24, r25
    1102:	09 f4       	brne	.+2      	; 0x1106 <_Z17Serial0_availablev+0xe>
    1104:	20 e0       	ldi	r18, 0x00	; 0
}
    1106:	82 2f       	mov	r24, r18
    1108:	08 95       	ret

0000110a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    110a:	ef ef       	ldi	r30, 0xFF	; 255
    110c:	f2 e0       	ldi	r31, 0x02	; 2
    110e:	13 82       	std	Z+3, r1	; 0x03
    1110:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1112:	88 ee       	ldi	r24, 0xE8	; 232
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	84 83       	std	Z+4, r24	; 0x04
    111c:	95 83       	std	Z+5, r25	; 0x05
    111e:	a6 83       	std	Z+6, r26	; 0x06
    1120:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1122:	8c ea       	ldi	r24, 0xAC	; 172
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
    112a:	85 ec       	ldi	r24, 0xC5	; 197
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	95 87       	std	Z+13, r25	; 0x0d
    1130:	84 87       	std	Z+12, r24	; 0x0c
    1132:	84 ec       	ldi	r24, 0xC4	; 196
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	97 87       	std	Z+15, r25	; 0x0f
    1138:	86 87       	std	Z+14, r24	; 0x0e
    113a:	80 ec       	ldi	r24, 0xC0	; 192
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	91 8b       	std	Z+17, r25	; 0x11
    1140:	80 8b       	std	Z+16, r24	; 0x10
    1142:	81 ec       	ldi	r24, 0xC1	; 193
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	93 8b       	std	Z+19, r25	; 0x13
    1148:	82 8b       	std	Z+18, r24	; 0x12
    114a:	82 ec       	ldi	r24, 0xC2	; 194
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	95 8b       	std	Z+21, r25	; 0x15
    1150:	84 8b       	std	Z+20, r24	; 0x14
    1152:	86 ec       	ldi	r24, 0xC6	; 198
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	97 8b       	std	Z+23, r25	; 0x17
    1158:	86 8b       	std	Z+22, r24	; 0x16
    115a:	11 8e       	std	Z+25, r1	; 0x19
    115c:	12 8e       	std	Z+26, r1	; 0x1a
    115e:	13 8e       	std	Z+27, r1	; 0x1b
    1160:	14 8e       	std	Z+28, r1	; 0x1c
    1162:	08 95       	ret

00001164 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1164:	1f 92       	push	r1
    1166:	0f 92       	push	r0
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	0f 92       	push	r0
    116c:	11 24       	eor	r1, r1
    116e:	0b b6       	in	r0, 0x3b	; 59
    1170:	0f 92       	push	r0
    1172:	2f 93       	push	r18
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	ef 93       	push	r30
    117a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    117c:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <Serial1+0x10>
    1180:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <Serial1+0x11>
    1184:	80 81       	ld	r24, Z
    1186:	e0 91 b2 03 	lds	r30, 0x03B2	; 0x8003b2 <Serial1+0x16>
    118a:	f0 91 b3 03 	lds	r31, 0x03B3	; 0x8003b3 <Serial1+0x17>
    118e:	82 fd       	sbrc	r24, 2
    1190:	12 c0       	rjmp	.+36     	; 0x11b6 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1192:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1194:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <Serial1+0x19>
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    119c:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <Serial1+0x1a>
    11a0:	82 17       	cp	r24, r18
    11a2:	51 f0       	breq	.+20     	; 0x11b8 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    11a4:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <Serial1+0x19>
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	e4 56       	subi	r30, 0x64	; 100
    11ac:	fc 4f       	sbci	r31, 0xFC	; 252
    11ae:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    11b0:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <Serial1+0x19>
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    11b6:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	9f 91       	pop	r25
    11be:	8f 91       	pop	r24
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0b be       	out	0x3b, r0	; 59
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	0b b6       	in	r0, 0x3b	; 59
    11dc:	0f 92       	push	r0
    11de:	2f 93       	push	r18
    11e0:	3f 93       	push	r19
    11e2:	4f 93       	push	r20
    11e4:	5f 93       	push	r21
    11e6:	6f 93       	push	r22
    11e8:	7f 93       	push	r23
    11ea:	8f 93       	push	r24
    11ec:	9f 93       	push	r25
    11ee:	af 93       	push	r26
    11f0:	bf 93       	push	r27
    11f2:	ef 93       	push	r30
    11f4:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    11f6:	8c e9       	ldi	r24, 0x9C	; 156
    11f8:	93 e0       	ldi	r25, 0x03	; 3
    11fa:	27 de       	rcall	.-946    	; 0xe4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0b be       	out	0x3b, r0	; 59
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1222:	8c e9       	ldi	r24, 0x9C	; 156
    1224:	93 e0       	ldi	r25, 0x03	; 3
    1226:	99 dd       	rcall	.-1230   	; 0xd5a <_ZN14HardwareSerial9availableEv>
    1228:	21 e0       	ldi	r18, 0x01	; 1
    122a:	89 2b       	or	r24, r25
    122c:	09 f4       	brne	.+2      	; 0x1230 <_Z17Serial1_availablev+0xe>
    122e:	20 e0       	ldi	r18, 0x00	; 0
}
    1230:	82 2f       	mov	r24, r18
    1232:	08 95       	ret

00001234 <_GLOBAL__sub_I___vector_36>:
    1234:	ec e9       	ldi	r30, 0x9C	; 156
    1236:	f3 e0       	ldi	r31, 0x03	; 3
    1238:	13 82       	std	Z+3, r1	; 0x03
    123a:	12 82       	std	Z+2, r1	; 0x02
    123c:	88 ee       	ldi	r24, 0xE8	; 232
    123e:	93 e0       	ldi	r25, 0x03	; 3
    1240:	a0 e0       	ldi	r26, 0x00	; 0
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	84 83       	std	Z+4, r24	; 0x04
    1246:	95 83       	std	Z+5, r25	; 0x05
    1248:	a6 83       	std	Z+6, r26	; 0x06
    124a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    124c:	8c ea       	ldi	r24, 0xAC	; 172
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
    1254:	8d ec       	ldi	r24, 0xCD	; 205
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	95 87       	std	Z+13, r25	; 0x0d
    125a:	84 87       	std	Z+12, r24	; 0x0c
    125c:	8c ec       	ldi	r24, 0xCC	; 204
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	97 87       	std	Z+15, r25	; 0x0f
    1262:	86 87       	std	Z+14, r24	; 0x0e
    1264:	88 ec       	ldi	r24, 0xC8	; 200
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	91 8b       	std	Z+17, r25	; 0x11
    126a:	80 8b       	std	Z+16, r24	; 0x10
    126c:	89 ec       	ldi	r24, 0xC9	; 201
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	93 8b       	std	Z+19, r25	; 0x13
    1272:	82 8b       	std	Z+18, r24	; 0x12
    1274:	8a ec       	ldi	r24, 0xCA	; 202
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	95 8b       	std	Z+21, r25	; 0x15
    127a:	84 8b       	std	Z+20, r24	; 0x14
    127c:	8e ec       	ldi	r24, 0xCE	; 206
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	97 8b       	std	Z+23, r25	; 0x17
    1282:	86 8b       	std	Z+22, r24	; 0x16
    1284:	11 8e       	std	Z+25, r1	; 0x19
    1286:	12 8e       	std	Z+26, r1	; 0x1a
    1288:	13 8e       	std	Z+27, r1	; 0x1b
    128a:	14 8e       	std	Z+28, r1	; 0x1c
    128c:	08 95       	ret

0000128e <initVariant>:
    128e:	08 95       	ret

00001290 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1290:	ca d1       	rcall	.+916    	; 0x1626 <init>

	initVariant();
    1292:	fd df       	rcall	.-6      	; 0x128e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1294:	71 da       	rcall	.-2846   	; 0x778 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1296:	ca ee       	ldi	r28, 0xEA	; 234
    1298:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    129a:	37 dc       	rcall	.-1938   	; 0xb0a <loop>
		if (serialEventRun) serialEventRun();
    129c:	20 97       	sbiw	r28, 0x00	; 0
    129e:	e9 f3       	breq	.-6      	; 0x129a <main+0xa>
    12a0:	99 dd       	rcall	.-1230   	; 0xdd4 <_Z14serialEventRunv>
    12a2:	fb cf       	rjmp	.-10     	; 0x129a <main+0xa>

000012a4 <_ZN5Print5writeEPKhj>:
    12a4:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    12a6:	df 92       	push	r13
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	6c 01       	movw	r12, r24
    12b6:	7a 01       	movw	r14, r20
    12b8:	8b 01       	movw	r16, r22
    12ba:	c0 e0       	ldi	r28, 0x00	; 0
    12bc:	d0 e0       	ldi	r29, 0x00	; 0
    12be:	ce 15       	cp	r28, r14
    12c0:	df 05       	cpc	r29, r15
    12c2:	81 f0       	breq	.+32     	; 0x12e4 <_ZN5Print5writeEPKhj+0x40>
    12c4:	d8 01       	movw	r26, r16
    12c6:	6d 91       	ld	r22, X+
    12c8:	8d 01       	movw	r16, r26
    12ca:	d6 01       	movw	r26, r12
    12cc:	ed 91       	ld	r30, X+
    12ce:	fc 91       	ld	r31, X
    12d0:	01 90       	ld	r0, Z+
    12d2:	f0 81       	ld	r31, Z
    12d4:	e0 2d       	mov	r30, r0
    12d6:	c6 01       	movw	r24, r12
    12d8:	19 95       	eicall
    12da:	89 2b       	or	r24, r25
    12dc:	11 f0       	breq	.+4      	; 0x12e2 <_ZN5Print5writeEPKhj+0x3e>
    12de:	21 96       	adiw	r28, 0x01	; 1
    12e0:	ee cf       	rjmp	.-36     	; 0x12be <_ZN5Print5writeEPKhj+0x1a>
    12e2:	7e 01       	movw	r14, r28
    12e4:	c7 01       	movw	r24, r14
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	08 95       	ret

000012f8 <_ZN5Print5writeEPKc>:
    12f8:	61 15       	cp	r22, r1
    12fa:	71 05       	cpc	r23, r1
    12fc:	79 f0       	breq	.+30     	; 0x131c <_ZN5Print5writeEPKc+0x24>
    12fe:	fb 01       	movw	r30, r22
    1300:	01 90       	ld	r0, Z+
    1302:	00 20       	and	r0, r0
    1304:	e9 f7       	brne	.-6      	; 0x1300 <_ZN5Print5writeEPKc+0x8>
    1306:	31 97       	sbiw	r30, 0x01	; 1
    1308:	af 01       	movw	r20, r30
    130a:	46 1b       	sub	r20, r22
    130c:	57 0b       	sbc	r21, r23
    130e:	dc 01       	movw	r26, r24
    1310:	ed 91       	ld	r30, X+
    1312:	fc 91       	ld	r31, X
    1314:	02 80       	ldd	r0, Z+2	; 0x02
    1316:	f3 81       	ldd	r31, Z+3	; 0x03
    1318:	e0 2d       	mov	r30, r0
    131a:	19 94       	eijmp
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	08 95       	ret

00001322 <_ZN5Print5printEPKc>:
    1322:	ea cf       	rjmp	.-44     	; 0x12f8 <_ZN5Print5writeEPKc>

00001324 <_ZN5Print5printEc>:
    1324:	dc 01       	movw	r26, r24
    1326:	ed 91       	ld	r30, X+
    1328:	fc 91       	ld	r31, X
    132a:	01 90       	ld	r0, Z+
    132c:	f0 81       	ld	r31, Z
    132e:	e0 2d       	mov	r30, r0
    1330:	19 94       	eijmp

00001332 <_ZN5Print7printlnEv>:
    1332:	6a eb       	ldi	r22, 0xBA	; 186
    1334:	72 e0       	ldi	r23, 0x02	; 2
    1336:	e0 cf       	rjmp	.-64     	; 0x12f8 <_ZN5Print5writeEPKc>

00001338 <_ZN5Print7printlnEPKc>:
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	ec 01       	movw	r28, r24
    1342:	da df       	rcall	.-76     	; 0x12f8 <_ZN5Print5writeEPKc>
    1344:	8c 01       	movw	r16, r24
    1346:	ce 01       	movw	r24, r28
    1348:	f4 df       	rcall	.-24     	; 0x1332 <_ZN5Print7printlnEv>
    134a:	80 0f       	add	r24, r16
    134c:	91 1f       	adc	r25, r17
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	08 95       	ret

00001358 <_ZN5Print11printNumberEmh>:
    1358:	8f 92       	push	r8
    135a:	9f 92       	push	r9
    135c:	af 92       	push	r10
    135e:	bf 92       	push	r11
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	a1 97       	sbiw	r28, 0x21	; 33
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	7c 01       	movw	r14, r24
    137e:	fa 01       	movw	r30, r20
    1380:	cb 01       	movw	r24, r22
    1382:	19 a2       	std	Y+33, r1	; 0x21
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	08 f4       	brcc	.+2      	; 0x138a <_ZN5Print11printNumberEmh+0x32>
    1388:	2a e0       	ldi	r18, 0x0A	; 10
    138a:	8e 01       	movw	r16, r28
    138c:	0f 5d       	subi	r16, 0xDF	; 223
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	82 2e       	mov	r8, r18
    1392:	91 2c       	mov	r9, r1
    1394:	a1 2c       	mov	r10, r1
    1396:	b1 2c       	mov	r11, r1
    1398:	bf 01       	movw	r22, r30
    139a:	a5 01       	movw	r20, r10
    139c:	94 01       	movw	r18, r8
    139e:	36 d6       	rcall	.+3180   	; 0x200c <__udivmodsi4>
    13a0:	f9 01       	movw	r30, r18
    13a2:	ca 01       	movw	r24, r20
    13a4:	01 50       	subi	r16, 0x01	; 1
    13a6:	11 09       	sbc	r17, r1
    13a8:	6a 30       	cpi	r22, 0x0A	; 10
    13aa:	10 f4       	brcc	.+4      	; 0x13b0 <_ZN5Print11printNumberEmh+0x58>
    13ac:	60 5d       	subi	r22, 0xD0	; 208
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <_ZN5Print11printNumberEmh+0x5a>
    13b0:	69 5c       	subi	r22, 0xC9	; 201
    13b2:	d8 01       	movw	r26, r16
    13b4:	6c 93       	st	X, r22
    13b6:	23 2b       	or	r18, r19
    13b8:	24 2b       	or	r18, r20
    13ba:	25 2b       	or	r18, r21
    13bc:	69 f7       	brne	.-38     	; 0x1398 <_ZN5Print11printNumberEmh+0x40>
    13be:	b8 01       	movw	r22, r16
    13c0:	c7 01       	movw	r24, r14
    13c2:	9a df       	rcall	.-204    	; 0x12f8 <_ZN5Print5writeEPKc>
    13c4:	a1 96       	adiw	r28, 0x21	; 33
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	bf 90       	pop	r11
    13de:	af 90       	pop	r10
    13e0:	9f 90       	pop	r9
    13e2:	8f 90       	pop	r8
    13e4:	08 95       	ret

000013e6 <_ZN5Print5printEmi>:
    13e6:	21 15       	cp	r18, r1
    13e8:	31 05       	cpc	r19, r1
    13ea:	41 f4       	brne	.+16     	; 0x13fc <_ZN5Print5printEmi+0x16>
    13ec:	dc 01       	movw	r26, r24
    13ee:	ed 91       	ld	r30, X+
    13f0:	fc 91       	ld	r31, X
    13f2:	01 90       	ld	r0, Z+
    13f4:	f0 81       	ld	r31, Z
    13f6:	e0 2d       	mov	r30, r0
    13f8:	64 2f       	mov	r22, r20
    13fa:	19 94       	eijmp
    13fc:	ad cf       	rjmp	.-166    	; 0x1358 <_ZN5Print11printNumberEmh>

000013fe <_ZN5Print5printEhi>:
    13fe:	9a 01       	movw	r18, r20
    1400:	46 2f       	mov	r20, r22
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	ee cf       	rjmp	.-36     	; 0x13e6 <_ZN5Print5printEmi>

0000140a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
  if (base == 0) {
    141a:	21 15       	cp	r18, r1
    141c:	31 05       	cpc	r19, r1
    141e:	81 f4       	brne	.+32     	; 0x1440 <_ZN5Print5printEli+0x36>
    return write(n);
    1420:	dc 01       	movw	r26, r24
    1422:	ed 91       	ld	r30, X+
    1424:	fc 91       	ld	r31, X
    1426:	01 90       	ld	r0, Z+
    1428:	f0 81       	ld	r31, Z
    142a:	e0 2d       	mov	r30, r0
    142c:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	df 90       	pop	r13
    143c:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    143e:	19 94       	eijmp
  } else if (base == 10) {
    1440:	2a 30       	cpi	r18, 0x0A	; 10
    1442:	31 05       	cpc	r19, r1
    1444:	f1 f4       	brne	.+60     	; 0x1482 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    1446:	77 ff       	sbrs	r23, 7
    1448:	1b c0       	rjmp	.+54     	; 0x1480 <_ZN5Print5printEli+0x76>
    144a:	6a 01       	movw	r12, r20
    144c:	7b 01       	movw	r14, r22
    144e:	ec 01       	movw	r28, r24
      int t = print('-');
    1450:	6d e2       	ldi	r22, 0x2D	; 45
    1452:	68 df       	rcall	.-304    	; 0x1324 <_ZN5Print5printEc>
    1454:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1456:	44 27       	eor	r20, r20
    1458:	55 27       	eor	r21, r21
    145a:	ba 01       	movw	r22, r20
    145c:	4c 19       	sub	r20, r12
    145e:	5d 09       	sbc	r21, r13
    1460:	6e 09       	sbc	r22, r14
    1462:	7f 09       	sbc	r23, r15
    1464:	2a e0       	ldi	r18, 0x0A	; 10
    1466:	ce 01       	movw	r24, r28
    1468:	77 df       	rcall	.-274    	; 0x1358 <_ZN5Print11printNumberEmh>
    146a:	80 0f       	add	r24, r16
    146c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	cf 90       	pop	r12
    147e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1480:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1490:	cf 90       	pop	r12
    1492:	62 cf       	rjmp	.-316    	; 0x1358 <_ZN5Print11printNumberEmh>

00001494 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1494:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1496:	ab 01       	movw	r20, r22
    1498:	77 0f       	add	r23, r23
    149a:	66 0b       	sbc	r22, r22
    149c:	77 0b       	sbc	r23, r23
    149e:	b5 cf       	rjmp	.-150    	; 0x140a <_ZN5Print5printEli>

000014a0 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    14aa:	f4 df       	rcall	.-24     	; 0x1494 <_ZN5Print5printEii>
    14ac:	8c 01       	movw	r16, r24
  n += println();
    14ae:	ce 01       	movw	r24, r28
    14b0:	40 df       	rcall	.-384    	; 0x1332 <_ZN5Print7printlnEv>
  return n;
}
    14b2:	80 0f       	add	r24, r16
    14b4:	91 1f       	adc	r25, r17
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	08 95       	ret

000014c0 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	8f 93       	push	r24
    14d0:	9f 93       	push	r25
    14d2:	af 93       	push	r26
    14d4:	bf 93       	push	r27
    14d6:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <timer0_millis>
    14da:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <timer0_millis+0x1>
    14de:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <timer0_millis+0x2>
    14e2:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <timer0_millis+0x3>
    14e6:	30 91 39 04 	lds	r19, 0x0439	; 0x800439 <timer0_fract>
    14ea:	23 e0       	ldi	r18, 0x03	; 3
    14ec:	23 0f       	add	r18, r19
    14ee:	2d 37       	cpi	r18, 0x7D	; 125
    14f0:	20 f4       	brcc	.+8      	; 0x14fa <__vector_23+0x3a>
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	a1 1d       	adc	r26, r1
    14f6:	b1 1d       	adc	r27, r1
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <__vector_23+0x44>
    14fa:	26 e8       	ldi	r18, 0x86	; 134
    14fc:	23 0f       	add	r18, r19
    14fe:	02 96       	adiw	r24, 0x02	; 2
    1500:	a1 1d       	adc	r26, r1
    1502:	b1 1d       	adc	r27, r1
    1504:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <timer0_fract>
    1508:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <timer0_millis>
    150c:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <timer0_millis+0x1>
    1510:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <timer0_millis+0x2>
    1514:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <timer0_millis+0x3>
    1518:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <timer0_overflow_count>
    151c:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <timer0_overflow_count+0x1>
    1520:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <timer0_overflow_count+0x2>
    1524:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <timer0_overflow_count+0x3>
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	a1 1d       	adc	r26, r1
    152c:	b1 1d       	adc	r27, r1
    152e:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <timer0_overflow_count>
    1532:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <timer0_overflow_count+0x1>
    1536:	a0 93 40 04 	sts	0x0440, r26	; 0x800440 <timer0_overflow_count+0x2>
    153a:	b0 93 41 04 	sts	0x0441, r27	; 0x800441 <timer0_overflow_count+0x3>
    153e:	bf 91       	pop	r27
    1540:	af 91       	pop	r26
    1542:	9f 91       	pop	r25
    1544:	8f 91       	pop	r24
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1554:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1556:	f8 94       	cli
	m = timer0_overflow_count;
    1558:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <timer0_overflow_count>
    155c:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <timer0_overflow_count+0x1>
    1560:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <timer0_overflow_count+0x2>
    1564:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1568:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    156a:	a8 9b       	sbis	0x15, 0	; 21
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <micros+0x24>
    156e:	2f 3f       	cpi	r18, 0xFF	; 255
    1570:	19 f0       	breq	.+6      	; 0x1578 <micros+0x24>
		m++;
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	a1 1d       	adc	r26, r1
    1576:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1578:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    157a:	ba 2f       	mov	r27, r26
    157c:	a9 2f       	mov	r26, r25
    157e:	98 2f       	mov	r25, r24
    1580:	88 27       	eor	r24, r24
    1582:	82 0f       	add	r24, r18
    1584:	91 1d       	adc	r25, r1
    1586:	a1 1d       	adc	r26, r1
    1588:	b1 1d       	adc	r27, r1
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	42 e0       	ldi	r20, 0x02	; 2
    1590:	66 0f       	add	r22, r22
    1592:	77 1f       	adc	r23, r23
    1594:	88 1f       	adc	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	4a 95       	dec	r20
    159a:	d1 f7       	brne	.-12     	; 0x1590 <micros+0x3c>
}
    159c:	08 95       	ret

0000159e <delay>:

void delay(unsigned long ms)
{
    159e:	8f 92       	push	r8
    15a0:	9f 92       	push	r9
    15a2:	af 92       	push	r10
    15a4:	bf 92       	push	r11
    15a6:	cf 92       	push	r12
    15a8:	df 92       	push	r13
    15aa:	ef 92       	push	r14
    15ac:	ff 92       	push	r15
    15ae:	6b 01       	movw	r12, r22
    15b0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    15b2:	d0 df       	rcall	.-96     	; 0x1554 <micros>
    15b4:	4b 01       	movw	r8, r22
    15b6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    15b8:	c1 14       	cp	r12, r1
    15ba:	d1 04       	cpc	r13, r1
    15bc:	e1 04       	cpc	r14, r1
    15be:	f1 04       	cpc	r15, r1
		yield();
    15c0:	f1 f0       	breq	.+60     	; 0x15fe <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    15c2:	41 d3       	rcall	.+1666   	; 0x1c46 <yield>
    15c4:	c7 df       	rcall	.-114    	; 0x1554 <micros>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	88 19       	sub	r24, r8
    15cc:	99 09       	sbc	r25, r9
    15ce:	aa 09       	sbc	r26, r10
    15d0:	bb 09       	sbc	r27, r11
    15d2:	88 3e       	cpi	r24, 0xE8	; 232
    15d4:	93 40       	sbci	r25, 0x03	; 3
    15d6:	a1 05       	cpc	r26, r1
    15d8:	b1 05       	cpc	r27, r1
    15da:	70 f3       	brcs	.-36     	; 0x15b8 <delay+0x1a>
			ms--;
    15dc:	21 e0       	ldi	r18, 0x01	; 1
    15de:	c2 1a       	sub	r12, r18
    15e0:	d1 08       	sbc	r13, r1
    15e2:	e1 08       	sbc	r14, r1
    15e4:	f1 08       	sbc	r15, r1
			start += 1000;
    15e6:	88 ee       	ldi	r24, 0xE8	; 232
    15e8:	88 0e       	add	r8, r24
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	98 1e       	adc	r9, r24
    15ee:	a1 1c       	adc	r10, r1
    15f0:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    15f2:	c1 14       	cp	r12, r1
    15f4:	d1 04       	cpc	r13, r1
    15f6:	e1 04       	cpc	r14, r1
    15f8:	f1 04       	cpc	r15, r1
    15fa:	21 f7       	brne	.-56     	; 0x15c4 <delay+0x26>
    15fc:	dd cf       	rjmp	.-70     	; 0x15b8 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	bf 90       	pop	r11
    1608:	af 90       	pop	r10
    160a:	9f 90       	pop	r9
    160c:	8f 90       	pop	r8
    160e:	08 95       	ret

00001610 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1610:	82 30       	cpi	r24, 0x02	; 2
    1612:	91 05       	cpc	r25, r1
    1614:	38 f0       	brcs	.+14     	; 0x1624 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    161e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <delayMicroseconds+0x10>
    1624:	08 95       	ret

00001626 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1626:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1628:	84 b5       	in	r24, 0x24	; 36
    162a:	82 60       	ori	r24, 0x02	; 2
    162c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    162e:	84 b5       	in	r24, 0x24	; 36
    1630:	81 60       	ori	r24, 0x01	; 1
    1632:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1634:	85 b5       	in	r24, 0x25	; 37
    1636:	82 60       	ori	r24, 0x02	; 2
    1638:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    163a:	85 b5       	in	r24, 0x25	; 37
    163c:	81 60       	ori	r24, 0x01	; 1
    163e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1640:	ee e6       	ldi	r30, 0x6E	; 110
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	81 60       	ori	r24, 0x01	; 1
    1648:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    164a:	e1 e8       	ldi	r30, 0x81	; 129
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1650:	80 81       	ld	r24, Z
    1652:	82 60       	ori	r24, 0x02	; 2
    1654:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1656:	80 81       	ld	r24, Z
    1658:	81 60       	ori	r24, 0x01	; 1
    165a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    165c:	e0 e8       	ldi	r30, 0x80	; 128
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	81 60       	ori	r24, 0x01	; 1
    1664:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1666:	e1 eb       	ldi	r30, 0xB1	; 177
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	84 60       	ori	r24, 0x04	; 4
    166e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1670:	e0 eb       	ldi	r30, 0xB0	; 176
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	81 60       	ori	r24, 0x01	; 1
    1678:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    167a:	e1 e9       	ldi	r30, 0x91	; 145
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	82 60       	ori	r24, 0x02	; 2
    1682:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1684:	80 81       	ld	r24, Z
    1686:	81 60       	ori	r24, 0x01	; 1
    1688:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    168a:	e0 e9       	ldi	r30, 0x90	; 144
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	81 60       	ori	r24, 0x01	; 1
    1692:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1694:	e1 ea       	ldi	r30, 0xA1	; 161
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	82 60       	ori	r24, 0x02	; 2
    169c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    169e:	80 81       	ld	r24, Z
    16a0:	81 60       	ori	r24, 0x01	; 1
    16a2:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    16a4:	e0 ea       	ldi	r30, 0xA0	; 160
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    16ae:	e1 e2       	ldi	r30, 0x21	; 33
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    16b2:	80 81       	ld	r24, Z
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    16b8:	80 81       	ld	r24, Z
    16ba:	81 60       	ori	r24, 0x01	; 1
    16bc:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    16be:	e0 e2       	ldi	r30, 0x20	; 32
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	80 81       	ld	r24, Z
    16c4:	81 60       	ori	r24, 0x01	; 1
    16c6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    16c8:	ea e7       	ldi	r30, 0x7A	; 122
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	84 60       	ori	r24, 0x04	; 4
    16d0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    16d2:	80 81       	ld	r24, Z
    16d4:	82 60       	ori	r24, 0x02	; 2
    16d6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    16d8:	80 81       	ld	r24, Z
    16da:	81 60       	ori	r24, 0x01	; 1
    16dc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    16de:	80 81       	ld	r24, Z
    16e0:	80 68       	ori	r24, 0x80	; 128
    16e2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    16e4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    16e8:	08 95       	ret

000016ea <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	fc 01       	movw	r30, r24
    16ee:	31 97       	sbiw	r30, 0x01	; 1
    16f0:	e2 31       	cpi	r30, 0x12	; 18
    16f2:	f1 05       	cpc	r31, r1
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <turnOffPWM+0xe>
    16f6:	4d c0       	rjmp	.+154    	; 0x1792 <turnOffPWM+0xa8>
    16f8:	88 27       	eor	r24, r24
    16fa:	ee 58       	subi	r30, 0x8E	; 142
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1700:	a7 c4       	rjmp	.+2382   	; 0x2050 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1702:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1706:	8f 77       	andi	r24, 0x7F	; 127
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    170a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    170e:	8f 7d       	andi	r24, 0xDF	; 223
    1710:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1714:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1716:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    171a:	87 7f       	andi	r24, 0xF7	; 247
    171c:	f9 cf       	rjmp	.-14     	; 0x1710 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    171e:	84 b5       	in	r24, 0x24	; 36
    1720:	8f 77       	andi	r24, 0x7F	; 127
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1724:	84 b5       	in	r24, 0x24	; 36
    1726:	8f 7d       	andi	r24, 0xDF	; 223
    1728:	84 bd       	out	0x24, r24	; 36
    172a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    172c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1730:	8f 77       	andi	r24, 0x7F	; 127
    1732:	03 c0       	rjmp	.+6      	; 0x173a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1734:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1738:	8f 7d       	andi	r24, 0xDF	; 223
    173a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    173e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1740:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1744:	8f 77       	andi	r24, 0x7F	; 127
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1748:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    174c:	8f 7d       	andi	r24, 0xDF	; 223
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1750:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1754:	87 7f       	andi	r24, 0xF7	; 247
    1756:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    175a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    175c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1760:	8f 77       	andi	r24, 0x7F	; 127
    1762:	07 c0       	rjmp	.+14     	; 0x1772 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1764:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1768:	8f 7d       	andi	r24, 0xDF	; 223
    176a:	03 c0       	rjmp	.+6      	; 0x1772 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    176c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1770:	87 7f       	andi	r24, 0xF7	; 247
    1772:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1776:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1778:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    177c:	8f 77       	andi	r24, 0x7F	; 127
    177e:	07 c0       	rjmp	.+14     	; 0x178e <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1780:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1784:	8f 7d       	andi	r24, 0xDF	; 223
    1786:	03 c0       	rjmp	.+6      	; 0x178e <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1788:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    178c:	87 7f       	andi	r24, 0xF7	; 247
    178e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1792:	08 95       	ret

00001794 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	fc 01       	movw	r30, r24
    179c:	e2 5b       	subi	r30, 0xB2	; 178
    179e:	fe 4f       	sbci	r31, 0xFE	; 254
    17a0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    17a2:	fc 01       	movw	r30, r24
    17a4:	ec 56       	subi	r30, 0x6C	; 108
    17a6:	fe 4f       	sbci	r31, 0xFE	; 254
    17a8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    17aa:	88 23       	and	r24, r24
    17ac:	61 f1       	breq	.+88     	; 0x1806 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	fc 01       	movw	r30, r24
    17b6:	ec 50       	subi	r30, 0x0C	; 12
    17b8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ba:	c5 91       	lpm	r28, Z+
    17bc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    17be:	fc 01       	movw	r30, r24
    17c0:	e6 52       	subi	r30, 0x26	; 38
    17c2:	fe 4f       	sbci	r31, 0xFE	; 254
    17c4:	a5 91       	lpm	r26, Z+
    17c6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    17c8:	61 11       	cpse	r22, r1
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    17cc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17ce:	f8 94       	cli
		*reg &= ~bit;
    17d0:	88 81       	ld	r24, Y
    17d2:	20 95       	com	r18
    17d4:	82 23       	and	r24, r18
    17d6:	88 83       	st	Y, r24
		*out &= ~bit;
    17d8:	ec 91       	ld	r30, X
    17da:	2e 23       	and	r18, r30
    17dc:	0b c0       	rjmp	.+22     	; 0x17f4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    17de:	62 30       	cpi	r22, 0x02	; 2
    17e0:	61 f4       	brne	.+24     	; 0x17fa <pinMode+0x66>
		uint8_t oldSREG = SREG;
    17e2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17e4:	f8 94       	cli
		*reg &= ~bit;
    17e6:	88 81       	ld	r24, Y
    17e8:	32 2f       	mov	r19, r18
    17ea:	30 95       	com	r19
    17ec:	83 23       	and	r24, r19
    17ee:	88 83       	st	Y, r24
		*out |= bit;
    17f0:	ec 91       	ld	r30, X
    17f2:	2e 2b       	or	r18, r30
    17f4:	2c 93       	st	X, r18
		SREG = oldSREG;
    17f6:	9f bf       	out	0x3f, r25	; 63
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    17fa:	8f b7       	in	r24, 0x3f	; 63
                cli();
    17fc:	f8 94       	cli
		*reg |= bit;
    17fe:	e8 81       	ld	r30, Y
    1800:	2e 2b       	or	r18, r30
    1802:	28 83       	st	Y, r18
		SREG = oldSREG;
    1804:	8f bf       	out	0x3f, r24	; 63
	}
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	f9 01       	movw	r30, r18
    1818:	e8 5f       	subi	r30, 0xF8	; 248
    181a:	fe 4f       	sbci	r31, 0xFE	; 254
    181c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    181e:	f9 01       	movw	r30, r18
    1820:	e2 5b       	subi	r30, 0xB2	; 178
    1822:	fe 4f       	sbci	r31, 0xFE	; 254
    1824:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1826:	f9 01       	movw	r30, r18
    1828:	ec 56       	subi	r30, 0x6C	; 108
    182a:	fe 4f       	sbci	r31, 0xFE	; 254
    182c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    182e:	cc 23       	and	r28, r28
    1830:	b9 f0       	breq	.+46     	; 0x1860 <digitalWrite+0x54>
    1832:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1834:	81 11       	cpse	r24, r1
    1836:	59 df       	rcall	.-334    	; 0x16ea <turnOffPWM>

	out = portOutputRegister(port);
    1838:	ec 2f       	mov	r30, r28
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	e6 52       	subi	r30, 0x26	; 38
    1842:	fe 4f       	sbci	r31, 0xFE	; 254
    1844:	a5 91       	lpm	r26, Z+
    1846:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1848:	9f b7       	in	r25, 0x3f	; 63
	cli();
    184a:	f8 94       	cli

	if (val == LOW) {
    184c:	11 11       	cpse	r17, r1
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <digitalWrite+0x4c>
		*out &= ~bit;
    1850:	8c 91       	ld	r24, X
    1852:	d0 95       	com	r29
    1854:	d8 23       	and	r29, r24
    1856:	02 c0       	rjmp	.+4      	; 0x185c <digitalWrite+0x50>
	} else {
		*out |= bit;
    1858:	ec 91       	ld	r30, X
    185a:	de 2b       	or	r29, r30
    185c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    185e:	9f bf       	out	0x3f, r25	; 63
}
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	08 95       	ret

00001868 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    1868:	fc 01       	movw	r30, r24
    186a:	13 82       	std	Z+3, r1	; 0x03
    186c:	12 82       	std	Z+2, r1	; 0x02
    186e:	8d ec       	ldi	r24, 0xCD	; 205
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	80 83       	st	Z, r24
    1876:	64 83       	std	Z+4, r22	; 0x04
    1878:	41 87       	std	Z+9, r20	; 0x09
    187a:	22 87       	std	Z+10, r18	; 0x0a
    187c:	13 86       	std	Z+11, r1	; 0x0b
    187e:	08 95       	ret

00001880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
    1888:	16 2f       	mov	r17, r22
    188a:	6c 81       	ldd	r22, Y+4	; 0x04
    188c:	82 e4       	ldi	r24, 0x42	; 66
    188e:	94 e0       	ldi	r25, 0x04	; 4
    1890:	b9 d1       	rcall	.+882    	; 0x1c04 <_ZN7TwoWire17beginTransmissionEh>
    1892:	6b 85       	ldd	r22, Y+11	; 0x0b
    1894:	61 2b       	or	r22, r17
    1896:	82 e4       	ldi	r24, 0x42	; 66
    1898:	94 e0       	ldi	r25, 0x04	; 4
    189a:	67 d1       	rcall	.+718    	; 0x1b6a <_ZN7TwoWire5writeEh>
    189c:	82 e4       	ldi	r24, 0x42	; 66
    189e:	94 e0       	ldi	r25, 0x04	; 4
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	ca c1       	rjmp	.+916    	; 0x1c3c <_ZN7TwoWire15endTransmissionEv>

000018a8 <_ZN17LiquidCrystal_I2C9backlightEv>:
    18a8:	28 e0       	ldi	r18, 0x08	; 8
    18aa:	fc 01       	movw	r30, r24
    18ac:	23 87       	std	Z+11, r18	; 0x0b
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	e7 cf       	rjmp	.-50     	; 0x1880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000018b2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	8c 01       	movw	r16, r24
    18ba:	c6 2f       	mov	r28, r22
    18bc:	64 60       	ori	r22, 0x04	; 4
    18be:	e0 df       	rcall	.-64     	; 0x1880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a5 de       	rcall	.-694    	; 0x1610 <delayMicroseconds>
    18c6:	6c 2f       	mov	r22, r28
    18c8:	6b 7f       	andi	r22, 0xFB	; 251
    18ca:	c8 01       	movw	r24, r16
    18cc:	d9 df       	rcall	.-78     	; 0x1880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    18ce:	82 e3       	ldi	r24, 0x32	; 50
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	9b ce       	rjmp	.-714    	; 0x1610 <delayMicroseconds>

000018da <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	ec 01       	movw	r28, r24
    18e2:	16 2f       	mov	r17, r22
    18e4:	cd df       	rcall	.-102    	; 0x1880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    18e6:	61 2f       	mov	r22, r17
    18e8:	ce 01       	movw	r24, r28
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	e0 cf       	rjmp	.-64     	; 0x18b2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000018f2 <_ZN17LiquidCrystal_I2C4sendEhh>:
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	8c 01       	movw	r16, r24
    18fc:	c6 2f       	mov	r28, r22
    18fe:	d4 2f       	mov	r29, r20
    1900:	60 7f       	andi	r22, 0xF0	; 240
    1902:	64 2b       	or	r22, r20
    1904:	ea df       	rcall	.-44     	; 0x18da <_ZN17LiquidCrystal_I2C10write4bitsEh>
    1906:	80 e1       	ldi	r24, 0x10	; 16
    1908:	c8 9f       	mul	r28, r24
    190a:	b0 01       	movw	r22, r0
    190c:	11 24       	eor	r1, r1
    190e:	6d 2b       	or	r22, r29
    1910:	c8 01       	movw	r24, r16
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	df cf       	rjmp	.-66     	; 0x18da <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000191c <_ZN17LiquidCrystal_I2C7commandEh>:
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	e9 cf       	rjmp	.-46     	; 0x18f2 <_ZN17LiquidCrystal_I2C4sendEhh>

00001920 <_ZN17LiquidCrystal_I2C5clearEv>:
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	fc df       	rcall	.-8      	; 0x191c <_ZN17LiquidCrystal_I2C7commandEh>
    1924:	80 ed       	ldi	r24, 0xD0	; 208
    1926:	97 e0       	ldi	r25, 0x07	; 7
    1928:	73 ce       	rjmp	.-794    	; 0x1610 <delayMicroseconds>

0000192a <_ZN17LiquidCrystal_I2C4homeEv>:
    192a:	62 e0       	ldi	r22, 0x02	; 2
    192c:	f7 df       	rcall	.-18     	; 0x191c <_ZN17LiquidCrystal_I2C7commandEh>
    192e:	80 ed       	ldi	r24, 0xD0	; 208
    1930:	97 e0       	ldi	r25, 0x07	; 7
    1932:	6e ce       	rjmp	.-804    	; 0x1610 <delayMicroseconds>

00001934 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	28 97       	sbiw	r28, 0x08	; 8
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	9c 01       	movw	r18, r24
    194a:	88 e0       	ldi	r24, 0x08	; 8
    194c:	e3 e0       	ldi	r30, 0x03	; 3
    194e:	f2 e0       	ldi	r31, 0x02	; 2
    1950:	de 01       	movw	r26, r28
    1952:	11 96       	adiw	r26, 0x01	; 1
    1954:	01 90       	ld	r0, Z+
    1956:	0d 92       	st	X+, r0
    1958:	8a 95       	dec	r24
    195a:	e1 f7       	brne	.-8      	; 0x1954 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    195c:	f9 01       	movw	r30, r18
    195e:	80 85       	ldd	r24, Z+8	; 0x08
    1960:	84 17       	cp	r24, r20
    1962:	10 f4       	brcc	.+4      	; 0x1968 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    1964:	4f ef       	ldi	r20, 0xFF	; 255
    1966:	48 0f       	add	r20, r24
    1968:	fe 01       	movw	r30, r28
    196a:	31 96       	adiw	r30, 0x01	; 1
    196c:	e4 0f       	add	r30, r20
    196e:	f1 1d       	adc	r31, r1
    1970:	e4 0f       	add	r30, r20
    1972:	f1 1d       	adc	r31, r1
    1974:	90 81       	ld	r25, Z
    1976:	69 0f       	add	r22, r25
    1978:	60 68       	ori	r22, 0x80	; 128
    197a:	c9 01       	movw	r24, r18
    197c:	28 96       	adiw	r28, 0x08	; 8
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	c7 cf       	rjmp	.-114    	; 0x191c <_ZN17LiquidCrystal_I2C7commandEh>

0000198e <_ZN17LiquidCrystal_I2C7displayEv>:
    198e:	fc 01       	movw	r30, r24
    1990:	66 81       	ldd	r22, Z+6	; 0x06
    1992:	26 2f       	mov	r18, r22
    1994:	24 60       	ori	r18, 0x04	; 4
    1996:	26 83       	std	Z+6, r18	; 0x06
    1998:	6c 60       	ori	r22, 0x0C	; 12
    199a:	c0 cf       	rjmp	.-128    	; 0x191c <_ZN17LiquidCrystal_I2C7commandEh>

0000199c <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	a9 df       	rcall	.-174    	; 0x18f2 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	08 95       	ret

000019a6 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	ec 01       	movw	r28, r24
	if (lines > 1) {
    19ac:	42 30       	cpi	r20, 0x02	; 2
    19ae:	18 f0       	brcs	.+6      	; 0x19b6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	88 60       	ori	r24, 0x08	; 8
    19b4:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    19b6:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    19b8:	22 23       	and	r18, r18
    19ba:	29 f0       	breq	.+10     	; 0x19c6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    19bc:	41 30       	cpi	r20, 0x01	; 1
    19be:	19 f4       	brne	.+6      	; 0x19c6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	84 60       	ori	r24, 0x04	; 4
    19c4:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    19c6:	62 e3       	ldi	r22, 0x32	; 50
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	e7 dd       	rcall	.-1074   	; 0x159e <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	ce 01       	movw	r24, r28
    19d4:	55 df       	rcall	.-342    	; 0x1880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    19d6:	68 ee       	ldi	r22, 0xE8	; 232
    19d8:	73 e0       	ldi	r23, 0x03	; 3
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	df dd       	rcall	.-1090   	; 0x159e <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    19e0:	60 e3       	ldi	r22, 0x30	; 48
    19e2:	ce 01       	movw	r24, r28
    19e4:	7a df       	rcall	.-268    	; 0x18da <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    19e6:	84 e9       	ldi	r24, 0x94	; 148
    19e8:	91 e1       	ldi	r25, 0x11	; 17
    19ea:	12 de       	rcall	.-988    	; 0x1610 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    19ec:	60 e3       	ldi	r22, 0x30	; 48
    19ee:	ce 01       	movw	r24, r28
    19f0:	74 df       	rcall	.-280    	; 0x18da <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    19f2:	84 e9       	ldi	r24, 0x94	; 148
    19f4:	91 e1       	ldi	r25, 0x11	; 17
    19f6:	0c de       	rcall	.-1000   	; 0x1610 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    19f8:	60 e3       	ldi	r22, 0x30	; 48
    19fa:	ce 01       	movw	r24, r28
    19fc:	6e df       	rcall	.-292    	; 0x18da <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    19fe:	86 e9       	ldi	r24, 0x96	; 150
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	06 de       	rcall	.-1012   	; 0x1610 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    1a04:	60 e2       	ldi	r22, 0x20	; 32
    1a06:	ce 01       	movw	r24, r28
    1a08:	68 df       	rcall	.-304    	; 0x18da <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    1a0a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a0c:	60 62       	ori	r22, 0x20	; 32
    1a0e:	ce 01       	movw	r24, r28
    1a10:	85 df       	rcall	.-246    	; 0x191c <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1a12:	84 e0       	ldi	r24, 0x04	; 4
    1a14:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1a16:	ce 01       	movw	r24, r28
    1a18:	ba df       	rcall	.-140    	; 0x198e <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	81 df       	rcall	.-254    	; 0x1920 <_ZN17LiquidCrystal_I2C5clearEv>
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1a20:	8f 83       	std	Y+7, r24	; 0x07
    1a22:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1a24:	ce 01       	movw	r24, r28
    1a26:	7a df       	rcall	.-268    	; 0x191c <_ZN17LiquidCrystal_I2C7commandEh>
    1a28:	ce 01       	movw	r24, r28
    1a2a:	df 91       	pop	r29
	
	home();
    1a2c:	cf 91       	pop	r28
  
}
    1a2e:	7d cf       	rjmp	.-262    	; 0x192a <_ZN17LiquidCrystal_I2C4homeEv>

00001a30 <_ZN17LiquidCrystal_I2C9init_privEv>:
    1a30:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    1a32:	df 93       	push	r29
    1a34:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    1a36:	82 e4       	ldi	r24, 0x42	; 66
    1a38:	94 e0       	ldi	r25, 0x04	; 4
    1a3a:	d5 d0       	rcall	.+426    	; 0x1be6 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    1a3c:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a42:	69 85       	ldd	r22, Y+9	; 0x09
    1a44:	ce 01       	movw	r24, r28
}
    1a46:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    1a48:	cf 91       	pop	r28
    1a4a:	ad cf       	rjmp	.-166    	; 0x19a6 <_ZN17LiquidCrystal_I2C5beginEhhh>

00001a4c <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    1a4c:	f1 cf       	rjmp	.-30     	; 0x1a30 <_ZN17LiquidCrystal_I2C9init_privEv>

00001a4e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1a4e:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN7TwoWire14rxBufferLengthE>
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <_ZN7TwoWire13rxBufferIndexE>
    1a58:	82 1b       	sub	r24, r18
    1a5a:	91 09       	sbc	r25, r1
    1a5c:	08 95       	ret

00001a5e <_ZN7TwoWire4readEv>:
    1a5e:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_ZN7TwoWire13rxBufferIndexE>
    1a62:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN7TwoWire14rxBufferLengthE>
    1a66:	98 17       	cp	r25, r24
    1a68:	50 f4       	brcc	.+20     	; 0x1a7e <_ZN7TwoWire4readEv+0x20>
    1a6a:	e9 2f       	mov	r30, r25
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	e8 58       	subi	r30, 0x88	; 136
    1a70:	fb 4f       	sbci	r31, 0xFB	; 251
    1a72:	20 81       	ld	r18, Z
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	9f 5f       	subi	r25, 0xFF	; 255
    1a78:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZN7TwoWire13rxBufferIndexE>
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <_ZN7TwoWire4readEv+0x24>
    1a7e:	2f ef       	ldi	r18, 0xFF	; 255
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	c9 01       	movw	r24, r18
    1a84:	08 95       	ret

00001a86 <_ZN7TwoWire4peekEv>:
    1a86:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <_ZN7TwoWire13rxBufferIndexE>
    1a8a:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN7TwoWire14rxBufferLengthE>
    1a8e:	e8 17       	cp	r30, r24
    1a90:	30 f4       	brcc	.+12     	; 0x1a9e <_ZN7TwoWire4peekEv+0x18>
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	e8 58       	subi	r30, 0x88	; 136
    1a96:	fb 4f       	sbci	r31, 0xFB	; 251
    1a98:	80 81       	ld	r24, Z
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	08 95       	ret
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	9f ef       	ldi	r25, 0xFF	; 255
    1aa2:	08 95       	ret

00001aa4 <_ZN7TwoWire5flushEv>:
    1aa4:	08 95       	ret

00001aa6 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
    1aac:	e0 91 4e 04 	lds	r30, 0x044E	; 0x80044e <_ZN7TwoWire14user_onReceiveE>
    1ab0:	f0 91 4f 04 	lds	r31, 0x044F	; 0x80044f <_ZN7TwoWire14user_onReceiveE+0x1>
    1ab4:	30 97       	sbiw	r30, 0x00	; 0
    1ab6:	f1 f0       	breq	.+60     	; 0x1af4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1ab8:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_ZN7TwoWire13rxBufferIndexE>
    1abc:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN7TwoWire14rxBufferLengthE>
    1ac0:	98 17       	cp	r25, r24
    1ac2:	c0 f0       	brcs	.+48     	; 0x1af4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	29 2f       	mov	r18, r25
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	26 17       	cp	r18, r22
    1acc:	37 07       	cpc	r19, r23
    1ace:	54 f4       	brge	.+20     	; 0x1ae4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1ad0:	de 01       	movw	r26, r28
    1ad2:	a2 0f       	add	r26, r18
    1ad4:	b3 1f       	adc	r27, r19
    1ad6:	4c 91       	ld	r20, X
    1ad8:	d9 01       	movw	r26, r18
    1ada:	a8 58       	subi	r26, 0x88	; 136
    1adc:	bb 4f       	sbci	r27, 0xFB	; 251
    1ade:	4c 93       	st	X, r20
    1ae0:	9f 5f       	subi	r25, 0xFF	; 255
    1ae2:	f1 cf       	rjmp	.-30     	; 0x1ac6 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1ae4:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZN7TwoWire13rxBufferIndexE>
    1ae8:	60 93 76 04 	sts	0x0476, r22	; 0x800476 <_ZN7TwoWire14rxBufferLengthE>
    1aec:	cb 01       	movw	r24, r22
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	19 94       	eijmp
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <_ZN7TwoWire16onRequestServiceEv>:
    1afa:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <_ZN7TwoWire14user_onRequestE>
    1afe:	f0 91 51 04 	lds	r31, 0x0451	; 0x800451 <_ZN7TwoWire14user_onRequestE+0x1>
    1b02:	30 97       	sbiw	r30, 0x00	; 0
    1b04:	29 f0       	breq	.+10     	; 0x1b10 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1b06:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <_ZN7TwoWire13txBufferIndexE>
    1b0a:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <_ZN7TwoWire14txBufferLengthE>
    1b0e:	19 94       	eijmp
    1b10:	08 95       	ret

00001b12 <_ZN7TwoWire5writeEPKhj>:
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	7c 01       	movw	r14, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8a 01       	movw	r16, r20
    1b28:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <_ZN7TwoWire12transmittingE>
    1b2c:	22 23       	and	r18, r18
    1b2e:	89 f0       	breq	.+34     	; 0x1b52 <_ZN7TwoWire5writeEPKhj+0x40>
    1b30:	eb 01       	movw	r28, r22
    1b32:	6b 01       	movw	r12, r22
    1b34:	c4 0e       	add	r12, r20
    1b36:	d5 1e       	adc	r13, r21
    1b38:	cc 15       	cp	r28, r12
    1b3a:	dd 05       	cpc	r29, r13
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <_ZN7TwoWire5writeEPKhj+0x44>
    1b3e:	69 91       	ld	r22, Y+
    1b40:	d7 01       	movw	r26, r14
    1b42:	ed 91       	ld	r30, X+
    1b44:	fc 91       	ld	r31, X
    1b46:	01 90       	ld	r0, Z+
    1b48:	f0 81       	ld	r31, Z
    1b4a:	e0 2d       	mov	r30, r0
    1b4c:	c7 01       	movw	r24, r14
    1b4e:	19 95       	eicall
    1b50:	f3 cf       	rjmp	.-26     	; 0x1b38 <_ZN7TwoWire5writeEPKhj+0x26>
    1b52:	64 2f       	mov	r22, r20
    1b54:	eb d0       	rcall	.+470    	; 0x1d2c <twi_transmit>
    1b56:	c8 01       	movw	r24, r16
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	df 90       	pop	r13
    1b66:	cf 90       	pop	r12
    1b68:	08 95       	ret

00001b6a <_ZN7TwoWire5writeEh>:
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	1f 92       	push	r1
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	69 83       	std	Y+1, r22	; 0x01
    1b76:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <_ZN7TwoWire12transmittingE>
    1b7a:	22 23       	and	r18, r18
    1b7c:	d1 f0       	breq	.+52     	; 0x1bb2 <_ZN7TwoWire5writeEh+0x48>
    1b7e:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <_ZN7TwoWire14txBufferLengthE>
    1b82:	20 32       	cpi	r18, 0x20	; 32
    1b84:	40 f0       	brcs	.+16     	; 0x1b96 <_ZN7TwoWire5writeEh+0x2c>
    1b86:	21 e0       	ldi	r18, 0x01	; 1
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	33 83       	std	Z+3, r19	; 0x03
    1b8e:	22 83       	std	Z+2, r18	; 0x02
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <_ZN7TwoWire5writeEh+0x54>
    1b96:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_ZN7TwoWire13txBufferIndexE>
    1b9a:	e8 2f       	mov	r30, r24
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	eb 5a       	subi	r30, 0xAB	; 171
    1ba0:	fb 4f       	sbci	r31, 0xFB	; 251
    1ba2:	99 81       	ldd	r25, Y+1	; 0x01
    1ba4:	90 83       	st	Z, r25
    1ba6:	8f 5f       	subi	r24, 0xFF	; 255
    1ba8:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZN7TwoWire13txBufferIndexE>
    1bac:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <_ZN7TwoWire14txBufferLengthE>
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <_ZN7TwoWire5writeEh+0x50>
    1bb2:	61 e0       	ldi	r22, 0x01	; 1
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	b9 d0       	rcall	.+370    	; 0x1d2c <twi_transmit>
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0f 90       	pop	r0
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	08 95       	ret

00001bc6 <_ZN7TwoWireC1Ev>:
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	13 82       	std	Z+3, r1	; 0x03
    1bca:	12 82       	std	Z+2, r1	; 0x02
    1bcc:	88 ee       	ldi	r24, 0xE8	; 232
    1bce:	93 e0       	ldi	r25, 0x03	; 3
    1bd0:	a0 e0       	ldi	r26, 0x00	; 0
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	84 83       	std	Z+4, r24	; 0x04
    1bd6:	95 83       	std	Z+5, r25	; 0x05
    1bd8:	a6 83       	std	Z+6, r26	; 0x06
    1bda:	b7 83       	std	Z+7, r27	; 0x07
    1bdc:	89 ed       	ldi	r24, 0xD9	; 217
    1bde:	92 e0       	ldi	r25, 0x02	; 2
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
    1be4:	08 95       	ret

00001be6 <_ZN7TwoWire5beginEv>:
    1be6:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZN7TwoWire13rxBufferIndexE>
    1bea:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZN7TwoWire14rxBufferLengthE>
    1bee:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <_ZN7TwoWire13txBufferIndexE>
    1bf2:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <_ZN7TwoWire14txBufferLengthE>
    1bf6:	28 d0       	rcall	.+80     	; 0x1c48 <twi_init>
    1bf8:	8d e7       	ldi	r24, 0x7D	; 125
    1bfa:	9d e0       	ldi	r25, 0x0D	; 13
    1bfc:	c4 d0       	rcall	.+392    	; 0x1d86 <twi_attachSlaveTxEvent>
    1bfe:	83 e5       	ldi	r24, 0x53	; 83
    1c00:	9d e0       	ldi	r25, 0x0D	; 13
    1c02:	bc c0       	rjmp	.+376    	; 0x1d7c <twi_attachSlaveRxEvent>

00001c04 <_ZN7TwoWire17beginTransmissionEh>:
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <_ZN7TwoWire12transmittingE>
    1c0a:	60 93 75 04 	sts	0x0475, r22	; 0x800475 <_ZN7TwoWire9txAddressE>
    1c0e:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <_ZN7TwoWire13txBufferIndexE>
    1c12:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <_ZN7TwoWire14txBufferLengthE>
    1c16:	08 95       	ret

00001c18 <_ZN7TwoWire15endTransmissionEh>:
    1c18:	0f 93       	push	r16
    1c1a:	06 2f       	mov	r16, r22
    1c1c:	21 e0       	ldi	r18, 0x01	; 1
    1c1e:	40 91 53 04 	lds	r20, 0x0453	; 0x800453 <_ZN7TwoWire14txBufferLengthE>
    1c22:	65 e5       	ldi	r22, 0x55	; 85
    1c24:	74 e0       	ldi	r23, 0x04	; 4
    1c26:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZN7TwoWire9txAddressE>
    1c2a:	2a d0       	rcall	.+84     	; 0x1c80 <twi_writeTo>
    1c2c:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <_ZN7TwoWire13txBufferIndexE>
    1c30:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <_ZN7TwoWire14txBufferLengthE>
    1c34:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <_ZN7TwoWire12transmittingE>
    1c38:	0f 91       	pop	r16
    1c3a:	08 95       	ret

00001c3c <_ZN7TwoWire15endTransmissionEv>:
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	ec cf       	rjmp	.-40     	; 0x1c18 <_ZN7TwoWire15endTransmissionEh>

00001c40 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1c40:	82 e4       	ldi	r24, 0x42	; 66
    1c42:	94 e0       	ldi	r25, 0x04	; 4
    1c44:	c0 cf       	rjmp	.-128    	; 0x1bc6 <_ZN7TwoWireC1Ev>

00001c46 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1c46:	08 95       	ret

00001c48 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c48:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_state>
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <twi_sendStop>
    1c52:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <twi_inRepStart>
    1c56:	61 e0       	ldi	r22, 0x01	; 1
    1c58:	84 e1       	ldi	r24, 0x14	; 20
    1c5a:	d8 dd       	rcall	.-1104   	; 0x180c <digitalWrite>
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	85 e1       	ldi	r24, 0x15	; 21
    1c60:	d5 dd       	rcall	.-1110   	; 0x180c <digitalWrite>
    1c62:	e9 eb       	ldi	r30, 0xB9	; 185
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	8e 7f       	andi	r24, 0xFE	; 254
    1c6a:	80 83       	st	Z, r24
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8d 7f       	andi	r24, 0xFD	; 253
    1c70:	80 83       	st	Z, r24
    1c72:	88 e4       	ldi	r24, 0x48	; 72
    1c74:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1c78:	85 e4       	ldi	r24, 0x45	; 69
    1c7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c7e:	08 95       	ret

00001c80 <twi_writeTo>:
    1c80:	0f 93       	push	r16
    1c82:	41 32       	cpi	r20, 0x21	; 33
    1c84:	08 f0       	brcs	.+2      	; 0x1c88 <twi_writeTo+0x8>
    1c86:	4a c0       	rjmp	.+148    	; 0x1d1c <twi_writeTo+0x9c>
    1c88:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <twi_state>
    1c8c:	91 11       	cpse	r25, r1
    1c8e:	fc cf       	rjmp	.-8      	; 0x1c88 <twi_writeTo+0x8>
    1c90:	32 e0       	ldi	r19, 0x02	; 2
    1c92:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <twi_state>
    1c96:	00 93 03 05 	sts	0x0503, r16	; 0x800503 <twi_sendStop>
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	30 93 98 04 	sts	0x0498, r19	; 0x800498 <twi_error>
    1ca0:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <twi_masterBufferIndex>
    1ca4:	40 93 dc 04 	sts	0x04DC, r20	; 0x8004dc <twi_masterBufferLength>
    1ca8:	56 2f       	mov	r21, r22
    1caa:	ae ed       	ldi	r26, 0xDE	; 222
    1cac:	b4 e0       	ldi	r27, 0x04	; 4
    1cae:	fb 01       	movw	r30, r22
    1cb0:	3e 2f       	mov	r19, r30
    1cb2:	35 1b       	sub	r19, r21
    1cb4:	34 17       	cp	r19, r20
    1cb6:	18 f4       	brcc	.+6      	; 0x1cbe <twi_writeTo+0x3e>
    1cb8:	31 91       	ld	r19, Z+
    1cba:	3d 93       	st	X+, r19
    1cbc:	f9 cf       	rjmp	.-14     	; 0x1cb0 <twi_writeTo+0x30>
    1cbe:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <twi_slarw>
    1cc2:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <twi_slarw>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	83 2b       	or	r24, r19
    1cca:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <twi_slarw>
    1cce:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <twi_inRepStart>
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	61 f4       	brne	.+24     	; 0x1cee <twi_writeTo+0x6e>
    1cd6:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <twi_inRepStart>
    1cda:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_slarw>
    1cde:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1ce2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ce6:	83 fd       	sbrc	r24, 3
    1ce8:	f8 cf       	rjmp	.-16     	; 0x1cda <twi_writeTo+0x5a>
    1cea:	85 ec       	ldi	r24, 0xC5	; 197
    1cec:	01 c0       	rjmp	.+2      	; 0x1cf0 <twi_writeTo+0x70>
    1cee:	85 ee       	ldi	r24, 0xE5	; 229
    1cf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1cf4:	22 23       	and	r18, r18
    1cf6:	21 f0       	breq	.+8      	; 0x1d00 <twi_writeTo+0x80>
    1cf8:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_state>
    1cfc:	82 30       	cpi	r24, 0x02	; 2
    1cfe:	d1 f3       	breq	.-12     	; 0x1cf4 <twi_writeTo+0x74>
    1d00:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <twi_error>
    1d04:	8f 3f       	cpi	r24, 0xFF	; 255
    1d06:	79 f0       	breq	.+30     	; 0x1d26 <twi_writeTo+0xa6>
    1d08:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <twi_error>
    1d0c:	80 32       	cpi	r24, 0x20	; 32
    1d0e:	41 f0       	breq	.+16     	; 0x1d20 <twi_writeTo+0xa0>
    1d10:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <twi_error>
    1d14:	80 33       	cpi	r24, 0x30	; 48
    1d16:	31 f0       	breq	.+12     	; 0x1d24 <twi_writeTo+0xa4>
    1d18:	94 e0       	ldi	r25, 0x04	; 4
    1d1a:	05 c0       	rjmp	.+10     	; 0x1d26 <twi_writeTo+0xa6>
    1d1c:	91 e0       	ldi	r25, 0x01	; 1
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <twi_writeTo+0xa6>
    1d20:	92 e0       	ldi	r25, 0x02	; 2
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <twi_writeTo+0xa6>
    1d24:	93 e0       	ldi	r25, 0x03	; 3
    1d26:	89 2f       	mov	r24, r25
    1d28:	0f 91       	pop	r16
    1d2a:	08 95       	ret

00001d2c <twi_transmit>:
    1d2c:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <twi_txBufferLength>
    1d30:	26 2f       	mov	r18, r22
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	24 0f       	add	r18, r20
    1d36:	31 1d       	adc	r19, r1
    1d38:	21 32       	cpi	r18, 0x21	; 33
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	dc f4       	brge	.+54     	; 0x1d74 <twi_transmit+0x48>
    1d3e:	20 91 05 05 	lds	r18, 0x0505	; 0x800505 <twi_state>
    1d42:	24 30       	cpi	r18, 0x04	; 4
    1d44:	c9 f4       	brne	.+50     	; 0x1d78 <twi_transmit+0x4c>
    1d46:	fc 01       	movw	r30, r24
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	86 17       	cp	r24, r22
    1d4e:	58 f4       	brcc	.+22     	; 0x1d66 <twi_transmit+0x3a>
    1d50:	30 91 ba 04 	lds	r19, 0x04BA	; 0x8004ba <twi_txBufferLength>
    1d54:	21 91       	ld	r18, Z+
    1d56:	dc 01       	movw	r26, r24
    1d58:	a4 54       	subi	r26, 0x44	; 68
    1d5a:	bb 4f       	sbci	r27, 0xFB	; 251
    1d5c:	a3 0f       	add	r26, r19
    1d5e:	b1 1d       	adc	r27, r1
    1d60:	2c 93       	st	X, r18
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	f3 cf       	rjmp	.-26     	; 0x1d4c <twi_transmit+0x20>
    1d66:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_txBufferLength>
    1d6a:	68 0f       	add	r22, r24
    1d6c:	60 93 ba 04 	sts	0x04BA, r22	; 0x8004ba <twi_txBufferLength>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	08 95       	ret
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	08 95       	ret
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	08 95       	ret

00001d7c <twi_attachSlaveRxEvent>:
    1d7c:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <twi_onSlaveReceive+0x1>
    1d80:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <twi_onSlaveReceive>
    1d84:	08 95       	ret

00001d86 <twi_attachSlaveTxEvent>:
    1d86:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <twi_onSlaveTransmit+0x1>
    1d8a:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <twi_onSlaveTransmit>
    1d8e:	08 95       	ret

00001d90 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1d90:	85 ed       	ldi	r24, 0xD5	; 213
    1d92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1d96:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1d9a:	84 fd       	sbrc	r24, 4
    1d9c:	fc cf       	rjmp	.-8      	; 0x1d96 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1d9e:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_state>
    1da2:	08 95       	ret

00001da4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1da4:	85 ec       	ldi	r24, 0xC5	; 197
    1da6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    1daa:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_state>
    1dae:	08 95       	ret

00001db0 <__vector_39>:
}

ISR(TWI_vect)
{
    1db0:	1f 92       	push	r1
    1db2:	0f 92       	push	r0
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	0f 92       	push	r0
    1db8:	11 24       	eor	r1, r1
    1dba:	0b b6       	in	r0, 0x3b	; 59
    1dbc:	0f 92       	push	r0
    1dbe:	2f 93       	push	r18
    1dc0:	3f 93       	push	r19
    1dc2:	4f 93       	push	r20
    1dc4:	5f 93       	push	r21
    1dc6:	6f 93       	push	r22
    1dc8:	7f 93       	push	r23
    1dca:	8f 93       	push	r24
    1dcc:	9f 93       	push	r25
    1dce:	af 93       	push	r26
    1dd0:	bf 93       	push	r27
    1dd2:	ef 93       	push	r30
    1dd4:	ff 93       	push	r31
  switch(TW_STATUS){
    1dd6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1dda:	88 7f       	andi	r24, 0xF8	; 248
    1ddc:	80 36       	cpi	r24, 0x60	; 96
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <__vector_39+0x32>
    1de0:	9d c0       	rjmp	.+314    	; 0x1f1c <__vector_39+0x16c>
    1de2:	70 f5       	brcc	.+92     	; 0x1e40 <__vector_39+0x90>
    1de4:	88 32       	cpi	r24, 0x28	; 40
    1de6:	09 f4       	brne	.+2      	; 0x1dea <__vector_39+0x3a>
    1de8:	5c c0       	rjmp	.+184    	; 0x1ea2 <__vector_39+0xf2>
    1dea:	90 f4       	brcc	.+36     	; 0x1e10 <__vector_39+0x60>
    1dec:	80 31       	cpi	r24, 0x10	; 16
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <__vector_39+0x42>
    1df0:	55 c0       	rjmp	.+170    	; 0x1e9c <__vector_39+0xec>
    1df2:	38 f4       	brcc	.+14     	; 0x1e02 <__vector_39+0x52>
    1df4:	88 23       	and	r24, r24
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <__vector_39+0x4a>
    1df8:	f3 c0       	rjmp	.+486    	; 0x1fe0 <__vector_39+0x230>
    1dfa:	88 30       	cpi	r24, 0x08	; 8
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <__vector_39+0x50>
    1dfe:	4e c0       	rjmp	.+156    	; 0x1e9c <__vector_39+0xec>
    1e00:	f2 c0       	rjmp	.+484    	; 0x1fe6 <__vector_39+0x236>
    1e02:	88 31       	cpi	r24, 0x18	; 24
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <__vector_39+0x58>
    1e06:	4d c0       	rjmp	.+154    	; 0x1ea2 <__vector_39+0xf2>
    1e08:	80 32       	cpi	r24, 0x20	; 32
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <__vector_39+0x5e>
    1e0c:	5e c0       	rjmp	.+188    	; 0x1eca <__vector_39+0x11a>
    1e0e:	eb c0       	rjmp	.+470    	; 0x1fe6 <__vector_39+0x236>
    1e10:	80 34       	cpi	r24, 0x40	; 64
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <__vector_39+0x66>
    1e14:	69 c0       	rjmp	.+210    	; 0x1ee8 <__vector_39+0x138>
    1e16:	50 f4       	brcc	.+20     	; 0x1e2c <__vector_39+0x7c>
    1e18:	80 33       	cpi	r24, 0x30	; 48
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <__vector_39+0x6e>
    1e1c:	56 c0       	rjmp	.+172    	; 0x1eca <__vector_39+0x11a>
    1e1e:	88 33       	cpi	r24, 0x38	; 56
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <__vector_39+0x74>
    1e22:	e1 c0       	rjmp	.+450    	; 0x1fe6 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e24:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <twi_error>
      twi_releaseBus();
    1e28:	bd df       	rcall	.-134    	; 0x1da4 <twi_releaseBus>
      break;
    1e2a:	dd c0       	rjmp	.+442    	; 0x1fe6 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e2c:	80 35       	cpi	r24, 0x50	; 80
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <__vector_39+0x82>
    1e30:	4f c0       	rjmp	.+158    	; 0x1ed0 <__vector_39+0x120>
    1e32:	88 35       	cpi	r24, 0x58	; 88
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <__vector_39+0x88>
    1e36:	5d c0       	rjmp	.+186    	; 0x1ef2 <__vector_39+0x142>
    1e38:	88 34       	cpi	r24, 0x48	; 72
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <__vector_39+0x8e>
    1e3c:	d4 c0       	rjmp	.+424    	; 0x1fe6 <__vector_39+0x236>
    1e3e:	d2 c0       	rjmp	.+420    	; 0x1fe4 <__vector_39+0x234>
    1e40:	88 39       	cpi	r24, 0x98	; 152
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <__vector_39+0x96>
    1e44:	c3 c0       	rjmp	.+390    	; 0x1fcc <__vector_39+0x21c>
    1e46:	a8 f4       	brcc	.+42     	; 0x1e72 <__vector_39+0xc2>
    1e48:	88 37       	cpi	r24, 0x78	; 120
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <__vector_39+0x9e>
    1e4c:	67 c0       	rjmp	.+206    	; 0x1f1c <__vector_39+0x16c>
    1e4e:	38 f4       	brcc	.+14     	; 0x1e5e <__vector_39+0xae>
    1e50:	88 36       	cpi	r24, 0x68	; 104
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <__vector_39+0xa6>
    1e54:	63 c0       	rjmp	.+198    	; 0x1f1c <__vector_39+0x16c>
    1e56:	80 37       	cpi	r24, 0x70	; 112
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <__vector_39+0xac>
    1e5a:	60 c0       	rjmp	.+192    	; 0x1f1c <__vector_39+0x16c>
    1e5c:	c4 c0       	rjmp	.+392    	; 0x1fe6 <__vector_39+0x236>
    1e5e:	88 38       	cpi	r24, 0x88	; 136
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <__vector_39+0xb4>
    1e62:	b4 c0       	rjmp	.+360    	; 0x1fcc <__vector_39+0x21c>
    1e64:	80 39       	cpi	r24, 0x90	; 144
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <__vector_39+0xba>
    1e68:	5f c0       	rjmp	.+190    	; 0x1f28 <__vector_39+0x178>
    1e6a:	80 38       	cpi	r24, 0x80	; 128
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <__vector_39+0xc0>
    1e6e:	bb c0       	rjmp	.+374    	; 0x1fe6 <__vector_39+0x236>
    1e70:	5b c0       	rjmp	.+182    	; 0x1f28 <__vector_39+0x178>
    1e72:	80 3b       	cpi	r24, 0xB0	; 176
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <__vector_39+0xc8>
    1e76:	82 c0       	rjmp	.+260    	; 0x1f7c <__vector_39+0x1cc>
    1e78:	38 f4       	brcc	.+14     	; 0x1e88 <__vector_39+0xd8>
    1e7a:	80 3a       	cpi	r24, 0xA0	; 160
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <__vector_39+0xd0>
    1e7e:	66 c0       	rjmp	.+204    	; 0x1f4c <__vector_39+0x19c>
    1e80:	88 3a       	cpi	r24, 0xA8	; 168
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <__vector_39+0xd6>
    1e84:	7b c0       	rjmp	.+246    	; 0x1f7c <__vector_39+0x1cc>
    1e86:	af c0       	rjmp	.+350    	; 0x1fe6 <__vector_39+0x236>
    1e88:	80 3c       	cpi	r24, 0xC0	; 192
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <__vector_39+0xde>
    1e8c:	a3 c0       	rjmp	.+326    	; 0x1fd4 <__vector_39+0x224>
    1e8e:	88 3c       	cpi	r24, 0xC8	; 200
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <__vector_39+0xe4>
    1e92:	a0 c0       	rjmp	.+320    	; 0x1fd4 <__vector_39+0x224>
    1e94:	88 3b       	cpi	r24, 0xB8	; 184
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <__vector_39+0xea>
    1e98:	86 c0       	rjmp	.+268    	; 0x1fa6 <__vector_39+0x1f6>
    1e9a:	a5 c0       	rjmp	.+330    	; 0x1fe6 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1e9c:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_slarw>
    1ea0:	10 c0       	rjmp	.+32     	; 0x1ec2 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ea2:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <twi_masterBufferIndex>
    1ea6:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <twi_masterBufferLength>
    1eaa:	98 17       	cp	r25, r24
    1eac:	70 f5       	brcc	.+92     	; 0x1f0a <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1eae:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <twi_masterBufferIndex>
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	8e 0f       	add	r24, r30
    1eb6:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <twi_masterBufferIndex>
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	e2 52       	subi	r30, 0x22	; 34
    1ebe:	fb 4f       	sbci	r31, 0xFB	; 251
    1ec0:	80 81       	ld	r24, Z
    1ec2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ec6:	85 ec       	ldi	r24, 0xC5	; 197
    1ec8:	82 c0       	rjmp	.+260    	; 0x1fce <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1eca:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <twi_error>
    1ece:	8a c0       	rjmp	.+276    	; 0x1fe4 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1ed0:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <twi_masterBufferIndex>
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	8e 0f       	add	r24, r30
    1ed8:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <twi_masterBufferIndex>
    1edc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	e2 52       	subi	r30, 0x22	; 34
    1ee4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ee6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ee8:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <twi_masterBufferIndex>
    1eec:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <twi_masterBufferLength>
    1ef0:	6a c0       	rjmp	.+212    	; 0x1fc6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1ef2:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <twi_masterBufferIndex>
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	8e 0f       	add	r24, r30
    1efa:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <twi_masterBufferIndex>
    1efe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	e2 52       	subi	r30, 0x22	; 34
    1f06:	fb 4f       	sbci	r31, 0xFB	; 251
    1f08:	80 83       	st	Z, r24
	if (twi_sendStop)
    1f0a:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <twi_sendStop>
    1f0e:	81 11       	cpse	r24, r1
    1f10:	69 c0       	rjmp	.+210    	; 0x1fe4 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1f18:	84 ea       	ldi	r24, 0xA4	; 164
    1f1a:	5d c0       	rjmp	.+186    	; 0x1fd6 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1f1c:	83 e0       	ldi	r24, 0x03	; 3
    1f1e:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1f22:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <twi_rxBufferIndex>
    1f26:	cf cf       	rjmp	.-98     	; 0x1ec6 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f28:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <twi_rxBufferIndex>
    1f2c:	80 32       	cpi	r24, 0x20	; 32
    1f2e:	08 f0       	brcs	.+2      	; 0x1f32 <__vector_39+0x182>
    1f30:	4d c0       	rjmp	.+154    	; 0x1fcc <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1f32:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <twi_rxBufferIndex>
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	8e 0f       	add	r24, r30
    1f3a:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <twi_rxBufferIndex>
    1f3e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	e6 56       	subi	r30, 0x66	; 102
    1f46:	fb 4f       	sbci	r31, 0xFB	; 251
    1f48:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1f4a:	bd cf       	rjmp	.-134    	; 0x1ec6 <__vector_39+0x116>
    1f4c:	2b df       	rcall	.-426    	; 0x1da4 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f4e:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <twi_rxBufferIndex>
    1f52:	80 32       	cpi	r24, 0x20	; 32
    1f54:	30 f4       	brcc	.+12     	; 0x1f62 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1f56:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <twi_rxBufferIndex>
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	e6 56       	subi	r30, 0x66	; 102
    1f5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f60:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1f62:	60 91 99 04 	lds	r22, 0x0499	; 0x800499 <twi_rxBufferIndex>
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twi_onSlaveReceive>
    1f6c:	f0 91 ff 04 	lds	r31, 0x04FF	; 0x8004ff <twi_onSlaveReceive+0x1>
    1f70:	8a e9       	ldi	r24, 0x9A	; 154
    1f72:	94 e0       	ldi	r25, 0x04	; 4
    1f74:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1f76:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <twi_rxBufferIndex>
      break;
    1f7a:	35 c0       	rjmp	.+106    	; 0x1fe6 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1f7c:	84 e0       	ldi	r24, 0x04	; 4
    1f7e:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1f82:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1f86:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1f8a:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <twi_onSlaveTransmit>
    1f8e:	f0 91 01 05 	lds	r31, 0x0501	; 0x800501 <twi_onSlaveTransmit+0x1>
    1f92:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1f94:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_txBufferLength>
    1f98:	81 11       	cpse	r24, r1
    1f9a:	05 c0       	rjmp	.+10     	; 0x1fa6 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1fa2:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1fa6:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <twi_txBufferIndex>
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	8e 0f       	add	r24, r30
    1fae:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <twi_txBufferIndex>
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	e4 54       	subi	r30, 0x44	; 68
    1fb6:	fb 4f       	sbci	r31, 0xFB	; 251
    1fb8:	80 81       	ld	r24, Z
    1fba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1fbe:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_txBufferIndex>
    1fc2:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_txBufferLength>
    1fc6:	98 17       	cp	r25, r24
    1fc8:	08 f4       	brcc	.+2      	; 0x1fcc <__vector_39+0x21c>
    1fca:	7d cf       	rjmp	.-262    	; 0x1ec6 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1fcc:	85 e8       	ldi	r24, 0x85	; 133
    1fce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1fd4:	85 ec       	ldi	r24, 0xC5	; 197
    1fd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1fda:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_state>
      break;
    1fde:	03 c0       	rjmp	.+6      	; 0x1fe6 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1fe0:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <twi_error>
      twi_stop();
    1fe4:	d5 de       	rcall	.-598    	; 0x1d90 <twi_stop>
      break;
  }
}
    1fe6:	ff 91       	pop	r31
    1fe8:	ef 91       	pop	r30
    1fea:	bf 91       	pop	r27
    1fec:	af 91       	pop	r26
    1fee:	9f 91       	pop	r25
    1ff0:	8f 91       	pop	r24
    1ff2:	7f 91       	pop	r23
    1ff4:	6f 91       	pop	r22
    1ff6:	5f 91       	pop	r21
    1ff8:	4f 91       	pop	r20
    1ffa:	3f 91       	pop	r19
    1ffc:	2f 91       	pop	r18
    1ffe:	0f 90       	pop	r0
    2000:	0b be       	out	0x3b, r0	; 59
    2002:	0f 90       	pop	r0
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	0f 90       	pop	r0
    2008:	1f 90       	pop	r1
    200a:	18 95       	reti

0000200c <__udivmodsi4>:
    200c:	a1 e2       	ldi	r26, 0x21	; 33
    200e:	1a 2e       	mov	r1, r26
    2010:	aa 1b       	sub	r26, r26
    2012:	bb 1b       	sub	r27, r27
    2014:	fd 01       	movw	r30, r26
    2016:	0d c0       	rjmp	.+26     	; 0x2032 <__udivmodsi4_ep>

00002018 <__udivmodsi4_loop>:
    2018:	aa 1f       	adc	r26, r26
    201a:	bb 1f       	adc	r27, r27
    201c:	ee 1f       	adc	r30, r30
    201e:	ff 1f       	adc	r31, r31
    2020:	a2 17       	cp	r26, r18
    2022:	b3 07       	cpc	r27, r19
    2024:	e4 07       	cpc	r30, r20
    2026:	f5 07       	cpc	r31, r21
    2028:	20 f0       	brcs	.+8      	; 0x2032 <__udivmodsi4_ep>
    202a:	a2 1b       	sub	r26, r18
    202c:	b3 0b       	sbc	r27, r19
    202e:	e4 0b       	sbc	r30, r20
    2030:	f5 0b       	sbc	r31, r21

00002032 <__udivmodsi4_ep>:
    2032:	66 1f       	adc	r22, r22
    2034:	77 1f       	adc	r23, r23
    2036:	88 1f       	adc	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	1a 94       	dec	r1
    203c:	69 f7       	brne	.-38     	; 0x2018 <__udivmodsi4_loop>
    203e:	60 95       	com	r22
    2040:	70 95       	com	r23
    2042:	80 95       	com	r24
    2044:	90 95       	com	r25
    2046:	9b 01       	movw	r18, r22
    2048:	ac 01       	movw	r20, r24
    204a:	bd 01       	movw	r22, r26
    204c:	cf 01       	movw	r24, r30
    204e:	08 95       	ret

00002050 <__tablejump2__>:
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	88 1f       	adc	r24, r24
    2056:	8b bf       	out	0x3b, r24	; 59
    2058:	07 90       	elpm	r0, Z+
    205a:	f6 91       	elpm	r31, Z
    205c:	e0 2d       	mov	r30, r0
    205e:	19 94       	eijmp

00002060 <sprintf>:
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	2e 97       	sbiw	r28, 0x0e	; 14
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	0e 89       	ldd	r16, Y+22	; 0x16
    207a:	1f 89       	ldd	r17, Y+23	; 0x17
    207c:	86 e0       	ldi	r24, 0x06	; 6
    207e:	8c 83       	std	Y+4, r24	; 0x04
    2080:	1a 83       	std	Y+2, r17	; 0x02
    2082:	09 83       	std	Y+1, r16	; 0x01
    2084:	8f ef       	ldi	r24, 0xFF	; 255
    2086:	9f e7       	ldi	r25, 0x7F	; 127
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	ae 01       	movw	r20, r28
    208e:	46 5e       	subi	r20, 0xE6	; 230
    2090:	5f 4f       	sbci	r21, 0xFF	; 255
    2092:	68 8d       	ldd	r22, Y+24	; 0x18
    2094:	79 8d       	ldd	r23, Y+25	; 0x19
    2096:	ce 01       	movw	r24, r28
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	10 d0       	rcall	.+32     	; 0x20bc <vfprintf>
    209c:	ef 81       	ldd	r30, Y+7	; 0x07
    209e:	f8 85       	ldd	r31, Y+8	; 0x08
    20a0:	e0 0f       	add	r30, r16
    20a2:	f1 1f       	adc	r31, r17
    20a4:	10 82       	st	Z, r1
    20a6:	2e 96       	adiw	r28, 0x0e	; 14
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	08 95       	ret

000020bc <vfprintf>:
    20bc:	2f 92       	push	r2
    20be:	3f 92       	push	r3
    20c0:	4f 92       	push	r4
    20c2:	5f 92       	push	r5
    20c4:	6f 92       	push	r6
    20c6:	7f 92       	push	r7
    20c8:	8f 92       	push	r8
    20ca:	9f 92       	push	r9
    20cc:	af 92       	push	r10
    20ce:	bf 92       	push	r11
    20d0:	cf 92       	push	r12
    20d2:	df 92       	push	r13
    20d4:	ef 92       	push	r14
    20d6:	ff 92       	push	r15
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	2b 97       	sbiw	r28, 0x0b	; 11
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	6c 01       	movw	r12, r24
    20f2:	7b 01       	movw	r14, r22
    20f4:	8a 01       	movw	r16, r20
    20f6:	fc 01       	movw	r30, r24
    20f8:	17 82       	std	Z+7, r1	; 0x07
    20fa:	16 82       	std	Z+6, r1	; 0x06
    20fc:	83 81       	ldd	r24, Z+3	; 0x03
    20fe:	81 ff       	sbrs	r24, 1
    2100:	bf c1       	rjmp	.+894    	; 0x2480 <__stack+0x281>
    2102:	ce 01       	movw	r24, r28
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	3c 01       	movw	r6, r24
    2108:	f6 01       	movw	r30, r12
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	f7 01       	movw	r30, r14
    210e:	93 fd       	sbrc	r25, 3
    2110:	85 91       	lpm	r24, Z+
    2112:	93 ff       	sbrs	r25, 3
    2114:	81 91       	ld	r24, Z+
    2116:	7f 01       	movw	r14, r30
    2118:	88 23       	and	r24, r24
    211a:	09 f4       	brne	.+2      	; 0x211e <vfprintf+0x62>
    211c:	ad c1       	rjmp	.+858    	; 0x2478 <__stack+0x279>
    211e:	85 32       	cpi	r24, 0x25	; 37
    2120:	39 f4       	brne	.+14     	; 0x2130 <vfprintf+0x74>
    2122:	93 fd       	sbrc	r25, 3
    2124:	85 91       	lpm	r24, Z+
    2126:	93 ff       	sbrs	r25, 3
    2128:	81 91       	ld	r24, Z+
    212a:	7f 01       	movw	r14, r30
    212c:	85 32       	cpi	r24, 0x25	; 37
    212e:	21 f4       	brne	.+8      	; 0x2138 <vfprintf+0x7c>
    2130:	b6 01       	movw	r22, r12
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	d6 d1       	rcall	.+940    	; 0x24e2 <fputc>
    2136:	e8 cf       	rjmp	.-48     	; 0x2108 <vfprintf+0x4c>
    2138:	91 2c       	mov	r9, r1
    213a:	21 2c       	mov	r2, r1
    213c:	31 2c       	mov	r3, r1
    213e:	ff e1       	ldi	r31, 0x1F	; 31
    2140:	f3 15       	cp	r31, r3
    2142:	d8 f0       	brcs	.+54     	; 0x217a <vfprintf+0xbe>
    2144:	8b 32       	cpi	r24, 0x2B	; 43
    2146:	79 f0       	breq	.+30     	; 0x2166 <vfprintf+0xaa>
    2148:	38 f4       	brcc	.+14     	; 0x2158 <vfprintf+0x9c>
    214a:	80 32       	cpi	r24, 0x20	; 32
    214c:	79 f0       	breq	.+30     	; 0x216c <vfprintf+0xb0>
    214e:	83 32       	cpi	r24, 0x23	; 35
    2150:	a1 f4       	brne	.+40     	; 0x217a <vfprintf+0xbe>
    2152:	23 2d       	mov	r18, r3
    2154:	20 61       	ori	r18, 0x10	; 16
    2156:	1d c0       	rjmp	.+58     	; 0x2192 <vfprintf+0xd6>
    2158:	8d 32       	cpi	r24, 0x2D	; 45
    215a:	61 f0       	breq	.+24     	; 0x2174 <vfprintf+0xb8>
    215c:	80 33       	cpi	r24, 0x30	; 48
    215e:	69 f4       	brne	.+26     	; 0x217a <vfprintf+0xbe>
    2160:	23 2d       	mov	r18, r3
    2162:	21 60       	ori	r18, 0x01	; 1
    2164:	16 c0       	rjmp	.+44     	; 0x2192 <vfprintf+0xd6>
    2166:	83 2d       	mov	r24, r3
    2168:	82 60       	ori	r24, 0x02	; 2
    216a:	38 2e       	mov	r3, r24
    216c:	e3 2d       	mov	r30, r3
    216e:	e4 60       	ori	r30, 0x04	; 4
    2170:	3e 2e       	mov	r3, r30
    2172:	2a c0       	rjmp	.+84     	; 0x21c8 <vfprintf+0x10c>
    2174:	f3 2d       	mov	r31, r3
    2176:	f8 60       	ori	r31, 0x08	; 8
    2178:	1d c0       	rjmp	.+58     	; 0x21b4 <vfprintf+0xf8>
    217a:	37 fc       	sbrc	r3, 7
    217c:	2d c0       	rjmp	.+90     	; 0x21d8 <vfprintf+0x11c>
    217e:	20 ed       	ldi	r18, 0xD0	; 208
    2180:	28 0f       	add	r18, r24
    2182:	2a 30       	cpi	r18, 0x0A	; 10
    2184:	40 f0       	brcs	.+16     	; 0x2196 <vfprintf+0xda>
    2186:	8e 32       	cpi	r24, 0x2E	; 46
    2188:	b9 f4       	brne	.+46     	; 0x21b8 <vfprintf+0xfc>
    218a:	36 fc       	sbrc	r3, 6
    218c:	75 c1       	rjmp	.+746    	; 0x2478 <__stack+0x279>
    218e:	23 2d       	mov	r18, r3
    2190:	20 64       	ori	r18, 0x40	; 64
    2192:	32 2e       	mov	r3, r18
    2194:	19 c0       	rjmp	.+50     	; 0x21c8 <vfprintf+0x10c>
    2196:	36 fe       	sbrs	r3, 6
    2198:	06 c0       	rjmp	.+12     	; 0x21a6 <vfprintf+0xea>
    219a:	8a e0       	ldi	r24, 0x0A	; 10
    219c:	98 9e       	mul	r9, r24
    219e:	20 0d       	add	r18, r0
    21a0:	11 24       	eor	r1, r1
    21a2:	92 2e       	mov	r9, r18
    21a4:	11 c0       	rjmp	.+34     	; 0x21c8 <vfprintf+0x10c>
    21a6:	ea e0       	ldi	r30, 0x0A	; 10
    21a8:	2e 9e       	mul	r2, r30
    21aa:	20 0d       	add	r18, r0
    21ac:	11 24       	eor	r1, r1
    21ae:	22 2e       	mov	r2, r18
    21b0:	f3 2d       	mov	r31, r3
    21b2:	f0 62       	ori	r31, 0x20	; 32
    21b4:	3f 2e       	mov	r3, r31
    21b6:	08 c0       	rjmp	.+16     	; 0x21c8 <vfprintf+0x10c>
    21b8:	8c 36       	cpi	r24, 0x6C	; 108
    21ba:	21 f4       	brne	.+8      	; 0x21c4 <vfprintf+0x108>
    21bc:	83 2d       	mov	r24, r3
    21be:	80 68       	ori	r24, 0x80	; 128
    21c0:	38 2e       	mov	r3, r24
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <vfprintf+0x10c>
    21c4:	88 36       	cpi	r24, 0x68	; 104
    21c6:	41 f4       	brne	.+16     	; 0x21d8 <vfprintf+0x11c>
    21c8:	f7 01       	movw	r30, r14
    21ca:	93 fd       	sbrc	r25, 3
    21cc:	85 91       	lpm	r24, Z+
    21ce:	93 ff       	sbrs	r25, 3
    21d0:	81 91       	ld	r24, Z+
    21d2:	7f 01       	movw	r14, r30
    21d4:	81 11       	cpse	r24, r1
    21d6:	b3 cf       	rjmp	.-154    	; 0x213e <vfprintf+0x82>
    21d8:	98 2f       	mov	r25, r24
    21da:	9f 7d       	andi	r25, 0xDF	; 223
    21dc:	95 54       	subi	r25, 0x45	; 69
    21de:	93 30       	cpi	r25, 0x03	; 3
    21e0:	28 f4       	brcc	.+10     	; 0x21ec <vfprintf+0x130>
    21e2:	0c 5f       	subi	r16, 0xFC	; 252
    21e4:	1f 4f       	sbci	r17, 0xFF	; 255
    21e6:	9f e3       	ldi	r25, 0x3F	; 63
    21e8:	99 83       	std	Y+1, r25	; 0x01
    21ea:	0d c0       	rjmp	.+26     	; 0x2206 <__stack+0x7>
    21ec:	83 36       	cpi	r24, 0x63	; 99
    21ee:	31 f0       	breq	.+12     	; 0x21fc <vfprintf+0x140>
    21f0:	83 37       	cpi	r24, 0x73	; 115
    21f2:	71 f0       	breq	.+28     	; 0x2210 <__stack+0x11>
    21f4:	83 35       	cpi	r24, 0x53	; 83
    21f6:	09 f0       	breq	.+2      	; 0x21fa <vfprintf+0x13e>
    21f8:	55 c0       	rjmp	.+170    	; 0x22a4 <__stack+0xa5>
    21fa:	20 c0       	rjmp	.+64     	; 0x223c <__stack+0x3d>
    21fc:	f8 01       	movw	r30, r16
    21fe:	80 81       	ld	r24, Z
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	0e 5f       	subi	r16, 0xFE	; 254
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	88 24       	eor	r8, r8
    2208:	83 94       	inc	r8
    220a:	91 2c       	mov	r9, r1
    220c:	53 01       	movw	r10, r6
    220e:	12 c0       	rjmp	.+36     	; 0x2234 <__stack+0x35>
    2210:	28 01       	movw	r4, r16
    2212:	f2 e0       	ldi	r31, 0x02	; 2
    2214:	4f 0e       	add	r4, r31
    2216:	51 1c       	adc	r5, r1
    2218:	f8 01       	movw	r30, r16
    221a:	a0 80       	ld	r10, Z
    221c:	b1 80       	ldd	r11, Z+1	; 0x01
    221e:	36 fe       	sbrs	r3, 6
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <__stack+0x29>
    2222:	69 2d       	mov	r22, r9
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	02 c0       	rjmp	.+4      	; 0x222c <__stack+0x2d>
    2228:	6f ef       	ldi	r22, 0xFF	; 255
    222a:	7f ef       	ldi	r23, 0xFF	; 255
    222c:	c5 01       	movw	r24, r10
    222e:	4e d1       	rcall	.+668    	; 0x24cc <strnlen>
    2230:	4c 01       	movw	r8, r24
    2232:	82 01       	movw	r16, r4
    2234:	f3 2d       	mov	r31, r3
    2236:	ff 77       	andi	r31, 0x7F	; 127
    2238:	3f 2e       	mov	r3, r31
    223a:	15 c0       	rjmp	.+42     	; 0x2266 <__stack+0x67>
    223c:	28 01       	movw	r4, r16
    223e:	22 e0       	ldi	r18, 0x02	; 2
    2240:	42 0e       	add	r4, r18
    2242:	51 1c       	adc	r5, r1
    2244:	f8 01       	movw	r30, r16
    2246:	a0 80       	ld	r10, Z
    2248:	b1 80       	ldd	r11, Z+1	; 0x01
    224a:	36 fe       	sbrs	r3, 6
    224c:	03 c0       	rjmp	.+6      	; 0x2254 <__stack+0x55>
    224e:	69 2d       	mov	r22, r9
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <__stack+0x59>
    2254:	6f ef       	ldi	r22, 0xFF	; 255
    2256:	7f ef       	ldi	r23, 0xFF	; 255
    2258:	c5 01       	movw	r24, r10
    225a:	2d d1       	rcall	.+602    	; 0x24b6 <strnlen_P>
    225c:	4c 01       	movw	r8, r24
    225e:	f3 2d       	mov	r31, r3
    2260:	f0 68       	ori	r31, 0x80	; 128
    2262:	3f 2e       	mov	r3, r31
    2264:	82 01       	movw	r16, r4
    2266:	33 fc       	sbrc	r3, 3
    2268:	19 c0       	rjmp	.+50     	; 0x229c <__stack+0x9d>
    226a:	82 2d       	mov	r24, r2
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	88 16       	cp	r8, r24
    2270:	99 06       	cpc	r9, r25
    2272:	a0 f4       	brcc	.+40     	; 0x229c <__stack+0x9d>
    2274:	b6 01       	movw	r22, r12
    2276:	80 e2       	ldi	r24, 0x20	; 32
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	33 d1       	rcall	.+614    	; 0x24e2 <fputc>
    227c:	2a 94       	dec	r2
    227e:	f5 cf       	rjmp	.-22     	; 0x226a <__stack+0x6b>
    2280:	f5 01       	movw	r30, r10
    2282:	37 fc       	sbrc	r3, 7
    2284:	85 91       	lpm	r24, Z+
    2286:	37 fe       	sbrs	r3, 7
    2288:	81 91       	ld	r24, Z+
    228a:	5f 01       	movw	r10, r30
    228c:	b6 01       	movw	r22, r12
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	28 d1       	rcall	.+592    	; 0x24e2 <fputc>
    2292:	21 10       	cpse	r2, r1
    2294:	2a 94       	dec	r2
    2296:	21 e0       	ldi	r18, 0x01	; 1
    2298:	82 1a       	sub	r8, r18
    229a:	91 08       	sbc	r9, r1
    229c:	81 14       	cp	r8, r1
    229e:	91 04       	cpc	r9, r1
    22a0:	79 f7       	brne	.-34     	; 0x2280 <__stack+0x81>
    22a2:	e1 c0       	rjmp	.+450    	; 0x2466 <__stack+0x267>
    22a4:	84 36       	cpi	r24, 0x64	; 100
    22a6:	11 f0       	breq	.+4      	; 0x22ac <__stack+0xad>
    22a8:	89 36       	cpi	r24, 0x69	; 105
    22aa:	39 f5       	brne	.+78     	; 0x22fa <__stack+0xfb>
    22ac:	f8 01       	movw	r30, r16
    22ae:	37 fe       	sbrs	r3, 7
    22b0:	07 c0       	rjmp	.+14     	; 0x22c0 <__stack+0xc1>
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	0c 5f       	subi	r16, 0xFC	; 252
    22bc:	1f 4f       	sbci	r17, 0xFF	; 255
    22be:	08 c0       	rjmp	.+16     	; 0x22d0 <__stack+0xd1>
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	07 2e       	mov	r0, r23
    22c6:	00 0c       	add	r0, r0
    22c8:	88 0b       	sbc	r24, r24
    22ca:	99 0b       	sbc	r25, r25
    22cc:	0e 5f       	subi	r16, 0xFE	; 254
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	f3 2d       	mov	r31, r3
    22d2:	ff 76       	andi	r31, 0x6F	; 111
    22d4:	3f 2e       	mov	r3, r31
    22d6:	97 ff       	sbrs	r25, 7
    22d8:	09 c0       	rjmp	.+18     	; 0x22ec <__stack+0xed>
    22da:	90 95       	com	r25
    22dc:	80 95       	com	r24
    22de:	70 95       	com	r23
    22e0:	61 95       	neg	r22
    22e2:	7f 4f       	sbci	r23, 0xFF	; 255
    22e4:	8f 4f       	sbci	r24, 0xFF	; 255
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	f0 68       	ori	r31, 0x80	; 128
    22ea:	3f 2e       	mov	r3, r31
    22ec:	2a e0       	ldi	r18, 0x0A	; 10
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	a3 01       	movw	r20, r6
    22f2:	33 d1       	rcall	.+614    	; 0x255a <__ultoa_invert>
    22f4:	88 2e       	mov	r8, r24
    22f6:	86 18       	sub	r8, r6
    22f8:	44 c0       	rjmp	.+136    	; 0x2382 <__stack+0x183>
    22fa:	85 37       	cpi	r24, 0x75	; 117
    22fc:	31 f4       	brne	.+12     	; 0x230a <__stack+0x10b>
    22fe:	23 2d       	mov	r18, r3
    2300:	2f 7e       	andi	r18, 0xEF	; 239
    2302:	b2 2e       	mov	r11, r18
    2304:	2a e0       	ldi	r18, 0x0A	; 10
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	25 c0       	rjmp	.+74     	; 0x2354 <__stack+0x155>
    230a:	93 2d       	mov	r25, r3
    230c:	99 7f       	andi	r25, 0xF9	; 249
    230e:	b9 2e       	mov	r11, r25
    2310:	8f 36       	cpi	r24, 0x6F	; 111
    2312:	c1 f0       	breq	.+48     	; 0x2344 <__stack+0x145>
    2314:	18 f4       	brcc	.+6      	; 0x231c <__stack+0x11d>
    2316:	88 35       	cpi	r24, 0x58	; 88
    2318:	79 f0       	breq	.+30     	; 0x2338 <__stack+0x139>
    231a:	ae c0       	rjmp	.+348    	; 0x2478 <__stack+0x279>
    231c:	80 37       	cpi	r24, 0x70	; 112
    231e:	19 f0       	breq	.+6      	; 0x2326 <__stack+0x127>
    2320:	88 37       	cpi	r24, 0x78	; 120
    2322:	21 f0       	breq	.+8      	; 0x232c <__stack+0x12d>
    2324:	a9 c0       	rjmp	.+338    	; 0x2478 <__stack+0x279>
    2326:	e9 2f       	mov	r30, r25
    2328:	e0 61       	ori	r30, 0x10	; 16
    232a:	be 2e       	mov	r11, r30
    232c:	b4 fe       	sbrs	r11, 4
    232e:	0d c0       	rjmp	.+26     	; 0x234a <__stack+0x14b>
    2330:	fb 2d       	mov	r31, r11
    2332:	f4 60       	ori	r31, 0x04	; 4
    2334:	bf 2e       	mov	r11, r31
    2336:	09 c0       	rjmp	.+18     	; 0x234a <__stack+0x14b>
    2338:	34 fe       	sbrs	r3, 4
    233a:	0a c0       	rjmp	.+20     	; 0x2350 <__stack+0x151>
    233c:	29 2f       	mov	r18, r25
    233e:	26 60       	ori	r18, 0x06	; 6
    2340:	b2 2e       	mov	r11, r18
    2342:	06 c0       	rjmp	.+12     	; 0x2350 <__stack+0x151>
    2344:	28 e0       	ldi	r18, 0x08	; 8
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	05 c0       	rjmp	.+10     	; 0x2354 <__stack+0x155>
    234a:	20 e1       	ldi	r18, 0x10	; 16
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <__stack+0x155>
    2350:	20 e1       	ldi	r18, 0x10	; 16
    2352:	32 e0       	ldi	r19, 0x02	; 2
    2354:	f8 01       	movw	r30, r16
    2356:	b7 fe       	sbrs	r11, 7
    2358:	07 c0       	rjmp	.+14     	; 0x2368 <__stack+0x169>
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	0c 5f       	subi	r16, 0xFC	; 252
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <__stack+0x175>
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0e 5f       	subi	r16, 0xFE	; 254
    2372:	1f 4f       	sbci	r17, 0xFF	; 255
    2374:	a3 01       	movw	r20, r6
    2376:	f1 d0       	rcall	.+482    	; 0x255a <__ultoa_invert>
    2378:	88 2e       	mov	r8, r24
    237a:	86 18       	sub	r8, r6
    237c:	fb 2d       	mov	r31, r11
    237e:	ff 77       	andi	r31, 0x7F	; 127
    2380:	3f 2e       	mov	r3, r31
    2382:	36 fe       	sbrs	r3, 6
    2384:	0d c0       	rjmp	.+26     	; 0x23a0 <__stack+0x1a1>
    2386:	23 2d       	mov	r18, r3
    2388:	2e 7f       	andi	r18, 0xFE	; 254
    238a:	a2 2e       	mov	r10, r18
    238c:	89 14       	cp	r8, r9
    238e:	58 f4       	brcc	.+22     	; 0x23a6 <__stack+0x1a7>
    2390:	34 fe       	sbrs	r3, 4
    2392:	0b c0       	rjmp	.+22     	; 0x23aa <__stack+0x1ab>
    2394:	32 fc       	sbrc	r3, 2
    2396:	09 c0       	rjmp	.+18     	; 0x23aa <__stack+0x1ab>
    2398:	83 2d       	mov	r24, r3
    239a:	8e 7e       	andi	r24, 0xEE	; 238
    239c:	a8 2e       	mov	r10, r24
    239e:	05 c0       	rjmp	.+10     	; 0x23aa <__stack+0x1ab>
    23a0:	b8 2c       	mov	r11, r8
    23a2:	a3 2c       	mov	r10, r3
    23a4:	03 c0       	rjmp	.+6      	; 0x23ac <__stack+0x1ad>
    23a6:	b8 2c       	mov	r11, r8
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <__stack+0x1ad>
    23aa:	b9 2c       	mov	r11, r9
    23ac:	a4 fe       	sbrs	r10, 4
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <__stack+0x1cf>
    23b0:	fe 01       	movw	r30, r28
    23b2:	e8 0d       	add	r30, r8
    23b4:	f1 1d       	adc	r31, r1
    23b6:	80 81       	ld	r24, Z
    23b8:	80 33       	cpi	r24, 0x30	; 48
    23ba:	21 f4       	brne	.+8      	; 0x23c4 <__stack+0x1c5>
    23bc:	9a 2d       	mov	r25, r10
    23be:	99 7e       	andi	r25, 0xE9	; 233
    23c0:	a9 2e       	mov	r10, r25
    23c2:	09 c0       	rjmp	.+18     	; 0x23d6 <__stack+0x1d7>
    23c4:	a2 fe       	sbrs	r10, 2
    23c6:	06 c0       	rjmp	.+12     	; 0x23d4 <__stack+0x1d5>
    23c8:	b3 94       	inc	r11
    23ca:	b3 94       	inc	r11
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <__stack+0x1d7>
    23ce:	8a 2d       	mov	r24, r10
    23d0:	86 78       	andi	r24, 0x86	; 134
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <__stack+0x1d7>
    23d4:	b3 94       	inc	r11
    23d6:	a3 fc       	sbrc	r10, 3
    23d8:	10 c0       	rjmp	.+32     	; 0x23fa <__stack+0x1fb>
    23da:	a0 fe       	sbrs	r10, 0
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <__stack+0x1eb>
    23de:	b2 14       	cp	r11, r2
    23e0:	80 f4       	brcc	.+32     	; 0x2402 <__stack+0x203>
    23e2:	28 0c       	add	r2, r8
    23e4:	92 2c       	mov	r9, r2
    23e6:	9b 18       	sub	r9, r11
    23e8:	0d c0       	rjmp	.+26     	; 0x2404 <__stack+0x205>
    23ea:	b2 14       	cp	r11, r2
    23ec:	58 f4       	brcc	.+22     	; 0x2404 <__stack+0x205>
    23ee:	b6 01       	movw	r22, r12
    23f0:	80 e2       	ldi	r24, 0x20	; 32
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	76 d0       	rcall	.+236    	; 0x24e2 <fputc>
    23f6:	b3 94       	inc	r11
    23f8:	f8 cf       	rjmp	.-16     	; 0x23ea <__stack+0x1eb>
    23fa:	b2 14       	cp	r11, r2
    23fc:	18 f4       	brcc	.+6      	; 0x2404 <__stack+0x205>
    23fe:	2b 18       	sub	r2, r11
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <__stack+0x207>
    2402:	98 2c       	mov	r9, r8
    2404:	21 2c       	mov	r2, r1
    2406:	a4 fe       	sbrs	r10, 4
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <__stack+0x229>
    240a:	b6 01       	movw	r22, r12
    240c:	80 e3       	ldi	r24, 0x30	; 48
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	68 d0       	rcall	.+208    	; 0x24e2 <fputc>
    2412:	a2 fe       	sbrs	r10, 2
    2414:	16 c0       	rjmp	.+44     	; 0x2442 <__stack+0x243>
    2416:	a1 fc       	sbrc	r10, 1
    2418:	03 c0       	rjmp	.+6      	; 0x2420 <__stack+0x221>
    241a:	88 e7       	ldi	r24, 0x78	; 120
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <__stack+0x225>
    2420:	88 e5       	ldi	r24, 0x58	; 88
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	b6 01       	movw	r22, r12
    2426:	0c c0       	rjmp	.+24     	; 0x2440 <__stack+0x241>
    2428:	8a 2d       	mov	r24, r10
    242a:	86 78       	andi	r24, 0x86	; 134
    242c:	51 f0       	breq	.+20     	; 0x2442 <__stack+0x243>
    242e:	a1 fe       	sbrs	r10, 1
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <__stack+0x237>
    2432:	8b e2       	ldi	r24, 0x2B	; 43
    2434:	01 c0       	rjmp	.+2      	; 0x2438 <__stack+0x239>
    2436:	80 e2       	ldi	r24, 0x20	; 32
    2438:	a7 fc       	sbrc	r10, 7
    243a:	8d e2       	ldi	r24, 0x2D	; 45
    243c:	b6 01       	movw	r22, r12
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	50 d0       	rcall	.+160    	; 0x24e2 <fputc>
    2442:	89 14       	cp	r8, r9
    2444:	30 f4       	brcc	.+12     	; 0x2452 <__stack+0x253>
    2446:	b6 01       	movw	r22, r12
    2448:	80 e3       	ldi	r24, 0x30	; 48
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	4a d0       	rcall	.+148    	; 0x24e2 <fputc>
    244e:	9a 94       	dec	r9
    2450:	f8 cf       	rjmp	.-16     	; 0x2442 <__stack+0x243>
    2452:	8a 94       	dec	r8
    2454:	f3 01       	movw	r30, r6
    2456:	e8 0d       	add	r30, r8
    2458:	f1 1d       	adc	r31, r1
    245a:	80 81       	ld	r24, Z
    245c:	b6 01       	movw	r22, r12
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	40 d0       	rcall	.+128    	; 0x24e2 <fputc>
    2462:	81 10       	cpse	r8, r1
    2464:	f6 cf       	rjmp	.-20     	; 0x2452 <__stack+0x253>
    2466:	22 20       	and	r2, r2
    2468:	09 f4       	brne	.+2      	; 0x246c <__stack+0x26d>
    246a:	4e ce       	rjmp	.-868    	; 0x2108 <vfprintf+0x4c>
    246c:	b6 01       	movw	r22, r12
    246e:	80 e2       	ldi	r24, 0x20	; 32
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	37 d0       	rcall	.+110    	; 0x24e2 <fputc>
    2474:	2a 94       	dec	r2
    2476:	f7 cf       	rjmp	.-18     	; 0x2466 <__stack+0x267>
    2478:	f6 01       	movw	r30, r12
    247a:	86 81       	ldd	r24, Z+6	; 0x06
    247c:	97 81       	ldd	r25, Z+7	; 0x07
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <__stack+0x285>
    2480:	8f ef       	ldi	r24, 0xFF	; 255
    2482:	9f ef       	ldi	r25, 0xFF	; 255
    2484:	2b 96       	adiw	r28, 0x0b	; 11
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	ff 90       	pop	r15
    249a:	ef 90       	pop	r14
    249c:	df 90       	pop	r13
    249e:	cf 90       	pop	r12
    24a0:	bf 90       	pop	r11
    24a2:	af 90       	pop	r10
    24a4:	9f 90       	pop	r9
    24a6:	8f 90       	pop	r8
    24a8:	7f 90       	pop	r7
    24aa:	6f 90       	pop	r6
    24ac:	5f 90       	pop	r5
    24ae:	4f 90       	pop	r4
    24b0:	3f 90       	pop	r3
    24b2:	2f 90       	pop	r2
    24b4:	08 95       	ret

000024b6 <strnlen_P>:
    24b6:	fc 01       	movw	r30, r24
    24b8:	05 90       	lpm	r0, Z+
    24ba:	61 50       	subi	r22, 0x01	; 1
    24bc:	70 40       	sbci	r23, 0x00	; 0
    24be:	01 10       	cpse	r0, r1
    24c0:	d8 f7       	brcc	.-10     	; 0x24b8 <strnlen_P+0x2>
    24c2:	80 95       	com	r24
    24c4:	90 95       	com	r25
    24c6:	8e 0f       	add	r24, r30
    24c8:	9f 1f       	adc	r25, r31
    24ca:	08 95       	ret

000024cc <strnlen>:
    24cc:	fc 01       	movw	r30, r24
    24ce:	61 50       	subi	r22, 0x01	; 1
    24d0:	70 40       	sbci	r23, 0x00	; 0
    24d2:	01 90       	ld	r0, Z+
    24d4:	01 10       	cpse	r0, r1
    24d6:	d8 f7       	brcc	.-10     	; 0x24ce <strnlen+0x2>
    24d8:	80 95       	com	r24
    24da:	90 95       	com	r25
    24dc:	8e 0f       	add	r24, r30
    24de:	9f 1f       	adc	r25, r31
    24e0:	08 95       	ret

000024e2 <fputc>:
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	fb 01       	movw	r30, r22
    24ec:	23 81       	ldd	r18, Z+3	; 0x03
    24ee:	21 fd       	sbrc	r18, 1
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <fputc+0x16>
    24f2:	8f ef       	ldi	r24, 0xFF	; 255
    24f4:	9f ef       	ldi	r25, 0xFF	; 255
    24f6:	2c c0       	rjmp	.+88     	; 0x2550 <fputc+0x6e>
    24f8:	22 ff       	sbrs	r18, 2
    24fa:	16 c0       	rjmp	.+44     	; 0x2528 <fputc+0x46>
    24fc:	46 81       	ldd	r20, Z+6	; 0x06
    24fe:	57 81       	ldd	r21, Z+7	; 0x07
    2500:	24 81       	ldd	r18, Z+4	; 0x04
    2502:	35 81       	ldd	r19, Z+5	; 0x05
    2504:	42 17       	cp	r20, r18
    2506:	53 07       	cpc	r21, r19
    2508:	44 f4       	brge	.+16     	; 0x251a <fputc+0x38>
    250a:	a0 81       	ld	r26, Z
    250c:	b1 81       	ldd	r27, Z+1	; 0x01
    250e:	9d 01       	movw	r18, r26
    2510:	2f 5f       	subi	r18, 0xFF	; 255
    2512:	3f 4f       	sbci	r19, 0xFF	; 255
    2514:	31 83       	std	Z+1, r19	; 0x01
    2516:	20 83       	st	Z, r18
    2518:	8c 93       	st	X, r24
    251a:	26 81       	ldd	r18, Z+6	; 0x06
    251c:	37 81       	ldd	r19, Z+7	; 0x07
    251e:	2f 5f       	subi	r18, 0xFF	; 255
    2520:	3f 4f       	sbci	r19, 0xFF	; 255
    2522:	37 83       	std	Z+7, r19	; 0x07
    2524:	26 83       	std	Z+6, r18	; 0x06
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <fputc+0x6e>
    2528:	8b 01       	movw	r16, r22
    252a:	ec 01       	movw	r28, r24
    252c:	fb 01       	movw	r30, r22
    252e:	00 84       	ldd	r0, Z+8	; 0x08
    2530:	f1 85       	ldd	r31, Z+9	; 0x09
    2532:	e0 2d       	mov	r30, r0
    2534:	19 95       	eicall
    2536:	89 2b       	or	r24, r25
    2538:	e1 f6       	brne	.-72     	; 0x24f2 <fputc+0x10>
    253a:	d8 01       	movw	r26, r16
    253c:	16 96       	adiw	r26, 0x06	; 6
    253e:	8d 91       	ld	r24, X+
    2540:	9c 91       	ld	r25, X
    2542:	17 97       	sbiw	r26, 0x07	; 7
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	17 96       	adiw	r26, 0x07	; 7
    2548:	9c 93       	st	X, r25
    254a:	8e 93       	st	-X, r24
    254c:	16 97       	sbiw	r26, 0x06	; 6
    254e:	ce 01       	movw	r24, r28
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	08 95       	ret

0000255a <__ultoa_invert>:
    255a:	fa 01       	movw	r30, r20
    255c:	aa 27       	eor	r26, r26
    255e:	28 30       	cpi	r18, 0x08	; 8
    2560:	51 f1       	breq	.+84     	; 0x25b6 <__ultoa_invert+0x5c>
    2562:	20 31       	cpi	r18, 0x10	; 16
    2564:	81 f1       	breq	.+96     	; 0x25c6 <__ultoa_invert+0x6c>
    2566:	e8 94       	clt
    2568:	6f 93       	push	r22
    256a:	6e 7f       	andi	r22, 0xFE	; 254
    256c:	6e 5f       	subi	r22, 0xFE	; 254
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
    2570:	8f 4f       	sbci	r24, 0xFF	; 255
    2572:	9f 4f       	sbci	r25, 0xFF	; 255
    2574:	af 4f       	sbci	r26, 0xFF	; 255
    2576:	b1 e0       	ldi	r27, 0x01	; 1
    2578:	3e d0       	rcall	.+124    	; 0x25f6 <__ultoa_invert+0x9c>
    257a:	b4 e0       	ldi	r27, 0x04	; 4
    257c:	3c d0       	rcall	.+120    	; 0x25f6 <__ultoa_invert+0x9c>
    257e:	67 0f       	add	r22, r23
    2580:	78 1f       	adc	r23, r24
    2582:	89 1f       	adc	r24, r25
    2584:	9a 1f       	adc	r25, r26
    2586:	a1 1d       	adc	r26, r1
    2588:	68 0f       	add	r22, r24
    258a:	79 1f       	adc	r23, r25
    258c:	8a 1f       	adc	r24, r26
    258e:	91 1d       	adc	r25, r1
    2590:	a1 1d       	adc	r26, r1
    2592:	6a 0f       	add	r22, r26
    2594:	71 1d       	adc	r23, r1
    2596:	81 1d       	adc	r24, r1
    2598:	91 1d       	adc	r25, r1
    259a:	a1 1d       	adc	r26, r1
    259c:	20 d0       	rcall	.+64     	; 0x25de <__ultoa_invert+0x84>
    259e:	09 f4       	brne	.+2      	; 0x25a2 <__ultoa_invert+0x48>
    25a0:	68 94       	set
    25a2:	3f 91       	pop	r19
    25a4:	2a e0       	ldi	r18, 0x0A	; 10
    25a6:	26 9f       	mul	r18, r22
    25a8:	11 24       	eor	r1, r1
    25aa:	30 19       	sub	r19, r0
    25ac:	30 5d       	subi	r19, 0xD0	; 208
    25ae:	31 93       	st	Z+, r19
    25b0:	de f6       	brtc	.-74     	; 0x2568 <__ultoa_invert+0xe>
    25b2:	cf 01       	movw	r24, r30
    25b4:	08 95       	ret
    25b6:	46 2f       	mov	r20, r22
    25b8:	47 70       	andi	r20, 0x07	; 7
    25ba:	40 5d       	subi	r20, 0xD0	; 208
    25bc:	41 93       	st	Z+, r20
    25be:	b3 e0       	ldi	r27, 0x03	; 3
    25c0:	0f d0       	rcall	.+30     	; 0x25e0 <__ultoa_invert+0x86>
    25c2:	c9 f7       	brne	.-14     	; 0x25b6 <__ultoa_invert+0x5c>
    25c4:	f6 cf       	rjmp	.-20     	; 0x25b2 <__ultoa_invert+0x58>
    25c6:	46 2f       	mov	r20, r22
    25c8:	4f 70       	andi	r20, 0x0F	; 15
    25ca:	40 5d       	subi	r20, 0xD0	; 208
    25cc:	4a 33       	cpi	r20, 0x3A	; 58
    25ce:	18 f0       	brcs	.+6      	; 0x25d6 <__ultoa_invert+0x7c>
    25d0:	49 5d       	subi	r20, 0xD9	; 217
    25d2:	31 fd       	sbrc	r19, 1
    25d4:	40 52       	subi	r20, 0x20	; 32
    25d6:	41 93       	st	Z+, r20
    25d8:	02 d0       	rcall	.+4      	; 0x25de <__ultoa_invert+0x84>
    25da:	a9 f7       	brne	.-22     	; 0x25c6 <__ultoa_invert+0x6c>
    25dc:	ea cf       	rjmp	.-44     	; 0x25b2 <__ultoa_invert+0x58>
    25de:	b4 e0       	ldi	r27, 0x04	; 4
    25e0:	a6 95       	lsr	r26
    25e2:	97 95       	ror	r25
    25e4:	87 95       	ror	r24
    25e6:	77 95       	ror	r23
    25e8:	67 95       	ror	r22
    25ea:	ba 95       	dec	r27
    25ec:	c9 f7       	brne	.-14     	; 0x25e0 <__ultoa_invert+0x86>
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	61 05       	cpc	r22, r1
    25f2:	71 05       	cpc	r23, r1
    25f4:	08 95       	ret
    25f6:	9b 01       	movw	r18, r22
    25f8:	ac 01       	movw	r20, r24
    25fa:	0a 2e       	mov	r0, r26
    25fc:	06 94       	lsr	r0
    25fe:	57 95       	ror	r21
    2600:	47 95       	ror	r20
    2602:	37 95       	ror	r19
    2604:	27 95       	ror	r18
    2606:	ba 95       	dec	r27
    2608:	c9 f7       	brne	.-14     	; 0x25fc <__ultoa_invert+0xa2>
    260a:	62 0f       	add	r22, r18
    260c:	73 1f       	adc	r23, r19
    260e:	84 1f       	adc	r24, r20
    2610:	95 1f       	adc	r25, r21
    2612:	a0 1d       	adc	r26, r0
    2614:	08 95       	ret

00002616 <_exit>:
    2616:	f8 94       	cli

00002618 <__stop_program>:
    2618:	ff cf       	rjmp	.-2      	; 0x2618 <__stop_program>
