
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800200  00002690  00002724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000222  008002e8  008002e8  0000280c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000700  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011ea8  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031ce  00000000  00000000  00014e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000396a  00000000  00000000  0001801e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001414  00000000  00000000  0001b988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038f2  00000000  00000000  0001cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006201  00000000  00000000  0002068e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a0  00000000  00000000  0002688f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c1       	rjmp	.+532    	; 0x216 <__ctors_end>
       2:	00 00       	nop
       4:	39 c1       	rjmp	.+626    	; 0x278 <__bad_interrupt>
       6:	00 00       	nop
       8:	37 c1       	rjmp	.+622    	; 0x278 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c1       	rjmp	.+618    	; 0x278 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c1       	rjmp	.+614    	; 0x278 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c1       	rjmp	.+610    	; 0x278 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c1       	rjmp	.+606    	; 0x278 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2d c1       	rjmp	.+602    	; 0x278 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2b c1       	rjmp	.+598    	; 0x278 <__bad_interrupt>
      22:	00 00       	nop
      24:	98 c2       	rjmp	.+1328   	; 0x556 <__vector_9>
      26:	00 00       	nop
      28:	27 c1       	rjmp	.+590    	; 0x278 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	25 c1       	rjmp	.+586    	; 0x278 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c1       	rjmp	.+582    	; 0x278 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c1       	rjmp	.+578    	; 0x278 <__bad_interrupt>
      36:	00 00       	nop
      38:	1f c1       	rjmp	.+574    	; 0x278 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c1       	rjmp	.+570    	; 0x278 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c1       	rjmp	.+566    	; 0x278 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c1       	rjmp	.+562    	; 0x278 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c1       	rjmp	.+558    	; 0x278 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c1       	rjmp	.+554    	; 0x278 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c1       	rjmp	.+550    	; 0x278 <__bad_interrupt>
      52:	00 00       	nop
      54:	11 c1       	rjmp	.+546    	; 0x278 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c1       	rjmp	.+542    	; 0x278 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_23>
      60:	0b c1       	rjmp	.+534    	; 0x278 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_25>
      68:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__vector_26>
      6c:	05 c1       	rjmp	.+522    	; 0x278 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__bad_interrupt>
      72:	00 00       	nop
      74:	01 c1       	rjmp	.+514    	; 0x278 <__bad_interrupt>
      76:	00 00       	nop
      78:	ff c0       	rjmp	.+510    	; 0x278 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd c0       	rjmp	.+506    	; 0x278 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fb c0       	rjmp	.+502    	; 0x278 <__bad_interrupt>
      82:	00 00       	nop
      84:	f9 c0       	rjmp	.+498    	; 0x278 <__bad_interrupt>
      86:	00 00       	nop
      88:	f7 c0       	rjmp	.+494    	; 0x278 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f5 c0       	rjmp	.+490    	; 0x278 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_36>
      94:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_37>
      98:	ef c0       	rjmp	.+478    	; 0x278 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_39>
      a0:	eb c0       	rjmp	.+470    	; 0x278 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e9 c0       	rjmp	.+466    	; 0x278 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e7 c0       	rjmp	.+462    	; 0x278 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e5 c0       	rjmp	.+458    	; 0x278 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e3 c0       	rjmp	.+454    	; 0x278 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e1 c0       	rjmp	.+450    	; 0x278 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	df c0       	rjmp	.+446    	; 0x278 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dd c0       	rjmp	.+442    	; 0x278 <__bad_interrupt>
      be:	00 00       	nop
      c0:	db c0       	rjmp	.+438    	; 0x278 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d9 c0       	rjmp	.+434    	; 0x278 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d7 c0       	rjmp	.+430    	; 0x278 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d5 c0       	rjmp	.+426    	; 0x278 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d3 c0       	rjmp	.+422    	; 0x278 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d1 c0       	rjmp	.+418    	; 0x278 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cf c0       	rjmp	.+414    	; 0x278 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cd c0       	rjmp	.+410    	; 0x278 <__bad_interrupt>
      de:	00 00       	nop
      e0:	cb c0       	rjmp	.+406    	; 0x278 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ca 0b       	sbc	r28, r26
      e6:	cd 0b       	sbc	r28, r29
      e8:	bc 0b       	sbc	r27, r28
      ea:	c0 0b       	sbc	r28, r16
      ec:	c6 0b       	sbc	r28, r22
      ee:	04 0c       	add	r0, r4
      f0:	d1 0b       	sbc	r29, r17
      f2:	d5 0b       	sbc	r29, r21
      f4:	db 0b       	sbc	r29, r27
      f6:	df 0b       	sbc	r29, r31
      f8:	e3 0b       	sbc	r30, r19
      fa:	e9 0b       	sbc	r30, r25
      fc:	ed 0b       	sbc	r30, r29
      fe:	f1 0b       	sbc	r31, r17
     100:	04 0c       	add	r0, r4
     102:	f7 0b       	sbc	r31, r23
     104:	fb 0b       	sbc	r31, r27
     106:	ff 0b       	sbc	r31, r31

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	c5 01       	movw	r24, r10
     210:	b4 08       	sbc	r11, r4
     212:	49 09       	sbc	r20, r9
     214:	5b 0e       	add	r5, r27

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	d1 e2       	ldi	r29, 0x21	; 33
     21e:	de bf       	out	0x3e, r29	; 62
     220:	cd bf       	out	0x3d, r28	; 61
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0c bf       	out	0x3c, r16	; 60

00000226 <__do_copy_data>:
     226:	12 e0       	ldi	r17, 0x02	; 2
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b2 e0       	ldi	r27, 0x02	; 2
     22c:	e0 e9       	ldi	r30, 0x90	; 144
     22e:	f6 e2       	ldi	r31, 0x26	; 38
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0b bf       	out	0x3b, r16	; 59
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x14>
     236:	07 90       	elpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	a8 3e       	cpi	r26, 0xE8	; 232
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0x10>

00000240 <__do_clear_bss>:
     240:	25 e0       	ldi	r18, 0x05	; 5
     242:	a8 ee       	ldi	r26, 0xE8	; 232
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	aa 30       	cpi	r26, 0x0A	; 10
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>

00000250 <__do_global_ctors>:
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	cb e0       	ldi	r28, 0x0B	; 11
     254:	d1 e0       	ldi	r29, 0x01	; 1
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	06 c0       	rjmp	.+12     	; 0x266 <__do_global_ctors+0x16>
     25a:	21 97       	sbiw	r28, 0x01	; 1
     25c:	01 09       	sbc	r16, r1
     25e:	80 2f       	mov	r24, r16
     260:	fe 01       	movw	r30, r28
     262:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__tablejump2__>
     266:	c7 30       	cpi	r28, 0x07	; 7
     268:	d1 07       	cpc	r29, r17
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	08 07       	cpc	r16, r24
     26e:	a9 f7       	brne	.-22     	; 0x25a <__do_global_ctors+0xa>
     270:	0e 94 77 09 	call	0x12ee	; 0x12ee <main>
     274:	0c 94 46 13 	jmp	0x268c	; 0x268c <_exit>

00000278 <__bad_interrupt>:
     278:	c3 ce       	rjmp	.-634    	; 0x0 <__vectors>

0000027a <_ZN14HardwareSerial5writeEi>:
  Serial1.write(MX_TORQUE_LENGTH);
  Serial1.write(MX_INSTRUCTION_WRITE_DATA);
  Serial1.write(MX_TORQUE_ENABLE);
  Serial1.write(Status);
  Serial1.write(Checksum);
  RS485_RX_ON
     27a:	dc 01       	movw	r26, r24
     27c:	ed 91       	ld	r30, X+
     27e:	fc 91       	ld	r31, X
     280:	01 90       	ld	r0, Z+
     282:	f0 81       	ld	r31, Z
     284:	e0 2d       	mov	r30, r0
     286:	19 94       	eijmp

00000288 <_Z8printLCDhhih>:
     288:	8f 92       	push	r8
     28a:	9f 92       	push	r9
     28c:	af 92       	push	r10
     28e:	bf 92       	push	r11
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <_Z8printLCDhhih+0x1a>
     2a2:	1f 92       	push	r1
     2a4:	1f 92       	push	r1
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	b8 2e       	mov	r11, r24
     2ac:	a6 2e       	mov	r10, r22
     2ae:	94 2e       	mov	r9, r20
     2b0:	85 2e       	mov	r8, r21
     2b2:	cd b6       	in	r12, 0x3d	; 61
     2b4:	de b6       	in	r13, 0x3e	; 62
     2b6:	8d b7       	in	r24, 0x3d	; 61
     2b8:	9e b7       	in	r25, 0x3e	; 62
     2ba:	82 1b       	sub	r24, r18
     2bc:	91 09       	sbc	r25, r1
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	9e bf       	out	0x3e, r25	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	8d bf       	out	0x3d, r24	; 61
     2c8:	0d b7       	in	r16, 0x3d	; 61
     2ca:	1e b7       	in	r17, 0x3e	; 62
     2cc:	0f 5f       	subi	r16, 0xFF	; 255
     2ce:	1f 4f       	sbci	r17, 0xFF	; 255
     2d0:	1f 92       	push	r1
     2d2:	2f 93       	push	r18
     2d4:	8b e0       	ldi	r24, 0x0B	; 11
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	9f 93       	push	r25
     2da:	8f 93       	push	r24
     2dc:	ce 01       	movw	r24, r28
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	7c 01       	movw	r14, r24
     2e2:	9f 93       	push	r25
     2e4:	8f 93       	push	r24
     2e6:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <sprintf>
     2ea:	8f 92       	push	r8
     2ec:	9f 92       	push	r9
     2ee:	ff 92       	push	r15
     2f0:	ef 92       	push	r14
     2f2:	1f 93       	push	r17
     2f4:	0f 93       	push	r16
     2f6:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <sprintf>
     2fa:	4a 2d       	mov	r20, r10
     2fc:	6b 2d       	mov	r22, r11
     2fe:	88 ee       	ldi	r24, 0xE8	; 232
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_ZN17LiquidCrystal_I2C9setCursorEhh>
     306:	b8 01       	movw	r22, r16
     308:	88 ee       	ldi	r24, 0xE8	; 232
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN5Print5printEPKc>
     310:	8d b7       	in	r24, 0x3d	; 61
     312:	9e b7       	in	r25, 0x3e	; 62
     314:	0c 96       	adiw	r24, 0x0c	; 12
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	9e bf       	out	0x3e, r25	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	8d bf       	out	0x3d, r24	; 61
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de be       	out	0x3e, r13	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd be       	out	0x3d, r12	; 61
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	bf 90       	pop	r11
     346:	af 90       	pop	r10
     348:	9f 90       	pop	r9
     34a:	8f 90       	pop	r8
     34c:	08 95       	ret

0000034e <_Z13setupSwitchesv>:
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	84 b9       	out	0x04, r24	; 4
     352:	84 b1       	in	r24, 0x04	; 4
     354:	88 7f       	andi	r24, 0xF8	; 248
     356:	84 b9       	out	0x04, r24	; 4
     358:	eb e6       	ldi	r30, 0x6B	; 107
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	87 60       	ori	r24, 0x07	; 7
     360:	80 83       	st	Z, r24
     362:	e8 e6       	ldi	r30, 0x68	; 104
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	80 83       	st	Z, r24
     36c:	78 94       	sei
     36e:	08 95       	ret

00000370 <_Z8sumBytesPhh>:
     370:	38 2f       	mov	r19, r24
     372:	fc 01       	movw	r30, r24
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	2e 2f       	mov	r18, r30
     37a:	23 1b       	sub	r18, r19
     37c:	26 17       	cp	r18, r22
     37e:	20 f4       	brcc	.+8      	; 0x388 <_Z8sumBytesPhh+0x18>
     380:	21 91       	ld	r18, Z+
     382:	82 0f       	add	r24, r18
     384:	91 1d       	adc	r25, r1
     386:	f8 cf       	rjmp	.-16     	; 0x378 <_Z8sumBytesPhh+0x8>
     388:	08 95       	ret

0000038a <_GLOBAL__sub_I_Load_High_Byte>:
     38a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <millis>
     38e:	60 93 ff 02 	sts	0x02FF, r22	; 0x8002ff <startTime>
     392:	70 93 00 03 	sts	0x0300, r23	; 0x800300 <startTime+0x1>
     396:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <startTime+0x2>
     39a:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <startTime+0x3>
     39e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3a2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3a6:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <currPos+0x1>
     3aa:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <currPos>
     3ae:	24 e0       	ldi	r18, 0x04	; 4
     3b0:	44 e1       	ldi	r20, 0x14	; 20
     3b2:	67 e2       	ldi	r22, 0x27	; 39
     3b4:	88 ee       	ldi	r24, 0xE8	; 232
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <_ZN17LiquidCrystal_I2CC1Ehhh>

000003bc <_Z10writeServohhPhh>:
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	f8 2e       	mov	r15, r24
     3ce:	e6 2e       	mov	r14, r22
     3d0:	6a 01       	movw	r12, r20
     3d2:	02 2f       	mov	r16, r18
     3d4:	66 e0       	ldi	r22, 0x06	; 6
     3d6:	6e 0d       	add	r22, r14
     3d8:	d6 2f       	mov	r29, r22
     3da:	d2 0f       	add	r29, r18
     3dc:	62 2f       	mov	r22, r18
     3de:	ca 01       	movw	r24, r20
     3e0:	c7 df       	rcall	.-114    	; 0x370 <_Z8sumBytesPhh>
     3e2:	c8 2f       	mov	r28, r24
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     3f4:	61 e0       	ldi	r22, 0x01	; 1
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay>
     400:	6f ef       	ldi	r22, 0xFF	; 255
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 ea       	ldi	r24, 0xA0	; 160
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	38 df       	rcall	.-400    	; 0x27a <_ZN14HardwareSerial5writeEi>
     40a:	6f ef       	ldi	r22, 0xFF	; 255
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	80 ea       	ldi	r24, 0xA0	; 160
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	33 df       	rcall	.-410    	; 0x27a <_ZN14HardwareSerial5writeEi>
     414:	6f 2d       	mov	r22, r15
     416:	80 ea       	ldi	r24, 0xA0	; 160
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	68 d5       	rcall	.+2768   	; 0xeec <_ZN14HardwareSerial5writeEh>
     41c:	10 e0       	ldi	r17, 0x00	; 0
     41e:	b8 01       	movw	r22, r16
     420:	6d 5f       	subi	r22, 0xFD	; 253
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	80 ea       	ldi	r24, 0xA0	; 160
     426:	93 e0       	ldi	r25, 0x03	; 3
     428:	28 df       	rcall	.-432    	; 0x27a <_ZN14HardwareSerial5writeEi>
     42a:	63 e0       	ldi	r22, 0x03	; 3
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	80 ea       	ldi	r24, 0xA0	; 160
     430:	93 e0       	ldi	r25, 0x03	; 3
     432:	23 df       	rcall	.-442    	; 0x27a <_ZN14HardwareSerial5writeEi>
     434:	6e 2d       	mov	r22, r14
     436:	80 ea       	ldi	r24, 0xA0	; 160
     438:	93 e0       	ldi	r25, 0x03	; 3
     43a:	58 d5       	rcall	.+2736   	; 0xeec <_ZN14HardwareSerial5writeEh>
     43c:	a8 01       	movw	r20, r16
     43e:	b6 01       	movw	r22, r12
     440:	80 ea       	ldi	r24, 0xA0	; 160
     442:	93 e0       	ldi	r25, 0x03	; 3
     444:	5e d7       	rcall	.+3772   	; 0x1302 <_ZN5Print5writeEPKhj>
     446:	df 0d       	add	r29, r15
     448:	cd 0f       	add	r28, r29
     44a:	c0 95       	com	r28
     44c:	6c 2f       	mov	r22, r28
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	80 ea       	ldi	r24, 0xA0	; 160
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	12 df       	rcall	.-476    	; 0x27a <_ZN14HardwareSerial5writeEi>
     456:	80 ea       	ldi	r24, 0xA0	; 160
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	94 d5       	rcall	.+2856   	; 0xf84 <_ZN14HardwareSerial5flushEv>
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	df 90       	pop	r13
     482:	cf 90       	pop	r12
     484:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <delay>

00000488 <_Z9moveSpeedhii>:
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	00 d0       	rcall	.+0      	; 0x492 <_Z9moveSpeedhii+0xa>
     492:	1f 92       	push	r1
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	8b 01       	movw	r16, r22
     49a:	9c ef       	ldi	r25, 0xFC	; 252
     49c:	98 0f       	add	r25, r24
     49e:	92 30       	cpi	r25, 0x02	; 2
     4a0:	58 f4       	brcc	.+22     	; 0x4b8 <_Z9moveSpeedhii+0x30>
     4a2:	64 3e       	cpi	r22, 0xE4	; 228
     4a4:	72 40       	sbci	r23, 0x02	; 2
     4a6:	14 f4       	brge	.+4      	; 0x4ac <_Z9moveSpeedhii+0x24>
     4a8:	04 ee       	ldi	r16, 0xE4	; 228
     4aa:	12 e0       	ldi	r17, 0x02	; 2
     4ac:	05 3a       	cpi	r16, 0xA5	; 165
     4ae:	96 e0       	ldi	r25, 0x06	; 6
     4b0:	19 07       	cpc	r17, r25
     4b2:	14 f0       	brlt	.+4      	; 0x4b8 <_Z9moveSpeedhii+0x30>
     4b4:	04 ea       	ldi	r16, 0xA4	; 164
     4b6:	16 e0       	ldi	r17, 0x06	; 6
     4b8:	09 83       	std	Y+1, r16	; 0x01
     4ba:	1a 83       	std	Y+2, r17	; 0x02
     4bc:	4b 83       	std	Y+3, r20	; 0x03
     4be:	5c 83       	std	Y+4, r21	; 0x04
     4c0:	24 e0       	ldi	r18, 0x04	; 4
     4c2:	ae 01       	movw	r20, r28
     4c4:	4f 5f       	subi	r20, 0xFF	; 255
     4c6:	5f 4f       	sbci	r21, 0xFF	; 255
     4c8:	6e e1       	ldi	r22, 0x1E	; 30
     4ca:	78 df       	rcall	.-272    	; 0x3bc <_Z10writeServohhPhh>
     4cc:	10 93 fa 02 	sts	0x02FA, r17	; 0x8002fa <currPos+0x1>
     4d0:	00 93 f9 02 	sts	0x02F9, r16	; 0x8002f9 <currPos>
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	08 95       	ret

000004e6 <_Z10setEndlesshb.part.0>:
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <_Z10setEndlesshb.part.0+0x6>
     4ec:	1f 92       	push	r1
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	19 82       	std	Y+1, r1	; 0x01
     4f4:	1a 82       	std	Y+2, r1	; 0x02
     4f6:	1b 82       	std	Y+3, r1	; 0x03
     4f8:	1c 82       	std	Y+4, r1	; 0x04
     4fa:	24 e0       	ldi	r18, 0x04	; 4
     4fc:	ae 01       	movw	r20, r28
     4fe:	4f 5f       	subi	r20, 0xFF	; 255
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	66 e0       	ldi	r22, 0x06	; 6
     504:	5b df       	rcall	.-330    	; 0x3bc <_Z10writeServohhPhh>
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <_Z10setEndlesshb>:
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	00 d0       	rcall	.+0      	; 0x51a <_Z10setEndlesshb+0x6>
     51a:	1f 92       	push	r1
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	66 23       	and	r22, r22
     522:	11 f0       	breq	.+4      	; 0x528 <_Z10setEndlesshb+0x14>
     524:	e0 df       	rcall	.-64     	; 0x4e6 <_Z10setEndlesshb.part.0>
     526:	0e c0       	rjmp	.+28     	; 0x544 <_Z10setEndlesshb+0x30>
     528:	94 ee       	ldi	r25, 0xE4	; 228
     52a:	99 83       	std	Y+1, r25	; 0x01
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	9a 83       	std	Y+2, r25	; 0x02
     530:	94 ea       	ldi	r25, 0xA4	; 164
     532:	9b 83       	std	Y+3, r25	; 0x03
     534:	96 e0       	ldi	r25, 0x06	; 6
     536:	9c 83       	std	Y+4, r25	; 0x04
     538:	24 e0       	ldi	r18, 0x04	; 4
     53a:	ae 01       	movw	r20, r28
     53c:	4f 5f       	subi	r20, 0xFF	; 255
     53e:	5f 4f       	sbci	r21, 0xFF	; 255
     540:	66 e0       	ldi	r22, 0x06	; 6
     542:	3c df       	rcall	.-392    	; 0x3bc <_Z10writeServohhPhh>
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <_Z12clearEndlessh>:
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	df cf       	rjmp	.-66     	; 0x514 <_Z10setEndlesshb>

00000556 <__vector_9>:
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	0b b6       	in	r0, 0x3b	; 59
     562:	0f 92       	push	r0
     564:	2f 93       	push	r18
     566:	3f 93       	push	r19
     568:	4f 93       	push	r20
     56a:	5f 93       	push	r21
     56c:	6f 93       	push	r22
     56e:	7f 93       	push	r23
     570:	8f 93       	push	r24
     572:	9f 93       	push	r25
     574:	af 93       	push	r26
     576:	bf 93       	push	r27
     578:	ef 93       	push	r30
     57a:	ff 93       	push	r31
     57c:	18 9b       	sbis	0x03, 0	; 3
     57e:	1d c0       	rjmp	.+58     	; 0x5ba <__vector_9+0x64>
     580:	2f 9a       	sbi	0x05, 7	; 5
     582:	18 9b       	sbis	0x03, 0	; 3
     584:	19 c0       	rjmp	.+50     	; 0x5b8 <__vector_9+0x62>
     586:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <currPos>
     58a:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <currPos+0x1>
     58e:	65 3e       	cpi	r22, 0xE5	; 229
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	78 07       	cpc	r23, r24
     594:	1c f0       	brlt	.+6      	; 0x59c <__vector_9+0x46>
     596:	61 50       	subi	r22, 0x01	; 1
     598:	71 09       	sbc	r23, r1
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__vector_9+0x4a>
     59c:	64 ee       	ldi	r22, 0xE4	; 228
     59e:	72 e0       	ldi	r23, 0x02	; 2
     5a0:	44 e1       	ldi	r20, 0x14	; 20
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     5a8:	6f df       	rcall	.-290    	; 0x488 <_Z9moveSpeedhii>
     5aa:	68 ec       	ldi	r22, 0xC8	; 200
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay>
     5b6:	e5 cf       	rjmp	.-54     	; 0x582 <__vector_9+0x2c>
     5b8:	2f 98       	cbi	0x05, 7	; 5
     5ba:	19 9b       	sbis	0x03, 1	; 3
     5bc:	1d c0       	rjmp	.+58     	; 0x5f8 <__vector_9+0xa2>
     5be:	2f 9a       	sbi	0x05, 7	; 5
     5c0:	19 9b       	sbis	0x03, 1	; 3
     5c2:	19 c0       	rjmp	.+50     	; 0x5f6 <__vector_9+0xa0>
     5c4:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <currPos>
     5c8:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <currPos+0x1>
     5cc:	64 3a       	cpi	r22, 0xA4	; 164
     5ce:	86 e0       	ldi	r24, 0x06	; 6
     5d0:	78 07       	cpc	r23, r24
     5d2:	1c f4       	brge	.+6      	; 0x5da <__vector_9+0x84>
     5d4:	6f 5f       	subi	r22, 0xFF	; 255
     5d6:	7f 4f       	sbci	r23, 0xFF	; 255
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__vector_9+0x88>
     5da:	64 ea       	ldi	r22, 0xA4	; 164
     5dc:	76 e0       	ldi	r23, 0x06	; 6
     5de:	44 e1       	ldi	r20, 0x14	; 20
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     5e6:	50 df       	rcall	.-352    	; 0x488 <_Z9moveSpeedhii>
     5e8:	68 ec       	ldi	r22, 0xC8	; 200
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay>
     5f4:	e5 cf       	rjmp	.-54     	; 0x5c0 <__vector_9+0x6a>
     5f6:	2f 98       	cbi	0x05, 7	; 5
     5f8:	1a 9b       	sbis	0x03, 2	; 3
     5fa:	18 c0       	rjmp	.+48     	; 0x62c <__vector_9+0xd6>
     5fc:	1f 9a       	sbi	0x03, 7	; 3
     5fe:	64 e1       	ldi	r22, 0x14	; 20
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay>
     60a:	1a 9b       	sbis	0x03, 2	; 3
     60c:	05 c0       	rjmp	.+10     	; 0x618 <__vector_9+0xc2>
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	f7 cf       	rjmp	.-18     	; 0x606 <__vector_9+0xb0>
     618:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
     61c:	84 30       	cpi	r24, 0x04	; 4
     61e:	10 f4       	brcc	.+4      	; 0x624 <__vector_9+0xce>
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	01 c0       	rjmp	.+2      	; 0x626 <__vector_9+0xd0>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <id>
     62a:	93 df       	rcall	.-218    	; 0x552 <_Z12clearEndlessh>
     62c:	ff 91       	pop	r31
     62e:	ef 91       	pop	r30
     630:	bf 91       	pop	r27
     632:	af 91       	pop	r26
     634:	9f 91       	pop	r25
     636:	8f 91       	pop	r24
     638:	7f 91       	pop	r23
     63a:	6f 91       	pop	r22
     63c:	5f 91       	pop	r21
     63e:	4f 91       	pop	r20
     640:	3f 91       	pop	r19
     642:	2f 91       	pop	r18
     644:	0f 90       	pop	r0
     646:	0b be       	out	0x3b, r0	; 59
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti

00000652 <_Z10writeServohhh>:
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	c8 2f       	mov	r28, r24
     65a:	d6 2f       	mov	r29, r22
     65c:	14 2f       	mov	r17, r20
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	ce d7       	rcall	.+3996   	; 0x1614 <delay>
     678:	6f ef       	ldi	r22, 0xFF	; 255
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	80 ea       	ldi	r24, 0xA0	; 160
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	fc dd       	rcall	.-1032   	; 0x27a <_ZN14HardwareSerial5writeEi>
     682:	6f ef       	ldi	r22, 0xFF	; 255
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	80 ea       	ldi	r24, 0xA0	; 160
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	f7 dd       	rcall	.-1042   	; 0x27a <_ZN14HardwareSerial5writeEi>
     68c:	6c 2f       	mov	r22, r28
     68e:	80 ea       	ldi	r24, 0xA0	; 160
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	2c d4       	rcall	.+2136   	; 0xeec <_ZN14HardwareSerial5writeEh>
     694:	64 e0       	ldi	r22, 0x04	; 4
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	80 ea       	ldi	r24, 0xA0	; 160
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	ee dd       	rcall	.-1060   	; 0x27a <_ZN14HardwareSerial5writeEi>
     69e:	63 e0       	ldi	r22, 0x03	; 3
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 ea       	ldi	r24, 0xA0	; 160
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	e9 dd       	rcall	.-1070   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6a8:	6d 2f       	mov	r22, r29
     6aa:	80 ea       	ldi	r24, 0xA0	; 160
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	1e d4       	rcall	.+2108   	; 0xeec <_ZN14HardwareSerial5writeEh>
     6b0:	61 2f       	mov	r22, r17
     6b2:	80 ea       	ldi	r24, 0xA0	; 160
     6b4:	93 e0       	ldi	r25, 0x03	; 3
     6b6:	1a d4       	rcall	.+2100   	; 0xeec <_ZN14HardwareSerial5writeEh>
     6b8:	19 5f       	subi	r17, 0xF9	; 249
     6ba:	d1 0f       	add	r29, r17
     6bc:	cd 0f       	add	r28, r29
     6be:	c0 95       	com	r28
     6c0:	6c 2f       	mov	r22, r28
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	80 ea       	ldi	r24, 0xA0	; 160
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	d8 dd       	rcall	.-1104   	; 0x27a <_ZN14HardwareSerial5writeEi>
     6ca:	80 ea       	ldi	r24, 0xA0	; 160
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	5a d4       	rcall	.+2228   	; 0xf84 <_ZN14HardwareSerial5flushEv>
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	92 c7       	rjmp	.+3876   	; 0x1614 <delay>

000006f0 <_Z9readServohhh>:
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	c8 2f       	mov	r28, r24
     6f8:	d6 2f       	mov	r29, r22
     6fa:	14 2f       	mov	r17, r20
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	7f d7       	rcall	.+3838   	; 0x1614 <delay>
     716:	6f ef       	ldi	r22, 0xFF	; 255
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 ea       	ldi	r24, 0xA0	; 160
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	ad dd       	rcall	.-1190   	; 0x27a <_ZN14HardwareSerial5writeEi>
     720:	6f ef       	ldi	r22, 0xFF	; 255
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	80 ea       	ldi	r24, 0xA0	; 160
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	a8 dd       	rcall	.-1200   	; 0x27a <_ZN14HardwareSerial5writeEi>
     72a:	6c 2f       	mov	r22, r28
     72c:	80 ea       	ldi	r24, 0xA0	; 160
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	dd d3       	rcall	.+1978   	; 0xeec <_ZN14HardwareSerial5writeEh>
     732:	64 e0       	ldi	r22, 0x04	; 4
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 ea       	ldi	r24, 0xA0	; 160
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	9f dd       	rcall	.-1218   	; 0x27a <_ZN14HardwareSerial5writeEi>
     73c:	62 e0       	ldi	r22, 0x02	; 2
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	80 ea       	ldi	r24, 0xA0	; 160
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	9a dd       	rcall	.-1228   	; 0x27a <_ZN14HardwareSerial5writeEi>
     746:	6d 2f       	mov	r22, r29
     748:	80 ea       	ldi	r24, 0xA0	; 160
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	cf d3       	rcall	.+1950   	; 0xeec <_ZN14HardwareSerial5writeEh>
     74e:	61 2f       	mov	r22, r17
     750:	80 ea       	ldi	r24, 0xA0	; 160
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	cb d3       	rcall	.+1942   	; 0xeec <_ZN14HardwareSerial5writeEh>
     756:	1a 5f       	subi	r17, 0xFA	; 250
     758:	d1 0f       	add	r29, r17
     75a:	cd 0f       	add	r28, r29
     75c:	c0 95       	com	r28
     75e:	6c 2f       	mov	r22, r28
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 ea       	ldi	r24, 0xA0	; 160
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	89 dd       	rcall	.-1262   	; 0x27a <_ZN14HardwareSerial5writeEi>
     768:	80 ea       	ldi	r24, 0xA0	; 160
     76a:	93 e0       	ldi	r25, 0x03	; 3
     76c:	0b d4       	rcall	.+2070   	; 0xf84 <_ZN14HardwareSerial5flushEv>
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	0e 94 41 0c 	call	0x1882	; 0x1882 <digitalWrite>
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	43 c7       	rjmp	.+3718   	; 0x1614 <delay>

0000078e <_Z11printBufferv>:
 *  |0xFF|0xFF|ID|LENGTH|INSTRUCTION|PARAM_1|...|PARAM_N|CHECKSUM
 */
void printBuffer() {
	//delay(20);
	//byte start_1, start_2, servo_id, msg_length, er_byte, chck_sum;
	Serial.print("## Start: ");
     78e:	61 e4       	ldi	r22, 0x41	; 65
     790:	72 e0       	ldi	r23, 0x02	; 2
     792:	83 e0       	ldi	r24, 0x03	; 3
     794:	93 e0       	ldi	r25, 0x03	; 3
     796:	f4 d5       	rcall	.+3048   	; 0x1380 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     798:	80 ea       	ldi	r24, 0xA0	; 160
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	0d d3       	rcall	.+1562   	; 0xdb8 <_ZN14HardwareSerial9availableEv>
     79e:	4a e0       	ldi	r20, 0x0A	; 10
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	bc 01       	movw	r22, r24
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	a4 d6       	rcall	.+3400   	; 0x14f2 <_ZN5Print5printEii>
	Serial.println(" ####################");
     7aa:	6c e4       	ldi	r22, 0x4C	; 76
     7ac:	72 e0       	ldi	r23, 0x02	; 2
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	93 e0       	ldi	r25, 0x03	; 3
	while(Serial1.available()){
     7b2:	f1 d5       	rcall	.+3042   	; 0x1396 <_ZN5Print7printlnEPKc>
     7b4:	80 ea       	ldi	r24, 0xA0	; 160
     7b6:	93 e0       	ldi	r25, 0x03	; 3
     7b8:	ff d2       	rcall	.+1534   	; 0xdb8 <_ZN14HardwareSerial9availableEv>
     7ba:	89 2b       	or	r24, r25
		
		Serial.print(Serial1.available());
     7bc:	e9 f0       	breq	.+58     	; 0x7f8 <_Z11printBufferv+0x6a>
     7be:	80 ea       	ldi	r24, 0xA0	; 160
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	fa d2       	rcall	.+1524   	; 0xdb8 <_ZN14HardwareSerial9availableEv>
     7c4:	4a e0       	ldi	r20, 0x0A	; 10
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	bc 01       	movw	r22, r24
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	93 e0       	ldi	r25, 0x03	; 3
		Serial.print(", ");
     7ce:	91 d6       	rcall	.+3362   	; 0x14f2 <_ZN5Print5printEii>
     7d0:	62 e6       	ldi	r22, 0x62	; 98
     7d2:	72 e0       	ldi	r23, 0x02	; 2
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	93 e0       	ldi	r25, 0x03	; 3
		Serial.println(Serial1.read());
     7d8:	d3 d5       	rcall	.+2982   	; 0x1380 <_ZN5Print5printEPKc>
     7da:	80 ea       	ldi	r24, 0xA0	; 160
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	06 d3       	rcall	.+1548   	; 0xdec <_ZN14HardwareSerial4readEv>
     7e0:	4a e0       	ldi	r20, 0x0A	; 10
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	bc 01       	movw	r22, r24
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	93 e0       	ldi	r25, 0x03	; 3
		delay(1);
     7ea:	89 d6       	rcall	.+3346   	; 0x14fe <_ZN5Print7printlnEii>
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
	//delay(20);
	//byte start_1, start_2, servo_id, msg_length, er_byte, chck_sum;
	Serial.print("## Start: ");
	Serial.print(Serial1.available());
	Serial.println(" ####################");
	while(Serial1.available()){
     7f4:	0f d7       	rcall	.+3614   	; 0x1614 <delay>
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	Serial.println("## End #####################");
     7f6:	de cf       	rjmp	.-68     	; 0x7b4 <_Z11printBufferv+0x26>
     7f8:	65 e6       	ldi	r22, 0x65	; 101
     7fa:	72 e0       	ldi	r23, 0x02	; 2
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	ca c5       	rjmp	.+2964   	; 0x1396 <_ZN5Print7printlnEPKc>

00000802 <setup>:

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
	setupSwitches();					// Setup the arm control switches
     802:	a5 dd       	rcall	.-1206   	; 0x34e <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
     804:	88 ee       	ldi	r24, 0xE8	; 232
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     80c:	88 ee       	ldi	r24, 0xE8	; 232
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     814:	88 ee       	ldi	r24, 0xE8	; 232
     816:	92 e0       	ldi	r25, 0x02	; 2
     818:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	f4 d7       	rcall	.+4072   	; 0x180a <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	f1 d7       	rcall	.+4066   	; 0x180a <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     828:	26 e0       	ldi	r18, 0x06	; 6
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	51 ee       	ldi	r21, 0xE1	; 225
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	c7 d3       	rcall	.+1934   	; 0xfc6 <_ZN14HardwareSerial5beginEmh>
     838:	26 e0       	ldi	r18, 0x06	; 6
     83a:	47 e3       	ldi	r20, 0x37	; 55
     83c:	5f ed       	ldi	r21, 0xDF	; 223
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 ea       	ldi	r24, 0xA0	; 160
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	bf d3       	rcall	.+1918   	; 0xfc6 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
     848:	80 ea       	ldi	r24, 0xA0	; 160
     84a:	93 e0       	ldi	r25, 0x03	; 3
     84c:	9b d3       	rcall	.+1846   	; 0xf84 <_ZN14HardwareSerial5flushEv>
     84e:	40 e0       	ldi	r20, 0x00	; 0

	lcd.setCursor(0,0);
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	88 ee       	ldi	r24, 0xE8	; 232
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_ZN17LiquidCrystal_I2C9setCursorEhh>
     85a:	62 e8       	ldi	r22, 0x82	; 130
	lcd.print("sID:");
     85c:	72 e0       	ldi	r23, 0x02	; 2
     85e:	88 ee       	ldi	r24, 0xE8	; 232
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	8e d5       	rcall	.+2844   	; 0x1380 <_ZN5Print5printEPKc>
     864:	41 e0       	ldi	r20, 0x01	; 1
	lcd.setCursor(0,1);
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	88 ee       	ldi	r24, 0xE8	; 232
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("deg:");
     870:	67 e8       	ldi	r22, 0x87	; 135
     872:	72 e0       	ldi	r23, 0x02	; 2
     874:	88 ee       	ldi	r24, 0xE8	; 232
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	83 d5       	rcall	.+2822   	; 0x1380 <_ZN5Print5printEPKc>
     87a:	42 e0       	ldi	r20, 0x02	; 2
	lcd.setCursor(0,2);
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	88 ee       	ldi	r24, 0xE8	; 232
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("rpm:");
     886:	6c e8       	ldi	r22, 0x8C	; 140
     888:	72 e0       	ldi	r23, 0x02	; 2
     88a:	88 ee       	ldi	r24, 0xE8	; 232
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	78 d5       	rcall	.+2800   	; 0x1380 <_ZN5Print5printEPKc>
     890:	43 e0       	ldi	r20, 0x03	; 3
	lcd.setCursor(0,3);
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	88 ee       	ldi	r24, 0xE8	; 232
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("ld%:");
     89c:	61 e9       	ldi	r22, 0x91	; 145
     89e:	72 e0       	ldi	r23, 0x02	; 2
     8a0:	88 ee       	ldi	r24, 0xE8	; 232
     8a2:	92 e0       	ldi	r25, 0x02	; 2
	
	clearEndless(id);
     8a4:	6d d5       	rcall	.+2778   	; 0x1380 <_ZN5Print5printEPKc>
     8a6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>

	writeServo(5,0x18,1);
     8aa:	53 de       	rcall	.-858    	; 0x552 <_Z12clearEndlessh>
     8ac:	41 e0       	ldi	r20, 0x01	; 1
     8ae:	68 e1       	ldi	r22, 0x18	; 24
     8b0:	85 e0       	ldi	r24, 0x05	; 5
	readServo(id, 0x18, 8);
     8b2:	cf de       	rcall	.-610    	; 0x652 <_Z10writeServohhh>
     8b4:	48 e0       	ldi	r20, 0x08	; 8
     8b6:	68 e1       	ldi	r22, 0x18	; 24
     8b8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
	printBuffer();
     8bc:	19 df       	rcall	.-462    	; 0x6f0 <_Z9readServohhh>
     8be:	67 df       	rcall	.-306    	; 0x78e <_Z11printBufferv>
	delay(2);
     8c0:	62 e0       	ldi	r22, 0x02	; 2
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a5 c6       	rjmp	.+3402   	; 0x1614 <delay>

000008ca <_Z12printDataLCDv>:
     8ca:	af 92       	push	r10
void printSerial(String title, int value) {
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
void printDataLCD() {
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
	delay(10);
     8de:	6a e0       	ldi	r22, 0x0A	; 10
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	96 d6       	rcall	.+3372   	; 0x1614 <delay>
	int lock;
	int punch;
	int current;
	bool speedDirection, loadDirection;
	byte i = 0;
	int available = Serial1.available();
     8e8:	80 ea       	ldi	r24, 0xA0	; 160
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	65 d2       	rcall	.+1226   	; 0xdb8 <_ZN14HardwareSerial9availableEv>
	if (available > 0){
     8ee:	18 16       	cp	r1, r24
     8f0:	19 06       	cpc	r1, r25
     8f2:	0c f0       	brlt	.+2      	; 0x8f6 <_Z12printDataLCDv+0x2c>
     8f4:	2e c1       	rjmp	.+604    	; 0xb52 <_Z12printDataLCDv+0x288>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     8f6:	80 ea       	ldi	r24, 0xA0	; 160
     8f8:	93 e0       	ldi	r25, 0x03	; 3
     8fa:	78 d2       	rcall	.+1264   	; 0xdec <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     8fc:	8f 3f       	cpi	r24, 0xFF	; 255
     8fe:	91 05       	cpc	r25, r1
     900:	09 f0       	breq	.+2      	; 0x904 <_Z12printDataLCDv+0x3a>
     902:	27 c1       	rjmp	.+590    	; 0xb52 <_Z12printDataLCDv+0x288>
     904:	80 ea       	ldi	r24, 0xA0	; 160
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	71 d2       	rcall	.+1250   	; 0xdec <_ZN14HardwareSerial4readEv>
     90a:	8f 3f       	cpi	r24, 0xFF	; 255
     90c:	91 05       	cpc	r25, r1
     90e:	09 f0       	breq	.+2      	; 0x912 <_Z12printDataLCDv+0x48>
			servoID = Serial1.read(); // servo ID
     910:	20 c1       	rjmp	.+576    	; 0xb52 <_Z12printDataLCDv+0x288>
     912:	80 ea       	ldi	r24, 0xA0	; 160
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	6a d2       	rcall	.+1236   	; 0xdec <_ZN14HardwareSerial4readEv>
			msgLength = Serial1.read(); // msg Length
     918:	7c 01       	movw	r14, r24
     91a:	80 ea       	ldi	r24, 0xA0	; 160
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	66 d2       	rcall	.+1228   	; 0xdec <_ZN14HardwareSerial4readEv>
			error_byte = Serial1.read();
     920:	d8 2f       	mov	r29, r24
     922:	80 ea       	ldi	r24, 0xA0	; 160
     924:	93 e0       	ldi	r25, 0x03	; 3
     926:	62 d2       	rcall	.+1220   	; 0xdec <_ZN14HardwareSerial4readEv>
     928:	c8 2f       	mov	r28, r24
			error_byte_old = error_byte ? error_byte : error_byte_old;
     92a:	81 11       	cpse	r24, r1
     92c:	03 c0       	rjmp	.+6      	; 0x934 <_Z12printDataLCDv+0x6a>
     92e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <error_byte_old>
     932:	01 c0       	rjmp	.+2      	; 0x936 <_Z12printDataLCDv+0x6c>
     934:	8c 2f       	mov	r24, r28
     936:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <error_byte_old>
			
			lcd.setCursor(7,0);
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	67 e0       	ldi	r22, 0x07	; 7
     93e:	88 ee       	ldi	r24, 0xE8	; 232
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_ZN17LiquidCrystal_I2C9setCursorEhh>
     946:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <error_counter>
     94a:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <error_counter+0x1>
			if (error_byte || error_counter) {	
     94e:	c1 11       	cpse	r28, r1
     950:	02 c0       	rjmp	.+4      	; 0x956 <_Z12printDataLCDv+0x8c>
     952:	00 97       	sbiw	r24, 0x00	; 0
     954:	d1 f0       	breq	.+52     	; 0x98a <_Z12printDataLCDv+0xc0>
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     956:	8b 30       	cpi	r24, 0x0B	; 11
     958:	91 05       	cpc	r25, r1
     95a:	14 f4       	brge	.+4      	; 0x960 <_Z12printDataLCDv+0x96>
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	02 c0       	rjmp	.+4      	; 0x964 <_Z12printDataLCDv+0x9a>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <error_counter+0x1>
     968:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <error_counter>
				lcd.print("ERROR:");
     96c:	66 e9       	ldi	r22, 0x96	; 150
     96e:	72 e0       	ldi	r23, 0x02	; 2
     970:	88 ee       	ldi	r24, 0xE8	; 232
     972:	92 e0       	ldi	r25, 0x02	; 2
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
     974:	05 d5       	rcall	.+2570   	; 0x1380 <_ZN5Print5printEPKc>
     976:	4a e0       	ldi	r20, 0x0A	; 10
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <error_byte_old>
     97e:	88 ee       	ldi	r24, 0xE8	; 232
     980:	92 e0       	ldi	r25, 0x02	; 2
				lcd.print("   ");
     982:	6c d5       	rcall	.+2776   	; 0x145c <_ZN5Print5printEhi>
     984:	64 ea       	ldi	r22, 0xA4	; 164
     986:	72 e0       	ldi	r23, 0x02	; 2
			} else {
				lcd.print("          ");
     988:	02 c0       	rjmp	.+4      	; 0x98e <_Z12printDataLCDv+0xc4>
     98a:	6d e9       	ldi	r22, 0x9D	; 157
     98c:	72 e0       	ldi	r23, 0x02	; 2
     98e:	88 ee       	ldi	r24, 0xE8	; 232
     990:	92 e0       	ldi	r25, 0x02	; 2
			}
			
			if (msgLength > 2) {
     992:	f6 d4       	rcall	.+2540   	; 0x1380 <_ZN5Print5printEPKc>
     994:	d3 30       	cpi	r29, 0x03	; 3
     996:	08 f4       	brcc	.+2      	; 0x99a <_Z12printDataLCDv+0xd0>
				position = Serial1.read();
     998:	ae c0       	rjmp	.+348    	; 0xaf6 <_Z12printDataLCDv+0x22c>
     99a:	80 ea       	ldi	r24, 0xA0	; 160
     99c:	93 e0       	ldi	r25, 0x03	; 3
     99e:	26 d2       	rcall	.+1100   	; 0xdec <_ZN14HardwareSerial4readEv>
     9a0:	ec 01       	movw	r28, r24
				position = (Serial1.read() * 255) + position;
     9a2:	80 ea       	ldi	r24, 0xA0	; 160
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	22 d2       	rcall	.+1092   	; 0xdec <_ZN14HardwareSerial4readEv>
     9a8:	2f ef       	ldi	r18, 0xFF	; 255
     9aa:	ac 01       	movw	r20, r24
     9ac:	24 9f       	mul	r18, r20
     9ae:	c0 01       	movw	r24, r0
     9b0:	25 9f       	mul	r18, r21
     9b2:	90 0d       	add	r25, r0
     9b4:	11 24       	eor	r1, r1
     9b6:	6c 01       	movw	r12, r24
     9b8:	cc 0e       	add	r12, r28
     9ba:	dd 1e       	adc	r13, r29
     9bc:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <position_old>
				rotations = position_old > position ? rotations + 1 : rotations;
     9c0:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <position_old+0x1>
     9c4:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <rotations>
     9c8:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <rotations+0x1>
     9cc:	c2 16       	cp	r12, r18
     9ce:	d3 06       	cpc	r13, r19
     9d0:	0c f4       	brge	.+2      	; 0x9d4 <_Z12printDataLCDv+0x10a>
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <rotations+0x1>
     9d8:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <rotations>
				position_old = position;
     9dc:	d0 92 fe 02 	sts	0x02FE, r13	; 0x8002fe <position_old+0x1>
     9e0:	c0 92 fd 02 	sts	0x02FD, r12	; 0x8002fd <position_old>
				
				//Serial.println(position);
				speed = Serial1.read();
     9e4:	80 ea       	ldi	r24, 0xA0	; 160
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	01 d2       	rcall	.+1026   	; 0xdec <_ZN14HardwareSerial4readEv>
     9ea:	8c 01       	movw	r16, r24
				speed = (Serial1.read() * 255) + speed;
     9ec:	80 ea       	ldi	r24, 0xA0	; 160
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	fd d1       	rcall	.+1018   	; 0xdec <_ZN14HardwareSerial4readEv>
     9f2:	df ef       	ldi	r29, 0xFF	; 255
     9f4:	9c 01       	movw	r18, r24
     9f6:	d2 9f       	mul	r29, r18
     9f8:	c0 01       	movw	r24, r0
     9fa:	d3 9f       	mul	r29, r19
     9fc:	90 0d       	add	r25, r0
     9fe:	11 24       	eor	r1, r1
     a00:	08 0f       	add	r16, r24
				//Serial.println(speed);
				load = Serial1.read();
     a02:	19 1f       	adc	r17, r25
     a04:	80 ea       	ldi	r24, 0xA0	; 160
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	f1 d1       	rcall	.+994    	; 0xdec <_ZN14HardwareSerial4readEv>
				load = (Serial1.read() * 255) + load;
     a0a:	5c 01       	movw	r10, r24
     a0c:	80 ea       	ldi	r24, 0xA0	; 160
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	ed d1       	rcall	.+986    	; 0xdec <_ZN14HardwareSerial4readEv>
     a12:	ac 01       	movw	r20, r24
     a14:	d4 9f       	mul	r29, r20
     a16:	c0 01       	movw	r24, r0
     a18:	d5 9f       	mul	r29, r21
     a1a:	90 0d       	add	r25, r0
     a1c:	11 24       	eor	r1, r1
				voltage = Serial1.read();
     a1e:	ec 01       	movw	r28, r24
     a20:	ca 0d       	add	r28, r10
     a22:	db 1d       	adc	r29, r11
				temperature = Serial1.read();
     a24:	80 ea       	ldi	r24, 0xA0	; 160
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	e1 d1       	rcall	.+962    	; 0xdec <_ZN14HardwareSerial4readEv>
				registered = Serial1.read();
     a2a:	80 ea       	ldi	r24, 0xA0	; 160
     a2c:	93 e0       	ldi	r25, 0x03	; 3
     a2e:	de d1       	rcall	.+956    	; 0xdec <_ZN14HardwareSerial4readEv>
				moving = Serial1.read();
     a30:	80 ea       	ldi	r24, 0xA0	; 160
     a32:	93 e0       	ldi	r25, 0x03	; 3
     a34:	db d1       	rcall	.+950    	; 0xdec <_ZN14HardwareSerial4readEv>
     a36:	80 ea       	ldi	r24, 0xA0	; 160
				lock = Serial1.read();
     a38:	93 e0       	ldi	r25, 0x03	; 3
     a3a:	d8 d1       	rcall	.+944    	; 0xdec <_ZN14HardwareSerial4readEv>
     a3c:	80 ea       	ldi	r24, 0xA0	; 160
     a3e:	93 e0       	ldi	r25, 0x03	; 3
				punch = Serial1.read();		
     a40:	d5 d1       	rcall	.+938    	; 0xdec <_ZN14HardwareSerial4readEv>
     a42:	80 ea       	ldi	r24, 0xA0	; 160
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	d2 d1       	rcall	.+932    	; 0xdec <_ZN14HardwareSerial4readEv>
				punch = (Serial1.read() * 255) + punch;
     a48:	80 ea       	ldi	r24, 0xA0	; 160
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	cf d1       	rcall	.+926    	; 0xdec <_ZN14HardwareSerial4readEv>
     a4e:	80 ea       	ldi	r24, 0xA0	; 160
				current = Serial1.read();
     a50:	93 e0       	ldi	r25, 0x03	; 3
     a52:	cc d1       	rcall	.+920    	; 0xdec <_ZN14HardwareSerial4readEv>
     a54:	80 ea       	ldi	r24, 0xA0	; 160
     a56:	93 e0       	ldi	r25, 0x03	; 3
				current = (Serial1.read() * 255) + current;
     a58:	c9 d1       	rcall	.+914    	; 0xdec <_ZN14HardwareSerial4readEv>
     a5a:	01 15       	cp	r16, r1
     a5c:	54 e0       	ldi	r21, 0x04	; 4
				//Serial.println(load);
				if (speed > 0x3FF) {
     a5e:	15 07       	cpc	r17, r21
     a60:	24 f0       	brlt	.+8      	; 0xa6a <_Z12printDataLCDv+0x1a0>
     a62:	14 50       	subi	r17, 0x04	; 4
					speedDirection = CW;
					speed = speed - 0x400;
     a64:	aa 24       	eor	r10, r10
				punch = (Serial1.read() * 255) + punch;
				current = Serial1.read();
				current = (Serial1.read() * 255) + current;
				//Serial.println(load);
				if (speed > 0x3FF) {
					speedDirection = CW;
     a66:	a3 94       	inc	r10
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <_Z12printDataLCDv+0x1a2>
     a6a:	a1 2c       	mov	r10, r1
					speed = speed - 0x400;
					} else {
					speedDirection = CCW;
				}
				if (load > 0x3FF) {
     a6c:	c1 15       	cp	r28, r1
     a6e:	84 e0       	ldi	r24, 0x04	; 4
     a70:	d8 07       	cpc	r29, r24
					loadDirection = CW;
					load = load - 0x400;
     a72:	24 f0       	brlt	.+8      	; 0xa7c <_Z12printDataLCDv+0x1b2>
					speed = speed - 0x400;
					} else {
					speedDirection = CCW;
				}
				if (load > 0x3FF) {
					loadDirection = CW;
     a74:	d4 50       	subi	r29, 0x04	; 4
     a76:	bb 24       	eor	r11, r11
					load = load - 0x400;
					} else {
					loadDirection = CCW;
     a78:	b3 94       	inc	r11

				//Serial.println("================");
				//lcd.clear();
				//char buffer[16];
				//sprintf(buffer, "Servo ID: %d", servoID);
				printLCD(LCD_COL1, 0, servoID, 1);
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <_Z12printDataLCDv+0x1b4>
     a7c:	b1 2c       	mov	r11, r1
     a7e:	a7 01       	movw	r20, r14
     a80:	55 27       	eor	r21, r21
     a82:	21 e0       	ldi	r18, 0x01	; 1
     a84:	60 e0       	ldi	r22, 0x00	; 0
				printLCD(LCD_COL1, 1, position * MX_PRESENT_POSITION_DEGREE, 3);
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	ff db       	rcall	.-2050   	; 0x288 <_Z8printLCDhhih>
     a8a:	b6 01       	movw	r22, r12
     a8c:	dd 0c       	add	r13, r13
     a8e:	88 0b       	sbc	r24, r24
     a90:	99 0b       	sbc	r25, r25
     a92:	a3 d0       	rcall	.+326    	; 0xbda <__floatsisf>
     a94:	28 e5       	ldi	r18, 0x58	; 88
     a96:	39 e3       	ldi	r19, 0x39	; 57
     a98:	44 eb       	ldi	r20, 0xB4	; 180
     a9a:	5d e3       	ldi	r21, 0x3D	; 61
     a9c:	02 d1       	rcall	.+516    	; 0xca2 <__mulsf3>
     a9e:	6a d0       	rcall	.+212    	; 0xb74 <__fixsfsi>
     aa0:	23 e0       	ldi	r18, 0x03	; 3
     aa2:	ab 01       	movw	r20, r22
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	84 e0       	ldi	r24, 0x04	; 4
				lcd.print((char)CH_DEG);
     aa8:	ef db       	rcall	.-2082   	; 0x288 <_Z8printLCDhhih>
     aaa:	6f ed       	ldi	r22, 0xDF	; 223
     aac:	88 ee       	ldi	r24, 0xE8	; 232
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	68 d4       	rcall	.+2256   	; 0x1382 <_ZN5Print5printEc>
				printLCD(LCD_COL2, 1, currPos, 4);
     ab2:	40 91 f9 02 	lds	r20, 0x02F9	; 0x8002f9 <currPos>
     ab6:	50 91 fa 02 	lds	r21, 0x02FA	; 0x8002fa <currPos+0x1>
     aba:	24 e0       	ldi	r18, 0x04	; 4
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	8a e0       	ldi	r24, 0x0A	; 10
				// 			lcd.setCursor(LCD_COL2 ,1);
				// 			lcd.print((int)(currPos));
				//lcd.setCursor(10,1);
				//lcd.print(rotations);
				printLCD(LCD_COL1, 2, speed, 3);
     ac0:	e3 db       	rcall	.-2106   	; 0x288 <_Z8printLCDhhih>
     ac2:	23 e0       	ldi	r18, 0x03	; 3
     ac4:	a8 01       	movw	r20, r16
     ac6:	62 e0       	ldi	r22, 0x02	; 2
     ac8:	84 e0       	ldi	r24, 0x04	; 4
				lcd.print(speedDirection ? (char)CH_ARR : (char)CH_ARL);
     aca:	de db       	rcall	.-2116   	; 0x288 <_Z8printLCDhhih>
     acc:	a1 10       	cpse	r10, r1
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <_Z12printDataLCDv+0x20a>
     ad0:	6f e7       	ldi	r22, 0x7F	; 127
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <_Z12printDataLCDv+0x20c>
     ad4:	6e e7       	ldi	r22, 0x7E	; 126
     ad6:	88 ee       	ldi	r24, 0xE8	; 232
     ad8:	92 e0       	ldi	r25, 0x02	; 2
				printLCD(LCD_COL1, 3, load, 3);
     ada:	53 d4       	rcall	.+2214   	; 0x1382 <_ZN5Print5printEc>
     adc:	23 e0       	ldi	r18, 0x03	; 3
     ade:	ae 01       	movw	r20, r28
     ae0:	63 e0       	ldi	r22, 0x03	; 3
     ae2:	84 e0       	ldi	r24, 0x04	; 4
     ae4:	d1 db       	rcall	.-2142   	; 0x288 <_Z8printLCDhhih>
				//lcd.setCursor(LCD_COL1, 3);
				//lcd.print(load);
				lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
     ae6:	b1 10       	cpse	r11, r1
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <_Z12printDataLCDv+0x224>
     aea:	6f e7       	ldi	r22, 0x7F	; 127
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <_Z12printDataLCDv+0x226>
     aee:	6e e7       	ldi	r22, 0x7E	; 126
     af0:	88 ee       	ldi	r24, 0xE8	; 232
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	46 d4       	rcall	.+2188   	; 0x1382 <_ZN5Print5printEc>
     af6:	80 ea       	ldi	r24, 0xA0	; 160
				//printLCD3(LCD_COL2, 3, (45*(current-2048)));
			}
			while(Serial1.available() > 0) {
     af8:	93 e0       	ldi	r25, 0x03	; 3
     afa:	5e d1       	rcall	.+700    	; 0xdb8 <_ZN14HardwareSerial9availableEv>
     afc:	18 16       	cp	r1, r24
     afe:	19 06       	cpc	r1, r25
     b00:	24 f4       	brge	.+8      	; 0xb0a <_Z12printDataLCDv+0x240>
     b02:	80 ea       	ldi	r24, 0xA0	; 160
     b04:	93 e0       	ldi	r25, 0x03	; 3
				//Serial.println(Serial1.read());
				Serial1.read();
     b06:	72 d1       	rcall	.+740    	; 0xdec <_ZN14HardwareSerial4readEv>
     b08:	f6 cf       	rjmp	.-20     	; 0xaf6 <_Z12printDataLCDv+0x22c>
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	70 e0       	ldi	r23, 0x00	; 0
			}
			
			delay(1);
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	80 d5       	rcall	.+2816   	; 0x1614 <delay>
     b14:	40 91 f4 02 	lds	r20, 0x02F4	; 0x8002f4 <cycle_counter>
     b18:	50 91 f5 02 	lds	r21, 0x02F5	; 0x8002f5 <cycle_counter+0x1>
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
     b1c:	40 31       	cpi	r20, 0x10	; 16
     b1e:	27 e2       	ldi	r18, 0x27	; 39
     b20:	52 07       	cpc	r21, r18
     b22:	1c f4       	brge	.+6      	; 0xb2a <_Z12printDataLCDv+0x260>
     b24:	4f 5f       	subi	r20, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <_Z12printDataLCDv+0x264>
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	50 93 f5 02 	sts	0x02F5, r21	; 0x8002f5 <cycle_counter+0x1>
     b32:	40 93 f4 02 	sts	0x02F4, r20	; 0x8002f4 <cycle_counter>
     b36:	24 e0       	ldi	r18, 0x04	; 4
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	80 e1       	ldi	r24, 0x10	; 16
			printLCD(16, 0, cycle_counter, 4);
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
		}
	}
}
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	cf 90       	pop	r12
     b4c:	bf 90       	pop	r11
     b4e:	af 90       	pop	r10
     b50:	9b cb       	rjmp	.-2250   	; 0x288 <_Z8printLCDhhih>
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
				Serial1.read();
			}
			
			delay(1);
			cycle_counter = cycle_counter > 9999 ? 0 : cycle_counter + 1;
			printLCD(16, 0, cycle_counter, 4);
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
		}
	}
}
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	bf 90       	pop	r11
     b64:	af 90       	pop	r10
     b66:	08 95       	ret

00000b68 <loop>:
     b68:	42 e2       	ldi	r20, 0x22	; 34
     b6a:	64 e2       	ldi	r22, 0x24	; 36
     b6c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <id>
/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {

	readServo(id, 0x24, 34);
     b70:	bf dd       	rcall	.-1154   	; 0x6f0 <_Z9readServohhh>
	printDataLCD();
     b72:	ab ce       	rjmp	.-682    	; 0x8ca <_Z12printDataLCDv>

00000b74 <__fixsfsi>:
     b74:	04 d0       	rcall	.+8      	; 0xb7e <__fixunssfsi>
     b76:	68 94       	set
     b78:	b1 11       	cpse	r27, r1
     b7a:	8d c0       	rjmp	.+282    	; 0xc96 <__fp_szero>
     b7c:	08 95       	ret

00000b7e <__fixunssfsi>:
     b7e:	70 d0       	rcall	.+224    	; 0xc60 <__fp_splitA>
     b80:	88 f0       	brcs	.+34     	; 0xba4 <__fixunssfsi+0x26>
     b82:	9f 57       	subi	r25, 0x7F	; 127
     b84:	90 f0       	brcs	.+36     	; 0xbaa <__fixunssfsi+0x2c>
     b86:	b9 2f       	mov	r27, r25
     b88:	99 27       	eor	r25, r25
     b8a:	b7 51       	subi	r27, 0x17	; 23
     b8c:	a0 f0       	brcs	.+40     	; 0xbb6 <__fixunssfsi+0x38>
     b8e:	d1 f0       	breq	.+52     	; 0xbc4 <__fixunssfsi+0x46>
     b90:	66 0f       	add	r22, r22
     b92:	77 1f       	adc	r23, r23
     b94:	88 1f       	adc	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	1a f0       	brmi	.+6      	; 0xba0 <__fixunssfsi+0x22>
     b9a:	ba 95       	dec	r27
     b9c:	c9 f7       	brne	.-14     	; 0xb90 <__fixunssfsi+0x12>
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__fixunssfsi+0x46>
     ba0:	b1 30       	cpi	r27, 0x01	; 1
     ba2:	81 f0       	breq	.+32     	; 0xbc4 <__fixunssfsi+0x46>
     ba4:	77 d0       	rcall	.+238    	; 0xc94 <__fp_zero>
     ba6:	b1 e0       	ldi	r27, 0x01	; 1
     ba8:	08 95       	ret
     baa:	74 c0       	rjmp	.+232    	; 0xc94 <__fp_zero>
     bac:	67 2f       	mov	r22, r23
     bae:	78 2f       	mov	r23, r24
     bb0:	88 27       	eor	r24, r24
     bb2:	b8 5f       	subi	r27, 0xF8	; 248
     bb4:	39 f0       	breq	.+14     	; 0xbc4 <__fixunssfsi+0x46>
     bb6:	b9 3f       	cpi	r27, 0xF9	; 249
     bb8:	cc f3       	brlt	.-14     	; 0xbac <__fixunssfsi+0x2e>
     bba:	86 95       	lsr	r24
     bbc:	77 95       	ror	r23
     bbe:	67 95       	ror	r22
     bc0:	b3 95       	inc	r27
     bc2:	d9 f7       	brne	.-10     	; 0xbba <__fixunssfsi+0x3c>
     bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__fixunssfsi+0x56>
     bc6:	90 95       	com	r25
     bc8:	80 95       	com	r24
     bca:	70 95       	com	r23
     bcc:	61 95       	neg	r22
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	8f 4f       	sbci	r24, 0xFF	; 255
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	08 95       	ret

00000bd6 <__floatunsisf>:
     bd6:	e8 94       	clt
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <__floatsisf+0x12>

00000bda <__floatsisf>:
     bda:	97 fb       	bst	r25, 7
     bdc:	3e f4       	brtc	.+14     	; 0xbec <__floatsisf+0x12>
     bde:	90 95       	com	r25
     be0:	80 95       	com	r24
     be2:	70 95       	com	r23
     be4:	61 95       	neg	r22
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	8f 4f       	sbci	r24, 0xFF	; 255
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	99 23       	and	r25, r25
     bee:	a9 f0       	breq	.+42     	; 0xc1a <__floatsisf+0x40>
     bf0:	f9 2f       	mov	r31, r25
     bf2:	96 e9       	ldi	r25, 0x96	; 150
     bf4:	bb 27       	eor	r27, r27
     bf6:	93 95       	inc	r25
     bf8:	f6 95       	lsr	r31
     bfa:	87 95       	ror	r24
     bfc:	77 95       	ror	r23
     bfe:	67 95       	ror	r22
     c00:	b7 95       	ror	r27
     c02:	f1 11       	cpse	r31, r1
     c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <__floatsisf+0x1c>
     c06:	fa f4       	brpl	.+62     	; 0xc46 <__floatsisf+0x6c>
     c08:	bb 0f       	add	r27, r27
     c0a:	11 f4       	brne	.+4      	; 0xc10 <__floatsisf+0x36>
     c0c:	60 ff       	sbrs	r22, 0
     c0e:	1b c0       	rjmp	.+54     	; 0xc46 <__floatsisf+0x6c>
     c10:	6f 5f       	subi	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	16 c0       	rjmp	.+44     	; 0xc46 <__floatsisf+0x6c>
     c1a:	88 23       	and	r24, r24
     c1c:	11 f0       	breq	.+4      	; 0xc22 <__floatsisf+0x48>
     c1e:	96 e9       	ldi	r25, 0x96	; 150
     c20:	11 c0       	rjmp	.+34     	; 0xc44 <__floatsisf+0x6a>
     c22:	77 23       	and	r23, r23
     c24:	21 f0       	breq	.+8      	; 0xc2e <__floatsisf+0x54>
     c26:	9e e8       	ldi	r25, 0x8E	; 142
     c28:	87 2f       	mov	r24, r23
     c2a:	76 2f       	mov	r23, r22
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__floatsisf+0x5e>
     c2e:	66 23       	and	r22, r22
     c30:	71 f0       	breq	.+28     	; 0xc4e <__floatsisf+0x74>
     c32:	96 e8       	ldi	r25, 0x86	; 134
     c34:	86 2f       	mov	r24, r22
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	2a f0       	brmi	.+10     	; 0xc46 <__floatsisf+0x6c>
     c3c:	9a 95       	dec	r25
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	da f7       	brpl	.-10     	; 0xc3c <__floatsisf+0x62>
     c46:	88 0f       	add	r24, r24
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	97 f9       	bld	r25, 7
     c4e:	08 95       	ret

00000c50 <__fp_split3>:
     c50:	57 fd       	sbrc	r21, 7
     c52:	90 58       	subi	r25, 0x80	; 128
     c54:	44 0f       	add	r20, r20
     c56:	55 1f       	adc	r21, r21
     c58:	59 f0       	breq	.+22     	; 0xc70 <__fp_splitA+0x10>
     c5a:	5f 3f       	cpi	r21, 0xFF	; 255
     c5c:	71 f0       	breq	.+28     	; 0xc7a <__fp_splitA+0x1a>
     c5e:	47 95       	ror	r20

00000c60 <__fp_splitA>:
     c60:	88 0f       	add	r24, r24
     c62:	97 fb       	bst	r25, 7
     c64:	99 1f       	adc	r25, r25
     c66:	61 f0       	breq	.+24     	; 0xc80 <__fp_splitA+0x20>
     c68:	9f 3f       	cpi	r25, 0xFF	; 255
     c6a:	79 f0       	breq	.+30     	; 0xc8a <__fp_splitA+0x2a>
     c6c:	87 95       	ror	r24
     c6e:	08 95       	ret
     c70:	12 16       	cp	r1, r18
     c72:	13 06       	cpc	r1, r19
     c74:	14 06       	cpc	r1, r20
     c76:	55 1f       	adc	r21, r21
     c78:	f2 cf       	rjmp	.-28     	; 0xc5e <__fp_split3+0xe>
     c7a:	46 95       	lsr	r20
     c7c:	f1 df       	rcall	.-30     	; 0xc60 <__fp_splitA>
     c7e:	08 c0       	rjmp	.+16     	; 0xc90 <__fp_splitA+0x30>
     c80:	16 16       	cp	r1, r22
     c82:	17 06       	cpc	r1, r23
     c84:	18 06       	cpc	r1, r24
     c86:	99 1f       	adc	r25, r25
     c88:	f1 cf       	rjmp	.-30     	; 0xc6c <__fp_splitA+0xc>
     c8a:	86 95       	lsr	r24
     c8c:	71 05       	cpc	r23, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	08 94       	sec
     c92:	08 95       	ret

00000c94 <__fp_zero>:
     c94:	e8 94       	clt

00000c96 <__fp_szero>:
     c96:	bb 27       	eor	r27, r27
     c98:	66 27       	eor	r22, r22
     c9a:	77 27       	eor	r23, r23
     c9c:	cb 01       	movw	r24, r22
     c9e:	97 f9       	bld	r25, 7
     ca0:	08 95       	ret

00000ca2 <__mulsf3>:
     ca2:	0b d0       	rcall	.+22     	; 0xcba <__mulsf3x>
     ca4:	78 c0       	rjmp	.+240    	; 0xd96 <__fp_round>
     ca6:	69 d0       	rcall	.+210    	; 0xd7a <__fp_pscA>
     ca8:	28 f0       	brcs	.+10     	; 0xcb4 <__mulsf3+0x12>
     caa:	6e d0       	rcall	.+220    	; 0xd88 <__fp_pscB>
     cac:	18 f0       	brcs	.+6      	; 0xcb4 <__mulsf3+0x12>
     cae:	95 23       	and	r25, r21
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__mulsf3+0x12>
     cb2:	5a c0       	rjmp	.+180    	; 0xd68 <__fp_inf>
     cb4:	5f c0       	rjmp	.+190    	; 0xd74 <__fp_nan>
     cb6:	11 24       	eor	r1, r1
     cb8:	ee cf       	rjmp	.-36     	; 0xc96 <__fp_szero>

00000cba <__mulsf3x>:
     cba:	ca df       	rcall	.-108    	; 0xc50 <__fp_split3>
     cbc:	a0 f3       	brcs	.-24     	; 0xca6 <__mulsf3+0x4>

00000cbe <__mulsf3_pse>:
     cbe:	95 9f       	mul	r25, r21
     cc0:	d1 f3       	breq	.-12     	; 0xcb6 <__mulsf3+0x14>
     cc2:	95 0f       	add	r25, r21
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	55 1f       	adc	r21, r21
     cc8:	62 9f       	mul	r22, r18
     cca:	f0 01       	movw	r30, r0
     ccc:	72 9f       	mul	r23, r18
     cce:	bb 27       	eor	r27, r27
     cd0:	f0 0d       	add	r31, r0
     cd2:	b1 1d       	adc	r27, r1
     cd4:	63 9f       	mul	r22, r19
     cd6:	aa 27       	eor	r26, r26
     cd8:	f0 0d       	add	r31, r0
     cda:	b1 1d       	adc	r27, r1
     cdc:	aa 1f       	adc	r26, r26
     cde:	64 9f       	mul	r22, r20
     ce0:	66 27       	eor	r22, r22
     ce2:	b0 0d       	add	r27, r0
     ce4:	a1 1d       	adc	r26, r1
     ce6:	66 1f       	adc	r22, r22
     ce8:	82 9f       	mul	r24, r18
     cea:	22 27       	eor	r18, r18
     cec:	b0 0d       	add	r27, r0
     cee:	a1 1d       	adc	r26, r1
     cf0:	62 1f       	adc	r22, r18
     cf2:	73 9f       	mul	r23, r19
     cf4:	b0 0d       	add	r27, r0
     cf6:	a1 1d       	adc	r26, r1
     cf8:	62 1f       	adc	r22, r18
     cfa:	83 9f       	mul	r24, r19
     cfc:	a0 0d       	add	r26, r0
     cfe:	61 1d       	adc	r22, r1
     d00:	22 1f       	adc	r18, r18
     d02:	74 9f       	mul	r23, r20
     d04:	33 27       	eor	r19, r19
     d06:	a0 0d       	add	r26, r0
     d08:	61 1d       	adc	r22, r1
     d0a:	23 1f       	adc	r18, r19
     d0c:	84 9f       	mul	r24, r20
     d0e:	60 0d       	add	r22, r0
     d10:	21 1d       	adc	r18, r1
     d12:	82 2f       	mov	r24, r18
     d14:	76 2f       	mov	r23, r22
     d16:	6a 2f       	mov	r22, r26
     d18:	11 24       	eor	r1, r1
     d1a:	9f 57       	subi	r25, 0x7F	; 127
     d1c:	50 40       	sbci	r21, 0x00	; 0
     d1e:	8a f0       	brmi	.+34     	; 0xd42 <__mulsf3_pse+0x84>
     d20:	e1 f0       	breq	.+56     	; 0xd5a <__mulsf3_pse+0x9c>
     d22:	88 23       	and	r24, r24
     d24:	4a f0       	brmi	.+18     	; 0xd38 <__mulsf3_pse+0x7a>
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	bb 1f       	adc	r27, r27
     d2c:	66 1f       	adc	r22, r22
     d2e:	77 1f       	adc	r23, r23
     d30:	88 1f       	adc	r24, r24
     d32:	91 50       	subi	r25, 0x01	; 1
     d34:	50 40       	sbci	r21, 0x00	; 0
     d36:	a9 f7       	brne	.-22     	; 0xd22 <__mulsf3_pse+0x64>
     d38:	9e 3f       	cpi	r25, 0xFE	; 254
     d3a:	51 05       	cpc	r21, r1
     d3c:	70 f0       	brcs	.+28     	; 0xd5a <__mulsf3_pse+0x9c>
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <__fp_inf>
     d40:	aa cf       	rjmp	.-172    	; 0xc96 <__fp_szero>
     d42:	5f 3f       	cpi	r21, 0xFF	; 255
     d44:	ec f3       	brlt	.-6      	; 0xd40 <__mulsf3_pse+0x82>
     d46:	98 3e       	cpi	r25, 0xE8	; 232
     d48:	dc f3       	brlt	.-10     	; 0xd40 <__mulsf3_pse+0x82>
     d4a:	86 95       	lsr	r24
     d4c:	77 95       	ror	r23
     d4e:	67 95       	ror	r22
     d50:	b7 95       	ror	r27
     d52:	f7 95       	ror	r31
     d54:	e7 95       	ror	r30
     d56:	9f 5f       	subi	r25, 0xFF	; 255
     d58:	c1 f7       	brne	.-16     	; 0xd4a <__mulsf3_pse+0x8c>
     d5a:	fe 2b       	or	r31, r30
     d5c:	88 0f       	add	r24, r24
     d5e:	91 1d       	adc	r25, r1
     d60:	96 95       	lsr	r25
     d62:	87 95       	ror	r24
     d64:	97 f9       	bld	r25, 7
     d66:	08 95       	ret

00000d68 <__fp_inf>:
     d68:	97 f9       	bld	r25, 7
     d6a:	9f 67       	ori	r25, 0x7F	; 127
     d6c:	80 e8       	ldi	r24, 0x80	; 128
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	08 95       	ret

00000d74 <__fp_nan>:
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	80 ec       	ldi	r24, 0xC0	; 192
     d78:	08 95       	ret

00000d7a <__fp_pscA>:
     d7a:	00 24       	eor	r0, r0
     d7c:	0a 94       	dec	r0
     d7e:	16 16       	cp	r1, r22
     d80:	17 06       	cpc	r1, r23
     d82:	18 06       	cpc	r1, r24
     d84:	09 06       	cpc	r0, r25
     d86:	08 95       	ret

00000d88 <__fp_pscB>:
     d88:	00 24       	eor	r0, r0
     d8a:	0a 94       	dec	r0
     d8c:	12 16       	cp	r1, r18
     d8e:	13 06       	cpc	r1, r19
     d90:	14 06       	cpc	r1, r20
     d92:	05 06       	cpc	r0, r21
     d94:	08 95       	ret

00000d96 <__fp_round>:
     d96:	09 2e       	mov	r0, r25
     d98:	03 94       	inc	r0
     d9a:	00 0c       	add	r0, r0
     d9c:	11 f4       	brne	.+4      	; 0xda2 <__fp_round+0xc>
     d9e:	88 23       	and	r24, r24
     da0:	52 f0       	brmi	.+20     	; 0xdb6 <__fp_round+0x20>
     da2:	bb 0f       	add	r27, r27
     da4:	40 f4       	brcc	.+16     	; 0xdb6 <__fp_round+0x20>
     da6:	bf 2b       	or	r27, r31
     da8:	11 f4       	brne	.+4      	; 0xdae <__fp_round+0x18>
     daa:	60 ff       	sbrs	r22, 0
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <__fp_round+0x20>
     dae:	6f 5f       	subi	r22, 0xFF	; 255
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	8f 4f       	sbci	r24, 0xFF	; 255
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	08 95       	ret

00000db8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     db8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     dba:	91 8d       	ldd	r25, Z+25	; 0x19
     dbc:	22 8d       	ldd	r18, Z+26	; 0x1a
     dbe:	89 2f       	mov	r24, r25
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	80 5c       	subi	r24, 0xC0	; 192
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	82 1b       	sub	r24, r18
     dc8:	91 09       	sbc	r25, r1
}
     dca:	8f 73       	andi	r24, 0x3F	; 63
     dcc:	99 27       	eor	r25, r25
     dce:	08 95       	ret

00000dd0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     dd0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     dd2:	91 8d       	ldd	r25, Z+25	; 0x19
     dd4:	82 8d       	ldd	r24, Z+26	; 0x1a
     dd6:	98 17       	cp	r25, r24
     dd8:	31 f0       	breq	.+12     	; 0xde6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     dda:	82 8d       	ldd	r24, Z+26	; 0x1a
     ddc:	e8 0f       	add	r30, r24
     dde:	f1 1d       	adc	r31, r1
     de0:	85 8d       	ldd	r24, Z+29	; 0x1d
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     dea:	08 95       	ret

00000dec <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     dec:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     dee:	91 8d       	ldd	r25, Z+25	; 0x19
     df0:	82 8d       	ldd	r24, Z+26	; 0x1a
     df2:	98 17       	cp	r25, r24
     df4:	61 f0       	breq	.+24     	; 0xe0e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     df6:	82 8d       	ldd	r24, Z+26	; 0x1a
     df8:	df 01       	movw	r26, r30
     dfa:	a8 0f       	add	r26, r24
     dfc:	b1 1d       	adc	r27, r1
     dfe:	5d 96       	adiw	r26, 0x1d	; 29
     e00:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     e02:	92 8d       	ldd	r25, Z+26	; 0x1a
     e04:	9f 5f       	subi	r25, 0xFF	; 255
     e06:	9f 73       	andi	r25, 0x3F	; 63
     e08:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     e12:	08 95       	ret

00000e14 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     e14:	fc 01       	movw	r30, r24
     e16:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     e18:	44 8d       	ldd	r20, Z+28	; 0x1c
     e1a:	25 2f       	mov	r18, r21
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	84 2f       	mov	r24, r20
     e20:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     e22:	82 1b       	sub	r24, r18
     e24:	93 0b       	sbc	r25, r19
     e26:	54 17       	cp	r21, r20
     e28:	10 f0       	brcs	.+4      	; 0xe2e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     e2a:	cf 96       	adiw	r24, 0x3f	; 63
     e2c:	08 95       	ret
  return tail - head - 1;
     e2e:	01 97       	sbiw	r24, 0x01	; 1
}
     e30:	08 95       	ret

00000e32 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e32:	8b ea       	ldi	r24, 0xAB	; 171
     e34:	98 e0       	ldi	r25, 0x08	; 8
     e36:	89 2b       	or	r24, r25
     e38:	39 f0       	breq	.+14     	; 0xe48 <_Z14serialEventRunv+0x16>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	89 2b       	or	r24, r25
     e40:	19 f0       	breq	.+6      	; 0xe48 <_Z14serialEventRunv+0x16>
     e42:	89 d1       	rcall	.+786    	; 0x1156 <_Z17Serial0_availablev>
     e44:	81 11       	cpse	r24, r1
     e46:	24 c0       	rjmp	.+72     	; 0xe90 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     e48:	80 e4       	ldi	r24, 0x40	; 64
     e4a:	99 e0       	ldi	r25, 0x09	; 9
     e4c:	89 2b       	or	r24, r25
     e4e:	39 f0       	breq	.+14     	; 0xe5e <_Z14serialEventRunv+0x2c>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	89 2b       	or	r24, r25
     e56:	19 f0       	breq	.+6      	; 0xe5e <_Z14serialEventRunv+0x2c>
     e58:	13 d2       	rcall	.+1062   	; 0x1280 <_Z17Serial1_availablev>
     e5a:	81 11       	cpse	r24, r1
     e5c:	1c c0       	rjmp	.+56     	; 0xe96 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	89 2b       	or	r24, r25
     e64:	41 f0       	breq	.+16     	; 0xe76 <_Z14serialEventRunv+0x44>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	89 2b       	or	r24, r25
     e6c:	21 f0       	breq	.+8      	; 0xe76 <_Z14serialEventRunv+0x44>
     e6e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e72:	81 11       	cpse	r24, r1
     e74:	13 c0       	rjmp	.+38     	; 0xe9c <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	89 2b       	or	r24, r25
     e7c:	a1 f0       	breq	.+40     	; 0xea6 <_Z14serialEventRunv+0x74>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	89 2b       	or	r24, r25
     e84:	81 f0       	breq	.+32     	; 0xea6 <_Z14serialEventRunv+0x74>
     e86:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e8a:	81 11       	cpse	r24, r1
     e8c:	0a c0       	rjmp	.+20     	; 0xea2 <_Z14serialEventRunv+0x70>
     e8e:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e90:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e94:	d9 cf       	rjmp	.-78     	; 0xe48 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     e96:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e9a:	e1 cf       	rjmp	.-62     	; 0xe5e <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     e9c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ea0:	ea cf       	rjmp	.-44     	; 0xe76 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     ea2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     ea6:	08 95       	ret

00000ea8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     ea8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     eaa:	84 8d       	ldd	r24, Z+28	; 0x1c
     eac:	df 01       	movw	r26, r30
     eae:	a8 0f       	add	r26, r24
     eb0:	b1 1d       	adc	r27, r1
     eb2:	a3 5a       	subi	r26, 0xA3	; 163
     eb4:	bf 4f       	sbci	r27, 0xFF	; 255
     eb6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     eb8:	84 8d       	ldd	r24, Z+28	; 0x1c
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	8f 73       	andi	r24, 0x3F	; 63
     ec0:	99 27       	eor	r25, r25
     ec2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     ec4:	a6 89       	ldd	r26, Z+22	; 0x16
     ec6:	b7 89       	ldd	r27, Z+23	; 0x17
     ec8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     eca:	a0 89       	ldd	r26, Z+16	; 0x10
     ecc:	b1 89       	ldd	r27, Z+17	; 0x11
     ece:	8c 91       	ld	r24, X
     ed0:	83 70       	andi	r24, 0x03	; 3
     ed2:	80 64       	ori	r24, 0x40	; 64
     ed4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     ed6:	93 8d       	ldd	r25, Z+27	; 0x1b
     ed8:	84 8d       	ldd	r24, Z+28	; 0x1c
     eda:	98 13       	cpse	r25, r24
     edc:	06 c0       	rjmp	.+12     	; 0xeea <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     ede:	02 88       	ldd	r0, Z+18	; 0x12
     ee0:	f3 89       	ldd	r31, Z+19	; 0x13
     ee2:	e0 2d       	mov	r30, r0
     ee4:	80 81       	ld	r24, Z
     ee6:	8f 7d       	andi	r24, 0xDF	; 223
     ee8:	80 83       	st	Z, r24
     eea:	08 95       	ret

00000eec <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	ec 01       	movw	r28, r24
  _written = true;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     efe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f00:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f02:	98 13       	cpse	r25, r24
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <_ZN14HardwareSerial5writeEh+0x24>
     f06:	e8 89       	ldd	r30, Y+16	; 0x10
     f08:	f9 89       	ldd	r31, Y+17	; 0x11
     f0a:	80 81       	ld	r24, Z
     f0c:	85 fd       	sbrc	r24, 5
     f0e:	25 c0       	rjmp	.+74     	; 0xf5a <_ZN14HardwareSerial5writeEh+0x6e>
     f10:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     f12:	0b 8d       	ldd	r16, Y+27	; 0x1b
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	0f 5f       	subi	r16, 0xFF	; 255
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	0f 73       	andi	r16, 0x3F	; 63
     f1c:	11 27       	eor	r17, r17
     f1e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     f20:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f22:	e8 12       	cpse	r14, r24
     f24:	0b c0       	rjmp	.+22     	; 0xf3c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	07 fc       	sbrc	r0, 7
     f2a:	fa cf       	rjmp	.-12     	; 0xf20 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     f2c:	e8 89       	ldd	r30, Y+16	; 0x10
     f2e:	f9 89       	ldd	r31, Y+17	; 0x11
     f30:	80 81       	ld	r24, Z
     f32:	85 ff       	sbrs	r24, 5
     f34:	f5 cf       	rjmp	.-22     	; 0xf20 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     f36:	ce 01       	movw	r24, r28
     f38:	b7 df       	rcall	.-146    	; 0xea8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f3a:	f2 cf       	rjmp	.-28     	; 0xf20 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3e:	fe 01       	movw	r30, r28
     f40:	e8 0f       	add	r30, r24
     f42:	f1 1d       	adc	r31, r1
     f44:	e3 5a       	subi	r30, 0xA3	; 163
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     f4a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f4c:	f8 94       	cli
    _tx_buffer_head = i;
     f4e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     f50:	ea 89       	ldd	r30, Y+18	; 0x12
     f52:	fb 89       	ldd	r31, Y+19	; 0x13
     f54:	80 81       	ld	r24, Z
     f56:	80 62       	ori	r24, 0x20	; 32
     f58:	0a c0       	rjmp	.+20     	; 0xf6e <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     f5a:	9f b7       	in	r25, 0x3f	; 63
     f5c:	f8 94       	cli
      *_udr = c;
     f5e:	ee 89       	ldd	r30, Y+22	; 0x16
     f60:	ff 89       	ldd	r31, Y+23	; 0x17
     f62:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     f64:	e8 89       	ldd	r30, Y+16	; 0x10
     f66:	f9 89       	ldd	r31, Y+17	; 0x11
     f68:	80 81       	ld	r24, Z
     f6a:	83 70       	andi	r24, 0x03	; 3
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f70:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	08 95       	ret

00000f84 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     f8a:	88 8d       	ldd	r24, Y+24	; 0x18
     f8c:	88 23       	and	r24, r24
     f8e:	c1 f0       	breq	.+48     	; 0xfc0 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     f90:	ea 89       	ldd	r30, Y+18	; 0x12
     f92:	fb 89       	ldd	r31, Y+19	; 0x13
     f94:	80 81       	ld	r24, Z
     f96:	85 fd       	sbrc	r24, 5
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <_ZN14HardwareSerial5flushEv+0x20>
     f9a:	a8 89       	ldd	r26, Y+16	; 0x10
     f9c:	b9 89       	ldd	r27, Y+17	; 0x11
     f9e:	8c 91       	ld	r24, X
     fa0:	86 fd       	sbrc	r24, 6
     fa2:	0e c0       	rjmp	.+28     	; 0xfc0 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	07 fc       	sbrc	r0, 7
     fa8:	f5 cf       	rjmp	.-22     	; 0xf94 <_ZN14HardwareSerial5flushEv+0x10>
     faa:	80 81       	ld	r24, Z
     fac:	85 ff       	sbrs	r24, 5
     fae:	f2 cf       	rjmp	.-28     	; 0xf94 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     fb0:	a8 89       	ldd	r26, Y+16	; 0x10
     fb2:	b9 89       	ldd	r27, Y+17	; 0x11
     fb4:	8c 91       	ld	r24, X
     fb6:	85 ff       	sbrs	r24, 5
     fb8:	ed cf       	rjmp	.-38     	; 0xf94 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     fba:	ce 01       	movw	r24, r28
     fbc:	75 df       	rcall	.-278    	; 0xea8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     fbe:	e8 cf       	rjmp	.-48     	; 0xf90 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
     fd6:	6a 01       	movw	r12, r20
     fd8:	7b 01       	movw	r14, r22
     fda:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     fdc:	e8 89       	ldd	r30, Y+16	; 0x10
     fde:	f9 89       	ldd	r31, Y+17	; 0x11
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     fe4:	41 15       	cp	r20, r1
     fe6:	51 4e       	sbci	r21, 0xE1	; 225
     fe8:	61 05       	cpc	r22, r1
     fea:	71 05       	cpc	r23, r1
     fec:	b1 f0       	breq	.+44     	; 0x101a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	79 e0       	ldi	r23, 0x09	; 9
     ff2:	8d e3       	ldi	r24, 0x3D	; 61
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a7 01       	movw	r20, r14
     ff8:	96 01       	movw	r18, r12
     ffa:	0e 94 41 10 	call	0x2082	; 0x2082 <__udivmodsi4>
     ffe:	da 01       	movw	r26, r20
    1000:	c9 01       	movw	r24, r18
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	a1 09       	sbc	r26, r1
    1006:	b1 09       	sbc	r27, r1
    1008:	b6 95       	lsr	r27
    100a:	a7 95       	ror	r26
    100c:	97 95       	ror	r25
    100e:	87 95       	ror	r24
    1010:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1012:	21 15       	cp	r18, r1
    1014:	80 e1       	ldi	r24, 0x10	; 16
    1016:	38 07       	cpc	r19, r24
    1018:	a8 f0       	brcs	.+42     	; 0x1044 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    101a:	e8 89       	ldd	r30, Y+16	; 0x10
    101c:	f9 89       	ldd	r31, Y+17	; 0x11
    101e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1020:	60 e8       	ldi	r22, 0x80	; 128
    1022:	74 e8       	ldi	r23, 0x84	; 132
    1024:	8e e1       	ldi	r24, 0x1E	; 30
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a7 01       	movw	r20, r14
    102a:	96 01       	movw	r18, r12
    102c:	0e 94 41 10 	call	0x2082	; 0x2082 <__udivmodsi4>
    1030:	da 01       	movw	r26, r20
    1032:	c9 01       	movw	r24, r18
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	a1 09       	sbc	r26, r1
    1038:	b1 09       	sbc	r27, r1
    103a:	b6 95       	lsr	r27
    103c:	a7 95       	ror	r26
    103e:	97 95       	ror	r25
    1040:	87 95       	ror	r24
    1042:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1044:	ec 85       	ldd	r30, Y+12	; 0x0c
    1046:	fd 85       	ldd	r31, Y+13	; 0x0d
    1048:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    104a:	ee 85       	ldd	r30, Y+14	; 0x0e
    104c:	ff 85       	ldd	r31, Y+15	; 0x0f
    104e:	20 83       	st	Z, r18

  _written = false;
    1050:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1052:	ec 89       	ldd	r30, Y+20	; 0x14
    1054:	fd 89       	ldd	r31, Y+21	; 0x15
    1056:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1058:	ea 89       	ldd	r30, Y+18	; 0x12
    105a:	fb 89       	ldd	r31, Y+19	; 0x13
    105c:	80 81       	ld	r24, Z
    105e:	80 61       	ori	r24, 0x10	; 16
    1060:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1062:	ea 89       	ldd	r30, Y+18	; 0x12
    1064:	fb 89       	ldd	r31, Y+19	; 0x13
    1066:	80 81       	ld	r24, Z
    1068:	88 60       	ori	r24, 0x08	; 8
    106a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    106c:	ea 89       	ldd	r30, Y+18	; 0x12
    106e:	fb 89       	ldd	r31, Y+19	; 0x13
    1070:	80 81       	ld	r24, Z
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1076:	ea 89       	ldd	r30, Y+18	; 0x12
    1078:	fb 89       	ldd	r31, Y+19	; 0x13
    107a:	80 81       	ld	r24, Z
    107c:	8f 7d       	andi	r24, 0xDF	; 223
    107e:	80 83       	st	Z, r24
}
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	08 95       	ret

00001090 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	08 95       	ret

00001096 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1096:	08 95       	ret

00001098 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	0b b6       	in	r0, 0x3b	; 59
    10a4:	0f 92       	push	r0
    10a6:	2f 93       	push	r18
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    10b0:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <Serial+0x10>
    10b4:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <Serial+0x11>
    10b8:	80 81       	ld	r24, Z
    10ba:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <Serial+0x16>
    10be:	f0 91 1a 03 	lds	r31, 0x031A	; 0x80031a <Serial+0x17>
    10c2:	82 fd       	sbrc	r24, 2
    10c4:	12 c0       	rjmp	.+36     	; 0x10ea <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    10c6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    10c8:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <Serial+0x19>
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    10d0:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <Serial+0x1a>
    10d4:	82 17       	cp	r24, r18
    10d6:	51 f0       	breq	.+20     	; 0x10ec <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    10d8:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <Serial+0x19>
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	ed 5f       	subi	r30, 0xFD	; 253
    10e0:	fc 4f       	sbci	r31, 0xFC	; 252
    10e2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    10e4:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <Serial+0x19>
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    10ea:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	2f 91       	pop	r18
    10f6:	0f 90       	pop	r0
    10f8:	0b be       	out	0x3b, r0	; 59
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti

00001104 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1104:	1f 92       	push	r1
    1106:	0f 92       	push	r0
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	0f 92       	push	r0
    110c:	11 24       	eor	r1, r1
    110e:	0b b6       	in	r0, 0x3b	; 59
    1110:	0f 92       	push	r0
    1112:	2f 93       	push	r18
    1114:	3f 93       	push	r19
    1116:	4f 93       	push	r20
    1118:	5f 93       	push	r21
    111a:	6f 93       	push	r22
    111c:	7f 93       	push	r23
    111e:	8f 93       	push	r24
    1120:	9f 93       	push	r25
    1122:	af 93       	push	r26
    1124:	bf 93       	push	r27
    1126:	ef 93       	push	r30
    1128:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	bc de       	rcall	.-648    	; 0xea8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1130:	ff 91       	pop	r31
    1132:	ef 91       	pop	r30
    1134:	bf 91       	pop	r27
    1136:	af 91       	pop	r26
    1138:	9f 91       	pop	r25
    113a:	8f 91       	pop	r24
    113c:	7f 91       	pop	r23
    113e:	6f 91       	pop	r22
    1140:	5f 91       	pop	r21
    1142:	4f 91       	pop	r20
    1144:	3f 91       	pop	r19
    1146:	2f 91       	pop	r18
    1148:	0f 90       	pop	r0
    114a:	0b be       	out	0x3b, r0	; 59
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	93 e0       	ldi	r25, 0x03	; 3
    115a:	2e de       	rcall	.-932    	; 0xdb8 <_ZN14HardwareSerial9availableEv>
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	89 2b       	or	r24, r25
    1160:	09 f4       	brne	.+2      	; 0x1164 <_Z17Serial0_availablev+0xe>
    1162:	20 e0       	ldi	r18, 0x00	; 0
}
    1164:	82 2f       	mov	r24, r18
    1166:	08 95       	ret

00001168 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1168:	e3 e0       	ldi	r30, 0x03	; 3
    116a:	f3 e0       	ldi	r31, 0x03	; 3
    116c:	13 82       	std	Z+3, r1	; 0x03
    116e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1170:	88 ee       	ldi	r24, 0xE8	; 232
    1172:	93 e0       	ldi	r25, 0x03	; 3
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	84 83       	std	Z+4, r24	; 0x04
    117a:	95 83       	std	Z+5, r25	; 0x05
    117c:	a6 83       	std	Z+6, r26	; 0x06
    117e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1180:	8c ea       	ldi	r24, 0xAC	; 172
    1182:	92 e0       	ldi	r25, 0x02	; 2
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
    1188:	85 ec       	ldi	r24, 0xC5	; 197
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	95 87       	std	Z+13, r25	; 0x0d
    118e:	84 87       	std	Z+12, r24	; 0x0c
    1190:	84 ec       	ldi	r24, 0xC4	; 196
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	97 87       	std	Z+15, r25	; 0x0f
    1196:	86 87       	std	Z+14, r24	; 0x0e
    1198:	80 ec       	ldi	r24, 0xC0	; 192
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	91 8b       	std	Z+17, r25	; 0x11
    119e:	80 8b       	std	Z+16, r24	; 0x10
    11a0:	81 ec       	ldi	r24, 0xC1	; 193
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	93 8b       	std	Z+19, r25	; 0x13
    11a6:	82 8b       	std	Z+18, r24	; 0x12
    11a8:	82 ec       	ldi	r24, 0xC2	; 194
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	95 8b       	std	Z+21, r25	; 0x15
    11ae:	84 8b       	std	Z+20, r24	; 0x14
    11b0:	86 ec       	ldi	r24, 0xC6	; 198
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	97 8b       	std	Z+23, r25	; 0x17
    11b6:	86 8b       	std	Z+22, r24	; 0x16
    11b8:	11 8e       	std	Z+25, r1	; 0x19
    11ba:	12 8e       	std	Z+26, r1	; 0x1a
    11bc:	13 8e       	std	Z+27, r1	; 0x1b
    11be:	14 8e       	std	Z+28, r1	; 0x1c
    11c0:	08 95       	ret

000011c2 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	0b b6       	in	r0, 0x3b	; 59
    11ce:	0f 92       	push	r0
    11d0:	2f 93       	push	r18
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    11da:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <Serial1+0x10>
    11de:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <Serial1+0x11>
    11e2:	80 81       	ld	r24, Z
    11e4:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <Serial1+0x16>
    11e8:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <Serial1+0x17>
    11ec:	82 fd       	sbrc	r24, 2
    11ee:	12 c0       	rjmp	.+36     	; 0x1214 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    11f0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    11f2:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <Serial1+0x19>
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    11fa:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <Serial1+0x1a>
    11fe:	82 17       	cp	r24, r18
    1200:	51 f0       	breq	.+20     	; 0x1216 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1202:	e0 91 b9 03 	lds	r30, 0x03B9	; 0x8003b9 <Serial1+0x19>
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	e0 56       	subi	r30, 0x60	; 96
    120a:	fc 4f       	sbci	r31, 0xFC	; 252
    120c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    120e:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <Serial1+0x19>
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1214:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1216:	ff 91       	pop	r31
    1218:	ef 91       	pop	r30
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0b be       	out	0x3b, r0	; 59
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	0b b6       	in	r0, 0x3b	; 59
    123a:	0f 92       	push	r0
    123c:	2f 93       	push	r18
    123e:	3f 93       	push	r19
    1240:	4f 93       	push	r20
    1242:	5f 93       	push	r21
    1244:	6f 93       	push	r22
    1246:	7f 93       	push	r23
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	af 93       	push	r26
    124e:	bf 93       	push	r27
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1254:	80 ea       	ldi	r24, 0xA0	; 160
    1256:	93 e0       	ldi	r25, 0x03	; 3
    1258:	27 de       	rcall	.-946    	; 0xea8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0b be       	out	0x3b, r0	; 59
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1280:	80 ea       	ldi	r24, 0xA0	; 160
    1282:	93 e0       	ldi	r25, 0x03	; 3
    1284:	99 dd       	rcall	.-1230   	; 0xdb8 <_ZN14HardwareSerial9availableEv>
    1286:	21 e0       	ldi	r18, 0x01	; 1
    1288:	89 2b       	or	r24, r25
    128a:	09 f4       	brne	.+2      	; 0x128e <_Z17Serial1_availablev+0xe>
    128c:	20 e0       	ldi	r18, 0x00	; 0
}
    128e:	82 2f       	mov	r24, r18
    1290:	08 95       	ret

00001292 <_GLOBAL__sub_I___vector_36>:
    1292:	e0 ea       	ldi	r30, 0xA0	; 160
    1294:	f3 e0       	ldi	r31, 0x03	; 3
    1296:	13 82       	std	Z+3, r1	; 0x03
    1298:	12 82       	std	Z+2, r1	; 0x02
    129a:	88 ee       	ldi	r24, 0xE8	; 232
    129c:	93 e0       	ldi	r25, 0x03	; 3
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	84 83       	std	Z+4, r24	; 0x04
    12a4:	95 83       	std	Z+5, r25	; 0x05
    12a6:	a6 83       	std	Z+6, r26	; 0x06
    12a8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    12aa:	8c ea       	ldi	r24, 0xAC	; 172
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	91 83       	std	Z+1, r25	; 0x01
    12b0:	80 83       	st	Z, r24
    12b2:	8d ec       	ldi	r24, 0xCD	; 205
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	95 87       	std	Z+13, r25	; 0x0d
    12b8:	84 87       	std	Z+12, r24	; 0x0c
    12ba:	8c ec       	ldi	r24, 0xCC	; 204
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	97 87       	std	Z+15, r25	; 0x0f
    12c0:	86 87       	std	Z+14, r24	; 0x0e
    12c2:	88 ec       	ldi	r24, 0xC8	; 200
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	91 8b       	std	Z+17, r25	; 0x11
    12c8:	80 8b       	std	Z+16, r24	; 0x10
    12ca:	89 ec       	ldi	r24, 0xC9	; 201
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	93 8b       	std	Z+19, r25	; 0x13
    12d0:	82 8b       	std	Z+18, r24	; 0x12
    12d2:	8a ec       	ldi	r24, 0xCA	; 202
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	95 8b       	std	Z+21, r25	; 0x15
    12d8:	84 8b       	std	Z+20, r24	; 0x14
    12da:	8e ec       	ldi	r24, 0xCE	; 206
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	97 8b       	std	Z+23, r25	; 0x17
    12e0:	86 8b       	std	Z+22, r24	; 0x16
    12e2:	11 8e       	std	Z+25, r1	; 0x19
    12e4:	12 8e       	std	Z+26, r1	; 0x1a
    12e6:	13 8e       	std	Z+27, r1	; 0x1b
    12e8:	14 8e       	std	Z+28, r1	; 0x1c
    12ea:	08 95       	ret

000012ec <initVariant>:
    12ec:	08 95       	ret

000012ee <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    12ee:	d6 d1       	rcall	.+940    	; 0x169c <init>

	initVariant();
    12f0:	fd df       	rcall	.-6      	; 0x12ec <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    12f2:	87 da       	rcall	.-2802   	; 0x802 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    12f4:	c9 e1       	ldi	r28, 0x19	; 25
    12f6:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    12f8:	37 dc       	rcall	.-1938   	; 0xb68 <loop>
		if (serialEventRun) serialEventRun();
    12fa:	20 97       	sbiw	r28, 0x00	; 0
    12fc:	e9 f3       	breq	.-6      	; 0x12f8 <main+0xa>
    12fe:	99 dd       	rcall	.-1230   	; 0xe32 <_Z14serialEventRunv>
    1300:	fb cf       	rjmp	.-10     	; 0x12f8 <main+0xa>

00001302 <_ZN5Print5writeEPKhj>:
    1302:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1304:	df 92       	push	r13
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	6c 01       	movw	r12, r24
    1314:	7a 01       	movw	r14, r20
    1316:	8b 01       	movw	r16, r22
    1318:	c0 e0       	ldi	r28, 0x00	; 0
    131a:	d0 e0       	ldi	r29, 0x00	; 0
    131c:	ce 15       	cp	r28, r14
    131e:	df 05       	cpc	r29, r15
    1320:	81 f0       	breq	.+32     	; 0x1342 <_ZN5Print5writeEPKhj+0x40>
    1322:	d8 01       	movw	r26, r16
    1324:	6d 91       	ld	r22, X+
    1326:	8d 01       	movw	r16, r26
    1328:	d6 01       	movw	r26, r12
    132a:	ed 91       	ld	r30, X+
    132c:	fc 91       	ld	r31, X
    132e:	01 90       	ld	r0, Z+
    1330:	f0 81       	ld	r31, Z
    1332:	e0 2d       	mov	r30, r0
    1334:	c6 01       	movw	r24, r12
    1336:	19 95       	eicall
    1338:	89 2b       	or	r24, r25
    133a:	11 f0       	breq	.+4      	; 0x1340 <_ZN5Print5writeEPKhj+0x3e>
    133c:	21 96       	adiw	r28, 0x01	; 1
    133e:	ee cf       	rjmp	.-36     	; 0x131c <_ZN5Print5writeEPKhj+0x1a>
    1340:	7e 01       	movw	r14, r28
    1342:	c7 01       	movw	r24, r14
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	08 95       	ret

00001356 <_ZN5Print5writeEPKc>:
    1356:	61 15       	cp	r22, r1
    1358:	71 05       	cpc	r23, r1
    135a:	79 f0       	breq	.+30     	; 0x137a <_ZN5Print5writeEPKc+0x24>
    135c:	fb 01       	movw	r30, r22
    135e:	01 90       	ld	r0, Z+
    1360:	00 20       	and	r0, r0
    1362:	e9 f7       	brne	.-6      	; 0x135e <_ZN5Print5writeEPKc+0x8>
    1364:	31 97       	sbiw	r30, 0x01	; 1
    1366:	af 01       	movw	r20, r30
    1368:	46 1b       	sub	r20, r22
    136a:	57 0b       	sbc	r21, r23
    136c:	dc 01       	movw	r26, r24
    136e:	ed 91       	ld	r30, X+
    1370:	fc 91       	ld	r31, X
    1372:	02 80       	ldd	r0, Z+2	; 0x02
    1374:	f3 81       	ldd	r31, Z+3	; 0x03
    1376:	e0 2d       	mov	r30, r0
    1378:	19 94       	eijmp
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	08 95       	ret

00001380 <_ZN5Print5printEPKc>:
    1380:	ea cf       	rjmp	.-44     	; 0x1356 <_ZN5Print5writeEPKc>

00001382 <_ZN5Print5printEc>:
    1382:	dc 01       	movw	r26, r24
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	01 90       	ld	r0, Z+
    138a:	f0 81       	ld	r31, Z
    138c:	e0 2d       	mov	r30, r0
    138e:	19 94       	eijmp

00001390 <_ZN5Print7printlnEv>:
    1390:	6a eb       	ldi	r22, 0xBA	; 186
    1392:	72 e0       	ldi	r23, 0x02	; 2
    1394:	e0 cf       	rjmp	.-64     	; 0x1356 <_ZN5Print5writeEPKc>

00001396 <_ZN5Print7printlnEPKc>:
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	ec 01       	movw	r28, r24
    13a0:	da df       	rcall	.-76     	; 0x1356 <_ZN5Print5writeEPKc>
    13a2:	8c 01       	movw	r16, r24
    13a4:	ce 01       	movw	r24, r28
    13a6:	f4 df       	rcall	.-24     	; 0x1390 <_ZN5Print7printlnEv>
    13a8:	80 0f       	add	r24, r16
    13aa:	91 1f       	adc	r25, r17
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <_ZN5Print11printNumberEmh>:
    13b6:	8f 92       	push	r8
    13b8:	9f 92       	push	r9
    13ba:	af 92       	push	r10
    13bc:	bf 92       	push	r11
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	a1 97       	sbiw	r28, 0x21	; 33
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	7c 01       	movw	r14, r24
    13dc:	fa 01       	movw	r30, r20
    13de:	cb 01       	movw	r24, r22
    13e0:	19 a2       	std	Y+33, r1	; 0x21
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	08 f4       	brcc	.+2      	; 0x13e8 <_ZN5Print11printNumberEmh+0x32>
    13e6:	2a e0       	ldi	r18, 0x0A	; 10
    13e8:	8e 01       	movw	r16, r28
    13ea:	0f 5d       	subi	r16, 0xDF	; 223
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	82 2e       	mov	r8, r18
    13f0:	91 2c       	mov	r9, r1
    13f2:	a1 2c       	mov	r10, r1
    13f4:	b1 2c       	mov	r11, r1
    13f6:	bf 01       	movw	r22, r30
    13f8:	a5 01       	movw	r20, r10
    13fa:	94 01       	movw	r18, r8
    13fc:	42 d6       	rcall	.+3204   	; 0x2082 <__udivmodsi4>
    13fe:	f9 01       	movw	r30, r18
    1400:	ca 01       	movw	r24, r20
    1402:	01 50       	subi	r16, 0x01	; 1
    1404:	11 09       	sbc	r17, r1
    1406:	6a 30       	cpi	r22, 0x0A	; 10
    1408:	10 f4       	brcc	.+4      	; 0x140e <_ZN5Print11printNumberEmh+0x58>
    140a:	60 5d       	subi	r22, 0xD0	; 208
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <_ZN5Print11printNumberEmh+0x5a>
    140e:	69 5c       	subi	r22, 0xC9	; 201
    1410:	d8 01       	movw	r26, r16
    1412:	6c 93       	st	X, r22
    1414:	23 2b       	or	r18, r19
    1416:	24 2b       	or	r18, r20
    1418:	25 2b       	or	r18, r21
    141a:	69 f7       	brne	.-38     	; 0x13f6 <_ZN5Print11printNumberEmh+0x40>
    141c:	b8 01       	movw	r22, r16
    141e:	c7 01       	movw	r24, r14
    1420:	9a df       	rcall	.-204    	; 0x1356 <_ZN5Print5writeEPKc>
    1422:	a1 96       	adiw	r28, 0x21	; 33
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	bf 90       	pop	r11
    143c:	af 90       	pop	r10
    143e:	9f 90       	pop	r9
    1440:	8f 90       	pop	r8
    1442:	08 95       	ret

00001444 <_ZN5Print5printEmi>:
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	41 f4       	brne	.+16     	; 0x145a <_ZN5Print5printEmi+0x16>
    144a:	dc 01       	movw	r26, r24
    144c:	ed 91       	ld	r30, X+
    144e:	fc 91       	ld	r31, X
    1450:	01 90       	ld	r0, Z+
    1452:	f0 81       	ld	r31, Z
    1454:	e0 2d       	mov	r30, r0
    1456:	64 2f       	mov	r22, r20
    1458:	19 94       	eijmp
    145a:	ad cf       	rjmp	.-166    	; 0x13b6 <_ZN5Print11printNumberEmh>

0000145c <_ZN5Print5printEhi>:
    145c:	9a 01       	movw	r18, r20
    145e:	46 2f       	mov	r20, r22
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	ee cf       	rjmp	.-36     	; 0x1444 <_ZN5Print5printEmi>

00001468 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
  if (base == 0) {
    1478:	21 15       	cp	r18, r1
    147a:	31 05       	cpc	r19, r1
    147c:	81 f4       	brne	.+32     	; 0x149e <_ZN5Print5printEli+0x36>
    return write(n);
    147e:	dc 01       	movw	r26, r24
    1480:	ed 91       	ld	r30, X+
    1482:	fc 91       	ld	r31, X
    1484:	01 90       	ld	r0, Z+
    1486:	f0 81       	ld	r31, Z
    1488:	e0 2d       	mov	r30, r0
    148a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    149c:	19 94       	eijmp
  } else if (base == 10) {
    149e:	2a 30       	cpi	r18, 0x0A	; 10
    14a0:	31 05       	cpc	r19, r1
    14a2:	f1 f4       	brne	.+60     	; 0x14e0 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    14a4:	77 ff       	sbrs	r23, 7
    14a6:	1b c0       	rjmp	.+54     	; 0x14de <_ZN5Print5printEli+0x76>
    14a8:	6a 01       	movw	r12, r20
    14aa:	7b 01       	movw	r14, r22
    14ac:	ec 01       	movw	r28, r24
      int t = print('-');
    14ae:	6d e2       	ldi	r22, 0x2D	; 45
    14b0:	68 df       	rcall	.-304    	; 0x1382 <_ZN5Print5printEc>
    14b2:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    14b4:	44 27       	eor	r20, r20
    14b6:	55 27       	eor	r21, r21
    14b8:	ba 01       	movw	r22, r20
    14ba:	4c 19       	sub	r20, r12
    14bc:	5d 09       	sbc	r21, r13
    14be:	6e 09       	sbc	r22, r14
    14c0:	7f 09       	sbc	r23, r15
    14c2:	2a e0       	ldi	r18, 0x0A	; 10
    14c4:	ce 01       	movw	r24, r28
    14c6:	77 df       	rcall	.-274    	; 0x13b6 <_ZN5Print11printNumberEmh>
    14c8:	80 0f       	add	r24, r16
    14ca:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    14de:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    14ee:	cf 90       	pop	r12
    14f0:	62 cf       	rjmp	.-316    	; 0x13b6 <_ZN5Print11printNumberEmh>

000014f2 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    14f2:	9a 01       	movw	r18, r20
  return print((long) n, base);
    14f4:	ab 01       	movw	r20, r22
    14f6:	77 0f       	add	r23, r23
    14f8:	66 0b       	sbc	r22, r22
    14fa:	77 0b       	sbc	r23, r23
    14fc:	b5 cf       	rjmp	.-150    	; 0x1468 <_ZN5Print5printEli>

000014fe <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1508:	f4 df       	rcall	.-24     	; 0x14f2 <_ZN5Print5printEii>
    150a:	8c 01       	movw	r16, r24
  n += println();
    150c:	ce 01       	movw	r24, r28
    150e:	40 df       	rcall	.-384    	; 0x1390 <_ZN5Print7printlnEv>
  return n;
}
    1510:	80 0f       	add	r24, r16
    1512:	91 1f       	adc	r25, r17
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	2f 93       	push	r18
    152a:	3f 93       	push	r19
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1534:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <timer0_millis>
    1538:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <timer0_millis+0x1>
    153c:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <timer0_millis+0x2>
    1540:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1544:	30 91 3d 04 	lds	r19, 0x043D	; 0x80043d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1548:	23 e0       	ldi	r18, 0x03	; 3
    154a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    154c:	2d 37       	cpi	r18, 0x7D	; 125
    154e:	20 f4       	brcc	.+8      	; 0x1558 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	a1 1d       	adc	r26, r1
    1554:	b1 1d       	adc	r27, r1
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1558:	26 e8       	ldi	r18, 0x86	; 134
    155a:	23 0f       	add	r18, r19
		m += 1;
    155c:	02 96       	adiw	r24, 0x02	; 2
    155e:	a1 1d       	adc	r26, r1
    1560:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1562:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <timer0_fract>
	timer0_millis = m;
    1566:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <timer0_millis>
    156a:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <timer0_millis+0x1>
    156e:	a0 93 40 04 	sts	0x0440, r26	; 0x800440 <timer0_millis+0x2>
    1572:	b0 93 41 04 	sts	0x0441, r27	; 0x800441 <timer0_millis+0x3>
	timer0_overflow_count++;
    1576:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <timer0_overflow_count>
    157a:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <timer0_overflow_count+0x1>
    157e:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <timer0_overflow_count+0x2>
    1582:	b0 91 45 04 	lds	r27, 0x0445	; 0x800445 <timer0_overflow_count+0x3>
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	a1 1d       	adc	r26, r1
    158a:	b1 1d       	adc	r27, r1
    158c:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <timer0_overflow_count>
    1590:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <timer0_overflow_count+0x1>
    1594:	a0 93 44 04 	sts	0x0444, r26	; 0x800444 <timer0_overflow_count+0x2>
    1598:	b0 93 45 04 	sts	0x0445, r27	; 0x800445 <timer0_overflow_count+0x3>
}
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    15b2:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    15b4:	f8 94       	cli
	m = timer0_millis;
    15b6:	60 91 3e 04 	lds	r22, 0x043E	; 0x80043e <timer0_millis>
    15ba:	70 91 3f 04 	lds	r23, 0x043F	; 0x80043f <timer0_millis+0x1>
    15be:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <timer0_millis+0x2>
    15c2:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <timer0_millis+0x3>
	SREG = oldSREG;
    15c6:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    15c8:	08 95       	ret

000015ca <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    15ca:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    15cc:	f8 94       	cli
	m = timer0_overflow_count;
    15ce:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <timer0_overflow_count>
    15d2:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <timer0_overflow_count+0x1>
    15d6:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <timer0_overflow_count+0x2>
    15da:	b0 91 45 04 	lds	r27, 0x0445	; 0x800445 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    15de:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    15e0:	a8 9b       	sbis	0x15, 0	; 21
    15e2:	05 c0       	rjmp	.+10     	; 0x15ee <micros+0x24>
    15e4:	2f 3f       	cpi	r18, 0xFF	; 255
    15e6:	19 f0       	breq	.+6      	; 0x15ee <micros+0x24>
		m++;
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	a1 1d       	adc	r26, r1
    15ec:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    15ee:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    15f0:	ba 2f       	mov	r27, r26
    15f2:	a9 2f       	mov	r26, r25
    15f4:	98 2f       	mov	r25, r24
    15f6:	88 27       	eor	r24, r24
    15f8:	82 0f       	add	r24, r18
    15fa:	91 1d       	adc	r25, r1
    15fc:	a1 1d       	adc	r26, r1
    15fe:	b1 1d       	adc	r27, r1
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	42 e0       	ldi	r20, 0x02	; 2
    1606:	66 0f       	add	r22, r22
    1608:	77 1f       	adc	r23, r23
    160a:	88 1f       	adc	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	4a 95       	dec	r20
    1610:	d1 f7       	brne	.-12     	; 0x1606 <micros+0x3c>
}
    1612:	08 95       	ret

00001614 <delay>:

void delay(unsigned long ms)
{
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	6b 01       	movw	r12, r22
    1626:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1628:	d0 df       	rcall	.-96     	; 0x15ca <micros>
    162a:	4b 01       	movw	r8, r22
    162c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    162e:	c1 14       	cp	r12, r1
    1630:	d1 04       	cpc	r13, r1
    1632:	e1 04       	cpc	r14, r1
    1634:	f1 04       	cpc	r15, r1
		yield();
    1636:	f1 f0       	breq	.+60     	; 0x1674 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1638:	41 d3       	rcall	.+1666   	; 0x1cbc <yield>
    163a:	c7 df       	rcall	.-114    	; 0x15ca <micros>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	88 19       	sub	r24, r8
    1642:	99 09       	sbc	r25, r9
    1644:	aa 09       	sbc	r26, r10
    1646:	bb 09       	sbc	r27, r11
    1648:	88 3e       	cpi	r24, 0xE8	; 232
    164a:	93 40       	sbci	r25, 0x03	; 3
    164c:	a1 05       	cpc	r26, r1
    164e:	b1 05       	cpc	r27, r1
    1650:	70 f3       	brcs	.-36     	; 0x162e <delay+0x1a>
			ms--;
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	c2 1a       	sub	r12, r18
    1656:	d1 08       	sbc	r13, r1
    1658:	e1 08       	sbc	r14, r1
    165a:	f1 08       	sbc	r15, r1
			start += 1000;
    165c:	88 ee       	ldi	r24, 0xE8	; 232
    165e:	88 0e       	add	r8, r24
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	98 1e       	adc	r9, r24
    1664:	a1 1c       	adc	r10, r1
    1666:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1668:	c1 14       	cp	r12, r1
    166a:	d1 04       	cpc	r13, r1
    166c:	e1 04       	cpc	r14, r1
    166e:	f1 04       	cpc	r15, r1
    1670:	21 f7       	brne	.-56     	; 0x163a <delay+0x26>
    1672:	dd cf       	rjmp	.-70     	; 0x162e <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    1674:	ff 90       	pop	r15
    1676:	ef 90       	pop	r14
    1678:	df 90       	pop	r13
    167a:	cf 90       	pop	r12
    167c:	bf 90       	pop	r11
    167e:	af 90       	pop	r10
    1680:	9f 90       	pop	r9
    1682:	8f 90       	pop	r8
    1684:	08 95       	ret

00001686 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	91 05       	cpc	r25, r1
    168a:	38 f0       	brcs	.+14     	; 0x169a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1694:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <delayMicroseconds+0x10>
    169a:	08 95       	ret

0000169c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    169c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    169e:	84 b5       	in	r24, 0x24	; 36
    16a0:	82 60       	ori	r24, 0x02	; 2
    16a2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    16a4:	84 b5       	in	r24, 0x24	; 36
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    16aa:	85 b5       	in	r24, 0x25	; 37
    16ac:	82 60       	ori	r24, 0x02	; 2
    16ae:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    16b0:	85 b5       	in	r24, 0x25	; 37
    16b2:	81 60       	ori	r24, 0x01	; 1
    16b4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    16b6:	ee e6       	ldi	r30, 0x6E	; 110
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	81 60       	ori	r24, 0x01	; 1
    16be:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    16c0:	e1 e8       	ldi	r30, 0x81	; 129
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    16c6:	80 81       	ld	r24, Z
    16c8:	82 60       	ori	r24, 0x02	; 2
    16ca:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    16cc:	80 81       	ld	r24, Z
    16ce:	81 60       	ori	r24, 0x01	; 1
    16d0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    16d2:	e0 e8       	ldi	r30, 0x80	; 128
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    16dc:	e1 eb       	ldi	r30, 0xB1	; 177
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	84 60       	ori	r24, 0x04	; 4
    16e4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    16e6:	e0 eb       	ldi	r30, 0xB0	; 176
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	81 60       	ori	r24, 0x01	; 1
    16ee:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    16f0:	e1 e9       	ldi	r30, 0x91	; 145
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	82 60       	ori	r24, 0x02	; 2
    16f8:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    16fa:	80 81       	ld	r24, Z
    16fc:	81 60       	ori	r24, 0x01	; 1
    16fe:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1700:	e0 e9       	ldi	r30, 0x90	; 144
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	81 60       	ori	r24, 0x01	; 1
    1708:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    170a:	e1 ea       	ldi	r30, 0xA1	; 161
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	82 60       	ori	r24, 0x02	; 2
    1712:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1714:	80 81       	ld	r24, Z
    1716:	81 60       	ori	r24, 0x01	; 1
    1718:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    171a:	e0 ea       	ldi	r30, 0xA0	; 160
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	81 60       	ori	r24, 0x01	; 1
    1722:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1724:	e1 e2       	ldi	r30, 0x21	; 33
    1726:	f1 e0       	ldi	r31, 0x01	; 1
    1728:	80 81       	ld	r24, Z
    172a:	82 60       	ori	r24, 0x02	; 2
    172c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    172e:	80 81       	ld	r24, Z
    1730:	81 60       	ori	r24, 0x01	; 1
    1732:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1734:	e0 e2       	ldi	r30, 0x20	; 32
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	80 81       	ld	r24, Z
    173a:	81 60       	ori	r24, 0x01	; 1
    173c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    173e:	ea e7       	ldi	r30, 0x7A	; 122
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	84 60       	ori	r24, 0x04	; 4
    1746:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1748:	80 81       	ld	r24, Z
    174a:	82 60       	ori	r24, 0x02	; 2
    174c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    174e:	80 81       	ld	r24, Z
    1750:	81 60       	ori	r24, 0x01	; 1
    1752:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1754:	80 81       	ld	r24, Z
    1756:	80 68       	ori	r24, 0x80	; 128
    1758:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    175a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    175e:	08 95       	ret

00001760 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	fc 01       	movw	r30, r24
    1764:	31 97       	sbiw	r30, 0x01	; 1
    1766:	e2 31       	cpi	r30, 0x12	; 18
    1768:	f1 05       	cpc	r31, r1
    176a:	08 f0       	brcs	.+2      	; 0x176e <turnOffPWM+0xe>
    176c:	4d c0       	rjmp	.+154    	; 0x1808 <turnOffPWM+0xa8>
    176e:	88 27       	eor	r24, r24
    1770:	ee 58       	subi	r30, 0x8E	; 142
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	a7 c4       	rjmp	.+2382   	; 0x20c6 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1778:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    177c:	8f 77       	andi	r24, 0x7F	; 127
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1780:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1784:	8f 7d       	andi	r24, 0xDF	; 223
    1786:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    178a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    178c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1790:	87 7f       	andi	r24, 0xF7	; 247
    1792:	f9 cf       	rjmp	.-14     	; 0x1786 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1794:	84 b5       	in	r24, 0x24	; 36
    1796:	8f 77       	andi	r24, 0x7F	; 127
    1798:	02 c0       	rjmp	.+4      	; 0x179e <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    179a:	84 b5       	in	r24, 0x24	; 36
    179c:	8f 7d       	andi	r24, 0xDF	; 223
    179e:	84 bd       	out	0x24, r24	; 36
    17a0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    17a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    17a6:	8f 77       	andi	r24, 0x7F	; 127
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    17aa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    17ae:	8f 7d       	andi	r24, 0xDF	; 223
    17b0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    17b4:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    17b6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    17ba:	8f 77       	andi	r24, 0x7F	; 127
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    17be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    17c2:	8f 7d       	andi	r24, 0xDF	; 223
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    17c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    17ca:	87 7f       	andi	r24, 0xF7	; 247
    17cc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    17d0:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    17d2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    17d6:	8f 77       	andi	r24, 0x7F	; 127
    17d8:	07 c0       	rjmp	.+14     	; 0x17e8 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    17da:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    17de:	8f 7d       	andi	r24, 0xDF	; 223
    17e0:	03 c0       	rjmp	.+6      	; 0x17e8 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    17e2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    17e6:	87 7f       	andi	r24, 0xF7	; 247
    17e8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    17ec:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    17ee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    17f2:	8f 77       	andi	r24, 0x7F	; 127
    17f4:	07 c0       	rjmp	.+14     	; 0x1804 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    17f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    17fa:	8f 7d       	andi	r24, 0xDF	; 223
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    17fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1802:	87 7f       	andi	r24, 0xF7	; 247
    1804:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1808:	08 95       	ret

0000180a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	fc 01       	movw	r30, r24
    1812:	e2 5b       	subi	r30, 0xB2	; 178
    1814:	fe 4f       	sbci	r31, 0xFE	; 254
    1816:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1818:	fc 01       	movw	r30, r24
    181a:	ec 56       	subi	r30, 0x6C	; 108
    181c:	fe 4f       	sbci	r31, 0xFE	; 254
    181e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1820:	88 23       	and	r24, r24
    1822:	61 f1       	breq	.+88     	; 0x187c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	fc 01       	movw	r30, r24
    182c:	ec 50       	subi	r30, 0x0C	; 12
    182e:	fe 4f       	sbci	r31, 0xFE	; 254
    1830:	c5 91       	lpm	r28, Z+
    1832:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1834:	fc 01       	movw	r30, r24
    1836:	e6 52       	subi	r30, 0x26	; 38
    1838:	fe 4f       	sbci	r31, 0xFE	; 254
    183a:	a5 91       	lpm	r26, Z+
    183c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    183e:	61 11       	cpse	r22, r1
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1842:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1844:	f8 94       	cli
		*reg &= ~bit;
    1846:	88 81       	ld	r24, Y
    1848:	20 95       	com	r18
    184a:	82 23       	and	r24, r18
    184c:	88 83       	st	Y, r24
		*out &= ~bit;
    184e:	ec 91       	ld	r30, X
    1850:	2e 23       	and	r18, r30
    1852:	0b c0       	rjmp	.+22     	; 0x186a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1854:	62 30       	cpi	r22, 0x02	; 2
    1856:	61 f4       	brne	.+24     	; 0x1870 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1858:	9f b7       	in	r25, 0x3f	; 63
                cli();
    185a:	f8 94       	cli
		*reg &= ~bit;
    185c:	88 81       	ld	r24, Y
    185e:	32 2f       	mov	r19, r18
    1860:	30 95       	com	r19
    1862:	83 23       	and	r24, r19
    1864:	88 83       	st	Y, r24
		*out |= bit;
    1866:	ec 91       	ld	r30, X
    1868:	2e 2b       	or	r18, r30
    186a:	2c 93       	st	X, r18
		SREG = oldSREG;
    186c:	9f bf       	out	0x3f, r25	; 63
    186e:	06 c0       	rjmp	.+12     	; 0x187c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1870:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1872:	f8 94       	cli
		*reg |= bit;
    1874:	e8 81       	ld	r30, Y
    1876:	2e 2b       	or	r18, r30
    1878:	28 83       	st	Y, r18
		SREG = oldSREG;
    187a:	8f bf       	out	0x3f, r24	; 63
	}
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	f9 01       	movw	r30, r18
    188e:	e8 5f       	subi	r30, 0xF8	; 248
    1890:	fe 4f       	sbci	r31, 0xFE	; 254
    1892:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1894:	f9 01       	movw	r30, r18
    1896:	e2 5b       	subi	r30, 0xB2	; 178
    1898:	fe 4f       	sbci	r31, 0xFE	; 254
    189a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    189c:	f9 01       	movw	r30, r18
    189e:	ec 56       	subi	r30, 0x6C	; 108
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    18a4:	cc 23       	and	r28, r28
    18a6:	b9 f0       	breq	.+46     	; 0x18d6 <digitalWrite+0x54>
    18a8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    18aa:	81 11       	cpse	r24, r1
    18ac:	59 df       	rcall	.-334    	; 0x1760 <turnOffPWM>

	out = portOutputRegister(port);
    18ae:	ec 2f       	mov	r30, r28
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	ee 0f       	add	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	e6 52       	subi	r30, 0x26	; 38
    18b8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ba:	a5 91       	lpm	r26, Z+
    18bc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    18be:	9f b7       	in	r25, 0x3f	; 63
	cli();
    18c0:	f8 94       	cli

	if (val == LOW) {
    18c2:	11 11       	cpse	r17, r1
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <digitalWrite+0x4c>
		*out &= ~bit;
    18c6:	8c 91       	ld	r24, X
    18c8:	d0 95       	com	r29
    18ca:	d8 23       	and	r29, r24
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <digitalWrite+0x50>
	} else {
		*out |= bit;
    18ce:	ec 91       	ld	r30, X
    18d0:	de 2b       	or	r29, r30
    18d2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    18d4:	9f bf       	out	0x3f, r25	; 63
}
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	08 95       	ret

000018de <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    18de:	fc 01       	movw	r30, r24
    18e0:	13 82       	std	Z+3, r1	; 0x03
    18e2:	12 82       	std	Z+2, r1	; 0x02
    18e4:	8d ec       	ldi	r24, 0xCD	; 205
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	80 83       	st	Z, r24
    18ec:	64 83       	std	Z+4, r22	; 0x04
    18ee:	41 87       	std	Z+9, r20	; 0x09
    18f0:	22 87       	std	Z+10, r18	; 0x0a
    18f2:	13 86       	std	Z+11, r1	; 0x0b
    18f4:	08 95       	ret

000018f6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	ec 01       	movw	r28, r24
    18fe:	16 2f       	mov	r17, r22
    1900:	6c 81       	ldd	r22, Y+4	; 0x04
    1902:	86 e4       	ldi	r24, 0x46	; 70
    1904:	94 e0       	ldi	r25, 0x04	; 4
    1906:	b9 d1       	rcall	.+882    	; 0x1c7a <_ZN7TwoWire17beginTransmissionEh>
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	61 2b       	or	r22, r17
    190c:	86 e4       	ldi	r24, 0x46	; 70
    190e:	94 e0       	ldi	r25, 0x04	; 4
    1910:	67 d1       	rcall	.+718    	; 0x1be0 <_ZN7TwoWire5writeEh>
    1912:	86 e4       	ldi	r24, 0x46	; 70
    1914:	94 e0       	ldi	r25, 0x04	; 4
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	ca c1       	rjmp	.+916    	; 0x1cb2 <_ZN7TwoWire15endTransmissionEv>

0000191e <_ZN17LiquidCrystal_I2C9backlightEv>:
    191e:	28 e0       	ldi	r18, 0x08	; 8
    1920:	fc 01       	movw	r30, r24
    1922:	23 87       	std	Z+11, r18	; 0x0b
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	e7 cf       	rjmp	.-50     	; 0x18f6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00001928 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	8c 01       	movw	r16, r24
    1930:	c6 2f       	mov	r28, r22
    1932:	64 60       	ori	r22, 0x04	; 4
    1934:	e0 df       	rcall	.-64     	; 0x18f6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a5 de       	rcall	.-694    	; 0x1686 <delayMicroseconds>
    193c:	6c 2f       	mov	r22, r28
    193e:	6b 7f       	andi	r22, 0xFB	; 251
    1940:	c8 01       	movw	r24, r16
    1942:	d9 df       	rcall	.-78     	; 0x18f6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1944:	82 e3       	ldi	r24, 0x32	; 50
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	9b ce       	rjmp	.-714    	; 0x1686 <delayMicroseconds>

00001950 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
    1958:	16 2f       	mov	r17, r22
    195a:	cd df       	rcall	.-102    	; 0x18f6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    195c:	61 2f       	mov	r22, r17
    195e:	ce 01       	movw	r24, r28
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	e0 cf       	rjmp	.-64     	; 0x1928 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00001968 <_ZN17LiquidCrystal_I2C4sendEhh>:
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	8c 01       	movw	r16, r24
    1972:	c6 2f       	mov	r28, r22
    1974:	d4 2f       	mov	r29, r20
    1976:	60 7f       	andi	r22, 0xF0	; 240
    1978:	64 2b       	or	r22, r20
    197a:	ea df       	rcall	.-44     	; 0x1950 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    197c:	80 e1       	ldi	r24, 0x10	; 16
    197e:	c8 9f       	mul	r28, r24
    1980:	b0 01       	movw	r22, r0
    1982:	11 24       	eor	r1, r1
    1984:	6d 2b       	or	r22, r29
    1986:	c8 01       	movw	r24, r16
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	df cf       	rjmp	.-66     	; 0x1950 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00001992 <_ZN17LiquidCrystal_I2C7commandEh>:
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	e9 cf       	rjmp	.-46     	; 0x1968 <_ZN17LiquidCrystal_I2C4sendEhh>

00001996 <_ZN17LiquidCrystal_I2C5clearEv>:
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	fc df       	rcall	.-8      	; 0x1992 <_ZN17LiquidCrystal_I2C7commandEh>
    199a:	80 ed       	ldi	r24, 0xD0	; 208
    199c:	97 e0       	ldi	r25, 0x07	; 7
    199e:	73 ce       	rjmp	.-794    	; 0x1686 <delayMicroseconds>

000019a0 <_ZN17LiquidCrystal_I2C4homeEv>:
    19a0:	62 e0       	ldi	r22, 0x02	; 2
    19a2:	f7 df       	rcall	.-18     	; 0x1992 <_ZN17LiquidCrystal_I2C7commandEh>
    19a4:	80 ed       	ldi	r24, 0xD0	; 208
    19a6:	97 e0       	ldi	r25, 0x07	; 7
    19a8:	6e ce       	rjmp	.-804    	; 0x1686 <delayMicroseconds>

000019aa <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	28 97       	sbiw	r28, 0x08	; 8
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	9c 01       	movw	r18, r24
    19c0:	88 e0       	ldi	r24, 0x08	; 8
    19c2:	e3 e0       	ldi	r30, 0x03	; 3
    19c4:	f2 e0       	ldi	r31, 0x02	; 2
    19c6:	de 01       	movw	r26, r28
    19c8:	11 96       	adiw	r26, 0x01	; 1
    19ca:	01 90       	ld	r0, Z+
    19cc:	0d 92       	st	X+, r0
    19ce:	8a 95       	dec	r24
    19d0:	e1 f7       	brne	.-8      	; 0x19ca <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    19d2:	f9 01       	movw	r30, r18
    19d4:	80 85       	ldd	r24, Z+8	; 0x08
    19d6:	84 17       	cp	r24, r20
    19d8:	10 f4       	brcc	.+4      	; 0x19de <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    19da:	4f ef       	ldi	r20, 0xFF	; 255
    19dc:	48 0f       	add	r20, r24
    19de:	fe 01       	movw	r30, r28
    19e0:	31 96       	adiw	r30, 0x01	; 1
    19e2:	e4 0f       	add	r30, r20
    19e4:	f1 1d       	adc	r31, r1
    19e6:	e4 0f       	add	r30, r20
    19e8:	f1 1d       	adc	r31, r1
    19ea:	90 81       	ld	r25, Z
    19ec:	69 0f       	add	r22, r25
    19ee:	60 68       	ori	r22, 0x80	; 128
    19f0:	c9 01       	movw	r24, r18
    19f2:	28 96       	adiw	r28, 0x08	; 8
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	c7 cf       	rjmp	.-114    	; 0x1992 <_ZN17LiquidCrystal_I2C7commandEh>

00001a04 <_ZN17LiquidCrystal_I2C7displayEv>:
    1a04:	fc 01       	movw	r30, r24
    1a06:	66 81       	ldd	r22, Z+6	; 0x06
    1a08:	26 2f       	mov	r18, r22
    1a0a:	24 60       	ori	r18, 0x04	; 4
    1a0c:	26 83       	std	Z+6, r18	; 0x06
    1a0e:	6c 60       	ori	r22, 0x0C	; 12
    1a10:	c0 cf       	rjmp	.-128    	; 0x1992 <_ZN17LiquidCrystal_I2C7commandEh>

00001a12 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	a9 df       	rcall	.-174    	; 0x1968 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	08 95       	ret

00001a1c <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	ec 01       	movw	r28, r24
	if (lines > 1) {
    1a22:	42 30       	cpi	r20, 0x02	; 2
    1a24:	18 f0       	brcs	.+6      	; 0x1a2c <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	88 60       	ori	r24, 0x08	; 8
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    1a2c:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    1a2e:	22 23       	and	r18, r18
    1a30:	29 f0       	breq	.+10     	; 0x1a3c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    1a32:	41 30       	cpi	r20, 0x01	; 1
    1a34:	19 f4       	brne	.+6      	; 0x1a3c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	84 60       	ori	r24, 0x04	; 4
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    1a3c:	62 e3       	ldi	r22, 0x32	; 50
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	e7 dd       	rcall	.-1074   	; 0x1614 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    1a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a48:	ce 01       	movw	r24, r28
    1a4a:	55 df       	rcall	.-342    	; 0x18f6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    1a4c:	68 ee       	ldi	r22, 0xE8	; 232
    1a4e:	73 e0       	ldi	r23, 0x03	; 3
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	df dd       	rcall	.-1090   	; 0x1614 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    1a56:	60 e3       	ldi	r22, 0x30	; 48
    1a58:	ce 01       	movw	r24, r28
    1a5a:	7a df       	rcall	.-268    	; 0x1950 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1a5c:	84 e9       	ldi	r24, 0x94	; 148
    1a5e:	91 e1       	ldi	r25, 0x11	; 17
    1a60:	12 de       	rcall	.-988    	; 0x1686 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    1a62:	60 e3       	ldi	r22, 0x30	; 48
    1a64:	ce 01       	movw	r24, r28
    1a66:	74 df       	rcall	.-280    	; 0x1950 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1a68:	84 e9       	ldi	r24, 0x94	; 148
    1a6a:	91 e1       	ldi	r25, 0x11	; 17
    1a6c:	0c de       	rcall	.-1000   	; 0x1686 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    1a6e:	60 e3       	ldi	r22, 0x30	; 48
    1a70:	ce 01       	movw	r24, r28
    1a72:	6e df       	rcall	.-292    	; 0x1950 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    1a74:	86 e9       	ldi	r24, 0x96	; 150
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	06 de       	rcall	.-1012   	; 0x1686 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    1a7a:	60 e2       	ldi	r22, 0x20	; 32
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	68 df       	rcall	.-304    	; 0x1950 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    1a80:	6d 81       	ldd	r22, Y+5	; 0x05
    1a82:	60 62       	ori	r22, 0x20	; 32
    1a84:	ce 01       	movw	r24, r28
    1a86:	85 df       	rcall	.-246    	; 0x1992 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1a88:	84 e0       	ldi	r24, 0x04	; 4
    1a8a:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	ba df       	rcall	.-140    	; 0x1a04 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    1a90:	ce 01       	movw	r24, r28
    1a92:	81 df       	rcall	.-254    	; 0x1996 <_ZN17LiquidCrystal_I2C5clearEv>
    1a94:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1a96:	8f 83       	std	Y+7, r24	; 0x07
    1a98:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	7a df       	rcall	.-268    	; 0x1992 <_ZN17LiquidCrystal_I2C7commandEh>
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	df 91       	pop	r29
	
	home();
    1aa2:	cf 91       	pop	r28
  
}
    1aa4:	7d cf       	rjmp	.-262    	; 0x19a0 <_ZN17LiquidCrystal_I2C4homeEv>

00001aa6 <_ZN17LiquidCrystal_I2C9init_privEv>:
    1aa6:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    1aac:	86 e4       	ldi	r24, 0x46	; 70
    1aae:	94 e0       	ldi	r25, 0x04	; 4
    1ab0:	d5 d0       	rcall	.+426    	; 0x1c5c <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    1ab2:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ab8:	69 85       	ldd	r22, Y+9	; 0x09
    1aba:	ce 01       	movw	r24, r28
}
    1abc:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    1abe:	cf 91       	pop	r28
    1ac0:	ad cf       	rjmp	.-166    	; 0x1a1c <_ZN17LiquidCrystal_I2C5beginEhhh>

00001ac2 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    1ac2:	f1 cf       	rjmp	.-30     	; 0x1aa6 <_ZN17LiquidCrystal_I2C9init_privEv>

00001ac4 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1ac4:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZN7TwoWire14rxBufferLengthE>
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	20 91 7b 04 	lds	r18, 0x047B	; 0x80047b <_ZN7TwoWire13rxBufferIndexE>
    1ace:	82 1b       	sub	r24, r18
    1ad0:	91 09       	sbc	r25, r1
    1ad2:	08 95       	ret

00001ad4 <_ZN7TwoWire4readEv>:
    1ad4:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZN7TwoWire13rxBufferIndexE>
    1ad8:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZN7TwoWire14rxBufferLengthE>
    1adc:	98 17       	cp	r25, r24
    1ade:	50 f4       	brcc	.+20     	; 0x1af4 <_ZN7TwoWire4readEv+0x20>
    1ae0:	e9 2f       	mov	r30, r25
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	e4 58       	subi	r30, 0x84	; 132
    1ae6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ae8:	20 81       	ld	r18, Z
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	9f 5f       	subi	r25, 0xFF	; 255
    1aee:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZN7TwoWire13rxBufferIndexE>
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <_ZN7TwoWire4readEv+0x24>
    1af4:	2f ef       	ldi	r18, 0xFF	; 255
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	c9 01       	movw	r24, r18
    1afa:	08 95       	ret

00001afc <_ZN7TwoWire4peekEv>:
    1afc:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <_ZN7TwoWire13rxBufferIndexE>
    1b00:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZN7TwoWire14rxBufferLengthE>
    1b04:	e8 17       	cp	r30, r24
    1b06:	30 f4       	brcc	.+12     	; 0x1b14 <_ZN7TwoWire4peekEv+0x18>
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	e4 58       	subi	r30, 0x84	; 132
    1b0c:	fb 4f       	sbci	r31, 0xFB	; 251
    1b0e:	80 81       	ld	r24, Z
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	08 95       	ret
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	9f ef       	ldi	r25, 0xFF	; 255
    1b18:	08 95       	ret

00001b1a <_ZN7TwoWire5flushEv>:
    1b1a:	08 95       	ret

00001b1c <_ZN7TwoWire16onReceiveServiceEPhi>:
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	ec 01       	movw	r28, r24
    1b22:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <_ZN7TwoWire14user_onReceiveE>
    1b26:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <_ZN7TwoWire14user_onReceiveE+0x1>
    1b2a:	30 97       	sbiw	r30, 0x00	; 0
    1b2c:	f1 f0       	breq	.+60     	; 0x1b6a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b2e:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZN7TwoWire13rxBufferIndexE>
    1b32:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZN7TwoWire14rxBufferLengthE>
    1b36:	98 17       	cp	r25, r24
    1b38:	c0 f0       	brcs	.+48     	; 0x1b6a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	29 2f       	mov	r18, r25
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	26 17       	cp	r18, r22
    1b42:	37 07       	cpc	r19, r23
    1b44:	54 f4       	brge	.+20     	; 0x1b5a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1b46:	de 01       	movw	r26, r28
    1b48:	a2 0f       	add	r26, r18
    1b4a:	b3 1f       	adc	r27, r19
    1b4c:	4c 91       	ld	r20, X
    1b4e:	d9 01       	movw	r26, r18
    1b50:	a4 58       	subi	r26, 0x84	; 132
    1b52:	bb 4f       	sbci	r27, 0xFB	; 251
    1b54:	4c 93       	st	X, r20
    1b56:	9f 5f       	subi	r25, 0xFF	; 255
    1b58:	f1 cf       	rjmp	.-30     	; 0x1b3c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1b5a:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZN7TwoWire13rxBufferIndexE>
    1b5e:	60 93 7a 04 	sts	0x047A, r22	; 0x80047a <_ZN7TwoWire14rxBufferLengthE>
    1b62:	cb 01       	movw	r24, r22
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	19 94       	eijmp
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	08 95       	ret

00001b70 <_ZN7TwoWire16onRequestServiceEv>:
    1b70:	e0 91 54 04 	lds	r30, 0x0454	; 0x800454 <_ZN7TwoWire14user_onRequestE>
    1b74:	f0 91 55 04 	lds	r31, 0x0455	; 0x800455 <_ZN7TwoWire14user_onRequestE+0x1>
    1b78:	30 97       	sbiw	r30, 0x00	; 0
    1b7a:	29 f0       	breq	.+10     	; 0x1b86 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1b7c:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <_ZN7TwoWire13txBufferIndexE>
    1b80:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <_ZN7TwoWire14txBufferLengthE>
    1b84:	19 94       	eijmp
    1b86:	08 95       	ret

00001b88 <_ZN7TwoWire5writeEPKhj>:
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	7c 01       	movw	r14, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	8a 01       	movw	r16, r20
    1b9e:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <_ZN7TwoWire12transmittingE>
    1ba2:	22 23       	and	r18, r18
    1ba4:	89 f0       	breq	.+34     	; 0x1bc8 <_ZN7TwoWire5writeEPKhj+0x40>
    1ba6:	eb 01       	movw	r28, r22
    1ba8:	6b 01       	movw	r12, r22
    1baa:	c4 0e       	add	r12, r20
    1bac:	d5 1e       	adc	r13, r21
    1bae:	cc 15       	cp	r28, r12
    1bb0:	dd 05       	cpc	r29, r13
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <_ZN7TwoWire5writeEPKhj+0x44>
    1bb4:	69 91       	ld	r22, Y+
    1bb6:	d7 01       	movw	r26, r14
    1bb8:	ed 91       	ld	r30, X+
    1bba:	fc 91       	ld	r31, X
    1bbc:	01 90       	ld	r0, Z+
    1bbe:	f0 81       	ld	r31, Z
    1bc0:	e0 2d       	mov	r30, r0
    1bc2:	c7 01       	movw	r24, r14
    1bc4:	19 95       	eicall
    1bc6:	f3 cf       	rjmp	.-26     	; 0x1bae <_ZN7TwoWire5writeEPKhj+0x26>
    1bc8:	64 2f       	mov	r22, r20
    1bca:	eb d0       	rcall	.+470    	; 0x1da2 <twi_transmit>
    1bcc:	c8 01       	movw	r24, r16
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	08 95       	ret

00001be0 <_ZN7TwoWire5writeEh>:
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	1f 92       	push	r1
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	69 83       	std	Y+1, r22	; 0x01
    1bec:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <_ZN7TwoWire12transmittingE>
    1bf0:	22 23       	and	r18, r18
    1bf2:	d1 f0       	breq	.+52     	; 0x1c28 <_ZN7TwoWire5writeEh+0x48>
    1bf4:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <_ZN7TwoWire14txBufferLengthE>
    1bf8:	20 32       	cpi	r18, 0x20	; 32
    1bfa:	40 f0       	brcs	.+16     	; 0x1c0c <_ZN7TwoWire5writeEh+0x2c>
    1bfc:	21 e0       	ldi	r18, 0x01	; 1
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	fc 01       	movw	r30, r24
    1c02:	33 83       	std	Z+3, r19	; 0x03
    1c04:	22 83       	std	Z+2, r18	; 0x02
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <_ZN7TwoWire5writeEh+0x54>
    1c0c:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <_ZN7TwoWire13txBufferIndexE>
    1c10:	e8 2f       	mov	r30, r24
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	e7 5a       	subi	r30, 0xA7	; 167
    1c16:	fb 4f       	sbci	r31, 0xFB	; 251
    1c18:	99 81       	ldd	r25, Y+1	; 0x01
    1c1a:	90 83       	st	Z, r25
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <_ZN7TwoWire13txBufferIndexE>
    1c22:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <_ZN7TwoWire14txBufferLengthE>
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <_ZN7TwoWire5writeEh+0x50>
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	b9 d0       	rcall	.+370    	; 0x1da2 <twi_transmit>
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0f 90       	pop	r0
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	08 95       	ret

00001c3c <_ZN7TwoWireC1Ev>:
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	13 82       	std	Z+3, r1	; 0x03
    1c40:	12 82       	std	Z+2, r1	; 0x02
    1c42:	88 ee       	ldi	r24, 0xE8	; 232
    1c44:	93 e0       	ldi	r25, 0x03	; 3
    1c46:	a0 e0       	ldi	r26, 0x00	; 0
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	84 83       	std	Z+4, r24	; 0x04
    1c4c:	95 83       	std	Z+5, r25	; 0x05
    1c4e:	a6 83       	std	Z+6, r26	; 0x06
    1c50:	b7 83       	std	Z+7, r27	; 0x07
    1c52:	89 ed       	ldi	r24, 0xD9	; 217
    1c54:	92 e0       	ldi	r25, 0x02	; 2
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	80 83       	st	Z, r24
    1c5a:	08 95       	ret

00001c5c <_ZN7TwoWire5beginEv>:
    1c5c:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZN7TwoWire13rxBufferIndexE>
    1c60:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZN7TwoWire14rxBufferLengthE>
    1c64:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <_ZN7TwoWire13txBufferIndexE>
    1c68:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <_ZN7TwoWire14txBufferLengthE>
    1c6c:	28 d0       	rcall	.+80     	; 0x1cbe <twi_init>
    1c6e:	88 eb       	ldi	r24, 0xB8	; 184
    1c70:	9d e0       	ldi	r25, 0x0D	; 13
    1c72:	c4 d0       	rcall	.+392    	; 0x1dfc <twi_attachSlaveTxEvent>
    1c74:	8e e8       	ldi	r24, 0x8E	; 142
    1c76:	9d e0       	ldi	r25, 0x0D	; 13
    1c78:	bc c0       	rjmp	.+376    	; 0x1df2 <twi_attachSlaveRxEvent>

00001c7a <_ZN7TwoWire17beginTransmissionEh>:
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZN7TwoWire12transmittingE>
    1c80:	60 93 79 04 	sts	0x0479, r22	; 0x800479 <_ZN7TwoWire9txAddressE>
    1c84:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <_ZN7TwoWire13txBufferIndexE>
    1c88:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <_ZN7TwoWire14txBufferLengthE>
    1c8c:	08 95       	ret

00001c8e <_ZN7TwoWire15endTransmissionEh>:
    1c8e:	0f 93       	push	r16
    1c90:	06 2f       	mov	r16, r22
    1c92:	21 e0       	ldi	r18, 0x01	; 1
    1c94:	40 91 57 04 	lds	r20, 0x0457	; 0x800457 <_ZN7TwoWire14txBufferLengthE>
    1c98:	69 e5       	ldi	r22, 0x59	; 89
    1c9a:	74 e0       	ldi	r23, 0x04	; 4
    1c9c:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZN7TwoWire9txAddressE>
    1ca0:	2a d0       	rcall	.+84     	; 0x1cf6 <twi_writeTo>
    1ca2:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <_ZN7TwoWire13txBufferIndexE>
    1ca6:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <_ZN7TwoWire14txBufferLengthE>
    1caa:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <_ZN7TwoWire12transmittingE>
    1cae:	0f 91       	pop	r16
    1cb0:	08 95       	ret

00001cb2 <_ZN7TwoWire15endTransmissionEv>:
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	ec cf       	rjmp	.-40     	; 0x1c8e <_ZN7TwoWire15endTransmissionEh>

00001cb6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1cb6:	86 e4       	ldi	r24, 0x46	; 70
    1cb8:	94 e0       	ldi	r25, 0x04	; 4
    1cba:	c0 cf       	rjmp	.-128    	; 0x1c3c <_ZN7TwoWireC1Ev>

00001cbc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1cbc:	08 95       	ret

00001cbe <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1cbe:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_state>
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_sendStop>
    1cc8:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <twi_inRepStart>
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	84 e1       	ldi	r24, 0x14	; 20
    1cd0:	d8 dd       	rcall	.-1104   	; 0x1882 <digitalWrite>
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	85 e1       	ldi	r24, 0x15	; 21
    1cd6:	d5 dd       	rcall	.-1110   	; 0x1882 <digitalWrite>
    1cd8:	e9 eb       	ldi	r30, 0xB9	; 185
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8e 7f       	andi	r24, 0xFE	; 254
    1ce0:	80 83       	st	Z, r24
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8d 7f       	andi	r24, 0xFD	; 253
    1ce6:	80 83       	st	Z, r24
    1ce8:	88 e4       	ldi	r24, 0x48	; 72
    1cea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1cee:	85 e4       	ldi	r24, 0x45	; 69
    1cf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1cf4:	08 95       	ret

00001cf6 <twi_writeTo>:
    1cf6:	0f 93       	push	r16
    1cf8:	41 32       	cpi	r20, 0x21	; 33
    1cfa:	08 f0       	brcs	.+2      	; 0x1cfe <twi_writeTo+0x8>
    1cfc:	4a c0       	rjmp	.+148    	; 0x1d92 <twi_writeTo+0x9c>
    1cfe:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <twi_state>
    1d02:	91 11       	cpse	r25, r1
    1d04:	fc cf       	rjmp	.-8      	; 0x1cfe <twi_writeTo+0x8>
    1d06:	32 e0       	ldi	r19, 0x02	; 2
    1d08:	30 93 09 05 	sts	0x0509, r19	; 0x800509 <twi_state>
    1d0c:	00 93 07 05 	sts	0x0507, r16	; 0x800507 <twi_sendStop>
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	30 93 9c 04 	sts	0x049C, r19	; 0x80049c <twi_error>
    1d16:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <twi_masterBufferIndex>
    1d1a:	40 93 e0 04 	sts	0x04E0, r20	; 0x8004e0 <twi_masterBufferLength>
    1d1e:	56 2f       	mov	r21, r22
    1d20:	a2 ee       	ldi	r26, 0xE2	; 226
    1d22:	b4 e0       	ldi	r27, 0x04	; 4
    1d24:	fb 01       	movw	r30, r22
    1d26:	3e 2f       	mov	r19, r30
    1d28:	35 1b       	sub	r19, r21
    1d2a:	34 17       	cp	r19, r20
    1d2c:	18 f4       	brcc	.+6      	; 0x1d34 <twi_writeTo+0x3e>
    1d2e:	31 91       	ld	r19, Z+
    1d30:	3d 93       	st	X+, r19
    1d32:	f9 cf       	rjmp	.-14     	; 0x1d26 <twi_writeTo+0x30>
    1d34:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <twi_slarw>
    1d38:	30 91 08 05 	lds	r19, 0x0508	; 0x800508 <twi_slarw>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	83 2b       	or	r24, r19
    1d40:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <twi_slarw>
    1d44:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <twi_inRepStart>
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	61 f4       	brne	.+24     	; 0x1d64 <twi_writeTo+0x6e>
    1d4c:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <twi_inRepStart>
    1d50:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <twi_slarw>
    1d54:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1d58:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1d5c:	83 fd       	sbrc	r24, 3
    1d5e:	f8 cf       	rjmp	.-16     	; 0x1d50 <twi_writeTo+0x5a>
    1d60:	85 ec       	ldi	r24, 0xC5	; 197
    1d62:	01 c0       	rjmp	.+2      	; 0x1d66 <twi_writeTo+0x70>
    1d64:	85 ee       	ldi	r24, 0xE5	; 229
    1d66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1d6a:	22 23       	and	r18, r18
    1d6c:	21 f0       	breq	.+8      	; 0x1d76 <twi_writeTo+0x80>
    1d6e:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <twi_state>
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	d1 f3       	breq	.-12     	; 0x1d6a <twi_writeTo+0x74>
    1d76:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_error>
    1d7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d7c:	79 f0       	breq	.+30     	; 0x1d9c <twi_writeTo+0xa6>
    1d7e:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_error>
    1d82:	80 32       	cpi	r24, 0x20	; 32
    1d84:	41 f0       	breq	.+16     	; 0x1d96 <twi_writeTo+0xa0>
    1d86:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_error>
    1d8a:	80 33       	cpi	r24, 0x30	; 48
    1d8c:	31 f0       	breq	.+12     	; 0x1d9a <twi_writeTo+0xa4>
    1d8e:	94 e0       	ldi	r25, 0x04	; 4
    1d90:	05 c0       	rjmp	.+10     	; 0x1d9c <twi_writeTo+0xa6>
    1d92:	91 e0       	ldi	r25, 0x01	; 1
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <twi_writeTo+0xa6>
    1d96:	92 e0       	ldi	r25, 0x02	; 2
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <twi_writeTo+0xa6>
    1d9a:	93 e0       	ldi	r25, 0x03	; 3
    1d9c:	89 2f       	mov	r24, r25
    1d9e:	0f 91       	pop	r16
    1da0:	08 95       	ret

00001da2 <twi_transmit>:
    1da2:	40 91 be 04 	lds	r20, 0x04BE	; 0x8004be <twi_txBufferLength>
    1da6:	26 2f       	mov	r18, r22
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	24 0f       	add	r18, r20
    1dac:	31 1d       	adc	r19, r1
    1dae:	21 32       	cpi	r18, 0x21	; 33
    1db0:	31 05       	cpc	r19, r1
    1db2:	dc f4       	brge	.+54     	; 0x1dea <twi_transmit+0x48>
    1db4:	20 91 09 05 	lds	r18, 0x0509	; 0x800509 <twi_state>
    1db8:	24 30       	cpi	r18, 0x04	; 4
    1dba:	c9 f4       	brne	.+50     	; 0x1dee <twi_transmit+0x4c>
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	86 17       	cp	r24, r22
    1dc4:	58 f4       	brcc	.+22     	; 0x1ddc <twi_transmit+0x3a>
    1dc6:	30 91 be 04 	lds	r19, 0x04BE	; 0x8004be <twi_txBufferLength>
    1dca:	21 91       	ld	r18, Z+
    1dcc:	dc 01       	movw	r26, r24
    1dce:	a0 54       	subi	r26, 0x40	; 64
    1dd0:	bb 4f       	sbci	r27, 0xFB	; 251
    1dd2:	a3 0f       	add	r26, r19
    1dd4:	b1 1d       	adc	r27, r1
    1dd6:	2c 93       	st	X, r18
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	f3 cf       	rjmp	.-26     	; 0x1dc2 <twi_transmit+0x20>
    1ddc:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <twi_txBufferLength>
    1de0:	68 0f       	add	r22, r24
    1de2:	60 93 be 04 	sts	0x04BE, r22	; 0x8004be <twi_txBufferLength>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	08 95       	ret
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	08 95       	ret
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	08 95       	ret

00001df2 <twi_attachSlaveRxEvent>:
    1df2:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <twi_onSlaveReceive+0x1>
    1df6:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <twi_onSlaveReceive>
    1dfa:	08 95       	ret

00001dfc <twi_attachSlaveTxEvent>:
    1dfc:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <twi_onSlaveTransmit+0x1>
    1e00:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <twi_onSlaveTransmit>
    1e04:	08 95       	ret

00001e06 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1e06:	85 ed       	ldi	r24, 0xD5	; 213
    1e08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1e0c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1e10:	84 fd       	sbrc	r24, 4
    1e12:	fc cf       	rjmp	.-8      	; 0x1e0c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1e14:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_state>
    1e18:	08 95       	ret

00001e1a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1e1a:	85 ec       	ldi	r24, 0xC5	; 197
    1e1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    1e20:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_state>
    1e24:	08 95       	ret

00001e26 <__vector_39>:
}

ISR(TWI_vect)
{
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	0b b6       	in	r0, 0x3b	; 59
    1e32:	0f 92       	push	r0
    1e34:	2f 93       	push	r18
    1e36:	3f 93       	push	r19
    1e38:	4f 93       	push	r20
    1e3a:	5f 93       	push	r21
    1e3c:	6f 93       	push	r22
    1e3e:	7f 93       	push	r23
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
  switch(TW_STATUS){
    1e4c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1e50:	88 7f       	andi	r24, 0xF8	; 248
    1e52:	80 36       	cpi	r24, 0x60	; 96
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <__vector_39+0x32>
    1e56:	9d c0       	rjmp	.+314    	; 0x1f92 <__vector_39+0x16c>
    1e58:	70 f5       	brcc	.+92     	; 0x1eb6 <__vector_39+0x90>
    1e5a:	88 32       	cpi	r24, 0x28	; 40
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <__vector_39+0x3a>
    1e5e:	5c c0       	rjmp	.+184    	; 0x1f18 <__vector_39+0xf2>
    1e60:	90 f4       	brcc	.+36     	; 0x1e86 <__vector_39+0x60>
    1e62:	80 31       	cpi	r24, 0x10	; 16
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <__vector_39+0x42>
    1e66:	55 c0       	rjmp	.+170    	; 0x1f12 <__vector_39+0xec>
    1e68:	38 f4       	brcc	.+14     	; 0x1e78 <__vector_39+0x52>
    1e6a:	88 23       	and	r24, r24
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <__vector_39+0x4a>
    1e6e:	f3 c0       	rjmp	.+486    	; 0x2056 <__vector_39+0x230>
    1e70:	88 30       	cpi	r24, 0x08	; 8
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <__vector_39+0x50>
    1e74:	4e c0       	rjmp	.+156    	; 0x1f12 <__vector_39+0xec>
    1e76:	f2 c0       	rjmp	.+484    	; 0x205c <__vector_39+0x236>
    1e78:	88 31       	cpi	r24, 0x18	; 24
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <__vector_39+0x58>
    1e7c:	4d c0       	rjmp	.+154    	; 0x1f18 <__vector_39+0xf2>
    1e7e:	80 32       	cpi	r24, 0x20	; 32
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <__vector_39+0x5e>
    1e82:	5e c0       	rjmp	.+188    	; 0x1f40 <__vector_39+0x11a>
    1e84:	eb c0       	rjmp	.+470    	; 0x205c <__vector_39+0x236>
    1e86:	80 34       	cpi	r24, 0x40	; 64
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <__vector_39+0x66>
    1e8a:	69 c0       	rjmp	.+210    	; 0x1f5e <__vector_39+0x138>
    1e8c:	50 f4       	brcc	.+20     	; 0x1ea2 <__vector_39+0x7c>
    1e8e:	80 33       	cpi	r24, 0x30	; 48
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <__vector_39+0x6e>
    1e92:	56 c0       	rjmp	.+172    	; 0x1f40 <__vector_39+0x11a>
    1e94:	88 33       	cpi	r24, 0x38	; 56
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <__vector_39+0x74>
    1e98:	e1 c0       	rjmp	.+450    	; 0x205c <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e9a:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <twi_error>
      twi_releaseBus();
    1e9e:	bd df       	rcall	.-134    	; 0x1e1a <twi_releaseBus>
      break;
    1ea0:	dd c0       	rjmp	.+442    	; 0x205c <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ea2:	80 35       	cpi	r24, 0x50	; 80
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <__vector_39+0x82>
    1ea6:	4f c0       	rjmp	.+158    	; 0x1f46 <__vector_39+0x120>
    1ea8:	88 35       	cpi	r24, 0x58	; 88
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <__vector_39+0x88>
    1eac:	5d c0       	rjmp	.+186    	; 0x1f68 <__vector_39+0x142>
    1eae:	88 34       	cpi	r24, 0x48	; 72
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <__vector_39+0x8e>
    1eb2:	d4 c0       	rjmp	.+424    	; 0x205c <__vector_39+0x236>
    1eb4:	d2 c0       	rjmp	.+420    	; 0x205a <__vector_39+0x234>
    1eb6:	88 39       	cpi	r24, 0x98	; 152
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <__vector_39+0x96>
    1eba:	c3 c0       	rjmp	.+390    	; 0x2042 <__vector_39+0x21c>
    1ebc:	a8 f4       	brcc	.+42     	; 0x1ee8 <__vector_39+0xc2>
    1ebe:	88 37       	cpi	r24, 0x78	; 120
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <__vector_39+0x9e>
    1ec2:	67 c0       	rjmp	.+206    	; 0x1f92 <__vector_39+0x16c>
    1ec4:	38 f4       	brcc	.+14     	; 0x1ed4 <__vector_39+0xae>
    1ec6:	88 36       	cpi	r24, 0x68	; 104
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <__vector_39+0xa6>
    1eca:	63 c0       	rjmp	.+198    	; 0x1f92 <__vector_39+0x16c>
    1ecc:	80 37       	cpi	r24, 0x70	; 112
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <__vector_39+0xac>
    1ed0:	60 c0       	rjmp	.+192    	; 0x1f92 <__vector_39+0x16c>
    1ed2:	c4 c0       	rjmp	.+392    	; 0x205c <__vector_39+0x236>
    1ed4:	88 38       	cpi	r24, 0x88	; 136
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <__vector_39+0xb4>
    1ed8:	b4 c0       	rjmp	.+360    	; 0x2042 <__vector_39+0x21c>
    1eda:	80 39       	cpi	r24, 0x90	; 144
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <__vector_39+0xba>
    1ede:	5f c0       	rjmp	.+190    	; 0x1f9e <__vector_39+0x178>
    1ee0:	80 38       	cpi	r24, 0x80	; 128
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <__vector_39+0xc0>
    1ee4:	bb c0       	rjmp	.+374    	; 0x205c <__vector_39+0x236>
    1ee6:	5b c0       	rjmp	.+182    	; 0x1f9e <__vector_39+0x178>
    1ee8:	80 3b       	cpi	r24, 0xB0	; 176
    1eea:	09 f4       	brne	.+2      	; 0x1eee <__vector_39+0xc8>
    1eec:	82 c0       	rjmp	.+260    	; 0x1ff2 <__vector_39+0x1cc>
    1eee:	38 f4       	brcc	.+14     	; 0x1efe <__vector_39+0xd8>
    1ef0:	80 3a       	cpi	r24, 0xA0	; 160
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <__vector_39+0xd0>
    1ef4:	66 c0       	rjmp	.+204    	; 0x1fc2 <__vector_39+0x19c>
    1ef6:	88 3a       	cpi	r24, 0xA8	; 168
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <__vector_39+0xd6>
    1efa:	7b c0       	rjmp	.+246    	; 0x1ff2 <__vector_39+0x1cc>
    1efc:	af c0       	rjmp	.+350    	; 0x205c <__vector_39+0x236>
    1efe:	80 3c       	cpi	r24, 0xC0	; 192
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <__vector_39+0xde>
    1f02:	a3 c0       	rjmp	.+326    	; 0x204a <__vector_39+0x224>
    1f04:	88 3c       	cpi	r24, 0xC8	; 200
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <__vector_39+0xe4>
    1f08:	a0 c0       	rjmp	.+320    	; 0x204a <__vector_39+0x224>
    1f0a:	88 3b       	cpi	r24, 0xB8	; 184
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <__vector_39+0xea>
    1f0e:	86 c0       	rjmp	.+268    	; 0x201c <__vector_39+0x1f6>
    1f10:	a5 c0       	rjmp	.+330    	; 0x205c <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1f12:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <twi_slarw>
    1f16:	10 c0       	rjmp	.+32     	; 0x1f38 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f18:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <twi_masterBufferIndex>
    1f1c:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <twi_masterBufferLength>
    1f20:	98 17       	cp	r25, r24
    1f22:	70 f5       	brcc	.+92     	; 0x1f80 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f24:	e0 91 e1 04 	lds	r30, 0x04E1	; 0x8004e1 <twi_masterBufferIndex>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	8e 0f       	add	r24, r30
    1f2c:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <twi_masterBufferIndex>
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	ee 51       	subi	r30, 0x1E	; 30
    1f34:	fb 4f       	sbci	r31, 0xFB	; 251
    1f36:	80 81       	ld	r24, Z
    1f38:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f3c:	85 ec       	ldi	r24, 0xC5	; 197
    1f3e:	82 c0       	rjmp	.+260    	; 0x2044 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1f40:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <twi_error>
    1f44:	8a c0       	rjmp	.+276    	; 0x205a <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f46:	e0 91 e1 04 	lds	r30, 0x04E1	; 0x8004e1 <twi_masterBufferIndex>
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	8e 0f       	add	r24, r30
    1f4e:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <twi_masterBufferIndex>
    1f52:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	ee 51       	subi	r30, 0x1E	; 30
    1f5a:	fb 4f       	sbci	r31, 0xFB	; 251
    1f5c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f5e:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <twi_masterBufferIndex>
    1f62:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <twi_masterBufferLength>
    1f66:	6a c0       	rjmp	.+212    	; 0x203c <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f68:	e0 91 e1 04 	lds	r30, 0x04E1	; 0x8004e1 <twi_masterBufferIndex>
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	8e 0f       	add	r24, r30
    1f70:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <twi_masterBufferIndex>
    1f74:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	ee 51       	subi	r30, 0x1E	; 30
    1f7c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f7e:	80 83       	st	Z, r24
	if (twi_sendStop)
    1f80:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <twi_sendStop>
    1f84:	81 11       	cpse	r24, r1
    1f86:	69 c0       	rjmp	.+210    	; 0x205a <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1f8e:	84 ea       	ldi	r24, 0xA4	; 164
    1f90:	5d c0       	rjmp	.+186    	; 0x204c <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1f98:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <twi_rxBufferIndex>
    1f9c:	cf cf       	rjmp	.-98     	; 0x1f3c <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f9e:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <twi_rxBufferIndex>
    1fa2:	80 32       	cpi	r24, 0x20	; 32
    1fa4:	08 f0       	brcs	.+2      	; 0x1fa8 <__vector_39+0x182>
    1fa6:	4d c0       	rjmp	.+154    	; 0x2042 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1fa8:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <twi_rxBufferIndex>
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	8e 0f       	add	r24, r30
    1fb0:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <twi_rxBufferIndex>
    1fb4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	e2 56       	subi	r30, 0x62	; 98
    1fbc:	fb 4f       	sbci	r31, 0xFB	; 251
    1fbe:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1fc0:	bd cf       	rjmp	.-134    	; 0x1f3c <__vector_39+0x116>
    1fc2:	2b df       	rcall	.-426    	; 0x1e1a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1fc4:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <twi_rxBufferIndex>
    1fc8:	80 32       	cpi	r24, 0x20	; 32
    1fca:	30 f4       	brcc	.+12     	; 0x1fd8 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1fcc:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <twi_rxBufferIndex>
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	e2 56       	subi	r30, 0x62	; 98
    1fd4:	fb 4f       	sbci	r31, 0xFB	; 251
    1fd6:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1fd8:	60 91 9d 04 	lds	r22, 0x049D	; 0x80049d <twi_rxBufferIndex>
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <twi_onSlaveReceive>
    1fe2:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <twi_onSlaveReceive+0x1>
    1fe6:	8e e9       	ldi	r24, 0x9E	; 158
    1fe8:	94 e0       	ldi	r25, 0x04	; 4
    1fea:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1fec:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <twi_rxBufferIndex>
      break;
    1ff0:	35 c0       	rjmp	.+106    	; 0x205c <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1ff2:	84 e0       	ldi	r24, 0x04	; 4
    1ff4:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ff8:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1ffc:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2000:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <twi_onSlaveTransmit>
    2004:	f0 91 05 05 	lds	r31, 0x0505	; 0x800505 <twi_onSlaveTransmit+0x1>
    2008:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    200a:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <twi_txBufferLength>
    200e:	81 11       	cpse	r24, r1
    2010:	05 c0       	rjmp	.+10     	; 0x201c <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2018:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    201c:	e0 91 bf 04 	lds	r30, 0x04BF	; 0x8004bf <twi_txBufferIndex>
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	8e 0f       	add	r24, r30
    2024:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <twi_txBufferIndex>
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	e0 54       	subi	r30, 0x40	; 64
    202c:	fb 4f       	sbci	r31, 0xFB	; 251
    202e:	80 81       	ld	r24, Z
    2030:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2034:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <twi_txBufferIndex>
    2038:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <twi_txBufferLength>
    203c:	98 17       	cp	r25, r24
    203e:	08 f4       	brcc	.+2      	; 0x2042 <__vector_39+0x21c>
    2040:	7d cf       	rjmp	.-262    	; 0x1f3c <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2042:	85 e8       	ldi	r24, 0x85	; 133
    2044:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2048:	09 c0       	rjmp	.+18     	; 0x205c <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    204a:	85 ec       	ldi	r24, 0xC5	; 197
    204c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2050:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_state>
      break;
    2054:	03 c0       	rjmp	.+6      	; 0x205c <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2056:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <twi_error>
      twi_stop();
    205a:	d5 de       	rcall	.-598    	; 0x1e06 <twi_stop>
      break;
  }
}
    205c:	ff 91       	pop	r31
    205e:	ef 91       	pop	r30
    2060:	bf 91       	pop	r27
    2062:	af 91       	pop	r26
    2064:	9f 91       	pop	r25
    2066:	8f 91       	pop	r24
    2068:	7f 91       	pop	r23
    206a:	6f 91       	pop	r22
    206c:	5f 91       	pop	r21
    206e:	4f 91       	pop	r20
    2070:	3f 91       	pop	r19
    2072:	2f 91       	pop	r18
    2074:	0f 90       	pop	r0
    2076:	0b be       	out	0x3b, r0	; 59
    2078:	0f 90       	pop	r0
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	0f 90       	pop	r0
    207e:	1f 90       	pop	r1
    2080:	18 95       	reti

00002082 <__udivmodsi4>:
    2082:	a1 e2       	ldi	r26, 0x21	; 33
    2084:	1a 2e       	mov	r1, r26
    2086:	aa 1b       	sub	r26, r26
    2088:	bb 1b       	sub	r27, r27
    208a:	fd 01       	movw	r30, r26
    208c:	0d c0       	rjmp	.+26     	; 0x20a8 <__udivmodsi4_ep>

0000208e <__udivmodsi4_loop>:
    208e:	aa 1f       	adc	r26, r26
    2090:	bb 1f       	adc	r27, r27
    2092:	ee 1f       	adc	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	a2 17       	cp	r26, r18
    2098:	b3 07       	cpc	r27, r19
    209a:	e4 07       	cpc	r30, r20
    209c:	f5 07       	cpc	r31, r21
    209e:	20 f0       	brcs	.+8      	; 0x20a8 <__udivmodsi4_ep>
    20a0:	a2 1b       	sub	r26, r18
    20a2:	b3 0b       	sbc	r27, r19
    20a4:	e4 0b       	sbc	r30, r20
    20a6:	f5 0b       	sbc	r31, r21

000020a8 <__udivmodsi4_ep>:
    20a8:	66 1f       	adc	r22, r22
    20aa:	77 1f       	adc	r23, r23
    20ac:	88 1f       	adc	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	1a 94       	dec	r1
    20b2:	69 f7       	brne	.-38     	; 0x208e <__udivmodsi4_loop>
    20b4:	60 95       	com	r22
    20b6:	70 95       	com	r23
    20b8:	80 95       	com	r24
    20ba:	90 95       	com	r25
    20bc:	9b 01       	movw	r18, r22
    20be:	ac 01       	movw	r20, r24
    20c0:	bd 01       	movw	r22, r26
    20c2:	cf 01       	movw	r24, r30
    20c4:	08 95       	ret

000020c6 <__tablejump2__>:
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	88 1f       	adc	r24, r24
    20cc:	8b bf       	out	0x3b, r24	; 59
    20ce:	07 90       	elpm	r0, Z+
    20d0:	f6 91       	elpm	r31, Z
    20d2:	e0 2d       	mov	r30, r0
    20d4:	19 94       	eijmp

000020d6 <sprintf>:
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	2e 97       	sbiw	r28, 0x0e	; 14
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	0e 89       	ldd	r16, Y+22	; 0x16
    20f0:	1f 89       	ldd	r17, Y+23	; 0x17
    20f2:	86 e0       	ldi	r24, 0x06	; 6
    20f4:	8c 83       	std	Y+4, r24	; 0x04
    20f6:	1a 83       	std	Y+2, r17	; 0x02
    20f8:	09 83       	std	Y+1, r16	; 0x01
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
    20fc:	9f e7       	ldi	r25, 0x7F	; 127
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	ae 01       	movw	r20, r28
    2104:	46 5e       	subi	r20, 0xE6	; 230
    2106:	5f 4f       	sbci	r21, 0xFF	; 255
    2108:	68 8d       	ldd	r22, Y+24	; 0x18
    210a:	79 8d       	ldd	r23, Y+25	; 0x19
    210c:	ce 01       	movw	r24, r28
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	10 d0       	rcall	.+32     	; 0x2132 <vfprintf>
    2112:	ef 81       	ldd	r30, Y+7	; 0x07
    2114:	f8 85       	ldd	r31, Y+8	; 0x08
    2116:	e0 0f       	add	r30, r16
    2118:	f1 1f       	adc	r31, r17
    211a:	10 82       	st	Z, r1
    211c:	2e 96       	adiw	r28, 0x0e	; 14
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	08 95       	ret

00002132 <vfprintf>:
    2132:	2f 92       	push	r2
    2134:	3f 92       	push	r3
    2136:	4f 92       	push	r4
    2138:	5f 92       	push	r5
    213a:	6f 92       	push	r6
    213c:	7f 92       	push	r7
    213e:	8f 92       	push	r8
    2140:	9f 92       	push	r9
    2142:	af 92       	push	r10
    2144:	bf 92       	push	r11
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	2b 97       	sbiw	r28, 0x0b	; 11
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	6c 01       	movw	r12, r24
    2168:	7b 01       	movw	r14, r22
    216a:	8a 01       	movw	r16, r20
    216c:	fc 01       	movw	r30, r24
    216e:	17 82       	std	Z+7, r1	; 0x07
    2170:	16 82       	std	Z+6, r1	; 0x06
    2172:	83 81       	ldd	r24, Z+3	; 0x03
    2174:	81 ff       	sbrs	r24, 1
    2176:	bf c1       	rjmp	.+894    	; 0x24f6 <__stack+0x2f7>
    2178:	ce 01       	movw	r24, r28
    217a:	01 96       	adiw	r24, 0x01	; 1
    217c:	3c 01       	movw	r6, r24
    217e:	f6 01       	movw	r30, r12
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	f7 01       	movw	r30, r14
    2184:	93 fd       	sbrc	r25, 3
    2186:	85 91       	lpm	r24, Z+
    2188:	93 ff       	sbrs	r25, 3
    218a:	81 91       	ld	r24, Z+
    218c:	7f 01       	movw	r14, r30
    218e:	88 23       	and	r24, r24
    2190:	09 f4       	brne	.+2      	; 0x2194 <vfprintf+0x62>
    2192:	ad c1       	rjmp	.+858    	; 0x24ee <__stack+0x2ef>
    2194:	85 32       	cpi	r24, 0x25	; 37
    2196:	39 f4       	brne	.+14     	; 0x21a6 <vfprintf+0x74>
    2198:	93 fd       	sbrc	r25, 3
    219a:	85 91       	lpm	r24, Z+
    219c:	93 ff       	sbrs	r25, 3
    219e:	81 91       	ld	r24, Z+
    21a0:	7f 01       	movw	r14, r30
    21a2:	85 32       	cpi	r24, 0x25	; 37
    21a4:	21 f4       	brne	.+8      	; 0x21ae <vfprintf+0x7c>
    21a6:	b6 01       	movw	r22, r12
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	d6 d1       	rcall	.+940    	; 0x2558 <fputc>
    21ac:	e8 cf       	rjmp	.-48     	; 0x217e <vfprintf+0x4c>
    21ae:	91 2c       	mov	r9, r1
    21b0:	21 2c       	mov	r2, r1
    21b2:	31 2c       	mov	r3, r1
    21b4:	ff e1       	ldi	r31, 0x1F	; 31
    21b6:	f3 15       	cp	r31, r3
    21b8:	d8 f0       	brcs	.+54     	; 0x21f0 <vfprintf+0xbe>
    21ba:	8b 32       	cpi	r24, 0x2B	; 43
    21bc:	79 f0       	breq	.+30     	; 0x21dc <vfprintf+0xaa>
    21be:	38 f4       	brcc	.+14     	; 0x21ce <vfprintf+0x9c>
    21c0:	80 32       	cpi	r24, 0x20	; 32
    21c2:	79 f0       	breq	.+30     	; 0x21e2 <vfprintf+0xb0>
    21c4:	83 32       	cpi	r24, 0x23	; 35
    21c6:	a1 f4       	brne	.+40     	; 0x21f0 <vfprintf+0xbe>
    21c8:	23 2d       	mov	r18, r3
    21ca:	20 61       	ori	r18, 0x10	; 16
    21cc:	1d c0       	rjmp	.+58     	; 0x2208 <__stack+0x9>
    21ce:	8d 32       	cpi	r24, 0x2D	; 45
    21d0:	61 f0       	breq	.+24     	; 0x21ea <vfprintf+0xb8>
    21d2:	80 33       	cpi	r24, 0x30	; 48
    21d4:	69 f4       	brne	.+26     	; 0x21f0 <vfprintf+0xbe>
    21d6:	23 2d       	mov	r18, r3
    21d8:	21 60       	ori	r18, 0x01	; 1
    21da:	16 c0       	rjmp	.+44     	; 0x2208 <__stack+0x9>
    21dc:	83 2d       	mov	r24, r3
    21de:	82 60       	ori	r24, 0x02	; 2
    21e0:	38 2e       	mov	r3, r24
    21e2:	e3 2d       	mov	r30, r3
    21e4:	e4 60       	ori	r30, 0x04	; 4
    21e6:	3e 2e       	mov	r3, r30
    21e8:	2a c0       	rjmp	.+84     	; 0x223e <__stack+0x3f>
    21ea:	f3 2d       	mov	r31, r3
    21ec:	f8 60       	ori	r31, 0x08	; 8
    21ee:	1d c0       	rjmp	.+58     	; 0x222a <__stack+0x2b>
    21f0:	37 fc       	sbrc	r3, 7
    21f2:	2d c0       	rjmp	.+90     	; 0x224e <__stack+0x4f>
    21f4:	20 ed       	ldi	r18, 0xD0	; 208
    21f6:	28 0f       	add	r18, r24
    21f8:	2a 30       	cpi	r18, 0x0A	; 10
    21fa:	40 f0       	brcs	.+16     	; 0x220c <__stack+0xd>
    21fc:	8e 32       	cpi	r24, 0x2E	; 46
    21fe:	b9 f4       	brne	.+46     	; 0x222e <__stack+0x2f>
    2200:	36 fc       	sbrc	r3, 6
    2202:	75 c1       	rjmp	.+746    	; 0x24ee <__stack+0x2ef>
    2204:	23 2d       	mov	r18, r3
    2206:	20 64       	ori	r18, 0x40	; 64
    2208:	32 2e       	mov	r3, r18
    220a:	19 c0       	rjmp	.+50     	; 0x223e <__stack+0x3f>
    220c:	36 fe       	sbrs	r3, 6
    220e:	06 c0       	rjmp	.+12     	; 0x221c <__stack+0x1d>
    2210:	8a e0       	ldi	r24, 0x0A	; 10
    2212:	98 9e       	mul	r9, r24
    2214:	20 0d       	add	r18, r0
    2216:	11 24       	eor	r1, r1
    2218:	92 2e       	mov	r9, r18
    221a:	11 c0       	rjmp	.+34     	; 0x223e <__stack+0x3f>
    221c:	ea e0       	ldi	r30, 0x0A	; 10
    221e:	2e 9e       	mul	r2, r30
    2220:	20 0d       	add	r18, r0
    2222:	11 24       	eor	r1, r1
    2224:	22 2e       	mov	r2, r18
    2226:	f3 2d       	mov	r31, r3
    2228:	f0 62       	ori	r31, 0x20	; 32
    222a:	3f 2e       	mov	r3, r31
    222c:	08 c0       	rjmp	.+16     	; 0x223e <__stack+0x3f>
    222e:	8c 36       	cpi	r24, 0x6C	; 108
    2230:	21 f4       	brne	.+8      	; 0x223a <__stack+0x3b>
    2232:	83 2d       	mov	r24, r3
    2234:	80 68       	ori	r24, 0x80	; 128
    2236:	38 2e       	mov	r3, r24
    2238:	02 c0       	rjmp	.+4      	; 0x223e <__stack+0x3f>
    223a:	88 36       	cpi	r24, 0x68	; 104
    223c:	41 f4       	brne	.+16     	; 0x224e <__stack+0x4f>
    223e:	f7 01       	movw	r30, r14
    2240:	93 fd       	sbrc	r25, 3
    2242:	85 91       	lpm	r24, Z+
    2244:	93 ff       	sbrs	r25, 3
    2246:	81 91       	ld	r24, Z+
    2248:	7f 01       	movw	r14, r30
    224a:	81 11       	cpse	r24, r1
    224c:	b3 cf       	rjmp	.-154    	; 0x21b4 <vfprintf+0x82>
    224e:	98 2f       	mov	r25, r24
    2250:	9f 7d       	andi	r25, 0xDF	; 223
    2252:	95 54       	subi	r25, 0x45	; 69
    2254:	93 30       	cpi	r25, 0x03	; 3
    2256:	28 f4       	brcc	.+10     	; 0x2262 <__stack+0x63>
    2258:	0c 5f       	subi	r16, 0xFC	; 252
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	9f e3       	ldi	r25, 0x3F	; 63
    225e:	99 83       	std	Y+1, r25	; 0x01
    2260:	0d c0       	rjmp	.+26     	; 0x227c <__stack+0x7d>
    2262:	83 36       	cpi	r24, 0x63	; 99
    2264:	31 f0       	breq	.+12     	; 0x2272 <__stack+0x73>
    2266:	83 37       	cpi	r24, 0x73	; 115
    2268:	71 f0       	breq	.+28     	; 0x2286 <__stack+0x87>
    226a:	83 35       	cpi	r24, 0x53	; 83
    226c:	09 f0       	breq	.+2      	; 0x2270 <__stack+0x71>
    226e:	55 c0       	rjmp	.+170    	; 0x231a <__stack+0x11b>
    2270:	20 c0       	rjmp	.+64     	; 0x22b2 <__stack+0xb3>
    2272:	f8 01       	movw	r30, r16
    2274:	80 81       	ld	r24, Z
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	0e 5f       	subi	r16, 0xFE	; 254
    227a:	1f 4f       	sbci	r17, 0xFF	; 255
    227c:	88 24       	eor	r8, r8
    227e:	83 94       	inc	r8
    2280:	91 2c       	mov	r9, r1
    2282:	53 01       	movw	r10, r6
    2284:	12 c0       	rjmp	.+36     	; 0x22aa <__stack+0xab>
    2286:	28 01       	movw	r4, r16
    2288:	f2 e0       	ldi	r31, 0x02	; 2
    228a:	4f 0e       	add	r4, r31
    228c:	51 1c       	adc	r5, r1
    228e:	f8 01       	movw	r30, r16
    2290:	a0 80       	ld	r10, Z
    2292:	b1 80       	ldd	r11, Z+1	; 0x01
    2294:	36 fe       	sbrs	r3, 6
    2296:	03 c0       	rjmp	.+6      	; 0x229e <__stack+0x9f>
    2298:	69 2d       	mov	r22, r9
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <__stack+0xa3>
    229e:	6f ef       	ldi	r22, 0xFF	; 255
    22a0:	7f ef       	ldi	r23, 0xFF	; 255
    22a2:	c5 01       	movw	r24, r10
    22a4:	4e d1       	rcall	.+668    	; 0x2542 <strnlen>
    22a6:	4c 01       	movw	r8, r24
    22a8:	82 01       	movw	r16, r4
    22aa:	f3 2d       	mov	r31, r3
    22ac:	ff 77       	andi	r31, 0x7F	; 127
    22ae:	3f 2e       	mov	r3, r31
    22b0:	15 c0       	rjmp	.+42     	; 0x22dc <__stack+0xdd>
    22b2:	28 01       	movw	r4, r16
    22b4:	22 e0       	ldi	r18, 0x02	; 2
    22b6:	42 0e       	add	r4, r18
    22b8:	51 1c       	adc	r5, r1
    22ba:	f8 01       	movw	r30, r16
    22bc:	a0 80       	ld	r10, Z
    22be:	b1 80       	ldd	r11, Z+1	; 0x01
    22c0:	36 fe       	sbrs	r3, 6
    22c2:	03 c0       	rjmp	.+6      	; 0x22ca <__stack+0xcb>
    22c4:	69 2d       	mov	r22, r9
    22c6:	70 e0       	ldi	r23, 0x00	; 0
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <__stack+0xcf>
    22ca:	6f ef       	ldi	r22, 0xFF	; 255
    22cc:	7f ef       	ldi	r23, 0xFF	; 255
    22ce:	c5 01       	movw	r24, r10
    22d0:	2d d1       	rcall	.+602    	; 0x252c <strnlen_P>
    22d2:	4c 01       	movw	r8, r24
    22d4:	f3 2d       	mov	r31, r3
    22d6:	f0 68       	ori	r31, 0x80	; 128
    22d8:	3f 2e       	mov	r3, r31
    22da:	82 01       	movw	r16, r4
    22dc:	33 fc       	sbrc	r3, 3
    22de:	19 c0       	rjmp	.+50     	; 0x2312 <__stack+0x113>
    22e0:	82 2d       	mov	r24, r2
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	88 16       	cp	r8, r24
    22e6:	99 06       	cpc	r9, r25
    22e8:	a0 f4       	brcc	.+40     	; 0x2312 <__stack+0x113>
    22ea:	b6 01       	movw	r22, r12
    22ec:	80 e2       	ldi	r24, 0x20	; 32
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	33 d1       	rcall	.+614    	; 0x2558 <fputc>
    22f2:	2a 94       	dec	r2
    22f4:	f5 cf       	rjmp	.-22     	; 0x22e0 <__stack+0xe1>
    22f6:	f5 01       	movw	r30, r10
    22f8:	37 fc       	sbrc	r3, 7
    22fa:	85 91       	lpm	r24, Z+
    22fc:	37 fe       	sbrs	r3, 7
    22fe:	81 91       	ld	r24, Z+
    2300:	5f 01       	movw	r10, r30
    2302:	b6 01       	movw	r22, r12
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	28 d1       	rcall	.+592    	; 0x2558 <fputc>
    2308:	21 10       	cpse	r2, r1
    230a:	2a 94       	dec	r2
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	82 1a       	sub	r8, r18
    2310:	91 08       	sbc	r9, r1
    2312:	81 14       	cp	r8, r1
    2314:	91 04       	cpc	r9, r1
    2316:	79 f7       	brne	.-34     	; 0x22f6 <__stack+0xf7>
    2318:	e1 c0       	rjmp	.+450    	; 0x24dc <__stack+0x2dd>
    231a:	84 36       	cpi	r24, 0x64	; 100
    231c:	11 f0       	breq	.+4      	; 0x2322 <__stack+0x123>
    231e:	89 36       	cpi	r24, 0x69	; 105
    2320:	39 f5       	brne	.+78     	; 0x2370 <__stack+0x171>
    2322:	f8 01       	movw	r30, r16
    2324:	37 fe       	sbrs	r3, 7
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <__stack+0x137>
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	0c 5f       	subi	r16, 0xFC	; 252
    2332:	1f 4f       	sbci	r17, 0xFF	; 255
    2334:	08 c0       	rjmp	.+16     	; 0x2346 <__stack+0x147>
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	07 2e       	mov	r0, r23
    233c:	00 0c       	add	r0, r0
    233e:	88 0b       	sbc	r24, r24
    2340:	99 0b       	sbc	r25, r25
    2342:	0e 5f       	subi	r16, 0xFE	; 254
    2344:	1f 4f       	sbci	r17, 0xFF	; 255
    2346:	f3 2d       	mov	r31, r3
    2348:	ff 76       	andi	r31, 0x6F	; 111
    234a:	3f 2e       	mov	r3, r31
    234c:	97 ff       	sbrs	r25, 7
    234e:	09 c0       	rjmp	.+18     	; 0x2362 <__stack+0x163>
    2350:	90 95       	com	r25
    2352:	80 95       	com	r24
    2354:	70 95       	com	r23
    2356:	61 95       	neg	r22
    2358:	7f 4f       	sbci	r23, 0xFF	; 255
    235a:	8f 4f       	sbci	r24, 0xFF	; 255
    235c:	9f 4f       	sbci	r25, 0xFF	; 255
    235e:	f0 68       	ori	r31, 0x80	; 128
    2360:	3f 2e       	mov	r3, r31
    2362:	2a e0       	ldi	r18, 0x0A	; 10
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	a3 01       	movw	r20, r6
    2368:	33 d1       	rcall	.+614    	; 0x25d0 <__ultoa_invert>
    236a:	88 2e       	mov	r8, r24
    236c:	86 18       	sub	r8, r6
    236e:	44 c0       	rjmp	.+136    	; 0x23f8 <__stack+0x1f9>
    2370:	85 37       	cpi	r24, 0x75	; 117
    2372:	31 f4       	brne	.+12     	; 0x2380 <__stack+0x181>
    2374:	23 2d       	mov	r18, r3
    2376:	2f 7e       	andi	r18, 0xEF	; 239
    2378:	b2 2e       	mov	r11, r18
    237a:	2a e0       	ldi	r18, 0x0A	; 10
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	25 c0       	rjmp	.+74     	; 0x23ca <__stack+0x1cb>
    2380:	93 2d       	mov	r25, r3
    2382:	99 7f       	andi	r25, 0xF9	; 249
    2384:	b9 2e       	mov	r11, r25
    2386:	8f 36       	cpi	r24, 0x6F	; 111
    2388:	c1 f0       	breq	.+48     	; 0x23ba <__stack+0x1bb>
    238a:	18 f4       	brcc	.+6      	; 0x2392 <__stack+0x193>
    238c:	88 35       	cpi	r24, 0x58	; 88
    238e:	79 f0       	breq	.+30     	; 0x23ae <__stack+0x1af>
    2390:	ae c0       	rjmp	.+348    	; 0x24ee <__stack+0x2ef>
    2392:	80 37       	cpi	r24, 0x70	; 112
    2394:	19 f0       	breq	.+6      	; 0x239c <__stack+0x19d>
    2396:	88 37       	cpi	r24, 0x78	; 120
    2398:	21 f0       	breq	.+8      	; 0x23a2 <__stack+0x1a3>
    239a:	a9 c0       	rjmp	.+338    	; 0x24ee <__stack+0x2ef>
    239c:	e9 2f       	mov	r30, r25
    239e:	e0 61       	ori	r30, 0x10	; 16
    23a0:	be 2e       	mov	r11, r30
    23a2:	b4 fe       	sbrs	r11, 4
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <__stack+0x1c1>
    23a6:	fb 2d       	mov	r31, r11
    23a8:	f4 60       	ori	r31, 0x04	; 4
    23aa:	bf 2e       	mov	r11, r31
    23ac:	09 c0       	rjmp	.+18     	; 0x23c0 <__stack+0x1c1>
    23ae:	34 fe       	sbrs	r3, 4
    23b0:	0a c0       	rjmp	.+20     	; 0x23c6 <__stack+0x1c7>
    23b2:	29 2f       	mov	r18, r25
    23b4:	26 60       	ori	r18, 0x06	; 6
    23b6:	b2 2e       	mov	r11, r18
    23b8:	06 c0       	rjmp	.+12     	; 0x23c6 <__stack+0x1c7>
    23ba:	28 e0       	ldi	r18, 0x08	; 8
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	05 c0       	rjmp	.+10     	; 0x23ca <__stack+0x1cb>
    23c0:	20 e1       	ldi	r18, 0x10	; 16
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <__stack+0x1cb>
    23c6:	20 e1       	ldi	r18, 0x10	; 16
    23c8:	32 e0       	ldi	r19, 0x02	; 2
    23ca:	f8 01       	movw	r30, r16
    23cc:	b7 fe       	sbrs	r11, 7
    23ce:	07 c0       	rjmp	.+14     	; 0x23de <__stack+0x1df>
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	93 81       	ldd	r25, Z+3	; 0x03
    23d8:	0c 5f       	subi	r16, 0xFC	; 252
    23da:	1f 4f       	sbci	r17, 0xFF	; 255
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <__stack+0x1eb>
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 5f       	subi	r16, 0xFE	; 254
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	a3 01       	movw	r20, r6
    23ec:	f1 d0       	rcall	.+482    	; 0x25d0 <__ultoa_invert>
    23ee:	88 2e       	mov	r8, r24
    23f0:	86 18       	sub	r8, r6
    23f2:	fb 2d       	mov	r31, r11
    23f4:	ff 77       	andi	r31, 0x7F	; 127
    23f6:	3f 2e       	mov	r3, r31
    23f8:	36 fe       	sbrs	r3, 6
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__stack+0x217>
    23fc:	23 2d       	mov	r18, r3
    23fe:	2e 7f       	andi	r18, 0xFE	; 254
    2400:	a2 2e       	mov	r10, r18
    2402:	89 14       	cp	r8, r9
    2404:	58 f4       	brcc	.+22     	; 0x241c <__stack+0x21d>
    2406:	34 fe       	sbrs	r3, 4
    2408:	0b c0       	rjmp	.+22     	; 0x2420 <__stack+0x221>
    240a:	32 fc       	sbrc	r3, 2
    240c:	09 c0       	rjmp	.+18     	; 0x2420 <__stack+0x221>
    240e:	83 2d       	mov	r24, r3
    2410:	8e 7e       	andi	r24, 0xEE	; 238
    2412:	a8 2e       	mov	r10, r24
    2414:	05 c0       	rjmp	.+10     	; 0x2420 <__stack+0x221>
    2416:	b8 2c       	mov	r11, r8
    2418:	a3 2c       	mov	r10, r3
    241a:	03 c0       	rjmp	.+6      	; 0x2422 <__stack+0x223>
    241c:	b8 2c       	mov	r11, r8
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <__stack+0x223>
    2420:	b9 2c       	mov	r11, r9
    2422:	a4 fe       	sbrs	r10, 4
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <__stack+0x245>
    2426:	fe 01       	movw	r30, r28
    2428:	e8 0d       	add	r30, r8
    242a:	f1 1d       	adc	r31, r1
    242c:	80 81       	ld	r24, Z
    242e:	80 33       	cpi	r24, 0x30	; 48
    2430:	21 f4       	brne	.+8      	; 0x243a <__stack+0x23b>
    2432:	9a 2d       	mov	r25, r10
    2434:	99 7e       	andi	r25, 0xE9	; 233
    2436:	a9 2e       	mov	r10, r25
    2438:	09 c0       	rjmp	.+18     	; 0x244c <__stack+0x24d>
    243a:	a2 fe       	sbrs	r10, 2
    243c:	06 c0       	rjmp	.+12     	; 0x244a <__stack+0x24b>
    243e:	b3 94       	inc	r11
    2440:	b3 94       	inc	r11
    2442:	04 c0       	rjmp	.+8      	; 0x244c <__stack+0x24d>
    2444:	8a 2d       	mov	r24, r10
    2446:	86 78       	andi	r24, 0x86	; 134
    2448:	09 f0       	breq	.+2      	; 0x244c <__stack+0x24d>
    244a:	b3 94       	inc	r11
    244c:	a3 fc       	sbrc	r10, 3
    244e:	10 c0       	rjmp	.+32     	; 0x2470 <__stack+0x271>
    2450:	a0 fe       	sbrs	r10, 0
    2452:	06 c0       	rjmp	.+12     	; 0x2460 <__stack+0x261>
    2454:	b2 14       	cp	r11, r2
    2456:	80 f4       	brcc	.+32     	; 0x2478 <__stack+0x279>
    2458:	28 0c       	add	r2, r8
    245a:	92 2c       	mov	r9, r2
    245c:	9b 18       	sub	r9, r11
    245e:	0d c0       	rjmp	.+26     	; 0x247a <__stack+0x27b>
    2460:	b2 14       	cp	r11, r2
    2462:	58 f4       	brcc	.+22     	; 0x247a <__stack+0x27b>
    2464:	b6 01       	movw	r22, r12
    2466:	80 e2       	ldi	r24, 0x20	; 32
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	76 d0       	rcall	.+236    	; 0x2558 <fputc>
    246c:	b3 94       	inc	r11
    246e:	f8 cf       	rjmp	.-16     	; 0x2460 <__stack+0x261>
    2470:	b2 14       	cp	r11, r2
    2472:	18 f4       	brcc	.+6      	; 0x247a <__stack+0x27b>
    2474:	2b 18       	sub	r2, r11
    2476:	02 c0       	rjmp	.+4      	; 0x247c <__stack+0x27d>
    2478:	98 2c       	mov	r9, r8
    247a:	21 2c       	mov	r2, r1
    247c:	a4 fe       	sbrs	r10, 4
    247e:	0f c0       	rjmp	.+30     	; 0x249e <__stack+0x29f>
    2480:	b6 01       	movw	r22, r12
    2482:	80 e3       	ldi	r24, 0x30	; 48
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	68 d0       	rcall	.+208    	; 0x2558 <fputc>
    2488:	a2 fe       	sbrs	r10, 2
    248a:	16 c0       	rjmp	.+44     	; 0x24b8 <__stack+0x2b9>
    248c:	a1 fc       	sbrc	r10, 1
    248e:	03 c0       	rjmp	.+6      	; 0x2496 <__stack+0x297>
    2490:	88 e7       	ldi	r24, 0x78	; 120
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	02 c0       	rjmp	.+4      	; 0x249a <__stack+0x29b>
    2496:	88 e5       	ldi	r24, 0x58	; 88
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	b6 01       	movw	r22, r12
    249c:	0c c0       	rjmp	.+24     	; 0x24b6 <__stack+0x2b7>
    249e:	8a 2d       	mov	r24, r10
    24a0:	86 78       	andi	r24, 0x86	; 134
    24a2:	51 f0       	breq	.+20     	; 0x24b8 <__stack+0x2b9>
    24a4:	a1 fe       	sbrs	r10, 1
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <__stack+0x2ad>
    24a8:	8b e2       	ldi	r24, 0x2B	; 43
    24aa:	01 c0       	rjmp	.+2      	; 0x24ae <__stack+0x2af>
    24ac:	80 e2       	ldi	r24, 0x20	; 32
    24ae:	a7 fc       	sbrc	r10, 7
    24b0:	8d e2       	ldi	r24, 0x2D	; 45
    24b2:	b6 01       	movw	r22, r12
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	50 d0       	rcall	.+160    	; 0x2558 <fputc>
    24b8:	89 14       	cp	r8, r9
    24ba:	30 f4       	brcc	.+12     	; 0x24c8 <__stack+0x2c9>
    24bc:	b6 01       	movw	r22, r12
    24be:	80 e3       	ldi	r24, 0x30	; 48
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	4a d0       	rcall	.+148    	; 0x2558 <fputc>
    24c4:	9a 94       	dec	r9
    24c6:	f8 cf       	rjmp	.-16     	; 0x24b8 <__stack+0x2b9>
    24c8:	8a 94       	dec	r8
    24ca:	f3 01       	movw	r30, r6
    24cc:	e8 0d       	add	r30, r8
    24ce:	f1 1d       	adc	r31, r1
    24d0:	80 81       	ld	r24, Z
    24d2:	b6 01       	movw	r22, r12
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	40 d0       	rcall	.+128    	; 0x2558 <fputc>
    24d8:	81 10       	cpse	r8, r1
    24da:	f6 cf       	rjmp	.-20     	; 0x24c8 <__stack+0x2c9>
    24dc:	22 20       	and	r2, r2
    24de:	09 f4       	brne	.+2      	; 0x24e2 <__stack+0x2e3>
    24e0:	4e ce       	rjmp	.-868    	; 0x217e <vfprintf+0x4c>
    24e2:	b6 01       	movw	r22, r12
    24e4:	80 e2       	ldi	r24, 0x20	; 32
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	37 d0       	rcall	.+110    	; 0x2558 <fputc>
    24ea:	2a 94       	dec	r2
    24ec:	f7 cf       	rjmp	.-18     	; 0x24dc <__stack+0x2dd>
    24ee:	f6 01       	movw	r30, r12
    24f0:	86 81       	ldd	r24, Z+6	; 0x06
    24f2:	97 81       	ldd	r25, Z+7	; 0x07
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <__stack+0x2fb>
    24f6:	8f ef       	ldi	r24, 0xFF	; 255
    24f8:	9f ef       	ldi	r25, 0xFF	; 255
    24fa:	2b 96       	adiw	r28, 0x0b	; 11
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	ff 90       	pop	r15
    2510:	ef 90       	pop	r14
    2512:	df 90       	pop	r13
    2514:	cf 90       	pop	r12
    2516:	bf 90       	pop	r11
    2518:	af 90       	pop	r10
    251a:	9f 90       	pop	r9
    251c:	8f 90       	pop	r8
    251e:	7f 90       	pop	r7
    2520:	6f 90       	pop	r6
    2522:	5f 90       	pop	r5
    2524:	4f 90       	pop	r4
    2526:	3f 90       	pop	r3
    2528:	2f 90       	pop	r2
    252a:	08 95       	ret

0000252c <strnlen_P>:
    252c:	fc 01       	movw	r30, r24
    252e:	05 90       	lpm	r0, Z+
    2530:	61 50       	subi	r22, 0x01	; 1
    2532:	70 40       	sbci	r23, 0x00	; 0
    2534:	01 10       	cpse	r0, r1
    2536:	d8 f7       	brcc	.-10     	; 0x252e <strnlen_P+0x2>
    2538:	80 95       	com	r24
    253a:	90 95       	com	r25
    253c:	8e 0f       	add	r24, r30
    253e:	9f 1f       	adc	r25, r31
    2540:	08 95       	ret

00002542 <strnlen>:
    2542:	fc 01       	movw	r30, r24
    2544:	61 50       	subi	r22, 0x01	; 1
    2546:	70 40       	sbci	r23, 0x00	; 0
    2548:	01 90       	ld	r0, Z+
    254a:	01 10       	cpse	r0, r1
    254c:	d8 f7       	brcc	.-10     	; 0x2544 <strnlen+0x2>
    254e:	80 95       	com	r24
    2550:	90 95       	com	r25
    2552:	8e 0f       	add	r24, r30
    2554:	9f 1f       	adc	r25, r31
    2556:	08 95       	ret

00002558 <fputc>:
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	fb 01       	movw	r30, r22
    2562:	23 81       	ldd	r18, Z+3	; 0x03
    2564:	21 fd       	sbrc	r18, 1
    2566:	03 c0       	rjmp	.+6      	; 0x256e <fputc+0x16>
    2568:	8f ef       	ldi	r24, 0xFF	; 255
    256a:	9f ef       	ldi	r25, 0xFF	; 255
    256c:	2c c0       	rjmp	.+88     	; 0x25c6 <fputc+0x6e>
    256e:	22 ff       	sbrs	r18, 2
    2570:	16 c0       	rjmp	.+44     	; 0x259e <fputc+0x46>
    2572:	46 81       	ldd	r20, Z+6	; 0x06
    2574:	57 81       	ldd	r21, Z+7	; 0x07
    2576:	24 81       	ldd	r18, Z+4	; 0x04
    2578:	35 81       	ldd	r19, Z+5	; 0x05
    257a:	42 17       	cp	r20, r18
    257c:	53 07       	cpc	r21, r19
    257e:	44 f4       	brge	.+16     	; 0x2590 <fputc+0x38>
    2580:	a0 81       	ld	r26, Z
    2582:	b1 81       	ldd	r27, Z+1	; 0x01
    2584:	9d 01       	movw	r18, r26
    2586:	2f 5f       	subi	r18, 0xFF	; 255
    2588:	3f 4f       	sbci	r19, 0xFF	; 255
    258a:	31 83       	std	Z+1, r19	; 0x01
    258c:	20 83       	st	Z, r18
    258e:	8c 93       	st	X, r24
    2590:	26 81       	ldd	r18, Z+6	; 0x06
    2592:	37 81       	ldd	r19, Z+7	; 0x07
    2594:	2f 5f       	subi	r18, 0xFF	; 255
    2596:	3f 4f       	sbci	r19, 0xFF	; 255
    2598:	37 83       	std	Z+7, r19	; 0x07
    259a:	26 83       	std	Z+6, r18	; 0x06
    259c:	14 c0       	rjmp	.+40     	; 0x25c6 <fputc+0x6e>
    259e:	8b 01       	movw	r16, r22
    25a0:	ec 01       	movw	r28, r24
    25a2:	fb 01       	movw	r30, r22
    25a4:	00 84       	ldd	r0, Z+8	; 0x08
    25a6:	f1 85       	ldd	r31, Z+9	; 0x09
    25a8:	e0 2d       	mov	r30, r0
    25aa:	19 95       	eicall
    25ac:	89 2b       	or	r24, r25
    25ae:	e1 f6       	brne	.-72     	; 0x2568 <fputc+0x10>
    25b0:	d8 01       	movw	r26, r16
    25b2:	16 96       	adiw	r26, 0x06	; 6
    25b4:	8d 91       	ld	r24, X+
    25b6:	9c 91       	ld	r25, X
    25b8:	17 97       	sbiw	r26, 0x07	; 7
    25ba:	01 96       	adiw	r24, 0x01	; 1
    25bc:	17 96       	adiw	r26, 0x07	; 7
    25be:	9c 93       	st	X, r25
    25c0:	8e 93       	st	-X, r24
    25c2:	16 97       	sbiw	r26, 0x06	; 6
    25c4:	ce 01       	movw	r24, r28
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	08 95       	ret

000025d0 <__ultoa_invert>:
    25d0:	fa 01       	movw	r30, r20
    25d2:	aa 27       	eor	r26, r26
    25d4:	28 30       	cpi	r18, 0x08	; 8
    25d6:	51 f1       	breq	.+84     	; 0x262c <__ultoa_invert+0x5c>
    25d8:	20 31       	cpi	r18, 0x10	; 16
    25da:	81 f1       	breq	.+96     	; 0x263c <__ultoa_invert+0x6c>
    25dc:	e8 94       	clt
    25de:	6f 93       	push	r22
    25e0:	6e 7f       	andi	r22, 0xFE	; 254
    25e2:	6e 5f       	subi	r22, 0xFE	; 254
    25e4:	7f 4f       	sbci	r23, 0xFF	; 255
    25e6:	8f 4f       	sbci	r24, 0xFF	; 255
    25e8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ea:	af 4f       	sbci	r26, 0xFF	; 255
    25ec:	b1 e0       	ldi	r27, 0x01	; 1
    25ee:	3e d0       	rcall	.+124    	; 0x266c <__ultoa_invert+0x9c>
    25f0:	b4 e0       	ldi	r27, 0x04	; 4
    25f2:	3c d0       	rcall	.+120    	; 0x266c <__ultoa_invert+0x9c>
    25f4:	67 0f       	add	r22, r23
    25f6:	78 1f       	adc	r23, r24
    25f8:	89 1f       	adc	r24, r25
    25fa:	9a 1f       	adc	r25, r26
    25fc:	a1 1d       	adc	r26, r1
    25fe:	68 0f       	add	r22, r24
    2600:	79 1f       	adc	r23, r25
    2602:	8a 1f       	adc	r24, r26
    2604:	91 1d       	adc	r25, r1
    2606:	a1 1d       	adc	r26, r1
    2608:	6a 0f       	add	r22, r26
    260a:	71 1d       	adc	r23, r1
    260c:	81 1d       	adc	r24, r1
    260e:	91 1d       	adc	r25, r1
    2610:	a1 1d       	adc	r26, r1
    2612:	20 d0       	rcall	.+64     	; 0x2654 <__ultoa_invert+0x84>
    2614:	09 f4       	brne	.+2      	; 0x2618 <__ultoa_invert+0x48>
    2616:	68 94       	set
    2618:	3f 91       	pop	r19
    261a:	2a e0       	ldi	r18, 0x0A	; 10
    261c:	26 9f       	mul	r18, r22
    261e:	11 24       	eor	r1, r1
    2620:	30 19       	sub	r19, r0
    2622:	30 5d       	subi	r19, 0xD0	; 208
    2624:	31 93       	st	Z+, r19
    2626:	de f6       	brtc	.-74     	; 0x25de <__ultoa_invert+0xe>
    2628:	cf 01       	movw	r24, r30
    262a:	08 95       	ret
    262c:	46 2f       	mov	r20, r22
    262e:	47 70       	andi	r20, 0x07	; 7
    2630:	40 5d       	subi	r20, 0xD0	; 208
    2632:	41 93       	st	Z+, r20
    2634:	b3 e0       	ldi	r27, 0x03	; 3
    2636:	0f d0       	rcall	.+30     	; 0x2656 <__ultoa_invert+0x86>
    2638:	c9 f7       	brne	.-14     	; 0x262c <__ultoa_invert+0x5c>
    263a:	f6 cf       	rjmp	.-20     	; 0x2628 <__ultoa_invert+0x58>
    263c:	46 2f       	mov	r20, r22
    263e:	4f 70       	andi	r20, 0x0F	; 15
    2640:	40 5d       	subi	r20, 0xD0	; 208
    2642:	4a 33       	cpi	r20, 0x3A	; 58
    2644:	18 f0       	brcs	.+6      	; 0x264c <__ultoa_invert+0x7c>
    2646:	49 5d       	subi	r20, 0xD9	; 217
    2648:	31 fd       	sbrc	r19, 1
    264a:	40 52       	subi	r20, 0x20	; 32
    264c:	41 93       	st	Z+, r20
    264e:	02 d0       	rcall	.+4      	; 0x2654 <__ultoa_invert+0x84>
    2650:	a9 f7       	brne	.-22     	; 0x263c <__ultoa_invert+0x6c>
    2652:	ea cf       	rjmp	.-44     	; 0x2628 <__ultoa_invert+0x58>
    2654:	b4 e0       	ldi	r27, 0x04	; 4
    2656:	a6 95       	lsr	r26
    2658:	97 95       	ror	r25
    265a:	87 95       	ror	r24
    265c:	77 95       	ror	r23
    265e:	67 95       	ror	r22
    2660:	ba 95       	dec	r27
    2662:	c9 f7       	brne	.-14     	; 0x2656 <__ultoa_invert+0x86>
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	61 05       	cpc	r22, r1
    2668:	71 05       	cpc	r23, r1
    266a:	08 95       	ret
    266c:	9b 01       	movw	r18, r22
    266e:	ac 01       	movw	r20, r24
    2670:	0a 2e       	mov	r0, r26
    2672:	06 94       	lsr	r0
    2674:	57 95       	ror	r21
    2676:	47 95       	ror	r20
    2678:	37 95       	ror	r19
    267a:	27 95       	ror	r18
    267c:	ba 95       	dec	r27
    267e:	c9 f7       	brne	.-14     	; 0x2672 <__ultoa_invert+0xa2>
    2680:	62 0f       	add	r22, r18
    2682:	73 1f       	adc	r23, r19
    2684:	84 1f       	adc	r24, r20
    2686:	95 1f       	adc	r25, r21
    2688:	a0 1d       	adc	r26, r0
    268a:	08 95       	ret

0000268c <_exit>:
    268c:	f8 94       	cli

0000268e <__stop_program>:
    268e:	ff cf       	rjmp	.-2      	; 0x268e <__stop_program>
