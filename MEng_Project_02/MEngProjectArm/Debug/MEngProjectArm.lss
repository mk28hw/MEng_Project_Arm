
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800200  000038f2  00003986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000264  00800358  00800358  00003ade  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ade  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c0  00000000  00000000  00003b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000160a6  00000000  00000000  0000453c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036a8  00000000  00000000  0001a5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000050f1  00000000  00000000  0001dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f20  00000000  00000000  00022d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d1c  00000000  00000000  00024c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a4eb  00000000  00000000  000289b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000970  00000000  00000000  00032ea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	18 c4       	rjmp	.+2096   	; 0x856 <__vector_9>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__vector_25>
      68:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__vector_26>
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__vector_36>
      94:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__vector_39>
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__vector_9+0x10a>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	52 12       	cpse	r5, r18
     168:	55 12       	cpse	r5, r21
     16a:	44 12       	cpse	r4, r20
     16c:	48 12       	cpse	r4, r24
     16e:	4e 12       	cpse	r4, r30
     170:	8c 12       	cpse	r8, r28
     172:	59 12       	cpse	r5, r25
     174:	5d 12       	cpse	r5, r29
     176:	63 12       	cpse	r6, r19
     178:	67 12       	cpse	r6, r23
     17a:	6b 12       	cpse	r6, r27
     17c:	71 12       	cpse	r7, r17
     17e:	75 12       	cpse	r7, r21
     180:	79 12       	cpse	r7, r25
     182:	8c 12       	cpse	r8, r28
     184:	7f 12       	cpse	r7, r31
     186:	83 12       	cpse	r8, r19
     188:	87 12       	cpse	r8, r23

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
     290:	14 03       	mulsu	r17, r20
     292:	39 0f       	add	r19, r25
     294:	ce 0f       	add	r28, r30
     296:	7b 15       	cp	r23, r11

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
     2ae:	e2 ef       	ldi	r30, 0xF2	; 242
     2b0:	f8 e3       	ldi	r31, 0x38	; 56
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a8 35       	cpi	r26, 0x58	; 88
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	25 e0       	ldi	r18, 0x05	; 5
     2c4:	a8 e5       	ldi	r26, 0x58	; 88
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	ac 3b       	cpi	r26, 0xBC	; 188
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__tablejump2__>
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
     2f2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <main>
     2f6:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	serialWriting = NO;
	RS485_RX_ON
}
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	8a 01       	movw	r16, r20
     33a:	d2 2e       	mov	r13, r18
     33c:	ad b6       	in	r10, 0x3d	; 61
     33e:	be b6       	in	r11, 0x3e	; 62
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	82 1b       	sub	r24, r18
     346:	91 09       	sbc	r25, r1
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	9e bf       	out	0x3e, r25	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	62 2f       	mov	r22, r18
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__floatunsisf>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	0e 94 94 0b 	call	0x1728	; 0x1728 <pow>
     372:	2b 01       	movw	r4, r22
     374:	3c 01       	movw	r6, r24
     376:	b8 01       	movw	r22, r16
     378:	01 2e       	mov	r0, r17
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 81 0a 	call	0x1502	; 0x1502 <__floatsisf>
     384:	a3 01       	movw	r20, r6
     386:	92 01       	movw	r18, r4
     388:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__cmpsf2>
     38c:	87 fd       	sbrc	r24, 7
     38e:	0b c0       	rjmp	.+22     	; 0x3a6 <_Z8printLCDhhih+0x9c>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e8       	ldi	r20, 0x80	; 128
     396:	5f e3       	ldi	r21, 0x3F	; 63
     398:	c3 01       	movw	r24, r6
     39a:	b2 01       	movw	r22, r4
     39c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__subsf3>
     3a0:	0e 94 4e 0a 	call	0x149c	; 0x149c <__fixsfsi>
     3a4:	8b 01       	movw	r16, r22
     3a6:	1f 92       	push	r1
     3a8:	df 92       	push	r13
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	6c 01       	movw	r12, r24
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 9c 19 	call	0x3338	; 0x3338 <sprintf>
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	df 92       	push	r13
     3c6:	cf 92       	push	r12
     3c8:	ff 92       	push	r15
     3ca:	ef 92       	push	r14
     3cc:	0e 94 9c 19 	call	0x3338	; 0x3338 <sprintf>
     3d0:	48 2d       	mov	r20, r8
     3d2:	69 2d       	mov	r22, r9
     3d4:	8a e5       	ldi	r24, 0x5A	; 90
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3dc:	b7 01       	movw	r22, r14
     3de:	8a e5       	ldi	r24, 0x5A	; 90
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
     3e6:	8d b7       	in	r24, 0x3d	; 61
     3e8:	9e b7       	in	r25, 0x3e	; 62
     3ea:	0c 96       	adiw	r24, 0x0c	; 12
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	9e bf       	out	0x3e, r25	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	8d bf       	out	0x3d, r24	; 61
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	be be       	out	0x3e, r11	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	ad be       	out	0x3d, r10	; 61
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	4f 90       	pop	r4
     42a:	08 95       	ret

0000042c <_Z12printCharLCDhhc>:
     42c:	cf 93       	push	r28
     42e:	c4 2f       	mov	r28, r20
     430:	46 2f       	mov	r20, r22
     432:	68 2f       	mov	r22, r24
     434:	8a e5       	ldi	r24, 0x5A	; 90
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     43c:	6c 2f       	mov	r22, r28
     43e:	8a e5       	ldi	r24, 0x5A	; 90
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	cf 91       	pop	r28
     444:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <_ZN5Print5printEc>

00000448 <_Z13setupSwitchesv>:
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	84 b9       	out	0x04, r24	; 4
     44c:	84 b1       	in	r24, 0x04	; 4
     44e:	88 7f       	andi	r24, 0xF8	; 248
     450:	84 b9       	out	0x04, r24	; 4
     452:	eb e6       	ldi	r30, 0x6B	; 107
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	87 60       	ori	r24, 0x07	; 7
     45a:	80 83       	st	Z, r24
     45c:	e8 e6       	ldi	r30, 0x68	; 104
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	81 60       	ori	r24, 0x01	; 1
     464:	80 83       	st	Z, r24
     466:	78 94       	sei
     468:	08 95       	ret

0000046a <_Z13checkPositionhi>:
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	30 f4       	brcc	.+12     	; 0x47a <_Z13checkPositionhi+0x10>
     46e:	cb 01       	movw	r24, r22
     470:	77 ff       	sbrs	r23, 7
     472:	1b c0       	rjmp	.+54     	; 0x4aa <_Z13checkPositionhi+0x40>
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	18 c0       	rjmp	.+48     	; 0x4aa <_Z13checkPositionhi+0x40>
     47a:	83 30       	cpi	r24, 0x03	; 3
     47c:	69 f4       	brne	.+26     	; 0x498 <_Z13checkPositionhi+0x2e>
     47e:	cb 01       	movw	r24, r22
     480:	61 15       	cp	r22, r1
     482:	78 4f       	sbci	r23, 0xF8	; 248
     484:	14 f4       	brge	.+4      	; 0x48a <_Z13checkPositionhi+0x20>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	98 ef       	ldi	r25, 0xF8	; 248
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	28 e0       	ldi	r18, 0x08	; 8
     48e:	92 07       	cpc	r25, r18
     490:	ac f0       	brlt	.+42     	; 0x4bc <_Z13checkPositionhi+0x52>
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	98 e0       	ldi	r25, 0x08	; 8
     496:	08 95       	ret
     498:	84 50       	subi	r24, 0x04	; 4
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	68 f4       	brcc	.+26     	; 0x4b8 <_Z13checkPositionhi+0x4e>
     49e:	cb 01       	movw	r24, r22
     4a0:	64 3e       	cpi	r22, 0xE4	; 228
     4a2:	72 40       	sbci	r23, 0x02	; 2
     4a4:	14 f4       	brge	.+4      	; 0x4aa <_Z13checkPositionhi+0x40>
     4a6:	84 ee       	ldi	r24, 0xE4	; 228
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	85 3a       	cpi	r24, 0xA5	; 165
     4ac:	26 e0       	ldi	r18, 0x06	; 6
     4ae:	92 07       	cpc	r25, r18
     4b0:	2c f0       	brlt	.+10     	; 0x4bc <_Z13checkPositionhi+0x52>
     4b2:	84 ea       	ldi	r24, 0xA4	; 164
     4b4:	96 e0       	ldi	r25, 0x06	; 6
     4b6:	08 95       	ret
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
     4bc:	08 95       	ret

000004be <_Z11printSerial6Stringi>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	eb 01       	movw	r28, r22
     4c4:	bc 01       	movw	r22, r24
     4c6:	81 eb       	ldi	r24, 0xB1	; 177
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN5Print5printERK6String>
     4ce:	65 e3       	ldi	r22, 0x35	; 53
     4d0:	72 e0       	ldi	r23, 0x02	; 2
     4d2:	81 eb       	ldi	r24, 0xB1	; 177
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
     4da:	4a e0       	ldi	r20, 0x0A	; 10
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	be 01       	movw	r22, r28
     4e0:	81 eb       	ldi	r24, 0xB1	; 177
     4e2:	93 e0       	ldi	r25, 0x03	; 3
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	0c 94 13 11 	jmp	0x2226	; 0x2226 <_ZN5Print7printlnEii>

000004ec <_Z12error_decodeh>:
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	e6 97       	sbiw	r28, 0x36	; 54
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	08 2f       	mov	r16, r24
     50e:	6c e2       	ldi	r22, 0x2C	; 44
     510:	73 e0       	ldi	r23, 0x03	; 3
     512:	ce 01       	movw	r24, r28
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	7c 01       	movw	r14, r24
     518:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     51c:	6c e2       	ldi	r22, 0x2C	; 44
     51e:	73 e0       	ldi	r23, 0x03	; 3
     520:	ce 01       	movw	r24, r28
     522:	07 96       	adiw	r24, 0x07	; 7
     524:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     528:	10 2f       	mov	r17, r16
     52a:	11 70       	andi	r17, 0x01	; 1
     52c:	00 fd       	sbrc	r16, 0
     52e:	03 c0       	rjmp	.+6      	; 0x536 <_Z12error_decodeh+0x4a>
     530:	6c e2       	ldi	r22, 0x2C	; 44
     532:	73 e0       	ldi	r23, 0x03	; 3
     534:	02 c0       	rjmp	.+4      	; 0x53a <_Z12error_decodeh+0x4e>
     536:	66 e1       	ldi	r22, 0x16	; 22
     538:	72 e0       	ldi	r23, 0x02	; 2
     53a:	ce 01       	movw	r24, r28
     53c:	0d 96       	adiw	r24, 0x0d	; 13
     53e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     542:	11 11       	cpse	r17, r1
     544:	03 c0       	rjmp	.+6      	; 0x54c <_Z12error_decodeh+0x60>
     546:	6c e2       	ldi	r22, 0x2C	; 44
     548:	73 e0       	ldi	r23, 0x03	; 3
     54a:	02 c0       	rjmp	.+4      	; 0x550 <_Z12error_decodeh+0x64>
     54c:	6a e1       	ldi	r22, 0x1A	; 26
     54e:	72 e0       	ldi	r23, 0x02	; 2
     550:	ce 01       	movw	r24, r28
     552:	43 96       	adiw	r24, 0x13	; 19
     554:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     558:	11 11       	cpse	r17, r1
     55a:	03 c0       	rjmp	.+6      	; 0x562 <_Z12error_decodeh+0x76>
     55c:	6c e2       	ldi	r22, 0x2C	; 44
     55e:	73 e0       	ldi	r23, 0x03	; 3
     560:	02 c0       	rjmp	.+4      	; 0x566 <_Z12error_decodeh+0x7a>
     562:	6e e1       	ldi	r22, 0x1E	; 30
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	ce 01       	movw	r24, r28
     568:	49 96       	adiw	r24, 0x19	; 25
     56a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     56e:	11 11       	cpse	r17, r1
     570:	03 c0       	rjmp	.+6      	; 0x578 <_Z12error_decodeh+0x8c>
     572:	6c e2       	ldi	r22, 0x2C	; 44
     574:	73 e0       	ldi	r23, 0x03	; 3
     576:	02 c0       	rjmp	.+4      	; 0x57c <_Z12error_decodeh+0x90>
     578:	62 e2       	ldi	r22, 0x22	; 34
     57a:	72 e0       	ldi	r23, 0x02	; 2
     57c:	ce 01       	movw	r24, r28
     57e:	4f 96       	adiw	r24, 0x1f	; 31
     580:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     584:	11 11       	cpse	r17, r1
     586:	03 c0       	rjmp	.+6      	; 0x58e <_Z12error_decodeh+0xa2>
     588:	6c e2       	ldi	r22, 0x2C	; 44
     58a:	73 e0       	ldi	r23, 0x03	; 3
     58c:	02 c0       	rjmp	.+4      	; 0x592 <_Z12error_decodeh+0xa6>
     58e:	66 e2       	ldi	r22, 0x26	; 38
     590:	72 e0       	ldi	r23, 0x02	; 2
     592:	ce 01       	movw	r24, r28
     594:	85 96       	adiw	r24, 0x25	; 37
     596:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     59a:	6c e2       	ldi	r22, 0x2C	; 44
     59c:	73 e0       	ldi	r23, 0x03	; 3
     59e:	ce 01       	movw	r24, r28
     5a0:	8b 96       	adiw	r24, 0x2b	; 43
     5a2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     5a6:	67 01       	movw	r12, r14
     5a8:	00 e0       	ldi	r16, 0x00	; 0
     5aa:	10 e0       	ldi	r17, 0x00	; 0
     5ac:	b6 01       	movw	r22, r12
     5ae:	ce 01       	movw	r24, r28
     5b0:	c1 96       	adiw	r24, 0x31	; 49
     5b2:	0e 94 87 13 	call	0x270e	; 0x270e <_ZN6StringC1ERKS_>
     5b6:	b8 01       	movw	r22, r16
     5b8:	ce 01       	movw	r24, r28
     5ba:	c1 96       	adiw	r24, 0x31	; 49
     5bc:	80 df       	rcall	.-256    	; 0x4be <_Z11printSerial6Stringi>
     5be:	ce 01       	movw	r24, r28
     5c0:	c1 96       	adiw	r24, 0x31	; 49
     5c2:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
     5c6:	0f 5f       	subi	r16, 0xFF	; 255
     5c8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ca:	96 e0       	ldi	r25, 0x06	; 6
     5cc:	c9 0e       	add	r12, r25
     5ce:	d1 1c       	adc	r13, r1
     5d0:	08 30       	cpi	r16, 0x08	; 8
     5d2:	11 05       	cpc	r17, r1
     5d4:	59 f7       	brne	.-42     	; 0x5ac <_Z12error_decodeh+0xc0>
     5d6:	8e 01       	movw	r16, r28
     5d8:	0f 5c       	subi	r16, 0xCF	; 207
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	06 50       	subi	r16, 0x06	; 6
     5de:	11 09       	sbc	r17, r1
     5e0:	c8 01       	movw	r24, r16
     5e2:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
     5e6:	e0 16       	cp	r14, r16
     5e8:	f1 06       	cpc	r15, r17
     5ea:	c1 f7       	brne	.-16     	; 0x5dc <_Z12error_decodeh+0xf0>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	e6 96       	adiw	r28, 0x36	; 54
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	08 95       	ret

0000060e <_Z8sumBytesPhh>:
     60e:	38 2f       	mov	r19, r24
     610:	fc 01       	movw	r30, r24
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	2e 2f       	mov	r18, r30
     618:	23 1b       	sub	r18, r19
     61a:	26 17       	cp	r18, r22
     61c:	20 f4       	brcc	.+8      	; 0x626 <_Z8sumBytesPhh+0x18>
     61e:	21 91       	ld	r18, Z+
     620:	82 0f       	add	r24, r18
     622:	91 1d       	adc	r25, r1
     624:	f8 cf       	rjmp	.-16     	; 0x616 <_Z8sumBytesPhh+0x8>
     626:	08 95       	ret

00000628 <_GLOBAL__sub_I_position_old>:
     628:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     62c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     630:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <currPos+0x1>
     634:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <currPos>
     638:	24 e0       	ldi	r18, 0x04	; 4
     63a:	44 e1       	ldi	r20, 0x14	; 20
     63c:	67 e2       	ldi	r22, 0x27	; 39
     63e:	8a e5       	ldi	r24, 0x5A	; 90
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	0c 94 8f 13 	jmp	0x271e	; 0x271e <_ZN17LiquidCrystal_I2CC1Ehhh>

00000646 <_Z10writeServohhPhh>:
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	18 2f       	mov	r17, r24
     654:	d6 2f       	mov	r29, r22
     656:	7a 01       	movw	r14, r20
     658:	02 2f       	mov	r16, r18
     65a:	c6 e0       	ldi	r28, 0x06	; 6
     65c:	c6 0f       	add	r28, r22
     65e:	c2 0f       	add	r28, r18
     660:	62 2f       	mov	r22, r18
     662:	ca 01       	movw	r24, r20
     664:	d4 df       	rcall	.-88     	; 0x60e <_Z8sumBytesPhh>
     666:	c1 0f       	add	r28, r17
     668:	8c 0f       	add	r24, r28
     66a:	c8 2f       	mov	r28, r24
     66c:	c0 95       	com	r28
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	0e 94 c9 12 	call	0x2592	; 0x2592 <digitalWrite>
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	0e 94 c9 12 	call	0x2592	; 0x2592 <digitalWrite>
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
     68a:	6f ef       	ldi	r22, 0xFF	; 255
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	8e e4       	ldi	r24, 0x4E	; 78
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	34 de       	rcall	.-920    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     694:	6f ef       	ldi	r22, 0xFF	; 255
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	8e e4       	ldi	r24, 0x4E	; 78
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	2f de       	rcall	.-930    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     69e:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <serialWriting>
     6a2:	88 23       	and	r24, r24
     6a4:	39 f0       	breq	.+14     	; 0x6b4 <_Z10writeServohhPhh+0x6e>
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
     6b2:	f5 cf       	rjmp	.-22     	; 0x69e <_Z10writeServohhPhh+0x58>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <serialWriting>
     6ba:	61 2f       	mov	r22, r17
     6bc:	8e e4       	ldi	r24, 0x4E	; 78
     6be:	94 e0       	ldi	r25, 0x04	; 4
     6c0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN14HardwareSerial5writeEh>
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	b8 01       	movw	r22, r16
     6c8:	6d 5f       	subi	r22, 0xFD	; 253
     6ca:	7f 4f       	sbci	r23, 0xFF	; 255
     6cc:	8e e4       	ldi	r24, 0x4E	; 78
     6ce:	94 e0       	ldi	r25, 0x04	; 4
     6d0:	15 de       	rcall	.-982    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     6d2:	63 e0       	ldi	r22, 0x03	; 3
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	8e e4       	ldi	r24, 0x4E	; 78
     6d8:	94 e0       	ldi	r25, 0x04	; 4
     6da:	10 de       	rcall	.-992    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     6dc:	6d 2f       	mov	r22, r29
     6de:	8e e4       	ldi	r24, 0x4E	; 78
     6e0:	94 e0       	ldi	r25, 0x04	; 4
     6e2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN14HardwareSerial5writeEh>
     6e6:	a8 01       	movw	r20, r16
     6e8:	b7 01       	movw	r22, r14
     6ea:	8e e4       	ldi	r24, 0x4E	; 78
     6ec:	94 e0       	ldi	r25, 0x04	; 4
     6ee:	0e 94 07 10 	call	0x200e	; 0x200e <_ZN5Print5writeEPKhj>
     6f2:	6c 2f       	mov	r22, r28
     6f4:	8e e4       	ldi	r24, 0x4E	; 78
     6f6:	94 e0       	ldi	r25, 0x04	; 4
     6f8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN14HardwareSerial5writeEh>
     6fc:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <serialWriting>
     700:	8e e4       	ldi	r24, 0x4E	; 78
     702:	94 e0       	ldi	r25, 0x04	; 4
     704:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN14HardwareSerial5flushEv>
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	0e 94 c9 12 	call	0x2592	; 0x2592 <digitalWrite>
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	0e 94 c9 12 	call	0x2592	; 0x2592 <digitalWrite>
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	0c 94 92 11 	jmp	0x2324	; 0x2324 <delay>

00000730 <_Z9moveSpeedhii>:
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	00 d0       	rcall	.+0      	; 0x740 <_Z9moveSpeedhii+0x10>
     740:	1f 92       	push	r1
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	18 2f       	mov	r17, r24
     748:	d4 2e       	mov	r13, r20
     74a:	e5 2e       	mov	r14, r21
     74c:	8e de       	rcall	.-740    	; 0x46a <_Z13checkPositionhi>
     74e:	f8 2e       	mov	r15, r24
     750:	09 2f       	mov	r16, r25
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	db 82       	std	Y+3, r13	; 0x03
     758:	ec 82       	std	Y+4, r14	; 0x04
     75a:	24 e0       	ldi	r18, 0x04	; 4
     75c:	ae 01       	movw	r20, r28
     75e:	4f 5f       	subi	r20, 0xFF	; 255
     760:	5f 4f       	sbci	r21, 0xFF	; 255
     762:	6e e1       	ldi	r22, 0x1E	; 30
     764:	81 2f       	mov	r24, r17
     766:	6f df       	rcall	.-290    	; 0x646 <_Z10writeServohhPhh>
     768:	f0 92 ac 03 	sts	0x03AC, r15	; 0x8003ac <currPos>
     76c:	00 93 ad 03 	sts	0x03AD, r16	; 0x8003ad <currPos+0x1>
     770:	8a e0       	ldi	r24, 0x0A	; 10
     772:	18 9f       	mul	r17, r24
     774:	f0 01       	movw	r30, r0
     776:	11 24       	eor	r1, r1
     778:	e5 59       	subi	r30, 0x95	; 149
     77a:	fc 4f       	sbci	r31, 0xFC	; 252
     77c:	f3 82       	std	Z+3, r15	; 0x03
     77e:	04 83       	std	Z+4, r16	; 0x04
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	08 95       	ret

00000798 <_Z14setTorqueLimithi>:
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	1f 92       	push	r1
     79e:	1f 92       	push	r1
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	69 83       	std	Y+1, r22	; 0x01
     7a6:	7a 83       	std	Y+2, r23	; 0x02
     7a8:	22 e0       	ldi	r18, 0x02	; 2
     7aa:	ae 01       	movw	r20, r28
     7ac:	4f 5f       	subi	r20, 0xFF	; 255
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	62 e2       	ldi	r22, 0x22	; 34
     7b2:	49 df       	rcall	.-366    	; 0x646 <_Z10writeServohhPhh>
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <_Z7setModehh>:
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <_Z7setModehh+0xa>
     7c8:	1f 92       	push	r1
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	18 2f       	mov	r17, r24
     7d0:	06 2f       	mov	r16, r22
     7d2:	61 30       	cpi	r22, 0x01	; 1
     7d4:	29 f4       	brne	.+10     	; 0x7e0 <_Z7setModehh+0x22>
     7d6:	19 82       	std	Y+1, r1	; 0x01
     7d8:	1a 82       	std	Y+2, r1	; 0x02
     7da:	1b 82       	std	Y+3, r1	; 0x03
     7dc:	1c 82       	std	Y+4, r1	; 0x04
     7de:	08 c0       	rjmp	.+16     	; 0x7f0 <_Z7setModehh+0x32>
     7e0:	62 30       	cpi	r22, 0x02	; 2
     7e2:	81 f4       	brne	.+32     	; 0x804 <_Z7setModehh+0x46>
     7e4:	9f ef       	ldi	r25, 0xFF	; 255
     7e6:	99 83       	std	Y+1, r25	; 0x01
     7e8:	8f e0       	ldi	r24, 0x0F	; 15
     7ea:	8a 83       	std	Y+2, r24	; 0x02
     7ec:	9b 83       	std	Y+3, r25	; 0x03
     7ee:	8c 83       	std	Y+4, r24	; 0x04
     7f0:	24 e0       	ldi	r18, 0x04	; 4
     7f2:	ae 01       	movw	r20, r28
     7f4:	4f 5f       	subi	r20, 0xFF	; 255
     7f6:	5f 4f       	sbci	r21, 0xFF	; 255
     7f8:	66 e0       	ldi	r22, 0x06	; 6
     7fa:	81 2f       	mov	r24, r17
     7fc:	24 df       	rcall	.-440    	; 0x646 <_Z10writeServohhPhh>
     7fe:	16 30       	cpi	r17, 0x06	; 6
     800:	a0 f0       	brcs	.+40     	; 0x82a <_Z7setModehh+0x6c>
     802:	1a c0       	rjmp	.+52     	; 0x838 <_Z7setModehh+0x7a>
     804:	84 ee       	ldi	r24, 0xE4	; 228
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	8a 83       	std	Y+2, r24	; 0x02
     80c:	84 ea       	ldi	r24, 0xA4	; 164
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	86 e0       	ldi	r24, 0x06	; 6
     812:	8c 83       	std	Y+4, r24	; 0x04
     814:	24 e0       	ldi	r18, 0x04	; 4
     816:	ae 01       	movw	r20, r28
     818:	4f 5f       	subi	r20, 0xFF	; 255
     81a:	5f 4f       	sbci	r21, 0xFF	; 255
     81c:	66 e0       	ldi	r22, 0x06	; 6
     81e:	81 2f       	mov	r24, r17
     820:	12 df       	rcall	.-476    	; 0x646 <_Z10writeServohhPhh>
     822:	16 30       	cpi	r17, 0x06	; 6
     824:	48 f4       	brcc	.+18     	; 0x838 <_Z7setModehh+0x7a>
     826:	03 30       	cpi	r16, 0x03	; 3
     828:	38 f4       	brcc	.+14     	; 0x838 <_Z7setModehh+0x7a>
     82a:	8a e0       	ldi	r24, 0x0A	; 10
     82c:	18 9f       	mul	r17, r24
     82e:	f0 01       	movw	r30, r0
     830:	11 24       	eor	r1, r1
     832:	e5 59       	subi	r30, 0x95	; 149
     834:	fc 4f       	sbci	r31, 0xFC	; 252
     836:	02 83       	std	Z+2, r16	; 0x02
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <_Z12setModeWheelh>:
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	b8 cf       	rjmp	.-144    	; 0x7be <_Z7setModehh>

0000084e <_Z12setModeJointh>:
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	b6 cf       	rjmp	.-148    	; 0x7be <_Z7setModehh>

00000852 <_Z16setModeMultiTurnh>:
     852:	62 e0       	ldi	r22, 0x02	; 2
     854:	b4 cf       	rjmp	.-152    	; 0x7be <_Z7setModehh>

00000856 <__vector_9>:
     856:	1f 92       	push	r1
     858:	0f 92       	push	r0
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	0f 92       	push	r0
     85e:	11 24       	eor	r1, r1
     860:	0b b6       	in	r0, 0x3b	; 59
     862:	0f 92       	push	r0
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	cf 93       	push	r28
     882:	ef 93       	push	r30
     884:	ff 93       	push	r31
     886:	c0 91 6b 03 	lds	r28, 0x036B	; 0x80036b <arm>
     88a:	18 9b       	sbis	0x03, 0	; 3
     88c:	38 c0       	rjmp	.+112    	; 0x8fe <__vector_9+0xa8>
     88e:	2f 9a       	sbi	0x05, 7	; 5
     890:	8a e0       	ldi	r24, 0x0A	; 10
     892:	c8 9f       	mul	r28, r24
     894:	80 01       	movw	r16, r0
     896:	11 24       	eor	r1, r1
     898:	05 59       	subi	r16, 0x95	; 149
     89a:	1c 4f       	sbci	r17, 0xFC	; 252
     89c:	78 01       	movw	r14, r16
     89e:	e3 e0       	ldi	r30, 0x03	; 3
     8a0:	ee 0e       	add	r14, r30
     8a2:	f1 1c       	adc	r15, r1
     8a4:	09 5f       	subi	r16, 0xF9	; 249
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	18 9b       	sbis	0x03, 0	; 3
     8aa:	20 c0       	rjmp	.+64     	; 0x8ec <__vector_9+0x96>
     8ac:	f7 01       	movw	r30, r14
     8ae:	60 81       	ld	r22, Z
     8b0:	71 81       	ldd	r23, Z+1	; 0x01
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	71 09       	sbc	r23, r1
     8b6:	71 83       	std	Z+1, r23	; 0x01
     8b8:	60 83       	st	Z, r22
     8ba:	c3 30       	cpi	r28, 0x03	; 3
     8bc:	40 f4       	brcc	.+16     	; 0x8ce <__vector_9+0x78>
     8be:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <lastButtonPressed>
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	21 f4       	brne	.+8      	; 0x8ce <__vector_9+0x78>
     8c6:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <buttonsState+0x1>
     8ca:	81 11       	cpse	r24, r1
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__vector_9+0x80>
     8ce:	f8 01       	movw	r30, r16
     8d0:	40 81       	ld	r20, Z
     8d2:	51 81       	ldd	r21, Z+1	; 0x01
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__vector_9+0x84>
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	8c 2f       	mov	r24, r28
     8dc:	29 df       	rcall	.-430    	; 0x730 <_Z9moveSpeedhii>
     8de:	68 ec       	ldi	r22, 0xC8	; 200
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
     8ea:	de cf       	rjmp	.-68     	; 0x8a8 <__vector_9+0x52>
     8ec:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <buttonsState+0x1>
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	89 27       	eor	r24, r25
     8f4:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <buttonsState+0x1>
     8f8:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <lastButtonPressed>
     8fc:	2f 98       	cbi	0x05, 7	; 5
     8fe:	19 9b       	sbis	0x03, 1	; 3
     900:	6c c0       	rjmp	.+216    	; 0x9da <__vector_9+0x184>
     902:	2f 9a       	sbi	0x05, 7	; 5
     904:	fa e0       	ldi	r31, 0x0A	; 10
     906:	cf 9f       	mul	r28, r31
     908:	80 01       	movw	r16, r0
     90a:	11 24       	eor	r1, r1
     90c:	05 59       	subi	r16, 0x95	; 149
     90e:	1c 4f       	sbci	r17, 0xFC	; 252
     910:	78 01       	movw	r14, r16
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	e8 0e       	add	r14, r24
     916:	f1 1c       	adc	r15, r1
     918:	09 5f       	subi	r16, 0xF9	; 249
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
     91c:	19 9b       	sbis	0x03, 1	; 3
     91e:	53 c0       	rjmp	.+166    	; 0x9c6 <__vector_9+0x170>
     920:	f7 01       	movw	r30, r14
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	91 83       	std	Z+1, r25	; 0x01
     92a:	80 83       	st	Z, r24
     92c:	18 9b       	sbis	0x03, 0	; 3
     92e:	2a c0       	rjmp	.+84     	; 0x984 <__vector_9+0x12e>
     930:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <arm+0xf>
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	19 f0       	breq	.+6      	; 0x93e <__vector_9+0xe8>
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	02 c0       	rjmp	.+4      	; 0x942 <__vector_9+0xec>
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	54 e0       	ldi	r21, 0x04	; 4
     942:	60 91 78 03 	lds	r22, 0x0378	; 0x800378 <arm+0xd>
     946:	70 91 79 03 	lds	r23, 0x0379	; 0x800379 <arm+0xe>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	f1 de       	rcall	.-542    	; 0x730 <_Z9moveSpeedhii>
     94e:	62 e3       	ldi	r22, 0x32	; 50
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
     95a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <arm+0x19>
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	19 f0       	breq	.+6      	; 0x968 <__vector_9+0x112>
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	02 c0       	rjmp	.+4      	; 0x96c <__vector_9+0x116>
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	54 e0       	ldi	r21, 0x04	; 4
     96c:	60 91 82 03 	lds	r22, 0x0382	; 0x800382 <arm+0x17>
     970:	70 91 83 03 	lds	r23, 0x0383	; 0x800383 <arm+0x18>
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	dc de       	rcall	.-584    	; 0x730 <_Z9moveSpeedhii>
     978:	62 e3       	ldi	r22, 0x32	; 50
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
     984:	c3 30       	cpi	r28, 0x03	; 3
     986:	68 f4       	brcc	.+26     	; 0x9a2 <__vector_9+0x14c>
     988:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <lastButtonPressed>
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	21 f4       	brne	.+8      	; 0x998 <__vector_9+0x142>
     990:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <buttonsState+0x2>
     994:	81 11       	cpse	r24, r1
     996:	09 c0       	rjmp	.+18     	; 0x9aa <__vector_9+0x154>
     998:	f8 01       	movw	r30, r16
     99a:	40 81       	ld	r20, Z
     99c:	51 81       	ldd	r21, Z+1	; 0x01
     99e:	5c 5f       	subi	r21, 0xFC	; 252
     9a0:	06 c0       	rjmp	.+12     	; 0x9ae <__vector_9+0x158>
     9a2:	f8 01       	movw	r30, r16
     9a4:	40 81       	ld	r20, Z
     9a6:	51 81       	ldd	r21, Z+1	; 0x01
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__vector_9+0x158>
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	54 e0       	ldi	r21, 0x04	; 4
     9ae:	f7 01       	movw	r30, r14
     9b0:	60 81       	ld	r22, Z
     9b2:	71 81       	ldd	r23, Z+1	; 0x01
     9b4:	8c 2f       	mov	r24, r28
     9b6:	bc de       	rcall	.-648    	; 0x730 <_Z9moveSpeedhii>
     9b8:	68 ec       	ldi	r22, 0xC8	; 200
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
     9c4:	ab cf       	rjmp	.-170    	; 0x91c <__vector_9+0xc6>
     9c6:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <buttonsState+0x2>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	89 27       	eor	r24, r25
     9ce:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <buttonsState+0x2>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <lastButtonPressed>
     9d8:	2f 98       	cbi	0x05, 7	; 5
     9da:	1a 9b       	sbis	0x03, 2	; 3
     9dc:	26 c0       	rjmp	.+76     	; 0xa2a <__vector_9+0x1d4>
     9de:	1f 9a       	sbi	0x03, 7	; 3
     9e0:	64 e1       	ldi	r22, 0x14	; 20
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
     9ec:	1a 9b       	sbis	0x03, 2	; 3
     9ee:	05 c0       	rjmp	.+10     	; 0x9fa <__vector_9+0x1a4>
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	f7 cf       	rjmp	.-18     	; 0x9e8 <__vector_9+0x192>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	c5 30       	cpi	r28, 0x05	; 5
     9fe:	08 f4       	brcc	.+2      	; 0xa02 <__vector_9+0x1ac>
     a00:	8c 0f       	add	r24, r28
     a02:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <arm>
     a06:	84 30       	cpi	r24, 0x04	; 4
     a08:	10 f0       	brcs	.+4      	; 0xa0e <__vector_9+0x1b8>
     a0a:	21 df       	rcall	.-446    	; 0x84e <_Z12setModeJointh>
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <__vector_9+0x1c2>
     a0e:	83 30       	cpi	r24, 0x03	; 3
     a10:	11 f4       	brne	.+4      	; 0xa16 <__vector_9+0x1c0>
     a12:	1f df       	rcall	.-450    	; 0x852 <_Z16setModeMultiTurnh>
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <__vector_9+0x1c2>
     a16:	19 df       	rcall	.-462    	; 0x84a <_Z12setModeWheelh>
     a18:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <lastButtonPressed>
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	89 27       	eor	r24, r25
     a20:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <lastButtonPressed>
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <lastButtonPressed>
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	cf 91       	pop	r28
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	0f 90       	pop	r0
     a4e:	0b be       	out	0x3b, r0	; 59
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <_Z9readServohhh>:
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	c8 2f       	mov	r28, r24
     a62:	d6 2f       	mov	r29, r22
     a64:	14 2f       	mov	r17, r20
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	0e 94 c9 12 	call	0x2592	; 0x2592 <digitalWrite>
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	0e 94 c9 12 	call	0x2592	; 0x2592 <digitalWrite>
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
     a82:	6f ef       	ldi	r22, 0xFF	; 255
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	8e e4       	ldi	r24, 0x4E	; 78
     a88:	94 e0       	ldi	r25, 0x04	; 4
     a8a:	38 dc       	rcall	.-1936   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     a8c:	6f ef       	ldi	r22, 0xFF	; 255
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	8e e4       	ldi	r24, 0x4E	; 78
     a92:	94 e0       	ldi	r25, 0x04	; 4
     a94:	33 dc       	rcall	.-1946   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <serialWriting>
     a9c:	6c 2f       	mov	r22, r28
     a9e:	8e e4       	ldi	r24, 0x4E	; 78
     aa0:	94 e0       	ldi	r25, 0x04	; 4
     aa2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN14HardwareSerial5writeEh>
     aa6:	64 e0       	ldi	r22, 0x04	; 4
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	8e e4       	ldi	r24, 0x4E	; 78
     aac:	94 e0       	ldi	r25, 0x04	; 4
     aae:	26 dc       	rcall	.-1972   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     ab0:	62 e0       	ldi	r22, 0x02	; 2
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	8e e4       	ldi	r24, 0x4E	; 78
     ab6:	94 e0       	ldi	r25, 0x04	; 4
     ab8:	21 dc       	rcall	.-1982   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     aba:	6d 2f       	mov	r22, r29
     abc:	8e e4       	ldi	r24, 0x4E	; 78
     abe:	94 e0       	ldi	r25, 0x04	; 4
     ac0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN14HardwareSerial5writeEh>
     ac4:	61 2f       	mov	r22, r17
     ac6:	8e e4       	ldi	r24, 0x4E	; 78
     ac8:	94 e0       	ldi	r25, 0x04	; 4
     aca:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN14HardwareSerial5writeEh>
     ace:	66 e0       	ldi	r22, 0x06	; 6
     ad0:	61 0f       	add	r22, r17
     ad2:	6d 0f       	add	r22, r29
     ad4:	6c 0f       	add	r22, r28
     ad6:	60 95       	com	r22
     ad8:	8e e4       	ldi	r24, 0x4E	; 78
     ada:	94 e0       	ldi	r25, 0x04	; 4
     adc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN14HardwareSerial5writeEh>
     ae0:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <serialWriting>
     ae4:	8e e4       	ldi	r24, 0x4E	; 78
     ae6:	94 e0       	ldi	r25, 0x04	; 4
     ae8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN14HardwareSerial5flushEv>
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	0e 94 c9 12 	call	0x2592	; 0x2592 <digitalWrite>
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	0e 94 c9 12 	call	0x2592	; 0x2592 <digitalWrite>
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0c 94 92 11 	jmp	0x2324	; 0x2324 <delay>

00000b0e <_Z7getDatahhh>:

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
     b0e:	2f 92       	push	r2
     b10:	3f 92       	push	r3
     b12:	4f 92       	push	r4
     b14:	5f 92       	push	r5
     b16:	6f 92       	push	r6
     b18:	7f 92       	push	r7
     b1a:	8f 92       	push	r8
     b1c:	9f 92       	push	r9
     b1e:	af 92       	push	r10
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	00 d0       	rcall	.+0      	; 0xb34 <_Z7getDatahhh+0x26>
     b34:	00 d0       	rcall	.+0      	; 0xb36 <_Z7getDatahhh+0x28>
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	f4 2e       	mov	r15, r20
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	uint8_t byteCount = 0;
	uint8_t msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;

	int msgData;
	readServo(id, ctrlData, askedLength);
     b3c:	8e df       	rcall	.-228    	; 0xa5a <_Z9readServohhh>
	delay(10);
     b3e:	6a e0       	ldi	r22, 0x0A	; 10
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
	serialReading = YES;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
     b50:	8e e4       	ldi	r24, 0x4E	; 78
     b52:	94 e0       	ldi	r25, 0x04	; 4
     b54:	d0 d7       	rcall	.+4000   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     b56:	18 2f       	mov	r17, r24
	//Serial1.availableForWrite();
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
     b58:	8e e4       	ldi	r24, 0x4E	; 78
     b5a:	94 e0       	ldi	r25, 0x04	; 4
     b5c:	cc d7       	rcall	.+3992   	; 0x1af6 <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
     b5e:	1f 3f       	cpi	r17, 0xFF	; 255
     b60:	19 f4       	brne	.+6      	; 0xb68 <_Z7getDatahhh+0x5a>
     b62:	11 e0       	ldi	r17, 0x01	; 1
     b64:	8f 3f       	cpi	r24, 0xFF	; 255
     b66:	09 f0       	breq	.+2      	; 0xb6a <_Z7getDatahhh+0x5c>
     b68:	10 e0       	ldi	r17, 0x00	; 0
	Serial.print("## Start 01: ");
     b6a:	6a e2       	ldi	r22, 0x2A	; 42
     b6c:	72 e0       	ldi	r23, 0x02	; 2
     b6e:	81 eb       	ldi	r24, 0xB1	; 177
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     b76:	8e e4       	ldi	r24, 0x4E	; 78
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	a3 d7       	rcall	.+3910   	; 0x1ac2 <_ZN14HardwareSerial9availableEv>
     b7c:	4a e0       	ldi	r20, 0x0A	; 10
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	bc 01       	movw	r22, r24
     b82:	81 eb       	ldi	r24, 0xB1	; 177
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	0e 94 0d 11 	call	0x221a	; 0x221a <_ZN5Print5printEii>
	Serial.println(" ####################");
     b8a:	68 e3       	ldi	r22, 0x38	; 56
     b8c:	72 e0       	ldi	r23, 0x02	; 2
     b8e:	81 eb       	ldi	r24, 0xB1	; 177
     b90:	93 e0       	ldi	r25, 0x03	; 3
     b92:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN5Print7printlnEPKc>
	if (msgStarted) {
     b96:	11 23       	and	r17, r17
     b98:	09 f4       	brne	.+2      	; 0xb9c <_Z7getDatahhh+0x8e>
		msgId = Serial1.read();
     b9a:	a0 c0       	rjmp	.+320    	; 0xcdc <_Z7getDatahhh+0x1ce>
     b9c:	8e e4       	ldi	r24, 0x4E	; 78
     b9e:	94 e0       	ldi	r25, 0x04	; 4
     ba0:	aa d7       	rcall	.+3924   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     ba2:	5c 01       	movw	r10, r24
		printSerial("Servo ID   ", msgId);
     ba4:	6e e4       	ldi	r22, 0x4E	; 78
     ba6:	72 e0       	ldi	r23, 0x02	; 2
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     bb0:	b5 01       	movw	r22, r10
     bb2:	77 27       	eor	r23, r23
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	82 dc       	rcall	.-1788   	; 0x4be <_Z11printSerial6Stringi>
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
		msgLength = Serial1.read();
     bc2:	8e e4       	ldi	r24, 0x4E	; 78
     bc4:	94 e0       	ldi	r25, 0x04	; 4
     bc6:	97 d7       	rcall	.+3886   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     bc8:	4c 01       	movw	r8, r24
		printSerial("Msg Length ", msgLength);
     bca:	6a e5       	ldi	r22, 0x5A	; 90
     bcc:	72 e0       	ldi	r23, 0x02	; 2
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     bd6:	b4 01       	movw	r22, r8
     bd8:	77 27       	eor	r23, r23
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	6f dc       	rcall	.-1826   	; 0x4be <_Z11printSerial6Stringi>
     be0:	ce 01       	movw	r24, r28
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
		msgError = Serial1.read();
     be8:	8e e4       	ldi	r24, 0x4E	; 78
     bea:	94 e0       	ldi	r25, 0x04	; 4
     bec:	84 d7       	rcall	.+3848   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     bee:	8c 01       	movw	r16, r24
     bf0:	38 2e       	mov	r3, r24
		printSerial("Msg Error  ", msgError);
     bf2:	66 e6       	ldi	r22, 0x66	; 102
     bf4:	72 e0       	ldi	r23, 0x02	; 2
     bf6:	ce 01       	movw	r24, r28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     bfe:	b8 01       	movw	r22, r16
     c00:	77 27       	eor	r23, r23
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	5b dc       	rcall	.-1866   	; 0x4be <_Z11printSerial6Stringi>
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
		msgData_1 = Serial1.read();
     c10:	8e e4       	ldi	r24, 0x4E	; 78
     c12:	94 e0       	ldi	r25, 0x04	; 4
     c14:	70 d7       	rcall	.+3808   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     c16:	6c 01       	movw	r12, r24
     c18:	3c 01       	movw	r6, r24
     c1a:	77 24       	eor	r7, r7
		printSerial("Msg Data L ", msgData_1);
     c1c:	62 e7       	ldi	r22, 0x72	; 114
     c1e:	72 e0       	ldi	r23, 0x02	; 2
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     c28:	b3 01       	movw	r22, r6
     c2a:	ce 01       	movw	r24, r28
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	47 dc       	rcall	.-1906   	; 0x4be <_Z11printSerial6Stringi>
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
		if (askedLength>1) {
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	8f 15       	cp	r24, r15
			msgData_2 = Serial1.read();
     c3c:	30 f5       	brcc	.+76     	; 0xc8a <_Z7getDatahhh+0x17c>
     c3e:	8e e4       	ldi	r24, 0x4E	; 78
     c40:	94 e0       	ldi	r25, 0x04	; 4
     c42:	59 d7       	rcall	.+3762   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     c44:	28 2e       	mov	r2, r24
     c46:	7c 01       	movw	r14, r24
     c48:	ff 24       	eor	r15, r15
			msgData = msgData_1 + (msgData_2<<8);
     c4a:	5e 2c       	mov	r5, r14
     c4c:	44 24       	eor	r4, r4
     c4e:	46 0c       	add	r4, r6
     c50:	57 1c       	adc	r5, r7
			printSerial("Msg Data H ", msgData_2);
     c52:	6e e7       	ldi	r22, 0x7E	; 126
     c54:	72 e0       	ldi	r23, 0x02	; 2
     c56:	ce 01       	movw	r24, r28
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     c5e:	b7 01       	movw	r22, r14
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	2c dc       	rcall	.-1960   	; 0x4be <_Z11printSerial6Stringi>
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
			printSerial("Msg Data   ", msgData);
     c6e:	6a e8       	ldi	r22, 0x8A	; 138
     c70:	72 e0       	ldi	r23, 0x02	; 2
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     c7a:	b2 01       	movw	r22, r4
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	1e dc       	rcall	.-1988   	; 0x4be <_Z11printSerial6Stringi>
     c82:	ce 01       	movw	r24, r28
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
		}
		msgChecksum = Serial1.read();
     c8a:	8e e4       	ldi	r24, 0x4E	; 78
     c8c:	94 e0       	ldi	r25, 0x04	; 4
     c8e:	33 d7       	rcall	.+3686   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     c90:	7c 01       	movw	r14, r24
		printSerial("Checksum   ", msgChecksum);
     c92:	66 e9       	ldi	r22, 0x96	; 150
     c94:	72 e0       	ldi	r23, 0x02	; 2
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     c9e:	b7 01       	movw	r22, r14
     ca0:	77 27       	eor	r23, r23
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0b dc       	rcall	.-2026   	; 0x4be <_Z11printSerial6Stringi>
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
     cb0:	a8 0c       	add	r10, r8
     cb2:	0a 0d       	add	r16, r10
     cb4:	0c 0d       	add	r16, r12
     cb6:	20 0e       	add	r2, r16
     cb8:	20 94       	com	r2
		printSerial("Checksum~  ", Checksum);
     cba:	62 ea       	ldi	r22, 0xA2	; 162
     cbc:	72 e0       	ldi	r23, 0x02	; 2
     cbe:	ce 01       	movw	r24, r28
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     cc6:	62 2d       	mov	r22, r2
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	f7 db       	rcall	.-2066   	; 0x4be <_Z11printSerial6Stringi>
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
     cd8:	11 e0       	ldi	r17, 0x01	; 1
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
     cda:	2e 10       	cpse	r2, r14
		printSerial("Checksum   ", msgChecksum);
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		printSerial("Checksum~  ", Checksum);
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	8e e4       	ldi	r24, 0x4E	; 78
     ce0:	94 e0       	ldi	r25, 0x04	; 4
     ce2:	ef d6       	rcall	.+3550   	; 0x1ac2 <_ZN14HardwareSerial9availableEv>
     ce4:	89 2b       	or	r24, r25
     ce6:	21 f0       	breq	.+8      	; 0xcf0 <_Z7getDatahhh+0x1e2>
     ce8:	8e e4       	ldi	r24, 0x4E	; 78
     cea:	94 e0       	ldi	r25, 0x04	; 4
     cec:	04 d7       	rcall	.+3592   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     cee:	f7 cf       	rjmp	.-18     	; 0xcde <_Z7getDatahhh+0x1d0>
     cf0:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
	serialReading = NO;
     cf4:	11 23       	and	r17, r17
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode if there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
     cf6:	41 f0       	breq	.+16     	; 0xd08 <_Z7getDatahhh+0x1fa>
     cf8:	33 20       	and	r3, r3
     cfa:	49 f0       	breq	.+18     	; 0xd0e <_Z7getDatahhh+0x200>
     cfc:	83 2d       	mov	r24, r3
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	91 95       	neg	r25
     d02:	81 95       	neg	r24
     d04:	91 09       	sbc	r25, r1
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <_Z7getDatahhh+0x202>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	9f ef       	ldi	r25, 0xFF	; 255
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <_Z7getDatahhh+0x202>
     d0e:	c2 01       	movw	r24, r4
     d10:	26 96       	adiw	r28, 0x06	; 6
}
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	9f 90       	pop	r9
     d32:	8f 90       	pop	r8
     d34:	7f 90       	pop	r7
     d36:	6f 90       	pop	r6
     d38:	5f 90       	pop	r5
     d3a:	4f 90       	pop	r4
     d3c:	3f 90       	pop	r3
     d3e:	2f 90       	pop	r2
     d40:	08 95       	ret

00000d42 <_Z11printBufferv>:
     d42:	6e ea       	ldi	r22, 0xAE	; 174
 */
void printBuffer() {
	//delay(20);
	//uint8_t start_1, start_2, servo_id, msg_length, er_byte, chck_sum;

	Serial.print("## Start: ");
     d44:	72 e0       	ldi	r23, 0x02	; 2
     d46:	81 eb       	ldi	r24, 0xB1	; 177
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     d4e:	8e e4       	ldi	r24, 0x4E	; 78
     d50:	94 e0       	ldi	r25, 0x04	; 4
     d52:	b7 d6       	rcall	.+3438   	; 0x1ac2 <_ZN14HardwareSerial9availableEv>
     d54:	4a e0       	ldi	r20, 0x0A	; 10
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	bc 01       	movw	r22, r24
     d5a:	81 eb       	ldi	r24, 0xB1	; 177
     d5c:	93 e0       	ldi	r25, 0x03	; 3
     d5e:	0e 94 0d 11 	call	0x221a	; 0x221a <_ZN5Print5printEii>
	Serial.println(" ####################");
     d62:	68 e3       	ldi	r22, 0x38	; 56
     d64:	72 e0       	ldi	r23, 0x02	; 2
     d66:	81 eb       	ldi	r24, 0xB1	; 177
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN5Print7printlnEPKc>
	serialReading = YES;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
	while(Serial1.available()){
     d74:	8e e4       	ldi	r24, 0x4E	; 78
     d76:	94 e0       	ldi	r25, 0x04	; 4
     d78:	a4 d6       	rcall	.+3400   	; 0x1ac2 <_ZN14HardwareSerial9availableEv>
     d7a:	89 2b       	or	r24, r25
     d7c:	09 f1       	breq	.+66     	; 0xdc0 <_Z11printBufferv+0x7e>

		Serial.print(Serial1.available());
     d7e:	8e e4       	ldi	r24, 0x4E	; 78
     d80:	94 e0       	ldi	r25, 0x04	; 4
     d82:	9f d6       	rcall	.+3390   	; 0x1ac2 <_ZN14HardwareSerial9availableEv>
     d84:	4a e0       	ldi	r20, 0x0A	; 10
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	bc 01       	movw	r22, r24
     d8a:	81 eb       	ldi	r24, 0xB1	; 177
     d8c:	93 e0       	ldi	r25, 0x03	; 3
     d8e:	0e 94 0d 11 	call	0x221a	; 0x221a <_ZN5Print5printEii>
		Serial.print(", ");
     d92:	69 eb       	ldi	r22, 0xB9	; 185
     d94:	72 e0       	ldi	r23, 0x02	; 2
     d96:	81 eb       	ldi	r24, 0xB1	; 177
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
		Serial.println(Serial1.read());
     d9e:	8e e4       	ldi	r24, 0x4E	; 78
     da0:	94 e0       	ldi	r25, 0x04	; 4
     da2:	a9 d6       	rcall	.+3410   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     da4:	4a e0       	ldi	r20, 0x0A	; 10
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	bc 01       	movw	r22, r24
     daa:	81 eb       	ldi	r24, 0xB1	; 177
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN5Print7printlnEii>
		delay(1);
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>

	Serial.print("## Start: ");
	Serial.print(Serial1.available());
	Serial.println(" ####################");
	serialReading = YES;
	while(Serial1.available()){
     dbe:	da cf       	rjmp	.-76     	; 0xd74 <_Z11printBufferv+0x32>
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	serialReading = NO;
     dc0:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
	Serial.println("## End #####################");
     dc4:	6c eb       	ldi	r22, 0xBC	; 188
     dc6:	72 e0       	ldi	r23, 0x02	; 2
     dc8:	81 eb       	ldi	r24, 0xB1	; 177
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	0c 94 5f 10 	jmp	0x20be	; 0x20be <_ZN5Print7printlnEPKc>

00000dd0 <setup>:
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	00 d0       	rcall	.+0      	; 0xdda <setup+0xa>
     dda:	00 d0       	rcall	.+0      	; 0xddc <setup+0xc>
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
     de0:	33 db       	rcall	.-2458   	; 0x448 <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
     de2:	8a e5       	ldi	r24, 0x5A	; 90
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     dea:	8a e5       	ldi	r24, 0x5A	; 90
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	0e 94 af 13 	call	0x275e	; 0x275e <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     df2:	8a e5       	ldi	r24, 0x5A	; 90
     df4:	93 e0       	ldi	r25, 0x03	; 3
     df6:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	0e 94 8d 12 	call	0x251a	; 0x251a <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	0e 94 8d 12 	call	0x251a	; 0x251a <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     e0a:	26 e0       	ldi	r18, 0x06	; 6
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	51 ee       	ldi	r21, 0xE1	; 225
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	81 eb       	ldi	r24, 0xB1	; 177
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	5b d7       	rcall	.+3766   	; 0x1cd0 <_ZN14HardwareSerial5beginEmh>
     e1a:	26 e0       	ldi	r18, 0x06	; 6
     e1c:	47 e3       	ldi	r20, 0x37	; 55
     e1e:	5f ed       	ldi	r21, 0xDF	; 223
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	8e e4       	ldi	r24, 0x4E	; 78
     e26:	94 e0       	ldi	r25, 0x04	; 4
     e28:	53 d7       	rcall	.+3750   	; 0x1cd0 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
     e2a:	8e e4       	ldi	r24, 0x4E	; 78
     e2c:	94 e0       	ldi	r25, 0x04	; 4
     e2e:	2f d7       	rcall	.+3678   	; 0x1c8e <_ZN14HardwareSerial5flushEv>
     e30:	85 e0       	ldi	r24, 0x05	; 5
	arm.id = 5;
     e32:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <arm>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	08 dd       	rcall	.-1520   	; 0x84a <_Z12setModeWheelh>
	setModeWheel(2);
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	06 dd       	rcall	.-1524   	; 0x84a <_Z12setModeWheelh>
	setModeMultiTurn(3);
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	08 dd       	rcall	.-1520   	; 0x852 <_Z16setModeMultiTurnh>
     e42:	84 e0       	ldi	r24, 0x04	; 4
	setModeJoint(4);
     e44:	04 dd       	rcall	.-1528   	; 0x84e <_Z12setModeJointh>
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	02 dd       	rcall	.-1532   	; 0x84e <_Z12setModeJointh>
	setModeJoint(5);
     e4a:	86 e9       	ldi	r24, 0x96	; 150
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <arm+0x12>
	/* Set the speeds of the servos */
	arm.servos[1].speed = 150;
     e52:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <arm+0x11>
     e56:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <arm+0x1c>
     e5a:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <arm+0x1b>
	arm.servos[2].speed = 150;
     e5e:	8e e1       	ldi	r24, 0x1E	; 30
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <arm+0x26>
	arm.servos[3].speed = 30;
     e66:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <arm+0x25>
     e6a:	8f e0       	ldi	r24, 0x0F	; 15
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <arm+0x30>
	arm.servos[4].speed = 15;
     e72:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <arm+0x2f>
     e76:	84 e1       	ldi	r24, 0x14	; 20
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <arm+0x3a>
	arm.servos[5].speed = 20;
     e7e:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <arm+0x39>
     e82:	11 e0       	ldi	r17, 0x01	; 1
     e84:	6f ef       	ldi	r22, 0xFF	; 255
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
     e86:	73 e0       	ldi	r23, 0x03	; 3
		setTorqueLimit(i, MAX_TORQUE);
     e88:	81 2f       	mov	r24, r17
     e8a:	86 dc       	rcall	.-1780   	; 0x798 <_Z14setTorqueLimithi>
     e8c:	1f 5f       	subi	r17, 0xFF	; 255
     e8e:	16 30       	cpi	r17, 0x06	; 6
     e90:	c9 f7       	brne	.-14     	; 0xe84 <setup+0xb4>
	arm.servos[2].speed = 150;
	arm.servos[3].speed = 30;
	arm.servos[4].speed = 15;
	arm.servos[5].speed = 20;
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	8a e5       	ldi	r24, 0x5A	; 90
		setTorqueLimit(i, MAX_TORQUE);
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     e9e:	69 ed       	ldi	r22, 0xD9	; 217
     ea0:	72 e0       	ldi	r23, 0x02	; 2
     ea2:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.print("sID:");
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.setCursor(0,1);
     eb0:	93 e0       	ldi	r25, 0x03	; 3
     eb2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     eb6:	6e ed       	ldi	r22, 0xDE	; 222
     eb8:	72 e0       	ldi	r23, 0x02	; 2
     eba:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.print("deg:");
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
     ec2:	42 e0       	ldi	r20, 0x02	; 2
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.setCursor(0,2);
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     ece:	63 ee       	ldi	r22, 0xE3	; 227
     ed0:	72 e0       	ldi	r23, 0x02	; 2
     ed2:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.print("rpm:");
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
     eda:	43 e0       	ldi	r20, 0x03	; 3
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.setCursor(0,3);
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     ee6:	68 ee       	ldi	r22, 0xE8	; 232
     ee8:	72 e0       	ldi	r23, 0x02	; 2
     eea:	8a e5       	ldi	r24, 0x5A	; 90
	lcd.print("ld%:");
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
     ef2:	48 e0       	ldi	r20, 0x08	; 8

	readServo(arm.id, 0x18, 8);
     ef4:	68 e1       	ldi	r22, 0x18	; 24
     ef6:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <arm>
     efa:	af dd       	rcall	.-1186   	; 0xa5a <_Z9readServohhh>
     efc:	22 df       	rcall	.-444    	; 0xd42 <_Z11printBufferv>
	printBuffer();
     efe:	62 e0       	ldi	r22, 0x02	; 2
     f00:	70 e0       	ldi	r23, 0x00	; 0
	delay(2);
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
     f0a:	42 e0       	ldi	r20, 0x02	; 2
     f0c:	64 e4       	ldi	r22, 0x44	; 68
	int somthe = getData(5, MX_CURRENT_L, 2);
     f0e:	85 e0       	ldi	r24, 0x05	; 5
     f10:	fe dd       	rcall	.-1028   	; 0xb0e <_Z7getDatahhh>
     f12:	8c 01       	movw	r16, r24
     f14:	6d ee       	ldi	r22, 0xED	; 237
     f16:	72 e0       	ldi	r23, 0x02	; 2
	printSerial("return", somthe);
     f18:	ce 01       	movw	r24, r28
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6StringC1EPKc>
     f20:	b8 01       	movw	r22, r16
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	cb da       	rcall	.-2666   	; 0x4be <_Z11printSerial6Stringi>
     f28:	ce 01       	movw	r24, r28
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN6StringD1Ev>
     f30:	26 96       	adiw	r28, 0x06	; 6
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
	//printBuffer();
}
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <_Z12printDataLCDv>:
     f46:	7f 92       	push	r7
     f48:	8f 92       	push	r8
     f4a:	9f 92       	push	r9
void printSerial(String title, int value) {
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
void printDataLCD() {
     f4c:	af 92       	push	r10
     f4e:	bf 92       	push	r11
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
	delay(10);
     f60:	6a e0       	ldi	r22, 0x0A	; 10
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 92 11 	call	0x2324	; 0x2324 <delay>
	int punch;
	int current;
	int8_t rotations = 0;
	bool speedDirection, loadDirection;
	uint8_t i = 0;
	int available = Serial1.available();
     f6c:	8e e4       	ldi	r24, 0x4E	; 78
     f6e:	94 e0       	ldi	r25, 0x04	; 4
     f70:	a8 d5       	rcall	.+2896   	; 0x1ac2 <_ZN14HardwareSerial9availableEv>
	if (available > 0){
     f72:	18 16       	cp	r1, r24
     f74:	19 06       	cpc	r1, r25
     f76:	0c f0       	brlt	.+2      	; 0xf7a <_Z12printDataLCDv+0x34>
     f78:	12 c2       	rjmp	.+1060   	; 0x139e <_Z12printDataLCDv+0x458>
		serialReading = YES;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__data_end>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     f80:	8e e4       	ldi	r24, 0x4E	; 78
     f82:	94 e0       	ldi	r25, 0x04	; 4
     f84:	b8 d5       	rcall	.+2928   	; 0x1af6 <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     f86:	8f 3f       	cpi	r24, 0xFF	; 255
     f88:	91 05       	cpc	r25, r1
     f8a:	09 f0       	breq	.+2      	; 0xf8e <_Z12printDataLCDv+0x48>
     f8c:	08 c2       	rjmp	.+1040   	; 0x139e <_Z12printDataLCDv+0x458>
     f8e:	8e e4       	ldi	r24, 0x4E	; 78
     f90:	94 e0       	ldi	r25, 0x04	; 4
     f92:	b1 d5       	rcall	.+2914   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     f94:	8f 3f       	cpi	r24, 0xFF	; 255
     f96:	91 05       	cpc	r25, r1
     f98:	09 f0       	breq	.+2      	; 0xf9c <_Z12printDataLCDv+0x56>
     f9a:	01 c2       	rjmp	.+1026   	; 0x139e <_Z12printDataLCDv+0x458>
			do { servoID = Serial1.read(); } while (servoID == 0xFF); // this make sure you wait for real data
     f9c:	8e e4       	ldi	r24, 0x4E	; 78
     f9e:	94 e0       	ldi	r25, 0x04	; 4
     fa0:	aa d5       	rcall	.+2900   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     fa2:	8c 01       	movw	r16, r24
     fa4:	98 2e       	mov	r9, r24
     fa6:	2f ef       	ldi	r18, 0xFF	; 255
     fa8:	82 17       	cp	r24, r18
     faa:	c1 f3       	breq	.-16     	; 0xf9c <_Z12printDataLCDv+0x56>

			msgLength = Serial1.read(); // msg Length
     fac:	8e e4       	ldi	r24, 0x4E	; 78
     fae:	94 e0       	ldi	r25, 0x04	; 4
     fb0:	a2 d5       	rcall	.+2884   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     fb2:	d8 2f       	mov	r29, r24
			error_byte = Serial1.read();
     fb4:	8e e4       	ldi	r24, 0x4E	; 78
     fb6:	94 e0       	ldi	r25, 0x04	; 4
     fb8:	9e d5       	rcall	.+2876   	; 0x1af6 <_ZN14HardwareSerial4readEv>
     fba:	c8 2f       	mov	r28, r24
     fbc:	81 11       	cpse	r24, r1
			error_byte_old = error_byte ? error_byte : error_byte_old;
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <_Z12printDataLCDv+0x7e>
     fc0:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <error_byte_old>
     fc4:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <error_byte_old>
     fc8:	40 e0       	ldi	r20, 0x00	; 0

			lcd.setCursor(6,0);
     fca:	66 e0       	ldi	r22, 0x06	; 6
     fcc:	8a e5       	ldi	r24, 0x5A	; 90
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     fd4:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <error_counter>
     fd8:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <error_counter+0x1>
     fdc:	c1 11       	cpse	r28, r1
			if (error_byte || error_counter) {
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <_Z12printDataLCDv+0x9e>
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	11 f1       	breq	.+68     	; 0x1028 <_Z12printDataLCDv+0xe2>
     fe4:	8b 30       	cpi	r24, 0x0B	; 11
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     fe6:	91 05       	cpc	r25, r1
     fe8:	14 f4       	brge	.+4      	; 0xfee <_Z12printDataLCDv+0xa8>
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <_Z12printDataLCDv+0xac>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <error_counter+0x1>
     ff6:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <error_counter>
				String* er;
				er = error_decode(error_byte);
     ffa:	8c 2f       	mov	r24, r28
     ffc:	77 da       	rcall	.-2834   	; 0x4ec <_Z12error_decodeh>
     ffe:	63 e0       	ldi	r22, 0x03	; 3
				lcd.print("ER:");
    1000:	73 e0       	ldi	r23, 0x03	; 3
    1002:	8a e5       	ldi	r24, 0x5A	; 90
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
    100a:	4a e0       	ldi	r20, 0x0A	; 10
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <error_byte_old>
    1012:	8a e5       	ldi	r24, 0x5A	; 90
    1014:	93 e0       	ldi	r25, 0x03	; 3
    1016:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5Print5printEhi>
    101a:	6e e0       	ldi	r22, 0x0E	; 14
				lcd.print("   ");
    101c:	73 e0       	ldi	r23, 0x03	; 3
    101e:	8a e5       	ldi	r24, 0x5A	; 90
    1020:	93 e0       	ldi	r25, 0x03	; 3
    1022:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
    1026:	96 c1       	rjmp	.+812    	; 0x1354 <_Z12printDataLCDv+0x40e>
    1028:	67 e0       	ldi	r22, 0x07	; 7
			} else { // No Error :)
				lcd.print("          ");
    102a:	73 e0       	ldi	r23, 0x03	; 3
    102c:	8a e5       	ldi	r24, 0x5A	; 90
    102e:	93 e0       	ldi	r25, 0x03	; 3
    1030:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print5printEPKc>
				if (msgLength > 2) {
    1034:	d3 30       	cpi	r29, 0x03	; 3
    1036:	08 f4       	brcc	.+2      	; 0x103a <_Z12printDataLCDv+0xf4>
					position = Serial1.read();
    1038:	8d c1       	rjmp	.+794    	; 0x1354 <_Z12printDataLCDv+0x40e>
    103a:	8e e4       	ldi	r24, 0x4E	; 78
    103c:	94 e0       	ldi	r25, 0x04	; 4
    103e:	5b d5       	rcall	.+2742   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    1040:	ec 01       	movw	r28, r24
					position = (Serial1.read()<<8) + position;
    1042:	8e e4       	ldi	r24, 0x4E	; 78
    1044:	94 e0       	ldi	r25, 0x04	; 4
    1046:	57 d5       	rcall	.+2734   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	38 2f       	mov	r19, r24
    104e:	c2 0f       	add	r28, r18
    1050:	d3 1f       	adc	r29, r19
    1052:	78 01       	movw	r14, r16
					if (arm.servos[servoID].state==1) {
    1054:	ff 24       	eor	r15, r15
    1056:	3a e0       	ldi	r19, 0x0A	; 10
    1058:	03 9f       	mul	r16, r19
    105a:	f0 01       	movw	r30, r0
    105c:	11 24       	eor	r1, r1
    105e:	e5 59       	subi	r30, 0x95	; 149
    1060:	fc 4f       	sbci	r31, 0xFC	; 252
    1062:	85 81       	ldd	r24, Z+5	; 0x05
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	61 f4       	brne	.+24     	; 0x1080 <_Z12printDataLCDv+0x13a>
    1068:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <position_old>
						arm.servos[servoID].turns = ((position_old+100) < position)
							? arm.servos[servoID].turns - 1
							: arm.servos[servoID].turns;
    106c:	30 91 b0 03 	lds	r19, 0x03B0	; 0x8003b0 <position_old+0x1>
    1070:	2c 59       	subi	r18, 0x9C	; 156
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	86 81       	ldd	r24, Z+6	; 0x06
    1076:	2c 17       	cp	r18, r28
    1078:	3d 07       	cpc	r19, r29
    107a:	84 f4       	brge	.+32     	; 0x109c <_Z12printDataLCDv+0x156>
    107c:	81 50       	subi	r24, 0x01	; 1
    107e:	0e c0       	rjmp	.+28     	; 0x109c <_Z12printDataLCDv+0x156>
    1080:	82 30       	cpi	r24, 0x02	; 2
					} else if (arm.servos[servoID].state==2){
    1082:	a9 f4       	brne	.+42     	; 0x10ae <_Z12printDataLCDv+0x168>
    1084:	40 91 af 03 	lds	r20, 0x03AF	; 0x8003af <position_old>
						arm.servos[servoID].turns = (position_old > (position+100)) 
							? arm.servos[servoID].turns + 1
							: arm.servos[servoID].turns;
    1088:	50 91 b0 03 	lds	r21, 0x03B0	; 0x8003b0 <position_old+0x1>
    108c:	86 81       	ldd	r24, Z+6	; 0x06
    108e:	9e 01       	movw	r18, r28
    1090:	2c 59       	subi	r18, 0x9C	; 156
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	24 17       	cp	r18, r20
    1096:	35 07       	cpc	r19, r21
    1098:	0c f4       	brge	.+2      	; 0x109c <_Z12printDataLCDv+0x156>
    109a:	8f 5f       	subi	r24, 0xFF	; 255
    109c:	9a e0       	ldi	r25, 0x0A	; 10
    109e:	9e 9d       	mul	r25, r14
    10a0:	f0 01       	movw	r30, r0
    10a2:	9f 9d       	mul	r25, r15
    10a4:	f0 0d       	add	r31, r0
    10a6:	11 24       	eor	r1, r1
    10a8:	e5 59       	subi	r30, 0x95	; 149
    10aa:	fc 4f       	sbci	r31, 0xFC	; 252
    10ac:	86 83       	std	Z+6, r24	; 0x06
					}

					position_old = position;
    10ae:	d0 93 b0 03 	sts	0x03B0, r29	; 0x8003b0 <position_old+0x1>
    10b2:	c0 93 af 03 	sts	0x03AF, r28	; 0x8003af <position_old>

					//Serial.println(position);
					speed = Serial1.read();
    10b6:	8e e4       	ldi	r24, 0x4E	; 78
    10b8:	94 e0       	ldi	r25, 0x04	; 4
    10ba:	1d d5       	rcall	.+2618   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    10bc:	6c 01       	movw	r12, r24
					speed = (Serial1.read()<<8) + speed;
    10be:	8e e4       	ldi	r24, 0x4E	; 78
    10c0:	94 e0       	ldi	r25, 0x04	; 4
    10c2:	19 d5       	rcall	.+2610   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	38 2f       	mov	r19, r24
    10ca:	c2 0e       	add	r12, r18
					//Serial.println(speed);
					load = Serial1.read();
    10cc:	d3 1e       	adc	r13, r19
    10ce:	8e e4       	ldi	r24, 0x4E	; 78
    10d0:	94 e0       	ldi	r25, 0x04	; 4
    10d2:	11 d5       	rcall	.+2594   	; 0x1af6 <_ZN14HardwareSerial4readEv>
					load = (Serial1.read()<<8) + load;
    10d4:	8c 01       	movw	r16, r24
    10d6:	8e e4       	ldi	r24, 0x4E	; 78
    10d8:	94 e0       	ldi	r25, 0x04	; 4
    10da:	0d d5       	rcall	.+2586   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	38 2f       	mov	r19, r24
					voltage = Serial1.read();
    10e2:	02 0f       	add	r16, r18
    10e4:	13 1f       	adc	r17, r19
    10e6:	8e e4       	ldi	r24, 0x4E	; 78
					temperature = Serial1.read();
    10e8:	94 e0       	ldi	r25, 0x04	; 4
    10ea:	05 d5       	rcall	.+2570   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    10ec:	8e e4       	ldi	r24, 0x4E	; 78
					registered = Serial1.read();
    10ee:	94 e0       	ldi	r25, 0x04	; 4
    10f0:	02 d5       	rcall	.+2564   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    10f2:	8e e4       	ldi	r24, 0x4E	; 78
					moving = Serial1.read();
    10f4:	94 e0       	ldi	r25, 0x04	; 4
    10f6:	ff d4       	rcall	.+2558   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    10f8:	8e e4       	ldi	r24, 0x4E	; 78
					lock = Serial1.read();
    10fa:	94 e0       	ldi	r25, 0x04	; 4
    10fc:	fc d4       	rcall	.+2552   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    10fe:	8e e4       	ldi	r24, 0x4E	; 78
    1100:	94 e0       	ldi	r25, 0x04	; 4
					punch = Serial1.read();
    1102:	f9 d4       	rcall	.+2546   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    1104:	8e e4       	ldi	r24, 0x4E	; 78
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	f6 d4       	rcall	.+2540   	; 0x1af6 <_ZN14HardwareSerial4readEv>
					punch = (Serial1.read()<<8) + punch;
    110a:	8e e4       	ldi	r24, 0x4E	; 78
    110c:	94 e0       	ldi	r25, 0x04	; 4
    110e:	f3 d4       	rcall	.+2534   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    1110:	8e e4       	ldi	r24, 0x4E	; 78
					current = Serial1.read();
    1112:	94 e0       	ldi	r25, 0x04	; 4
    1114:	f0 d4       	rcall	.+2528   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    1116:	8e e4       	ldi	r24, 0x4E	; 78
    1118:	94 e0       	ldi	r25, 0x04	; 4
					current = (Serial1.read()<<8) + current;
    111a:	ed d4       	rcall	.+2522   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    111c:	c1 14       	cp	r12, r1
    111e:	44 e0       	ldi	r20, 0x04	; 4
    1120:	d4 06       	cpc	r13, r20
					//Serial.println(load);
					if (speed > 0x3FF) {
    1122:	2c f0       	brlt	.+10     	; 0x112e <_Z12printDataLCDv+0x1e8>
    1124:	54 e0       	ldi	r21, 0x04	; 4
    1126:	d5 1a       	sub	r13, r21
    1128:	77 24       	eor	r7, r7
						speedDirection = CW;
						speed = speed - 0x400;
    112a:	73 94       	inc	r7
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <_Z12printDataLCDv+0x1ea>
					punch = (Serial1.read()<<8) + punch;
					current = Serial1.read();
					current = (Serial1.read()<<8) + current;
					//Serial.println(load);
					if (speed > 0x3FF) {
						speedDirection = CW;
    112e:	71 2c       	mov	r7, r1
    1130:	01 15       	cp	r16, r1
    1132:	84 e0       	ldi	r24, 0x04	; 4
						speed = speed - 0x400;
					} else {
						speedDirection = CCW;
    1134:	18 07       	cpc	r17, r24
					}
					if (load > 0x3FF) {
    1136:	24 f0       	brlt	.+8      	; 0x1140 <_Z12printDataLCDv+0x1fa>
    1138:	14 50       	subi	r17, 0x04	; 4
    113a:	88 24       	eor	r8, r8
    113c:	83 94       	inc	r8
						loadDirection = CW;
						load = load - 0x400;
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <_Z12printDataLCDv+0x1fc>
						speed = speed - 0x400;
					} else {
						speedDirection = CCW;
					}
					if (load > 0x3FF) {
						loadDirection = CW;
    1140:	81 2c       	mov	r8, r1
    1142:	c1 14       	cp	r12, r1
    1144:	d1 04       	cpc	r13, r1
						load = load - 0x400;
					} else {
						loadDirection = CCW;
    1146:	21 f4       	brne	.+8      	; 0x1150 <_Z12printDataLCDv+0x20a>
					}
					/* Update the Arm Object */
					arm.servos[servoID].state = speed ? 0 : speedDirection ? 1 : 2;
    1148:	71 10       	cpse	r7, r1
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <_Z12printDataLCDv+0x20e>
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <_Z12printDataLCDv+0x210>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <_Z12printDataLCDv+0x210>
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	9a e0       	ldi	r25, 0x0A	; 10
    1158:	9e 9d       	mul	r25, r14
    115a:	90 01       	movw	r18, r0
    115c:	9f 9d       	mul	r25, r15
    115e:	30 0d       	add	r19, r0
    1160:	11 24       	eor	r1, r1
    1162:	f9 01       	movw	r30, r18
    1164:	e5 59       	subi	r30, 0x95	; 149
    1166:	fc 4f       	sbci	r31, 0xFC	; 252
    1168:	5f 01       	movw	r10, r30
    116a:	85 83       	std	Z+5, r24	; 0x05
    116c:	d4 83       	std	Z+4, r29	; 0x04
    116e:	c3 83       	std	Z+3, r28	; 0x03
					arm.servos[servoID].position = position;
    1170:	12 87       	std	Z+10, r17	; 0x0a
    1172:	01 87       	std	Z+9, r16	; 0x09
					arm.servos[servoID].speed;
					arm.servos[servoID].load = load;
    1174:	21 e0       	ldi	r18, 0x01	; 1
					//Serial.println("================");
					//lcd.clear();
					//char buffer[16];
					//sprintf(buffer, "Servo ID: %d", servoID);
					printLCD(LCD_COL1, 0, servoID, 1);
    1176:	a7 01       	movw	r20, r14
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	c6 d8       	rcall	.-3700   	; 0x30a <_Z8printLCDhhih>
    117e:	f5 01       	movw	r30, r10
    1180:	82 81       	ldd	r24, Z+2	; 0x02
					lcd.print(arm.servos[servoID].mode == 1 ? " Whl" : arm.servos[servoID].mode == 2 ? " Mlt" : " Jnt");
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	29 f0       	breq	.+10     	; 0x1190 <_Z12printDataLCDv+0x24a>
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	31 f0       	breq	.+12     	; 0x1196 <_Z12printDataLCDv+0x250>
    118a:	64 ef       	ldi	r22, 0xF4	; 244
    118c:	72 e0       	ldi	r23, 0x02	; 2
    118e:	05 c0       	rjmp	.+10     	; 0x119a <_Z12printDataLCDv+0x254>
    1190:	69 ef       	ldi	r22, 0xF9	; 249
    1192:	72 e0       	ldi	r23, 0x02	; 2
    1194:	02 c0       	rjmp	.+4      	; 0x119a <_Z12printDataLCDv+0x254>
    1196:	6e ef       	ldi	r22, 0xFE	; 254
    1198:	72 e0       	ldi	r23, 0x02	; 2
    119a:	8a e5       	ldi	r24, 0x5A	; 90
					printLCD(LCD_COL1, 1, position * MX_PRESENT_POSITION_DEGREE, 4);
    119c:	93 e0       	ldi	r25, 0x03	; 3
    119e:	84 d7       	rcall	.+3848   	; 0x20a8 <_ZN5Print5printEPKc>
    11a0:	be 01       	movw	r22, r28
    11a2:	0d 2e       	mov	r0, r29
    11a4:	00 0c       	add	r0, r0
    11a6:	88 0b       	sbc	r24, r24
    11a8:	99 0b       	sbc	r25, r25
    11aa:	ab d1       	rcall	.+854    	; 0x1502 <__floatsisf>
    11ac:	28 e5       	ldi	r18, 0x58	; 88
    11ae:	39 e3       	ldi	r19, 0x39	; 57
    11b0:	44 eb       	ldi	r20, 0xB4	; 180
    11b2:	5d e3       	ldi	r21, 0x3D	; 61
    11b4:	56 d2       	rcall	.+1196   	; 0x1662 <__mulsf3>
    11b6:	72 d1       	rcall	.+740    	; 0x149c <__fixsfsi>
    11b8:	24 e0       	ldi	r18, 0x04	; 4
    11ba:	ab 01       	movw	r20, r22
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	84 e0       	ldi	r24, 0x04	; 4
    11c0:	a4 d8       	rcall	.-3768   	; 0x30a <_Z8printLCDhhih>
    11c2:	6f ed       	ldi	r22, 0xDF	; 223
					lcd.print((char)CH_DEG);
    11c4:	8a e5       	ldi	r24, 0x5A	; 90
    11c6:	93 e0       	ldi	r25, 0x03	; 3
    11c8:	70 d7       	rcall	.+3808   	; 0x20aa <_ZN5Print5printEc>
    11ca:	2a e0       	ldi	r18, 0x0A	; 10
					printLCD(11, 1, arm.servos[servoID].turns,3);
    11cc:	2e 9d       	mul	r18, r14
    11ce:	c0 01       	movw	r24, r0
    11d0:	2f 9d       	mul	r18, r15
    11d2:	90 0d       	add	r25, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	9c 01       	movw	r18, r24
    11d8:	25 59       	subi	r18, 0x95	; 149
    11da:	3c 4f       	sbci	r19, 0xFC	; 252
    11dc:	59 01       	movw	r10, r18
    11de:	f9 01       	movw	r30, r18
    11e0:	46 81       	ldd	r20, Z+6	; 0x06
    11e2:	04 2e       	mov	r0, r20
    11e4:	00 0c       	add	r0, r0
    11e6:	55 0b       	sbc	r21, r21
    11e8:	23 e0       	ldi	r18, 0x03	; 3
    11ea:	61 e0       	ldi	r22, 0x01	; 1
					lcd.print("turns");
    11ec:	8b e0       	ldi	r24, 0x0B	; 11
    11ee:	8d d8       	rcall	.-3814   	; 0x30a <_Z8printLCDhhih>
    11f0:	62 e1       	ldi	r22, 0x12	; 18
    11f2:	73 e0       	ldi	r23, 0x03	; 3
					printLCD(LCD_COL2+5, 1, arm.servos[servoID].position * MX_PRESENT_POSITION_DEGREE, 4);
    11f4:	8a e5       	ldi	r24, 0x5A	; 90
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	57 d7       	rcall	.+3758   	; 0x20a8 <_ZN5Print5printEPKc>
    11fa:	f5 01       	movw	r30, r10
    11fc:	63 81       	ldd	r22, Z+3	; 0x03
    11fe:	74 81       	ldd	r23, Z+4	; 0x04
    1200:	07 2e       	mov	r0, r23
    1202:	00 0c       	add	r0, r0
    1204:	88 0b       	sbc	r24, r24
    1206:	99 0b       	sbc	r25, r25
    1208:	7c d1       	rcall	.+760    	; 0x1502 <__floatsisf>
    120a:	28 e5       	ldi	r18, 0x58	; 88
    120c:	39 e3       	ldi	r19, 0x39	; 57
    120e:	44 eb       	ldi	r20, 0xB4	; 180
    1210:	5d e3       	ldi	r21, 0x3D	; 61
    1212:	27 d2       	rcall	.+1102   	; 0x1662 <__mulsf3>
    1214:	43 d1       	rcall	.+646    	; 0x149c <__fixsfsi>
    1216:	24 e0       	ldi	r18, 0x04	; 4
    1218:	ab 01       	movw	r20, r22
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	8f e0       	ldi	r24, 0x0F	; 15
					lcd.print((char)CH_DEG);
    121e:	75 d8       	rcall	.-3862   	; 0x30a <_Z8printLCDhhih>
    1220:	6f ed       	ldi	r22, 0xDF	; 223
    1222:	8a e5       	ldi	r24, 0x5A	; 90
    1224:	93 e0       	ldi	r25, 0x03	; 3
					// 			lcd.setCursor(LCD_COL2 ,1);
					// 			lcd.print((int)(currPos));
					//lcd.setCursor(10,1);
					//lcd.print(rotations);
					printLCD(LCD_COL1, 2, speed, 4);
    1226:	41 d7       	rcall	.+3714   	; 0x20aa <_ZN5Print5printEc>
    1228:	24 e0       	ldi	r18, 0x04	; 4
    122a:	a6 01       	movw	r20, r12
    122c:	62 e0       	ldi	r22, 0x02	; 2
    122e:	84 e0       	ldi	r24, 0x04	; 4
					lcd.print(speedDirection ? (char)CH_ARR : (char)CH_ARL);
    1230:	6c d8       	rcall	.-3880   	; 0x30a <_Z8printLCDhhih>
    1232:	71 10       	cpse	r7, r1
    1234:	02 c0       	rjmp	.+4      	; 0x123a <_Z12printDataLCDv+0x2f4>
    1236:	6f e7       	ldi	r22, 0x7F	; 127
    1238:	01 c0       	rjmp	.+2      	; 0x123c <_Z12printDataLCDv+0x2f6>
    123a:	6e e7       	ldi	r22, 0x7E	; 126
    123c:	8a e5       	ldi	r24, 0x5A	; 90
    123e:	93 e0       	ldi	r25, 0x03	; 3
					printLCD(LCD_COL1+5, 2, arm.servos[servoID].speed, 4);
    1240:	34 d7       	rcall	.+3688   	; 0x20aa <_ZN5Print5printEc>
    1242:	8a e0       	ldi	r24, 0x0A	; 10
    1244:	8e 9d       	mul	r24, r14
    1246:	f0 01       	movw	r30, r0
    1248:	8f 9d       	mul	r24, r15
    124a:	f0 0d       	add	r31, r0
    124c:	11 24       	eor	r1, r1
    124e:	e5 59       	subi	r30, 0x95	; 149
    1250:	fc 4f       	sbci	r31, 0xFC	; 252
    1252:	47 81       	ldd	r20, Z+7	; 0x07
    1254:	50 85       	ldd	r21, Z+8	; 0x08
    1256:	24 e0       	ldi	r18, 0x04	; 4
    1258:	62 e0       	ldi	r22, 0x02	; 2
    125a:	89 e0       	ldi	r24, 0x09	; 9
					printLCD(LCD_COL1+10, 2, lastButtonPressed, 1);
    125c:	56 d8       	rcall	.-3924   	; 0x30a <_Z8printLCDhhih>
    125e:	40 91 ab 03 	lds	r20, 0x03AB	; 0x8003ab <lastButtonPressed>
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	21 e0       	ldi	r18, 0x01	; 1
    1266:	62 e0       	ldi	r22, 0x02	; 2
    1268:	8e e0       	ldi	r24, 0x0E	; 14
					lcd.print(buttonsState[2]);
    126a:	4f d8       	rcall	.-3938   	; 0x30a <_Z8printLCDhhih>
    126c:	60 91 aa 03 	lds	r22, 0x03AA	; 0x8003aa <buttonsState+0x2>
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	4a e0       	ldi	r20, 0x0A	; 10
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	8a e5       	ldi	r24, 0x5A	; 90
    1278:	93 e0       	ldi	r25, 0x03	; 3
    127a:	cf d7       	rcall	.+3998   	; 0x221a <_ZN5Print5printEii>
					lcd.print(buttonsState[1]);
    127c:	60 91 a9 03 	lds	r22, 0x03A9	; 0x8003a9 <buttonsState+0x1>
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	4a e0       	ldi	r20, 0x0A	; 10
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	8a e5       	ldi	r24, 0x5A	; 90
    1288:	93 e0       	ldi	r25, 0x03	; 3
    128a:	c7 d7       	rcall	.+3982   	; 0x221a <_ZN5Print5printEii>
					printLCD(LCD_COL1, 3, load, 4);
    128c:	24 e0       	ldi	r18, 0x04	; 4
    128e:	a8 01       	movw	r20, r16
    1290:	63 e0       	ldi	r22, 0x03	; 3
    1292:	84 e0       	ldi	r24, 0x04	; 4
    1294:	3a d8       	rcall	.-3980   	; 0x30a <_Z8printLCDhhih>
    1296:	81 10       	cpse	r8, r1
					lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
    1298:	02 c0       	rjmp	.+4      	; 0x129e <_Z12printDataLCDv+0x358>
    129a:	6f e7       	ldi	r22, 0x7F	; 127
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <_Z12printDataLCDv+0x35a>
    129e:	6e e7       	ldi	r22, 0x7E	; 126
    12a0:	8a e5       	ldi	r24, 0x5A	; 90
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	02 d7       	rcall	.+3588   	; 0x20aa <_ZN5Print5printEc>
					printCharLCD(LCD_COL1+10, 3, (arm.servos[1].state==1 ? (char)CH_ARR : arm.servos[1].state==0 ? '#' : (char)CH_ARL));
    12a6:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <arm+0xf>
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	21 f0       	breq	.+8      	; 0x12b6 <_Z12printDataLCDv+0x370>
    12ae:	88 23       	and	r24, r24
    12b0:	21 f0       	breq	.+8      	; 0x12ba <_Z12printDataLCDv+0x374>
    12b2:	4f e7       	ldi	r20, 0x7F	; 127
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <_Z12printDataLCDv+0x376>
    12b6:	4e e7       	ldi	r20, 0x7E	; 126
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <_Z12printDataLCDv+0x376>
    12ba:	43 e2       	ldi	r20, 0x23	; 35
    12bc:	63 e0       	ldi	r22, 0x03	; 3
    12be:	8e e0       	ldi	r24, 0x0E	; 14
    12c0:	b5 d8       	rcall	.-3734   	; 0x42c <_Z12printCharLCDhhc>
					printCharLCD(LCD_COL1+11, 3, arm.servos[2].state==1 ? (char)CH_ARR : arm.servos[2].state==0 ? '#' : (char)CH_ARL);
    12c2:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <arm+0x19>
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <_Z12printDataLCDv+0x38c>
    12ca:	88 23       	and	r24, r24
    12cc:	21 f0       	breq	.+8      	; 0x12d6 <_Z12printDataLCDv+0x390>
    12ce:	4f e7       	ldi	r20, 0x7F	; 127
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <_Z12printDataLCDv+0x392>
    12d2:	4e e7       	ldi	r20, 0x7E	; 126
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <_Z12printDataLCDv+0x392>
    12d6:	43 e2       	ldi	r20, 0x23	; 35
    12d8:	63 e0       	ldi	r22, 0x03	; 3
    12da:	8f e0       	ldi	r24, 0x0F	; 15
    12dc:	a7 d8       	rcall	.-3762   	; 0x42c <_Z12printCharLCDhhc>
					printCharLCD(LCD_COL1+12, 3, arm.servos[3].state==1 ? (char)CH_ARR : arm.servos[3].state==0 ? '#' : (char)CH_ARL);
    12de:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <arm+0x23>
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	21 f0       	breq	.+8      	; 0x12ee <_Z12printDataLCDv+0x3a8>
    12e6:	88 23       	and	r24, r24
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <_Z12printDataLCDv+0x3ac>
    12ea:	4f e7       	ldi	r20, 0x7F	; 127
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <_Z12printDataLCDv+0x3ae>
    12ee:	4e e7       	ldi	r20, 0x7E	; 126
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <_Z12printDataLCDv+0x3ae>
    12f2:	43 e2       	ldi	r20, 0x23	; 35
    12f4:	63 e0       	ldi	r22, 0x03	; 3
    12f6:	80 e1       	ldi	r24, 0x10	; 16
    12f8:	99 d8       	rcall	.-3790   	; 0x42c <_Z12printCharLCDhhc>
    12fa:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <arm+0x2d>
					printCharLCD(LCD_COL1+13, 3, arm.servos[4].state==1 ? (char)CH_ARR : arm.servos[4].state==0 ? '#' : (char)CH_ARL);
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	21 f0       	breq	.+8      	; 0x130a <_Z12printDataLCDv+0x3c4>
    1302:	88 23       	and	r24, r24
    1304:	21 f0       	breq	.+8      	; 0x130e <_Z12printDataLCDv+0x3c8>
    1306:	4f e7       	ldi	r20, 0x7F	; 127
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <_Z12printDataLCDv+0x3ca>
    130a:	4e e7       	ldi	r20, 0x7E	; 126
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <_Z12printDataLCDv+0x3ca>
    130e:	43 e2       	ldi	r20, 0x23	; 35
    1310:	63 e0       	ldi	r22, 0x03	; 3
    1312:	81 e1       	ldi	r24, 0x11	; 17
    1314:	8b d8       	rcall	.-3818   	; 0x42c <_Z12printCharLCDhhc>
					printCharLCD(LCD_COL1+14, 3, arm.servos[5].state==1 ? (char)CH_ARR : arm.servos[5].state==0 ? '#' : (char)CH_ARL);
    1316:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <arm+0x37>
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	21 f0       	breq	.+8      	; 0x1326 <_Z12printDataLCDv+0x3e0>
    131e:	88 23       	and	r24, r24
    1320:	21 f0       	breq	.+8      	; 0x132a <_Z12printDataLCDv+0x3e4>
    1322:	4f e7       	ldi	r20, 0x7F	; 127
    1324:	03 c0       	rjmp	.+6      	; 0x132c <_Z12printDataLCDv+0x3e6>
    1326:	4e e7       	ldi	r20, 0x7E	; 126
    1328:	01 c0       	rjmp	.+2      	; 0x132c <_Z12printDataLCDv+0x3e6>
    132a:	43 e2       	ldi	r20, 0x23	; 35
    132c:	63 e0       	ldi	r22, 0x03	; 3
    132e:	82 e1       	ldi	r24, 0x12	; 18
    1330:	7d d8       	rcall	.-3846   	; 0x42c <_Z12printCharLCDhhc>
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
    1332:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <servoID_old>
    1336:	98 12       	cpse	r9, r24
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <_Z12printDataLCDv+0x3fe>
    133a:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <currPos>
    133e:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <currPos+0x1>
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <_Z12printDataLCDv+0x402>
				lcd.print("   ");
			} else { // No Error :)
				lcd.print("          ");
				if (msgLength > 2) {
					position = Serial1.read();
					position = (Serial1.read()<<8) + position;
    1344:	9c 2f       	mov	r25, r28
    1346:	8d 2f       	mov	r24, r29
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
    1348:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <currPos>
    134c:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <currPos+0x1>
					servoID_old = servoID;
    1350:	90 92 ae 03 	sts	0x03AE, r9	; 0x8003ae <servoID_old>
				}
			}
			while(Serial1.available() > 0) {
    1354:	8e e4       	ldi	r24, 0x4E	; 78
    1356:	94 e0       	ldi	r25, 0x04	; 4
    1358:	b4 d3       	rcall	.+1896   	; 0x1ac2 <_ZN14HardwareSerial9availableEv>
    135a:	18 16       	cp	r1, r24
    135c:	19 06       	cpc	r1, r25
    135e:	24 f4       	brge	.+8      	; 0x1368 <_Z12printDataLCDv+0x422>
    1360:	8e e4       	ldi	r24, 0x4E	; 78
				//Serial.println(Serial1.read());
				Serial1.read();
    1362:	94 e0       	ldi	r25, 0x04	; 4
    1364:	c8 d3       	rcall	.+1936   	; 0x1af6 <_ZN14HardwareSerial4readEv>
    1366:	f6 cf       	rjmp	.-20     	; 0x1354 <_Z12printDataLCDv+0x40e>
    1368:	61 e0       	ldi	r22, 0x01	; 1
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
					servoID_old = servoID;
				}
			}
			while(Serial1.available() > 0) {
    136a:	70 e0       	ldi	r23, 0x00	; 0
				//Serial.println(Serial1.read());
				Serial1.read();
			}

			delay(1);
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	d9 d7       	rcall	.+4018   	; 0x2324 <delay>
    1372:	40 91 66 03 	lds	r20, 0x0366	; 0x800366 <cycle_counter>
    1376:	50 91 67 03 	lds	r21, 0x0367	; 0x800367 <cycle_counter+0x1>
			cycle_counter = cycle_counter > 999 ? 0 : cycle_counter + 1;
    137a:	48 3e       	cpi	r20, 0xE8	; 232
    137c:	f3 e0       	ldi	r31, 0x03	; 3
    137e:	5f 07       	cpc	r21, r31
    1380:	1c f4       	brge	.+6      	; 0x1388 <_Z12printDataLCDv+0x442>
    1382:	4f 5f       	subi	r20, 0xFF	; 255
    1384:	5f 4f       	sbci	r21, 0xFF	; 255
    1386:	02 c0       	rjmp	.+4      	; 0x138c <_Z12printDataLCDv+0x446>
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	50 93 67 03 	sts	0x0367, r21	; 0x800367 <cycle_counter+0x1>
    1390:	40 93 66 03 	sts	0x0366, r20	; 0x800366 <cycle_counter>
    1394:	24 e0       	ldi	r18, 0x04	; 4
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	80 e1       	ldi	r24, 0x10	; 16
			printLCD(16, 0, cycle_counter, 4);
    139a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8printLCDhhih>
    139e:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
    13a2:	df 91       	pop	r29
		}
	}
	serialReading = NO;
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
}
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	7f 90       	pop	r7
    13bc:	08 95       	ret

000013be <loop>:
    13be:	42 e2       	ldi	r20, 0x22	; 34
    13c0:	64 e2       	ldi	r22, 0x24	; 36
    13c2:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <arm>
/************************************************************************/
/* LOOP                                                                 */
/************************************************************************/
void loop() {

	readServo(arm.id, 0x24, 34);
    13c6:	49 db       	rcall	.-2414   	; 0xa5a <_Z9readServohhh>
	printDataLCD();
    13c8:	be cd       	rjmp	.-1156   	; 0xf46 <_Z12printDataLCDv>

000013ca <__subsf3>:
    13ca:	50 58       	subi	r21, 0x80	; 128

000013cc <__addsf3>:
    13cc:	bb 27       	eor	r27, r27
    13ce:	aa 27       	eor	r26, r26
    13d0:	0e d0       	rcall	.+28     	; 0x13ee <__addsf3x>
    13d2:	0d c1       	rjmp	.+538    	; 0x15ee <__fp_round>
    13d4:	fe d0       	rcall	.+508    	; 0x15d2 <__fp_pscA>
    13d6:	30 f0       	brcs	.+12     	; 0x13e4 <__addsf3+0x18>
    13d8:	03 d1       	rcall	.+518    	; 0x15e0 <__fp_pscB>
    13da:	20 f0       	brcs	.+8      	; 0x13e4 <__addsf3+0x18>
    13dc:	31 f4       	brne	.+12     	; 0x13ea <__addsf3+0x1e>
    13de:	9f 3f       	cpi	r25, 0xFF	; 255
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <__addsf3+0x1a>
    13e2:	1e f4       	brtc	.+6      	; 0x13ea <__addsf3+0x1e>
    13e4:	f3 c0       	rjmp	.+486    	; 0x15cc <__fp_nan>
    13e6:	0e f4       	brtc	.+2      	; 0x13ea <__addsf3+0x1e>
    13e8:	e0 95       	com	r30
    13ea:	e7 fb       	bst	r30, 7
    13ec:	e9 c0       	rjmp	.+466    	; 0x15c0 <__fp_inf>

000013ee <__addsf3x>:
    13ee:	e9 2f       	mov	r30, r25
    13f0:	0f d1       	rcall	.+542    	; 0x1610 <__fp_split3>
    13f2:	80 f3       	brcs	.-32     	; 0x13d4 <__addsf3+0x8>
    13f4:	ba 17       	cp	r27, r26
    13f6:	62 07       	cpc	r22, r18
    13f8:	73 07       	cpc	r23, r19
    13fa:	84 07       	cpc	r24, r20
    13fc:	95 07       	cpc	r25, r21
    13fe:	18 f0       	brcs	.+6      	; 0x1406 <__addsf3x+0x18>
    1400:	71 f4       	brne	.+28     	; 0x141e <__addsf3x+0x30>
    1402:	9e f5       	brtc	.+102    	; 0x146a <__addsf3x+0x7c>
    1404:	27 c1       	rjmp	.+590    	; 0x1654 <__fp_zero>
    1406:	0e f4       	brtc	.+2      	; 0x140a <__addsf3x+0x1c>
    1408:	e0 95       	com	r30
    140a:	0b 2e       	mov	r0, r27
    140c:	ba 2f       	mov	r27, r26
    140e:	a0 2d       	mov	r26, r0
    1410:	0b 01       	movw	r0, r22
    1412:	b9 01       	movw	r22, r18
    1414:	90 01       	movw	r18, r0
    1416:	0c 01       	movw	r0, r24
    1418:	ca 01       	movw	r24, r20
    141a:	a0 01       	movw	r20, r0
    141c:	11 24       	eor	r1, r1
    141e:	ff 27       	eor	r31, r31
    1420:	59 1b       	sub	r21, r25
    1422:	99 f0       	breq	.+38     	; 0x144a <__addsf3x+0x5c>
    1424:	59 3f       	cpi	r21, 0xF9	; 249
    1426:	50 f4       	brcc	.+20     	; 0x143c <__addsf3x+0x4e>
    1428:	50 3e       	cpi	r21, 0xE0	; 224
    142a:	68 f1       	brcs	.+90     	; 0x1486 <__addsf3x+0x98>
    142c:	1a 16       	cp	r1, r26
    142e:	f0 40       	sbci	r31, 0x00	; 0
    1430:	a2 2f       	mov	r26, r18
    1432:	23 2f       	mov	r18, r19
    1434:	34 2f       	mov	r19, r20
    1436:	44 27       	eor	r20, r20
    1438:	58 5f       	subi	r21, 0xF8	; 248
    143a:	f3 cf       	rjmp	.-26     	; 0x1422 <__addsf3x+0x34>
    143c:	46 95       	lsr	r20
    143e:	37 95       	ror	r19
    1440:	27 95       	ror	r18
    1442:	a7 95       	ror	r26
    1444:	f0 40       	sbci	r31, 0x00	; 0
    1446:	53 95       	inc	r21
    1448:	c9 f7       	brne	.-14     	; 0x143c <__addsf3x+0x4e>
    144a:	7e f4       	brtc	.+30     	; 0x146a <__addsf3x+0x7c>
    144c:	1f 16       	cp	r1, r31
    144e:	ba 0b       	sbc	r27, r26
    1450:	62 0b       	sbc	r22, r18
    1452:	73 0b       	sbc	r23, r19
    1454:	84 0b       	sbc	r24, r20
    1456:	ba f0       	brmi	.+46     	; 0x1486 <__addsf3x+0x98>
    1458:	91 50       	subi	r25, 0x01	; 1
    145a:	a1 f0       	breq	.+40     	; 0x1484 <__addsf3x+0x96>
    145c:	ff 0f       	add	r31, r31
    145e:	bb 1f       	adc	r27, r27
    1460:	66 1f       	adc	r22, r22
    1462:	77 1f       	adc	r23, r23
    1464:	88 1f       	adc	r24, r24
    1466:	c2 f7       	brpl	.-16     	; 0x1458 <__addsf3x+0x6a>
    1468:	0e c0       	rjmp	.+28     	; 0x1486 <__addsf3x+0x98>
    146a:	ba 0f       	add	r27, r26
    146c:	62 1f       	adc	r22, r18
    146e:	73 1f       	adc	r23, r19
    1470:	84 1f       	adc	r24, r20
    1472:	48 f4       	brcc	.+18     	; 0x1486 <__addsf3x+0x98>
    1474:	87 95       	ror	r24
    1476:	77 95       	ror	r23
    1478:	67 95       	ror	r22
    147a:	b7 95       	ror	r27
    147c:	f7 95       	ror	r31
    147e:	9e 3f       	cpi	r25, 0xFE	; 254
    1480:	08 f0       	brcs	.+2      	; 0x1484 <__addsf3x+0x96>
    1482:	b3 cf       	rjmp	.-154    	; 0x13ea <__addsf3+0x1e>
    1484:	93 95       	inc	r25
    1486:	88 0f       	add	r24, r24
    1488:	08 f0       	brcs	.+2      	; 0x148c <__addsf3x+0x9e>
    148a:	99 27       	eor	r25, r25
    148c:	ee 0f       	add	r30, r30
    148e:	97 95       	ror	r25
    1490:	87 95       	ror	r24
    1492:	08 95       	ret

00001494 <__cmpsf2>:
    1494:	71 d0       	rcall	.+226    	; 0x1578 <__fp_cmp>
    1496:	08 f4       	brcc	.+2      	; 0x149a <__cmpsf2+0x6>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	08 95       	ret

0000149c <__fixsfsi>:
    149c:	04 d0       	rcall	.+8      	; 0x14a6 <__fixunssfsi>
    149e:	68 94       	set
    14a0:	b1 11       	cpse	r27, r1
    14a2:	d9 c0       	rjmp	.+434    	; 0x1656 <__fp_szero>
    14a4:	08 95       	ret

000014a6 <__fixunssfsi>:
    14a6:	bc d0       	rcall	.+376    	; 0x1620 <__fp_splitA>
    14a8:	88 f0       	brcs	.+34     	; 0x14cc <__fixunssfsi+0x26>
    14aa:	9f 57       	subi	r25, 0x7F	; 127
    14ac:	90 f0       	brcs	.+36     	; 0x14d2 <__fixunssfsi+0x2c>
    14ae:	b9 2f       	mov	r27, r25
    14b0:	99 27       	eor	r25, r25
    14b2:	b7 51       	subi	r27, 0x17	; 23
    14b4:	a0 f0       	brcs	.+40     	; 0x14de <__fixunssfsi+0x38>
    14b6:	d1 f0       	breq	.+52     	; 0x14ec <__fixunssfsi+0x46>
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	88 1f       	adc	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	1a f0       	brmi	.+6      	; 0x14c8 <__fixunssfsi+0x22>
    14c2:	ba 95       	dec	r27
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__fixunssfsi+0x12>
    14c6:	12 c0       	rjmp	.+36     	; 0x14ec <__fixunssfsi+0x46>
    14c8:	b1 30       	cpi	r27, 0x01	; 1
    14ca:	81 f0       	breq	.+32     	; 0x14ec <__fixunssfsi+0x46>
    14cc:	c3 d0       	rcall	.+390    	; 0x1654 <__fp_zero>
    14ce:	b1 e0       	ldi	r27, 0x01	; 1
    14d0:	08 95       	ret
    14d2:	c0 c0       	rjmp	.+384    	; 0x1654 <__fp_zero>
    14d4:	67 2f       	mov	r22, r23
    14d6:	78 2f       	mov	r23, r24
    14d8:	88 27       	eor	r24, r24
    14da:	b8 5f       	subi	r27, 0xF8	; 248
    14dc:	39 f0       	breq	.+14     	; 0x14ec <__fixunssfsi+0x46>
    14de:	b9 3f       	cpi	r27, 0xF9	; 249
    14e0:	cc f3       	brlt	.-14     	; 0x14d4 <__fixunssfsi+0x2e>
    14e2:	86 95       	lsr	r24
    14e4:	77 95       	ror	r23
    14e6:	67 95       	ror	r22
    14e8:	b3 95       	inc	r27
    14ea:	d9 f7       	brne	.-10     	; 0x14e2 <__fixunssfsi+0x3c>
    14ec:	3e f4       	brtc	.+14     	; 0x14fc <__fixunssfsi+0x56>
    14ee:	90 95       	com	r25
    14f0:	80 95       	com	r24
    14f2:	70 95       	com	r23
    14f4:	61 95       	neg	r22
    14f6:	7f 4f       	sbci	r23, 0xFF	; 255
    14f8:	8f 4f       	sbci	r24, 0xFF	; 255
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	08 95       	ret

000014fe <__floatunsisf>:
    14fe:	e8 94       	clt
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <__floatsisf+0x12>

00001502 <__floatsisf>:
    1502:	97 fb       	bst	r25, 7
    1504:	3e f4       	brtc	.+14     	; 0x1514 <__floatsisf+0x12>
    1506:	90 95       	com	r25
    1508:	80 95       	com	r24
    150a:	70 95       	com	r23
    150c:	61 95       	neg	r22
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	8f 4f       	sbci	r24, 0xFF	; 255
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	99 23       	and	r25, r25
    1516:	a9 f0       	breq	.+42     	; 0x1542 <__floatsisf+0x40>
    1518:	f9 2f       	mov	r31, r25
    151a:	96 e9       	ldi	r25, 0x96	; 150
    151c:	bb 27       	eor	r27, r27
    151e:	93 95       	inc	r25
    1520:	f6 95       	lsr	r31
    1522:	87 95       	ror	r24
    1524:	77 95       	ror	r23
    1526:	67 95       	ror	r22
    1528:	b7 95       	ror	r27
    152a:	f1 11       	cpse	r31, r1
    152c:	f8 cf       	rjmp	.-16     	; 0x151e <__floatsisf+0x1c>
    152e:	fa f4       	brpl	.+62     	; 0x156e <__floatsisf+0x6c>
    1530:	bb 0f       	add	r27, r27
    1532:	11 f4       	brne	.+4      	; 0x1538 <__floatsisf+0x36>
    1534:	60 ff       	sbrs	r22, 0
    1536:	1b c0       	rjmp	.+54     	; 0x156e <__floatsisf+0x6c>
    1538:	6f 5f       	subi	r22, 0xFF	; 255
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	8f 4f       	sbci	r24, 0xFF	; 255
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	16 c0       	rjmp	.+44     	; 0x156e <__floatsisf+0x6c>
    1542:	88 23       	and	r24, r24
    1544:	11 f0       	breq	.+4      	; 0x154a <__floatsisf+0x48>
    1546:	96 e9       	ldi	r25, 0x96	; 150
    1548:	11 c0       	rjmp	.+34     	; 0x156c <__floatsisf+0x6a>
    154a:	77 23       	and	r23, r23
    154c:	21 f0       	breq	.+8      	; 0x1556 <__floatsisf+0x54>
    154e:	9e e8       	ldi	r25, 0x8E	; 142
    1550:	87 2f       	mov	r24, r23
    1552:	76 2f       	mov	r23, r22
    1554:	05 c0       	rjmp	.+10     	; 0x1560 <__floatsisf+0x5e>
    1556:	66 23       	and	r22, r22
    1558:	71 f0       	breq	.+28     	; 0x1576 <__floatsisf+0x74>
    155a:	96 e8       	ldi	r25, 0x86	; 134
    155c:	86 2f       	mov	r24, r22
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	2a f0       	brmi	.+10     	; 0x156e <__floatsisf+0x6c>
    1564:	9a 95       	dec	r25
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	da f7       	brpl	.-10     	; 0x1564 <__floatsisf+0x62>
    156e:	88 0f       	add	r24, r24
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	97 f9       	bld	r25, 7
    1576:	08 95       	ret

00001578 <__fp_cmp>:
    1578:	99 0f       	add	r25, r25
    157a:	00 08       	sbc	r0, r0
    157c:	55 0f       	add	r21, r21
    157e:	aa 0b       	sbc	r26, r26
    1580:	e0 e8       	ldi	r30, 0x80	; 128
    1582:	fe ef       	ldi	r31, 0xFE	; 254
    1584:	16 16       	cp	r1, r22
    1586:	17 06       	cpc	r1, r23
    1588:	e8 07       	cpc	r30, r24
    158a:	f9 07       	cpc	r31, r25
    158c:	c0 f0       	brcs	.+48     	; 0x15be <__fp_cmp+0x46>
    158e:	12 16       	cp	r1, r18
    1590:	13 06       	cpc	r1, r19
    1592:	e4 07       	cpc	r30, r20
    1594:	f5 07       	cpc	r31, r21
    1596:	98 f0       	brcs	.+38     	; 0x15be <__fp_cmp+0x46>
    1598:	62 1b       	sub	r22, r18
    159a:	73 0b       	sbc	r23, r19
    159c:	84 0b       	sbc	r24, r20
    159e:	95 0b       	sbc	r25, r21
    15a0:	39 f4       	brne	.+14     	; 0x15b0 <__fp_cmp+0x38>
    15a2:	0a 26       	eor	r0, r26
    15a4:	61 f0       	breq	.+24     	; 0x15be <__fp_cmp+0x46>
    15a6:	23 2b       	or	r18, r19
    15a8:	24 2b       	or	r18, r20
    15aa:	25 2b       	or	r18, r21
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <__fp_cmp+0x3e>
    15ae:	08 95       	ret
    15b0:	0a 26       	eor	r0, r26
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <__fp_cmp+0x3e>
    15b4:	a1 40       	sbci	r26, 0x01	; 1
    15b6:	a6 95       	lsr	r26
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	81 1d       	adc	r24, r1
    15bc:	81 1d       	adc	r24, r1
    15be:	08 95       	ret

000015c0 <__fp_inf>:
    15c0:	97 f9       	bld	r25, 7
    15c2:	9f 67       	ori	r25, 0x7F	; 127
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	08 95       	ret

000015cc <__fp_nan>:
    15cc:	9f ef       	ldi	r25, 0xFF	; 255
    15ce:	80 ec       	ldi	r24, 0xC0	; 192
    15d0:	08 95       	ret

000015d2 <__fp_pscA>:
    15d2:	00 24       	eor	r0, r0
    15d4:	0a 94       	dec	r0
    15d6:	16 16       	cp	r1, r22
    15d8:	17 06       	cpc	r1, r23
    15da:	18 06       	cpc	r1, r24
    15dc:	09 06       	cpc	r0, r25
    15de:	08 95       	ret

000015e0 <__fp_pscB>:
    15e0:	00 24       	eor	r0, r0
    15e2:	0a 94       	dec	r0
    15e4:	12 16       	cp	r1, r18
    15e6:	13 06       	cpc	r1, r19
    15e8:	14 06       	cpc	r1, r20
    15ea:	05 06       	cpc	r0, r21
    15ec:	08 95       	ret

000015ee <__fp_round>:
    15ee:	09 2e       	mov	r0, r25
    15f0:	03 94       	inc	r0
    15f2:	00 0c       	add	r0, r0
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__fp_round+0xc>
    15f6:	88 23       	and	r24, r24
    15f8:	52 f0       	brmi	.+20     	; 0x160e <__fp_round+0x20>
    15fa:	bb 0f       	add	r27, r27
    15fc:	40 f4       	brcc	.+16     	; 0x160e <__fp_round+0x20>
    15fe:	bf 2b       	or	r27, r31
    1600:	11 f4       	brne	.+4      	; 0x1606 <__fp_round+0x18>
    1602:	60 ff       	sbrs	r22, 0
    1604:	04 c0       	rjmp	.+8      	; 0x160e <__fp_round+0x20>
    1606:	6f 5f       	subi	r22, 0xFF	; 255
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	8f 4f       	sbci	r24, 0xFF	; 255
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	08 95       	ret

00001610 <__fp_split3>:
    1610:	57 fd       	sbrc	r21, 7
    1612:	90 58       	subi	r25, 0x80	; 128
    1614:	44 0f       	add	r20, r20
    1616:	55 1f       	adc	r21, r21
    1618:	59 f0       	breq	.+22     	; 0x1630 <__fp_splitA+0x10>
    161a:	5f 3f       	cpi	r21, 0xFF	; 255
    161c:	71 f0       	breq	.+28     	; 0x163a <__fp_splitA+0x1a>
    161e:	47 95       	ror	r20

00001620 <__fp_splitA>:
    1620:	88 0f       	add	r24, r24
    1622:	97 fb       	bst	r25, 7
    1624:	99 1f       	adc	r25, r25
    1626:	61 f0       	breq	.+24     	; 0x1640 <__fp_splitA+0x20>
    1628:	9f 3f       	cpi	r25, 0xFF	; 255
    162a:	79 f0       	breq	.+30     	; 0x164a <__fp_splitA+0x2a>
    162c:	87 95       	ror	r24
    162e:	08 95       	ret
    1630:	12 16       	cp	r1, r18
    1632:	13 06       	cpc	r1, r19
    1634:	14 06       	cpc	r1, r20
    1636:	55 1f       	adc	r21, r21
    1638:	f2 cf       	rjmp	.-28     	; 0x161e <__fp_split3+0xe>
    163a:	46 95       	lsr	r20
    163c:	f1 df       	rcall	.-30     	; 0x1620 <__fp_splitA>
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <__fp_splitA+0x30>
    1640:	16 16       	cp	r1, r22
    1642:	17 06       	cpc	r1, r23
    1644:	18 06       	cpc	r1, r24
    1646:	99 1f       	adc	r25, r25
    1648:	f1 cf       	rjmp	.-30     	; 0x162c <__fp_splitA+0xc>
    164a:	86 95       	lsr	r24
    164c:	71 05       	cpc	r23, r1
    164e:	61 05       	cpc	r22, r1
    1650:	08 94       	sec
    1652:	08 95       	ret

00001654 <__fp_zero>:
    1654:	e8 94       	clt

00001656 <__fp_szero>:
    1656:	bb 27       	eor	r27, r27
    1658:	66 27       	eor	r22, r22
    165a:	77 27       	eor	r23, r23
    165c:	cb 01       	movw	r24, r22
    165e:	97 f9       	bld	r25, 7
    1660:	08 95       	ret

00001662 <__mulsf3>:
    1662:	0b d0       	rcall	.+22     	; 0x167a <__mulsf3x>
    1664:	c4 cf       	rjmp	.-120    	; 0x15ee <__fp_round>
    1666:	b5 df       	rcall	.-150    	; 0x15d2 <__fp_pscA>
    1668:	28 f0       	brcs	.+10     	; 0x1674 <__mulsf3+0x12>
    166a:	ba df       	rcall	.-140    	; 0x15e0 <__fp_pscB>
    166c:	18 f0       	brcs	.+6      	; 0x1674 <__mulsf3+0x12>
    166e:	95 23       	and	r25, r21
    1670:	09 f0       	breq	.+2      	; 0x1674 <__mulsf3+0x12>
    1672:	a6 cf       	rjmp	.-180    	; 0x15c0 <__fp_inf>
    1674:	ab cf       	rjmp	.-170    	; 0x15cc <__fp_nan>
    1676:	11 24       	eor	r1, r1
    1678:	ee cf       	rjmp	.-36     	; 0x1656 <__fp_szero>

0000167a <__mulsf3x>:
    167a:	ca df       	rcall	.-108    	; 0x1610 <__fp_split3>
    167c:	a0 f3       	brcs	.-24     	; 0x1666 <__mulsf3+0x4>

0000167e <__mulsf3_pse>:
    167e:	95 9f       	mul	r25, r21
    1680:	d1 f3       	breq	.-12     	; 0x1676 <__mulsf3+0x14>
    1682:	95 0f       	add	r25, r21
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	55 1f       	adc	r21, r21
    1688:	62 9f       	mul	r22, r18
    168a:	f0 01       	movw	r30, r0
    168c:	72 9f       	mul	r23, r18
    168e:	bb 27       	eor	r27, r27
    1690:	f0 0d       	add	r31, r0
    1692:	b1 1d       	adc	r27, r1
    1694:	63 9f       	mul	r22, r19
    1696:	aa 27       	eor	r26, r26
    1698:	f0 0d       	add	r31, r0
    169a:	b1 1d       	adc	r27, r1
    169c:	aa 1f       	adc	r26, r26
    169e:	64 9f       	mul	r22, r20
    16a0:	66 27       	eor	r22, r22
    16a2:	b0 0d       	add	r27, r0
    16a4:	a1 1d       	adc	r26, r1
    16a6:	66 1f       	adc	r22, r22
    16a8:	82 9f       	mul	r24, r18
    16aa:	22 27       	eor	r18, r18
    16ac:	b0 0d       	add	r27, r0
    16ae:	a1 1d       	adc	r26, r1
    16b0:	62 1f       	adc	r22, r18
    16b2:	73 9f       	mul	r23, r19
    16b4:	b0 0d       	add	r27, r0
    16b6:	a1 1d       	adc	r26, r1
    16b8:	62 1f       	adc	r22, r18
    16ba:	83 9f       	mul	r24, r19
    16bc:	a0 0d       	add	r26, r0
    16be:	61 1d       	adc	r22, r1
    16c0:	22 1f       	adc	r18, r18
    16c2:	74 9f       	mul	r23, r20
    16c4:	33 27       	eor	r19, r19
    16c6:	a0 0d       	add	r26, r0
    16c8:	61 1d       	adc	r22, r1
    16ca:	23 1f       	adc	r18, r19
    16cc:	84 9f       	mul	r24, r20
    16ce:	60 0d       	add	r22, r0
    16d0:	21 1d       	adc	r18, r1
    16d2:	82 2f       	mov	r24, r18
    16d4:	76 2f       	mov	r23, r22
    16d6:	6a 2f       	mov	r22, r26
    16d8:	11 24       	eor	r1, r1
    16da:	9f 57       	subi	r25, 0x7F	; 127
    16dc:	50 40       	sbci	r21, 0x00	; 0
    16de:	8a f0       	brmi	.+34     	; 0x1702 <__mulsf3_pse+0x84>
    16e0:	e1 f0       	breq	.+56     	; 0x171a <__mulsf3_pse+0x9c>
    16e2:	88 23       	and	r24, r24
    16e4:	4a f0       	brmi	.+18     	; 0x16f8 <__mulsf3_pse+0x7a>
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	bb 1f       	adc	r27, r27
    16ec:	66 1f       	adc	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	88 1f       	adc	r24, r24
    16f2:	91 50       	subi	r25, 0x01	; 1
    16f4:	50 40       	sbci	r21, 0x00	; 0
    16f6:	a9 f7       	brne	.-22     	; 0x16e2 <__mulsf3_pse+0x64>
    16f8:	9e 3f       	cpi	r25, 0xFE	; 254
    16fa:	51 05       	cpc	r21, r1
    16fc:	70 f0       	brcs	.+28     	; 0x171a <__mulsf3_pse+0x9c>
    16fe:	60 cf       	rjmp	.-320    	; 0x15c0 <__fp_inf>
    1700:	aa cf       	rjmp	.-172    	; 0x1656 <__fp_szero>
    1702:	5f 3f       	cpi	r21, 0xFF	; 255
    1704:	ec f3       	brlt	.-6      	; 0x1700 <__mulsf3_pse+0x82>
    1706:	98 3e       	cpi	r25, 0xE8	; 232
    1708:	dc f3       	brlt	.-10     	; 0x1700 <__mulsf3_pse+0x82>
    170a:	86 95       	lsr	r24
    170c:	77 95       	ror	r23
    170e:	67 95       	ror	r22
    1710:	b7 95       	ror	r27
    1712:	f7 95       	ror	r31
    1714:	e7 95       	ror	r30
    1716:	9f 5f       	subi	r25, 0xFF	; 255
    1718:	c1 f7       	brne	.-16     	; 0x170a <__mulsf3_pse+0x8c>
    171a:	fe 2b       	or	r31, r30
    171c:	88 0f       	add	r24, r24
    171e:	91 1d       	adc	r25, r1
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	97 f9       	bld	r25, 7
    1726:	08 95       	ret

00001728 <pow>:
    1728:	fa 01       	movw	r30, r20
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	30 96       	adiw	r30, 0x00	; 0
    1730:	21 05       	cpc	r18, r1
    1732:	31 05       	cpc	r19, r1
    1734:	99 f1       	breq	.+102    	; 0x179c <pow+0x74>
    1736:	61 15       	cp	r22, r1
    1738:	71 05       	cpc	r23, r1
    173a:	61 f4       	brne	.+24     	; 0x1754 <pow+0x2c>
    173c:	80 38       	cpi	r24, 0x80	; 128
    173e:	bf e3       	ldi	r27, 0x3F	; 63
    1740:	9b 07       	cpc	r25, r27
    1742:	49 f1       	breq	.+82     	; 0x1796 <pow+0x6e>
    1744:	68 94       	set
    1746:	90 38       	cpi	r25, 0x80	; 128
    1748:	81 05       	cpc	r24, r1
    174a:	61 f0       	breq	.+24     	; 0x1764 <pow+0x3c>
    174c:	80 38       	cpi	r24, 0x80	; 128
    174e:	bf ef       	ldi	r27, 0xFF	; 255
    1750:	9b 07       	cpc	r25, r27
    1752:	41 f0       	breq	.+16     	; 0x1764 <pow+0x3c>
    1754:	99 23       	and	r25, r25
    1756:	42 f5       	brpl	.+80     	; 0x17a8 <pow+0x80>
    1758:	ff 3f       	cpi	r31, 0xFF	; 255
    175a:	e1 05       	cpc	r30, r1
    175c:	31 05       	cpc	r19, r1
    175e:	21 05       	cpc	r18, r1
    1760:	11 f1       	breq	.+68     	; 0x17a6 <pow+0x7e>
    1762:	e8 94       	clt
    1764:	08 94       	sec
    1766:	e7 95       	ror	r30
    1768:	d9 01       	movw	r26, r18
    176a:	aa 23       	and	r26, r26
    176c:	29 f4       	brne	.+10     	; 0x1778 <pow+0x50>
    176e:	ab 2f       	mov	r26, r27
    1770:	be 2f       	mov	r27, r30
    1772:	f8 5f       	subi	r31, 0xF8	; 248
    1774:	d0 f3       	brcs	.-12     	; 0x176a <pow+0x42>
    1776:	10 c0       	rjmp	.+32     	; 0x1798 <pow+0x70>
    1778:	ff 5f       	subi	r31, 0xFF	; 255
    177a:	70 f4       	brcc	.+28     	; 0x1798 <pow+0x70>
    177c:	a6 95       	lsr	r26
    177e:	e0 f7       	brcc	.-8      	; 0x1778 <pow+0x50>
    1780:	f7 39       	cpi	r31, 0x97	; 151
    1782:	50 f0       	brcs	.+20     	; 0x1798 <pow+0x70>
    1784:	19 f0       	breq	.+6      	; 0x178c <pow+0x64>
    1786:	ff 3a       	cpi	r31, 0xAF	; 175
    1788:	38 f4       	brcc	.+14     	; 0x1798 <pow+0x70>
    178a:	9f 77       	andi	r25, 0x7F	; 127
    178c:	9f 93       	push	r25
    178e:	0c d0       	rcall	.+24     	; 0x17a8 <pow+0x80>
    1790:	0f 90       	pop	r0
    1792:	07 fc       	sbrc	r0, 7
    1794:	90 58       	subi	r25, 0x80	; 128
    1796:	08 95       	ret
    1798:	3e f0       	brts	.+14     	; 0x17a8 <pow+0x80>
    179a:	18 cf       	rjmp	.-464    	; 0x15cc <__fp_nan>
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	80 e8       	ldi	r24, 0x80	; 128
    17a2:	9f e3       	ldi	r25, 0x3F	; 63
    17a4:	08 95       	ret
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	9f 77       	andi	r25, 0x7F	; 127
    17aa:	5f 93       	push	r21
    17ac:	4f 93       	push	r20
    17ae:	3f 93       	push	r19
    17b0:	2f 93       	push	r18
    17b2:	9e d0       	rcall	.+316    	; 0x18f0 <log>
    17b4:	2f 91       	pop	r18
    17b6:	3f 91       	pop	r19
    17b8:	4f 91       	pop	r20
    17ba:	5f 91       	pop	r21
    17bc:	52 df       	rcall	.-348    	; 0x1662 <__mulsf3>
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <exp>
    17c0:	19 f4       	brne	.+6      	; 0x17c8 <pow+0xa0>
    17c2:	0e f0       	brts	.+2      	; 0x17c6 <pow+0x9e>
    17c4:	fd ce       	rjmp	.-518    	; 0x15c0 <__fp_inf>
    17c6:	46 cf       	rjmp	.-372    	; 0x1654 <__fp_zero>
    17c8:	01 cf       	rjmp	.-510    	; 0x15cc <__fp_nan>

000017ca <exp>:
    17ca:	2a df       	rcall	.-428    	; 0x1620 <__fp_splitA>
    17cc:	c8 f3       	brcs	.-14     	; 0x17c0 <pow+0x98>
    17ce:	96 38       	cpi	r25, 0x86	; 134
    17d0:	c0 f7       	brcc	.-16     	; 0x17c2 <pow+0x9a>
    17d2:	07 f8       	bld	r0, 7
    17d4:	0f 92       	push	r0
    17d6:	e8 94       	clt
    17d8:	2b e3       	ldi	r18, 0x3B	; 59
    17da:	3a ea       	ldi	r19, 0xAA	; 170
    17dc:	48 eb       	ldi	r20, 0xB8	; 184
    17de:	5f e7       	ldi	r21, 0x7F	; 127
    17e0:	4e df       	rcall	.-356    	; 0x167e <__mulsf3_pse>
    17e2:	0f 92       	push	r0
    17e4:	0f 92       	push	r0
    17e6:	0f 92       	push	r0
    17e8:	4d b7       	in	r20, 0x3d	; 61
    17ea:	5e b7       	in	r21, 0x3e	; 62
    17ec:	0f 92       	push	r0
    17ee:	c0 d0       	rcall	.+384    	; 0x1970 <modf>
    17f0:	e4 ee       	ldi	r30, 0xE4	; 228
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	16 d0       	rcall	.+44     	; 0x1822 <__fp_powser>
    17f6:	4f 91       	pop	r20
    17f8:	5f 91       	pop	r21
    17fa:	ef 91       	pop	r30
    17fc:	ff 91       	pop	r31
    17fe:	e5 95       	asr	r30
    1800:	ee 1f       	adc	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	49 f0       	breq	.+18     	; 0x1818 <exp+0x4e>
    1806:	fe 57       	subi	r31, 0x7E	; 126
    1808:	e0 68       	ori	r30, 0x80	; 128
    180a:	44 27       	eor	r20, r20
    180c:	ee 0f       	add	r30, r30
    180e:	44 1f       	adc	r20, r20
    1810:	fa 95       	dec	r31
    1812:	e1 f7       	brne	.-8      	; 0x180c <exp+0x42>
    1814:	41 95       	neg	r20
    1816:	55 0b       	sbc	r21, r21
    1818:	32 d0       	rcall	.+100    	; 0x187e <ldexp>
    181a:	0f 90       	pop	r0
    181c:	07 fe       	sbrs	r0, 7
    181e:	26 c0       	rjmp	.+76     	; 0x186c <inverse>
    1820:	08 95       	ret

00001822 <__fp_powser>:
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	1f 93       	push	r17
    1828:	0f 93       	push	r16
    182a:	ff 92       	push	r15
    182c:	ef 92       	push	r14
    182e:	df 92       	push	r13
    1830:	7b 01       	movw	r14, r22
    1832:	8c 01       	movw	r16, r24
    1834:	68 94       	set
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <__fp_powser+0x20>
    1838:	da 2e       	mov	r13, r26
    183a:	ef 01       	movw	r28, r30
    183c:	1e df       	rcall	.-452    	; 0x167a <__mulsf3x>
    183e:	fe 01       	movw	r30, r28
    1840:	e8 94       	clt
    1842:	a5 91       	lpm	r26, Z+
    1844:	25 91       	lpm	r18, Z+
    1846:	35 91       	lpm	r19, Z+
    1848:	45 91       	lpm	r20, Z+
    184a:	55 91       	lpm	r21, Z+
    184c:	ae f3       	brts	.-22     	; 0x1838 <__fp_powser+0x16>
    184e:	ef 01       	movw	r28, r30
    1850:	ce dd       	rcall	.-1124   	; 0x13ee <__addsf3x>
    1852:	fe 01       	movw	r30, r28
    1854:	97 01       	movw	r18, r14
    1856:	a8 01       	movw	r20, r16
    1858:	da 94       	dec	r13
    185a:	79 f7       	brne	.-34     	; 0x183a <__fp_powser+0x18>
    185c:	df 90       	pop	r13
    185e:	ef 90       	pop	r14
    1860:	ff 90       	pop	r15
    1862:	0f 91       	pop	r16
    1864:	1f 91       	pop	r17
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <inverse>:
    186c:	9b 01       	movw	r18, r22
    186e:	ac 01       	movw	r20, r24
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	80 e8       	ldi	r24, 0x80	; 128
    1876:	9f e3       	ldi	r25, 0x3F	; 63
    1878:	ae c0       	rjmp	.+348    	; 0x19d6 <__divsf3>
    187a:	a2 ce       	rjmp	.-700    	; 0x15c0 <__fp_inf>
    187c:	14 c1       	rjmp	.+552    	; 0x1aa6 <__fp_mpack>

0000187e <ldexp>:
    187e:	d0 de       	rcall	.-608    	; 0x1620 <__fp_splitA>
    1880:	e8 f3       	brcs	.-6      	; 0x187c <inverse+0x10>
    1882:	99 23       	and	r25, r25
    1884:	d9 f3       	breq	.-10     	; 0x187c <inverse+0x10>
    1886:	94 0f       	add	r25, r20
    1888:	51 1d       	adc	r21, r1
    188a:	bb f3       	brvs	.-18     	; 0x187a <inverse+0xe>
    188c:	91 50       	subi	r25, 0x01	; 1
    188e:	50 40       	sbci	r21, 0x00	; 0
    1890:	94 f0       	brlt	.+36     	; 0x18b6 <ldexp+0x38>
    1892:	59 f0       	breq	.+22     	; 0x18aa <ldexp+0x2c>
    1894:	88 23       	and	r24, r24
    1896:	32 f0       	brmi	.+12     	; 0x18a4 <ldexp+0x26>
    1898:	66 0f       	add	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	88 1f       	adc	r24, r24
    189e:	91 50       	subi	r25, 0x01	; 1
    18a0:	50 40       	sbci	r21, 0x00	; 0
    18a2:	c1 f7       	brne	.-16     	; 0x1894 <ldexp+0x16>
    18a4:	9e 3f       	cpi	r25, 0xFE	; 254
    18a6:	51 05       	cpc	r21, r1
    18a8:	44 f7       	brge	.-48     	; 0x187a <inverse+0xe>
    18aa:	88 0f       	add	r24, r24
    18ac:	91 1d       	adc	r25, r1
    18ae:	96 95       	lsr	r25
    18b0:	87 95       	ror	r24
    18b2:	97 f9       	bld	r25, 7
    18b4:	08 95       	ret
    18b6:	5f 3f       	cpi	r21, 0xFF	; 255
    18b8:	ac f0       	brlt	.+42     	; 0x18e4 <ldexp+0x66>
    18ba:	98 3e       	cpi	r25, 0xE8	; 232
    18bc:	9c f0       	brlt	.+38     	; 0x18e4 <ldexp+0x66>
    18be:	bb 27       	eor	r27, r27
    18c0:	86 95       	lsr	r24
    18c2:	77 95       	ror	r23
    18c4:	67 95       	ror	r22
    18c6:	b7 95       	ror	r27
    18c8:	08 f4       	brcc	.+2      	; 0x18cc <ldexp+0x4e>
    18ca:	b1 60       	ori	r27, 0x01	; 1
    18cc:	93 95       	inc	r25
    18ce:	c1 f7       	brne	.-16     	; 0x18c0 <ldexp+0x42>
    18d0:	bb 0f       	add	r27, r27
    18d2:	58 f7       	brcc	.-42     	; 0x18aa <ldexp+0x2c>
    18d4:	11 f4       	brne	.+4      	; 0x18da <ldexp+0x5c>
    18d6:	60 ff       	sbrs	r22, 0
    18d8:	e8 cf       	rjmp	.-48     	; 0x18aa <ldexp+0x2c>
    18da:	6f 5f       	subi	r22, 0xFF	; 255
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	e3 cf       	rjmp	.-58     	; 0x18aa <ldexp+0x2c>
    18e4:	b8 ce       	rjmp	.-656    	; 0x1656 <__fp_szero>
    18e6:	0e f0       	brts	.+2      	; 0x18ea <ldexp+0x6c>
    18e8:	de c0       	rjmp	.+444    	; 0x1aa6 <__fp_mpack>
    18ea:	70 ce       	rjmp	.-800    	; 0x15cc <__fp_nan>
    18ec:	68 94       	set
    18ee:	68 ce       	rjmp	.-816    	; 0x15c0 <__fp_inf>

000018f0 <log>:
    18f0:	97 de       	rcall	.-722    	; 0x1620 <__fp_splitA>
    18f2:	c8 f3       	brcs	.-14     	; 0x18e6 <ldexp+0x68>
    18f4:	99 23       	and	r25, r25
    18f6:	d1 f3       	breq	.-12     	; 0x18ec <ldexp+0x6e>
    18f8:	c6 f3       	brts	.-16     	; 0x18ea <ldexp+0x6c>
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	1f 93       	push	r17
    1900:	0f 93       	push	r16
    1902:	ff 92       	push	r15
    1904:	c9 2f       	mov	r28, r25
    1906:	dd 27       	eor	r29, r29
    1908:	88 23       	and	r24, r24
    190a:	2a f0       	brmi	.+10     	; 0x1916 <log+0x26>
    190c:	21 97       	sbiw	r28, 0x01	; 1
    190e:	66 0f       	add	r22, r22
    1910:	77 1f       	adc	r23, r23
    1912:	88 1f       	adc	r24, r24
    1914:	da f7       	brpl	.-10     	; 0x190c <log+0x1c>
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f eb       	ldi	r21, 0xBF	; 191
    191e:	9f e3       	ldi	r25, 0x3F	; 63
    1920:	88 39       	cpi	r24, 0x98	; 152
    1922:	20 f0       	brcs	.+8      	; 0x192c <log+0x3c>
    1924:	80 3e       	cpi	r24, 0xE0	; 224
    1926:	30 f0       	brcs	.+12     	; 0x1934 <log+0x44>
    1928:	21 96       	adiw	r28, 0x01	; 1
    192a:	8f 77       	andi	r24, 0x7F	; 127
    192c:	4f dd       	rcall	.-1378   	; 0x13cc <__addsf3>
    192e:	ec e0       	ldi	r30, 0x0C	; 12
    1930:	f1 e0       	ldi	r31, 0x01	; 1
    1932:	03 c0       	rjmp	.+6      	; 0x193a <log+0x4a>
    1934:	4b dd       	rcall	.-1386   	; 0x13cc <__addsf3>
    1936:	e9 e3       	ldi	r30, 0x39	; 57
    1938:	f1 e0       	ldi	r31, 0x01	; 1
    193a:	73 df       	rcall	.-282    	; 0x1822 <__fp_powser>
    193c:	8b 01       	movw	r16, r22
    193e:	be 01       	movw	r22, r28
    1940:	ec 01       	movw	r28, r24
    1942:	fb 2e       	mov	r15, r27
    1944:	6f 57       	subi	r22, 0x7F	; 127
    1946:	71 09       	sbc	r23, r1
    1948:	75 95       	asr	r23
    194a:	77 1f       	adc	r23, r23
    194c:	88 0b       	sbc	r24, r24
    194e:	99 0b       	sbc	r25, r25
    1950:	d8 dd       	rcall	.-1104   	; 0x1502 <__floatsisf>
    1952:	28 e1       	ldi	r18, 0x18	; 24
    1954:	32 e7       	ldi	r19, 0x72	; 114
    1956:	41 e3       	ldi	r20, 0x31	; 49
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	8f de       	rcall	.-738    	; 0x167a <__mulsf3x>
    195c:	af 2d       	mov	r26, r15
    195e:	98 01       	movw	r18, r16
    1960:	ae 01       	movw	r20, r28
    1962:	ff 90       	pop	r15
    1964:	0f 91       	pop	r16
    1966:	1f 91       	pop	r17
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	40 dd       	rcall	.-1408   	; 0x13ee <__addsf3x>
    196e:	3f ce       	rjmp	.-898    	; 0x15ee <__fp_round>

00001970 <modf>:
    1970:	fa 01       	movw	r30, r20
    1972:	dc 01       	movw	r26, r24
    1974:	aa 0f       	add	r26, r26
    1976:	bb 1f       	adc	r27, r27
    1978:	9b 01       	movw	r18, r22
    197a:	ac 01       	movw	r20, r24
    197c:	bf 57       	subi	r27, 0x7F	; 127
    197e:	28 f4       	brcc	.+10     	; 0x198a <modf+0x1a>
    1980:	22 27       	eor	r18, r18
    1982:	33 27       	eor	r19, r19
    1984:	44 27       	eor	r20, r20
    1986:	50 78       	andi	r21, 0x80	; 128
    1988:	1f c0       	rjmp	.+62     	; 0x19c8 <modf+0x58>
    198a:	b7 51       	subi	r27, 0x17	; 23
    198c:	88 f4       	brcc	.+34     	; 0x19b0 <modf+0x40>
    198e:	ab 2f       	mov	r26, r27
    1990:	00 24       	eor	r0, r0
    1992:	46 95       	lsr	r20
    1994:	37 95       	ror	r19
    1996:	27 95       	ror	r18
    1998:	01 1c       	adc	r0, r1
    199a:	a3 95       	inc	r26
    199c:	d2 f3       	brmi	.-12     	; 0x1992 <modf+0x22>
    199e:	00 20       	and	r0, r0
    19a0:	69 f0       	breq	.+26     	; 0x19bc <modf+0x4c>
    19a2:	22 0f       	add	r18, r18
    19a4:	33 1f       	adc	r19, r19
    19a6:	44 1f       	adc	r20, r20
    19a8:	b3 95       	inc	r27
    19aa:	da f3       	brmi	.-10     	; 0x19a2 <modf+0x32>
    19ac:	0d d0       	rcall	.+26     	; 0x19c8 <modf+0x58>
    19ae:	0d cd       	rjmp	.-1510   	; 0x13ca <__subsf3>
    19b0:	61 30       	cpi	r22, 0x01	; 1
    19b2:	71 05       	cpc	r23, r1
    19b4:	a0 e8       	ldi	r26, 0x80	; 128
    19b6:	8a 07       	cpc	r24, r26
    19b8:	b9 46       	sbci	r27, 0x69	; 105
    19ba:	30 f4       	brcc	.+12     	; 0x19c8 <modf+0x58>
    19bc:	9b 01       	movw	r18, r22
    19be:	ac 01       	movw	r20, r24
    19c0:	66 27       	eor	r22, r22
    19c2:	77 27       	eor	r23, r23
    19c4:	88 27       	eor	r24, r24
    19c6:	90 78       	andi	r25, 0x80	; 128
    19c8:	30 96       	adiw	r30, 0x00	; 0
    19ca:	21 f0       	breq	.+8      	; 0x19d4 <modf+0x64>
    19cc:	20 83       	st	Z, r18
    19ce:	31 83       	std	Z+1, r19	; 0x01
    19d0:	42 83       	std	Z+2, r20	; 0x02
    19d2:	53 83       	std	Z+3, r21	; 0x03
    19d4:	08 95       	ret

000019d6 <__divsf3>:
    19d6:	0c d0       	rcall	.+24     	; 0x19f0 <__divsf3x>
    19d8:	0a ce       	rjmp	.-1004   	; 0x15ee <__fp_round>
    19da:	02 de       	rcall	.-1020   	; 0x15e0 <__fp_pscB>
    19dc:	40 f0       	brcs	.+16     	; 0x19ee <__divsf3+0x18>
    19de:	f9 dd       	rcall	.-1038   	; 0x15d2 <__fp_pscA>
    19e0:	30 f0       	brcs	.+12     	; 0x19ee <__divsf3+0x18>
    19e2:	21 f4       	brne	.+8      	; 0x19ec <__divsf3+0x16>
    19e4:	5f 3f       	cpi	r21, 0xFF	; 255
    19e6:	19 f0       	breq	.+6      	; 0x19ee <__divsf3+0x18>
    19e8:	eb cd       	rjmp	.-1066   	; 0x15c0 <__fp_inf>
    19ea:	51 11       	cpse	r21, r1
    19ec:	34 ce       	rjmp	.-920    	; 0x1656 <__fp_szero>
    19ee:	ee cd       	rjmp	.-1060   	; 0x15cc <__fp_nan>

000019f0 <__divsf3x>:
    19f0:	0f de       	rcall	.-994    	; 0x1610 <__fp_split3>
    19f2:	98 f3       	brcs	.-26     	; 0x19da <__divsf3+0x4>

000019f4 <__divsf3_pse>:
    19f4:	99 23       	and	r25, r25
    19f6:	c9 f3       	breq	.-14     	; 0x19ea <__divsf3+0x14>
    19f8:	55 23       	and	r21, r21
    19fa:	b1 f3       	breq	.-20     	; 0x19e8 <__divsf3+0x12>
    19fc:	95 1b       	sub	r25, r21
    19fe:	55 0b       	sbc	r21, r21
    1a00:	bb 27       	eor	r27, r27
    1a02:	aa 27       	eor	r26, r26
    1a04:	62 17       	cp	r22, r18
    1a06:	73 07       	cpc	r23, r19
    1a08:	84 07       	cpc	r24, r20
    1a0a:	38 f0       	brcs	.+14     	; 0x1a1a <__divsf3_pse+0x26>
    1a0c:	9f 5f       	subi	r25, 0xFF	; 255
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a10:	22 0f       	add	r18, r18
    1a12:	33 1f       	adc	r19, r19
    1a14:	44 1f       	adc	r20, r20
    1a16:	aa 1f       	adc	r26, r26
    1a18:	a9 f3       	breq	.-22     	; 0x1a04 <__divsf3_pse+0x10>
    1a1a:	33 d0       	rcall	.+102    	; 0x1a82 <__divsf3_pse+0x8e>
    1a1c:	0e 2e       	mov	r0, r30
    1a1e:	3a f0       	brmi	.+14     	; 0x1a2e <__divsf3_pse+0x3a>
    1a20:	e0 e8       	ldi	r30, 0x80	; 128
    1a22:	30 d0       	rcall	.+96     	; 0x1a84 <__divsf3_pse+0x90>
    1a24:	91 50       	subi	r25, 0x01	; 1
    1a26:	50 40       	sbci	r21, 0x00	; 0
    1a28:	e6 95       	lsr	r30
    1a2a:	00 1c       	adc	r0, r0
    1a2c:	ca f7       	brpl	.-14     	; 0x1a20 <__divsf3_pse+0x2c>
    1a2e:	29 d0       	rcall	.+82     	; 0x1a82 <__divsf3_pse+0x8e>
    1a30:	fe 2f       	mov	r31, r30
    1a32:	27 d0       	rcall	.+78     	; 0x1a82 <__divsf3_pse+0x8e>
    1a34:	66 0f       	add	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	bb 1f       	adc	r27, r27
    1a3c:	26 17       	cp	r18, r22
    1a3e:	37 07       	cpc	r19, r23
    1a40:	48 07       	cpc	r20, r24
    1a42:	ab 07       	cpc	r26, r27
    1a44:	b0 e8       	ldi	r27, 0x80	; 128
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <__divsf3_pse+0x56>
    1a48:	bb 0b       	sbc	r27, r27
    1a4a:	80 2d       	mov	r24, r0
    1a4c:	bf 01       	movw	r22, r30
    1a4e:	ff 27       	eor	r31, r31
    1a50:	93 58       	subi	r25, 0x83	; 131
    1a52:	5f 4f       	sbci	r21, 0xFF	; 255
    1a54:	2a f0       	brmi	.+10     	; 0x1a60 <__divsf3_pse+0x6c>
    1a56:	9e 3f       	cpi	r25, 0xFE	; 254
    1a58:	51 05       	cpc	r21, r1
    1a5a:	68 f0       	brcs	.+26     	; 0x1a76 <__divsf3_pse+0x82>
    1a5c:	b1 cd       	rjmp	.-1182   	; 0x15c0 <__fp_inf>
    1a5e:	fb cd       	rjmp	.-1034   	; 0x1656 <__fp_szero>
    1a60:	5f 3f       	cpi	r21, 0xFF	; 255
    1a62:	ec f3       	brlt	.-6      	; 0x1a5e <__divsf3_pse+0x6a>
    1a64:	98 3e       	cpi	r25, 0xE8	; 232
    1a66:	dc f3       	brlt	.-10     	; 0x1a5e <__divsf3_pse+0x6a>
    1a68:	86 95       	lsr	r24
    1a6a:	77 95       	ror	r23
    1a6c:	67 95       	ror	r22
    1a6e:	b7 95       	ror	r27
    1a70:	f7 95       	ror	r31
    1a72:	9f 5f       	subi	r25, 0xFF	; 255
    1a74:	c9 f7       	brne	.-14     	; 0x1a68 <__divsf3_pse+0x74>
    1a76:	88 0f       	add	r24, r24
    1a78:	91 1d       	adc	r25, r1
    1a7a:	96 95       	lsr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	97 f9       	bld	r25, 7
    1a80:	08 95       	ret
    1a82:	e1 e0       	ldi	r30, 0x01	; 1
    1a84:	66 0f       	add	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	88 1f       	adc	r24, r24
    1a8a:	bb 1f       	adc	r27, r27
    1a8c:	62 17       	cp	r22, r18
    1a8e:	73 07       	cpc	r23, r19
    1a90:	84 07       	cpc	r24, r20
    1a92:	ba 07       	cpc	r27, r26
    1a94:	20 f0       	brcs	.+8      	; 0x1a9e <__divsf3_pse+0xaa>
    1a96:	62 1b       	sub	r22, r18
    1a98:	73 0b       	sbc	r23, r19
    1a9a:	84 0b       	sbc	r24, r20
    1a9c:	ba 0b       	sbc	r27, r26
    1a9e:	ee 1f       	adc	r30, r30
    1aa0:	88 f7       	brcc	.-30     	; 0x1a84 <__divsf3_pse+0x90>
    1aa2:	e0 95       	com	r30
    1aa4:	08 95       	ret

00001aa6 <__fp_mpack>:
    1aa6:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa8:	31 f0       	breq	.+12     	; 0x1ab6 <__fp_mpack_finite+0xc>

00001aaa <__fp_mpack_finite>:
    1aaa:	91 50       	subi	r25, 0x01	; 1
    1aac:	20 f4       	brcc	.+8      	; 0x1ab6 <__fp_mpack_finite+0xc>
    1aae:	87 95       	ror	r24
    1ab0:	77 95       	ror	r23
    1ab2:	67 95       	ror	r22
    1ab4:	b7 95       	ror	r27
    1ab6:	88 0f       	add	r24, r24
    1ab8:	91 1d       	adc	r25, r1
    1aba:	96 95       	lsr	r25
    1abc:	87 95       	ror	r24
    1abe:	97 f9       	bld	r25, 7
    1ac0:	08 95       	ret

00001ac2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1ac2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1ac4:	91 8d       	ldd	r25, Z+25	; 0x19
    1ac6:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ac8:	89 2f       	mov	r24, r25
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	80 5c       	subi	r24, 0xC0	; 192
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	82 1b       	sub	r24, r18
    1ad2:	91 09       	sbc	r25, r1
}
    1ad4:	8f 73       	andi	r24, 0x3F	; 63
    1ad6:	99 27       	eor	r25, r25
    1ad8:	08 95       	ret

00001ada <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1ada:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1adc:	91 8d       	ldd	r25, Z+25	; 0x19
    1ade:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ae0:	98 17       	cp	r25, r24
    1ae2:	31 f0       	breq	.+12     	; 0x1af0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1ae4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ae6:	e8 0f       	add	r30, r24
    1ae8:	f1 1d       	adc	r31, r1
    1aea:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1af4:	08 95       	ret

00001af6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1af6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1af8:	91 8d       	ldd	r25, Z+25	; 0x19
    1afa:	82 8d       	ldd	r24, Z+26	; 0x1a
    1afc:	98 17       	cp	r25, r24
    1afe:	61 f0       	breq	.+24     	; 0x1b18 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1b00:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b02:	df 01       	movw	r26, r30
    1b04:	a8 0f       	add	r26, r24
    1b06:	b1 1d       	adc	r27, r1
    1b08:	5d 96       	adiw	r26, 0x1d	; 29
    1b0a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1b0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b0e:	9f 5f       	subi	r25, 0xFF	; 255
    1b10:	9f 73       	andi	r25, 0x3F	; 63
    1b12:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1b1c:	08 95       	ret

00001b1e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1b1e:	fc 01       	movw	r30, r24
    1b20:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1b22:	44 8d       	ldd	r20, Z+28	; 0x1c
    1b24:	25 2f       	mov	r18, r21
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	84 2f       	mov	r24, r20
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1b2c:	82 1b       	sub	r24, r18
    1b2e:	93 0b       	sbc	r25, r19
    1b30:	54 17       	cp	r21, r20
    1b32:	10 f0       	brcs	.+4      	; 0x1b38 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1b34:	cf 96       	adiw	r24, 0x3f	; 63
    1b36:	08 95       	ret
  return tail - head - 1;
    1b38:	01 97       	sbiw	r24, 0x01	; 1
}
    1b3a:	08 95       	ret

00001b3c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b3c:	80 e3       	ldi	r24, 0x30	; 48
    1b3e:	9f e0       	ldi	r25, 0x0F	; 15
    1b40:	89 2b       	or	r24, r25
    1b42:	39 f0       	breq	.+14     	; 0x1b52 <_Z14serialEventRunv+0x16>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	89 2b       	or	r24, r25
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <_Z14serialEventRunv+0x16>
    1b4c:	89 d1       	rcall	.+786    	; 0x1e60 <_Z17Serial0_availablev>
    1b4e:	81 11       	cpse	r24, r1
    1b50:	24 c0       	rjmp	.+72     	; 0x1b9a <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1b52:	85 ec       	ldi	r24, 0xC5	; 197
    1b54:	9f e0       	ldi	r25, 0x0F	; 15
    1b56:	89 2b       	or	r24, r25
    1b58:	39 f0       	breq	.+14     	; 0x1b68 <_Z14serialEventRunv+0x2c>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	89 2b       	or	r24, r25
    1b60:	19 f0       	breq	.+6      	; 0x1b68 <_Z14serialEventRunv+0x2c>
    1b62:	13 d2       	rcall	.+1062   	; 0x1f8a <_Z17Serial1_availablev>
    1b64:	81 11       	cpse	r24, r1
    1b66:	1c c0       	rjmp	.+56     	; 0x1ba0 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	89 2b       	or	r24, r25
    1b6e:	41 f0       	breq	.+16     	; 0x1b80 <_Z14serialEventRunv+0x44>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	89 2b       	or	r24, r25
    1b76:	21 f0       	breq	.+8      	; 0x1b80 <_Z14serialEventRunv+0x44>
    1b78:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	13 c0       	rjmp	.+38     	; 0x1ba6 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	89 2b       	or	r24, r25
    1b86:	a1 f0       	breq	.+40     	; 0x1bb0 <_Z14serialEventRunv+0x74>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	89 2b       	or	r24, r25
    1b8e:	81 f0       	breq	.+32     	; 0x1bb0 <_Z14serialEventRunv+0x74>
    1b90:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1b94:	81 11       	cpse	r24, r1
    1b96:	0a c0       	rjmp	.+20     	; 0x1bac <_Z14serialEventRunv+0x70>
    1b98:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b9a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1b9e:	d9 cf       	rjmp	.-78     	; 0x1b52 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1ba0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1ba4:	e1 cf       	rjmp	.-62     	; 0x1b68 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1ba6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1baa:	ea cf       	rjmp	.-44     	; 0x1b80 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1bac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1bb0:	08 95       	ret

00001bb2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1bb2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1bb4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bb6:	df 01       	movw	r26, r30
    1bb8:	a8 0f       	add	r26, r24
    1bba:	b1 1d       	adc	r27, r1
    1bbc:	a3 5a       	subi	r26, 0xA3	; 163
    1bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1bc2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	8f 73       	andi	r24, 0x3F	; 63
    1bca:	99 27       	eor	r25, r25
    1bcc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1bce:	a6 89       	ldd	r26, Z+22	; 0x16
    1bd0:	b7 89       	ldd	r27, Z+23	; 0x17
    1bd2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1bd4:	a0 89       	ldd	r26, Z+16	; 0x10
    1bd6:	b1 89       	ldd	r27, Z+17	; 0x11
    1bd8:	8c 91       	ld	r24, X
    1bda:	83 70       	andi	r24, 0x03	; 3
    1bdc:	80 64       	ori	r24, 0x40	; 64
    1bde:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1be0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1be2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1be4:	98 13       	cpse	r25, r24
    1be6:	06 c0       	rjmp	.+12     	; 0x1bf4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1be8:	02 88       	ldd	r0, Z+18	; 0x12
    1bea:	f3 89       	ldd	r31, Z+19	; 0x13
    1bec:	e0 2d       	mov	r30, r0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8f 7d       	andi	r24, 0xDF	; 223
    1bf2:	80 83       	st	Z, r24
    1bf4:	08 95       	ret

00001bf6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	ec 01       	movw	r28, r24
  _written = true;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1c08:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c0c:	98 13       	cpse	r25, r24
    1c0e:	05 c0       	rjmp	.+10     	; 0x1c1a <_ZN14HardwareSerial5writeEh+0x24>
    1c10:	e8 89       	ldd	r30, Y+16	; 0x10
    1c12:	f9 89       	ldd	r31, Y+17	; 0x11
    1c14:	80 81       	ld	r24, Z
    1c16:	85 fd       	sbrc	r24, 5
    1c18:	25 c0       	rjmp	.+74     	; 0x1c64 <_ZN14HardwareSerial5writeEh+0x6e>
    1c1a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1c1c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1c1e:	10 e0       	ldi	r17, 0x00	; 0
    1c20:	0f 5f       	subi	r16, 0xFF	; 255
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	0f 73       	andi	r16, 0x3F	; 63
    1c26:	11 27       	eor	r17, r17
    1c28:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1c2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c2c:	e8 12       	cpse	r14, r24
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	07 fc       	sbrc	r0, 7
    1c34:	fa cf       	rjmp	.-12     	; 0x1c2a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1c36:	e8 89       	ldd	r30, Y+16	; 0x10
    1c38:	f9 89       	ldd	r31, Y+17	; 0x11
    1c3a:	80 81       	ld	r24, Z
    1c3c:	85 ff       	sbrs	r24, 5
    1c3e:	f5 cf       	rjmp	.-22     	; 0x1c2a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1c40:	ce 01       	movw	r24, r28
    1c42:	b7 df       	rcall	.-146    	; 0x1bb2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c44:	f2 cf       	rjmp	.-28     	; 0x1c2a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e8 0f       	add	r30, r24
    1c4c:	f1 1d       	adc	r31, r1
    1c4e:	e3 5a       	subi	r30, 0xA3	; 163
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c54:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c56:	f8 94       	cli
    _tx_buffer_head = i;
    1c58:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1c5a:	ea 89       	ldd	r30, Y+18	; 0x12
    1c5c:	fb 89       	ldd	r31, Y+19	; 0x13
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 62       	ori	r24, 0x20	; 32
    1c62:	0a c0       	rjmp	.+20     	; 0x1c78 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c64:	9f b7       	in	r25, 0x3f	; 63
    1c66:	f8 94       	cli
      *_udr = c;
    1c68:	ee 89       	ldd	r30, Y+22	; 0x16
    1c6a:	ff 89       	ldd	r31, Y+23	; 0x17
    1c6c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1c6e:	e8 89       	ldd	r30, Y+16	; 0x10
    1c70:	f9 89       	ldd	r31, Y+17	; 0x11
    1c72:	80 81       	ld	r24, Z
    1c74:	83 70       	andi	r24, 0x03	; 3
    1c76:	80 64       	ori	r24, 0x40	; 64
    1c78:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c7a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	08 95       	ret

00001c8e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1c94:	88 8d       	ldd	r24, Y+24	; 0x18
    1c96:	88 23       	and	r24, r24
    1c98:	c1 f0       	breq	.+48     	; 0x1cca <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1c9a:	ea 89       	ldd	r30, Y+18	; 0x12
    1c9c:	fb 89       	ldd	r31, Y+19	; 0x13
    1c9e:	80 81       	ld	r24, Z
    1ca0:	85 fd       	sbrc	r24, 5
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <_ZN14HardwareSerial5flushEv+0x20>
    1ca4:	a8 89       	ldd	r26, Y+16	; 0x10
    1ca6:	b9 89       	ldd	r27, Y+17	; 0x11
    1ca8:	8c 91       	ld	r24, X
    1caa:	86 fd       	sbrc	r24, 6
    1cac:	0e c0       	rjmp	.+28     	; 0x1cca <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	07 fc       	sbrc	r0, 7
    1cb2:	f5 cf       	rjmp	.-22     	; 0x1c9e <_ZN14HardwareSerial5flushEv+0x10>
    1cb4:	80 81       	ld	r24, Z
    1cb6:	85 ff       	sbrs	r24, 5
    1cb8:	f2 cf       	rjmp	.-28     	; 0x1c9e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1cba:	a8 89       	ldd	r26, Y+16	; 0x10
    1cbc:	b9 89       	ldd	r27, Y+17	; 0x11
    1cbe:	8c 91       	ld	r24, X
    1cc0:	85 ff       	sbrs	r24, 5
    1cc2:	ed cf       	rjmp	.-38     	; 0x1c9e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	75 df       	rcall	.-278    	; 0x1bb2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1cc8:	e8 cf       	rjmp	.-48     	; 0x1c9a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	08 95       	ret

00001cd0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1cd0:	cf 92       	push	r12
    1cd2:	df 92       	push	r13
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	ec 01       	movw	r28, r24
    1ce0:	6a 01       	movw	r12, r20
    1ce2:	7b 01       	movw	r14, r22
    1ce4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1ce6:	e8 89       	ldd	r30, Y+16	; 0x10
    1ce8:	f9 89       	ldd	r31, Y+17	; 0x11
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1cee:	41 15       	cp	r20, r1
    1cf0:	51 4e       	sbci	r21, 0xE1	; 225
    1cf2:	61 05       	cpc	r22, r1
    1cf4:	71 05       	cpc	r23, r1
    1cf6:	b1 f0       	breq	.+44     	; 0x1d24 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	79 e0       	ldi	r23, 0x09	; 9
    1cfc:	8d e3       	ldi	r24, 0x3D	; 61
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	a7 01       	movw	r20, r14
    1d02:	96 01       	movw	r18, r12
    1d04:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__udivmodsi4>
    1d08:	da 01       	movw	r26, r20
    1d0a:	c9 01       	movw	r24, r18
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	a1 09       	sbc	r26, r1
    1d10:	b1 09       	sbc	r27, r1
    1d12:	b6 95       	lsr	r27
    1d14:	a7 95       	ror	r26
    1d16:	97 95       	ror	r25
    1d18:	87 95       	ror	r24
    1d1a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1d1c:	21 15       	cp	r18, r1
    1d1e:	80 e1       	ldi	r24, 0x10	; 16
    1d20:	38 07       	cpc	r19, r24
    1d22:	a8 f0       	brcs	.+42     	; 0x1d4e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1d24:	e8 89       	ldd	r30, Y+16	; 0x10
    1d26:	f9 89       	ldd	r31, Y+17	; 0x11
    1d28:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1d2a:	60 e8       	ldi	r22, 0x80	; 128
    1d2c:	74 e8       	ldi	r23, 0x84	; 132
    1d2e:	8e e1       	ldi	r24, 0x1E	; 30
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a7 01       	movw	r20, r14
    1d34:	96 01       	movw	r18, r12
    1d36:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__udivmodsi4>
    1d3a:	da 01       	movw	r26, r20
    1d3c:	c9 01       	movw	r24, r18
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	a1 09       	sbc	r26, r1
    1d42:	b1 09       	sbc	r27, r1
    1d44:	b6 95       	lsr	r27
    1d46:	a7 95       	ror	r26
    1d48:	97 95       	ror	r25
    1d4a:	87 95       	ror	r24
    1d4c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1d4e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d50:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d52:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1d54:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d56:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d58:	20 83       	st	Z, r18

  _written = false;
    1d5a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1d5c:	ec 89       	ldd	r30, Y+20	; 0x14
    1d5e:	fd 89       	ldd	r31, Y+21	; 0x15
    1d60:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1d62:	ea 89       	ldd	r30, Y+18	; 0x12
    1d64:	fb 89       	ldd	r31, Y+19	; 0x13
    1d66:	80 81       	ld	r24, Z
    1d68:	80 61       	ori	r24, 0x10	; 16
    1d6a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1d6c:	ea 89       	ldd	r30, Y+18	; 0x12
    1d6e:	fb 89       	ldd	r31, Y+19	; 0x13
    1d70:	80 81       	ld	r24, Z
    1d72:	88 60       	ori	r24, 0x08	; 8
    1d74:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1d76:	ea 89       	ldd	r30, Y+18	; 0x12
    1d78:	fb 89       	ldd	r31, Y+19	; 0x13
    1d7a:	80 81       	ld	r24, Z
    1d7c:	80 68       	ori	r24, 0x80	; 128
    1d7e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1d80:	ea 89       	ldd	r30, Y+18	; 0x12
    1d82:	fb 89       	ldd	r31, Y+19	; 0x13
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 7d       	andi	r24, 0xDF	; 223
    1d88:	80 83       	st	Z, r24
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	df 90       	pop	r13
    1d96:	cf 90       	pop	r12
    1d98:	08 95       	ret

00001d9a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	08 95       	ret

00001da0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1da0:	08 95       	ret

00001da2 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1da2:	1f 92       	push	r1
    1da4:	0f 92       	push	r0
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	0f 92       	push	r0
    1daa:	11 24       	eor	r1, r1
    1dac:	0b b6       	in	r0, 0x3b	; 59
    1dae:	0f 92       	push	r0
    1db0:	2f 93       	push	r18
    1db2:	8f 93       	push	r24
    1db4:	9f 93       	push	r25
    1db6:	ef 93       	push	r30
    1db8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1dba:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <Serial+0x10>
    1dbe:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <Serial+0x11>
    1dc2:	80 81       	ld	r24, Z
    1dc4:	e0 91 c7 03 	lds	r30, 0x03C7	; 0x8003c7 <Serial+0x16>
    1dc8:	f0 91 c8 03 	lds	r31, 0x03C8	; 0x8003c8 <Serial+0x17>
    1dcc:	82 fd       	sbrc	r24, 2
    1dce:	12 c0       	rjmp	.+36     	; 0x1df4 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1dd0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1dd2:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <Serial+0x19>
    1dd6:	8f 5f       	subi	r24, 0xFF	; 255
    1dd8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1dda:	20 91 cb 03 	lds	r18, 0x03CB	; 0x8003cb <Serial+0x1a>
    1dde:	82 17       	cp	r24, r18
    1de0:	51 f0       	breq	.+20     	; 0x1df6 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1de2:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <Serial+0x19>
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	ef 54       	subi	r30, 0x4F	; 79
    1dea:	fc 4f       	sbci	r31, 0xFC	; 252
    1dec:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1dee:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <Serial+0x19>
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1df4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1df6:	ff 91       	pop	r31
    1df8:	ef 91       	pop	r30
    1dfa:	9f 91       	pop	r25
    1dfc:	8f 91       	pop	r24
    1dfe:	2f 91       	pop	r18
    1e00:	0f 90       	pop	r0
    1e02:	0b be       	out	0x3b, r0	; 59
    1e04:	0f 90       	pop	r0
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	0f 90       	pop	r0
    1e0a:	1f 90       	pop	r1
    1e0c:	18 95       	reti

00001e0e <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1e0e:	1f 92       	push	r1
    1e10:	0f 92       	push	r0
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	0f 92       	push	r0
    1e16:	11 24       	eor	r1, r1
    1e18:	0b b6       	in	r0, 0x3b	; 59
    1e1a:	0f 92       	push	r0
    1e1c:	2f 93       	push	r18
    1e1e:	3f 93       	push	r19
    1e20:	4f 93       	push	r20
    1e22:	5f 93       	push	r21
    1e24:	6f 93       	push	r22
    1e26:	7f 93       	push	r23
    1e28:	8f 93       	push	r24
    1e2a:	9f 93       	push	r25
    1e2c:	af 93       	push	r26
    1e2e:	bf 93       	push	r27
    1e30:	ef 93       	push	r30
    1e32:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1e34:	81 eb       	ldi	r24, 0xB1	; 177
    1e36:	93 e0       	ldi	r25, 0x03	; 3
    1e38:	bc de       	rcall	.-648    	; 0x1bb2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1e3a:	ff 91       	pop	r31
    1e3c:	ef 91       	pop	r30
    1e3e:	bf 91       	pop	r27
    1e40:	af 91       	pop	r26
    1e42:	9f 91       	pop	r25
    1e44:	8f 91       	pop	r24
    1e46:	7f 91       	pop	r23
    1e48:	6f 91       	pop	r22
    1e4a:	5f 91       	pop	r21
    1e4c:	4f 91       	pop	r20
    1e4e:	3f 91       	pop	r19
    1e50:	2f 91       	pop	r18
    1e52:	0f 90       	pop	r0
    1e54:	0b be       	out	0x3b, r0	; 59
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0f 90       	pop	r0
    1e5c:	1f 90       	pop	r1
    1e5e:	18 95       	reti

00001e60 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1e60:	81 eb       	ldi	r24, 0xB1	; 177
    1e62:	93 e0       	ldi	r25, 0x03	; 3
    1e64:	2e de       	rcall	.-932    	; 0x1ac2 <_ZN14HardwareSerial9availableEv>
    1e66:	21 e0       	ldi	r18, 0x01	; 1
    1e68:	89 2b       	or	r24, r25
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <_Z17Serial0_availablev+0xe>
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
}
    1e6e:	82 2f       	mov	r24, r18
    1e70:	08 95       	ret

00001e72 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1e72:	e1 eb       	ldi	r30, 0xB1	; 177
    1e74:	f3 e0       	ldi	r31, 0x03	; 3
    1e76:	13 82       	std	Z+3, r1	; 0x03
    1e78:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1e7a:	88 ee       	ldi	r24, 0xE8	; 232
    1e7c:	93 e0       	ldi	r25, 0x03	; 3
    1e7e:	a0 e0       	ldi	r26, 0x00	; 0
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	84 83       	std	Z+4, r24	; 0x04
    1e84:	95 83       	std	Z+5, r25	; 0x05
    1e86:	a6 83       	std	Z+6, r26	; 0x06
    1e88:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1e8a:	8c e1       	ldi	r24, 0x1C	; 28
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	91 83       	std	Z+1, r25	; 0x01
    1e90:	80 83       	st	Z, r24
    1e92:	85 ec       	ldi	r24, 0xC5	; 197
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	95 87       	std	Z+13, r25	; 0x0d
    1e98:	84 87       	std	Z+12, r24	; 0x0c
    1e9a:	84 ec       	ldi	r24, 0xC4	; 196
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	97 87       	std	Z+15, r25	; 0x0f
    1ea0:	86 87       	std	Z+14, r24	; 0x0e
    1ea2:	80 ec       	ldi	r24, 0xC0	; 192
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	91 8b       	std	Z+17, r25	; 0x11
    1ea8:	80 8b       	std	Z+16, r24	; 0x10
    1eaa:	81 ec       	ldi	r24, 0xC1	; 193
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	93 8b       	std	Z+19, r25	; 0x13
    1eb0:	82 8b       	std	Z+18, r24	; 0x12
    1eb2:	82 ec       	ldi	r24, 0xC2	; 194
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	95 8b       	std	Z+21, r25	; 0x15
    1eb8:	84 8b       	std	Z+20, r24	; 0x14
    1eba:	86 ec       	ldi	r24, 0xC6	; 198
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	97 8b       	std	Z+23, r25	; 0x17
    1ec0:	86 8b       	std	Z+22, r24	; 0x16
    1ec2:	11 8e       	std	Z+25, r1	; 0x19
    1ec4:	12 8e       	std	Z+26, r1	; 0x1a
    1ec6:	13 8e       	std	Z+27, r1	; 0x1b
    1ec8:	14 8e       	std	Z+28, r1	; 0x1c
    1eca:	08 95       	ret

00001ecc <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1ecc:	1f 92       	push	r1
    1ece:	0f 92       	push	r0
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	0f 92       	push	r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	0b b6       	in	r0, 0x3b	; 59
    1ed8:	0f 92       	push	r0
    1eda:	2f 93       	push	r18
    1edc:	8f 93       	push	r24
    1ede:	9f 93       	push	r25
    1ee0:	ef 93       	push	r30
    1ee2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1ee4:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <Serial1+0x10>
    1ee8:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <Serial1+0x11>
    1eec:	80 81       	ld	r24, Z
    1eee:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <Serial1+0x16>
    1ef2:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <Serial1+0x17>
    1ef6:	82 fd       	sbrc	r24, 2
    1ef8:	12 c0       	rjmp	.+36     	; 0x1f1e <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1efa:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1efc:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <Serial1+0x19>
    1f00:	8f 5f       	subi	r24, 0xFF	; 255
    1f02:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1f04:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <Serial1+0x1a>
    1f08:	82 17       	cp	r24, r18
    1f0a:	51 f0       	breq	.+20     	; 0x1f20 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1f0c:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <Serial1+0x19>
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	e2 5b       	subi	r30, 0xB2	; 178
    1f14:	fb 4f       	sbci	r31, 0xFB	; 251
    1f16:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1f18:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <Serial1+0x19>
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1f1e:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1f20:	ff 91       	pop	r31
    1f22:	ef 91       	pop	r30
    1f24:	9f 91       	pop	r25
    1f26:	8f 91       	pop	r24
    1f28:	2f 91       	pop	r18
    1f2a:	0f 90       	pop	r0
    1f2c:	0b be       	out	0x3b, r0	; 59
    1f2e:	0f 90       	pop	r0
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	0f 90       	pop	r0
    1f34:	1f 90       	pop	r1
    1f36:	18 95       	reti

00001f38 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1f38:	1f 92       	push	r1
    1f3a:	0f 92       	push	r0
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	0f 92       	push	r0
    1f40:	11 24       	eor	r1, r1
    1f42:	0b b6       	in	r0, 0x3b	; 59
    1f44:	0f 92       	push	r0
    1f46:	2f 93       	push	r18
    1f48:	3f 93       	push	r19
    1f4a:	4f 93       	push	r20
    1f4c:	5f 93       	push	r21
    1f4e:	6f 93       	push	r22
    1f50:	7f 93       	push	r23
    1f52:	8f 93       	push	r24
    1f54:	9f 93       	push	r25
    1f56:	af 93       	push	r26
    1f58:	bf 93       	push	r27
    1f5a:	ef 93       	push	r30
    1f5c:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1f5e:	8e e4       	ldi	r24, 0x4E	; 78
    1f60:	94 e0       	ldi	r25, 0x04	; 4
    1f62:	27 de       	rcall	.-946    	; 0x1bb2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1f64:	ff 91       	pop	r31
    1f66:	ef 91       	pop	r30
    1f68:	bf 91       	pop	r27
    1f6a:	af 91       	pop	r26
    1f6c:	9f 91       	pop	r25
    1f6e:	8f 91       	pop	r24
    1f70:	7f 91       	pop	r23
    1f72:	6f 91       	pop	r22
    1f74:	5f 91       	pop	r21
    1f76:	4f 91       	pop	r20
    1f78:	3f 91       	pop	r19
    1f7a:	2f 91       	pop	r18
    1f7c:	0f 90       	pop	r0
    1f7e:	0b be       	out	0x3b, r0	; 59
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1f8a:	8e e4       	ldi	r24, 0x4E	; 78
    1f8c:	94 e0       	ldi	r25, 0x04	; 4
    1f8e:	99 dd       	rcall	.-1230   	; 0x1ac2 <_ZN14HardwareSerial9availableEv>
    1f90:	21 e0       	ldi	r18, 0x01	; 1
    1f92:	89 2b       	or	r24, r25
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <_Z17Serial1_availablev+0xe>
    1f96:	20 e0       	ldi	r18, 0x00	; 0
}
    1f98:	82 2f       	mov	r24, r18
    1f9a:	08 95       	ret

00001f9c <_GLOBAL__sub_I___vector_36>:
    1f9c:	ee e4       	ldi	r30, 0x4E	; 78
    1f9e:	f4 e0       	ldi	r31, 0x04	; 4
    1fa0:	13 82       	std	Z+3, r1	; 0x03
    1fa2:	12 82       	std	Z+2, r1	; 0x02
    1fa4:	88 ee       	ldi	r24, 0xE8	; 232
    1fa6:	93 e0       	ldi	r25, 0x03	; 3
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	84 83       	std	Z+4, r24	; 0x04
    1fae:	95 83       	std	Z+5, r25	; 0x05
    1fb0:	a6 83       	std	Z+6, r26	; 0x06
    1fb2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1fb4:	8c e1       	ldi	r24, 0x1C	; 28
    1fb6:	93 e0       	ldi	r25, 0x03	; 3
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
    1fbc:	8d ec       	ldi	r24, 0xCD	; 205
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	95 87       	std	Z+13, r25	; 0x0d
    1fc2:	84 87       	std	Z+12, r24	; 0x0c
    1fc4:	8c ec       	ldi	r24, 0xCC	; 204
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	97 87       	std	Z+15, r25	; 0x0f
    1fca:	86 87       	std	Z+14, r24	; 0x0e
    1fcc:	88 ec       	ldi	r24, 0xC8	; 200
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	91 8b       	std	Z+17, r25	; 0x11
    1fd2:	80 8b       	std	Z+16, r24	; 0x10
    1fd4:	89 ec       	ldi	r24, 0xC9	; 201
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	93 8b       	std	Z+19, r25	; 0x13
    1fda:	82 8b       	std	Z+18, r24	; 0x12
    1fdc:	8a ec       	ldi	r24, 0xCA	; 202
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	95 8b       	std	Z+21, r25	; 0x15
    1fe2:	84 8b       	std	Z+20, r24	; 0x14
    1fe4:	8e ec       	ldi	r24, 0xCE	; 206
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	97 8b       	std	Z+23, r25	; 0x17
    1fea:	86 8b       	std	Z+22, r24	; 0x16
    1fec:	11 8e       	std	Z+25, r1	; 0x19
    1fee:	12 8e       	std	Z+26, r1	; 0x1a
    1ff0:	13 8e       	std	Z+27, r1	; 0x1b
    1ff2:	14 8e       	std	Z+28, r1	; 0x1c
    1ff4:	08 95       	ret

00001ff6 <initVariant>:
    1ff6:	08 95       	ret

00001ff8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1ff8:	d9 d1       	rcall	.+946    	; 0x23ac <init>

	initVariant();
    1ffa:	fd df       	rcall	.-6      	; 0x1ff6 <initVariant>
    1ffc:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2000:	ce e9       	ldi	r28, 0x9E	; 158
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2002:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    2004:	dc d9       	rcall	.-3144   	; 0x13be <loop>
		if (serialEventRun) serialEventRun();
    2006:	20 97       	sbiw	r28, 0x00	; 0
    2008:	e9 f3       	breq	.-6      	; 0x2004 <main+0xc>
    200a:	98 dd       	rcall	.-1232   	; 0x1b3c <_Z14serialEventRunv>
    200c:	fb cf       	rjmp	.-10     	; 0x2004 <main+0xc>

0000200e <_ZN5Print5writeEPKhj>:
    200e:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2010:	df 92       	push	r13
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	6c 01       	movw	r12, r24
    2020:	7a 01       	movw	r14, r20
    2022:	8b 01       	movw	r16, r22
    2024:	c0 e0       	ldi	r28, 0x00	; 0
    2026:	d0 e0       	ldi	r29, 0x00	; 0
    2028:	ce 15       	cp	r28, r14
    202a:	df 05       	cpc	r29, r15
    202c:	81 f0       	breq	.+32     	; 0x204e <_ZN5Print5writeEPKhj+0x40>
    202e:	d8 01       	movw	r26, r16
    2030:	6d 91       	ld	r22, X+
    2032:	8d 01       	movw	r16, r26
    2034:	d6 01       	movw	r26, r12
    2036:	ed 91       	ld	r30, X+
    2038:	fc 91       	ld	r31, X
    203a:	01 90       	ld	r0, Z+
    203c:	f0 81       	ld	r31, Z
    203e:	e0 2d       	mov	r30, r0
    2040:	c6 01       	movw	r24, r12
    2042:	19 95       	eicall
    2044:	89 2b       	or	r24, r25
    2046:	11 f0       	breq	.+4      	; 0x204c <_ZN5Print5writeEPKhj+0x3e>
    2048:	21 96       	adiw	r28, 0x01	; 1
    204a:	ee cf       	rjmp	.-36     	; 0x2028 <_ZN5Print5writeEPKhj+0x1a>
    204c:	7e 01       	movw	r14, r28
    204e:	c7 01       	movw	r24, r14
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	df 90       	pop	r13
    205e:	cf 90       	pop	r12
    2060:	08 95       	ret

00002062 <_ZN5Print5writeEPKc>:
    2062:	61 15       	cp	r22, r1
    2064:	71 05       	cpc	r23, r1
    2066:	79 f0       	breq	.+30     	; 0x2086 <_ZN5Print5writeEPKc+0x24>
    2068:	fb 01       	movw	r30, r22
    206a:	01 90       	ld	r0, Z+
    206c:	00 20       	and	r0, r0
    206e:	e9 f7       	brne	.-6      	; 0x206a <_ZN5Print5writeEPKc+0x8>
    2070:	31 97       	sbiw	r30, 0x01	; 1
    2072:	af 01       	movw	r20, r30
    2074:	46 1b       	sub	r20, r22
    2076:	57 0b       	sbc	r21, r23
    2078:	dc 01       	movw	r26, r24
    207a:	ed 91       	ld	r30, X+
    207c:	fc 91       	ld	r31, X
    207e:	02 80       	ldd	r0, Z+2	; 0x02
    2080:	f3 81       	ldd	r31, Z+3	; 0x03
    2082:	e0 2d       	mov	r30, r0
    2084:	19 94       	eijmp
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	08 95       	ret

0000208c <_ZN5Print5printERK6String>:
    208c:	db 01       	movw	r26, r22
    208e:	14 96       	adiw	r26, 0x04	; 4
    2090:	4d 91       	ld	r20, X+
    2092:	5c 91       	ld	r21, X
    2094:	15 97       	sbiw	r26, 0x05	; 5
    2096:	6d 91       	ld	r22, X+
    2098:	7c 91       	ld	r23, X
    209a:	dc 01       	movw	r26, r24
    209c:	ed 91       	ld	r30, X+
    209e:	fc 91       	ld	r31, X
    20a0:	02 80       	ldd	r0, Z+2	; 0x02
    20a2:	f3 81       	ldd	r31, Z+3	; 0x03
    20a4:	e0 2d       	mov	r30, r0
    20a6:	19 94       	eijmp

000020a8 <_ZN5Print5printEPKc>:
    20a8:	dc cf       	rjmp	.-72     	; 0x2062 <_ZN5Print5writeEPKc>

000020aa <_ZN5Print5printEc>:
    20aa:	dc 01       	movw	r26, r24
    20ac:	ed 91       	ld	r30, X+
    20ae:	fc 91       	ld	r31, X
    20b0:	01 90       	ld	r0, Z+
    20b2:	f0 81       	ld	r31, Z
    20b4:	e0 2d       	mov	r30, r0
    20b6:	19 94       	eijmp

000020b8 <_ZN5Print7printlnEv>:
    20b8:	6a e2       	ldi	r22, 0x2A	; 42
    20ba:	73 e0       	ldi	r23, 0x03	; 3
    20bc:	d2 cf       	rjmp	.-92     	; 0x2062 <_ZN5Print5writeEPKc>

000020be <_ZN5Print7printlnEPKc>:
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	ec 01       	movw	r28, r24
    20c8:	cc df       	rcall	.-104    	; 0x2062 <_ZN5Print5writeEPKc>
    20ca:	8c 01       	movw	r16, r24
    20cc:	ce 01       	movw	r24, r28
    20ce:	f4 df       	rcall	.-24     	; 0x20b8 <_ZN5Print7printlnEv>
    20d0:	80 0f       	add	r24, r16
    20d2:	91 1f       	adc	r25, r17
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	08 95       	ret

000020de <_ZN5Print11printNumberEmh>:
    20de:	8f 92       	push	r8
    20e0:	9f 92       	push	r9
    20e2:	af 92       	push	r10
    20e4:	bf 92       	push	r11
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	a1 97       	sbiw	r28, 0x21	; 33
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	7c 01       	movw	r14, r24
    2104:	fa 01       	movw	r30, r20
    2106:	cb 01       	movw	r24, r22
    2108:	19 a2       	std	Y+33, r1	; 0x21
    210a:	22 30       	cpi	r18, 0x02	; 2
    210c:	08 f4       	brcc	.+2      	; 0x2110 <_ZN5Print11printNumberEmh+0x32>
    210e:	2a e0       	ldi	r18, 0x0A	; 10
    2110:	8e 01       	movw	r16, r28
    2112:	0f 5d       	subi	r16, 0xDF	; 223
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	82 2e       	mov	r8, r18
    2118:	91 2c       	mov	r9, r1
    211a:	a1 2c       	mov	r10, r1
    211c:	b1 2c       	mov	r11, r1
    211e:	bf 01       	movw	r22, r30
    2120:	a5 01       	movw	r20, r10
    2122:	94 01       	movw	r18, r8
    2124:	ce d6       	rcall	.+3484   	; 0x2ec2 <__udivmodsi4>
    2126:	f9 01       	movw	r30, r18
    2128:	ca 01       	movw	r24, r20
    212a:	01 50       	subi	r16, 0x01	; 1
    212c:	11 09       	sbc	r17, r1
    212e:	6a 30       	cpi	r22, 0x0A	; 10
    2130:	10 f4       	brcc	.+4      	; 0x2136 <_ZN5Print11printNumberEmh+0x58>
    2132:	60 5d       	subi	r22, 0xD0	; 208
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <_ZN5Print11printNumberEmh+0x5a>
    2136:	69 5c       	subi	r22, 0xC9	; 201
    2138:	d8 01       	movw	r26, r16
    213a:	6c 93       	st	X, r22
    213c:	23 2b       	or	r18, r19
    213e:	24 2b       	or	r18, r20
    2140:	25 2b       	or	r18, r21
    2142:	69 f7       	brne	.-38     	; 0x211e <_ZN5Print11printNumberEmh+0x40>
    2144:	b8 01       	movw	r22, r16
    2146:	c7 01       	movw	r24, r14
    2148:	8c df       	rcall	.-232    	; 0x2062 <_ZN5Print5writeEPKc>
    214a:	a1 96       	adiw	r28, 0x21	; 33
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	ff 90       	pop	r15
    2160:	ef 90       	pop	r14
    2162:	bf 90       	pop	r11
    2164:	af 90       	pop	r10
    2166:	9f 90       	pop	r9
    2168:	8f 90       	pop	r8
    216a:	08 95       	ret

0000216c <_ZN5Print5printEmi>:
    216c:	21 15       	cp	r18, r1
    216e:	31 05       	cpc	r19, r1
    2170:	41 f4       	brne	.+16     	; 0x2182 <_ZN5Print5printEmi+0x16>
    2172:	dc 01       	movw	r26, r24
    2174:	ed 91       	ld	r30, X+
    2176:	fc 91       	ld	r31, X
    2178:	01 90       	ld	r0, Z+
    217a:	f0 81       	ld	r31, Z
    217c:	e0 2d       	mov	r30, r0
    217e:	64 2f       	mov	r22, r20
    2180:	19 94       	eijmp
    2182:	ad cf       	rjmp	.-166    	; 0x20de <_ZN5Print11printNumberEmh>

00002184 <_ZN5Print5printEhi>:
    2184:	9a 01       	movw	r18, r20
    2186:	46 2f       	mov	r20, r22
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	ee cf       	rjmp	.-36     	; 0x216c <_ZN5Print5printEmi>

00002190 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
  if (base == 0) {
    21a0:	21 15       	cp	r18, r1
    21a2:	31 05       	cpc	r19, r1
    21a4:	81 f4       	brne	.+32     	; 0x21c6 <_ZN5Print5printEli+0x36>
    return write(n);
    21a6:	dc 01       	movw	r26, r24
    21a8:	ed 91       	ld	r30, X+
    21aa:	fc 91       	ld	r31, X
    21ac:	01 90       	ld	r0, Z+
    21ae:	f0 81       	ld	r31, Z
    21b0:	e0 2d       	mov	r30, r0
    21b2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	ff 90       	pop	r15
    21be:	ef 90       	pop	r14
    21c0:	df 90       	pop	r13
    21c2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    21c4:	19 94       	eijmp
  } else if (base == 10) {
    21c6:	2a 30       	cpi	r18, 0x0A	; 10
    21c8:	31 05       	cpc	r19, r1
    21ca:	f1 f4       	brne	.+60     	; 0x2208 <__stack+0x9>
    if (n < 0) {
    21cc:	77 ff       	sbrs	r23, 7
    21ce:	1b c0       	rjmp	.+54     	; 0x2206 <__stack+0x7>
    21d0:	6a 01       	movw	r12, r20
    21d2:	7b 01       	movw	r14, r22
    21d4:	ec 01       	movw	r28, r24
      int t = print('-');
    21d6:	6d e2       	ldi	r22, 0x2D	; 45
    21d8:	68 df       	rcall	.-304    	; 0x20aa <_ZN5Print5printEc>
    21da:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    21dc:	44 27       	eor	r20, r20
    21de:	55 27       	eor	r21, r21
    21e0:	ba 01       	movw	r22, r20
    21e2:	4c 19       	sub	r20, r12
    21e4:	5d 09       	sbc	r21, r13
    21e6:	6e 09       	sbc	r22, r14
    21e8:	7f 09       	sbc	r23, r15
    21ea:	2a e0       	ldi	r18, 0x0A	; 10
    21ec:	ce 01       	movw	r24, r28
    21ee:	77 df       	rcall	.-274    	; 0x20de <_ZN5Print11printNumberEmh>
    21f0:	80 0f       	add	r24, r16
    21f2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	ff 90       	pop	r15
    21fe:	ef 90       	pop	r14
    2200:	df 90       	pop	r13
    2202:	cf 90       	pop	r12
    2204:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2206:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	ff 90       	pop	r15
    2212:	ef 90       	pop	r14
    2214:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2216:	cf 90       	pop	r12
    2218:	62 cf       	rjmp	.-316    	; 0x20de <_ZN5Print11printNumberEmh>

0000221a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    221a:	9a 01       	movw	r18, r20
  return print((long) n, base);
    221c:	ab 01       	movw	r20, r22
    221e:	77 0f       	add	r23, r23
    2220:	66 0b       	sbc	r22, r22
    2222:	77 0b       	sbc	r23, r23
    2224:	b5 cf       	rjmp	.-150    	; 0x2190 <_ZN5Print5printEli>

00002226 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2230:	f4 df       	rcall	.-24     	; 0x221a <_ZN5Print5printEii>
    2232:	8c 01       	movw	r16, r24
  n += println();
    2234:	ce 01       	movw	r24, r28
    2236:	40 df       	rcall	.-384    	; 0x20b8 <_ZN5Print7printlnEv>
  return n;
}
    2238:	80 0f       	add	r24, r16
    223a:	91 1f       	adc	r25, r17
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2246:	1f 92       	push	r1
    2248:	0f 92       	push	r0
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	0f 92       	push	r0
    224e:	11 24       	eor	r1, r1
    2250:	2f 93       	push	r18
    2252:	3f 93       	push	r19
    2254:	8f 93       	push	r24
    2256:	9f 93       	push	r25
    2258:	af 93       	push	r26
    225a:	bf 93       	push	r27
    225c:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <timer0_millis>
    2260:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <timer0_millis+0x1>
    2264:	a0 91 ee 04 	lds	r26, 0x04EE	; 0x8004ee <timer0_millis+0x2>
    2268:	b0 91 ef 04 	lds	r27, 0x04EF	; 0x8004ef <timer0_millis+0x3>
    226c:	30 91 eb 04 	lds	r19, 0x04EB	; 0x8004eb <timer0_fract>
    2270:	23 e0       	ldi	r18, 0x03	; 3
    2272:	23 0f       	add	r18, r19
    2274:	2d 37       	cpi	r18, 0x7D	; 125
    2276:	20 f4       	brcc	.+8      	; 0x2280 <__vector_23+0x3a>
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	a1 1d       	adc	r26, r1
    227c:	b1 1d       	adc	r27, r1
    227e:	05 c0       	rjmp	.+10     	; 0x228a <__vector_23+0x44>
    2280:	26 e8       	ldi	r18, 0x86	; 134
    2282:	23 0f       	add	r18, r19
    2284:	02 96       	adiw	r24, 0x02	; 2
    2286:	a1 1d       	adc	r26, r1
    2288:	b1 1d       	adc	r27, r1
    228a:	20 93 eb 04 	sts	0x04EB, r18	; 0x8004eb <timer0_fract>
    228e:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <timer0_millis>
    2292:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <timer0_millis+0x1>
    2296:	a0 93 ee 04 	sts	0x04EE, r26	; 0x8004ee <timer0_millis+0x2>
    229a:	b0 93 ef 04 	sts	0x04EF, r27	; 0x8004ef <timer0_millis+0x3>
    229e:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <timer0_overflow_count>
    22a2:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <timer0_overflow_count+0x1>
    22a6:	a0 91 f2 04 	lds	r26, 0x04F2	; 0x8004f2 <timer0_overflow_count+0x2>
    22aa:	b0 91 f3 04 	lds	r27, 0x04F3	; 0x8004f3 <timer0_overflow_count+0x3>
    22ae:	01 96       	adiw	r24, 0x01	; 1
    22b0:	a1 1d       	adc	r26, r1
    22b2:	b1 1d       	adc	r27, r1
    22b4:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <timer0_overflow_count>
    22b8:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <timer0_overflow_count+0x1>
    22bc:	a0 93 f2 04 	sts	0x04F2, r26	; 0x8004f2 <timer0_overflow_count+0x2>
    22c0:	b0 93 f3 04 	sts	0x04F3, r27	; 0x8004f3 <timer0_overflow_count+0x3>
    22c4:	bf 91       	pop	r27
    22c6:	af 91       	pop	r26
    22c8:	9f 91       	pop	r25
    22ca:	8f 91       	pop	r24
    22cc:	3f 91       	pop	r19
    22ce:	2f 91       	pop	r18
    22d0:	0f 90       	pop	r0
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	0f 90       	pop	r0
    22d6:	1f 90       	pop	r1
    22d8:	18 95       	reti

000022da <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    22da:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    22dc:	f8 94       	cli
	m = timer0_overflow_count;
    22de:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <timer0_overflow_count>
    22e2:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <timer0_overflow_count+0x1>
    22e6:	a0 91 f2 04 	lds	r26, 0x04F2	; 0x8004f2 <timer0_overflow_count+0x2>
    22ea:	b0 91 f3 04 	lds	r27, 0x04F3	; 0x8004f3 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    22ee:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    22f0:	a8 9b       	sbis	0x15, 0	; 21
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <micros+0x24>
    22f4:	2f 3f       	cpi	r18, 0xFF	; 255
    22f6:	19 f0       	breq	.+6      	; 0x22fe <micros+0x24>
		m++;
    22f8:	01 96       	adiw	r24, 0x01	; 1
    22fa:	a1 1d       	adc	r26, r1
    22fc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    22fe:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2300:	ba 2f       	mov	r27, r26
    2302:	a9 2f       	mov	r26, r25
    2304:	98 2f       	mov	r25, r24
    2306:	88 27       	eor	r24, r24
    2308:	82 0f       	add	r24, r18
    230a:	91 1d       	adc	r25, r1
    230c:	a1 1d       	adc	r26, r1
    230e:	b1 1d       	adc	r27, r1
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	42 e0       	ldi	r20, 0x02	; 2
    2316:	66 0f       	add	r22, r22
    2318:	77 1f       	adc	r23, r23
    231a:	88 1f       	adc	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	4a 95       	dec	r20
    2320:	d1 f7       	brne	.-12     	; 0x2316 <micros+0x3c>
}
    2322:	08 95       	ret

00002324 <delay>:

void delay(unsigned long ms)
{
    2324:	8f 92       	push	r8
    2326:	9f 92       	push	r9
    2328:	af 92       	push	r10
    232a:	bf 92       	push	r11
    232c:	cf 92       	push	r12
    232e:	df 92       	push	r13
    2330:	ef 92       	push	r14
    2332:	ff 92       	push	r15
    2334:	6b 01       	movw	r12, r22
    2336:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2338:	d0 df       	rcall	.-96     	; 0x22da <micros>
    233a:	4b 01       	movw	r8, r22
    233c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    233e:	c1 14       	cp	r12, r1
    2340:	d1 04       	cpc	r13, r1
    2342:	e1 04       	cpc	r14, r1
    2344:	f1 04       	cpc	r15, r1
		yield();
    2346:	f1 f0       	breq	.+60     	; 0x2384 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2348:	d9 d3       	rcall	.+1970   	; 0x2afc <yield>
    234a:	c7 df       	rcall	.-114    	; 0x22da <micros>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	88 19       	sub	r24, r8
    2352:	99 09       	sbc	r25, r9
    2354:	aa 09       	sbc	r26, r10
    2356:	bb 09       	sbc	r27, r11
    2358:	88 3e       	cpi	r24, 0xE8	; 232
    235a:	93 40       	sbci	r25, 0x03	; 3
    235c:	a1 05       	cpc	r26, r1
    235e:	b1 05       	cpc	r27, r1
    2360:	70 f3       	brcs	.-36     	; 0x233e <delay+0x1a>
			ms--;
    2362:	21 e0       	ldi	r18, 0x01	; 1
    2364:	c2 1a       	sub	r12, r18
    2366:	d1 08       	sbc	r13, r1
    2368:	e1 08       	sbc	r14, r1
    236a:	f1 08       	sbc	r15, r1
			start += 1000;
    236c:	88 ee       	ldi	r24, 0xE8	; 232
    236e:	88 0e       	add	r8, r24
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	98 1e       	adc	r9, r24
    2374:	a1 1c       	adc	r10, r1
    2376:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2378:	c1 14       	cp	r12, r1
    237a:	d1 04       	cpc	r13, r1
    237c:	e1 04       	cpc	r14, r1
    237e:	f1 04       	cpc	r15, r1
    2380:	21 f7       	brne	.-56     	; 0x234a <delay+0x26>
    2382:	dd cf       	rjmp	.-70     	; 0x233e <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    2384:	ff 90       	pop	r15
    2386:	ef 90       	pop	r14
    2388:	df 90       	pop	r13
    238a:	cf 90       	pop	r12
    238c:	bf 90       	pop	r11
    238e:	af 90       	pop	r10
    2390:	9f 90       	pop	r9
    2392:	8f 90       	pop	r8
    2394:	08 95       	ret

00002396 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	91 05       	cpc	r25, r1
    239a:	38 f0       	brcs	.+14     	; 0x23aa <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    23a4:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <delayMicroseconds+0x10>
    23aa:	08 95       	ret

000023ac <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    23ac:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    23ae:	84 b5       	in	r24, 0x24	; 36
    23b0:	82 60       	ori	r24, 0x02	; 2
    23b2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    23b4:	84 b5       	in	r24, 0x24	; 36
    23b6:	81 60       	ori	r24, 0x01	; 1
    23b8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    23ba:	85 b5       	in	r24, 0x25	; 37
    23bc:	82 60       	ori	r24, 0x02	; 2
    23be:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    23c0:	85 b5       	in	r24, 0x25	; 37
    23c2:	81 60       	ori	r24, 0x01	; 1
    23c4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    23c6:	ee e6       	ldi	r30, 0x6E	; 110
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	81 60       	ori	r24, 0x01	; 1
    23ce:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    23d0:	e1 e8       	ldi	r30, 0x81	; 129
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    23d6:	80 81       	ld	r24, Z
    23d8:	82 60       	ori	r24, 0x02	; 2
    23da:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    23dc:	80 81       	ld	r24, Z
    23de:	81 60       	ori	r24, 0x01	; 1
    23e0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    23e2:	e0 e8       	ldi	r30, 0x80	; 128
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	81 60       	ori	r24, 0x01	; 1
    23ea:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    23ec:	e1 eb       	ldi	r30, 0xB1	; 177
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	84 60       	ori	r24, 0x04	; 4
    23f4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    23f6:	e0 eb       	ldi	r30, 0xB0	; 176
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	81 60       	ori	r24, 0x01	; 1
    23fe:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2400:	e1 e9       	ldi	r30, 0x91	; 145
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	82 60       	ori	r24, 0x02	; 2
    2408:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    240a:	80 81       	ld	r24, Z
    240c:	81 60       	ori	r24, 0x01	; 1
    240e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2410:	e0 e9       	ldi	r30, 0x90	; 144
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	81 60       	ori	r24, 0x01	; 1
    2418:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    241a:	e1 ea       	ldi	r30, 0xA1	; 161
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	82 60       	ori	r24, 0x02	; 2
    2422:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2424:	80 81       	ld	r24, Z
    2426:	81 60       	ori	r24, 0x01	; 1
    2428:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    242a:	e0 ea       	ldi	r30, 0xA0	; 160
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	81 60       	ori	r24, 0x01	; 1
    2432:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2434:	e1 e2       	ldi	r30, 0x21	; 33
    2436:	f1 e0       	ldi	r31, 0x01	; 1
    2438:	80 81       	ld	r24, Z
    243a:	82 60       	ori	r24, 0x02	; 2
    243c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    243e:	80 81       	ld	r24, Z
    2440:	81 60       	ori	r24, 0x01	; 1
    2442:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2444:	e0 e2       	ldi	r30, 0x20	; 32
    2446:	f1 e0       	ldi	r31, 0x01	; 1
    2448:	80 81       	ld	r24, Z
    244a:	81 60       	ori	r24, 0x01	; 1
    244c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    244e:	ea e7       	ldi	r30, 0x7A	; 122
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	84 60       	ori	r24, 0x04	; 4
    2456:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2458:	80 81       	ld	r24, Z
    245a:	82 60       	ori	r24, 0x02	; 2
    245c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    245e:	80 81       	ld	r24, Z
    2460:	81 60       	ori	r24, 0x01	; 1
    2462:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2464:	80 81       	ld	r24, Z
    2466:	80 68       	ori	r24, 0x80	; 128
    2468:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    246a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    246e:	08 95       	ret

00002470 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	fc 01       	movw	r30, r24
    2474:	31 97       	sbiw	r30, 0x01	; 1
    2476:	e2 31       	cpi	r30, 0x12	; 18
    2478:	f1 05       	cpc	r31, r1
    247a:	08 f0       	brcs	.+2      	; 0x247e <turnOffPWM+0xe>
    247c:	4d c0       	rjmp	.+154    	; 0x2518 <turnOffPWM+0xa8>
    247e:	88 27       	eor	r24, r24
    2480:	ed 54       	subi	r30, 0x4D	; 77
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	8f 4f       	sbci	r24, 0xFF	; 255
    2486:	3f c5       	rjmp	.+2686   	; 0x2f06 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2488:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    248c:	8f 77       	andi	r24, 0x7F	; 127
    248e:	03 c0       	rjmp	.+6      	; 0x2496 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2490:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2494:	8f 7d       	andi	r24, 0xDF	; 223
    2496:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    249a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    249c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    24a0:	87 7f       	andi	r24, 0xF7	; 247
    24a2:	f9 cf       	rjmp	.-14     	; 0x2496 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    24a4:	84 b5       	in	r24, 0x24	; 36
    24a6:	8f 77       	andi	r24, 0x7F	; 127
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    24aa:	84 b5       	in	r24, 0x24	; 36
    24ac:	8f 7d       	andi	r24, 0xDF	; 223
    24ae:	84 bd       	out	0x24, r24	; 36
    24b0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    24b2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    24b6:	8f 77       	andi	r24, 0x7F	; 127
    24b8:	03 c0       	rjmp	.+6      	; 0x24c0 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    24ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    24be:	8f 7d       	andi	r24, 0xDF	; 223
    24c0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    24c4:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    24c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    24ca:	8f 77       	andi	r24, 0x7F	; 127
    24cc:	07 c0       	rjmp	.+14     	; 0x24dc <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    24ce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    24d2:	8f 7d       	andi	r24, 0xDF	; 223
    24d4:	03 c0       	rjmp	.+6      	; 0x24dc <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    24d6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    24da:	87 7f       	andi	r24, 0xF7	; 247
    24dc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    24e0:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    24e2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    24e6:	8f 77       	andi	r24, 0x7F	; 127
    24e8:	07 c0       	rjmp	.+14     	; 0x24f8 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    24ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    24ee:	8f 7d       	andi	r24, 0xDF	; 223
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    24f2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    24f6:	87 7f       	andi	r24, 0xF7	; 247
    24f8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    24fc:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    24fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2502:	8f 77       	andi	r24, 0x7F	; 127
    2504:	07 c0       	rjmp	.+14     	; 0x2514 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2506:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    250a:	8f 7d       	andi	r24, 0xDF	; 223
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    250e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2512:	87 7f       	andi	r24, 0xF7	; 247
    2514:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2518:	08 95       	ret

0000251a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	fc 01       	movw	r30, r24
    2522:	e0 53       	subi	r30, 0x30	; 48
    2524:	fe 4f       	sbci	r31, 0xFE	; 254
    2526:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2528:	fc 01       	movw	r30, r24
    252a:	ea 5e       	subi	r30, 0xEA	; 234
    252c:	fd 4f       	sbci	r31, 0xFD	; 253
    252e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2530:	88 23       	and	r24, r24
    2532:	61 f1       	breq	.+88     	; 0x258c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	fc 01       	movw	r30, r24
    253c:	ea 58       	subi	r30, 0x8A	; 138
    253e:	fd 4f       	sbci	r31, 0xFD	; 253
    2540:	c5 91       	lpm	r28, Z+
    2542:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2544:	fc 01       	movw	r30, r24
    2546:	e4 5a       	subi	r30, 0xA4	; 164
    2548:	fd 4f       	sbci	r31, 0xFD	; 253
    254a:	a5 91       	lpm	r26, Z+
    254c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    254e:	61 11       	cpse	r22, r1
    2550:	09 c0       	rjmp	.+18     	; 0x2564 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2552:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2554:	f8 94       	cli
		*reg &= ~bit;
    2556:	88 81       	ld	r24, Y
    2558:	20 95       	com	r18
    255a:	82 23       	and	r24, r18
    255c:	88 83       	st	Y, r24
		*out &= ~bit;
    255e:	ec 91       	ld	r30, X
    2560:	2e 23       	and	r18, r30
    2562:	0b c0       	rjmp	.+22     	; 0x257a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2564:	62 30       	cpi	r22, 0x02	; 2
    2566:	61 f4       	brne	.+24     	; 0x2580 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2568:	9f b7       	in	r25, 0x3f	; 63
                cli();
    256a:	f8 94       	cli
		*reg &= ~bit;
    256c:	88 81       	ld	r24, Y
    256e:	32 2f       	mov	r19, r18
    2570:	30 95       	com	r19
    2572:	83 23       	and	r24, r19
    2574:	88 83       	st	Y, r24
		*out |= bit;
    2576:	ec 91       	ld	r30, X
    2578:	2e 2b       	or	r18, r30
    257a:	2c 93       	st	X, r18
		SREG = oldSREG;
    257c:	9f bf       	out	0x3f, r25	; 63
    257e:	06 c0       	rjmp	.+12     	; 0x258c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2580:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2582:	f8 94       	cli
		*reg |= bit;
    2584:	e8 81       	ld	r30, Y
    2586:	2e 2b       	or	r18, r30
    2588:	28 83       	st	Y, r18
		SREG = oldSREG;
    258a:	8f bf       	out	0x3f, r24	; 63
	}
}
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	08 95       	ret

00002592 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2592:	1f 93       	push	r17
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	f9 01       	movw	r30, r18
    259e:	e6 57       	subi	r30, 0x76	; 118
    25a0:	fe 4f       	sbci	r31, 0xFE	; 254
    25a2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    25a4:	f9 01       	movw	r30, r18
    25a6:	e0 53       	subi	r30, 0x30	; 48
    25a8:	fe 4f       	sbci	r31, 0xFE	; 254
    25aa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    25ac:	f9 01       	movw	r30, r18
    25ae:	ea 5e       	subi	r30, 0xEA	; 234
    25b0:	fd 4f       	sbci	r31, 0xFD	; 253
    25b2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    25b4:	cc 23       	and	r28, r28
    25b6:	b9 f0       	breq	.+46     	; 0x25e6 <digitalWrite+0x54>
    25b8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    25ba:	81 11       	cpse	r24, r1
    25bc:	59 df       	rcall	.-334    	; 0x2470 <turnOffPWM>

	out = portOutputRegister(port);
    25be:	ec 2f       	mov	r30, r28
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	e4 5a       	subi	r30, 0xA4	; 164
    25c8:	fd 4f       	sbci	r31, 0xFD	; 253
    25ca:	a5 91       	lpm	r26, Z+
    25cc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    25ce:	9f b7       	in	r25, 0x3f	; 63
	cli();
    25d0:	f8 94       	cli

	if (val == LOW) {
    25d2:	11 11       	cpse	r17, r1
    25d4:	04 c0       	rjmp	.+8      	; 0x25de <digitalWrite+0x4c>
		*out &= ~bit;
    25d6:	8c 91       	ld	r24, X
    25d8:	d0 95       	com	r29
    25da:	d8 23       	and	r29, r24
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <digitalWrite+0x50>
	} else {
		*out |= bit;
    25de:	ec 91       	ld	r30, X
    25e0:	de 2b       	or	r29, r30
    25e2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    25e4:	9f bf       	out	0x3f, r25	; 63
}
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	08 95       	ret

000025ee <_ZN6StringD1Ev>:
	move(rval);
}
String::String(StringSumHelper &&rval)
{
	init();
	move(rval);
    25ee:	fc 01       	movw	r30, r24
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	28 c5       	rjmp	.+2640   	; 0x3046 <free>

000025f6 <_ZN6String10invalidateEv>:
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	ec 01       	movw	r28, r24
    25fc:	88 81       	ld	r24, Y
    25fe:	99 81       	ldd	r25, Y+1	; 0x01
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	09 f0       	breq	.+2      	; 0x2606 <_ZN6String10invalidateEv+0x10>
    2604:	20 d5       	rcall	.+2624   	; 0x3046 <free>
    2606:	19 82       	std	Y+1, r1	; 0x01
    2608:	18 82       	st	Y, r1
    260a:	1d 82       	std	Y+5, r1	; 0x05
    260c:	1c 82       	std	Y+4, r1	; 0x04
    260e:	1b 82       	std	Y+3, r1	; 0x03
    2610:	1a 82       	std	Y+2, r1	; 0x02
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	08 95       	ret

00002618 <_ZN6String12changeBufferEj>:
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	ec 01       	movw	r28, r24
    2622:	8b 01       	movw	r16, r22
    2624:	6f 5f       	subi	r22, 0xFF	; 255
    2626:	7f 4f       	sbci	r23, 0xFF	; 255
    2628:	88 81       	ld	r24, Y
    262a:	99 81       	ldd	r25, Y+1	; 0x01
    262c:	95 d5       	rcall	.+2858   	; 0x3158 <realloc>
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	31 f0       	breq	.+12     	; 0x263e <_ZN6String12changeBufferEj+0x26>
    2632:	99 83       	std	Y+1, r25	; 0x01
    2634:	88 83       	st	Y, r24
    2636:	1b 83       	std	Y+3, r17	; 0x03
    2638:	0a 83       	std	Y+2, r16	; 0x02
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	01 c0       	rjmp	.+2      	; 0x2640 <_ZN6String12changeBufferEj+0x28>
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	08 95       	ret

0000264a <_ZN6String7reserveEj>:
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	ec 01       	movw	r28, r24
    2650:	88 81       	ld	r24, Y
    2652:	99 81       	ldd	r25, Y+1	; 0x01
    2654:	89 2b       	or	r24, r25
    2656:	29 f0       	breq	.+10     	; 0x2662 <_ZN6String7reserveEj+0x18>
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	9b 81       	ldd	r25, Y+3	; 0x03
    265c:	86 17       	cp	r24, r22
    265e:	97 07       	cpc	r25, r23
    2660:	58 f4       	brcc	.+22     	; 0x2678 <_ZN6String7reserveEj+0x2e>
    2662:	ce 01       	movw	r24, r28
    2664:	d9 df       	rcall	.-78     	; 0x2618 <_ZN6String12changeBufferEj>
    2666:	88 23       	and	r24, r24
    2668:	41 f0       	breq	.+16     	; 0x267a <_ZN6String7reserveEj+0x30>
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	9d 81       	ldd	r25, Y+5	; 0x05
    266e:	89 2b       	or	r24, r25
    2670:	19 f4       	brne	.+6      	; 0x2678 <_ZN6String7reserveEj+0x2e>
    2672:	e8 81       	ld	r30, Y
    2674:	f9 81       	ldd	r31, Y+1	; 0x01
    2676:	10 82       	st	Z, r1
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	08 95       	ret

00002680 <_ZN6String4copyEPKcj>:
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	ec 01       	movw	r28, r24
    268e:	7b 01       	movw	r14, r22
    2690:	8a 01       	movw	r16, r20
    2692:	ba 01       	movw	r22, r20
    2694:	da df       	rcall	.-76     	; 0x264a <_ZN6String7reserveEj>
    2696:	81 11       	cpse	r24, r1
    2698:	03 c0       	rjmp	.+6      	; 0x26a0 <_ZN6String4copyEPKcj+0x20>
    269a:	ce 01       	movw	r24, r28
    269c:	ac df       	rcall	.-168    	; 0x25f6 <_ZN6String10invalidateEv>
    269e:	06 c0       	rjmp	.+12     	; 0x26ac <_ZN6String4copyEPKcj+0x2c>
    26a0:	1d 83       	std	Y+5, r17	; 0x05
    26a2:	0c 83       	std	Y+4, r16	; 0x04
    26a4:	b7 01       	movw	r22, r14
    26a6:	88 81       	ld	r24, Y
    26a8:	99 81       	ldd	r25, Y+1	; 0x01
    26aa:	3f d6       	rcall	.+3198   	; 0x332a <strcpy>
    26ac:	ce 01       	movw	r24, r28
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	ff 90       	pop	r15
    26b8:	ef 90       	pop	r14
    26ba:	08 95       	ret

000026bc <_ZN6StringC1EPKc>:
    26bc:	fc 01       	movw	r30, r24
    26be:	11 82       	std	Z+1, r1	; 0x01
    26c0:	10 82       	st	Z, r1
    26c2:	13 82       	std	Z+3, r1	; 0x03
    26c4:	12 82       	std	Z+2, r1	; 0x02
    26c6:	15 82       	std	Z+5, r1	; 0x05
    26c8:	14 82       	std	Z+4, r1	; 0x04
    26ca:	61 15       	cp	r22, r1
    26cc:	71 05       	cpc	r23, r1
    26ce:	49 f0       	breq	.+18     	; 0x26e2 <_ZN6StringC1EPKc+0x26>
    26d0:	fb 01       	movw	r30, r22
    26d2:	01 90       	ld	r0, Z+
    26d4:	00 20       	and	r0, r0
    26d6:	e9 f7       	brne	.-6      	; 0x26d2 <_ZN6StringC1EPKc+0x16>
    26d8:	31 97       	sbiw	r30, 0x01	; 1
    26da:	af 01       	movw	r20, r30
    26dc:	46 1b       	sub	r20, r22
    26de:	57 0b       	sbc	r21, r23
    26e0:	cf cf       	rjmp	.-98     	; 0x2680 <_ZN6String4copyEPKcj>
    26e2:	08 95       	ret

000026e4 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    26e4:	cf 93       	push	r28
    26e6:	df 93       	push	r29
    26e8:	ec 01       	movw	r28, r24
    26ea:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    26ec:	86 17       	cp	r24, r22
    26ee:	97 07       	cpc	r25, r23
    26f0:	51 f0       	breq	.+20     	; 0x2706 <_ZN6StringaSERKS_+0x22>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	61 15       	cp	r22, r1
    26f8:	71 05       	cpc	r23, r1
    26fa:	21 f0       	breq	.+8      	; 0x2704 <_ZN6StringaSERKS_+0x20>
    26fc:	44 81       	ldd	r20, Z+4	; 0x04
    26fe:	55 81       	ldd	r21, Z+5	; 0x05
    2700:	bf df       	rcall	.-130    	; 0x2680 <_ZN6String4copyEPKcj>
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <_ZN6StringaSERKS_+0x22>
	else invalidate();
    2704:	78 df       	rcall	.-272    	; 0x25f6 <_ZN6String10invalidateEv>
    2706:	ce 01       	movw	r24, r28
	
	return *this;
}
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	08 95       	ret

0000270e <_ZN6StringC1ERKS_>:
    270e:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2710:	11 82       	std	Z+1, r1	; 0x01
    2712:	10 82       	st	Z, r1
	capacity = 0;
    2714:	13 82       	std	Z+3, r1	; 0x03
    2716:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2718:	15 82       	std	Z+5, r1	; 0x05
    271a:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    271c:	e3 cf       	rjmp	.-58     	; 0x26e4 <_ZN6StringaSERKS_>

0000271e <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    271e:	fc 01       	movw	r30, r24
    2720:	13 82       	std	Z+3, r1	; 0x03
    2722:	12 82       	std	Z+2, r1	; 0x02
    2724:	8d e3       	ldi	r24, 0x3D	; 61
    2726:	93 e0       	ldi	r25, 0x03	; 3
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	80 83       	st	Z, r24
    272c:	64 83       	std	Z+4, r22	; 0x04
    272e:	41 87       	std	Z+9, r20	; 0x09
    2730:	22 87       	std	Z+10, r18	; 0x0a
    2732:	13 86       	std	Z+11, r1	; 0x0b
    2734:	08 95       	ret

00002736 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	ec 01       	movw	r28, r24
    273e:	16 2f       	mov	r17, r22
    2740:	6c 81       	ldd	r22, Y+4	; 0x04
    2742:	84 ef       	ldi	r24, 0xF4	; 244
    2744:	94 e0       	ldi	r25, 0x04	; 4
    2746:	b9 d1       	rcall	.+882    	; 0x2aba <_ZN7TwoWire17beginTransmissionEh>
    2748:	6b 85       	ldd	r22, Y+11	; 0x0b
    274a:	61 2b       	or	r22, r17
    274c:	84 ef       	ldi	r24, 0xF4	; 244
    274e:	94 e0       	ldi	r25, 0x04	; 4
    2750:	67 d1       	rcall	.+718    	; 0x2a20 <_ZN7TwoWire5writeEh>
    2752:	84 ef       	ldi	r24, 0xF4	; 244
    2754:	94 e0       	ldi	r25, 0x04	; 4
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	1f 91       	pop	r17
    275c:	ca c1       	rjmp	.+916    	; 0x2af2 <_ZN7TwoWire15endTransmissionEv>

0000275e <_ZN17LiquidCrystal_I2C9backlightEv>:
    275e:	28 e0       	ldi	r18, 0x08	; 8
    2760:	fc 01       	movw	r30, r24
    2762:	23 87       	std	Z+11, r18	; 0x0b
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	e7 cf       	rjmp	.-50     	; 0x2736 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002768 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	8c 01       	movw	r16, r24
    2770:	c6 2f       	mov	r28, r22
    2772:	64 60       	ori	r22, 0x04	; 4
    2774:	e0 df       	rcall	.-64     	; 0x2736 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0d de       	rcall	.-998    	; 0x2396 <delayMicroseconds>
    277c:	6c 2f       	mov	r22, r28
    277e:	6b 7f       	andi	r22, 0xFB	; 251
    2780:	c8 01       	movw	r24, r16
    2782:	d9 df       	rcall	.-78     	; 0x2736 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2784:	82 e3       	ldi	r24, 0x32	; 50
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	03 ce       	rjmp	.-1018   	; 0x2396 <delayMicroseconds>

00002790 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	ec 01       	movw	r28, r24
    2798:	16 2f       	mov	r17, r22
    279a:	cd df       	rcall	.-102    	; 0x2736 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    279c:	61 2f       	mov	r22, r17
    279e:	ce 01       	movw	r24, r28
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	1f 91       	pop	r17
    27a6:	e0 cf       	rjmp	.-64     	; 0x2768 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000027a8 <_ZN17LiquidCrystal_I2C4sendEhh>:
    27a8:	0f 93       	push	r16
    27aa:	1f 93       	push	r17
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	8c 01       	movw	r16, r24
    27b2:	c6 2f       	mov	r28, r22
    27b4:	d4 2f       	mov	r29, r20
    27b6:	60 7f       	andi	r22, 0xF0	; 240
    27b8:	64 2b       	or	r22, r20
    27ba:	ea df       	rcall	.-44     	; 0x2790 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    27bc:	80 e1       	ldi	r24, 0x10	; 16
    27be:	c8 9f       	mul	r28, r24
    27c0:	b0 01       	movw	r22, r0
    27c2:	11 24       	eor	r1, r1
    27c4:	6d 2b       	or	r22, r29
    27c6:	c8 01       	movw	r24, r16
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	df cf       	rjmp	.-66     	; 0x2790 <_ZN17LiquidCrystal_I2C10write4bitsEh>

000027d2 <_ZN17LiquidCrystal_I2C7commandEh>:
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	e9 cf       	rjmp	.-46     	; 0x27a8 <_ZN17LiquidCrystal_I2C4sendEhh>

000027d6 <_ZN17LiquidCrystal_I2C5clearEv>:
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	fc df       	rcall	.-8      	; 0x27d2 <_ZN17LiquidCrystal_I2C7commandEh>
    27da:	80 ed       	ldi	r24, 0xD0	; 208
    27dc:	97 e0       	ldi	r25, 0x07	; 7
    27de:	db cd       	rjmp	.-1098   	; 0x2396 <delayMicroseconds>

000027e0 <_ZN17LiquidCrystal_I2C4homeEv>:
    27e0:	62 e0       	ldi	r22, 0x02	; 2
    27e2:	f7 df       	rcall	.-18     	; 0x27d2 <_ZN17LiquidCrystal_I2C7commandEh>
    27e4:	80 ed       	ldi	r24, 0xD0	; 208
    27e6:	97 e0       	ldi	r25, 0x07	; 7
    27e8:	d6 cd       	rjmp	.-1108   	; 0x2396 <delayMicroseconds>

000027ea <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	28 97       	sbiw	r28, 0x08	; 8
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	9c 01       	movw	r18, r24
    2800:	88 e0       	ldi	r24, 0x08	; 8
    2802:	e8 e0       	ldi	r30, 0x08	; 8
    2804:	f2 e0       	ldi	r31, 0x02	; 2
    2806:	de 01       	movw	r26, r28
    2808:	11 96       	adiw	r26, 0x01	; 1
    280a:	01 90       	ld	r0, Z+
    280c:	0d 92       	st	X+, r0
    280e:	8a 95       	dec	r24
    2810:	e1 f7       	brne	.-8      	; 0x280a <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2812:	f9 01       	movw	r30, r18
    2814:	80 85       	ldd	r24, Z+8	; 0x08
    2816:	84 17       	cp	r24, r20
    2818:	10 f4       	brcc	.+4      	; 0x281e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    281a:	4f ef       	ldi	r20, 0xFF	; 255
    281c:	48 0f       	add	r20, r24
    281e:	fe 01       	movw	r30, r28
    2820:	31 96       	adiw	r30, 0x01	; 1
    2822:	e4 0f       	add	r30, r20
    2824:	f1 1d       	adc	r31, r1
    2826:	e4 0f       	add	r30, r20
    2828:	f1 1d       	adc	r31, r1
    282a:	90 81       	ld	r25, Z
    282c:	69 0f       	add	r22, r25
    282e:	60 68       	ori	r22, 0x80	; 128
    2830:	c9 01       	movw	r24, r18
    2832:	28 96       	adiw	r28, 0x08	; 8
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	c7 cf       	rjmp	.-114    	; 0x27d2 <_ZN17LiquidCrystal_I2C7commandEh>

00002844 <_ZN17LiquidCrystal_I2C7displayEv>:
    2844:	fc 01       	movw	r30, r24
    2846:	66 81       	ldd	r22, Z+6	; 0x06
    2848:	26 2f       	mov	r18, r22
    284a:	24 60       	ori	r18, 0x04	; 4
    284c:	26 83       	std	Z+6, r18	; 0x06
    284e:	6c 60       	ori	r22, 0x0C	; 12
    2850:	c0 cf       	rjmp	.-128    	; 0x27d2 <_ZN17LiquidCrystal_I2C7commandEh>

00002852 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	a9 df       	rcall	.-174    	; 0x27a8 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	08 95       	ret

0000285c <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2862:	42 30       	cpi	r20, 0x02	; 2
    2864:	18 f0       	brcs	.+6      	; 0x286c <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	88 60       	ori	r24, 0x08	; 8
    286a:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    286c:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    286e:	22 23       	and	r18, r18
    2870:	29 f0       	breq	.+10     	; 0x287c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    2872:	41 30       	cpi	r20, 0x01	; 1
    2874:	19 f4       	brne	.+6      	; 0x287c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	84 60       	ori	r24, 0x04	; 4
    287a:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    287c:	62 e3       	ldi	r22, 0x32	; 50
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	4f dd       	rcall	.-1378   	; 0x2324 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	ce 01       	movw	r24, r28
    288a:	55 df       	rcall	.-342    	; 0x2736 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    288c:	68 ee       	ldi	r22, 0xE8	; 232
    288e:	73 e0       	ldi	r23, 0x03	; 3
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	47 dd       	rcall	.-1394   	; 0x2324 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2896:	60 e3       	ldi	r22, 0x30	; 48
    2898:	ce 01       	movw	r24, r28
    289a:	7a df       	rcall	.-268    	; 0x2790 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    289c:	84 e9       	ldi	r24, 0x94	; 148
    289e:	91 e1       	ldi	r25, 0x11	; 17
    28a0:	7a dd       	rcall	.-1292   	; 0x2396 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    28a2:	60 e3       	ldi	r22, 0x30	; 48
    28a4:	ce 01       	movw	r24, r28
    28a6:	74 df       	rcall	.-280    	; 0x2790 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    28a8:	84 e9       	ldi	r24, 0x94	; 148
    28aa:	91 e1       	ldi	r25, 0x11	; 17
    28ac:	74 dd       	rcall	.-1304   	; 0x2396 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    28ae:	60 e3       	ldi	r22, 0x30	; 48
    28b0:	ce 01       	movw	r24, r28
    28b2:	6e df       	rcall	.-292    	; 0x2790 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    28b4:	86 e9       	ldi	r24, 0x96	; 150
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	6e dd       	rcall	.-1316   	; 0x2396 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    28ba:	60 e2       	ldi	r22, 0x20	; 32
    28bc:	ce 01       	movw	r24, r28
    28be:	68 df       	rcall	.-304    	; 0x2790 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    28c0:	6d 81       	ldd	r22, Y+5	; 0x05
    28c2:	60 62       	ori	r22, 0x20	; 32
    28c4:	ce 01       	movw	r24, r28
    28c6:	85 df       	rcall	.-246    	; 0x27d2 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    28c8:	84 e0       	ldi	r24, 0x04	; 4
    28ca:	8e 83       	std	Y+6, r24	; 0x06
	display();
    28cc:	ce 01       	movw	r24, r28
    28ce:	ba df       	rcall	.-140    	; 0x2844 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    28d0:	ce 01       	movw	r24, r28
    28d2:	81 df       	rcall	.-254    	; 0x27d6 <_ZN17LiquidCrystal_I2C5clearEv>
    28d4:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    28d6:	8f 83       	std	Y+7, r24	; 0x07
    28d8:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    28da:	ce 01       	movw	r24, r28
    28dc:	7a df       	rcall	.-268    	; 0x27d2 <_ZN17LiquidCrystal_I2C7commandEh>
    28de:	ce 01       	movw	r24, r28
    28e0:	df 91       	pop	r29
	
	home();
    28e2:	cf 91       	pop	r28
  
}
    28e4:	7d cf       	rjmp	.-262    	; 0x27e0 <_ZN17LiquidCrystal_I2C4homeEv>

000028e6 <_ZN17LiquidCrystal_I2C9init_privEv>:
    28e6:	cf 93       	push	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    28e8:	df 93       	push	r29
    28ea:	ec 01       	movw	r28, r24
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    28ec:	84 ef       	ldi	r24, 0xF4	; 244
    28ee:	94 e0       	ldi	r25, 0x04	; 4
    28f0:	d5 d0       	rcall	.+426    	; 0x2a9c <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    28f2:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    28f8:	69 85       	ldd	r22, Y+9	; 0x09
    28fa:	ce 01       	movw	r24, r28
}
    28fc:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    28fe:	cf 91       	pop	r28
    2900:	ad cf       	rjmp	.-166    	; 0x285c <_ZN17LiquidCrystal_I2C5beginEhhh>

00002902 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2902:	f1 cf       	rjmp	.-30     	; 0x28e6 <_ZN17LiquidCrystal_I2C9init_privEv>

00002904 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2904:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	20 91 29 05 	lds	r18, 0x0529	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    290e:	82 1b       	sub	r24, r18
    2910:	91 09       	sbc	r25, r1
    2912:	08 95       	ret

00002914 <_ZN7TwoWire4readEv>:
    2914:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    2918:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    291c:	98 17       	cp	r25, r24
    291e:	50 f4       	brcc	.+20     	; 0x2934 <_ZN7TwoWire4readEv+0x20>
    2920:	e9 2f       	mov	r30, r25
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	e6 5d       	subi	r30, 0xD6	; 214
    2926:	fa 4f       	sbci	r31, 0xFA	; 250
    2928:	20 81       	ld	r18, Z
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	9f 5f       	subi	r25, 0xFF	; 255
    292e:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <_ZN7TwoWire4readEv+0x24>
    2934:	2f ef       	ldi	r18, 0xFF	; 255
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	c9 01       	movw	r24, r18
    293a:	08 95       	ret

0000293c <_ZN7TwoWire4peekEv>:
    293c:	e0 91 29 05 	lds	r30, 0x0529	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    2940:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    2944:	e8 17       	cp	r30, r24
    2946:	30 f4       	brcc	.+12     	; 0x2954 <_ZN7TwoWire4peekEv+0x18>
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	e6 5d       	subi	r30, 0xD6	; 214
    294c:	fa 4f       	sbci	r31, 0xFA	; 250
    294e:	80 81       	ld	r24, Z
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	08 95       	ret
    2954:	8f ef       	ldi	r24, 0xFF	; 255
    2956:	9f ef       	ldi	r25, 0xFF	; 255
    2958:	08 95       	ret

0000295a <_ZN7TwoWire5flushEv>:
    295a:	08 95       	ret

0000295c <_ZN7TwoWire16onReceiveServiceEPhi>:
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	ec 01       	movw	r28, r24
    2962:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <_ZN7TwoWire14user_onReceiveE>
    2966:	f0 91 01 05 	lds	r31, 0x0501	; 0x800501 <_ZN7TwoWire14user_onReceiveE+0x1>
    296a:	30 97       	sbiw	r30, 0x00	; 0
    296c:	f1 f0       	breq	.+60     	; 0x29aa <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    296e:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    2972:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    2976:	98 17       	cp	r25, r24
    2978:	c0 f0       	brcs	.+48     	; 0x29aa <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	29 2f       	mov	r18, r25
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	26 17       	cp	r18, r22
    2982:	37 07       	cpc	r19, r23
    2984:	54 f4       	brge	.+20     	; 0x299a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2986:	de 01       	movw	r26, r28
    2988:	a2 0f       	add	r26, r18
    298a:	b3 1f       	adc	r27, r19
    298c:	4c 91       	ld	r20, X
    298e:	d9 01       	movw	r26, r18
    2990:	a6 5d       	subi	r26, 0xD6	; 214
    2992:	ba 4f       	sbci	r27, 0xFA	; 250
    2994:	4c 93       	st	X, r20
    2996:	9f 5f       	subi	r25, 0xFF	; 255
    2998:	f1 cf       	rjmp	.-30     	; 0x297c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    299a:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    299e:	60 93 28 05 	sts	0x0528, r22	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    29a2:	cb 01       	movw	r24, r22
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	19 94       	eijmp
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	08 95       	ret

000029b0 <_ZN7TwoWire16onRequestServiceEv>:
    29b0:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <_ZN7TwoWire14user_onRequestE>
    29b4:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <_ZN7TwoWire14user_onRequestE+0x1>
    29b8:	30 97       	sbiw	r30, 0x00	; 0
    29ba:	29 f0       	breq	.+10     	; 0x29c6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    29bc:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    29c0:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    29c4:	19 94       	eijmp
    29c6:	08 95       	ret

000029c8 <_ZN7TwoWire5writeEPKhj>:
    29c8:	cf 92       	push	r12
    29ca:	df 92       	push	r13
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	7c 01       	movw	r14, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	8a 01       	movw	r16, r20
    29de:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <_ZN7TwoWire12transmittingE>
    29e2:	22 23       	and	r18, r18
    29e4:	89 f0       	breq	.+34     	; 0x2a08 <_ZN7TwoWire5writeEPKhj+0x40>
    29e6:	eb 01       	movw	r28, r22
    29e8:	6b 01       	movw	r12, r22
    29ea:	c4 0e       	add	r12, r20
    29ec:	d5 1e       	adc	r13, r21
    29ee:	cc 15       	cp	r28, r12
    29f0:	dd 05       	cpc	r29, r13
    29f2:	61 f0       	breq	.+24     	; 0x2a0c <_ZN7TwoWire5writeEPKhj+0x44>
    29f4:	69 91       	ld	r22, Y+
    29f6:	d7 01       	movw	r26, r14
    29f8:	ed 91       	ld	r30, X+
    29fa:	fc 91       	ld	r31, X
    29fc:	01 90       	ld	r0, Z+
    29fe:	f0 81       	ld	r31, Z
    2a00:	e0 2d       	mov	r30, r0
    2a02:	c7 01       	movw	r24, r14
    2a04:	19 95       	eicall
    2a06:	f3 cf       	rjmp	.-26     	; 0x29ee <_ZN7TwoWire5writeEPKhj+0x26>
    2a08:	64 2f       	mov	r22, r20
    2a0a:	eb d0       	rcall	.+470    	; 0x2be2 <twi_transmit>
    2a0c:	c8 01       	movw	r24, r16
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	ff 90       	pop	r15
    2a18:	ef 90       	pop	r14
    2a1a:	df 90       	pop	r13
    2a1c:	cf 90       	pop	r12
    2a1e:	08 95       	ret

00002a20 <_ZN7TwoWire5writeEh>:
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	1f 92       	push	r1
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	69 83       	std	Y+1, r22	; 0x01
    2a2c:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <_ZN7TwoWire12transmittingE>
    2a30:	22 23       	and	r18, r18
    2a32:	d1 f0       	breq	.+52     	; 0x2a68 <_ZN7TwoWire5writeEh+0x48>
    2a34:	20 91 05 05 	lds	r18, 0x0505	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    2a38:	20 32       	cpi	r18, 0x20	; 32
    2a3a:	40 f0       	brcs	.+16     	; 0x2a4c <_ZN7TwoWire5writeEh+0x2c>
    2a3c:	21 e0       	ldi	r18, 0x01	; 1
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	fc 01       	movw	r30, r24
    2a42:	33 83       	std	Z+3, r19	; 0x03
    2a44:	22 83       	std	Z+2, r18	; 0x02
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	14 c0       	rjmp	.+40     	; 0x2a74 <_ZN7TwoWire5writeEh+0x54>
    2a4c:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    2a50:	e8 2f       	mov	r30, r24
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	e9 5f       	subi	r30, 0xF9	; 249
    2a56:	fa 4f       	sbci	r31, 0xFA	; 250
    2a58:	99 81       	ldd	r25, Y+1	; 0x01
    2a5a:	90 83       	st	Z, r25
    2a5c:	8f 5f       	subi	r24, 0xFF	; 255
    2a5e:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    2a62:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    2a66:	04 c0       	rjmp	.+8      	; 0x2a70 <_ZN7TwoWire5writeEh+0x50>
    2a68:	61 e0       	ldi	r22, 0x01	; 1
    2a6a:	ce 01       	movw	r24, r28
    2a6c:	01 96       	adiw	r24, 0x01	; 1
    2a6e:	b9 d0       	rcall	.+370    	; 0x2be2 <twi_transmit>
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	0f 90       	pop	r0
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	08 95       	ret

00002a7c <_ZN7TwoWireC1Ev>:
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	13 82       	std	Z+3, r1	; 0x03
    2a80:	12 82       	std	Z+2, r1	; 0x02
    2a82:	88 ee       	ldi	r24, 0xE8	; 232
    2a84:	93 e0       	ldi	r25, 0x03	; 3
    2a86:	a0 e0       	ldi	r26, 0x00	; 0
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	84 83       	std	Z+4, r24	; 0x04
    2a8c:	95 83       	std	Z+5, r25	; 0x05
    2a8e:	a6 83       	std	Z+6, r26	; 0x06
    2a90:	b7 83       	std	Z+7, r27	; 0x07
    2a92:	89 e4       	ldi	r24, 0x49	; 73
    2a94:	93 e0       	ldi	r25, 0x03	; 3
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	80 83       	st	Z, r24
    2a9a:	08 95       	ret

00002a9c <_ZN7TwoWire5beginEv>:
    2a9c:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    2aa0:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    2aa4:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    2aa8:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    2aac:	28 d0       	rcall	.+80     	; 0x2afe <twi_init>
    2aae:	88 ed       	ldi	r24, 0xD8	; 216
    2ab0:	94 e1       	ldi	r25, 0x14	; 20
    2ab2:	c4 d0       	rcall	.+392    	; 0x2c3c <twi_attachSlaveTxEvent>
    2ab4:	8e ea       	ldi	r24, 0xAE	; 174
    2ab6:	94 e1       	ldi	r25, 0x14	; 20
    2ab8:	bc c0       	rjmp	.+376    	; 0x2c32 <twi_attachSlaveRxEvent>

00002aba <_ZN7TwoWire17beginTransmissionEh>:
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZN7TwoWire12transmittingE>
    2ac0:	60 93 27 05 	sts	0x0527, r22	; 0x800527 <_ZN7TwoWire9txAddressE>
    2ac4:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    2ac8:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    2acc:	08 95       	ret

00002ace <_ZN7TwoWire15endTransmissionEh>:
    2ace:	0f 93       	push	r16
    2ad0:	06 2f       	mov	r16, r22
    2ad2:	21 e0       	ldi	r18, 0x01	; 1
    2ad4:	40 91 05 05 	lds	r20, 0x0505	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    2ad8:	67 e0       	ldi	r22, 0x07	; 7
    2ada:	75 e0       	ldi	r23, 0x05	; 5
    2adc:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <_ZN7TwoWire9txAddressE>
    2ae0:	2a d0       	rcall	.+84     	; 0x2b36 <twi_writeTo>
    2ae2:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    2ae6:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    2aea:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZN7TwoWire12transmittingE>
    2aee:	0f 91       	pop	r16
    2af0:	08 95       	ret

00002af2 <_ZN7TwoWire15endTransmissionEv>:
    2af2:	61 e0       	ldi	r22, 0x01	; 1
    2af4:	ec cf       	rjmp	.-40     	; 0x2ace <_ZN7TwoWire15endTransmissionEh>

00002af6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2af6:	84 ef       	ldi	r24, 0xF4	; 244
    2af8:	94 e0       	ldi	r25, 0x04	; 4
    2afa:	c0 cf       	rjmp	.-128    	; 0x2a7c <_ZN7TwoWireC1Ev>

00002afc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2afc:	08 95       	ret

00002afe <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2afe:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <twi_state>
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <twi_sendStop>
    2b08:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <twi_inRepStart>
    2b0c:	61 e0       	ldi	r22, 0x01	; 1
    2b0e:	84 e1       	ldi	r24, 0x14	; 20
    2b10:	40 dd       	rcall	.-1408   	; 0x2592 <digitalWrite>
    2b12:	61 e0       	ldi	r22, 0x01	; 1
    2b14:	85 e1       	ldi	r24, 0x15	; 21
    2b16:	3d dd       	rcall	.-1414   	; 0x2592 <digitalWrite>
    2b18:	e9 eb       	ldi	r30, 0xB9	; 185
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	8e 7f       	andi	r24, 0xFE	; 254
    2b20:	80 83       	st	Z, r24
    2b22:	80 81       	ld	r24, Z
    2b24:	8d 7f       	andi	r24, 0xFD	; 253
    2b26:	80 83       	st	Z, r24
    2b28:	88 e4       	ldi	r24, 0x48	; 72
    2b2a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2b2e:	85 e4       	ldi	r24, 0x45	; 69
    2b30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b34:	08 95       	ret

00002b36 <twi_writeTo>:
    2b36:	0f 93       	push	r16
    2b38:	41 32       	cpi	r20, 0x21	; 33
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <twi_writeTo+0x8>
    2b3c:	4a c0       	rjmp	.+148    	; 0x2bd2 <twi_writeTo+0x9c>
    2b3e:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <twi_state>
    2b42:	91 11       	cpse	r25, r1
    2b44:	fc cf       	rjmp	.-8      	; 0x2b3e <twi_writeTo+0x8>
    2b46:	32 e0       	ldi	r19, 0x02	; 2
    2b48:	30 93 b7 05 	sts	0x05B7, r19	; 0x8005b7 <twi_state>
    2b4c:	00 93 b5 05 	sts	0x05B5, r16	; 0x8005b5 <twi_sendStop>
    2b50:	3f ef       	ldi	r19, 0xFF	; 255
    2b52:	30 93 4a 05 	sts	0x054A, r19	; 0x80054a <twi_error>
    2b56:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_masterBufferIndex>
    2b5a:	40 93 8e 05 	sts	0x058E, r20	; 0x80058e <twi_masterBufferLength>
    2b5e:	56 2f       	mov	r21, r22
    2b60:	a0 e9       	ldi	r26, 0x90	; 144
    2b62:	b5 e0       	ldi	r27, 0x05	; 5
    2b64:	fb 01       	movw	r30, r22
    2b66:	3e 2f       	mov	r19, r30
    2b68:	35 1b       	sub	r19, r21
    2b6a:	34 17       	cp	r19, r20
    2b6c:	18 f4       	brcc	.+6      	; 0x2b74 <twi_writeTo+0x3e>
    2b6e:	31 91       	ld	r19, Z+
    2b70:	3d 93       	st	X+, r19
    2b72:	f9 cf       	rjmp	.-14     	; 0x2b66 <twi_writeTo+0x30>
    2b74:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <twi_slarw>
    2b78:	30 91 b6 05 	lds	r19, 0x05B6	; 0x8005b6 <twi_slarw>
    2b7c:	88 0f       	add	r24, r24
    2b7e:	83 2b       	or	r24, r19
    2b80:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <twi_slarw>
    2b84:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <twi_inRepStart>
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	61 f4       	brne	.+24     	; 0x2ba4 <twi_writeTo+0x6e>
    2b8c:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <twi_inRepStart>
    2b90:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <twi_slarw>
    2b94:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2b98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b9c:	83 fd       	sbrc	r24, 3
    2b9e:	f8 cf       	rjmp	.-16     	; 0x2b90 <twi_writeTo+0x5a>
    2ba0:	85 ec       	ldi	r24, 0xC5	; 197
    2ba2:	01 c0       	rjmp	.+2      	; 0x2ba6 <twi_writeTo+0x70>
    2ba4:	85 ee       	ldi	r24, 0xE5	; 229
    2ba6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2baa:	22 23       	and	r18, r18
    2bac:	21 f0       	breq	.+8      	; 0x2bb6 <twi_writeTo+0x80>
    2bae:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <twi_state>
    2bb2:	82 30       	cpi	r24, 0x02	; 2
    2bb4:	d1 f3       	breq	.-12     	; 0x2baa <twi_writeTo+0x74>
    2bb6:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <twi_error>
    2bba:	8f 3f       	cpi	r24, 0xFF	; 255
    2bbc:	79 f0       	breq	.+30     	; 0x2bdc <twi_writeTo+0xa6>
    2bbe:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <twi_error>
    2bc2:	80 32       	cpi	r24, 0x20	; 32
    2bc4:	41 f0       	breq	.+16     	; 0x2bd6 <twi_writeTo+0xa0>
    2bc6:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <twi_error>
    2bca:	80 33       	cpi	r24, 0x30	; 48
    2bcc:	31 f0       	breq	.+12     	; 0x2bda <twi_writeTo+0xa4>
    2bce:	94 e0       	ldi	r25, 0x04	; 4
    2bd0:	05 c0       	rjmp	.+10     	; 0x2bdc <twi_writeTo+0xa6>
    2bd2:	91 e0       	ldi	r25, 0x01	; 1
    2bd4:	03 c0       	rjmp	.+6      	; 0x2bdc <twi_writeTo+0xa6>
    2bd6:	92 e0       	ldi	r25, 0x02	; 2
    2bd8:	01 c0       	rjmp	.+2      	; 0x2bdc <twi_writeTo+0xa6>
    2bda:	93 e0       	ldi	r25, 0x03	; 3
    2bdc:	89 2f       	mov	r24, r25
    2bde:	0f 91       	pop	r16
    2be0:	08 95       	ret

00002be2 <twi_transmit>:
    2be2:	40 91 6c 05 	lds	r20, 0x056C	; 0x80056c <twi_txBufferLength>
    2be6:	26 2f       	mov	r18, r22
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	24 0f       	add	r18, r20
    2bec:	31 1d       	adc	r19, r1
    2bee:	21 32       	cpi	r18, 0x21	; 33
    2bf0:	31 05       	cpc	r19, r1
    2bf2:	dc f4       	brge	.+54     	; 0x2c2a <twi_transmit+0x48>
    2bf4:	20 91 b7 05 	lds	r18, 0x05B7	; 0x8005b7 <twi_state>
    2bf8:	24 30       	cpi	r18, 0x04	; 4
    2bfa:	c9 f4       	brne	.+50     	; 0x2c2e <twi_transmit+0x4c>
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	86 17       	cp	r24, r22
    2c04:	58 f4       	brcc	.+22     	; 0x2c1c <twi_transmit+0x3a>
    2c06:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <twi_txBufferLength>
    2c0a:	21 91       	ld	r18, Z+
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	a2 59       	subi	r26, 0x92	; 146
    2c10:	ba 4f       	sbci	r27, 0xFA	; 250
    2c12:	a3 0f       	add	r26, r19
    2c14:	b1 1d       	adc	r27, r1
    2c16:	2c 93       	st	X, r18
    2c18:	01 96       	adiw	r24, 0x01	; 1
    2c1a:	f3 cf       	rjmp	.-26     	; 0x2c02 <twi_transmit+0x20>
    2c1c:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <twi_txBufferLength>
    2c20:	68 0f       	add	r22, r24
    2c22:	60 93 6c 05 	sts	0x056C, r22	; 0x80056c <twi_txBufferLength>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	08 95       	ret
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	08 95       	ret
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	08 95       	ret

00002c32 <twi_attachSlaveRxEvent>:
    2c32:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <twi_onSlaveReceive+0x1>
    2c36:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <twi_onSlaveReceive>
    2c3a:	08 95       	ret

00002c3c <twi_attachSlaveTxEvent>:
    2c3c:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <twi_onSlaveTransmit+0x1>
    2c40:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <twi_onSlaveTransmit>
    2c44:	08 95       	ret

00002c46 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2c46:	85 ed       	ldi	r24, 0xD5	; 213
    2c48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2c4c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2c50:	84 fd       	sbrc	r24, 4
    2c52:	fc cf       	rjmp	.-8      	; 0x2c4c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2c54:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <twi_state>
    2c58:	08 95       	ret

00002c5a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2c5a:	85 ec       	ldi	r24, 0xC5	; 197
    2c5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2c60:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <twi_state>
    2c64:	08 95       	ret

00002c66 <__vector_39>:
}

ISR(TWI_vect)
{
    2c66:	1f 92       	push	r1
    2c68:	0f 92       	push	r0
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	0f 92       	push	r0
    2c6e:	11 24       	eor	r1, r1
    2c70:	0b b6       	in	r0, 0x3b	; 59
    2c72:	0f 92       	push	r0
    2c74:	2f 93       	push	r18
    2c76:	3f 93       	push	r19
    2c78:	4f 93       	push	r20
    2c7a:	5f 93       	push	r21
    2c7c:	6f 93       	push	r22
    2c7e:	7f 93       	push	r23
    2c80:	8f 93       	push	r24
    2c82:	9f 93       	push	r25
    2c84:	af 93       	push	r26
    2c86:	bf 93       	push	r27
    2c88:	ef 93       	push	r30
    2c8a:	ff 93       	push	r31
  switch(TW_STATUS){
    2c8c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2c90:	88 7f       	andi	r24, 0xF8	; 248
    2c92:	80 36       	cpi	r24, 0x60	; 96
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <__vector_39+0x32>
    2c96:	9d c0       	rjmp	.+314    	; 0x2dd2 <__vector_39+0x16c>
    2c98:	70 f5       	brcc	.+92     	; 0x2cf6 <__vector_39+0x90>
    2c9a:	88 32       	cpi	r24, 0x28	; 40
    2c9c:	09 f4       	brne	.+2      	; 0x2ca0 <__vector_39+0x3a>
    2c9e:	5c c0       	rjmp	.+184    	; 0x2d58 <__vector_39+0xf2>
    2ca0:	90 f4       	brcc	.+36     	; 0x2cc6 <__vector_39+0x60>
    2ca2:	80 31       	cpi	r24, 0x10	; 16
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <__vector_39+0x42>
    2ca6:	55 c0       	rjmp	.+170    	; 0x2d52 <__vector_39+0xec>
    2ca8:	38 f4       	brcc	.+14     	; 0x2cb8 <__vector_39+0x52>
    2caa:	88 23       	and	r24, r24
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <__vector_39+0x4a>
    2cae:	f3 c0       	rjmp	.+486    	; 0x2e96 <__vector_39+0x230>
    2cb0:	88 30       	cpi	r24, 0x08	; 8
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <__vector_39+0x50>
    2cb4:	4e c0       	rjmp	.+156    	; 0x2d52 <__vector_39+0xec>
    2cb6:	f2 c0       	rjmp	.+484    	; 0x2e9c <__vector_39+0x236>
    2cb8:	88 31       	cpi	r24, 0x18	; 24
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <__vector_39+0x58>
    2cbc:	4d c0       	rjmp	.+154    	; 0x2d58 <__vector_39+0xf2>
    2cbe:	80 32       	cpi	r24, 0x20	; 32
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <__vector_39+0x5e>
    2cc2:	5e c0       	rjmp	.+188    	; 0x2d80 <__vector_39+0x11a>
    2cc4:	eb c0       	rjmp	.+470    	; 0x2e9c <__vector_39+0x236>
    2cc6:	80 34       	cpi	r24, 0x40	; 64
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <__vector_39+0x66>
    2cca:	69 c0       	rjmp	.+210    	; 0x2d9e <__vector_39+0x138>
    2ccc:	50 f4       	brcc	.+20     	; 0x2ce2 <__vector_39+0x7c>
    2cce:	80 33       	cpi	r24, 0x30	; 48
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <__vector_39+0x6e>
    2cd2:	56 c0       	rjmp	.+172    	; 0x2d80 <__vector_39+0x11a>
    2cd4:	88 33       	cpi	r24, 0x38	; 56
    2cd6:	09 f0       	breq	.+2      	; 0x2cda <__vector_39+0x74>
    2cd8:	e1 c0       	rjmp	.+450    	; 0x2e9c <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2cda:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_error>
      twi_releaseBus();
    2cde:	bd df       	rcall	.-134    	; 0x2c5a <twi_releaseBus>
      break;
    2ce0:	dd c0       	rjmp	.+442    	; 0x2e9c <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2ce2:	80 35       	cpi	r24, 0x50	; 80
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <__vector_39+0x82>
    2ce6:	4f c0       	rjmp	.+158    	; 0x2d86 <__vector_39+0x120>
    2ce8:	88 35       	cpi	r24, 0x58	; 88
    2cea:	09 f4       	brne	.+2      	; 0x2cee <__vector_39+0x88>
    2cec:	5d c0       	rjmp	.+186    	; 0x2da8 <__vector_39+0x142>
    2cee:	88 34       	cpi	r24, 0x48	; 72
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <__vector_39+0x8e>
    2cf2:	d4 c0       	rjmp	.+424    	; 0x2e9c <__vector_39+0x236>
    2cf4:	d2 c0       	rjmp	.+420    	; 0x2e9a <__vector_39+0x234>
    2cf6:	88 39       	cpi	r24, 0x98	; 152
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <__vector_39+0x96>
    2cfa:	c3 c0       	rjmp	.+390    	; 0x2e82 <__vector_39+0x21c>
    2cfc:	a8 f4       	brcc	.+42     	; 0x2d28 <__vector_39+0xc2>
    2cfe:	88 37       	cpi	r24, 0x78	; 120
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <__vector_39+0x9e>
    2d02:	67 c0       	rjmp	.+206    	; 0x2dd2 <__vector_39+0x16c>
    2d04:	38 f4       	brcc	.+14     	; 0x2d14 <__vector_39+0xae>
    2d06:	88 36       	cpi	r24, 0x68	; 104
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <__vector_39+0xa6>
    2d0a:	63 c0       	rjmp	.+198    	; 0x2dd2 <__vector_39+0x16c>
    2d0c:	80 37       	cpi	r24, 0x70	; 112
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <__vector_39+0xac>
    2d10:	60 c0       	rjmp	.+192    	; 0x2dd2 <__vector_39+0x16c>
    2d12:	c4 c0       	rjmp	.+392    	; 0x2e9c <__vector_39+0x236>
    2d14:	88 38       	cpi	r24, 0x88	; 136
    2d16:	09 f4       	brne	.+2      	; 0x2d1a <__vector_39+0xb4>
    2d18:	b4 c0       	rjmp	.+360    	; 0x2e82 <__vector_39+0x21c>
    2d1a:	80 39       	cpi	r24, 0x90	; 144
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <__vector_39+0xba>
    2d1e:	5f c0       	rjmp	.+190    	; 0x2dde <__vector_39+0x178>
    2d20:	80 38       	cpi	r24, 0x80	; 128
    2d22:	09 f0       	breq	.+2      	; 0x2d26 <__vector_39+0xc0>
    2d24:	bb c0       	rjmp	.+374    	; 0x2e9c <__vector_39+0x236>
    2d26:	5b c0       	rjmp	.+182    	; 0x2dde <__vector_39+0x178>
    2d28:	80 3b       	cpi	r24, 0xB0	; 176
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <__vector_39+0xc8>
    2d2c:	82 c0       	rjmp	.+260    	; 0x2e32 <__vector_39+0x1cc>
    2d2e:	38 f4       	brcc	.+14     	; 0x2d3e <__vector_39+0xd8>
    2d30:	80 3a       	cpi	r24, 0xA0	; 160
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <__vector_39+0xd0>
    2d34:	66 c0       	rjmp	.+204    	; 0x2e02 <__vector_39+0x19c>
    2d36:	88 3a       	cpi	r24, 0xA8	; 168
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <__vector_39+0xd6>
    2d3a:	7b c0       	rjmp	.+246    	; 0x2e32 <__vector_39+0x1cc>
    2d3c:	af c0       	rjmp	.+350    	; 0x2e9c <__vector_39+0x236>
    2d3e:	80 3c       	cpi	r24, 0xC0	; 192
    2d40:	09 f4       	brne	.+2      	; 0x2d44 <__vector_39+0xde>
    2d42:	a3 c0       	rjmp	.+326    	; 0x2e8a <__vector_39+0x224>
    2d44:	88 3c       	cpi	r24, 0xC8	; 200
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <__vector_39+0xe4>
    2d48:	a0 c0       	rjmp	.+320    	; 0x2e8a <__vector_39+0x224>
    2d4a:	88 3b       	cpi	r24, 0xB8	; 184
    2d4c:	09 f4       	brne	.+2      	; 0x2d50 <__vector_39+0xea>
    2d4e:	86 c0       	rjmp	.+268    	; 0x2e5c <__vector_39+0x1f6>
    2d50:	a5 c0       	rjmp	.+330    	; 0x2e9c <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2d52:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <twi_slarw>
    2d56:	10 c0       	rjmp	.+32     	; 0x2d78 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2d58:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2d5c:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_masterBufferLength>
    2d60:	98 17       	cp	r25, r24
    2d62:	70 f5       	brcc	.+92     	; 0x2dc0 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2d64:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	8e 0f       	add	r24, r30
    2d6c:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_masterBufferIndex>
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	e0 57       	subi	r30, 0x70	; 112
    2d74:	fa 4f       	sbci	r31, 0xFA	; 250
    2d76:	80 81       	ld	r24, Z
    2d78:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d7c:	85 ec       	ldi	r24, 0xC5	; 197
    2d7e:	82 c0       	rjmp	.+260    	; 0x2e84 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2d80:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_error>
    2d84:	8a c0       	rjmp	.+276    	; 0x2e9a <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d86:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	8e 0f       	add	r24, r30
    2d8e:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_masterBufferIndex>
    2d92:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	e0 57       	subi	r30, 0x70	; 112
    2d9a:	fa 4f       	sbci	r31, 0xFA	; 250
    2d9c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2d9e:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2da2:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_masterBufferLength>
    2da6:	6a c0       	rjmp	.+212    	; 0x2e7c <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2da8:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	8e 0f       	add	r24, r30
    2db0:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_masterBufferIndex>
    2db4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	e0 57       	subi	r30, 0x70	; 112
    2dbc:	fa 4f       	sbci	r31, 0xFA	; 250
    2dbe:	80 83       	st	Z, r24
	if (twi_sendStop)
    2dc0:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <twi_sendStop>
    2dc4:	81 11       	cpse	r24, r1
    2dc6:	69 c0       	rjmp	.+210    	; 0x2e9a <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2dce:	84 ea       	ldi	r24, 0xA4	; 164
    2dd0:	5d c0       	rjmp	.+186    	; 0x2e8c <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2dd2:	83 e0       	ldi	r24, 0x03	; 3
    2dd4:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2dd8:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <twi_rxBufferIndex>
    2ddc:	cf cf       	rjmp	.-98     	; 0x2d7c <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2dde:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <twi_rxBufferIndex>
    2de2:	80 32       	cpi	r24, 0x20	; 32
    2de4:	08 f0       	brcs	.+2      	; 0x2de8 <__vector_39+0x182>
    2de6:	4d c0       	rjmp	.+154    	; 0x2e82 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2de8:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <twi_rxBufferIndex>
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	8e 0f       	add	r24, r30
    2df0:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <twi_rxBufferIndex>
    2df4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	e4 5b       	subi	r30, 0xB4	; 180
    2dfc:	fa 4f       	sbci	r31, 0xFA	; 250
    2dfe:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2e00:	bd cf       	rjmp	.-134    	; 0x2d7c <__vector_39+0x116>
    2e02:	2b df       	rcall	.-426    	; 0x2c5a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e04:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <twi_rxBufferIndex>
    2e08:	80 32       	cpi	r24, 0x20	; 32
    2e0a:	30 f4       	brcc	.+12     	; 0x2e18 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2e0c:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <twi_rxBufferIndex>
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	e4 5b       	subi	r30, 0xB4	; 180
    2e14:	fa 4f       	sbci	r31, 0xFA	; 250
    2e16:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2e18:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <twi_rxBufferIndex>
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	e0 91 b0 05 	lds	r30, 0x05B0	; 0x8005b0 <twi_onSlaveReceive>
    2e22:	f0 91 b1 05 	lds	r31, 0x05B1	; 0x8005b1 <twi_onSlaveReceive+0x1>
    2e26:	8c e4       	ldi	r24, 0x4C	; 76
    2e28:	95 e0       	ldi	r25, 0x05	; 5
    2e2a:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2e2c:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <twi_rxBufferIndex>
      break;
    2e30:	35 c0       	rjmp	.+106    	; 0x2e9c <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2e32:	84 e0       	ldi	r24, 0x04	; 4
    2e34:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2e38:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2e3c:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2e40:	e0 91 b2 05 	lds	r30, 0x05B2	; 0x8005b2 <twi_onSlaveTransmit>
    2e44:	f0 91 b3 05 	lds	r31, 0x05B3	; 0x8005b3 <twi_onSlaveTransmit+0x1>
    2e48:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2e4a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <twi_txBufferLength>
    2e4e:	81 11       	cpse	r24, r1
    2e50:	05 c0       	rjmp	.+10     	; 0x2e5c <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2e58:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2e5c:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <twi_txBufferIndex>
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	8e 0f       	add	r24, r30
    2e64:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_txBufferIndex>
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	e2 59       	subi	r30, 0x92	; 146
    2e6c:	fa 4f       	sbci	r31, 0xFA	; 250
    2e6e:	80 81       	ld	r24, Z
    2e70:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2e74:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <twi_txBufferIndex>
    2e78:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <twi_txBufferLength>
    2e7c:	98 17       	cp	r25, r24
    2e7e:	08 f4       	brcc	.+2      	; 0x2e82 <__vector_39+0x21c>
    2e80:	7d cf       	rjmp	.-262    	; 0x2d7c <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2e82:	85 e8       	ldi	r24, 0x85	; 133
    2e84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e88:	09 c0       	rjmp	.+18     	; 0x2e9c <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2e8a:	85 ec       	ldi	r24, 0xC5	; 197
    2e8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2e90:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <twi_state>
      break;
    2e94:	03 c0       	rjmp	.+6      	; 0x2e9c <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2e96:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <twi_error>
      twi_stop();
    2e9a:	d5 de       	rcall	.-598    	; 0x2c46 <twi_stop>
      break;
  }
}
    2e9c:	ff 91       	pop	r31
    2e9e:	ef 91       	pop	r30
    2ea0:	bf 91       	pop	r27
    2ea2:	af 91       	pop	r26
    2ea4:	9f 91       	pop	r25
    2ea6:	8f 91       	pop	r24
    2ea8:	7f 91       	pop	r23
    2eaa:	6f 91       	pop	r22
    2eac:	5f 91       	pop	r21
    2eae:	4f 91       	pop	r20
    2eb0:	3f 91       	pop	r19
    2eb2:	2f 91       	pop	r18
    2eb4:	0f 90       	pop	r0
    2eb6:	0b be       	out	0x3b, r0	; 59
    2eb8:	0f 90       	pop	r0
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	0f 90       	pop	r0
    2ebe:	1f 90       	pop	r1
    2ec0:	18 95       	reti

00002ec2 <__udivmodsi4>:
    2ec2:	a1 e2       	ldi	r26, 0x21	; 33
    2ec4:	1a 2e       	mov	r1, r26
    2ec6:	aa 1b       	sub	r26, r26
    2ec8:	bb 1b       	sub	r27, r27
    2eca:	fd 01       	movw	r30, r26
    2ecc:	0d c0       	rjmp	.+26     	; 0x2ee8 <__udivmodsi4_ep>

00002ece <__udivmodsi4_loop>:
    2ece:	aa 1f       	adc	r26, r26
    2ed0:	bb 1f       	adc	r27, r27
    2ed2:	ee 1f       	adc	r30, r30
    2ed4:	ff 1f       	adc	r31, r31
    2ed6:	a2 17       	cp	r26, r18
    2ed8:	b3 07       	cpc	r27, r19
    2eda:	e4 07       	cpc	r30, r20
    2edc:	f5 07       	cpc	r31, r21
    2ede:	20 f0       	brcs	.+8      	; 0x2ee8 <__udivmodsi4_ep>
    2ee0:	a2 1b       	sub	r26, r18
    2ee2:	b3 0b       	sbc	r27, r19
    2ee4:	e4 0b       	sbc	r30, r20
    2ee6:	f5 0b       	sbc	r31, r21

00002ee8 <__udivmodsi4_ep>:
    2ee8:	66 1f       	adc	r22, r22
    2eea:	77 1f       	adc	r23, r23
    2eec:	88 1f       	adc	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	1a 94       	dec	r1
    2ef2:	69 f7       	brne	.-38     	; 0x2ece <__udivmodsi4_loop>
    2ef4:	60 95       	com	r22
    2ef6:	70 95       	com	r23
    2ef8:	80 95       	com	r24
    2efa:	90 95       	com	r25
    2efc:	9b 01       	movw	r18, r22
    2efe:	ac 01       	movw	r20, r24
    2f00:	bd 01       	movw	r22, r26
    2f02:	cf 01       	movw	r24, r30
    2f04:	08 95       	ret

00002f06 <__tablejump2__>:
    2f06:	ee 0f       	add	r30, r30
    2f08:	ff 1f       	adc	r31, r31
    2f0a:	88 1f       	adc	r24, r24
    2f0c:	8b bf       	out	0x3b, r24	; 59
    2f0e:	07 90       	elpm	r0, Z+
    2f10:	f6 91       	elpm	r31, Z
    2f12:	e0 2d       	mov	r30, r0
    2f14:	19 94       	eijmp

00002f16 <malloc>:
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	82 30       	cpi	r24, 0x02	; 2
    2f20:	91 05       	cpc	r25, r1
    2f22:	10 f4       	brcc	.+4      	; 0x2f28 <malloc+0x12>
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	e0 91 ba 05 	lds	r30, 0x05BA	; 0x8005ba <__flp>
    2f2c:	f0 91 bb 05 	lds	r31, 0x05BB	; 0x8005bb <__flp+0x1>
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	a0 e0       	ldi	r26, 0x00	; 0
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	30 97       	sbiw	r30, 0x00	; 0
    2f3a:	19 f1       	breq	.+70     	; 0x2f82 <malloc+0x6c>
    2f3c:	40 81       	ld	r20, Z
    2f3e:	51 81       	ldd	r21, Z+1	; 0x01
    2f40:	02 81       	ldd	r16, Z+2	; 0x02
    2f42:	13 81       	ldd	r17, Z+3	; 0x03
    2f44:	48 17       	cp	r20, r24
    2f46:	59 07       	cpc	r21, r25
    2f48:	c8 f0       	brcs	.+50     	; 0x2f7c <malloc+0x66>
    2f4a:	84 17       	cp	r24, r20
    2f4c:	95 07       	cpc	r25, r21
    2f4e:	69 f4       	brne	.+26     	; 0x2f6a <malloc+0x54>
    2f50:	10 97       	sbiw	r26, 0x00	; 0
    2f52:	31 f0       	breq	.+12     	; 0x2f60 <malloc+0x4a>
    2f54:	12 96       	adiw	r26, 0x02	; 2
    2f56:	0c 93       	st	X, r16
    2f58:	12 97       	sbiw	r26, 0x02	; 2
    2f5a:	13 96       	adiw	r26, 0x03	; 3
    2f5c:	1c 93       	st	X, r17
    2f5e:	27 c0       	rjmp	.+78     	; 0x2fae <malloc+0x98>
    2f60:	00 93 ba 05 	sts	0x05BA, r16	; 0x8005ba <__flp>
    2f64:	10 93 bb 05 	sts	0x05BB, r17	; 0x8005bb <__flp+0x1>
    2f68:	22 c0       	rjmp	.+68     	; 0x2fae <malloc+0x98>
    2f6a:	21 15       	cp	r18, r1
    2f6c:	31 05       	cpc	r19, r1
    2f6e:	19 f0       	breq	.+6      	; 0x2f76 <malloc+0x60>
    2f70:	42 17       	cp	r20, r18
    2f72:	53 07       	cpc	r21, r19
    2f74:	18 f4       	brcc	.+6      	; 0x2f7c <malloc+0x66>
    2f76:	9a 01       	movw	r18, r20
    2f78:	bd 01       	movw	r22, r26
    2f7a:	ef 01       	movw	r28, r30
    2f7c:	df 01       	movw	r26, r30
    2f7e:	f8 01       	movw	r30, r16
    2f80:	db cf       	rjmp	.-74     	; 0x2f38 <malloc+0x22>
    2f82:	21 15       	cp	r18, r1
    2f84:	31 05       	cpc	r19, r1
    2f86:	f9 f0       	breq	.+62     	; 0x2fc6 <malloc+0xb0>
    2f88:	28 1b       	sub	r18, r24
    2f8a:	39 0b       	sbc	r19, r25
    2f8c:	24 30       	cpi	r18, 0x04	; 4
    2f8e:	31 05       	cpc	r19, r1
    2f90:	80 f4       	brcc	.+32     	; 0x2fb2 <malloc+0x9c>
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
    2f94:	9b 81       	ldd	r25, Y+3	; 0x03
    2f96:	61 15       	cp	r22, r1
    2f98:	71 05       	cpc	r23, r1
    2f9a:	21 f0       	breq	.+8      	; 0x2fa4 <malloc+0x8e>
    2f9c:	fb 01       	movw	r30, r22
    2f9e:	93 83       	std	Z+3, r25	; 0x03
    2fa0:	82 83       	std	Z+2, r24	; 0x02
    2fa2:	04 c0       	rjmp	.+8      	; 0x2fac <malloc+0x96>
    2fa4:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <__flp+0x1>
    2fa8:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <__flp>
    2fac:	fe 01       	movw	r30, r28
    2fae:	32 96       	adiw	r30, 0x02	; 2
    2fb0:	44 c0       	rjmp	.+136    	; 0x303a <malloc+0x124>
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e2 0f       	add	r30, r18
    2fb6:	f3 1f       	adc	r31, r19
    2fb8:	81 93       	st	Z+, r24
    2fba:	91 93       	st	Z+, r25
    2fbc:	22 50       	subi	r18, 0x02	; 2
    2fbe:	31 09       	sbc	r19, r1
    2fc0:	39 83       	std	Y+1, r19	; 0x01
    2fc2:	28 83       	st	Y, r18
    2fc4:	3a c0       	rjmp	.+116    	; 0x303a <malloc+0x124>
    2fc6:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <__brkval>
    2fca:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <__brkval+0x1>
    2fce:	23 2b       	or	r18, r19
    2fd0:	41 f4       	brne	.+16     	; 0x2fe2 <malloc+0xcc>
    2fd2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2fd6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2fda:	30 93 b9 05 	sts	0x05B9, r19	; 0x8005b9 <__brkval+0x1>
    2fde:	20 93 b8 05 	sts	0x05B8, r18	; 0x8005b8 <__brkval>
    2fe2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2fe6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2fea:	21 15       	cp	r18, r1
    2fec:	31 05       	cpc	r19, r1
    2fee:	41 f4       	brne	.+16     	; 0x3000 <malloc+0xea>
    2ff0:	2d b7       	in	r18, 0x3d	; 61
    2ff2:	3e b7       	in	r19, 0x3e	; 62
    2ff4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2ff8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2ffc:	24 1b       	sub	r18, r20
    2ffe:	35 0b       	sbc	r19, r21
    3000:	e0 91 b8 05 	lds	r30, 0x05B8	; 0x8005b8 <__brkval>
    3004:	f0 91 b9 05 	lds	r31, 0x05B9	; 0x8005b9 <__brkval+0x1>
    3008:	e2 17       	cp	r30, r18
    300a:	f3 07       	cpc	r31, r19
    300c:	a0 f4       	brcc	.+40     	; 0x3036 <malloc+0x120>
    300e:	2e 1b       	sub	r18, r30
    3010:	3f 0b       	sbc	r19, r31
    3012:	28 17       	cp	r18, r24
    3014:	39 07       	cpc	r19, r25
    3016:	78 f0       	brcs	.+30     	; 0x3036 <malloc+0x120>
    3018:	ac 01       	movw	r20, r24
    301a:	4e 5f       	subi	r20, 0xFE	; 254
    301c:	5f 4f       	sbci	r21, 0xFF	; 255
    301e:	24 17       	cp	r18, r20
    3020:	35 07       	cpc	r19, r21
    3022:	48 f0       	brcs	.+18     	; 0x3036 <malloc+0x120>
    3024:	4e 0f       	add	r20, r30
    3026:	5f 1f       	adc	r21, r31
    3028:	50 93 b9 05 	sts	0x05B9, r21	; 0x8005b9 <__brkval+0x1>
    302c:	40 93 b8 05 	sts	0x05B8, r20	; 0x8005b8 <__brkval>
    3030:	81 93       	st	Z+, r24
    3032:	91 93       	st	Z+, r25
    3034:	02 c0       	rjmp	.+4      	; 0x303a <malloc+0x124>
    3036:	e0 e0       	ldi	r30, 0x00	; 0
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	cf 01       	movw	r24, r30
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	08 95       	ret

00003046 <free>:
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	09 f4       	brne	.+2      	; 0x3050 <free+0xa>
    304e:	81 c0       	rjmp	.+258    	; 0x3152 <free+0x10c>
    3050:	fc 01       	movw	r30, r24
    3052:	32 97       	sbiw	r30, 0x02	; 2
    3054:	13 82       	std	Z+3, r1	; 0x03
    3056:	12 82       	std	Z+2, r1	; 0x02
    3058:	a0 91 ba 05 	lds	r26, 0x05BA	; 0x8005ba <__flp>
    305c:	b0 91 bb 05 	lds	r27, 0x05BB	; 0x8005bb <__flp+0x1>
    3060:	10 97       	sbiw	r26, 0x00	; 0
    3062:	81 f4       	brne	.+32     	; 0x3084 <free+0x3e>
    3064:	20 81       	ld	r18, Z
    3066:	31 81       	ldd	r19, Z+1	; 0x01
    3068:	82 0f       	add	r24, r18
    306a:	93 1f       	adc	r25, r19
    306c:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <__brkval>
    3070:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <__brkval+0x1>
    3074:	28 17       	cp	r18, r24
    3076:	39 07       	cpc	r19, r25
    3078:	51 f5       	brne	.+84     	; 0x30ce <free+0x88>
    307a:	f0 93 b9 05 	sts	0x05B9, r31	; 0x8005b9 <__brkval+0x1>
    307e:	e0 93 b8 05 	sts	0x05B8, r30	; 0x8005b8 <__brkval>
    3082:	67 c0       	rjmp	.+206    	; 0x3152 <free+0x10c>
    3084:	ed 01       	movw	r28, r26
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	ce 17       	cp	r28, r30
    308c:	df 07       	cpc	r29, r31
    308e:	40 f4       	brcc	.+16     	; 0x30a0 <free+0x5a>
    3090:	4a 81       	ldd	r20, Y+2	; 0x02
    3092:	5b 81       	ldd	r21, Y+3	; 0x03
    3094:	9e 01       	movw	r18, r28
    3096:	41 15       	cp	r20, r1
    3098:	51 05       	cpc	r21, r1
    309a:	f1 f0       	breq	.+60     	; 0x30d8 <free+0x92>
    309c:	ea 01       	movw	r28, r20
    309e:	f5 cf       	rjmp	.-22     	; 0x308a <free+0x44>
    30a0:	d3 83       	std	Z+3, r29	; 0x03
    30a2:	c2 83       	std	Z+2, r28	; 0x02
    30a4:	40 81       	ld	r20, Z
    30a6:	51 81       	ldd	r21, Z+1	; 0x01
    30a8:	84 0f       	add	r24, r20
    30aa:	95 1f       	adc	r25, r21
    30ac:	c8 17       	cp	r28, r24
    30ae:	d9 07       	cpc	r29, r25
    30b0:	59 f4       	brne	.+22     	; 0x30c8 <free+0x82>
    30b2:	88 81       	ld	r24, Y
    30b4:	99 81       	ldd	r25, Y+1	; 0x01
    30b6:	84 0f       	add	r24, r20
    30b8:	95 1f       	adc	r25, r21
    30ba:	02 96       	adiw	r24, 0x02	; 2
    30bc:	91 83       	std	Z+1, r25	; 0x01
    30be:	80 83       	st	Z, r24
    30c0:	8a 81       	ldd	r24, Y+2	; 0x02
    30c2:	9b 81       	ldd	r25, Y+3	; 0x03
    30c4:	93 83       	std	Z+3, r25	; 0x03
    30c6:	82 83       	std	Z+2, r24	; 0x02
    30c8:	21 15       	cp	r18, r1
    30ca:	31 05       	cpc	r19, r1
    30cc:	29 f4       	brne	.+10     	; 0x30d8 <free+0x92>
    30ce:	f0 93 bb 05 	sts	0x05BB, r31	; 0x8005bb <__flp+0x1>
    30d2:	e0 93 ba 05 	sts	0x05BA, r30	; 0x8005ba <__flp>
    30d6:	3d c0       	rjmp	.+122    	; 0x3152 <free+0x10c>
    30d8:	e9 01       	movw	r28, r18
    30da:	fb 83       	std	Y+3, r31	; 0x03
    30dc:	ea 83       	std	Y+2, r30	; 0x02
    30de:	49 91       	ld	r20, Y+
    30e0:	59 91       	ld	r21, Y+
    30e2:	c4 0f       	add	r28, r20
    30e4:	d5 1f       	adc	r29, r21
    30e6:	ec 17       	cp	r30, r28
    30e8:	fd 07       	cpc	r31, r29
    30ea:	61 f4       	brne	.+24     	; 0x3104 <free+0xbe>
    30ec:	80 81       	ld	r24, Z
    30ee:	91 81       	ldd	r25, Z+1	; 0x01
    30f0:	84 0f       	add	r24, r20
    30f2:	95 1f       	adc	r25, r21
    30f4:	02 96       	adiw	r24, 0x02	; 2
    30f6:	e9 01       	movw	r28, r18
    30f8:	99 83       	std	Y+1, r25	; 0x01
    30fa:	88 83       	st	Y, r24
    30fc:	82 81       	ldd	r24, Z+2	; 0x02
    30fe:	93 81       	ldd	r25, Z+3	; 0x03
    3100:	9b 83       	std	Y+3, r25	; 0x03
    3102:	8a 83       	std	Y+2, r24	; 0x02
    3104:	e0 e0       	ldi	r30, 0x00	; 0
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	12 96       	adiw	r26, 0x02	; 2
    310a:	8d 91       	ld	r24, X+
    310c:	9c 91       	ld	r25, X
    310e:	13 97       	sbiw	r26, 0x03	; 3
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	19 f0       	breq	.+6      	; 0x311a <free+0xd4>
    3114:	fd 01       	movw	r30, r26
    3116:	dc 01       	movw	r26, r24
    3118:	f7 cf       	rjmp	.-18     	; 0x3108 <free+0xc2>
    311a:	8d 91       	ld	r24, X+
    311c:	9c 91       	ld	r25, X
    311e:	11 97       	sbiw	r26, 0x01	; 1
    3120:	9d 01       	movw	r18, r26
    3122:	2e 5f       	subi	r18, 0xFE	; 254
    3124:	3f 4f       	sbci	r19, 0xFF	; 255
    3126:	82 0f       	add	r24, r18
    3128:	93 1f       	adc	r25, r19
    312a:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <__brkval>
    312e:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <__brkval+0x1>
    3132:	28 17       	cp	r18, r24
    3134:	39 07       	cpc	r19, r25
    3136:	69 f4       	brne	.+26     	; 0x3152 <free+0x10c>
    3138:	30 97       	sbiw	r30, 0x00	; 0
    313a:	29 f4       	brne	.+10     	; 0x3146 <free+0x100>
    313c:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <__flp+0x1>
    3140:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <__flp>
    3144:	02 c0       	rjmp	.+4      	; 0x314a <free+0x104>
    3146:	13 82       	std	Z+3, r1	; 0x03
    3148:	12 82       	std	Z+2, r1	; 0x02
    314a:	b0 93 b9 05 	sts	0x05B9, r27	; 0x8005b9 <__brkval+0x1>
    314e:	a0 93 b8 05 	sts	0x05B8, r26	; 0x8005b8 <__brkval>
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	08 95       	ret

00003158 <realloc>:
    3158:	6f 92       	push	r6
    315a:	7f 92       	push	r7
    315c:	8f 92       	push	r8
    315e:	9f 92       	push	r9
    3160:	af 92       	push	r10
    3162:	bf 92       	push	r11
    3164:	cf 92       	push	r12
    3166:	df 92       	push	r13
    3168:	ef 92       	push	r14
    316a:	ff 92       	push	r15
    316c:	0f 93       	push	r16
    316e:	1f 93       	push	r17
    3170:	cf 93       	push	r28
    3172:	df 93       	push	r29
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	81 f4       	brne	.+32     	; 0x3198 <realloc+0x40>
    3178:	cb 01       	movw	r24, r22
    317a:	df 91       	pop	r29
    317c:	cf 91       	pop	r28
    317e:	1f 91       	pop	r17
    3180:	0f 91       	pop	r16
    3182:	ff 90       	pop	r15
    3184:	ef 90       	pop	r14
    3186:	df 90       	pop	r13
    3188:	cf 90       	pop	r12
    318a:	bf 90       	pop	r11
    318c:	af 90       	pop	r10
    318e:	9f 90       	pop	r9
    3190:	8f 90       	pop	r8
    3192:	7f 90       	pop	r7
    3194:	6f 90       	pop	r6
    3196:	bf ce       	rjmp	.-642    	; 0x2f16 <malloc>
    3198:	fc 01       	movw	r30, r24
    319a:	e6 0f       	add	r30, r22
    319c:	f7 1f       	adc	r31, r23
    319e:	9c 01       	movw	r18, r24
    31a0:	22 50       	subi	r18, 0x02	; 2
    31a2:	31 09       	sbc	r19, r1
    31a4:	e2 17       	cp	r30, r18
    31a6:	f3 07       	cpc	r31, r19
    31a8:	08 f4       	brcc	.+2      	; 0x31ac <realloc+0x54>
    31aa:	a5 c0       	rjmp	.+330    	; 0x32f6 <realloc+0x19e>
    31ac:	ec 01       	movw	r28, r24
    31ae:	d9 01       	movw	r26, r18
    31b0:	0d 91       	ld	r16, X+
    31b2:	1c 91       	ld	r17, X
    31b4:	11 97       	sbiw	r26, 0x01	; 1
    31b6:	06 17       	cp	r16, r22
    31b8:	17 07       	cpc	r17, r23
    31ba:	a8 f0       	brcs	.+42     	; 0x31e6 <realloc+0x8e>
    31bc:	05 30       	cpi	r16, 0x05	; 5
    31be:	11 05       	cpc	r17, r1
    31c0:	08 f4       	brcc	.+2      	; 0x31c4 <realloc+0x6c>
    31c2:	97 c0       	rjmp	.+302    	; 0x32f2 <realloc+0x19a>
    31c4:	c8 01       	movw	r24, r16
    31c6:	04 97       	sbiw	r24, 0x04	; 4
    31c8:	86 17       	cp	r24, r22
    31ca:	97 07       	cpc	r25, r23
    31cc:	08 f4       	brcc	.+2      	; 0x31d0 <realloc+0x78>
    31ce:	91 c0       	rjmp	.+290    	; 0x32f2 <realloc+0x19a>
    31d0:	02 50       	subi	r16, 0x02	; 2
    31d2:	11 09       	sbc	r17, r1
    31d4:	06 1b       	sub	r16, r22
    31d6:	17 0b       	sbc	r17, r23
    31d8:	01 93       	st	Z+, r16
    31da:	11 93       	st	Z+, r17
    31dc:	6d 93       	st	X+, r22
    31de:	7c 93       	st	X, r23
    31e0:	cf 01       	movw	r24, r30
    31e2:	31 df       	rcall	.-414    	; 0x3046 <free>
    31e4:	86 c0       	rjmp	.+268    	; 0x32f2 <realloc+0x19a>
    31e6:	5b 01       	movw	r10, r22
    31e8:	a0 1a       	sub	r10, r16
    31ea:	b1 0a       	sbc	r11, r17
    31ec:	4c 01       	movw	r8, r24
    31ee:	80 0e       	add	r8, r16
    31f0:	91 1e       	adc	r9, r17
    31f2:	a0 91 ba 05 	lds	r26, 0x05BA	; 0x8005ba <__flp>
    31f6:	b0 91 bb 05 	lds	r27, 0x05BB	; 0x8005bb <__flp+0x1>
    31fa:	61 2c       	mov	r6, r1
    31fc:	71 2c       	mov	r7, r1
    31fe:	e1 2c       	mov	r14, r1
    3200:	f1 2c       	mov	r15, r1
    3202:	10 97       	sbiw	r26, 0x00	; 0
    3204:	09 f4       	brne	.+2      	; 0x3208 <realloc+0xb0>
    3206:	46 c0       	rjmp	.+140    	; 0x3294 <realloc+0x13c>
    3208:	8d 91       	ld	r24, X+
    320a:	9c 91       	ld	r25, X
    320c:	11 97       	sbiw	r26, 0x01	; 1
    320e:	a8 15       	cp	r26, r8
    3210:	b9 05       	cpc	r27, r9
    3212:	b1 f5       	brne	.+108    	; 0x3280 <realloc+0x128>
    3214:	6c 01       	movw	r12, r24
    3216:	42 e0       	ldi	r20, 0x02	; 2
    3218:	c4 0e       	add	r12, r20
    321a:	d1 1c       	adc	r13, r1
    321c:	ca 14       	cp	r12, r10
    321e:	db 04       	cpc	r13, r11
    3220:	78 f1       	brcs	.+94     	; 0x3280 <realloc+0x128>
    3222:	4c 01       	movw	r8, r24
    3224:	8a 18       	sub	r8, r10
    3226:	9b 08       	sbc	r9, r11
    3228:	64 01       	movw	r12, r8
    322a:	42 e0       	ldi	r20, 0x02	; 2
    322c:	c4 0e       	add	r12, r20
    322e:	d1 1c       	adc	r13, r1
    3230:	12 96       	adiw	r26, 0x02	; 2
    3232:	bc 90       	ld	r11, X
    3234:	12 97       	sbiw	r26, 0x02	; 2
    3236:	13 96       	adiw	r26, 0x03	; 3
    3238:	ac 91       	ld	r26, X
    323a:	b5 e0       	ldi	r27, 0x05	; 5
    323c:	cb 16       	cp	r12, r27
    323e:	d1 04       	cpc	r13, r1
    3240:	40 f0       	brcs	.+16     	; 0x3252 <realloc+0xfa>
    3242:	b2 82       	std	Z+2, r11	; 0x02
    3244:	a3 83       	std	Z+3, r26	; 0x03
    3246:	91 82       	std	Z+1, r9	; 0x01
    3248:	80 82       	st	Z, r8
    324a:	d9 01       	movw	r26, r18
    324c:	6d 93       	st	X+, r22
    324e:	7c 93       	st	X, r23
    3250:	09 c0       	rjmp	.+18     	; 0x3264 <realloc+0x10c>
    3252:	0e 5f       	subi	r16, 0xFE	; 254
    3254:	1f 4f       	sbci	r17, 0xFF	; 255
    3256:	80 0f       	add	r24, r16
    3258:	91 1f       	adc	r25, r17
    325a:	f9 01       	movw	r30, r18
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	80 83       	st	Z, r24
    3260:	eb 2d       	mov	r30, r11
    3262:	fa 2f       	mov	r31, r26
    3264:	e1 14       	cp	r14, r1
    3266:	f1 04       	cpc	r15, r1
    3268:	31 f0       	breq	.+12     	; 0x3276 <realloc+0x11e>
    326a:	d7 01       	movw	r26, r14
    326c:	13 96       	adiw	r26, 0x03	; 3
    326e:	fc 93       	st	X, r31
    3270:	ee 93       	st	-X, r30
    3272:	12 97       	sbiw	r26, 0x02	; 2
    3274:	3e c0       	rjmp	.+124    	; 0x32f2 <realloc+0x19a>
    3276:	f0 93 bb 05 	sts	0x05BB, r31	; 0x8005bb <__flp+0x1>
    327a:	e0 93 ba 05 	sts	0x05BA, r30	; 0x8005ba <__flp>
    327e:	39 c0       	rjmp	.+114    	; 0x32f2 <realloc+0x19a>
    3280:	68 16       	cp	r6, r24
    3282:	79 06       	cpc	r7, r25
    3284:	08 f4       	brcc	.+2      	; 0x3288 <realloc+0x130>
    3286:	3c 01       	movw	r6, r24
    3288:	7d 01       	movw	r14, r26
    328a:	12 96       	adiw	r26, 0x02	; 2
    328c:	0d 90       	ld	r0, X+
    328e:	bc 91       	ld	r27, X
    3290:	a0 2d       	mov	r26, r0
    3292:	b7 cf       	rjmp	.-146    	; 0x3202 <realloc+0xaa>
    3294:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <__brkval>
    3298:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <__brkval+0x1>
    329c:	88 16       	cp	r8, r24
    329e:	99 06       	cpc	r9, r25
    32a0:	e1 f4       	brne	.+56     	; 0x32da <realloc+0x182>
    32a2:	66 16       	cp	r6, r22
    32a4:	77 06       	cpc	r7, r23
    32a6:	c8 f4       	brcc	.+50     	; 0x32da <realloc+0x182>
    32a8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    32ac:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	41 f4       	brne	.+16     	; 0x32c4 <realloc+0x16c>
    32b4:	8d b7       	in	r24, 0x3d	; 61
    32b6:	9e b7       	in	r25, 0x3e	; 62
    32b8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    32bc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    32c0:	84 1b       	sub	r24, r20
    32c2:	95 0b       	sbc	r25, r21
    32c4:	e8 17       	cp	r30, r24
    32c6:	f9 07       	cpc	r31, r25
    32c8:	b0 f4       	brcc	.+44     	; 0x32f6 <realloc+0x19e>
    32ca:	f0 93 b9 05 	sts	0x05B9, r31	; 0x8005b9 <__brkval+0x1>
    32ce:	e0 93 b8 05 	sts	0x05B8, r30	; 0x8005b8 <__brkval>
    32d2:	f9 01       	movw	r30, r18
    32d4:	71 83       	std	Z+1, r23	; 0x01
    32d6:	60 83       	st	Z, r22
    32d8:	0c c0       	rjmp	.+24     	; 0x32f2 <realloc+0x19a>
    32da:	cb 01       	movw	r24, r22
    32dc:	1c de       	rcall	.-968    	; 0x2f16 <malloc>
    32de:	7c 01       	movw	r14, r24
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	49 f0       	breq	.+18     	; 0x32f6 <realloc+0x19e>
    32e4:	a8 01       	movw	r20, r16
    32e6:	be 01       	movw	r22, r28
    32e8:	17 d0       	rcall	.+46     	; 0x3318 <memcpy>
    32ea:	ce 01       	movw	r24, r28
    32ec:	ac de       	rcall	.-680    	; 0x3046 <free>
    32ee:	c7 01       	movw	r24, r14
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <realloc+0x1a2>
    32f2:	ce 01       	movw	r24, r28
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <realloc+0x1a2>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	1f 91       	pop	r17
    3300:	0f 91       	pop	r16
    3302:	ff 90       	pop	r15
    3304:	ef 90       	pop	r14
    3306:	df 90       	pop	r13
    3308:	cf 90       	pop	r12
    330a:	bf 90       	pop	r11
    330c:	af 90       	pop	r10
    330e:	9f 90       	pop	r9
    3310:	8f 90       	pop	r8
    3312:	7f 90       	pop	r7
    3314:	6f 90       	pop	r6
    3316:	08 95       	ret

00003318 <memcpy>:
    3318:	fb 01       	movw	r30, r22
    331a:	dc 01       	movw	r26, r24
    331c:	02 c0       	rjmp	.+4      	; 0x3322 <memcpy+0xa>
    331e:	01 90       	ld	r0, Z+
    3320:	0d 92       	st	X+, r0
    3322:	41 50       	subi	r20, 0x01	; 1
    3324:	50 40       	sbci	r21, 0x00	; 0
    3326:	d8 f7       	brcc	.-10     	; 0x331e <memcpy+0x6>
    3328:	08 95       	ret

0000332a <strcpy>:
    332a:	fb 01       	movw	r30, r22
    332c:	dc 01       	movw	r26, r24
    332e:	01 90       	ld	r0, Z+
    3330:	0d 92       	st	X+, r0
    3332:	00 20       	and	r0, r0
    3334:	e1 f7       	brne	.-8      	; 0x332e <strcpy+0x4>
    3336:	08 95       	ret

00003338 <sprintf>:
    3338:	0f 93       	push	r16
    333a:	1f 93       	push	r17
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	2e 97       	sbiw	r28, 0x0e	; 14
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	0e 89       	ldd	r16, Y+22	; 0x16
    3352:	1f 89       	ldd	r17, Y+23	; 0x17
    3354:	86 e0       	ldi	r24, 0x06	; 6
    3356:	8c 83       	std	Y+4, r24	; 0x04
    3358:	1a 83       	std	Y+2, r17	; 0x02
    335a:	09 83       	std	Y+1, r16	; 0x01
    335c:	8f ef       	ldi	r24, 0xFF	; 255
    335e:	9f e7       	ldi	r25, 0x7F	; 127
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
    3364:	ae 01       	movw	r20, r28
    3366:	46 5e       	subi	r20, 0xE6	; 230
    3368:	5f 4f       	sbci	r21, 0xFF	; 255
    336a:	68 8d       	ldd	r22, Y+24	; 0x18
    336c:	79 8d       	ldd	r23, Y+25	; 0x19
    336e:	ce 01       	movw	r24, r28
    3370:	01 96       	adiw	r24, 0x01	; 1
    3372:	10 d0       	rcall	.+32     	; 0x3394 <vfprintf>
    3374:	ef 81       	ldd	r30, Y+7	; 0x07
    3376:	f8 85       	ldd	r31, Y+8	; 0x08
    3378:	e0 0f       	add	r30, r16
    337a:	f1 1f       	adc	r31, r17
    337c:	10 82       	st	Z, r1
    337e:	2e 96       	adiw	r28, 0x0e	; 14
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	1f 91       	pop	r17
    3390:	0f 91       	pop	r16
    3392:	08 95       	ret

00003394 <vfprintf>:
    3394:	2f 92       	push	r2
    3396:	3f 92       	push	r3
    3398:	4f 92       	push	r4
    339a:	5f 92       	push	r5
    339c:	6f 92       	push	r6
    339e:	7f 92       	push	r7
    33a0:	8f 92       	push	r8
    33a2:	9f 92       	push	r9
    33a4:	af 92       	push	r10
    33a6:	bf 92       	push	r11
    33a8:	cf 92       	push	r12
    33aa:	df 92       	push	r13
    33ac:	ef 92       	push	r14
    33ae:	ff 92       	push	r15
    33b0:	0f 93       	push	r16
    33b2:	1f 93       	push	r17
    33b4:	cf 93       	push	r28
    33b6:	df 93       	push	r29
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	2b 97       	sbiw	r28, 0x0b	; 11
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	6c 01       	movw	r12, r24
    33ca:	7b 01       	movw	r14, r22
    33cc:	8a 01       	movw	r16, r20
    33ce:	fc 01       	movw	r30, r24
    33d0:	17 82       	std	Z+7, r1	; 0x07
    33d2:	16 82       	std	Z+6, r1	; 0x06
    33d4:	83 81       	ldd	r24, Z+3	; 0x03
    33d6:	81 ff       	sbrs	r24, 1
    33d8:	bf c1       	rjmp	.+894    	; 0x3758 <vfprintf+0x3c4>
    33da:	ce 01       	movw	r24, r28
    33dc:	01 96       	adiw	r24, 0x01	; 1
    33de:	3c 01       	movw	r6, r24
    33e0:	f6 01       	movw	r30, r12
    33e2:	93 81       	ldd	r25, Z+3	; 0x03
    33e4:	f7 01       	movw	r30, r14
    33e6:	93 fd       	sbrc	r25, 3
    33e8:	85 91       	lpm	r24, Z+
    33ea:	93 ff       	sbrs	r25, 3
    33ec:	81 91       	ld	r24, Z+
    33ee:	7f 01       	movw	r14, r30
    33f0:	88 23       	and	r24, r24
    33f2:	09 f4       	brne	.+2      	; 0x33f6 <vfprintf+0x62>
    33f4:	ad c1       	rjmp	.+858    	; 0x3750 <vfprintf+0x3bc>
    33f6:	85 32       	cpi	r24, 0x25	; 37
    33f8:	39 f4       	brne	.+14     	; 0x3408 <vfprintf+0x74>
    33fa:	93 fd       	sbrc	r25, 3
    33fc:	85 91       	lpm	r24, Z+
    33fe:	93 ff       	sbrs	r25, 3
    3400:	81 91       	ld	r24, Z+
    3402:	7f 01       	movw	r14, r30
    3404:	85 32       	cpi	r24, 0x25	; 37
    3406:	21 f4       	brne	.+8      	; 0x3410 <vfprintf+0x7c>
    3408:	b6 01       	movw	r22, r12
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	d6 d1       	rcall	.+940    	; 0x37ba <fputc>
    340e:	e8 cf       	rjmp	.-48     	; 0x33e0 <vfprintf+0x4c>
    3410:	91 2c       	mov	r9, r1
    3412:	21 2c       	mov	r2, r1
    3414:	31 2c       	mov	r3, r1
    3416:	ff e1       	ldi	r31, 0x1F	; 31
    3418:	f3 15       	cp	r31, r3
    341a:	d8 f0       	brcs	.+54     	; 0x3452 <vfprintf+0xbe>
    341c:	8b 32       	cpi	r24, 0x2B	; 43
    341e:	79 f0       	breq	.+30     	; 0x343e <vfprintf+0xaa>
    3420:	38 f4       	brcc	.+14     	; 0x3430 <vfprintf+0x9c>
    3422:	80 32       	cpi	r24, 0x20	; 32
    3424:	79 f0       	breq	.+30     	; 0x3444 <vfprintf+0xb0>
    3426:	83 32       	cpi	r24, 0x23	; 35
    3428:	a1 f4       	brne	.+40     	; 0x3452 <vfprintf+0xbe>
    342a:	23 2d       	mov	r18, r3
    342c:	20 61       	ori	r18, 0x10	; 16
    342e:	1d c0       	rjmp	.+58     	; 0x346a <vfprintf+0xd6>
    3430:	8d 32       	cpi	r24, 0x2D	; 45
    3432:	61 f0       	breq	.+24     	; 0x344c <vfprintf+0xb8>
    3434:	80 33       	cpi	r24, 0x30	; 48
    3436:	69 f4       	brne	.+26     	; 0x3452 <vfprintf+0xbe>
    3438:	23 2d       	mov	r18, r3
    343a:	21 60       	ori	r18, 0x01	; 1
    343c:	16 c0       	rjmp	.+44     	; 0x346a <vfprintf+0xd6>
    343e:	83 2d       	mov	r24, r3
    3440:	82 60       	ori	r24, 0x02	; 2
    3442:	38 2e       	mov	r3, r24
    3444:	e3 2d       	mov	r30, r3
    3446:	e4 60       	ori	r30, 0x04	; 4
    3448:	3e 2e       	mov	r3, r30
    344a:	2a c0       	rjmp	.+84     	; 0x34a0 <vfprintf+0x10c>
    344c:	f3 2d       	mov	r31, r3
    344e:	f8 60       	ori	r31, 0x08	; 8
    3450:	1d c0       	rjmp	.+58     	; 0x348c <vfprintf+0xf8>
    3452:	37 fc       	sbrc	r3, 7
    3454:	2d c0       	rjmp	.+90     	; 0x34b0 <vfprintf+0x11c>
    3456:	20 ed       	ldi	r18, 0xD0	; 208
    3458:	28 0f       	add	r18, r24
    345a:	2a 30       	cpi	r18, 0x0A	; 10
    345c:	40 f0       	brcs	.+16     	; 0x346e <vfprintf+0xda>
    345e:	8e 32       	cpi	r24, 0x2E	; 46
    3460:	b9 f4       	brne	.+46     	; 0x3490 <vfprintf+0xfc>
    3462:	36 fc       	sbrc	r3, 6
    3464:	75 c1       	rjmp	.+746    	; 0x3750 <vfprintf+0x3bc>
    3466:	23 2d       	mov	r18, r3
    3468:	20 64       	ori	r18, 0x40	; 64
    346a:	32 2e       	mov	r3, r18
    346c:	19 c0       	rjmp	.+50     	; 0x34a0 <vfprintf+0x10c>
    346e:	36 fe       	sbrs	r3, 6
    3470:	06 c0       	rjmp	.+12     	; 0x347e <vfprintf+0xea>
    3472:	8a e0       	ldi	r24, 0x0A	; 10
    3474:	98 9e       	mul	r9, r24
    3476:	20 0d       	add	r18, r0
    3478:	11 24       	eor	r1, r1
    347a:	92 2e       	mov	r9, r18
    347c:	11 c0       	rjmp	.+34     	; 0x34a0 <vfprintf+0x10c>
    347e:	ea e0       	ldi	r30, 0x0A	; 10
    3480:	2e 9e       	mul	r2, r30
    3482:	20 0d       	add	r18, r0
    3484:	11 24       	eor	r1, r1
    3486:	22 2e       	mov	r2, r18
    3488:	f3 2d       	mov	r31, r3
    348a:	f0 62       	ori	r31, 0x20	; 32
    348c:	3f 2e       	mov	r3, r31
    348e:	08 c0       	rjmp	.+16     	; 0x34a0 <vfprintf+0x10c>
    3490:	8c 36       	cpi	r24, 0x6C	; 108
    3492:	21 f4       	brne	.+8      	; 0x349c <vfprintf+0x108>
    3494:	83 2d       	mov	r24, r3
    3496:	80 68       	ori	r24, 0x80	; 128
    3498:	38 2e       	mov	r3, r24
    349a:	02 c0       	rjmp	.+4      	; 0x34a0 <vfprintf+0x10c>
    349c:	88 36       	cpi	r24, 0x68	; 104
    349e:	41 f4       	brne	.+16     	; 0x34b0 <vfprintf+0x11c>
    34a0:	f7 01       	movw	r30, r14
    34a2:	93 fd       	sbrc	r25, 3
    34a4:	85 91       	lpm	r24, Z+
    34a6:	93 ff       	sbrs	r25, 3
    34a8:	81 91       	ld	r24, Z+
    34aa:	7f 01       	movw	r14, r30
    34ac:	81 11       	cpse	r24, r1
    34ae:	b3 cf       	rjmp	.-154    	; 0x3416 <vfprintf+0x82>
    34b0:	98 2f       	mov	r25, r24
    34b2:	9f 7d       	andi	r25, 0xDF	; 223
    34b4:	95 54       	subi	r25, 0x45	; 69
    34b6:	93 30       	cpi	r25, 0x03	; 3
    34b8:	28 f4       	brcc	.+10     	; 0x34c4 <vfprintf+0x130>
    34ba:	0c 5f       	subi	r16, 0xFC	; 252
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	9f e3       	ldi	r25, 0x3F	; 63
    34c0:	99 83       	std	Y+1, r25	; 0x01
    34c2:	0d c0       	rjmp	.+26     	; 0x34de <vfprintf+0x14a>
    34c4:	83 36       	cpi	r24, 0x63	; 99
    34c6:	31 f0       	breq	.+12     	; 0x34d4 <vfprintf+0x140>
    34c8:	83 37       	cpi	r24, 0x73	; 115
    34ca:	71 f0       	breq	.+28     	; 0x34e8 <vfprintf+0x154>
    34cc:	83 35       	cpi	r24, 0x53	; 83
    34ce:	09 f0       	breq	.+2      	; 0x34d2 <vfprintf+0x13e>
    34d0:	55 c0       	rjmp	.+170    	; 0x357c <vfprintf+0x1e8>
    34d2:	20 c0       	rjmp	.+64     	; 0x3514 <vfprintf+0x180>
    34d4:	f8 01       	movw	r30, r16
    34d6:	80 81       	ld	r24, Z
    34d8:	89 83       	std	Y+1, r24	; 0x01
    34da:	0e 5f       	subi	r16, 0xFE	; 254
    34dc:	1f 4f       	sbci	r17, 0xFF	; 255
    34de:	88 24       	eor	r8, r8
    34e0:	83 94       	inc	r8
    34e2:	91 2c       	mov	r9, r1
    34e4:	53 01       	movw	r10, r6
    34e6:	12 c0       	rjmp	.+36     	; 0x350c <vfprintf+0x178>
    34e8:	28 01       	movw	r4, r16
    34ea:	f2 e0       	ldi	r31, 0x02	; 2
    34ec:	4f 0e       	add	r4, r31
    34ee:	51 1c       	adc	r5, r1
    34f0:	f8 01       	movw	r30, r16
    34f2:	a0 80       	ld	r10, Z
    34f4:	b1 80       	ldd	r11, Z+1	; 0x01
    34f6:	36 fe       	sbrs	r3, 6
    34f8:	03 c0       	rjmp	.+6      	; 0x3500 <vfprintf+0x16c>
    34fa:	69 2d       	mov	r22, r9
    34fc:	70 e0       	ldi	r23, 0x00	; 0
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <vfprintf+0x170>
    3500:	6f ef       	ldi	r22, 0xFF	; 255
    3502:	7f ef       	ldi	r23, 0xFF	; 255
    3504:	c5 01       	movw	r24, r10
    3506:	4e d1       	rcall	.+668    	; 0x37a4 <strnlen>
    3508:	4c 01       	movw	r8, r24
    350a:	82 01       	movw	r16, r4
    350c:	f3 2d       	mov	r31, r3
    350e:	ff 77       	andi	r31, 0x7F	; 127
    3510:	3f 2e       	mov	r3, r31
    3512:	15 c0       	rjmp	.+42     	; 0x353e <vfprintf+0x1aa>
    3514:	28 01       	movw	r4, r16
    3516:	22 e0       	ldi	r18, 0x02	; 2
    3518:	42 0e       	add	r4, r18
    351a:	51 1c       	adc	r5, r1
    351c:	f8 01       	movw	r30, r16
    351e:	a0 80       	ld	r10, Z
    3520:	b1 80       	ldd	r11, Z+1	; 0x01
    3522:	36 fe       	sbrs	r3, 6
    3524:	03 c0       	rjmp	.+6      	; 0x352c <vfprintf+0x198>
    3526:	69 2d       	mov	r22, r9
    3528:	70 e0       	ldi	r23, 0x00	; 0
    352a:	02 c0       	rjmp	.+4      	; 0x3530 <vfprintf+0x19c>
    352c:	6f ef       	ldi	r22, 0xFF	; 255
    352e:	7f ef       	ldi	r23, 0xFF	; 255
    3530:	c5 01       	movw	r24, r10
    3532:	2d d1       	rcall	.+602    	; 0x378e <strnlen_P>
    3534:	4c 01       	movw	r8, r24
    3536:	f3 2d       	mov	r31, r3
    3538:	f0 68       	ori	r31, 0x80	; 128
    353a:	3f 2e       	mov	r3, r31
    353c:	82 01       	movw	r16, r4
    353e:	33 fc       	sbrc	r3, 3
    3540:	19 c0       	rjmp	.+50     	; 0x3574 <vfprintf+0x1e0>
    3542:	82 2d       	mov	r24, r2
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	88 16       	cp	r8, r24
    3548:	99 06       	cpc	r9, r25
    354a:	a0 f4       	brcc	.+40     	; 0x3574 <vfprintf+0x1e0>
    354c:	b6 01       	movw	r22, r12
    354e:	80 e2       	ldi	r24, 0x20	; 32
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	33 d1       	rcall	.+614    	; 0x37ba <fputc>
    3554:	2a 94       	dec	r2
    3556:	f5 cf       	rjmp	.-22     	; 0x3542 <vfprintf+0x1ae>
    3558:	f5 01       	movw	r30, r10
    355a:	37 fc       	sbrc	r3, 7
    355c:	85 91       	lpm	r24, Z+
    355e:	37 fe       	sbrs	r3, 7
    3560:	81 91       	ld	r24, Z+
    3562:	5f 01       	movw	r10, r30
    3564:	b6 01       	movw	r22, r12
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	28 d1       	rcall	.+592    	; 0x37ba <fputc>
    356a:	21 10       	cpse	r2, r1
    356c:	2a 94       	dec	r2
    356e:	21 e0       	ldi	r18, 0x01	; 1
    3570:	82 1a       	sub	r8, r18
    3572:	91 08       	sbc	r9, r1
    3574:	81 14       	cp	r8, r1
    3576:	91 04       	cpc	r9, r1
    3578:	79 f7       	brne	.-34     	; 0x3558 <vfprintf+0x1c4>
    357a:	e1 c0       	rjmp	.+450    	; 0x373e <vfprintf+0x3aa>
    357c:	84 36       	cpi	r24, 0x64	; 100
    357e:	11 f0       	breq	.+4      	; 0x3584 <vfprintf+0x1f0>
    3580:	89 36       	cpi	r24, 0x69	; 105
    3582:	39 f5       	brne	.+78     	; 0x35d2 <vfprintf+0x23e>
    3584:	f8 01       	movw	r30, r16
    3586:	37 fe       	sbrs	r3, 7
    3588:	07 c0       	rjmp	.+14     	; 0x3598 <vfprintf+0x204>
    358a:	60 81       	ld	r22, Z
    358c:	71 81       	ldd	r23, Z+1	; 0x01
    358e:	82 81       	ldd	r24, Z+2	; 0x02
    3590:	93 81       	ldd	r25, Z+3	; 0x03
    3592:	0c 5f       	subi	r16, 0xFC	; 252
    3594:	1f 4f       	sbci	r17, 0xFF	; 255
    3596:	08 c0       	rjmp	.+16     	; 0x35a8 <vfprintf+0x214>
    3598:	60 81       	ld	r22, Z
    359a:	71 81       	ldd	r23, Z+1	; 0x01
    359c:	07 2e       	mov	r0, r23
    359e:	00 0c       	add	r0, r0
    35a0:	88 0b       	sbc	r24, r24
    35a2:	99 0b       	sbc	r25, r25
    35a4:	0e 5f       	subi	r16, 0xFE	; 254
    35a6:	1f 4f       	sbci	r17, 0xFF	; 255
    35a8:	f3 2d       	mov	r31, r3
    35aa:	ff 76       	andi	r31, 0x6F	; 111
    35ac:	3f 2e       	mov	r3, r31
    35ae:	97 ff       	sbrs	r25, 7
    35b0:	09 c0       	rjmp	.+18     	; 0x35c4 <vfprintf+0x230>
    35b2:	90 95       	com	r25
    35b4:	80 95       	com	r24
    35b6:	70 95       	com	r23
    35b8:	61 95       	neg	r22
    35ba:	7f 4f       	sbci	r23, 0xFF	; 255
    35bc:	8f 4f       	sbci	r24, 0xFF	; 255
    35be:	9f 4f       	sbci	r25, 0xFF	; 255
    35c0:	f0 68       	ori	r31, 0x80	; 128
    35c2:	3f 2e       	mov	r3, r31
    35c4:	2a e0       	ldi	r18, 0x0A	; 10
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	a3 01       	movw	r20, r6
    35ca:	33 d1       	rcall	.+614    	; 0x3832 <__ultoa_invert>
    35cc:	88 2e       	mov	r8, r24
    35ce:	86 18       	sub	r8, r6
    35d0:	44 c0       	rjmp	.+136    	; 0x365a <vfprintf+0x2c6>
    35d2:	85 37       	cpi	r24, 0x75	; 117
    35d4:	31 f4       	brne	.+12     	; 0x35e2 <vfprintf+0x24e>
    35d6:	23 2d       	mov	r18, r3
    35d8:	2f 7e       	andi	r18, 0xEF	; 239
    35da:	b2 2e       	mov	r11, r18
    35dc:	2a e0       	ldi	r18, 0x0A	; 10
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	25 c0       	rjmp	.+74     	; 0x362c <vfprintf+0x298>
    35e2:	93 2d       	mov	r25, r3
    35e4:	99 7f       	andi	r25, 0xF9	; 249
    35e6:	b9 2e       	mov	r11, r25
    35e8:	8f 36       	cpi	r24, 0x6F	; 111
    35ea:	c1 f0       	breq	.+48     	; 0x361c <vfprintf+0x288>
    35ec:	18 f4       	brcc	.+6      	; 0x35f4 <vfprintf+0x260>
    35ee:	88 35       	cpi	r24, 0x58	; 88
    35f0:	79 f0       	breq	.+30     	; 0x3610 <vfprintf+0x27c>
    35f2:	ae c0       	rjmp	.+348    	; 0x3750 <vfprintf+0x3bc>
    35f4:	80 37       	cpi	r24, 0x70	; 112
    35f6:	19 f0       	breq	.+6      	; 0x35fe <vfprintf+0x26a>
    35f8:	88 37       	cpi	r24, 0x78	; 120
    35fa:	21 f0       	breq	.+8      	; 0x3604 <vfprintf+0x270>
    35fc:	a9 c0       	rjmp	.+338    	; 0x3750 <vfprintf+0x3bc>
    35fe:	e9 2f       	mov	r30, r25
    3600:	e0 61       	ori	r30, 0x10	; 16
    3602:	be 2e       	mov	r11, r30
    3604:	b4 fe       	sbrs	r11, 4
    3606:	0d c0       	rjmp	.+26     	; 0x3622 <vfprintf+0x28e>
    3608:	fb 2d       	mov	r31, r11
    360a:	f4 60       	ori	r31, 0x04	; 4
    360c:	bf 2e       	mov	r11, r31
    360e:	09 c0       	rjmp	.+18     	; 0x3622 <vfprintf+0x28e>
    3610:	34 fe       	sbrs	r3, 4
    3612:	0a c0       	rjmp	.+20     	; 0x3628 <vfprintf+0x294>
    3614:	29 2f       	mov	r18, r25
    3616:	26 60       	ori	r18, 0x06	; 6
    3618:	b2 2e       	mov	r11, r18
    361a:	06 c0       	rjmp	.+12     	; 0x3628 <vfprintf+0x294>
    361c:	28 e0       	ldi	r18, 0x08	; 8
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	05 c0       	rjmp	.+10     	; 0x362c <vfprintf+0x298>
    3622:	20 e1       	ldi	r18, 0x10	; 16
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	02 c0       	rjmp	.+4      	; 0x362c <vfprintf+0x298>
    3628:	20 e1       	ldi	r18, 0x10	; 16
    362a:	32 e0       	ldi	r19, 0x02	; 2
    362c:	f8 01       	movw	r30, r16
    362e:	b7 fe       	sbrs	r11, 7
    3630:	07 c0       	rjmp	.+14     	; 0x3640 <vfprintf+0x2ac>
    3632:	60 81       	ld	r22, Z
    3634:	71 81       	ldd	r23, Z+1	; 0x01
    3636:	82 81       	ldd	r24, Z+2	; 0x02
    3638:	93 81       	ldd	r25, Z+3	; 0x03
    363a:	0c 5f       	subi	r16, 0xFC	; 252
    363c:	1f 4f       	sbci	r17, 0xFF	; 255
    363e:	06 c0       	rjmp	.+12     	; 0x364c <vfprintf+0x2b8>
    3640:	60 81       	ld	r22, Z
    3642:	71 81       	ldd	r23, Z+1	; 0x01
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	0e 5f       	subi	r16, 0xFE	; 254
    364a:	1f 4f       	sbci	r17, 0xFF	; 255
    364c:	a3 01       	movw	r20, r6
    364e:	f1 d0       	rcall	.+482    	; 0x3832 <__ultoa_invert>
    3650:	88 2e       	mov	r8, r24
    3652:	86 18       	sub	r8, r6
    3654:	fb 2d       	mov	r31, r11
    3656:	ff 77       	andi	r31, 0x7F	; 127
    3658:	3f 2e       	mov	r3, r31
    365a:	36 fe       	sbrs	r3, 6
    365c:	0d c0       	rjmp	.+26     	; 0x3678 <vfprintf+0x2e4>
    365e:	23 2d       	mov	r18, r3
    3660:	2e 7f       	andi	r18, 0xFE	; 254
    3662:	a2 2e       	mov	r10, r18
    3664:	89 14       	cp	r8, r9
    3666:	58 f4       	brcc	.+22     	; 0x367e <vfprintf+0x2ea>
    3668:	34 fe       	sbrs	r3, 4
    366a:	0b c0       	rjmp	.+22     	; 0x3682 <vfprintf+0x2ee>
    366c:	32 fc       	sbrc	r3, 2
    366e:	09 c0       	rjmp	.+18     	; 0x3682 <vfprintf+0x2ee>
    3670:	83 2d       	mov	r24, r3
    3672:	8e 7e       	andi	r24, 0xEE	; 238
    3674:	a8 2e       	mov	r10, r24
    3676:	05 c0       	rjmp	.+10     	; 0x3682 <vfprintf+0x2ee>
    3678:	b8 2c       	mov	r11, r8
    367a:	a3 2c       	mov	r10, r3
    367c:	03 c0       	rjmp	.+6      	; 0x3684 <vfprintf+0x2f0>
    367e:	b8 2c       	mov	r11, r8
    3680:	01 c0       	rjmp	.+2      	; 0x3684 <vfprintf+0x2f0>
    3682:	b9 2c       	mov	r11, r9
    3684:	a4 fe       	sbrs	r10, 4
    3686:	0f c0       	rjmp	.+30     	; 0x36a6 <vfprintf+0x312>
    3688:	fe 01       	movw	r30, r28
    368a:	e8 0d       	add	r30, r8
    368c:	f1 1d       	adc	r31, r1
    368e:	80 81       	ld	r24, Z
    3690:	80 33       	cpi	r24, 0x30	; 48
    3692:	21 f4       	brne	.+8      	; 0x369c <vfprintf+0x308>
    3694:	9a 2d       	mov	r25, r10
    3696:	99 7e       	andi	r25, 0xE9	; 233
    3698:	a9 2e       	mov	r10, r25
    369a:	09 c0       	rjmp	.+18     	; 0x36ae <vfprintf+0x31a>
    369c:	a2 fe       	sbrs	r10, 2
    369e:	06 c0       	rjmp	.+12     	; 0x36ac <vfprintf+0x318>
    36a0:	b3 94       	inc	r11
    36a2:	b3 94       	inc	r11
    36a4:	04 c0       	rjmp	.+8      	; 0x36ae <vfprintf+0x31a>
    36a6:	8a 2d       	mov	r24, r10
    36a8:	86 78       	andi	r24, 0x86	; 134
    36aa:	09 f0       	breq	.+2      	; 0x36ae <vfprintf+0x31a>
    36ac:	b3 94       	inc	r11
    36ae:	a3 fc       	sbrc	r10, 3
    36b0:	10 c0       	rjmp	.+32     	; 0x36d2 <vfprintf+0x33e>
    36b2:	a0 fe       	sbrs	r10, 0
    36b4:	06 c0       	rjmp	.+12     	; 0x36c2 <vfprintf+0x32e>
    36b6:	b2 14       	cp	r11, r2
    36b8:	80 f4       	brcc	.+32     	; 0x36da <vfprintf+0x346>
    36ba:	28 0c       	add	r2, r8
    36bc:	92 2c       	mov	r9, r2
    36be:	9b 18       	sub	r9, r11
    36c0:	0d c0       	rjmp	.+26     	; 0x36dc <vfprintf+0x348>
    36c2:	b2 14       	cp	r11, r2
    36c4:	58 f4       	brcc	.+22     	; 0x36dc <vfprintf+0x348>
    36c6:	b6 01       	movw	r22, r12
    36c8:	80 e2       	ldi	r24, 0x20	; 32
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	76 d0       	rcall	.+236    	; 0x37ba <fputc>
    36ce:	b3 94       	inc	r11
    36d0:	f8 cf       	rjmp	.-16     	; 0x36c2 <vfprintf+0x32e>
    36d2:	b2 14       	cp	r11, r2
    36d4:	18 f4       	brcc	.+6      	; 0x36dc <vfprintf+0x348>
    36d6:	2b 18       	sub	r2, r11
    36d8:	02 c0       	rjmp	.+4      	; 0x36de <vfprintf+0x34a>
    36da:	98 2c       	mov	r9, r8
    36dc:	21 2c       	mov	r2, r1
    36de:	a4 fe       	sbrs	r10, 4
    36e0:	0f c0       	rjmp	.+30     	; 0x3700 <vfprintf+0x36c>
    36e2:	b6 01       	movw	r22, r12
    36e4:	80 e3       	ldi	r24, 0x30	; 48
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	68 d0       	rcall	.+208    	; 0x37ba <fputc>
    36ea:	a2 fe       	sbrs	r10, 2
    36ec:	16 c0       	rjmp	.+44     	; 0x371a <vfprintf+0x386>
    36ee:	a1 fc       	sbrc	r10, 1
    36f0:	03 c0       	rjmp	.+6      	; 0x36f8 <vfprintf+0x364>
    36f2:	88 e7       	ldi	r24, 0x78	; 120
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <vfprintf+0x368>
    36f8:	88 e5       	ldi	r24, 0x58	; 88
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	b6 01       	movw	r22, r12
    36fe:	0c c0       	rjmp	.+24     	; 0x3718 <vfprintf+0x384>
    3700:	8a 2d       	mov	r24, r10
    3702:	86 78       	andi	r24, 0x86	; 134
    3704:	51 f0       	breq	.+20     	; 0x371a <vfprintf+0x386>
    3706:	a1 fe       	sbrs	r10, 1
    3708:	02 c0       	rjmp	.+4      	; 0x370e <vfprintf+0x37a>
    370a:	8b e2       	ldi	r24, 0x2B	; 43
    370c:	01 c0       	rjmp	.+2      	; 0x3710 <vfprintf+0x37c>
    370e:	80 e2       	ldi	r24, 0x20	; 32
    3710:	a7 fc       	sbrc	r10, 7
    3712:	8d e2       	ldi	r24, 0x2D	; 45
    3714:	b6 01       	movw	r22, r12
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	50 d0       	rcall	.+160    	; 0x37ba <fputc>
    371a:	89 14       	cp	r8, r9
    371c:	30 f4       	brcc	.+12     	; 0x372a <vfprintf+0x396>
    371e:	b6 01       	movw	r22, r12
    3720:	80 e3       	ldi	r24, 0x30	; 48
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	4a d0       	rcall	.+148    	; 0x37ba <fputc>
    3726:	9a 94       	dec	r9
    3728:	f8 cf       	rjmp	.-16     	; 0x371a <vfprintf+0x386>
    372a:	8a 94       	dec	r8
    372c:	f3 01       	movw	r30, r6
    372e:	e8 0d       	add	r30, r8
    3730:	f1 1d       	adc	r31, r1
    3732:	80 81       	ld	r24, Z
    3734:	b6 01       	movw	r22, r12
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	40 d0       	rcall	.+128    	; 0x37ba <fputc>
    373a:	81 10       	cpse	r8, r1
    373c:	f6 cf       	rjmp	.-20     	; 0x372a <vfprintf+0x396>
    373e:	22 20       	and	r2, r2
    3740:	09 f4       	brne	.+2      	; 0x3744 <vfprintf+0x3b0>
    3742:	4e ce       	rjmp	.-868    	; 0x33e0 <vfprintf+0x4c>
    3744:	b6 01       	movw	r22, r12
    3746:	80 e2       	ldi	r24, 0x20	; 32
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	37 d0       	rcall	.+110    	; 0x37ba <fputc>
    374c:	2a 94       	dec	r2
    374e:	f7 cf       	rjmp	.-18     	; 0x373e <vfprintf+0x3aa>
    3750:	f6 01       	movw	r30, r12
    3752:	86 81       	ldd	r24, Z+6	; 0x06
    3754:	97 81       	ldd	r25, Z+7	; 0x07
    3756:	02 c0       	rjmp	.+4      	; 0x375c <vfprintf+0x3c8>
    3758:	8f ef       	ldi	r24, 0xFF	; 255
    375a:	9f ef       	ldi	r25, 0xFF	; 255
    375c:	2b 96       	adiw	r28, 0x0b	; 11
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	f8 94       	cli
    3762:	de bf       	out	0x3e, r29	; 62
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	df 91       	pop	r29
    376a:	cf 91       	pop	r28
    376c:	1f 91       	pop	r17
    376e:	0f 91       	pop	r16
    3770:	ff 90       	pop	r15
    3772:	ef 90       	pop	r14
    3774:	df 90       	pop	r13
    3776:	cf 90       	pop	r12
    3778:	bf 90       	pop	r11
    377a:	af 90       	pop	r10
    377c:	9f 90       	pop	r9
    377e:	8f 90       	pop	r8
    3780:	7f 90       	pop	r7
    3782:	6f 90       	pop	r6
    3784:	5f 90       	pop	r5
    3786:	4f 90       	pop	r4
    3788:	3f 90       	pop	r3
    378a:	2f 90       	pop	r2
    378c:	08 95       	ret

0000378e <strnlen_P>:
    378e:	fc 01       	movw	r30, r24
    3790:	05 90       	lpm	r0, Z+
    3792:	61 50       	subi	r22, 0x01	; 1
    3794:	70 40       	sbci	r23, 0x00	; 0
    3796:	01 10       	cpse	r0, r1
    3798:	d8 f7       	brcc	.-10     	; 0x3790 <strnlen_P+0x2>
    379a:	80 95       	com	r24
    379c:	90 95       	com	r25
    379e:	8e 0f       	add	r24, r30
    37a0:	9f 1f       	adc	r25, r31
    37a2:	08 95       	ret

000037a4 <strnlen>:
    37a4:	fc 01       	movw	r30, r24
    37a6:	61 50       	subi	r22, 0x01	; 1
    37a8:	70 40       	sbci	r23, 0x00	; 0
    37aa:	01 90       	ld	r0, Z+
    37ac:	01 10       	cpse	r0, r1
    37ae:	d8 f7       	brcc	.-10     	; 0x37a6 <strnlen+0x2>
    37b0:	80 95       	com	r24
    37b2:	90 95       	com	r25
    37b4:	8e 0f       	add	r24, r30
    37b6:	9f 1f       	adc	r25, r31
    37b8:	08 95       	ret

000037ba <fputc>:
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	fb 01       	movw	r30, r22
    37c4:	23 81       	ldd	r18, Z+3	; 0x03
    37c6:	21 fd       	sbrc	r18, 1
    37c8:	03 c0       	rjmp	.+6      	; 0x37d0 <fputc+0x16>
    37ca:	8f ef       	ldi	r24, 0xFF	; 255
    37cc:	9f ef       	ldi	r25, 0xFF	; 255
    37ce:	2c c0       	rjmp	.+88     	; 0x3828 <fputc+0x6e>
    37d0:	22 ff       	sbrs	r18, 2
    37d2:	16 c0       	rjmp	.+44     	; 0x3800 <fputc+0x46>
    37d4:	46 81       	ldd	r20, Z+6	; 0x06
    37d6:	57 81       	ldd	r21, Z+7	; 0x07
    37d8:	24 81       	ldd	r18, Z+4	; 0x04
    37da:	35 81       	ldd	r19, Z+5	; 0x05
    37dc:	42 17       	cp	r20, r18
    37de:	53 07       	cpc	r21, r19
    37e0:	44 f4       	brge	.+16     	; 0x37f2 <fputc+0x38>
    37e2:	a0 81       	ld	r26, Z
    37e4:	b1 81       	ldd	r27, Z+1	; 0x01
    37e6:	9d 01       	movw	r18, r26
    37e8:	2f 5f       	subi	r18, 0xFF	; 255
    37ea:	3f 4f       	sbci	r19, 0xFF	; 255
    37ec:	31 83       	std	Z+1, r19	; 0x01
    37ee:	20 83       	st	Z, r18
    37f0:	8c 93       	st	X, r24
    37f2:	26 81       	ldd	r18, Z+6	; 0x06
    37f4:	37 81       	ldd	r19, Z+7	; 0x07
    37f6:	2f 5f       	subi	r18, 0xFF	; 255
    37f8:	3f 4f       	sbci	r19, 0xFF	; 255
    37fa:	37 83       	std	Z+7, r19	; 0x07
    37fc:	26 83       	std	Z+6, r18	; 0x06
    37fe:	14 c0       	rjmp	.+40     	; 0x3828 <fputc+0x6e>
    3800:	8b 01       	movw	r16, r22
    3802:	ec 01       	movw	r28, r24
    3804:	fb 01       	movw	r30, r22
    3806:	00 84       	ldd	r0, Z+8	; 0x08
    3808:	f1 85       	ldd	r31, Z+9	; 0x09
    380a:	e0 2d       	mov	r30, r0
    380c:	19 95       	eicall
    380e:	89 2b       	or	r24, r25
    3810:	e1 f6       	brne	.-72     	; 0x37ca <fputc+0x10>
    3812:	d8 01       	movw	r26, r16
    3814:	16 96       	adiw	r26, 0x06	; 6
    3816:	8d 91       	ld	r24, X+
    3818:	9c 91       	ld	r25, X
    381a:	17 97       	sbiw	r26, 0x07	; 7
    381c:	01 96       	adiw	r24, 0x01	; 1
    381e:	17 96       	adiw	r26, 0x07	; 7
    3820:	9c 93       	st	X, r25
    3822:	8e 93       	st	-X, r24
    3824:	16 97       	sbiw	r26, 0x06	; 6
    3826:	ce 01       	movw	r24, r28
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	08 95       	ret

00003832 <__ultoa_invert>:
    3832:	fa 01       	movw	r30, r20
    3834:	aa 27       	eor	r26, r26
    3836:	28 30       	cpi	r18, 0x08	; 8
    3838:	51 f1       	breq	.+84     	; 0x388e <__ultoa_invert+0x5c>
    383a:	20 31       	cpi	r18, 0x10	; 16
    383c:	81 f1       	breq	.+96     	; 0x389e <__ultoa_invert+0x6c>
    383e:	e8 94       	clt
    3840:	6f 93       	push	r22
    3842:	6e 7f       	andi	r22, 0xFE	; 254
    3844:	6e 5f       	subi	r22, 0xFE	; 254
    3846:	7f 4f       	sbci	r23, 0xFF	; 255
    3848:	8f 4f       	sbci	r24, 0xFF	; 255
    384a:	9f 4f       	sbci	r25, 0xFF	; 255
    384c:	af 4f       	sbci	r26, 0xFF	; 255
    384e:	b1 e0       	ldi	r27, 0x01	; 1
    3850:	3e d0       	rcall	.+124    	; 0x38ce <__ultoa_invert+0x9c>
    3852:	b4 e0       	ldi	r27, 0x04	; 4
    3854:	3c d0       	rcall	.+120    	; 0x38ce <__ultoa_invert+0x9c>
    3856:	67 0f       	add	r22, r23
    3858:	78 1f       	adc	r23, r24
    385a:	89 1f       	adc	r24, r25
    385c:	9a 1f       	adc	r25, r26
    385e:	a1 1d       	adc	r26, r1
    3860:	68 0f       	add	r22, r24
    3862:	79 1f       	adc	r23, r25
    3864:	8a 1f       	adc	r24, r26
    3866:	91 1d       	adc	r25, r1
    3868:	a1 1d       	adc	r26, r1
    386a:	6a 0f       	add	r22, r26
    386c:	71 1d       	adc	r23, r1
    386e:	81 1d       	adc	r24, r1
    3870:	91 1d       	adc	r25, r1
    3872:	a1 1d       	adc	r26, r1
    3874:	20 d0       	rcall	.+64     	; 0x38b6 <__ultoa_invert+0x84>
    3876:	09 f4       	brne	.+2      	; 0x387a <__ultoa_invert+0x48>
    3878:	68 94       	set
    387a:	3f 91       	pop	r19
    387c:	2a e0       	ldi	r18, 0x0A	; 10
    387e:	26 9f       	mul	r18, r22
    3880:	11 24       	eor	r1, r1
    3882:	30 19       	sub	r19, r0
    3884:	30 5d       	subi	r19, 0xD0	; 208
    3886:	31 93       	st	Z+, r19
    3888:	de f6       	brtc	.-74     	; 0x3840 <__ultoa_invert+0xe>
    388a:	cf 01       	movw	r24, r30
    388c:	08 95       	ret
    388e:	46 2f       	mov	r20, r22
    3890:	47 70       	andi	r20, 0x07	; 7
    3892:	40 5d       	subi	r20, 0xD0	; 208
    3894:	41 93       	st	Z+, r20
    3896:	b3 e0       	ldi	r27, 0x03	; 3
    3898:	0f d0       	rcall	.+30     	; 0x38b8 <__ultoa_invert+0x86>
    389a:	c9 f7       	brne	.-14     	; 0x388e <__ultoa_invert+0x5c>
    389c:	f6 cf       	rjmp	.-20     	; 0x388a <__ultoa_invert+0x58>
    389e:	46 2f       	mov	r20, r22
    38a0:	4f 70       	andi	r20, 0x0F	; 15
    38a2:	40 5d       	subi	r20, 0xD0	; 208
    38a4:	4a 33       	cpi	r20, 0x3A	; 58
    38a6:	18 f0       	brcs	.+6      	; 0x38ae <__ultoa_invert+0x7c>
    38a8:	49 5d       	subi	r20, 0xD9	; 217
    38aa:	31 fd       	sbrc	r19, 1
    38ac:	40 52       	subi	r20, 0x20	; 32
    38ae:	41 93       	st	Z+, r20
    38b0:	02 d0       	rcall	.+4      	; 0x38b6 <__ultoa_invert+0x84>
    38b2:	a9 f7       	brne	.-22     	; 0x389e <__ultoa_invert+0x6c>
    38b4:	ea cf       	rjmp	.-44     	; 0x388a <__ultoa_invert+0x58>
    38b6:	b4 e0       	ldi	r27, 0x04	; 4
    38b8:	a6 95       	lsr	r26
    38ba:	97 95       	ror	r25
    38bc:	87 95       	ror	r24
    38be:	77 95       	ror	r23
    38c0:	67 95       	ror	r22
    38c2:	ba 95       	dec	r27
    38c4:	c9 f7       	brne	.-14     	; 0x38b8 <__ultoa_invert+0x86>
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	61 05       	cpc	r22, r1
    38ca:	71 05       	cpc	r23, r1
    38cc:	08 95       	ret
    38ce:	9b 01       	movw	r18, r22
    38d0:	ac 01       	movw	r20, r24
    38d2:	0a 2e       	mov	r0, r26
    38d4:	06 94       	lsr	r0
    38d6:	57 95       	ror	r21
    38d8:	47 95       	ror	r20
    38da:	37 95       	ror	r19
    38dc:	27 95       	ror	r18
    38de:	ba 95       	dec	r27
    38e0:	c9 f7       	brne	.-14     	; 0x38d4 <__ultoa_invert+0xa2>
    38e2:	62 0f       	add	r22, r18
    38e4:	73 1f       	adc	r23, r19
    38e6:	84 1f       	adc	r24, r20
    38e8:	95 1f       	adc	r25, r21
    38ea:	a0 1d       	adc	r26, r0
    38ec:	08 95       	ret

000038ee <_exit>:
    38ee:	f8 94       	cli

000038f0 <__stop_program>:
    38f0:	ff cf       	rjmp	.-2      	; 0x38f0 <__stop_program>
