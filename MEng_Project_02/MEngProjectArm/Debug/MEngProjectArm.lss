
MEngProjectArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
<<<<<<< HEAD
  0 .data         00000158  00800200  000037d2  00003866  2**0
=======
  0 .data         00000152  00800200  000035fc  00003690  2**0
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000253  00800352  00800352  000037e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000037e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009b8  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015e05  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036b4  00000000  00000000  0001a03d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004edf  00000000  00000000  0001d6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001eec  00000000  00000000  000225d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003cdc  00000000  00000000  000244bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a351  00000000  00000000  00028198  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 12 .debug_ranges 00000968  00000000  00000000  00032a2a  2**0
=======
  0 .data         00000152  00800200  000035f2  00003686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000253  00800352  00800352  000037d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009b0  00000000  00000000  00003874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015d39  00000000  00000000  00004224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003658  00000000  00000000  00019f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ec0  00000000  00000000  0001d5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001edc  00000000  00000000  00022478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003cc3  00000000  00000000  00024354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a2e2  00000000  00000000  00028017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000960  00000000  00000000  000322f9  2**0
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
 12 .debug_ranges 00000968  00000000  00000000  000324e9  2**0
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
<<<<<<< HEAD
<<<<<<< HEAD
      24:	07 c4       	rjmp	.+2062   	; 0x834 <__vector_9>
=======
      24:	f2 c3       	rjmp	.+2020   	; 0x80a <__vector_9>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
      24:	f8 c3       	rjmp	.+2032   	; 0x816 <__vector_9>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
<<<<<<< HEAD
<<<<<<< HEAD
      5c:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__vector_25>
      68:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__vector_26>
=======
      5c:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__vector_25>
      68:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__vector_26>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
      5c:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <__vector_23>
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__vector_25>
      68:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_26>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
<<<<<<< HEAD
<<<<<<< HEAD
      90:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__vector_36>
      94:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__vector_39>
=======
      90:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__vector_36>
      94:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__vector_39>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
      90:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_36>
      94:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__vector_37>
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__vector_39>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
<<<<<<< HEAD
<<<<<<< HEAD
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__vector_9+0x12c>
=======
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z9readServohhh+0x46>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z9readServohhh+0x3a>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
<<<<<<< HEAD
<<<<<<< HEAD
     166:	c2 11       	cpse	r28, r2
     168:	c5 11       	cpse	r28, r5
     16a:	b4 11       	cpse	r27, r4
     16c:	b8 11       	cpse	r27, r8
     16e:	be 11       	cpse	r27, r14
     170:	fc 11       	cpse	r31, r12
     172:	c9 11       	cpse	r28, r9
     174:	cd 11       	cpse	r28, r13
     176:	d3 11       	cpse	r29, r3
     178:	d7 11       	cpse	r29, r7
     17a:	db 11       	cpse	r29, r11
     17c:	e1 11       	cpse	r30, r1
     17e:	e5 11       	cpse	r30, r5
     180:	e9 11       	cpse	r30, r9
     182:	fc 11       	cpse	r31, r12
     184:	ef 11       	cpse	r30, r15
     186:	f3 11       	cpse	r31, r3
     188:	f7 11       	cpse	r31, r7
=======
     166:	d2 10       	cpse	r13, r2
     168:	d5 10       	cpse	r13, r5
     16a:	c4 10       	cpse	r12, r4
     16c:	c8 10       	cpse	r12, r8
     16e:	ce 10       	cpse	r12, r14
     170:	0c 11       	cpse	r16, r12
     172:	d9 10       	cpse	r13, r9
     174:	dd 10       	cpse	r13, r13
     176:	e3 10       	cpse	r14, r3
     178:	e7 10       	cpse	r14, r7
     17a:	eb 10       	cpse	r14, r11
     17c:	f1 10       	cpse	r15, r1
     17e:	f5 10       	cpse	r15, r5
     180:	f9 10       	cpse	r15, r9
     182:	0c 11       	cpse	r16, r12
     184:	ff 10       	cpse	r15, r15
     186:	03 11       	cpse	r16, r3
     188:	07 11       	cpse	r16, r7
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     166:	d7 10       	cpse	r13, r7
     168:	da 10       	cpse	r13, r10
     16a:	c9 10       	cpse	r12, r9
     16c:	cd 10       	cpse	r12, r13
     16e:	d3 10       	cpse	r13, r3
     170:	11 11       	cpse	r17, r1
     172:	de 10       	cpse	r13, r14
     174:	e2 10       	cpse	r14, r2
     176:	e8 10       	cpse	r14, r8
     178:	ec 10       	cpse	r14, r12
     17a:	f0 10       	cpse	r15, r0
     17c:	f6 10       	cpse	r15, r6
     17e:	fa 10       	cpse	r15, r10
     180:	fe 10       	cpse	r15, r14
     182:	11 11       	cpse	r17, r1
     184:	04 11       	cpse	r16, r4
     186:	08 11       	cpse	r16, r8
     188:	0c 11       	cpse	r16, r12
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_output_PGM>:
     25c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000276 <port_to_mode_PGM>:
     276:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     286:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000290 <__ctors_start>:
<<<<<<< HEAD
<<<<<<< HEAD
     290:	03 03       	mulsu	r16, r19
     292:	a9 0e       	add	r10, r25
     294:	3e 0f       	add	r19, r30
     296:	eb 14       	cp	r14, r11
=======
     290:	d7 02       	muls	r29, r23
     292:	b9 0d       	add	r27, r9
     294:	4e 0e       	add	r4, r30
     296:	fb 13       	cpse	r31, r27
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     290:	f2 02       	muls	r31, r18
     292:	be 0d       	add	r27, r14
     294:	53 0e       	add	r5, r19
     296:	00 14       	cp	r0, r0
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	d1 e2       	ldi	r29, 0x21	; 33
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	00 e0       	ldi	r16, 0x00	; 0
     2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b2 e0       	ldi	r27, 0x02	; 2
<<<<<<< HEAD
<<<<<<< HEAD
     2ae:	e2 ed       	ldi	r30, 0xD2	; 210
     2b0:	f7 e3       	ldi	r31, 0x37	; 55
=======
     2ae:	e2 ef       	ldi	r30, 0xF2	; 242
     2b0:	f5 e3       	ldi	r31, 0x35	; 53
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     2ae:	ec ef       	ldi	r30, 0xFC	; 252
     2b0:	f5 e3       	ldi	r31, 0x35	; 53
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a2 35       	cpi	r26, 0x52	; 82
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	25 e0       	ldi	r18, 0x05	; 5
     2c4:	a2 e5       	ldi	r26, 0x52	; 82
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	a5 3a       	cpi	r26, 0xA5	; 165
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>

000002d2 <__do_global_ctors>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	cc e4       	ldi	r28, 0x4C	; 76
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__do_global_ctors+0x16>
     2dc:	21 97       	sbiw	r28, 0x01	; 1
     2de:	01 09       	sbc	r16, r1
     2e0:	80 2f       	mov	r24, r16
     2e2:	fe 01       	movw	r30, r28
<<<<<<< HEAD
<<<<<<< HEAD
     2e4:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__tablejump2__>
=======
     2e4:	0e 94 03 16 	call	0x2c06	; 0x2c06 <__tablejump2__>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     2e4:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__tablejump2__>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
     2e8:	c8 34       	cpi	r28, 0x48	; 72
     2ea:	d1 07       	cpc	r29, r17
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 07       	cpc	r16, r24
     2f0:	a9 f7       	brne	.-22     	; 0x2dc <__do_global_ctors+0xa>
<<<<<<< HEAD
<<<<<<< HEAD
     2f2:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <main>
     2f6:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <_exit>
=======
     2f2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <main>
     2f6:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <_exit>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     2f2:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <main>
     2f6:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <_exit>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial5writeEi>:
	Serial1.write(resLength);				// Response Length (usually 1 but for some might be 2 or more (more data))
	Serial1.write(Checksum);				// Write Checksum
	serialWriting = NO;
	RS485_RX_ON
}
void readServo(byte pcktID, byte pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }
     2fc:	dc 01       	movw	r26, r24
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	19 94       	eijmp

0000030a <_Z8printLCDhhih>:
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <_Z8printLCDhhih+0x22>
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	98 2e       	mov	r9, r24
     336:	86 2e       	mov	r8, r22
     338:	8a 01       	movw	r16, r20
     33a:	d2 2e       	mov	r13, r18
     33c:	ad b6       	in	r10, 0x3d	; 61
     33e:	be b6       	in	r11, 0x3e	; 62
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	82 1b       	sub	r24, r18
     346:	91 09       	sbc	r25, r1
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	9e bf       	out	0x3e, r25	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	8d bf       	out	0x3d, r24	; 61
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	7c 01       	movw	r14, r24
     356:	62 2f       	mov	r22, r18
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
<<<<<<< HEAD
<<<<<<< HEAD
     35e:	0e 94 ef 09 	call	0x13de	; 0x13de <__floatunsisf>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	0e 94 04 0b 	call	0x1608	; 0x1608 <pow>
     372:	2b 01       	movw	r4, r22
     374:	3c 01       	movw	r6, r24
     376:	b8 01       	movw	r22, r16
     378:	01 2e       	mov	r0, r17
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__floatsisf>
     384:	a3 01       	movw	r20, r6
     386:	92 01       	movw	r18, r4
     388:	f5 d7       	rcall	.+4074   	; 0x1374 <__cmpsf2>
     38a:	87 fd       	sbrc	r24, 7
     38c:	09 c0       	rjmp	.+18     	; 0x3a0 <_Z8printLCDhhih+0x96>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	40 e8       	ldi	r20, 0x80	; 128
     394:	5f e3       	ldi	r21, 0x3F	; 63
     396:	c3 01       	movw	r24, r6
     398:	b2 01       	movw	r22, r4
     39a:	87 d7       	rcall	.+3854   	; 0x12aa <__subsf3>
     39c:	ef d7       	rcall	.+4062   	; 0x137c <__fixsfsi>
     39e:	8b 01       	movw	r16, r22
     3a0:	1f 92       	push	r1
     3a2:	df 92       	push	r13
     3a4:	80 e1       	ldi	r24, 0x10	; 16
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	9f 93       	push	r25
     3aa:	8f 93       	push	r24
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	6c 01       	movw	r12, r24
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 0c 19 	call	0x3218	; 0x3218 <sprintf>
     3ba:	1f 93       	push	r17
     3bc:	0f 93       	push	r16
     3be:	df 92       	push	r13
     3c0:	cf 92       	push	r12
     3c2:	ff 92       	push	r15
     3c4:	ef 92       	push	r14
     3c6:	0e 94 0c 19 	call	0x3218	; 0x3218 <sprintf>
     3ca:	48 2d       	mov	r20, r8
     3cc:	69 2d       	mov	r22, r9
     3ce:	8a e5       	ldi	r24, 0x5A	; 90
     3d0:	93 e0       	ldi	r25, 0x03	; 3
     3d2:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3d6:	b7 01       	movw	r22, r14
     3d8:	8a e5       	ldi	r24, 0x5A	; 90
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN5Print5printEPKc>
     3e0:	8d b7       	in	r24, 0x3d	; 61
     3e2:	9e b7       	in	r25, 0x3e	; 62
     3e4:	0c 96       	adiw	r24, 0x0c	; 12
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	9e bf       	out	0x3e, r25	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	8d bf       	out	0x3d, r24	; 61
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	be be       	out	0x3e, r11	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	ad be       	out	0x3d, r10	; 61
=======
     35e:	54 d7       	rcall	.+3752   	; 0x1208 <__floatunsisf>
     360:	9b 01       	movw	r18, r22
     362:	ac 01       	movw	r20, r24
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e2       	ldi	r24, 0x20	; 32
     36a:	91 e4       	ldi	r25, 0x41	; 65
     36c:	0e 94 19 0a 	call	0x1432	; 0x1432 <pow>
     370:	2b 01       	movw	r4, r22
     372:	3c 01       	movw	r6, r24
     374:	b8 01       	movw	r22, r16
     376:	01 2e       	mov	r0, r17
     378:	00 0c       	add	r0, r0
     37a:	88 0b       	sbc	r24, r24
     37c:	99 0b       	sbc	r25, r25
     37e:	46 d7       	rcall	.+3724   	; 0x120c <__floatsisf>
     380:	a3 01       	movw	r20, r6
     382:	92 01       	movw	r18, r4
     384:	0c d7       	rcall	.+3608   	; 0x119e <__cmpsf2>
     386:	87 fd       	sbrc	r24, 7
     388:	09 c0       	rjmp	.+18     	; 0x39c <_Z8printLCDhhih+0x92>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 e8       	ldi	r20, 0x80	; 128
     390:	5f e3       	ldi	r21, 0x3F	; 63
     392:	c3 01       	movw	r24, r6
     394:	b2 01       	movw	r22, r4
     396:	9e d6       	rcall	.+3388   	; 0x10d4 <__subsf3>
     398:	06 d7       	rcall	.+3596   	; 0x11a6 <__fixsfsi>
     39a:	8b 01       	movw	r16, r22
     39c:	1f 92       	push	r1
     39e:	df 92       	push	r13
     3a0:	81 e1       	ldi	r24, 0x11	; 17
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	9f 93       	push	r25
     3a6:	8f 93       	push	r24
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	6c 01       	movw	r12, r24
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	0e 94 21 18 	call	0x3042	; 0x3042 <sprintf>
     3b6:	1f 93       	push	r17
     3b8:	0f 93       	push	r16
     3ba:	df 92       	push	r13
     3bc:	cf 92       	push	r12
     3be:	ff 92       	push	r15
     3c0:	ef 92       	push	r14
     3c2:	0e 94 21 18 	call	0x3042	; 0x3042 <sprintf>
     3c6:	48 2d       	mov	r20, r8
     3c8:	69 2d       	mov	r22, r9
     3ca:	84 e5       	ldi	r24, 0x54	; 84
     3cc:	93 e0       	ldi	r25, 0x03	; 3
     3ce:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3d2:	b7 01       	movw	r22, r14
     3d4:	84 e5       	ldi	r24, 0x54	; 84
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print5printEPKc>
     3dc:	8d b7       	in	r24, 0x3d	; 61
     3de:	9e b7       	in	r25, 0x3e	; 62
     3e0:	0c 96       	adiw	r24, 0x0c	; 12
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	9e bf       	out	0x3e, r25	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	8d bf       	out	0x3d, r24	; 61
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	be be       	out	0x3e, r11	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	ad be       	out	0x3d, r10	; 61
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	bf 90       	pop	r11
     412:	af 90       	pop	r10
     414:	9f 90       	pop	r9
     416:	8f 90       	pop	r8
     418:	7f 90       	pop	r7
     41a:	6f 90       	pop	r6
     41c:	5f 90       	pop	r5
     41e:	4f 90       	pop	r4
     420:	08 95       	ret

00000422 <_Z13setupSwitchesv>:
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	84 b9       	out	0x04, r24	; 4
     426:	84 b1       	in	r24, 0x04	; 4
     428:	88 7f       	andi	r24, 0xF8	; 248
     42a:	84 b9       	out	0x04, r24	; 4
     42c:	eb e6       	ldi	r30, 0x6B	; 107
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	87 60       	ori	r24, 0x07	; 7
     434:	80 83       	st	Z, r24
     436:	e8 e6       	ldi	r30, 0x68	; 104
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	81 60       	ori	r24, 0x01	; 1
     43e:	80 83       	st	Z, r24
     440:	78 94       	sei
     442:	08 95       	ret

00000444 <_Z13checkPositionhi>:
     444:	83 30       	cpi	r24, 0x03	; 3
     446:	31 f4       	brne	.+12     	; 0x454 <_Z13checkPositionhi+0x10>
     448:	cb 01       	movw	r24, r22
     44a:	77 ff       	sbrs	r23, 7
     44c:	0c c0       	rjmp	.+24     	; 0x466 <_Z13checkPositionhi+0x22>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	09 c0       	rjmp	.+18     	; 0x466 <_Z13checkPositionhi+0x22>
     454:	84 50       	subi	r24, 0x04	; 4
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	68 f4       	brcc	.+26     	; 0x474 <_Z13checkPositionhi+0x30>
     45a:	cb 01       	movw	r24, r22
     45c:	64 3e       	cpi	r22, 0xE4	; 228
     45e:	72 40       	sbci	r23, 0x02	; 2
     460:	14 f4       	brge	.+4      	; 0x466 <_Z13checkPositionhi+0x22>
     462:	84 ee       	ldi	r24, 0xE4	; 228
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	85 3a       	cpi	r24, 0xA5	; 165
     468:	26 e0       	ldi	r18, 0x06	; 6
     46a:	92 07       	cpc	r25, r18
     46c:	2c f0       	brlt	.+10     	; 0x478 <_Z13checkPositionhi+0x34>
     46e:	84 ea       	ldi	r24, 0xA4	; 164
     470:	96 e0       	ldi	r25, 0x06	; 6
     472:	08 95       	ret
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	9f ef       	ldi	r25, 0xFF	; 255
     478:	08 95       	ret

0000047a <_Z11printSerial6Stringi>:
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	eb 01       	movw	r28, r22
     480:	bc 01       	movw	r22, r24
     482:	8a e9       	ldi	r24, 0x9A	; 154
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN5Print5printERK6String>
     48a:	66 e3       	ldi	r22, 0x36	; 54
     48c:	72 e0       	ldi	r23, 0x02	; 2
     48e:	8a e9       	ldi	r24, 0x9A	; 154
     490:	93 e0       	ldi	r25, 0x03	; 3
     492:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print5printEPKc>
     496:	4a e0       	ldi	r20, 0x0A	; 10
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	be 01       	movw	r22, r28
     49c:	8a e9       	ldi	r24, 0x9A	; 154
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <_ZN5Print7printlnEii>

000004a8 <_Z12error_decodeh>:
     4a8:	cf 92       	push	r12
     4aa:	df 92       	push	r13
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	e6 97       	sbiw	r28, 0x36	; 54
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	08 2f       	mov	r16, r24
     4ca:	67 e2       	ldi	r22, 0x27	; 39
     4cc:	73 e0       	ldi	r23, 0x03	; 3
     4ce:	ce 01       	movw	r24, r28
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	7c 01       	movw	r14, r24
     4d4:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     4d8:	67 e2       	ldi	r22, 0x27	; 39
     4da:	73 e0       	ldi	r23, 0x03	; 3
     4dc:	ce 01       	movw	r24, r28
     4de:	07 96       	adiw	r24, 0x07	; 7
     4e0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     4e4:	10 2f       	mov	r17, r16
     4e6:	11 70       	andi	r17, 0x01	; 1
     4e8:	00 fd       	sbrc	r16, 0
     4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <_Z12error_decodeh+0x4a>
     4ec:	67 e2       	ldi	r22, 0x27	; 39
     4ee:	73 e0       	ldi	r23, 0x03	; 3
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <_Z12error_decodeh+0x4e>
     4f2:	67 e1       	ldi	r22, 0x17	; 23
     4f4:	72 e0       	ldi	r23, 0x02	; 2
     4f6:	ce 01       	movw	r24, r28
     4f8:	0d 96       	adiw	r24, 0x0d	; 13
     4fa:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     4fe:	11 11       	cpse	r17, r1
     500:	03 c0       	rjmp	.+6      	; 0x508 <_Z12error_decodeh+0x60>
     502:	67 e2       	ldi	r22, 0x27	; 39
     504:	73 e0       	ldi	r23, 0x03	; 3
     506:	02 c0       	rjmp	.+4      	; 0x50c <_Z12error_decodeh+0x64>
     508:	6b e1       	ldi	r22, 0x1B	; 27
     50a:	72 e0       	ldi	r23, 0x02	; 2
     50c:	ce 01       	movw	r24, r28
     50e:	43 96       	adiw	r24, 0x13	; 19
     510:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     514:	11 11       	cpse	r17, r1
     516:	03 c0       	rjmp	.+6      	; 0x51e <_Z12error_decodeh+0x76>
     518:	67 e2       	ldi	r22, 0x27	; 39
     51a:	73 e0       	ldi	r23, 0x03	; 3
     51c:	02 c0       	rjmp	.+4      	; 0x522 <_Z12error_decodeh+0x7a>
     51e:	6f e1       	ldi	r22, 0x1F	; 31
     520:	72 e0       	ldi	r23, 0x02	; 2
     522:	ce 01       	movw	r24, r28
     524:	49 96       	adiw	r24, 0x19	; 25
     526:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     52a:	11 11       	cpse	r17, r1
     52c:	03 c0       	rjmp	.+6      	; 0x534 <_Z12error_decodeh+0x8c>
     52e:	67 e2       	ldi	r22, 0x27	; 39
     530:	73 e0       	ldi	r23, 0x03	; 3
     532:	02 c0       	rjmp	.+4      	; 0x538 <_Z12error_decodeh+0x90>
     534:	63 e2       	ldi	r22, 0x23	; 35
     536:	72 e0       	ldi	r23, 0x02	; 2
     538:	ce 01       	movw	r24, r28
     53a:	4f 96       	adiw	r24, 0x1f	; 31
     53c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     540:	11 11       	cpse	r17, r1
     542:	03 c0       	rjmp	.+6      	; 0x54a <_Z12error_decodeh+0xa2>
     544:	67 e2       	ldi	r22, 0x27	; 39
     546:	73 e0       	ldi	r23, 0x03	; 3
     548:	02 c0       	rjmp	.+4      	; 0x54e <_Z12error_decodeh+0xa6>
     54a:	67 e2       	ldi	r22, 0x27	; 39
     54c:	72 e0       	ldi	r23, 0x02	; 2
     54e:	ce 01       	movw	r24, r28
     550:	85 96       	adiw	r24, 0x25	; 37
     552:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     556:	67 e2       	ldi	r22, 0x27	; 39
     558:	73 e0       	ldi	r23, 0x03	; 3
     55a:	ce 01       	movw	r24, r28
     55c:	8b 96       	adiw	r24, 0x2b	; 43
     55e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     562:	67 01       	movw	r12, r14
     564:	00 e0       	ldi	r16, 0x00	; 0
     566:	10 e0       	ldi	r17, 0x00	; 0
     568:	b6 01       	movw	r22, r12
     56a:	ce 01       	movw	r24, r28
     56c:	c1 96       	adiw	r24, 0x31	; 49
     56e:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN6StringC1ERKS_>
     572:	b8 01       	movw	r22, r16
     574:	ce 01       	movw	r24, r28
     576:	c1 96       	adiw	r24, 0x31	; 49
     578:	80 df       	rcall	.-256    	; 0x47a <_Z11printSerial6Stringi>
     57a:	ce 01       	movw	r24, r28
     57c:	c1 96       	adiw	r24, 0x31	; 49
     57e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
     582:	0f 5f       	subi	r16, 0xFF	; 255
     584:	1f 4f       	sbci	r17, 0xFF	; 255
     586:	96 e0       	ldi	r25, 0x06	; 6
     588:	c9 0e       	add	r12, r25
     58a:	d1 1c       	adc	r13, r1
     58c:	08 30       	cpi	r16, 0x08	; 8
     58e:	11 05       	cpc	r17, r1
     590:	59 f7       	brne	.-42     	; 0x568 <_Z12error_decodeh+0xc0>
     592:	8e 01       	movw	r16, r28
     594:	0f 5c       	subi	r16, 0xCF	; 207
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	06 50       	subi	r16, 0x06	; 6
     59a:	11 09       	sbc	r17, r1
     59c:	c8 01       	movw	r24, r16
     59e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
     5a2:	e0 16       	cp	r14, r16
     5a4:	f1 06       	cpc	r15, r17
     5a6:	c1 f7       	brne	.-16     	; 0x598 <_Z12error_decodeh+0xf0>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	e6 96       	adiw	r28, 0x36	; 54
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	08 95       	ret

000005ca <_Z8sumBytesPhh>:
     5ca:	38 2f       	mov	r19, r24
     5cc:	fc 01       	movw	r30, r24
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	2e 2f       	mov	r18, r30
     5d4:	23 1b       	sub	r18, r19
     5d6:	26 17       	cp	r18, r22
     5d8:	20 f4       	brcc	.+8      	; 0x5e2 <_Z8sumBytesPhh+0x18>
     5da:	21 91       	ld	r18, Z+
     5dc:	82 0f       	add	r24, r18
     5de:	91 1d       	adc	r25, r1
     5e0:	f8 cf       	rjmp	.-16     	; 0x5d2 <_Z8sumBytesPhh+0x8>
     5e2:	08 95       	ret

000005e4 <_GLOBAL__sub_I_position_old>:
     5e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     5e8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     5ec:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <currPos+0x1>
     5f0:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <currPos>
     5f4:	24 e0       	ldi	r18, 0x04	; 4
     5f6:	44 e1       	ldi	r20, 0x14	; 20
     5f8:	67 e2       	ldi	r22, 0x27	; 39
     5fa:	84 e5       	ldi	r24, 0x54	; 84
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	0c 94 14 12 	jmp	0x2428	; 0x2428 <_ZN17LiquidCrystal_I2CC1Ehhh>

00000602 <_Z10writeServohhPhh>:
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	18 2f       	mov	r17, r24
     610:	d6 2f       	mov	r29, r22
     612:	7a 01       	movw	r14, r20
     614:	02 2f       	mov	r16, r18
     616:	c6 e0       	ldi	r28, 0x06	; 6
     618:	c6 0f       	add	r28, r22
     61a:	c2 0f       	add	r28, r18
     61c:	62 2f       	mov	r22, r18
     61e:	ca 01       	movw	r24, r20
     620:	d4 df       	rcall	.-88     	; 0x5ca <_Z8sumBytesPhh>
     622:	c1 0f       	add	r28, r17
     624:	8c 0f       	add	r24, r28
     626:	c8 2f       	mov	r28, r24
     628:	c0 95       	com	r28
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 17 10 	call	0x202e	; 0x202e <delay>
     646:	6f ef       	ldi	r22, 0xFF	; 255
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	87 e3       	ldi	r24, 0x37	; 55
     64c:	94 e0       	ldi	r25, 0x04	; 4
     64e:	56 de       	rcall	.-852    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     650:	6f ef       	ldi	r22, 0xFF	; 255
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	87 e3       	ldi	r24, 0x37	; 55
     656:	94 e0       	ldi	r25, 0x04	; 4
     658:	51 de       	rcall	.-862    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     65a:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <serialWriting>
     65e:	88 23       	and	r24, r24
     660:	39 f0       	breq	.+14     	; 0x670 <_Z10writeServohhPhh+0x6e>
     662:	61 e0       	ldi	r22, 0x01	; 1
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 17 10 	call	0x202e	; 0x202e <delay>
     66e:	f5 cf       	rjmp	.-22     	; 0x65a <_Z10writeServohhPhh+0x58>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <serialWriting>
     676:	61 2f       	mov	r22, r17
     678:	87 e3       	ldi	r24, 0x37	; 55
     67a:	94 e0       	ldi	r25, 0x04	; 4
     67c:	0e 94 80 0c 	call	0x1900	; 0x1900 <_ZN14HardwareSerial5writeEh>
     680:	10 e0       	ldi	r17, 0x00	; 0
     682:	b8 01       	movw	r22, r16
     684:	6d 5f       	subi	r22, 0xFD	; 253
     686:	7f 4f       	sbci	r23, 0xFF	; 255
     688:	87 e3       	ldi	r24, 0x37	; 55
     68a:	94 e0       	ldi	r25, 0x04	; 4
     68c:	37 de       	rcall	.-914    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     68e:	63 e0       	ldi	r22, 0x03	; 3
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	87 e3       	ldi	r24, 0x37	; 55
     694:	94 e0       	ldi	r25, 0x04	; 4
     696:	32 de       	rcall	.-924    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     698:	6d 2f       	mov	r22, r29
     69a:	87 e3       	ldi	r24, 0x37	; 55
     69c:	94 e0       	ldi	r25, 0x04	; 4
     69e:	0e 94 80 0c 	call	0x1900	; 0x1900 <_ZN14HardwareSerial5writeEh>
     6a2:	a8 01       	movw	r20, r16
     6a4:	b7 01       	movw	r22, r14
     6a6:	87 e3       	ldi	r24, 0x37	; 55
     6a8:	94 e0       	ldi	r25, 0x04	; 4
     6aa:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN5Print5writeEPKhj>
     6ae:	6c 2f       	mov	r22, r28
     6b0:	87 e3       	ldi	r24, 0x37	; 55
     6b2:	94 e0       	ldi	r25, 0x04	; 4
     6b4:	0e 94 80 0c 	call	0x1900	; 0x1900 <_ZN14HardwareSerial5writeEh>
     6b8:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <serialWriting>
     6bc:	87 e3       	ldi	r24, 0x37	; 55
     6be:	94 e0       	ldi	r25, 0x04	; 4
     6c0:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN14HardwareSerial5flushEv>
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	0c 94 17 10 	jmp	0x202e	; 0x202e <delay>

000006ec <_Z9moveSpeedhii>:
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <_Z9moveSpeedhii+0x10>
     6fc:	1f 92       	push	r1
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	18 2f       	mov	r17, r24
     704:	d4 2e       	mov	r13, r20
     706:	e5 2e       	mov	r14, r21
     708:	9d de       	rcall	.-710    	; 0x444 <_Z13checkPositionhi>
     70a:	f8 2e       	mov	r15, r24
     70c:	09 2f       	mov	r16, r25
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	9a 83       	std	Y+2, r25	; 0x02
     712:	db 82       	std	Y+3, r13	; 0x03
     714:	ec 82       	std	Y+4, r14	; 0x04
     716:	24 e0       	ldi	r18, 0x04	; 4
     718:	ae 01       	movw	r20, r28
     71a:	4f 5f       	subi	r20, 0xFF	; 255
     71c:	5f 4f       	sbci	r21, 0xFF	; 255
     71e:	6e e1       	ldi	r22, 0x1E	; 30
     720:	81 2f       	mov	r24, r17
     722:	6f df       	rcall	.-290    	; 0x602 <_Z10writeServohhPhh>
     724:	f0 92 93 03 	sts	0x0393, r15	; 0x800393 <currPos>
     728:	00 93 94 03 	sts	0x0394, r16	; 0x800394 <currPos+0x1>
     72c:	89 e0       	ldi	r24, 0x09	; 9
     72e:	18 9f       	mul	r17, r24
     730:	f0 01       	movw	r30, r0
     732:	11 24       	eor	r1, r1
     734:	eb 59       	subi	r30, 0x9B	; 155
     736:	fc 4f       	sbci	r31, 0xFC	; 252
     738:	f3 82       	std	Z+3, r15	; 0x03
     73a:	04 83       	std	Z+4, r16	; 0x04
     73c:	d6 82       	std	Z+6, r13	; 0x06
     73e:	e7 82       	std	Z+7, r14	; 0x07
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	08 95       	ret

00000758 <_Z14setTorqueLimithi>:
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	1f 92       	push	r1
     75e:	1f 92       	push	r1
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	69 83       	std	Y+1, r22	; 0x01
     766:	7a 83       	std	Y+2, r23	; 0x02
     768:	22 e0       	ldi	r18, 0x02	; 2
     76a:	ae 01       	movw	r20, r28
     76c:	4f 5f       	subi	r20, 0xFF	; 255
     76e:	5f 4f       	sbci	r21, 0xFF	; 255
     770:	62 e2       	ldi	r22, 0x22	; 34
     772:	47 df       	rcall	.-370    	; 0x602 <_Z10writeServohhPhh>
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <_Z7setModehh>:
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <_Z7setModehh+0xa>
     788:	1f 92       	push	r1
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	18 2f       	mov	r17, r24
     790:	06 2f       	mov	r16, r22
     792:	61 30       	cpi	r22, 0x01	; 1
     794:	29 f4       	brne	.+10     	; 0x7a0 <_Z7setModehh+0x22>
     796:	19 82       	std	Y+1, r1	; 0x01
     798:	1a 82       	std	Y+2, r1	; 0x02
     79a:	1b 82       	std	Y+3, r1	; 0x03
     79c:	1c 82       	std	Y+4, r1	; 0x04
     79e:	08 c0       	rjmp	.+16     	; 0x7b0 <_Z7setModehh+0x32>
     7a0:	62 30       	cpi	r22, 0x02	; 2
     7a2:	81 f4       	brne	.+32     	; 0x7c4 <_Z7setModehh+0x46>
     7a4:	9f ef       	ldi	r25, 0xFF	; 255
     7a6:	99 83       	std	Y+1, r25	; 0x01
     7a8:	8f e0       	ldi	r24, 0x0F	; 15
     7aa:	8a 83       	std	Y+2, r24	; 0x02
     7ac:	9b 83       	std	Y+3, r25	; 0x03
     7ae:	8c 83       	std	Y+4, r24	; 0x04
     7b0:	24 e0       	ldi	r18, 0x04	; 4
     7b2:	ae 01       	movw	r20, r28
     7b4:	4f 5f       	subi	r20, 0xFF	; 255
     7b6:	5f 4f       	sbci	r21, 0xFF	; 255
     7b8:	66 e0       	ldi	r22, 0x06	; 6
     7ba:	81 2f       	mov	r24, r17
     7bc:	22 df       	rcall	.-444    	; 0x602 <_Z10writeServohhPhh>
     7be:	16 30       	cpi	r17, 0x06	; 6
     7c0:	a0 f0       	brcs	.+40     	; 0x7ea <_Z7setModehh+0x6c>
     7c2:	1a c0       	rjmp	.+52     	; 0x7f8 <_Z7setModehh+0x7a>
     7c4:	84 ee       	ldi	r24, 0xE4	; 228
     7c6:	89 83       	std	Y+1, r24	; 0x01
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	8a 83       	std	Y+2, r24	; 0x02
     7cc:	84 ea       	ldi	r24, 0xA4	; 164
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	86 e0       	ldi	r24, 0x06	; 6
     7d2:	8c 83       	std	Y+4, r24	; 0x04
     7d4:	24 e0       	ldi	r18, 0x04	; 4
     7d6:	ae 01       	movw	r20, r28
     7d8:	4f 5f       	subi	r20, 0xFF	; 255
     7da:	5f 4f       	sbci	r21, 0xFF	; 255
     7dc:	66 e0       	ldi	r22, 0x06	; 6
     7de:	81 2f       	mov	r24, r17
     7e0:	10 df       	rcall	.-480    	; 0x602 <_Z10writeServohhPhh>
     7e2:	16 30       	cpi	r17, 0x06	; 6
     7e4:	48 f4       	brcc	.+18     	; 0x7f8 <_Z7setModehh+0x7a>
     7e6:	03 30       	cpi	r16, 0x03	; 3
     7e8:	38 f4       	brcc	.+14     	; 0x7f8 <_Z7setModehh+0x7a>
     7ea:	89 e0       	ldi	r24, 0x09	; 9
     7ec:	18 9f       	mul	r17, r24
     7ee:	f0 01       	movw	r30, r0
     7f0:	11 24       	eor	r1, r1
     7f2:	eb 59       	subi	r30, 0x9B	; 155
     7f4:	fc 4f       	sbci	r31, 0xFC	; 252
     7f6:	02 83       	std	Z+2, r16	; 0x02
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <_Z12setModeWheelh>:
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	b8 cf       	rjmp	.-144    	; 0x77e <_Z7setModehh>

0000080e <_Z12setModeJointh>:
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	b6 cf       	rjmp	.-148    	; 0x77e <_Z7setModehh>

00000812 <_Z16setModeMultiTurnh>:
     812:	62 e0       	ldi	r22, 0x02	; 2
     814:	b4 cf       	rjmp	.-152    	; 0x77e <_Z7setModehh>

00000816 <__vector_9>:
     816:	1f 92       	push	r1
     818:	0f 92       	push	r0
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	0f 92       	push	r0
     81e:	11 24       	eor	r1, r1
     820:	0b b6       	in	r0, 0x3b	; 59
     822:	0f 92       	push	r0
     824:	2f 93       	push	r18
     826:	3f 93       	push	r19
     828:	4f 93       	push	r20
     82a:	5f 93       	push	r21
     82c:	6f 93       	push	r22
     82e:	7f 93       	push	r23
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	cf 93       	push	r28
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
     83e:	18 9b       	sbis	0x03, 0	; 3
     840:	1c c0       	rjmp	.+56     	; 0x87a <__vector_9+0x64>
     842:	2f 9a       	sbi	0x05, 7	; 5
     844:	c9 e0       	ldi	r28, 0x09	; 9
     846:	18 9b       	sbis	0x03, 0	; 3
     848:	17 c0       	rjmp	.+46     	; 0x878 <__vector_9+0x62>
     84a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <id>
     84e:	c8 9f       	mul	r28, r24
     850:	f0 01       	movw	r30, r0
     852:	11 24       	eor	r1, r1
     854:	eb 59       	subi	r30, 0x9B	; 155
     856:	fc 4f       	sbci	r31, 0xFC	; 252
     858:	63 81       	ldd	r22, Z+3	; 0x03
     85a:	74 81       	ldd	r23, Z+4	; 0x04
     85c:	61 50       	subi	r22, 0x01	; 1
     85e:	71 09       	sbc	r23, r1
     860:	74 83       	std	Z+4, r23	; 0x04
     862:	63 83       	std	Z+3, r22	; 0x03
     864:	44 e1       	ldi	r20, 0x14	; 20
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	41 df       	rcall	.-382    	; 0x6ec <_Z9moveSpeedhii>
     86a:	68 ec       	ldi	r22, 0xC8	; 200
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 17 10 	call	0x202e	; 0x202e <delay>
     876:	e7 cf       	rjmp	.-50     	; 0x846 <__vector_9+0x30>
     878:	2f 98       	cbi	0x05, 7	; 5
     87a:	19 9b       	sbis	0x03, 1	; 3
     87c:	1c c0       	rjmp	.+56     	; 0x8b6 <__vector_9+0xa0>
     87e:	2f 9a       	sbi	0x05, 7	; 5
     880:	c9 e0       	ldi	r28, 0x09	; 9
     882:	19 9b       	sbis	0x03, 1	; 3
     884:	17 c0       	rjmp	.+46     	; 0x8b4 <__vector_9+0x9e>
     886:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <id>
     88a:	c8 9f       	mul	r28, r24
     88c:	f0 01       	movw	r30, r0
     88e:	11 24       	eor	r1, r1
     890:	eb 59       	subi	r30, 0x9B	; 155
     892:	fc 4f       	sbci	r31, 0xFC	; 252
     894:	63 81       	ldd	r22, Z+3	; 0x03
     896:	74 81       	ldd	r23, Z+4	; 0x04
     898:	6f 5f       	subi	r22, 0xFF	; 255
     89a:	7f 4f       	sbci	r23, 0xFF	; 255
     89c:	74 83       	std	Z+4, r23	; 0x04
     89e:	63 83       	std	Z+3, r22	; 0x03
     8a0:	44 e1       	ldi	r20, 0x14	; 20
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	23 df       	rcall	.-442    	; 0x6ec <_Z9moveSpeedhii>
     8a6:	68 ec       	ldi	r22, 0xC8	; 200
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 17 10 	call	0x202e	; 0x202e <delay>
     8b2:	e7 cf       	rjmp	.-50     	; 0x882 <__vector_9+0x6c>
     8b4:	2f 98       	cbi	0x05, 7	; 5
     8b6:	1a 9b       	sbis	0x03, 2	; 3
     8b8:	22 c0       	rjmp	.+68     	; 0x8fe <__vector_9+0xe8>
     8ba:	1f 9a       	sbi	0x03, 7	; 3
     8bc:	64 e1       	ldi	r22, 0x14	; 20
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 17 10 	call	0x202e	; 0x202e <delay>
     8c8:	1a 9b       	sbis	0x03, 2	; 3
     8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <__vector_9+0xc0>
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	f7 cf       	rjmp	.-18     	; 0x8c4 <__vector_9+0xae>
     8d6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <id>
     8da:	85 30       	cpi	r24, 0x05	; 5
     8dc:	10 f4       	brcc	.+4      	; 0x8e2 <__vector_9+0xcc>
     8de:	8f 5f       	subi	r24, 0xFF	; 255
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <__vector_9+0xce>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <id>
     8e8:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <arm>
     8ec:	84 30       	cpi	r24, 0x04	; 4
     8ee:	10 f0       	brcs	.+4      	; 0x8f4 <__vector_9+0xde>
     8f0:	8e df       	rcall	.-228    	; 0x80e <_Z12setModeJointh>
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <__vector_9+0xe8>
     8f4:	83 30       	cpi	r24, 0x03	; 3
     8f6:	11 f4       	brne	.+4      	; 0x8fc <__vector_9+0xe6>
     8f8:	8c df       	rcall	.-232    	; 0x812 <_Z16setModeMultiTurnh>
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <__vector_9+0xe8>
     8fc:	86 df       	rcall	.-244    	; 0x80a <_Z12setModeWheelh>
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	cf 91       	pop	r28
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	0b be       	out	0x3b, r0	; 59
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <_Z9readServohhh>:
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	c8 2f       	mov	r28, r24
     92e:	d6 2f       	mov	r29, r22
     930:	14 2f       	mov	r17, r20
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 17 10 	call	0x202e	; 0x202e <delay>
     94e:	6f ef       	ldi	r22, 0xFF	; 255
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	87 e3       	ldi	r24, 0x37	; 55
     954:	94 e0       	ldi	r25, 0x04	; 4
     956:	d2 dc       	rcall	.-1628   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     958:	6f ef       	ldi	r22, 0xFF	; 255
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	87 e3       	ldi	r24, 0x37	; 55
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	cd dc       	rcall	.-1638   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <serialWriting>
     968:	6c 2f       	mov	r22, r28
     96a:	87 e3       	ldi	r24, 0x37	; 55
     96c:	94 e0       	ldi	r25, 0x04	; 4
     96e:	c8 d7       	rcall	.+3984   	; 0x1900 <_ZN14HardwareSerial5writeEh>
     970:	64 e0       	ldi	r22, 0x04	; 4
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	87 e3       	ldi	r24, 0x37	; 55
     976:	94 e0       	ldi	r25, 0x04	; 4
     978:	c1 dc       	rcall	.-1662   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     97a:	62 e0       	ldi	r22, 0x02	; 2
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	87 e3       	ldi	r24, 0x37	; 55
     980:	94 e0       	ldi	r25, 0x04	; 4
     982:	bc dc       	rcall	.-1672   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     984:	6d 2f       	mov	r22, r29
     986:	87 e3       	ldi	r24, 0x37	; 55
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	ba d7       	rcall	.+3956   	; 0x1900 <_ZN14HardwareSerial5writeEh>
     98c:	61 2f       	mov	r22, r17
     98e:	87 e3       	ldi	r24, 0x37	; 55
     990:	94 e0       	ldi	r25, 0x04	; 4
     992:	b6 d7       	rcall	.+3948   	; 0x1900 <_ZN14HardwareSerial5writeEh>
     994:	66 e0       	ldi	r22, 0x06	; 6
     996:	61 0f       	add	r22, r17
     998:	6d 0f       	add	r22, r29
     99a:	6c 0f       	add	r22, r28
     99c:	60 95       	com	r22
     99e:	87 e3       	ldi	r24, 0x37	; 55
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	ae d7       	rcall	.+3932   	; 0x1900 <_ZN14HardwareSerial5writeEh>
     9a4:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <serialWriting>
     9a8:	87 e3       	ldi	r24, 0x37	; 55
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	f5 d7       	rcall	.+4074   	; 0x1998 <_ZN14HardwareSerial5flushEv>
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0c 94 17 10 	jmp	0x202e	; 0x202e <delay>

000009d0 <_Z7getDatahhh>:

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
<<<<<<< HEAD
     a90:	2f 92       	push	r2
     a92:	3f 92       	push	r3
     a94:	4f 92       	push	r4
     a96:	5f 92       	push	r5
     a98:	6f 92       	push	r6
     a9a:	7f 92       	push	r7
     a9c:	8f 92       	push	r8
     a9e:	9f 92       	push	r9
     aa0:	af 92       	push	r10
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <_Z7getDatahhh+0x26>
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <_Z7getDatahhh+0x28>
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	f4 2e       	mov	r15, r20
=======
     35e:	4f d7       	rcall	.+3742   	; 0x11fe <__floatunsisf>
     360:	9b 01       	movw	r18, r22
     362:	ac 01       	movw	r20, r24
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e2       	ldi	r24, 0x20	; 32
     36a:	91 e4       	ldi	r25, 0x41	; 65
     36c:	0e 94 14 0a 	call	0x1428	; 0x1428 <pow>
     370:	2b 01       	movw	r4, r22
     372:	3c 01       	movw	r6, r24
     374:	b8 01       	movw	r22, r16
     376:	01 2e       	mov	r0, r17
     378:	00 0c       	add	r0, r0
     37a:	88 0b       	sbc	r24, r24
     37c:	99 0b       	sbc	r25, r25
     37e:	41 d7       	rcall	.+3714   	; 0x1202 <__floatsisf>
     380:	a3 01       	movw	r20, r6
     382:	92 01       	movw	r18, r4
     384:	07 d7       	rcall	.+3598   	; 0x1194 <__cmpsf2>
     386:	87 fd       	sbrc	r24, 7
     388:	09 c0       	rjmp	.+18     	; 0x39c <_Z8printLCDhhih+0x92>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 e8       	ldi	r20, 0x80	; 128
     390:	5f e3       	ldi	r21, 0x3F	; 63
     392:	c3 01       	movw	r24, r6
     394:	b2 01       	movw	r22, r4
     396:	99 d6       	rcall	.+3378   	; 0x10ca <__subsf3>
     398:	01 d7       	rcall	.+3586   	; 0x119c <__fixsfsi>
     39a:	8b 01       	movw	r16, r22
     39c:	1f 92       	push	r1
     39e:	df 92       	push	r13
     3a0:	81 e1       	ldi	r24, 0x11	; 17
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	9f 93       	push	r25
     3a6:	8f 93       	push	r24
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	6c 01       	movw	r12, r24
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	0e 94 1c 18 	call	0x3038	; 0x3038 <sprintf>
     3b6:	1f 93       	push	r17
     3b8:	0f 93       	push	r16
     3ba:	df 92       	push	r13
     3bc:	cf 92       	push	r12
     3be:	ff 92       	push	r15
     3c0:	ef 92       	push	r14
     3c2:	0e 94 1c 18 	call	0x3038	; 0x3038 <sprintf>
     3c6:	48 2d       	mov	r20, r8
     3c8:	69 2d       	mov	r22, r9
     3ca:	84 e5       	ldi	r24, 0x54	; 84
     3cc:	93 e0       	ldi	r25, 0x03	; 3
     3ce:	0e 94 75 12 	call	0x24ea	; 0x24ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3d2:	b7 01       	movw	r22, r14
     3d4:	84 e5       	ldi	r24, 0x54	; 84
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN5Print5printEPKc>
     3dc:	8d b7       	in	r24, 0x3d	; 61
     3de:	9e b7       	in	r25, 0x3e	; 62
     3e0:	0c 96       	adiw	r24, 0x0c	; 12
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	9e bf       	out	0x3e, r25	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	8d bf       	out	0x3d, r24	; 61
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	be be       	out	0x3e, r11	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	ad be       	out	0x3d, r10	; 61
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	bf 90       	pop	r11
     412:	af 90       	pop	r10
     414:	9f 90       	pop	r9
     416:	8f 90       	pop	r8
     418:	7f 90       	pop	r7
     41a:	6f 90       	pop	r6
     41c:	5f 90       	pop	r5
     41e:	4f 90       	pop	r4
     420:	08 95       	ret

00000422 <_Z13setupSwitchesv>:
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	84 b9       	out	0x04, r24	; 4
     426:	84 b1       	in	r24, 0x04	; 4
     428:	88 7f       	andi	r24, 0xF8	; 248
     42a:	84 b9       	out	0x04, r24	; 4
     42c:	eb e6       	ldi	r30, 0x6B	; 107
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	87 60       	ori	r24, 0x07	; 7
     434:	80 83       	st	Z, r24
     436:	e8 e6       	ldi	r30, 0x68	; 104
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	81 60       	ori	r24, 0x01	; 1
     43e:	80 83       	st	Z, r24
     440:	78 94       	sei
     442:	08 95       	ret

00000444 <_Z11printSerial6Stringi>:
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	eb 01       	movw	r28, r22
     44a:	bc 01       	movw	r22, r24
     44c:	8a e9       	ldi	r24, 0x9A	; 154
     44e:	93 e0       	ldi	r25, 0x03	; 3
     450:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN5Print5printERK6String>
     454:	66 e3       	ldi	r22, 0x36	; 54
     456:	72 e0       	ldi	r23, 0x02	; 2
     458:	8a e9       	ldi	r24, 0x9A	; 154
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN5Print5printEPKc>
     460:	4a e0       	ldi	r20, 0x0A	; 10
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	be 01       	movw	r22, r28
     466:	8a e9       	ldi	r24, 0x9A	; 154
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <_ZN5Print7printlnEii>

00000472 <_Z12error_decodeh>:
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	e6 97       	sbiw	r28, 0x36	; 54
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
     492:	08 2f       	mov	r16, r24
     494:	67 e2       	ldi	r22, 0x27	; 39
     496:	73 e0       	ldi	r23, 0x03	; 3
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	7c 01       	movw	r14, r24
     49e:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     4a2:	67 e2       	ldi	r22, 0x27	; 39
     4a4:	73 e0       	ldi	r23, 0x03	; 3
     4a6:	ce 01       	movw	r24, r28
     4a8:	07 96       	adiw	r24, 0x07	; 7
     4aa:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     4ae:	10 2f       	mov	r17, r16
     4b0:	11 70       	andi	r17, 0x01	; 1
     4b2:	00 fd       	sbrc	r16, 0
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <_Z12error_decodeh+0x4a>
     4b6:	67 e2       	ldi	r22, 0x27	; 39
     4b8:	73 e0       	ldi	r23, 0x03	; 3
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <_Z12error_decodeh+0x4e>
     4bc:	67 e1       	ldi	r22, 0x17	; 23
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	ce 01       	movw	r24, r28
     4c2:	0d 96       	adiw	r24, 0x0d	; 13
     4c4:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     4c8:	11 11       	cpse	r17, r1
     4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <_Z12error_decodeh+0x60>
     4cc:	67 e2       	ldi	r22, 0x27	; 39
     4ce:	73 e0       	ldi	r23, 0x03	; 3
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <_Z12error_decodeh+0x64>
     4d2:	6b e1       	ldi	r22, 0x1B	; 27
     4d4:	72 e0       	ldi	r23, 0x02	; 2
     4d6:	ce 01       	movw	r24, r28
     4d8:	43 96       	adiw	r24, 0x13	; 19
     4da:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     4de:	11 11       	cpse	r17, r1
     4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <_Z12error_decodeh+0x76>
     4e2:	67 e2       	ldi	r22, 0x27	; 39
     4e4:	73 e0       	ldi	r23, 0x03	; 3
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <_Z12error_decodeh+0x7a>
     4e8:	6f e1       	ldi	r22, 0x1F	; 31
     4ea:	72 e0       	ldi	r23, 0x02	; 2
     4ec:	ce 01       	movw	r24, r28
     4ee:	49 96       	adiw	r24, 0x19	; 25
     4f0:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     4f4:	11 11       	cpse	r17, r1
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <_Z12error_decodeh+0x8c>
     4f8:	67 e2       	ldi	r22, 0x27	; 39
     4fa:	73 e0       	ldi	r23, 0x03	; 3
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <_Z12error_decodeh+0x90>
     4fe:	63 e2       	ldi	r22, 0x23	; 35
     500:	72 e0       	ldi	r23, 0x02	; 2
     502:	ce 01       	movw	r24, r28
     504:	4f 96       	adiw	r24, 0x1f	; 31
     506:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     50a:	11 11       	cpse	r17, r1
     50c:	03 c0       	rjmp	.+6      	; 0x514 <_Z12error_decodeh+0xa2>
     50e:	67 e2       	ldi	r22, 0x27	; 39
     510:	73 e0       	ldi	r23, 0x03	; 3
     512:	02 c0       	rjmp	.+4      	; 0x518 <_Z12error_decodeh+0xa6>
     514:	67 e2       	ldi	r22, 0x27	; 39
     516:	72 e0       	ldi	r23, 0x02	; 2
     518:	ce 01       	movw	r24, r28
     51a:	85 96       	adiw	r24, 0x25	; 37
     51c:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     520:	67 e2       	ldi	r22, 0x27	; 39
     522:	73 e0       	ldi	r23, 0x03	; 3
     524:	ce 01       	movw	r24, r28
     526:	8b 96       	adiw	r24, 0x2b	; 43
     528:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     52c:	67 01       	movw	r12, r14
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	b6 01       	movw	r22, r12
     534:	ce 01       	movw	r24, r28
     536:	c1 96       	adiw	r24, 0x31	; 49
     538:	0e 94 07 12 	call	0x240e	; 0x240e <_ZN6StringC1ERKS_>
     53c:	b8 01       	movw	r22, r16
     53e:	ce 01       	movw	r24, r28
     540:	c1 96       	adiw	r24, 0x31	; 49
     542:	80 df       	rcall	.-256    	; 0x444 <_Z11printSerial6Stringi>
     544:	ce 01       	movw	r24, r28
     546:	c1 96       	adiw	r24, 0x31	; 49
     548:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
     54c:	0f 5f       	subi	r16, 0xFF	; 255
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	96 e0       	ldi	r25, 0x06	; 6
     552:	c9 0e       	add	r12, r25
     554:	d1 1c       	adc	r13, r1
     556:	08 30       	cpi	r16, 0x08	; 8
     558:	11 05       	cpc	r17, r1
     55a:	59 f7       	brne	.-42     	; 0x532 <_Z12error_decodeh+0xc0>
     55c:	8e 01       	movw	r16, r28
     55e:	0f 5c       	subi	r16, 0xCF	; 207
     560:	1f 4f       	sbci	r17, 0xFF	; 255
     562:	06 50       	subi	r16, 0x06	; 6
     564:	11 09       	sbc	r17, r1
     566:	c8 01       	movw	r24, r16
     568:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
     56c:	e0 16       	cp	r14, r16
     56e:	f1 06       	cpc	r15, r17
     570:	c1 f7       	brne	.-16     	; 0x562 <_Z12error_decodeh+0xf0>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	e6 96       	adiw	r28, 0x36	; 54
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	08 95       	ret

00000594 <_Z8sumBytesPhh>:
     594:	38 2f       	mov	r19, r24
     596:	fc 01       	movw	r30, r24
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	2e 2f       	mov	r18, r30
     59e:	23 1b       	sub	r18, r19
     5a0:	26 17       	cp	r18, r22
     5a2:	20 f4       	brcc	.+8      	; 0x5ac <_Z8sumBytesPhh+0x18>
     5a4:	21 91       	ld	r18, Z+
     5a6:	82 0f       	add	r24, r18
     5a8:	91 1d       	adc	r25, r1
     5aa:	f8 cf       	rjmp	.-16     	; 0x59c <_Z8sumBytesPhh+0x8>
     5ac:	08 95       	ret

000005ae <_GLOBAL__sub_I_position_old>:
     5ae:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <angle>
     5b2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <angle+0x1>
     5b6:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <currPos+0x1>
     5ba:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <currPos>
     5be:	24 e0       	ldi	r18, 0x04	; 4
     5c0:	44 e1       	ldi	r20, 0x14	; 20
     5c2:	67 e2       	ldi	r22, 0x27	; 39
     5c4:	84 e5       	ldi	r24, 0x54	; 84
     5c6:	93 e0       	ldi	r25, 0x03	; 3
     5c8:	0c 94 0f 12 	jmp	0x241e	; 0x241e <_ZN17LiquidCrystal_I2CC1Ehhh>

000005cc <_Z10writeServohhPhh>:
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	18 2f       	mov	r17, r24
     5da:	d6 2f       	mov	r29, r22
     5dc:	7a 01       	movw	r14, r20
     5de:	02 2f       	mov	r16, r18
     5e0:	c6 e0       	ldi	r28, 0x06	; 6
     5e2:	c6 0f       	add	r28, r22
     5e4:	c2 0f       	add	r28, r18
     5e6:	62 2f       	mov	r22, r18
     5e8:	ca 01       	movw	r24, r20
     5ea:	d4 df       	rcall	.-88     	; 0x594 <_Z8sumBytesPhh>
     5ec:	c1 0f       	add	r28, r17
     5ee:	8c 0f       	add	r24, r28
     5f0:	c8 2f       	mov	r28, r24
     5f2:	c0 95       	com	r28
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	0e 94 49 11 	call	0x2292	; 0x2292 <digitalWrite>
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	0e 94 49 11 	call	0x2292	; 0x2292 <digitalWrite>
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
     610:	6f ef       	ldi	r22, 0xFF	; 255
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	87 e3       	ldi	r24, 0x37	; 55
     616:	94 e0       	ldi	r25, 0x04	; 4
     618:	71 de       	rcall	.-798    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     61a:	6f ef       	ldi	r22, 0xFF	; 255
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	87 e3       	ldi	r24, 0x37	; 55
     620:	94 e0       	ldi	r25, 0x04	; 4
     622:	6c de       	rcall	.-808    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     624:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <serialWriting>
     628:	88 23       	and	r24, r24
     62a:	39 f0       	breq	.+14     	; 0x63a <_Z10writeServohhPhh+0x6e>
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
     638:	f5 cf       	rjmp	.-22     	; 0x624 <_Z10writeServohhPhh+0x58>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <serialWriting>
     640:	61 2f       	mov	r22, r17
     642:	87 e3       	ldi	r24, 0x37	; 55
     644:	94 e0       	ldi	r25, 0x04	; 4
     646:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <_ZN14HardwareSerial5writeEh>
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	b8 01       	movw	r22, r16
     64e:	6d 5f       	subi	r22, 0xFD	; 253
     650:	7f 4f       	sbci	r23, 0xFF	; 255
     652:	87 e3       	ldi	r24, 0x37	; 55
     654:	94 e0       	ldi	r25, 0x04	; 4
     656:	52 de       	rcall	.-860    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	87 e3       	ldi	r24, 0x37	; 55
     65e:	94 e0       	ldi	r25, 0x04	; 4
     660:	4d de       	rcall	.-870    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     662:	6d 2f       	mov	r22, r29
     664:	87 e3       	ldi	r24, 0x37	; 55
     666:	94 e0       	ldi	r25, 0x04	; 4
     668:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <_ZN14HardwareSerial5writeEh>
     66c:	a8 01       	movw	r20, r16
     66e:	b7 01       	movw	r22, r14
     670:	87 e3       	ldi	r24, 0x37	; 55
     672:	94 e0       	ldi	r25, 0x04	; 4
     674:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN5Print5writeEPKhj>
     678:	6c 2f       	mov	r22, r28
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	87 e3       	ldi	r24, 0x37	; 55
     67e:	94 e0       	ldi	r25, 0x04	; 4
     680:	3d de       	rcall	.-902    	; 0x2fc <_ZN14HardwareSerial5writeEi>
     682:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <serialWriting>
     686:	87 e3       	ldi	r24, 0x37	; 55
     688:	94 e0       	ldi	r25, 0x04	; 4
     68a:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN14HardwareSerial5flushEv>
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	0e 94 49 11 	call	0x2292	; 0x2292 <digitalWrite>
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	0e 94 49 11 	call	0x2292	; 0x2292 <digitalWrite>
     69e:	61 e0       	ldi	r22, 0x01	; 1
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	0c 94 12 10 	jmp	0x2024	; 0x2024 <delay>

000006b6 <_Z9moveSpeedhii>:
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <_Z9moveSpeedhii+0x10>
     6c6:	1f 92       	push	r1
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	f8 2e       	mov	r15, r24
     6ce:	8b 01       	movw	r16, r22
     6d0:	d4 2e       	mov	r13, r20
     6d2:	e5 2e       	mov	r14, r21
     6d4:	83 e0       	ldi	r24, 0x03	; 3
     6d6:	f8 12       	cpse	r15, r24
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <_Z9moveSpeedhii+0x2e>
     6da:	77 ff       	sbrs	r23, 7
     6dc:	0c c0       	rjmp	.+24     	; 0x6f6 <_Z9moveSpeedhii+0x40>
     6de:	00 e0       	ldi	r16, 0x00	; 0
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <_Z9moveSpeedhii+0x40>
     6e4:	8c ef       	ldi	r24, 0xFC	; 252
     6e6:	8f 0d       	add	r24, r15
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	58 f4       	brcc	.+22     	; 0x702 <_Z9moveSpeedhii+0x4c>
     6ec:	64 3e       	cpi	r22, 0xE4	; 228
     6ee:	72 40       	sbci	r23, 0x02	; 2
     6f0:	14 f4       	brge	.+4      	; 0x6f6 <_Z9moveSpeedhii+0x40>
     6f2:	04 ee       	ldi	r16, 0xE4	; 228
     6f4:	12 e0       	ldi	r17, 0x02	; 2
     6f6:	05 3a       	cpi	r16, 0xA5	; 165
     6f8:	86 e0       	ldi	r24, 0x06	; 6
     6fa:	18 07       	cpc	r17, r24
     6fc:	14 f0       	brlt	.+4      	; 0x702 <_Z9moveSpeedhii+0x4c>
     6fe:	04 ea       	ldi	r16, 0xA4	; 164
     700:	16 e0       	ldi	r17, 0x06	; 6
     702:	09 83       	std	Y+1, r16	; 0x01
     704:	1a 83       	std	Y+2, r17	; 0x02
     706:	db 82       	std	Y+3, r13	; 0x03
     708:	ec 82       	std	Y+4, r14	; 0x04
     70a:	24 e0       	ldi	r18, 0x04	; 4
     70c:	ae 01       	movw	r20, r28
     70e:	4f 5f       	subi	r20, 0xFF	; 255
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	6e e1       	ldi	r22, 0x1E	; 30
     714:	8f 2d       	mov	r24, r15
     716:	5a df       	rcall	.-332    	; 0x5cc <_Z10writeServohhPhh>
     718:	10 93 94 03 	sts	0x0394, r17	; 0x800394 <currPos+0x1>
     71c:	00 93 93 03 	sts	0x0393, r16	; 0x800393 <currPos>
     720:	89 e0       	ldi	r24, 0x09	; 9
     722:	f8 9e       	mul	r15, r24
     724:	f0 01       	movw	r30, r0
     726:	11 24       	eor	r1, r1
     728:	eb 59       	subi	r30, 0x9B	; 155
     72a:	fc 4f       	sbci	r31, 0xFC	; 252
     72c:	14 83       	std	Z+4, r17	; 0x04
     72e:	03 83       	std	Z+3, r16	; 0x03
     730:	d6 82       	std	Z+6, r13	; 0x06
     732:	e7 82       	std	Z+7, r14	; 0x07
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	08 95       	ret

0000074c <_Z14setTorqueLimithi>:
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	1f 92       	push	r1
     752:	1f 92       	push	r1
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	69 83       	std	Y+1, r22	; 0x01
     75a:	7a 83       	std	Y+2, r23	; 0x02
     75c:	22 e0       	ldi	r18, 0x02	; 2
     75e:	ae 01       	movw	r20, r28
     760:	4f 5f       	subi	r20, 0xFF	; 255
     762:	5f 4f       	sbci	r21, 0xFF	; 255
     764:	62 e2       	ldi	r22, 0x22	; 34
     766:	32 df       	rcall	.-412    	; 0x5cc <_Z10writeServohhPhh>
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <_Z7setModehh>:
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	00 d0       	rcall	.+0      	; 0x77c <_Z7setModehh+0xa>
     77c:	1f 92       	push	r1
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	18 2f       	mov	r17, r24
     784:	06 2f       	mov	r16, r22
     786:	61 30       	cpi	r22, 0x01	; 1
     788:	29 f4       	brne	.+10     	; 0x794 <_Z7setModehh+0x22>
     78a:	19 82       	std	Y+1, r1	; 0x01
     78c:	1a 82       	std	Y+2, r1	; 0x02
     78e:	1b 82       	std	Y+3, r1	; 0x03
     790:	1c 82       	std	Y+4, r1	; 0x04
     792:	08 c0       	rjmp	.+16     	; 0x7a4 <_Z7setModehh+0x32>
     794:	62 30       	cpi	r22, 0x02	; 2
     796:	81 f4       	brne	.+32     	; 0x7b8 <_Z7setModehh+0x46>
     798:	9f ef       	ldi	r25, 0xFF	; 255
     79a:	99 83       	std	Y+1, r25	; 0x01
     79c:	8f e0       	ldi	r24, 0x0F	; 15
     79e:	8a 83       	std	Y+2, r24	; 0x02
     7a0:	9b 83       	std	Y+3, r25	; 0x03
     7a2:	8c 83       	std	Y+4, r24	; 0x04
     7a4:	24 e0       	ldi	r18, 0x04	; 4
     7a6:	ae 01       	movw	r20, r28
     7a8:	4f 5f       	subi	r20, 0xFF	; 255
     7aa:	5f 4f       	sbci	r21, 0xFF	; 255
     7ac:	66 e0       	ldi	r22, 0x06	; 6
     7ae:	81 2f       	mov	r24, r17
     7b0:	0d df       	rcall	.-486    	; 0x5cc <_Z10writeServohhPhh>
     7b2:	16 30       	cpi	r17, 0x06	; 6
     7b4:	a0 f0       	brcs	.+40     	; 0x7de <_Z7setModehh+0x6c>
     7b6:	1a c0       	rjmp	.+52     	; 0x7ec <_Z7setModehh+0x7a>
     7b8:	84 ee       	ldi	r24, 0xE4	; 228
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	8a 83       	std	Y+2, r24	; 0x02
     7c0:	84 ea       	ldi	r24, 0xA4	; 164
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	86 e0       	ldi	r24, 0x06	; 6
     7c6:	8c 83       	std	Y+4, r24	; 0x04
     7c8:	24 e0       	ldi	r18, 0x04	; 4
     7ca:	ae 01       	movw	r20, r28
     7cc:	4f 5f       	subi	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	66 e0       	ldi	r22, 0x06	; 6
     7d2:	81 2f       	mov	r24, r17
     7d4:	fb de       	rcall	.-522    	; 0x5cc <_Z10writeServohhPhh>
     7d6:	16 30       	cpi	r17, 0x06	; 6
     7d8:	48 f4       	brcc	.+18     	; 0x7ec <_Z7setModehh+0x7a>
     7da:	03 30       	cpi	r16, 0x03	; 3
     7dc:	38 f4       	brcc	.+14     	; 0x7ec <_Z7setModehh+0x7a>
     7de:	89 e0       	ldi	r24, 0x09	; 9
     7e0:	18 9f       	mul	r17, r24
     7e2:	f0 01       	movw	r30, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	eb 59       	subi	r30, 0x9B	; 155
     7e8:	fc 4f       	sbci	r31, 0xFC	; 252
     7ea:	02 83       	std	Z+2, r16	; 0x02
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <_Z12setModeWheelh>:
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	b8 cf       	rjmp	.-144    	; 0x772 <_Z7setModehh>

00000802 <_Z12setModeJointh>:
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	b6 cf       	rjmp	.-148    	; 0x772 <_Z7setModehh>

00000806 <_Z16setModeMultiTurnh>:
     806:	62 e0       	ldi	r22, 0x02	; 2
     808:	b4 cf       	rjmp	.-152    	; 0x772 <_Z7setModehh>

0000080a <__vector_9>:
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	0f 92       	push	r0
     812:	11 24       	eor	r1, r1
     814:	0b b6       	in	r0, 0x3b	; 59
     816:	0f 92       	push	r0
     818:	2f 93       	push	r18
     81a:	3f 93       	push	r19
     81c:	4f 93       	push	r20
     81e:	5f 93       	push	r21
     820:	6f 93       	push	r22
     822:	7f 93       	push	r23
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	cf 93       	push	r28
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
     832:	18 9b       	sbis	0x03, 0	; 3
     834:	1c c0       	rjmp	.+56     	; 0x86e <__vector_9+0x64>
     836:	2f 9a       	sbi	0x05, 7	; 5
     838:	c9 e0       	ldi	r28, 0x09	; 9
     83a:	18 9b       	sbis	0x03, 0	; 3
     83c:	17 c0       	rjmp	.+46     	; 0x86c <__vector_9+0x62>
     83e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <id>
     842:	c8 9f       	mul	r28, r24
     844:	f0 01       	movw	r30, r0
     846:	11 24       	eor	r1, r1
     848:	eb 59       	subi	r30, 0x9B	; 155
     84a:	fc 4f       	sbci	r31, 0xFC	; 252
     84c:	63 81       	ldd	r22, Z+3	; 0x03
     84e:	74 81       	ldd	r23, Z+4	; 0x04
     850:	61 50       	subi	r22, 0x01	; 1
     852:	71 09       	sbc	r23, r1
     854:	74 83       	std	Z+4, r23	; 0x04
     856:	63 83       	std	Z+3, r22	; 0x03
     858:	44 e1       	ldi	r20, 0x14	; 20
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	2c df       	rcall	.-424    	; 0x6b6 <_Z9moveSpeedhii>
     85e:	68 ec       	ldi	r22, 0xC8	; 200
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
     86a:	e7 cf       	rjmp	.-50     	; 0x83a <__vector_9+0x30>
     86c:	2f 98       	cbi	0x05, 7	; 5
     86e:	19 9b       	sbis	0x03, 1	; 3
     870:	1c c0       	rjmp	.+56     	; 0x8aa <__vector_9+0xa0>
     872:	2f 9a       	sbi	0x05, 7	; 5
     874:	c9 e0       	ldi	r28, 0x09	; 9
     876:	19 9b       	sbis	0x03, 1	; 3
     878:	17 c0       	rjmp	.+46     	; 0x8a8 <__vector_9+0x9e>
     87a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <id>
     87e:	c8 9f       	mul	r28, r24
     880:	f0 01       	movw	r30, r0
     882:	11 24       	eor	r1, r1
     884:	eb 59       	subi	r30, 0x9B	; 155
     886:	fc 4f       	sbci	r31, 0xFC	; 252
     888:	63 81       	ldd	r22, Z+3	; 0x03
     88a:	74 81       	ldd	r23, Z+4	; 0x04
     88c:	6f 5f       	subi	r22, 0xFF	; 255
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	74 83       	std	Z+4, r23	; 0x04
     892:	63 83       	std	Z+3, r22	; 0x03
     894:	44 e1       	ldi	r20, 0x14	; 20
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	0e df       	rcall	.-484    	; 0x6b6 <_Z9moveSpeedhii>
     89a:	68 ec       	ldi	r22, 0xC8	; 200
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
     8a6:	e7 cf       	rjmp	.-50     	; 0x876 <__vector_9+0x6c>
     8a8:	2f 98       	cbi	0x05, 7	; 5
     8aa:	1a 9b       	sbis	0x03, 2	; 3
     8ac:	22 c0       	rjmp	.+68     	; 0x8f2 <__vector_9+0xe8>
     8ae:	1f 9a       	sbi	0x03, 7	; 3
     8b0:	64 e1       	ldi	r22, 0x14	; 20
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
     8bc:	1a 9b       	sbis	0x03, 2	; 3
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <__vector_9+0xc0>
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	f7 cf       	rjmp	.-18     	; 0x8b8 <__vector_9+0xae>
     8ca:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <id>
     8ce:	85 30       	cpi	r24, 0x05	; 5
     8d0:	10 f4       	brcc	.+4      	; 0x8d6 <__vector_9+0xcc>
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__vector_9+0xce>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <id>
     8dc:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <arm>
     8e0:	84 30       	cpi	r24, 0x04	; 4
     8e2:	10 f0       	brcs	.+4      	; 0x8e8 <__vector_9+0xde>
     8e4:	8e df       	rcall	.-228    	; 0x802 <_Z12setModeJointh>
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <__vector_9+0xe8>
     8e8:	83 30       	cpi	r24, 0x03	; 3
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <__vector_9+0xe6>
     8ec:	8c df       	rcall	.-232    	; 0x806 <_Z16setModeMultiTurnh>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__vector_9+0xe8>
     8f0:	86 df       	rcall	.-244    	; 0x7fe <_Z12setModeWheelh>
     8f2:	ff 91       	pop	r31
     8f4:	ef 91       	pop	r30
     8f6:	cf 91       	pop	r28
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	0f 90       	pop	r0
     90e:	0b be       	out	0x3b, r0	; 59
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti

0000091a <_Z9readServohhh>:
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	c8 2f       	mov	r28, r24
     922:	d6 2f       	mov	r29, r22
     924:	14 2f       	mov	r17, r20
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	0e 94 49 11 	call	0x2292	; 0x2292 <digitalWrite>
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	0e 94 49 11 	call	0x2292	; 0x2292 <digitalWrite>
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
     942:	6f ef       	ldi	r22, 0xFF	; 255
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	87 e3       	ldi	r24, 0x37	; 55
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	d8 dc       	rcall	.-1616   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     94c:	6f ef       	ldi	r22, 0xFF	; 255
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	87 e3       	ldi	r24, 0x37	; 55
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	d3 dc       	rcall	.-1626   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <serialWriting>
     95c:	6c 2f       	mov	r22, r28
     95e:	87 e3       	ldi	r24, 0x37	; 55
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	c9 d7       	rcall	.+3986   	; 0x18f6 <_ZN14HardwareSerial5writeEh>
     964:	64 e0       	ldi	r22, 0x04	; 4
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	87 e3       	ldi	r24, 0x37	; 55
     96a:	94 e0       	ldi	r25, 0x04	; 4
     96c:	c7 dc       	rcall	.-1650   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     96e:	62 e0       	ldi	r22, 0x02	; 2
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	87 e3       	ldi	r24, 0x37	; 55
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	c2 dc       	rcall	.-1660   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     978:	6d 2f       	mov	r22, r29
     97a:	87 e3       	ldi	r24, 0x37	; 55
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	bb d7       	rcall	.+3958   	; 0x18f6 <_ZN14HardwareSerial5writeEh>
     980:	61 2f       	mov	r22, r17
     982:	87 e3       	ldi	r24, 0x37	; 55
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	b7 d7       	rcall	.+3950   	; 0x18f6 <_ZN14HardwareSerial5writeEh>
     988:	1a 5f       	subi	r17, 0xFA	; 250
     98a:	d1 0f       	add	r29, r17
     98c:	cd 0f       	add	r28, r29
     98e:	c0 95       	com	r28
     990:	6c 2f       	mov	r22, r28
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	87 e3       	ldi	r24, 0x37	; 55
     996:	94 e0       	ldi	r25, 0x04	; 4
     998:	b1 dc       	rcall	.-1694   	; 0x2fc <_ZN14HardwareSerial5writeEi>
     99a:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <serialWriting>
     99e:	87 e3       	ldi	r24, 0x37	; 55
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	f5 d7       	rcall	.+4074   	; 0x198e <_ZN14HardwareSerial5flushEv>
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 49 11 	call	0x2292	; 0x2292 <digitalWrite>
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	0e 94 49 11 	call	0x2292	; 0x2292 <digitalWrite>
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0c 94 12 10 	jmp	0x2024	; 0x2024 <delay>

000009c6 <_Z7getDatahhh>:
}
/* Set the servo with given ID to endless => wheel mode */ 
void setModeWheel(unsigned char id) { setMode(id, MX_MODE_WHEEL); }
void setModeJoint(unsigned char id) { setMode(id, MX_MODE_JOINT); }
void setModeMultiTurn(unsigned char id) { setMode(id, MX_MODE_MULTI); }
int getData(unsigned char id, unsigned char ctrlData, unsigned char askedLength) {
     9c6:	2f 92       	push	r2
     9c8:	3f 92       	push	r3
     9ca:	4f 92       	push	r4
     9cc:	5f 92       	push	r5
     9ce:	6f 92       	push	r6
     9d0:	7f 92       	push	r7
     9d2:	8f 92       	push	r8
     9d4:	9f 92       	push	r9
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <_Z7getDatahhh+0x26>
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <_Z7getDatahhh+0x28>
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	f4 2e       	mov	r15, r20
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     9d0:	2f 92       	push	r2
     9d2:	3f 92       	push	r3
     9d4:	4f 92       	push	r4
     9d6:	5f 92       	push	r5
     9d8:	6f 92       	push	r6
     9da:	7f 92       	push	r7
     9dc:	8f 92       	push	r8
     9de:	9f 92       	push	r9
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <_Z7getDatahhh+0x26>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <_Z7getDatahhh+0x28>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	f4 2e       	mov	r15, r20
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
	unsigned char byteCount = 0;
	unsigned char msgId, msgLength, msgError, msgChecksum, Checksum, msgData_1, msgData_2;
	
	int msgData;
<<<<<<< HEAD
	readServo(id, ctrlData, askedLength);
     9fe:	93 df       	rcall	.-218    	; 0x926 <_Z9readServohhh>
	delay(10);
     a00:	6a e0       	ldi	r22, 0x0A	; 10
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 17 10 	call	0x202e	; 0x202e <delay>
	serialReading = YES;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__data_end>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
     a12:	87 e3       	ldi	r24, 0x37	; 55
     a14:	94 e0       	ldi	r25, 0x04	; 4
     a16:	f4 d6       	rcall	.+3560   	; 0x1800 <_ZN14HardwareSerial4readEv>
     a18:	18 2f       	mov	r17, r24
	//Serial1.availableForWrite();
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
     a1a:	87 e3       	ldi	r24, 0x37	; 55
     a1c:	94 e0       	ldi	r25, 0x04	; 4
     a1e:	f0 d6       	rcall	.+3552   	; 0x1800 <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
     a20:	1f 3f       	cpi	r17, 0xFF	; 255
     a22:	19 f4       	brne	.+6      	; 0xa2a <_Z7getDatahhh+0x5a>
     a24:	11 e0       	ldi	r17, 0x01	; 1
     a26:	8f 3f       	cpi	r24, 0xFF	; 255
     a28:	09 f0       	breq	.+2      	; 0xa2c <_Z7getDatahhh+0x5c>
     a2a:	10 e0       	ldi	r17, 0x00	; 0
	Serial.print("## Start 01: ");
     a2c:	6b e2       	ldi	r22, 0x2B	; 43
     a2e:	72 e0       	ldi	r23, 0x02	; 2
     a30:	8a e9       	ldi	r24, 0x9A	; 154
     a32:	93 e0       	ldi	r25, 0x03	; 3
     a34:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     a38:	87 e3       	ldi	r24, 0x37	; 55
     a3a:	94 e0       	ldi	r25, 0x04	; 4
     a3c:	c7 d6       	rcall	.+3470   	; 0x17cc <_ZN14HardwareSerial9availableEv>
     a3e:	4a e0       	ldi	r20, 0x0A	; 10
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	bc 01       	movw	r22, r24
     a44:	8a e9       	ldi	r24, 0x9A	; 154
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN5Print5printEii>
	Serial.println(" ####################");
     a4c:	69 e3       	ldi	r22, 0x39	; 57
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	8a e9       	ldi	r24, 0x9A	; 154
     a52:	93 e0       	ldi	r25, 0x03	; 3
     a54:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print7printlnEPKc>
	if (msgStarted) {
     a58:	11 23       	and	r17, r17
     a5a:	09 f4       	brne	.+2      	; 0xa5e <_Z7getDatahhh+0x8e>
		msgId = Serial1.read();
     a5c:	a0 c0       	rjmp	.+320    	; 0xb9e <_Z7getDatahhh+0x1ce>
     a5e:	87 e3       	ldi	r24, 0x37	; 55
     a60:	94 e0       	ldi	r25, 0x04	; 4
     a62:	ce d6       	rcall	.+3484   	; 0x1800 <_ZN14HardwareSerial4readEv>
     a64:	5c 01       	movw	r10, r24
		printSerial("Servo ID   ", msgId);
     a66:	6f e4       	ldi	r22, 0x4F	; 79
     a68:	72 e0       	ldi	r23, 0x02	; 2
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     a72:	b5 01       	movw	r22, r10
     a74:	77 27       	eor	r23, r23
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	ff dc       	rcall	.-1538   	; 0x47a <_Z11printSerial6Stringi>
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
		msgLength = Serial1.read();
     a84:	87 e3       	ldi	r24, 0x37	; 55
     a86:	94 e0       	ldi	r25, 0x04	; 4
     a88:	bb d6       	rcall	.+3446   	; 0x1800 <_ZN14HardwareSerial4readEv>
     a8a:	4c 01       	movw	r8, r24
		printSerial("Msg Length ", msgLength);
     a8c:	6b e5       	ldi	r22, 0x5B	; 91
     a8e:	72 e0       	ldi	r23, 0x02	; 2
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     a98:	b4 01       	movw	r22, r8
     a9a:	77 27       	eor	r23, r23
     a9c:	ce 01       	movw	r24, r28
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	ec dc       	rcall	.-1576   	; 0x47a <_Z11printSerial6Stringi>
     aa2:	ce 01       	movw	r24, r28
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
		msgError = Serial1.read();
     aaa:	87 e3       	ldi	r24, 0x37	; 55
     aac:	94 e0       	ldi	r25, 0x04	; 4
     aae:	a8 d6       	rcall	.+3408   	; 0x1800 <_ZN14HardwareSerial4readEv>
     ab0:	8c 01       	movw	r16, r24
     ab2:	38 2e       	mov	r3, r24
		printSerial("Msg Error  ", msgError);
     ab4:	67 e6       	ldi	r22, 0x67	; 103
     ab6:	72 e0       	ldi	r23, 0x02	; 2
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     ac0:	b8 01       	movw	r22, r16
     ac2:	77 27       	eor	r23, r23
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	d8 dc       	rcall	.-1616   	; 0x47a <_Z11printSerial6Stringi>
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
		msgData_1 = Serial1.read();
     ad2:	87 e3       	ldi	r24, 0x37	; 55
     ad4:	94 e0       	ldi	r25, 0x04	; 4
     ad6:	94 d6       	rcall	.+3368   	; 0x1800 <_ZN14HardwareSerial4readEv>
     ad8:	6c 01       	movw	r12, r24
     ada:	3c 01       	movw	r6, r24
		printSerial("Msg Data L ", msgData_1);
     adc:	77 24       	eor	r7, r7
     ade:	63 e7       	ldi	r22, 0x73	; 115
     ae0:	72 e0       	ldi	r23, 0x02	; 2
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     aea:	b3 01       	movw	r22, r6
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	c4 dc       	rcall	.-1656   	; 0x47a <_Z11printSerial6Stringi>
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
		if (askedLength>1) {
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	8f 15       	cp	r24, r15
			msgData_2 = Serial1.read();
     afe:	30 f5       	brcc	.+76     	; 0xb4c <_Z7getDatahhh+0x17c>
     b00:	87 e3       	ldi	r24, 0x37	; 55
     b02:	94 e0       	ldi	r25, 0x04	; 4
     b04:	7d d6       	rcall	.+3322   	; 0x1800 <_ZN14HardwareSerial4readEv>
     b06:	28 2e       	mov	r2, r24
     b08:	7c 01       	movw	r14, r24
     b0a:	ff 24       	eor	r15, r15
			msgData = msgData_1 + (msgData_2<<8);
     b0c:	5e 2c       	mov	r5, r14
     b0e:	44 24       	eor	r4, r4
     b10:	46 0c       	add	r4, r6
			printSerial("Msg Data H ", msgData_2);
     b12:	57 1c       	adc	r5, r7
     b14:	6f e7       	ldi	r22, 0x7F	; 127
     b16:	72 e0       	ldi	r23, 0x02	; 2
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     b20:	b7 01       	movw	r22, r14
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	a9 dc       	rcall	.-1710   	; 0x47a <_Z11printSerial6Stringi>
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
			printSerial("Msg Data   ", msgData);
     b30:	6b e8       	ldi	r22, 0x8B	; 139
     b32:	72 e0       	ldi	r23, 0x02	; 2
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     b3c:	b2 01       	movw	r22, r4
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	9b dc       	rcall	.-1738   	; 0x47a <_Z11printSerial6Stringi>
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
		}
		msgChecksum = Serial1.read();
     b4c:	87 e3       	ldi	r24, 0x37	; 55
     b4e:	94 e0       	ldi	r25, 0x04	; 4
     b50:	57 d6       	rcall	.+3246   	; 0x1800 <_ZN14HardwareSerial4readEv>
     b52:	7c 01       	movw	r14, r24
		printSerial("Checksum   ", msgChecksum);
     b54:	67 e9       	ldi	r22, 0x97	; 151
     b56:	72 e0       	ldi	r23, 0x02	; 2
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     b60:	b7 01       	movw	r22, r14
     b62:	77 27       	eor	r23, r23
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	88 dc       	rcall	.-1776   	; 0x47a <_Z11printSerial6Stringi>
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
     b72:	a8 0c       	add	r10, r8
     b74:	0a 0d       	add	r16, r10
     b76:	0c 0d       	add	r16, r12
     b78:	20 0e       	add	r2, r16
     b7a:	20 94       	com	r2
		printSerial("Checksum~  ", Checksum);
     b7c:	63 ea       	ldi	r22, 0xA3	; 163
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     b88:	62 2d       	mov	r22, r2
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	74 dc       	rcall	.-1816   	; 0x47a <_Z11printSerial6Stringi>
     b92:	ce 01       	movw	r24, r28
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
     b9a:	11 e0       	ldi	r17, 0x01	; 1
void readServo(uint8_t pcktID, uint8_t pcktCmnd) { readServo(pcktID, pcktCmnd, 1); }

/* Request and Capture data from servo with given ID */
int getData(uint8_t id, uint8_t ctrlData, uint8_t askedLength) {
	uint8_t msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
<<<<<<< HEAD
     c5a:	11 e0       	ldi	r17, 0x01	; 1
=======
	readServo(id, ctrlData, askedLength);	
     9f4:	92 df       	rcall	.-220    	; 0x91a <_Z9readServohhh>
	delay(10);		
     9f6:	6a e0       	ldi	r22, 0x0A	; 10
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
	serialReading = YES;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__data_end>
	//do { msgByte = Serial1.read(); } while (msgByte != 0xFF);	// 01 : Start 1/2
	msgByte = Serial1.read();
     a08:	87 e3       	ldi	r24, 0x37	; 55
     a0a:	94 e0       	ldi	r25, 0x04	; 4
     a0c:	f4 d6       	rcall	.+3560   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     a0e:	18 2f       	mov	r17, r24
	//Serial1.availableForWrite();
	startOne = msgByte == 0xFF ? YES : NO;
	msgByte = Serial1.read();									// 02 : Start 2/2
     a10:	87 e3       	ldi	r24, 0x37	; 55
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	f0 d6       	rcall	.+3552   	; 0x17f6 <_ZN14HardwareSerial4readEv>
	startTwo = msgByte == 0xFF ? YES : NO;	
	//while (msgByte == 0xFF) { msgByte = Serial1.read(); }
	msgStarted = startOne && startTwo ? YES : NO;
     a16:	1f 3f       	cpi	r17, 0xFF	; 255
     a18:	19 f4       	brne	.+6      	; 0xa20 <_Z7getDatahhh+0x5a>
     a1a:	11 e0       	ldi	r17, 0x01	; 1
     a1c:	8f 3f       	cpi	r24, 0xFF	; 255
     a1e:	09 f0       	breq	.+2      	; 0xa22 <_Z7getDatahhh+0x5c>
     a20:	10 e0       	ldi	r17, 0x00	; 0
	Serial.print("## Start 01: ");
     a22:	6b e2       	ldi	r22, 0x2B	; 43
     a24:	72 e0       	ldi	r23, 0x02	; 2
     a26:	8a e9       	ldi	r24, 0x9A	; 154
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     a2e:	87 e3       	ldi	r24, 0x37	; 55
     a30:	94 e0       	ldi	r25, 0x04	; 4
     a32:	c7 d6       	rcall	.+3470   	; 0x17c2 <_ZN14HardwareSerial9availableEv>
     a34:	4a e0       	ldi	r20, 0x0A	; 10
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	8a e9       	ldi	r24, 0x9A	; 154
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN5Print5printEii>
	Serial.println(" ####################");
     a42:	69 e3       	ldi	r22, 0x39	; 57
     a44:	72 e0       	ldi	r23, 0x02	; 2
     a46:	8a e9       	ldi	r24, 0x9A	; 154
     a48:	93 e0       	ldi	r25, 0x03	; 3
     a4a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN5Print7printlnEPKc>
	if (msgStarted) {		
     a4e:	11 23       	and	r17, r17
     a50:	09 f4       	brne	.+2      	; 0xa54 <_Z7getDatahhh+0x8e>
		msgId = Serial1.read();
     a52:	a0 c0       	rjmp	.+320    	; 0xb94 <_Z7getDatahhh+0x1ce>
     a54:	87 e3       	ldi	r24, 0x37	; 55
     a56:	94 e0       	ldi	r25, 0x04	; 4
     a58:	ce d6       	rcall	.+3484   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     a5a:	5c 01       	movw	r10, r24
		printSerial("Servo ID   ", msgId);
     a5c:	6f e4       	ldi	r22, 0x4F	; 79
     a5e:	72 e0       	ldi	r23, 0x02	; 2
     a60:	ce 01       	movw	r24, r28
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     a68:	b5 01       	movw	r22, r10
     a6a:	77 27       	eor	r23, r23
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	e9 dc       	rcall	.-1582   	; 0x444 <_Z11printSerial6Stringi>
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
		msgLength = Serial1.read();
     a7a:	87 e3       	ldi	r24, 0x37	; 55
     a7c:	94 e0       	ldi	r25, 0x04	; 4
     a7e:	bb d6       	rcall	.+3446   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     a80:	4c 01       	movw	r8, r24
		printSerial("Msg Length ", msgLength);
     a82:	6b e5       	ldi	r22, 0x5B	; 91
     a84:	72 e0       	ldi	r23, 0x02	; 2
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     a8e:	b4 01       	movw	r22, r8
     a90:	77 27       	eor	r23, r23
     a92:	ce 01       	movw	r24, r28
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	d6 dc       	rcall	.-1620   	; 0x444 <_Z11printSerial6Stringi>
     a98:	ce 01       	movw	r24, r28
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
		msgError = Serial1.read();
     aa0:	87 e3       	ldi	r24, 0x37	; 55
     aa2:	94 e0       	ldi	r25, 0x04	; 4
     aa4:	a8 d6       	rcall	.+3408   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     aa6:	8c 01       	movw	r16, r24
     aa8:	38 2e       	mov	r3, r24
		printSerial("Msg Error  ", msgError);
     aaa:	67 e6       	ldi	r22, 0x67	; 103
     aac:	72 e0       	ldi	r23, 0x02	; 2
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     ab6:	b8 01       	movw	r22, r16
     ab8:	77 27       	eor	r23, r23
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	c2 dc       	rcall	.-1660   	; 0x444 <_Z11printSerial6Stringi>
     ac0:	ce 01       	movw	r24, r28
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
		msgData_1 = Serial1.read();
     ac8:	87 e3       	ldi	r24, 0x37	; 55
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	94 d6       	rcall	.+3368   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     ace:	6c 01       	movw	r12, r24
     ad0:	3c 01       	movw	r6, r24
		printSerial("Msg Data L ", msgData_1);
     ad2:	77 24       	eor	r7, r7
     ad4:	63 e7       	ldi	r22, 0x73	; 115
     ad6:	72 e0       	ldi	r23, 0x02	; 2
     ad8:	ce 01       	movw	r24, r28
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     ae0:	b3 01       	movw	r22, r6
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	ae dc       	rcall	.-1700   	; 0x444 <_Z11printSerial6Stringi>
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
		if (askedLength>1) {
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8f 15       	cp	r24, r15
			msgData_2 = Serial1.read();
     af4:	30 f5       	brcc	.+76     	; 0xb42 <_Z7getDatahhh+0x17c>
     af6:	87 e3       	ldi	r24, 0x37	; 55
     af8:	94 e0       	ldi	r25, 0x04	; 4
     afa:	7d d6       	rcall	.+3322   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     afc:	28 2e       	mov	r2, r24
     afe:	7c 01       	movw	r14, r24
     b00:	ff 24       	eor	r15, r15
			msgData = msgData_1 + (msgData_2<<8);
     b02:	5e 2c       	mov	r5, r14
     b04:	44 24       	eor	r4, r4
     b06:	46 0c       	add	r4, r6
			printSerial("Msg Data H ", msgData_2);
     b08:	57 1c       	adc	r5, r7
     b0a:	6f e7       	ldi	r22, 0x7F	; 127
     b0c:	72 e0       	ldi	r23, 0x02	; 2
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     b16:	b7 01       	movw	r22, r14
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	93 dc       	rcall	.-1754   	; 0x444 <_Z11printSerial6Stringi>
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
			printSerial("Msg Data   ", msgData);
     b26:	6b e8       	ldi	r22, 0x8B	; 139
     b28:	72 e0       	ldi	r23, 0x02	; 2
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     b32:	b2 01       	movw	r22, r4
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	85 dc       	rcall	.-1782   	; 0x444 <_Z11printSerial6Stringi>
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
		}
		msgChecksum = Serial1.read();
     b42:	87 e3       	ldi	r24, 0x37	; 55
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	57 d6       	rcall	.+3246   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     b48:	7c 01       	movw	r14, r24
		printSerial("Checksum   ", msgChecksum);
     b4a:	67 e9       	ldi	r22, 0x97	; 151
     b4c:	72 e0       	ldi	r23, 0x02	; 2
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     b56:	b7 01       	movw	r22, r14
     b58:	77 27       	eor	r23, r23
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	72 dc       	rcall	.-1820   	; 0x444 <_Z11printSerial6Stringi>
     b60:	ce 01       	movw	r24, r28
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
     b68:	a8 0c       	add	r10, r8
     b6a:	0a 0d       	add	r16, r10
     b6c:	0c 0d       	add	r16, r12
     b6e:	20 0e       	add	r2, r16
     b70:	20 94       	com	r2
		printSerial("Checksum~  ", Checksum);
     b72:	63 ea       	ldi	r22, 0xA3	; 163
     b74:	72 e0       	ldi	r23, 0x02	; 2
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     b7e:	62 2d       	mov	r22, r2
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	5e dc       	rcall	.-1860   	; 0x444 <_Z11printSerial6Stringi>
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
		msgOK = msgChecksum == Checksum ? YES : NO;
     b90:	11 e0       	ldi	r17, 0x01	; 1
void setModeWheel(unsigned char id) { setMode(id, MX_MODE_WHEEL); }
void setModeJoint(unsigned char id) { setMode(id, MX_MODE_JOINT); }
void setModeMultiTurn(unsigned char id) { setMode(id, MX_MODE_MULTI); }
int getData(unsigned char id, unsigned char ctrlData, unsigned char askedLength) {
	unsigned char msgByte;
	bool startOne = NO, startTwo = NO, msgStarted, msgOK = NO;
     b92:	2e 10       	cpse	r2, r14
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     b9c:	2e 10       	cpse	r2, r14
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		printSerial("Checksum   ", msgChecksum);
		Checksum = ~lowByte(msgId + msgLength + msgError + msgData_1 + msgData_2);
		printSerial("Checksum~  ", Checksum);
		msgOK = msgChecksum == Checksum ? YES : NO;
	}
	while(Serial1.available()) { msgByte = Serial1.read(); }
<<<<<<< HEAD
<<<<<<< HEAD
     c5c:	2e 10       	cpse	r2, r14
     c5e:	10 e0       	ldi	r17, 0x00	; 0
     c60:	8e e4       	ldi	r24, 0x4E	; 78
     c62:	94 e0       	ldi	r25, 0x04	; 4
     c64:	9e d6       	rcall	.+3388   	; 0x19a2 <_ZN14HardwareSerial9availableEv>
     c66:	89 2b       	or	r24, r25
     c68:	21 f0       	breq	.+8      	; 0xc72 <_Z7getDatahhh+0x1e2>
     c6a:	8e e4       	ldi	r24, 0x4E	; 78
     c6c:	94 e0       	ldi	r25, 0x04	; 4
     c6e:	b3 d6       	rcall	.+3430   	; 0x19d6 <_ZN14HardwareSerial4readEv>
     c70:	f7 cf       	rjmp	.-18     	; 0xc60 <_Z7getDatahhh+0x1d0>
=======
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	87 e3       	ldi	r24, 0x37	; 55
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	13 d6       	rcall	.+3110   	; 0x17cc <_ZN14HardwareSerial9availableEv>
     ba6:	89 2b       	or	r24, r25
     ba8:	21 f0       	breq	.+8      	; 0xbb2 <_Z7getDatahhh+0x1e2>
     baa:	87 e3       	ldi	r24, 0x37	; 55
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	28 d6       	rcall	.+3152   	; 0x1800 <_ZN14HardwareSerial4readEv>
     bb0:	f7 cf       	rjmp	.-18     	; 0xba0 <_Z7getDatahhh+0x1d0>
     bb2:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__data_end>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	serialReading = NO;
     bb6:	11 23       	and	r17, r17
    /*  Check if the returned data is not corrupted and there are no errors
            Return -255 if the data is corrupted (Checksum error)
            Return -ErrorCode is there is error from servo */
	return msgOK ? msgError ? -msgError : msgData : -255;
     bb8:	41 f0       	breq	.+16     	; 0xbca <_Z7getDatahhh+0x1fa>
     bba:	33 20       	and	r3, r3
     bbc:	49 f0       	breq	.+18     	; 0xbd0 <_Z7getDatahhh+0x200>
     bbe:	83 2d       	mov	r24, r3
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	91 95       	neg	r25
     bc4:	81 95       	neg	r24
     bc6:	91 09       	sbc	r25, r1
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <_Z7getDatahhh+0x202>
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	9f ef       	ldi	r25, 0xFF	; 255
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <_Z7getDatahhh+0x202>
     bd0:	c2 01       	movw	r24, r4
     bd2:	26 96       	adiw	r28, 0x06	; 6
}
<<<<<<< HEAD
     c92:	26 96       	adiw	r28, 0x06	; 6
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	bf 90       	pop	r11
     cb0:	af 90       	pop	r10
     cb2:	9f 90       	pop	r9
     cb4:	8f 90       	pop	r8
     cb6:	7f 90       	pop	r7
     cb8:	6f 90       	pop	r6
     cba:	5f 90       	pop	r5
     cbc:	4f 90       	pop	r4
     cbe:	3f 90       	pop	r3
     cc0:	2f 90       	pop	r2
     cc2:	08 95       	ret

00000cc4 <_Z11printBufferv>:
=======
     b94:	10 e0       	ldi	r17, 0x00	; 0
     b96:	87 e3       	ldi	r24, 0x37	; 55
     b98:	94 e0       	ldi	r25, 0x04	; 4
     b9a:	13 d6       	rcall	.+3110   	; 0x17c2 <_ZN14HardwareSerial9availableEv>
     b9c:	89 2b       	or	r24, r25
     b9e:	21 f0       	breq	.+8      	; 0xba8 <_Z7getDatahhh+0x1e2>
     ba0:	87 e3       	ldi	r24, 0x37	; 55
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	28 d6       	rcall	.+3152   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     ba6:	f7 cf       	rjmp	.-18     	; 0xb96 <_Z7getDatahhh+0x1d0>
     ba8:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__data_end>
	serialReading = NO;
     bac:	11 23       	and	r17, r17
	return msgOK ? msgError ? -msgError : msgData : -255;
     bae:	41 f0       	breq	.+16     	; 0xbc0 <_Z7getDatahhh+0x1fa>
     bb0:	33 20       	and	r3, r3
     bb2:	49 f0       	breq	.+18     	; 0xbc6 <_Z7getDatahhh+0x200>
     bb4:	83 2d       	mov	r24, r3
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	91 95       	neg	r25
     bba:	81 95       	neg	r24
     bbc:	91 09       	sbc	r25, r1
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <_Z7getDatahhh+0x202>
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	9f ef       	ldi	r25, 0xFF	; 255
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <_Z7getDatahhh+0x202>
     bc6:	c2 01       	movw	r24, r4
     bc8:	26 96       	adiw	r28, 0x06	; 6
}		
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	8f 90       	pop	r8
     bec:	7f 90       	pop	r7
     bee:	6f 90       	pop	r6
     bf0:	5f 90       	pop	r5
     bf2:	4f 90       	pop	r4
     bf4:	3f 90       	pop	r3
     bf6:	2f 90       	pop	r2
     bf8:	08 95       	ret

00000bfa <_Z11printBufferv>:
     bfa:	6f ea       	ldi	r22, 0xAF	; 175
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	7f 90       	pop	r7
     bf8:	6f 90       	pop	r6
     bfa:	5f 90       	pop	r5
     bfc:	4f 90       	pop	r4
     bfe:	3f 90       	pop	r3
     c00:	2f 90       	pop	r2
     c02:	08 95       	ret

00000c04 <_Z11printBufferv>:
     c04:	6f ea       	ldi	r22, 0xAF	; 175
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
 */
void printBuffer() {
	//delay(20);
	//byte start_1, start_2, servo_id, msg_length, er_byte, chck_sum;
	
	Serial.print("## Start: ");
<<<<<<< HEAD
<<<<<<< HEAD
     cc4:	6e ea       	ldi	r22, 0xAE	; 174
     cc6:	72 e0       	ldi	r23, 0x02	; 2
     cc8:	81 eb       	ldi	r24, 0xB1	; 177
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN5Print5printEPKc>
=======
     c06:	72 e0       	ldi	r23, 0x02	; 2
     c08:	8a e9       	ldi	r24, 0x9A	; 154
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print5printEPKc>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	Serial.print(Serial1.available());
     c10:	87 e3       	ldi	r24, 0x37	; 55
     c12:	94 e0       	ldi	r25, 0x04	; 4
     c14:	db d5       	rcall	.+2998   	; 0x17cc <_ZN14HardwareSerial9availableEv>
     c16:	4a e0       	ldi	r20, 0x0A	; 10
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	bc 01       	movw	r22, r24
     c1c:	8a e9       	ldi	r24, 0x9A	; 154
     c1e:	93 e0       	ldi	r25, 0x03	; 3
     c20:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN5Print5printEii>
	Serial.println(" ####################");
     c24:	69 e3       	ldi	r22, 0x39	; 57
     c26:	72 e0       	ldi	r23, 0x02	; 2
     c28:	8a e9       	ldi	r24, 0x9A	; 154
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print7printlnEPKc>
	serialReading = YES;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__data_end>
	while(Serial1.available()){
     c36:	87 e3       	ldi	r24, 0x37	; 55
     c38:	94 e0       	ldi	r25, 0x04	; 4
     c3a:	c8 d5       	rcall	.+2960   	; 0x17cc <_ZN14HardwareSerial9availableEv>
     c3c:	89 2b       	or	r24, r25
     c3e:	09 f1       	breq	.+66     	; 0xc82 <_Z11printBufferv+0x7e>

		Serial.print(Serial1.available());
     c40:	87 e3       	ldi	r24, 0x37	; 55
     c42:	94 e0       	ldi	r25, 0x04	; 4
     c44:	c3 d5       	rcall	.+2950   	; 0x17cc <_ZN14HardwareSerial9availableEv>
     c46:	4a e0       	ldi	r20, 0x0A	; 10
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	bc 01       	movw	r22, r24
     c4c:	8a e9       	ldi	r24, 0x9A	; 154
     c4e:	93 e0       	ldi	r25, 0x03	; 3
     c50:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN5Print5printEii>
		Serial.print(", ");
     c54:	6a eb       	ldi	r22, 0xBA	; 186
     c56:	72 e0       	ldi	r23, 0x02	; 2
     c58:	8a e9       	ldi	r24, 0x9A	; 154
     c5a:	93 e0       	ldi	r25, 0x03	; 3
     c5c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print5printEPKc>
		Serial.println(Serial1.read());
     c60:	87 e3       	ldi	r24, 0x37	; 55
     c62:	94 e0       	ldi	r25, 0x04	; 4
     c64:	cd d5       	rcall	.+2970   	; 0x1800 <_ZN14HardwareSerial4readEv>
     c66:	4a e0       	ldi	r20, 0x0A	; 10
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	bc 01       	movw	r22, r24
     c6c:	8a e9       	ldi	r24, 0x9A	; 154
     c6e:	93 e0       	ldi	r25, 0x03	; 3
     c70:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN5Print7printlnEii>
		delay(1);
     c74:	61 e0       	ldi	r22, 0x01	; 1
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 17 10 	call	0x202e	; 0x202e <delay>

=======
     bfc:	72 e0       	ldi	r23, 0x02	; 2
     bfe:	8a e9       	ldi	r24, 0x9A	; 154
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN5Print5printEPKc>
	Serial.print(Serial1.available());
     c06:	87 e3       	ldi	r24, 0x37	; 55
     c08:	94 e0       	ldi	r25, 0x04	; 4
     c0a:	db d5       	rcall	.+2998   	; 0x17c2 <_ZN14HardwareSerial9availableEv>
     c0c:	4a e0       	ldi	r20, 0x0A	; 10
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	bc 01       	movw	r22, r24
     c12:	8a e9       	ldi	r24, 0x9A	; 154
     c14:	93 e0       	ldi	r25, 0x03	; 3
     c16:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN5Print5printEii>
	Serial.println(" ####################");
     c1a:	69 e3       	ldi	r22, 0x39	; 57
     c1c:	72 e0       	ldi	r23, 0x02	; 2
     c1e:	8a e9       	ldi	r24, 0x9A	; 154
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN5Print7printlnEPKc>
	serialReading = YES;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__data_end>
	while(Serial1.available()){
     c2c:	87 e3       	ldi	r24, 0x37	; 55
     c2e:	94 e0       	ldi	r25, 0x04	; 4
     c30:	c8 d5       	rcall	.+2960   	; 0x17c2 <_ZN14HardwareSerial9availableEv>
     c32:	89 2b       	or	r24, r25
     c34:	09 f1       	breq	.+66     	; 0xc78 <_Z11printBufferv+0x7e>
		
		Serial.print(Serial1.available());
     c36:	87 e3       	ldi	r24, 0x37	; 55
     c38:	94 e0       	ldi	r25, 0x04	; 4
     c3a:	c3 d5       	rcall	.+2950   	; 0x17c2 <_ZN14HardwareSerial9availableEv>
     c3c:	4a e0       	ldi	r20, 0x0A	; 10
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	bc 01       	movw	r22, r24
     c42:	8a e9       	ldi	r24, 0x9A	; 154
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN5Print5printEii>
		Serial.print(", ");
     c4a:	6a eb       	ldi	r22, 0xBA	; 186
     c4c:	72 e0       	ldi	r23, 0x02	; 2
     c4e:	8a e9       	ldi	r24, 0x9A	; 154
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN5Print5printEPKc>
		Serial.println(Serial1.read());
     c56:	87 e3       	ldi	r24, 0x37	; 55
     c58:	94 e0       	ldi	r25, 0x04	; 4
     c5a:	cd d5       	rcall	.+2970   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     c5c:	4a e0       	ldi	r20, 0x0A	; 10
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	bc 01       	movw	r22, r24
     c62:	8a e9       	ldi	r24, 0x9A	; 154
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <_ZN5Print7printlnEii>
		delay(1);
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
	
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
	Serial.print("## Start: ");
	Serial.print(Serial1.available());
	Serial.println(" ####################");
	serialReading = YES;
	while(Serial1.available()){
<<<<<<< HEAD
<<<<<<< HEAD
     d40:	da cf       	rjmp	.-76     	; 0xcf6 <_Z11printBufferv+0x32>
=======
     c76:	da cf       	rjmp	.-76     	; 0xc2c <_Z11printBufferv+0x32>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     c80:	da cf       	rjmp	.-76     	; 0xc36 <_Z11printBufferv+0x32>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		Serial.print(Serial1.available());
		Serial.print(", ");
		Serial.println(Serial1.read());
		delay(1);
	}
	serialReading = NO;
<<<<<<< HEAD
<<<<<<< HEAD
     d42:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__data_end>
=======
     c82:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__data_end>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	Serial.println("## End #####################");
     c86:	6d eb       	ldi	r22, 0xBD	; 189
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	8a e9       	ldi	r24, 0x9A	; 154
     c8c:	93 e0       	ldi	r25, 0x03	; 3
     c8e:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <_ZN5Print7printlnEPKc>

<<<<<<< HEAD
00000d52 <setup>:
=======
     c78:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__data_end>
	Serial.println("## End #####################");
     c7c:	6d eb       	ldi	r22, 0xBD	; 189
     c7e:	72 e0       	ldi	r23, 0x02	; 2
     c80:	8a e9       	ldi	r24, 0x9A	; 154
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <_ZN5Print7printlnEPKc>

00000c88 <setup>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
00000c92 <setup>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
}

/************************************************************************/
/* SETUP                                                                */
/************************************************************************/
void setup() {
<<<<<<< HEAD
<<<<<<< HEAD
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <setup+0xa>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <setup+0xc>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
=======
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <setup+0xa>
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <setup+0xc>
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
     ca2:	bf db       	rcall	.-2178   	; 0x422 <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
     ca4:	84 e5       	ldi	r24, 0x54	; 84
     ca6:	93 e0       	ldi	r25, 0x03	; 3
     ca8:	0e 94 06 13 	call	0x260c	; 0x260c <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     cac:	84 e5       	ldi	r24, 0x54	; 84
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	0e 94 34 12 	call	0x2468	; 0x2468 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     cb4:	84 e5       	ldi	r24, 0x54	; 84
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
<<<<<<< HEAD
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	0e 94 fd 11 	call	0x23fa	; 0x23fa <pinMode>
=======
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	00 d0       	rcall	.+0      	; 0xc92 <setup+0xa>
     c92:	00 d0       	rcall	.+0      	; 0xc94 <setup+0xc>
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	/* Main Setup */
	setupSwitches();					// Setup the arm control switches
     c98:	c4 db       	rcall	.-2168   	; 0x422 <_Z13setupSwitchesv>
	lcd.init();							// initialize the lcd
     c9a:	84 e5       	ldi	r24, 0x54	; 84
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     ca2:	84 e5       	ldi	r24, 0x54	; 84
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 2f 12 	call	0x245e	; 0x245e <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     caa:	84 e5       	ldi	r24, 0x54	; 84
     cac:	93 e0       	ldi	r25, 0x03	; 3
     cae:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <_ZN17LiquidCrystal_I2C5clearEv>
	pinMode(RS485_RX_EN_PIN, OUTPUT);
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	0e 94 0d 11 	call	0x221a	; 0x221a <pinMode>
	pinMode(RS485_TX_EN_PIN, OUTPUT);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	0e 94 0d 11 	call	0x221a	; 0x221a <pinMode>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
<<<<<<< HEAD
<<<<<<< HEAD
     d8c:	26 e0       	ldi	r18, 0x06	; 6
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	51 ee       	ldi	r21, 0xE1	; 225
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	81 eb       	ldi	r24, 0xB1	; 177
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	0a d7       	rcall	.+3604   	; 0x1bb0 <_ZN14HardwareSerial5beginEmh>
     d9c:	26 e0       	ldi	r18, 0x06	; 6
     d9e:	47 e3       	ldi	r20, 0x37	; 55
     da0:	5f ed       	ldi	r21, 0xDF	; 223
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	8e e4       	ldi	r24, 0x4E	; 78
     da8:	94 e0       	ldi	r25, 0x04	; 4
     daa:	02 d7       	rcall	.+3588   	; 0x1bb0 <_ZN14HardwareSerial5beginEmh>
=======
     ccc:	26 e0       	ldi	r18, 0x06	; 6
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	51 ee       	ldi	r21, 0xE1	; 225
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	8a e9       	ldi	r24, 0x9A	; 154
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	7f d6       	rcall	.+3326   	; 0x19da <_ZN14HardwareSerial5beginEmh>
     cdc:	26 e0       	ldi	r18, 0x06	; 6
     cde:	47 e3       	ldi	r20, 0x37	; 55
     ce0:	5f ed       	ldi	r21, 0xDF	; 223
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	87 e3       	ldi	r24, 0x37	; 55
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	77 d6       	rcall	.+3310   	; 0x19da <_ZN14HardwareSerial5beginEmh>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
     cec:	87 e3       	ldi	r24, 0x37	; 55
     cee:	94 e0       	ldi	r25, 0x04	; 4
     cf0:	53 d6       	rcall	.+3238   	; 0x1998 <_ZN14HardwareSerial5flushEv>
     cf2:	85 e0       	ldi	r24, 0x05	; 5
	arm.id = 5;
     cf4:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <arm>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	87 dd       	rcall	.-1266   	; 0x80a <_Z12setModeWheelh>
	setModeWheel(2);
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	85 dd       	rcall	.-1270   	; 0x80a <_Z12setModeWheelh>
	setModeMultiTurn(3);
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	87 dd       	rcall	.-1266   	; 0x812 <_Z16setModeMultiTurnh>
     d04:	84 e0       	ldi	r24, 0x04	; 4
	setModeJoint(4);
     d06:	83 dd       	rcall	.-1274   	; 0x80e <_Z12setModeJointh>
     d08:	85 e0       	ldi	r24, 0x05	; 5
	setModeJoint(5);
     d0a:	81 dd       	rcall	.-1278   	; 0x80e <_Z12setModeJointh>
     d0c:	11 e0       	ldi	r17, 0x01	; 1
     d0e:	6f ef       	ldi	r22, 0xFF	; 255
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
     d10:	73 e0       	ldi	r23, 0x03	; 3
		setTorqueLimit(i, MAX_TORQUE);
     d12:	81 2f       	mov	r24, r17
     d14:	21 dd       	rcall	.-1470   	; 0x758 <_Z14setTorqueLimithi>
     d16:	1f 5f       	subi	r17, 0xFF	; 255
     d18:	16 30       	cpi	r17, 0x06	; 6
     d1a:	c9 f7       	brne	.-14     	; 0xd0e <setup+0x7c>
	setModeWheel(2);
	setModeMultiTurn(3);
	setModeJoint(4);
	setModeJoint(5);
	/* Enable Toques for Joints (4 and 5) */
	for (uint8_t i=1; i<6; i++) {
<<<<<<< HEAD
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	8a e5       	ldi	r24, 0x5A	; 90
=======
     cc2:	26 e0       	ldi	r18, 0x06	; 6
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	51 ee       	ldi	r21, 0xE1	; 225
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	8a e9       	ldi	r24, 0x9A	; 154
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	7f d6       	rcall	.+3326   	; 0x19d0 <_ZN14HardwareSerial5beginEmh>
     cd2:	26 e0       	ldi	r18, 0x06	; 6
     cd4:	47 e3       	ldi	r20, 0x37	; 55
     cd6:	5f ed       	ldi	r21, 0xDF	; 223
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	87 e3       	ldi	r24, 0x37	; 55
     cde:	94 e0       	ldi	r25, 0x04	; 4
     ce0:	77 d6       	rcall	.+3310   	; 0x19d0 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial1.begin(57143);
	Serial1.flush();
     ce2:	87 e3       	ldi	r24, 0x37	; 55
     ce4:	94 e0       	ldi	r25, 0x04	; 4
     ce6:	53 d6       	rcall	.+3238   	; 0x198e <_ZN14HardwareSerial5flushEv>
     ce8:	85 e0       	ldi	r24, 0x05	; 5
	arm.id = 5;
     cea:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <arm>
	/* Angle Limits Setup (Servo Modes) */
	setModeWheel(1);
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	86 dd       	rcall	.-1268   	; 0x7fe <_Z12setModeWheelh>
	setModeWheel(2);
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	84 dd       	rcall	.-1272   	; 0x7fe <_Z12setModeWheelh>
	setModeMultiTurn(3);
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	86 dd       	rcall	.-1268   	; 0x806 <_Z16setModeMultiTurnh>
     cfa:	84 e0       	ldi	r24, 0x04	; 4
	setModeJoint(4);
     cfc:	82 dd       	rcall	.-1276   	; 0x802 <_Z12setModeJointh>
     cfe:	85 e0       	ldi	r24, 0x05	; 5
	setModeJoint(5);
     d00:	80 dd       	rcall	.-1280   	; 0x802 <_Z12setModeJointh>
     d02:	11 e0       	ldi	r17, 0x01	; 1
     d04:	6f ef       	ldi	r22, 0xFF	; 255
	/* Enable Toques for Joints (4 and 5) */
	for (unsigned char i=1; i<6; i++) {
     d06:	73 e0       	ldi	r23, 0x03	; 3
		setTorqueLimit(i, MAX_TORQUE);
     d08:	81 2f       	mov	r24, r17
     d0a:	20 dd       	rcall	.-1472   	; 0x74c <_Z14setTorqueLimithi>
     d0c:	1f 5f       	subi	r17, 0xFF	; 255
     d0e:	16 30       	cpi	r17, 0x06	; 6
     d10:	c9 f7       	brne	.-14     	; 0xd04 <setup+0x7c>
	setModeWheel(2);
	setModeMultiTurn(3);
	setModeJoint(4);
	setModeJoint(5);
	/* Enable Toques for Joints (4 and 5) */
	for (unsigned char i=1; i<6; i++) {
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	84 e5       	ldi	r24, 0x54	; 84
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	84 e5       	ldi	r24, 0x54	; 84
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		setTorqueLimit(i, MAX_TORQUE);
	}
	/* LCD Setup */
	lcd.setCursor(0,0);
<<<<<<< HEAD
<<<<<<< HEAD
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN17LiquidCrystal_I2C9setCursorEhh>
     e24:	69 ed       	ldi	r22, 0xD9	; 217
     e26:	72 e0       	ldi	r23, 0x02	; 2
     e28:	8a e5       	ldi	r24, 0x5A	; 90
=======
     d22:	93 e0       	ldi	r25, 0x03	; 3
     d24:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d28:	6a ed       	ldi	r22, 0xDA	; 218
     d2a:	72 e0       	ldi	r23, 0x02	; 2
     d2c:	84 e5       	ldi	r24, 0x54	; 84
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	lcd.print("sID:");
     d2e:	93 e0       	ldi	r25, 0x03	; 3
     d30:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print5printEPKc>
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	84 e5       	ldi	r24, 0x54	; 84
	lcd.setCursor(0,1);
     d3a:	93 e0       	ldi	r25, 0x03	; 3
     d3c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d40:	6f ed       	ldi	r22, 0xDF	; 223
     d42:	72 e0       	ldi	r23, 0x02	; 2
     d44:	84 e5       	ldi	r24, 0x54	; 84
	lcd.print("deg:");
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print5printEPKc>
     d4c:	42 e0       	ldi	r20, 0x02	; 2
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	84 e5       	ldi	r24, 0x54	; 84
	lcd.setCursor(0,2);
     d52:	93 e0       	ldi	r25, 0x03	; 3
     d54:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d58:	64 ee       	ldi	r22, 0xE4	; 228
     d5a:	72 e0       	ldi	r23, 0x02	; 2
     d5c:	84 e5       	ldi	r24, 0x54	; 84
	lcd.print("rpm:");
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print5printEPKc>
     d64:	43 e0       	ldi	r20, 0x03	; 3
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	84 e5       	ldi	r24, 0x54	; 84
	lcd.setCursor(0,3);
     d6a:	93 e0       	ldi	r25, 0x03	; 3
     d6c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d70:	69 ee       	ldi	r22, 0xE9	; 233
     d72:	72 e0       	ldi	r23, 0x02	; 2
     d74:	84 e5       	ldi	r24, 0x54	; 84
	lcd.print("ld%:");
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print5printEPKc>
     d7c:	48 e0       	ldi	r20, 0x08	; 8

	readServo(arm.id, 0x18, 8);
     d7e:	68 e1       	ldi	r22, 0x18	; 24
     d80:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <arm>
     d84:	d0 dd       	rcall	.-1120   	; 0x926 <_Z9readServohhh>
     d86:	3e df       	rcall	.-388    	; 0xc04 <_Z11printBufferv>
	printBuffer();
     d88:	62 e0       	ldi	r22, 0x02	; 2
     d8a:	70 e0       	ldi	r23, 0x00	; 0
	delay(2);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 17 10 	call	0x202e	; 0x202e <delay>
     d94:	42 e0       	ldi	r20, 0x02	; 2
     d96:	64 e4       	ldi	r22, 0x44	; 68
	int somthe = getData(5, MX_CURRENT_L, 2);
     d98:	85 e0       	ldi	r24, 0x05	; 5
     d9a:	1a de       	rcall	.-972    	; 0x9d0 <_Z7getDatahhh>
     d9c:	8c 01       	movw	r16, r24
     d9e:	6e ee       	ldi	r22, 0xEE	; 238
     da0:	72 e0       	ldi	r23, 0x02	; 2
	printSerial("return", somthe);
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6StringC1EPKc>
     daa:	b8 01       	movw	r22, r16
     dac:	ce 01       	movw	r24, r28
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	64 db       	rcall	.-2360   	; 0x47a <_Z11printSerial6Stringi>
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6StringD1Ev>
     dba:	26 96       	adiw	r28, 0x06	; 6
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
	//printBuffer();
}
<<<<<<< HEAD
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret

00000ecc <_Z12printDataLCDv>:
     ecc:	7f 92       	push	r7
     ece:	8f 92       	push	r8
     ed0:	9f 92       	push	r9
=======
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	0e 94 75 12 	call	0x24ea	; 0x24ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d1e:	6a ed       	ldi	r22, 0xDA	; 218
     d20:	72 e0       	ldi	r23, 0x02	; 2
     d22:	84 e5       	ldi	r24, 0x54	; 84
	lcd.print("sID:");
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN5Print5printEPKc>
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	84 e5       	ldi	r24, 0x54	; 84
	lcd.setCursor(0,1);
     d30:	93 e0       	ldi	r25, 0x03	; 3
     d32:	0e 94 75 12 	call	0x24ea	; 0x24ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d36:	6f ed       	ldi	r22, 0xDF	; 223
     d38:	72 e0       	ldi	r23, 0x02	; 2
     d3a:	84 e5       	ldi	r24, 0x54	; 84
	lcd.print("deg:");
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN5Print5printEPKc>
     d42:	42 e0       	ldi	r20, 0x02	; 2
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	84 e5       	ldi	r24, 0x54	; 84
	lcd.setCursor(0,2);
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	0e 94 75 12 	call	0x24ea	; 0x24ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d4e:	64 ee       	ldi	r22, 0xE4	; 228
     d50:	72 e0       	ldi	r23, 0x02	; 2
     d52:	84 e5       	ldi	r24, 0x54	; 84
	lcd.print("rpm:");
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN5Print5printEPKc>
     d5a:	43 e0       	ldi	r20, 0x03	; 3
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	84 e5       	ldi	r24, 0x54	; 84
	lcd.setCursor(0,3);
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	0e 94 75 12 	call	0x24ea	; 0x24ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d66:	69 ee       	ldi	r22, 0xE9	; 233
     d68:	72 e0       	ldi	r23, 0x02	; 2
     d6a:	84 e5       	ldi	r24, 0x54	; 84
	lcd.print("ld%:");
     d6c:	93 e0       	ldi	r25, 0x03	; 3
     d6e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN5Print5printEPKc>
     d72:	48 e0       	ldi	r20, 0x08	; 8

	readServo(arm.id, 0x18, 8);
     d74:	68 e1       	ldi	r22, 0x18	; 24
     d76:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <arm>
     d7a:	cf dd       	rcall	.-1122   	; 0x91a <_Z9readServohhh>
     d7c:	3e df       	rcall	.-388    	; 0xbfa <_Z11printBufferv>
	printBuffer();
     d7e:	62 e0       	ldi	r22, 0x02	; 2
     d80:	70 e0       	ldi	r23, 0x00	; 0
	delay(2);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
     d8a:	42 e0       	ldi	r20, 0x02	; 2
     d8c:	64 e4       	ldi	r22, 0x44	; 68
	int somthe = getData(5, MX_CURRENT_L, 2);
     d8e:	85 e0       	ldi	r24, 0x05	; 5
     d90:	1a de       	rcall	.-972    	; 0x9c6 <_Z7getDatahhh>
     d92:	8c 01       	movw	r16, r24
     d94:	6e ee       	ldi	r22, 0xEE	; 238
     d96:	72 e0       	ldi	r23, 0x02	; 2
	printSerial("return", somthe);
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringC1EPKc>
     da0:	b8 01       	movw	r22, r16
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	4e db       	rcall	.-2404   	; 0x444 <_Z11printSerial6Stringi>
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN6StringD1Ev>
     db0:	26 96       	adiw	r28, 0x06	; 6
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
	//printBuffer();
}
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	08 95       	ret

00000dc6 <_Z12printDataLCDv>:
     dc6:	9f 92       	push	r9
     dc8:	af 92       	push	r10
     dca:	bf 92       	push	r11
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <_Z12printDataLCDv>:
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
void printSerial(String title, int value) {
	Serial.print(title);
	Serial.print(": ");
	Serial.println(value);
}
void printDataLCD() {
<<<<<<< HEAD
<<<<<<< HEAD
     ed2:	af 92       	push	r10
     ed4:	bf 92       	push	r11
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
	delay(10);
     ee6:	6a e0       	ldi	r22, 0x0A	; 10
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 02 11 	call	0x2204	; 0x2204 <delay>
=======
     dcc:	cf 92       	push	r12
     dce:	df 92       	push	r13
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
	delay(10);
     ddc:	6a e0       	ldi	r22, 0x0A	; 10
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 12 10 	call	0x2024	; 0x2024 <delay>
	int lock;
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
	delay(10);
     de6:	6a e0       	ldi	r22, 0x0A	; 10
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 17 10 	call	0x202e	; 0x202e <delay>
	int lock;
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	int punch;
	int current;
	bool speedDirection, loadDirection;
	byte i = 0;
	int available = Serial1.available();
<<<<<<< HEAD
<<<<<<< HEAD
     ef2:	8e e4       	ldi	r24, 0x4E	; 78
     ef4:	94 e0       	ldi	r25, 0x04	; 4
     ef6:	55 d5       	rcall	.+2730   	; 0x19a2 <_ZN14HardwareSerial9availableEv>
=======
     df2:	87 e3       	ldi	r24, 0x37	; 55
     df4:	94 e0       	ldi	r25, 0x04	; 4
     df6:	ea d4       	rcall	.+2516   	; 0x17cc <_ZN14HardwareSerial9availableEv>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	if (available > 0){
     df8:	18 16       	cp	r1, r24
     dfa:	19 06       	cpc	r1, r25
     dfc:	0c f0       	brlt	.+2      	; 0xe00 <_Z12printDataLCDv+0x30>
     dfe:	56 c1       	rjmp	.+684    	; 0x10ac <_Z12printDataLCDv+0x2dc>
		serialReading = YES;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__data_end>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     e06:	87 e3       	ldi	r24, 0x37	; 55
     e08:	94 e0       	ldi	r25, 0x04	; 4
     e0a:	fa d4       	rcall	.+2548   	; 0x1800 <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     e0c:	8f 3f       	cpi	r24, 0xFF	; 255
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f0       	breq	.+2      	; 0xe14 <_Z12printDataLCDv+0x44>
     e12:	4c c1       	rjmp	.+664    	; 0x10ac <_Z12printDataLCDv+0x2dc>
     e14:	87 e3       	ldi	r24, 0x37	; 55
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	f3 d4       	rcall	.+2534   	; 0x1800 <_ZN14HardwareSerial4readEv>
     e1a:	8f 3f       	cpi	r24, 0xFF	; 255
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f0       	breq	.+2      	; 0xe22 <_Z12printDataLCDv+0x52>
     e20:	45 c1       	rjmp	.+650    	; 0x10ac <_Z12printDataLCDv+0x2dc>
			do { servoID = Serial1.read(); } while (servoID == 0xFF); // this make sure you wait for real data
     e22:	87 e3       	ldi	r24, 0x37	; 55
     e24:	94 e0       	ldi	r25, 0x04	; 4
     e26:	ec d4       	rcall	.+2520   	; 0x1800 <_ZN14HardwareSerial4readEv>
     e28:	ec 01       	movw	r28, r24
     e2a:	b8 2e       	mov	r11, r24
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	c8 17       	cp	r28, r24
     e30:	c1 f3       	breq	.-16     	; 0xe22 <_Z12printDataLCDv+0x52>

			msgLength = Serial1.read(); // msg Length
     e32:	87 e3       	ldi	r24, 0x37	; 55
     e34:	94 e0       	ldi	r25, 0x04	; 4
     e36:	e4 d4       	rcall	.+2504   	; 0x1800 <_ZN14HardwareSerial4readEv>
     e38:	08 2f       	mov	r16, r24
			error_byte = Serial1.read();
     e3a:	87 e3       	ldi	r24, 0x37	; 55
     e3c:	94 e0       	ldi	r25, 0x04	; 4
     e3e:	e0 d4       	rcall	.+2496   	; 0x1800 <_ZN14HardwareSerial4readEv>
     e40:	18 2f       	mov	r17, r24
     e42:	81 11       	cpse	r24, r1
			error_byte_old = error_byte ? error_byte : error_byte_old;
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <_Z12printDataLCDv+0x7a>
     e46:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <error_byte_old>
     e4a:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <error_byte_old>
     e4e:	40 e0       	ldi	r20, 0x00	; 0

			lcd.setCursor(6,0);
     e50:	66 e0       	ldi	r22, 0x06	; 6
     e52:	84 e5       	ldi	r24, 0x54	; 84
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     e5a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <error_counter>
     e5e:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <error_counter+0x1>
     e62:	11 11       	cpse	r17, r1
			if (error_byte || error_counter) {
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <_Z12printDataLCDv+0x9a>
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	f9 f0       	breq	.+62     	; 0xea8 <_Z12printDataLCDv+0xd8>
     e6a:	8b 30       	cpi	r24, 0x0B	; 11
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     e6c:	91 05       	cpc	r25, r1
     e6e:	14 f4       	brge	.+4      	; 0xe74 <_Z12printDataLCDv+0xa4>
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <_Z12printDataLCDv+0xa8>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <error_counter+0x1>
     e7c:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <error_counter>
				String* er;
				er = error_decode(error_byte);
     e80:	81 2f       	mov	r24, r17
     e82:	12 db       	rcall	.-2524   	; 0x4a8 <_Z12error_decodeh>
				lcd.print("ER:");
     e84:	64 e0       	ldi	r22, 0x04	; 4
     e86:	73 e0       	ldi	r23, 0x03	; 3
     e88:	84 e5       	ldi	r24, 0x54	; 84
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	92 d7       	rcall	.+3876   	; 0x1db2 <_ZN5Print5printEPKc>
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
     e8e:	4a e0       	ldi	r20, 0x0A	; 10
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <error_byte_old>
     e96:	84 e5       	ldi	r24, 0x54	; 84
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	f9 d7       	rcall	.+4082   	; 0x1e8e <_ZN5Print5printEhi>
				lcd.print("   ");
     e9c:	6f e0       	ldi	r22, 0x0F	; 15
     e9e:	73 e0       	ldi	r23, 0x03	; 3
     ea0:	84 e5       	ldi	r24, 0x54	; 84
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	86 d7       	rcall	.+3852   	; 0x1db2 <_ZN5Print5printEPKc>
     ea6:	de c0       	rjmp	.+444    	; 0x1064 <_Z12printDataLCDv+0x294>
			} else { // No Error :)
				lcd.print("          ");
     ea8:	68 e0       	ldi	r22, 0x08	; 8
     eaa:	73 e0       	ldi	r23, 0x03	; 3
     eac:	84 e5       	ldi	r24, 0x54	; 84
     eae:	93 e0       	ldi	r25, 0x03	; 3
     eb0:	80 d7       	rcall	.+3840   	; 0x1db2 <_ZN5Print5printEPKc>
				if (msgLength > 2) {
     eb2:	03 30       	cpi	r16, 0x03	; 3
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <_Z12printDataLCDv+0xe8>
					position = Serial1.read();
     eb6:	d6 c0       	rjmp	.+428    	; 0x1064 <_Z12printDataLCDv+0x294>
     eb8:	87 e3       	ldi	r24, 0x37	; 55
     eba:	94 e0       	ldi	r25, 0x04	; 4
     ebc:	a1 d4       	rcall	.+2370   	; 0x1800 <_ZN14HardwareSerial4readEv>
     ebe:	8c 01       	movw	r16, r24
					position = (Serial1.read()<<8) + position;
     ec0:	87 e3       	ldi	r24, 0x37	; 55
     ec2:	94 e0       	ldi	r25, 0x04	; 4
     ec4:	9d d4       	rcall	.+2362   	; 0x1800 <_ZN14HardwareSerial4readEv>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	38 2f       	mov	r19, r24
     ecc:	02 0f       	add	r16, r18
     ece:	13 1f       	adc	r17, r19
     ed0:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <position_old>
					rotations = position_old > position ? rotations + 1 : rotations;
     ed4:	30 91 99 03 	lds	r19, 0x0399	; 0x800399 <position_old+0x1>
     ed8:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <rotations>
     edc:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <rotations+0x1>
     ee0:	02 17       	cp	r16, r18
     ee2:	13 07       	cpc	r17, r19
     ee4:	0c f4       	brge	.+2      	; 0xee8 <_Z12printDataLCDv+0x118>
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <rotations+0x1>
     eec:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <rotations>
					position_old = position;
     ef0:	10 93 99 03 	sts	0x0399, r17	; 0x800399 <position_old+0x1>
     ef4:	00 93 98 03 	sts	0x0398, r16	; 0x800398 <position_old>

					//Serial.println(position);
					speed = Serial1.read();
     ef8:	87 e3       	ldi	r24, 0x37	; 55
     efa:	94 e0       	ldi	r25, 0x04	; 4
     efc:	81 d4       	rcall	.+2306   	; 0x1800 <_ZN14HardwareSerial4readEv>
					speed = (Serial1.read()<<8) + speed;
     efe:	6c 01       	movw	r12, r24
     f00:	87 e3       	ldi	r24, 0x37	; 55
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	7d d4       	rcall	.+2298   	; 0x1800 <_ZN14HardwareSerial4readEv>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	38 2f       	mov	r19, r24
     f0c:	c2 0e       	add	r12, r18
					//Serial.println(speed);
					load = Serial1.read();
     f0e:	d3 1e       	adc	r13, r19
     f10:	87 e3       	ldi	r24, 0x37	; 55
     f12:	94 e0       	ldi	r25, 0x04	; 4
     f14:	75 d4       	rcall	.+2282   	; 0x1800 <_ZN14HardwareSerial4readEv>
					load = (Serial1.read()<<8) + load;
     f16:	7c 01       	movw	r14, r24
     f18:	87 e3       	ldi	r24, 0x37	; 55
     f1a:	94 e0       	ldi	r25, 0x04	; 4
     f1c:	71 d4       	rcall	.+2274   	; 0x1800 <_ZN14HardwareSerial4readEv>
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	38 2f       	mov	r19, r24
					voltage = Serial1.read();
     f24:	e2 0e       	add	r14, r18
     f26:	f3 1e       	adc	r15, r19
     f28:	87 e3       	ldi	r24, 0x37	; 55
					temperature = Serial1.read();
     f2a:	94 e0       	ldi	r25, 0x04	; 4
     f2c:	69 d4       	rcall	.+2258   	; 0x1800 <_ZN14HardwareSerial4readEv>
     f2e:	87 e3       	ldi	r24, 0x37	; 55
					registered = Serial1.read();
     f30:	94 e0       	ldi	r25, 0x04	; 4
     f32:	66 d4       	rcall	.+2252   	; 0x1800 <_ZN14HardwareSerial4readEv>
     f34:	87 e3       	ldi	r24, 0x37	; 55
					moving = Serial1.read();
     f36:	94 e0       	ldi	r25, 0x04	; 4
     f38:	63 d4       	rcall	.+2246   	; 0x1800 <_ZN14HardwareSerial4readEv>
     f3a:	87 e3       	ldi	r24, 0x37	; 55
     f3c:	94 e0       	ldi	r25, 0x04	; 4
					lock = Serial1.read();
     f3e:	60 d4       	rcall	.+2240   	; 0x1800 <_ZN14HardwareSerial4readEv>
     f40:	87 e3       	ldi	r24, 0x37	; 55
     f42:	94 e0       	ldi	r25, 0x04	; 4
     f44:	5d d4       	rcall	.+2234   	; 0x1800 <_ZN14HardwareSerial4readEv>
					punch = Serial1.read();
     f46:	87 e3       	ldi	r24, 0x37	; 55
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	5a d4       	rcall	.+2228   	; 0x1800 <_ZN14HardwareSerial4readEv>
     f4c:	87 e3       	ldi	r24, 0x37	; 55
					punch = (Serial1.read()<<8) + punch;
     f4e:	94 e0       	ldi	r25, 0x04	; 4
     f50:	57 d4       	rcall	.+2222   	; 0x1800 <_ZN14HardwareSerial4readEv>
     f52:	87 e3       	ldi	r24, 0x37	; 55
     f54:	94 e0       	ldi	r25, 0x04	; 4
					current = Serial1.read();
     f56:	54 d4       	rcall	.+2216   	; 0x1800 <_ZN14HardwareSerial4readEv>
     f58:	87 e3       	ldi	r24, 0x37	; 55
     f5a:	94 e0       	ldi	r25, 0x04	; 4
     f5c:	51 d4       	rcall	.+2210   	; 0x1800 <_ZN14HardwareSerial4readEv>
					current = (Serial1.read()<<8) + current;
     f5e:	c1 14       	cp	r12, r1
     f60:	94 e0       	ldi	r25, 0x04	; 4
     f62:	d9 06       	cpc	r13, r25
     f64:	2c f0       	brlt	.+10     	; 0xf70 <_Z12printDataLCDv+0x1a0>
					//Serial.println(load);
					if (speed > 0x3FF) {
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	d8 1a       	sub	r13, r24
     f6a:	99 24       	eor	r9, r9
     f6c:	93 94       	inc	r9
						speedDirection = CW;
						speed = speed - 0x400;
<<<<<<< HEAD
    109c:	73 94       	inc	r7
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <_Z12printDataLCDv+0x1d6>
=======
     de8:	87 e3       	ldi	r24, 0x37	; 55
     dea:	94 e0       	ldi	r25, 0x04	; 4
     dec:	ea d4       	rcall	.+2516   	; 0x17c2 <_ZN14HardwareSerial9availableEv>
	if (available > 0){
     dee:	18 16       	cp	r1, r24
     df0:	19 06       	cpc	r1, r25
     df2:	0c f0       	brlt	.+2      	; 0xdf6 <_Z12printDataLCDv+0x30>
     df4:	56 c1       	rjmp	.+684    	; 0x10a2 <_Z12printDataLCDv+0x2dc>
		serialReading = YES;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__data_end>
		msgStarted = Serial1.read() == 0xFF ?  YES : NO;
     dfc:	87 e3       	ldi	r24, 0x37	; 55
     dfe:	94 e0       	ldi	r25, 0x04	; 4
     e00:	fa d4       	rcall	.+2548   	; 0x17f6 <_ZN14HardwareSerial4readEv>
		if (msgStarted && (Serial1.read() == 0xFF)) {
     e02:	8f 3f       	cpi	r24, 0xFF	; 255
     e04:	91 05       	cpc	r25, r1
     e06:	09 f0       	breq	.+2      	; 0xe0a <_Z12printDataLCDv+0x44>
     e08:	4c c1       	rjmp	.+664    	; 0x10a2 <_Z12printDataLCDv+0x2dc>
     e0a:	87 e3       	ldi	r24, 0x37	; 55
     e0c:	94 e0       	ldi	r25, 0x04	; 4
     e0e:	f3 d4       	rcall	.+2534   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     e10:	8f 3f       	cpi	r24, 0xFF	; 255
     e12:	91 05       	cpc	r25, r1
     e14:	09 f0       	breq	.+2      	; 0xe18 <_Z12printDataLCDv+0x52>
     e16:	45 c1       	rjmp	.+650    	; 0x10a2 <_Z12printDataLCDv+0x2dc>
			do { servoID = Serial1.read(); } while (servoID == 0xFF); // this make sure you wait for real data
     e18:	87 e3       	ldi	r24, 0x37	; 55
     e1a:	94 e0       	ldi	r25, 0x04	; 4
     e1c:	ec d4       	rcall	.+2520   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     e1e:	ec 01       	movw	r28, r24
     e20:	b8 2e       	mov	r11, r24
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	c8 17       	cp	r28, r24
     e26:	c1 f3       	breq	.-16     	; 0xe18 <_Z12printDataLCDv+0x52>
			
			msgLength = Serial1.read(); // msg Length
     e28:	87 e3       	ldi	r24, 0x37	; 55
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	e4 d4       	rcall	.+2504   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     e2e:	08 2f       	mov	r16, r24
			error_byte = Serial1.read();
     e30:	87 e3       	ldi	r24, 0x37	; 55
     e32:	94 e0       	ldi	r25, 0x04	; 4
     e34:	e0 d4       	rcall	.+2496   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     e36:	18 2f       	mov	r17, r24
     e38:	81 11       	cpse	r24, r1
			error_byte_old = error_byte ? error_byte : error_byte_old;
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <_Z12printDataLCDv+0x7a>
     e3c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <error_byte_old>
     e40:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <error_byte_old>
     e44:	40 e0       	ldi	r20, 0x00	; 0
			
			lcd.setCursor(6,0);
     e46:	66 e0       	ldi	r22, 0x06	; 6
     e48:	84 e5       	ldi	r24, 0x54	; 84
     e4a:	93 e0       	ldi	r25, 0x03	; 3
     e4c:	0e 94 75 12 	call	0x24ea	; 0x24ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
     e50:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <error_counter>
     e54:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <error_counter+0x1>
     e58:	11 11       	cpse	r17, r1
			if (error_byte || error_counter) {	
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <_Z12printDataLCDv+0x9a>
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	f9 f0       	breq	.+62     	; 0xe9e <_Z12printDataLCDv+0xd8>
     e60:	8b 30       	cpi	r24, 0x0B	; 11
				error_counter = error_counter > 10 ? 0 : error_counter + 1;
     e62:	91 05       	cpc	r25, r1
     e64:	14 f4       	brge	.+4      	; 0xe6a <_Z12printDataLCDv+0xa4>
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <_Z12printDataLCDv+0xa8>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <error_counter+0x1>
     e72:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <error_counter>
				String* er;
				er = error_decode(error_byte);
     e76:	81 2f       	mov	r24, r17
     e78:	fc da       	rcall	.-2568   	; 0x472 <_Z12error_decodeh>
				lcd.print("ER:");
     e7a:	64 e0       	ldi	r22, 0x04	; 4
     e7c:	73 e0       	ldi	r23, 0x03	; 3
     e7e:	84 e5       	ldi	r24, 0x54	; 84
     e80:	93 e0       	ldi	r25, 0x03	; 3
     e82:	92 d7       	rcall	.+3876   	; 0x1da8 <_ZN5Print5printEPKc>
				//char buff[7];
				//sprintf(buff, "BYTE_TO_BINARY_PATTERN", BYTE_TO_BINARY(error_byte));
				lcd.print(error_byte_old);
     e84:	4a e0       	ldi	r20, 0x0A	; 10
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <error_byte_old>
     e8c:	84 e5       	ldi	r24, 0x54	; 84
     e8e:	93 e0       	ldi	r25, 0x03	; 3
     e90:	f9 d7       	rcall	.+4082   	; 0x1e84 <_ZN5Print5printEhi>
				lcd.print("   ");
     e92:	6f e0       	ldi	r22, 0x0F	; 15
     e94:	73 e0       	ldi	r23, 0x03	; 3
     e96:	84 e5       	ldi	r24, 0x54	; 84
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	86 d7       	rcall	.+3852   	; 0x1da8 <_ZN5Print5printEPKc>
     e9c:	de c0       	rjmp	.+444    	; 0x105a <_Z12printDataLCDv+0x294>
			} else { // No Error :)
				lcd.print("          ");
     e9e:	68 e0       	ldi	r22, 0x08	; 8
     ea0:	73 e0       	ldi	r23, 0x03	; 3
     ea2:	84 e5       	ldi	r24, 0x54	; 84
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	80 d7       	rcall	.+3840   	; 0x1da8 <_ZN5Print5printEPKc>
				if (msgLength > 2) {
     ea8:	03 30       	cpi	r16, 0x03	; 3
     eaa:	08 f4       	brcc	.+2      	; 0xeae <_Z12printDataLCDv+0xe8>
					position = Serial1.read();
     eac:	d6 c0       	rjmp	.+428    	; 0x105a <_Z12printDataLCDv+0x294>
     eae:	87 e3       	ldi	r24, 0x37	; 55
     eb0:	94 e0       	ldi	r25, 0x04	; 4
     eb2:	a1 d4       	rcall	.+2370   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     eb4:	8c 01       	movw	r16, r24
					position = (Serial1.read()<<8) + position;
     eb6:	87 e3       	ldi	r24, 0x37	; 55
     eb8:	94 e0       	ldi	r25, 0x04	; 4
     eba:	9d d4       	rcall	.+2362   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	38 2f       	mov	r19, r24
     ec2:	02 0f       	add	r16, r18
     ec4:	13 1f       	adc	r17, r19
     ec6:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <position_old>
					rotations = position_old > position ? rotations + 1 : rotations;
     eca:	30 91 99 03 	lds	r19, 0x0399	; 0x800399 <position_old+0x1>
     ece:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <rotations>
     ed2:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <rotations+0x1>
     ed6:	02 17       	cp	r16, r18
     ed8:	13 07       	cpc	r17, r19
     eda:	0c f4       	brge	.+2      	; 0xede <_Z12printDataLCDv+0x118>
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <rotations+0x1>
     ee2:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <rotations>
					position_old = position;
     ee6:	10 93 99 03 	sts	0x0399, r17	; 0x800399 <position_old+0x1>
     eea:	00 93 98 03 	sts	0x0398, r16	; 0x800398 <position_old>
								
					//Serial.println(position);
					speed = Serial1.read();
     eee:	87 e3       	ldi	r24, 0x37	; 55
     ef0:	94 e0       	ldi	r25, 0x04	; 4
     ef2:	81 d4       	rcall	.+2306   	; 0x17f6 <_ZN14HardwareSerial4readEv>
					speed = (Serial1.read()<<8) + speed;
     ef4:	6c 01       	movw	r12, r24
     ef6:	87 e3       	ldi	r24, 0x37	; 55
     ef8:	94 e0       	ldi	r25, 0x04	; 4
     efa:	7d d4       	rcall	.+2298   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	38 2f       	mov	r19, r24
     f02:	c2 0e       	add	r12, r18
					//Serial.println(speed);
					load = Serial1.read();
     f04:	d3 1e       	adc	r13, r19
     f06:	87 e3       	ldi	r24, 0x37	; 55
     f08:	94 e0       	ldi	r25, 0x04	; 4
     f0a:	75 d4       	rcall	.+2282   	; 0x17f6 <_ZN14HardwareSerial4readEv>
					load = (Serial1.read()<<8) + load;
     f0c:	7c 01       	movw	r14, r24
     f0e:	87 e3       	ldi	r24, 0x37	; 55
     f10:	94 e0       	ldi	r25, 0x04	; 4
     f12:	71 d4       	rcall	.+2274   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	38 2f       	mov	r19, r24
					voltage = Serial1.read();
     f1a:	e2 0e       	add	r14, r18
     f1c:	f3 1e       	adc	r15, r19
     f1e:	87 e3       	ldi	r24, 0x37	; 55
					temperature = Serial1.read();
     f20:	94 e0       	ldi	r25, 0x04	; 4
     f22:	69 d4       	rcall	.+2258   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     f24:	87 e3       	ldi	r24, 0x37	; 55
					registered = Serial1.read();
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	66 d4       	rcall	.+2252   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     f2a:	87 e3       	ldi	r24, 0x37	; 55
					moving = Serial1.read();
     f2c:	94 e0       	ldi	r25, 0x04	; 4
     f2e:	63 d4       	rcall	.+2246   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     f30:	87 e3       	ldi	r24, 0x37	; 55
     f32:	94 e0       	ldi	r25, 0x04	; 4
					lock = Serial1.read();
     f34:	60 d4       	rcall	.+2240   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     f36:	87 e3       	ldi	r24, 0x37	; 55
     f38:	94 e0       	ldi	r25, 0x04	; 4
     f3a:	5d d4       	rcall	.+2234   	; 0x17f6 <_ZN14HardwareSerial4readEv>
					punch = Serial1.read();
     f3c:	87 e3       	ldi	r24, 0x37	; 55
     f3e:	94 e0       	ldi	r25, 0x04	; 4
     f40:	5a d4       	rcall	.+2228   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     f42:	87 e3       	ldi	r24, 0x37	; 55
					punch = (Serial1.read()<<8) + punch;
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	57 d4       	rcall	.+2222   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     f48:	87 e3       	ldi	r24, 0x37	; 55
     f4a:	94 e0       	ldi	r25, 0x04	; 4
					current = Serial1.read();
     f4c:	54 d4       	rcall	.+2216   	; 0x17f6 <_ZN14HardwareSerial4readEv>
     f4e:	87 e3       	ldi	r24, 0x37	; 55
     f50:	94 e0       	ldi	r25, 0x04	; 4
     f52:	51 d4       	rcall	.+2210   	; 0x17f6 <_ZN14HardwareSerial4readEv>
					current = (Serial1.read()<<8) + current;
     f54:	c1 14       	cp	r12, r1
     f56:	94 e0       	ldi	r25, 0x04	; 4
     f58:	d9 06       	cpc	r13, r25
     f5a:	2c f0       	brlt	.+10     	; 0xf66 <_Z12printDataLCDv+0x1a0>
					//Serial.println(load);
					if (speed > 0x3FF) {
     f5c:	84 e0       	ldi	r24, 0x04	; 4
     f5e:	d8 1a       	sub	r13, r24
     f60:	99 24       	eor	r9, r9
     f62:	93 94       	inc	r9
						speedDirection = CW;
						speed = speed - 0x400;
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <_Z12printDataLCDv+0x1a2>
     f66:	91 2c       	mov	r9, r1
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <_Z12printDataLCDv+0x1a2>
     f70:	91 2c       	mov	r9, r1
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
					punch = (Serial1.read()<<8) + punch;
					current = Serial1.read();
					current = (Serial1.read()<<8) + current;
					//Serial.println(load);
					if (speed > 0x3FF) {
						speedDirection = CW;
<<<<<<< HEAD
<<<<<<< HEAD
    10a0:	71 2c       	mov	r7, r1
    10a2:	01 15       	cp	r16, r1
    10a4:	f4 e0       	ldi	r31, 0x04	; 4
=======
     f72:	e1 14       	cp	r14, r1
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	f9 06       	cpc	r15, r25
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
						speed = speed - 0x400;
						} else {
						speedDirection = CCW;
     f78:	2c f0       	brlt	.+10     	; 0xf84 <_Z12printDataLCDv+0x1b4>
					}
					if (load > 0x3FF) {
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	f8 1a       	sub	r15, r24
     f7e:	aa 24       	eor	r10, r10
						loadDirection = CW;
						load = load - 0x400;
<<<<<<< HEAD
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <_Z12printDataLCDv+0x1e8>
=======
     f68:	e1 14       	cp	r14, r1
     f6a:	94 e0       	ldi	r25, 0x04	; 4
     f6c:	f9 06       	cpc	r15, r25
						speed = speed - 0x400;
						} else {
						speedDirection = CCW;
     f6e:	2c f0       	brlt	.+10     	; 0xf7a <_Z12printDataLCDv+0x1b4>
					}
					if (load > 0x3FF) {
     f70:	84 e0       	ldi	r24, 0x04	; 4
     f72:	f8 1a       	sub	r15, r24
     f74:	aa 24       	eor	r10, r10
						loadDirection = CW;
						load = load - 0x400;
     f76:	a3 94       	inc	r10
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <_Z12printDataLCDv+0x1b6>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     f80:	a3 94       	inc	r10
     f82:	01 c0       	rjmp	.+2      	; 0xf86 <_Z12printDataLCDv+0x1b6>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
						speed = speed - 0x400;
						} else {
						speedDirection = CCW;
					}
					if (load > 0x3FF) {
						loadDirection = CW;
<<<<<<< HEAD
<<<<<<< HEAD
    10b2:	a1 2c       	mov	r10, r1
    10b4:	2a e0       	ldi	r18, 0x0A	; 10
						load = load - 0x400;
						} else {
						loadDirection = CCW;
    10b6:	2e 9d       	mul	r18, r14
=======
     f7a:	a1 2c       	mov	r10, r1
     f7c:	ae 01       	movw	r20, r28
     f7e:	55 27       	eor	r21, r21
						load = load - 0x400;
						} else {
						loadDirection = CCW;
     f80:	99 e0       	ldi	r25, 0x09	; 9
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     f84:	a1 2c       	mov	r10, r1
     f86:	ae 01       	movw	r20, r28
     f88:	55 27       	eor	r21, r21
						load = load - 0x400;
						} else {
						loadDirection = CCW;
     f8a:	99 e0       	ldi	r25, 0x09	; 9
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
					}
					/* Update the Arm Object */
					arm.servos[servoID].position = position;
<<<<<<< HEAD
<<<<<<< HEAD
    10d0:	12 87       	std	Z+10, r17	; 0x0a
    10d2:	01 87       	std	Z+9, r16	; 0x09
					arm.servos[servoID].speed;
					arm.servos[servoID].load = load;
    10d4:	21 e0       	ldi	r18, 0x01	; 1
=======
     f82:	c9 9f       	mul	r28, r25
     f84:	e0 01       	movw	r28, r0
     f86:	11 24       	eor	r1, r1
     f88:	cb 59       	subi	r28, 0x9B	; 155
     f8a:	dc 4f       	sbci	r29, 0xFC	; 252
     f8c:	1c 83       	std	Y+4, r17	; 0x04
     f8e:	0b 83       	std	Y+3, r16	; 0x03
     f90:	df 82       	std	Y+7, r13	; 0x07
     f92:	ce 82       	std	Y+6, r12	; 0x06
					arm.servos[servoID].speed = speed;
     f94:	f9 86       	std	Y+9, r15	; 0x09
     f96:	e8 86       	std	Y+8, r14	; 0x08
					arm.servos[servoID].load = load;
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	60 e0       	ldi	r22, 0x00	; 0
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     f8c:	c9 9f       	mul	r28, r25
     f8e:	e0 01       	movw	r28, r0
     f90:	11 24       	eor	r1, r1
     f92:	cb 59       	subi	r28, 0x9B	; 155
     f94:	dc 4f       	sbci	r29, 0xFC	; 252
     f96:	1c 83       	std	Y+4, r17	; 0x04
     f98:	0b 83       	std	Y+3, r16	; 0x03
     f9a:	df 82       	std	Y+7, r13	; 0x07
     f9c:	ce 82       	std	Y+6, r12	; 0x06
					arm.servos[servoID].speed = speed;
     f9e:	f9 86       	std	Y+9, r15	; 0x09
     fa0:	e8 86       	std	Y+8, r14	; 0x08
					arm.servos[servoID].load = load;
     fa2:	21 e0       	ldi	r18, 0x01	; 1
     fa4:	60 e0       	ldi	r22, 0x00	; 0
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
					//Serial.println("================");
					//lcd.clear();
					//char buffer[16];
					//sprintf(buffer, "Servo ID: %d", servoID);
					printLCD(LCD_COL1, 0, servoID, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    10d6:	a7 01       	movw	r20, r14
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	84 e0       	ldi	r24, 0x04	; 4
    10dc:	16 d9       	rcall	.-3540   	; 0x30a <_Z8printLCDhhih>
    10de:	f4 01       	movw	r30, r8
=======
     fa6:	84 e0       	ldi	r24, 0x04	; 4
     fa8:	b0 d9       	rcall	.-3232   	; 0x30a <_Z8printLCDhhih>
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	81 30       	cpi	r24, 0x01	; 1
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
					lcd.print(arm.servos[servoID].mode == 1 ? " Whl" : arm.servos[servoID].mode == 2 ? " Mlt" : " Jnt");
     fae:	29 f0       	breq	.+10     	; 0xfba <_Z12printDataLCDv+0x1ea>
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <_Z12printDataLCDv+0x1f0>
     fb4:	65 ef       	ldi	r22, 0xF5	; 245
     fb6:	72 e0       	ldi	r23, 0x02	; 2
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <_Z12printDataLCDv+0x1f4>
     fba:	6a ef       	ldi	r22, 0xFA	; 250
     fbc:	72 e0       	ldi	r23, 0x02	; 2
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <_Z12printDataLCDv+0x1f4>
     fc0:	6f ef       	ldi	r22, 0xFF	; 255
     fc2:	72 e0       	ldi	r23, 0x02	; 2
     fc4:	84 e5       	ldi	r24, 0x54	; 84
     fc6:	93 e0       	ldi	r25, 0x03	; 3
					printLCD(LCD_COL1, 1, position * MX_PRESENT_POSITION_DEGREE, 4);
     fc8:	f4 d6       	rcall	.+3560   	; 0x1db2 <_ZN5Print5printEPKc>
     fca:	b8 01       	movw	r22, r16
     fcc:	01 2e       	mov	r0, r17
     fce:	00 0c       	add	r0, r0
     fd0:	88 0b       	sbc	r24, r24
     fd2:	99 0b       	sbc	r25, r25
     fd4:	1b d1       	rcall	.+566    	; 0x120c <__floatsisf>
     fd6:	28 e5       	ldi	r18, 0x58	; 88
     fd8:	39 e3       	ldi	r19, 0x39	; 57
     fda:	44 eb       	ldi	r20, 0xB4	; 180
     fdc:	5d e3       	ldi	r21, 0x3D	; 61
     fde:	c6 d1       	rcall	.+908    	; 0x136c <__mulsf3>
     fe0:	e2 d0       	rcall	.+452    	; 0x11a6 <__fixsfsi>
     fe2:	24 e0       	ldi	r18, 0x04	; 4
     fe4:	ab 01       	movw	r20, r22
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	8f d9       	rcall	.-3298   	; 0x30a <_Z8printLCDhhih>
     fec:	6f ed       	ldi	r22, 0xDF	; 223
					lcd.print((char)CH_DEG);
<<<<<<< HEAD
    1184:	93 e0       	ldi	r25, 0x03	; 3
    1186:	01 d7       	rcall	.+3586   	; 0x1f8a <_ZN5Print5printEc>
    1188:	24 e0       	ldi	r18, 0x04	; 4
    118a:	a6 01       	movw	r20, r12
=======
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	b5 d9       	rcall	.-3222   	; 0x30a <_Z8printLCDhhih>
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	81 30       	cpi	r24, 0x01	; 1
					lcd.print(arm.servos[servoID].mode == 1 ? " Whl" : arm.servos[servoID].mode == 2 ? " Mlt" : " Jnt");
     fa4:	29 f0       	breq	.+10     	; 0xfb0 <_Z12printDataLCDv+0x1ea>
     fa6:	82 30       	cpi	r24, 0x02	; 2
     fa8:	31 f0       	breq	.+12     	; 0xfb6 <_Z12printDataLCDv+0x1f0>
     faa:	65 ef       	ldi	r22, 0xF5	; 245
     fac:	72 e0       	ldi	r23, 0x02	; 2
     fae:	05 c0       	rjmp	.+10     	; 0xfba <_Z12printDataLCDv+0x1f4>
     fb0:	6a ef       	ldi	r22, 0xFA	; 250
     fb2:	72 e0       	ldi	r23, 0x02	; 2
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <_Z12printDataLCDv+0x1f4>
     fb6:	6f ef       	ldi	r22, 0xFF	; 255
     fb8:	72 e0       	ldi	r23, 0x02	; 2
     fba:	84 e5       	ldi	r24, 0x54	; 84
     fbc:	93 e0       	ldi	r25, 0x03	; 3
					printLCD(LCD_COL1, 1, position * MX_PRESENT_POSITION_DEGREE, 4);
     fbe:	f4 d6       	rcall	.+3560   	; 0x1da8 <_ZN5Print5printEPKc>
     fc0:	b8 01       	movw	r22, r16
     fc2:	01 2e       	mov	r0, r17
     fc4:	00 0c       	add	r0, r0
     fc6:	88 0b       	sbc	r24, r24
     fc8:	99 0b       	sbc	r25, r25
     fca:	1b d1       	rcall	.+566    	; 0x1202 <__floatsisf>
     fcc:	28 e5       	ldi	r18, 0x58	; 88
     fce:	39 e3       	ldi	r19, 0x39	; 57
     fd0:	44 eb       	ldi	r20, 0xB4	; 180
     fd2:	5d e3       	ldi	r21, 0x3D	; 61
     fd4:	c6 d1       	rcall	.+908    	; 0x1362 <__mulsf3>
     fd6:	e2 d0       	rcall	.+452    	; 0x119c <__fixsfsi>
     fd8:	24 e0       	ldi	r18, 0x04	; 4
     fda:	ab 01       	movw	r20, r22
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	84 e0       	ldi	r24, 0x04	; 4
     fe0:	94 d9       	rcall	.-3288   	; 0x30a <_Z8printLCDhhih>
     fe2:	6f ed       	ldi	r22, 0xDF	; 223
					lcd.print((char)CH_DEG);
     fe4:	84 e5       	ldi	r24, 0x54	; 84
     fe6:	93 e0       	ldi	r25, 0x03	; 3
     fe8:	e0 d6       	rcall	.+3520   	; 0x1daa <_ZN5Print5printEc>
     fea:	25 e0       	ldi	r18, 0x05	; 5
					printLCD(LCD_COL2, 1, position, 5);
     fec:	a8 01       	movw	r20, r16
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	8a e0       	ldi	r24, 0x0A	; 10
     ff2:	8b d9       	rcall	.-3306   	; 0x30a <_Z8printLCDhhih>
     ff4:	40 91 93 03 	lds	r20, 0x0393	; 0x800393 <currPos>
					printLCD(LCD_COL2+5, 1, currPos, 5);
     ff8:	50 91 94 03 	lds	r21, 0x0394	; 0x800394 <currPos+0x1>
     ffc:	25 e0       	ldi	r18, 0x05	; 5
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	8f e0       	ldi	r24, 0x0F	; 15
    1002:	83 d9       	rcall	.-3322   	; 0x30a <_Z8printLCDhhih>
    1004:	24 e0       	ldi	r18, 0x04	; 4
    1006:	a6 01       	movw	r20, r12
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
     fee:	84 e5       	ldi	r24, 0x54	; 84
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	e0 d6       	rcall	.+3520   	; 0x1db4 <_ZN5Print5printEc>
     ff4:	25 e0       	ldi	r18, 0x05	; 5
					printLCD(LCD_COL2, 1, position, 5);
     ff6:	a8 01       	movw	r20, r16
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	8a e0       	ldi	r24, 0x0A	; 10
     ffc:	86 d9       	rcall	.-3316   	; 0x30a <_Z8printLCDhhih>
     ffe:	40 91 93 03 	lds	r20, 0x0393	; 0x800393 <currPos>
					printLCD(LCD_COL2+5, 1, currPos, 5);
    1002:	50 91 94 03 	lds	r21, 0x0394	; 0x800394 <currPos+0x1>
    1006:	25 e0       	ldi	r18, 0x05	; 5
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	8f e0       	ldi	r24, 0x0F	; 15
    100c:	7e d9       	rcall	.-3332   	; 0x30a <_Z8printLCDhhih>
    100e:	24 e0       	ldi	r18, 0x04	; 4
    1010:	a6 01       	movw	r20, r12
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
					// 			lcd.setCursor(LCD_COL2 ,1);
					// 			lcd.print((int)(currPos));
					//lcd.setCursor(10,1);
					//lcd.print(rotations);
					printLCD(LCD_COL1, 2, speed, 4);
<<<<<<< HEAD
<<<<<<< HEAD
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	84 e0       	ldi	r24, 0x04	; 4
    1190:	bc d8       	rcall	.-3720   	; 0x30a <_Z8printLCDhhih>
    1192:	71 10       	cpse	r7, r1
    1194:	02 c0       	rjmp	.+4      	; 0x119a <_Z12printDataLCDv+0x2ce>
=======
    1012:	62 e0       	ldi	r22, 0x02	; 2
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	79 d9       	rcall	.-3342   	; 0x30a <_Z8printLCDhhih>
    1018:	91 10       	cpse	r9, r1
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <_Z12printDataLCDv+0x250>
    101c:	6f e7       	ldi	r22, 0x7F	; 127
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
					lcd.print(speedDirection ? (char)CH_ARR : (char)CH_ARL);
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <_Z12printDataLCDv+0x252>
    1020:	6e e7       	ldi	r22, 0x7E	; 126
    1022:	84 e5       	ldi	r24, 0x54	; 84
    1024:	93 e0       	ldi	r25, 0x03	; 3
    1026:	c6 d6       	rcall	.+3468   	; 0x1db4 <_ZN5Print5printEc>
    1028:	24 e0       	ldi	r18, 0x04	; 4
    102a:	a7 01       	movw	r20, r14
    102c:	63 e0       	ldi	r22, 0x03	; 3
					printLCD(LCD_COL1, 3, load, 4);
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	6c d9       	rcall	.-3368   	; 0x30a <_Z8printLCDhhih>
    1032:	a1 10       	cpse	r10, r1
    1034:	02 c0       	rjmp	.+4      	; 0x103a <_Z12printDataLCDv+0x26a>
    1036:	6f e7       	ldi	r22, 0x7F	; 127
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
    1038:	01 c0       	rjmp	.+2      	; 0x103c <_Z12printDataLCDv+0x26c>
    103a:	6e e7       	ldi	r22, 0x7E	; 126
    103c:	84 e5       	ldi	r24, 0x54	; 84
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	b9 d6       	rcall	.+3442   	; 0x1db4 <_ZN5Print5printEc>
    1042:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <servoID_old>
    1046:	b8 12       	cpse	r11, r24
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
<<<<<<< HEAD
    121c:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <currPos>
    1220:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <currPos+0x1>
    1224:	02 c0       	rjmp	.+4      	; 0x122a <_Z12printDataLCDv+0x35e>
    1226:	9c 2f       	mov	r25, r28
    1228:	8d 2f       	mov	r24, r29
    122a:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <currPos>
=======
    1008:	62 e0       	ldi	r22, 0x02	; 2
    100a:	84 e0       	ldi	r24, 0x04	; 4
    100c:	7e d9       	rcall	.-3332   	; 0x30a <_Z8printLCDhhih>
    100e:	91 10       	cpse	r9, r1
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <_Z12printDataLCDv+0x250>
    1012:	6f e7       	ldi	r22, 0x7F	; 127
					lcd.print(speedDirection ? (char)CH_ARR : (char)CH_ARL);
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <_Z12printDataLCDv+0x252>
    1016:	6e e7       	ldi	r22, 0x7E	; 126
    1018:	84 e5       	ldi	r24, 0x54	; 84
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	c6 d6       	rcall	.+3468   	; 0x1daa <_ZN5Print5printEc>
    101e:	24 e0       	ldi	r18, 0x04	; 4
    1020:	a7 01       	movw	r20, r14
    1022:	63 e0       	ldi	r22, 0x03	; 3
					printLCD(LCD_COL1, 3, load, 4);
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	71 d9       	rcall	.-3358   	; 0x30a <_Z8printLCDhhih>
    1028:	a1 10       	cpse	r10, r1
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <_Z12printDataLCDv+0x26a>
    102c:	6f e7       	ldi	r22, 0x7F	; 127
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <_Z12printDataLCDv+0x26c>
    1030:	6e e7       	ldi	r22, 0x7E	; 126
    1032:	84 e5       	ldi	r24, 0x54	; 84
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	b9 d6       	rcall	.+3442   	; 0x1daa <_ZN5Print5printEc>
    1038:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <servoID_old>
    103c:	b8 12       	cpse	r11, r24
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
    103e:	05 c0       	rjmp	.+10     	; 0x104a <_Z12printDataLCDv+0x284>
    1040:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <currPos>
    1044:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <currPos+0x1>
    1048:	02 c0       	rjmp	.+4      	; 0x104e <_Z12printDataLCDv+0x288>
    104a:	90 2f       	mov	r25, r16
    104c:	81 2f       	mov	r24, r17
    104e:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <currPos>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <_Z12printDataLCDv+0x284>
    104a:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <currPos>
    104e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <currPos+0x1>
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <_Z12printDataLCDv+0x288>
    1054:	90 2f       	mov	r25, r16
    1056:	81 2f       	mov	r24, r17
    1058:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <currPos>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
				lcd.print("   ");
			} else { // No Error :)
				lcd.print("          ");
				if (msgLength > 2) {
					position = Serial1.read();
					position = (Serial1.read()<<8) + position;
<<<<<<< HEAD
<<<<<<< HEAD
    122e:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <currPos+0x1>
=======
    1052:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <currPos+0x1>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    105c:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <currPos+0x1>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
					//lcd.setCursor(LCD_COL1, 3);
					//lcd.print(load);
					lcd.print(loadDirection ? (char)CH_ARR : (char)CH_ARL);
					//printLCD3(LCD_COL2, 3, (45*(current-2048)));
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
<<<<<<< HEAD
<<<<<<< HEAD
    1232:	b0 92 ae 03 	sts	0x03AE, r11	; 0x8003ae <servoID_old>
    1236:	8e e4       	ldi	r24, 0x4E	; 78
=======
    1060:	b0 92 95 03 	sts	0x0395, r11	; 0x800395 <servoID_old>
    1064:	87 e3       	ldi	r24, 0x37	; 55
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
					servoID_old = servoID;
    1066:	94 e0       	ldi	r25, 0x04	; 4
				}
			}
			while(Serial1.available() > 0) {
    1068:	b1 d3       	rcall	.+1890   	; 0x17cc <_ZN14HardwareSerial9availableEv>
    106a:	18 16       	cp	r1, r24
    106c:	19 06       	cpc	r1, r25
    106e:	24 f4       	brge	.+8      	; 0x1078 <_Z12printDataLCDv+0x2a8>
    1070:	87 e3       	ldi	r24, 0x37	; 55
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	c5 d3       	rcall	.+1930   	; 0x1800 <_ZN14HardwareSerial4readEv>
				//Serial.println(Serial1.read());
				Serial1.read();
<<<<<<< HEAD
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
=======
    1056:	b0 92 95 03 	sts	0x0395, r11	; 0x800395 <servoID_old>
    105a:	87 e3       	ldi	r24, 0x37	; 55
					servoID_old = servoID;
    105c:	94 e0       	ldi	r25, 0x04	; 4
				}
			}
			while(Serial1.available() > 0) {
    105e:	b1 d3       	rcall	.+1890   	; 0x17c2 <_ZN14HardwareSerial9availableEv>
    1060:	18 16       	cp	r1, r24
    1062:	19 06       	cpc	r1, r25
    1064:	24 f4       	brge	.+8      	; 0x106e <_Z12printDataLCDv+0x2a8>
    1066:	87 e3       	ldi	r24, 0x37	; 55
    1068:	94 e0       	ldi	r25, 0x04	; 4
    106a:	c5 d3       	rcall	.+1930   	; 0x17f6 <_ZN14HardwareSerial4readEv>
				//Serial.println(Serial1.read());
				Serial1.read();
    106c:	f6 cf       	rjmp	.-20     	; 0x105a <_Z12printDataLCDv+0x294>
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1076:	f6 cf       	rjmp	.-20     	; 0x1064 <_Z12printDataLCDv+0x294>
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
					/* Update the Global variables tracking the servos */
					currPos = servoID_old == servoID ? currPos : position;
					servoID_old = servoID;
				}
			}
			while(Serial1.available() > 0) {
<<<<<<< HEAD
<<<<<<< HEAD
    1252:	d8 d7       	rcall	.+4016   	; 0x2204 <delay>
=======
    1074:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    107e:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
				//Serial.println(Serial1.read());
				Serial1.read();
			}
			
			delay(1);
<<<<<<< HEAD
<<<<<<< HEAD
    1254:	40 91 66 03 	lds	r20, 0x0366	; 0x800366 <cycle_counter>
    1258:	50 91 67 03 	lds	r21, 0x0367	; 0x800367 <cycle_counter+0x1>
    125c:	48 3e       	cpi	r20, 0xE8	; 232
    125e:	f3 e0       	ldi	r31, 0x03	; 3
=======
    1080:	d6 d7       	rcall	.+4012   	; 0x202e <delay>
    1082:	40 91 60 03 	lds	r20, 0x0360	; 0x800360 <cycle_counter>
    1086:	50 91 61 03 	lds	r21, 0x0361	; 0x800361 <cycle_counter+0x1>
    108a:	48 3e       	cpi	r20, 0xE8	; 232
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
			cycle_counter = cycle_counter > 999 ? 0 : cycle_counter + 1;
    108c:	93 e0       	ldi	r25, 0x03	; 3
    108e:	59 07       	cpc	r21, r25
    1090:	1c f4       	brge	.+6      	; 0x1098 <_Z12printDataLCDv+0x2c8>
    1092:	4f 5f       	subi	r20, 0xFF	; 255
    1094:	5f 4f       	sbci	r21, 0xFF	; 255
    1096:	02 c0       	rjmp	.+4      	; 0x109c <_Z12printDataLCDv+0x2cc>
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	50 93 61 03 	sts	0x0361, r21	; 0x800361 <cycle_counter+0x1>
    10a0:	40 93 60 03 	sts	0x0360, r20	; 0x800360 <cycle_counter>
    10a4:	24 e0       	ldi	r18, 0x04	; 4
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	80 e1       	ldi	r24, 0x10	; 16
    10aa:	2f d9       	rcall	.-3490   	; 0x30a <_Z8printLCDhhih>
    10ac:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__data_end>
			printLCD(16, 0, cycle_counter, 4);
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
		}
	}
	serialReading = NO;
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
}
<<<<<<< HEAD
    1290:	cf 90       	pop	r12
    1292:	bf 90       	pop	r11
    1294:	af 90       	pop	r10
    1296:	9f 90       	pop	r9
    1298:	8f 90       	pop	r8
    129a:	7f 90       	pop	r7
    129c:	08 95       	ret

0000129e <loop>:
    129e:	42 e2       	ldi	r20, 0x22	; 34
    12a0:	64 e2       	ldi	r22, 0x24	; 36
    12a2:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <arm>
    12a6:	9a db       	rcall	.-2252   	; 0x9dc <_Z9readServohhh>
    12a8:	11 ce       	rjmp	.-990    	; 0xecc <_Z12printDataLCDv>

000012aa <__subsf3>:
    12aa:	50 58       	subi	r21, 0x80	; 128

000012ac <__addsf3>:
    12ac:	bb 27       	eor	r27, r27
    12ae:	aa 27       	eor	r26, r26
    12b0:	0e d0       	rcall	.+28     	; 0x12ce <__addsf3x>
    12b2:	0d c1       	rjmp	.+538    	; 0x14ce <__fp_round>
    12b4:	fe d0       	rcall	.+508    	; 0x14b2 <__fp_pscA>
    12b6:	30 f0       	brcs	.+12     	; 0x12c4 <__addsf3+0x18>
    12b8:	03 d1       	rcall	.+518    	; 0x14c0 <__fp_pscB>
    12ba:	20 f0       	brcs	.+8      	; 0x12c4 <__addsf3+0x18>
    12bc:	31 f4       	brne	.+12     	; 0x12ca <__addsf3+0x1e>
    12be:	9f 3f       	cpi	r25, 0xFF	; 255
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <__addsf3+0x1a>
    12c2:	1e f4       	brtc	.+6      	; 0x12ca <__addsf3+0x1e>
    12c4:	f3 c0       	rjmp	.+486    	; 0x14ac <__fp_nan>
    12c6:	0e f4       	brtc	.+2      	; 0x12ca <__addsf3+0x1e>
    12c8:	e0 95       	com	r30
    12ca:	e7 fb       	bst	r30, 7
    12cc:	e9 c0       	rjmp	.+466    	; 0x14a0 <__fp_inf>

000012ce <__addsf3x>:
    12ce:	e9 2f       	mov	r30, r25
    12d0:	0f d1       	rcall	.+542    	; 0x14f0 <__fp_split3>
    12d2:	80 f3       	brcs	.-32     	; 0x12b4 <__addsf3+0x8>
    12d4:	ba 17       	cp	r27, r26
    12d6:	62 07       	cpc	r22, r18
    12d8:	73 07       	cpc	r23, r19
    12da:	84 07       	cpc	r24, r20
    12dc:	95 07       	cpc	r25, r21
    12de:	18 f0       	brcs	.+6      	; 0x12e6 <__addsf3x+0x18>
    12e0:	71 f4       	brne	.+28     	; 0x12fe <__addsf3x+0x30>
    12e2:	9e f5       	brtc	.+102    	; 0x134a <__addsf3x+0x7c>
    12e4:	27 c1       	rjmp	.+590    	; 0x1534 <__fp_zero>
    12e6:	0e f4       	brtc	.+2      	; 0x12ea <__addsf3x+0x1c>
    12e8:	e0 95       	com	r30
    12ea:	0b 2e       	mov	r0, r27
    12ec:	ba 2f       	mov	r27, r26
    12ee:	a0 2d       	mov	r26, r0
    12f0:	0b 01       	movw	r0, r22
    12f2:	b9 01       	movw	r22, r18
    12f4:	90 01       	movw	r18, r0
    12f6:	0c 01       	movw	r0, r24
    12f8:	ca 01       	movw	r24, r20
    12fa:	a0 01       	movw	r20, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	ff 27       	eor	r31, r31
    1300:	59 1b       	sub	r21, r25
    1302:	99 f0       	breq	.+38     	; 0x132a <__addsf3x+0x5c>
    1304:	59 3f       	cpi	r21, 0xF9	; 249
    1306:	50 f4       	brcc	.+20     	; 0x131c <__addsf3x+0x4e>
    1308:	50 3e       	cpi	r21, 0xE0	; 224
    130a:	68 f1       	brcs	.+90     	; 0x1366 <__addsf3x+0x98>
    130c:	1a 16       	cp	r1, r26
    130e:	f0 40       	sbci	r31, 0x00	; 0
    1310:	a2 2f       	mov	r26, r18
    1312:	23 2f       	mov	r18, r19
    1314:	34 2f       	mov	r19, r20
    1316:	44 27       	eor	r20, r20
    1318:	58 5f       	subi	r21, 0xF8	; 248
    131a:	f3 cf       	rjmp	.-26     	; 0x1302 <__addsf3x+0x34>
    131c:	46 95       	lsr	r20
    131e:	37 95       	ror	r19
    1320:	27 95       	ror	r18
    1322:	a7 95       	ror	r26
    1324:	f0 40       	sbci	r31, 0x00	; 0
    1326:	53 95       	inc	r21
    1328:	c9 f7       	brne	.-14     	; 0x131c <__addsf3x+0x4e>
    132a:	7e f4       	brtc	.+30     	; 0x134a <__addsf3x+0x7c>
    132c:	1f 16       	cp	r1, r31
    132e:	ba 0b       	sbc	r27, r26
    1330:	62 0b       	sbc	r22, r18
    1332:	73 0b       	sbc	r23, r19
    1334:	84 0b       	sbc	r24, r20
    1336:	ba f0       	brmi	.+46     	; 0x1366 <__addsf3x+0x98>
    1338:	91 50       	subi	r25, 0x01	; 1
    133a:	a1 f0       	breq	.+40     	; 0x1364 <__addsf3x+0x96>
    133c:	ff 0f       	add	r31, r31
    133e:	bb 1f       	adc	r27, r27
    1340:	66 1f       	adc	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	88 1f       	adc	r24, r24
    1346:	c2 f7       	brpl	.-16     	; 0x1338 <__addsf3x+0x6a>
    1348:	0e c0       	rjmp	.+28     	; 0x1366 <__addsf3x+0x98>
    134a:	ba 0f       	add	r27, r26
    134c:	62 1f       	adc	r22, r18
    134e:	73 1f       	adc	r23, r19
    1350:	84 1f       	adc	r24, r20
    1352:	48 f4       	brcc	.+18     	; 0x1366 <__addsf3x+0x98>
    1354:	87 95       	ror	r24
    1356:	77 95       	ror	r23
    1358:	67 95       	ror	r22
    135a:	b7 95       	ror	r27
    135c:	f7 95       	ror	r31
    135e:	9e 3f       	cpi	r25, 0xFE	; 254
    1360:	08 f0       	brcs	.+2      	; 0x1364 <__addsf3x+0x96>
    1362:	b3 cf       	rjmp	.-154    	; 0x12ca <__addsf3+0x1e>
    1364:	93 95       	inc	r25
    1366:	88 0f       	add	r24, r24
    1368:	08 f0       	brcs	.+2      	; 0x136c <__addsf3x+0x9e>
    136a:	99 27       	eor	r25, r25
    136c:	ee 0f       	add	r30, r30
    136e:	97 95       	ror	r25
    1370:	87 95       	ror	r24
    1372:	08 95       	ret

00001374 <__cmpsf2>:
    1374:	71 d0       	rcall	.+226    	; 0x1458 <__fp_cmp>
    1376:	08 f4       	brcc	.+2      	; 0x137a <__cmpsf2+0x6>
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	08 95       	ret

0000137c <__fixsfsi>:
    137c:	04 d0       	rcall	.+8      	; 0x1386 <__fixunssfsi>
    137e:	68 94       	set
    1380:	b1 11       	cpse	r27, r1
    1382:	d9 c0       	rjmp	.+434    	; 0x1536 <__fp_szero>
    1384:	08 95       	ret

00001386 <__fixunssfsi>:
    1386:	bc d0       	rcall	.+376    	; 0x1500 <__fp_splitA>
    1388:	88 f0       	brcs	.+34     	; 0x13ac <__fixunssfsi+0x26>
    138a:	9f 57       	subi	r25, 0x7F	; 127
    138c:	90 f0       	brcs	.+36     	; 0x13b2 <__fixunssfsi+0x2c>
    138e:	b9 2f       	mov	r27, r25
    1390:	99 27       	eor	r25, r25
    1392:	b7 51       	subi	r27, 0x17	; 23
    1394:	a0 f0       	brcs	.+40     	; 0x13be <__fixunssfsi+0x38>
    1396:	d1 f0       	breq	.+52     	; 0x13cc <__fixunssfsi+0x46>
    1398:	66 0f       	add	r22, r22
    139a:	77 1f       	adc	r23, r23
    139c:	88 1f       	adc	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	1a f0       	brmi	.+6      	; 0x13a8 <__fixunssfsi+0x22>
    13a2:	ba 95       	dec	r27
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <__fixunssfsi+0x12>
    13a6:	12 c0       	rjmp	.+36     	; 0x13cc <__fixunssfsi+0x46>
    13a8:	b1 30       	cpi	r27, 0x01	; 1
    13aa:	81 f0       	breq	.+32     	; 0x13cc <__fixunssfsi+0x46>
    13ac:	c3 d0       	rcall	.+390    	; 0x1534 <__fp_zero>
    13ae:	b1 e0       	ldi	r27, 0x01	; 1
    13b0:	08 95       	ret
    13b2:	c0 c0       	rjmp	.+384    	; 0x1534 <__fp_zero>
    13b4:	67 2f       	mov	r22, r23
    13b6:	78 2f       	mov	r23, r24
    13b8:	88 27       	eor	r24, r24
    13ba:	b8 5f       	subi	r27, 0xF8	; 248
    13bc:	39 f0       	breq	.+14     	; 0x13cc <__fixunssfsi+0x46>
    13be:	b9 3f       	cpi	r27, 0xF9	; 249
    13c0:	cc f3       	brlt	.-14     	; 0x13b4 <__fixunssfsi+0x2e>
    13c2:	86 95       	lsr	r24
    13c4:	77 95       	ror	r23
    13c6:	67 95       	ror	r22
    13c8:	b3 95       	inc	r27
    13ca:	d9 f7       	brne	.-10     	; 0x13c2 <__fixunssfsi+0x3c>
    13cc:	3e f4       	brtc	.+14     	; 0x13dc <__fixunssfsi+0x56>
    13ce:	90 95       	com	r25
    13d0:	80 95       	com	r24
    13d2:	70 95       	com	r23
    13d4:	61 95       	neg	r22
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	8f 4f       	sbci	r24, 0xFF	; 255
    13da:	9f 4f       	sbci	r25, 0xFF	; 255
    13dc:	08 95       	ret

000013de <__floatunsisf>:
    13de:	e8 94       	clt
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <__floatsisf+0x12>

000013e2 <__floatsisf>:
    13e2:	97 fb       	bst	r25, 7
    13e4:	3e f4       	brtc	.+14     	; 0x13f4 <__floatsisf+0x12>
    13e6:	90 95       	com	r25
    13e8:	80 95       	com	r24
    13ea:	70 95       	com	r23
    13ec:	61 95       	neg	r22
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	8f 4f       	sbci	r24, 0xFF	; 255
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	99 23       	and	r25, r25
    13f6:	a9 f0       	breq	.+42     	; 0x1422 <__floatsisf+0x40>
    13f8:	f9 2f       	mov	r31, r25
    13fa:	96 e9       	ldi	r25, 0x96	; 150
    13fc:	bb 27       	eor	r27, r27
    13fe:	93 95       	inc	r25
    1400:	f6 95       	lsr	r31
    1402:	87 95       	ror	r24
    1404:	77 95       	ror	r23
    1406:	67 95       	ror	r22
    1408:	b7 95       	ror	r27
    140a:	f1 11       	cpse	r31, r1
    140c:	f8 cf       	rjmp	.-16     	; 0x13fe <__floatsisf+0x1c>
    140e:	fa f4       	brpl	.+62     	; 0x144e <__floatsisf+0x6c>
    1410:	bb 0f       	add	r27, r27
    1412:	11 f4       	brne	.+4      	; 0x1418 <__floatsisf+0x36>
    1414:	60 ff       	sbrs	r22, 0
    1416:	1b c0       	rjmp	.+54     	; 0x144e <__floatsisf+0x6c>
    1418:	6f 5f       	subi	r22, 0xFF	; 255
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	8f 4f       	sbci	r24, 0xFF	; 255
    141e:	9f 4f       	sbci	r25, 0xFF	; 255
    1420:	16 c0       	rjmp	.+44     	; 0x144e <__floatsisf+0x6c>
    1422:	88 23       	and	r24, r24
    1424:	11 f0       	breq	.+4      	; 0x142a <__floatsisf+0x48>
    1426:	96 e9       	ldi	r25, 0x96	; 150
    1428:	11 c0       	rjmp	.+34     	; 0x144c <__floatsisf+0x6a>
    142a:	77 23       	and	r23, r23
    142c:	21 f0       	breq	.+8      	; 0x1436 <__floatsisf+0x54>
    142e:	9e e8       	ldi	r25, 0x8E	; 142
    1430:	87 2f       	mov	r24, r23
    1432:	76 2f       	mov	r23, r22
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <__floatsisf+0x5e>
    1436:	66 23       	and	r22, r22
    1438:	71 f0       	breq	.+28     	; 0x1456 <__floatsisf+0x74>
    143a:	96 e8       	ldi	r25, 0x86	; 134
    143c:	86 2f       	mov	r24, r22
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	2a f0       	brmi	.+10     	; 0x144e <__floatsisf+0x6c>
    1444:	9a 95       	dec	r25
    1446:	66 0f       	add	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	da f7       	brpl	.-10     	; 0x1444 <__floatsisf+0x62>
    144e:	88 0f       	add	r24, r24
    1450:	96 95       	lsr	r25
    1452:	87 95       	ror	r24
    1454:	97 f9       	bld	r25, 7
    1456:	08 95       	ret

00001458 <__fp_cmp>:
    1458:	99 0f       	add	r25, r25
    145a:	00 08       	sbc	r0, r0
    145c:	55 0f       	add	r21, r21
    145e:	aa 0b       	sbc	r26, r26
    1460:	e0 e8       	ldi	r30, 0x80	; 128
    1462:	fe ef       	ldi	r31, 0xFE	; 254
    1464:	16 16       	cp	r1, r22
    1466:	17 06       	cpc	r1, r23
    1468:	e8 07       	cpc	r30, r24
    146a:	f9 07       	cpc	r31, r25
    146c:	c0 f0       	brcs	.+48     	; 0x149e <__fp_cmp+0x46>
    146e:	12 16       	cp	r1, r18
    1470:	13 06       	cpc	r1, r19
    1472:	e4 07       	cpc	r30, r20
    1474:	f5 07       	cpc	r31, r21
    1476:	98 f0       	brcs	.+38     	; 0x149e <__fp_cmp+0x46>
    1478:	62 1b       	sub	r22, r18
    147a:	73 0b       	sbc	r23, r19
    147c:	84 0b       	sbc	r24, r20
    147e:	95 0b       	sbc	r25, r21
    1480:	39 f4       	brne	.+14     	; 0x1490 <__fp_cmp+0x38>
    1482:	0a 26       	eor	r0, r26
    1484:	61 f0       	breq	.+24     	; 0x149e <__fp_cmp+0x46>
    1486:	23 2b       	or	r18, r19
    1488:	24 2b       	or	r18, r20
    148a:	25 2b       	or	r18, r21
    148c:	21 f4       	brne	.+8      	; 0x1496 <__fp_cmp+0x3e>
    148e:	08 95       	ret
    1490:	0a 26       	eor	r0, r26
    1492:	09 f4       	brne	.+2      	; 0x1496 <__fp_cmp+0x3e>
    1494:	a1 40       	sbci	r26, 0x01	; 1
    1496:	a6 95       	lsr	r26
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	81 1d       	adc	r24, r1
    149c:	81 1d       	adc	r24, r1
    149e:	08 95       	ret

000014a0 <__fp_inf>:
    14a0:	97 f9       	bld	r25, 7
    14a2:	9f 67       	ori	r25, 0x7F	; 127
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	08 95       	ret

000014ac <__fp_nan>:
    14ac:	9f ef       	ldi	r25, 0xFF	; 255
    14ae:	80 ec       	ldi	r24, 0xC0	; 192
    14b0:	08 95       	ret

000014b2 <__fp_pscA>:
    14b2:	00 24       	eor	r0, r0
    14b4:	0a 94       	dec	r0
    14b6:	16 16       	cp	r1, r22
    14b8:	17 06       	cpc	r1, r23
    14ba:	18 06       	cpc	r1, r24
    14bc:	09 06       	cpc	r0, r25
    14be:	08 95       	ret

000014c0 <__fp_pscB>:
    14c0:	00 24       	eor	r0, r0
    14c2:	0a 94       	dec	r0
    14c4:	12 16       	cp	r1, r18
    14c6:	13 06       	cpc	r1, r19
    14c8:	14 06       	cpc	r1, r20
    14ca:	05 06       	cpc	r0, r21
    14cc:	08 95       	ret

000014ce <__fp_round>:
    14ce:	09 2e       	mov	r0, r25
    14d0:	03 94       	inc	r0
    14d2:	00 0c       	add	r0, r0
    14d4:	11 f4       	brne	.+4      	; 0x14da <__fp_round+0xc>
    14d6:	88 23       	and	r24, r24
    14d8:	52 f0       	brmi	.+20     	; 0x14ee <__fp_round+0x20>
    14da:	bb 0f       	add	r27, r27
    14dc:	40 f4       	brcc	.+16     	; 0x14ee <__fp_round+0x20>
    14de:	bf 2b       	or	r27, r31
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <__fp_round+0x18>
    14e2:	60 ff       	sbrs	r22, 0
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <__fp_round+0x20>
    14e6:	6f 5f       	subi	r22, 0xFF	; 255
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8f 4f       	sbci	r24, 0xFF	; 255
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	08 95       	ret

000014f0 <__fp_split3>:
    14f0:	57 fd       	sbrc	r21, 7
    14f2:	90 58       	subi	r25, 0x80	; 128
    14f4:	44 0f       	add	r20, r20
    14f6:	55 1f       	adc	r21, r21
    14f8:	59 f0       	breq	.+22     	; 0x1510 <__fp_splitA+0x10>
    14fa:	5f 3f       	cpi	r21, 0xFF	; 255
    14fc:	71 f0       	breq	.+28     	; 0x151a <__fp_splitA+0x1a>
    14fe:	47 95       	ror	r20

00001500 <__fp_splitA>:
    1500:	88 0f       	add	r24, r24
    1502:	97 fb       	bst	r25, 7
    1504:	99 1f       	adc	r25, r25
    1506:	61 f0       	breq	.+24     	; 0x1520 <__fp_splitA+0x20>
    1508:	9f 3f       	cpi	r25, 0xFF	; 255
    150a:	79 f0       	breq	.+30     	; 0x152a <__fp_splitA+0x2a>
    150c:	87 95       	ror	r24
    150e:	08 95       	ret
    1510:	12 16       	cp	r1, r18
    1512:	13 06       	cpc	r1, r19
    1514:	14 06       	cpc	r1, r20
    1516:	55 1f       	adc	r21, r21
    1518:	f2 cf       	rjmp	.-28     	; 0x14fe <__fp_split3+0xe>
    151a:	46 95       	lsr	r20
    151c:	f1 df       	rcall	.-30     	; 0x1500 <__fp_splitA>
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <__fp_splitA+0x30>
    1520:	16 16       	cp	r1, r22
    1522:	17 06       	cpc	r1, r23
    1524:	18 06       	cpc	r1, r24
    1526:	99 1f       	adc	r25, r25
    1528:	f1 cf       	rjmp	.-30     	; 0x150c <__fp_splitA+0xc>
    152a:	86 95       	lsr	r24
    152c:	71 05       	cpc	r23, r1
    152e:	61 05       	cpc	r22, r1
    1530:	08 94       	sec
    1532:	08 95       	ret

00001534 <__fp_zero>:
    1534:	e8 94       	clt

00001536 <__fp_szero>:
    1536:	bb 27       	eor	r27, r27
    1538:	66 27       	eor	r22, r22
    153a:	77 27       	eor	r23, r23
    153c:	cb 01       	movw	r24, r22
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret

00001542 <__mulsf3>:
    1542:	0b d0       	rcall	.+22     	; 0x155a <__mulsf3x>
    1544:	c4 cf       	rjmp	.-120    	; 0x14ce <__fp_round>
    1546:	b5 df       	rcall	.-150    	; 0x14b2 <__fp_pscA>
    1548:	28 f0       	brcs	.+10     	; 0x1554 <__mulsf3+0x12>
    154a:	ba df       	rcall	.-140    	; 0x14c0 <__fp_pscB>
    154c:	18 f0       	brcs	.+6      	; 0x1554 <__mulsf3+0x12>
    154e:	95 23       	and	r25, r21
    1550:	09 f0       	breq	.+2      	; 0x1554 <__mulsf3+0x12>
    1552:	a6 cf       	rjmp	.-180    	; 0x14a0 <__fp_inf>
    1554:	ab cf       	rjmp	.-170    	; 0x14ac <__fp_nan>
    1556:	11 24       	eor	r1, r1
    1558:	ee cf       	rjmp	.-36     	; 0x1536 <__fp_szero>

0000155a <__mulsf3x>:
    155a:	ca df       	rcall	.-108    	; 0x14f0 <__fp_split3>
    155c:	a0 f3       	brcs	.-24     	; 0x1546 <__mulsf3+0x4>

0000155e <__mulsf3_pse>:
    155e:	95 9f       	mul	r25, r21
    1560:	d1 f3       	breq	.-12     	; 0x1556 <__mulsf3+0x14>
    1562:	95 0f       	add	r25, r21
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	55 1f       	adc	r21, r21
    1568:	62 9f       	mul	r22, r18
    156a:	f0 01       	movw	r30, r0
    156c:	72 9f       	mul	r23, r18
    156e:	bb 27       	eor	r27, r27
    1570:	f0 0d       	add	r31, r0
    1572:	b1 1d       	adc	r27, r1
    1574:	63 9f       	mul	r22, r19
    1576:	aa 27       	eor	r26, r26
    1578:	f0 0d       	add	r31, r0
    157a:	b1 1d       	adc	r27, r1
    157c:	aa 1f       	adc	r26, r26
    157e:	64 9f       	mul	r22, r20
    1580:	66 27       	eor	r22, r22
    1582:	b0 0d       	add	r27, r0
    1584:	a1 1d       	adc	r26, r1
    1586:	66 1f       	adc	r22, r22
    1588:	82 9f       	mul	r24, r18
    158a:	22 27       	eor	r18, r18
    158c:	b0 0d       	add	r27, r0
    158e:	a1 1d       	adc	r26, r1
    1590:	62 1f       	adc	r22, r18
    1592:	73 9f       	mul	r23, r19
    1594:	b0 0d       	add	r27, r0
    1596:	a1 1d       	adc	r26, r1
    1598:	62 1f       	adc	r22, r18
    159a:	83 9f       	mul	r24, r19
    159c:	a0 0d       	add	r26, r0
    159e:	61 1d       	adc	r22, r1
    15a0:	22 1f       	adc	r18, r18
    15a2:	74 9f       	mul	r23, r20
    15a4:	33 27       	eor	r19, r19
    15a6:	a0 0d       	add	r26, r0
    15a8:	61 1d       	adc	r22, r1
    15aa:	23 1f       	adc	r18, r19
    15ac:	84 9f       	mul	r24, r20
    15ae:	60 0d       	add	r22, r0
    15b0:	21 1d       	adc	r18, r1
    15b2:	82 2f       	mov	r24, r18
    15b4:	76 2f       	mov	r23, r22
    15b6:	6a 2f       	mov	r22, r26
    15b8:	11 24       	eor	r1, r1
    15ba:	9f 57       	subi	r25, 0x7F	; 127
    15bc:	50 40       	sbci	r21, 0x00	; 0
    15be:	8a f0       	brmi	.+34     	; 0x15e2 <__mulsf3_pse+0x84>
    15c0:	e1 f0       	breq	.+56     	; 0x15fa <__mulsf3_pse+0x9c>
    15c2:	88 23       	and	r24, r24
    15c4:	4a f0       	brmi	.+18     	; 0x15d8 <__mulsf3_pse+0x7a>
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	bb 1f       	adc	r27, r27
    15cc:	66 1f       	adc	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	91 50       	subi	r25, 0x01	; 1
    15d4:	50 40       	sbci	r21, 0x00	; 0
    15d6:	a9 f7       	brne	.-22     	; 0x15c2 <__mulsf3_pse+0x64>
    15d8:	9e 3f       	cpi	r25, 0xFE	; 254
    15da:	51 05       	cpc	r21, r1
    15dc:	70 f0       	brcs	.+28     	; 0x15fa <__mulsf3_pse+0x9c>
    15de:	60 cf       	rjmp	.-320    	; 0x14a0 <__fp_inf>
    15e0:	aa cf       	rjmp	.-172    	; 0x1536 <__fp_szero>
    15e2:	5f 3f       	cpi	r21, 0xFF	; 255
    15e4:	ec f3       	brlt	.-6      	; 0x15e0 <__mulsf3_pse+0x82>
    15e6:	98 3e       	cpi	r25, 0xE8	; 232
    15e8:	dc f3       	brlt	.-10     	; 0x15e0 <__mulsf3_pse+0x82>
    15ea:	86 95       	lsr	r24
    15ec:	77 95       	ror	r23
    15ee:	67 95       	ror	r22
    15f0:	b7 95       	ror	r27
    15f2:	f7 95       	ror	r31
    15f4:	e7 95       	ror	r30
    15f6:	9f 5f       	subi	r25, 0xFF	; 255
    15f8:	c1 f7       	brne	.-16     	; 0x15ea <__mulsf3_pse+0x8c>
    15fa:	fe 2b       	or	r31, r30
    15fc:	88 0f       	add	r24, r24
    15fe:	91 1d       	adc	r25, r1
    1600:	96 95       	lsr	r25
    1602:	87 95       	ror	r24
    1604:	97 f9       	bld	r25, 7
    1606:	08 95       	ret

00001608 <pow>:
    1608:	fa 01       	movw	r30, r20
    160a:	ee 0f       	add	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	30 96       	adiw	r30, 0x00	; 0
    1610:	21 05       	cpc	r18, r1
    1612:	31 05       	cpc	r19, r1
    1614:	99 f1       	breq	.+102    	; 0x167c <pow+0x74>
    1616:	61 15       	cp	r22, r1
    1618:	71 05       	cpc	r23, r1
    161a:	61 f4       	brne	.+24     	; 0x1634 <pow+0x2c>
    161c:	80 38       	cpi	r24, 0x80	; 128
    161e:	bf e3       	ldi	r27, 0x3F	; 63
    1620:	9b 07       	cpc	r25, r27
    1622:	49 f1       	breq	.+82     	; 0x1676 <pow+0x6e>
    1624:	68 94       	set
    1626:	90 38       	cpi	r25, 0x80	; 128
    1628:	81 05       	cpc	r24, r1
    162a:	61 f0       	breq	.+24     	; 0x1644 <pow+0x3c>
    162c:	80 38       	cpi	r24, 0x80	; 128
    162e:	bf ef       	ldi	r27, 0xFF	; 255
    1630:	9b 07       	cpc	r25, r27
    1632:	41 f0       	breq	.+16     	; 0x1644 <pow+0x3c>
    1634:	99 23       	and	r25, r25
    1636:	42 f5       	brpl	.+80     	; 0x1688 <pow+0x80>
    1638:	ff 3f       	cpi	r31, 0xFF	; 255
    163a:	e1 05       	cpc	r30, r1
    163c:	31 05       	cpc	r19, r1
    163e:	21 05       	cpc	r18, r1
    1640:	11 f1       	breq	.+68     	; 0x1686 <pow+0x7e>
    1642:	e8 94       	clt
    1644:	08 94       	sec
    1646:	e7 95       	ror	r30
    1648:	d9 01       	movw	r26, r18
    164a:	aa 23       	and	r26, r26
    164c:	29 f4       	brne	.+10     	; 0x1658 <pow+0x50>
    164e:	ab 2f       	mov	r26, r27
    1650:	be 2f       	mov	r27, r30
    1652:	f8 5f       	subi	r31, 0xF8	; 248
    1654:	d0 f3       	brcs	.-12     	; 0x164a <pow+0x42>
    1656:	10 c0       	rjmp	.+32     	; 0x1678 <pow+0x70>
    1658:	ff 5f       	subi	r31, 0xFF	; 255
    165a:	70 f4       	brcc	.+28     	; 0x1678 <pow+0x70>
    165c:	a6 95       	lsr	r26
    165e:	e0 f7       	brcc	.-8      	; 0x1658 <pow+0x50>
    1660:	f7 39       	cpi	r31, 0x97	; 151
    1662:	50 f0       	brcs	.+20     	; 0x1678 <pow+0x70>
    1664:	19 f0       	breq	.+6      	; 0x166c <pow+0x64>
    1666:	ff 3a       	cpi	r31, 0xAF	; 175
    1668:	38 f4       	brcc	.+14     	; 0x1678 <pow+0x70>
    166a:	9f 77       	andi	r25, 0x7F	; 127
    166c:	9f 93       	push	r25
    166e:	0c d0       	rcall	.+24     	; 0x1688 <pow+0x80>
    1670:	0f 90       	pop	r0
    1672:	07 fc       	sbrc	r0, 7
    1674:	90 58       	subi	r25, 0x80	; 128
    1676:	08 95       	ret
    1678:	3e f0       	brts	.+14     	; 0x1688 <pow+0x80>
    167a:	18 cf       	rjmp	.-464    	; 0x14ac <__fp_nan>
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 e8       	ldi	r24, 0x80	; 128
    1682:	9f e3       	ldi	r25, 0x3F	; 63
    1684:	08 95       	ret
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	9f 77       	andi	r25, 0x7F	; 127
    168a:	5f 93       	push	r21
    168c:	4f 93       	push	r20
    168e:	3f 93       	push	r19
    1690:	2f 93       	push	r18
    1692:	9e d0       	rcall	.+316    	; 0x17d0 <log>
    1694:	2f 91       	pop	r18
    1696:	3f 91       	pop	r19
    1698:	4f 91       	pop	r20
    169a:	5f 91       	pop	r21
    169c:	52 df       	rcall	.-348    	; 0x1542 <__mulsf3>
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <exp>
    16a0:	19 f4       	brne	.+6      	; 0x16a8 <pow+0xa0>
    16a2:	0e f0       	brts	.+2      	; 0x16a6 <pow+0x9e>
    16a4:	fd ce       	rjmp	.-518    	; 0x14a0 <__fp_inf>
    16a6:	46 cf       	rjmp	.-372    	; 0x1534 <__fp_zero>
    16a8:	01 cf       	rjmp	.-510    	; 0x14ac <__fp_nan>

000016aa <exp>:
    16aa:	2a df       	rcall	.-428    	; 0x1500 <__fp_splitA>
    16ac:	c8 f3       	brcs	.-14     	; 0x16a0 <pow+0x98>
    16ae:	96 38       	cpi	r25, 0x86	; 134
    16b0:	c0 f7       	brcc	.-16     	; 0x16a2 <pow+0x9a>
    16b2:	07 f8       	bld	r0, 7
    16b4:	0f 92       	push	r0
    16b6:	e8 94       	clt
    16b8:	2b e3       	ldi	r18, 0x3B	; 59
    16ba:	3a ea       	ldi	r19, 0xAA	; 170
    16bc:	48 eb       	ldi	r20, 0xB8	; 184
    16be:	5f e7       	ldi	r21, 0x7F	; 127
    16c0:	4e df       	rcall	.-356    	; 0x155e <__mulsf3_pse>
    16c2:	0f 92       	push	r0
    16c4:	0f 92       	push	r0
    16c6:	0f 92       	push	r0
    16c8:	4d b7       	in	r20, 0x3d	; 61
    16ca:	5e b7       	in	r21, 0x3e	; 62
    16cc:	0f 92       	push	r0
    16ce:	c0 d0       	rcall	.+384    	; 0x1850 <modf>
    16d0:	e4 ee       	ldi	r30, 0xE4	; 228
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	16 d0       	rcall	.+44     	; 0x1702 <__fp_powser>
    16d6:	4f 91       	pop	r20
    16d8:	5f 91       	pop	r21
    16da:	ef 91       	pop	r30
    16dc:	ff 91       	pop	r31
    16de:	e5 95       	asr	r30
    16e0:	ee 1f       	adc	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	49 f0       	breq	.+18     	; 0x16f8 <exp+0x4e>
    16e6:	fe 57       	subi	r31, 0x7E	; 126
    16e8:	e0 68       	ori	r30, 0x80	; 128
    16ea:	44 27       	eor	r20, r20
    16ec:	ee 0f       	add	r30, r30
    16ee:	44 1f       	adc	r20, r20
    16f0:	fa 95       	dec	r31
    16f2:	e1 f7       	brne	.-8      	; 0x16ec <exp+0x42>
    16f4:	41 95       	neg	r20
    16f6:	55 0b       	sbc	r21, r21
    16f8:	32 d0       	rcall	.+100    	; 0x175e <ldexp>
    16fa:	0f 90       	pop	r0
    16fc:	07 fe       	sbrs	r0, 7
    16fe:	26 c0       	rjmp	.+76     	; 0x174c <inverse>
    1700:	08 95       	ret

00001702 <__fp_powser>:
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	1f 93       	push	r17
    1708:	0f 93       	push	r16
    170a:	ff 92       	push	r15
    170c:	ef 92       	push	r14
    170e:	df 92       	push	r13
    1710:	7b 01       	movw	r14, r22
    1712:	8c 01       	movw	r16, r24
    1714:	68 94       	set
    1716:	05 c0       	rjmp	.+10     	; 0x1722 <__fp_powser+0x20>
    1718:	da 2e       	mov	r13, r26
    171a:	ef 01       	movw	r28, r30
    171c:	1e df       	rcall	.-452    	; 0x155a <__mulsf3x>
    171e:	fe 01       	movw	r30, r28
    1720:	e8 94       	clt
    1722:	a5 91       	lpm	r26, Z+
    1724:	25 91       	lpm	r18, Z+
    1726:	35 91       	lpm	r19, Z+
    1728:	45 91       	lpm	r20, Z+
    172a:	55 91       	lpm	r21, Z+
    172c:	ae f3       	brts	.-22     	; 0x1718 <__fp_powser+0x16>
    172e:	ef 01       	movw	r28, r30
    1730:	ce dd       	rcall	.-1124   	; 0x12ce <__addsf3x>
    1732:	fe 01       	movw	r30, r28
    1734:	97 01       	movw	r18, r14
    1736:	a8 01       	movw	r20, r16
    1738:	da 94       	dec	r13
    173a:	79 f7       	brne	.-34     	; 0x171a <__fp_powser+0x18>
    173c:	df 90       	pop	r13
    173e:	ef 90       	pop	r14
    1740:	ff 90       	pop	r15
    1742:	0f 91       	pop	r16
    1744:	1f 91       	pop	r17
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <inverse>:
    174c:	9b 01       	movw	r18, r22
    174e:	ac 01       	movw	r20, r24
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	80 e8       	ldi	r24, 0x80	; 128
    1756:	9f e3       	ldi	r25, 0x3F	; 63
    1758:	ae c0       	rjmp	.+348    	; 0x18b6 <__divsf3>
    175a:	a2 ce       	rjmp	.-700    	; 0x14a0 <__fp_inf>
    175c:	14 c1       	rjmp	.+552    	; 0x1986 <__fp_mpack>

0000175e <ldexp>:
    175e:	d0 de       	rcall	.-608    	; 0x1500 <__fp_splitA>
    1760:	e8 f3       	brcs	.-6      	; 0x175c <inverse+0x10>
    1762:	99 23       	and	r25, r25
    1764:	d9 f3       	breq	.-10     	; 0x175c <inverse+0x10>
    1766:	94 0f       	add	r25, r20
    1768:	51 1d       	adc	r21, r1
    176a:	bb f3       	brvs	.-18     	; 0x175a <inverse+0xe>
    176c:	91 50       	subi	r25, 0x01	; 1
    176e:	50 40       	sbci	r21, 0x00	; 0
    1770:	94 f0       	brlt	.+36     	; 0x1796 <ldexp+0x38>
    1772:	59 f0       	breq	.+22     	; 0x178a <ldexp+0x2c>
    1774:	88 23       	and	r24, r24
    1776:	32 f0       	brmi	.+12     	; 0x1784 <ldexp+0x26>
    1778:	66 0f       	add	r22, r22
    177a:	77 1f       	adc	r23, r23
    177c:	88 1f       	adc	r24, r24
    177e:	91 50       	subi	r25, 0x01	; 1
    1780:	50 40       	sbci	r21, 0x00	; 0
    1782:	c1 f7       	brne	.-16     	; 0x1774 <ldexp+0x16>
    1784:	9e 3f       	cpi	r25, 0xFE	; 254
    1786:	51 05       	cpc	r21, r1
    1788:	44 f7       	brge	.-48     	; 0x175a <inverse+0xe>
    178a:	88 0f       	add	r24, r24
    178c:	91 1d       	adc	r25, r1
    178e:	96 95       	lsr	r25
    1790:	87 95       	ror	r24
    1792:	97 f9       	bld	r25, 7
    1794:	08 95       	ret
    1796:	5f 3f       	cpi	r21, 0xFF	; 255
    1798:	ac f0       	brlt	.+42     	; 0x17c4 <ldexp+0x66>
    179a:	98 3e       	cpi	r25, 0xE8	; 232
    179c:	9c f0       	brlt	.+38     	; 0x17c4 <ldexp+0x66>
    179e:	bb 27       	eor	r27, r27
    17a0:	86 95       	lsr	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b7 95       	ror	r27
    17a8:	08 f4       	brcc	.+2      	; 0x17ac <ldexp+0x4e>
    17aa:	b1 60       	ori	r27, 0x01	; 1
    17ac:	93 95       	inc	r25
    17ae:	c1 f7       	brne	.-16     	; 0x17a0 <ldexp+0x42>
    17b0:	bb 0f       	add	r27, r27
    17b2:	58 f7       	brcc	.-42     	; 0x178a <ldexp+0x2c>
    17b4:	11 f4       	brne	.+4      	; 0x17ba <ldexp+0x5c>
    17b6:	60 ff       	sbrs	r22, 0
    17b8:	e8 cf       	rjmp	.-48     	; 0x178a <ldexp+0x2c>
    17ba:	6f 5f       	subi	r22, 0xFF	; 255
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	8f 4f       	sbci	r24, 0xFF	; 255
    17c0:	9f 4f       	sbci	r25, 0xFF	; 255
    17c2:	e3 cf       	rjmp	.-58     	; 0x178a <ldexp+0x2c>
    17c4:	b8 ce       	rjmp	.-656    	; 0x1536 <__fp_szero>
    17c6:	0e f0       	brts	.+2      	; 0x17ca <ldexp+0x6c>
    17c8:	de c0       	rjmp	.+444    	; 0x1986 <__fp_mpack>
    17ca:	70 ce       	rjmp	.-800    	; 0x14ac <__fp_nan>
    17cc:	68 94       	set
    17ce:	68 ce       	rjmp	.-816    	; 0x14a0 <__fp_inf>

000017d0 <log>:
    17d0:	97 de       	rcall	.-722    	; 0x1500 <__fp_splitA>
    17d2:	c8 f3       	brcs	.-14     	; 0x17c6 <ldexp+0x68>
    17d4:	99 23       	and	r25, r25
    17d6:	d1 f3       	breq	.-12     	; 0x17cc <ldexp+0x6e>
    17d8:	c6 f3       	brts	.-16     	; 0x17ca <ldexp+0x6c>
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	1f 93       	push	r17
    17e0:	0f 93       	push	r16
    17e2:	ff 92       	push	r15
    17e4:	c9 2f       	mov	r28, r25
    17e6:	dd 27       	eor	r29, r29
    17e8:	88 23       	and	r24, r24
    17ea:	2a f0       	brmi	.+10     	; 0x17f6 <log+0x26>
    17ec:	21 97       	sbiw	r28, 0x01	; 1
    17ee:	66 0f       	add	r22, r22
    17f0:	77 1f       	adc	r23, r23
    17f2:	88 1f       	adc	r24, r24
    17f4:	da f7       	brpl	.-10     	; 0x17ec <log+0x1c>
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	5f eb       	ldi	r21, 0xBF	; 191
    17fe:	9f e3       	ldi	r25, 0x3F	; 63
    1800:	88 39       	cpi	r24, 0x98	; 152
    1802:	20 f0       	brcs	.+8      	; 0x180c <log+0x3c>
    1804:	80 3e       	cpi	r24, 0xE0	; 224
    1806:	30 f0       	brcs	.+12     	; 0x1814 <log+0x44>
    1808:	21 96       	adiw	r28, 0x01	; 1
    180a:	8f 77       	andi	r24, 0x7F	; 127
    180c:	4f dd       	rcall	.-1378   	; 0x12ac <__addsf3>
    180e:	ec e0       	ldi	r30, 0x0C	; 12
    1810:	f1 e0       	ldi	r31, 0x01	; 1
    1812:	03 c0       	rjmp	.+6      	; 0x181a <log+0x4a>
    1814:	4b dd       	rcall	.-1386   	; 0x12ac <__addsf3>
    1816:	e9 e3       	ldi	r30, 0x39	; 57
    1818:	f1 e0       	ldi	r31, 0x01	; 1
    181a:	73 df       	rcall	.-282    	; 0x1702 <__fp_powser>
    181c:	8b 01       	movw	r16, r22
    181e:	be 01       	movw	r22, r28
    1820:	ec 01       	movw	r28, r24
    1822:	fb 2e       	mov	r15, r27
    1824:	6f 57       	subi	r22, 0x7F	; 127
    1826:	71 09       	sbc	r23, r1
    1828:	75 95       	asr	r23
    182a:	77 1f       	adc	r23, r23
    182c:	88 0b       	sbc	r24, r24
    182e:	99 0b       	sbc	r25, r25
    1830:	d8 dd       	rcall	.-1104   	; 0x13e2 <__floatsisf>
    1832:	28 e1       	ldi	r18, 0x18	; 24
    1834:	32 e7       	ldi	r19, 0x72	; 114
    1836:	41 e3       	ldi	r20, 0x31	; 49
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	8f de       	rcall	.-738    	; 0x155a <__mulsf3x>
    183c:	af 2d       	mov	r26, r15
    183e:	98 01       	movw	r18, r16
    1840:	ae 01       	movw	r20, r28
    1842:	ff 90       	pop	r15
    1844:	0f 91       	pop	r16
    1846:	1f 91       	pop	r17
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	40 dd       	rcall	.-1408   	; 0x12ce <__addsf3x>
    184e:	3f ce       	rjmp	.-898    	; 0x14ce <__fp_round>

00001850 <modf>:
    1850:	fa 01       	movw	r30, r20
    1852:	dc 01       	movw	r26, r24
    1854:	aa 0f       	add	r26, r26
    1856:	bb 1f       	adc	r27, r27
    1858:	9b 01       	movw	r18, r22
    185a:	ac 01       	movw	r20, r24
    185c:	bf 57       	subi	r27, 0x7F	; 127
    185e:	28 f4       	brcc	.+10     	; 0x186a <modf+0x1a>
    1860:	22 27       	eor	r18, r18
    1862:	33 27       	eor	r19, r19
    1864:	44 27       	eor	r20, r20
    1866:	50 78       	andi	r21, 0x80	; 128
    1868:	1f c0       	rjmp	.+62     	; 0x18a8 <modf+0x58>
    186a:	b7 51       	subi	r27, 0x17	; 23
    186c:	88 f4       	brcc	.+34     	; 0x1890 <modf+0x40>
    186e:	ab 2f       	mov	r26, r27
    1870:	00 24       	eor	r0, r0
    1872:	46 95       	lsr	r20
    1874:	37 95       	ror	r19
    1876:	27 95       	ror	r18
    1878:	01 1c       	adc	r0, r1
    187a:	a3 95       	inc	r26
    187c:	d2 f3       	brmi	.-12     	; 0x1872 <modf+0x22>
    187e:	00 20       	and	r0, r0
    1880:	69 f0       	breq	.+26     	; 0x189c <modf+0x4c>
    1882:	22 0f       	add	r18, r18
    1884:	33 1f       	adc	r19, r19
    1886:	44 1f       	adc	r20, r20
    1888:	b3 95       	inc	r27
    188a:	da f3       	brmi	.-10     	; 0x1882 <modf+0x32>
    188c:	0d d0       	rcall	.+26     	; 0x18a8 <modf+0x58>
    188e:	0d cd       	rjmp	.-1510   	; 0x12aa <__subsf3>
    1890:	61 30       	cpi	r22, 0x01	; 1
    1892:	71 05       	cpc	r23, r1
    1894:	a0 e8       	ldi	r26, 0x80	; 128
    1896:	8a 07       	cpc	r24, r26
    1898:	b9 46       	sbci	r27, 0x69	; 105
    189a:	30 f4       	brcc	.+12     	; 0x18a8 <modf+0x58>
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	66 27       	eor	r22, r22
    18a2:	77 27       	eor	r23, r23
    18a4:	88 27       	eor	r24, r24
    18a6:	90 78       	andi	r25, 0x80	; 128
    18a8:	30 96       	adiw	r30, 0x00	; 0
    18aa:	21 f0       	breq	.+8      	; 0x18b4 <modf+0x64>
    18ac:	20 83       	st	Z, r18
    18ae:	31 83       	std	Z+1, r19	; 0x01
    18b0:	42 83       	std	Z+2, r20	; 0x02
    18b2:	53 83       	std	Z+3, r21	; 0x03
    18b4:	08 95       	ret

000018b6 <__divsf3>:
    18b6:	0c d0       	rcall	.+24     	; 0x18d0 <__divsf3x>
    18b8:	0a ce       	rjmp	.-1004   	; 0x14ce <__fp_round>
    18ba:	02 de       	rcall	.-1020   	; 0x14c0 <__fp_pscB>
    18bc:	40 f0       	brcs	.+16     	; 0x18ce <__divsf3+0x18>
    18be:	f9 dd       	rcall	.-1038   	; 0x14b2 <__fp_pscA>
    18c0:	30 f0       	brcs	.+12     	; 0x18ce <__divsf3+0x18>
    18c2:	21 f4       	brne	.+8      	; 0x18cc <__divsf3+0x16>
    18c4:	5f 3f       	cpi	r21, 0xFF	; 255
    18c6:	19 f0       	breq	.+6      	; 0x18ce <__divsf3+0x18>
    18c8:	eb cd       	rjmp	.-1066   	; 0x14a0 <__fp_inf>
    18ca:	51 11       	cpse	r21, r1
    18cc:	34 ce       	rjmp	.-920    	; 0x1536 <__fp_szero>
    18ce:	ee cd       	rjmp	.-1060   	; 0x14ac <__fp_nan>

000018d0 <__divsf3x>:
    18d0:	0f de       	rcall	.-994    	; 0x14f0 <__fp_split3>
    18d2:	98 f3       	brcs	.-26     	; 0x18ba <__divsf3+0x4>

000018d4 <__divsf3_pse>:
    18d4:	99 23       	and	r25, r25
    18d6:	c9 f3       	breq	.-14     	; 0x18ca <__divsf3+0x14>
    18d8:	55 23       	and	r21, r21
    18da:	b1 f3       	breq	.-20     	; 0x18c8 <__divsf3+0x12>
    18dc:	95 1b       	sub	r25, r21
    18de:	55 0b       	sbc	r21, r21
    18e0:	bb 27       	eor	r27, r27
    18e2:	aa 27       	eor	r26, r26
    18e4:	62 17       	cp	r22, r18
    18e6:	73 07       	cpc	r23, r19
    18e8:	84 07       	cpc	r24, r20
    18ea:	38 f0       	brcs	.+14     	; 0x18fa <__divsf3_pse+0x26>
    18ec:	9f 5f       	subi	r25, 0xFF	; 255
    18ee:	5f 4f       	sbci	r21, 0xFF	; 255
    18f0:	22 0f       	add	r18, r18
    18f2:	33 1f       	adc	r19, r19
    18f4:	44 1f       	adc	r20, r20
    18f6:	aa 1f       	adc	r26, r26
    18f8:	a9 f3       	breq	.-22     	; 0x18e4 <__divsf3_pse+0x10>
    18fa:	33 d0       	rcall	.+102    	; 0x1962 <__divsf3_pse+0x8e>
    18fc:	0e 2e       	mov	r0, r30
    18fe:	3a f0       	brmi	.+14     	; 0x190e <__divsf3_pse+0x3a>
    1900:	e0 e8       	ldi	r30, 0x80	; 128
    1902:	30 d0       	rcall	.+96     	; 0x1964 <__divsf3_pse+0x90>
    1904:	91 50       	subi	r25, 0x01	; 1
    1906:	50 40       	sbci	r21, 0x00	; 0
    1908:	e6 95       	lsr	r30
    190a:	00 1c       	adc	r0, r0
    190c:	ca f7       	brpl	.-14     	; 0x1900 <__divsf3_pse+0x2c>
    190e:	29 d0       	rcall	.+82     	; 0x1962 <__divsf3_pse+0x8e>
    1910:	fe 2f       	mov	r31, r30
    1912:	27 d0       	rcall	.+78     	; 0x1962 <__divsf3_pse+0x8e>
    1914:	66 0f       	add	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	88 1f       	adc	r24, r24
    191a:	bb 1f       	adc	r27, r27
    191c:	26 17       	cp	r18, r22
    191e:	37 07       	cpc	r19, r23
    1920:	48 07       	cpc	r20, r24
    1922:	ab 07       	cpc	r26, r27
    1924:	b0 e8       	ldi	r27, 0x80	; 128
    1926:	09 f0       	breq	.+2      	; 0x192a <__divsf3_pse+0x56>
    1928:	bb 0b       	sbc	r27, r27
    192a:	80 2d       	mov	r24, r0
    192c:	bf 01       	movw	r22, r30
    192e:	ff 27       	eor	r31, r31
    1930:	93 58       	subi	r25, 0x83	; 131
    1932:	5f 4f       	sbci	r21, 0xFF	; 255
    1934:	2a f0       	brmi	.+10     	; 0x1940 <__divsf3_pse+0x6c>
    1936:	9e 3f       	cpi	r25, 0xFE	; 254
    1938:	51 05       	cpc	r21, r1
    193a:	68 f0       	brcs	.+26     	; 0x1956 <__divsf3_pse+0x82>
    193c:	b1 cd       	rjmp	.-1182   	; 0x14a0 <__fp_inf>
    193e:	fb cd       	rjmp	.-1034   	; 0x1536 <__fp_szero>
    1940:	5f 3f       	cpi	r21, 0xFF	; 255
    1942:	ec f3       	brlt	.-6      	; 0x193e <__divsf3_pse+0x6a>
    1944:	98 3e       	cpi	r25, 0xE8	; 232
    1946:	dc f3       	brlt	.-10     	; 0x193e <__divsf3_pse+0x6a>
    1948:	86 95       	lsr	r24
    194a:	77 95       	ror	r23
    194c:	67 95       	ror	r22
    194e:	b7 95       	ror	r27
    1950:	f7 95       	ror	r31
    1952:	9f 5f       	subi	r25, 0xFF	; 255
    1954:	c9 f7       	brne	.-14     	; 0x1948 <__divsf3_pse+0x74>
    1956:	88 0f       	add	r24, r24
    1958:	91 1d       	adc	r25, r1
    195a:	96 95       	lsr	r25
    195c:	87 95       	ror	r24
    195e:	97 f9       	bld	r25, 7
    1960:	08 95       	ret
    1962:	e1 e0       	ldi	r30, 0x01	; 1
    1964:	66 0f       	add	r22, r22
    1966:	77 1f       	adc	r23, r23
    1968:	88 1f       	adc	r24, r24
    196a:	bb 1f       	adc	r27, r27
    196c:	62 17       	cp	r22, r18
    196e:	73 07       	cpc	r23, r19
    1970:	84 07       	cpc	r24, r20
    1972:	ba 07       	cpc	r27, r26
    1974:	20 f0       	brcs	.+8      	; 0x197e <__divsf3_pse+0xaa>
    1976:	62 1b       	sub	r22, r18
    1978:	73 0b       	sbc	r23, r19
    197a:	84 0b       	sbc	r24, r20
    197c:	ba 0b       	sbc	r27, r26
    197e:	ee 1f       	adc	r30, r30
    1980:	88 f7       	brcc	.-30     	; 0x1964 <__divsf3_pse+0x90>
    1982:	e0 95       	com	r30
    1984:	08 95       	ret

00001986 <__fp_mpack>:
    1986:	9f 3f       	cpi	r25, 0xFF	; 255
    1988:	31 f0       	breq	.+12     	; 0x1996 <__fp_mpack_finite+0xc>

0000198a <__fp_mpack_finite>:
    198a:	91 50       	subi	r25, 0x01	; 1
    198c:	20 f4       	brcc	.+8      	; 0x1996 <__fp_mpack_finite+0xc>
    198e:	87 95       	ror	r24
    1990:	77 95       	ror	r23
    1992:	67 95       	ror	r22
    1994:	b7 95       	ror	r27
    1996:	88 0f       	add	r24, r24
    1998:	91 1d       	adc	r25, r1
    199a:	96 95       	lsr	r25
    199c:	87 95       	ror	r24
    199e:	97 f9       	bld	r25, 7
    19a0:	08 95       	ret

000019a2 <_ZN14HardwareSerial9availableEv>:
=======
    1076:	d6 d7       	rcall	.+4012   	; 0x2024 <delay>
    1078:	40 91 60 03 	lds	r20, 0x0360	; 0x800360 <cycle_counter>
    107c:	50 91 61 03 	lds	r21, 0x0361	; 0x800361 <cycle_counter+0x1>
    1080:	48 3e       	cpi	r20, 0xE8	; 232
			cycle_counter = cycle_counter > 999 ? 0 : cycle_counter + 1;
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	59 07       	cpc	r21, r25
    1086:	1c f4       	brge	.+6      	; 0x108e <_Z12printDataLCDv+0x2c8>
    1088:	4f 5f       	subi	r20, 0xFF	; 255
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <_Z12printDataLCDv+0x2cc>
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	50 93 61 03 	sts	0x0361, r21	; 0x800361 <cycle_counter+0x1>
    1096:	40 93 60 03 	sts	0x0360, r20	; 0x800360 <cycle_counter>
    109a:	24 e0       	ldi	r18, 0x04	; 4
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	80 e1       	ldi	r24, 0x10	; 16
    10a0:	34 d9       	rcall	.-3480   	; 0x30a <_Z8printLCDhhih>
    10a2:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__data_end>
			printLCD(16, 0, cycle_counter, 4);
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
		}
	}
	serialReading = NO;
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
}
    10b2:	df 90       	pop	r13
    10b4:	cf 90       	pop	r12
    10b6:	bf 90       	pop	r11
    10b8:	af 90       	pop	r10
    10ba:	9f 90       	pop	r9
    10bc:	08 95       	ret

000010be <loop>:
    10be:	42 e2       	ldi	r20, 0x22	; 34
    10c0:	64 e2       	ldi	r22, 0x24	; 36
    10c2:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <arm>
    10c6:	29 dc       	rcall	.-1966   	; 0x91a <_Z9readServohhh>
    10c8:	7e ce       	rjmp	.-772    	; 0xdc6 <_Z12printDataLCDv>

000010ca <__subsf3>:
=======
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	bf 90       	pop	r11
    10c2:	af 90       	pop	r10
    10c4:	9f 90       	pop	r9
    10c6:	08 95       	ret

000010c8 <loop>:
    10c8:	42 e2       	ldi	r20, 0x22	; 34
    10ca:	64 e2       	ldi	r22, 0x24	; 36
    10cc:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <arm>
    10d0:	2a dc       	rcall	.-1964   	; 0x926 <_Z9readServohhh>
    10d2:	7e ce       	rjmp	.-772    	; 0xdd0 <_Z12printDataLCDv>

000010d4 <__subsf3>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
/* LOOP                                                                 */
/************************************************************************/
void loop() {

	readServo(arm.id, 0x24, 34);
	printDataLCD();
<<<<<<< HEAD
    10ca:	50 58       	subi	r21, 0x80	; 128

000010cc <__addsf3>:
    10cc:	bb 27       	eor	r27, r27
    10ce:	aa 27       	eor	r26, r26
    10d0:	0e d0       	rcall	.+28     	; 0x10ee <__addsf3x>
    10d2:	0d c1       	rjmp	.+538    	; 0x12ee <__fp_round>
    10d4:	fe d0       	rcall	.+508    	; 0x12d2 <__fp_pscA>
    10d6:	30 f0       	brcs	.+12     	; 0x10e4 <__addsf3+0x18>
    10d8:	03 d1       	rcall	.+518    	; 0x12e0 <__fp_pscB>
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <__addsf3+0x18>
    10dc:	31 f4       	brne	.+12     	; 0x10ea <__addsf3+0x1e>
    10de:	9f 3f       	cpi	r25, 0xFF	; 255
    10e0:	11 f4       	brne	.+4      	; 0x10e6 <__addsf3+0x1a>
    10e2:	1e f4       	brtc	.+6      	; 0x10ea <__addsf3+0x1e>
    10e4:	f3 c0       	rjmp	.+486    	; 0x12cc <__fp_nan>
    10e6:	0e f4       	brtc	.+2      	; 0x10ea <__addsf3+0x1e>
    10e8:	e0 95       	com	r30
    10ea:	e7 fb       	bst	r30, 7
    10ec:	e9 c0       	rjmp	.+466    	; 0x12c0 <__fp_inf>

000010ee <__addsf3x>:
    10ee:	e9 2f       	mov	r30, r25
    10f0:	0f d1       	rcall	.+542    	; 0x1310 <__fp_split3>
    10f2:	80 f3       	brcs	.-32     	; 0x10d4 <__addsf3+0x8>
    10f4:	ba 17       	cp	r27, r26
    10f6:	62 07       	cpc	r22, r18
    10f8:	73 07       	cpc	r23, r19
    10fa:	84 07       	cpc	r24, r20
    10fc:	95 07       	cpc	r25, r21
    10fe:	18 f0       	brcs	.+6      	; 0x1106 <__addsf3x+0x18>
    1100:	71 f4       	brne	.+28     	; 0x111e <__addsf3x+0x30>
    1102:	9e f5       	brtc	.+102    	; 0x116a <__addsf3x+0x7c>
    1104:	27 c1       	rjmp	.+590    	; 0x1354 <__fp_zero>
    1106:	0e f4       	brtc	.+2      	; 0x110a <__addsf3x+0x1c>
    1108:	e0 95       	com	r30
    110a:	0b 2e       	mov	r0, r27
    110c:	ba 2f       	mov	r27, r26
    110e:	a0 2d       	mov	r26, r0
    1110:	0b 01       	movw	r0, r22
    1112:	b9 01       	movw	r22, r18
    1114:	90 01       	movw	r18, r0
    1116:	0c 01       	movw	r0, r24
    1118:	ca 01       	movw	r24, r20
    111a:	a0 01       	movw	r20, r0
    111c:	11 24       	eor	r1, r1
    111e:	ff 27       	eor	r31, r31
    1120:	59 1b       	sub	r21, r25
    1122:	99 f0       	breq	.+38     	; 0x114a <__addsf3x+0x5c>
    1124:	59 3f       	cpi	r21, 0xF9	; 249
    1126:	50 f4       	brcc	.+20     	; 0x113c <__addsf3x+0x4e>
    1128:	50 3e       	cpi	r21, 0xE0	; 224
    112a:	68 f1       	brcs	.+90     	; 0x1186 <__addsf3x+0x98>
    112c:	1a 16       	cp	r1, r26
    112e:	f0 40       	sbci	r31, 0x00	; 0
    1130:	a2 2f       	mov	r26, r18
    1132:	23 2f       	mov	r18, r19
    1134:	34 2f       	mov	r19, r20
    1136:	44 27       	eor	r20, r20
    1138:	58 5f       	subi	r21, 0xF8	; 248
    113a:	f3 cf       	rjmp	.-26     	; 0x1122 <__addsf3x+0x34>
    113c:	46 95       	lsr	r20
    113e:	37 95       	ror	r19
    1140:	27 95       	ror	r18
    1142:	a7 95       	ror	r26
    1144:	f0 40       	sbci	r31, 0x00	; 0
    1146:	53 95       	inc	r21
    1148:	c9 f7       	brne	.-14     	; 0x113c <__addsf3x+0x4e>
    114a:	7e f4       	brtc	.+30     	; 0x116a <__addsf3x+0x7c>
    114c:	1f 16       	cp	r1, r31
    114e:	ba 0b       	sbc	r27, r26
    1150:	62 0b       	sbc	r22, r18
    1152:	73 0b       	sbc	r23, r19
    1154:	84 0b       	sbc	r24, r20
    1156:	ba f0       	brmi	.+46     	; 0x1186 <__addsf3x+0x98>
    1158:	91 50       	subi	r25, 0x01	; 1
    115a:	a1 f0       	breq	.+40     	; 0x1184 <__addsf3x+0x96>
    115c:	ff 0f       	add	r31, r31
    115e:	bb 1f       	adc	r27, r27
    1160:	66 1f       	adc	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	88 1f       	adc	r24, r24
    1166:	c2 f7       	brpl	.-16     	; 0x1158 <__addsf3x+0x6a>
    1168:	0e c0       	rjmp	.+28     	; 0x1186 <__addsf3x+0x98>
    116a:	ba 0f       	add	r27, r26
    116c:	62 1f       	adc	r22, r18
    116e:	73 1f       	adc	r23, r19
    1170:	84 1f       	adc	r24, r20
    1172:	48 f4       	brcc	.+18     	; 0x1186 <__addsf3x+0x98>
    1174:	87 95       	ror	r24
    1176:	77 95       	ror	r23
    1178:	67 95       	ror	r22
    117a:	b7 95       	ror	r27
    117c:	f7 95       	ror	r31
    117e:	9e 3f       	cpi	r25, 0xFE	; 254
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__addsf3x+0x96>
    1182:	b3 cf       	rjmp	.-154    	; 0x10ea <__addsf3+0x1e>
    1184:	93 95       	inc	r25
    1186:	88 0f       	add	r24, r24
    1188:	08 f0       	brcs	.+2      	; 0x118c <__addsf3x+0x9e>
    118a:	99 27       	eor	r25, r25
    118c:	ee 0f       	add	r30, r30
    118e:	97 95       	ror	r25
    1190:	87 95       	ror	r24
    1192:	08 95       	ret

00001194 <__cmpsf2>:
    1194:	71 d0       	rcall	.+226    	; 0x1278 <__fp_cmp>
    1196:	08 f4       	brcc	.+2      	; 0x119a <__cmpsf2+0x6>
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	08 95       	ret

0000119c <__fixsfsi>:
    119c:	04 d0       	rcall	.+8      	; 0x11a6 <__fixunssfsi>
    119e:	68 94       	set
    11a0:	b1 11       	cpse	r27, r1
    11a2:	d9 c0       	rjmp	.+434    	; 0x1356 <__fp_szero>
    11a4:	08 95       	ret

000011a6 <__fixunssfsi>:
    11a6:	bc d0       	rcall	.+376    	; 0x1320 <__fp_splitA>
    11a8:	88 f0       	brcs	.+34     	; 0x11cc <__fixunssfsi+0x26>
    11aa:	9f 57       	subi	r25, 0x7F	; 127
    11ac:	90 f0       	brcs	.+36     	; 0x11d2 <__fixunssfsi+0x2c>
    11ae:	b9 2f       	mov	r27, r25
    11b0:	99 27       	eor	r25, r25
    11b2:	b7 51       	subi	r27, 0x17	; 23
    11b4:	a0 f0       	brcs	.+40     	; 0x11de <__fixunssfsi+0x38>
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <__fixunssfsi+0x46>
    11b8:	66 0f       	add	r22, r22
    11ba:	77 1f       	adc	r23, r23
    11bc:	88 1f       	adc	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	1a f0       	brmi	.+6      	; 0x11c8 <__fixunssfsi+0x22>
    11c2:	ba 95       	dec	r27
    11c4:	c9 f7       	brne	.-14     	; 0x11b8 <__fixunssfsi+0x12>
    11c6:	12 c0       	rjmp	.+36     	; 0x11ec <__fixunssfsi+0x46>
    11c8:	b1 30       	cpi	r27, 0x01	; 1
    11ca:	81 f0       	breq	.+32     	; 0x11ec <__fixunssfsi+0x46>
    11cc:	c3 d0       	rcall	.+390    	; 0x1354 <__fp_zero>
    11ce:	b1 e0       	ldi	r27, 0x01	; 1
    11d0:	08 95       	ret
    11d2:	c0 c0       	rjmp	.+384    	; 0x1354 <__fp_zero>
    11d4:	67 2f       	mov	r22, r23
    11d6:	78 2f       	mov	r23, r24
    11d8:	88 27       	eor	r24, r24
    11da:	b8 5f       	subi	r27, 0xF8	; 248
    11dc:	39 f0       	breq	.+14     	; 0x11ec <__fixunssfsi+0x46>
    11de:	b9 3f       	cpi	r27, 0xF9	; 249
    11e0:	cc f3       	brlt	.-14     	; 0x11d4 <__fixunssfsi+0x2e>
    11e2:	86 95       	lsr	r24
    11e4:	77 95       	ror	r23
    11e6:	67 95       	ror	r22
    11e8:	b3 95       	inc	r27
    11ea:	d9 f7       	brne	.-10     	; 0x11e2 <__fixunssfsi+0x3c>
    11ec:	3e f4       	brtc	.+14     	; 0x11fc <__fixunssfsi+0x56>
    11ee:	90 95       	com	r25
    11f0:	80 95       	com	r24
    11f2:	70 95       	com	r23
    11f4:	61 95       	neg	r22
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	8f 4f       	sbci	r24, 0xFF	; 255
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	08 95       	ret

000011fe <__floatunsisf>:
    11fe:	e8 94       	clt
    1200:	09 c0       	rjmp	.+18     	; 0x1214 <__floatsisf+0x12>

00001202 <__floatsisf>:
    1202:	97 fb       	bst	r25, 7
    1204:	3e f4       	brtc	.+14     	; 0x1214 <__floatsisf+0x12>
    1206:	90 95       	com	r25
    1208:	80 95       	com	r24
    120a:	70 95       	com	r23
    120c:	61 95       	neg	r22
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	8f 4f       	sbci	r24, 0xFF	; 255
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	99 23       	and	r25, r25
    1216:	a9 f0       	breq	.+42     	; 0x1242 <__floatsisf+0x40>
    1218:	f9 2f       	mov	r31, r25
    121a:	96 e9       	ldi	r25, 0x96	; 150
    121c:	bb 27       	eor	r27, r27
    121e:	93 95       	inc	r25
    1220:	f6 95       	lsr	r31
    1222:	87 95       	ror	r24
    1224:	77 95       	ror	r23
    1226:	67 95       	ror	r22
    1228:	b7 95       	ror	r27
    122a:	f1 11       	cpse	r31, r1
    122c:	f8 cf       	rjmp	.-16     	; 0x121e <__floatsisf+0x1c>
    122e:	fa f4       	brpl	.+62     	; 0x126e <__floatsisf+0x6c>
    1230:	bb 0f       	add	r27, r27
    1232:	11 f4       	brne	.+4      	; 0x1238 <__floatsisf+0x36>
    1234:	60 ff       	sbrs	r22, 0
    1236:	1b c0       	rjmp	.+54     	; 0x126e <__floatsisf+0x6c>
    1238:	6f 5f       	subi	r22, 0xFF	; 255
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8f 4f       	sbci	r24, 0xFF	; 255
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	16 c0       	rjmp	.+44     	; 0x126e <__floatsisf+0x6c>
    1242:	88 23       	and	r24, r24
    1244:	11 f0       	breq	.+4      	; 0x124a <__floatsisf+0x48>
    1246:	96 e9       	ldi	r25, 0x96	; 150
    1248:	11 c0       	rjmp	.+34     	; 0x126c <__floatsisf+0x6a>
    124a:	77 23       	and	r23, r23
    124c:	21 f0       	breq	.+8      	; 0x1256 <__floatsisf+0x54>
    124e:	9e e8       	ldi	r25, 0x8E	; 142
    1250:	87 2f       	mov	r24, r23
    1252:	76 2f       	mov	r23, r22
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <__floatsisf+0x5e>
    1256:	66 23       	and	r22, r22
    1258:	71 f0       	breq	.+28     	; 0x1276 <__floatsisf+0x74>
    125a:	96 e8       	ldi	r25, 0x86	; 134
    125c:	86 2f       	mov	r24, r22
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	2a f0       	brmi	.+10     	; 0x126e <__floatsisf+0x6c>
    1264:	9a 95       	dec	r25
    1266:	66 0f       	add	r22, r22
    1268:	77 1f       	adc	r23, r23
    126a:	88 1f       	adc	r24, r24
    126c:	da f7       	brpl	.-10     	; 0x1264 <__floatsisf+0x62>
    126e:	88 0f       	add	r24, r24
    1270:	96 95       	lsr	r25
    1272:	87 95       	ror	r24
    1274:	97 f9       	bld	r25, 7
    1276:	08 95       	ret

00001278 <__fp_cmp>:
    1278:	99 0f       	add	r25, r25
    127a:	00 08       	sbc	r0, r0
    127c:	55 0f       	add	r21, r21
    127e:	aa 0b       	sbc	r26, r26
    1280:	e0 e8       	ldi	r30, 0x80	; 128
    1282:	fe ef       	ldi	r31, 0xFE	; 254
    1284:	16 16       	cp	r1, r22
    1286:	17 06       	cpc	r1, r23
    1288:	e8 07       	cpc	r30, r24
    128a:	f9 07       	cpc	r31, r25
    128c:	c0 f0       	brcs	.+48     	; 0x12be <__fp_cmp+0x46>
    128e:	12 16       	cp	r1, r18
    1290:	13 06       	cpc	r1, r19
    1292:	e4 07       	cpc	r30, r20
    1294:	f5 07       	cpc	r31, r21
    1296:	98 f0       	brcs	.+38     	; 0x12be <__fp_cmp+0x46>
    1298:	62 1b       	sub	r22, r18
    129a:	73 0b       	sbc	r23, r19
    129c:	84 0b       	sbc	r24, r20
    129e:	95 0b       	sbc	r25, r21
    12a0:	39 f4       	brne	.+14     	; 0x12b0 <__fp_cmp+0x38>
    12a2:	0a 26       	eor	r0, r26
    12a4:	61 f0       	breq	.+24     	; 0x12be <__fp_cmp+0x46>
    12a6:	23 2b       	or	r18, r19
    12a8:	24 2b       	or	r18, r20
    12aa:	25 2b       	or	r18, r21
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <__fp_cmp+0x3e>
    12ae:	08 95       	ret
    12b0:	0a 26       	eor	r0, r26
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <__fp_cmp+0x3e>
    12b4:	a1 40       	sbci	r26, 0x01	; 1
    12b6:	a6 95       	lsr	r26
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	81 1d       	adc	r24, r1
    12bc:	81 1d       	adc	r24, r1
    12be:	08 95       	ret

000012c0 <__fp_inf>:
    12c0:	97 f9       	bld	r25, 7
    12c2:	9f 67       	ori	r25, 0x7F	; 127
    12c4:	80 e8       	ldi	r24, 0x80	; 128
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	08 95       	ret

000012cc <__fp_nan>:
    12cc:	9f ef       	ldi	r25, 0xFF	; 255
    12ce:	80 ec       	ldi	r24, 0xC0	; 192
    12d0:	08 95       	ret

000012d2 <__fp_pscA>:
    12d2:	00 24       	eor	r0, r0
    12d4:	0a 94       	dec	r0
    12d6:	16 16       	cp	r1, r22
    12d8:	17 06       	cpc	r1, r23
    12da:	18 06       	cpc	r1, r24
    12dc:	09 06       	cpc	r0, r25
    12de:	08 95       	ret

000012e0 <__fp_pscB>:
    12e0:	00 24       	eor	r0, r0
    12e2:	0a 94       	dec	r0
    12e4:	12 16       	cp	r1, r18
    12e6:	13 06       	cpc	r1, r19
    12e8:	14 06       	cpc	r1, r20
    12ea:	05 06       	cpc	r0, r21
    12ec:	08 95       	ret

000012ee <__fp_round>:
    12ee:	09 2e       	mov	r0, r25
    12f0:	03 94       	inc	r0
    12f2:	00 0c       	add	r0, r0
    12f4:	11 f4       	brne	.+4      	; 0x12fa <__fp_round+0xc>
    12f6:	88 23       	and	r24, r24
    12f8:	52 f0       	brmi	.+20     	; 0x130e <__fp_round+0x20>
    12fa:	bb 0f       	add	r27, r27
    12fc:	40 f4       	brcc	.+16     	; 0x130e <__fp_round+0x20>
    12fe:	bf 2b       	or	r27, r31
    1300:	11 f4       	brne	.+4      	; 0x1306 <__fp_round+0x18>
    1302:	60 ff       	sbrs	r22, 0
    1304:	04 c0       	rjmp	.+8      	; 0x130e <__fp_round+0x20>
    1306:	6f 5f       	subi	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	08 95       	ret

00001310 <__fp_split3>:
    1310:	57 fd       	sbrc	r21, 7
    1312:	90 58       	subi	r25, 0x80	; 128
    1314:	44 0f       	add	r20, r20
    1316:	55 1f       	adc	r21, r21
    1318:	59 f0       	breq	.+22     	; 0x1330 <__fp_splitA+0x10>
    131a:	5f 3f       	cpi	r21, 0xFF	; 255
    131c:	71 f0       	breq	.+28     	; 0x133a <__fp_splitA+0x1a>
    131e:	47 95       	ror	r20

00001320 <__fp_splitA>:
    1320:	88 0f       	add	r24, r24
    1322:	97 fb       	bst	r25, 7
    1324:	99 1f       	adc	r25, r25
    1326:	61 f0       	breq	.+24     	; 0x1340 <__fp_splitA+0x20>
    1328:	9f 3f       	cpi	r25, 0xFF	; 255
    132a:	79 f0       	breq	.+30     	; 0x134a <__fp_splitA+0x2a>
    132c:	87 95       	ror	r24
    132e:	08 95       	ret
    1330:	12 16       	cp	r1, r18
    1332:	13 06       	cpc	r1, r19
    1334:	14 06       	cpc	r1, r20
    1336:	55 1f       	adc	r21, r21
    1338:	f2 cf       	rjmp	.-28     	; 0x131e <__fp_split3+0xe>
    133a:	46 95       	lsr	r20
    133c:	f1 df       	rcall	.-30     	; 0x1320 <__fp_splitA>
    133e:	08 c0       	rjmp	.+16     	; 0x1350 <__fp_splitA+0x30>
    1340:	16 16       	cp	r1, r22
    1342:	17 06       	cpc	r1, r23
    1344:	18 06       	cpc	r1, r24
    1346:	99 1f       	adc	r25, r25
    1348:	f1 cf       	rjmp	.-30     	; 0x132c <__fp_splitA+0xc>
    134a:	86 95       	lsr	r24
    134c:	71 05       	cpc	r23, r1
    134e:	61 05       	cpc	r22, r1
    1350:	08 94       	sec
    1352:	08 95       	ret

00001354 <__fp_zero>:
    1354:	e8 94       	clt

00001356 <__fp_szero>:
    1356:	bb 27       	eor	r27, r27
    1358:	66 27       	eor	r22, r22
    135a:	77 27       	eor	r23, r23
    135c:	cb 01       	movw	r24, r22
    135e:	97 f9       	bld	r25, 7
    1360:	08 95       	ret

00001362 <__mulsf3>:
    1362:	0b d0       	rcall	.+22     	; 0x137a <__mulsf3x>
    1364:	c4 cf       	rjmp	.-120    	; 0x12ee <__fp_round>
    1366:	b5 df       	rcall	.-150    	; 0x12d2 <__fp_pscA>
    1368:	28 f0       	brcs	.+10     	; 0x1374 <__mulsf3+0x12>
    136a:	ba df       	rcall	.-140    	; 0x12e0 <__fp_pscB>
    136c:	18 f0       	brcs	.+6      	; 0x1374 <__mulsf3+0x12>
    136e:	95 23       	and	r25, r21
    1370:	09 f0       	breq	.+2      	; 0x1374 <__mulsf3+0x12>
    1372:	a6 cf       	rjmp	.-180    	; 0x12c0 <__fp_inf>
    1374:	ab cf       	rjmp	.-170    	; 0x12cc <__fp_nan>
    1376:	11 24       	eor	r1, r1
    1378:	ee cf       	rjmp	.-36     	; 0x1356 <__fp_szero>

0000137a <__mulsf3x>:
    137a:	ca df       	rcall	.-108    	; 0x1310 <__fp_split3>
    137c:	a0 f3       	brcs	.-24     	; 0x1366 <__mulsf3+0x4>

0000137e <__mulsf3_pse>:
    137e:	95 9f       	mul	r25, r21
    1380:	d1 f3       	breq	.-12     	; 0x1376 <__mulsf3+0x14>
    1382:	95 0f       	add	r25, r21
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	55 1f       	adc	r21, r21
    1388:	62 9f       	mul	r22, r18
    138a:	f0 01       	movw	r30, r0
    138c:	72 9f       	mul	r23, r18
    138e:	bb 27       	eor	r27, r27
    1390:	f0 0d       	add	r31, r0
    1392:	b1 1d       	adc	r27, r1
    1394:	63 9f       	mul	r22, r19
    1396:	aa 27       	eor	r26, r26
    1398:	f0 0d       	add	r31, r0
    139a:	b1 1d       	adc	r27, r1
    139c:	aa 1f       	adc	r26, r26
    139e:	64 9f       	mul	r22, r20
    13a0:	66 27       	eor	r22, r22
    13a2:	b0 0d       	add	r27, r0
    13a4:	a1 1d       	adc	r26, r1
    13a6:	66 1f       	adc	r22, r22
    13a8:	82 9f       	mul	r24, r18
    13aa:	22 27       	eor	r18, r18
    13ac:	b0 0d       	add	r27, r0
    13ae:	a1 1d       	adc	r26, r1
    13b0:	62 1f       	adc	r22, r18
    13b2:	73 9f       	mul	r23, r19
    13b4:	b0 0d       	add	r27, r0
    13b6:	a1 1d       	adc	r26, r1
    13b8:	62 1f       	adc	r22, r18
    13ba:	83 9f       	mul	r24, r19
    13bc:	a0 0d       	add	r26, r0
    13be:	61 1d       	adc	r22, r1
    13c0:	22 1f       	adc	r18, r18
    13c2:	74 9f       	mul	r23, r20
    13c4:	33 27       	eor	r19, r19
    13c6:	a0 0d       	add	r26, r0
    13c8:	61 1d       	adc	r22, r1
    13ca:	23 1f       	adc	r18, r19
    13cc:	84 9f       	mul	r24, r20
    13ce:	60 0d       	add	r22, r0
    13d0:	21 1d       	adc	r18, r1
    13d2:	82 2f       	mov	r24, r18
    13d4:	76 2f       	mov	r23, r22
    13d6:	6a 2f       	mov	r22, r26
    13d8:	11 24       	eor	r1, r1
    13da:	9f 57       	subi	r25, 0x7F	; 127
    13dc:	50 40       	sbci	r21, 0x00	; 0
    13de:	8a f0       	brmi	.+34     	; 0x1402 <__mulsf3_pse+0x84>
    13e0:	e1 f0       	breq	.+56     	; 0x141a <__mulsf3_pse+0x9c>
    13e2:	88 23       	and	r24, r24
    13e4:	4a f0       	brmi	.+18     	; 0x13f8 <__mulsf3_pse+0x7a>
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	bb 1f       	adc	r27, r27
    13ec:	66 1f       	adc	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	88 1f       	adc	r24, r24
    13f2:	91 50       	subi	r25, 0x01	; 1
    13f4:	50 40       	sbci	r21, 0x00	; 0
    13f6:	a9 f7       	brne	.-22     	; 0x13e2 <__mulsf3_pse+0x64>
    13f8:	9e 3f       	cpi	r25, 0xFE	; 254
    13fa:	51 05       	cpc	r21, r1
    13fc:	70 f0       	brcs	.+28     	; 0x141a <__mulsf3_pse+0x9c>
    13fe:	60 cf       	rjmp	.-320    	; 0x12c0 <__fp_inf>
    1400:	aa cf       	rjmp	.-172    	; 0x1356 <__fp_szero>
    1402:	5f 3f       	cpi	r21, 0xFF	; 255
    1404:	ec f3       	brlt	.-6      	; 0x1400 <__mulsf3_pse+0x82>
    1406:	98 3e       	cpi	r25, 0xE8	; 232
    1408:	dc f3       	brlt	.-10     	; 0x1400 <__mulsf3_pse+0x82>
    140a:	86 95       	lsr	r24
    140c:	77 95       	ror	r23
    140e:	67 95       	ror	r22
    1410:	b7 95       	ror	r27
    1412:	f7 95       	ror	r31
    1414:	e7 95       	ror	r30
    1416:	9f 5f       	subi	r25, 0xFF	; 255
    1418:	c1 f7       	brne	.-16     	; 0x140a <__mulsf3_pse+0x8c>
    141a:	fe 2b       	or	r31, r30
    141c:	88 0f       	add	r24, r24
    141e:	91 1d       	adc	r25, r1
    1420:	96 95       	lsr	r25
    1422:	87 95       	ror	r24
    1424:	97 f9       	bld	r25, 7
    1426:	08 95       	ret

00001428 <pow>:
    1428:	fa 01       	movw	r30, r20
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	30 96       	adiw	r30, 0x00	; 0
    1430:	21 05       	cpc	r18, r1
    1432:	31 05       	cpc	r19, r1
    1434:	99 f1       	breq	.+102    	; 0x149c <pow+0x74>
    1436:	61 15       	cp	r22, r1
    1438:	71 05       	cpc	r23, r1
    143a:	61 f4       	brne	.+24     	; 0x1454 <pow+0x2c>
    143c:	80 38       	cpi	r24, 0x80	; 128
    143e:	bf e3       	ldi	r27, 0x3F	; 63
    1440:	9b 07       	cpc	r25, r27
    1442:	49 f1       	breq	.+82     	; 0x1496 <pow+0x6e>
    1444:	68 94       	set
    1446:	90 38       	cpi	r25, 0x80	; 128
    1448:	81 05       	cpc	r24, r1
    144a:	61 f0       	breq	.+24     	; 0x1464 <pow+0x3c>
    144c:	80 38       	cpi	r24, 0x80	; 128
    144e:	bf ef       	ldi	r27, 0xFF	; 255
    1450:	9b 07       	cpc	r25, r27
    1452:	41 f0       	breq	.+16     	; 0x1464 <pow+0x3c>
    1454:	99 23       	and	r25, r25
    1456:	42 f5       	brpl	.+80     	; 0x14a8 <pow+0x80>
    1458:	ff 3f       	cpi	r31, 0xFF	; 255
    145a:	e1 05       	cpc	r30, r1
    145c:	31 05       	cpc	r19, r1
    145e:	21 05       	cpc	r18, r1
    1460:	11 f1       	breq	.+68     	; 0x14a6 <pow+0x7e>
    1462:	e8 94       	clt
    1464:	08 94       	sec
    1466:	e7 95       	ror	r30
    1468:	d9 01       	movw	r26, r18
    146a:	aa 23       	and	r26, r26
    146c:	29 f4       	brne	.+10     	; 0x1478 <pow+0x50>
    146e:	ab 2f       	mov	r26, r27
    1470:	be 2f       	mov	r27, r30
    1472:	f8 5f       	subi	r31, 0xF8	; 248
    1474:	d0 f3       	brcs	.-12     	; 0x146a <pow+0x42>
    1476:	10 c0       	rjmp	.+32     	; 0x1498 <pow+0x70>
    1478:	ff 5f       	subi	r31, 0xFF	; 255
    147a:	70 f4       	brcc	.+28     	; 0x1498 <pow+0x70>
    147c:	a6 95       	lsr	r26
    147e:	e0 f7       	brcc	.-8      	; 0x1478 <pow+0x50>
    1480:	f7 39       	cpi	r31, 0x97	; 151
    1482:	50 f0       	brcs	.+20     	; 0x1498 <pow+0x70>
    1484:	19 f0       	breq	.+6      	; 0x148c <pow+0x64>
    1486:	ff 3a       	cpi	r31, 0xAF	; 175
    1488:	38 f4       	brcc	.+14     	; 0x1498 <pow+0x70>
    148a:	9f 77       	andi	r25, 0x7F	; 127
    148c:	9f 93       	push	r25
    148e:	0c d0       	rcall	.+24     	; 0x14a8 <pow+0x80>
    1490:	0f 90       	pop	r0
    1492:	07 fc       	sbrc	r0, 7
    1494:	90 58       	subi	r25, 0x80	; 128
    1496:	08 95       	ret
    1498:	3e f0       	brts	.+14     	; 0x14a8 <pow+0x80>
    149a:	18 cf       	rjmp	.-464    	; 0x12cc <__fp_nan>
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	80 e8       	ldi	r24, 0x80	; 128
    14a2:	9f e3       	ldi	r25, 0x3F	; 63
    14a4:	08 95       	ret
    14a6:	4f e7       	ldi	r20, 0x7F	; 127
    14a8:	9f 77       	andi	r25, 0x7F	; 127
    14aa:	5f 93       	push	r21
    14ac:	4f 93       	push	r20
    14ae:	3f 93       	push	r19
    14b0:	2f 93       	push	r18
    14b2:	9e d0       	rcall	.+316    	; 0x15f0 <log>
    14b4:	2f 91       	pop	r18
    14b6:	3f 91       	pop	r19
    14b8:	4f 91       	pop	r20
    14ba:	5f 91       	pop	r21
    14bc:	52 df       	rcall	.-348    	; 0x1362 <__mulsf3>
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <exp>
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <pow+0xa0>
    14c2:	0e f0       	brts	.+2      	; 0x14c6 <pow+0x9e>
    14c4:	fd ce       	rjmp	.-518    	; 0x12c0 <__fp_inf>
    14c6:	46 cf       	rjmp	.-372    	; 0x1354 <__fp_zero>
    14c8:	01 cf       	rjmp	.-510    	; 0x12cc <__fp_nan>

000014ca <exp>:
    14ca:	2a df       	rcall	.-428    	; 0x1320 <__fp_splitA>
    14cc:	c8 f3       	brcs	.-14     	; 0x14c0 <pow+0x98>
    14ce:	96 38       	cpi	r25, 0x86	; 134
    14d0:	c0 f7       	brcc	.-16     	; 0x14c2 <pow+0x9a>
    14d2:	07 f8       	bld	r0, 7
    14d4:	0f 92       	push	r0
    14d6:	e8 94       	clt
    14d8:	2b e3       	ldi	r18, 0x3B	; 59
    14da:	3a ea       	ldi	r19, 0xAA	; 170
    14dc:	48 eb       	ldi	r20, 0xB8	; 184
    14de:	5f e7       	ldi	r21, 0x7F	; 127
    14e0:	4e df       	rcall	.-356    	; 0x137e <__mulsf3_pse>
    14e2:	0f 92       	push	r0
    14e4:	0f 92       	push	r0
    14e6:	0f 92       	push	r0
    14e8:	4d b7       	in	r20, 0x3d	; 61
    14ea:	5e b7       	in	r21, 0x3e	; 62
    14ec:	0f 92       	push	r0
    14ee:	c0 d0       	rcall	.+384    	; 0x1670 <modf>
    14f0:	e4 ee       	ldi	r30, 0xE4	; 228
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	16 d0       	rcall	.+44     	; 0x1522 <__fp_powser>
    14f6:	4f 91       	pop	r20
    14f8:	5f 91       	pop	r21
    14fa:	ef 91       	pop	r30
    14fc:	ff 91       	pop	r31
    14fe:	e5 95       	asr	r30
    1500:	ee 1f       	adc	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	49 f0       	breq	.+18     	; 0x1518 <exp+0x4e>
    1506:	fe 57       	subi	r31, 0x7E	; 126
    1508:	e0 68       	ori	r30, 0x80	; 128
    150a:	44 27       	eor	r20, r20
    150c:	ee 0f       	add	r30, r30
    150e:	44 1f       	adc	r20, r20
    1510:	fa 95       	dec	r31
    1512:	e1 f7       	brne	.-8      	; 0x150c <exp+0x42>
    1514:	41 95       	neg	r20
    1516:	55 0b       	sbc	r21, r21
    1518:	32 d0       	rcall	.+100    	; 0x157e <ldexp>
    151a:	0f 90       	pop	r0
    151c:	07 fe       	sbrs	r0, 7
    151e:	26 c0       	rjmp	.+76     	; 0x156c <inverse>
    1520:	08 95       	ret

00001522 <__fp_powser>:
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	1f 93       	push	r17
    1528:	0f 93       	push	r16
    152a:	ff 92       	push	r15
    152c:	ef 92       	push	r14
    152e:	df 92       	push	r13
    1530:	7b 01       	movw	r14, r22
    1532:	8c 01       	movw	r16, r24
    1534:	68 94       	set
    1536:	05 c0       	rjmp	.+10     	; 0x1542 <__fp_powser+0x20>
    1538:	da 2e       	mov	r13, r26
    153a:	ef 01       	movw	r28, r30
    153c:	1e df       	rcall	.-452    	; 0x137a <__mulsf3x>
    153e:	fe 01       	movw	r30, r28
    1540:	e8 94       	clt
    1542:	a5 91       	lpm	r26, Z+
    1544:	25 91       	lpm	r18, Z+
    1546:	35 91       	lpm	r19, Z+
    1548:	45 91       	lpm	r20, Z+
    154a:	55 91       	lpm	r21, Z+
    154c:	ae f3       	brts	.-22     	; 0x1538 <__fp_powser+0x16>
    154e:	ef 01       	movw	r28, r30
    1550:	ce dd       	rcall	.-1124   	; 0x10ee <__addsf3x>
    1552:	fe 01       	movw	r30, r28
    1554:	97 01       	movw	r18, r14
    1556:	a8 01       	movw	r20, r16
    1558:	da 94       	dec	r13
    155a:	79 f7       	brne	.-34     	; 0x153a <__fp_powser+0x18>
    155c:	df 90       	pop	r13
    155e:	ef 90       	pop	r14
    1560:	ff 90       	pop	r15
    1562:	0f 91       	pop	r16
    1564:	1f 91       	pop	r17
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <inverse>:
    156c:	9b 01       	movw	r18, r22
    156e:	ac 01       	movw	r20, r24
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	80 e8       	ldi	r24, 0x80	; 128
    1576:	9f e3       	ldi	r25, 0x3F	; 63
    1578:	ae c0       	rjmp	.+348    	; 0x16d6 <__divsf3>
    157a:	a2 ce       	rjmp	.-700    	; 0x12c0 <__fp_inf>
    157c:	14 c1       	rjmp	.+552    	; 0x17a6 <__fp_mpack>

0000157e <ldexp>:
    157e:	d0 de       	rcall	.-608    	; 0x1320 <__fp_splitA>
    1580:	e8 f3       	brcs	.-6      	; 0x157c <inverse+0x10>
    1582:	99 23       	and	r25, r25
    1584:	d9 f3       	breq	.-10     	; 0x157c <inverse+0x10>
    1586:	94 0f       	add	r25, r20
    1588:	51 1d       	adc	r21, r1
    158a:	bb f3       	brvs	.-18     	; 0x157a <inverse+0xe>
    158c:	91 50       	subi	r25, 0x01	; 1
    158e:	50 40       	sbci	r21, 0x00	; 0
    1590:	94 f0       	brlt	.+36     	; 0x15b6 <ldexp+0x38>
    1592:	59 f0       	breq	.+22     	; 0x15aa <ldexp+0x2c>
    1594:	88 23       	and	r24, r24
    1596:	32 f0       	brmi	.+12     	; 0x15a4 <ldexp+0x26>
    1598:	66 0f       	add	r22, r22
    159a:	77 1f       	adc	r23, r23
    159c:	88 1f       	adc	r24, r24
    159e:	91 50       	subi	r25, 0x01	; 1
    15a0:	50 40       	sbci	r21, 0x00	; 0
    15a2:	c1 f7       	brne	.-16     	; 0x1594 <ldexp+0x16>
    15a4:	9e 3f       	cpi	r25, 0xFE	; 254
    15a6:	51 05       	cpc	r21, r1
    15a8:	44 f7       	brge	.-48     	; 0x157a <inverse+0xe>
    15aa:	88 0f       	add	r24, r24
    15ac:	91 1d       	adc	r25, r1
    15ae:	96 95       	lsr	r25
    15b0:	87 95       	ror	r24
    15b2:	97 f9       	bld	r25, 7
    15b4:	08 95       	ret
    15b6:	5f 3f       	cpi	r21, 0xFF	; 255
    15b8:	ac f0       	brlt	.+42     	; 0x15e4 <ldexp+0x66>
    15ba:	98 3e       	cpi	r25, 0xE8	; 232
    15bc:	9c f0       	brlt	.+38     	; 0x15e4 <ldexp+0x66>
    15be:	bb 27       	eor	r27, r27
    15c0:	86 95       	lsr	r24
    15c2:	77 95       	ror	r23
    15c4:	67 95       	ror	r22
    15c6:	b7 95       	ror	r27
    15c8:	08 f4       	brcc	.+2      	; 0x15cc <ldexp+0x4e>
    15ca:	b1 60       	ori	r27, 0x01	; 1
    15cc:	93 95       	inc	r25
    15ce:	c1 f7       	brne	.-16     	; 0x15c0 <ldexp+0x42>
    15d0:	bb 0f       	add	r27, r27
    15d2:	58 f7       	brcc	.-42     	; 0x15aa <ldexp+0x2c>
    15d4:	11 f4       	brne	.+4      	; 0x15da <ldexp+0x5c>
    15d6:	60 ff       	sbrs	r22, 0
    15d8:	e8 cf       	rjmp	.-48     	; 0x15aa <ldexp+0x2c>
    15da:	6f 5f       	subi	r22, 0xFF	; 255
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	8f 4f       	sbci	r24, 0xFF	; 255
    15e0:	9f 4f       	sbci	r25, 0xFF	; 255
    15e2:	e3 cf       	rjmp	.-58     	; 0x15aa <ldexp+0x2c>
    15e4:	b8 ce       	rjmp	.-656    	; 0x1356 <__fp_szero>
    15e6:	0e f0       	brts	.+2      	; 0x15ea <ldexp+0x6c>
    15e8:	de c0       	rjmp	.+444    	; 0x17a6 <__fp_mpack>
    15ea:	70 ce       	rjmp	.-800    	; 0x12cc <__fp_nan>
    15ec:	68 94       	set
    15ee:	68 ce       	rjmp	.-816    	; 0x12c0 <__fp_inf>

000015f0 <log>:
    15f0:	97 de       	rcall	.-722    	; 0x1320 <__fp_splitA>
    15f2:	c8 f3       	brcs	.-14     	; 0x15e6 <ldexp+0x68>
    15f4:	99 23       	and	r25, r25
    15f6:	d1 f3       	breq	.-12     	; 0x15ec <ldexp+0x6e>
    15f8:	c6 f3       	brts	.-16     	; 0x15ea <ldexp+0x6c>
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	1f 93       	push	r17
    1600:	0f 93       	push	r16
    1602:	ff 92       	push	r15
    1604:	c9 2f       	mov	r28, r25
    1606:	dd 27       	eor	r29, r29
    1608:	88 23       	and	r24, r24
    160a:	2a f0       	brmi	.+10     	; 0x1616 <log+0x26>
    160c:	21 97       	sbiw	r28, 0x01	; 1
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	da f7       	brpl	.-10     	; 0x160c <log+0x1c>
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	5f eb       	ldi	r21, 0xBF	; 191
    161e:	9f e3       	ldi	r25, 0x3F	; 63
    1620:	88 39       	cpi	r24, 0x98	; 152
    1622:	20 f0       	brcs	.+8      	; 0x162c <log+0x3c>
    1624:	80 3e       	cpi	r24, 0xE0	; 224
    1626:	30 f0       	brcs	.+12     	; 0x1634 <log+0x44>
    1628:	21 96       	adiw	r28, 0x01	; 1
    162a:	8f 77       	andi	r24, 0x7F	; 127
    162c:	4f dd       	rcall	.-1378   	; 0x10cc <__addsf3>
    162e:	ec e0       	ldi	r30, 0x0C	; 12
    1630:	f1 e0       	ldi	r31, 0x01	; 1
    1632:	03 c0       	rjmp	.+6      	; 0x163a <log+0x4a>
    1634:	4b dd       	rcall	.-1386   	; 0x10cc <__addsf3>
    1636:	e9 e3       	ldi	r30, 0x39	; 57
    1638:	f1 e0       	ldi	r31, 0x01	; 1
    163a:	73 df       	rcall	.-282    	; 0x1522 <__fp_powser>
    163c:	8b 01       	movw	r16, r22
    163e:	be 01       	movw	r22, r28
    1640:	ec 01       	movw	r28, r24
    1642:	fb 2e       	mov	r15, r27
    1644:	6f 57       	subi	r22, 0x7F	; 127
    1646:	71 09       	sbc	r23, r1
    1648:	75 95       	asr	r23
    164a:	77 1f       	adc	r23, r23
    164c:	88 0b       	sbc	r24, r24
    164e:	99 0b       	sbc	r25, r25
    1650:	d8 dd       	rcall	.-1104   	; 0x1202 <__floatsisf>
    1652:	28 e1       	ldi	r18, 0x18	; 24
    1654:	32 e7       	ldi	r19, 0x72	; 114
    1656:	41 e3       	ldi	r20, 0x31	; 49
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	8f de       	rcall	.-738    	; 0x137a <__mulsf3x>
    165c:	af 2d       	mov	r26, r15
    165e:	98 01       	movw	r18, r16
    1660:	ae 01       	movw	r20, r28
    1662:	ff 90       	pop	r15
    1664:	0f 91       	pop	r16
    1666:	1f 91       	pop	r17
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	40 dd       	rcall	.-1408   	; 0x10ee <__addsf3x>
    166e:	3f ce       	rjmp	.-898    	; 0x12ee <__fp_round>

00001670 <modf>:
    1670:	fa 01       	movw	r30, r20
    1672:	dc 01       	movw	r26, r24
    1674:	aa 0f       	add	r26, r26
    1676:	bb 1f       	adc	r27, r27
    1678:	9b 01       	movw	r18, r22
    167a:	ac 01       	movw	r20, r24
    167c:	bf 57       	subi	r27, 0x7F	; 127
    167e:	28 f4       	brcc	.+10     	; 0x168a <modf+0x1a>
    1680:	22 27       	eor	r18, r18
    1682:	33 27       	eor	r19, r19
    1684:	44 27       	eor	r20, r20
    1686:	50 78       	andi	r21, 0x80	; 128
    1688:	1f c0       	rjmp	.+62     	; 0x16c8 <modf+0x58>
    168a:	b7 51       	subi	r27, 0x17	; 23
    168c:	88 f4       	brcc	.+34     	; 0x16b0 <modf+0x40>
    168e:	ab 2f       	mov	r26, r27
    1690:	00 24       	eor	r0, r0
    1692:	46 95       	lsr	r20
    1694:	37 95       	ror	r19
    1696:	27 95       	ror	r18
    1698:	01 1c       	adc	r0, r1
    169a:	a3 95       	inc	r26
    169c:	d2 f3       	brmi	.-12     	; 0x1692 <modf+0x22>
    169e:	00 20       	and	r0, r0
    16a0:	69 f0       	breq	.+26     	; 0x16bc <modf+0x4c>
    16a2:	22 0f       	add	r18, r18
    16a4:	33 1f       	adc	r19, r19
    16a6:	44 1f       	adc	r20, r20
    16a8:	b3 95       	inc	r27
    16aa:	da f3       	brmi	.-10     	; 0x16a2 <modf+0x32>
    16ac:	0d d0       	rcall	.+26     	; 0x16c8 <modf+0x58>
    16ae:	0d cd       	rjmp	.-1510   	; 0x10ca <__subsf3>
    16b0:	61 30       	cpi	r22, 0x01	; 1
    16b2:	71 05       	cpc	r23, r1
    16b4:	a0 e8       	ldi	r26, 0x80	; 128
    16b6:	8a 07       	cpc	r24, r26
    16b8:	b9 46       	sbci	r27, 0x69	; 105
    16ba:	30 f4       	brcc	.+12     	; 0x16c8 <modf+0x58>
    16bc:	9b 01       	movw	r18, r22
    16be:	ac 01       	movw	r20, r24
    16c0:	66 27       	eor	r22, r22
    16c2:	77 27       	eor	r23, r23
    16c4:	88 27       	eor	r24, r24
    16c6:	90 78       	andi	r25, 0x80	; 128
    16c8:	30 96       	adiw	r30, 0x00	; 0
    16ca:	21 f0       	breq	.+8      	; 0x16d4 <modf+0x64>
    16cc:	20 83       	st	Z, r18
    16ce:	31 83       	std	Z+1, r19	; 0x01
    16d0:	42 83       	std	Z+2, r20	; 0x02
    16d2:	53 83       	std	Z+3, r21	; 0x03
    16d4:	08 95       	ret

000016d6 <__divsf3>:
    16d6:	0c d0       	rcall	.+24     	; 0x16f0 <__divsf3x>
    16d8:	0a ce       	rjmp	.-1004   	; 0x12ee <__fp_round>
    16da:	02 de       	rcall	.-1020   	; 0x12e0 <__fp_pscB>
    16dc:	40 f0       	brcs	.+16     	; 0x16ee <__divsf3+0x18>
    16de:	f9 dd       	rcall	.-1038   	; 0x12d2 <__fp_pscA>
    16e0:	30 f0       	brcs	.+12     	; 0x16ee <__divsf3+0x18>
    16e2:	21 f4       	brne	.+8      	; 0x16ec <__divsf3+0x16>
    16e4:	5f 3f       	cpi	r21, 0xFF	; 255
    16e6:	19 f0       	breq	.+6      	; 0x16ee <__divsf3+0x18>
    16e8:	eb cd       	rjmp	.-1066   	; 0x12c0 <__fp_inf>
    16ea:	51 11       	cpse	r21, r1
    16ec:	34 ce       	rjmp	.-920    	; 0x1356 <__fp_szero>
    16ee:	ee cd       	rjmp	.-1060   	; 0x12cc <__fp_nan>

000016f0 <__divsf3x>:
    16f0:	0f de       	rcall	.-994    	; 0x1310 <__fp_split3>
    16f2:	98 f3       	brcs	.-26     	; 0x16da <__divsf3+0x4>

000016f4 <__divsf3_pse>:
    16f4:	99 23       	and	r25, r25
    16f6:	c9 f3       	breq	.-14     	; 0x16ea <__divsf3+0x14>
    16f8:	55 23       	and	r21, r21
    16fa:	b1 f3       	breq	.-20     	; 0x16e8 <__divsf3+0x12>
    16fc:	95 1b       	sub	r25, r21
    16fe:	55 0b       	sbc	r21, r21
    1700:	bb 27       	eor	r27, r27
    1702:	aa 27       	eor	r26, r26
    1704:	62 17       	cp	r22, r18
    1706:	73 07       	cpc	r23, r19
    1708:	84 07       	cpc	r24, r20
    170a:	38 f0       	brcs	.+14     	; 0x171a <__divsf3_pse+0x26>
    170c:	9f 5f       	subi	r25, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255
    1710:	22 0f       	add	r18, r18
    1712:	33 1f       	adc	r19, r19
    1714:	44 1f       	adc	r20, r20
    1716:	aa 1f       	adc	r26, r26
    1718:	a9 f3       	breq	.-22     	; 0x1704 <__divsf3_pse+0x10>
    171a:	33 d0       	rcall	.+102    	; 0x1782 <__divsf3_pse+0x8e>
    171c:	0e 2e       	mov	r0, r30
    171e:	3a f0       	brmi	.+14     	; 0x172e <__divsf3_pse+0x3a>
    1720:	e0 e8       	ldi	r30, 0x80	; 128
    1722:	30 d0       	rcall	.+96     	; 0x1784 <__divsf3_pse+0x90>
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	e6 95       	lsr	r30
    172a:	00 1c       	adc	r0, r0
    172c:	ca f7       	brpl	.-14     	; 0x1720 <__divsf3_pse+0x2c>
    172e:	29 d0       	rcall	.+82     	; 0x1782 <__divsf3_pse+0x8e>
    1730:	fe 2f       	mov	r31, r30
    1732:	27 d0       	rcall	.+78     	; 0x1782 <__divsf3_pse+0x8e>
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	bb 1f       	adc	r27, r27
    173c:	26 17       	cp	r18, r22
    173e:	37 07       	cpc	r19, r23
    1740:	48 07       	cpc	r20, r24
    1742:	ab 07       	cpc	r26, r27
    1744:	b0 e8       	ldi	r27, 0x80	; 128
    1746:	09 f0       	breq	.+2      	; 0x174a <__divsf3_pse+0x56>
    1748:	bb 0b       	sbc	r27, r27
    174a:	80 2d       	mov	r24, r0
    174c:	bf 01       	movw	r22, r30
    174e:	ff 27       	eor	r31, r31
    1750:	93 58       	subi	r25, 0x83	; 131
    1752:	5f 4f       	sbci	r21, 0xFF	; 255
    1754:	2a f0       	brmi	.+10     	; 0x1760 <__divsf3_pse+0x6c>
    1756:	9e 3f       	cpi	r25, 0xFE	; 254
    1758:	51 05       	cpc	r21, r1
    175a:	68 f0       	brcs	.+26     	; 0x1776 <__divsf3_pse+0x82>
    175c:	b1 cd       	rjmp	.-1182   	; 0x12c0 <__fp_inf>
    175e:	fb cd       	rjmp	.-1034   	; 0x1356 <__fp_szero>
    1760:	5f 3f       	cpi	r21, 0xFF	; 255
    1762:	ec f3       	brlt	.-6      	; 0x175e <__divsf3_pse+0x6a>
    1764:	98 3e       	cpi	r25, 0xE8	; 232
    1766:	dc f3       	brlt	.-10     	; 0x175e <__divsf3_pse+0x6a>
    1768:	86 95       	lsr	r24
    176a:	77 95       	ror	r23
    176c:	67 95       	ror	r22
    176e:	b7 95       	ror	r27
    1770:	f7 95       	ror	r31
    1772:	9f 5f       	subi	r25, 0xFF	; 255
    1774:	c9 f7       	brne	.-14     	; 0x1768 <__divsf3_pse+0x74>
    1776:	88 0f       	add	r24, r24
    1778:	91 1d       	adc	r25, r1
    177a:	96 95       	lsr	r25
    177c:	87 95       	ror	r24
    177e:	97 f9       	bld	r25, 7
    1780:	08 95       	ret
    1782:	e1 e0       	ldi	r30, 0x01	; 1
    1784:	66 0f       	add	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	bb 1f       	adc	r27, r27
    178c:	62 17       	cp	r22, r18
    178e:	73 07       	cpc	r23, r19
    1790:	84 07       	cpc	r24, r20
    1792:	ba 07       	cpc	r27, r26
    1794:	20 f0       	brcs	.+8      	; 0x179e <__divsf3_pse+0xaa>
    1796:	62 1b       	sub	r22, r18
    1798:	73 0b       	sbc	r23, r19
    179a:	84 0b       	sbc	r24, r20
    179c:	ba 0b       	sbc	r27, r26
    179e:	ee 1f       	adc	r30, r30
    17a0:	88 f7       	brcc	.-30     	; 0x1784 <__divsf3_pse+0x90>
    17a2:	e0 95       	com	r30
    17a4:	08 95       	ret

000017a6 <__fp_mpack>:
    17a6:	9f 3f       	cpi	r25, 0xFF	; 255
    17a8:	31 f0       	breq	.+12     	; 0x17b6 <__fp_mpack_finite+0xc>

000017aa <__fp_mpack_finite>:
    17aa:	91 50       	subi	r25, 0x01	; 1
    17ac:	20 f4       	brcc	.+8      	; 0x17b6 <__fp_mpack_finite+0xc>
    17ae:	87 95       	ror	r24
    17b0:	77 95       	ror	r23
    17b2:	67 95       	ror	r22
    17b4:	b7 95       	ror	r27
    17b6:	88 0f       	add	r24, r24
    17b8:	91 1d       	adc	r25, r1
    17ba:	96 95       	lsr	r25
    17bc:	87 95       	ror	r24
    17be:	97 f9       	bld	r25, 7
    17c0:	08 95       	ret

000017c2 <_ZN14HardwareSerial9availableEv>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    10d4:	50 58       	subi	r21, 0x80	; 128

000010d6 <__addsf3>:
    10d6:	bb 27       	eor	r27, r27
    10d8:	aa 27       	eor	r26, r26
    10da:	0e d0       	rcall	.+28     	; 0x10f8 <__addsf3x>
    10dc:	0d c1       	rjmp	.+538    	; 0x12f8 <__fp_round>
    10de:	fe d0       	rcall	.+508    	; 0x12dc <__fp_pscA>
    10e0:	30 f0       	brcs	.+12     	; 0x10ee <__addsf3+0x18>
    10e2:	03 d1       	rcall	.+518    	; 0x12ea <__fp_pscB>
    10e4:	20 f0       	brcs	.+8      	; 0x10ee <__addsf3+0x18>
    10e6:	31 f4       	brne	.+12     	; 0x10f4 <__addsf3+0x1e>
    10e8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <__addsf3+0x1a>
    10ec:	1e f4       	brtc	.+6      	; 0x10f4 <__addsf3+0x1e>
    10ee:	f3 c0       	rjmp	.+486    	; 0x12d6 <__fp_nan>
    10f0:	0e f4       	brtc	.+2      	; 0x10f4 <__addsf3+0x1e>
    10f2:	e0 95       	com	r30
    10f4:	e7 fb       	bst	r30, 7
    10f6:	e9 c0       	rjmp	.+466    	; 0x12ca <__fp_inf>

000010f8 <__addsf3x>:
    10f8:	e9 2f       	mov	r30, r25
    10fa:	0f d1       	rcall	.+542    	; 0x131a <__fp_split3>
    10fc:	80 f3       	brcs	.-32     	; 0x10de <__addsf3+0x8>
    10fe:	ba 17       	cp	r27, r26
    1100:	62 07       	cpc	r22, r18
    1102:	73 07       	cpc	r23, r19
    1104:	84 07       	cpc	r24, r20
    1106:	95 07       	cpc	r25, r21
    1108:	18 f0       	brcs	.+6      	; 0x1110 <__addsf3x+0x18>
    110a:	71 f4       	brne	.+28     	; 0x1128 <__addsf3x+0x30>
    110c:	9e f5       	brtc	.+102    	; 0x1174 <__addsf3x+0x7c>
    110e:	27 c1       	rjmp	.+590    	; 0x135e <__fp_zero>
    1110:	0e f4       	brtc	.+2      	; 0x1114 <__addsf3x+0x1c>
    1112:	e0 95       	com	r30
    1114:	0b 2e       	mov	r0, r27
    1116:	ba 2f       	mov	r27, r26
    1118:	a0 2d       	mov	r26, r0
    111a:	0b 01       	movw	r0, r22
    111c:	b9 01       	movw	r22, r18
    111e:	90 01       	movw	r18, r0
    1120:	0c 01       	movw	r0, r24
    1122:	ca 01       	movw	r24, r20
    1124:	a0 01       	movw	r20, r0
    1126:	11 24       	eor	r1, r1
    1128:	ff 27       	eor	r31, r31
    112a:	59 1b       	sub	r21, r25
    112c:	99 f0       	breq	.+38     	; 0x1154 <__addsf3x+0x5c>
    112e:	59 3f       	cpi	r21, 0xF9	; 249
    1130:	50 f4       	brcc	.+20     	; 0x1146 <__addsf3x+0x4e>
    1132:	50 3e       	cpi	r21, 0xE0	; 224
    1134:	68 f1       	brcs	.+90     	; 0x1190 <__addsf3x+0x98>
    1136:	1a 16       	cp	r1, r26
    1138:	f0 40       	sbci	r31, 0x00	; 0
    113a:	a2 2f       	mov	r26, r18
    113c:	23 2f       	mov	r18, r19
    113e:	34 2f       	mov	r19, r20
    1140:	44 27       	eor	r20, r20
    1142:	58 5f       	subi	r21, 0xF8	; 248
    1144:	f3 cf       	rjmp	.-26     	; 0x112c <__addsf3x+0x34>
    1146:	46 95       	lsr	r20
    1148:	37 95       	ror	r19
    114a:	27 95       	ror	r18
    114c:	a7 95       	ror	r26
    114e:	f0 40       	sbci	r31, 0x00	; 0
    1150:	53 95       	inc	r21
    1152:	c9 f7       	brne	.-14     	; 0x1146 <__addsf3x+0x4e>
    1154:	7e f4       	brtc	.+30     	; 0x1174 <__addsf3x+0x7c>
    1156:	1f 16       	cp	r1, r31
    1158:	ba 0b       	sbc	r27, r26
    115a:	62 0b       	sbc	r22, r18
    115c:	73 0b       	sbc	r23, r19
    115e:	84 0b       	sbc	r24, r20
    1160:	ba f0       	brmi	.+46     	; 0x1190 <__addsf3x+0x98>
    1162:	91 50       	subi	r25, 0x01	; 1
    1164:	a1 f0       	breq	.+40     	; 0x118e <__addsf3x+0x96>
    1166:	ff 0f       	add	r31, r31
    1168:	bb 1f       	adc	r27, r27
    116a:	66 1f       	adc	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	88 1f       	adc	r24, r24
    1170:	c2 f7       	brpl	.-16     	; 0x1162 <__addsf3x+0x6a>
    1172:	0e c0       	rjmp	.+28     	; 0x1190 <__addsf3x+0x98>
    1174:	ba 0f       	add	r27, r26
    1176:	62 1f       	adc	r22, r18
    1178:	73 1f       	adc	r23, r19
    117a:	84 1f       	adc	r24, r20
    117c:	48 f4       	brcc	.+18     	; 0x1190 <__addsf3x+0x98>
    117e:	87 95       	ror	r24
    1180:	77 95       	ror	r23
    1182:	67 95       	ror	r22
    1184:	b7 95       	ror	r27
    1186:	f7 95       	ror	r31
    1188:	9e 3f       	cpi	r25, 0xFE	; 254
    118a:	08 f0       	brcs	.+2      	; 0x118e <__addsf3x+0x96>
    118c:	b3 cf       	rjmp	.-154    	; 0x10f4 <__addsf3+0x1e>
    118e:	93 95       	inc	r25
    1190:	88 0f       	add	r24, r24
    1192:	08 f0       	brcs	.+2      	; 0x1196 <__addsf3x+0x9e>
    1194:	99 27       	eor	r25, r25
    1196:	ee 0f       	add	r30, r30
    1198:	97 95       	ror	r25
    119a:	87 95       	ror	r24
    119c:	08 95       	ret

0000119e <__cmpsf2>:
    119e:	71 d0       	rcall	.+226    	; 0x1282 <__fp_cmp>
    11a0:	08 f4       	brcc	.+2      	; 0x11a4 <__cmpsf2+0x6>
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	08 95       	ret

000011a6 <__fixsfsi>:
    11a6:	04 d0       	rcall	.+8      	; 0x11b0 <__fixunssfsi>
    11a8:	68 94       	set
    11aa:	b1 11       	cpse	r27, r1
    11ac:	d9 c0       	rjmp	.+434    	; 0x1360 <__fp_szero>
    11ae:	08 95       	ret

000011b0 <__fixunssfsi>:
    11b0:	bc d0       	rcall	.+376    	; 0x132a <__fp_splitA>
    11b2:	88 f0       	brcs	.+34     	; 0x11d6 <__fixunssfsi+0x26>
    11b4:	9f 57       	subi	r25, 0x7F	; 127
    11b6:	90 f0       	brcs	.+36     	; 0x11dc <__fixunssfsi+0x2c>
    11b8:	b9 2f       	mov	r27, r25
    11ba:	99 27       	eor	r25, r25
    11bc:	b7 51       	subi	r27, 0x17	; 23
    11be:	a0 f0       	brcs	.+40     	; 0x11e8 <__fixunssfsi+0x38>
    11c0:	d1 f0       	breq	.+52     	; 0x11f6 <__fixunssfsi+0x46>
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	88 1f       	adc	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	1a f0       	brmi	.+6      	; 0x11d2 <__fixunssfsi+0x22>
    11cc:	ba 95       	dec	r27
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <__fixunssfsi+0x12>
    11d0:	12 c0       	rjmp	.+36     	; 0x11f6 <__fixunssfsi+0x46>
    11d2:	b1 30       	cpi	r27, 0x01	; 1
    11d4:	81 f0       	breq	.+32     	; 0x11f6 <__fixunssfsi+0x46>
    11d6:	c3 d0       	rcall	.+390    	; 0x135e <__fp_zero>
    11d8:	b1 e0       	ldi	r27, 0x01	; 1
    11da:	08 95       	ret
    11dc:	c0 c0       	rjmp	.+384    	; 0x135e <__fp_zero>
    11de:	67 2f       	mov	r22, r23
    11e0:	78 2f       	mov	r23, r24
    11e2:	88 27       	eor	r24, r24
    11e4:	b8 5f       	subi	r27, 0xF8	; 248
    11e6:	39 f0       	breq	.+14     	; 0x11f6 <__fixunssfsi+0x46>
    11e8:	b9 3f       	cpi	r27, 0xF9	; 249
    11ea:	cc f3       	brlt	.-14     	; 0x11de <__fixunssfsi+0x2e>
    11ec:	86 95       	lsr	r24
    11ee:	77 95       	ror	r23
    11f0:	67 95       	ror	r22
    11f2:	b3 95       	inc	r27
    11f4:	d9 f7       	brne	.-10     	; 0x11ec <__fixunssfsi+0x3c>
    11f6:	3e f4       	brtc	.+14     	; 0x1206 <__fixunssfsi+0x56>
    11f8:	90 95       	com	r25
    11fa:	80 95       	com	r24
    11fc:	70 95       	com	r23
    11fe:	61 95       	neg	r22
    1200:	7f 4f       	sbci	r23, 0xFF	; 255
    1202:	8f 4f       	sbci	r24, 0xFF	; 255
    1204:	9f 4f       	sbci	r25, 0xFF	; 255
    1206:	08 95       	ret

00001208 <__floatunsisf>:
    1208:	e8 94       	clt
    120a:	09 c0       	rjmp	.+18     	; 0x121e <__floatsisf+0x12>

0000120c <__floatsisf>:
    120c:	97 fb       	bst	r25, 7
    120e:	3e f4       	brtc	.+14     	; 0x121e <__floatsisf+0x12>
    1210:	90 95       	com	r25
    1212:	80 95       	com	r24
    1214:	70 95       	com	r23
    1216:	61 95       	neg	r22
    1218:	7f 4f       	sbci	r23, 0xFF	; 255
    121a:	8f 4f       	sbci	r24, 0xFF	; 255
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	99 23       	and	r25, r25
    1220:	a9 f0       	breq	.+42     	; 0x124c <__floatsisf+0x40>
    1222:	f9 2f       	mov	r31, r25
    1224:	96 e9       	ldi	r25, 0x96	; 150
    1226:	bb 27       	eor	r27, r27
    1228:	93 95       	inc	r25
    122a:	f6 95       	lsr	r31
    122c:	87 95       	ror	r24
    122e:	77 95       	ror	r23
    1230:	67 95       	ror	r22
    1232:	b7 95       	ror	r27
    1234:	f1 11       	cpse	r31, r1
    1236:	f8 cf       	rjmp	.-16     	; 0x1228 <__floatsisf+0x1c>
    1238:	fa f4       	brpl	.+62     	; 0x1278 <__floatsisf+0x6c>
    123a:	bb 0f       	add	r27, r27
    123c:	11 f4       	brne	.+4      	; 0x1242 <__floatsisf+0x36>
    123e:	60 ff       	sbrs	r22, 0
    1240:	1b c0       	rjmp	.+54     	; 0x1278 <__floatsisf+0x6c>
    1242:	6f 5f       	subi	r22, 0xFF	; 255
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	8f 4f       	sbci	r24, 0xFF	; 255
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	16 c0       	rjmp	.+44     	; 0x1278 <__floatsisf+0x6c>
    124c:	88 23       	and	r24, r24
    124e:	11 f0       	breq	.+4      	; 0x1254 <__floatsisf+0x48>
    1250:	96 e9       	ldi	r25, 0x96	; 150
    1252:	11 c0       	rjmp	.+34     	; 0x1276 <__floatsisf+0x6a>
    1254:	77 23       	and	r23, r23
    1256:	21 f0       	breq	.+8      	; 0x1260 <__floatsisf+0x54>
    1258:	9e e8       	ldi	r25, 0x8E	; 142
    125a:	87 2f       	mov	r24, r23
    125c:	76 2f       	mov	r23, r22
    125e:	05 c0       	rjmp	.+10     	; 0x126a <__floatsisf+0x5e>
    1260:	66 23       	and	r22, r22
    1262:	71 f0       	breq	.+28     	; 0x1280 <__floatsisf+0x74>
    1264:	96 e8       	ldi	r25, 0x86	; 134
    1266:	86 2f       	mov	r24, r22
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	2a f0       	brmi	.+10     	; 0x1278 <__floatsisf+0x6c>
    126e:	9a 95       	dec	r25
    1270:	66 0f       	add	r22, r22
    1272:	77 1f       	adc	r23, r23
    1274:	88 1f       	adc	r24, r24
    1276:	da f7       	brpl	.-10     	; 0x126e <__floatsisf+0x62>
    1278:	88 0f       	add	r24, r24
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	97 f9       	bld	r25, 7
    1280:	08 95       	ret

00001282 <__fp_cmp>:
    1282:	99 0f       	add	r25, r25
    1284:	00 08       	sbc	r0, r0
    1286:	55 0f       	add	r21, r21
    1288:	aa 0b       	sbc	r26, r26
    128a:	e0 e8       	ldi	r30, 0x80	; 128
    128c:	fe ef       	ldi	r31, 0xFE	; 254
    128e:	16 16       	cp	r1, r22
    1290:	17 06       	cpc	r1, r23
    1292:	e8 07       	cpc	r30, r24
    1294:	f9 07       	cpc	r31, r25
    1296:	c0 f0       	brcs	.+48     	; 0x12c8 <__fp_cmp+0x46>
    1298:	12 16       	cp	r1, r18
    129a:	13 06       	cpc	r1, r19
    129c:	e4 07       	cpc	r30, r20
    129e:	f5 07       	cpc	r31, r21
    12a0:	98 f0       	brcs	.+38     	; 0x12c8 <__fp_cmp+0x46>
    12a2:	62 1b       	sub	r22, r18
    12a4:	73 0b       	sbc	r23, r19
    12a6:	84 0b       	sbc	r24, r20
    12a8:	95 0b       	sbc	r25, r21
    12aa:	39 f4       	brne	.+14     	; 0x12ba <__fp_cmp+0x38>
    12ac:	0a 26       	eor	r0, r26
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <__fp_cmp+0x46>
    12b0:	23 2b       	or	r18, r19
    12b2:	24 2b       	or	r18, r20
    12b4:	25 2b       	or	r18, r21
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <__fp_cmp+0x3e>
    12b8:	08 95       	ret
    12ba:	0a 26       	eor	r0, r26
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <__fp_cmp+0x3e>
    12be:	a1 40       	sbci	r26, 0x01	; 1
    12c0:	a6 95       	lsr	r26
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	81 1d       	adc	r24, r1
    12c6:	81 1d       	adc	r24, r1
    12c8:	08 95       	ret

000012ca <__fp_inf>:
    12ca:	97 f9       	bld	r25, 7
    12cc:	9f 67       	ori	r25, 0x7F	; 127
    12ce:	80 e8       	ldi	r24, 0x80	; 128
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	08 95       	ret

000012d6 <__fp_nan>:
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	80 ec       	ldi	r24, 0xC0	; 192
    12da:	08 95       	ret

000012dc <__fp_pscA>:
    12dc:	00 24       	eor	r0, r0
    12de:	0a 94       	dec	r0
    12e0:	16 16       	cp	r1, r22
    12e2:	17 06       	cpc	r1, r23
    12e4:	18 06       	cpc	r1, r24
    12e6:	09 06       	cpc	r0, r25
    12e8:	08 95       	ret

000012ea <__fp_pscB>:
    12ea:	00 24       	eor	r0, r0
    12ec:	0a 94       	dec	r0
    12ee:	12 16       	cp	r1, r18
    12f0:	13 06       	cpc	r1, r19
    12f2:	14 06       	cpc	r1, r20
    12f4:	05 06       	cpc	r0, r21
    12f6:	08 95       	ret

000012f8 <__fp_round>:
    12f8:	09 2e       	mov	r0, r25
    12fa:	03 94       	inc	r0
    12fc:	00 0c       	add	r0, r0
    12fe:	11 f4       	brne	.+4      	; 0x1304 <__fp_round+0xc>
    1300:	88 23       	and	r24, r24
    1302:	52 f0       	brmi	.+20     	; 0x1318 <__fp_round+0x20>
    1304:	bb 0f       	add	r27, r27
    1306:	40 f4       	brcc	.+16     	; 0x1318 <__fp_round+0x20>
    1308:	bf 2b       	or	r27, r31
    130a:	11 f4       	brne	.+4      	; 0x1310 <__fp_round+0x18>
    130c:	60 ff       	sbrs	r22, 0
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__fp_round+0x20>
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	08 95       	ret

0000131a <__fp_split3>:
    131a:	57 fd       	sbrc	r21, 7
    131c:	90 58       	subi	r25, 0x80	; 128
    131e:	44 0f       	add	r20, r20
    1320:	55 1f       	adc	r21, r21
    1322:	59 f0       	breq	.+22     	; 0x133a <__fp_splitA+0x10>
    1324:	5f 3f       	cpi	r21, 0xFF	; 255
    1326:	71 f0       	breq	.+28     	; 0x1344 <__fp_splitA+0x1a>
    1328:	47 95       	ror	r20

0000132a <__fp_splitA>:
    132a:	88 0f       	add	r24, r24
    132c:	97 fb       	bst	r25, 7
    132e:	99 1f       	adc	r25, r25
    1330:	61 f0       	breq	.+24     	; 0x134a <__fp_splitA+0x20>
    1332:	9f 3f       	cpi	r25, 0xFF	; 255
    1334:	79 f0       	breq	.+30     	; 0x1354 <__fp_splitA+0x2a>
    1336:	87 95       	ror	r24
    1338:	08 95       	ret
    133a:	12 16       	cp	r1, r18
    133c:	13 06       	cpc	r1, r19
    133e:	14 06       	cpc	r1, r20
    1340:	55 1f       	adc	r21, r21
    1342:	f2 cf       	rjmp	.-28     	; 0x1328 <__fp_split3+0xe>
    1344:	46 95       	lsr	r20
    1346:	f1 df       	rcall	.-30     	; 0x132a <__fp_splitA>
    1348:	08 c0       	rjmp	.+16     	; 0x135a <__fp_splitA+0x30>
    134a:	16 16       	cp	r1, r22
    134c:	17 06       	cpc	r1, r23
    134e:	18 06       	cpc	r1, r24
    1350:	99 1f       	adc	r25, r25
    1352:	f1 cf       	rjmp	.-30     	; 0x1336 <__fp_splitA+0xc>
    1354:	86 95       	lsr	r24
    1356:	71 05       	cpc	r23, r1
    1358:	61 05       	cpc	r22, r1
    135a:	08 94       	sec
    135c:	08 95       	ret

0000135e <__fp_zero>:
    135e:	e8 94       	clt

00001360 <__fp_szero>:
    1360:	bb 27       	eor	r27, r27
    1362:	66 27       	eor	r22, r22
    1364:	77 27       	eor	r23, r23
    1366:	cb 01       	movw	r24, r22
    1368:	97 f9       	bld	r25, 7
    136a:	08 95       	ret

0000136c <__mulsf3>:
    136c:	0b d0       	rcall	.+22     	; 0x1384 <__mulsf3x>
    136e:	c4 cf       	rjmp	.-120    	; 0x12f8 <__fp_round>
    1370:	b5 df       	rcall	.-150    	; 0x12dc <__fp_pscA>
    1372:	28 f0       	brcs	.+10     	; 0x137e <__mulsf3+0x12>
    1374:	ba df       	rcall	.-140    	; 0x12ea <__fp_pscB>
    1376:	18 f0       	brcs	.+6      	; 0x137e <__mulsf3+0x12>
    1378:	95 23       	and	r25, r21
    137a:	09 f0       	breq	.+2      	; 0x137e <__mulsf3+0x12>
    137c:	a6 cf       	rjmp	.-180    	; 0x12ca <__fp_inf>
    137e:	ab cf       	rjmp	.-170    	; 0x12d6 <__fp_nan>
    1380:	11 24       	eor	r1, r1
    1382:	ee cf       	rjmp	.-36     	; 0x1360 <__fp_szero>

00001384 <__mulsf3x>:
    1384:	ca df       	rcall	.-108    	; 0x131a <__fp_split3>
    1386:	a0 f3       	brcs	.-24     	; 0x1370 <__mulsf3+0x4>

00001388 <__mulsf3_pse>:
    1388:	95 9f       	mul	r25, r21
    138a:	d1 f3       	breq	.-12     	; 0x1380 <__mulsf3+0x14>
    138c:	95 0f       	add	r25, r21
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	55 1f       	adc	r21, r21
    1392:	62 9f       	mul	r22, r18
    1394:	f0 01       	movw	r30, r0
    1396:	72 9f       	mul	r23, r18
    1398:	bb 27       	eor	r27, r27
    139a:	f0 0d       	add	r31, r0
    139c:	b1 1d       	adc	r27, r1
    139e:	63 9f       	mul	r22, r19
    13a0:	aa 27       	eor	r26, r26
    13a2:	f0 0d       	add	r31, r0
    13a4:	b1 1d       	adc	r27, r1
    13a6:	aa 1f       	adc	r26, r26
    13a8:	64 9f       	mul	r22, r20
    13aa:	66 27       	eor	r22, r22
    13ac:	b0 0d       	add	r27, r0
    13ae:	a1 1d       	adc	r26, r1
    13b0:	66 1f       	adc	r22, r22
    13b2:	82 9f       	mul	r24, r18
    13b4:	22 27       	eor	r18, r18
    13b6:	b0 0d       	add	r27, r0
    13b8:	a1 1d       	adc	r26, r1
    13ba:	62 1f       	adc	r22, r18
    13bc:	73 9f       	mul	r23, r19
    13be:	b0 0d       	add	r27, r0
    13c0:	a1 1d       	adc	r26, r1
    13c2:	62 1f       	adc	r22, r18
    13c4:	83 9f       	mul	r24, r19
    13c6:	a0 0d       	add	r26, r0
    13c8:	61 1d       	adc	r22, r1
    13ca:	22 1f       	adc	r18, r18
    13cc:	74 9f       	mul	r23, r20
    13ce:	33 27       	eor	r19, r19
    13d0:	a0 0d       	add	r26, r0
    13d2:	61 1d       	adc	r22, r1
    13d4:	23 1f       	adc	r18, r19
    13d6:	84 9f       	mul	r24, r20
    13d8:	60 0d       	add	r22, r0
    13da:	21 1d       	adc	r18, r1
    13dc:	82 2f       	mov	r24, r18
    13de:	76 2f       	mov	r23, r22
    13e0:	6a 2f       	mov	r22, r26
    13e2:	11 24       	eor	r1, r1
    13e4:	9f 57       	subi	r25, 0x7F	; 127
    13e6:	50 40       	sbci	r21, 0x00	; 0
    13e8:	8a f0       	brmi	.+34     	; 0x140c <__mulsf3_pse+0x84>
    13ea:	e1 f0       	breq	.+56     	; 0x1424 <__mulsf3_pse+0x9c>
    13ec:	88 23       	and	r24, r24
    13ee:	4a f0       	brmi	.+18     	; 0x1402 <__mulsf3_pse+0x7a>
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	bb 1f       	adc	r27, r27
    13f6:	66 1f       	adc	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	88 1f       	adc	r24, r24
    13fc:	91 50       	subi	r25, 0x01	; 1
    13fe:	50 40       	sbci	r21, 0x00	; 0
    1400:	a9 f7       	brne	.-22     	; 0x13ec <__mulsf3_pse+0x64>
    1402:	9e 3f       	cpi	r25, 0xFE	; 254
    1404:	51 05       	cpc	r21, r1
    1406:	70 f0       	brcs	.+28     	; 0x1424 <__mulsf3_pse+0x9c>
    1408:	60 cf       	rjmp	.-320    	; 0x12ca <__fp_inf>
    140a:	aa cf       	rjmp	.-172    	; 0x1360 <__fp_szero>
    140c:	5f 3f       	cpi	r21, 0xFF	; 255
    140e:	ec f3       	brlt	.-6      	; 0x140a <__mulsf3_pse+0x82>
    1410:	98 3e       	cpi	r25, 0xE8	; 232
    1412:	dc f3       	brlt	.-10     	; 0x140a <__mulsf3_pse+0x82>
    1414:	86 95       	lsr	r24
    1416:	77 95       	ror	r23
    1418:	67 95       	ror	r22
    141a:	b7 95       	ror	r27
    141c:	f7 95       	ror	r31
    141e:	e7 95       	ror	r30
    1420:	9f 5f       	subi	r25, 0xFF	; 255
    1422:	c1 f7       	brne	.-16     	; 0x1414 <__mulsf3_pse+0x8c>
    1424:	fe 2b       	or	r31, r30
    1426:	88 0f       	add	r24, r24
    1428:	91 1d       	adc	r25, r1
    142a:	96 95       	lsr	r25
    142c:	87 95       	ror	r24
    142e:	97 f9       	bld	r25, 7
    1430:	08 95       	ret

00001432 <pow>:
    1432:	fa 01       	movw	r30, r20
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	30 96       	adiw	r30, 0x00	; 0
    143a:	21 05       	cpc	r18, r1
    143c:	31 05       	cpc	r19, r1
    143e:	99 f1       	breq	.+102    	; 0x14a6 <pow+0x74>
    1440:	61 15       	cp	r22, r1
    1442:	71 05       	cpc	r23, r1
    1444:	61 f4       	brne	.+24     	; 0x145e <pow+0x2c>
    1446:	80 38       	cpi	r24, 0x80	; 128
    1448:	bf e3       	ldi	r27, 0x3F	; 63
    144a:	9b 07       	cpc	r25, r27
    144c:	49 f1       	breq	.+82     	; 0x14a0 <pow+0x6e>
    144e:	68 94       	set
    1450:	90 38       	cpi	r25, 0x80	; 128
    1452:	81 05       	cpc	r24, r1
    1454:	61 f0       	breq	.+24     	; 0x146e <pow+0x3c>
    1456:	80 38       	cpi	r24, 0x80	; 128
    1458:	bf ef       	ldi	r27, 0xFF	; 255
    145a:	9b 07       	cpc	r25, r27
    145c:	41 f0       	breq	.+16     	; 0x146e <pow+0x3c>
    145e:	99 23       	and	r25, r25
    1460:	42 f5       	brpl	.+80     	; 0x14b2 <pow+0x80>
    1462:	ff 3f       	cpi	r31, 0xFF	; 255
    1464:	e1 05       	cpc	r30, r1
    1466:	31 05       	cpc	r19, r1
    1468:	21 05       	cpc	r18, r1
    146a:	11 f1       	breq	.+68     	; 0x14b0 <pow+0x7e>
    146c:	e8 94       	clt
    146e:	08 94       	sec
    1470:	e7 95       	ror	r30
    1472:	d9 01       	movw	r26, r18
    1474:	aa 23       	and	r26, r26
    1476:	29 f4       	brne	.+10     	; 0x1482 <pow+0x50>
    1478:	ab 2f       	mov	r26, r27
    147a:	be 2f       	mov	r27, r30
    147c:	f8 5f       	subi	r31, 0xF8	; 248
    147e:	d0 f3       	brcs	.-12     	; 0x1474 <pow+0x42>
    1480:	10 c0       	rjmp	.+32     	; 0x14a2 <pow+0x70>
    1482:	ff 5f       	subi	r31, 0xFF	; 255
    1484:	70 f4       	brcc	.+28     	; 0x14a2 <pow+0x70>
    1486:	a6 95       	lsr	r26
    1488:	e0 f7       	brcc	.-8      	; 0x1482 <pow+0x50>
    148a:	f7 39       	cpi	r31, 0x97	; 151
    148c:	50 f0       	brcs	.+20     	; 0x14a2 <pow+0x70>
    148e:	19 f0       	breq	.+6      	; 0x1496 <pow+0x64>
    1490:	ff 3a       	cpi	r31, 0xAF	; 175
    1492:	38 f4       	brcc	.+14     	; 0x14a2 <pow+0x70>
    1494:	9f 77       	andi	r25, 0x7F	; 127
    1496:	9f 93       	push	r25
    1498:	0c d0       	rcall	.+24     	; 0x14b2 <pow+0x80>
    149a:	0f 90       	pop	r0
    149c:	07 fc       	sbrc	r0, 7
    149e:	90 58       	subi	r25, 0x80	; 128
    14a0:	08 95       	ret
    14a2:	3e f0       	brts	.+14     	; 0x14b2 <pow+0x80>
    14a4:	18 cf       	rjmp	.-464    	; 0x12d6 <__fp_nan>
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	80 e8       	ldi	r24, 0x80	; 128
    14ac:	9f e3       	ldi	r25, 0x3F	; 63
    14ae:	08 95       	ret
    14b0:	4f e7       	ldi	r20, 0x7F	; 127
    14b2:	9f 77       	andi	r25, 0x7F	; 127
    14b4:	5f 93       	push	r21
    14b6:	4f 93       	push	r20
    14b8:	3f 93       	push	r19
    14ba:	2f 93       	push	r18
    14bc:	9e d0       	rcall	.+316    	; 0x15fa <log>
    14be:	2f 91       	pop	r18
    14c0:	3f 91       	pop	r19
    14c2:	4f 91       	pop	r20
    14c4:	5f 91       	pop	r21
    14c6:	52 df       	rcall	.-348    	; 0x136c <__mulsf3>
    14c8:	05 c0       	rjmp	.+10     	; 0x14d4 <exp>
    14ca:	19 f4       	brne	.+6      	; 0x14d2 <pow+0xa0>
    14cc:	0e f0       	brts	.+2      	; 0x14d0 <pow+0x9e>
    14ce:	fd ce       	rjmp	.-518    	; 0x12ca <__fp_inf>
    14d0:	46 cf       	rjmp	.-372    	; 0x135e <__fp_zero>
    14d2:	01 cf       	rjmp	.-510    	; 0x12d6 <__fp_nan>

000014d4 <exp>:
    14d4:	2a df       	rcall	.-428    	; 0x132a <__fp_splitA>
    14d6:	c8 f3       	brcs	.-14     	; 0x14ca <pow+0x98>
    14d8:	96 38       	cpi	r25, 0x86	; 134
    14da:	c0 f7       	brcc	.-16     	; 0x14cc <pow+0x9a>
    14dc:	07 f8       	bld	r0, 7
    14de:	0f 92       	push	r0
    14e0:	e8 94       	clt
    14e2:	2b e3       	ldi	r18, 0x3B	; 59
    14e4:	3a ea       	ldi	r19, 0xAA	; 170
    14e6:	48 eb       	ldi	r20, 0xB8	; 184
    14e8:	5f e7       	ldi	r21, 0x7F	; 127
    14ea:	4e df       	rcall	.-356    	; 0x1388 <__mulsf3_pse>
    14ec:	0f 92       	push	r0
    14ee:	0f 92       	push	r0
    14f0:	0f 92       	push	r0
    14f2:	4d b7       	in	r20, 0x3d	; 61
    14f4:	5e b7       	in	r21, 0x3e	; 62
    14f6:	0f 92       	push	r0
    14f8:	c0 d0       	rcall	.+384    	; 0x167a <modf>
    14fa:	e4 ee       	ldi	r30, 0xE4	; 228
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	16 d0       	rcall	.+44     	; 0x152c <__fp_powser>
    1500:	4f 91       	pop	r20
    1502:	5f 91       	pop	r21
    1504:	ef 91       	pop	r30
    1506:	ff 91       	pop	r31
    1508:	e5 95       	asr	r30
    150a:	ee 1f       	adc	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	49 f0       	breq	.+18     	; 0x1522 <exp+0x4e>
    1510:	fe 57       	subi	r31, 0x7E	; 126
    1512:	e0 68       	ori	r30, 0x80	; 128
    1514:	44 27       	eor	r20, r20
    1516:	ee 0f       	add	r30, r30
    1518:	44 1f       	adc	r20, r20
    151a:	fa 95       	dec	r31
    151c:	e1 f7       	brne	.-8      	; 0x1516 <exp+0x42>
    151e:	41 95       	neg	r20
    1520:	55 0b       	sbc	r21, r21
    1522:	32 d0       	rcall	.+100    	; 0x1588 <ldexp>
    1524:	0f 90       	pop	r0
    1526:	07 fe       	sbrs	r0, 7
    1528:	26 c0       	rjmp	.+76     	; 0x1576 <inverse>
    152a:	08 95       	ret

0000152c <__fp_powser>:
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	1f 93       	push	r17
    1532:	0f 93       	push	r16
    1534:	ff 92       	push	r15
    1536:	ef 92       	push	r14
    1538:	df 92       	push	r13
    153a:	7b 01       	movw	r14, r22
    153c:	8c 01       	movw	r16, r24
    153e:	68 94       	set
    1540:	05 c0       	rjmp	.+10     	; 0x154c <__fp_powser+0x20>
    1542:	da 2e       	mov	r13, r26
    1544:	ef 01       	movw	r28, r30
    1546:	1e df       	rcall	.-452    	; 0x1384 <__mulsf3x>
    1548:	fe 01       	movw	r30, r28
    154a:	e8 94       	clt
    154c:	a5 91       	lpm	r26, Z+
    154e:	25 91       	lpm	r18, Z+
    1550:	35 91       	lpm	r19, Z+
    1552:	45 91       	lpm	r20, Z+
    1554:	55 91       	lpm	r21, Z+
    1556:	ae f3       	brts	.-22     	; 0x1542 <__fp_powser+0x16>
    1558:	ef 01       	movw	r28, r30
    155a:	ce dd       	rcall	.-1124   	; 0x10f8 <__addsf3x>
    155c:	fe 01       	movw	r30, r28
    155e:	97 01       	movw	r18, r14
    1560:	a8 01       	movw	r20, r16
    1562:	da 94       	dec	r13
    1564:	79 f7       	brne	.-34     	; 0x1544 <__fp_powser+0x18>
    1566:	df 90       	pop	r13
    1568:	ef 90       	pop	r14
    156a:	ff 90       	pop	r15
    156c:	0f 91       	pop	r16
    156e:	1f 91       	pop	r17
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <inverse>:
    1576:	9b 01       	movw	r18, r22
    1578:	ac 01       	movw	r20, r24
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	80 e8       	ldi	r24, 0x80	; 128
    1580:	9f e3       	ldi	r25, 0x3F	; 63
    1582:	ae c0       	rjmp	.+348    	; 0x16e0 <__divsf3>
    1584:	a2 ce       	rjmp	.-700    	; 0x12ca <__fp_inf>
    1586:	14 c1       	rjmp	.+552    	; 0x17b0 <__fp_mpack>

00001588 <ldexp>:
    1588:	d0 de       	rcall	.-608    	; 0x132a <__fp_splitA>
    158a:	e8 f3       	brcs	.-6      	; 0x1586 <inverse+0x10>
    158c:	99 23       	and	r25, r25
    158e:	d9 f3       	breq	.-10     	; 0x1586 <inverse+0x10>
    1590:	94 0f       	add	r25, r20
    1592:	51 1d       	adc	r21, r1
    1594:	bb f3       	brvs	.-18     	; 0x1584 <inverse+0xe>
    1596:	91 50       	subi	r25, 0x01	; 1
    1598:	50 40       	sbci	r21, 0x00	; 0
    159a:	94 f0       	brlt	.+36     	; 0x15c0 <ldexp+0x38>
    159c:	59 f0       	breq	.+22     	; 0x15b4 <ldexp+0x2c>
    159e:	88 23       	and	r24, r24
    15a0:	32 f0       	brmi	.+12     	; 0x15ae <ldexp+0x26>
    15a2:	66 0f       	add	r22, r22
    15a4:	77 1f       	adc	r23, r23
    15a6:	88 1f       	adc	r24, r24
    15a8:	91 50       	subi	r25, 0x01	; 1
    15aa:	50 40       	sbci	r21, 0x00	; 0
    15ac:	c1 f7       	brne	.-16     	; 0x159e <ldexp+0x16>
    15ae:	9e 3f       	cpi	r25, 0xFE	; 254
    15b0:	51 05       	cpc	r21, r1
    15b2:	44 f7       	brge	.-48     	; 0x1584 <inverse+0xe>
    15b4:	88 0f       	add	r24, r24
    15b6:	91 1d       	adc	r25, r1
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret
    15c0:	5f 3f       	cpi	r21, 0xFF	; 255
    15c2:	ac f0       	brlt	.+42     	; 0x15ee <ldexp+0x66>
    15c4:	98 3e       	cpi	r25, 0xE8	; 232
    15c6:	9c f0       	brlt	.+38     	; 0x15ee <ldexp+0x66>
    15c8:	bb 27       	eor	r27, r27
    15ca:	86 95       	lsr	r24
    15cc:	77 95       	ror	r23
    15ce:	67 95       	ror	r22
    15d0:	b7 95       	ror	r27
    15d2:	08 f4       	brcc	.+2      	; 0x15d6 <ldexp+0x4e>
    15d4:	b1 60       	ori	r27, 0x01	; 1
    15d6:	93 95       	inc	r25
    15d8:	c1 f7       	brne	.-16     	; 0x15ca <ldexp+0x42>
    15da:	bb 0f       	add	r27, r27
    15dc:	58 f7       	brcc	.-42     	; 0x15b4 <ldexp+0x2c>
    15de:	11 f4       	brne	.+4      	; 0x15e4 <ldexp+0x5c>
    15e0:	60 ff       	sbrs	r22, 0
    15e2:	e8 cf       	rjmp	.-48     	; 0x15b4 <ldexp+0x2c>
    15e4:	6f 5f       	subi	r22, 0xFF	; 255
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	e3 cf       	rjmp	.-58     	; 0x15b4 <ldexp+0x2c>
    15ee:	b8 ce       	rjmp	.-656    	; 0x1360 <__fp_szero>
    15f0:	0e f0       	brts	.+2      	; 0x15f4 <ldexp+0x6c>
    15f2:	de c0       	rjmp	.+444    	; 0x17b0 <__fp_mpack>
    15f4:	70 ce       	rjmp	.-800    	; 0x12d6 <__fp_nan>
    15f6:	68 94       	set
    15f8:	68 ce       	rjmp	.-816    	; 0x12ca <__fp_inf>

000015fa <log>:
    15fa:	97 de       	rcall	.-722    	; 0x132a <__fp_splitA>
    15fc:	c8 f3       	brcs	.-14     	; 0x15f0 <ldexp+0x68>
    15fe:	99 23       	and	r25, r25
    1600:	d1 f3       	breq	.-12     	; 0x15f6 <ldexp+0x6e>
    1602:	c6 f3       	brts	.-16     	; 0x15f4 <ldexp+0x6c>
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	1f 93       	push	r17
    160a:	0f 93       	push	r16
    160c:	ff 92       	push	r15
    160e:	c9 2f       	mov	r28, r25
    1610:	dd 27       	eor	r29, r29
    1612:	88 23       	and	r24, r24
    1614:	2a f0       	brmi	.+10     	; 0x1620 <log+0x26>
    1616:	21 97       	sbiw	r28, 0x01	; 1
    1618:	66 0f       	add	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	da f7       	brpl	.-10     	; 0x1616 <log+0x1c>
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f eb       	ldi	r21, 0xBF	; 191
    1628:	9f e3       	ldi	r25, 0x3F	; 63
    162a:	88 39       	cpi	r24, 0x98	; 152
    162c:	20 f0       	brcs	.+8      	; 0x1636 <log+0x3c>
    162e:	80 3e       	cpi	r24, 0xE0	; 224
    1630:	30 f0       	brcs	.+12     	; 0x163e <log+0x44>
    1632:	21 96       	adiw	r28, 0x01	; 1
    1634:	8f 77       	andi	r24, 0x7F	; 127
    1636:	4f dd       	rcall	.-1378   	; 0x10d6 <__addsf3>
    1638:	ec e0       	ldi	r30, 0x0C	; 12
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <log+0x4a>
    163e:	4b dd       	rcall	.-1386   	; 0x10d6 <__addsf3>
    1640:	e9 e3       	ldi	r30, 0x39	; 57
    1642:	f1 e0       	ldi	r31, 0x01	; 1
    1644:	73 df       	rcall	.-282    	; 0x152c <__fp_powser>
    1646:	8b 01       	movw	r16, r22
    1648:	be 01       	movw	r22, r28
    164a:	ec 01       	movw	r28, r24
    164c:	fb 2e       	mov	r15, r27
    164e:	6f 57       	subi	r22, 0x7F	; 127
    1650:	71 09       	sbc	r23, r1
    1652:	75 95       	asr	r23
    1654:	77 1f       	adc	r23, r23
    1656:	88 0b       	sbc	r24, r24
    1658:	99 0b       	sbc	r25, r25
    165a:	d8 dd       	rcall	.-1104   	; 0x120c <__floatsisf>
    165c:	28 e1       	ldi	r18, 0x18	; 24
    165e:	32 e7       	ldi	r19, 0x72	; 114
    1660:	41 e3       	ldi	r20, 0x31	; 49
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	8f de       	rcall	.-738    	; 0x1384 <__mulsf3x>
    1666:	af 2d       	mov	r26, r15
    1668:	98 01       	movw	r18, r16
    166a:	ae 01       	movw	r20, r28
    166c:	ff 90       	pop	r15
    166e:	0f 91       	pop	r16
    1670:	1f 91       	pop	r17
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	40 dd       	rcall	.-1408   	; 0x10f8 <__addsf3x>
    1678:	3f ce       	rjmp	.-898    	; 0x12f8 <__fp_round>

0000167a <modf>:
    167a:	fa 01       	movw	r30, r20
    167c:	dc 01       	movw	r26, r24
    167e:	aa 0f       	add	r26, r26
    1680:	bb 1f       	adc	r27, r27
    1682:	9b 01       	movw	r18, r22
    1684:	ac 01       	movw	r20, r24
    1686:	bf 57       	subi	r27, 0x7F	; 127
    1688:	28 f4       	brcc	.+10     	; 0x1694 <modf+0x1a>
    168a:	22 27       	eor	r18, r18
    168c:	33 27       	eor	r19, r19
    168e:	44 27       	eor	r20, r20
    1690:	50 78       	andi	r21, 0x80	; 128
    1692:	1f c0       	rjmp	.+62     	; 0x16d2 <modf+0x58>
    1694:	b7 51       	subi	r27, 0x17	; 23
    1696:	88 f4       	brcc	.+34     	; 0x16ba <modf+0x40>
    1698:	ab 2f       	mov	r26, r27
    169a:	00 24       	eor	r0, r0
    169c:	46 95       	lsr	r20
    169e:	37 95       	ror	r19
    16a0:	27 95       	ror	r18
    16a2:	01 1c       	adc	r0, r1
    16a4:	a3 95       	inc	r26
    16a6:	d2 f3       	brmi	.-12     	; 0x169c <modf+0x22>
    16a8:	00 20       	and	r0, r0
    16aa:	69 f0       	breq	.+26     	; 0x16c6 <modf+0x4c>
    16ac:	22 0f       	add	r18, r18
    16ae:	33 1f       	adc	r19, r19
    16b0:	44 1f       	adc	r20, r20
    16b2:	b3 95       	inc	r27
    16b4:	da f3       	brmi	.-10     	; 0x16ac <modf+0x32>
    16b6:	0d d0       	rcall	.+26     	; 0x16d2 <modf+0x58>
    16b8:	0d cd       	rjmp	.-1510   	; 0x10d4 <__subsf3>
    16ba:	61 30       	cpi	r22, 0x01	; 1
    16bc:	71 05       	cpc	r23, r1
    16be:	a0 e8       	ldi	r26, 0x80	; 128
    16c0:	8a 07       	cpc	r24, r26
    16c2:	b9 46       	sbci	r27, 0x69	; 105
    16c4:	30 f4       	brcc	.+12     	; 0x16d2 <modf+0x58>
    16c6:	9b 01       	movw	r18, r22
    16c8:	ac 01       	movw	r20, r24
    16ca:	66 27       	eor	r22, r22
    16cc:	77 27       	eor	r23, r23
    16ce:	88 27       	eor	r24, r24
    16d0:	90 78       	andi	r25, 0x80	; 128
    16d2:	30 96       	adiw	r30, 0x00	; 0
    16d4:	21 f0       	breq	.+8      	; 0x16de <modf+0x64>
    16d6:	20 83       	st	Z, r18
    16d8:	31 83       	std	Z+1, r19	; 0x01
    16da:	42 83       	std	Z+2, r20	; 0x02
    16dc:	53 83       	std	Z+3, r21	; 0x03
    16de:	08 95       	ret

000016e0 <__divsf3>:
    16e0:	0c d0       	rcall	.+24     	; 0x16fa <__divsf3x>
    16e2:	0a ce       	rjmp	.-1004   	; 0x12f8 <__fp_round>
    16e4:	02 de       	rcall	.-1020   	; 0x12ea <__fp_pscB>
    16e6:	40 f0       	brcs	.+16     	; 0x16f8 <__divsf3+0x18>
    16e8:	f9 dd       	rcall	.-1038   	; 0x12dc <__fp_pscA>
    16ea:	30 f0       	brcs	.+12     	; 0x16f8 <__divsf3+0x18>
    16ec:	21 f4       	brne	.+8      	; 0x16f6 <__divsf3+0x16>
    16ee:	5f 3f       	cpi	r21, 0xFF	; 255
    16f0:	19 f0       	breq	.+6      	; 0x16f8 <__divsf3+0x18>
    16f2:	eb cd       	rjmp	.-1066   	; 0x12ca <__fp_inf>
    16f4:	51 11       	cpse	r21, r1
    16f6:	34 ce       	rjmp	.-920    	; 0x1360 <__fp_szero>
    16f8:	ee cd       	rjmp	.-1060   	; 0x12d6 <__fp_nan>

000016fa <__divsf3x>:
    16fa:	0f de       	rcall	.-994    	; 0x131a <__fp_split3>
    16fc:	98 f3       	brcs	.-26     	; 0x16e4 <__divsf3+0x4>

000016fe <__divsf3_pse>:
    16fe:	99 23       	and	r25, r25
    1700:	c9 f3       	breq	.-14     	; 0x16f4 <__divsf3+0x14>
    1702:	55 23       	and	r21, r21
    1704:	b1 f3       	breq	.-20     	; 0x16f2 <__divsf3+0x12>
    1706:	95 1b       	sub	r25, r21
    1708:	55 0b       	sbc	r21, r21
    170a:	bb 27       	eor	r27, r27
    170c:	aa 27       	eor	r26, r26
    170e:	62 17       	cp	r22, r18
    1710:	73 07       	cpc	r23, r19
    1712:	84 07       	cpc	r24, r20
    1714:	38 f0       	brcs	.+14     	; 0x1724 <__divsf3_pse+0x26>
    1716:	9f 5f       	subi	r25, 0xFF	; 255
    1718:	5f 4f       	sbci	r21, 0xFF	; 255
    171a:	22 0f       	add	r18, r18
    171c:	33 1f       	adc	r19, r19
    171e:	44 1f       	adc	r20, r20
    1720:	aa 1f       	adc	r26, r26
    1722:	a9 f3       	breq	.-22     	; 0x170e <__divsf3_pse+0x10>
    1724:	33 d0       	rcall	.+102    	; 0x178c <__divsf3_pse+0x8e>
    1726:	0e 2e       	mov	r0, r30
    1728:	3a f0       	brmi	.+14     	; 0x1738 <__divsf3_pse+0x3a>
    172a:	e0 e8       	ldi	r30, 0x80	; 128
    172c:	30 d0       	rcall	.+96     	; 0x178e <__divsf3_pse+0x90>
    172e:	91 50       	subi	r25, 0x01	; 1
    1730:	50 40       	sbci	r21, 0x00	; 0
    1732:	e6 95       	lsr	r30
    1734:	00 1c       	adc	r0, r0
    1736:	ca f7       	brpl	.-14     	; 0x172a <__divsf3_pse+0x2c>
    1738:	29 d0       	rcall	.+82     	; 0x178c <__divsf3_pse+0x8e>
    173a:	fe 2f       	mov	r31, r30
    173c:	27 d0       	rcall	.+78     	; 0x178c <__divsf3_pse+0x8e>
    173e:	66 0f       	add	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	88 1f       	adc	r24, r24
    1744:	bb 1f       	adc	r27, r27
    1746:	26 17       	cp	r18, r22
    1748:	37 07       	cpc	r19, r23
    174a:	48 07       	cpc	r20, r24
    174c:	ab 07       	cpc	r26, r27
    174e:	b0 e8       	ldi	r27, 0x80	; 128
    1750:	09 f0       	breq	.+2      	; 0x1754 <__divsf3_pse+0x56>
    1752:	bb 0b       	sbc	r27, r27
    1754:	80 2d       	mov	r24, r0
    1756:	bf 01       	movw	r22, r30
    1758:	ff 27       	eor	r31, r31
    175a:	93 58       	subi	r25, 0x83	; 131
    175c:	5f 4f       	sbci	r21, 0xFF	; 255
    175e:	2a f0       	brmi	.+10     	; 0x176a <__divsf3_pse+0x6c>
    1760:	9e 3f       	cpi	r25, 0xFE	; 254
    1762:	51 05       	cpc	r21, r1
    1764:	68 f0       	brcs	.+26     	; 0x1780 <__divsf3_pse+0x82>
    1766:	b1 cd       	rjmp	.-1182   	; 0x12ca <__fp_inf>
    1768:	fb cd       	rjmp	.-1034   	; 0x1360 <__fp_szero>
    176a:	5f 3f       	cpi	r21, 0xFF	; 255
    176c:	ec f3       	brlt	.-6      	; 0x1768 <__divsf3_pse+0x6a>
    176e:	98 3e       	cpi	r25, 0xE8	; 232
    1770:	dc f3       	brlt	.-10     	; 0x1768 <__divsf3_pse+0x6a>
    1772:	86 95       	lsr	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	b7 95       	ror	r27
    177a:	f7 95       	ror	r31
    177c:	9f 5f       	subi	r25, 0xFF	; 255
    177e:	c9 f7       	brne	.-14     	; 0x1772 <__divsf3_pse+0x74>
    1780:	88 0f       	add	r24, r24
    1782:	91 1d       	adc	r25, r1
    1784:	96 95       	lsr	r25
    1786:	87 95       	ror	r24
    1788:	97 f9       	bld	r25, 7
    178a:	08 95       	ret
    178c:	e1 e0       	ldi	r30, 0x01	; 1
    178e:	66 0f       	add	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	88 1f       	adc	r24, r24
    1794:	bb 1f       	adc	r27, r27
    1796:	62 17       	cp	r22, r18
    1798:	73 07       	cpc	r23, r19
    179a:	84 07       	cpc	r24, r20
    179c:	ba 07       	cpc	r27, r26
    179e:	20 f0       	brcs	.+8      	; 0x17a8 <__divsf3_pse+0xaa>
    17a0:	62 1b       	sub	r22, r18
    17a2:	73 0b       	sbc	r23, r19
    17a4:	84 0b       	sbc	r24, r20
    17a6:	ba 0b       	sbc	r27, r26
    17a8:	ee 1f       	adc	r30, r30
    17aa:	88 f7       	brcc	.-30     	; 0x178e <__divsf3_pse+0x90>
    17ac:	e0 95       	com	r30
    17ae:	08 95       	ret

000017b0 <__fp_mpack>:
    17b0:	9f 3f       	cpi	r25, 0xFF	; 255
    17b2:	31 f0       	breq	.+12     	; 0x17c0 <__fp_mpack_finite+0xc>

000017b4 <__fp_mpack_finite>:
    17b4:	91 50       	subi	r25, 0x01	; 1
    17b6:	20 f4       	brcc	.+8      	; 0x17c0 <__fp_mpack_finite+0xc>
    17b8:	87 95       	ror	r24
    17ba:	77 95       	ror	r23
    17bc:	67 95       	ror	r22
    17be:	b7 95       	ror	r27
    17c0:	88 0f       	add	r24, r24
    17c2:	91 1d       	adc	r25, r1
    17c4:	96 95       	lsr	r25
    17c6:	87 95       	ror	r24
    17c8:	97 f9       	bld	r25, 7
    17ca:	08 95       	ret

000017cc <_ZN14HardwareSerial9availableEv>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
    19a2:	fc 01       	movw	r30, r24
=======
    17cc:	fc 01       	movw	r30, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    17ce:	91 8d       	ldd	r25, Z+25	; 0x19
    17d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    17d2:	89 2f       	mov	r24, r25
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	80 5c       	subi	r24, 0xC0	; 192
    17d8:	9f 4f       	sbci	r25, 0xFF	; 255
    17da:	82 1b       	sub	r24, r18
    17dc:	91 09       	sbc	r25, r1
}
    17de:	8f 73       	andi	r24, 0x3F	; 63
    17e0:	99 27       	eor	r25, r25
    17e2:	08 95       	ret

000017e4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    17e4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    17e6:	91 8d       	ldd	r25, Z+25	; 0x19
    17e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    17ea:	98 17       	cp	r25, r24
    17ec:	31 f0       	breq	.+12     	; 0x17fa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
<<<<<<< HEAD
    19c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    19c6:	e8 0f       	add	r30, r24
    19c8:	f1 1d       	adc	r31, r1
    19ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	08 95       	ret
=======
    17c2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    17c4:	91 8d       	ldd	r25, Z+25	; 0x19
    17c6:	22 8d       	ldd	r18, Z+26	; 0x1a
    17c8:	89 2f       	mov	r24, r25
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	80 5c       	subi	r24, 0xC0	; 192
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	82 1b       	sub	r24, r18
    17d2:	91 09       	sbc	r25, r1
}
    17d4:	8f 73       	andi	r24, 0x3F	; 63
    17d6:	99 27       	eor	r25, r25
    17d8:	08 95       	ret

000017da <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    17da:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    17dc:	91 8d       	ldd	r25, Z+25	; 0x19
    17de:	82 8d       	ldd	r24, Z+26	; 0x1a
    17e0:	98 17       	cp	r25, r24
    17e2:	31 f0       	breq	.+12     	; 0x17f0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    17e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    17e6:	e8 0f       	add	r30, r24
    17e8:	f1 1d       	adc	r31, r1
    17ea:	85 8d       	ldd	r24, Z+29	; 0x1d
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	08 95       	ret
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    17ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    17f0:	e8 0f       	add	r30, r24
    17f2:	f1 1d       	adc	r31, r1
    17f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	08 95       	ret
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
<<<<<<< HEAD
<<<<<<< HEAD
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	9f ef       	ldi	r25, 0xFF	; 255
=======
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
    19d4:	08 95       	ret
=======
    17fe:	08 95       	ret
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

00001800 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1800:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1802:	91 8d       	ldd	r25, Z+25	; 0x19
    1804:	82 8d       	ldd	r24, Z+26	; 0x1a
    1806:	98 17       	cp	r25, r24
    1808:	61 f0       	breq	.+24     	; 0x1822 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    180a:	82 8d       	ldd	r24, Z+26	; 0x1a
    180c:	df 01       	movw	r26, r30
    180e:	a8 0f       	add	r26, r24
    1810:	b1 1d       	adc	r27, r1
    1812:	5d 96       	adiw	r26, 0x1d	; 29
    1814:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1816:	92 8d       	ldd	r25, Z+26	; 0x1a
    1818:	9f 5f       	subi	r25, 0xFF	; 255
    181a:	9f 73       	andi	r25, 0x3F	; 63
    181c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
<<<<<<< HEAD
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	08 95       	ret
=======
    17f4:	08 95       	ret

000017f6 <_ZN14HardwareSerial4readEv>:
=======
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	08 95       	ret
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

int HardwareSerial::read(void)
{
    17f6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    17f8:	91 8d       	ldd	r25, Z+25	; 0x19
    17fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    17fc:	98 17       	cp	r25, r24
    17fe:	61 f0       	breq	.+24     	; 0x1818 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
<<<<<<< HEAD
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1800:	82 8d       	ldd	r24, Z+26	; 0x1a
    1802:	df 01       	movw	r26, r30
    1804:	a8 0f       	add	r26, r24
    1806:	b1 1d       	adc	r27, r1
    1808:	5d 96       	adiw	r26, 0x1d	; 29
    180a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    180c:	92 8d       	ldd	r25, Z+26	; 0x1a
    180e:	9f 5f       	subi	r25, 0xFF	; 255
    1810:	9f 73       	andi	r25, 0x3F	; 63
    1812:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	08 95       	ret
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
<<<<<<< HEAD
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	9f ef       	ldi	r25, 0xFF	; 255
=======
    1818:	8f ef       	ldi	r24, 0xFF	; 255
    181a:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1822:	8f ef       	ldi	r24, 0xFF	; 255
    1824:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
    19fc:	08 95       	ret

000019fe <_ZN14HardwareSerial17availableForWriteEv>:
=======
    181c:	08 95       	ret

0000181e <_ZN14HardwareSerial17availableForWriteEv>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1826:	08 95       	ret

00001828 <_ZN14HardwareSerial17availableForWriteEv>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
<<<<<<< HEAD
<<<<<<< HEAD
    19fe:	fc 01       	movw	r30, r24
    1a00:	53 8d       	ldd	r21, Z+27	; 0x1b
=======
    1828:	fc 01       	movw	r30, r24
    182a:	53 8d       	ldd	r21, Z+27	; 0x1b
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    tail = _tx_buffer_tail;
    182c:	44 8d       	ldd	r20, Z+28	; 0x1c
    182e:	25 2f       	mov	r18, r21
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	84 2f       	mov	r24, r20
    1834:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1836:	82 1b       	sub	r24, r18
    1838:	93 0b       	sbc	r25, r19
    183a:	54 17       	cp	r21, r20
    183c:	10 f0       	brcs	.+4      	; 0x1842 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    183e:	cf 96       	adiw	r24, 0x3f	; 63
    1840:	08 95       	ret
  return tail - head - 1;
    1842:	01 97       	sbiw	r24, 0x01	; 1
}
    1844:	08 95       	ret

<<<<<<< HEAD
00001a1c <_Z14serialEventRunv>:
=======
    181e:	fc 01       	movw	r30, r24
    1820:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1822:	44 8d       	ldd	r20, Z+28	; 0x1c
    1824:	25 2f       	mov	r18, r21
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	84 2f       	mov	r24, r20
    182a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    182c:	82 1b       	sub	r24, r18
    182e:	93 0b       	sbc	r25, r19
    1830:	54 17       	cp	r21, r20
    1832:	10 f0       	brcs	.+4      	; 0x1838 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1834:	cf 96       	adiw	r24, 0x3f	; 63
    1836:	08 95       	ret
  return tail - head - 1;
    1838:	01 97       	sbiw	r24, 0x01	; 1
}
    183a:	08 95       	ret

0000183c <_Z14serialEventRunv>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
00001846 <_Z14serialEventRunv>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
<<<<<<< HEAD
<<<<<<< HEAD
    1a1c:	80 ea       	ldi	r24, 0xA0	; 160
    1a1e:	9e e0       	ldi	r25, 0x0E	; 14
    1a20:	89 2b       	or	r24, r25
    1a22:	39 f0       	breq	.+14     	; 0x1a32 <_Z14serialEventRunv+0x16>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	89 2b       	or	r24, r25
    1a2a:	19 f0       	breq	.+6      	; 0x1a32 <_Z14serialEventRunv+0x16>
    1a2c:	89 d1       	rcall	.+786    	; 0x1d40 <_Z17Serial0_availablev>
    1a2e:	81 11       	cpse	r24, r1
    1a30:	24 c0       	rjmp	.+72     	; 0x1a7a <_Z14serialEventRunv+0x5e>
=======
    1846:	85 eb       	ldi	r24, 0xB5	; 181
    1848:	9d e0       	ldi	r25, 0x0D	; 13
    184a:	89 2b       	or	r24, r25
    184c:	39 f0       	breq	.+14     	; 0x185c <_Z14serialEventRunv+0x16>
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	89 2b       	or	r24, r25
    1854:	19 f0       	breq	.+6      	; 0x185c <_Z14serialEventRunv+0x16>
    1856:	89 d1       	rcall	.+786    	; 0x1b6a <_Z17Serial0_availablev>
    1858:	81 11       	cpse	r24, r1
    185a:	24 c0       	rjmp	.+72     	; 0x18a4 <_Z14serialEventRunv+0x5e>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    185c:	8a e4       	ldi	r24, 0x4A	; 74
    185e:	9e e0       	ldi	r25, 0x0E	; 14
    1860:	89 2b       	or	r24, r25
    1862:	39 f0       	breq	.+14     	; 0x1872 <_Z14serialEventRunv+0x2c>
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	89 2b       	or	r24, r25
    186a:	19 f0       	breq	.+6      	; 0x1872 <_Z14serialEventRunv+0x2c>
    186c:	13 d2       	rcall	.+1062   	; 0x1c94 <_Z17Serial1_availablev>
    186e:	81 11       	cpse	r24, r1
    1870:	1c c0       	rjmp	.+56     	; 0x18aa <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	89 2b       	or	r24, r25
    1878:	41 f0       	breq	.+16     	; 0x188a <_Z14serialEventRunv+0x44>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	89 2b       	or	r24, r25
    1880:	21 f0       	breq	.+8      	; 0x188a <_Z14serialEventRunv+0x44>
    1882:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1886:	81 11       	cpse	r24, r1
    1888:	13 c0       	rjmp	.+38     	; 0x18b0 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
<<<<<<< HEAD
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	89 2b       	or	r24, r25
    1a66:	a1 f0       	breq	.+40     	; 0x1a90 <_Z14serialEventRunv+0x74>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	89 2b       	or	r24, r25
    1a6e:	81 f0       	breq	.+32     	; 0x1a90 <_Z14serialEventRunv+0x74>
    1a70:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a74:	81 11       	cpse	r24, r1
    1a76:	0a c0       	rjmp	.+20     	; 0x1a8c <_Z14serialEventRunv+0x70>
    1a78:	08 95       	ret
=======
    183c:	80 eb       	ldi	r24, 0xB0	; 176
    183e:	9d e0       	ldi	r25, 0x0D	; 13
    1840:	89 2b       	or	r24, r25
    1842:	39 f0       	breq	.+14     	; 0x1852 <_Z14serialEventRunv+0x16>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	89 2b       	or	r24, r25
    184a:	19 f0       	breq	.+6      	; 0x1852 <_Z14serialEventRunv+0x16>
    184c:	89 d1       	rcall	.+786    	; 0x1b60 <_Z17Serial0_availablev>
    184e:	81 11       	cpse	r24, r1
    1850:	24 c0       	rjmp	.+72     	; 0x189a <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1852:	85 e4       	ldi	r24, 0x45	; 69
    1854:	9e e0       	ldi	r25, 0x0E	; 14
    1856:	89 2b       	or	r24, r25
    1858:	39 f0       	breq	.+14     	; 0x1868 <_Z14serialEventRunv+0x2c>
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	89 2b       	or	r24, r25
    1860:	19 f0       	breq	.+6      	; 0x1868 <_Z14serialEventRunv+0x2c>
    1862:	13 d2       	rcall	.+1062   	; 0x1c8a <_Z17Serial1_availablev>
    1864:	81 11       	cpse	r24, r1
    1866:	1c c0       	rjmp	.+56     	; 0x18a0 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	89 2b       	or	r24, r25
    186e:	41 f0       	breq	.+16     	; 0x1880 <_Z14serialEventRunv+0x44>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	89 2b       	or	r24, r25
    1876:	21 f0       	breq	.+8      	; 0x1880 <_Z14serialEventRunv+0x44>
    1878:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    187c:	81 11       	cpse	r24, r1
    187e:	13 c0       	rjmp	.+38     	; 0x18a6 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	89 2b       	or	r24, r25
    1886:	a1 f0       	breq	.+40     	; 0x18b0 <_Z14serialEventRunv+0x74>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	89 2b       	or	r24, r25
    188e:	81 f0       	breq	.+32     	; 0x18b0 <_Z14serialEventRunv+0x74>
    1890:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1894:	81 11       	cpse	r24, r1
    1896:	0a c0       	rjmp	.+20     	; 0x18ac <_Z14serialEventRunv+0x70>
    1898:	08 95       	ret
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	89 2b       	or	r24, r25
    1890:	a1 f0       	breq	.+40     	; 0x18ba <_Z14serialEventRunv+0x74>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	89 2b       	or	r24, r25
    1898:	81 f0       	breq	.+32     	; 0x18ba <_Z14serialEventRunv+0x74>
    189a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    189e:	81 11       	cpse	r24, r1
    18a0:	0a c0       	rjmp	.+20     	; 0x18b6 <_Z14serialEventRunv+0x70>
    18a2:	08 95       	ret
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
<<<<<<< HEAD
<<<<<<< HEAD
    1a7a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a7e:	d9 cf       	rjmp	.-78     	; 0x1a32 <_Z14serialEventRunv+0x16>
=======
    18a4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    18a8:	d9 cf       	rjmp	.-78     	; 0x185c <_Z14serialEventRunv+0x16>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    18aa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    18ae:	e1 cf       	rjmp	.-62     	; 0x1872 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    18b0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    18b4:	ea cf       	rjmp	.-44     	; 0x188a <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    18b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    18ba:	08 95       	ret

<<<<<<< HEAD
00001a92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
=======
    189a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    189e:	d9 cf       	rjmp	.-78     	; 0x1852 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    18a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    18a4:	e1 cf       	rjmp	.-62     	; 0x1868 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    18a6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    18aa:	ea cf       	rjmp	.-44     	; 0x1880 <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    18ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    18b0:	08 95       	ret

000018b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
000018bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
    1a92:	fc 01       	movw	r30, r24
=======
    18bc:	fc 01       	movw	r30, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    18be:	84 8d       	ldd	r24, Z+28	; 0x1c
    18c0:	df 01       	movw	r26, r30
    18c2:	a8 0f       	add	r26, r24
    18c4:	b1 1d       	adc	r27, r1
    18c6:	a3 5a       	subi	r26, 0xA3	; 163
    18c8:	bf 4f       	sbci	r27, 0xFF	; 255
    18ca:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    18cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	8f 73       	andi	r24, 0x3F	; 63
    18d4:	99 27       	eor	r25, r25
    18d6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
<<<<<<< HEAD
    1aae:	a6 89       	ldd	r26, Z+22	; 0x16
    1ab0:	b7 89       	ldd	r27, Z+23	; 0x17
    1ab2:	2c 93       	st	X, r18
=======
    18b2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    18b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    18b6:	df 01       	movw	r26, r30
    18b8:	a8 0f       	add	r26, r24
    18ba:	b1 1d       	adc	r27, r1
    18bc:	a3 5a       	subi	r26, 0xA3	; 163
    18be:	bf 4f       	sbci	r27, 0xFF	; 255
    18c0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    18c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	8f 73       	andi	r24, 0x3F	; 63
    18ca:	99 27       	eor	r25, r25
    18cc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    18ce:	a6 89       	ldd	r26, Z+22	; 0x16
    18d0:	b7 89       	ldd	r27, Z+23	; 0x17
    18d2:	2c 93       	st	X, r18
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    18d8:	a6 89       	ldd	r26, Z+22	; 0x16
    18da:	b7 89       	ldd	r27, Z+23	; 0x17
    18dc:	2c 93       	st	X, r18
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
<<<<<<< HEAD
<<<<<<< HEAD
    1ab4:	a0 89       	ldd	r26, Z+16	; 0x10
    1ab6:	b1 89       	ldd	r27, Z+17	; 0x11
    1ab8:	8c 91       	ld	r24, X
    1aba:	83 70       	andi	r24, 0x03	; 3
    1abc:	80 64       	ori	r24, 0x40	; 64
    1abe:	8c 93       	st	X, r24
=======
    18d4:	a0 89       	ldd	r26, Z+16	; 0x10
    18d6:	b1 89       	ldd	r27, Z+17	; 0x11
    18d8:	8c 91       	ld	r24, X
    18da:	83 70       	andi	r24, 0x03	; 3
    18dc:	80 64       	ori	r24, 0x40	; 64
    18de:	8c 93       	st	X, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    18de:	a0 89       	ldd	r26, Z+16	; 0x10
    18e0:	b1 89       	ldd	r27, Z+17	; 0x11
    18e2:	8c 91       	ld	r24, X
    18e4:	83 70       	andi	r24, 0x03	; 3
    18e6:	80 64       	ori	r24, 0x40	; 64
    18e8:	8c 93       	st	X, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
<<<<<<< HEAD
<<<<<<< HEAD
    1ac0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ac2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ac4:	98 13       	cpse	r25, r24
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1ac8:	02 88       	ldd	r0, Z+18	; 0x12
    1aca:	f3 89       	ldd	r31, Z+19	; 0x13
    1acc:	e0 2d       	mov	r30, r0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 7d       	andi	r24, 0xDF	; 223
    1ad2:	80 83       	st	Z, r24
    1ad4:	08 95       	ret

00001ad6 <_ZN14HardwareSerial5writeEh>:
=======
    18e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    18e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    18e4:	98 13       	cpse	r25, r24
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    18e8:	02 88       	ldd	r0, Z+18	; 0x12
    18ea:	f3 89       	ldd	r31, Z+19	; 0x13
    18ec:	e0 2d       	mov	r30, r0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 7d       	andi	r24, 0xDF	; 223
    18f2:	80 83       	st	Z, r24
    18f4:	08 95       	ret

000018f6 <_ZN14HardwareSerial5writeEh>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    18ea:	93 8d       	ldd	r25, Z+27	; 0x1b
    18ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    18ee:	98 13       	cpse	r25, r24
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    18f2:	02 88       	ldd	r0, Z+18	; 0x12
    18f4:	f3 89       	ldd	r31, Z+19	; 0x13
    18f6:	e0 2d       	mov	r30, r0
    18f8:	80 81       	ld	r24, Z
    18fa:	8f 7d       	andi	r24, 0xDF	; 223
    18fc:	80 83       	st	Z, r24
    18fe:	08 95       	ret

00001900 <_ZN14HardwareSerial5writeEh>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
<<<<<<< HEAD
<<<<<<< HEAD
    1ad6:	ef 92       	push	r14
    1ad8:	ff 92       	push	r15
    1ada:	0f 93       	push	r16
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	ec 01       	movw	r28, r24
  _written = true;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	88 8f       	std	Y+24, r24	; 0x18
=======
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	ec 01       	movw	r28, r24
  _written = true;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	88 8f       	std	Y+24, r24	; 0x18
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	ec 01       	movw	r28, r24
  _written = true;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	88 8f       	std	Y+24, r24	; 0x18
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
<<<<<<< HEAD
<<<<<<< HEAD
    1ae8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1aea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1aec:	98 13       	cpse	r25, r24
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <_ZN14HardwareSerial5writeEh+0x24>
    1af0:	e8 89       	ldd	r30, Y+16	; 0x10
    1af2:	f9 89       	ldd	r31, Y+17	; 0x11
    1af4:	80 81       	ld	r24, Z
    1af6:	85 fd       	sbrc	r24, 5
    1af8:	25 c0       	rjmp	.+74     	; 0x1b44 <_ZN14HardwareSerial5writeEh+0x6e>
    1afa:	f6 2e       	mov	r15, r22
=======
    1908:	9b 8d       	ldd	r25, Y+27	; 0x1b
    190a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    190c:	98 13       	cpse	r25, r24
    190e:	05 c0       	rjmp	.+10     	; 0x191a <_ZN14HardwareSerial5writeEh+0x24>
    1910:	e8 89       	ldd	r30, Y+16	; 0x10
    1912:	f9 89       	ldd	r31, Y+17	; 0x11
    1914:	80 81       	ld	r24, Z
    1916:	85 fd       	sbrc	r24, 5
    1918:	25 c0       	rjmp	.+74     	; 0x1964 <_ZN14HardwareSerial5writeEh+0x6e>
    191a:	f6 2e       	mov	r15, r22
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1912:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1914:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1916:	98 13       	cpse	r25, r24
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <_ZN14HardwareSerial5writeEh+0x24>
    191a:	e8 89       	ldd	r30, Y+16	; 0x10
    191c:	f9 89       	ldd	r31, Y+17	; 0x11
    191e:	80 81       	ld	r24, Z
    1920:	85 fd       	sbrc	r24, 5
    1922:	25 c0       	rjmp	.+74     	; 0x196e <_ZN14HardwareSerial5writeEh+0x6e>
    1924:	f6 2e       	mov	r15, r22
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
<<<<<<< HEAD
<<<<<<< HEAD
    1afc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1afe:	10 e0       	ldi	r17, 0x00	; 0
    1b00:	0f 5f       	subi	r16, 0xFF	; 255
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	0f 73       	andi	r16, 0x3F	; 63
    1b06:	11 27       	eor	r17, r17
    1b08:	e0 2e       	mov	r14, r16
=======
    191c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    191e:	10 e0       	ldi	r17, 0x00	; 0
    1920:	0f 5f       	subi	r16, 0xFF	; 255
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	0f 73       	andi	r16, 0x3F	; 63
    1926:	11 27       	eor	r17, r17
    1928:	e0 2e       	mov	r14, r16
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1926:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1928:	10 e0       	ldi	r17, 0x00	; 0
    192a:	0f 5f       	subi	r16, 0xFF	; 255
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	0f 73       	andi	r16, 0x3F	; 63
    1930:	11 27       	eor	r17, r17
    1932:	e0 2e       	mov	r14, r16
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
<<<<<<< HEAD
<<<<<<< HEAD
    1b0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b0c:	e8 12       	cpse	r14, r24
    1b0e:	0b c0       	rjmp	.+22     	; 0x1b26 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	07 fc       	sbrc	r0, 7
    1b14:	fa cf       	rjmp	.-12     	; 0x1b0a <_ZN14HardwareSerial5writeEh+0x34>
=======
    192a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    192c:	e8 12       	cpse	r14, r24
    192e:	0b c0       	rjmp	.+22     	; 0x1946 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	07 fc       	sbrc	r0, 7
    1934:	fa cf       	rjmp	.-12     	; 0x192a <_ZN14HardwareSerial5writeEh+0x34>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1934:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1936:	e8 12       	cpse	r14, r24
    1938:	0b c0       	rjmp	.+22     	; 0x1950 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	07 fc       	sbrc	r0, 7
    193e:	fa cf       	rjmp	.-12     	; 0x1934 <_ZN14HardwareSerial5writeEh+0x34>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
<<<<<<< HEAD
<<<<<<< HEAD
    1b16:	e8 89       	ldd	r30, Y+16	; 0x10
    1b18:	f9 89       	ldd	r31, Y+17	; 0x11
    1b1a:	80 81       	ld	r24, Z
    1b1c:	85 ff       	sbrs	r24, 5
    1b1e:	f5 cf       	rjmp	.-22     	; 0x1b0a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1b20:	ce 01       	movw	r24, r28
    1b22:	b7 df       	rcall	.-146    	; 0x1a92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b24:	f2 cf       	rjmp	.-28     	; 0x1b0a <_ZN14HardwareSerial5writeEh+0x34>
=======
    1936:	e8 89       	ldd	r30, Y+16	; 0x10
    1938:	f9 89       	ldd	r31, Y+17	; 0x11
    193a:	80 81       	ld	r24, Z
    193c:	85 ff       	sbrs	r24, 5
    193e:	f5 cf       	rjmp	.-22     	; 0x192a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1940:	ce 01       	movw	r24, r28
    1942:	b7 df       	rcall	.-146    	; 0x18b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1944:	f2 cf       	rjmp	.-28     	; 0x192a <_ZN14HardwareSerial5writeEh+0x34>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1940:	e8 89       	ldd	r30, Y+16	; 0x10
    1942:	f9 89       	ldd	r31, Y+17	; 0x11
    1944:	80 81       	ld	r24, Z
    1946:	85 ff       	sbrs	r24, 5
    1948:	f5 cf       	rjmp	.-22     	; 0x1934 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    194a:	ce 01       	movw	r24, r28
    194c:	b7 df       	rcall	.-146    	; 0x18bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    194e:	f2 cf       	rjmp	.-28     	; 0x1934 <_ZN14HardwareSerial5writeEh+0x34>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
<<<<<<< HEAD
<<<<<<< HEAD
    1b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e8 0f       	add	r30, r24
    1b2c:	f1 1d       	adc	r31, r1
    1b2e:	e3 5a       	subi	r30, 0xA3	; 163
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	f0 82       	st	Z, r15
=======
    1946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1948:	fe 01       	movw	r30, r28
    194a:	e8 0f       	add	r30, r24
    194c:	f1 1d       	adc	r31, r1
    194e:	e3 5a       	subi	r30, 0xA3	; 163
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	f0 82       	st	Z, r15
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1952:	fe 01       	movw	r30, r28
    1954:	e8 0f       	add	r30, r24
    1956:	f1 1d       	adc	r31, r1
    1958:	e3 5a       	subi	r30, 0xA3	; 163
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	f0 82       	st	Z, r15
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
<<<<<<< HEAD
<<<<<<< HEAD
    1b34:	9f b7       	in	r25, 0x3f	; 63
=======
    1954:	9f b7       	in	r25, 0x3f	; 63
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    195e:	9f b7       	in	r25, 0x3f	; 63
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
<<<<<<< HEAD
<<<<<<< HEAD
    1b36:	f8 94       	cli
=======
    1960:	f8 94       	cli
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    _tx_buffer_head = i;
    1962:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
<<<<<<< HEAD
    1b3a:	ea 89       	ldd	r30, Y+18	; 0x12
    1b3c:	fb 89       	ldd	r31, Y+19	; 0x13
    1b3e:	80 81       	ld	r24, Z
    1b40:	80 62       	ori	r24, 0x20	; 32
    1b42:	0a c0       	rjmp	.+20     	; 0x1b58 <_ZN14HardwareSerial5writeEh+0x82>
=======
    1956:	f8 94       	cli
    _tx_buffer_head = i;
    1958:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    195a:	ea 89       	ldd	r30, Y+18	; 0x12
    195c:	fb 89       	ldd	r31, Y+19	; 0x13
    195e:	80 81       	ld	r24, Z
    1960:	80 62       	ori	r24, 0x20	; 32
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <_ZN14HardwareSerial5writeEh+0x82>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1964:	ea 89       	ldd	r30, Y+18	; 0x12
    1966:	fb 89       	ldd	r31, Y+19	; 0x13
    1968:	80 81       	ld	r24, Z
    196a:	80 62       	ori	r24, 0x20	; 32
    196c:	0a c0       	rjmp	.+20     	; 0x1982 <_ZN14HardwareSerial5writeEh+0x82>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
<<<<<<< HEAD
<<<<<<< HEAD
    1b44:	9f b7       	in	r25, 0x3f	; 63
    1b46:	f8 94       	cli
=======
    196e:	9f b7       	in	r25, 0x3f	; 63
    1970:	f8 94       	cli
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      *_udr = c;
    1972:	ee 89       	ldd	r30, Y+22	; 0x16
    1974:	ff 89       	ldd	r31, Y+23	; 0x17
    1976:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
<<<<<<< HEAD
    1b4e:	e8 89       	ldd	r30, Y+16	; 0x10
    1b50:	f9 89       	ldd	r31, Y+17	; 0x11
    1b52:	80 81       	ld	r24, Z
    1b54:	83 70       	andi	r24, 0x03	; 3
    1b56:	80 64       	ori	r24, 0x40	; 64
    1b58:	80 83       	st	Z, r24
=======
    1964:	9f b7       	in	r25, 0x3f	; 63
    1966:	f8 94       	cli
      *_udr = c;
    1968:	ee 89       	ldd	r30, Y+22	; 0x16
    196a:	ff 89       	ldd	r31, Y+23	; 0x17
    196c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    196e:	e8 89       	ldd	r30, Y+16	; 0x10
    1970:	f9 89       	ldd	r31, Y+17	; 0x11
    1972:	80 81       	ld	r24, Z
    1974:	83 70       	andi	r24, 0x03	; 3
    1976:	80 64       	ori	r24, 0x40	; 64
    1978:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1978:	e8 89       	ldd	r30, Y+16	; 0x10
    197a:	f9 89       	ldd	r31, Y+17	; 0x11
    197c:	80 81       	ld	r24, Z
    197e:	83 70       	andi	r24, 0x03	; 3
    1980:	80 64       	ori	r24, 0x40	; 64
    1982:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
<<<<<<< HEAD
<<<<<<< HEAD
    1b5a:	9f bf       	out	0x3f, r25	; 63
=======
    197a:	9f bf       	out	0x3f, r25	; 63
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1984:	9f bf       	out	0x3f, r25	; 63
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
<<<<<<< HEAD
<<<<<<< HEAD
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	08 95       	ret

00001b6e <_ZN14HardwareSerial5flushEv>:
=======
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	08 95       	ret

0000198e <_ZN14HardwareSerial5flushEv>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	08 95       	ret

00001998 <_ZN14HardwareSerial5flushEv>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
<<<<<<< HEAD
<<<<<<< HEAD
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	ec 01       	movw	r28, r24
=======
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	ec 01       	movw	r28, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	ec 01       	movw	r28, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
<<<<<<< HEAD
<<<<<<< HEAD
    1b74:	88 8d       	ldd	r24, Y+24	; 0x18
    1b76:	88 23       	and	r24, r24
    1b78:	c1 f0       	breq	.+48     	; 0x1baa <_ZN14HardwareSerial5flushEv+0x3c>
=======
    199e:	88 8d       	ldd	r24, Y+24	; 0x18
    19a0:	88 23       	and	r24, r24
    19a2:	c1 f0       	breq	.+48     	; 0x19d4 <_ZN14HardwareSerial5flushEv+0x3c>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    19a4:	ea 89       	ldd	r30, Y+18	; 0x12
    19a6:	fb 89       	ldd	r31, Y+19	; 0x13
    19a8:	80 81       	ld	r24, Z
    19aa:	85 fd       	sbrc	r24, 5
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <_ZN14HardwareSerial5flushEv+0x20>
    19ae:	a8 89       	ldd	r26, Y+16	; 0x10
    19b0:	b9 89       	ldd	r27, Y+17	; 0x11
    19b2:	8c 91       	ld	r24, X
    19b4:	86 fd       	sbrc	r24, 6
    19b6:	0e c0       	rjmp	.+28     	; 0x19d4 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
<<<<<<< HEAD
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	07 fc       	sbrc	r0, 7
    1b92:	f5 cf       	rjmp	.-22     	; 0x1b7e <_ZN14HardwareSerial5flushEv+0x10>
    1b94:	80 81       	ld	r24, Z
    1b96:	85 ff       	sbrs	r24, 5
    1b98:	f2 cf       	rjmp	.-28     	; 0x1b7e <_ZN14HardwareSerial5flushEv+0x10>
=======
    1994:	88 8d       	ldd	r24, Y+24	; 0x18
    1996:	88 23       	and	r24, r24
    1998:	c1 f0       	breq	.+48     	; 0x19ca <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    199a:	ea 89       	ldd	r30, Y+18	; 0x12
    199c:	fb 89       	ldd	r31, Y+19	; 0x13
    199e:	80 81       	ld	r24, Z
    19a0:	85 fd       	sbrc	r24, 5
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <_ZN14HardwareSerial5flushEv+0x20>
    19a4:	a8 89       	ldd	r26, Y+16	; 0x10
    19a6:	b9 89       	ldd	r27, Y+17	; 0x11
    19a8:	8c 91       	ld	r24, X
    19aa:	86 fd       	sbrc	r24, 6
    19ac:	0e c0       	rjmp	.+28     	; 0x19ca <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	07 fc       	sbrc	r0, 7
    19b2:	f5 cf       	rjmp	.-22     	; 0x199e <_ZN14HardwareSerial5flushEv+0x10>
    19b4:	80 81       	ld	r24, Z
    19b6:	85 ff       	sbrs	r24, 5
    19b8:	f2 cf       	rjmp	.-28     	; 0x199e <_ZN14HardwareSerial5flushEv+0x10>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	07 fc       	sbrc	r0, 7
    19bc:	f5 cf       	rjmp	.-22     	; 0x19a8 <_ZN14HardwareSerial5flushEv+0x10>
    19be:	80 81       	ld	r24, Z
    19c0:	85 ff       	sbrs	r24, 5
    19c2:	f2 cf       	rjmp	.-28     	; 0x19a8 <_ZN14HardwareSerial5flushEv+0x10>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
<<<<<<< HEAD
<<<<<<< HEAD
    1b9a:	a8 89       	ldd	r26, Y+16	; 0x10
    1b9c:	b9 89       	ldd	r27, Y+17	; 0x11
    1b9e:	8c 91       	ld	r24, X
    1ba0:	85 ff       	sbrs	r24, 5
    1ba2:	ed cf       	rjmp	.-38     	; 0x1b7e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	75 df       	rcall	.-278    	; 0x1a92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ba8:	e8 cf       	rjmp	.-48     	; 0x1b7a <_ZN14HardwareSerial5flushEv+0xc>
=======
    19ba:	a8 89       	ldd	r26, Y+16	; 0x10
    19bc:	b9 89       	ldd	r27, Y+17	; 0x11
    19be:	8c 91       	ld	r24, X
    19c0:	85 ff       	sbrs	r24, 5
    19c2:	ed cf       	rjmp	.-38     	; 0x199e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    19c4:	ce 01       	movw	r24, r28
    19c6:	75 df       	rcall	.-278    	; 0x18b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19c8:	e8 cf       	rjmp	.-48     	; 0x199a <_ZN14HardwareSerial5flushEv+0xc>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    19c4:	a8 89       	ldd	r26, Y+16	; 0x10
    19c6:	b9 89       	ldd	r27, Y+17	; 0x11
    19c8:	8c 91       	ld	r24, X
    19ca:	85 ff       	sbrs	r24, 5
    19cc:	ed cf       	rjmp	.-38     	; 0x19a8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    19ce:	ce 01       	movw	r24, r28
    19d0:	75 df       	rcall	.-278    	; 0x18bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19d2:	e8 cf       	rjmp	.-48     	; 0x19a4 <_ZN14HardwareSerial5flushEv+0xc>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
<<<<<<< HEAD
<<<<<<< HEAD
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <_ZN14HardwareSerial5beginEmh>:
=======
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	08 95       	ret

000019d0 <_ZN14HardwareSerial5beginEmh>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <_ZN14HardwareSerial5beginEmh>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
<<<<<<< HEAD
<<<<<<< HEAD
    1bb0:	cf 92       	push	r12
    1bb2:	df 92       	push	r13
    1bb4:	ef 92       	push	r14
    1bb6:	ff 92       	push	r15
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	ec 01       	movw	r28, r24
    1bc0:	6a 01       	movw	r12, r20
    1bc2:	7b 01       	movw	r14, r22
    1bc4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1bc6:	e8 89       	ldd	r30, Y+16	; 0x10
    1bc8:	f9 89       	ldd	r31, Y+17	; 0x11
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	80 83       	st	Z, r24
=======
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	ec 01       	movw	r28, r24
    19e0:	6a 01       	movw	r12, r20
    19e2:	7b 01       	movw	r14, r22
    19e4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    19e6:	e8 89       	ldd	r30, Y+16	; 0x10
    19e8:	f9 89       	ldd	r31, Y+17	; 0x11
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	ec 01       	movw	r28, r24
    19ea:	6a 01       	movw	r12, r20
    19ec:	7b 01       	movw	r14, r22
    19ee:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    19f0:	e8 89       	ldd	r30, Y+16	; 0x10
    19f2:	f9 89       	ldd	r31, Y+17	; 0x11
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
<<<<<<< HEAD
<<<<<<< HEAD
    1bce:	41 15       	cp	r20, r1
    1bd0:	51 4e       	sbci	r21, 0xE1	; 225
    1bd2:	61 05       	cpc	r22, r1
    1bd4:	71 05       	cpc	r23, r1
    1bd6:	b1 f0       	breq	.+44     	; 0x1c04 <_ZN14HardwareSerial5beginEmh+0x54>
=======
    19ee:	41 15       	cp	r20, r1
    19f0:	51 4e       	sbci	r21, 0xE1	; 225
    19f2:	61 05       	cpc	r22, r1
    19f4:	71 05       	cpc	r23, r1
    19f6:	b1 f0       	breq	.+44     	; 0x1a24 <_ZN14HardwareSerial5beginEmh+0x54>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    19f8:	41 15       	cp	r20, r1
    19fa:	51 4e       	sbci	r21, 0xE1	; 225
    19fc:	61 05       	cpc	r22, r1
    19fe:	71 05       	cpc	r23, r1
    1a00:	b1 f0       	breq	.+44     	; 0x1a2e <_ZN14HardwareSerial5beginEmh+0x54>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
<<<<<<< HEAD
<<<<<<< HEAD
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	79 e0       	ldi	r23, 0x09	; 9
    1bdc:	8d e3       	ldi	r24, 0x3D	; 61
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a7 01       	movw	r20, r14
    1be2:	96 01       	movw	r18, r12
    1be4:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__udivmodsi4>
    1be8:	da 01       	movw	r26, r20
    1bea:	c9 01       	movw	r24, r18
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	a1 09       	sbc	r26, r1
    1bf0:	b1 09       	sbc	r27, r1
    1bf2:	b6 95       	lsr	r27
    1bf4:	a7 95       	ror	r26
    1bf6:	97 95       	ror	r25
    1bf8:	87 95       	ror	r24
    1bfa:	9c 01       	movw	r18, r24
=======
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	79 e0       	ldi	r23, 0x09	; 9
    19fc:	8d e3       	ldi	r24, 0x3D	; 61
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a7 01       	movw	r20, r14
    1a02:	96 01       	movw	r18, r12
    1a04:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__udivmodsi4>
    1a08:	da 01       	movw	r26, r20
    1a0a:	c9 01       	movw	r24, r18
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	a1 09       	sbc	r26, r1
    1a10:	b1 09       	sbc	r27, r1
    1a12:	b6 95       	lsr	r27
    1a14:	a7 95       	ror	r26
    1a16:	97 95       	ror	r25
    1a18:	87 95       	ror	r24
    1a1a:	9c 01       	movw	r18, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	79 e0       	ldi	r23, 0x09	; 9
    1a06:	8d e3       	ldi	r24, 0x3D	; 61
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	a7 01       	movw	r20, r14
    1a0c:	96 01       	movw	r18, r12
    1a0e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__udivmodsi4>
    1a12:	da 01       	movw	r26, r20
    1a14:	c9 01       	movw	r24, r18
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	a1 09       	sbc	r26, r1
    1a1a:	b1 09       	sbc	r27, r1
    1a1c:	b6 95       	lsr	r27
    1a1e:	a7 95       	ror	r26
    1a20:	97 95       	ror	r25
    1a22:	87 95       	ror	r24
    1a24:	9c 01       	movw	r18, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
<<<<<<< HEAD
<<<<<<< HEAD
    1bfc:	21 15       	cp	r18, r1
    1bfe:	80 e1       	ldi	r24, 0x10	; 16
    1c00:	38 07       	cpc	r19, r24
    1c02:	a8 f0       	brcs	.+42     	; 0x1c2e <_ZN14HardwareSerial5beginEmh+0x7e>
=======
    1a26:	21 15       	cp	r18, r1
    1a28:	80 e1       	ldi	r24, 0x10	; 16
    1a2a:	38 07       	cpc	r19, r24
    1a2c:	a8 f0       	brcs	.+42     	; 0x1a58 <_ZN14HardwareSerial5beginEmh+0x7e>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  {
    *_ucsra = 0;
    1a2e:	e8 89       	ldd	r30, Y+16	; 0x10
    1a30:	f9 89       	ldd	r31, Y+17	; 0x11
    1a32:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
<<<<<<< HEAD
    1c0a:	60 e8       	ldi	r22, 0x80	; 128
    1c0c:	74 e8       	ldi	r23, 0x84	; 132
    1c0e:	8e e1       	ldi	r24, 0x1E	; 30
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a7 01       	movw	r20, r14
    1c14:	96 01       	movw	r18, r12
    1c16:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__udivmodsi4>
    1c1a:	da 01       	movw	r26, r20
    1c1c:	c9 01       	movw	r24, r18
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	a1 09       	sbc	r26, r1
    1c22:	b1 09       	sbc	r27, r1
    1c24:	b6 95       	lsr	r27
    1c26:	a7 95       	ror	r26
    1c28:	97 95       	ror	r25
    1c2a:	87 95       	ror	r24
    1c2c:	9c 01       	movw	r18, r24
=======
    1a1c:	21 15       	cp	r18, r1
    1a1e:	80 e1       	ldi	r24, 0x10	; 16
    1a20:	38 07       	cpc	r19, r24
    1a22:	a8 f0       	brcs	.+42     	; 0x1a4e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1a24:	e8 89       	ldd	r30, Y+16	; 0x10
    1a26:	f9 89       	ldd	r31, Y+17	; 0x11
    1a28:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1a2a:	60 e8       	ldi	r22, 0x80	; 128
    1a2c:	74 e8       	ldi	r23, 0x84	; 132
    1a2e:	8e e1       	ldi	r24, 0x1E	; 30
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a7 01       	movw	r20, r14
    1a34:	96 01       	movw	r18, r12
    1a36:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__udivmodsi4>
    1a3a:	da 01       	movw	r26, r20
    1a3c:	c9 01       	movw	r24, r18
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	a1 09       	sbc	r26, r1
    1a42:	b1 09       	sbc	r27, r1
    1a44:	b6 95       	lsr	r27
    1a46:	a7 95       	ror	r26
    1a48:	97 95       	ror	r25
    1a4a:	87 95       	ror	r24
    1a4c:	9c 01       	movw	r18, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1a34:	60 e8       	ldi	r22, 0x80	; 128
    1a36:	74 e8       	ldi	r23, 0x84	; 132
    1a38:	8e e1       	ldi	r24, 0x1E	; 30
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a7 01       	movw	r20, r14
    1a3e:	96 01       	movw	r18, r12
    1a40:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__udivmodsi4>
    1a44:	da 01       	movw	r26, r20
    1a46:	c9 01       	movw	r24, r18
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	a1 09       	sbc	r26, r1
    1a4c:	b1 09       	sbc	r27, r1
    1a4e:	b6 95       	lsr	r27
    1a50:	a7 95       	ror	r26
    1a52:	97 95       	ror	r25
    1a54:	87 95       	ror	r24
    1a56:	9c 01       	movw	r18, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
<<<<<<< HEAD
<<<<<<< HEAD
    1c2e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c30:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c32:	30 83       	st	Z, r19
=======
    1a58:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a5a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a5c:	30 83       	st	Z, r19
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  *_ubrrl = baud_setting;
    1a5e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a60:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a62:	20 83       	st	Z, r18

  _written = false;
<<<<<<< HEAD
    1c3a:	18 8e       	std	Y+24, r1	; 0x18
=======
    1a4e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a50:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a52:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1a54:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a56:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a58:	20 83       	st	Z, r18

  _written = false;
    1a5a:	18 8e       	std	Y+24, r1	; 0x18
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1a64:	18 8e       	std	Y+24, r1	; 0x18
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
<<<<<<< HEAD
<<<<<<< HEAD
    1c3c:	ec 89       	ldd	r30, Y+20	; 0x14
    1c3e:	fd 89       	ldd	r31, Y+21	; 0x15
    1c40:	10 83       	st	Z, r17
=======
    1a66:	ec 89       	ldd	r30, Y+20	; 0x14
    1a68:	fd 89       	ldd	r31, Y+21	; 0x15
    1a6a:	10 83       	st	Z, r17
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  
  sbi(*_ucsrb, RXEN0);
    1a6c:	ea 89       	ldd	r30, Y+18	; 0x12
    1a6e:	fb 89       	ldd	r31, Y+19	; 0x13
    1a70:	80 81       	ld	r24, Z
    1a72:	80 61       	ori	r24, 0x10	; 16
    1a74:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1a76:	ea 89       	ldd	r30, Y+18	; 0x12
    1a78:	fb 89       	ldd	r31, Y+19	; 0x13
    1a7a:	80 81       	ld	r24, Z
    1a7c:	88 60       	ori	r24, 0x08	; 8
    1a7e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1a80:	ea 89       	ldd	r30, Y+18	; 0x12
    1a82:	fb 89       	ldd	r31, Y+19	; 0x13
    1a84:	80 81       	ld	r24, Z
    1a86:	80 68       	ori	r24, 0x80	; 128
    1a88:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1a8a:	ea 89       	ldd	r30, Y+18	; 0x12
    1a8c:	fb 89       	ldd	r31, Y+19	; 0x13
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 7d       	andi	r24, 0xDF	; 223
    1a92:	80 83       	st	Z, r24
}
<<<<<<< HEAD
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	08 95       	ret

00001c7a <_ZN5Print17availableForWriteEv>:
=======
    1a5c:	ec 89       	ldd	r30, Y+20	; 0x14
    1a5e:	fd 89       	ldd	r31, Y+21	; 0x15
    1a60:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1a62:	ea 89       	ldd	r30, Y+18	; 0x12
    1a64:	fb 89       	ldd	r31, Y+19	; 0x13
    1a66:	80 81       	ld	r24, Z
    1a68:	80 61       	ori	r24, 0x10	; 16
    1a6a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1a6c:	ea 89       	ldd	r30, Y+18	; 0x12
    1a6e:	fb 89       	ldd	r31, Y+19	; 0x13
    1a70:	80 81       	ld	r24, Z
    1a72:	88 60       	ori	r24, 0x08	; 8
    1a74:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1a76:	ea 89       	ldd	r30, Y+18	; 0x12
    1a78:	fb 89       	ldd	r31, Y+19	; 0x13
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 68       	ori	r24, 0x80	; 128
    1a7e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1a80:	ea 89       	ldd	r30, Y+18	; 0x12
    1a82:	fb 89       	ldd	r31, Y+19	; 0x13
    1a84:	80 81       	ld	r24, Z
    1a86:	8f 7d       	andi	r24, 0xDF	; 223
    1a88:	80 83       	st	Z, r24
}
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	df 90       	pop	r13
    1a96:	cf 90       	pop	r12
    1a98:	08 95       	ret

00001a9a <_ZN5Print17availableForWriteEv>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	08 95       	ret

00001aa4 <_ZN5Print17availableForWriteEv>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
<<<<<<< HEAD
<<<<<<< HEAD
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	08 95       	ret

00001c80 <_ZN5Print5flushEv>:
=======
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	08 95       	ret

00001aa0 <_ZN5Print5flushEv>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	08 95       	ret

00001aaa <_ZN5Print5flushEv>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
<<<<<<< HEAD
<<<<<<< HEAD
    1c80:	08 95       	ret

00001c82 <__vector_25>:
=======
    1aa0:	08 95       	ret

00001aa2 <__vector_25>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1aaa:	08 95       	ret

00001aac <__vector_25>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
<<<<<<< HEAD
<<<<<<< HEAD
    1c82:	1f 92       	push	r1
    1c84:	0f 92       	push	r0
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	0f 92       	push	r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	0b b6       	in	r0, 0x3b	; 59
    1c8e:	0f 92       	push	r0
    1c90:	2f 93       	push	r18
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
=======
    1aa2:	1f 92       	push	r1
    1aa4:	0f 92       	push	r0
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	0f 92       	push	r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	0b b6       	in	r0, 0x3b	; 59
    1aae:	0f 92       	push	r0
    1ab0:	2f 93       	push	r18
    1ab2:	8f 93       	push	r24
    1ab4:	9f 93       	push	r25
    1ab6:	ef 93       	push	r30
    1ab8:	ff 93       	push	r31
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1aac:	1f 92       	push	r1
    1aae:	0f 92       	push	r0
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	0b b6       	in	r0, 0x3b	; 59
    1ab8:	0f 92       	push	r0
    1aba:	2f 93       	push	r18
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	ef 93       	push	r30
    1ac2:	ff 93       	push	r31
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
<<<<<<< HEAD
<<<<<<< HEAD
    1c9a:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <Serial+0x10>
    1c9e:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <Serial+0x11>
    1ca2:	80 81       	ld	r24, Z
    1ca4:	e0 91 c7 03 	lds	r30, 0x03C7	; 0x8003c7 <Serial+0x16>
    1ca8:	f0 91 c8 03 	lds	r31, 0x03C8	; 0x8003c8 <Serial+0x17>
    1cac:	82 fd       	sbrc	r24, 2
    1cae:	12 c0       	rjmp	.+36     	; 0x1cd4 <__vector_25+0x52>
=======
    1ac4:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <Serial+0x10>
    1ac8:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <Serial+0x11>
    1acc:	80 81       	ld	r24, Z
    1ace:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <Serial+0x16>
    1ad2:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <Serial+0x17>
    1ad6:	82 fd       	sbrc	r24, 2
    1ad8:	12 c0       	rjmp	.+36     	; 0x1afe <__vector_25+0x52>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1ada:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
<<<<<<< HEAD
    1cb2:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <Serial+0x19>
    1cb6:	8f 5f       	subi	r24, 0xFF	; 255
    1cb8:	8f 73       	andi	r24, 0x3F	; 63
=======
    1aba:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <Serial+0x10>
    1abe:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <Serial+0x11>
    1ac2:	80 81       	ld	r24, Z
    1ac4:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <Serial+0x16>
    1ac8:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <Serial+0x17>
    1acc:	82 fd       	sbrc	r24, 2
    1ace:	12 c0       	rjmp	.+36     	; 0x1af4 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1ad0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1ad2:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Serial+0x19>
    1ad6:	8f 5f       	subi	r24, 0xFF	; 255
    1ad8:	8f 73       	andi	r24, 0x3F	; 63
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1adc:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Serial+0x19>
    1ae0:	8f 5f       	subi	r24, 0xFF	; 255
    1ae2:	8f 73       	andi	r24, 0x3F	; 63
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
<<<<<<< HEAD
<<<<<<< HEAD
    1cba:	20 91 cb 03 	lds	r18, 0x03CB	; 0x8003cb <Serial+0x1a>
    1cbe:	82 17       	cp	r24, r18
    1cc0:	51 f0       	breq	.+20     	; 0x1cd6 <__vector_25+0x54>
=======
    1ae4:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <Serial+0x1a>
    1ae8:	82 17       	cp	r24, r18
    1aea:	51 f0       	breq	.+20     	; 0x1b00 <__vector_25+0x54>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      _rx_buffer[_rx_buffer_head] = c;
    1aec:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <Serial+0x19>
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	e6 56       	subi	r30, 0x66	; 102
    1af4:	fc 4f       	sbci	r31, 0xFC	; 252
    1af6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
<<<<<<< HEAD
    1cce:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <Serial+0x19>
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <__vector_25+0x54>
=======
    1ada:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <Serial+0x1a>
    1ade:	82 17       	cp	r24, r18
    1ae0:	51 f0       	breq	.+20     	; 0x1af6 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1ae2:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <Serial+0x19>
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	e6 56       	subi	r30, 0x66	; 102
    1aea:	fc 4f       	sbci	r31, 0xFC	; 252
    1aec:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1aee:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <Serial+0x19>
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <__vector_25+0x54>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1af8:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <Serial+0x19>
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <__vector_25+0x54>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
<<<<<<< HEAD
<<<<<<< HEAD
    1cd4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1cd6:	ff 91       	pop	r31
    1cd8:	ef 91       	pop	r30
    1cda:	9f 91       	pop	r25
    1cdc:	8f 91       	pop	r24
    1cde:	2f 91       	pop	r18
    1ce0:	0f 90       	pop	r0
    1ce2:	0b be       	out	0x3b, r0	; 59
    1ce4:	0f 90       	pop	r0
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	0f 90       	pop	r0
    1cea:	1f 90       	pop	r1
    1cec:	18 95       	reti

00001cee <__vector_26>:
=======
    1af4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	2f 91       	pop	r18
    1b00:	0f 90       	pop	r0
    1b02:	0b be       	out	0x3b, r0	; 59
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	0f 90       	pop	r0
    1b0a:	1f 90       	pop	r1
    1b0c:	18 95       	reti

00001b0e <__vector_26>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1afe:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1b00:	ff 91       	pop	r31
    1b02:	ef 91       	pop	r30
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0b be       	out	0x3b, r0	; 59
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	0f 90       	pop	r0
    1b14:	1f 90       	pop	r1
    1b16:	18 95       	reti

00001b18 <__vector_26>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
<<<<<<< HEAD
<<<<<<< HEAD
    1cee:	1f 92       	push	r1
    1cf0:	0f 92       	push	r0
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	0f 92       	push	r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	0b b6       	in	r0, 0x3b	; 59
    1cfa:	0f 92       	push	r0
    1cfc:	2f 93       	push	r18
    1cfe:	3f 93       	push	r19
    1d00:	4f 93       	push	r20
    1d02:	5f 93       	push	r21
    1d04:	6f 93       	push	r22
    1d06:	7f 93       	push	r23
    1d08:	8f 93       	push	r24
    1d0a:	9f 93       	push	r25
    1d0c:	af 93       	push	r26
    1d0e:	bf 93       	push	r27
    1d10:	ef 93       	push	r30
    1d12:	ff 93       	push	r31
=======
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	0b b6       	in	r0, 0x3b	; 59
    1b24:	0f 92       	push	r0
    1b26:	2f 93       	push	r18
    1b28:	3f 93       	push	r19
    1b2a:	4f 93       	push	r20
    1b2c:	5f 93       	push	r21
    1b2e:	6f 93       	push	r22
    1b30:	7f 93       	push	r23
    1b32:	8f 93       	push	r24
    1b34:	9f 93       	push	r25
    1b36:	af 93       	push	r26
    1b38:	bf 93       	push	r27
    1b3a:	ef 93       	push	r30
    1b3c:	ff 93       	push	r31
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  Serial._tx_udr_empty_irq();
    1b3e:	8a e9       	ldi	r24, 0x9A	; 154
    1b40:	93 e0       	ldi	r25, 0x03	; 3
    1b42:	bc de       	rcall	.-648    	; 0x18bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
<<<<<<< HEAD
    1d1a:	ff 91       	pop	r31
    1d1c:	ef 91       	pop	r30
    1d1e:	bf 91       	pop	r27
    1d20:	af 91       	pop	r26
    1d22:	9f 91       	pop	r25
    1d24:	8f 91       	pop	r24
    1d26:	7f 91       	pop	r23
    1d28:	6f 91       	pop	r22
    1d2a:	5f 91       	pop	r21
    1d2c:	4f 91       	pop	r20
    1d2e:	3f 91       	pop	r19
    1d30:	2f 91       	pop	r18
    1d32:	0f 90       	pop	r0
    1d34:	0b be       	out	0x3b, r0	; 59
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	0f 90       	pop	r0
    1d3c:	1f 90       	pop	r1
    1d3e:	18 95       	reti

00001d40 <_Z17Serial0_availablev>:
=======
    1b0e:	1f 92       	push	r1
    1b10:	0f 92       	push	r0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	0f 92       	push	r0
    1b16:	11 24       	eor	r1, r1
    1b18:	0b b6       	in	r0, 0x3b	; 59
    1b1a:	0f 92       	push	r0
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	4f 93       	push	r20
    1b22:	5f 93       	push	r21
    1b24:	6f 93       	push	r22
    1b26:	7f 93       	push	r23
    1b28:	8f 93       	push	r24
    1b2a:	9f 93       	push	r25
    1b2c:	af 93       	push	r26
    1b2e:	bf 93       	push	r27
    1b30:	ef 93       	push	r30
    1b32:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1b34:	8a e9       	ldi	r24, 0x9A	; 154
    1b36:	93 e0       	ldi	r25, 0x03	; 3
    1b38:	bc de       	rcall	.-648    	; 0x18b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1b3a:	ff 91       	pop	r31
    1b3c:	ef 91       	pop	r30
    1b3e:	bf 91       	pop	r27
    1b40:	af 91       	pop	r26
    1b42:	9f 91       	pop	r25
    1b44:	8f 91       	pop	r24
    1b46:	7f 91       	pop	r23
    1b48:	6f 91       	pop	r22
    1b4a:	5f 91       	pop	r21
    1b4c:	4f 91       	pop	r20
    1b4e:	3f 91       	pop	r19
    1b50:	2f 91       	pop	r18
    1b52:	0f 90       	pop	r0
    1b54:	0b be       	out	0x3b, r0	; 59
    1b56:	0f 90       	pop	r0
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	0f 90       	pop	r0
    1b5c:	1f 90       	pop	r1
    1b5e:	18 95       	reti

00001b60 <_Z17Serial0_availablev>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1b44:	ff 91       	pop	r31
    1b46:	ef 91       	pop	r30
    1b48:	bf 91       	pop	r27
    1b4a:	af 91       	pop	r26
    1b4c:	9f 91       	pop	r25
    1b4e:	8f 91       	pop	r24
    1b50:	7f 91       	pop	r23
    1b52:	6f 91       	pop	r22
    1b54:	5f 91       	pop	r21
    1b56:	4f 91       	pop	r20
    1b58:	3f 91       	pop	r19
    1b5a:	2f 91       	pop	r18
    1b5c:	0f 90       	pop	r0
    1b5e:	0b be       	out	0x3b, r0	; 59
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <_Z17Serial0_availablev>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
<<<<<<< HEAD
<<<<<<< HEAD
    1d40:	81 eb       	ldi	r24, 0xB1	; 177
    1d42:	93 e0       	ldi	r25, 0x03	; 3
    1d44:	2e de       	rcall	.-932    	; 0x19a2 <_ZN14HardwareSerial9availableEv>
    1d46:	21 e0       	ldi	r18, 0x01	; 1
    1d48:	89 2b       	or	r24, r25
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <_Z17Serial0_availablev+0xe>
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
=======
    1b6a:	8a e9       	ldi	r24, 0x9A	; 154
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	2e de       	rcall	.-932    	; 0x17cc <_ZN14HardwareSerial9availableEv>
    1b70:	21 e0       	ldi	r18, 0x01	; 1
    1b72:	89 2b       	or	r24, r25
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <_Z17Serial0_availablev+0xe>
    1b76:	20 e0       	ldi	r18, 0x00	; 0
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
}
    1b78:	82 2f       	mov	r24, r18
    1b7a:	08 95       	ret

<<<<<<< HEAD
00001d52 <_GLOBAL__sub_I___vector_25>:
=======
    1b60:	8a e9       	ldi	r24, 0x9A	; 154
    1b62:	93 e0       	ldi	r25, 0x03	; 3
    1b64:	2e de       	rcall	.-932    	; 0x17c2 <_ZN14HardwareSerial9availableEv>
    1b66:	21 e0       	ldi	r18, 0x01	; 1
    1b68:	89 2b       	or	r24, r25
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <_Z17Serial0_availablev+0xe>
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
}
    1b6e:	82 2f       	mov	r24, r18
    1b70:	08 95       	ret

00001b72 <_GLOBAL__sub_I___vector_25>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
00001b7c <_GLOBAL__sub_I___vector_25>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
<<<<<<< HEAD
<<<<<<< HEAD
    1d52:	e1 eb       	ldi	r30, 0xB1	; 177
    1d54:	f3 e0       	ldi	r31, 0x03	; 3
    1d56:	13 82       	std	Z+3, r1	; 0x03
    1d58:	12 82       	std	Z+2, r1	; 0x02
=======
    1b72:	ea e9       	ldi	r30, 0x9A	; 154
    1b74:	f3 e0       	ldi	r31, 0x03	; 3
    1b76:	13 82       	std	Z+3, r1	; 0x03
    1b78:	12 82       	std	Z+2, r1	; 0x02
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1b7c:	ea e9       	ldi	r30, 0x9A	; 154
    1b7e:	f3 e0       	ldi	r31, 0x03	; 3
    1b80:	13 82       	std	Z+3, r1	; 0x03
    1b82:	12 82       	std	Z+2, r1	; 0x02
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
<<<<<<< HEAD
<<<<<<< HEAD
    1d5a:	88 ee       	ldi	r24, 0xE8	; 232
    1d5c:	93 e0       	ldi	r25, 0x03	; 3
    1d5e:	a0 e0       	ldi	r26, 0x00	; 0
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	84 83       	std	Z+4, r24	; 0x04
    1d64:	95 83       	std	Z+5, r25	; 0x05
    1d66:	a6 83       	std	Z+6, r26	; 0x06
    1d68:	b7 83       	std	Z+7, r27	; 0x07
=======
    1b7a:	88 ee       	ldi	r24, 0xE8	; 232
    1b7c:	93 e0       	ldi	r25, 0x03	; 3
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	84 83       	std	Z+4, r24	; 0x04
    1b84:	95 83       	std	Z+5, r25	; 0x05
    1b86:	a6 83       	std	Z+6, r26	; 0x06
    1b88:	b7 83       	std	Z+7, r27	; 0x07
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1b84:	88 ee       	ldi	r24, 0xE8	; 232
    1b86:	93 e0       	ldi	r25, 0x03	; 3
    1b88:	a0 e0       	ldi	r26, 0x00	; 0
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	84 83       	std	Z+4, r24	; 0x04
    1b8e:	95 83       	std	Z+5, r25	; 0x05
    1b90:	a6 83       	std	Z+6, r26	; 0x06
    1b92:	b7 83       	std	Z+7, r27	; 0x07
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
<<<<<<< HEAD
<<<<<<< HEAD
    1d6a:	8c e1       	ldi	r24, 0x1C	; 28
    1d6c:	93 e0       	ldi	r25, 0x03	; 3
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
    1d72:	85 ec       	ldi	r24, 0xC5	; 197
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	95 87       	std	Z+13, r25	; 0x0d
    1d78:	84 87       	std	Z+12, r24	; 0x0c
    1d7a:	84 ec       	ldi	r24, 0xC4	; 196
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	97 87       	std	Z+15, r25	; 0x0f
    1d80:	86 87       	std	Z+14, r24	; 0x0e
    1d82:	80 ec       	ldi	r24, 0xC0	; 192
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	91 8b       	std	Z+17, r25	; 0x11
    1d88:	80 8b       	std	Z+16, r24	; 0x10
    1d8a:	81 ec       	ldi	r24, 0xC1	; 193
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	93 8b       	std	Z+19, r25	; 0x13
    1d90:	82 8b       	std	Z+18, r24	; 0x12
    1d92:	82 ec       	ldi	r24, 0xC2	; 194
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	95 8b       	std	Z+21, r25	; 0x15
    1d98:	84 8b       	std	Z+20, r24	; 0x14
    1d9a:	86 ec       	ldi	r24, 0xC6	; 198
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	97 8b       	std	Z+23, r25	; 0x17
    1da0:	86 8b       	std	Z+22, r24	; 0x16
    1da2:	11 8e       	std	Z+25, r1	; 0x19
    1da4:	12 8e       	std	Z+26, r1	; 0x1a
    1da6:	13 8e       	std	Z+27, r1	; 0x1b
    1da8:	14 8e       	std	Z+28, r1	; 0x1c
    1daa:	08 95       	ret

00001dac <__vector_36>:
=======
    1b8a:	87 e1       	ldi	r24, 0x17	; 23
    1b8c:	93 e0       	ldi	r25, 0x03	; 3
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	80 83       	st	Z, r24
    1b92:	85 ec       	ldi	r24, 0xC5	; 197
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	95 87       	std	Z+13, r25	; 0x0d
    1b98:	84 87       	std	Z+12, r24	; 0x0c
    1b9a:	84 ec       	ldi	r24, 0xC4	; 196
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	97 87       	std	Z+15, r25	; 0x0f
    1ba0:	86 87       	std	Z+14, r24	; 0x0e
    1ba2:	80 ec       	ldi	r24, 0xC0	; 192
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	91 8b       	std	Z+17, r25	; 0x11
    1ba8:	80 8b       	std	Z+16, r24	; 0x10
    1baa:	81 ec       	ldi	r24, 0xC1	; 193
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	93 8b       	std	Z+19, r25	; 0x13
    1bb0:	82 8b       	std	Z+18, r24	; 0x12
    1bb2:	82 ec       	ldi	r24, 0xC2	; 194
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	95 8b       	std	Z+21, r25	; 0x15
    1bb8:	84 8b       	std	Z+20, r24	; 0x14
    1bba:	86 ec       	ldi	r24, 0xC6	; 198
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	97 8b       	std	Z+23, r25	; 0x17
    1bc0:	86 8b       	std	Z+22, r24	; 0x16
    1bc2:	11 8e       	std	Z+25, r1	; 0x19
    1bc4:	12 8e       	std	Z+26, r1	; 0x1a
    1bc6:	13 8e       	std	Z+27, r1	; 0x1b
    1bc8:	14 8e       	std	Z+28, r1	; 0x1c
    1bca:	08 95       	ret

00001bcc <__vector_36>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1b94:	87 e1       	ldi	r24, 0x17	; 23
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
    1b9c:	85 ec       	ldi	r24, 0xC5	; 197
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	95 87       	std	Z+13, r25	; 0x0d
    1ba2:	84 87       	std	Z+12, r24	; 0x0c
    1ba4:	84 ec       	ldi	r24, 0xC4	; 196
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	97 87       	std	Z+15, r25	; 0x0f
    1baa:	86 87       	std	Z+14, r24	; 0x0e
    1bac:	80 ec       	ldi	r24, 0xC0	; 192
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	91 8b       	std	Z+17, r25	; 0x11
    1bb2:	80 8b       	std	Z+16, r24	; 0x10
    1bb4:	81 ec       	ldi	r24, 0xC1	; 193
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	93 8b       	std	Z+19, r25	; 0x13
    1bba:	82 8b       	std	Z+18, r24	; 0x12
    1bbc:	82 ec       	ldi	r24, 0xC2	; 194
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	95 8b       	std	Z+21, r25	; 0x15
    1bc2:	84 8b       	std	Z+20, r24	; 0x14
    1bc4:	86 ec       	ldi	r24, 0xC6	; 198
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	97 8b       	std	Z+23, r25	; 0x17
    1bca:	86 8b       	std	Z+22, r24	; 0x16
    1bcc:	11 8e       	std	Z+25, r1	; 0x19
    1bce:	12 8e       	std	Z+26, r1	; 0x1a
    1bd0:	13 8e       	std	Z+27, r1	; 0x1b
    1bd2:	14 8e       	std	Z+28, r1	; 0x1c
    1bd4:	08 95       	ret

00001bd6 <__vector_36>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
<<<<<<< HEAD
<<<<<<< HEAD
    1dac:	1f 92       	push	r1
    1dae:	0f 92       	push	r0
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	0f 92       	push	r0
    1db4:	11 24       	eor	r1, r1
    1db6:	0b b6       	in	r0, 0x3b	; 59
    1db8:	0f 92       	push	r0
    1dba:	2f 93       	push	r18
    1dbc:	8f 93       	push	r24
    1dbe:	9f 93       	push	r25
    1dc0:	ef 93       	push	r30
    1dc2:	ff 93       	push	r31
=======
    1bcc:	1f 92       	push	r1
    1bce:	0f 92       	push	r0
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	0f 92       	push	r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	0b b6       	in	r0, 0x3b	; 59
    1bd8:	0f 92       	push	r0
    1bda:	2f 93       	push	r18
    1bdc:	8f 93       	push	r24
    1bde:	9f 93       	push	r25
    1be0:	ef 93       	push	r30
    1be2:	ff 93       	push	r31
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	0f 92       	push	r0
    1bde:	11 24       	eor	r1, r1
    1be0:	0b b6       	in	r0, 0x3b	; 59
    1be2:	0f 92       	push	r0
    1be4:	2f 93       	push	r18
    1be6:	8f 93       	push	r24
    1be8:	9f 93       	push	r25
    1bea:	ef 93       	push	r30
    1bec:	ff 93       	push	r31
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
<<<<<<< HEAD
<<<<<<< HEAD
    1dc4:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <Serial1+0x10>
    1dc8:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <Serial1+0x11>
    1dcc:	80 81       	ld	r24, Z
    1dce:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <Serial1+0x16>
    1dd2:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <Serial1+0x17>
    1dd6:	82 fd       	sbrc	r24, 2
    1dd8:	12 c0       	rjmp	.+36     	; 0x1dfe <__vector_36+0x52>
=======
    1bee:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <Serial1+0x10>
    1bf2:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <Serial1+0x11>
    1bf6:	80 81       	ld	r24, Z
    1bf8:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <Serial1+0x16>
    1bfc:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <Serial1+0x17>
    1c00:	82 fd       	sbrc	r24, 2
    1c02:	12 c0       	rjmp	.+36     	; 0x1c28 <__vector_36+0x52>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1c04:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
<<<<<<< HEAD
    1ddc:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <Serial1+0x19>
    1de0:	8f 5f       	subi	r24, 0xFF	; 255
    1de2:	8f 73       	andi	r24, 0x3F	; 63
=======
    1be4:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <Serial1+0x10>
    1be8:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <Serial1+0x11>
    1bec:	80 81       	ld	r24, Z
    1bee:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <Serial1+0x16>
    1bf2:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <Serial1+0x17>
    1bf6:	82 fd       	sbrc	r24, 2
    1bf8:	12 c0       	rjmp	.+36     	; 0x1c1e <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1bfa:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1bfc:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <Serial1+0x19>
    1c00:	8f 5f       	subi	r24, 0xFF	; 255
    1c02:	8f 73       	andi	r24, 0x3F	; 63
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1c06:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <Serial1+0x19>
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	8f 73       	andi	r24, 0x3F	; 63
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
<<<<<<< HEAD
<<<<<<< HEAD
    1de4:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <Serial1+0x1a>
    1de8:	82 17       	cp	r24, r18
    1dea:	51 f0       	breq	.+20     	; 0x1e00 <__vector_36+0x54>
=======
    1c0e:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <Serial1+0x1a>
    1c12:	82 17       	cp	r24, r18
    1c14:	51 f0       	breq	.+20     	; 0x1c2a <__vector_36+0x54>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      _rx_buffer[_rx_buffer_head] = c;
    1c16:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <Serial1+0x19>
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	e9 5c       	subi	r30, 0xC9	; 201
    1c1e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c20:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
<<<<<<< HEAD
    1df8:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <Serial1+0x19>
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <__vector_36+0x54>
=======
    1c04:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <Serial1+0x1a>
    1c08:	82 17       	cp	r24, r18
    1c0a:	51 f0       	breq	.+20     	; 0x1c20 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1c0c:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <Serial1+0x19>
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	e9 5c       	subi	r30, 0xC9	; 201
    1c14:	fb 4f       	sbci	r31, 0xFB	; 251
    1c16:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1c18:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <Serial1+0x19>
    1c1c:	01 c0       	rjmp	.+2      	; 0x1c20 <__vector_36+0x54>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1c22:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <Serial1+0x19>
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <__vector_36+0x54>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
<<<<<<< HEAD
<<<<<<< HEAD
    1dfe:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1e00:	ff 91       	pop	r31
    1e02:	ef 91       	pop	r30
    1e04:	9f 91       	pop	r25
    1e06:	8f 91       	pop	r24
    1e08:	2f 91       	pop	r18
    1e0a:	0f 90       	pop	r0
    1e0c:	0b be       	out	0x3b, r0	; 59
    1e0e:	0f 90       	pop	r0
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	0f 90       	pop	r0
    1e14:	1f 90       	pop	r1
    1e16:	18 95       	reti

00001e18 <__vector_37>:
=======
    1c1e:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1c20:	ff 91       	pop	r31
    1c22:	ef 91       	pop	r30
    1c24:	9f 91       	pop	r25
    1c26:	8f 91       	pop	r24
    1c28:	2f 91       	pop	r18
    1c2a:	0f 90       	pop	r0
    1c2c:	0b be       	out	0x3b, r0	; 59
    1c2e:	0f 90       	pop	r0
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	0f 90       	pop	r0
    1c34:	1f 90       	pop	r1
    1c36:	18 95       	reti

00001c38 <__vector_37>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1c28:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1c2a:	ff 91       	pop	r31
    1c2c:	ef 91       	pop	r30
    1c2e:	9f 91       	pop	r25
    1c30:	8f 91       	pop	r24
    1c32:	2f 91       	pop	r18
    1c34:	0f 90       	pop	r0
    1c36:	0b be       	out	0x3b, r0	; 59
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	0f 90       	pop	r0
    1c3e:	1f 90       	pop	r1
    1c40:	18 95       	reti

00001c42 <__vector_37>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
<<<<<<< HEAD
<<<<<<< HEAD
    1e18:	1f 92       	push	r1
    1e1a:	0f 92       	push	r0
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	0f 92       	push	r0
    1e20:	11 24       	eor	r1, r1
    1e22:	0b b6       	in	r0, 0x3b	; 59
    1e24:	0f 92       	push	r0
    1e26:	2f 93       	push	r18
    1e28:	3f 93       	push	r19
    1e2a:	4f 93       	push	r20
    1e2c:	5f 93       	push	r21
    1e2e:	6f 93       	push	r22
    1e30:	7f 93       	push	r23
    1e32:	8f 93       	push	r24
    1e34:	9f 93       	push	r25
    1e36:	af 93       	push	r26
    1e38:	bf 93       	push	r27
    1e3a:	ef 93       	push	r30
    1e3c:	ff 93       	push	r31
=======
    1c42:	1f 92       	push	r1
    1c44:	0f 92       	push	r0
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	0f 92       	push	r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	0b b6       	in	r0, 0x3b	; 59
    1c4e:	0f 92       	push	r0
    1c50:	2f 93       	push	r18
    1c52:	3f 93       	push	r19
    1c54:	4f 93       	push	r20
    1c56:	5f 93       	push	r21
    1c58:	6f 93       	push	r22
    1c5a:	7f 93       	push	r23
    1c5c:	8f 93       	push	r24
    1c5e:	9f 93       	push	r25
    1c60:	af 93       	push	r26
    1c62:	bf 93       	push	r27
    1c64:	ef 93       	push	r30
    1c66:	ff 93       	push	r31
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  Serial1._tx_udr_empty_irq();
    1c68:	87 e3       	ldi	r24, 0x37	; 55
    1c6a:	94 e0       	ldi	r25, 0x04	; 4
    1c6c:	27 de       	rcall	.-946    	; 0x18bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
<<<<<<< HEAD
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0b be       	out	0x3b, r0	; 59
    1e60:	0f 90       	pop	r0
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	0f 90       	pop	r0
    1e66:	1f 90       	pop	r1
    1e68:	18 95       	reti

00001e6a <_Z17Serial1_availablev>:
=======
    1c38:	1f 92       	push	r1
    1c3a:	0f 92       	push	r0
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	0f 92       	push	r0
    1c40:	11 24       	eor	r1, r1
    1c42:	0b b6       	in	r0, 0x3b	; 59
    1c44:	0f 92       	push	r0
    1c46:	2f 93       	push	r18
    1c48:	3f 93       	push	r19
    1c4a:	4f 93       	push	r20
    1c4c:	5f 93       	push	r21
    1c4e:	6f 93       	push	r22
    1c50:	7f 93       	push	r23
    1c52:	8f 93       	push	r24
    1c54:	9f 93       	push	r25
    1c56:	af 93       	push	r26
    1c58:	bf 93       	push	r27
    1c5a:	ef 93       	push	r30
    1c5c:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1c5e:	87 e3       	ldi	r24, 0x37	; 55
    1c60:	94 e0       	ldi	r25, 0x04	; 4
    1c62:	27 de       	rcall	.-946    	; 0x18b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c64:	ff 91       	pop	r31
    1c66:	ef 91       	pop	r30
    1c68:	bf 91       	pop	r27
    1c6a:	af 91       	pop	r26
    1c6c:	9f 91       	pop	r25
    1c6e:	8f 91       	pop	r24
    1c70:	7f 91       	pop	r23
    1c72:	6f 91       	pop	r22
    1c74:	5f 91       	pop	r21
    1c76:	4f 91       	pop	r20
    1c78:	3f 91       	pop	r19
    1c7a:	2f 91       	pop	r18
    1c7c:	0f 90       	pop	r0
    1c7e:	0b be       	out	0x3b, r0	; 59
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	0f 90       	pop	r0
    1c86:	1f 90       	pop	r1
    1c88:	18 95       	reti

00001c8a <_Z17Serial1_availablev>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1c6e:	ff 91       	pop	r31
    1c70:	ef 91       	pop	r30
    1c72:	bf 91       	pop	r27
    1c74:	af 91       	pop	r26
    1c76:	9f 91       	pop	r25
    1c78:	8f 91       	pop	r24
    1c7a:	7f 91       	pop	r23
    1c7c:	6f 91       	pop	r22
    1c7e:	5f 91       	pop	r21
    1c80:	4f 91       	pop	r20
    1c82:	3f 91       	pop	r19
    1c84:	2f 91       	pop	r18
    1c86:	0f 90       	pop	r0
    1c88:	0b be       	out	0x3b, r0	; 59
    1c8a:	0f 90       	pop	r0
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	0f 90       	pop	r0
    1c90:	1f 90       	pop	r1
    1c92:	18 95       	reti

00001c94 <_Z17Serial1_availablev>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
<<<<<<< HEAD
<<<<<<< HEAD
    1e6a:	8e e4       	ldi	r24, 0x4E	; 78
    1e6c:	94 e0       	ldi	r25, 0x04	; 4
    1e6e:	99 dd       	rcall	.-1230   	; 0x19a2 <_ZN14HardwareSerial9availableEv>
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	89 2b       	or	r24, r25
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <_Z17Serial1_availablev+0xe>
    1e76:	20 e0       	ldi	r18, 0x00	; 0
}
    1e78:	82 2f       	mov	r24, r18
    1e7a:	08 95       	ret

00001e7c <_GLOBAL__sub_I___vector_36>:
    1e7c:	ee e4       	ldi	r30, 0x4E	; 78
    1e7e:	f4 e0       	ldi	r31, 0x04	; 4
    1e80:	13 82       	std	Z+3, r1	; 0x03
    1e82:	12 82       	std	Z+2, r1	; 0x02
    1e84:	88 ee       	ldi	r24, 0xE8	; 232
    1e86:	93 e0       	ldi	r25, 0x03	; 3
    1e88:	a0 e0       	ldi	r26, 0x00	; 0
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	84 83       	std	Z+4, r24	; 0x04
    1e8e:	95 83       	std	Z+5, r25	; 0x05
    1e90:	a6 83       	std	Z+6, r26	; 0x06
    1e92:	b7 83       	std	Z+7, r27	; 0x07
=======
    1c8a:	87 e3       	ldi	r24, 0x37	; 55
    1c8c:	94 e0       	ldi	r25, 0x04	; 4
    1c8e:	99 dd       	rcall	.-1230   	; 0x17c2 <_ZN14HardwareSerial9availableEv>
    1c90:	21 e0       	ldi	r18, 0x01	; 1
    1c92:	89 2b       	or	r24, r25
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <_Z17Serial1_availablev+0xe>
    1c96:	20 e0       	ldi	r18, 0x00	; 0
}
    1c98:	82 2f       	mov	r24, r18
    1c9a:	08 95       	ret

00001c9c <_GLOBAL__sub_I___vector_36>:
    1c9c:	e7 e3       	ldi	r30, 0x37	; 55
    1c9e:	f4 e0       	ldi	r31, 0x04	; 4
    1ca0:	13 82       	std	Z+3, r1	; 0x03
    1ca2:	12 82       	std	Z+2, r1	; 0x02
    1ca4:	88 ee       	ldi	r24, 0xE8	; 232
    1ca6:	93 e0       	ldi	r25, 0x03	; 3
    1ca8:	a0 e0       	ldi	r26, 0x00	; 0
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	84 83       	std	Z+4, r24	; 0x04
    1cae:	95 83       	std	Z+5, r25	; 0x05
    1cb0:	a6 83       	std	Z+6, r26	; 0x06
    1cb2:	b7 83       	std	Z+7, r27	; 0x07
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1c94:	87 e3       	ldi	r24, 0x37	; 55
    1c96:	94 e0       	ldi	r25, 0x04	; 4
    1c98:	99 dd       	rcall	.-1230   	; 0x17cc <_ZN14HardwareSerial9availableEv>
    1c9a:	21 e0       	ldi	r18, 0x01	; 1
    1c9c:	89 2b       	or	r24, r25
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <_Z17Serial1_availablev+0xe>
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
}
    1ca2:	82 2f       	mov	r24, r18
    1ca4:	08 95       	ret

00001ca6 <_GLOBAL__sub_I___vector_36>:
    1ca6:	e7 e3       	ldi	r30, 0x37	; 55
    1ca8:	f4 e0       	ldi	r31, 0x04	; 4
    1caa:	13 82       	std	Z+3, r1	; 0x03
    1cac:	12 82       	std	Z+2, r1	; 0x02
    1cae:	88 ee       	ldi	r24, 0xE8	; 232
    1cb0:	93 e0       	ldi	r25, 0x03	; 3
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	84 83       	std	Z+4, r24	; 0x04
    1cb8:	95 83       	std	Z+5, r25	; 0x05
    1cba:	a6 83       	std	Z+6, r26	; 0x06
    1cbc:	b7 83       	std	Z+7, r27	; 0x07
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
<<<<<<< HEAD
<<<<<<< HEAD
    1e94:	8c e1       	ldi	r24, 0x1C	; 28
    1e96:	93 e0       	ldi	r25, 0x03	; 3
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
    1e9c:	8d ec       	ldi	r24, 0xCD	; 205
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	95 87       	std	Z+13, r25	; 0x0d
    1ea2:	84 87       	std	Z+12, r24	; 0x0c
    1ea4:	8c ec       	ldi	r24, 0xCC	; 204
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	97 87       	std	Z+15, r25	; 0x0f
    1eaa:	86 87       	std	Z+14, r24	; 0x0e
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	91 8b       	std	Z+17, r25	; 0x11
    1eb2:	80 8b       	std	Z+16, r24	; 0x10
    1eb4:	89 ec       	ldi	r24, 0xC9	; 201
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	93 8b       	std	Z+19, r25	; 0x13
    1eba:	82 8b       	std	Z+18, r24	; 0x12
    1ebc:	8a ec       	ldi	r24, 0xCA	; 202
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	95 8b       	std	Z+21, r25	; 0x15
    1ec2:	84 8b       	std	Z+20, r24	; 0x14
    1ec4:	8e ec       	ldi	r24, 0xCE	; 206
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	97 8b       	std	Z+23, r25	; 0x17
    1eca:	86 8b       	std	Z+22, r24	; 0x16
    1ecc:	11 8e       	std	Z+25, r1	; 0x19
    1ece:	12 8e       	std	Z+26, r1	; 0x1a
    1ed0:	13 8e       	std	Z+27, r1	; 0x1b
    1ed2:	14 8e       	std	Z+28, r1	; 0x1c
    1ed4:	08 95       	ret

00001ed6 <initVariant>:
    1ed6:	08 95       	ret

00001ed8 <main>:
=======
    1cb4:	87 e1       	ldi	r24, 0x17	; 23
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
    1cbc:	8d ec       	ldi	r24, 0xCD	; 205
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	95 87       	std	Z+13, r25	; 0x0d
    1cc2:	84 87       	std	Z+12, r24	; 0x0c
    1cc4:	8c ec       	ldi	r24, 0xCC	; 204
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	97 87       	std	Z+15, r25	; 0x0f
    1cca:	86 87       	std	Z+14, r24	; 0x0e
    1ccc:	88 ec       	ldi	r24, 0xC8	; 200
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	91 8b       	std	Z+17, r25	; 0x11
    1cd2:	80 8b       	std	Z+16, r24	; 0x10
    1cd4:	89 ec       	ldi	r24, 0xC9	; 201
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	93 8b       	std	Z+19, r25	; 0x13
    1cda:	82 8b       	std	Z+18, r24	; 0x12
    1cdc:	8a ec       	ldi	r24, 0xCA	; 202
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	95 8b       	std	Z+21, r25	; 0x15
    1ce2:	84 8b       	std	Z+20, r24	; 0x14
    1ce4:	8e ec       	ldi	r24, 0xCE	; 206
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	97 8b       	std	Z+23, r25	; 0x17
    1cea:	86 8b       	std	Z+22, r24	; 0x16
    1cec:	11 8e       	std	Z+25, r1	; 0x19
    1cee:	12 8e       	std	Z+26, r1	; 0x1a
    1cf0:	13 8e       	std	Z+27, r1	; 0x1b
    1cf2:	14 8e       	std	Z+28, r1	; 0x1c
    1cf4:	08 95       	ret

00001cf6 <initVariant>:
    1cf6:	08 95       	ret

00001cf8 <main>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1cbe:	87 e1       	ldi	r24, 0x17	; 23
    1cc0:	93 e0       	ldi	r25, 0x03	; 3
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    1cc6:	8d ec       	ldi	r24, 0xCD	; 205
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	95 87       	std	Z+13, r25	; 0x0d
    1ccc:	84 87       	std	Z+12, r24	; 0x0c
    1cce:	8c ec       	ldi	r24, 0xCC	; 204
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	97 87       	std	Z+15, r25	; 0x0f
    1cd4:	86 87       	std	Z+14, r24	; 0x0e
    1cd6:	88 ec       	ldi	r24, 0xC8	; 200
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	91 8b       	std	Z+17, r25	; 0x11
    1cdc:	80 8b       	std	Z+16, r24	; 0x10
    1cde:	89 ec       	ldi	r24, 0xC9	; 201
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	93 8b       	std	Z+19, r25	; 0x13
    1ce4:	82 8b       	std	Z+18, r24	; 0x12
    1ce6:	8a ec       	ldi	r24, 0xCA	; 202
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	95 8b       	std	Z+21, r25	; 0x15
    1cec:	84 8b       	std	Z+20, r24	; 0x14
    1cee:	8e ec       	ldi	r24, 0xCE	; 206
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	97 8b       	std	Z+23, r25	; 0x17
    1cf4:	86 8b       	std	Z+22, r24	; 0x16
    1cf6:	11 8e       	std	Z+25, r1	; 0x19
    1cf8:	12 8e       	std	Z+26, r1	; 0x1a
    1cfa:	13 8e       	std	Z+27, r1	; 0x1b
    1cfc:	14 8e       	std	Z+28, r1	; 0x1c
    1cfe:	08 95       	ret

00001d00 <initVariant>:
    1d00:	08 95       	ret

00001d02 <main>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
<<<<<<< HEAD
<<<<<<< HEAD
    1ed8:	d9 d1       	rcall	.+946    	; 0x228c <init>

	initVariant();
    1eda:	fd df       	rcall	.-6      	; 0x1ed6 <initVariant>
    1edc:	0e 94 a9 06 	call	0xd52	; 0xd52 <setup>
=======
    1cf8:	d9 d1       	rcall	.+946    	; 0x20ac <init>

	initVariant();
    1cfa:	fd df       	rcall	.-6      	; 0x1cf6 <initVariant>
    1cfc:	0e 94 44 06 	call	0xc88	; 0xc88 <setup>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1d02:	d9 d1       	rcall	.+946    	; 0x20b6 <init>

	initVariant();
    1d04:	fd df       	rcall	.-6      	; 0x1d00 <initVariant>
    1d06:	0e 94 49 06 	call	0xc92	; 0xc92 <setup>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
<<<<<<< HEAD
<<<<<<< HEAD
    1ee0:	ce e0       	ldi	r28, 0x0E	; 14
=======
    1d00:	ce e1       	ldi	r28, 0x1E	; 30
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1d0a:	c3 e2       	ldi	r28, 0x23	; 35
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
<<<<<<< HEAD
<<<<<<< HEAD
    1ee2:	dd e0       	ldi	r29, 0x0D	; 13
=======
    1d02:	dc e0       	ldi	r29, 0x0C	; 12
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1d0c:	dc e0       	ldi	r29, 0x0C	; 12
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#endif
	
	setup();
    
	for (;;) {
		loop();
<<<<<<< HEAD
<<<<<<< HEAD
    1ee4:	dc d9       	rcall	.-3144   	; 0x129e <loop>
=======
    1d0e:	dc d9       	rcall	.-3144   	; 0x10c8 <loop>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		if (serialEventRun) serialEventRun();
    1d10:	20 97       	sbiw	r28, 0x00	; 0
    1d12:	e9 f3       	breq	.-6      	; 0x1d0e <main+0xc>
    1d14:	98 dd       	rcall	.-1232   	; 0x1846 <_Z14serialEventRunv>
    1d16:	fb cf       	rjmp	.-10     	; 0x1d0e <main+0xc>

<<<<<<< HEAD
00001eee <_ZN5Print5writeEPKhj>:
    1eee:	cf 92       	push	r12
=======
    1d04:	dc d9       	rcall	.-3144   	; 0x10be <loop>
		if (serialEventRun) serialEventRun();
    1d06:	20 97       	sbiw	r28, 0x00	; 0
    1d08:	e9 f3       	breq	.-6      	; 0x1d04 <main+0xc>
    1d0a:	98 dd       	rcall	.-1232   	; 0x183c <_Z14serialEventRunv>
    1d0c:	fb cf       	rjmp	.-10     	; 0x1d04 <main+0xc>

00001d0e <_ZN5Print5writeEPKhj>:
    1d0e:	cf 92       	push	r12
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
00001d18 <_ZN5Print5writeEPKhj>:
    1d18:	cf 92       	push	r12
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
<<<<<<< HEAD
<<<<<<< HEAD
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	6c 01       	movw	r12, r24
    1f00:	7a 01       	movw	r14, r20
    1f02:	8b 01       	movw	r16, r22
    1f04:	c0 e0       	ldi	r28, 0x00	; 0
    1f06:	d0 e0       	ldi	r29, 0x00	; 0
    1f08:	ce 15       	cp	r28, r14
    1f0a:	df 05       	cpc	r29, r15
    1f0c:	81 f0       	breq	.+32     	; 0x1f2e <_ZN5Print5writeEPKhj+0x40>
    1f0e:	d8 01       	movw	r26, r16
    1f10:	6d 91       	ld	r22, X+
    1f12:	8d 01       	movw	r16, r26
    1f14:	d6 01       	movw	r26, r12
    1f16:	ed 91       	ld	r30, X+
    1f18:	fc 91       	ld	r31, X
    1f1a:	01 90       	ld	r0, Z+
    1f1c:	f0 81       	ld	r31, Z
    1f1e:	e0 2d       	mov	r30, r0
    1f20:	c6 01       	movw	r24, r12
    1f22:	19 95       	eicall
    1f24:	89 2b       	or	r24, r25
    1f26:	11 f0       	breq	.+4      	; 0x1f2c <_ZN5Print5writeEPKhj+0x3e>
    1f28:	21 96       	adiw	r28, 0x01	; 1
    1f2a:	ee cf       	rjmp	.-36     	; 0x1f08 <_ZN5Print5writeEPKhj+0x1a>
    1f2c:	7e 01       	movw	r14, r28
    1f2e:	c7 01       	movw	r24, r14
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	08 95       	ret

00001f42 <_ZN5Print5writeEPKc>:
    1f42:	61 15       	cp	r22, r1
    1f44:	71 05       	cpc	r23, r1
    1f46:	79 f0       	breq	.+30     	; 0x1f66 <_ZN5Print5writeEPKc+0x24>
    1f48:	fb 01       	movw	r30, r22
    1f4a:	01 90       	ld	r0, Z+
    1f4c:	00 20       	and	r0, r0
    1f4e:	e9 f7       	brne	.-6      	; 0x1f4a <_ZN5Print5writeEPKc+0x8>
    1f50:	31 97       	sbiw	r30, 0x01	; 1
    1f52:	af 01       	movw	r20, r30
    1f54:	46 1b       	sub	r20, r22
    1f56:	57 0b       	sbc	r21, r23
    1f58:	dc 01       	movw	r26, r24
    1f5a:	ed 91       	ld	r30, X+
    1f5c:	fc 91       	ld	r31, X
    1f5e:	02 80       	ldd	r0, Z+2	; 0x02
    1f60:	f3 81       	ldd	r31, Z+3	; 0x03
    1f62:	e0 2d       	mov	r30, r0
    1f64:	19 94       	eijmp
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	08 95       	ret

00001f6c <_ZN5Print5printERK6String>:
    1f6c:	db 01       	movw	r26, r22
    1f6e:	14 96       	adiw	r26, 0x04	; 4
    1f70:	4d 91       	ld	r20, X+
    1f72:	5c 91       	ld	r21, X
    1f74:	15 97       	sbiw	r26, 0x05	; 5
    1f76:	6d 91       	ld	r22, X+
    1f78:	7c 91       	ld	r23, X
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	ed 91       	ld	r30, X+
    1f7e:	fc 91       	ld	r31, X
    1f80:	02 80       	ldd	r0, Z+2	; 0x02
    1f82:	f3 81       	ldd	r31, Z+3	; 0x03
    1f84:	e0 2d       	mov	r30, r0
    1f86:	19 94       	eijmp

00001f88 <_ZN5Print5printEPKc>:
    1f88:	dc cf       	rjmp	.-72     	; 0x1f42 <_ZN5Print5writeEPKc>

00001f8a <_ZN5Print5printEc>:
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	ed 91       	ld	r30, X+
    1f8e:	fc 91       	ld	r31, X
    1f90:	01 90       	ld	r0, Z+
    1f92:	f0 81       	ld	r31, Z
    1f94:	e0 2d       	mov	r30, r0
    1f96:	19 94       	eijmp

00001f98 <_ZN5Print7printlnEv>:
    1f98:	6a e2       	ldi	r22, 0x2A	; 42
    1f9a:	73 e0       	ldi	r23, 0x03	; 3
    1f9c:	d2 cf       	rjmp	.-92     	; 0x1f42 <_ZN5Print5writeEPKc>

00001f9e <_ZN5Print7printlnEPKc>:
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	ec 01       	movw	r28, r24
    1fa8:	cc df       	rcall	.-104    	; 0x1f42 <_ZN5Print5writeEPKc>
    1faa:	8c 01       	movw	r16, r24
    1fac:	ce 01       	movw	r24, r28
    1fae:	f4 df       	rcall	.-24     	; 0x1f98 <_ZN5Print7printlnEv>
    1fb0:	80 0f       	add	r24, r16
    1fb2:	91 1f       	adc	r25, r17
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	08 95       	ret

00001fbe <_ZN5Print11printNumberEmh>:
    1fbe:	8f 92       	push	r8
    1fc0:	9f 92       	push	r9
    1fc2:	af 92       	push	r10
    1fc4:	bf 92       	push	r11
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	0f 93       	push	r16
    1fcc:	1f 93       	push	r17
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	a1 97       	sbiw	r28, 0x21	; 33
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	7c 01       	movw	r14, r24
    1fe4:	fa 01       	movw	r30, r20
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	19 a2       	std	Y+33, r1	; 0x21
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	08 f4       	brcc	.+2      	; 0x1ff0 <_ZN5Print11printNumberEmh+0x32>
    1fee:	2a e0       	ldi	r18, 0x0A	; 10
    1ff0:	8e 01       	movw	r16, r28
    1ff2:	0f 5d       	subi	r16, 0xDF	; 223
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	82 2e       	mov	r8, r18
    1ff8:	91 2c       	mov	r9, r1
    1ffa:	a1 2c       	mov	r10, r1
    1ffc:	b1 2c       	mov	r11, r1
    1ffe:	bf 01       	movw	r22, r30
    2000:	a5 01       	movw	r20, r10
    2002:	94 01       	movw	r18, r8
    2004:	ce d6       	rcall	.+3484   	; 0x2da2 <__udivmodsi4>
    2006:	f9 01       	movw	r30, r18
    2008:	ca 01       	movw	r24, r20
    200a:	01 50       	subi	r16, 0x01	; 1
    200c:	11 09       	sbc	r17, r1
    200e:	6a 30       	cpi	r22, 0x0A	; 10
    2010:	10 f4       	brcc	.+4      	; 0x2016 <_ZN5Print11printNumberEmh+0x58>
    2012:	60 5d       	subi	r22, 0xD0	; 208
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <_ZN5Print11printNumberEmh+0x5a>
    2016:	69 5c       	subi	r22, 0xC9	; 201
    2018:	d8 01       	movw	r26, r16
    201a:	6c 93       	st	X, r22
    201c:	23 2b       	or	r18, r19
    201e:	24 2b       	or	r18, r20
    2020:	25 2b       	or	r18, r21
    2022:	69 f7       	brne	.-38     	; 0x1ffe <_ZN5Print11printNumberEmh+0x40>
    2024:	b8 01       	movw	r22, r16
    2026:	c7 01       	movw	r24, r14
    2028:	8c df       	rcall	.-232    	; 0x1f42 <_ZN5Print5writeEPKc>
    202a:	a1 96       	adiw	r28, 0x21	; 33
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	ff 90       	pop	r15
    2040:	ef 90       	pop	r14
    2042:	bf 90       	pop	r11
    2044:	af 90       	pop	r10
    2046:	9f 90       	pop	r9
    2048:	8f 90       	pop	r8
    204a:	08 95       	ret

0000204c <_ZN5Print5printEmi>:
    204c:	21 15       	cp	r18, r1
    204e:	31 05       	cpc	r19, r1
    2050:	41 f4       	brne	.+16     	; 0x2062 <_ZN5Print5printEmi+0x16>
    2052:	dc 01       	movw	r26, r24
    2054:	ed 91       	ld	r30, X+
    2056:	fc 91       	ld	r31, X
    2058:	01 90       	ld	r0, Z+
    205a:	f0 81       	ld	r31, Z
    205c:	e0 2d       	mov	r30, r0
    205e:	64 2f       	mov	r22, r20
    2060:	19 94       	eijmp
    2062:	ad cf       	rjmp	.-166    	; 0x1fbe <_ZN5Print11printNumberEmh>

00002064 <_ZN5Print5printEhi>:
    2064:	9a 01       	movw	r18, r20
    2066:	46 2f       	mov	r20, r22
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	ee cf       	rjmp	.-36     	; 0x204c <_ZN5Print5printEmi>

00002070 <_ZN5Print5printEli>:
=======
    1d10:	df 92       	push	r13
    1d12:	ef 92       	push	r14
    1d14:	ff 92       	push	r15
    1d16:	0f 93       	push	r16
    1d18:	1f 93       	push	r17
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	6c 01       	movw	r12, r24
    1d20:	7a 01       	movw	r14, r20
    1d22:	8b 01       	movw	r16, r22
    1d24:	c0 e0       	ldi	r28, 0x00	; 0
    1d26:	d0 e0       	ldi	r29, 0x00	; 0
    1d28:	ce 15       	cp	r28, r14
    1d2a:	df 05       	cpc	r29, r15
    1d2c:	81 f0       	breq	.+32     	; 0x1d4e <_ZN5Print5writeEPKhj+0x40>
    1d2e:	d8 01       	movw	r26, r16
    1d30:	6d 91       	ld	r22, X+
    1d32:	8d 01       	movw	r16, r26
    1d34:	d6 01       	movw	r26, r12
    1d36:	ed 91       	ld	r30, X+
    1d38:	fc 91       	ld	r31, X
    1d3a:	01 90       	ld	r0, Z+
    1d3c:	f0 81       	ld	r31, Z
    1d3e:	e0 2d       	mov	r30, r0
    1d40:	c6 01       	movw	r24, r12
    1d42:	19 95       	eicall
    1d44:	89 2b       	or	r24, r25
    1d46:	11 f0       	breq	.+4      	; 0x1d4c <_ZN5Print5writeEPKhj+0x3e>
    1d48:	21 96       	adiw	r28, 0x01	; 1
    1d4a:	ee cf       	rjmp	.-36     	; 0x1d28 <_ZN5Print5writeEPKhj+0x1a>
    1d4c:	7e 01       	movw	r14, r28
    1d4e:	c7 01       	movw	r24, r14
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	ff 90       	pop	r15
    1d5a:	ef 90       	pop	r14
    1d5c:	df 90       	pop	r13
    1d5e:	cf 90       	pop	r12
    1d60:	08 95       	ret

00001d62 <_ZN5Print5writeEPKc>:
    1d62:	61 15       	cp	r22, r1
    1d64:	71 05       	cpc	r23, r1
    1d66:	79 f0       	breq	.+30     	; 0x1d86 <_ZN5Print5writeEPKc+0x24>
    1d68:	fb 01       	movw	r30, r22
    1d6a:	01 90       	ld	r0, Z+
    1d6c:	00 20       	and	r0, r0
    1d6e:	e9 f7       	brne	.-6      	; 0x1d6a <_ZN5Print5writeEPKc+0x8>
    1d70:	31 97       	sbiw	r30, 0x01	; 1
    1d72:	af 01       	movw	r20, r30
    1d74:	46 1b       	sub	r20, r22
    1d76:	57 0b       	sbc	r21, r23
    1d78:	dc 01       	movw	r26, r24
    1d7a:	ed 91       	ld	r30, X+
    1d7c:	fc 91       	ld	r31, X
    1d7e:	02 80       	ldd	r0, Z+2	; 0x02
    1d80:	f3 81       	ldd	r31, Z+3	; 0x03
    1d82:	e0 2d       	mov	r30, r0
    1d84:	19 94       	eijmp
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	08 95       	ret

00001d8c <_ZN5Print5printERK6String>:
    1d8c:	db 01       	movw	r26, r22
    1d8e:	14 96       	adiw	r26, 0x04	; 4
    1d90:	4d 91       	ld	r20, X+
    1d92:	5c 91       	ld	r21, X
    1d94:	15 97       	sbiw	r26, 0x05	; 5
    1d96:	6d 91       	ld	r22, X+
    1d98:	7c 91       	ld	r23, X
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	ed 91       	ld	r30, X+
    1d9e:	fc 91       	ld	r31, X
    1da0:	02 80       	ldd	r0, Z+2	; 0x02
    1da2:	f3 81       	ldd	r31, Z+3	; 0x03
    1da4:	e0 2d       	mov	r30, r0
    1da6:	19 94       	eijmp

00001da8 <_ZN5Print5printEPKc>:
    1da8:	dc cf       	rjmp	.-72     	; 0x1d62 <_ZN5Print5writeEPKc>

00001daa <_ZN5Print5printEc>:
    1daa:	dc 01       	movw	r26, r24
    1dac:	ed 91       	ld	r30, X+
    1dae:	fc 91       	ld	r31, X
    1db0:	01 90       	ld	r0, Z+
    1db2:	f0 81       	ld	r31, Z
    1db4:	e0 2d       	mov	r30, r0
    1db6:	19 94       	eijmp

00001db8 <_ZN5Print7printlnEv>:
    1db8:	65 e2       	ldi	r22, 0x25	; 37
    1dba:	73 e0       	ldi	r23, 0x03	; 3
    1dbc:	d2 cf       	rjmp	.-92     	; 0x1d62 <_ZN5Print5writeEPKc>

00001dbe <_ZN5Print7printlnEPKc>:
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	ec 01       	movw	r28, r24
    1dc8:	cc df       	rcall	.-104    	; 0x1d62 <_ZN5Print5writeEPKc>
    1dca:	8c 01       	movw	r16, r24
    1dcc:	ce 01       	movw	r24, r28
    1dce:	f4 df       	rcall	.-24     	; 0x1db8 <_ZN5Print7printlnEv>
    1dd0:	80 0f       	add	r24, r16
    1dd2:	91 1f       	adc	r25, r17
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <_ZN5Print11printNumberEmh>:
    1dde:	8f 92       	push	r8
    1de0:	9f 92       	push	r9
    1de2:	af 92       	push	r10
    1de4:	bf 92       	push	r11
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	a1 97       	sbiw	r28, 0x21	; 33
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	7c 01       	movw	r14, r24
    1e04:	fa 01       	movw	r30, r20
    1e06:	cb 01       	movw	r24, r22
    1e08:	19 a2       	std	Y+33, r1	; 0x21
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	08 f4       	brcc	.+2      	; 0x1e10 <_ZN5Print11printNumberEmh+0x32>
    1e0e:	2a e0       	ldi	r18, 0x0A	; 10
    1e10:	8e 01       	movw	r16, r28
    1e12:	0f 5d       	subi	r16, 0xDF	; 223
    1e14:	1f 4f       	sbci	r17, 0xFF	; 255
    1e16:	82 2e       	mov	r8, r18
    1e18:	91 2c       	mov	r9, r1
    1e1a:	a1 2c       	mov	r10, r1
    1e1c:	b1 2c       	mov	r11, r1
    1e1e:	bf 01       	movw	r22, r30
    1e20:	a5 01       	movw	r20, r10
    1e22:	94 01       	movw	r18, r8
    1e24:	ce d6       	rcall	.+3484   	; 0x2bc2 <__udivmodsi4>
    1e26:	f9 01       	movw	r30, r18
    1e28:	ca 01       	movw	r24, r20
    1e2a:	01 50       	subi	r16, 0x01	; 1
    1e2c:	11 09       	sbc	r17, r1
    1e2e:	6a 30       	cpi	r22, 0x0A	; 10
    1e30:	10 f4       	brcc	.+4      	; 0x1e36 <_ZN5Print11printNumberEmh+0x58>
    1e32:	60 5d       	subi	r22, 0xD0	; 208
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <_ZN5Print11printNumberEmh+0x5a>
    1e36:	69 5c       	subi	r22, 0xC9	; 201
    1e38:	d8 01       	movw	r26, r16
    1e3a:	6c 93       	st	X, r22
    1e3c:	23 2b       	or	r18, r19
    1e3e:	24 2b       	or	r18, r20
    1e40:	25 2b       	or	r18, r21
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <_ZN5Print11printNumberEmh+0x40>
    1e44:	b8 01       	movw	r22, r16
    1e46:	c7 01       	movw	r24, r14
    1e48:	8c df       	rcall	.-232    	; 0x1d62 <_ZN5Print5writeEPKc>
    1e4a:	a1 96       	adiw	r28, 0x21	; 33
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	bf 90       	pop	r11
    1e64:	af 90       	pop	r10
    1e66:	9f 90       	pop	r9
    1e68:	8f 90       	pop	r8
    1e6a:	08 95       	ret

00001e6c <_ZN5Print5printEmi>:
    1e6c:	21 15       	cp	r18, r1
    1e6e:	31 05       	cpc	r19, r1
    1e70:	41 f4       	brne	.+16     	; 0x1e82 <_ZN5Print5printEmi+0x16>
    1e72:	dc 01       	movw	r26, r24
    1e74:	ed 91       	ld	r30, X+
    1e76:	fc 91       	ld	r31, X
    1e78:	01 90       	ld	r0, Z+
    1e7a:	f0 81       	ld	r31, Z
    1e7c:	e0 2d       	mov	r30, r0
    1e7e:	64 2f       	mov	r22, r20
    1e80:	19 94       	eijmp
    1e82:	ad cf       	rjmp	.-166    	; 0x1dde <_ZN5Print11printNumberEmh>

00001e84 <_ZN5Print5printEhi>:
    1e84:	9a 01       	movw	r18, r20
    1e86:	46 2f       	mov	r20, r22
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	ee cf       	rjmp	.-36     	; 0x1e6c <_ZN5Print5printEmi>

00001e90 <_ZN5Print5printEli>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1d1a:	df 92       	push	r13
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	6c 01       	movw	r12, r24
    1d2a:	7a 01       	movw	r14, r20
    1d2c:	8b 01       	movw	r16, r22
    1d2e:	c0 e0       	ldi	r28, 0x00	; 0
    1d30:	d0 e0       	ldi	r29, 0x00	; 0
    1d32:	ce 15       	cp	r28, r14
    1d34:	df 05       	cpc	r29, r15
    1d36:	81 f0       	breq	.+32     	; 0x1d58 <_ZN5Print5writeEPKhj+0x40>
    1d38:	d8 01       	movw	r26, r16
    1d3a:	6d 91       	ld	r22, X+
    1d3c:	8d 01       	movw	r16, r26
    1d3e:	d6 01       	movw	r26, r12
    1d40:	ed 91       	ld	r30, X+
    1d42:	fc 91       	ld	r31, X
    1d44:	01 90       	ld	r0, Z+
    1d46:	f0 81       	ld	r31, Z
    1d48:	e0 2d       	mov	r30, r0
    1d4a:	c6 01       	movw	r24, r12
    1d4c:	19 95       	eicall
    1d4e:	89 2b       	or	r24, r25
    1d50:	11 f0       	breq	.+4      	; 0x1d56 <_ZN5Print5writeEPKhj+0x3e>
    1d52:	21 96       	adiw	r28, 0x01	; 1
    1d54:	ee cf       	rjmp	.-36     	; 0x1d32 <_ZN5Print5writeEPKhj+0x1a>
    1d56:	7e 01       	movw	r14, r28
    1d58:	c7 01       	movw	r24, r14
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	ff 90       	pop	r15
    1d64:	ef 90       	pop	r14
    1d66:	df 90       	pop	r13
    1d68:	cf 90       	pop	r12
    1d6a:	08 95       	ret

00001d6c <_ZN5Print5writeEPKc>:
    1d6c:	61 15       	cp	r22, r1
    1d6e:	71 05       	cpc	r23, r1
    1d70:	79 f0       	breq	.+30     	; 0x1d90 <_ZN5Print5writeEPKc+0x24>
    1d72:	fb 01       	movw	r30, r22
    1d74:	01 90       	ld	r0, Z+
    1d76:	00 20       	and	r0, r0
    1d78:	e9 f7       	brne	.-6      	; 0x1d74 <_ZN5Print5writeEPKc+0x8>
    1d7a:	31 97       	sbiw	r30, 0x01	; 1
    1d7c:	af 01       	movw	r20, r30
    1d7e:	46 1b       	sub	r20, r22
    1d80:	57 0b       	sbc	r21, r23
    1d82:	dc 01       	movw	r26, r24
    1d84:	ed 91       	ld	r30, X+
    1d86:	fc 91       	ld	r31, X
    1d88:	02 80       	ldd	r0, Z+2	; 0x02
    1d8a:	f3 81       	ldd	r31, Z+3	; 0x03
    1d8c:	e0 2d       	mov	r30, r0
    1d8e:	19 94       	eijmp
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	08 95       	ret

00001d96 <_ZN5Print5printERK6String>:
    1d96:	db 01       	movw	r26, r22
    1d98:	14 96       	adiw	r26, 0x04	; 4
    1d9a:	4d 91       	ld	r20, X+
    1d9c:	5c 91       	ld	r21, X
    1d9e:	15 97       	sbiw	r26, 0x05	; 5
    1da0:	6d 91       	ld	r22, X+
    1da2:	7c 91       	ld	r23, X
    1da4:	dc 01       	movw	r26, r24
    1da6:	ed 91       	ld	r30, X+
    1da8:	fc 91       	ld	r31, X
    1daa:	02 80       	ldd	r0, Z+2	; 0x02
    1dac:	f3 81       	ldd	r31, Z+3	; 0x03
    1dae:	e0 2d       	mov	r30, r0
    1db0:	19 94       	eijmp

00001db2 <_ZN5Print5printEPKc>:
    1db2:	dc cf       	rjmp	.-72     	; 0x1d6c <_ZN5Print5writeEPKc>

00001db4 <_ZN5Print5printEc>:
    1db4:	dc 01       	movw	r26, r24
    1db6:	ed 91       	ld	r30, X+
    1db8:	fc 91       	ld	r31, X
    1dba:	01 90       	ld	r0, Z+
    1dbc:	f0 81       	ld	r31, Z
    1dbe:	e0 2d       	mov	r30, r0
    1dc0:	19 94       	eijmp

00001dc2 <_ZN5Print7printlnEv>:
    1dc2:	65 e2       	ldi	r22, 0x25	; 37
    1dc4:	73 e0       	ldi	r23, 0x03	; 3
    1dc6:	d2 cf       	rjmp	.-92     	; 0x1d6c <_ZN5Print5writeEPKc>

00001dc8 <_ZN5Print7printlnEPKc>:
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	ec 01       	movw	r28, r24
    1dd2:	cc df       	rcall	.-104    	; 0x1d6c <_ZN5Print5writeEPKc>
    1dd4:	8c 01       	movw	r16, r24
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	f4 df       	rcall	.-24     	; 0x1dc2 <_ZN5Print7printlnEv>
    1dda:	80 0f       	add	r24, r16
    1ddc:	91 1f       	adc	r25, r17
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	08 95       	ret

00001de8 <_ZN5Print11printNumberEmh>:
    1de8:	8f 92       	push	r8
    1dea:	9f 92       	push	r9
    1dec:	af 92       	push	r10
    1dee:	bf 92       	push	r11
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	a1 97       	sbiw	r28, 0x21	; 33
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	7c 01       	movw	r14, r24
    1e0e:	fa 01       	movw	r30, r20
    1e10:	cb 01       	movw	r24, r22
    1e12:	19 a2       	std	Y+33, r1	; 0x21
    1e14:	22 30       	cpi	r18, 0x02	; 2
    1e16:	08 f4       	brcc	.+2      	; 0x1e1a <_ZN5Print11printNumberEmh+0x32>
    1e18:	2a e0       	ldi	r18, 0x0A	; 10
    1e1a:	8e 01       	movw	r16, r28
    1e1c:	0f 5d       	subi	r16, 0xDF	; 223
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	82 2e       	mov	r8, r18
    1e22:	91 2c       	mov	r9, r1
    1e24:	a1 2c       	mov	r10, r1
    1e26:	b1 2c       	mov	r11, r1
    1e28:	bf 01       	movw	r22, r30
    1e2a:	a5 01       	movw	r20, r10
    1e2c:	94 01       	movw	r18, r8
    1e2e:	ce d6       	rcall	.+3484   	; 0x2bcc <__udivmodsi4>
    1e30:	f9 01       	movw	r30, r18
    1e32:	ca 01       	movw	r24, r20
    1e34:	01 50       	subi	r16, 0x01	; 1
    1e36:	11 09       	sbc	r17, r1
    1e38:	6a 30       	cpi	r22, 0x0A	; 10
    1e3a:	10 f4       	brcc	.+4      	; 0x1e40 <_ZN5Print11printNumberEmh+0x58>
    1e3c:	60 5d       	subi	r22, 0xD0	; 208
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <_ZN5Print11printNumberEmh+0x5a>
    1e40:	69 5c       	subi	r22, 0xC9	; 201
    1e42:	d8 01       	movw	r26, r16
    1e44:	6c 93       	st	X, r22
    1e46:	23 2b       	or	r18, r19
    1e48:	24 2b       	or	r18, r20
    1e4a:	25 2b       	or	r18, r21
    1e4c:	69 f7       	brne	.-38     	; 0x1e28 <_ZN5Print11printNumberEmh+0x40>
    1e4e:	b8 01       	movw	r22, r16
    1e50:	c7 01       	movw	r24, r14
    1e52:	8c df       	rcall	.-232    	; 0x1d6c <_ZN5Print5writeEPKc>
    1e54:	a1 96       	adiw	r28, 0x21	; 33
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	ff 90       	pop	r15
    1e6a:	ef 90       	pop	r14
    1e6c:	bf 90       	pop	r11
    1e6e:	af 90       	pop	r10
    1e70:	9f 90       	pop	r9
    1e72:	8f 90       	pop	r8
    1e74:	08 95       	ret

00001e76 <_ZN5Print5printEmi>:
    1e76:	21 15       	cp	r18, r1
    1e78:	31 05       	cpc	r19, r1
    1e7a:	41 f4       	brne	.+16     	; 0x1e8c <_ZN5Print5printEmi+0x16>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	ed 91       	ld	r30, X+
    1e80:	fc 91       	ld	r31, X
    1e82:	01 90       	ld	r0, Z+
    1e84:	f0 81       	ld	r31, Z
    1e86:	e0 2d       	mov	r30, r0
    1e88:	64 2f       	mov	r22, r20
    1e8a:	19 94       	eijmp
    1e8c:	ad cf       	rjmp	.-166    	; 0x1de8 <_ZN5Print11printNumberEmh>

00001e8e <_ZN5Print5printEhi>:
    1e8e:	9a 01       	movw	r18, r20
    1e90:	46 2f       	mov	r20, r22
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	ee cf       	rjmp	.-36     	; 0x1e76 <_ZN5Print5printEmi>

00001e9a <_ZN5Print5printEli>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
<<<<<<< HEAD
<<<<<<< HEAD
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
=======
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  if (base == 0) {
    1eaa:	21 15       	cp	r18, r1
    1eac:	31 05       	cpc	r19, r1
    1eae:	81 f4       	brne	.+32     	; 0x1ed0 <_ZN5Print5printEli+0x36>
    return write(n);
<<<<<<< HEAD
    2086:	dc 01       	movw	r26, r24
    2088:	ed 91       	ld	r30, X+
    208a:	fc 91       	ld	r31, X
    208c:	01 90       	ld	r0, Z+
    208e:	f0 81       	ld	r31, Z
    2090:	e0 2d       	mov	r30, r0
    2092:	64 2f       	mov	r22, r20
=======
    1e90:	cf 92       	push	r12
    1e92:	df 92       	push	r13
    1e94:	ef 92       	push	r14
    1e96:	ff 92       	push	r15
    1e98:	0f 93       	push	r16
    1e9a:	1f 93       	push	r17
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
  if (base == 0) {
    1ea0:	21 15       	cp	r18, r1
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	81 f4       	brne	.+32     	; 0x1ec6 <_ZN5Print5printEli+0x36>
    return write(n);
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	ed 91       	ld	r30, X+
    1eaa:	fc 91       	ld	r31, X
    1eac:	01 90       	ld	r0, Z+
    1eae:	f0 81       	ld	r31, Z
    1eb0:	e0 2d       	mov	r30, r0
    1eb2:	64 2f       	mov	r22, r20
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	ed 91       	ld	r30, X+
    1eb4:	fc 91       	ld	r31, X
    1eb6:	01 90       	ld	r0, Z+
    1eb8:	f0 81       	ld	r31, Z
    1eba:	e0 2d       	mov	r30, r0
    1ebc:	64 2f       	mov	r22, r20
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
=======
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	cf 90       	pop	r12
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
<<<<<<< HEAD
<<<<<<< HEAD
    20a4:	19 94       	eijmp
=======
    1ece:	19 94       	eijmp
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  } else if (base == 10) {
    1ed0:	2a 30       	cpi	r18, 0x0A	; 10
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	f1 f4       	brne	.+60     	; 0x1f12 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    1ed6:	77 ff       	sbrs	r23, 7
    1ed8:	1b c0       	rjmp	.+54     	; 0x1f10 <_ZN5Print5printEli+0x76>
    1eda:	6a 01       	movw	r12, r20
    1edc:	7b 01       	movw	r14, r22
    1ede:	ec 01       	movw	r28, r24
      int t = print('-');
    1ee0:	6d e2       	ldi	r22, 0x2D	; 45
    1ee2:	68 df       	rcall	.-304    	; 0x1db4 <_ZN5Print5printEc>
    1ee4:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
<<<<<<< HEAD
    20bc:	44 27       	eor	r20, r20
    20be:	55 27       	eor	r21, r21
    20c0:	ba 01       	movw	r22, r20
    20c2:	4c 19       	sub	r20, r12
    20c4:	5d 09       	sbc	r21, r13
    20c6:	6e 09       	sbc	r22, r14
    20c8:	7f 09       	sbc	r23, r15
    20ca:	2a e0       	ldi	r18, 0x0A	; 10
    20cc:	ce 01       	movw	r24, r28
    20ce:	77 df       	rcall	.-274    	; 0x1fbe <_ZN5Print11printNumberEmh>
    20d0:	80 0f       	add	r24, r16
    20d2:	91 1f       	adc	r25, r17
=======
    1ec4:	19 94       	eijmp
  } else if (base == 10) {
    1ec6:	2a 30       	cpi	r18, 0x0A	; 10
    1ec8:	31 05       	cpc	r19, r1
    1eca:	f1 f4       	brne	.+60     	; 0x1f08 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    1ecc:	77 ff       	sbrs	r23, 7
    1ece:	1b c0       	rjmp	.+54     	; 0x1f06 <_ZN5Print5printEli+0x76>
    1ed0:	6a 01       	movw	r12, r20
    1ed2:	7b 01       	movw	r14, r22
    1ed4:	ec 01       	movw	r28, r24
      int t = print('-');
    1ed6:	6d e2       	ldi	r22, 0x2D	; 45
    1ed8:	68 df       	rcall	.-304    	; 0x1daa <_ZN5Print5printEc>
    1eda:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1edc:	44 27       	eor	r20, r20
    1ede:	55 27       	eor	r21, r21
    1ee0:	ba 01       	movw	r22, r20
    1ee2:	4c 19       	sub	r20, r12
    1ee4:	5d 09       	sbc	r21, r13
    1ee6:	6e 09       	sbc	r22, r14
    1ee8:	7f 09       	sbc	r23, r15
    1eea:	2a e0       	ldi	r18, 0x0A	; 10
    1eec:	ce 01       	movw	r24, r28
    1eee:	77 df       	rcall	.-274    	; 0x1dde <_ZN5Print11printNumberEmh>
    1ef0:	80 0f       	add	r24, r16
    1ef2:	91 1f       	adc	r25, r17
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1ee6:	44 27       	eor	r20, r20
    1ee8:	55 27       	eor	r21, r21
    1eea:	ba 01       	movw	r22, r20
    1eec:	4c 19       	sub	r20, r12
    1eee:	5d 09       	sbc	r21, r13
    1ef0:	6e 09       	sbc	r22, r14
    1ef2:	7f 09       	sbc	r23, r15
    1ef4:	2a e0       	ldi	r18, 0x0A	; 10
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	77 df       	rcall	.-274    	; 0x1de8 <_ZN5Print11printNumberEmh>
    1efa:	80 0f       	add	r24, r16
    1efc:	91 1f       	adc	r25, r17
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	df 90       	pop	r13
    20e2:	cf 90       	pop	r12
    20e4:	08 95       	ret
=======
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	08 95       	ret
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	08 95       	ret
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
<<<<<<< HEAD
<<<<<<< HEAD
    20e6:	2a e0       	ldi	r18, 0x0A	; 10
=======
    1f06:	2a e0       	ldi	r18, 0x0A	; 10
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1f10:	2a e0       	ldi	r18, 0x0A	; 10
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  } else {
    return printNumber(n, base);
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	df 90       	pop	r13
=======
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
<<<<<<< HEAD
<<<<<<< HEAD
    20f6:	cf 90       	pop	r12
    20f8:	62 cf       	rjmp	.-316    	; 0x1fbe <_ZN5Print11printNumberEmh>

000020fa <_ZN5Print5printEii>:
=======
    1f16:	cf 90       	pop	r12
    1f18:	62 cf       	rjmp	.-316    	; 0x1dde <_ZN5Print11printNumberEmh>

00001f1a <_ZN5Print5printEii>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1f20:	cf 90       	pop	r12
    1f22:	62 cf       	rjmp	.-316    	; 0x1de8 <_ZN5Print11printNumberEmh>

00001f24 <_ZN5Print5printEii>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
<<<<<<< HEAD
<<<<<<< HEAD
    20fa:	9a 01       	movw	r18, r20
=======
    1f24:	9a 01       	movw	r18, r20
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  return print((long) n, base);
    1f26:	ab 01       	movw	r20, r22
    1f28:	77 0f       	add	r23, r23
    1f2a:	66 0b       	sbc	r22, r22
    1f2c:	77 0b       	sbc	r23, r23
    1f2e:	b5 cf       	rjmp	.-150    	; 0x1e9a <_ZN5Print5printEli>

<<<<<<< HEAD
00002106 <_ZN5Print7printlnEii>:
=======
    1f1a:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1f1c:	ab 01       	movw	r20, r22
    1f1e:	77 0f       	add	r23, r23
    1f20:	66 0b       	sbc	r22, r22
    1f22:	77 0b       	sbc	r23, r23
    1f24:	b5 cf       	rjmp	.-150    	; 0x1e90 <_ZN5Print5printEli>

00001f26 <_ZN5Print7printlnEii>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
00001f30 <_ZN5Print7printlnEii>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
<<<<<<< HEAD
<<<<<<< HEAD
    2106:	0f 93       	push	r16
    2108:	1f 93       	push	r17
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	ec 01       	movw	r28, r24
=======
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	ec 01       	movw	r28, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  size_t n = print(num, base);
    1f3a:	f4 df       	rcall	.-24     	; 0x1f24 <_ZN5Print5printEii>
    1f3c:	8c 01       	movw	r16, r24
  n += println();
    1f3e:	ce 01       	movw	r24, r28
    1f40:	40 df       	rcall	.-384    	; 0x1dc2 <_ZN5Print7printlnEv>
  return n;
}
<<<<<<< HEAD
    2118:	80 0f       	add	r24, r16
    211a:	91 1f       	adc	r25, r17
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	08 95       	ret

00002126 <__vector_23>:
=======
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1f30:	f4 df       	rcall	.-24     	; 0x1f1a <_ZN5Print5printEii>
    1f32:	8c 01       	movw	r16, r24
  n += println();
    1f34:	ce 01       	movw	r24, r28
    1f36:	40 df       	rcall	.-384    	; 0x1db8 <_ZN5Print7printlnEv>
  return n;
}
    1f38:	80 0f       	add	r24, r16
    1f3a:	91 1f       	adc	r25, r17
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	08 95       	ret

00001f46 <__vector_23>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1f42:	80 0f       	add	r24, r16
    1f44:	91 1f       	adc	r25, r17
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	08 95       	ret

00001f50 <__vector_23>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
<<<<<<< HEAD
<<<<<<< HEAD
    2126:	1f 92       	push	r1
    2128:	0f 92       	push	r0
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	0f 92       	push	r0
    212e:	11 24       	eor	r1, r1
    2130:	2f 93       	push	r18
    2132:	3f 93       	push	r19
    2134:	8f 93       	push	r24
    2136:	9f 93       	push	r25
    2138:	af 93       	push	r26
    213a:	bf 93       	push	r27
    213c:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <timer0_millis>
    2140:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <timer0_millis+0x1>
    2144:	a0 91 ee 04 	lds	r26, 0x04EE	; 0x8004ee <timer0_millis+0x2>
    2148:	b0 91 ef 04 	lds	r27, 0x04EF	; 0x8004ef <timer0_millis+0x3>
    214c:	30 91 eb 04 	lds	r19, 0x04EB	; 0x8004eb <timer0_fract>
    2150:	23 e0       	ldi	r18, 0x03	; 3
    2152:	23 0f       	add	r18, r19
    2154:	2d 37       	cpi	r18, 0x7D	; 125
    2156:	20 f4       	brcc	.+8      	; 0x2160 <__vector_23+0x3a>
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	a1 1d       	adc	r26, r1
    215c:	b1 1d       	adc	r27, r1
    215e:	05 c0       	rjmp	.+10     	; 0x216a <__vector_23+0x44>
    2160:	26 e8       	ldi	r18, 0x86	; 134
    2162:	23 0f       	add	r18, r19
    2164:	02 96       	adiw	r24, 0x02	; 2
    2166:	a1 1d       	adc	r26, r1
    2168:	b1 1d       	adc	r27, r1
    216a:	20 93 eb 04 	sts	0x04EB, r18	; 0x8004eb <timer0_fract>
    216e:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <timer0_millis>
    2172:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <timer0_millis+0x1>
    2176:	a0 93 ee 04 	sts	0x04EE, r26	; 0x8004ee <timer0_millis+0x2>
    217a:	b0 93 ef 04 	sts	0x04EF, r27	; 0x8004ef <timer0_millis+0x3>
    217e:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <timer0_overflow_count>
    2182:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <timer0_overflow_count+0x1>
    2186:	a0 91 f2 04 	lds	r26, 0x04F2	; 0x8004f2 <timer0_overflow_count+0x2>
    218a:	b0 91 f3 04 	lds	r27, 0x04F3	; 0x8004f3 <timer0_overflow_count+0x3>
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	a1 1d       	adc	r26, r1
    2192:	b1 1d       	adc	r27, r1
    2194:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <timer0_overflow_count>
    2198:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <timer0_overflow_count+0x1>
    219c:	a0 93 f2 04 	sts	0x04F2, r26	; 0x8004f2 <timer0_overflow_count+0x2>
    21a0:	b0 93 f3 04 	sts	0x04F3, r27	; 0x8004f3 <timer0_overflow_count+0x3>
    21a4:	bf 91       	pop	r27
    21a6:	af 91       	pop	r26
    21a8:	9f 91       	pop	r25
    21aa:	8f 91       	pop	r24
    21ac:	3f 91       	pop	r19
    21ae:	2f 91       	pop	r18
    21b0:	0f 90       	pop	r0
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	0f 90       	pop	r0
    21b6:	1f 90       	pop	r1
    21b8:	18 95       	reti

000021ba <micros>:
=======
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	2f 93       	push	r18
    1f52:	3f 93       	push	r19
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	af 93       	push	r26
    1f5a:	bf 93       	push	r27
    1f5c:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <timer0_millis>
    1f60:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <timer0_millis+0x1>
    1f64:	a0 91 d7 04 	lds	r26, 0x04D7	; 0x8004d7 <timer0_millis+0x2>
    1f68:	b0 91 d8 04 	lds	r27, 0x04D8	; 0x8004d8 <timer0_millis+0x3>
    1f6c:	30 91 d4 04 	lds	r19, 0x04D4	; 0x8004d4 <timer0_fract>
    1f70:	23 e0       	ldi	r18, 0x03	; 3
    1f72:	23 0f       	add	r18, r19
    1f74:	2d 37       	cpi	r18, 0x7D	; 125
    1f76:	20 f4       	brcc	.+8      	; 0x1f80 <__vector_23+0x3a>
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	a1 1d       	adc	r26, r1
    1f7c:	b1 1d       	adc	r27, r1
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <__vector_23+0x44>
    1f80:	26 e8       	ldi	r18, 0x86	; 134
    1f82:	23 0f       	add	r18, r19
    1f84:	02 96       	adiw	r24, 0x02	; 2
    1f86:	a1 1d       	adc	r26, r1
    1f88:	b1 1d       	adc	r27, r1
    1f8a:	20 93 d4 04 	sts	0x04D4, r18	; 0x8004d4 <timer0_fract>
    1f8e:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <timer0_millis>
    1f92:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <timer0_millis+0x1>
    1f96:	a0 93 d7 04 	sts	0x04D7, r26	; 0x8004d7 <timer0_millis+0x2>
    1f9a:	b0 93 d8 04 	sts	0x04D8, r27	; 0x8004d8 <timer0_millis+0x3>
    1f9e:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <timer0_overflow_count>
    1fa2:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <timer0_overflow_count+0x1>
    1fa6:	a0 91 db 04 	lds	r26, 0x04DB	; 0x8004db <timer0_overflow_count+0x2>
    1faa:	b0 91 dc 04 	lds	r27, 0x04DC	; 0x8004dc <timer0_overflow_count+0x3>
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	a1 1d       	adc	r26, r1
    1fb2:	b1 1d       	adc	r27, r1
    1fb4:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <timer0_overflow_count>
    1fb8:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <timer0_overflow_count+0x1>
    1fbc:	a0 93 db 04 	sts	0x04DB, r26	; 0x8004db <timer0_overflow_count+0x2>
    1fc0:	b0 93 dc 04 	sts	0x04DC, r27	; 0x8004dc <timer0_overflow_count+0x3>
    1fc4:	bf 91       	pop	r27
    1fc6:	af 91       	pop	r26
    1fc8:	9f 91       	pop	r25
    1fca:	8f 91       	pop	r24
    1fcc:	3f 91       	pop	r19
    1fce:	2f 91       	pop	r18
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <micros>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1f50:	1f 92       	push	r1
    1f52:	0f 92       	push	r0
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	0f 92       	push	r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	2f 93       	push	r18
    1f5c:	3f 93       	push	r19
    1f5e:	8f 93       	push	r24
    1f60:	9f 93       	push	r25
    1f62:	af 93       	push	r26
    1f64:	bf 93       	push	r27
    1f66:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <timer0_millis>
    1f6a:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <timer0_millis+0x1>
    1f6e:	a0 91 d7 04 	lds	r26, 0x04D7	; 0x8004d7 <timer0_millis+0x2>
    1f72:	b0 91 d8 04 	lds	r27, 0x04D8	; 0x8004d8 <timer0_millis+0x3>
    1f76:	30 91 d4 04 	lds	r19, 0x04D4	; 0x8004d4 <timer0_fract>
    1f7a:	23 e0       	ldi	r18, 0x03	; 3
    1f7c:	23 0f       	add	r18, r19
    1f7e:	2d 37       	cpi	r18, 0x7D	; 125
    1f80:	20 f4       	brcc	.+8      	; 0x1f8a <__vector_23+0x3a>
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	a1 1d       	adc	r26, r1
    1f86:	b1 1d       	adc	r27, r1
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <__vector_23+0x44>
    1f8a:	26 e8       	ldi	r18, 0x86	; 134
    1f8c:	23 0f       	add	r18, r19
    1f8e:	02 96       	adiw	r24, 0x02	; 2
    1f90:	a1 1d       	adc	r26, r1
    1f92:	b1 1d       	adc	r27, r1
    1f94:	20 93 d4 04 	sts	0x04D4, r18	; 0x8004d4 <timer0_fract>
    1f98:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <timer0_millis>
    1f9c:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <timer0_millis+0x1>
    1fa0:	a0 93 d7 04 	sts	0x04D7, r26	; 0x8004d7 <timer0_millis+0x2>
    1fa4:	b0 93 d8 04 	sts	0x04D8, r27	; 0x8004d8 <timer0_millis+0x3>
    1fa8:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <timer0_overflow_count>
    1fac:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <timer0_overflow_count+0x1>
    1fb0:	a0 91 db 04 	lds	r26, 0x04DB	; 0x8004db <timer0_overflow_count+0x2>
    1fb4:	b0 91 dc 04 	lds	r27, 0x04DC	; 0x8004dc <timer0_overflow_count+0x3>
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	a1 1d       	adc	r26, r1
    1fbc:	b1 1d       	adc	r27, r1
    1fbe:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <timer0_overflow_count>
    1fc2:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <timer0_overflow_count+0x1>
    1fc6:	a0 93 db 04 	sts	0x04DB, r26	; 0x8004db <timer0_overflow_count+0x2>
    1fca:	b0 93 dc 04 	sts	0x04DC, r27	; 0x8004dc <timer0_overflow_count+0x3>
    1fce:	bf 91       	pop	r27
    1fd0:	af 91       	pop	r26
    1fd2:	9f 91       	pop	r25
    1fd4:	8f 91       	pop	r24
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	0f 90       	pop	r0
    1fe0:	1f 90       	pop	r1
    1fe2:	18 95       	reti

00001fe4 <micros>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
<<<<<<< HEAD
<<<<<<< HEAD
    21ba:	3f b7       	in	r19, 0x3f	; 63
=======
    1fe4:	3f b7       	in	r19, 0x3f	; 63
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	
	cli();
    1fe6:	f8 94       	cli
	m = timer0_overflow_count;
    1fe8:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <timer0_overflow_count>
    1fec:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <timer0_overflow_count+0x1>
    1ff0:	a0 91 db 04 	lds	r26, 0x04DB	; 0x8004db <timer0_overflow_count+0x2>
    1ff4:	b0 91 dc 04 	lds	r27, 0x04DC	; 0x8004dc <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
<<<<<<< HEAD
    21ce:	26 b5       	in	r18, 0x26	; 38
=======
    1fda:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1fdc:	f8 94       	cli
	m = timer0_overflow_count;
    1fde:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <timer0_overflow_count>
    1fe2:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <timer0_overflow_count+0x1>
    1fe6:	a0 91 db 04 	lds	r26, 0x04DB	; 0x8004db <timer0_overflow_count+0x2>
    1fea:	b0 91 dc 04 	lds	r27, 0x04DC	; 0x8004dc <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1fee:	26 b5       	in	r18, 0x26	; 38
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1ff8:	26 b5       	in	r18, 0x26	; 38
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
<<<<<<< HEAD
<<<<<<< HEAD
    21d0:	a8 9b       	sbis	0x15, 0	; 21
    21d2:	05 c0       	rjmp	.+10     	; 0x21de <micros+0x24>
    21d4:	2f 3f       	cpi	r18, 0xFF	; 255
    21d6:	19 f0       	breq	.+6      	; 0x21de <micros+0x24>
		m++;
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	a1 1d       	adc	r26, r1
    21dc:	b1 1d       	adc	r27, r1
=======
    1ff0:	a8 9b       	sbis	0x15, 0	; 21
    1ff2:	05 c0       	rjmp	.+10     	; 0x1ffe <micros+0x24>
    1ff4:	2f 3f       	cpi	r18, 0xFF	; 255
    1ff6:	19 f0       	breq	.+6      	; 0x1ffe <micros+0x24>
		m++;
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	b1 1d       	adc	r27, r1
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    1ffa:	a8 9b       	sbis	0x15, 0	; 21
    1ffc:	05 c0       	rjmp	.+10     	; 0x2008 <micros+0x24>
    1ffe:	2f 3f       	cpi	r18, 0xFF	; 255
    2000:	19 f0       	breq	.+6      	; 0x2008 <micros+0x24>
		m++;
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	a1 1d       	adc	r26, r1
    2006:	b1 1d       	adc	r27, r1
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
<<<<<<< HEAD
<<<<<<< HEAD
    21de:	3f bf       	out	0x3f, r19	; 63
=======
    2008:	3f bf       	out	0x3f, r19	; 63
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    200a:	ba 2f       	mov	r27, r26
    200c:	a9 2f       	mov	r26, r25
    200e:	98 2f       	mov	r25, r24
    2010:	88 27       	eor	r24, r24
    2012:	82 0f       	add	r24, r18
    2014:	91 1d       	adc	r25, r1
    2016:	a1 1d       	adc	r26, r1
    2018:	b1 1d       	adc	r27, r1
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	42 e0       	ldi	r20, 0x02	; 2
    2020:	66 0f       	add	r22, r22
    2022:	77 1f       	adc	r23, r23
    2024:	88 1f       	adc	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	4a 95       	dec	r20
    202a:	d1 f7       	brne	.-12     	; 0x2020 <micros+0x3c>
}
    202c:	08 95       	ret

0000202e <delay>:

void delay(unsigned long ms)
{
    202e:	8f 92       	push	r8
    2030:	9f 92       	push	r9
    2032:	af 92       	push	r10
    2034:	bf 92       	push	r11
    2036:	cf 92       	push	r12
    2038:	df 92       	push	r13
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	6b 01       	movw	r12, r22
    2040:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2042:	d0 df       	rcall	.-96     	; 0x1fe4 <micros>
    2044:	4b 01       	movw	r8, r22
    2046:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2048:	c1 14       	cp	r12, r1
    204a:	d1 04       	cpc	r13, r1
    204c:	e1 04       	cpc	r14, r1
    204e:	f1 04       	cpc	r15, r1
		yield();
    2050:	f1 f0       	breq	.+60     	; 0x208e <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2052:	d9 d3       	rcall	.+1970   	; 0x2806 <yield>
    2054:	c7 df       	rcall	.-114    	; 0x1fe4 <micros>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	88 19       	sub	r24, r8
    205c:	99 09       	sbc	r25, r9
    205e:	aa 09       	sbc	r26, r10
    2060:	bb 09       	sbc	r27, r11
    2062:	88 3e       	cpi	r24, 0xE8	; 232
    2064:	93 40       	sbci	r25, 0x03	; 3
    2066:	a1 05       	cpc	r26, r1
    2068:	b1 05       	cpc	r27, r1
    206a:	70 f3       	brcs	.-36     	; 0x2048 <delay+0x1a>
			ms--;
    206c:	21 e0       	ldi	r18, 0x01	; 1
    206e:	c2 1a       	sub	r12, r18
    2070:	d1 08       	sbc	r13, r1
    2072:	e1 08       	sbc	r14, r1
    2074:	f1 08       	sbc	r15, r1
			start += 1000;
<<<<<<< HEAD
    224c:	88 ee       	ldi	r24, 0xE8	; 232
    224e:	88 0e       	add	r8, r24
    2250:	83 e0       	ldi	r24, 0x03	; 3
    2252:	98 1e       	adc	r9, r24
    2254:	a1 1c       	adc	r10, r1
    2256:	b1 1c       	adc	r11, r1
=======
    1ffe:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2000:	ba 2f       	mov	r27, r26
    2002:	a9 2f       	mov	r26, r25
    2004:	98 2f       	mov	r25, r24
    2006:	88 27       	eor	r24, r24
    2008:	82 0f       	add	r24, r18
    200a:	91 1d       	adc	r25, r1
    200c:	a1 1d       	adc	r26, r1
    200e:	b1 1d       	adc	r27, r1
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	42 e0       	ldi	r20, 0x02	; 2
    2016:	66 0f       	add	r22, r22
    2018:	77 1f       	adc	r23, r23
    201a:	88 1f       	adc	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	4a 95       	dec	r20
    2020:	d1 f7       	brne	.-12     	; 0x2016 <micros+0x3c>
}
    2022:	08 95       	ret

00002024 <delay>:

void delay(unsigned long ms)
=======
    2076:	88 ee       	ldi	r24, 0xE8	; 232
    2078:	88 0e       	add	r8, r24
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	98 1e       	adc	r9, r24
    207e:	a1 1c       	adc	r10, r1
    2080:	b1 1c       	adc	r11, r1
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
{
    2024:	8f 92       	push	r8
    2026:	9f 92       	push	r9
    2028:	af 92       	push	r10
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	6b 01       	movw	r12, r22
    2036:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2038:	d0 df       	rcall	.-96     	; 0x1fda <micros>
    203a:	4b 01       	movw	r8, r22
    203c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    203e:	c1 14       	cp	r12, r1
    2040:	d1 04       	cpc	r13, r1
    2042:	e1 04       	cpc	r14, r1
    2044:	f1 04       	cpc	r15, r1
		yield();
    2046:	f1 f0       	breq	.+60     	; 0x2084 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
<<<<<<< HEAD
    2048:	d9 d3       	rcall	.+1970   	; 0x27fc <yield>
    204a:	c7 df       	rcall	.-114    	; 0x1fda <micros>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	88 19       	sub	r24, r8
    2052:	99 09       	sbc	r25, r9
    2054:	aa 09       	sbc	r26, r10
    2056:	bb 09       	sbc	r27, r11
    2058:	88 3e       	cpi	r24, 0xE8	; 232
    205a:	93 40       	sbci	r25, 0x03	; 3
    205c:	a1 05       	cpc	r26, r1
    205e:	b1 05       	cpc	r27, r1
    2060:	70 f3       	brcs	.-36     	; 0x203e <delay+0x1a>
			ms--;
    2062:	21 e0       	ldi	r18, 0x01	; 1
    2064:	c2 1a       	sub	r12, r18
    2066:	d1 08       	sbc	r13, r1
    2068:	e1 08       	sbc	r14, r1
    206a:	f1 08       	sbc	r15, r1
			start += 1000;
    206c:	88 ee       	ldi	r24, 0xE8	; 232
    206e:	88 0e       	add	r8, r24
    2070:	83 e0       	ldi	r24, 0x03	; 3
    2072:	98 1e       	adc	r9, r24
    2074:	a1 1c       	adc	r10, r1
    2076:	b1 1c       	adc	r11, r1
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
<<<<<<< HEAD
    2258:	c1 14       	cp	r12, r1
    225a:	d1 04       	cpc	r13, r1
    225c:	e1 04       	cpc	r14, r1
    225e:	f1 04       	cpc	r15, r1
    2260:	21 f7       	brne	.-56     	; 0x222a <delay+0x26>
    2262:	dd cf       	rjmp	.-70     	; 0x221e <delay+0x1a>
=======
    2078:	c1 14       	cp	r12, r1
    207a:	d1 04       	cpc	r13, r1
    207c:	e1 04       	cpc	r14, r1
    207e:	f1 04       	cpc	r15, r1
    2080:	21 f7       	brne	.-56     	; 0x204a <delay+0x26>
    2082:	dd cf       	rjmp	.-70     	; 0x203e <delay+0x1a>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2082:	c1 14       	cp	r12, r1
    2084:	d1 04       	cpc	r13, r1
    2086:	e1 04       	cpc	r14, r1
    2088:	f1 04       	cpc	r15, r1
    208a:	21 f7       	brne	.-56     	; 0x2054 <delay+0x26>
    208c:	dd cf       	rjmp	.-70     	; 0x2048 <delay+0x1a>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
			ms--;
			start += 1000;
		}
	}
}
<<<<<<< HEAD
<<<<<<< HEAD
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	df 90       	pop	r13
    226a:	cf 90       	pop	r12
    226c:	bf 90       	pop	r11
    226e:	af 90       	pop	r10
    2270:	9f 90       	pop	r9
    2272:	8f 90       	pop	r8
    2274:	08 95       	ret

00002276 <delayMicroseconds>:
=======
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	df 90       	pop	r13
    208a:	cf 90       	pop	r12
    208c:	bf 90       	pop	r11
    208e:	af 90       	pop	r10
    2090:	9f 90       	pop	r9
    2092:	8f 90       	pop	r8
    2094:	08 95       	ret

00002096 <delayMicroseconds>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	df 90       	pop	r13
    2094:	cf 90       	pop	r12
    2096:	bf 90       	pop	r11
    2098:	af 90       	pop	r10
    209a:	9f 90       	pop	r9
    209c:	8f 90       	pop	r8
    209e:	08 95       	ret

000020a0 <delayMicroseconds>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
<<<<<<< HEAD
<<<<<<< HEAD
    2276:	82 30       	cpi	r24, 0x02	; 2
    2278:	91 05       	cpc	r25, r1
    227a:	38 f0       	brcs	.+14     	; 0x228a <delayMicroseconds+0x14>
=======
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	91 05       	cpc	r25, r1
    209a:	38 f0       	brcs	.+14     	; 0x20aa <delayMicroseconds+0x14>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20a0:	82 30       	cpi	r24, 0x02	; 2
    20a2:	91 05       	cpc	r25, r1
    20a4:	38 f0       	brcs	.+14     	; 0x20b4 <delayMicroseconds+0x14>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
<<<<<<< HEAD
<<<<<<< HEAD
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
=======
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
<<<<<<< HEAD
<<<<<<< HEAD
    2284:	05 97       	sbiw	r24, 0x05	; 5
=======
    20a4:	05 97       	sbiw	r24, 0x05	; 5
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20ae:	05 97       	sbiw	r24, 0x05	; 5
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	

#endif

	// busy wait
	__asm__ __volatile__ (
<<<<<<< HEAD
<<<<<<< HEAD
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <delayMicroseconds+0x10>
    228a:	08 95       	ret

0000228c <init>:
=======
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <delayMicroseconds+0x10>
    20aa:	08 95       	ret

000020ac <init>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <delayMicroseconds+0x10>
    20b4:	08 95       	ret

000020b6 <init>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
<<<<<<< HEAD
<<<<<<< HEAD
    228c:	78 94       	sei
=======
    20ac:	78 94       	sei
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20b6:	78 94       	sei
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
<<<<<<< HEAD
<<<<<<< HEAD
    228e:	84 b5       	in	r24, 0x24	; 36
    2290:	82 60       	ori	r24, 0x02	; 2
    2292:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2294:	84 b5       	in	r24, 0x24	; 36
    2296:	81 60       	ori	r24, 0x01	; 1
    2298:	84 bd       	out	0x24, r24	; 36
=======
    20ae:	84 b5       	in	r24, 0x24	; 36
    20b0:	82 60       	ori	r24, 0x02	; 2
    20b2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    20b4:	84 b5       	in	r24, 0x24	; 36
    20b6:	81 60       	ori	r24, 0x01	; 1
    20b8:	84 bd       	out	0x24, r24	; 36
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20b8:	84 b5       	in	r24, 0x24	; 36
    20ba:	82 60       	ori	r24, 0x02	; 2
    20bc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    20be:	84 b5       	in	r24, 0x24	; 36
    20c0:	81 60       	ori	r24, 0x01	; 1
    20c2:	84 bd       	out	0x24, r24	; 36
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
<<<<<<< HEAD
<<<<<<< HEAD
    229a:	85 b5       	in	r24, 0x25	; 37
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    22a0:	85 b5       	in	r24, 0x25	; 37
    22a2:	81 60       	ori	r24, 0x01	; 1
    22a4:	85 bd       	out	0x25, r24	; 37
=======
    20ba:	85 b5       	in	r24, 0x25	; 37
    20bc:	82 60       	ori	r24, 0x02	; 2
    20be:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    20c0:	85 b5       	in	r24, 0x25	; 37
    20c2:	81 60       	ori	r24, 0x01	; 1
    20c4:	85 bd       	out	0x25, r24	; 37
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20c4:	85 b5       	in	r24, 0x25	; 37
    20c6:	82 60       	ori	r24, 0x02	; 2
    20c8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    20ca:	85 b5       	in	r24, 0x25	; 37
    20cc:	81 60       	ori	r24, 0x01	; 1
    20ce:	85 bd       	out	0x25, r24	; 37
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
<<<<<<< HEAD
<<<<<<< HEAD
    22a6:	ee e6       	ldi	r30, 0x6E	; 110
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	81 60       	ori	r24, 0x01	; 1
    22ae:	80 83       	st	Z, r24
=======
    20c6:	ee e6       	ldi	r30, 0x6E	; 110
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	81 60       	ori	r24, 0x01	; 1
    20ce:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20d0:	ee e6       	ldi	r30, 0x6E	; 110
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	81 60       	ori	r24, 0x01	; 1
    20d8:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
<<<<<<< HEAD
<<<<<<< HEAD
    22b0:	e1 e8       	ldi	r30, 0x81	; 129
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	10 82       	st	Z, r1
=======
    20da:	e1 e8       	ldi	r30, 0x81	; 129
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	10 82       	st	Z, r1
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    20e0:	80 81       	ld	r24, Z
    20e2:	82 60       	ori	r24, 0x02	; 2
    20e4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
<<<<<<< HEAD
    22bc:	80 81       	ld	r24, Z
    22be:	81 60       	ori	r24, 0x01	; 1
    22c0:	80 83       	st	Z, r24
=======
    20d0:	e1 e8       	ldi	r30, 0x81	; 129
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    20d6:	80 81       	ld	r24, Z
    20d8:	82 60       	ori	r24, 0x02	; 2
    20da:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    20dc:	80 81       	ld	r24, Z
    20de:	81 60       	ori	r24, 0x01	; 1
    20e0:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20e6:	80 81       	ld	r24, Z
    20e8:	81 60       	ori	r24, 0x01	; 1
    20ea:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
<<<<<<< HEAD
<<<<<<< HEAD
    22c2:	e0 e8       	ldi	r30, 0x80	; 128
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	81 60       	ori	r24, 0x01	; 1
    22ca:	80 83       	st	Z, r24
=======
    20e2:	e0 e8       	ldi	r30, 0x80	; 128
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	81 60       	ori	r24, 0x01	; 1
    20ea:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20ec:	e0 e8       	ldi	r30, 0x80	; 128
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	81 60       	ori	r24, 0x01	; 1
    20f4:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
<<<<<<< HEAD
<<<<<<< HEAD
    22cc:	e1 eb       	ldi	r30, 0xB1	; 177
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	84 60       	ori	r24, 0x04	; 4
    22d4:	80 83       	st	Z, r24
=======
    20ec:	e1 eb       	ldi	r30, 0xB1	; 177
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	84 60       	ori	r24, 0x04	; 4
    20f4:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    20f6:	e1 eb       	ldi	r30, 0xB1	; 177
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	84 60       	ori	r24, 0x04	; 4
    20fe:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
<<<<<<< HEAD
<<<<<<< HEAD
    22d6:	e0 eb       	ldi	r30, 0xB0	; 176
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	81 60       	ori	r24, 0x01	; 1
    22de:	80 83       	st	Z, r24
=======
    20f6:	e0 eb       	ldi	r30, 0xB0	; 176
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	81 60       	ori	r24, 0x01	; 1
    20fe:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2100:	e0 eb       	ldi	r30, 0xB0	; 176
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	81 60       	ori	r24, 0x01	; 1
    2108:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
<<<<<<< HEAD
<<<<<<< HEAD
    22e0:	e1 e9       	ldi	r30, 0x91	; 145
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	82 60       	ori	r24, 0x02	; 2
    22e8:	80 83       	st	Z, r24
=======
    210a:	e1 e9       	ldi	r30, 0x91	; 145
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	82 60       	ori	r24, 0x02	; 2
    2112:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	sbi(TCCR3B, CS30);
    2114:	80 81       	ld	r24, Z
    2116:	81 60       	ori	r24, 0x01	; 1
    2118:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
<<<<<<< HEAD
    22f0:	e0 e9       	ldi	r30, 0x90	; 144
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	81 60       	ori	r24, 0x01	; 1
    22f8:	80 83       	st	Z, r24
=======
    2100:	e1 e9       	ldi	r30, 0x91	; 145
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	82 60       	ori	r24, 0x02	; 2
    2108:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    210a:	80 81       	ld	r24, Z
    210c:	81 60       	ori	r24, 0x01	; 1
    210e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2110:	e0 e9       	ldi	r30, 0x90	; 144
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	81 60       	ori	r24, 0x01	; 1
    2118:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    211a:	e0 e9       	ldi	r30, 0x90	; 144
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	81 60       	ori	r24, 0x01	; 1
    2122:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
<<<<<<< HEAD
<<<<<<< HEAD
    22fa:	e1 ea       	ldi	r30, 0xA1	; 161
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	82 60       	ori	r24, 0x02	; 2
    2302:	80 83       	st	Z, r24
=======
    2124:	e1 ea       	ldi	r30, 0xA1	; 161
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	82 60       	ori	r24, 0x02	; 2
    212c:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	sbi(TCCR4B, CS40);
    212e:	80 81       	ld	r24, Z
    2130:	81 60       	ori	r24, 0x01	; 1
    2132:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
<<<<<<< HEAD
    230a:	e0 ea       	ldi	r30, 0xA0	; 160
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	81 60       	ori	r24, 0x01	; 1
    2312:	80 83       	st	Z, r24
=======
    211a:	e1 ea       	ldi	r30, 0xA1	; 161
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	82 60       	ori	r24, 0x02	; 2
    2122:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2124:	80 81       	ld	r24, Z
    2126:	81 60       	ori	r24, 0x01	; 1
    2128:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    212a:	e0 ea       	ldi	r30, 0xA0	; 160
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	81 60       	ori	r24, 0x01	; 1
    2132:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2134:	e0 ea       	ldi	r30, 0xA0	; 160
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	81 60       	ori	r24, 0x01	; 1
    213c:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
<<<<<<< HEAD
<<<<<<< HEAD
    2314:	e1 e2       	ldi	r30, 0x21	; 33
    2316:	f1 e0       	ldi	r31, 0x01	; 1
    2318:	80 81       	ld	r24, Z
    231a:	82 60       	ori	r24, 0x02	; 2
    231c:	80 83       	st	Z, r24
=======
    213e:	e1 e2       	ldi	r30, 0x21	; 33
    2140:	f1 e0       	ldi	r31, 0x01	; 1
    2142:	80 81       	ld	r24, Z
    2144:	82 60       	ori	r24, 0x02	; 2
    2146:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	sbi(TCCR5B, CS50);
    2148:	80 81       	ld	r24, Z
    214a:	81 60       	ori	r24, 0x01	; 1
    214c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
<<<<<<< HEAD
    2324:	e0 e2       	ldi	r30, 0x20	; 32
    2326:	f1 e0       	ldi	r31, 0x01	; 1
    2328:	80 81       	ld	r24, Z
    232a:	81 60       	ori	r24, 0x01	; 1
    232c:	80 83       	st	Z, r24
=======
    2134:	e1 e2       	ldi	r30, 0x21	; 33
    2136:	f1 e0       	ldi	r31, 0x01	; 1
    2138:	80 81       	ld	r24, Z
    213a:	82 60       	ori	r24, 0x02	; 2
    213c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    213e:	80 81       	ld	r24, Z
    2140:	81 60       	ori	r24, 0x01	; 1
    2142:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2144:	e0 e2       	ldi	r30, 0x20	; 32
    2146:	f1 e0       	ldi	r31, 0x01	; 1
    2148:	80 81       	ld	r24, Z
    214a:	81 60       	ori	r24, 0x01	; 1
    214c:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    214e:	e0 e2       	ldi	r30, 0x20	; 32
    2150:	f1 e0       	ldi	r31, 0x01	; 1
    2152:	80 81       	ld	r24, Z
    2154:	81 60       	ori	r24, 0x01	; 1
    2156:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
<<<<<<< HEAD
<<<<<<< HEAD
    232e:	ea e7       	ldi	r30, 0x7A	; 122
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	84 60       	ori	r24, 0x04	; 4
    2336:	80 83       	st	Z, r24
=======
    2158:	ea e7       	ldi	r30, 0x7A	; 122
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	84 60       	ori	r24, 0x04	; 4
    2160:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		sbi(ADCSRA, ADPS1);
    2162:	80 81       	ld	r24, Z
    2164:	82 60       	ori	r24, 0x02	; 2
    2166:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
<<<<<<< HEAD
    233e:	80 81       	ld	r24, Z
    2340:	81 60       	ori	r24, 0x01	; 1
    2342:	80 83       	st	Z, r24
=======
    214e:	ea e7       	ldi	r30, 0x7A	; 122
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	84 60       	ori	r24, 0x04	; 4
    2156:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2158:	80 81       	ld	r24, Z
    215a:	82 60       	ori	r24, 0x02	; 2
    215c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    215e:	80 81       	ld	r24, Z
    2160:	81 60       	ori	r24, 0x01	; 1
    2162:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2168:	80 81       	ld	r24, Z
    216a:	81 60       	ori	r24, 0x01	; 1
    216c:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
<<<<<<< HEAD
<<<<<<< HEAD
    2344:	80 81       	ld	r24, Z
    2346:	80 68       	ori	r24, 0x80	; 128
    2348:	80 83       	st	Z, r24
=======
    2164:	80 81       	ld	r24, Z
    2166:	80 68       	ori	r24, 0x80	; 128
    2168:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    216e:	80 81       	ld	r24, Z
    2170:	80 68       	ori	r24, 0x80	; 128
    2172:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
<<<<<<< HEAD
<<<<<<< HEAD
    234a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    234e:	08 95       	ret

00002350 <turnOffPWM>:
=======
    216a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    216e:	08 95       	ret

00002170 <turnOffPWM>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2174:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    2178:	08 95       	ret

0000217a <turnOffPWM>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
<<<<<<< HEAD
<<<<<<< HEAD
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	fc 01       	movw	r30, r24
    2354:	31 97       	sbiw	r30, 0x01	; 1
    2356:	e2 31       	cpi	r30, 0x12	; 18
    2358:	f1 05       	cpc	r31, r1
    235a:	08 f0       	brcs	.+2      	; 0x235e <turnOffPWM+0xe>
    235c:	4d c0       	rjmp	.+154    	; 0x23f8 <turnOffPWM+0xa8>
    235e:	88 27       	eor	r24, r24
    2360:	ed 54       	subi	r30, 0x4D	; 77
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	8f 4f       	sbci	r24, 0xFF	; 255
    2366:	3f c5       	rjmp	.+2686   	; 0x2de6 <__tablejump2__>
=======
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	fc 01       	movw	r30, r24
    217e:	31 97       	sbiw	r30, 0x01	; 1
    2180:	e2 31       	cpi	r30, 0x12	; 18
    2182:	f1 05       	cpc	r31, r1
    2184:	08 f0       	brcs	.+2      	; 0x2188 <turnOffPWM+0xe>
    2186:	4d c0       	rjmp	.+154    	; 0x2222 <__stack+0x23>
    2188:	88 27       	eor	r24, r24
    218a:	ed 54       	subi	r30, 0x4D	; 77
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	8f 4f       	sbci	r24, 0xFF	; 255
    2190:	3f c5       	rjmp	.+2686   	; 0x2c10 <__tablejump2__>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2192:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2196:	8f 77       	andi	r24, 0x7F	; 127
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    219a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    219e:	8f 7d       	andi	r24, 0xDF	; 223
    21a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    21a4:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
<<<<<<< HEAD
    237c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2380:	87 7f       	andi	r24, 0xF7	; 247
    2382:	f9 cf       	rjmp	.-14     	; 0x2376 <turnOffPWM+0x26>
=======
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	fc 01       	movw	r30, r24
    2174:	31 97       	sbiw	r30, 0x01	; 1
    2176:	e2 31       	cpi	r30, 0x12	; 18
    2178:	f1 05       	cpc	r31, r1
    217a:	08 f0       	brcs	.+2      	; 0x217e <turnOffPWM+0xe>
    217c:	4d c0       	rjmp	.+154    	; 0x2218 <__stack+0x19>
    217e:	88 27       	eor	r24, r24
    2180:	ed 54       	subi	r30, 0x4D	; 77
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	8f 4f       	sbci	r24, 0xFF	; 255
    2186:	3f c5       	rjmp	.+2686   	; 0x2c06 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2188:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    218c:	8f 77       	andi	r24, 0x7F	; 127
    218e:	03 c0       	rjmp	.+6      	; 0x2196 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2190:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2194:	8f 7d       	andi	r24, 0xDF	; 223
    2196:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    219a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    219c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    21a0:	87 7f       	andi	r24, 0xF7	; 247
    21a2:	f9 cf       	rjmp	.-14     	; 0x2196 <turnOffPWM+0x26>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    21a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    21aa:	87 7f       	andi	r24, 0xF7	; 247
    21ac:	f9 cf       	rjmp	.-14     	; 0x21a0 <turnOffPWM+0x26>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
<<<<<<< HEAD
<<<<<<< HEAD
    2384:	84 b5       	in	r24, 0x24	; 36
    2386:	8f 77       	andi	r24, 0x7F	; 127
    2388:	02 c0       	rjmp	.+4      	; 0x238e <turnOffPWM+0x3e>
=======
    21a4:	84 b5       	in	r24, 0x24	; 36
    21a6:	8f 77       	andi	r24, 0x7F	; 127
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <turnOffPWM+0x3e>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    21ae:	84 b5       	in	r24, 0x24	; 36
    21b0:	8f 77       	andi	r24, 0x7F	; 127
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <turnOffPWM+0x3e>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
<<<<<<< HEAD
<<<<<<< HEAD
    238a:	84 b5       	in	r24, 0x24	; 36
    238c:	8f 7d       	andi	r24, 0xDF	; 223
    238e:	84 bd       	out	0x24, r24	; 36
    2390:	08 95       	ret
=======
    21b4:	84 b5       	in	r24, 0x24	; 36
    21b6:	8f 7d       	andi	r24, 0xDF	; 223
    21b8:	84 bd       	out	0x24, r24	; 36
    21ba:	08 95       	ret
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    21bc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    21c0:	8f 77       	andi	r24, 0x7F	; 127
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
<<<<<<< HEAD
    239a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    239e:	8f 7d       	andi	r24, 0xDF	; 223
    23a0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    23a4:	08 95       	ret
=======
    21aa:	84 b5       	in	r24, 0x24	; 36
    21ac:	8f 7d       	andi	r24, 0xDF	; 223
    21ae:	84 bd       	out	0x24, r24	; 36
    21b0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    21b2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    21b6:	8f 77       	andi	r24, 0x7F	; 127
    21b8:	03 c0       	rjmp	.+6      	; 0x21c0 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    21ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    21be:	8f 7d       	andi	r24, 0xDF	; 223
    21c0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    21c4:	08 95       	ret
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    21c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    21c8:	8f 7d       	andi	r24, 0xDF	; 223
    21ca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    21ce:	08 95       	ret
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
<<<<<<< HEAD
<<<<<<< HEAD
    23a6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    23aa:	8f 77       	andi	r24, 0x7F	; 127
    23ac:	07 c0       	rjmp	.+14     	; 0x23bc <turnOffPWM+0x6c>
=======
    21d0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    21d4:	8f 77       	andi	r24, 0x7F	; 127
    21d6:	07 c0       	rjmp	.+14     	; 0x21e6 <turnOffPWM+0x6c>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    21d8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    21dc:	8f 7d       	andi	r24, 0xDF	; 223
    21de:	03 c0       	rjmp	.+6      	; 0x21e6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
<<<<<<< HEAD
    23b6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    23ba:	87 7f       	andi	r24, 0xF7	; 247
    23bc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    23c0:	08 95       	ret
=======
    21c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    21ca:	8f 77       	andi	r24, 0x7F	; 127
    21cc:	07 c0       	rjmp	.+14     	; 0x21dc <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    21ce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    21d2:	8f 7d       	andi	r24, 0xDF	; 223
    21d4:	03 c0       	rjmp	.+6      	; 0x21dc <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    21d6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    21da:	87 7f       	andi	r24, 0xF7	; 247
    21dc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    21e0:	08 95       	ret
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    21e0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    21e4:	87 7f       	andi	r24, 0xF7	; 247
    21e6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    21ea:	08 95       	ret
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
<<<<<<< HEAD
<<<<<<< HEAD
    23c2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    23c6:	8f 77       	andi	r24, 0x7F	; 127
    23c8:	07 c0       	rjmp	.+14     	; 0x23d8 <turnOffPWM+0x88>
=======
    21ec:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    21f0:	8f 77       	andi	r24, 0x7F	; 127
    21f2:	07 c0       	rjmp	.+14     	; 0x2202 <__stack+0x3>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    21f4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    21f8:	8f 7d       	andi	r24, 0xDF	; 223
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <__stack+0x3>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
<<<<<<< HEAD
    23d2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    23d6:	87 7f       	andi	r24, 0xF7	; 247
    23d8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    23dc:	08 95       	ret
=======
    21e2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    21e6:	8f 77       	andi	r24, 0x7F	; 127
    21e8:	07 c0       	rjmp	.+14     	; 0x21f8 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    21ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    21ee:	8f 7d       	andi	r24, 0xDF	; 223
    21f0:	03 c0       	rjmp	.+6      	; 0x21f8 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    21f2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    21f6:	87 7f       	andi	r24, 0xF7	; 247
    21f8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    21fc:	08 95       	ret
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    21fc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2200:	87 7f       	andi	r24, 0xF7	; 247
    2202:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2206:	08 95       	ret
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
<<<<<<< HEAD
<<<<<<< HEAD
    23de:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    23e2:	8f 77       	andi	r24, 0x7F	; 127
    23e4:	07 c0       	rjmp	.+14     	; 0x23f4 <turnOffPWM+0xa4>
=======
    2208:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    220c:	8f 77       	andi	r24, 0x7F	; 127
    220e:	07 c0       	rjmp	.+14     	; 0x221e <__stack+0x1f>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2210:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2214:	8f 7d       	andi	r24, 0xDF	; 223
    2216:	03 c0       	rjmp	.+6      	; 0x221e <__stack+0x1f>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2218:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    221c:	87 7f       	andi	r24, 0xF7	; 247
    221e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2222:	08 95       	ret

<<<<<<< HEAD
000023fa <pinMode>:
=======
    21fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2202:	8f 77       	andi	r24, 0x7F	; 127
    2204:	07 c0       	rjmp	.+14     	; 0x2214 <__stack+0x15>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2206:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    220a:	8f 7d       	andi	r24, 0xDF	; 223
    220c:	03 c0       	rjmp	.+6      	; 0x2214 <__stack+0x15>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    220e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2212:	87 7f       	andi	r24, 0xF7	; 247
    2214:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2218:	08 95       	ret

0000221a <pinMode>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
00002224 <pinMode>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
<<<<<<< HEAD
<<<<<<< HEAD
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
=======
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	uint8_t bit = digitalPinToBitMask(pin);
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	fc 01       	movw	r30, r24
    222c:	e0 53       	subi	r30, 0x30	; 48
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2232:	fc 01       	movw	r30, r24
    2234:	ea 5e       	subi	r30, 0xEA	; 234
    2236:	fd 4f       	sbci	r31, 0xFD	; 253
    2238:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    223a:	88 23       	and	r24, r24
    223c:	61 f1       	breq	.+88     	; 0x2296 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	fc 01       	movw	r30, r24
    2246:	ea 58       	subi	r30, 0x8A	; 138
    2248:	fd 4f       	sbci	r31, 0xFD	; 253
    224a:	c5 91       	lpm	r28, Z+
    224c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    224e:	fc 01       	movw	r30, r24
    2250:	e4 5a       	subi	r30, 0xA4	; 164
    2252:	fd 4f       	sbci	r31, 0xFD	; 253
    2254:	a5 91       	lpm	r26, Z+
    2256:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2258:	61 11       	cpse	r22, r1
    225a:	09 c0       	rjmp	.+18     	; 0x226e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    225c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    225e:	f8 94       	cli
		*reg &= ~bit;
    2260:	88 81       	ld	r24, Y
    2262:	20 95       	com	r18
    2264:	82 23       	and	r24, r18
    2266:	88 83       	st	Y, r24
		*out &= ~bit;
    2268:	ec 91       	ld	r30, X
    226a:	2e 23       	and	r18, r30
    226c:	0b c0       	rjmp	.+22     	; 0x2284 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    226e:	62 30       	cpi	r22, 0x02	; 2
    2270:	61 f4       	brne	.+24     	; 0x228a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2272:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2274:	f8 94       	cli
		*reg &= ~bit;
    2276:	88 81       	ld	r24, Y
    2278:	32 2f       	mov	r19, r18
    227a:	30 95       	com	r19
    227c:	83 23       	and	r24, r19
    227e:	88 83       	st	Y, r24
		*out |= bit;
    2280:	ec 91       	ld	r30, X
    2282:	2e 2b       	or	r18, r30
    2284:	2c 93       	st	X, r18
		SREG = oldSREG;
    2286:	9f bf       	out	0x3f, r25	; 63
    2288:	06 c0       	rjmp	.+12     	; 0x2296 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    228a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    228c:	f8 94       	cli
		*reg |= bit;
    228e:	e8 81       	ld	r30, Y
    2290:	2e 2b       	or	r18, r30
    2292:	28 83       	st	Y, r18
		SREG = oldSREG;
    2294:	8f bf       	out	0x3f, r24	; 63
	}
}
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

<<<<<<< HEAD
00002472 <digitalWrite>:
=======
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	fc 01       	movw	r30, r24
    2222:	e0 53       	subi	r30, 0x30	; 48
    2224:	fe 4f       	sbci	r31, 0xFE	; 254
    2226:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2228:	fc 01       	movw	r30, r24
    222a:	ea 5e       	subi	r30, 0xEA	; 234
    222c:	fd 4f       	sbci	r31, 0xFD	; 253
    222e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2230:	88 23       	and	r24, r24
    2232:	61 f1       	breq	.+88     	; 0x228c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	fc 01       	movw	r30, r24
    223c:	ea 58       	subi	r30, 0x8A	; 138
    223e:	fd 4f       	sbci	r31, 0xFD	; 253
    2240:	c5 91       	lpm	r28, Z+
    2242:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2244:	fc 01       	movw	r30, r24
    2246:	e4 5a       	subi	r30, 0xA4	; 164
    2248:	fd 4f       	sbci	r31, 0xFD	; 253
    224a:	a5 91       	lpm	r26, Z+
    224c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    224e:	61 11       	cpse	r22, r1
    2250:	09 c0       	rjmp	.+18     	; 0x2264 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2252:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2254:	f8 94       	cli
		*reg &= ~bit;
    2256:	88 81       	ld	r24, Y
    2258:	20 95       	com	r18
    225a:	82 23       	and	r24, r18
    225c:	88 83       	st	Y, r24
		*out &= ~bit;
    225e:	ec 91       	ld	r30, X
    2260:	2e 23       	and	r18, r30
    2262:	0b c0       	rjmp	.+22     	; 0x227a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2264:	62 30       	cpi	r22, 0x02	; 2
    2266:	61 f4       	brne	.+24     	; 0x2280 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2268:	9f b7       	in	r25, 0x3f	; 63
                cli();
    226a:	f8 94       	cli
		*reg &= ~bit;
    226c:	88 81       	ld	r24, Y
    226e:	32 2f       	mov	r19, r18
    2270:	30 95       	com	r19
    2272:	83 23       	and	r24, r19
    2274:	88 83       	st	Y, r24
		*out |= bit;
    2276:	ec 91       	ld	r30, X
    2278:	2e 2b       	or	r18, r30
    227a:	2c 93       	st	X, r18
		SREG = oldSREG;
    227c:	9f bf       	out	0x3f, r25	; 63
    227e:	06 c0       	rjmp	.+12     	; 0x228c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2280:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2282:	f8 94       	cli
		*reg |= bit;
    2284:	e8 81       	ld	r30, Y
    2286:	2e 2b       	or	r18, r30
    2288:	28 83       	st	Y, r18
		SREG = oldSREG;
    228a:	8f bf       	out	0x3f, r24	; 63
	}
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <digitalWrite>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
0000229c <digitalWrite>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
<<<<<<< HEAD
<<<<<<< HEAD
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
=======
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	uint8_t timer = digitalPinToTimer(pin);
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	f9 01       	movw	r30, r18
    22a8:	e6 57       	subi	r30, 0x76	; 118
    22aa:	fe 4f       	sbci	r31, 0xFE	; 254
    22ac:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22ae:	f9 01       	movw	r30, r18
    22b0:	e0 53       	subi	r30, 0x30	; 48
    22b2:	fe 4f       	sbci	r31, 0xFE	; 254
    22b4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22b6:	f9 01       	movw	r30, r18
    22b8:	ea 5e       	subi	r30, 0xEA	; 234
    22ba:	fd 4f       	sbci	r31, 0xFD	; 253
    22bc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
<<<<<<< HEAD
    2494:	cc 23       	and	r28, r28
    2496:	b9 f0       	breq	.+46     	; 0x24c6 <digitalWrite+0x54>
    2498:	16 2f       	mov	r17, r22
=======
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	f9 01       	movw	r30, r18
    229e:	e6 57       	subi	r30, 0x76	; 118
    22a0:	fe 4f       	sbci	r31, 0xFE	; 254
    22a2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22a4:	f9 01       	movw	r30, r18
    22a6:	e0 53       	subi	r30, 0x30	; 48
    22a8:	fe 4f       	sbci	r31, 0xFE	; 254
    22aa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22ac:	f9 01       	movw	r30, r18
    22ae:	ea 5e       	subi	r30, 0xEA	; 234
    22b0:	fd 4f       	sbci	r31, 0xFD	; 253
    22b2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    22b4:	cc 23       	and	r28, r28
    22b6:	b9 f0       	breq	.+46     	; 0x22e6 <digitalWrite+0x54>
    22b8:	16 2f       	mov	r17, r22
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    22be:	cc 23       	and	r28, r28
    22c0:	b9 f0       	breq	.+46     	; 0x22f0 <digitalWrite+0x54>
    22c2:	16 2f       	mov	r17, r22
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
<<<<<<< HEAD
<<<<<<< HEAD
    249a:	81 11       	cpse	r24, r1
    249c:	59 df       	rcall	.-334    	; 0x2350 <turnOffPWM>
=======
    22c4:	81 11       	cpse	r24, r1
    22c6:	59 df       	rcall	.-334    	; 0x217a <turnOffPWM>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

	out = portOutputRegister(port);
    22c8:	ec 2f       	mov	r30, r28
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	e4 5a       	subi	r30, 0xA4	; 164
    22d2:	fd 4f       	sbci	r31, 0xFD	; 253
    22d4:	a5 91       	lpm	r26, Z+
    22d6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    22d8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    22da:	f8 94       	cli

	if (val == LOW) {
    22dc:	11 11       	cpse	r17, r1
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <digitalWrite+0x4c>
		*out &= ~bit;
    22e0:	8c 91       	ld	r24, X
    22e2:	d0 95       	com	r29
    22e4:	d8 23       	and	r29, r24
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <digitalWrite+0x50>
	} else {
		*out |= bit;
    22e8:	ec 91       	ld	r30, X
    22ea:	de 2b       	or	r29, r30
    22ec:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    22ee:	9f bf       	out	0x3f, r25	; 63
}
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	08 95       	ret

<<<<<<< HEAD
000024ce <_ZN6StringD1Ev>:
=======
    22ba:	81 11       	cpse	r24, r1
    22bc:	59 df       	rcall	.-334    	; 0x2170 <turnOffPWM>

	out = portOutputRegister(port);
    22be:	ec 2f       	mov	r30, r28
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	e4 5a       	subi	r30, 0xA4	; 164
    22c8:	fd 4f       	sbci	r31, 0xFD	; 253
    22ca:	a5 91       	lpm	r26, Z+
    22cc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    22ce:	9f b7       	in	r25, 0x3f	; 63
	cli();
    22d0:	f8 94       	cli

	if (val == LOW) {
    22d2:	11 11       	cpse	r17, r1
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <digitalWrite+0x4c>
		*out &= ~bit;
    22d6:	8c 91       	ld	r24, X
    22d8:	d0 95       	com	r29
    22da:	d8 23       	and	r29, r24
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <digitalWrite+0x50>
	} else {
		*out |= bit;
    22de:	ec 91       	ld	r30, X
    22e0:	de 2b       	or	r29, r30
    22e2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    22e4:	9f bf       	out	0x3f, r25	; 63
}
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	08 95       	ret

000022ee <_ZN6StringD1Ev>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
000022f8 <_ZN6StringD1Ev>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	move(rval);
}
String::String(StringSumHelper &&rval)
{
	init();
	move(rval);
<<<<<<< HEAD
<<<<<<< HEAD
    24ce:	fc 01       	movw	r30, r24
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	28 c5       	rjmp	.+2640   	; 0x2f26 <free>

000024d6 <_ZN6String10invalidateEv>:
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	ec 01       	movw	r28, r24
    24dc:	88 81       	ld	r24, Y
    24de:	99 81       	ldd	r25, Y+1	; 0x01
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <_ZN6String10invalidateEv+0x10>
    24e4:	20 d5       	rcall	.+2624   	; 0x2f26 <free>
    24e6:	19 82       	std	Y+1, r1	; 0x01
    24e8:	18 82       	st	Y, r1
    24ea:	1d 82       	std	Y+5, r1	; 0x05
    24ec:	1c 82       	std	Y+4, r1	; 0x04
    24ee:	1b 82       	std	Y+3, r1	; 0x03
    24f0:	1a 82       	std	Y+2, r1	; 0x02
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	08 95       	ret

000024f8 <_ZN6String12changeBufferEj>:
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	ec 01       	movw	r28, r24
    2502:	8b 01       	movw	r16, r22
    2504:	6f 5f       	subi	r22, 0xFF	; 255
    2506:	7f 4f       	sbci	r23, 0xFF	; 255
    2508:	88 81       	ld	r24, Y
    250a:	99 81       	ldd	r25, Y+1	; 0x01
    250c:	95 d5       	rcall	.+2858   	; 0x3038 <realloc>
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	31 f0       	breq	.+12     	; 0x251e <_ZN6String12changeBufferEj+0x26>
    2512:	99 83       	std	Y+1, r25	; 0x01
    2514:	88 83       	st	Y, r24
    2516:	1b 83       	std	Y+3, r17	; 0x03
    2518:	0a 83       	std	Y+2, r16	; 0x02
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <_ZN6String12changeBufferEj+0x28>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	08 95       	ret

0000252a <_ZN6String7reserveEj>:
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	ec 01       	movw	r28, r24
    2530:	88 81       	ld	r24, Y
    2532:	99 81       	ldd	r25, Y+1	; 0x01
    2534:	89 2b       	or	r24, r25
    2536:	29 f0       	breq	.+10     	; 0x2542 <_ZN6String7reserveEj+0x18>
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	9b 81       	ldd	r25, Y+3	; 0x03
    253c:	86 17       	cp	r24, r22
    253e:	97 07       	cpc	r25, r23
    2540:	58 f4       	brcc	.+22     	; 0x2558 <_ZN6String7reserveEj+0x2e>
    2542:	ce 01       	movw	r24, r28
    2544:	d9 df       	rcall	.-78     	; 0x24f8 <_ZN6String12changeBufferEj>
    2546:	88 23       	and	r24, r24
    2548:	41 f0       	breq	.+16     	; 0x255a <_ZN6String7reserveEj+0x30>
    254a:	8c 81       	ldd	r24, Y+4	; 0x04
    254c:	9d 81       	ldd	r25, Y+5	; 0x05
    254e:	89 2b       	or	r24, r25
    2550:	19 f4       	brne	.+6      	; 0x2558 <_ZN6String7reserveEj+0x2e>
    2552:	e8 81       	ld	r30, Y
    2554:	f9 81       	ldd	r31, Y+1	; 0x01
    2556:	10 82       	st	Z, r1
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	08 95       	ret

00002560 <_ZN6String4copyEPKcj>:
    2560:	ef 92       	push	r14
    2562:	ff 92       	push	r15
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	ec 01       	movw	r28, r24
    256e:	7b 01       	movw	r14, r22
    2570:	8a 01       	movw	r16, r20
    2572:	ba 01       	movw	r22, r20
    2574:	da df       	rcall	.-76     	; 0x252a <_ZN6String7reserveEj>
    2576:	81 11       	cpse	r24, r1
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <_ZN6String4copyEPKcj+0x20>
    257a:	ce 01       	movw	r24, r28
    257c:	ac df       	rcall	.-168    	; 0x24d6 <_ZN6String10invalidateEv>
    257e:	06 c0       	rjmp	.+12     	; 0x258c <_ZN6String4copyEPKcj+0x2c>
    2580:	1d 83       	std	Y+5, r17	; 0x05
    2582:	0c 83       	std	Y+4, r16	; 0x04
    2584:	b7 01       	movw	r22, r14
    2586:	88 81       	ld	r24, Y
    2588:	99 81       	ldd	r25, Y+1	; 0x01
    258a:	3f d6       	rcall	.+3198   	; 0x320a <strcpy>
    258c:	ce 01       	movw	r24, r28
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	08 95       	ret

0000259c <_ZN6StringC1EPKc>:
    259c:	fc 01       	movw	r30, r24
    259e:	11 82       	std	Z+1, r1	; 0x01
    25a0:	10 82       	st	Z, r1
    25a2:	13 82       	std	Z+3, r1	; 0x03
    25a4:	12 82       	std	Z+2, r1	; 0x02
    25a6:	15 82       	std	Z+5, r1	; 0x05
    25a8:	14 82       	std	Z+4, r1	; 0x04
    25aa:	61 15       	cp	r22, r1
    25ac:	71 05       	cpc	r23, r1
    25ae:	49 f0       	breq	.+18     	; 0x25c2 <_ZN6StringC1EPKc+0x26>
    25b0:	fb 01       	movw	r30, r22
    25b2:	01 90       	ld	r0, Z+
    25b4:	00 20       	and	r0, r0
    25b6:	e9 f7       	brne	.-6      	; 0x25b2 <_ZN6StringC1EPKc+0x16>
    25b8:	31 97       	sbiw	r30, 0x01	; 1
    25ba:	af 01       	movw	r20, r30
    25bc:	46 1b       	sub	r20, r22
    25be:	57 0b       	sbc	r21, r23
    25c0:	cf cf       	rjmp	.-98     	; 0x2560 <_ZN6String4copyEPKcj>
    25c2:	08 95       	ret

000025c4 <_ZN6StringaSERKS_>:
=======
    22ee:	fc 01       	movw	r30, r24
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	28 c5       	rjmp	.+2640   	; 0x2d46 <free>

000022f6 <_ZN6String10invalidateEv>:
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	ec 01       	movw	r28, r24
    22fc:	88 81       	ld	r24, Y
    22fe:	99 81       	ldd	r25, Y+1	; 0x01
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	09 f0       	breq	.+2      	; 0x2306 <_ZN6String10invalidateEv+0x10>
    2304:	20 d5       	rcall	.+2624   	; 0x2d46 <free>
    2306:	19 82       	std	Y+1, r1	; 0x01
    2308:	18 82       	st	Y, r1
    230a:	1d 82       	std	Y+5, r1	; 0x05
    230c:	1c 82       	std	Y+4, r1	; 0x04
    230e:	1b 82       	std	Y+3, r1	; 0x03
    2310:	1a 82       	std	Y+2, r1	; 0x02
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	08 95       	ret

00002318 <_ZN6String12changeBufferEj>:
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	ec 01       	movw	r28, r24
    2322:	8b 01       	movw	r16, r22
    2324:	6f 5f       	subi	r22, 0xFF	; 255
    2326:	7f 4f       	sbci	r23, 0xFF	; 255
    2328:	88 81       	ld	r24, Y
    232a:	99 81       	ldd	r25, Y+1	; 0x01
    232c:	95 d5       	rcall	.+2858   	; 0x2e58 <realloc>
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	31 f0       	breq	.+12     	; 0x233e <_ZN6String12changeBufferEj+0x26>
    2332:	99 83       	std	Y+1, r25	; 0x01
    2334:	88 83       	st	Y, r24
    2336:	1b 83       	std	Y+3, r17	; 0x03
    2338:	0a 83       	std	Y+2, r16	; 0x02
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <_ZN6String12changeBufferEj+0x28>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	08 95       	ret

0000234a <_ZN6String7reserveEj>:
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	ec 01       	movw	r28, r24
    2350:	88 81       	ld	r24, Y
    2352:	99 81       	ldd	r25, Y+1	; 0x01
    2354:	89 2b       	or	r24, r25
    2356:	29 f0       	breq	.+10     	; 0x2362 <_ZN6String7reserveEj+0x18>
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	9b 81       	ldd	r25, Y+3	; 0x03
    235c:	86 17       	cp	r24, r22
    235e:	97 07       	cpc	r25, r23
    2360:	58 f4       	brcc	.+22     	; 0x2378 <_ZN6String7reserveEj+0x2e>
    2362:	ce 01       	movw	r24, r28
    2364:	d9 df       	rcall	.-78     	; 0x2318 <_ZN6String12changeBufferEj>
    2366:	88 23       	and	r24, r24
    2368:	41 f0       	breq	.+16     	; 0x237a <_ZN6String7reserveEj+0x30>
    236a:	8c 81       	ldd	r24, Y+4	; 0x04
    236c:	9d 81       	ldd	r25, Y+5	; 0x05
    236e:	89 2b       	or	r24, r25
    2370:	19 f4       	brne	.+6      	; 0x2378 <_ZN6String7reserveEj+0x2e>
    2372:	e8 81       	ld	r30, Y
    2374:	f9 81       	ldd	r31, Y+1	; 0x01
    2376:	10 82       	st	Z, r1
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <_ZN6String4copyEPKcj>:
    2380:	ef 92       	push	r14
    2382:	ff 92       	push	r15
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	ec 01       	movw	r28, r24
    238e:	7b 01       	movw	r14, r22
    2390:	8a 01       	movw	r16, r20
    2392:	ba 01       	movw	r22, r20
    2394:	da df       	rcall	.-76     	; 0x234a <_ZN6String7reserveEj>
    2396:	81 11       	cpse	r24, r1
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <_ZN6String4copyEPKcj+0x20>
    239a:	ce 01       	movw	r24, r28
    239c:	ac df       	rcall	.-168    	; 0x22f6 <_ZN6String10invalidateEv>
    239e:	06 c0       	rjmp	.+12     	; 0x23ac <_ZN6String4copyEPKcj+0x2c>
    23a0:	1d 83       	std	Y+5, r17	; 0x05
    23a2:	0c 83       	std	Y+4, r16	; 0x04
    23a4:	b7 01       	movw	r22, r14
    23a6:	88 81       	ld	r24, Y
    23a8:	99 81       	ldd	r25, Y+1	; 0x01
    23aa:	3f d6       	rcall	.+3198   	; 0x302a <strcpy>
    23ac:	ce 01       	movw	r24, r28
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	ff 90       	pop	r15
    23b8:	ef 90       	pop	r14
    23ba:	08 95       	ret

000023bc <_ZN6StringC1EPKc>:
    23bc:	fc 01       	movw	r30, r24
    23be:	11 82       	std	Z+1, r1	; 0x01
    23c0:	10 82       	st	Z, r1
    23c2:	13 82       	std	Z+3, r1	; 0x03
    23c4:	12 82       	std	Z+2, r1	; 0x02
    23c6:	15 82       	std	Z+5, r1	; 0x05
    23c8:	14 82       	std	Z+4, r1	; 0x04
    23ca:	61 15       	cp	r22, r1
    23cc:	71 05       	cpc	r23, r1
    23ce:	49 f0       	breq	.+18     	; 0x23e2 <_ZN6StringC1EPKc+0x26>
    23d0:	fb 01       	movw	r30, r22
    23d2:	01 90       	ld	r0, Z+
    23d4:	00 20       	and	r0, r0
    23d6:	e9 f7       	brne	.-6      	; 0x23d2 <_ZN6StringC1EPKc+0x16>
    23d8:	31 97       	sbiw	r30, 0x01	; 1
    23da:	af 01       	movw	r20, r30
    23dc:	46 1b       	sub	r20, r22
    23de:	57 0b       	sbc	r21, r23
    23e0:	cf cf       	rjmp	.-98     	; 0x2380 <_ZN6String4copyEPKcj>
    23e2:	08 95       	ret

000023e4 <_ZN6StringaSERKS_>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    22f8:	fc 01       	movw	r30, r24
    22fa:	80 81       	ld	r24, Z
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	28 c5       	rjmp	.+2640   	; 0x2d50 <free>

00002300 <_ZN6String10invalidateEv>:
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	ec 01       	movw	r28, r24
    2306:	88 81       	ld	r24, Y
    2308:	99 81       	ldd	r25, Y+1	; 0x01
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	09 f0       	breq	.+2      	; 0x2310 <_ZN6String10invalidateEv+0x10>
    230e:	20 d5       	rcall	.+2624   	; 0x2d50 <free>
    2310:	19 82       	std	Y+1, r1	; 0x01
    2312:	18 82       	st	Y, r1
    2314:	1d 82       	std	Y+5, r1	; 0x05
    2316:	1c 82       	std	Y+4, r1	; 0x04
    2318:	1b 82       	std	Y+3, r1	; 0x03
    231a:	1a 82       	std	Y+2, r1	; 0x02
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	08 95       	ret

00002322 <_ZN6String12changeBufferEj>:
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	ec 01       	movw	r28, r24
    232c:	8b 01       	movw	r16, r22
    232e:	6f 5f       	subi	r22, 0xFF	; 255
    2330:	7f 4f       	sbci	r23, 0xFF	; 255
    2332:	88 81       	ld	r24, Y
    2334:	99 81       	ldd	r25, Y+1	; 0x01
    2336:	95 d5       	rcall	.+2858   	; 0x2e62 <realloc>
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	31 f0       	breq	.+12     	; 0x2348 <_ZN6String12changeBufferEj+0x26>
    233c:	99 83       	std	Y+1, r25	; 0x01
    233e:	88 83       	st	Y, r24
    2340:	1b 83       	std	Y+3, r17	; 0x03
    2342:	0a 83       	std	Y+2, r16	; 0x02
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	01 c0       	rjmp	.+2      	; 0x234a <_ZN6String12changeBufferEj+0x28>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret

00002354 <_ZN6String7reserveEj>:
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	ec 01       	movw	r28, r24
    235a:	88 81       	ld	r24, Y
    235c:	99 81       	ldd	r25, Y+1	; 0x01
    235e:	89 2b       	or	r24, r25
    2360:	29 f0       	breq	.+10     	; 0x236c <_ZN6String7reserveEj+0x18>
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	9b 81       	ldd	r25, Y+3	; 0x03
    2366:	86 17       	cp	r24, r22
    2368:	97 07       	cpc	r25, r23
    236a:	58 f4       	brcc	.+22     	; 0x2382 <_ZN6String7reserveEj+0x2e>
    236c:	ce 01       	movw	r24, r28
    236e:	d9 df       	rcall	.-78     	; 0x2322 <_ZN6String12changeBufferEj>
    2370:	88 23       	and	r24, r24
    2372:	41 f0       	breq	.+16     	; 0x2384 <_ZN6String7reserveEj+0x30>
    2374:	8c 81       	ldd	r24, Y+4	; 0x04
    2376:	9d 81       	ldd	r25, Y+5	; 0x05
    2378:	89 2b       	or	r24, r25
    237a:	19 f4       	brne	.+6      	; 0x2382 <_ZN6String7reserveEj+0x2e>
    237c:	e8 81       	ld	r30, Y
    237e:	f9 81       	ldd	r31, Y+1	; 0x01
    2380:	10 82       	st	Z, r1
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	08 95       	ret

0000238a <_ZN6String4copyEPKcj>:
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	ec 01       	movw	r28, r24
    2398:	7b 01       	movw	r14, r22
    239a:	8a 01       	movw	r16, r20
    239c:	ba 01       	movw	r22, r20
    239e:	da df       	rcall	.-76     	; 0x2354 <_ZN6String7reserveEj>
    23a0:	81 11       	cpse	r24, r1
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <_ZN6String4copyEPKcj+0x20>
    23a4:	ce 01       	movw	r24, r28
    23a6:	ac df       	rcall	.-168    	; 0x2300 <_ZN6String10invalidateEv>
    23a8:	06 c0       	rjmp	.+12     	; 0x23b6 <_ZN6String4copyEPKcj+0x2c>
    23aa:	1d 83       	std	Y+5, r17	; 0x05
    23ac:	0c 83       	std	Y+4, r16	; 0x04
    23ae:	b7 01       	movw	r22, r14
    23b0:	88 81       	ld	r24, Y
    23b2:	99 81       	ldd	r25, Y+1	; 0x01
    23b4:	3f d6       	rcall	.+3198   	; 0x3034 <strcpy>
    23b6:	ce 01       	movw	r24, r28
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	ff 90       	pop	r15
    23c2:	ef 90       	pop	r14
    23c4:	08 95       	ret

000023c6 <_ZN6StringC1EPKc>:
    23c6:	fc 01       	movw	r30, r24
    23c8:	11 82       	std	Z+1, r1	; 0x01
    23ca:	10 82       	st	Z, r1
    23cc:	13 82       	std	Z+3, r1	; 0x03
    23ce:	12 82       	std	Z+2, r1	; 0x02
    23d0:	15 82       	std	Z+5, r1	; 0x05
    23d2:	14 82       	std	Z+4, r1	; 0x04
    23d4:	61 15       	cp	r22, r1
    23d6:	71 05       	cpc	r23, r1
    23d8:	49 f0       	breq	.+18     	; 0x23ec <_ZN6StringC1EPKc+0x26>
    23da:	fb 01       	movw	r30, r22
    23dc:	01 90       	ld	r0, Z+
    23de:	00 20       	and	r0, r0
    23e0:	e9 f7       	brne	.-6      	; 0x23dc <_ZN6StringC1EPKc+0x16>
    23e2:	31 97       	sbiw	r30, 0x01	; 1
    23e4:	af 01       	movw	r20, r30
    23e6:	46 1b       	sub	r20, r22
    23e8:	57 0b       	sbc	r21, r23
    23ea:	cf cf       	rjmp	.-98     	; 0x238a <_ZN6String4copyEPKcj>
    23ec:	08 95       	ret

000023ee <_ZN6StringaSERKS_>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
<<<<<<< HEAD
<<<<<<< HEAD
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	ec 01       	movw	r28, r24
    25ca:	fb 01       	movw	r30, r22
=======
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	ec 01       	movw	r28, r24
    23f4:	fb 01       	movw	r30, r22
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	if (this == &rhs) return *this;
    23f6:	86 17       	cp	r24, r22
    23f8:	97 07       	cpc	r25, r23
    23fa:	51 f0       	breq	.+20     	; 0x2410 <_ZN6StringaSERKS_+0x22>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	61 15       	cp	r22, r1
    2402:	71 05       	cpc	r23, r1
    2404:	21 f0       	breq	.+8      	; 0x240e <_ZN6StringaSERKS_+0x20>
    2406:	44 81       	ldd	r20, Z+4	; 0x04
    2408:	55 81       	ldd	r21, Z+5	; 0x05
    240a:	bf df       	rcall	.-130    	; 0x238a <_ZN6String4copyEPKcj>
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <_ZN6StringaSERKS_+0x22>
	else invalidate();
    240e:	78 df       	rcall	.-272    	; 0x2300 <_ZN6String10invalidateEv>
    2410:	ce 01       	movw	r24, r28
	
	return *this;
}
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	08 95       	ret

<<<<<<< HEAD
000025ee <_ZN6StringC1ERKS_>:
    25ee:	fc 01       	movw	r30, r24
=======
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	ec 01       	movw	r28, r24
    23ea:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    23ec:	86 17       	cp	r24, r22
    23ee:	97 07       	cpc	r25, r23
    23f0:	51 f0       	breq	.+20     	; 0x2406 <_ZN6StringaSERKS_+0x22>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	61 15       	cp	r22, r1
    23f8:	71 05       	cpc	r23, r1
    23fa:	21 f0       	breq	.+8      	; 0x2404 <_ZN6StringaSERKS_+0x20>
    23fc:	44 81       	ldd	r20, Z+4	; 0x04
    23fe:	55 81       	ldd	r21, Z+5	; 0x05
    2400:	bf df       	rcall	.-130    	; 0x2380 <_ZN6String4copyEPKcj>
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <_ZN6StringaSERKS_+0x22>
	else invalidate();
    2404:	78 df       	rcall	.-272    	; 0x22f6 <_ZN6String10invalidateEv>
    2406:	ce 01       	movw	r24, r28
	
	return *this;
}
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	08 95       	ret

0000240e <_ZN6StringC1ERKS_>:
    240e:	fc 01       	movw	r30, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
00002418 <_ZN6StringC1ERKS_>:
    2418:	fc 01       	movw	r30, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
<<<<<<< HEAD
<<<<<<< HEAD
    25f0:	11 82       	std	Z+1, r1	; 0x01
    25f2:	10 82       	st	Z, r1
=======
    241a:	11 82       	std	Z+1, r1	; 0x01
    241c:	10 82       	st	Z, r1
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	capacity = 0;
    241e:	13 82       	std	Z+3, r1	; 0x03
    2420:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
<<<<<<< HEAD
    25f8:	15 82       	std	Z+5, r1	; 0x05
    25fa:	14 82       	std	Z+4, r1	; 0x04
=======
    2410:	11 82       	std	Z+1, r1	; 0x01
    2412:	10 82       	st	Z, r1
	capacity = 0;
    2414:	13 82       	std	Z+3, r1	; 0x03
    2416:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2418:	15 82       	std	Z+5, r1	; 0x05
    241a:	14 82       	std	Z+4, r1	; 0x04
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2422:	15 82       	std	Z+5, r1	; 0x05
    2424:	14 82       	std	Z+4, r1	; 0x04
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
}

String::String(const String &value)
{
	init();
	*this = value;
<<<<<<< HEAD
<<<<<<< HEAD
    25fc:	e3 cf       	rjmp	.-58     	; 0x25c4 <_ZN6StringaSERKS_>

000025fe <_ZN17LiquidCrystal_I2CC1Ehhh>:
=======
    241c:	e3 cf       	rjmp	.-58     	; 0x23e4 <_ZN6StringaSERKS_>

0000241e <_ZN17LiquidCrystal_I2CC1Ehhh>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2426:	e3 cf       	rjmp	.-58     	; 0x23ee <_ZN6StringaSERKS_>

00002428 <_ZN17LiquidCrystal_I2CC1Ehhh>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
<<<<<<< HEAD
<<<<<<< HEAD
    25fe:	fc 01       	movw	r30, r24
    2600:	13 82       	std	Z+3, r1	; 0x03
    2602:	12 82       	std	Z+2, r1	; 0x02
    2604:	8d e3       	ldi	r24, 0x3D	; 61
    2606:	93 e0       	ldi	r25, 0x03	; 3
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	80 83       	st	Z, r24
    260c:	64 83       	std	Z+4, r22	; 0x04
    260e:	41 87       	std	Z+9, r20	; 0x09
    2610:	22 87       	std	Z+10, r18	; 0x0a
    2612:	13 86       	std	Z+11, r1	; 0x0b
    2614:	08 95       	ret

00002616 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	ec 01       	movw	r28, r24
    261e:	16 2f       	mov	r17, r22
    2620:	6c 81       	ldd	r22, Y+4	; 0x04
    2622:	84 ef       	ldi	r24, 0xF4	; 244
    2624:	94 e0       	ldi	r25, 0x04	; 4
    2626:	b9 d1       	rcall	.+882    	; 0x299a <_ZN7TwoWire17beginTransmissionEh>
    2628:	6b 85       	ldd	r22, Y+11	; 0x0b
    262a:	61 2b       	or	r22, r17
    262c:	84 ef       	ldi	r24, 0xF4	; 244
    262e:	94 e0       	ldi	r25, 0x04	; 4
    2630:	67 d1       	rcall	.+718    	; 0x2900 <_ZN7TwoWire5writeEh>
    2632:	84 ef       	ldi	r24, 0xF4	; 244
    2634:	94 e0       	ldi	r25, 0x04	; 4
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	ca c1       	rjmp	.+916    	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>

0000263e <_ZN17LiquidCrystal_I2C9backlightEv>:
    263e:	28 e0       	ldi	r18, 0x08	; 8
    2640:	fc 01       	movw	r30, r24
    2642:	23 87       	std	Z+11, r18	; 0x0b
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	e7 cf       	rjmp	.-50     	; 0x2616 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002648 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2648:	0f 93       	push	r16
    264a:	1f 93       	push	r17
    264c:	cf 93       	push	r28
    264e:	8c 01       	movw	r16, r24
    2650:	c6 2f       	mov	r28, r22
    2652:	64 60       	ori	r22, 0x04	; 4
    2654:	e0 df       	rcall	.-64     	; 0x2616 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0d de       	rcall	.-998    	; 0x2276 <delayMicroseconds>
    265c:	6c 2f       	mov	r22, r28
    265e:	6b 7f       	andi	r22, 0xFB	; 251
    2660:	c8 01       	movw	r24, r16
    2662:	d9 df       	rcall	.-78     	; 0x2616 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2664:	82 e3       	ldi	r24, 0x32	; 50
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	03 ce       	rjmp	.-1018   	; 0x2276 <delayMicroseconds>

00002670 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	ec 01       	movw	r28, r24
    2678:	16 2f       	mov	r17, r22
    267a:	cd df       	rcall	.-102    	; 0x2616 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    267c:	61 2f       	mov	r22, r17
    267e:	ce 01       	movw	r24, r28
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	e0 cf       	rjmp	.-64     	; 0x2648 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002688 <_ZN17LiquidCrystal_I2C4sendEhh>:
    2688:	0f 93       	push	r16
    268a:	1f 93       	push	r17
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	8c 01       	movw	r16, r24
    2692:	c6 2f       	mov	r28, r22
    2694:	d4 2f       	mov	r29, r20
    2696:	60 7f       	andi	r22, 0xF0	; 240
    2698:	64 2b       	or	r22, r20
    269a:	ea df       	rcall	.-44     	; 0x2670 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    269c:	80 e1       	ldi	r24, 0x10	; 16
    269e:	c8 9f       	mul	r28, r24
    26a0:	b0 01       	movw	r22, r0
    26a2:	11 24       	eor	r1, r1
    26a4:	6d 2b       	or	r22, r29
    26a6:	c8 01       	movw	r24, r16
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	df cf       	rjmp	.-66     	; 0x2670 <_ZN17LiquidCrystal_I2C10write4bitsEh>

000026b2 <_ZN17LiquidCrystal_I2C7commandEh>:
    26b2:	40 e0       	ldi	r20, 0x00	; 0
    26b4:	e9 cf       	rjmp	.-46     	; 0x2688 <_ZN17LiquidCrystal_I2C4sendEhh>

000026b6 <_ZN17LiquidCrystal_I2C5clearEv>:
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	fc df       	rcall	.-8      	; 0x26b2 <_ZN17LiquidCrystal_I2C7commandEh>
    26ba:	80 ed       	ldi	r24, 0xD0	; 208
    26bc:	97 e0       	ldi	r25, 0x07	; 7
    26be:	db cd       	rjmp	.-1098   	; 0x2276 <delayMicroseconds>

000026c0 <_ZN17LiquidCrystal_I2C4homeEv>:
    26c0:	62 e0       	ldi	r22, 0x02	; 2
    26c2:	f7 df       	rcall	.-18     	; 0x26b2 <_ZN17LiquidCrystal_I2C7commandEh>
    26c4:	80 ed       	ldi	r24, 0xD0	; 208
    26c6:	97 e0       	ldi	r25, 0x07	; 7
    26c8:	d6 cd       	rjmp	.-1108   	; 0x2276 <delayMicroseconds>

000026ca <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	28 97       	sbiw	r28, 0x08	; 8
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	9c 01       	movw	r18, r24
    26e0:	88 e0       	ldi	r24, 0x08	; 8
    26e2:	e8 e0       	ldi	r30, 0x08	; 8
    26e4:	f2 e0       	ldi	r31, 0x02	; 2
    26e6:	de 01       	movw	r26, r28
    26e8:	11 96       	adiw	r26, 0x01	; 1
    26ea:	01 90       	ld	r0, Z+
    26ec:	0d 92       	st	X+, r0
    26ee:	8a 95       	dec	r24
    26f0:	e1 f7       	brne	.-8      	; 0x26ea <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    26f2:	f9 01       	movw	r30, r18
    26f4:	80 85       	ldd	r24, Z+8	; 0x08
    26f6:	84 17       	cp	r24, r20
    26f8:	10 f4       	brcc	.+4      	; 0x26fe <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    26fa:	4f ef       	ldi	r20, 0xFF	; 255
    26fc:	48 0f       	add	r20, r24
    26fe:	fe 01       	movw	r30, r28
    2700:	31 96       	adiw	r30, 0x01	; 1
    2702:	e4 0f       	add	r30, r20
    2704:	f1 1d       	adc	r31, r1
    2706:	e4 0f       	add	r30, r20
    2708:	f1 1d       	adc	r31, r1
    270a:	90 81       	ld	r25, Z
    270c:	69 0f       	add	r22, r25
    270e:	60 68       	ori	r22, 0x80	; 128
    2710:	c9 01       	movw	r24, r18
    2712:	28 96       	adiw	r28, 0x08	; 8
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	c7 cf       	rjmp	.-114    	; 0x26b2 <_ZN17LiquidCrystal_I2C7commandEh>

00002724 <_ZN17LiquidCrystal_I2C7displayEv>:
    2724:	fc 01       	movw	r30, r24
    2726:	66 81       	ldd	r22, Z+6	; 0x06
    2728:	26 2f       	mov	r18, r22
    272a:	24 60       	ori	r18, 0x04	; 4
    272c:	26 83       	std	Z+6, r18	; 0x06
    272e:	6c 60       	ori	r22, 0x0C	; 12
    2730:	c0 cf       	rjmp	.-128    	; 0x26b2 <_ZN17LiquidCrystal_I2C7commandEh>

00002732 <_ZN17LiquidCrystal_I2C5writeEh>:
=======
    241e:	fc 01       	movw	r30, r24
    2420:	13 82       	std	Z+3, r1	; 0x03
    2422:	12 82       	std	Z+2, r1	; 0x02
    2424:	88 e3       	ldi	r24, 0x38	; 56
    2426:	93 e0       	ldi	r25, 0x03	; 3
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
    242c:	64 83       	std	Z+4, r22	; 0x04
    242e:	41 87       	std	Z+9, r20	; 0x09
    2430:	22 87       	std	Z+10, r18	; 0x0a
    2432:	13 86       	std	Z+11, r1	; 0x0b
    2434:	08 95       	ret

00002436 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	ec 01       	movw	r28, r24
    243e:	16 2f       	mov	r17, r22
    2440:	6c 81       	ldd	r22, Y+4	; 0x04
    2442:	8d ed       	ldi	r24, 0xDD	; 221
    2444:	94 e0       	ldi	r25, 0x04	; 4
    2446:	b9 d1       	rcall	.+882    	; 0x27ba <_ZN7TwoWire17beginTransmissionEh>
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	61 2b       	or	r22, r17
    244c:	8d ed       	ldi	r24, 0xDD	; 221
    244e:	94 e0       	ldi	r25, 0x04	; 4
    2450:	67 d1       	rcall	.+718    	; 0x2720 <_ZN7TwoWire5writeEh>
    2452:	8d ed       	ldi	r24, 0xDD	; 221
    2454:	94 e0       	ldi	r25, 0x04	; 4
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	ca c1       	rjmp	.+916    	; 0x27f2 <_ZN7TwoWire15endTransmissionEv>

0000245e <_ZN17LiquidCrystal_I2C9backlightEv>:
    245e:	28 e0       	ldi	r18, 0x08	; 8
    2460:	fc 01       	movw	r30, r24
    2462:	23 87       	std	Z+11, r18	; 0x0b
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	e7 cf       	rjmp	.-50     	; 0x2436 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002468 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	8c 01       	movw	r16, r24
    2470:	c6 2f       	mov	r28, r22
    2472:	64 60       	ori	r22, 0x04	; 4
    2474:	e0 df       	rcall	.-64     	; 0x2436 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	0d de       	rcall	.-998    	; 0x2096 <delayMicroseconds>
    247c:	6c 2f       	mov	r22, r28
    247e:	6b 7f       	andi	r22, 0xFB	; 251
    2480:	c8 01       	movw	r24, r16
    2482:	d9 df       	rcall	.-78     	; 0x2436 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2484:	82 e3       	ldi	r24, 0x32	; 50
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	cf 91       	pop	r28
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	03 ce       	rjmp	.-1018   	; 0x2096 <delayMicroseconds>

00002490 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	ec 01       	movw	r28, r24
    2498:	16 2f       	mov	r17, r22
    249a:	cd df       	rcall	.-102    	; 0x2436 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    249c:	61 2f       	mov	r22, r17
    249e:	ce 01       	movw	r24, r28
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	e0 cf       	rjmp	.-64     	; 0x2468 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000024a8 <_ZN17LiquidCrystal_I2C4sendEhh>:
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	8c 01       	movw	r16, r24
    24b2:	c6 2f       	mov	r28, r22
    24b4:	d4 2f       	mov	r29, r20
    24b6:	60 7f       	andi	r22, 0xF0	; 240
    24b8:	64 2b       	or	r22, r20
    24ba:	ea df       	rcall	.-44     	; 0x2490 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    24bc:	80 e1       	ldi	r24, 0x10	; 16
    24be:	c8 9f       	mul	r28, r24
    24c0:	b0 01       	movw	r22, r0
    24c2:	11 24       	eor	r1, r1
    24c4:	6d 2b       	or	r22, r29
    24c6:	c8 01       	movw	r24, r16
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	df cf       	rjmp	.-66     	; 0x2490 <_ZN17LiquidCrystal_I2C10write4bitsEh>

000024d2 <_ZN17LiquidCrystal_I2C7commandEh>:
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	e9 cf       	rjmp	.-46     	; 0x24a8 <_ZN17LiquidCrystal_I2C4sendEhh>

000024d6 <_ZN17LiquidCrystal_I2C5clearEv>:
    24d6:	61 e0       	ldi	r22, 0x01	; 1
    24d8:	fc df       	rcall	.-8      	; 0x24d2 <_ZN17LiquidCrystal_I2C7commandEh>
    24da:	80 ed       	ldi	r24, 0xD0	; 208
    24dc:	97 e0       	ldi	r25, 0x07	; 7
    24de:	db cd       	rjmp	.-1098   	; 0x2096 <delayMicroseconds>

000024e0 <_ZN17LiquidCrystal_I2C4homeEv>:
    24e0:	62 e0       	ldi	r22, 0x02	; 2
    24e2:	f7 df       	rcall	.-18     	; 0x24d2 <_ZN17LiquidCrystal_I2C7commandEh>
    24e4:	80 ed       	ldi	r24, 0xD0	; 208
    24e6:	97 e0       	ldi	r25, 0x07	; 7
    24e8:	d6 cd       	rjmp	.-1108   	; 0x2096 <delayMicroseconds>

000024ea <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	28 97       	sbiw	r28, 0x08	; 8
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	9c 01       	movw	r18, r24
    2500:	88 e0       	ldi	r24, 0x08	; 8
    2502:	e9 e0       	ldi	r30, 0x09	; 9
    2504:	f2 e0       	ldi	r31, 0x02	; 2
    2506:	de 01       	movw	r26, r28
    2508:	11 96       	adiw	r26, 0x01	; 1
    250a:	01 90       	ld	r0, Z+
    250c:	0d 92       	st	X+, r0
    250e:	8a 95       	dec	r24
    2510:	e1 f7       	brne	.-8      	; 0x250a <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2512:	f9 01       	movw	r30, r18
    2514:	80 85       	ldd	r24, Z+8	; 0x08
    2516:	84 17       	cp	r24, r20
    2518:	10 f4       	brcc	.+4      	; 0x251e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    251a:	4f ef       	ldi	r20, 0xFF	; 255
    251c:	48 0f       	add	r20, r24
    251e:	fe 01       	movw	r30, r28
    2520:	31 96       	adiw	r30, 0x01	; 1
    2522:	e4 0f       	add	r30, r20
    2524:	f1 1d       	adc	r31, r1
    2526:	e4 0f       	add	r30, r20
    2528:	f1 1d       	adc	r31, r1
    252a:	90 81       	ld	r25, Z
    252c:	69 0f       	add	r22, r25
    252e:	60 68       	ori	r22, 0x80	; 128
    2530:	c9 01       	movw	r24, r18
    2532:	28 96       	adiw	r28, 0x08	; 8
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	c7 cf       	rjmp	.-114    	; 0x24d2 <_ZN17LiquidCrystal_I2C7commandEh>

00002544 <_ZN17LiquidCrystal_I2C7displayEv>:
    2544:	fc 01       	movw	r30, r24
    2546:	66 81       	ldd	r22, Z+6	; 0x06
    2548:	26 2f       	mov	r18, r22
    254a:	24 60       	ori	r18, 0x04	; 4
    254c:	26 83       	std	Z+6, r18	; 0x06
    254e:	6c 60       	ori	r22, 0x0C	; 12
    2550:	c0 cf       	rjmp	.-128    	; 0x24d2 <_ZN17LiquidCrystal_I2C7commandEh>

00002552 <_ZN17LiquidCrystal_I2C5writeEh>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2428:	fc 01       	movw	r30, r24
    242a:	13 82       	std	Z+3, r1	; 0x03
    242c:	12 82       	std	Z+2, r1	; 0x02
    242e:	88 e3       	ldi	r24, 0x38	; 56
    2430:	93 e0       	ldi	r25, 0x03	; 3
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	64 83       	std	Z+4, r22	; 0x04
    2438:	41 87       	std	Z+9, r20	; 0x09
    243a:	22 87       	std	Z+10, r18	; 0x0a
    243c:	13 86       	std	Z+11, r1	; 0x0b
    243e:	08 95       	ret

00002440 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	ec 01       	movw	r28, r24
    2448:	16 2f       	mov	r17, r22
    244a:	6c 81       	ldd	r22, Y+4	; 0x04
    244c:	8d ed       	ldi	r24, 0xDD	; 221
    244e:	94 e0       	ldi	r25, 0x04	; 4
    2450:	b9 d1       	rcall	.+882    	; 0x27c4 <_ZN7TwoWire17beginTransmissionEh>
    2452:	6b 85       	ldd	r22, Y+11	; 0x0b
    2454:	61 2b       	or	r22, r17
    2456:	8d ed       	ldi	r24, 0xDD	; 221
    2458:	94 e0       	ldi	r25, 0x04	; 4
    245a:	67 d1       	rcall	.+718    	; 0x272a <_ZN7TwoWire5writeEh>
    245c:	8d ed       	ldi	r24, 0xDD	; 221
    245e:	94 e0       	ldi	r25, 0x04	; 4
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	1f 91       	pop	r17
    2466:	ca c1       	rjmp	.+916    	; 0x27fc <_ZN7TwoWire15endTransmissionEv>

00002468 <_ZN17LiquidCrystal_I2C9backlightEv>:
    2468:	28 e0       	ldi	r18, 0x08	; 8
    246a:	fc 01       	movw	r30, r24
    246c:	23 87       	std	Z+11, r18	; 0x0b
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	e7 cf       	rjmp	.-50     	; 0x2440 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002472 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	8c 01       	movw	r16, r24
    247a:	c6 2f       	mov	r28, r22
    247c:	64 60       	ori	r22, 0x04	; 4
    247e:	e0 df       	rcall	.-64     	; 0x2440 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0d de       	rcall	.-998    	; 0x20a0 <delayMicroseconds>
    2486:	6c 2f       	mov	r22, r28
    2488:	6b 7f       	andi	r22, 0xFB	; 251
    248a:	c8 01       	movw	r24, r16
    248c:	d9 df       	rcall	.-78     	; 0x2440 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    248e:	82 e3       	ldi	r24, 0x32	; 50
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	cf 91       	pop	r28
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	03 ce       	rjmp	.-1018   	; 0x20a0 <delayMicroseconds>

0000249a <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    249a:	1f 93       	push	r17
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	ec 01       	movw	r28, r24
    24a2:	16 2f       	mov	r17, r22
    24a4:	cd df       	rcall	.-102    	; 0x2440 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    24a6:	61 2f       	mov	r22, r17
    24a8:	ce 01       	movw	r24, r28
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	e0 cf       	rjmp	.-64     	; 0x2472 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000024b2 <_ZN17LiquidCrystal_I2C4sendEhh>:
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	8c 01       	movw	r16, r24
    24bc:	c6 2f       	mov	r28, r22
    24be:	d4 2f       	mov	r29, r20
    24c0:	60 7f       	andi	r22, 0xF0	; 240
    24c2:	64 2b       	or	r22, r20
    24c4:	ea df       	rcall	.-44     	; 0x249a <_ZN17LiquidCrystal_I2C10write4bitsEh>
    24c6:	80 e1       	ldi	r24, 0x10	; 16
    24c8:	c8 9f       	mul	r28, r24
    24ca:	b0 01       	movw	r22, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	6d 2b       	or	r22, r29
    24d0:	c8 01       	movw	r24, r16
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	1f 91       	pop	r17
    24d8:	0f 91       	pop	r16
    24da:	df cf       	rjmp	.-66     	; 0x249a <_ZN17LiquidCrystal_I2C10write4bitsEh>

000024dc <_ZN17LiquidCrystal_I2C7commandEh>:
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	e9 cf       	rjmp	.-46     	; 0x24b2 <_ZN17LiquidCrystal_I2C4sendEhh>

000024e0 <_ZN17LiquidCrystal_I2C5clearEv>:
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	fc df       	rcall	.-8      	; 0x24dc <_ZN17LiquidCrystal_I2C7commandEh>
    24e4:	80 ed       	ldi	r24, 0xD0	; 208
    24e6:	97 e0       	ldi	r25, 0x07	; 7
    24e8:	db cd       	rjmp	.-1098   	; 0x20a0 <delayMicroseconds>

000024ea <_ZN17LiquidCrystal_I2C4homeEv>:
    24ea:	62 e0       	ldi	r22, 0x02	; 2
    24ec:	f7 df       	rcall	.-18     	; 0x24dc <_ZN17LiquidCrystal_I2C7commandEh>
    24ee:	80 ed       	ldi	r24, 0xD0	; 208
    24f0:	97 e0       	ldi	r25, 0x07	; 7
    24f2:	d6 cd       	rjmp	.-1108   	; 0x20a0 <delayMicroseconds>

000024f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	28 97       	sbiw	r28, 0x08	; 8
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	9c 01       	movw	r18, r24
    250a:	88 e0       	ldi	r24, 0x08	; 8
    250c:	e9 e0       	ldi	r30, 0x09	; 9
    250e:	f2 e0       	ldi	r31, 0x02	; 2
    2510:	de 01       	movw	r26, r28
    2512:	11 96       	adiw	r26, 0x01	; 1
    2514:	01 90       	ld	r0, Z+
    2516:	0d 92       	st	X+, r0
    2518:	8a 95       	dec	r24
    251a:	e1 f7       	brne	.-8      	; 0x2514 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    251c:	f9 01       	movw	r30, r18
    251e:	80 85       	ldd	r24, Z+8	; 0x08
    2520:	84 17       	cp	r24, r20
    2522:	10 f4       	brcc	.+4      	; 0x2528 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2524:	4f ef       	ldi	r20, 0xFF	; 255
    2526:	48 0f       	add	r20, r24
    2528:	fe 01       	movw	r30, r28
    252a:	31 96       	adiw	r30, 0x01	; 1
    252c:	e4 0f       	add	r30, r20
    252e:	f1 1d       	adc	r31, r1
    2530:	e4 0f       	add	r30, r20
    2532:	f1 1d       	adc	r31, r1
    2534:	90 81       	ld	r25, Z
    2536:	69 0f       	add	r22, r25
    2538:	60 68       	ori	r22, 0x80	; 128
    253a:	c9 01       	movw	r24, r18
    253c:	28 96       	adiw	r28, 0x08	; 8
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	c7 cf       	rjmp	.-114    	; 0x24dc <_ZN17LiquidCrystal_I2C7commandEh>

0000254e <_ZN17LiquidCrystal_I2C7displayEv>:
    254e:	fc 01       	movw	r30, r24
    2550:	66 81       	ldd	r22, Z+6	; 0x06
    2552:	26 2f       	mov	r18, r22
    2554:	24 60       	ori	r18, 0x04	; 4
    2556:	26 83       	std	Z+6, r18	; 0x06
    2558:	6c 60       	ori	r22, 0x0C	; 12
    255a:	c0 cf       	rjmp	.-128    	; 0x24dc <_ZN17LiquidCrystal_I2C7commandEh>

0000255c <_ZN17LiquidCrystal_I2C5writeEh>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
<<<<<<< HEAD
<<<<<<< HEAD
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	a9 df       	rcall	.-174    	; 0x2688 <_ZN17LiquidCrystal_I2C4sendEhh>
=======
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	a9 df       	rcall	.-174    	; 0x24b2 <_ZN17LiquidCrystal_I2C4sendEhh>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	return 1;
}
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	08 95       	ret

<<<<<<< HEAD
0000273c <_ZN17LiquidCrystal_I2C5beginEhhh>:
=======
    2552:	41 e0       	ldi	r20, 0x01	; 1
    2554:	a9 df       	rcall	.-174    	; 0x24a8 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	08 95       	ret

0000255c <_ZN17LiquidCrystal_I2C5beginEhhh>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
00002566 <_ZN17LiquidCrystal_I2C5beginEhhh>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
<<<<<<< HEAD
<<<<<<< HEAD
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	ec 01       	movw	r28, r24
=======
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	ec 01       	movw	r28, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	if (lines > 1) {
    256c:	42 30       	cpi	r20, 0x02	; 2
    256e:	18 f0       	brcs	.+6      	; 0x2576 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	88 60       	ori	r24, 0x08	; 8
    2574:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    2576:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    2578:	22 23       	and	r18, r18
    257a:	29 f0       	breq	.+10     	; 0x2586 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    257c:	41 30       	cpi	r20, 0x01	; 1
    257e:	19 f4       	brne	.+6      	; 0x2586 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
<<<<<<< HEAD
    2756:	8d 81       	ldd	r24, Y+5	; 0x05
    2758:	84 60       	ori	r24, 0x04	; 4
    275a:	8d 83       	std	Y+5, r24	; 0x05
=======
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2562:	42 30       	cpi	r20, 0x02	; 2
    2564:	18 f0       	brcs	.+6      	; 0x256c <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	88 60       	ori	r24, 0x08	; 8
    256a:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    256c:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    256e:	22 23       	and	r18, r18
    2570:	29 f0       	breq	.+10     	; 0x257c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    2572:	41 30       	cpi	r20, 0x01	; 1
    2574:	19 f4       	brne	.+6      	; 0x257c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	84 60       	ori	r24, 0x04	; 4
    257a:	8d 83       	std	Y+5, r24	; 0x05
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	84 60       	ori	r24, 0x04	; 4
    2584:	8d 83       	std	Y+5, r24	; 0x05
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
<<<<<<< HEAD
<<<<<<< HEAD
    275c:	62 e3       	ldi	r22, 0x32	; 50
    275e:	70 e0       	ldi	r23, 0x00	; 0
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	4f dd       	rcall	.-1378   	; 0x2204 <delay>
=======
    2586:	62 e3       	ldi	r22, 0x32	; 50
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	4f dd       	rcall	.-1378   	; 0x202e <delay>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2590:	6b 85       	ldd	r22, Y+11	; 0x0b
    2592:	ce 01       	movw	r24, r28
    2594:	55 df       	rcall	.-342    	; 0x2440 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
<<<<<<< HEAD
    276c:	68 ee       	ldi	r22, 0xE8	; 232
    276e:	73 e0       	ldi	r23, 0x03	; 3
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	47 dd       	rcall	.-1394   	; 0x2204 <delay>
=======
    257c:	62 e3       	ldi	r22, 0x32	; 50
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	4f dd       	rcall	.-1378   	; 0x2024 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2586:	6b 85       	ldd	r22, Y+11	; 0x0b
    2588:	ce 01       	movw	r24, r28
    258a:	55 df       	rcall	.-342    	; 0x2436 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    258c:	68 ee       	ldi	r22, 0xE8	; 232
    258e:	73 e0       	ldi	r23, 0x03	; 3
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	47 dd       	rcall	.-1394   	; 0x2024 <delay>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2596:	68 ee       	ldi	r22, 0xE8	; 232
    2598:	73 e0       	ldi	r23, 0x03	; 3
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	47 dd       	rcall	.-1394   	; 0x202e <delay>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
<<<<<<< HEAD
<<<<<<< HEAD
    2776:	60 e3       	ldi	r22, 0x30	; 48
    2778:	ce 01       	movw	r24, r28
    277a:	7a df       	rcall	.-268    	; 0x2670 <_ZN17LiquidCrystal_I2C10write4bitsEh>
=======
    25a0:	60 e3       	ldi	r22, 0x30	; 48
    25a2:	ce 01       	movw	r24, r28
    25a4:	7a df       	rcall	.-268    	; 0x249a <_ZN17LiquidCrystal_I2C10write4bitsEh>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
   delayMicroseconds(4500); // wait min 4.1ms
    25a6:	84 e9       	ldi	r24, 0x94	; 148
    25a8:	91 e1       	ldi	r25, 0x11	; 17
    25aa:	7a dd       	rcall	.-1292   	; 0x20a0 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    25ac:	60 e3       	ldi	r22, 0x30	; 48
    25ae:	ce 01       	movw	r24, r28
    25b0:	74 df       	rcall	.-280    	; 0x249a <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    25b2:	84 e9       	ldi	r24, 0x94	; 148
    25b4:	91 e1       	ldi	r25, 0x11	; 17
    25b6:	74 dd       	rcall	.-1304   	; 0x20a0 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    25b8:	60 e3       	ldi	r22, 0x30	; 48
    25ba:	ce 01       	movw	r24, r28
    25bc:	6e df       	rcall	.-292    	; 0x249a <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    25be:	86 e9       	ldi	r24, 0x96	; 150
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	6e dd       	rcall	.-1316   	; 0x20a0 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
<<<<<<< HEAD
    279a:	60 e2       	ldi	r22, 0x20	; 32
    279c:	ce 01       	movw	r24, r28
    279e:	68 df       	rcall	.-304    	; 0x2670 <_ZN17LiquidCrystal_I2C10write4bitsEh>
=======
    2596:	60 e3       	ldi	r22, 0x30	; 48
    2598:	ce 01       	movw	r24, r28
    259a:	7a df       	rcall	.-268    	; 0x2490 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    259c:	84 e9       	ldi	r24, 0x94	; 148
    259e:	91 e1       	ldi	r25, 0x11	; 17
    25a0:	7a dd       	rcall	.-1292   	; 0x2096 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    25a2:	60 e3       	ldi	r22, 0x30	; 48
    25a4:	ce 01       	movw	r24, r28
    25a6:	74 df       	rcall	.-280    	; 0x2490 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    25a8:	84 e9       	ldi	r24, 0x94	; 148
    25aa:	91 e1       	ldi	r25, 0x11	; 17
    25ac:	74 dd       	rcall	.-1304   	; 0x2096 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    25ae:	60 e3       	ldi	r22, 0x30	; 48
    25b0:	ce 01       	movw	r24, r28
    25b2:	6e df       	rcall	.-292    	; 0x2490 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    25b4:	86 e9       	ldi	r24, 0x96	; 150
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	6e dd       	rcall	.-1316   	; 0x2096 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    25ba:	60 e2       	ldi	r22, 0x20	; 32
    25bc:	ce 01       	movw	r24, r28
    25be:	68 df       	rcall	.-304    	; 0x2490 <_ZN17LiquidCrystal_I2C10write4bitsEh>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    25c4:	60 e2       	ldi	r22, 0x20	; 32
    25c6:	ce 01       	movw	r24, r28
    25c8:	68 df       	rcall	.-304    	; 0x249a <_ZN17LiquidCrystal_I2C10write4bitsEh>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
<<<<<<< HEAD
<<<<<<< HEAD
    27a0:	6d 81       	ldd	r22, Y+5	; 0x05
    27a2:	60 62       	ori	r22, 0x20	; 32
    27a4:	ce 01       	movw	r24, r28
    27a6:	85 df       	rcall	.-246    	; 0x26b2 <_ZN17LiquidCrystal_I2C7commandEh>
=======
    25ca:	6d 81       	ldd	r22, Y+5	; 0x05
    25cc:	60 62       	ori	r22, 0x20	; 32
    25ce:	ce 01       	movw	r24, r28
    25d0:	85 df       	rcall	.-246    	; 0x24dc <_ZN17LiquidCrystal_I2C7commandEh>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    25d2:	84 e0       	ldi	r24, 0x04	; 4
    25d4:	8e 83       	std	Y+6, r24	; 0x06
	display();
    25d6:	ce 01       	movw	r24, r28
    25d8:	ba df       	rcall	.-140    	; 0x254e <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    25da:	ce 01       	movw	r24, r28
    25dc:	81 df       	rcall	.-254    	; 0x24e0 <_ZN17LiquidCrystal_I2C5clearEv>
    25de:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    25e0:	8f 83       	std	Y+7, r24	; 0x07
    25e2:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    25e4:	ce 01       	movw	r24, r28
    25e6:	7a df       	rcall	.-268    	; 0x24dc <_ZN17LiquidCrystal_I2C7commandEh>
    25e8:	ce 01       	movw	r24, r28
    25ea:	df 91       	pop	r29
	
	home();
    25ec:	cf 91       	pop	r28
  
}
    25ee:	7d cf       	rjmp	.-262    	; 0x24ea <_ZN17LiquidCrystal_I2C4homeEv>

<<<<<<< HEAD
000027c6 <_ZN17LiquidCrystal_I2C9init_privEv>:
    27c6:	cf 93       	push	r28
=======
    25c0:	6d 81       	ldd	r22, Y+5	; 0x05
    25c2:	60 62       	ori	r22, 0x20	; 32
    25c4:	ce 01       	movw	r24, r28
    25c6:	85 df       	rcall	.-246    	; 0x24d2 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    25c8:	84 e0       	ldi	r24, 0x04	; 4
    25ca:	8e 83       	std	Y+6, r24	; 0x06
	display();
    25cc:	ce 01       	movw	r24, r28
    25ce:	ba df       	rcall	.-140    	; 0x2544 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    25d0:	ce 01       	movw	r24, r28
    25d2:	81 df       	rcall	.-254    	; 0x24d6 <_ZN17LiquidCrystal_I2C5clearEv>
    25d4:	82 e0       	ldi	r24, 0x02	; 2
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    25d6:	8f 83       	std	Y+7, r24	; 0x07
    25d8:	66 e0       	ldi	r22, 0x06	; 6
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    25da:	ce 01       	movw	r24, r28
    25dc:	7a df       	rcall	.-268    	; 0x24d2 <_ZN17LiquidCrystal_I2C7commandEh>
    25de:	ce 01       	movw	r24, r28
    25e0:	df 91       	pop	r29
	
	home();
    25e2:	cf 91       	pop	r28
  
}
    25e4:	7d cf       	rjmp	.-262    	; 0x24e0 <_ZN17LiquidCrystal_I2C4homeEv>

000025e6 <_ZN17LiquidCrystal_I2C9init_privEv>:
    25e6:	cf 93       	push	r28
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
000025f0 <_ZN17LiquidCrystal_I2C9init_privEv>:
    25f0:	cf 93       	push	r28
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
<<<<<<< HEAD
<<<<<<< HEAD
    27c8:	df 93       	push	r29
    27ca:	ec 01       	movw	r28, r24
=======
    25e8:	df 93       	push	r29
    25ea:	ec 01       	movw	r28, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    25f2:	df 93       	push	r29
    25f4:	ec 01       	movw	r28, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
<<<<<<< HEAD
<<<<<<< HEAD
    27cc:	84 ef       	ldi	r24, 0xF4	; 244
    27ce:	94 e0       	ldi	r25, 0x04	; 4
    27d0:	d5 d0       	rcall	.+426    	; 0x297c <_ZN7TwoWire5beginEv>
=======
    25f6:	8d ed       	ldi	r24, 0xDD	; 221
    25f8:	94 e0       	ldi	r25, 0x04	; 4
    25fa:	d5 d0       	rcall	.+426    	; 0x27a6 <_ZN7TwoWire5beginEv>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    25fc:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	4a 85       	ldd	r20, Y+10	; 0x0a
    2602:	69 85       	ldd	r22, Y+9	; 0x09
    2604:	ce 01       	movw	r24, r28
}
<<<<<<< HEAD
    27dc:	df 91       	pop	r29
=======
    25ec:	8d ed       	ldi	r24, 0xDD	; 221
    25ee:	94 e0       	ldi	r25, 0x04	; 4
    25f0:	d5 d0       	rcall	.+426    	; 0x279c <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    25f2:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    25f8:	69 85       	ldd	r22, Y+9	; 0x09
    25fa:	ce 01       	movw	r24, r28
}
    25fc:	df 91       	pop	r29
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2606:	df 91       	pop	r29
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
<<<<<<< HEAD
<<<<<<< HEAD
    27de:	cf 91       	pop	r28
    27e0:	ad cf       	rjmp	.-166    	; 0x273c <_ZN17LiquidCrystal_I2C5beginEhhh>

000027e2 <_ZN17LiquidCrystal_I2C4initEv>:
=======
    25fe:	cf 91       	pop	r28
    2600:	ad cf       	rjmp	.-166    	; 0x255c <_ZN17LiquidCrystal_I2C5beginEhhh>

00002602 <_ZN17LiquidCrystal_I2C4initEv>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2608:	cf 91       	pop	r28
    260a:	ad cf       	rjmp	.-166    	; 0x2566 <_ZN17LiquidCrystal_I2C5beginEhhh>

0000260c <_ZN17LiquidCrystal_I2C4initEv>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
<<<<<<< HEAD
<<<<<<< HEAD
    27e2:	f1 cf       	rjmp	.-30     	; 0x27c6 <_ZN17LiquidCrystal_I2C9init_privEv>

000027e4 <_ZN7TwoWire9availableEv>:
=======
    2602:	f1 cf       	rjmp	.-30     	; 0x25e6 <_ZN17LiquidCrystal_I2C9init_privEv>

00002604 <_ZN7TwoWire9availableEv>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    260c:	f1 cf       	rjmp	.-30     	; 0x25f0 <_ZN17LiquidCrystal_I2C9init_privEv>

0000260e <_ZN7TwoWire9availableEv>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
<<<<<<< HEAD
<<<<<<< HEAD
    27e4:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	20 91 29 05 	lds	r18, 0x0529	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    27ee:	82 1b       	sub	r24, r18
    27f0:	91 09       	sbc	r25, r1
    27f2:	08 95       	ret

000027f4 <_ZN7TwoWire4readEv>:
    27f4:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    27f8:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    27fc:	98 17       	cp	r25, r24
    27fe:	50 f4       	brcc	.+20     	; 0x2814 <_ZN7TwoWire4readEv+0x20>
    2800:	e9 2f       	mov	r30, r25
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	e6 5d       	subi	r30, 0xD6	; 214
    2806:	fa 4f       	sbci	r31, 0xFA	; 250
    2808:	20 81       	ld	r18, Z
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	9f 5f       	subi	r25, 0xFF	; 255
    280e:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <_ZN7TwoWire4readEv+0x24>
    2814:	2f ef       	ldi	r18, 0xFF	; 255
    2816:	3f ef       	ldi	r19, 0xFF	; 255
    2818:	c9 01       	movw	r24, r18
    281a:	08 95       	ret

0000281c <_ZN7TwoWire4peekEv>:
    281c:	e0 91 29 05 	lds	r30, 0x0529	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    2820:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    2824:	e8 17       	cp	r30, r24
    2826:	30 f4       	brcc	.+12     	; 0x2834 <_ZN7TwoWire4peekEv+0x18>
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	e6 5d       	subi	r30, 0xD6	; 214
    282c:	fa 4f       	sbci	r31, 0xFA	; 250
    282e:	80 81       	ld	r24, Z
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	08 95       	ret
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	9f ef       	ldi	r25, 0xFF	; 255
    2838:	08 95       	ret

0000283a <_ZN7TwoWire5flushEv>:
    283a:	08 95       	ret

0000283c <_ZN7TwoWire16onReceiveServiceEPhi>:
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	ec 01       	movw	r28, r24
    2842:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <_ZN7TwoWire14user_onReceiveE>
    2846:	f0 91 01 05 	lds	r31, 0x0501	; 0x800501 <_ZN7TwoWire14user_onReceiveE+0x1>
    284a:	30 97       	sbiw	r30, 0x00	; 0
    284c:	f1 f0       	breq	.+60     	; 0x288a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    284e:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    2852:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    2856:	98 17       	cp	r25, r24
    2858:	c0 f0       	brcs	.+48     	; 0x288a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	29 2f       	mov	r18, r25
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	26 17       	cp	r18, r22
    2862:	37 07       	cpc	r19, r23
    2864:	54 f4       	brge	.+20     	; 0x287a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2866:	de 01       	movw	r26, r28
    2868:	a2 0f       	add	r26, r18
    286a:	b3 1f       	adc	r27, r19
    286c:	4c 91       	ld	r20, X
    286e:	d9 01       	movw	r26, r18
    2870:	a6 5d       	subi	r26, 0xD6	; 214
    2872:	ba 4f       	sbci	r27, 0xFA	; 250
    2874:	4c 93       	st	X, r20
    2876:	9f 5f       	subi	r25, 0xFF	; 255
    2878:	f1 cf       	rjmp	.-30     	; 0x285c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    287a:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    287e:	60 93 28 05 	sts	0x0528, r22	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    2882:	cb 01       	movw	r24, r22
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	19 94       	eijmp
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	08 95       	ret

00002890 <_ZN7TwoWire16onRequestServiceEv>:
    2890:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <_ZN7TwoWire14user_onRequestE>
    2894:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <_ZN7TwoWire14user_onRequestE+0x1>
    2898:	30 97       	sbiw	r30, 0x00	; 0
    289a:	29 f0       	breq	.+10     	; 0x28a6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    289c:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    28a0:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    28a4:	19 94       	eijmp
    28a6:	08 95       	ret

000028a8 <_ZN7TwoWire5writeEPKhj>:
    28a8:	cf 92       	push	r12
    28aa:	df 92       	push	r13
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	7c 01       	movw	r14, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	8a 01       	movw	r16, r20
    28be:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <_ZN7TwoWire12transmittingE>
    28c2:	22 23       	and	r18, r18
    28c4:	89 f0       	breq	.+34     	; 0x28e8 <_ZN7TwoWire5writeEPKhj+0x40>
    28c6:	eb 01       	movw	r28, r22
    28c8:	6b 01       	movw	r12, r22
    28ca:	c4 0e       	add	r12, r20
    28cc:	d5 1e       	adc	r13, r21
    28ce:	cc 15       	cp	r28, r12
    28d0:	dd 05       	cpc	r29, r13
    28d2:	61 f0       	breq	.+24     	; 0x28ec <_ZN7TwoWire5writeEPKhj+0x44>
    28d4:	69 91       	ld	r22, Y+
    28d6:	d7 01       	movw	r26, r14
    28d8:	ed 91       	ld	r30, X+
    28da:	fc 91       	ld	r31, X
    28dc:	01 90       	ld	r0, Z+
    28de:	f0 81       	ld	r31, Z
    28e0:	e0 2d       	mov	r30, r0
    28e2:	c7 01       	movw	r24, r14
    28e4:	19 95       	eicall
    28e6:	f3 cf       	rjmp	.-26     	; 0x28ce <_ZN7TwoWire5writeEPKhj+0x26>
    28e8:	64 2f       	mov	r22, r20
    28ea:	eb d0       	rcall	.+470    	; 0x2ac2 <twi_transmit>
    28ec:	c8 01       	movw	r24, r16
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	ff 90       	pop	r15
    28f8:	ef 90       	pop	r14
    28fa:	df 90       	pop	r13
    28fc:	cf 90       	pop	r12
    28fe:	08 95       	ret

00002900 <_ZN7TwoWire5writeEh>:
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	1f 92       	push	r1
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	69 83       	std	Y+1, r22	; 0x01
    290c:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <_ZN7TwoWire12transmittingE>
    2910:	22 23       	and	r18, r18
    2912:	d1 f0       	breq	.+52     	; 0x2948 <_ZN7TwoWire5writeEh+0x48>
    2914:	20 91 05 05 	lds	r18, 0x0505	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    2918:	20 32       	cpi	r18, 0x20	; 32
    291a:	40 f0       	brcs	.+16     	; 0x292c <_ZN7TwoWire5writeEh+0x2c>
    291c:	21 e0       	ldi	r18, 0x01	; 1
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	fc 01       	movw	r30, r24
    2922:	33 83       	std	Z+3, r19	; 0x03
    2924:	22 83       	std	Z+2, r18	; 0x02
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <_ZN7TwoWire5writeEh+0x54>
    292c:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    2930:	e8 2f       	mov	r30, r24
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	e9 5f       	subi	r30, 0xF9	; 249
    2936:	fa 4f       	sbci	r31, 0xFA	; 250
    2938:	99 81       	ldd	r25, Y+1	; 0x01
    293a:	90 83       	st	Z, r25
    293c:	8f 5f       	subi	r24, 0xFF	; 255
    293e:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    2942:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <_ZN7TwoWire5writeEh+0x50>
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	ce 01       	movw	r24, r28
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	b9 d0       	rcall	.+370    	; 0x2ac2 <twi_transmit>
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0f 90       	pop	r0
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	08 95       	ret

0000295c <_ZN7TwoWireC1Ev>:
    295c:	fc 01       	movw	r30, r24
    295e:	13 82       	std	Z+3, r1	; 0x03
    2960:	12 82       	std	Z+2, r1	; 0x02
    2962:	88 ee       	ldi	r24, 0xE8	; 232
    2964:	93 e0       	ldi	r25, 0x03	; 3
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	84 83       	std	Z+4, r24	; 0x04
    296c:	95 83       	std	Z+5, r25	; 0x05
    296e:	a6 83       	std	Z+6, r26	; 0x06
    2970:	b7 83       	std	Z+7, r27	; 0x07
    2972:	89 e4       	ldi	r24, 0x49	; 73
    2974:	93 e0       	ldi	r25, 0x03	; 3
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
    297a:	08 95       	ret

0000297c <_ZN7TwoWire5beginEv>:
    297c:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZN7TwoWire13rxBufferIndexE>
    2980:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <_ZN7TwoWire14rxBufferLengthE>
    2984:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    2988:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    298c:	28 d0       	rcall	.+80     	; 0x29de <twi_init>
    298e:	88 e4       	ldi	r24, 0x48	; 72
    2990:	94 e1       	ldi	r25, 0x14	; 20
    2992:	c4 d0       	rcall	.+392    	; 0x2b1c <twi_attachSlaveTxEvent>
    2994:	8e e1       	ldi	r24, 0x1E	; 30
    2996:	94 e1       	ldi	r25, 0x14	; 20
    2998:	bc c0       	rjmp	.+376    	; 0x2b12 <twi_attachSlaveRxEvent>

0000299a <_ZN7TwoWire17beginTransmissionEh>:
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZN7TwoWire12transmittingE>
    29a0:	60 93 27 05 	sts	0x0527, r22	; 0x800527 <_ZN7TwoWire9txAddressE>
    29a4:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    29a8:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    29ac:	08 95       	ret

000029ae <_ZN7TwoWire15endTransmissionEh>:
    29ae:	0f 93       	push	r16
    29b0:	06 2f       	mov	r16, r22
    29b2:	21 e0       	ldi	r18, 0x01	; 1
    29b4:	40 91 05 05 	lds	r20, 0x0505	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    29b8:	67 e0       	ldi	r22, 0x07	; 7
    29ba:	75 e0       	ldi	r23, 0x05	; 5
    29bc:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <_ZN7TwoWire9txAddressE>
    29c0:	2a d0       	rcall	.+84     	; 0x2a16 <twi_writeTo>
    29c2:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire13txBufferIndexE>
    29c6:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZN7TwoWire14txBufferLengthE>
    29ca:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZN7TwoWire12transmittingE>
    29ce:	0f 91       	pop	r16
    29d0:	08 95       	ret

000029d2 <_ZN7TwoWire15endTransmissionEv>:
    29d2:	61 e0       	ldi	r22, 0x01	; 1
    29d4:	ec cf       	rjmp	.-40     	; 0x29ae <_ZN7TwoWire15endTransmissionEh>

000029d6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
=======
    2604:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	20 91 12 05 	lds	r18, 0x0512	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    260e:	82 1b       	sub	r24, r18
    2610:	91 09       	sbc	r25, r1
    2612:	08 95       	ret

00002614 <_ZN7TwoWire4readEv>:
    2614:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    2618:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    261c:	98 17       	cp	r25, r24
    261e:	50 f4       	brcc	.+20     	; 0x2634 <_ZN7TwoWire4readEv+0x20>
    2620:	e9 2f       	mov	r30, r25
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	ed 5e       	subi	r30, 0xED	; 237
    2626:	fa 4f       	sbci	r31, 0xFA	; 250
    2628:	20 81       	ld	r18, Z
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	9f 5f       	subi	r25, 0xFF	; 255
    262e:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <_ZN7TwoWire4readEv+0x24>
    2634:	2f ef       	ldi	r18, 0xFF	; 255
    2636:	3f ef       	ldi	r19, 0xFF	; 255
    2638:	c9 01       	movw	r24, r18
    263a:	08 95       	ret

0000263c <_ZN7TwoWire4peekEv>:
    263c:	e0 91 12 05 	lds	r30, 0x0512	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    2640:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    2644:	e8 17       	cp	r30, r24
    2646:	30 f4       	brcc	.+12     	; 0x2654 <_ZN7TwoWire4peekEv+0x18>
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	ed 5e       	subi	r30, 0xED	; 237
    264c:	fa 4f       	sbci	r31, 0xFA	; 250
    264e:	80 81       	ld	r24, Z
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	08 95       	ret
    2654:	8f ef       	ldi	r24, 0xFF	; 255
    2656:	9f ef       	ldi	r25, 0xFF	; 255
    2658:	08 95       	ret

0000265a <_ZN7TwoWire5flushEv>:
    265a:	08 95       	ret

0000265c <_ZN7TwoWire16onReceiveServiceEPhi>:
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	ec 01       	movw	r28, r24
    2662:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <_ZN7TwoWire14user_onReceiveE>
    2666:	f0 91 ea 04 	lds	r31, 0x04EA	; 0x8004ea <_ZN7TwoWire14user_onReceiveE+0x1>
    266a:	30 97       	sbiw	r30, 0x00	; 0
    266c:	f1 f0       	breq	.+60     	; 0x26aa <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    266e:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    2672:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    2676:	98 17       	cp	r25, r24
    2678:	c0 f0       	brcs	.+48     	; 0x26aa <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	29 2f       	mov	r18, r25
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	26 17       	cp	r18, r22
    2682:	37 07       	cpc	r19, r23
    2684:	54 f4       	brge	.+20     	; 0x269a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2686:	de 01       	movw	r26, r28
    2688:	a2 0f       	add	r26, r18
    268a:	b3 1f       	adc	r27, r19
    268c:	4c 91       	ld	r20, X
    268e:	d9 01       	movw	r26, r18
    2690:	ad 5e       	subi	r26, 0xED	; 237
    2692:	ba 4f       	sbci	r27, 0xFA	; 250
    2694:	4c 93       	st	X, r20
    2696:	9f 5f       	subi	r25, 0xFF	; 255
    2698:	f1 cf       	rjmp	.-30     	; 0x267c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    269a:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    269e:	60 93 11 05 	sts	0x0511, r22	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    26a2:	cb 01       	movw	r24, r22
    26a4:	df 91       	pop	r29
    26a6:	cf 91       	pop	r28
    26a8:	19 94       	eijmp
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <_ZN7TwoWire16onRequestServiceEv>:
    26b0:	e0 91 eb 04 	lds	r30, 0x04EB	; 0x8004eb <_ZN7TwoWire14user_onRequestE>
    26b4:	f0 91 ec 04 	lds	r31, 0x04EC	; 0x8004ec <_ZN7TwoWire14user_onRequestE+0x1>
    26b8:	30 97       	sbiw	r30, 0x00	; 0
    26ba:	29 f0       	breq	.+10     	; 0x26c6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    26bc:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    26c0:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    26c4:	19 94       	eijmp
    26c6:	08 95       	ret

000026c8 <_ZN7TwoWire5writeEPKhj>:
    26c8:	cf 92       	push	r12
    26ca:	df 92       	push	r13
    26cc:	ef 92       	push	r14
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	7c 01       	movw	r14, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	8a 01       	movw	r16, r20
    26de:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <_ZN7TwoWire12transmittingE>
    26e2:	22 23       	and	r18, r18
    26e4:	89 f0       	breq	.+34     	; 0x2708 <_ZN7TwoWire5writeEPKhj+0x40>
    26e6:	eb 01       	movw	r28, r22
    26e8:	6b 01       	movw	r12, r22
    26ea:	c4 0e       	add	r12, r20
    26ec:	d5 1e       	adc	r13, r21
    26ee:	cc 15       	cp	r28, r12
    26f0:	dd 05       	cpc	r29, r13
    26f2:	61 f0       	breq	.+24     	; 0x270c <_ZN7TwoWire5writeEPKhj+0x44>
    26f4:	69 91       	ld	r22, Y+
    26f6:	d7 01       	movw	r26, r14
    26f8:	ed 91       	ld	r30, X+
    26fa:	fc 91       	ld	r31, X
    26fc:	01 90       	ld	r0, Z+
    26fe:	f0 81       	ld	r31, Z
    2700:	e0 2d       	mov	r30, r0
    2702:	c7 01       	movw	r24, r14
    2704:	19 95       	eicall
    2706:	f3 cf       	rjmp	.-26     	; 0x26ee <_ZN7TwoWire5writeEPKhj+0x26>
    2708:	64 2f       	mov	r22, r20
    270a:	eb d0       	rcall	.+470    	; 0x28e2 <twi_transmit>
    270c:	c8 01       	movw	r24, r16
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	ff 90       	pop	r15
    2718:	ef 90       	pop	r14
    271a:	df 90       	pop	r13
    271c:	cf 90       	pop	r12
    271e:	08 95       	ret

00002720 <_ZN7TwoWire5writeEh>:
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	1f 92       	push	r1
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	69 83       	std	Y+1, r22	; 0x01
    272c:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <_ZN7TwoWire12transmittingE>
    2730:	22 23       	and	r18, r18
    2732:	d1 f0       	breq	.+52     	; 0x2768 <_ZN7TwoWire5writeEh+0x48>
    2734:	20 91 ee 04 	lds	r18, 0x04EE	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    2738:	20 32       	cpi	r18, 0x20	; 32
    273a:	40 f0       	brcs	.+16     	; 0x274c <_ZN7TwoWire5writeEh+0x2c>
    273c:	21 e0       	ldi	r18, 0x01	; 1
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	fc 01       	movw	r30, r24
    2742:	33 83       	std	Z+3, r19	; 0x03
    2744:	22 83       	std	Z+2, r18	; 0x02
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <_ZN7TwoWire5writeEh+0x54>
    274c:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    2750:	e8 2f       	mov	r30, r24
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	e0 51       	subi	r30, 0x10	; 16
    2756:	fb 4f       	sbci	r31, 0xFB	; 251
    2758:	99 81       	ldd	r25, Y+1	; 0x01
    275a:	90 83       	st	Z, r25
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    2762:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <_ZN7TwoWire5writeEh+0x50>
    2768:	61 e0       	ldi	r22, 0x01	; 1
    276a:	ce 01       	movw	r24, r28
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	b9 d0       	rcall	.+370    	; 0x28e2 <twi_transmit>
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0f 90       	pop	r0
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	08 95       	ret

0000277c <_ZN7TwoWireC1Ev>:
    277c:	fc 01       	movw	r30, r24
    277e:	13 82       	std	Z+3, r1	; 0x03
    2780:	12 82       	std	Z+2, r1	; 0x02
    2782:	88 ee       	ldi	r24, 0xE8	; 232
    2784:	93 e0       	ldi	r25, 0x03	; 3
    2786:	a0 e0       	ldi	r26, 0x00	; 0
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	84 83       	std	Z+4, r24	; 0x04
    278c:	95 83       	std	Z+5, r25	; 0x05
    278e:	a6 83       	std	Z+6, r26	; 0x06
    2790:	b7 83       	std	Z+7, r27	; 0x07
    2792:	84 e4       	ldi	r24, 0x44	; 68
    2794:	93 e0       	ldi	r25, 0x03	; 3
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
    279a:	08 95       	ret

0000279c <_ZN7TwoWire5beginEv>:
    279c:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    27a0:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    27a4:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    27a8:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    27ac:	28 d0       	rcall	.+80     	; 0x27fe <twi_init>
    27ae:	88 e5       	ldi	r24, 0x58	; 88
    27b0:	93 e1       	ldi	r25, 0x13	; 19
    27b2:	c4 d0       	rcall	.+392    	; 0x293c <twi_attachSlaveTxEvent>
    27b4:	8e e2       	ldi	r24, 0x2E	; 46
    27b6:	93 e1       	ldi	r25, 0x13	; 19
    27b8:	bc c0       	rjmp	.+376    	; 0x2932 <twi_attachSlaveRxEvent>

000027ba <_ZN7TwoWire17beginTransmissionEh>:
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <_ZN7TwoWire12transmittingE>
    27c0:	60 93 10 05 	sts	0x0510, r22	; 0x800510 <_ZN7TwoWire9txAddressE>
    27c4:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    27c8:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    27cc:	08 95       	ret

000027ce <_ZN7TwoWire15endTransmissionEh>:
    27ce:	0f 93       	push	r16
    27d0:	06 2f       	mov	r16, r22
    27d2:	21 e0       	ldi	r18, 0x01	; 1
    27d4:	40 91 ee 04 	lds	r20, 0x04EE	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    27d8:	60 ef       	ldi	r22, 0xF0	; 240
    27da:	74 e0       	ldi	r23, 0x04	; 4
    27dc:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <_ZN7TwoWire9txAddressE>
    27e0:	2a d0       	rcall	.+84     	; 0x2836 <twi_writeTo>
    27e2:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    27e6:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    27ea:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZN7TwoWire12transmittingE>
    27ee:	0f 91       	pop	r16
    27f0:	08 95       	ret

000027f2 <_ZN7TwoWire15endTransmissionEv>:
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	ec cf       	rjmp	.-40     	; 0x27ce <_ZN7TwoWire15endTransmissionEh>

000027f6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    260e:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	20 91 12 05 	lds	r18, 0x0512	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    2618:	82 1b       	sub	r24, r18
    261a:	91 09       	sbc	r25, r1
    261c:	08 95       	ret

0000261e <_ZN7TwoWire4readEv>:
    261e:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    2622:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    2626:	98 17       	cp	r25, r24
    2628:	50 f4       	brcc	.+20     	; 0x263e <_ZN7TwoWire4readEv+0x20>
    262a:	e9 2f       	mov	r30, r25
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	ed 5e       	subi	r30, 0xED	; 237
    2630:	fa 4f       	sbci	r31, 0xFA	; 250
    2632:	20 81       	ld	r18, Z
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	9f 5f       	subi	r25, 0xFF	; 255
    2638:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <_ZN7TwoWire4readEv+0x24>
    263e:	2f ef       	ldi	r18, 0xFF	; 255
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	c9 01       	movw	r24, r18
    2644:	08 95       	ret

00002646 <_ZN7TwoWire4peekEv>:
    2646:	e0 91 12 05 	lds	r30, 0x0512	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    264a:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    264e:	e8 17       	cp	r30, r24
    2650:	30 f4       	brcc	.+12     	; 0x265e <_ZN7TwoWire4peekEv+0x18>
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	ed 5e       	subi	r30, 0xED	; 237
    2656:	fa 4f       	sbci	r31, 0xFA	; 250
    2658:	80 81       	ld	r24, Z
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	08 95       	ret
    265e:	8f ef       	ldi	r24, 0xFF	; 255
    2660:	9f ef       	ldi	r25, 0xFF	; 255
    2662:	08 95       	ret

00002664 <_ZN7TwoWire5flushEv>:
    2664:	08 95       	ret

00002666 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	ec 01       	movw	r28, r24
    266c:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <_ZN7TwoWire14user_onReceiveE>
    2670:	f0 91 ea 04 	lds	r31, 0x04EA	; 0x8004ea <_ZN7TwoWire14user_onReceiveE+0x1>
    2674:	30 97       	sbiw	r30, 0x00	; 0
    2676:	f1 f0       	breq	.+60     	; 0x26b4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2678:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    267c:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    2680:	98 17       	cp	r25, r24
    2682:	c0 f0       	brcs	.+48     	; 0x26b4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	29 2f       	mov	r18, r25
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	26 17       	cp	r18, r22
    268c:	37 07       	cpc	r19, r23
    268e:	54 f4       	brge	.+20     	; 0x26a4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2690:	de 01       	movw	r26, r28
    2692:	a2 0f       	add	r26, r18
    2694:	b3 1f       	adc	r27, r19
    2696:	4c 91       	ld	r20, X
    2698:	d9 01       	movw	r26, r18
    269a:	ad 5e       	subi	r26, 0xED	; 237
    269c:	ba 4f       	sbci	r27, 0xFA	; 250
    269e:	4c 93       	st	X, r20
    26a0:	9f 5f       	subi	r25, 0xFF	; 255
    26a2:	f1 cf       	rjmp	.-30     	; 0x2686 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    26a4:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    26a8:	60 93 11 05 	sts	0x0511, r22	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    26ac:	cb 01       	movw	r24, r22
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	19 94       	eijmp
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	08 95       	ret

000026ba <_ZN7TwoWire16onRequestServiceEv>:
    26ba:	e0 91 eb 04 	lds	r30, 0x04EB	; 0x8004eb <_ZN7TwoWire14user_onRequestE>
    26be:	f0 91 ec 04 	lds	r31, 0x04EC	; 0x8004ec <_ZN7TwoWire14user_onRequestE+0x1>
    26c2:	30 97       	sbiw	r30, 0x00	; 0
    26c4:	29 f0       	breq	.+10     	; 0x26d0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    26c6:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    26ca:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    26ce:	19 94       	eijmp
    26d0:	08 95       	ret

000026d2 <_ZN7TwoWire5writeEPKhj>:
    26d2:	cf 92       	push	r12
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	7c 01       	movw	r14, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	8a 01       	movw	r16, r20
    26e8:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <_ZN7TwoWire12transmittingE>
    26ec:	22 23       	and	r18, r18
    26ee:	89 f0       	breq	.+34     	; 0x2712 <_ZN7TwoWire5writeEPKhj+0x40>
    26f0:	eb 01       	movw	r28, r22
    26f2:	6b 01       	movw	r12, r22
    26f4:	c4 0e       	add	r12, r20
    26f6:	d5 1e       	adc	r13, r21
    26f8:	cc 15       	cp	r28, r12
    26fa:	dd 05       	cpc	r29, r13
    26fc:	61 f0       	breq	.+24     	; 0x2716 <_ZN7TwoWire5writeEPKhj+0x44>
    26fe:	69 91       	ld	r22, Y+
    2700:	d7 01       	movw	r26, r14
    2702:	ed 91       	ld	r30, X+
    2704:	fc 91       	ld	r31, X
    2706:	01 90       	ld	r0, Z+
    2708:	f0 81       	ld	r31, Z
    270a:	e0 2d       	mov	r30, r0
    270c:	c7 01       	movw	r24, r14
    270e:	19 95       	eicall
    2710:	f3 cf       	rjmp	.-26     	; 0x26f8 <_ZN7TwoWire5writeEPKhj+0x26>
    2712:	64 2f       	mov	r22, r20
    2714:	eb d0       	rcall	.+470    	; 0x28ec <twi_transmit>
    2716:	c8 01       	movw	r24, r16
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	cf 90       	pop	r12
    2728:	08 95       	ret

0000272a <_ZN7TwoWire5writeEh>:
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	1f 92       	push	r1
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	69 83       	std	Y+1, r22	; 0x01
    2736:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <_ZN7TwoWire12transmittingE>
    273a:	22 23       	and	r18, r18
    273c:	d1 f0       	breq	.+52     	; 0x2772 <_ZN7TwoWire5writeEh+0x48>
    273e:	20 91 ee 04 	lds	r18, 0x04EE	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    2742:	20 32       	cpi	r18, 0x20	; 32
    2744:	40 f0       	brcs	.+16     	; 0x2756 <_ZN7TwoWire5writeEh+0x2c>
    2746:	21 e0       	ldi	r18, 0x01	; 1
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	fc 01       	movw	r30, r24
    274c:	33 83       	std	Z+3, r19	; 0x03
    274e:	22 83       	std	Z+2, r18	; 0x02
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	14 c0       	rjmp	.+40     	; 0x277e <_ZN7TwoWire5writeEh+0x54>
    2756:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    275a:	e8 2f       	mov	r30, r24
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	e0 51       	subi	r30, 0x10	; 16
    2760:	fb 4f       	sbci	r31, 0xFB	; 251
    2762:	99 81       	ldd	r25, Y+1	; 0x01
    2764:	90 83       	st	Z, r25
    2766:	8f 5f       	subi	r24, 0xFF	; 255
    2768:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    276c:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    2770:	04 c0       	rjmp	.+8      	; 0x277a <_ZN7TwoWire5writeEh+0x50>
    2772:	61 e0       	ldi	r22, 0x01	; 1
    2774:	ce 01       	movw	r24, r28
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	b9 d0       	rcall	.+370    	; 0x28ec <twi_transmit>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0f 90       	pop	r0
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	08 95       	ret

00002786 <_ZN7TwoWireC1Ev>:
    2786:	fc 01       	movw	r30, r24
    2788:	13 82       	std	Z+3, r1	; 0x03
    278a:	12 82       	std	Z+2, r1	; 0x02
    278c:	88 ee       	ldi	r24, 0xE8	; 232
    278e:	93 e0       	ldi	r25, 0x03	; 3
    2790:	a0 e0       	ldi	r26, 0x00	; 0
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	84 83       	std	Z+4, r24	; 0x04
    2796:	95 83       	std	Z+5, r25	; 0x05
    2798:	a6 83       	std	Z+6, r26	; 0x06
    279a:	b7 83       	std	Z+7, r27	; 0x07
    279c:	84 e4       	ldi	r24, 0x44	; 68
    279e:	93 e0       	ldi	r25, 0x03	; 3
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
    27a4:	08 95       	ret

000027a6 <_ZN7TwoWire5beginEv>:
    27a6:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <_ZN7TwoWire13rxBufferIndexE>
    27aa:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <_ZN7TwoWire14rxBufferLengthE>
    27ae:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    27b2:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    27b6:	28 d0       	rcall	.+80     	; 0x2808 <twi_init>
    27b8:	8d e5       	ldi	r24, 0x5D	; 93
    27ba:	93 e1       	ldi	r25, 0x13	; 19
    27bc:	c4 d0       	rcall	.+392    	; 0x2946 <twi_attachSlaveTxEvent>
    27be:	83 e3       	ldi	r24, 0x33	; 51
    27c0:	93 e1       	ldi	r25, 0x13	; 19
    27c2:	bc c0       	rjmp	.+376    	; 0x293c <twi_attachSlaveRxEvent>

000027c4 <_ZN7TwoWire17beginTransmissionEh>:
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <_ZN7TwoWire12transmittingE>
    27ca:	60 93 10 05 	sts	0x0510, r22	; 0x800510 <_ZN7TwoWire9txAddressE>
    27ce:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    27d2:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    27d6:	08 95       	ret

000027d8 <_ZN7TwoWire15endTransmissionEh>:
    27d8:	0f 93       	push	r16
    27da:	06 2f       	mov	r16, r22
    27dc:	21 e0       	ldi	r18, 0x01	; 1
    27de:	40 91 ee 04 	lds	r20, 0x04EE	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    27e2:	60 ef       	ldi	r22, 0xF0	; 240
    27e4:	74 e0       	ldi	r23, 0x04	; 4
    27e6:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <_ZN7TwoWire9txAddressE>
    27ea:	2a d0       	rcall	.+84     	; 0x2840 <twi_writeTo>
    27ec:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <_ZN7TwoWire13txBufferIndexE>
    27f0:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <_ZN7TwoWire14txBufferLengthE>
    27f4:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZN7TwoWire12transmittingE>
    27f8:	0f 91       	pop	r16
    27fa:	08 95       	ret

000027fc <_ZN7TwoWire15endTransmissionEv>:
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	ec cf       	rjmp	.-40     	; 0x27d8 <_ZN7TwoWire15endTransmissionEh>

00002800 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
<<<<<<< HEAD
<<<<<<< HEAD
    29d6:	84 ef       	ldi	r24, 0xF4	; 244
    29d8:	94 e0       	ldi	r25, 0x04	; 4
    29da:	c0 cf       	rjmp	.-128    	; 0x295c <_ZN7TwoWireC1Ev>

000029dc <yield>:
=======
    27f6:	8d ed       	ldi	r24, 0xDD	; 221
    27f8:	94 e0       	ldi	r25, 0x04	; 4
    27fa:	c0 cf       	rjmp	.-128    	; 0x277c <_ZN7TwoWireC1Ev>

000027fc <yield>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2800:	8d ed       	ldi	r24, 0xDD	; 221
    2802:	94 e0       	ldi	r25, 0x04	; 4
    2804:	c0 cf       	rjmp	.-128    	; 0x2786 <_ZN7TwoWireC1Ev>

00002806 <yield>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
<<<<<<< HEAD
<<<<<<< HEAD
    29dc:	08 95       	ret

000029de <twi_init>:
=======
    27fc:	08 95       	ret

000027fe <twi_init>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2806:	08 95       	ret

00002808 <twi_init>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
<<<<<<< HEAD
<<<<<<< HEAD
    29de:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <twi_state>
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <twi_sendStop>
    29e8:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <twi_inRepStart>
    29ec:	61 e0       	ldi	r22, 0x01	; 1
    29ee:	84 e1       	ldi	r24, 0x14	; 20
    29f0:	40 dd       	rcall	.-1408   	; 0x2472 <digitalWrite>
    29f2:	61 e0       	ldi	r22, 0x01	; 1
    29f4:	85 e1       	ldi	r24, 0x15	; 21
    29f6:	3d dd       	rcall	.-1414   	; 0x2472 <digitalWrite>
    29f8:	e9 eb       	ldi	r30, 0xB9	; 185
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	8e 7f       	andi	r24, 0xFE	; 254
    2a00:	80 83       	st	Z, r24
    2a02:	80 81       	ld	r24, Z
    2a04:	8d 7f       	andi	r24, 0xFD	; 253
    2a06:	80 83       	st	Z, r24
    2a08:	88 e4       	ldi	r24, 0x48	; 72
    2a0a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2a0e:	85 e4       	ldi	r24, 0x45	; 69
    2a10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a14:	08 95       	ret

00002a16 <twi_writeTo>:
    2a16:	0f 93       	push	r16
    2a18:	41 32       	cpi	r20, 0x21	; 33
    2a1a:	08 f0       	brcs	.+2      	; 0x2a1e <twi_writeTo+0x8>
    2a1c:	4a c0       	rjmp	.+148    	; 0x2ab2 <twi_writeTo+0x9c>
    2a1e:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <twi_state>
    2a22:	91 11       	cpse	r25, r1
    2a24:	fc cf       	rjmp	.-8      	; 0x2a1e <twi_writeTo+0x8>
    2a26:	32 e0       	ldi	r19, 0x02	; 2
    2a28:	30 93 b7 05 	sts	0x05B7, r19	; 0x8005b7 <twi_state>
    2a2c:	00 93 b5 05 	sts	0x05B5, r16	; 0x8005b5 <twi_sendStop>
    2a30:	3f ef       	ldi	r19, 0xFF	; 255
    2a32:	30 93 4a 05 	sts	0x054A, r19	; 0x80054a <twi_error>
    2a36:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_masterBufferIndex>
    2a3a:	40 93 8e 05 	sts	0x058E, r20	; 0x80058e <twi_masterBufferLength>
    2a3e:	56 2f       	mov	r21, r22
    2a40:	a0 e9       	ldi	r26, 0x90	; 144
    2a42:	b5 e0       	ldi	r27, 0x05	; 5
    2a44:	fb 01       	movw	r30, r22
    2a46:	3e 2f       	mov	r19, r30
    2a48:	35 1b       	sub	r19, r21
    2a4a:	34 17       	cp	r19, r20
    2a4c:	18 f4       	brcc	.+6      	; 0x2a54 <twi_writeTo+0x3e>
    2a4e:	31 91       	ld	r19, Z+
    2a50:	3d 93       	st	X+, r19
    2a52:	f9 cf       	rjmp	.-14     	; 0x2a46 <twi_writeTo+0x30>
    2a54:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <twi_slarw>
    2a58:	30 91 b6 05 	lds	r19, 0x05B6	; 0x8005b6 <twi_slarw>
    2a5c:	88 0f       	add	r24, r24
    2a5e:	83 2b       	or	r24, r19
    2a60:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <twi_slarw>
    2a64:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <twi_inRepStart>
    2a68:	81 30       	cpi	r24, 0x01	; 1
    2a6a:	61 f4       	brne	.+24     	; 0x2a84 <twi_writeTo+0x6e>
    2a6c:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <twi_inRepStart>
    2a70:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <twi_slarw>
    2a74:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2a78:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a7c:	83 fd       	sbrc	r24, 3
    2a7e:	f8 cf       	rjmp	.-16     	; 0x2a70 <twi_writeTo+0x5a>
    2a80:	85 ec       	ldi	r24, 0xC5	; 197
    2a82:	01 c0       	rjmp	.+2      	; 0x2a86 <twi_writeTo+0x70>
    2a84:	85 ee       	ldi	r24, 0xE5	; 229
    2a86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a8a:	22 23       	and	r18, r18
    2a8c:	21 f0       	breq	.+8      	; 0x2a96 <twi_writeTo+0x80>
    2a8e:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <twi_state>
    2a92:	82 30       	cpi	r24, 0x02	; 2
    2a94:	d1 f3       	breq	.-12     	; 0x2a8a <twi_writeTo+0x74>
    2a96:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <twi_error>
    2a9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a9c:	79 f0       	breq	.+30     	; 0x2abc <twi_writeTo+0xa6>
    2a9e:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <twi_error>
    2aa2:	80 32       	cpi	r24, 0x20	; 32
    2aa4:	41 f0       	breq	.+16     	; 0x2ab6 <twi_writeTo+0xa0>
    2aa6:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <twi_error>
    2aaa:	80 33       	cpi	r24, 0x30	; 48
    2aac:	31 f0       	breq	.+12     	; 0x2aba <twi_writeTo+0xa4>
    2aae:	94 e0       	ldi	r25, 0x04	; 4
    2ab0:	05 c0       	rjmp	.+10     	; 0x2abc <twi_writeTo+0xa6>
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	03 c0       	rjmp	.+6      	; 0x2abc <twi_writeTo+0xa6>
    2ab6:	92 e0       	ldi	r25, 0x02	; 2
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <twi_writeTo+0xa6>
    2aba:	93 e0       	ldi	r25, 0x03	; 3
    2abc:	89 2f       	mov	r24, r25
    2abe:	0f 91       	pop	r16
    2ac0:	08 95       	ret

00002ac2 <twi_transmit>:
    2ac2:	40 91 6c 05 	lds	r20, 0x056C	; 0x80056c <twi_txBufferLength>
    2ac6:	26 2f       	mov	r18, r22
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	24 0f       	add	r18, r20
    2acc:	31 1d       	adc	r19, r1
    2ace:	21 32       	cpi	r18, 0x21	; 33
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	dc f4       	brge	.+54     	; 0x2b0a <twi_transmit+0x48>
    2ad4:	20 91 b7 05 	lds	r18, 0x05B7	; 0x8005b7 <twi_state>
    2ad8:	24 30       	cpi	r18, 0x04	; 4
    2ada:	c9 f4       	brne	.+50     	; 0x2b0e <twi_transmit+0x4c>
    2adc:	fc 01       	movw	r30, r24
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	86 17       	cp	r24, r22
    2ae4:	58 f4       	brcc	.+22     	; 0x2afc <twi_transmit+0x3a>
    2ae6:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <twi_txBufferLength>
    2aea:	21 91       	ld	r18, Z+
    2aec:	dc 01       	movw	r26, r24
    2aee:	a2 59       	subi	r26, 0x92	; 146
    2af0:	ba 4f       	sbci	r27, 0xFA	; 250
    2af2:	a3 0f       	add	r26, r19
    2af4:	b1 1d       	adc	r27, r1
    2af6:	2c 93       	st	X, r18
    2af8:	01 96       	adiw	r24, 0x01	; 1
    2afa:	f3 cf       	rjmp	.-26     	; 0x2ae2 <twi_transmit+0x20>
    2afc:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <twi_txBufferLength>
    2b00:	68 0f       	add	r22, r24
    2b02:	60 93 6c 05 	sts	0x056C, r22	; 0x80056c <twi_txBufferLength>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	08 95       	ret
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	08 95       	ret
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	08 95       	ret

00002b12 <twi_attachSlaveRxEvent>:
    2b12:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <twi_onSlaveReceive+0x1>
    2b16:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <twi_onSlaveReceive>
    2b1a:	08 95       	ret

00002b1c <twi_attachSlaveTxEvent>:
    2b1c:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <twi_onSlaveTransmit+0x1>
    2b20:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <twi_onSlaveTransmit>
    2b24:	08 95       	ret

00002b26 <twi_stop>:
=======
    27fe:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <twi_state>
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <twi_sendStop>
    2808:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <twi_inRepStart>
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	84 e1       	ldi	r24, 0x14	; 20
    2810:	40 dd       	rcall	.-1408   	; 0x2292 <digitalWrite>
    2812:	61 e0       	ldi	r22, 0x01	; 1
    2814:	85 e1       	ldi	r24, 0x15	; 21
    2816:	3d dd       	rcall	.-1414   	; 0x2292 <digitalWrite>
    2818:	e9 eb       	ldi	r30, 0xB9	; 185
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	8e 7f       	andi	r24, 0xFE	; 254
    2820:	80 83       	st	Z, r24
    2822:	80 81       	ld	r24, Z
    2824:	8d 7f       	andi	r24, 0xFD	; 253
    2826:	80 83       	st	Z, r24
    2828:	88 e4       	ldi	r24, 0x48	; 72
    282a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    282e:	85 e4       	ldi	r24, 0x45	; 69
    2830:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2834:	08 95       	ret

00002836 <twi_writeTo>:
    2836:	0f 93       	push	r16
    2838:	41 32       	cpi	r20, 0x21	; 33
    283a:	08 f0       	brcs	.+2      	; 0x283e <twi_writeTo+0x8>
    283c:	4a c0       	rjmp	.+148    	; 0x28d2 <twi_writeTo+0x9c>
    283e:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <twi_state>
    2842:	91 11       	cpse	r25, r1
    2844:	fc cf       	rjmp	.-8      	; 0x283e <twi_writeTo+0x8>
    2846:	32 e0       	ldi	r19, 0x02	; 2
    2848:	30 93 a0 05 	sts	0x05A0, r19	; 0x8005a0 <twi_state>
    284c:	00 93 9e 05 	sts	0x059E, r16	; 0x80059e <twi_sendStop>
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	30 93 33 05 	sts	0x0533, r19	; 0x800533 <twi_error>
    2856:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <twi_masterBufferIndex>
    285a:	40 93 77 05 	sts	0x0577, r20	; 0x800577 <twi_masterBufferLength>
    285e:	56 2f       	mov	r21, r22
    2860:	a9 e7       	ldi	r26, 0x79	; 121
    2862:	b5 e0       	ldi	r27, 0x05	; 5
    2864:	fb 01       	movw	r30, r22
    2866:	3e 2f       	mov	r19, r30
    2868:	35 1b       	sub	r19, r21
    286a:	34 17       	cp	r19, r20
    286c:	18 f4       	brcc	.+6      	; 0x2874 <twi_writeTo+0x3e>
    286e:	31 91       	ld	r19, Z+
    2870:	3d 93       	st	X+, r19
    2872:	f9 cf       	rjmp	.-14     	; 0x2866 <twi_writeTo+0x30>
    2874:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <twi_slarw>
    2878:	30 91 9f 05 	lds	r19, 0x059F	; 0x80059f <twi_slarw>
    287c:	88 0f       	add	r24, r24
    287e:	83 2b       	or	r24, r19
    2880:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <twi_slarw>
    2884:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <twi_inRepStart>
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	61 f4       	brne	.+24     	; 0x28a4 <twi_writeTo+0x6e>
    288c:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <twi_inRepStart>
    2890:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <twi_slarw>
    2894:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2898:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    289c:	83 fd       	sbrc	r24, 3
    289e:	f8 cf       	rjmp	.-16     	; 0x2890 <twi_writeTo+0x5a>
    28a0:	85 ec       	ldi	r24, 0xC5	; 197
    28a2:	01 c0       	rjmp	.+2      	; 0x28a6 <twi_writeTo+0x70>
    28a4:	85 ee       	ldi	r24, 0xE5	; 229
    28a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28aa:	22 23       	and	r18, r18
    28ac:	21 f0       	breq	.+8      	; 0x28b6 <twi_writeTo+0x80>
    28ae:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <twi_state>
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	d1 f3       	breq	.-12     	; 0x28aa <twi_writeTo+0x74>
    28b6:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <twi_error>
    28ba:	8f 3f       	cpi	r24, 0xFF	; 255
    28bc:	79 f0       	breq	.+30     	; 0x28dc <twi_writeTo+0xa6>
    28be:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <twi_error>
    28c2:	80 32       	cpi	r24, 0x20	; 32
    28c4:	41 f0       	breq	.+16     	; 0x28d6 <twi_writeTo+0xa0>
    28c6:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <twi_error>
    28ca:	80 33       	cpi	r24, 0x30	; 48
    28cc:	31 f0       	breq	.+12     	; 0x28da <twi_writeTo+0xa4>
    28ce:	94 e0       	ldi	r25, 0x04	; 4
    28d0:	05 c0       	rjmp	.+10     	; 0x28dc <twi_writeTo+0xa6>
    28d2:	91 e0       	ldi	r25, 0x01	; 1
    28d4:	03 c0       	rjmp	.+6      	; 0x28dc <twi_writeTo+0xa6>
    28d6:	92 e0       	ldi	r25, 0x02	; 2
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <twi_writeTo+0xa6>
    28da:	93 e0       	ldi	r25, 0x03	; 3
    28dc:	89 2f       	mov	r24, r25
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <twi_transmit>:
    28e2:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <twi_txBufferLength>
    28e6:	26 2f       	mov	r18, r22
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	24 0f       	add	r18, r20
    28ec:	31 1d       	adc	r19, r1
    28ee:	21 32       	cpi	r18, 0x21	; 33
    28f0:	31 05       	cpc	r19, r1
    28f2:	dc f4       	brge	.+54     	; 0x292a <twi_transmit+0x48>
    28f4:	20 91 a0 05 	lds	r18, 0x05A0	; 0x8005a0 <twi_state>
    28f8:	24 30       	cpi	r18, 0x04	; 4
    28fa:	c9 f4       	brne	.+50     	; 0x292e <twi_transmit+0x4c>
    28fc:	fc 01       	movw	r30, r24
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	86 17       	cp	r24, r22
    2904:	58 f4       	brcc	.+22     	; 0x291c <twi_transmit+0x3a>
    2906:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <twi_txBufferLength>
    290a:	21 91       	ld	r18, Z+
    290c:	dc 01       	movw	r26, r24
    290e:	a9 5a       	subi	r26, 0xA9	; 169
    2910:	ba 4f       	sbci	r27, 0xFA	; 250
    2912:	a3 0f       	add	r26, r19
    2914:	b1 1d       	adc	r27, r1
    2916:	2c 93       	st	X, r18
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	f3 cf       	rjmp	.-26     	; 0x2902 <twi_transmit+0x20>
    291c:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_txBufferLength>
    2920:	68 0f       	add	r22, r24
    2922:	60 93 55 05 	sts	0x0555, r22	; 0x800555 <twi_txBufferLength>
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	08 95       	ret
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	08 95       	ret
    292e:	82 e0       	ldi	r24, 0x02	; 2
    2930:	08 95       	ret

00002932 <twi_attachSlaveRxEvent>:
    2932:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <twi_onSlaveReceive+0x1>
    2936:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <twi_onSlaveReceive>
    293a:	08 95       	ret

0000293c <twi_attachSlaveTxEvent>:
    293c:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <twi_onSlaveTransmit+0x1>
    2940:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <twi_onSlaveTransmit>
    2944:	08 95       	ret

00002946 <twi_stop>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2808:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <twi_state>
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <twi_sendStop>
    2812:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <twi_inRepStart>
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	84 e1       	ldi	r24, 0x14	; 20
    281a:	40 dd       	rcall	.-1408   	; 0x229c <digitalWrite>
    281c:	61 e0       	ldi	r22, 0x01	; 1
    281e:	85 e1       	ldi	r24, 0x15	; 21
    2820:	3d dd       	rcall	.-1414   	; 0x229c <digitalWrite>
    2822:	e9 eb       	ldi	r30, 0xB9	; 185
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8e 7f       	andi	r24, 0xFE	; 254
    282a:	80 83       	st	Z, r24
    282c:	80 81       	ld	r24, Z
    282e:	8d 7f       	andi	r24, 0xFD	; 253
    2830:	80 83       	st	Z, r24
    2832:	88 e4       	ldi	r24, 0x48	; 72
    2834:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2838:	85 e4       	ldi	r24, 0x45	; 69
    283a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    283e:	08 95       	ret

00002840 <twi_writeTo>:
    2840:	0f 93       	push	r16
    2842:	41 32       	cpi	r20, 0x21	; 33
    2844:	08 f0       	brcs	.+2      	; 0x2848 <twi_writeTo+0x8>
    2846:	4a c0       	rjmp	.+148    	; 0x28dc <twi_writeTo+0x9c>
    2848:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <twi_state>
    284c:	91 11       	cpse	r25, r1
    284e:	fc cf       	rjmp	.-8      	; 0x2848 <twi_writeTo+0x8>
    2850:	32 e0       	ldi	r19, 0x02	; 2
    2852:	30 93 a0 05 	sts	0x05A0, r19	; 0x8005a0 <twi_state>
    2856:	00 93 9e 05 	sts	0x059E, r16	; 0x80059e <twi_sendStop>
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	30 93 33 05 	sts	0x0533, r19	; 0x800533 <twi_error>
    2860:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <twi_masterBufferIndex>
    2864:	40 93 77 05 	sts	0x0577, r20	; 0x800577 <twi_masterBufferLength>
    2868:	56 2f       	mov	r21, r22
    286a:	a9 e7       	ldi	r26, 0x79	; 121
    286c:	b5 e0       	ldi	r27, 0x05	; 5
    286e:	fb 01       	movw	r30, r22
    2870:	3e 2f       	mov	r19, r30
    2872:	35 1b       	sub	r19, r21
    2874:	34 17       	cp	r19, r20
    2876:	18 f4       	brcc	.+6      	; 0x287e <twi_writeTo+0x3e>
    2878:	31 91       	ld	r19, Z+
    287a:	3d 93       	st	X+, r19
    287c:	f9 cf       	rjmp	.-14     	; 0x2870 <twi_writeTo+0x30>
    287e:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <twi_slarw>
    2882:	30 91 9f 05 	lds	r19, 0x059F	; 0x80059f <twi_slarw>
    2886:	88 0f       	add	r24, r24
    2888:	83 2b       	or	r24, r19
    288a:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <twi_slarw>
    288e:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <twi_inRepStart>
    2892:	81 30       	cpi	r24, 0x01	; 1
    2894:	61 f4       	brne	.+24     	; 0x28ae <twi_writeTo+0x6e>
    2896:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <twi_inRepStart>
    289a:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <twi_slarw>
    289e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    28a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28a6:	83 fd       	sbrc	r24, 3
    28a8:	f8 cf       	rjmp	.-16     	; 0x289a <twi_writeTo+0x5a>
    28aa:	85 ec       	ldi	r24, 0xC5	; 197
    28ac:	01 c0       	rjmp	.+2      	; 0x28b0 <twi_writeTo+0x70>
    28ae:	85 ee       	ldi	r24, 0xE5	; 229
    28b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28b4:	22 23       	and	r18, r18
    28b6:	21 f0       	breq	.+8      	; 0x28c0 <twi_writeTo+0x80>
    28b8:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <twi_state>
    28bc:	82 30       	cpi	r24, 0x02	; 2
    28be:	d1 f3       	breq	.-12     	; 0x28b4 <twi_writeTo+0x74>
    28c0:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <twi_error>
    28c4:	8f 3f       	cpi	r24, 0xFF	; 255
    28c6:	79 f0       	breq	.+30     	; 0x28e6 <twi_writeTo+0xa6>
    28c8:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <twi_error>
    28cc:	80 32       	cpi	r24, 0x20	; 32
    28ce:	41 f0       	breq	.+16     	; 0x28e0 <twi_writeTo+0xa0>
    28d0:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <twi_error>
    28d4:	80 33       	cpi	r24, 0x30	; 48
    28d6:	31 f0       	breq	.+12     	; 0x28e4 <twi_writeTo+0xa4>
    28d8:	94 e0       	ldi	r25, 0x04	; 4
    28da:	05 c0       	rjmp	.+10     	; 0x28e6 <twi_writeTo+0xa6>
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	03 c0       	rjmp	.+6      	; 0x28e6 <twi_writeTo+0xa6>
    28e0:	92 e0       	ldi	r25, 0x02	; 2
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <twi_writeTo+0xa6>
    28e4:	93 e0       	ldi	r25, 0x03	; 3
    28e6:	89 2f       	mov	r24, r25
    28e8:	0f 91       	pop	r16
    28ea:	08 95       	ret

000028ec <twi_transmit>:
    28ec:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <twi_txBufferLength>
    28f0:	26 2f       	mov	r18, r22
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	24 0f       	add	r18, r20
    28f6:	31 1d       	adc	r19, r1
    28f8:	21 32       	cpi	r18, 0x21	; 33
    28fa:	31 05       	cpc	r19, r1
    28fc:	dc f4       	brge	.+54     	; 0x2934 <twi_transmit+0x48>
    28fe:	20 91 a0 05 	lds	r18, 0x05A0	; 0x8005a0 <twi_state>
    2902:	24 30       	cpi	r18, 0x04	; 4
    2904:	c9 f4       	brne	.+50     	; 0x2938 <twi_transmit+0x4c>
    2906:	fc 01       	movw	r30, r24
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	86 17       	cp	r24, r22
    290e:	58 f4       	brcc	.+22     	; 0x2926 <twi_transmit+0x3a>
    2910:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <twi_txBufferLength>
    2914:	21 91       	ld	r18, Z+
    2916:	dc 01       	movw	r26, r24
    2918:	a9 5a       	subi	r26, 0xA9	; 169
    291a:	ba 4f       	sbci	r27, 0xFA	; 250
    291c:	a3 0f       	add	r26, r19
    291e:	b1 1d       	adc	r27, r1
    2920:	2c 93       	st	X, r18
    2922:	01 96       	adiw	r24, 0x01	; 1
    2924:	f3 cf       	rjmp	.-26     	; 0x290c <twi_transmit+0x20>
    2926:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_txBufferLength>
    292a:	68 0f       	add	r22, r24
    292c:	60 93 55 05 	sts	0x0555, r22	; 0x800555 <twi_txBufferLength>
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	08 95       	ret
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	08 95       	ret
    2938:	82 e0       	ldi	r24, 0x02	; 2
    293a:	08 95       	ret

0000293c <twi_attachSlaveRxEvent>:
    293c:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <twi_onSlaveReceive+0x1>
    2940:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <twi_onSlaveReceive>
    2944:	08 95       	ret

00002946 <twi_attachSlaveTxEvent>:
    2946:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <twi_onSlaveTransmit+0x1>
    294a:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <twi_onSlaveTransmit>
    294e:	08 95       	ret

00002950 <twi_stop>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
<<<<<<< HEAD
<<<<<<< HEAD
    2b26:	85 ed       	ldi	r24, 0xD5	; 213
    2b28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
=======
    2946:	85 ed       	ldi	r24, 0xD5	; 213
    2948:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2950:	85 ed       	ldi	r24, 0xD5	; 213
    2952:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
<<<<<<< HEAD
<<<<<<< HEAD
    2b2c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b30:	84 fd       	sbrc	r24, 4
    2b32:	fc cf       	rjmp	.-8      	; 0x2b2c <twi_stop+0x6>
=======
    294c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2950:	84 fd       	sbrc	r24, 4
    2952:	fc cf       	rjmp	.-8      	; 0x294c <twi_stop+0x6>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2956:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    295a:	84 fd       	sbrc	r24, 4
    295c:	fc cf       	rjmp	.-8      	; 0x2956 <twi_stop+0x6>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
<<<<<<< HEAD
<<<<<<< HEAD
    2b34:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <twi_state>
    2b38:	08 95       	ret

00002b3a <twi_releaseBus>:
=======
    2954:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <twi_state>
    2958:	08 95       	ret

0000295a <twi_releaseBus>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    295e:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <twi_state>
    2962:	08 95       	ret

00002964 <twi_releaseBus>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
<<<<<<< HEAD
<<<<<<< HEAD
    2b3a:	85 ec       	ldi	r24, 0xC5	; 197
    2b3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
=======
    2964:	85 ec       	ldi	r24, 0xC5	; 197
    2966:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

  // update twi state
  twi_state = TWI_READY;
    296a:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <twi_state>
    296e:	08 95       	ret

<<<<<<< HEAD
00002b46 <__vector_39>:
=======
    295a:	85 ec       	ldi	r24, 0xC5	; 197
    295c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2960:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <twi_state>
    2964:	08 95       	ret

00002966 <__vector_39>:
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
00002970 <__vector_39>:
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
}

ISR(TWI_vect)
{
<<<<<<< HEAD
<<<<<<< HEAD
    2b46:	1f 92       	push	r1
    2b48:	0f 92       	push	r0
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	0f 92       	push	r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	0b b6       	in	r0, 0x3b	; 59
    2b52:	0f 92       	push	r0
    2b54:	2f 93       	push	r18
    2b56:	3f 93       	push	r19
    2b58:	4f 93       	push	r20
    2b5a:	5f 93       	push	r21
    2b5c:	6f 93       	push	r22
    2b5e:	7f 93       	push	r23
    2b60:	8f 93       	push	r24
    2b62:	9f 93       	push	r25
    2b64:	af 93       	push	r26
    2b66:	bf 93       	push	r27
    2b68:	ef 93       	push	r30
    2b6a:	ff 93       	push	r31
  switch(TW_STATUS){
    2b6c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2b70:	88 7f       	andi	r24, 0xF8	; 248
    2b72:	80 36       	cpi	r24, 0x60	; 96
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <__vector_39+0x32>
    2b76:	9d c0       	rjmp	.+314    	; 0x2cb2 <__vector_39+0x16c>
    2b78:	70 f5       	brcc	.+92     	; 0x2bd6 <__vector_39+0x90>
    2b7a:	88 32       	cpi	r24, 0x28	; 40
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <__vector_39+0x3a>
    2b7e:	5c c0       	rjmp	.+184    	; 0x2c38 <__vector_39+0xf2>
    2b80:	90 f4       	brcc	.+36     	; 0x2ba6 <__vector_39+0x60>
    2b82:	80 31       	cpi	r24, 0x10	; 16
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <__vector_39+0x42>
    2b86:	55 c0       	rjmp	.+170    	; 0x2c32 <__vector_39+0xec>
    2b88:	38 f4       	brcc	.+14     	; 0x2b98 <__vector_39+0x52>
    2b8a:	88 23       	and	r24, r24
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <__vector_39+0x4a>
    2b8e:	f3 c0       	rjmp	.+486    	; 0x2d76 <__vector_39+0x230>
    2b90:	88 30       	cpi	r24, 0x08	; 8
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <__vector_39+0x50>
    2b94:	4e c0       	rjmp	.+156    	; 0x2c32 <__vector_39+0xec>
    2b96:	f2 c0       	rjmp	.+484    	; 0x2d7c <__vector_39+0x236>
    2b98:	88 31       	cpi	r24, 0x18	; 24
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <__vector_39+0x58>
    2b9c:	4d c0       	rjmp	.+154    	; 0x2c38 <__vector_39+0xf2>
    2b9e:	80 32       	cpi	r24, 0x20	; 32
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <__vector_39+0x5e>
    2ba2:	5e c0       	rjmp	.+188    	; 0x2c60 <__vector_39+0x11a>
    2ba4:	eb c0       	rjmp	.+470    	; 0x2d7c <__vector_39+0x236>
    2ba6:	80 34       	cpi	r24, 0x40	; 64
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <__vector_39+0x66>
    2baa:	69 c0       	rjmp	.+210    	; 0x2c7e <__vector_39+0x138>
    2bac:	50 f4       	brcc	.+20     	; 0x2bc2 <__vector_39+0x7c>
    2bae:	80 33       	cpi	r24, 0x30	; 48
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <__vector_39+0x6e>
    2bb2:	56 c0       	rjmp	.+172    	; 0x2c60 <__vector_39+0x11a>
    2bb4:	88 33       	cpi	r24, 0x38	; 56
    2bb6:	09 f0       	breq	.+2      	; 0x2bba <__vector_39+0x74>
    2bb8:	e1 c0       	rjmp	.+450    	; 0x2d7c <__vector_39+0x236>
=======
    2966:	1f 92       	push	r1
    2968:	0f 92       	push	r0
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	0f 92       	push	r0
    296e:	11 24       	eor	r1, r1
    2970:	0b b6       	in	r0, 0x3b	; 59
    2972:	0f 92       	push	r0
    2974:	2f 93       	push	r18
    2976:	3f 93       	push	r19
    2978:	4f 93       	push	r20
    297a:	5f 93       	push	r21
    297c:	6f 93       	push	r22
    297e:	7f 93       	push	r23
    2980:	8f 93       	push	r24
    2982:	9f 93       	push	r25
    2984:	af 93       	push	r26
    2986:	bf 93       	push	r27
    2988:	ef 93       	push	r30
    298a:	ff 93       	push	r31
  switch(TW_STATUS){
    298c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2990:	88 7f       	andi	r24, 0xF8	; 248
    2992:	80 36       	cpi	r24, 0x60	; 96
    2994:	09 f4       	brne	.+2      	; 0x2998 <__vector_39+0x32>
    2996:	9d c0       	rjmp	.+314    	; 0x2ad2 <__vector_39+0x16c>
    2998:	70 f5       	brcc	.+92     	; 0x29f6 <__vector_39+0x90>
    299a:	88 32       	cpi	r24, 0x28	; 40
    299c:	09 f4       	brne	.+2      	; 0x29a0 <__vector_39+0x3a>
    299e:	5c c0       	rjmp	.+184    	; 0x2a58 <__vector_39+0xf2>
    29a0:	90 f4       	brcc	.+36     	; 0x29c6 <__vector_39+0x60>
    29a2:	80 31       	cpi	r24, 0x10	; 16
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <__vector_39+0x42>
    29a6:	55 c0       	rjmp	.+170    	; 0x2a52 <__vector_39+0xec>
    29a8:	38 f4       	brcc	.+14     	; 0x29b8 <__vector_39+0x52>
    29aa:	88 23       	and	r24, r24
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <__vector_39+0x4a>
    29ae:	f3 c0       	rjmp	.+486    	; 0x2b96 <__vector_39+0x230>
    29b0:	88 30       	cpi	r24, 0x08	; 8
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <__vector_39+0x50>
    29b4:	4e c0       	rjmp	.+156    	; 0x2a52 <__vector_39+0xec>
    29b6:	f2 c0       	rjmp	.+484    	; 0x2b9c <__vector_39+0x236>
    29b8:	88 31       	cpi	r24, 0x18	; 24
    29ba:	09 f4       	brne	.+2      	; 0x29be <__vector_39+0x58>
    29bc:	4d c0       	rjmp	.+154    	; 0x2a58 <__vector_39+0xf2>
    29be:	80 32       	cpi	r24, 0x20	; 32
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <__vector_39+0x5e>
    29c2:	5e c0       	rjmp	.+188    	; 0x2a80 <__vector_39+0x11a>
    29c4:	eb c0       	rjmp	.+470    	; 0x2b9c <__vector_39+0x236>
    29c6:	80 34       	cpi	r24, 0x40	; 64
    29c8:	09 f4       	brne	.+2      	; 0x29cc <__vector_39+0x66>
    29ca:	69 c0       	rjmp	.+210    	; 0x2a9e <__vector_39+0x138>
    29cc:	50 f4       	brcc	.+20     	; 0x29e2 <__vector_39+0x7c>
    29ce:	80 33       	cpi	r24, 0x30	; 48
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <__vector_39+0x6e>
    29d2:	56 c0       	rjmp	.+172    	; 0x2a80 <__vector_39+0x11a>
    29d4:	88 33       	cpi	r24, 0x38	; 56
    29d6:	09 f0       	breq	.+2      	; 0x29da <__vector_39+0x74>
    29d8:	e1 c0       	rjmp	.+450    	; 0x2b9c <__vector_39+0x236>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2970:	1f 92       	push	r1
    2972:	0f 92       	push	r0
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	0f 92       	push	r0
    2978:	11 24       	eor	r1, r1
    297a:	0b b6       	in	r0, 0x3b	; 59
    297c:	0f 92       	push	r0
    297e:	2f 93       	push	r18
    2980:	3f 93       	push	r19
    2982:	4f 93       	push	r20
    2984:	5f 93       	push	r21
    2986:	6f 93       	push	r22
    2988:	7f 93       	push	r23
    298a:	8f 93       	push	r24
    298c:	9f 93       	push	r25
    298e:	af 93       	push	r26
    2990:	bf 93       	push	r27
    2992:	ef 93       	push	r30
    2994:	ff 93       	push	r31
  switch(TW_STATUS){
    2996:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    299a:	88 7f       	andi	r24, 0xF8	; 248
    299c:	80 36       	cpi	r24, 0x60	; 96
    299e:	09 f4       	brne	.+2      	; 0x29a2 <__vector_39+0x32>
    29a0:	9d c0       	rjmp	.+314    	; 0x2adc <__vector_39+0x16c>
    29a2:	70 f5       	brcc	.+92     	; 0x2a00 <__vector_39+0x90>
    29a4:	88 32       	cpi	r24, 0x28	; 40
    29a6:	09 f4       	brne	.+2      	; 0x29aa <__vector_39+0x3a>
    29a8:	5c c0       	rjmp	.+184    	; 0x2a62 <__vector_39+0xf2>
    29aa:	90 f4       	brcc	.+36     	; 0x29d0 <__vector_39+0x60>
    29ac:	80 31       	cpi	r24, 0x10	; 16
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <__vector_39+0x42>
    29b0:	55 c0       	rjmp	.+170    	; 0x2a5c <__vector_39+0xec>
    29b2:	38 f4       	brcc	.+14     	; 0x29c2 <__vector_39+0x52>
    29b4:	88 23       	and	r24, r24
    29b6:	09 f4       	brne	.+2      	; 0x29ba <__vector_39+0x4a>
    29b8:	f3 c0       	rjmp	.+486    	; 0x2ba0 <__vector_39+0x230>
    29ba:	88 30       	cpi	r24, 0x08	; 8
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <__vector_39+0x50>
    29be:	4e c0       	rjmp	.+156    	; 0x2a5c <__vector_39+0xec>
    29c0:	f2 c0       	rjmp	.+484    	; 0x2ba6 <__vector_39+0x236>
    29c2:	88 31       	cpi	r24, 0x18	; 24
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <__vector_39+0x58>
    29c6:	4d c0       	rjmp	.+154    	; 0x2a62 <__vector_39+0xf2>
    29c8:	80 32       	cpi	r24, 0x20	; 32
    29ca:	09 f4       	brne	.+2      	; 0x29ce <__vector_39+0x5e>
    29cc:	5e c0       	rjmp	.+188    	; 0x2a8a <__vector_39+0x11a>
    29ce:	eb c0       	rjmp	.+470    	; 0x2ba6 <__vector_39+0x236>
    29d0:	80 34       	cpi	r24, 0x40	; 64
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <__vector_39+0x66>
    29d4:	69 c0       	rjmp	.+210    	; 0x2aa8 <__vector_39+0x138>
    29d6:	50 f4       	brcc	.+20     	; 0x29ec <__vector_39+0x7c>
    29d8:	80 33       	cpi	r24, 0x30	; 48
    29da:	09 f4       	brne	.+2      	; 0x29de <__vector_39+0x6e>
    29dc:	56 c0       	rjmp	.+172    	; 0x2a8a <__vector_39+0x11a>
    29de:	88 33       	cpi	r24, 0x38	; 56
    29e0:	09 f0       	breq	.+2      	; 0x29e4 <__vector_39+0x74>
    29e2:	e1 c0       	rjmp	.+450    	; 0x2ba6 <__vector_39+0x236>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
<<<<<<< HEAD
<<<<<<< HEAD
    2bba:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_error>
=======
    29e4:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <twi_error>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      twi_releaseBus();
    29e8:	bd df       	rcall	.-134    	; 0x2964 <twi_releaseBus>
      break;
<<<<<<< HEAD
    2bc0:	dd c0       	rjmp	.+442    	; 0x2d7c <__vector_39+0x236>
=======
    29da:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <twi_error>
      twi_releaseBus();
    29de:	bd df       	rcall	.-134    	; 0x295a <twi_releaseBus>
      break;
    29e0:	dd c0       	rjmp	.+442    	; 0x2b9c <__vector_39+0x236>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    29ea:	dd c0       	rjmp	.+442    	; 0x2ba6 <__vector_39+0x236>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
<<<<<<< HEAD
<<<<<<< HEAD
    2bc2:	80 35       	cpi	r24, 0x50	; 80
    2bc4:	09 f4       	brne	.+2      	; 0x2bc8 <__vector_39+0x82>
    2bc6:	4f c0       	rjmp	.+158    	; 0x2c66 <__vector_39+0x120>
    2bc8:	88 35       	cpi	r24, 0x58	; 88
    2bca:	09 f4       	brne	.+2      	; 0x2bce <__vector_39+0x88>
    2bcc:	5d c0       	rjmp	.+186    	; 0x2c88 <__vector_39+0x142>
    2bce:	88 34       	cpi	r24, 0x48	; 72
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <__vector_39+0x8e>
    2bd2:	d4 c0       	rjmp	.+424    	; 0x2d7c <__vector_39+0x236>
    2bd4:	d2 c0       	rjmp	.+420    	; 0x2d7a <__vector_39+0x234>
    2bd6:	88 39       	cpi	r24, 0x98	; 152
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <__vector_39+0x96>
    2bda:	c3 c0       	rjmp	.+390    	; 0x2d62 <__vector_39+0x21c>
    2bdc:	a8 f4       	brcc	.+42     	; 0x2c08 <__vector_39+0xc2>
    2bde:	88 37       	cpi	r24, 0x78	; 120
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <__vector_39+0x9e>
    2be2:	67 c0       	rjmp	.+206    	; 0x2cb2 <__vector_39+0x16c>
    2be4:	38 f4       	brcc	.+14     	; 0x2bf4 <__vector_39+0xae>
    2be6:	88 36       	cpi	r24, 0x68	; 104
    2be8:	09 f4       	brne	.+2      	; 0x2bec <__vector_39+0xa6>
    2bea:	63 c0       	rjmp	.+198    	; 0x2cb2 <__vector_39+0x16c>
    2bec:	80 37       	cpi	r24, 0x70	; 112
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <__vector_39+0xac>
    2bf0:	60 c0       	rjmp	.+192    	; 0x2cb2 <__vector_39+0x16c>
    2bf2:	c4 c0       	rjmp	.+392    	; 0x2d7c <__vector_39+0x236>
    2bf4:	88 38       	cpi	r24, 0x88	; 136
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <__vector_39+0xb4>
    2bf8:	b4 c0       	rjmp	.+360    	; 0x2d62 <__vector_39+0x21c>
    2bfa:	80 39       	cpi	r24, 0x90	; 144
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <__vector_39+0xba>
    2bfe:	5f c0       	rjmp	.+190    	; 0x2cbe <__vector_39+0x178>
    2c00:	80 38       	cpi	r24, 0x80	; 128
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <__vector_39+0xc0>
    2c04:	bb c0       	rjmp	.+374    	; 0x2d7c <__vector_39+0x236>
    2c06:	5b c0       	rjmp	.+182    	; 0x2cbe <__vector_39+0x178>
    2c08:	80 3b       	cpi	r24, 0xB0	; 176
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <__vector_39+0xc8>
    2c0c:	82 c0       	rjmp	.+260    	; 0x2d12 <__vector_39+0x1cc>
    2c0e:	38 f4       	brcc	.+14     	; 0x2c1e <__vector_39+0xd8>
    2c10:	80 3a       	cpi	r24, 0xA0	; 160
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <__vector_39+0xd0>
    2c14:	66 c0       	rjmp	.+204    	; 0x2ce2 <__vector_39+0x19c>
    2c16:	88 3a       	cpi	r24, 0xA8	; 168
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <__vector_39+0xd6>
    2c1a:	7b c0       	rjmp	.+246    	; 0x2d12 <__vector_39+0x1cc>
    2c1c:	af c0       	rjmp	.+350    	; 0x2d7c <__vector_39+0x236>
    2c1e:	80 3c       	cpi	r24, 0xC0	; 192
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <__vector_39+0xde>
    2c22:	a3 c0       	rjmp	.+326    	; 0x2d6a <__vector_39+0x224>
    2c24:	88 3c       	cpi	r24, 0xC8	; 200
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <__vector_39+0xe4>
    2c28:	a0 c0       	rjmp	.+320    	; 0x2d6a <__vector_39+0x224>
    2c2a:	88 3b       	cpi	r24, 0xB8	; 184
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <__vector_39+0xea>
    2c2e:	86 c0       	rjmp	.+268    	; 0x2d3c <__vector_39+0x1f6>
    2c30:	a5 c0       	rjmp	.+330    	; 0x2d7c <__vector_39+0x236>
=======
    29e2:	80 35       	cpi	r24, 0x50	; 80
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <__vector_39+0x82>
    29e6:	4f c0       	rjmp	.+158    	; 0x2a86 <__vector_39+0x120>
    29e8:	88 35       	cpi	r24, 0x58	; 88
    29ea:	09 f4       	brne	.+2      	; 0x29ee <__vector_39+0x88>
    29ec:	5d c0       	rjmp	.+186    	; 0x2aa8 <__vector_39+0x142>
    29ee:	88 34       	cpi	r24, 0x48	; 72
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <__vector_39+0x8e>
    29f2:	d4 c0       	rjmp	.+424    	; 0x2b9c <__vector_39+0x236>
    29f4:	d2 c0       	rjmp	.+420    	; 0x2b9a <__vector_39+0x234>
    29f6:	88 39       	cpi	r24, 0x98	; 152
    29f8:	09 f4       	brne	.+2      	; 0x29fc <__vector_39+0x96>
    29fa:	c3 c0       	rjmp	.+390    	; 0x2b82 <__vector_39+0x21c>
    29fc:	a8 f4       	brcc	.+42     	; 0x2a28 <__vector_39+0xc2>
    29fe:	88 37       	cpi	r24, 0x78	; 120
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <__vector_39+0x9e>
    2a02:	67 c0       	rjmp	.+206    	; 0x2ad2 <__vector_39+0x16c>
    2a04:	38 f4       	brcc	.+14     	; 0x2a14 <__vector_39+0xae>
    2a06:	88 36       	cpi	r24, 0x68	; 104
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <__vector_39+0xa6>
    2a0a:	63 c0       	rjmp	.+198    	; 0x2ad2 <__vector_39+0x16c>
    2a0c:	80 37       	cpi	r24, 0x70	; 112
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <__vector_39+0xac>
    2a10:	60 c0       	rjmp	.+192    	; 0x2ad2 <__vector_39+0x16c>
    2a12:	c4 c0       	rjmp	.+392    	; 0x2b9c <__vector_39+0x236>
    2a14:	88 38       	cpi	r24, 0x88	; 136
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <__vector_39+0xb4>
    2a18:	b4 c0       	rjmp	.+360    	; 0x2b82 <__vector_39+0x21c>
    2a1a:	80 39       	cpi	r24, 0x90	; 144
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <__vector_39+0xba>
    2a1e:	5f c0       	rjmp	.+190    	; 0x2ade <__vector_39+0x178>
    2a20:	80 38       	cpi	r24, 0x80	; 128
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <__vector_39+0xc0>
    2a24:	bb c0       	rjmp	.+374    	; 0x2b9c <__vector_39+0x236>
    2a26:	5b c0       	rjmp	.+182    	; 0x2ade <__vector_39+0x178>
    2a28:	80 3b       	cpi	r24, 0xB0	; 176
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <__vector_39+0xc8>
    2a2c:	82 c0       	rjmp	.+260    	; 0x2b32 <__vector_39+0x1cc>
    2a2e:	38 f4       	brcc	.+14     	; 0x2a3e <__vector_39+0xd8>
    2a30:	80 3a       	cpi	r24, 0xA0	; 160
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <__vector_39+0xd0>
    2a34:	66 c0       	rjmp	.+204    	; 0x2b02 <__vector_39+0x19c>
    2a36:	88 3a       	cpi	r24, 0xA8	; 168
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <__vector_39+0xd6>
    2a3a:	7b c0       	rjmp	.+246    	; 0x2b32 <__vector_39+0x1cc>
    2a3c:	af c0       	rjmp	.+350    	; 0x2b9c <__vector_39+0x236>
    2a3e:	80 3c       	cpi	r24, 0xC0	; 192
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <__vector_39+0xde>
    2a42:	a3 c0       	rjmp	.+326    	; 0x2b8a <__vector_39+0x224>
    2a44:	88 3c       	cpi	r24, 0xC8	; 200
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <__vector_39+0xe4>
    2a48:	a0 c0       	rjmp	.+320    	; 0x2b8a <__vector_39+0x224>
    2a4a:	88 3b       	cpi	r24, 0xB8	; 184
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <__vector_39+0xea>
    2a4e:	86 c0       	rjmp	.+268    	; 0x2b5c <__vector_39+0x1f6>
    2a50:	a5 c0       	rjmp	.+330    	; 0x2b9c <__vector_39+0x236>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    29ec:	80 35       	cpi	r24, 0x50	; 80
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <__vector_39+0x82>
    29f0:	4f c0       	rjmp	.+158    	; 0x2a90 <__vector_39+0x120>
    29f2:	88 35       	cpi	r24, 0x58	; 88
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <__vector_39+0x88>
    29f6:	5d c0       	rjmp	.+186    	; 0x2ab2 <__vector_39+0x142>
    29f8:	88 34       	cpi	r24, 0x48	; 72
    29fa:	09 f0       	breq	.+2      	; 0x29fe <__vector_39+0x8e>
    29fc:	d4 c0       	rjmp	.+424    	; 0x2ba6 <__vector_39+0x236>
    29fe:	d2 c0       	rjmp	.+420    	; 0x2ba4 <__vector_39+0x234>
    2a00:	88 39       	cpi	r24, 0x98	; 152
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <__vector_39+0x96>
    2a04:	c3 c0       	rjmp	.+390    	; 0x2b8c <__vector_39+0x21c>
    2a06:	a8 f4       	brcc	.+42     	; 0x2a32 <__vector_39+0xc2>
    2a08:	88 37       	cpi	r24, 0x78	; 120
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <__vector_39+0x9e>
    2a0c:	67 c0       	rjmp	.+206    	; 0x2adc <__vector_39+0x16c>
    2a0e:	38 f4       	brcc	.+14     	; 0x2a1e <__vector_39+0xae>
    2a10:	88 36       	cpi	r24, 0x68	; 104
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <__vector_39+0xa6>
    2a14:	63 c0       	rjmp	.+198    	; 0x2adc <__vector_39+0x16c>
    2a16:	80 37       	cpi	r24, 0x70	; 112
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <__vector_39+0xac>
    2a1a:	60 c0       	rjmp	.+192    	; 0x2adc <__vector_39+0x16c>
    2a1c:	c4 c0       	rjmp	.+392    	; 0x2ba6 <__vector_39+0x236>
    2a1e:	88 38       	cpi	r24, 0x88	; 136
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <__vector_39+0xb4>
    2a22:	b4 c0       	rjmp	.+360    	; 0x2b8c <__vector_39+0x21c>
    2a24:	80 39       	cpi	r24, 0x90	; 144
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <__vector_39+0xba>
    2a28:	5f c0       	rjmp	.+190    	; 0x2ae8 <__vector_39+0x178>
    2a2a:	80 38       	cpi	r24, 0x80	; 128
    2a2c:	09 f0       	breq	.+2      	; 0x2a30 <__vector_39+0xc0>
    2a2e:	bb c0       	rjmp	.+374    	; 0x2ba6 <__vector_39+0x236>
    2a30:	5b c0       	rjmp	.+182    	; 0x2ae8 <__vector_39+0x178>
    2a32:	80 3b       	cpi	r24, 0xB0	; 176
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <__vector_39+0xc8>
    2a36:	82 c0       	rjmp	.+260    	; 0x2b3c <__vector_39+0x1cc>
    2a38:	38 f4       	brcc	.+14     	; 0x2a48 <__vector_39+0xd8>
    2a3a:	80 3a       	cpi	r24, 0xA0	; 160
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <__vector_39+0xd0>
    2a3e:	66 c0       	rjmp	.+204    	; 0x2b0c <__vector_39+0x19c>
    2a40:	88 3a       	cpi	r24, 0xA8	; 168
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <__vector_39+0xd6>
    2a44:	7b c0       	rjmp	.+246    	; 0x2b3c <__vector_39+0x1cc>
    2a46:	af c0       	rjmp	.+350    	; 0x2ba6 <__vector_39+0x236>
    2a48:	80 3c       	cpi	r24, 0xC0	; 192
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <__vector_39+0xde>
    2a4c:	a3 c0       	rjmp	.+326    	; 0x2b94 <__vector_39+0x224>
    2a4e:	88 3c       	cpi	r24, 0xC8	; 200
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <__vector_39+0xe4>
    2a52:	a0 c0       	rjmp	.+320    	; 0x2b94 <__vector_39+0x224>
    2a54:	88 3b       	cpi	r24, 0xB8	; 184
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <__vector_39+0xea>
    2a58:	86 c0       	rjmp	.+268    	; 0x2b66 <__vector_39+0x1f6>
    2a5a:	a5 c0       	rjmp	.+330    	; 0x2ba6 <__vector_39+0x236>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
<<<<<<< HEAD
<<<<<<< HEAD
    2c32:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <twi_slarw>
    2c36:	10 c0       	rjmp	.+32     	; 0x2c58 <__vector_39+0x112>
=======
    2a52:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <twi_slarw>
    2a56:	10 c0       	rjmp	.+32     	; 0x2a78 <__vector_39+0x112>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2a5c:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <twi_slarw>
    2a60:	10 c0       	rjmp	.+32     	; 0x2a82 <__vector_39+0x112>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
<<<<<<< HEAD
<<<<<<< HEAD
    2c38:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2c3c:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_masterBufferLength>
    2c40:	98 17       	cp	r25, r24
    2c42:	70 f5       	brcc	.+92     	; 0x2ca0 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2c44:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	8e 0f       	add	r24, r30
    2c4c:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_masterBufferIndex>
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	e0 57       	subi	r30, 0x70	; 112
    2c54:	fa 4f       	sbci	r31, 0xFA	; 250
    2c56:	80 81       	ld	r24, Z
    2c58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
=======
    2a58:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2a5c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_masterBufferLength>
    2a60:	98 17       	cp	r25, r24
    2a62:	70 f5       	brcc	.+92     	; 0x2ac0 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2a64:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	8e 0f       	add	r24, r30
    2a6c:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_masterBufferIndex>
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	e7 58       	subi	r30, 0x87	; 135
    2a74:	fa 4f       	sbci	r31, 0xFA	; 250
    2a76:	80 81       	ld	r24, Z
    2a78:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2a62:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2a66:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_masterBufferLength>
    2a6a:	98 17       	cp	r25, r24
    2a6c:	70 f5       	brcc	.+92     	; 0x2aca <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2a6e:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	8e 0f       	add	r24, r30
    2a76:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_masterBufferIndex>
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	e7 58       	subi	r30, 0x87	; 135
    2a7e:	fa 4f       	sbci	r31, 0xFA	; 250
    2a80:	80 81       	ld	r24, Z
    2a82:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
<<<<<<< HEAD
<<<<<<< HEAD
    2c5c:	85 ec       	ldi	r24, 0xC5	; 197
    2c5e:	82 c0       	rjmp	.+260    	; 0x2d64 <__vector_39+0x21e>
=======
    2a7c:	85 ec       	ldi	r24, 0xC5	; 197
    2a7e:	82 c0       	rjmp	.+260    	; 0x2b84 <__vector_39+0x21e>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2a86:	85 ec       	ldi	r24, 0xC5	; 197
    2a88:	82 c0       	rjmp	.+260    	; 0x2b8e <__vector_39+0x21e>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
<<<<<<< HEAD
<<<<<<< HEAD
    2c60:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_error>
    2c64:	8a c0       	rjmp	.+276    	; 0x2d7a <__vector_39+0x234>
=======
    2a80:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <twi_error>
    2a84:	8a c0       	rjmp	.+276    	; 0x2b9a <__vector_39+0x234>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2a8a:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <twi_error>
    2a8e:	8a c0       	rjmp	.+276    	; 0x2ba4 <__vector_39+0x234>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
<<<<<<< HEAD
<<<<<<< HEAD
    2c66:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	8e 0f       	add	r24, r30
    2c6e:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_masterBufferIndex>
    2c72:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	e0 57       	subi	r30, 0x70	; 112
    2c7a:	fa 4f       	sbci	r31, 0xFA	; 250
    2c7c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c7e:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2c82:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_masterBufferLength>
    2c86:	6a c0       	rjmp	.+212    	; 0x2d5c <__vector_39+0x216>
=======
    2a86:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	8e 0f       	add	r24, r30
    2a8e:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_masterBufferIndex>
    2a92:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	e7 58       	subi	r30, 0x87	; 135
    2a9a:	fa 4f       	sbci	r31, 0xFA	; 250
    2a9c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2a9e:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2aa2:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_masterBufferLength>
    2aa6:	6a c0       	rjmp	.+212    	; 0x2b7c <__vector_39+0x216>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2a90:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	8e 0f       	add	r24, r30
    2a98:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_masterBufferIndex>
    2a9c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	e7 58       	subi	r30, 0x87	; 135
    2aa4:	fa 4f       	sbci	r31, 0xFA	; 250
    2aa6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2aa8:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2aac:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_masterBufferLength>
    2ab0:	6a c0       	rjmp	.+212    	; 0x2b86 <__vector_39+0x216>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
<<<<<<< HEAD
<<<<<<< HEAD
    2c88:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <twi_masterBufferIndex>
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	8e 0f       	add	r24, r30
    2c90:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_masterBufferIndex>
    2c94:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	e0 57       	subi	r30, 0x70	; 112
    2c9c:	fa 4f       	sbci	r31, 0xFA	; 250
    2c9e:	80 83       	st	Z, r24
=======
    2ab2:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	8e 0f       	add	r24, r30
    2aba:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_masterBufferIndex>
    2abe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	e7 58       	subi	r30, 0x87	; 135
    2ac6:	fa 4f       	sbci	r31, 0xFA	; 250
    2ac8:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	if (twi_sendStop)
    2aca:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <twi_sendStop>
    2ace:	81 11       	cpse	r24, r1
    2ad0:	69 c0       	rjmp	.+210    	; 0x2ba4 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
<<<<<<< HEAD
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <twi_inRepStart>
=======
    2aa8:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <twi_masterBufferIndex>
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	8e 0f       	add	r24, r30
    2ab0:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_masterBufferIndex>
    2ab4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	e7 58       	subi	r30, 0x87	; 135
    2abc:	fa 4f       	sbci	r31, 0xFA	; 250
    2abe:	80 83       	st	Z, r24
	if (twi_sendStop)
    2ac0:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <twi_sendStop>
    2ac4:	81 11       	cpse	r24, r1
    2ac6:	69 c0       	rjmp	.+210    	; 0x2b9a <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <twi_inRepStart>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <twi_inRepStart>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
<<<<<<< HEAD
<<<<<<< HEAD
    2cae:	84 ea       	ldi	r24, 0xA4	; 164
    2cb0:	5d c0       	rjmp	.+186    	; 0x2d6c <__vector_39+0x226>
=======
    2ace:	84 ea       	ldi	r24, 0xA4	; 164
    2ad0:	5d c0       	rjmp	.+186    	; 0x2b8c <__vector_39+0x226>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2ad8:	84 ea       	ldi	r24, 0xA4	; 164
    2ada:	5d c0       	rjmp	.+186    	; 0x2b96 <__vector_39+0x226>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
<<<<<<< HEAD
<<<<<<< HEAD
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2cb8:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <twi_rxBufferIndex>
    2cbc:	cf cf       	rjmp	.-98     	; 0x2c5c <__vector_39+0x116>
=======
    2ad2:	83 e0       	ldi	r24, 0x03	; 3
    2ad4:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2ad8:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <twi_rxBufferIndex>
    2adc:	cf cf       	rjmp	.-98     	; 0x2a7c <__vector_39+0x116>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2ae2:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <twi_rxBufferIndex>
    2ae6:	cf cf       	rjmp	.-98     	; 0x2a86 <__vector_39+0x116>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
<<<<<<< HEAD
<<<<<<< HEAD
    2cbe:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <twi_rxBufferIndex>
    2cc2:	80 32       	cpi	r24, 0x20	; 32
    2cc4:	08 f0       	brcs	.+2      	; 0x2cc8 <__vector_39+0x182>
    2cc6:	4d c0       	rjmp	.+154    	; 0x2d62 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2cc8:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <twi_rxBufferIndex>
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	8e 0f       	add	r24, r30
    2cd0:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <twi_rxBufferIndex>
    2cd4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	e4 5b       	subi	r30, 0xB4	; 180
    2cdc:	fa 4f       	sbci	r31, 0xFA	; 250
    2cde:	80 83       	st	Z, r24
=======
    2ade:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2ae2:	80 32       	cpi	r24, 0x20	; 32
    2ae4:	08 f0       	brcs	.+2      	; 0x2ae8 <__vector_39+0x182>
    2ae6:	4d c0       	rjmp	.+154    	; 0x2b82 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2ae8:	e0 91 34 05 	lds	r30, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	8e 0f       	add	r24, r30
    2af0:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <twi_rxBufferIndex>
    2af4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	eb 5c       	subi	r30, 0xCB	; 203
    2afc:	fa 4f       	sbci	r31, 0xFA	; 250
    2afe:	80 83       	st	Z, r24
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2ae8:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2aec:	80 32       	cpi	r24, 0x20	; 32
    2aee:	08 f0       	brcs	.+2      	; 0x2af2 <__vector_39+0x182>
    2af0:	4d c0       	rjmp	.+154    	; 0x2b8c <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2af2:	e0 91 34 05 	lds	r30, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	8e 0f       	add	r24, r30
    2afa:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <twi_rxBufferIndex>
    2afe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	eb 5c       	subi	r30, 0xCB	; 203
    2b06:	fa 4f       	sbci	r31, 0xFA	; 250
    2b08:	80 83       	st	Z, r24
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
<<<<<<< HEAD
<<<<<<< HEAD
    2ce0:	bd cf       	rjmp	.-134    	; 0x2c5c <__vector_39+0x116>
    2ce2:	2b df       	rcall	.-426    	; 0x2b3a <twi_releaseBus>
=======
    2b0a:	bd cf       	rjmp	.-134    	; 0x2a86 <__vector_39+0x116>
    2b0c:	2b df       	rcall	.-426    	; 0x2964 <twi_releaseBus>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2b0e:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2b12:	80 32       	cpi	r24, 0x20	; 32
    2b14:	30 f4       	brcc	.+12     	; 0x2b22 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2b16:	e0 91 34 05 	lds	r30, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	eb 5c       	subi	r30, 0xCB	; 203
    2b1e:	fa 4f       	sbci	r31, 0xFA	; 250
    2b20:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2b22:	60 91 34 05 	lds	r22, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	e0 91 99 05 	lds	r30, 0x0599	; 0x800599 <twi_onSlaveReceive>
    2b2c:	f0 91 9a 05 	lds	r31, 0x059A	; 0x80059a <twi_onSlaveReceive+0x1>
    2b30:	85 e3       	ldi	r24, 0x35	; 53
    2b32:	95 e0       	ldi	r25, 0x05	; 5
    2b34:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2b36:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <twi_rxBufferIndex>
      break;
<<<<<<< HEAD
    2d10:	35 c0       	rjmp	.+106    	; 0x2d7c <__vector_39+0x236>
=======
    2b00:	bd cf       	rjmp	.-134    	; 0x2a7c <__vector_39+0x116>
    2b02:	2b df       	rcall	.-426    	; 0x295a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2b04:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2b08:	80 32       	cpi	r24, 0x20	; 32
    2b0a:	30 f4       	brcc	.+12     	; 0x2b18 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2b0c:	e0 91 34 05 	lds	r30, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	eb 5c       	subi	r30, 0xCB	; 203
    2b14:	fa 4f       	sbci	r31, 0xFA	; 250
    2b16:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2b18:	60 91 34 05 	lds	r22, 0x0534	; 0x800534 <twi_rxBufferIndex>
    2b1c:	70 e0       	ldi	r23, 0x00	; 0
    2b1e:	e0 91 99 05 	lds	r30, 0x0599	; 0x800599 <twi_onSlaveReceive>
    2b22:	f0 91 9a 05 	lds	r31, 0x059A	; 0x80059a <twi_onSlaveReceive+0x1>
    2b26:	85 e3       	ldi	r24, 0x35	; 53
    2b28:	95 e0       	ldi	r25, 0x05	; 5
    2b2a:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2b2c:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <twi_rxBufferIndex>
      break;
    2b30:	35 c0       	rjmp	.+106    	; 0x2b9c <__vector_39+0x236>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2b3a:	35 c0       	rjmp	.+106    	; 0x2ba6 <__vector_39+0x236>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
<<<<<<< HEAD
<<<<<<< HEAD
    2d12:	84 e0       	ldi	r24, 0x04	; 4
    2d14:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <twi_state>
=======
    2b3c:	84 e0       	ldi	r24, 0x04	; 4
    2b3e:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <twi_state>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2b42:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2b46:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2b4a:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <twi_onSlaveTransmit>
    2b4e:	f0 91 9c 05 	lds	r31, 0x059C	; 0x80059c <twi_onSlaveTransmit+0x1>
    2b52:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2b54:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_txBufferLength>
    2b58:	81 11       	cpse	r24, r1
    2b5a:	05 c0       	rjmp	.+10     	; 0x2b66 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
<<<<<<< HEAD
    2d38:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <twi_txBuffer>
=======
    2b32:	84 e0       	ldi	r24, 0x04	; 4
    2b34:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2b38:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2b3c:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2b40:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <twi_onSlaveTransmit>
    2b44:	f0 91 9c 05 	lds	r31, 0x059C	; 0x80059c <twi_onSlaveTransmit+0x1>
    2b48:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2b4a:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_txBufferLength>
    2b4e:	81 11       	cpse	r24, r1
    2b50:	05 c0       	rjmp	.+10     	; 0x2b5c <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2b58:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <twi_txBuffer>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2b62:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <twi_txBuffer>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
<<<<<<< HEAD
<<<<<<< HEAD
    2d3c:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <twi_txBufferIndex>
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	8e 0f       	add	r24, r30
    2d44:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_txBufferIndex>
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	e2 59       	subi	r30, 0x92	; 146
    2d4c:	fa 4f       	sbci	r31, 0xFA	; 250
    2d4e:	80 81       	ld	r24, Z
    2d50:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d54:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <twi_txBufferIndex>
    2d58:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <twi_txBufferLength>
    2d5c:	98 17       	cp	r25, r24
    2d5e:	08 f4       	brcc	.+2      	; 0x2d62 <__vector_39+0x21c>
    2d60:	7d cf       	rjmp	.-262    	; 0x2c5c <__vector_39+0x116>
=======
    2b5c:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <twi_txBufferIndex>
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	8e 0f       	add	r24, r30
    2b64:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <twi_txBufferIndex>
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	e9 5a       	subi	r30, 0xA9	; 169
    2b6c:	fa 4f       	sbci	r31, 0xFA	; 250
    2b6e:	80 81       	ld	r24, Z
    2b70:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2b74:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <twi_txBufferIndex>
    2b78:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_txBufferLength>
    2b7c:	98 17       	cp	r25, r24
    2b7e:	08 f4       	brcc	.+2      	; 0x2b82 <__vector_39+0x21c>
    2b80:	7d cf       	rjmp	.-262    	; 0x2a7c <__vector_39+0x116>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2b66:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <twi_txBufferIndex>
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	8e 0f       	add	r24, r30
    2b6e:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <twi_txBufferIndex>
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	e9 5a       	subi	r30, 0xA9	; 169
    2b76:	fa 4f       	sbci	r31, 0xFA	; 250
    2b78:	80 81       	ld	r24, Z
    2b7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2b7e:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <twi_txBufferIndex>
    2b82:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_txBufferLength>
    2b86:	98 17       	cp	r25, r24
    2b88:	08 f4       	brcc	.+2      	; 0x2b8c <__vector_39+0x21c>
    2b8a:	7d cf       	rjmp	.-262    	; 0x2a86 <__vector_39+0x116>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
<<<<<<< HEAD
<<<<<<< HEAD
    2d62:	85 e8       	ldi	r24, 0x85	; 133
    2d64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d68:	09 c0       	rjmp	.+18     	; 0x2d7c <__vector_39+0x236>
=======
    2b82:	85 e8       	ldi	r24, 0x85	; 133
    2b84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b88:	09 c0       	rjmp	.+18     	; 0x2b9c <__vector_39+0x236>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2b8c:	85 e8       	ldi	r24, 0x85	; 133
    2b8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b92:	09 c0       	rjmp	.+18     	; 0x2ba6 <__vector_39+0x236>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
<<<<<<< HEAD
<<<<<<< HEAD
    2d6a:	85 ec       	ldi	r24, 0xC5	; 197
    2d6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
=======
    2b8a:	85 ec       	ldi	r24, 0xC5	; 197
    2b8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2b94:	85 ec       	ldi	r24, 0xC5	; 197
    2b96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
<<<<<<< HEAD
<<<<<<< HEAD
    2d70:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <twi_state>
      break;
    2d74:	03 c0       	rjmp	.+6      	; 0x2d7c <__vector_39+0x236>
=======
    2b90:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <twi_state>
      break;
    2b94:	03 c0       	rjmp	.+6      	; 0x2b9c <__vector_39+0x236>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2b9a:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <twi_state>
      break;
    2b9e:	03 c0       	rjmp	.+6      	; 0x2ba6 <__vector_39+0x236>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
<<<<<<< HEAD
<<<<<<< HEAD
    2d76:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <twi_error>
=======
    2ba0:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <twi_error>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
      twi_stop();
    2ba4:	d5 de       	rcall	.-598    	; 0x2950 <twi_stop>
      break;
  }
}
<<<<<<< HEAD
    2d7c:	ff 91       	pop	r31
    2d7e:	ef 91       	pop	r30
    2d80:	bf 91       	pop	r27
    2d82:	af 91       	pop	r26
    2d84:	9f 91       	pop	r25
    2d86:	8f 91       	pop	r24
    2d88:	7f 91       	pop	r23
    2d8a:	6f 91       	pop	r22
    2d8c:	5f 91       	pop	r21
    2d8e:	4f 91       	pop	r20
    2d90:	3f 91       	pop	r19
    2d92:	2f 91       	pop	r18
    2d94:	0f 90       	pop	r0
    2d96:	0b be       	out	0x3b, r0	; 59
    2d98:	0f 90       	pop	r0
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	0f 90       	pop	r0
    2d9e:	1f 90       	pop	r1
    2da0:	18 95       	reti

00002da2 <__udivmodsi4>:
    2da2:	a1 e2       	ldi	r26, 0x21	; 33
    2da4:	1a 2e       	mov	r1, r26
    2da6:	aa 1b       	sub	r26, r26
    2da8:	bb 1b       	sub	r27, r27
    2daa:	fd 01       	movw	r30, r26
    2dac:	0d c0       	rjmp	.+26     	; 0x2dc8 <__udivmodsi4_ep>

00002dae <__udivmodsi4_loop>:
    2dae:	aa 1f       	adc	r26, r26
    2db0:	bb 1f       	adc	r27, r27
    2db2:	ee 1f       	adc	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	a2 17       	cp	r26, r18
    2db8:	b3 07       	cpc	r27, r19
    2dba:	e4 07       	cpc	r30, r20
    2dbc:	f5 07       	cpc	r31, r21
    2dbe:	20 f0       	brcs	.+8      	; 0x2dc8 <__udivmodsi4_ep>
    2dc0:	a2 1b       	sub	r26, r18
    2dc2:	b3 0b       	sbc	r27, r19
    2dc4:	e4 0b       	sbc	r30, r20
    2dc6:	f5 0b       	sbc	r31, r21

00002dc8 <__udivmodsi4_ep>:
    2dc8:	66 1f       	adc	r22, r22
    2dca:	77 1f       	adc	r23, r23
    2dcc:	88 1f       	adc	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	1a 94       	dec	r1
    2dd2:	69 f7       	brne	.-38     	; 0x2dae <__udivmodsi4_loop>
    2dd4:	60 95       	com	r22
    2dd6:	70 95       	com	r23
    2dd8:	80 95       	com	r24
    2dda:	90 95       	com	r25
    2ddc:	9b 01       	movw	r18, r22
    2dde:	ac 01       	movw	r20, r24
    2de0:	bd 01       	movw	r22, r26
    2de2:	cf 01       	movw	r24, r30
    2de4:	08 95       	ret

00002de6 <__tablejump2__>:
    2de6:	ee 0f       	add	r30, r30
    2de8:	ff 1f       	adc	r31, r31
    2dea:	88 1f       	adc	r24, r24
    2dec:	8b bf       	out	0x3b, r24	; 59
    2dee:	07 90       	elpm	r0, Z+
    2df0:	f6 91       	elpm	r31, Z
    2df2:	e0 2d       	mov	r30, r0
    2df4:	19 94       	eijmp

00002df6 <malloc>:
    2df6:	0f 93       	push	r16
    2df8:	1f 93       	push	r17
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
    2dfe:	82 30       	cpi	r24, 0x02	; 2
    2e00:	91 05       	cpc	r25, r1
    2e02:	10 f4       	brcc	.+4      	; 0x2e08 <malloc+0x12>
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	e0 91 ba 05 	lds	r30, 0x05BA	; 0x8005ba <__flp>
    2e0c:	f0 91 bb 05 	lds	r31, 0x05BB	; 0x8005bb <__flp+0x1>
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	a0 e0       	ldi	r26, 0x00	; 0
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	30 97       	sbiw	r30, 0x00	; 0
    2e1a:	19 f1       	breq	.+70     	; 0x2e62 <malloc+0x6c>
    2e1c:	40 81       	ld	r20, Z
    2e1e:	51 81       	ldd	r21, Z+1	; 0x01
    2e20:	02 81       	ldd	r16, Z+2	; 0x02
    2e22:	13 81       	ldd	r17, Z+3	; 0x03
    2e24:	48 17       	cp	r20, r24
    2e26:	59 07       	cpc	r21, r25
    2e28:	c8 f0       	brcs	.+50     	; 0x2e5c <malloc+0x66>
    2e2a:	84 17       	cp	r24, r20
    2e2c:	95 07       	cpc	r25, r21
    2e2e:	69 f4       	brne	.+26     	; 0x2e4a <malloc+0x54>
    2e30:	10 97       	sbiw	r26, 0x00	; 0
    2e32:	31 f0       	breq	.+12     	; 0x2e40 <malloc+0x4a>
    2e34:	12 96       	adiw	r26, 0x02	; 2
    2e36:	0c 93       	st	X, r16
    2e38:	12 97       	sbiw	r26, 0x02	; 2
    2e3a:	13 96       	adiw	r26, 0x03	; 3
    2e3c:	1c 93       	st	X, r17
    2e3e:	27 c0       	rjmp	.+78     	; 0x2e8e <malloc+0x98>
    2e40:	00 93 ba 05 	sts	0x05BA, r16	; 0x8005ba <__flp>
    2e44:	10 93 bb 05 	sts	0x05BB, r17	; 0x8005bb <__flp+0x1>
    2e48:	22 c0       	rjmp	.+68     	; 0x2e8e <malloc+0x98>
    2e4a:	21 15       	cp	r18, r1
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	19 f0       	breq	.+6      	; 0x2e56 <malloc+0x60>
    2e50:	42 17       	cp	r20, r18
    2e52:	53 07       	cpc	r21, r19
    2e54:	18 f4       	brcc	.+6      	; 0x2e5c <malloc+0x66>
    2e56:	9a 01       	movw	r18, r20
    2e58:	bd 01       	movw	r22, r26
    2e5a:	ef 01       	movw	r28, r30
    2e5c:	df 01       	movw	r26, r30
    2e5e:	f8 01       	movw	r30, r16
    2e60:	db cf       	rjmp	.-74     	; 0x2e18 <malloc+0x22>
    2e62:	21 15       	cp	r18, r1
    2e64:	31 05       	cpc	r19, r1
    2e66:	f9 f0       	breq	.+62     	; 0x2ea6 <malloc+0xb0>
    2e68:	28 1b       	sub	r18, r24
    2e6a:	39 0b       	sbc	r19, r25
    2e6c:	24 30       	cpi	r18, 0x04	; 4
    2e6e:	31 05       	cpc	r19, r1
    2e70:	80 f4       	brcc	.+32     	; 0x2e92 <malloc+0x9c>
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	9b 81       	ldd	r25, Y+3	; 0x03
    2e76:	61 15       	cp	r22, r1
    2e78:	71 05       	cpc	r23, r1
    2e7a:	21 f0       	breq	.+8      	; 0x2e84 <malloc+0x8e>
    2e7c:	fb 01       	movw	r30, r22
    2e7e:	93 83       	std	Z+3, r25	; 0x03
    2e80:	82 83       	std	Z+2, r24	; 0x02
    2e82:	04 c0       	rjmp	.+8      	; 0x2e8c <malloc+0x96>
    2e84:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <__flp+0x1>
    2e88:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <__flp>
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	32 96       	adiw	r30, 0x02	; 2
    2e90:	44 c0       	rjmp	.+136    	; 0x2f1a <malloc+0x124>
    2e92:	fe 01       	movw	r30, r28
    2e94:	e2 0f       	add	r30, r18
    2e96:	f3 1f       	adc	r31, r19
    2e98:	81 93       	st	Z+, r24
    2e9a:	91 93       	st	Z+, r25
    2e9c:	22 50       	subi	r18, 0x02	; 2
    2e9e:	31 09       	sbc	r19, r1
    2ea0:	39 83       	std	Y+1, r19	; 0x01
    2ea2:	28 83       	st	Y, r18
    2ea4:	3a c0       	rjmp	.+116    	; 0x2f1a <malloc+0x124>
    2ea6:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <__brkval>
    2eaa:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <__brkval+0x1>
    2eae:	23 2b       	or	r18, r19
    2eb0:	41 f4       	brne	.+16     	; 0x2ec2 <malloc+0xcc>
    2eb2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2eb6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2eba:	30 93 b9 05 	sts	0x05B9, r19	; 0x8005b9 <__brkval+0x1>
    2ebe:	20 93 b8 05 	sts	0x05B8, r18	; 0x8005b8 <__brkval>
    2ec2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2ec6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2eca:	21 15       	cp	r18, r1
    2ecc:	31 05       	cpc	r19, r1
    2ece:	41 f4       	brne	.+16     	; 0x2ee0 <malloc+0xea>
    2ed0:	2d b7       	in	r18, 0x3d	; 61
    2ed2:	3e b7       	in	r19, 0x3e	; 62
    2ed4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2ed8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2edc:	24 1b       	sub	r18, r20
    2ede:	35 0b       	sbc	r19, r21
    2ee0:	e0 91 b8 05 	lds	r30, 0x05B8	; 0x8005b8 <__brkval>
    2ee4:	f0 91 b9 05 	lds	r31, 0x05B9	; 0x8005b9 <__brkval+0x1>
    2ee8:	e2 17       	cp	r30, r18
    2eea:	f3 07       	cpc	r31, r19
    2eec:	a0 f4       	brcc	.+40     	; 0x2f16 <malloc+0x120>
    2eee:	2e 1b       	sub	r18, r30
    2ef0:	3f 0b       	sbc	r19, r31
    2ef2:	28 17       	cp	r18, r24
    2ef4:	39 07       	cpc	r19, r25
    2ef6:	78 f0       	brcs	.+30     	; 0x2f16 <malloc+0x120>
    2ef8:	ac 01       	movw	r20, r24
    2efa:	4e 5f       	subi	r20, 0xFE	; 254
    2efc:	5f 4f       	sbci	r21, 0xFF	; 255
    2efe:	24 17       	cp	r18, r20
    2f00:	35 07       	cpc	r19, r21
    2f02:	48 f0       	brcs	.+18     	; 0x2f16 <malloc+0x120>
    2f04:	4e 0f       	add	r20, r30
    2f06:	5f 1f       	adc	r21, r31
    2f08:	50 93 b9 05 	sts	0x05B9, r21	; 0x8005b9 <__brkval+0x1>
    2f0c:	40 93 b8 05 	sts	0x05B8, r20	; 0x8005b8 <__brkval>
    2f10:	81 93       	st	Z+, r24
    2f12:	91 93       	st	Z+, r25
    2f14:	02 c0       	rjmp	.+4      	; 0x2f1a <malloc+0x124>
    2f16:	e0 e0       	ldi	r30, 0x00	; 0
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	cf 01       	movw	r24, r30
    2f1c:	df 91       	pop	r29
    2f1e:	cf 91       	pop	r28
    2f20:	1f 91       	pop	r17
    2f22:	0f 91       	pop	r16
    2f24:	08 95       	ret

00002f26 <free>:
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <free+0xa>
    2f2e:	81 c0       	rjmp	.+258    	; 0x3032 <free+0x10c>
    2f30:	fc 01       	movw	r30, r24
    2f32:	32 97       	sbiw	r30, 0x02	; 2
    2f34:	13 82       	std	Z+3, r1	; 0x03
    2f36:	12 82       	std	Z+2, r1	; 0x02
    2f38:	a0 91 ba 05 	lds	r26, 0x05BA	; 0x8005ba <__flp>
    2f3c:	b0 91 bb 05 	lds	r27, 0x05BB	; 0x8005bb <__flp+0x1>
    2f40:	10 97       	sbiw	r26, 0x00	; 0
    2f42:	81 f4       	brne	.+32     	; 0x2f64 <free+0x3e>
    2f44:	20 81       	ld	r18, Z
    2f46:	31 81       	ldd	r19, Z+1	; 0x01
    2f48:	82 0f       	add	r24, r18
    2f4a:	93 1f       	adc	r25, r19
    2f4c:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <__brkval>
    2f50:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <__brkval+0x1>
    2f54:	28 17       	cp	r18, r24
    2f56:	39 07       	cpc	r19, r25
    2f58:	51 f5       	brne	.+84     	; 0x2fae <free+0x88>
    2f5a:	f0 93 b9 05 	sts	0x05B9, r31	; 0x8005b9 <__brkval+0x1>
    2f5e:	e0 93 b8 05 	sts	0x05B8, r30	; 0x8005b8 <__brkval>
    2f62:	67 c0       	rjmp	.+206    	; 0x3032 <free+0x10c>
    2f64:	ed 01       	movw	r28, r26
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	ce 17       	cp	r28, r30
    2f6c:	df 07       	cpc	r29, r31
    2f6e:	40 f4       	brcc	.+16     	; 0x2f80 <free+0x5a>
    2f70:	4a 81       	ldd	r20, Y+2	; 0x02
    2f72:	5b 81       	ldd	r21, Y+3	; 0x03
    2f74:	9e 01       	movw	r18, r28
    2f76:	41 15       	cp	r20, r1
    2f78:	51 05       	cpc	r21, r1
    2f7a:	f1 f0       	breq	.+60     	; 0x2fb8 <free+0x92>
    2f7c:	ea 01       	movw	r28, r20
    2f7e:	f5 cf       	rjmp	.-22     	; 0x2f6a <free+0x44>
    2f80:	d3 83       	std	Z+3, r29	; 0x03
    2f82:	c2 83       	std	Z+2, r28	; 0x02
    2f84:	40 81       	ld	r20, Z
    2f86:	51 81       	ldd	r21, Z+1	; 0x01
    2f88:	84 0f       	add	r24, r20
    2f8a:	95 1f       	adc	r25, r21
    2f8c:	c8 17       	cp	r28, r24
    2f8e:	d9 07       	cpc	r29, r25
    2f90:	59 f4       	brne	.+22     	; 0x2fa8 <free+0x82>
    2f92:	88 81       	ld	r24, Y
    2f94:	99 81       	ldd	r25, Y+1	; 0x01
    2f96:	84 0f       	add	r24, r20
    2f98:	95 1f       	adc	r25, r21
    2f9a:	02 96       	adiw	r24, 0x02	; 2
    2f9c:	91 83       	std	Z+1, r25	; 0x01
    2f9e:	80 83       	st	Z, r24
    2fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa4:	93 83       	std	Z+3, r25	; 0x03
    2fa6:	82 83       	std	Z+2, r24	; 0x02
    2fa8:	21 15       	cp	r18, r1
    2faa:	31 05       	cpc	r19, r1
    2fac:	29 f4       	brne	.+10     	; 0x2fb8 <free+0x92>
    2fae:	f0 93 bb 05 	sts	0x05BB, r31	; 0x8005bb <__flp+0x1>
    2fb2:	e0 93 ba 05 	sts	0x05BA, r30	; 0x8005ba <__flp>
    2fb6:	3d c0       	rjmp	.+122    	; 0x3032 <free+0x10c>
    2fb8:	e9 01       	movw	r28, r18
    2fba:	fb 83       	std	Y+3, r31	; 0x03
    2fbc:	ea 83       	std	Y+2, r30	; 0x02
    2fbe:	49 91       	ld	r20, Y+
    2fc0:	59 91       	ld	r21, Y+
    2fc2:	c4 0f       	add	r28, r20
    2fc4:	d5 1f       	adc	r29, r21
    2fc6:	ec 17       	cp	r30, r28
    2fc8:	fd 07       	cpc	r31, r29
    2fca:	61 f4       	brne	.+24     	; 0x2fe4 <free+0xbe>
    2fcc:	80 81       	ld	r24, Z
    2fce:	91 81       	ldd	r25, Z+1	; 0x01
    2fd0:	84 0f       	add	r24, r20
    2fd2:	95 1f       	adc	r25, r21
    2fd4:	02 96       	adiw	r24, 0x02	; 2
    2fd6:	e9 01       	movw	r28, r18
    2fd8:	99 83       	std	Y+1, r25	; 0x01
    2fda:	88 83       	st	Y, r24
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	93 81       	ldd	r25, Z+3	; 0x03
    2fe0:	9b 83       	std	Y+3, r25	; 0x03
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
    2fe4:	e0 e0       	ldi	r30, 0x00	; 0
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	12 96       	adiw	r26, 0x02	; 2
    2fea:	8d 91       	ld	r24, X+
    2fec:	9c 91       	ld	r25, X
    2fee:	13 97       	sbiw	r26, 0x03	; 3
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	19 f0       	breq	.+6      	; 0x2ffa <free+0xd4>
    2ff4:	fd 01       	movw	r30, r26
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	f7 cf       	rjmp	.-18     	; 0x2fe8 <free+0xc2>
    2ffa:	8d 91       	ld	r24, X+
    2ffc:	9c 91       	ld	r25, X
    2ffe:	11 97       	sbiw	r26, 0x01	; 1
    3000:	9d 01       	movw	r18, r26
    3002:	2e 5f       	subi	r18, 0xFE	; 254
    3004:	3f 4f       	sbci	r19, 0xFF	; 255
    3006:	82 0f       	add	r24, r18
    3008:	93 1f       	adc	r25, r19
    300a:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <__brkval>
    300e:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <__brkval+0x1>
    3012:	28 17       	cp	r18, r24
    3014:	39 07       	cpc	r19, r25
    3016:	69 f4       	brne	.+26     	; 0x3032 <free+0x10c>
    3018:	30 97       	sbiw	r30, 0x00	; 0
    301a:	29 f4       	brne	.+10     	; 0x3026 <free+0x100>
    301c:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <__flp+0x1>
    3020:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <__flp>
    3024:	02 c0       	rjmp	.+4      	; 0x302a <free+0x104>
    3026:	13 82       	std	Z+3, r1	; 0x03
    3028:	12 82       	std	Z+2, r1	; 0x02
    302a:	b0 93 b9 05 	sts	0x05B9, r27	; 0x8005b9 <__brkval+0x1>
    302e:	a0 93 b8 05 	sts	0x05B8, r26	; 0x8005b8 <__brkval>
    3032:	df 91       	pop	r29
    3034:	cf 91       	pop	r28
    3036:	08 95       	ret

00003038 <realloc>:
    3038:	6f 92       	push	r6
    303a:	7f 92       	push	r7
    303c:	8f 92       	push	r8
    303e:	9f 92       	push	r9
    3040:	af 92       	push	r10
    3042:	bf 92       	push	r11
    3044:	cf 92       	push	r12
    3046:	df 92       	push	r13
    3048:	ef 92       	push	r14
    304a:	ff 92       	push	r15
    304c:	0f 93       	push	r16
    304e:	1f 93       	push	r17
    3050:	cf 93       	push	r28
    3052:	df 93       	push	r29
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	81 f4       	brne	.+32     	; 0x3078 <realloc+0x40>
    3058:	cb 01       	movw	r24, r22
    305a:	df 91       	pop	r29
    305c:	cf 91       	pop	r28
    305e:	1f 91       	pop	r17
    3060:	0f 91       	pop	r16
    3062:	ff 90       	pop	r15
    3064:	ef 90       	pop	r14
    3066:	df 90       	pop	r13
    3068:	cf 90       	pop	r12
    306a:	bf 90       	pop	r11
    306c:	af 90       	pop	r10
    306e:	9f 90       	pop	r9
    3070:	8f 90       	pop	r8
    3072:	7f 90       	pop	r7
    3074:	6f 90       	pop	r6
    3076:	bf ce       	rjmp	.-642    	; 0x2df6 <malloc>
    3078:	fc 01       	movw	r30, r24
    307a:	e6 0f       	add	r30, r22
    307c:	f7 1f       	adc	r31, r23
    307e:	9c 01       	movw	r18, r24
    3080:	22 50       	subi	r18, 0x02	; 2
    3082:	31 09       	sbc	r19, r1
    3084:	e2 17       	cp	r30, r18
    3086:	f3 07       	cpc	r31, r19
    3088:	08 f4       	brcc	.+2      	; 0x308c <realloc+0x54>
    308a:	a5 c0       	rjmp	.+330    	; 0x31d6 <realloc+0x19e>
    308c:	ec 01       	movw	r28, r24
    308e:	d9 01       	movw	r26, r18
    3090:	0d 91       	ld	r16, X+
    3092:	1c 91       	ld	r17, X
    3094:	11 97       	sbiw	r26, 0x01	; 1
    3096:	06 17       	cp	r16, r22
    3098:	17 07       	cpc	r17, r23
    309a:	a8 f0       	brcs	.+42     	; 0x30c6 <realloc+0x8e>
    309c:	05 30       	cpi	r16, 0x05	; 5
    309e:	11 05       	cpc	r17, r1
    30a0:	08 f4       	brcc	.+2      	; 0x30a4 <realloc+0x6c>
    30a2:	97 c0       	rjmp	.+302    	; 0x31d2 <realloc+0x19a>
    30a4:	c8 01       	movw	r24, r16
    30a6:	04 97       	sbiw	r24, 0x04	; 4
    30a8:	86 17       	cp	r24, r22
    30aa:	97 07       	cpc	r25, r23
    30ac:	08 f4       	brcc	.+2      	; 0x30b0 <realloc+0x78>
    30ae:	91 c0       	rjmp	.+290    	; 0x31d2 <realloc+0x19a>
    30b0:	02 50       	subi	r16, 0x02	; 2
    30b2:	11 09       	sbc	r17, r1
    30b4:	06 1b       	sub	r16, r22
    30b6:	17 0b       	sbc	r17, r23
    30b8:	01 93       	st	Z+, r16
    30ba:	11 93       	st	Z+, r17
    30bc:	6d 93       	st	X+, r22
    30be:	7c 93       	st	X, r23
    30c0:	cf 01       	movw	r24, r30
    30c2:	31 df       	rcall	.-414    	; 0x2f26 <free>
    30c4:	86 c0       	rjmp	.+268    	; 0x31d2 <realloc+0x19a>
    30c6:	5b 01       	movw	r10, r22
    30c8:	a0 1a       	sub	r10, r16
    30ca:	b1 0a       	sbc	r11, r17
    30cc:	4c 01       	movw	r8, r24
    30ce:	80 0e       	add	r8, r16
    30d0:	91 1e       	adc	r9, r17
    30d2:	a0 91 ba 05 	lds	r26, 0x05BA	; 0x8005ba <__flp>
    30d6:	b0 91 bb 05 	lds	r27, 0x05BB	; 0x8005bb <__flp+0x1>
    30da:	61 2c       	mov	r6, r1
    30dc:	71 2c       	mov	r7, r1
    30de:	e1 2c       	mov	r14, r1
    30e0:	f1 2c       	mov	r15, r1
    30e2:	10 97       	sbiw	r26, 0x00	; 0
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <realloc+0xb0>
    30e6:	46 c0       	rjmp	.+140    	; 0x3174 <realloc+0x13c>
    30e8:	8d 91       	ld	r24, X+
    30ea:	9c 91       	ld	r25, X
    30ec:	11 97       	sbiw	r26, 0x01	; 1
    30ee:	a8 15       	cp	r26, r8
    30f0:	b9 05       	cpc	r27, r9
    30f2:	b1 f5       	brne	.+108    	; 0x3160 <realloc+0x128>
    30f4:	6c 01       	movw	r12, r24
    30f6:	42 e0       	ldi	r20, 0x02	; 2
    30f8:	c4 0e       	add	r12, r20
    30fa:	d1 1c       	adc	r13, r1
    30fc:	ca 14       	cp	r12, r10
    30fe:	db 04       	cpc	r13, r11
    3100:	78 f1       	brcs	.+94     	; 0x3160 <realloc+0x128>
    3102:	4c 01       	movw	r8, r24
    3104:	8a 18       	sub	r8, r10
    3106:	9b 08       	sbc	r9, r11
    3108:	64 01       	movw	r12, r8
    310a:	42 e0       	ldi	r20, 0x02	; 2
    310c:	c4 0e       	add	r12, r20
    310e:	d1 1c       	adc	r13, r1
    3110:	12 96       	adiw	r26, 0x02	; 2
    3112:	bc 90       	ld	r11, X
    3114:	12 97       	sbiw	r26, 0x02	; 2
    3116:	13 96       	adiw	r26, 0x03	; 3
    3118:	ac 91       	ld	r26, X
    311a:	b5 e0       	ldi	r27, 0x05	; 5
    311c:	cb 16       	cp	r12, r27
    311e:	d1 04       	cpc	r13, r1
    3120:	40 f0       	brcs	.+16     	; 0x3132 <realloc+0xfa>
    3122:	b2 82       	std	Z+2, r11	; 0x02
    3124:	a3 83       	std	Z+3, r26	; 0x03
    3126:	91 82       	std	Z+1, r9	; 0x01
    3128:	80 82       	st	Z, r8
    312a:	d9 01       	movw	r26, r18
    312c:	6d 93       	st	X+, r22
    312e:	7c 93       	st	X, r23
    3130:	09 c0       	rjmp	.+18     	; 0x3144 <realloc+0x10c>
    3132:	0e 5f       	subi	r16, 0xFE	; 254
    3134:	1f 4f       	sbci	r17, 0xFF	; 255
    3136:	80 0f       	add	r24, r16
    3138:	91 1f       	adc	r25, r17
    313a:	f9 01       	movw	r30, r18
    313c:	91 83       	std	Z+1, r25	; 0x01
    313e:	80 83       	st	Z, r24
    3140:	eb 2d       	mov	r30, r11
    3142:	fa 2f       	mov	r31, r26
    3144:	e1 14       	cp	r14, r1
    3146:	f1 04       	cpc	r15, r1
    3148:	31 f0       	breq	.+12     	; 0x3156 <realloc+0x11e>
    314a:	d7 01       	movw	r26, r14
    314c:	13 96       	adiw	r26, 0x03	; 3
    314e:	fc 93       	st	X, r31
    3150:	ee 93       	st	-X, r30
    3152:	12 97       	sbiw	r26, 0x02	; 2
    3154:	3e c0       	rjmp	.+124    	; 0x31d2 <realloc+0x19a>
    3156:	f0 93 bb 05 	sts	0x05BB, r31	; 0x8005bb <__flp+0x1>
    315a:	e0 93 ba 05 	sts	0x05BA, r30	; 0x8005ba <__flp>
    315e:	39 c0       	rjmp	.+114    	; 0x31d2 <realloc+0x19a>
    3160:	68 16       	cp	r6, r24
    3162:	79 06       	cpc	r7, r25
    3164:	08 f4       	brcc	.+2      	; 0x3168 <realloc+0x130>
    3166:	3c 01       	movw	r6, r24
    3168:	7d 01       	movw	r14, r26
    316a:	12 96       	adiw	r26, 0x02	; 2
    316c:	0d 90       	ld	r0, X+
    316e:	bc 91       	ld	r27, X
    3170:	a0 2d       	mov	r26, r0
    3172:	b7 cf       	rjmp	.-146    	; 0x30e2 <realloc+0xaa>
    3174:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <__brkval>
    3178:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <__brkval+0x1>
    317c:	88 16       	cp	r8, r24
    317e:	99 06       	cpc	r9, r25
    3180:	e1 f4       	brne	.+56     	; 0x31ba <realloc+0x182>
    3182:	66 16       	cp	r6, r22
    3184:	77 06       	cpc	r7, r23
    3186:	c8 f4       	brcc	.+50     	; 0x31ba <realloc+0x182>
    3188:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    318c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	41 f4       	brne	.+16     	; 0x31a4 <realloc+0x16c>
    3194:	8d b7       	in	r24, 0x3d	; 61
    3196:	9e b7       	in	r25, 0x3e	; 62
    3198:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    319c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    31a0:	84 1b       	sub	r24, r20
    31a2:	95 0b       	sbc	r25, r21
    31a4:	e8 17       	cp	r30, r24
    31a6:	f9 07       	cpc	r31, r25
    31a8:	b0 f4       	brcc	.+44     	; 0x31d6 <realloc+0x19e>
    31aa:	f0 93 b9 05 	sts	0x05B9, r31	; 0x8005b9 <__brkval+0x1>
    31ae:	e0 93 b8 05 	sts	0x05B8, r30	; 0x8005b8 <__brkval>
    31b2:	f9 01       	movw	r30, r18
    31b4:	71 83       	std	Z+1, r23	; 0x01
    31b6:	60 83       	st	Z, r22
    31b8:	0c c0       	rjmp	.+24     	; 0x31d2 <realloc+0x19a>
    31ba:	cb 01       	movw	r24, r22
    31bc:	1c de       	rcall	.-968    	; 0x2df6 <malloc>
    31be:	7c 01       	movw	r14, r24
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	49 f0       	breq	.+18     	; 0x31d6 <realloc+0x19e>
    31c4:	a8 01       	movw	r20, r16
    31c6:	be 01       	movw	r22, r28
    31c8:	17 d0       	rcall	.+46     	; 0x31f8 <memcpy>
    31ca:	ce 01       	movw	r24, r28
    31cc:	ac de       	rcall	.-680    	; 0x2f26 <free>
    31ce:	c7 01       	movw	r24, r14
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <realloc+0x1a2>
    31d2:	ce 01       	movw	r24, r28
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <realloc+0x1a2>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	1f 91       	pop	r17
    31e0:	0f 91       	pop	r16
    31e2:	ff 90       	pop	r15
    31e4:	ef 90       	pop	r14
    31e6:	df 90       	pop	r13
    31e8:	cf 90       	pop	r12
    31ea:	bf 90       	pop	r11
    31ec:	af 90       	pop	r10
    31ee:	9f 90       	pop	r9
    31f0:	8f 90       	pop	r8
    31f2:	7f 90       	pop	r7
    31f4:	6f 90       	pop	r6
    31f6:	08 95       	ret

000031f8 <memcpy>:
    31f8:	fb 01       	movw	r30, r22
    31fa:	dc 01       	movw	r26, r24
    31fc:	02 c0       	rjmp	.+4      	; 0x3202 <memcpy+0xa>
    31fe:	01 90       	ld	r0, Z+
    3200:	0d 92       	st	X+, r0
    3202:	41 50       	subi	r20, 0x01	; 1
    3204:	50 40       	sbci	r21, 0x00	; 0
    3206:	d8 f7       	brcc	.-10     	; 0x31fe <memcpy+0x6>
    3208:	08 95       	ret

0000320a <strcpy>:
    320a:	fb 01       	movw	r30, r22
    320c:	dc 01       	movw	r26, r24
    320e:	01 90       	ld	r0, Z+
    3210:	0d 92       	st	X+, r0
    3212:	00 20       	and	r0, r0
    3214:	e1 f7       	brne	.-8      	; 0x320e <strcpy+0x4>
    3216:	08 95       	ret

00003218 <sprintf>:
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	2e 97       	sbiw	r28, 0x0e	; 14
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	0e 89       	ldd	r16, Y+22	; 0x16
    3232:	1f 89       	ldd	r17, Y+23	; 0x17
    3234:	86 e0       	ldi	r24, 0x06	; 6
    3236:	8c 83       	std	Y+4, r24	; 0x04
    3238:	1a 83       	std	Y+2, r17	; 0x02
    323a:	09 83       	std	Y+1, r16	; 0x01
    323c:	8f ef       	ldi	r24, 0xFF	; 255
    323e:	9f e7       	ldi	r25, 0x7F	; 127
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
    3244:	ae 01       	movw	r20, r28
    3246:	46 5e       	subi	r20, 0xE6	; 230
    3248:	5f 4f       	sbci	r21, 0xFF	; 255
    324a:	68 8d       	ldd	r22, Y+24	; 0x18
    324c:	79 8d       	ldd	r23, Y+25	; 0x19
    324e:	ce 01       	movw	r24, r28
    3250:	01 96       	adiw	r24, 0x01	; 1
    3252:	10 d0       	rcall	.+32     	; 0x3274 <vfprintf>
    3254:	ef 81       	ldd	r30, Y+7	; 0x07
    3256:	f8 85       	ldd	r31, Y+8	; 0x08
    3258:	e0 0f       	add	r30, r16
    325a:	f1 1f       	adc	r31, r17
    325c:	10 82       	st	Z, r1
    325e:	2e 96       	adiw	r28, 0x0e	; 14
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	de bf       	out	0x3e, r29	; 62
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	cd bf       	out	0x3d, r28	; 61
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	08 95       	ret

00003274 <vfprintf>:
    3274:	2f 92       	push	r2
    3276:	3f 92       	push	r3
    3278:	4f 92       	push	r4
    327a:	5f 92       	push	r5
    327c:	6f 92       	push	r6
    327e:	7f 92       	push	r7
    3280:	8f 92       	push	r8
    3282:	9f 92       	push	r9
    3284:	af 92       	push	r10
    3286:	bf 92       	push	r11
    3288:	cf 92       	push	r12
    328a:	df 92       	push	r13
    328c:	ef 92       	push	r14
    328e:	ff 92       	push	r15
    3290:	0f 93       	push	r16
    3292:	1f 93       	push	r17
    3294:	cf 93       	push	r28
    3296:	df 93       	push	r29
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	2b 97       	sbiw	r28, 0x0b	; 11
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	de bf       	out	0x3e, r29	; 62
    32a4:	0f be       	out	0x3f, r0	; 63
    32a6:	cd bf       	out	0x3d, r28	; 61
    32a8:	6c 01       	movw	r12, r24
    32aa:	7b 01       	movw	r14, r22
    32ac:	8a 01       	movw	r16, r20
    32ae:	fc 01       	movw	r30, r24
    32b0:	17 82       	std	Z+7, r1	; 0x07
    32b2:	16 82       	std	Z+6, r1	; 0x06
    32b4:	83 81       	ldd	r24, Z+3	; 0x03
    32b6:	81 ff       	sbrs	r24, 1
    32b8:	bf c1       	rjmp	.+894    	; 0x3638 <vfprintf+0x3c4>
    32ba:	ce 01       	movw	r24, r28
    32bc:	01 96       	adiw	r24, 0x01	; 1
    32be:	3c 01       	movw	r6, r24
    32c0:	f6 01       	movw	r30, r12
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	f7 01       	movw	r30, r14
    32c6:	93 fd       	sbrc	r25, 3
    32c8:	85 91       	lpm	r24, Z+
    32ca:	93 ff       	sbrs	r25, 3
    32cc:	81 91       	ld	r24, Z+
    32ce:	7f 01       	movw	r14, r30
    32d0:	88 23       	and	r24, r24
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <vfprintf+0x62>
    32d4:	ad c1       	rjmp	.+858    	; 0x3630 <vfprintf+0x3bc>
    32d6:	85 32       	cpi	r24, 0x25	; 37
    32d8:	39 f4       	brne	.+14     	; 0x32e8 <vfprintf+0x74>
    32da:	93 fd       	sbrc	r25, 3
    32dc:	85 91       	lpm	r24, Z+
    32de:	93 ff       	sbrs	r25, 3
    32e0:	81 91       	ld	r24, Z+
    32e2:	7f 01       	movw	r14, r30
    32e4:	85 32       	cpi	r24, 0x25	; 37
    32e6:	21 f4       	brne	.+8      	; 0x32f0 <vfprintf+0x7c>
    32e8:	b6 01       	movw	r22, r12
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	d6 d1       	rcall	.+940    	; 0x369a <fputc>
    32ee:	e8 cf       	rjmp	.-48     	; 0x32c0 <vfprintf+0x4c>
    32f0:	91 2c       	mov	r9, r1
    32f2:	21 2c       	mov	r2, r1
    32f4:	31 2c       	mov	r3, r1
    32f6:	ff e1       	ldi	r31, 0x1F	; 31
    32f8:	f3 15       	cp	r31, r3
    32fa:	d8 f0       	brcs	.+54     	; 0x3332 <vfprintf+0xbe>
    32fc:	8b 32       	cpi	r24, 0x2B	; 43
    32fe:	79 f0       	breq	.+30     	; 0x331e <vfprintf+0xaa>
    3300:	38 f4       	brcc	.+14     	; 0x3310 <vfprintf+0x9c>
    3302:	80 32       	cpi	r24, 0x20	; 32
    3304:	79 f0       	breq	.+30     	; 0x3324 <vfprintf+0xb0>
    3306:	83 32       	cpi	r24, 0x23	; 35
    3308:	a1 f4       	brne	.+40     	; 0x3332 <vfprintf+0xbe>
    330a:	23 2d       	mov	r18, r3
    330c:	20 61       	ori	r18, 0x10	; 16
    330e:	1d c0       	rjmp	.+58     	; 0x334a <vfprintf+0xd6>
    3310:	8d 32       	cpi	r24, 0x2D	; 45
    3312:	61 f0       	breq	.+24     	; 0x332c <vfprintf+0xb8>
    3314:	80 33       	cpi	r24, 0x30	; 48
    3316:	69 f4       	brne	.+26     	; 0x3332 <vfprintf+0xbe>
    3318:	23 2d       	mov	r18, r3
    331a:	21 60       	ori	r18, 0x01	; 1
    331c:	16 c0       	rjmp	.+44     	; 0x334a <vfprintf+0xd6>
    331e:	83 2d       	mov	r24, r3
    3320:	82 60       	ori	r24, 0x02	; 2
    3322:	38 2e       	mov	r3, r24
    3324:	e3 2d       	mov	r30, r3
    3326:	e4 60       	ori	r30, 0x04	; 4
    3328:	3e 2e       	mov	r3, r30
    332a:	2a c0       	rjmp	.+84     	; 0x3380 <vfprintf+0x10c>
    332c:	f3 2d       	mov	r31, r3
    332e:	f8 60       	ori	r31, 0x08	; 8
    3330:	1d c0       	rjmp	.+58     	; 0x336c <vfprintf+0xf8>
    3332:	37 fc       	sbrc	r3, 7
    3334:	2d c0       	rjmp	.+90     	; 0x3390 <vfprintf+0x11c>
    3336:	20 ed       	ldi	r18, 0xD0	; 208
    3338:	28 0f       	add	r18, r24
    333a:	2a 30       	cpi	r18, 0x0A	; 10
    333c:	40 f0       	brcs	.+16     	; 0x334e <vfprintf+0xda>
    333e:	8e 32       	cpi	r24, 0x2E	; 46
    3340:	b9 f4       	brne	.+46     	; 0x3370 <vfprintf+0xfc>
    3342:	36 fc       	sbrc	r3, 6
    3344:	75 c1       	rjmp	.+746    	; 0x3630 <vfprintf+0x3bc>
    3346:	23 2d       	mov	r18, r3
    3348:	20 64       	ori	r18, 0x40	; 64
    334a:	32 2e       	mov	r3, r18
    334c:	19 c0       	rjmp	.+50     	; 0x3380 <vfprintf+0x10c>
    334e:	36 fe       	sbrs	r3, 6
    3350:	06 c0       	rjmp	.+12     	; 0x335e <vfprintf+0xea>
    3352:	8a e0       	ldi	r24, 0x0A	; 10
    3354:	98 9e       	mul	r9, r24
    3356:	20 0d       	add	r18, r0
    3358:	11 24       	eor	r1, r1
    335a:	92 2e       	mov	r9, r18
    335c:	11 c0       	rjmp	.+34     	; 0x3380 <vfprintf+0x10c>
    335e:	ea e0       	ldi	r30, 0x0A	; 10
    3360:	2e 9e       	mul	r2, r30
    3362:	20 0d       	add	r18, r0
    3364:	11 24       	eor	r1, r1
    3366:	22 2e       	mov	r2, r18
    3368:	f3 2d       	mov	r31, r3
    336a:	f0 62       	ori	r31, 0x20	; 32
    336c:	3f 2e       	mov	r3, r31
    336e:	08 c0       	rjmp	.+16     	; 0x3380 <vfprintf+0x10c>
    3370:	8c 36       	cpi	r24, 0x6C	; 108
    3372:	21 f4       	brne	.+8      	; 0x337c <vfprintf+0x108>
    3374:	83 2d       	mov	r24, r3
    3376:	80 68       	ori	r24, 0x80	; 128
    3378:	38 2e       	mov	r3, r24
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <vfprintf+0x10c>
    337c:	88 36       	cpi	r24, 0x68	; 104
    337e:	41 f4       	brne	.+16     	; 0x3390 <vfprintf+0x11c>
    3380:	f7 01       	movw	r30, r14
    3382:	93 fd       	sbrc	r25, 3
    3384:	85 91       	lpm	r24, Z+
    3386:	93 ff       	sbrs	r25, 3
    3388:	81 91       	ld	r24, Z+
    338a:	7f 01       	movw	r14, r30
    338c:	81 11       	cpse	r24, r1
    338e:	b3 cf       	rjmp	.-154    	; 0x32f6 <vfprintf+0x82>
    3390:	98 2f       	mov	r25, r24
    3392:	9f 7d       	andi	r25, 0xDF	; 223
    3394:	95 54       	subi	r25, 0x45	; 69
    3396:	93 30       	cpi	r25, 0x03	; 3
    3398:	28 f4       	brcc	.+10     	; 0x33a4 <vfprintf+0x130>
    339a:	0c 5f       	subi	r16, 0xFC	; 252
    339c:	1f 4f       	sbci	r17, 0xFF	; 255
    339e:	9f e3       	ldi	r25, 0x3F	; 63
    33a0:	99 83       	std	Y+1, r25	; 0x01
    33a2:	0d c0       	rjmp	.+26     	; 0x33be <vfprintf+0x14a>
    33a4:	83 36       	cpi	r24, 0x63	; 99
    33a6:	31 f0       	breq	.+12     	; 0x33b4 <vfprintf+0x140>
    33a8:	83 37       	cpi	r24, 0x73	; 115
    33aa:	71 f0       	breq	.+28     	; 0x33c8 <vfprintf+0x154>
    33ac:	83 35       	cpi	r24, 0x53	; 83
    33ae:	09 f0       	breq	.+2      	; 0x33b2 <vfprintf+0x13e>
    33b0:	55 c0       	rjmp	.+170    	; 0x345c <vfprintf+0x1e8>
    33b2:	20 c0       	rjmp	.+64     	; 0x33f4 <vfprintf+0x180>
    33b4:	f8 01       	movw	r30, r16
    33b6:	80 81       	ld	r24, Z
    33b8:	89 83       	std	Y+1, r24	; 0x01
    33ba:	0e 5f       	subi	r16, 0xFE	; 254
    33bc:	1f 4f       	sbci	r17, 0xFF	; 255
    33be:	88 24       	eor	r8, r8
    33c0:	83 94       	inc	r8
    33c2:	91 2c       	mov	r9, r1
    33c4:	53 01       	movw	r10, r6
    33c6:	12 c0       	rjmp	.+36     	; 0x33ec <vfprintf+0x178>
    33c8:	28 01       	movw	r4, r16
    33ca:	f2 e0       	ldi	r31, 0x02	; 2
    33cc:	4f 0e       	add	r4, r31
    33ce:	51 1c       	adc	r5, r1
    33d0:	f8 01       	movw	r30, r16
    33d2:	a0 80       	ld	r10, Z
    33d4:	b1 80       	ldd	r11, Z+1	; 0x01
    33d6:	36 fe       	sbrs	r3, 6
    33d8:	03 c0       	rjmp	.+6      	; 0x33e0 <vfprintf+0x16c>
    33da:	69 2d       	mov	r22, r9
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	02 c0       	rjmp	.+4      	; 0x33e4 <vfprintf+0x170>
    33e0:	6f ef       	ldi	r22, 0xFF	; 255
    33e2:	7f ef       	ldi	r23, 0xFF	; 255
    33e4:	c5 01       	movw	r24, r10
    33e6:	4e d1       	rcall	.+668    	; 0x3684 <strnlen>
    33e8:	4c 01       	movw	r8, r24
    33ea:	82 01       	movw	r16, r4
    33ec:	f3 2d       	mov	r31, r3
    33ee:	ff 77       	andi	r31, 0x7F	; 127
    33f0:	3f 2e       	mov	r3, r31
    33f2:	15 c0       	rjmp	.+42     	; 0x341e <vfprintf+0x1aa>
    33f4:	28 01       	movw	r4, r16
    33f6:	22 e0       	ldi	r18, 0x02	; 2
    33f8:	42 0e       	add	r4, r18
    33fa:	51 1c       	adc	r5, r1
    33fc:	f8 01       	movw	r30, r16
    33fe:	a0 80       	ld	r10, Z
    3400:	b1 80       	ldd	r11, Z+1	; 0x01
    3402:	36 fe       	sbrs	r3, 6
    3404:	03 c0       	rjmp	.+6      	; 0x340c <vfprintf+0x198>
    3406:	69 2d       	mov	r22, r9
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	02 c0       	rjmp	.+4      	; 0x3410 <vfprintf+0x19c>
    340c:	6f ef       	ldi	r22, 0xFF	; 255
    340e:	7f ef       	ldi	r23, 0xFF	; 255
    3410:	c5 01       	movw	r24, r10
    3412:	2d d1       	rcall	.+602    	; 0x366e <strnlen_P>
    3414:	4c 01       	movw	r8, r24
    3416:	f3 2d       	mov	r31, r3
    3418:	f0 68       	ori	r31, 0x80	; 128
    341a:	3f 2e       	mov	r3, r31
    341c:	82 01       	movw	r16, r4
    341e:	33 fc       	sbrc	r3, 3
    3420:	19 c0       	rjmp	.+50     	; 0x3454 <vfprintf+0x1e0>
    3422:	82 2d       	mov	r24, r2
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	88 16       	cp	r8, r24
    3428:	99 06       	cpc	r9, r25
    342a:	a0 f4       	brcc	.+40     	; 0x3454 <vfprintf+0x1e0>
    342c:	b6 01       	movw	r22, r12
    342e:	80 e2       	ldi	r24, 0x20	; 32
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	33 d1       	rcall	.+614    	; 0x369a <fputc>
    3434:	2a 94       	dec	r2
    3436:	f5 cf       	rjmp	.-22     	; 0x3422 <vfprintf+0x1ae>
    3438:	f5 01       	movw	r30, r10
    343a:	37 fc       	sbrc	r3, 7
    343c:	85 91       	lpm	r24, Z+
    343e:	37 fe       	sbrs	r3, 7
    3440:	81 91       	ld	r24, Z+
    3442:	5f 01       	movw	r10, r30
    3444:	b6 01       	movw	r22, r12
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	28 d1       	rcall	.+592    	; 0x369a <fputc>
    344a:	21 10       	cpse	r2, r1
    344c:	2a 94       	dec	r2
    344e:	21 e0       	ldi	r18, 0x01	; 1
    3450:	82 1a       	sub	r8, r18
    3452:	91 08       	sbc	r9, r1
    3454:	81 14       	cp	r8, r1
    3456:	91 04       	cpc	r9, r1
    3458:	79 f7       	brne	.-34     	; 0x3438 <vfprintf+0x1c4>
    345a:	e1 c0       	rjmp	.+450    	; 0x361e <vfprintf+0x3aa>
    345c:	84 36       	cpi	r24, 0x64	; 100
    345e:	11 f0       	breq	.+4      	; 0x3464 <vfprintf+0x1f0>
    3460:	89 36       	cpi	r24, 0x69	; 105
    3462:	39 f5       	brne	.+78     	; 0x34b2 <vfprintf+0x23e>
    3464:	f8 01       	movw	r30, r16
    3466:	37 fe       	sbrs	r3, 7
    3468:	07 c0       	rjmp	.+14     	; 0x3478 <vfprintf+0x204>
    346a:	60 81       	ld	r22, Z
    346c:	71 81       	ldd	r23, Z+1	; 0x01
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	0c 5f       	subi	r16, 0xFC	; 252
    3474:	1f 4f       	sbci	r17, 0xFF	; 255
    3476:	08 c0       	rjmp	.+16     	; 0x3488 <vfprintf+0x214>
    3478:	60 81       	ld	r22, Z
    347a:	71 81       	ldd	r23, Z+1	; 0x01
    347c:	07 2e       	mov	r0, r23
    347e:	00 0c       	add	r0, r0
    3480:	88 0b       	sbc	r24, r24
    3482:	99 0b       	sbc	r25, r25
    3484:	0e 5f       	subi	r16, 0xFE	; 254
    3486:	1f 4f       	sbci	r17, 0xFF	; 255
    3488:	f3 2d       	mov	r31, r3
    348a:	ff 76       	andi	r31, 0x6F	; 111
    348c:	3f 2e       	mov	r3, r31
    348e:	97 ff       	sbrs	r25, 7
    3490:	09 c0       	rjmp	.+18     	; 0x34a4 <vfprintf+0x230>
    3492:	90 95       	com	r25
    3494:	80 95       	com	r24
    3496:	70 95       	com	r23
    3498:	61 95       	neg	r22
    349a:	7f 4f       	sbci	r23, 0xFF	; 255
    349c:	8f 4f       	sbci	r24, 0xFF	; 255
    349e:	9f 4f       	sbci	r25, 0xFF	; 255
    34a0:	f0 68       	ori	r31, 0x80	; 128
    34a2:	3f 2e       	mov	r3, r31
    34a4:	2a e0       	ldi	r18, 0x0A	; 10
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	a3 01       	movw	r20, r6
    34aa:	33 d1       	rcall	.+614    	; 0x3712 <__ultoa_invert>
    34ac:	88 2e       	mov	r8, r24
    34ae:	86 18       	sub	r8, r6
    34b0:	44 c0       	rjmp	.+136    	; 0x353a <vfprintf+0x2c6>
    34b2:	85 37       	cpi	r24, 0x75	; 117
    34b4:	31 f4       	brne	.+12     	; 0x34c2 <vfprintf+0x24e>
    34b6:	23 2d       	mov	r18, r3
    34b8:	2f 7e       	andi	r18, 0xEF	; 239
    34ba:	b2 2e       	mov	r11, r18
    34bc:	2a e0       	ldi	r18, 0x0A	; 10
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	25 c0       	rjmp	.+74     	; 0x350c <vfprintf+0x298>
    34c2:	93 2d       	mov	r25, r3
    34c4:	99 7f       	andi	r25, 0xF9	; 249
    34c6:	b9 2e       	mov	r11, r25
    34c8:	8f 36       	cpi	r24, 0x6F	; 111
    34ca:	c1 f0       	breq	.+48     	; 0x34fc <vfprintf+0x288>
    34cc:	18 f4       	brcc	.+6      	; 0x34d4 <vfprintf+0x260>
    34ce:	88 35       	cpi	r24, 0x58	; 88
    34d0:	79 f0       	breq	.+30     	; 0x34f0 <vfprintf+0x27c>
    34d2:	ae c0       	rjmp	.+348    	; 0x3630 <vfprintf+0x3bc>
    34d4:	80 37       	cpi	r24, 0x70	; 112
    34d6:	19 f0       	breq	.+6      	; 0x34de <vfprintf+0x26a>
    34d8:	88 37       	cpi	r24, 0x78	; 120
    34da:	21 f0       	breq	.+8      	; 0x34e4 <vfprintf+0x270>
    34dc:	a9 c0       	rjmp	.+338    	; 0x3630 <vfprintf+0x3bc>
    34de:	e9 2f       	mov	r30, r25
    34e0:	e0 61       	ori	r30, 0x10	; 16
    34e2:	be 2e       	mov	r11, r30
    34e4:	b4 fe       	sbrs	r11, 4
    34e6:	0d c0       	rjmp	.+26     	; 0x3502 <vfprintf+0x28e>
    34e8:	fb 2d       	mov	r31, r11
    34ea:	f4 60       	ori	r31, 0x04	; 4
    34ec:	bf 2e       	mov	r11, r31
    34ee:	09 c0       	rjmp	.+18     	; 0x3502 <vfprintf+0x28e>
    34f0:	34 fe       	sbrs	r3, 4
    34f2:	0a c0       	rjmp	.+20     	; 0x3508 <vfprintf+0x294>
    34f4:	29 2f       	mov	r18, r25
    34f6:	26 60       	ori	r18, 0x06	; 6
    34f8:	b2 2e       	mov	r11, r18
    34fa:	06 c0       	rjmp	.+12     	; 0x3508 <vfprintf+0x294>
    34fc:	28 e0       	ldi	r18, 0x08	; 8
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	05 c0       	rjmp	.+10     	; 0x350c <vfprintf+0x298>
    3502:	20 e1       	ldi	r18, 0x10	; 16
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	02 c0       	rjmp	.+4      	; 0x350c <vfprintf+0x298>
    3508:	20 e1       	ldi	r18, 0x10	; 16
    350a:	32 e0       	ldi	r19, 0x02	; 2
    350c:	f8 01       	movw	r30, r16
    350e:	b7 fe       	sbrs	r11, 7
    3510:	07 c0       	rjmp	.+14     	; 0x3520 <vfprintf+0x2ac>
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	93 81       	ldd	r25, Z+3	; 0x03
    351a:	0c 5f       	subi	r16, 0xFC	; 252
    351c:	1f 4f       	sbci	r17, 0xFF	; 255
    351e:	06 c0       	rjmp	.+12     	; 0x352c <vfprintf+0x2b8>
    3520:	60 81       	ld	r22, Z
    3522:	71 81       	ldd	r23, Z+1	; 0x01
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	0e 5f       	subi	r16, 0xFE	; 254
    352a:	1f 4f       	sbci	r17, 0xFF	; 255
    352c:	a3 01       	movw	r20, r6
    352e:	f1 d0       	rcall	.+482    	; 0x3712 <__ultoa_invert>
    3530:	88 2e       	mov	r8, r24
    3532:	86 18       	sub	r8, r6
    3534:	fb 2d       	mov	r31, r11
    3536:	ff 77       	andi	r31, 0x7F	; 127
    3538:	3f 2e       	mov	r3, r31
    353a:	36 fe       	sbrs	r3, 6
    353c:	0d c0       	rjmp	.+26     	; 0x3558 <vfprintf+0x2e4>
    353e:	23 2d       	mov	r18, r3
    3540:	2e 7f       	andi	r18, 0xFE	; 254
    3542:	a2 2e       	mov	r10, r18
    3544:	89 14       	cp	r8, r9
    3546:	58 f4       	brcc	.+22     	; 0x355e <vfprintf+0x2ea>
    3548:	34 fe       	sbrs	r3, 4
    354a:	0b c0       	rjmp	.+22     	; 0x3562 <vfprintf+0x2ee>
    354c:	32 fc       	sbrc	r3, 2
    354e:	09 c0       	rjmp	.+18     	; 0x3562 <vfprintf+0x2ee>
    3550:	83 2d       	mov	r24, r3
    3552:	8e 7e       	andi	r24, 0xEE	; 238
    3554:	a8 2e       	mov	r10, r24
    3556:	05 c0       	rjmp	.+10     	; 0x3562 <vfprintf+0x2ee>
    3558:	b8 2c       	mov	r11, r8
    355a:	a3 2c       	mov	r10, r3
    355c:	03 c0       	rjmp	.+6      	; 0x3564 <vfprintf+0x2f0>
    355e:	b8 2c       	mov	r11, r8
    3560:	01 c0       	rjmp	.+2      	; 0x3564 <vfprintf+0x2f0>
    3562:	b9 2c       	mov	r11, r9
    3564:	a4 fe       	sbrs	r10, 4
    3566:	0f c0       	rjmp	.+30     	; 0x3586 <vfprintf+0x312>
    3568:	fe 01       	movw	r30, r28
    356a:	e8 0d       	add	r30, r8
    356c:	f1 1d       	adc	r31, r1
    356e:	80 81       	ld	r24, Z
    3570:	80 33       	cpi	r24, 0x30	; 48
    3572:	21 f4       	brne	.+8      	; 0x357c <vfprintf+0x308>
    3574:	9a 2d       	mov	r25, r10
    3576:	99 7e       	andi	r25, 0xE9	; 233
    3578:	a9 2e       	mov	r10, r25
    357a:	09 c0       	rjmp	.+18     	; 0x358e <vfprintf+0x31a>
    357c:	a2 fe       	sbrs	r10, 2
    357e:	06 c0       	rjmp	.+12     	; 0x358c <vfprintf+0x318>
    3580:	b3 94       	inc	r11
    3582:	b3 94       	inc	r11
    3584:	04 c0       	rjmp	.+8      	; 0x358e <vfprintf+0x31a>
    3586:	8a 2d       	mov	r24, r10
    3588:	86 78       	andi	r24, 0x86	; 134
    358a:	09 f0       	breq	.+2      	; 0x358e <vfprintf+0x31a>
    358c:	b3 94       	inc	r11
    358e:	a3 fc       	sbrc	r10, 3
    3590:	10 c0       	rjmp	.+32     	; 0x35b2 <vfprintf+0x33e>
    3592:	a0 fe       	sbrs	r10, 0
    3594:	06 c0       	rjmp	.+12     	; 0x35a2 <vfprintf+0x32e>
    3596:	b2 14       	cp	r11, r2
    3598:	80 f4       	brcc	.+32     	; 0x35ba <vfprintf+0x346>
    359a:	28 0c       	add	r2, r8
    359c:	92 2c       	mov	r9, r2
    359e:	9b 18       	sub	r9, r11
    35a0:	0d c0       	rjmp	.+26     	; 0x35bc <vfprintf+0x348>
    35a2:	b2 14       	cp	r11, r2
    35a4:	58 f4       	brcc	.+22     	; 0x35bc <vfprintf+0x348>
    35a6:	b6 01       	movw	r22, r12
    35a8:	80 e2       	ldi	r24, 0x20	; 32
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	76 d0       	rcall	.+236    	; 0x369a <fputc>
    35ae:	b3 94       	inc	r11
    35b0:	f8 cf       	rjmp	.-16     	; 0x35a2 <vfprintf+0x32e>
    35b2:	b2 14       	cp	r11, r2
    35b4:	18 f4       	brcc	.+6      	; 0x35bc <vfprintf+0x348>
    35b6:	2b 18       	sub	r2, r11
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <vfprintf+0x34a>
    35ba:	98 2c       	mov	r9, r8
    35bc:	21 2c       	mov	r2, r1
    35be:	a4 fe       	sbrs	r10, 4
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <vfprintf+0x36c>
    35c2:	b6 01       	movw	r22, r12
    35c4:	80 e3       	ldi	r24, 0x30	; 48
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	68 d0       	rcall	.+208    	; 0x369a <fputc>
    35ca:	a2 fe       	sbrs	r10, 2
    35cc:	16 c0       	rjmp	.+44     	; 0x35fa <vfprintf+0x386>
    35ce:	a1 fc       	sbrc	r10, 1
    35d0:	03 c0       	rjmp	.+6      	; 0x35d8 <vfprintf+0x364>
    35d2:	88 e7       	ldi	r24, 0x78	; 120
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <vfprintf+0x368>
    35d8:	88 e5       	ldi	r24, 0x58	; 88
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	b6 01       	movw	r22, r12
    35de:	0c c0       	rjmp	.+24     	; 0x35f8 <vfprintf+0x384>
    35e0:	8a 2d       	mov	r24, r10
    35e2:	86 78       	andi	r24, 0x86	; 134
    35e4:	51 f0       	breq	.+20     	; 0x35fa <vfprintf+0x386>
    35e6:	a1 fe       	sbrs	r10, 1
    35e8:	02 c0       	rjmp	.+4      	; 0x35ee <vfprintf+0x37a>
    35ea:	8b e2       	ldi	r24, 0x2B	; 43
    35ec:	01 c0       	rjmp	.+2      	; 0x35f0 <vfprintf+0x37c>
    35ee:	80 e2       	ldi	r24, 0x20	; 32
    35f0:	a7 fc       	sbrc	r10, 7
    35f2:	8d e2       	ldi	r24, 0x2D	; 45
    35f4:	b6 01       	movw	r22, r12
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	50 d0       	rcall	.+160    	; 0x369a <fputc>
    35fa:	89 14       	cp	r8, r9
    35fc:	30 f4       	brcc	.+12     	; 0x360a <vfprintf+0x396>
    35fe:	b6 01       	movw	r22, r12
    3600:	80 e3       	ldi	r24, 0x30	; 48
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	4a d0       	rcall	.+148    	; 0x369a <fputc>
    3606:	9a 94       	dec	r9
    3608:	f8 cf       	rjmp	.-16     	; 0x35fa <vfprintf+0x386>
    360a:	8a 94       	dec	r8
    360c:	f3 01       	movw	r30, r6
    360e:	e8 0d       	add	r30, r8
    3610:	f1 1d       	adc	r31, r1
    3612:	80 81       	ld	r24, Z
    3614:	b6 01       	movw	r22, r12
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	40 d0       	rcall	.+128    	; 0x369a <fputc>
    361a:	81 10       	cpse	r8, r1
    361c:	f6 cf       	rjmp	.-20     	; 0x360a <vfprintf+0x396>
    361e:	22 20       	and	r2, r2
    3620:	09 f4       	brne	.+2      	; 0x3624 <vfprintf+0x3b0>
    3622:	4e ce       	rjmp	.-868    	; 0x32c0 <vfprintf+0x4c>
    3624:	b6 01       	movw	r22, r12
    3626:	80 e2       	ldi	r24, 0x20	; 32
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	37 d0       	rcall	.+110    	; 0x369a <fputc>
    362c:	2a 94       	dec	r2
    362e:	f7 cf       	rjmp	.-18     	; 0x361e <vfprintf+0x3aa>
    3630:	f6 01       	movw	r30, r12
    3632:	86 81       	ldd	r24, Z+6	; 0x06
    3634:	97 81       	ldd	r25, Z+7	; 0x07
    3636:	02 c0       	rjmp	.+4      	; 0x363c <vfprintf+0x3c8>
    3638:	8f ef       	ldi	r24, 0xFF	; 255
    363a:	9f ef       	ldi	r25, 0xFF	; 255
    363c:	2b 96       	adiw	r28, 0x0b	; 11
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	f8 94       	cli
    3642:	de bf       	out	0x3e, r29	; 62
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	cd bf       	out	0x3d, r28	; 61
    3648:	df 91       	pop	r29
    364a:	cf 91       	pop	r28
    364c:	1f 91       	pop	r17
    364e:	0f 91       	pop	r16
    3650:	ff 90       	pop	r15
    3652:	ef 90       	pop	r14
    3654:	df 90       	pop	r13
    3656:	cf 90       	pop	r12
    3658:	bf 90       	pop	r11
    365a:	af 90       	pop	r10
    365c:	9f 90       	pop	r9
    365e:	8f 90       	pop	r8
    3660:	7f 90       	pop	r7
    3662:	6f 90       	pop	r6
    3664:	5f 90       	pop	r5
    3666:	4f 90       	pop	r4
    3668:	3f 90       	pop	r3
    366a:	2f 90       	pop	r2
    366c:	08 95       	ret

0000366e <strnlen_P>:
    366e:	fc 01       	movw	r30, r24
    3670:	05 90       	lpm	r0, Z+
    3672:	61 50       	subi	r22, 0x01	; 1
    3674:	70 40       	sbci	r23, 0x00	; 0
    3676:	01 10       	cpse	r0, r1
    3678:	d8 f7       	brcc	.-10     	; 0x3670 <strnlen_P+0x2>
    367a:	80 95       	com	r24
    367c:	90 95       	com	r25
    367e:	8e 0f       	add	r24, r30
    3680:	9f 1f       	adc	r25, r31
    3682:	08 95       	ret

00003684 <strnlen>:
    3684:	fc 01       	movw	r30, r24
    3686:	61 50       	subi	r22, 0x01	; 1
    3688:	70 40       	sbci	r23, 0x00	; 0
    368a:	01 90       	ld	r0, Z+
    368c:	01 10       	cpse	r0, r1
    368e:	d8 f7       	brcc	.-10     	; 0x3686 <strnlen+0x2>
    3690:	80 95       	com	r24
    3692:	90 95       	com	r25
    3694:	8e 0f       	add	r24, r30
    3696:	9f 1f       	adc	r25, r31
    3698:	08 95       	ret

0000369a <fputc>:
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    369e:	cf 93       	push	r28
    36a0:	df 93       	push	r29
    36a2:	fb 01       	movw	r30, r22
    36a4:	23 81       	ldd	r18, Z+3	; 0x03
    36a6:	21 fd       	sbrc	r18, 1
    36a8:	03 c0       	rjmp	.+6      	; 0x36b0 <fputc+0x16>
    36aa:	8f ef       	ldi	r24, 0xFF	; 255
    36ac:	9f ef       	ldi	r25, 0xFF	; 255
    36ae:	2c c0       	rjmp	.+88     	; 0x3708 <fputc+0x6e>
    36b0:	22 ff       	sbrs	r18, 2
    36b2:	16 c0       	rjmp	.+44     	; 0x36e0 <fputc+0x46>
    36b4:	46 81       	ldd	r20, Z+6	; 0x06
    36b6:	57 81       	ldd	r21, Z+7	; 0x07
    36b8:	24 81       	ldd	r18, Z+4	; 0x04
    36ba:	35 81       	ldd	r19, Z+5	; 0x05
    36bc:	42 17       	cp	r20, r18
    36be:	53 07       	cpc	r21, r19
    36c0:	44 f4       	brge	.+16     	; 0x36d2 <fputc+0x38>
    36c2:	a0 81       	ld	r26, Z
    36c4:	b1 81       	ldd	r27, Z+1	; 0x01
    36c6:	9d 01       	movw	r18, r26
    36c8:	2f 5f       	subi	r18, 0xFF	; 255
    36ca:	3f 4f       	sbci	r19, 0xFF	; 255
    36cc:	31 83       	std	Z+1, r19	; 0x01
    36ce:	20 83       	st	Z, r18
    36d0:	8c 93       	st	X, r24
    36d2:	26 81       	ldd	r18, Z+6	; 0x06
    36d4:	37 81       	ldd	r19, Z+7	; 0x07
    36d6:	2f 5f       	subi	r18, 0xFF	; 255
    36d8:	3f 4f       	sbci	r19, 0xFF	; 255
    36da:	37 83       	std	Z+7, r19	; 0x07
    36dc:	26 83       	std	Z+6, r18	; 0x06
    36de:	14 c0       	rjmp	.+40     	; 0x3708 <fputc+0x6e>
    36e0:	8b 01       	movw	r16, r22
    36e2:	ec 01       	movw	r28, r24
    36e4:	fb 01       	movw	r30, r22
    36e6:	00 84       	ldd	r0, Z+8	; 0x08
    36e8:	f1 85       	ldd	r31, Z+9	; 0x09
    36ea:	e0 2d       	mov	r30, r0
    36ec:	19 95       	eicall
    36ee:	89 2b       	or	r24, r25
    36f0:	e1 f6       	brne	.-72     	; 0x36aa <fputc+0x10>
    36f2:	d8 01       	movw	r26, r16
    36f4:	16 96       	adiw	r26, 0x06	; 6
    36f6:	8d 91       	ld	r24, X+
    36f8:	9c 91       	ld	r25, X
    36fa:	17 97       	sbiw	r26, 0x07	; 7
    36fc:	01 96       	adiw	r24, 0x01	; 1
    36fe:	17 96       	adiw	r26, 0x07	; 7
    3700:	9c 93       	st	X, r25
    3702:	8e 93       	st	-X, r24
    3704:	16 97       	sbiw	r26, 0x06	; 6
    3706:	ce 01       	movw	r24, r28
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	08 95       	ret

00003712 <__ultoa_invert>:
    3712:	fa 01       	movw	r30, r20
    3714:	aa 27       	eor	r26, r26
    3716:	28 30       	cpi	r18, 0x08	; 8
    3718:	51 f1       	breq	.+84     	; 0x376e <__ultoa_invert+0x5c>
    371a:	20 31       	cpi	r18, 0x10	; 16
    371c:	81 f1       	breq	.+96     	; 0x377e <__ultoa_invert+0x6c>
    371e:	e8 94       	clt
    3720:	6f 93       	push	r22
    3722:	6e 7f       	andi	r22, 0xFE	; 254
    3724:	6e 5f       	subi	r22, 0xFE	; 254
    3726:	7f 4f       	sbci	r23, 0xFF	; 255
    3728:	8f 4f       	sbci	r24, 0xFF	; 255
    372a:	9f 4f       	sbci	r25, 0xFF	; 255
    372c:	af 4f       	sbci	r26, 0xFF	; 255
    372e:	b1 e0       	ldi	r27, 0x01	; 1
    3730:	3e d0       	rcall	.+124    	; 0x37ae <__ultoa_invert+0x9c>
    3732:	b4 e0       	ldi	r27, 0x04	; 4
    3734:	3c d0       	rcall	.+120    	; 0x37ae <__ultoa_invert+0x9c>
    3736:	67 0f       	add	r22, r23
    3738:	78 1f       	adc	r23, r24
    373a:	89 1f       	adc	r24, r25
    373c:	9a 1f       	adc	r25, r26
    373e:	a1 1d       	adc	r26, r1
    3740:	68 0f       	add	r22, r24
    3742:	79 1f       	adc	r23, r25
    3744:	8a 1f       	adc	r24, r26
    3746:	91 1d       	adc	r25, r1
    3748:	a1 1d       	adc	r26, r1
    374a:	6a 0f       	add	r22, r26
    374c:	71 1d       	adc	r23, r1
    374e:	81 1d       	adc	r24, r1
    3750:	91 1d       	adc	r25, r1
    3752:	a1 1d       	adc	r26, r1
    3754:	20 d0       	rcall	.+64     	; 0x3796 <__ultoa_invert+0x84>
    3756:	09 f4       	brne	.+2      	; 0x375a <__ultoa_invert+0x48>
    3758:	68 94       	set
    375a:	3f 91       	pop	r19
    375c:	2a e0       	ldi	r18, 0x0A	; 10
    375e:	26 9f       	mul	r18, r22
    3760:	11 24       	eor	r1, r1
    3762:	30 19       	sub	r19, r0
    3764:	30 5d       	subi	r19, 0xD0	; 208
    3766:	31 93       	st	Z+, r19
    3768:	de f6       	brtc	.-74     	; 0x3720 <__ultoa_invert+0xe>
    376a:	cf 01       	movw	r24, r30
    376c:	08 95       	ret
    376e:	46 2f       	mov	r20, r22
    3770:	47 70       	andi	r20, 0x07	; 7
    3772:	40 5d       	subi	r20, 0xD0	; 208
    3774:	41 93       	st	Z+, r20
    3776:	b3 e0       	ldi	r27, 0x03	; 3
    3778:	0f d0       	rcall	.+30     	; 0x3798 <__ultoa_invert+0x86>
    377a:	c9 f7       	brne	.-14     	; 0x376e <__ultoa_invert+0x5c>
    377c:	f6 cf       	rjmp	.-20     	; 0x376a <__ultoa_invert+0x58>
    377e:	46 2f       	mov	r20, r22
    3780:	4f 70       	andi	r20, 0x0F	; 15
    3782:	40 5d       	subi	r20, 0xD0	; 208
    3784:	4a 33       	cpi	r20, 0x3A	; 58
    3786:	18 f0       	brcs	.+6      	; 0x378e <__ultoa_invert+0x7c>
    3788:	49 5d       	subi	r20, 0xD9	; 217
    378a:	31 fd       	sbrc	r19, 1
    378c:	40 52       	subi	r20, 0x20	; 32
    378e:	41 93       	st	Z+, r20
    3790:	02 d0       	rcall	.+4      	; 0x3796 <__ultoa_invert+0x84>
    3792:	a9 f7       	brne	.-22     	; 0x377e <__ultoa_invert+0x6c>
    3794:	ea cf       	rjmp	.-44     	; 0x376a <__ultoa_invert+0x58>
    3796:	b4 e0       	ldi	r27, 0x04	; 4
    3798:	a6 95       	lsr	r26
    379a:	97 95       	ror	r25
    379c:	87 95       	ror	r24
    379e:	77 95       	ror	r23
    37a0:	67 95       	ror	r22
    37a2:	ba 95       	dec	r27
    37a4:	c9 f7       	brne	.-14     	; 0x3798 <__ultoa_invert+0x86>
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	61 05       	cpc	r22, r1
    37aa:	71 05       	cpc	r23, r1
    37ac:	08 95       	ret
    37ae:	9b 01       	movw	r18, r22
    37b0:	ac 01       	movw	r20, r24
    37b2:	0a 2e       	mov	r0, r26
    37b4:	06 94       	lsr	r0
    37b6:	57 95       	ror	r21
    37b8:	47 95       	ror	r20
    37ba:	37 95       	ror	r19
    37bc:	27 95       	ror	r18
    37be:	ba 95       	dec	r27
    37c0:	c9 f7       	brne	.-14     	; 0x37b4 <__ultoa_invert+0xa2>
    37c2:	62 0f       	add	r22, r18
    37c4:	73 1f       	adc	r23, r19
    37c6:	84 1f       	adc	r24, r20
    37c8:	95 1f       	adc	r25, r21
    37ca:	a0 1d       	adc	r26, r0
    37cc:	08 95       	ret

000037ce <_exit>:
    37ce:	f8 94       	cli

000037d0 <__stop_program>:
    37d0:	ff cf       	rjmp	.-2      	; 0x37d0 <__stop_program>
=======
    2b96:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <twi_error>
      twi_stop();
    2b9a:	d5 de       	rcall	.-598    	; 0x2946 <twi_stop>
      break;
  }
}
    2b9c:	ff 91       	pop	r31
    2b9e:	ef 91       	pop	r30
    2ba0:	bf 91       	pop	r27
    2ba2:	af 91       	pop	r26
    2ba4:	9f 91       	pop	r25
    2ba6:	8f 91       	pop	r24
    2ba8:	7f 91       	pop	r23
    2baa:	6f 91       	pop	r22
    2bac:	5f 91       	pop	r21
    2bae:	4f 91       	pop	r20
    2bb0:	3f 91       	pop	r19
    2bb2:	2f 91       	pop	r18
    2bb4:	0f 90       	pop	r0
    2bb6:	0b be       	out	0x3b, r0	; 59
    2bb8:	0f 90       	pop	r0
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	0f 90       	pop	r0
    2bbe:	1f 90       	pop	r1
    2bc0:	18 95       	reti

00002bc2 <__udivmodsi4>:
    2bc2:	a1 e2       	ldi	r26, 0x21	; 33
    2bc4:	1a 2e       	mov	r1, r26
    2bc6:	aa 1b       	sub	r26, r26
    2bc8:	bb 1b       	sub	r27, r27
    2bca:	fd 01       	movw	r30, r26
    2bcc:	0d c0       	rjmp	.+26     	; 0x2be8 <__udivmodsi4_ep>

00002bce <__udivmodsi4_loop>:
    2bce:	aa 1f       	adc	r26, r26
    2bd0:	bb 1f       	adc	r27, r27
    2bd2:	ee 1f       	adc	r30, r30
    2bd4:	ff 1f       	adc	r31, r31
    2bd6:	a2 17       	cp	r26, r18
    2bd8:	b3 07       	cpc	r27, r19
    2bda:	e4 07       	cpc	r30, r20
    2bdc:	f5 07       	cpc	r31, r21
    2bde:	20 f0       	brcs	.+8      	; 0x2be8 <__udivmodsi4_ep>
    2be0:	a2 1b       	sub	r26, r18
    2be2:	b3 0b       	sbc	r27, r19
    2be4:	e4 0b       	sbc	r30, r20
    2be6:	f5 0b       	sbc	r31, r21

00002be8 <__udivmodsi4_ep>:
    2be8:	66 1f       	adc	r22, r22
    2bea:	77 1f       	adc	r23, r23
    2bec:	88 1f       	adc	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	1a 94       	dec	r1
    2bf2:	69 f7       	brne	.-38     	; 0x2bce <__udivmodsi4_loop>
    2bf4:	60 95       	com	r22
    2bf6:	70 95       	com	r23
    2bf8:	80 95       	com	r24
    2bfa:	90 95       	com	r25
    2bfc:	9b 01       	movw	r18, r22
    2bfe:	ac 01       	movw	r20, r24
    2c00:	bd 01       	movw	r22, r26
    2c02:	cf 01       	movw	r24, r30
    2c04:	08 95       	ret

00002c06 <__tablejump2__>:
    2c06:	ee 0f       	add	r30, r30
    2c08:	ff 1f       	adc	r31, r31
    2c0a:	88 1f       	adc	r24, r24
    2c0c:	8b bf       	out	0x3b, r24	; 59
    2c0e:	07 90       	elpm	r0, Z+
    2c10:	f6 91       	elpm	r31, Z
    2c12:	e0 2d       	mov	r30, r0
    2c14:	19 94       	eijmp

00002c16 <malloc>:
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	82 30       	cpi	r24, 0x02	; 2
    2c20:	91 05       	cpc	r25, r1
    2c22:	10 f4       	brcc	.+4      	; 0x2c28 <malloc+0x12>
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	e0 91 a3 05 	lds	r30, 0x05A3	; 0x8005a3 <__flp>
    2c2c:	f0 91 a4 05 	lds	r31, 0x05A4	; 0x8005a4 <__flp+0x1>
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	a0 e0       	ldi	r26, 0x00	; 0
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	30 97       	sbiw	r30, 0x00	; 0
    2c3a:	19 f1       	breq	.+70     	; 0x2c82 <malloc+0x6c>
    2c3c:	40 81       	ld	r20, Z
    2c3e:	51 81       	ldd	r21, Z+1	; 0x01
    2c40:	02 81       	ldd	r16, Z+2	; 0x02
    2c42:	13 81       	ldd	r17, Z+3	; 0x03
    2c44:	48 17       	cp	r20, r24
    2c46:	59 07       	cpc	r21, r25
    2c48:	c8 f0       	brcs	.+50     	; 0x2c7c <malloc+0x66>
    2c4a:	84 17       	cp	r24, r20
    2c4c:	95 07       	cpc	r25, r21
    2c4e:	69 f4       	brne	.+26     	; 0x2c6a <malloc+0x54>
    2c50:	10 97       	sbiw	r26, 0x00	; 0
    2c52:	31 f0       	breq	.+12     	; 0x2c60 <malloc+0x4a>
    2c54:	12 96       	adiw	r26, 0x02	; 2
    2c56:	0c 93       	st	X, r16
    2c58:	12 97       	sbiw	r26, 0x02	; 2
    2c5a:	13 96       	adiw	r26, 0x03	; 3
    2c5c:	1c 93       	st	X, r17
    2c5e:	27 c0       	rjmp	.+78     	; 0x2cae <malloc+0x98>
    2c60:	00 93 a3 05 	sts	0x05A3, r16	; 0x8005a3 <__flp>
    2c64:	10 93 a4 05 	sts	0x05A4, r17	; 0x8005a4 <__flp+0x1>
    2c68:	22 c0       	rjmp	.+68     	; 0x2cae <malloc+0x98>
    2c6a:	21 15       	cp	r18, r1
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	19 f0       	breq	.+6      	; 0x2c76 <malloc+0x60>
    2c70:	42 17       	cp	r20, r18
    2c72:	53 07       	cpc	r21, r19
    2c74:	18 f4       	brcc	.+6      	; 0x2c7c <malloc+0x66>
    2c76:	9a 01       	movw	r18, r20
    2c78:	bd 01       	movw	r22, r26
    2c7a:	ef 01       	movw	r28, r30
    2c7c:	df 01       	movw	r26, r30
    2c7e:	f8 01       	movw	r30, r16
    2c80:	db cf       	rjmp	.-74     	; 0x2c38 <malloc+0x22>
    2c82:	21 15       	cp	r18, r1
    2c84:	31 05       	cpc	r19, r1
    2c86:	f9 f0       	breq	.+62     	; 0x2cc6 <malloc+0xb0>
    2c88:	28 1b       	sub	r18, r24
    2c8a:	39 0b       	sbc	r19, r25
    2c8c:	24 30       	cpi	r18, 0x04	; 4
    2c8e:	31 05       	cpc	r19, r1
    2c90:	80 f4       	brcc	.+32     	; 0x2cb2 <malloc+0x9c>
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	9b 81       	ldd	r25, Y+3	; 0x03
    2c96:	61 15       	cp	r22, r1
    2c98:	71 05       	cpc	r23, r1
    2c9a:	21 f0       	breq	.+8      	; 0x2ca4 <malloc+0x8e>
    2c9c:	fb 01       	movw	r30, r22
    2c9e:	93 83       	std	Z+3, r25	; 0x03
    2ca0:	82 83       	std	Z+2, r24	; 0x02
    2ca2:	04 c0       	rjmp	.+8      	; 0x2cac <malloc+0x96>
    2ca4:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <__flp+0x1>
    2ca8:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <__flp>
    2cac:	fe 01       	movw	r30, r28
    2cae:	32 96       	adiw	r30, 0x02	; 2
    2cb0:	44 c0       	rjmp	.+136    	; 0x2d3a <malloc+0x124>
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e2 0f       	add	r30, r18
    2cb6:	f3 1f       	adc	r31, r19
    2cb8:	81 93       	st	Z+, r24
    2cba:	91 93       	st	Z+, r25
    2cbc:	22 50       	subi	r18, 0x02	; 2
    2cbe:	31 09       	sbc	r19, r1
    2cc0:	39 83       	std	Y+1, r19	; 0x01
    2cc2:	28 83       	st	Y, r18
    2cc4:	3a c0       	rjmp	.+116    	; 0x2d3a <malloc+0x124>
    2cc6:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <__brkval>
    2cca:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2cce:	23 2b       	or	r18, r19
    2cd0:	41 f4       	brne	.+16     	; 0x2ce2 <malloc+0xcc>
    2cd2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2cd6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2cda:	30 93 a2 05 	sts	0x05A2, r19	; 0x8005a2 <__brkval+0x1>
    2cde:	20 93 a1 05 	sts	0x05A1, r18	; 0x8005a1 <__brkval>
    2ce2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2ce6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2cea:	21 15       	cp	r18, r1
    2cec:	31 05       	cpc	r19, r1
    2cee:	41 f4       	brne	.+16     	; 0x2d00 <malloc+0xea>
    2cf0:	2d b7       	in	r18, 0x3d	; 61
    2cf2:	3e b7       	in	r19, 0x3e	; 62
    2cf4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2cf8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2cfc:	24 1b       	sub	r18, r20
    2cfe:	35 0b       	sbc	r19, r21
    2d00:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <__brkval>
    2d04:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2d08:	e2 17       	cp	r30, r18
    2d0a:	f3 07       	cpc	r31, r19
    2d0c:	a0 f4       	brcc	.+40     	; 0x2d36 <malloc+0x120>
    2d0e:	2e 1b       	sub	r18, r30
    2d10:	3f 0b       	sbc	r19, r31
    2d12:	28 17       	cp	r18, r24
    2d14:	39 07       	cpc	r19, r25
    2d16:	78 f0       	brcs	.+30     	; 0x2d36 <malloc+0x120>
    2d18:	ac 01       	movw	r20, r24
    2d1a:	4e 5f       	subi	r20, 0xFE	; 254
    2d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1e:	24 17       	cp	r18, r20
    2d20:	35 07       	cpc	r19, r21
    2d22:	48 f0       	brcs	.+18     	; 0x2d36 <malloc+0x120>
    2d24:	4e 0f       	add	r20, r30
    2d26:	5f 1f       	adc	r21, r31
    2d28:	50 93 a2 05 	sts	0x05A2, r21	; 0x8005a2 <__brkval+0x1>
    2d2c:	40 93 a1 05 	sts	0x05A1, r20	; 0x8005a1 <__brkval>
    2d30:	81 93       	st	Z+, r24
    2d32:	91 93       	st	Z+, r25
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <malloc+0x124>
    2d36:	e0 e0       	ldi	r30, 0x00	; 0
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	cf 01       	movw	r24, r30
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	1f 91       	pop	r17
    2d42:	0f 91       	pop	r16
    2d44:	08 95       	ret

00002d46 <free>:
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	09 f4       	brne	.+2      	; 0x2d50 <free+0xa>
    2d4e:	81 c0       	rjmp	.+258    	; 0x2e52 <free+0x10c>
    2d50:	fc 01       	movw	r30, r24
    2d52:	32 97       	sbiw	r30, 0x02	; 2
    2d54:	13 82       	std	Z+3, r1	; 0x03
    2d56:	12 82       	std	Z+2, r1	; 0x02
    2d58:	a0 91 a3 05 	lds	r26, 0x05A3	; 0x8005a3 <__flp>
    2d5c:	b0 91 a4 05 	lds	r27, 0x05A4	; 0x8005a4 <__flp+0x1>
    2d60:	10 97       	sbiw	r26, 0x00	; 0
    2d62:	81 f4       	brne	.+32     	; 0x2d84 <free+0x3e>
    2d64:	20 81       	ld	r18, Z
    2d66:	31 81       	ldd	r19, Z+1	; 0x01
    2d68:	82 0f       	add	r24, r18
    2d6a:	93 1f       	adc	r25, r19
    2d6c:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <__brkval>
    2d70:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2d74:	28 17       	cp	r18, r24
    2d76:	39 07       	cpc	r19, r25
    2d78:	51 f5       	brne	.+84     	; 0x2dce <free+0x88>
    2d7a:	f0 93 a2 05 	sts	0x05A2, r31	; 0x8005a2 <__brkval+0x1>
    2d7e:	e0 93 a1 05 	sts	0x05A1, r30	; 0x8005a1 <__brkval>
    2d82:	67 c0       	rjmp	.+206    	; 0x2e52 <free+0x10c>
    2d84:	ed 01       	movw	r28, r26
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	ce 17       	cp	r28, r30
    2d8c:	df 07       	cpc	r29, r31
    2d8e:	40 f4       	brcc	.+16     	; 0x2da0 <free+0x5a>
    2d90:	4a 81       	ldd	r20, Y+2	; 0x02
    2d92:	5b 81       	ldd	r21, Y+3	; 0x03
    2d94:	9e 01       	movw	r18, r28
    2d96:	41 15       	cp	r20, r1
    2d98:	51 05       	cpc	r21, r1
    2d9a:	f1 f0       	breq	.+60     	; 0x2dd8 <free+0x92>
    2d9c:	ea 01       	movw	r28, r20
    2d9e:	f5 cf       	rjmp	.-22     	; 0x2d8a <free+0x44>
    2da0:	d3 83       	std	Z+3, r29	; 0x03
    2da2:	c2 83       	std	Z+2, r28	; 0x02
    2da4:	40 81       	ld	r20, Z
    2da6:	51 81       	ldd	r21, Z+1	; 0x01
    2da8:	84 0f       	add	r24, r20
    2daa:	95 1f       	adc	r25, r21
    2dac:	c8 17       	cp	r28, r24
    2dae:	d9 07       	cpc	r29, r25
    2db0:	59 f4       	brne	.+22     	; 0x2dc8 <free+0x82>
    2db2:	88 81       	ld	r24, Y
    2db4:	99 81       	ldd	r25, Y+1	; 0x01
    2db6:	84 0f       	add	r24, r20
    2db8:	95 1f       	adc	r25, r21
    2dba:	02 96       	adiw	r24, 0x02	; 2
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	80 83       	st	Z, r24
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc4:	93 83       	std	Z+3, r25	; 0x03
    2dc6:	82 83       	std	Z+2, r24	; 0x02
    2dc8:	21 15       	cp	r18, r1
    2dca:	31 05       	cpc	r19, r1
    2dcc:	29 f4       	brne	.+10     	; 0x2dd8 <free+0x92>
    2dce:	f0 93 a4 05 	sts	0x05A4, r31	; 0x8005a4 <__flp+0x1>
    2dd2:	e0 93 a3 05 	sts	0x05A3, r30	; 0x8005a3 <__flp>
    2dd6:	3d c0       	rjmp	.+122    	; 0x2e52 <free+0x10c>
    2dd8:	e9 01       	movw	r28, r18
    2dda:	fb 83       	std	Y+3, r31	; 0x03
    2ddc:	ea 83       	std	Y+2, r30	; 0x02
    2dde:	49 91       	ld	r20, Y+
    2de0:	59 91       	ld	r21, Y+
    2de2:	c4 0f       	add	r28, r20
    2de4:	d5 1f       	adc	r29, r21
    2de6:	ec 17       	cp	r30, r28
    2de8:	fd 07       	cpc	r31, r29
    2dea:	61 f4       	brne	.+24     	; 0x2e04 <free+0xbe>
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	84 0f       	add	r24, r20
    2df2:	95 1f       	adc	r25, r21
    2df4:	02 96       	adiw	r24, 0x02	; 2
    2df6:	e9 01       	movw	r28, r18
    2df8:	99 83       	std	Y+1, r25	; 0x01
    2dfa:	88 83       	st	Y, r24
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	9b 83       	std	Y+3, r25	; 0x03
    2e02:	8a 83       	std	Y+2, r24	; 0x02
    2e04:	e0 e0       	ldi	r30, 0x00	; 0
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	12 96       	adiw	r26, 0x02	; 2
    2e0a:	8d 91       	ld	r24, X+
    2e0c:	9c 91       	ld	r25, X
    2e0e:	13 97       	sbiw	r26, 0x03	; 3
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	19 f0       	breq	.+6      	; 0x2e1a <free+0xd4>
    2e14:	fd 01       	movw	r30, r26
    2e16:	dc 01       	movw	r26, r24
    2e18:	f7 cf       	rjmp	.-18     	; 0x2e08 <free+0xc2>
    2e1a:	8d 91       	ld	r24, X+
    2e1c:	9c 91       	ld	r25, X
    2e1e:	11 97       	sbiw	r26, 0x01	; 1
    2e20:	9d 01       	movw	r18, r26
    2e22:	2e 5f       	subi	r18, 0xFE	; 254
    2e24:	3f 4f       	sbci	r19, 0xFF	; 255
    2e26:	82 0f       	add	r24, r18
    2e28:	93 1f       	adc	r25, r19
    2e2a:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <__brkval>
    2e2e:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2e32:	28 17       	cp	r18, r24
    2e34:	39 07       	cpc	r19, r25
    2e36:	69 f4       	brne	.+26     	; 0x2e52 <free+0x10c>
    2e38:	30 97       	sbiw	r30, 0x00	; 0
    2e3a:	29 f4       	brne	.+10     	; 0x2e46 <free+0x100>
    2e3c:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <__flp+0x1>
    2e40:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <__flp>
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <free+0x104>
    2e46:	13 82       	std	Z+3, r1	; 0x03
    2e48:	12 82       	std	Z+2, r1	; 0x02
    2e4a:	b0 93 a2 05 	sts	0x05A2, r27	; 0x8005a2 <__brkval+0x1>
    2e4e:	a0 93 a1 05 	sts	0x05A1, r26	; 0x8005a1 <__brkval>
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	08 95       	ret

00002e58 <realloc>:
    2e58:	6f 92       	push	r6
    2e5a:	7f 92       	push	r7
    2e5c:	8f 92       	push	r8
    2e5e:	9f 92       	push	r9
    2e60:	af 92       	push	r10
    2e62:	bf 92       	push	r11
    2e64:	cf 92       	push	r12
    2e66:	df 92       	push	r13
    2e68:	ef 92       	push	r14
    2e6a:	ff 92       	push	r15
    2e6c:	0f 93       	push	r16
    2e6e:	1f 93       	push	r17
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	81 f4       	brne	.+32     	; 0x2e98 <realloc+0x40>
    2e78:	cb 01       	movw	r24, r22
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	ff 90       	pop	r15
    2e84:	ef 90       	pop	r14
    2e86:	df 90       	pop	r13
    2e88:	cf 90       	pop	r12
    2e8a:	bf 90       	pop	r11
    2e8c:	af 90       	pop	r10
    2e8e:	9f 90       	pop	r9
    2e90:	8f 90       	pop	r8
    2e92:	7f 90       	pop	r7
    2e94:	6f 90       	pop	r6
    2e96:	bf ce       	rjmp	.-642    	; 0x2c16 <malloc>
    2e98:	fc 01       	movw	r30, r24
    2e9a:	e6 0f       	add	r30, r22
    2e9c:	f7 1f       	adc	r31, r23
    2e9e:	9c 01       	movw	r18, r24
    2ea0:	22 50       	subi	r18, 0x02	; 2
    2ea2:	31 09       	sbc	r19, r1
    2ea4:	e2 17       	cp	r30, r18
    2ea6:	f3 07       	cpc	r31, r19
    2ea8:	08 f4       	brcc	.+2      	; 0x2eac <realloc+0x54>
    2eaa:	a5 c0       	rjmp	.+330    	; 0x2ff6 <realloc+0x19e>
    2eac:	ec 01       	movw	r28, r24
    2eae:	d9 01       	movw	r26, r18
    2eb0:	0d 91       	ld	r16, X+
    2eb2:	1c 91       	ld	r17, X
    2eb4:	11 97       	sbiw	r26, 0x01	; 1
    2eb6:	06 17       	cp	r16, r22
    2eb8:	17 07       	cpc	r17, r23
    2eba:	a8 f0       	brcs	.+42     	; 0x2ee6 <realloc+0x8e>
    2ebc:	05 30       	cpi	r16, 0x05	; 5
    2ebe:	11 05       	cpc	r17, r1
    2ec0:	08 f4       	brcc	.+2      	; 0x2ec4 <realloc+0x6c>
    2ec2:	97 c0       	rjmp	.+302    	; 0x2ff2 <realloc+0x19a>
    2ec4:	c8 01       	movw	r24, r16
    2ec6:	04 97       	sbiw	r24, 0x04	; 4
    2ec8:	86 17       	cp	r24, r22
    2eca:	97 07       	cpc	r25, r23
    2ecc:	08 f4       	brcc	.+2      	; 0x2ed0 <realloc+0x78>
    2ece:	91 c0       	rjmp	.+290    	; 0x2ff2 <realloc+0x19a>
    2ed0:	02 50       	subi	r16, 0x02	; 2
    2ed2:	11 09       	sbc	r17, r1
    2ed4:	06 1b       	sub	r16, r22
    2ed6:	17 0b       	sbc	r17, r23
    2ed8:	01 93       	st	Z+, r16
    2eda:	11 93       	st	Z+, r17
    2edc:	6d 93       	st	X+, r22
    2ede:	7c 93       	st	X, r23
    2ee0:	cf 01       	movw	r24, r30
    2ee2:	31 df       	rcall	.-414    	; 0x2d46 <free>
    2ee4:	86 c0       	rjmp	.+268    	; 0x2ff2 <realloc+0x19a>
    2ee6:	5b 01       	movw	r10, r22
    2ee8:	a0 1a       	sub	r10, r16
    2eea:	b1 0a       	sbc	r11, r17
    2eec:	4c 01       	movw	r8, r24
    2eee:	80 0e       	add	r8, r16
    2ef0:	91 1e       	adc	r9, r17
    2ef2:	a0 91 a3 05 	lds	r26, 0x05A3	; 0x8005a3 <__flp>
    2ef6:	b0 91 a4 05 	lds	r27, 0x05A4	; 0x8005a4 <__flp+0x1>
    2efa:	61 2c       	mov	r6, r1
    2efc:	71 2c       	mov	r7, r1
    2efe:	e1 2c       	mov	r14, r1
    2f00:	f1 2c       	mov	r15, r1
    2f02:	10 97       	sbiw	r26, 0x00	; 0
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <realloc+0xb0>
    2f06:	46 c0       	rjmp	.+140    	; 0x2f94 <realloc+0x13c>
    2f08:	8d 91       	ld	r24, X+
    2f0a:	9c 91       	ld	r25, X
    2f0c:	11 97       	sbiw	r26, 0x01	; 1
    2f0e:	a8 15       	cp	r26, r8
    2f10:	b9 05       	cpc	r27, r9
    2f12:	b1 f5       	brne	.+108    	; 0x2f80 <realloc+0x128>
    2f14:	6c 01       	movw	r12, r24
    2f16:	42 e0       	ldi	r20, 0x02	; 2
    2f18:	c4 0e       	add	r12, r20
    2f1a:	d1 1c       	adc	r13, r1
    2f1c:	ca 14       	cp	r12, r10
    2f1e:	db 04       	cpc	r13, r11
    2f20:	78 f1       	brcs	.+94     	; 0x2f80 <realloc+0x128>
    2f22:	4c 01       	movw	r8, r24
    2f24:	8a 18       	sub	r8, r10
    2f26:	9b 08       	sbc	r9, r11
    2f28:	64 01       	movw	r12, r8
    2f2a:	42 e0       	ldi	r20, 0x02	; 2
    2f2c:	c4 0e       	add	r12, r20
    2f2e:	d1 1c       	adc	r13, r1
    2f30:	12 96       	adiw	r26, 0x02	; 2
    2f32:	bc 90       	ld	r11, X
    2f34:	12 97       	sbiw	r26, 0x02	; 2
    2f36:	13 96       	adiw	r26, 0x03	; 3
    2f38:	ac 91       	ld	r26, X
    2f3a:	b5 e0       	ldi	r27, 0x05	; 5
    2f3c:	cb 16       	cp	r12, r27
    2f3e:	d1 04       	cpc	r13, r1
    2f40:	40 f0       	brcs	.+16     	; 0x2f52 <realloc+0xfa>
    2f42:	b2 82       	std	Z+2, r11	; 0x02
    2f44:	a3 83       	std	Z+3, r26	; 0x03
    2f46:	91 82       	std	Z+1, r9	; 0x01
    2f48:	80 82       	st	Z, r8
    2f4a:	d9 01       	movw	r26, r18
    2f4c:	6d 93       	st	X+, r22
    2f4e:	7c 93       	st	X, r23
    2f50:	09 c0       	rjmp	.+18     	; 0x2f64 <realloc+0x10c>
    2f52:	0e 5f       	subi	r16, 0xFE	; 254
    2f54:	1f 4f       	sbci	r17, 0xFF	; 255
    2f56:	80 0f       	add	r24, r16
    2f58:	91 1f       	adc	r25, r17
    2f5a:	f9 01       	movw	r30, r18
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	80 83       	st	Z, r24
    2f60:	eb 2d       	mov	r30, r11
    2f62:	fa 2f       	mov	r31, r26
    2f64:	e1 14       	cp	r14, r1
    2f66:	f1 04       	cpc	r15, r1
    2f68:	31 f0       	breq	.+12     	; 0x2f76 <realloc+0x11e>
    2f6a:	d7 01       	movw	r26, r14
    2f6c:	13 96       	adiw	r26, 0x03	; 3
    2f6e:	fc 93       	st	X, r31
    2f70:	ee 93       	st	-X, r30
    2f72:	12 97       	sbiw	r26, 0x02	; 2
    2f74:	3e c0       	rjmp	.+124    	; 0x2ff2 <realloc+0x19a>
    2f76:	f0 93 a4 05 	sts	0x05A4, r31	; 0x8005a4 <__flp+0x1>
    2f7a:	e0 93 a3 05 	sts	0x05A3, r30	; 0x8005a3 <__flp>
    2f7e:	39 c0       	rjmp	.+114    	; 0x2ff2 <realloc+0x19a>
    2f80:	68 16       	cp	r6, r24
    2f82:	79 06       	cpc	r7, r25
    2f84:	08 f4       	brcc	.+2      	; 0x2f88 <realloc+0x130>
    2f86:	3c 01       	movw	r6, r24
    2f88:	7d 01       	movw	r14, r26
    2f8a:	12 96       	adiw	r26, 0x02	; 2
    2f8c:	0d 90       	ld	r0, X+
    2f8e:	bc 91       	ld	r27, X
    2f90:	a0 2d       	mov	r26, r0
    2f92:	b7 cf       	rjmp	.-146    	; 0x2f02 <realloc+0xaa>
    2f94:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <__brkval>
    2f98:	90 91 a2 05 	lds	r25, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2f9c:	88 16       	cp	r8, r24
    2f9e:	99 06       	cpc	r9, r25
    2fa0:	e1 f4       	brne	.+56     	; 0x2fda <realloc+0x182>
    2fa2:	66 16       	cp	r6, r22
    2fa4:	77 06       	cpc	r7, r23
    2fa6:	c8 f4       	brcc	.+50     	; 0x2fda <realloc+0x182>
    2fa8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2fac:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	41 f4       	brne	.+16     	; 0x2fc4 <realloc+0x16c>
    2fb4:	8d b7       	in	r24, 0x3d	; 61
    2fb6:	9e b7       	in	r25, 0x3e	; 62
    2fb8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2fbc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2fc0:	84 1b       	sub	r24, r20
    2fc2:	95 0b       	sbc	r25, r21
    2fc4:	e8 17       	cp	r30, r24
    2fc6:	f9 07       	cpc	r31, r25
    2fc8:	b0 f4       	brcc	.+44     	; 0x2ff6 <realloc+0x19e>
    2fca:	f0 93 a2 05 	sts	0x05A2, r31	; 0x8005a2 <__brkval+0x1>
    2fce:	e0 93 a1 05 	sts	0x05A1, r30	; 0x8005a1 <__brkval>
    2fd2:	f9 01       	movw	r30, r18
    2fd4:	71 83       	std	Z+1, r23	; 0x01
    2fd6:	60 83       	st	Z, r22
    2fd8:	0c c0       	rjmp	.+24     	; 0x2ff2 <realloc+0x19a>
    2fda:	cb 01       	movw	r24, r22
    2fdc:	1c de       	rcall	.-968    	; 0x2c16 <malloc>
    2fde:	7c 01       	movw	r14, r24
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	49 f0       	breq	.+18     	; 0x2ff6 <realloc+0x19e>
    2fe4:	a8 01       	movw	r20, r16
    2fe6:	be 01       	movw	r22, r28
    2fe8:	17 d0       	rcall	.+46     	; 0x3018 <memcpy>
    2fea:	ce 01       	movw	r24, r28
    2fec:	ac de       	rcall	.-680    	; 0x2d46 <free>
    2fee:	c7 01       	movw	r24, r14
    2ff0:	04 c0       	rjmp	.+8      	; 0x2ffa <realloc+0x1a2>
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <realloc+0x1a2>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	1f 91       	pop	r17
    3000:	0f 91       	pop	r16
    3002:	ff 90       	pop	r15
    3004:	ef 90       	pop	r14
    3006:	df 90       	pop	r13
    3008:	cf 90       	pop	r12
    300a:	bf 90       	pop	r11
    300c:	af 90       	pop	r10
    300e:	9f 90       	pop	r9
    3010:	8f 90       	pop	r8
    3012:	7f 90       	pop	r7
    3014:	6f 90       	pop	r6
    3016:	08 95       	ret

00003018 <memcpy>:
    3018:	fb 01       	movw	r30, r22
    301a:	dc 01       	movw	r26, r24
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <memcpy+0xa>
    301e:	01 90       	ld	r0, Z+
    3020:	0d 92       	st	X+, r0
    3022:	41 50       	subi	r20, 0x01	; 1
    3024:	50 40       	sbci	r21, 0x00	; 0
    3026:	d8 f7       	brcc	.-10     	; 0x301e <memcpy+0x6>
    3028:	08 95       	ret

0000302a <strcpy>:
    302a:	fb 01       	movw	r30, r22
    302c:	dc 01       	movw	r26, r24
    302e:	01 90       	ld	r0, Z+
    3030:	0d 92       	st	X+, r0
    3032:	00 20       	and	r0, r0
    3034:	e1 f7       	brne	.-8      	; 0x302e <strcpy+0x4>
    3036:	08 95       	ret

00003038 <sprintf>:
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	2e 97       	sbiw	r28, 0x0e	; 14
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	0e 89       	ldd	r16, Y+22	; 0x16
    3052:	1f 89       	ldd	r17, Y+23	; 0x17
    3054:	86 e0       	ldi	r24, 0x06	; 6
    3056:	8c 83       	std	Y+4, r24	; 0x04
    3058:	1a 83       	std	Y+2, r17	; 0x02
    305a:	09 83       	std	Y+1, r16	; 0x01
    305c:	8f ef       	ldi	r24, 0xFF	; 255
    305e:	9f e7       	ldi	r25, 0x7F	; 127
    3060:	9e 83       	std	Y+6, r25	; 0x06
    3062:	8d 83       	std	Y+5, r24	; 0x05
    3064:	ae 01       	movw	r20, r28
    3066:	46 5e       	subi	r20, 0xE6	; 230
    3068:	5f 4f       	sbci	r21, 0xFF	; 255
    306a:	68 8d       	ldd	r22, Y+24	; 0x18
    306c:	79 8d       	ldd	r23, Y+25	; 0x19
    306e:	ce 01       	movw	r24, r28
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	10 d0       	rcall	.+32     	; 0x3094 <vfprintf>
    3074:	ef 81       	ldd	r30, Y+7	; 0x07
    3076:	f8 85       	ldd	r31, Y+8	; 0x08
    3078:	e0 0f       	add	r30, r16
    307a:	f1 1f       	adc	r31, r17
    307c:	10 82       	st	Z, r1
    307e:	2e 96       	adiw	r28, 0x0e	; 14
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	08 95       	ret

00003094 <vfprintf>:
    3094:	2f 92       	push	r2
    3096:	3f 92       	push	r3
    3098:	4f 92       	push	r4
    309a:	5f 92       	push	r5
    309c:	6f 92       	push	r6
    309e:	7f 92       	push	r7
    30a0:	8f 92       	push	r8
    30a2:	9f 92       	push	r9
    30a4:	af 92       	push	r10
    30a6:	bf 92       	push	r11
    30a8:	cf 92       	push	r12
    30aa:	df 92       	push	r13
    30ac:	ef 92       	push	r14
    30ae:	ff 92       	push	r15
    30b0:	0f 93       	push	r16
    30b2:	1f 93       	push	r17
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    30bc:	2b 97       	sbiw	r28, 0x0b	; 11
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	6c 01       	movw	r12, r24
    30ca:	7b 01       	movw	r14, r22
    30cc:	8a 01       	movw	r16, r20
    30ce:	fc 01       	movw	r30, r24
    30d0:	17 82       	std	Z+7, r1	; 0x07
    30d2:	16 82       	std	Z+6, r1	; 0x06
    30d4:	83 81       	ldd	r24, Z+3	; 0x03
    30d6:	81 ff       	sbrs	r24, 1
    30d8:	bf c1       	rjmp	.+894    	; 0x3458 <vfprintf+0x3c4>
    30da:	ce 01       	movw	r24, r28
    30dc:	01 96       	adiw	r24, 0x01	; 1
    30de:	3c 01       	movw	r6, r24
    30e0:	f6 01       	movw	r30, r12
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	f7 01       	movw	r30, r14
    30e6:	93 fd       	sbrc	r25, 3
    30e8:	85 91       	lpm	r24, Z+
    30ea:	93 ff       	sbrs	r25, 3
    30ec:	81 91       	ld	r24, Z+
    30ee:	7f 01       	movw	r14, r30
    30f0:	88 23       	and	r24, r24
    30f2:	09 f4       	brne	.+2      	; 0x30f6 <vfprintf+0x62>
    30f4:	ad c1       	rjmp	.+858    	; 0x3450 <vfprintf+0x3bc>
    30f6:	85 32       	cpi	r24, 0x25	; 37
    30f8:	39 f4       	brne	.+14     	; 0x3108 <vfprintf+0x74>
    30fa:	93 fd       	sbrc	r25, 3
    30fc:	85 91       	lpm	r24, Z+
    30fe:	93 ff       	sbrs	r25, 3
    3100:	81 91       	ld	r24, Z+
    3102:	7f 01       	movw	r14, r30
    3104:	85 32       	cpi	r24, 0x25	; 37
    3106:	21 f4       	brne	.+8      	; 0x3110 <vfprintf+0x7c>
    3108:	b6 01       	movw	r22, r12
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	d6 d1       	rcall	.+940    	; 0x34ba <fputc>
    310e:	e8 cf       	rjmp	.-48     	; 0x30e0 <vfprintf+0x4c>
    3110:	91 2c       	mov	r9, r1
    3112:	21 2c       	mov	r2, r1
    3114:	31 2c       	mov	r3, r1
    3116:	ff e1       	ldi	r31, 0x1F	; 31
    3118:	f3 15       	cp	r31, r3
    311a:	d8 f0       	brcs	.+54     	; 0x3152 <vfprintf+0xbe>
    311c:	8b 32       	cpi	r24, 0x2B	; 43
    311e:	79 f0       	breq	.+30     	; 0x313e <vfprintf+0xaa>
    3120:	38 f4       	brcc	.+14     	; 0x3130 <vfprintf+0x9c>
    3122:	80 32       	cpi	r24, 0x20	; 32
    3124:	79 f0       	breq	.+30     	; 0x3144 <vfprintf+0xb0>
    3126:	83 32       	cpi	r24, 0x23	; 35
    3128:	a1 f4       	brne	.+40     	; 0x3152 <vfprintf+0xbe>
    312a:	23 2d       	mov	r18, r3
    312c:	20 61       	ori	r18, 0x10	; 16
    312e:	1d c0       	rjmp	.+58     	; 0x316a <vfprintf+0xd6>
    3130:	8d 32       	cpi	r24, 0x2D	; 45
    3132:	61 f0       	breq	.+24     	; 0x314c <vfprintf+0xb8>
    3134:	80 33       	cpi	r24, 0x30	; 48
    3136:	69 f4       	brne	.+26     	; 0x3152 <vfprintf+0xbe>
    3138:	23 2d       	mov	r18, r3
    313a:	21 60       	ori	r18, 0x01	; 1
    313c:	16 c0       	rjmp	.+44     	; 0x316a <vfprintf+0xd6>
    313e:	83 2d       	mov	r24, r3
    3140:	82 60       	ori	r24, 0x02	; 2
    3142:	38 2e       	mov	r3, r24
    3144:	e3 2d       	mov	r30, r3
    3146:	e4 60       	ori	r30, 0x04	; 4
    3148:	3e 2e       	mov	r3, r30
    314a:	2a c0       	rjmp	.+84     	; 0x31a0 <vfprintf+0x10c>
    314c:	f3 2d       	mov	r31, r3
    314e:	f8 60       	ori	r31, 0x08	; 8
    3150:	1d c0       	rjmp	.+58     	; 0x318c <vfprintf+0xf8>
    3152:	37 fc       	sbrc	r3, 7
    3154:	2d c0       	rjmp	.+90     	; 0x31b0 <vfprintf+0x11c>
    3156:	20 ed       	ldi	r18, 0xD0	; 208
    3158:	28 0f       	add	r18, r24
    315a:	2a 30       	cpi	r18, 0x0A	; 10
    315c:	40 f0       	brcs	.+16     	; 0x316e <vfprintf+0xda>
    315e:	8e 32       	cpi	r24, 0x2E	; 46
    3160:	b9 f4       	brne	.+46     	; 0x3190 <vfprintf+0xfc>
    3162:	36 fc       	sbrc	r3, 6
    3164:	75 c1       	rjmp	.+746    	; 0x3450 <vfprintf+0x3bc>
    3166:	23 2d       	mov	r18, r3
    3168:	20 64       	ori	r18, 0x40	; 64
    316a:	32 2e       	mov	r3, r18
    316c:	19 c0       	rjmp	.+50     	; 0x31a0 <vfprintf+0x10c>
    316e:	36 fe       	sbrs	r3, 6
    3170:	06 c0       	rjmp	.+12     	; 0x317e <vfprintf+0xea>
    3172:	8a e0       	ldi	r24, 0x0A	; 10
    3174:	98 9e       	mul	r9, r24
    3176:	20 0d       	add	r18, r0
    3178:	11 24       	eor	r1, r1
    317a:	92 2e       	mov	r9, r18
    317c:	11 c0       	rjmp	.+34     	; 0x31a0 <vfprintf+0x10c>
    317e:	ea e0       	ldi	r30, 0x0A	; 10
    3180:	2e 9e       	mul	r2, r30
    3182:	20 0d       	add	r18, r0
    3184:	11 24       	eor	r1, r1
    3186:	22 2e       	mov	r2, r18
    3188:	f3 2d       	mov	r31, r3
    318a:	f0 62       	ori	r31, 0x20	; 32
    318c:	3f 2e       	mov	r3, r31
    318e:	08 c0       	rjmp	.+16     	; 0x31a0 <vfprintf+0x10c>
    3190:	8c 36       	cpi	r24, 0x6C	; 108
    3192:	21 f4       	brne	.+8      	; 0x319c <vfprintf+0x108>
    3194:	83 2d       	mov	r24, r3
    3196:	80 68       	ori	r24, 0x80	; 128
    3198:	38 2e       	mov	r3, r24
    319a:	02 c0       	rjmp	.+4      	; 0x31a0 <vfprintf+0x10c>
    319c:	88 36       	cpi	r24, 0x68	; 104
    319e:	41 f4       	brne	.+16     	; 0x31b0 <vfprintf+0x11c>
    31a0:	f7 01       	movw	r30, r14
    31a2:	93 fd       	sbrc	r25, 3
    31a4:	85 91       	lpm	r24, Z+
    31a6:	93 ff       	sbrs	r25, 3
    31a8:	81 91       	ld	r24, Z+
    31aa:	7f 01       	movw	r14, r30
    31ac:	81 11       	cpse	r24, r1
    31ae:	b3 cf       	rjmp	.-154    	; 0x3116 <vfprintf+0x82>
    31b0:	98 2f       	mov	r25, r24
    31b2:	9f 7d       	andi	r25, 0xDF	; 223
    31b4:	95 54       	subi	r25, 0x45	; 69
    31b6:	93 30       	cpi	r25, 0x03	; 3
    31b8:	28 f4       	brcc	.+10     	; 0x31c4 <vfprintf+0x130>
    31ba:	0c 5f       	subi	r16, 0xFC	; 252
    31bc:	1f 4f       	sbci	r17, 0xFF	; 255
    31be:	9f e3       	ldi	r25, 0x3F	; 63
    31c0:	99 83       	std	Y+1, r25	; 0x01
    31c2:	0d c0       	rjmp	.+26     	; 0x31de <vfprintf+0x14a>
    31c4:	83 36       	cpi	r24, 0x63	; 99
    31c6:	31 f0       	breq	.+12     	; 0x31d4 <vfprintf+0x140>
    31c8:	83 37       	cpi	r24, 0x73	; 115
    31ca:	71 f0       	breq	.+28     	; 0x31e8 <vfprintf+0x154>
    31cc:	83 35       	cpi	r24, 0x53	; 83
    31ce:	09 f0       	breq	.+2      	; 0x31d2 <vfprintf+0x13e>
    31d0:	55 c0       	rjmp	.+170    	; 0x327c <vfprintf+0x1e8>
    31d2:	20 c0       	rjmp	.+64     	; 0x3214 <vfprintf+0x180>
    31d4:	f8 01       	movw	r30, r16
    31d6:	80 81       	ld	r24, Z
    31d8:	89 83       	std	Y+1, r24	; 0x01
    31da:	0e 5f       	subi	r16, 0xFE	; 254
    31dc:	1f 4f       	sbci	r17, 0xFF	; 255
    31de:	88 24       	eor	r8, r8
    31e0:	83 94       	inc	r8
    31e2:	91 2c       	mov	r9, r1
    31e4:	53 01       	movw	r10, r6
    31e6:	12 c0       	rjmp	.+36     	; 0x320c <vfprintf+0x178>
    31e8:	28 01       	movw	r4, r16
    31ea:	f2 e0       	ldi	r31, 0x02	; 2
    31ec:	4f 0e       	add	r4, r31
    31ee:	51 1c       	adc	r5, r1
    31f0:	f8 01       	movw	r30, r16
    31f2:	a0 80       	ld	r10, Z
    31f4:	b1 80       	ldd	r11, Z+1	; 0x01
    31f6:	36 fe       	sbrs	r3, 6
    31f8:	03 c0       	rjmp	.+6      	; 0x3200 <vfprintf+0x16c>
    31fa:	69 2d       	mov	r22, r9
    31fc:	70 e0       	ldi	r23, 0x00	; 0
    31fe:	02 c0       	rjmp	.+4      	; 0x3204 <vfprintf+0x170>
    3200:	6f ef       	ldi	r22, 0xFF	; 255
    3202:	7f ef       	ldi	r23, 0xFF	; 255
    3204:	c5 01       	movw	r24, r10
    3206:	4e d1       	rcall	.+668    	; 0x34a4 <strnlen>
    3208:	4c 01       	movw	r8, r24
    320a:	82 01       	movw	r16, r4
    320c:	f3 2d       	mov	r31, r3
    320e:	ff 77       	andi	r31, 0x7F	; 127
    3210:	3f 2e       	mov	r3, r31
    3212:	15 c0       	rjmp	.+42     	; 0x323e <vfprintf+0x1aa>
    3214:	28 01       	movw	r4, r16
    3216:	22 e0       	ldi	r18, 0x02	; 2
    3218:	42 0e       	add	r4, r18
    321a:	51 1c       	adc	r5, r1
    321c:	f8 01       	movw	r30, r16
    321e:	a0 80       	ld	r10, Z
    3220:	b1 80       	ldd	r11, Z+1	; 0x01
    3222:	36 fe       	sbrs	r3, 6
    3224:	03 c0       	rjmp	.+6      	; 0x322c <vfprintf+0x198>
    3226:	69 2d       	mov	r22, r9
    3228:	70 e0       	ldi	r23, 0x00	; 0
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <vfprintf+0x19c>
    322c:	6f ef       	ldi	r22, 0xFF	; 255
    322e:	7f ef       	ldi	r23, 0xFF	; 255
    3230:	c5 01       	movw	r24, r10
    3232:	2d d1       	rcall	.+602    	; 0x348e <strnlen_P>
    3234:	4c 01       	movw	r8, r24
    3236:	f3 2d       	mov	r31, r3
    3238:	f0 68       	ori	r31, 0x80	; 128
    323a:	3f 2e       	mov	r3, r31
    323c:	82 01       	movw	r16, r4
    323e:	33 fc       	sbrc	r3, 3
    3240:	19 c0       	rjmp	.+50     	; 0x3274 <vfprintf+0x1e0>
    3242:	82 2d       	mov	r24, r2
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	88 16       	cp	r8, r24
    3248:	99 06       	cpc	r9, r25
    324a:	a0 f4       	brcc	.+40     	; 0x3274 <vfprintf+0x1e0>
    324c:	b6 01       	movw	r22, r12
    324e:	80 e2       	ldi	r24, 0x20	; 32
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	33 d1       	rcall	.+614    	; 0x34ba <fputc>
    3254:	2a 94       	dec	r2
    3256:	f5 cf       	rjmp	.-22     	; 0x3242 <vfprintf+0x1ae>
    3258:	f5 01       	movw	r30, r10
    325a:	37 fc       	sbrc	r3, 7
    325c:	85 91       	lpm	r24, Z+
    325e:	37 fe       	sbrs	r3, 7
    3260:	81 91       	ld	r24, Z+
    3262:	5f 01       	movw	r10, r30
    3264:	b6 01       	movw	r22, r12
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	28 d1       	rcall	.+592    	; 0x34ba <fputc>
    326a:	21 10       	cpse	r2, r1
    326c:	2a 94       	dec	r2
    326e:	21 e0       	ldi	r18, 0x01	; 1
    3270:	82 1a       	sub	r8, r18
    3272:	91 08       	sbc	r9, r1
    3274:	81 14       	cp	r8, r1
    3276:	91 04       	cpc	r9, r1
    3278:	79 f7       	brne	.-34     	; 0x3258 <vfprintf+0x1c4>
    327a:	e1 c0       	rjmp	.+450    	; 0x343e <vfprintf+0x3aa>
    327c:	84 36       	cpi	r24, 0x64	; 100
    327e:	11 f0       	breq	.+4      	; 0x3284 <vfprintf+0x1f0>
    3280:	89 36       	cpi	r24, 0x69	; 105
    3282:	39 f5       	brne	.+78     	; 0x32d2 <vfprintf+0x23e>
    3284:	f8 01       	movw	r30, r16
    3286:	37 fe       	sbrs	r3, 7
    3288:	07 c0       	rjmp	.+14     	; 0x3298 <vfprintf+0x204>
    328a:	60 81       	ld	r22, Z
    328c:	71 81       	ldd	r23, Z+1	; 0x01
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	0c 5f       	subi	r16, 0xFC	; 252
    3294:	1f 4f       	sbci	r17, 0xFF	; 255
    3296:	08 c0       	rjmp	.+16     	; 0x32a8 <vfprintf+0x214>
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
    329c:	07 2e       	mov	r0, r23
    329e:	00 0c       	add	r0, r0
    32a0:	88 0b       	sbc	r24, r24
    32a2:	99 0b       	sbc	r25, r25
    32a4:	0e 5f       	subi	r16, 0xFE	; 254
    32a6:	1f 4f       	sbci	r17, 0xFF	; 255
    32a8:	f3 2d       	mov	r31, r3
    32aa:	ff 76       	andi	r31, 0x6F	; 111
    32ac:	3f 2e       	mov	r3, r31
    32ae:	97 ff       	sbrs	r25, 7
    32b0:	09 c0       	rjmp	.+18     	; 0x32c4 <vfprintf+0x230>
    32b2:	90 95       	com	r25
    32b4:	80 95       	com	r24
    32b6:	70 95       	com	r23
    32b8:	61 95       	neg	r22
    32ba:	7f 4f       	sbci	r23, 0xFF	; 255
    32bc:	8f 4f       	sbci	r24, 0xFF	; 255
    32be:	9f 4f       	sbci	r25, 0xFF	; 255
    32c0:	f0 68       	ori	r31, 0x80	; 128
    32c2:	3f 2e       	mov	r3, r31
    32c4:	2a e0       	ldi	r18, 0x0A	; 10
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	a3 01       	movw	r20, r6
    32ca:	33 d1       	rcall	.+614    	; 0x3532 <__ultoa_invert>
    32cc:	88 2e       	mov	r8, r24
    32ce:	86 18       	sub	r8, r6
    32d0:	44 c0       	rjmp	.+136    	; 0x335a <vfprintf+0x2c6>
    32d2:	85 37       	cpi	r24, 0x75	; 117
    32d4:	31 f4       	brne	.+12     	; 0x32e2 <vfprintf+0x24e>
    32d6:	23 2d       	mov	r18, r3
    32d8:	2f 7e       	andi	r18, 0xEF	; 239
    32da:	b2 2e       	mov	r11, r18
    32dc:	2a e0       	ldi	r18, 0x0A	; 10
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	25 c0       	rjmp	.+74     	; 0x332c <vfprintf+0x298>
    32e2:	93 2d       	mov	r25, r3
    32e4:	99 7f       	andi	r25, 0xF9	; 249
    32e6:	b9 2e       	mov	r11, r25
    32e8:	8f 36       	cpi	r24, 0x6F	; 111
    32ea:	c1 f0       	breq	.+48     	; 0x331c <vfprintf+0x288>
    32ec:	18 f4       	brcc	.+6      	; 0x32f4 <vfprintf+0x260>
    32ee:	88 35       	cpi	r24, 0x58	; 88
    32f0:	79 f0       	breq	.+30     	; 0x3310 <vfprintf+0x27c>
    32f2:	ae c0       	rjmp	.+348    	; 0x3450 <vfprintf+0x3bc>
    32f4:	80 37       	cpi	r24, 0x70	; 112
    32f6:	19 f0       	breq	.+6      	; 0x32fe <vfprintf+0x26a>
    32f8:	88 37       	cpi	r24, 0x78	; 120
    32fa:	21 f0       	breq	.+8      	; 0x3304 <vfprintf+0x270>
    32fc:	a9 c0       	rjmp	.+338    	; 0x3450 <vfprintf+0x3bc>
    32fe:	e9 2f       	mov	r30, r25
    3300:	e0 61       	ori	r30, 0x10	; 16
    3302:	be 2e       	mov	r11, r30
    3304:	b4 fe       	sbrs	r11, 4
    3306:	0d c0       	rjmp	.+26     	; 0x3322 <vfprintf+0x28e>
    3308:	fb 2d       	mov	r31, r11
    330a:	f4 60       	ori	r31, 0x04	; 4
    330c:	bf 2e       	mov	r11, r31
    330e:	09 c0       	rjmp	.+18     	; 0x3322 <vfprintf+0x28e>
    3310:	34 fe       	sbrs	r3, 4
    3312:	0a c0       	rjmp	.+20     	; 0x3328 <vfprintf+0x294>
    3314:	29 2f       	mov	r18, r25
    3316:	26 60       	ori	r18, 0x06	; 6
    3318:	b2 2e       	mov	r11, r18
    331a:	06 c0       	rjmp	.+12     	; 0x3328 <vfprintf+0x294>
    331c:	28 e0       	ldi	r18, 0x08	; 8
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	05 c0       	rjmp	.+10     	; 0x332c <vfprintf+0x298>
    3322:	20 e1       	ldi	r18, 0x10	; 16
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	02 c0       	rjmp	.+4      	; 0x332c <vfprintf+0x298>
    3328:	20 e1       	ldi	r18, 0x10	; 16
    332a:	32 e0       	ldi	r19, 0x02	; 2
    332c:	f8 01       	movw	r30, r16
    332e:	b7 fe       	sbrs	r11, 7
    3330:	07 c0       	rjmp	.+14     	; 0x3340 <vfprintf+0x2ac>
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	0c 5f       	subi	r16, 0xFC	; 252
    333c:	1f 4f       	sbci	r17, 0xFF	; 255
    333e:	06 c0       	rjmp	.+12     	; 0x334c <vfprintf+0x2b8>
    3340:	60 81       	ld	r22, Z
    3342:	71 81       	ldd	r23, Z+1	; 0x01
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	0e 5f       	subi	r16, 0xFE	; 254
    334a:	1f 4f       	sbci	r17, 0xFF	; 255
    334c:	a3 01       	movw	r20, r6
    334e:	f1 d0       	rcall	.+482    	; 0x3532 <__ultoa_invert>
    3350:	88 2e       	mov	r8, r24
    3352:	86 18       	sub	r8, r6
    3354:	fb 2d       	mov	r31, r11
    3356:	ff 77       	andi	r31, 0x7F	; 127
    3358:	3f 2e       	mov	r3, r31
    335a:	36 fe       	sbrs	r3, 6
    335c:	0d c0       	rjmp	.+26     	; 0x3378 <vfprintf+0x2e4>
    335e:	23 2d       	mov	r18, r3
    3360:	2e 7f       	andi	r18, 0xFE	; 254
    3362:	a2 2e       	mov	r10, r18
    3364:	89 14       	cp	r8, r9
    3366:	58 f4       	brcc	.+22     	; 0x337e <vfprintf+0x2ea>
    3368:	34 fe       	sbrs	r3, 4
    336a:	0b c0       	rjmp	.+22     	; 0x3382 <vfprintf+0x2ee>
    336c:	32 fc       	sbrc	r3, 2
    336e:	09 c0       	rjmp	.+18     	; 0x3382 <vfprintf+0x2ee>
    3370:	83 2d       	mov	r24, r3
    3372:	8e 7e       	andi	r24, 0xEE	; 238
    3374:	a8 2e       	mov	r10, r24
    3376:	05 c0       	rjmp	.+10     	; 0x3382 <vfprintf+0x2ee>
    3378:	b8 2c       	mov	r11, r8
    337a:	a3 2c       	mov	r10, r3
    337c:	03 c0       	rjmp	.+6      	; 0x3384 <vfprintf+0x2f0>
    337e:	b8 2c       	mov	r11, r8
    3380:	01 c0       	rjmp	.+2      	; 0x3384 <vfprintf+0x2f0>
    3382:	b9 2c       	mov	r11, r9
    3384:	a4 fe       	sbrs	r10, 4
    3386:	0f c0       	rjmp	.+30     	; 0x33a6 <vfprintf+0x312>
    3388:	fe 01       	movw	r30, r28
    338a:	e8 0d       	add	r30, r8
    338c:	f1 1d       	adc	r31, r1
    338e:	80 81       	ld	r24, Z
    3390:	80 33       	cpi	r24, 0x30	; 48
    3392:	21 f4       	brne	.+8      	; 0x339c <vfprintf+0x308>
    3394:	9a 2d       	mov	r25, r10
    3396:	99 7e       	andi	r25, 0xE9	; 233
    3398:	a9 2e       	mov	r10, r25
    339a:	09 c0       	rjmp	.+18     	; 0x33ae <vfprintf+0x31a>
    339c:	a2 fe       	sbrs	r10, 2
    339e:	06 c0       	rjmp	.+12     	; 0x33ac <vfprintf+0x318>
    33a0:	b3 94       	inc	r11
    33a2:	b3 94       	inc	r11
    33a4:	04 c0       	rjmp	.+8      	; 0x33ae <vfprintf+0x31a>
    33a6:	8a 2d       	mov	r24, r10
    33a8:	86 78       	andi	r24, 0x86	; 134
    33aa:	09 f0       	breq	.+2      	; 0x33ae <vfprintf+0x31a>
    33ac:	b3 94       	inc	r11
    33ae:	a3 fc       	sbrc	r10, 3
    33b0:	10 c0       	rjmp	.+32     	; 0x33d2 <vfprintf+0x33e>
    33b2:	a0 fe       	sbrs	r10, 0
    33b4:	06 c0       	rjmp	.+12     	; 0x33c2 <vfprintf+0x32e>
    33b6:	b2 14       	cp	r11, r2
    33b8:	80 f4       	brcc	.+32     	; 0x33da <vfprintf+0x346>
    33ba:	28 0c       	add	r2, r8
    33bc:	92 2c       	mov	r9, r2
    33be:	9b 18       	sub	r9, r11
    33c0:	0d c0       	rjmp	.+26     	; 0x33dc <vfprintf+0x348>
    33c2:	b2 14       	cp	r11, r2
    33c4:	58 f4       	brcc	.+22     	; 0x33dc <vfprintf+0x348>
    33c6:	b6 01       	movw	r22, r12
    33c8:	80 e2       	ldi	r24, 0x20	; 32
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	76 d0       	rcall	.+236    	; 0x34ba <fputc>
    33ce:	b3 94       	inc	r11
    33d0:	f8 cf       	rjmp	.-16     	; 0x33c2 <vfprintf+0x32e>
    33d2:	b2 14       	cp	r11, r2
    33d4:	18 f4       	brcc	.+6      	; 0x33dc <vfprintf+0x348>
    33d6:	2b 18       	sub	r2, r11
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <vfprintf+0x34a>
    33da:	98 2c       	mov	r9, r8
    33dc:	21 2c       	mov	r2, r1
    33de:	a4 fe       	sbrs	r10, 4
    33e0:	0f c0       	rjmp	.+30     	; 0x3400 <vfprintf+0x36c>
    33e2:	b6 01       	movw	r22, r12
    33e4:	80 e3       	ldi	r24, 0x30	; 48
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	68 d0       	rcall	.+208    	; 0x34ba <fputc>
    33ea:	a2 fe       	sbrs	r10, 2
    33ec:	16 c0       	rjmp	.+44     	; 0x341a <vfprintf+0x386>
    33ee:	a1 fc       	sbrc	r10, 1
    33f0:	03 c0       	rjmp	.+6      	; 0x33f8 <vfprintf+0x364>
    33f2:	88 e7       	ldi	r24, 0x78	; 120
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	02 c0       	rjmp	.+4      	; 0x33fc <vfprintf+0x368>
    33f8:	88 e5       	ldi	r24, 0x58	; 88
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	b6 01       	movw	r22, r12
    33fe:	0c c0       	rjmp	.+24     	; 0x3418 <vfprintf+0x384>
    3400:	8a 2d       	mov	r24, r10
    3402:	86 78       	andi	r24, 0x86	; 134
    3404:	51 f0       	breq	.+20     	; 0x341a <vfprintf+0x386>
    3406:	a1 fe       	sbrs	r10, 1
    3408:	02 c0       	rjmp	.+4      	; 0x340e <vfprintf+0x37a>
    340a:	8b e2       	ldi	r24, 0x2B	; 43
    340c:	01 c0       	rjmp	.+2      	; 0x3410 <vfprintf+0x37c>
    340e:	80 e2       	ldi	r24, 0x20	; 32
    3410:	a7 fc       	sbrc	r10, 7
    3412:	8d e2       	ldi	r24, 0x2D	; 45
    3414:	b6 01       	movw	r22, r12
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	50 d0       	rcall	.+160    	; 0x34ba <fputc>
    341a:	89 14       	cp	r8, r9
    341c:	30 f4       	brcc	.+12     	; 0x342a <vfprintf+0x396>
    341e:	b6 01       	movw	r22, r12
    3420:	80 e3       	ldi	r24, 0x30	; 48
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	4a d0       	rcall	.+148    	; 0x34ba <fputc>
    3426:	9a 94       	dec	r9
    3428:	f8 cf       	rjmp	.-16     	; 0x341a <vfprintf+0x386>
    342a:	8a 94       	dec	r8
    342c:	f3 01       	movw	r30, r6
    342e:	e8 0d       	add	r30, r8
    3430:	f1 1d       	adc	r31, r1
    3432:	80 81       	ld	r24, Z
    3434:	b6 01       	movw	r22, r12
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	40 d0       	rcall	.+128    	; 0x34ba <fputc>
    343a:	81 10       	cpse	r8, r1
    343c:	f6 cf       	rjmp	.-20     	; 0x342a <vfprintf+0x396>
    343e:	22 20       	and	r2, r2
    3440:	09 f4       	brne	.+2      	; 0x3444 <vfprintf+0x3b0>
    3442:	4e ce       	rjmp	.-868    	; 0x30e0 <vfprintf+0x4c>
    3444:	b6 01       	movw	r22, r12
    3446:	80 e2       	ldi	r24, 0x20	; 32
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	37 d0       	rcall	.+110    	; 0x34ba <fputc>
    344c:	2a 94       	dec	r2
    344e:	f7 cf       	rjmp	.-18     	; 0x343e <vfprintf+0x3aa>
    3450:	f6 01       	movw	r30, r12
    3452:	86 81       	ldd	r24, Z+6	; 0x06
    3454:	97 81       	ldd	r25, Z+7	; 0x07
    3456:	02 c0       	rjmp	.+4      	; 0x345c <vfprintf+0x3c8>
    3458:	8f ef       	ldi	r24, 0xFF	; 255
    345a:	9f ef       	ldi	r25, 0xFF	; 255
    345c:	2b 96       	adiw	r28, 0x0b	; 11
    345e:	0f b6       	in	r0, 0x3f	; 63
    3460:	f8 94       	cli
    3462:	de bf       	out	0x3e, r29	; 62
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	cd bf       	out	0x3d, r28	; 61
    3468:	df 91       	pop	r29
    346a:	cf 91       	pop	r28
    346c:	1f 91       	pop	r17
    346e:	0f 91       	pop	r16
    3470:	ff 90       	pop	r15
    3472:	ef 90       	pop	r14
    3474:	df 90       	pop	r13
    3476:	cf 90       	pop	r12
    3478:	bf 90       	pop	r11
    347a:	af 90       	pop	r10
    347c:	9f 90       	pop	r9
    347e:	8f 90       	pop	r8
    3480:	7f 90       	pop	r7
    3482:	6f 90       	pop	r6
    3484:	5f 90       	pop	r5
    3486:	4f 90       	pop	r4
    3488:	3f 90       	pop	r3
    348a:	2f 90       	pop	r2
    348c:	08 95       	ret

0000348e <strnlen_P>:
    348e:	fc 01       	movw	r30, r24
    3490:	05 90       	lpm	r0, Z+
    3492:	61 50       	subi	r22, 0x01	; 1
    3494:	70 40       	sbci	r23, 0x00	; 0
    3496:	01 10       	cpse	r0, r1
    3498:	d8 f7       	brcc	.-10     	; 0x3490 <strnlen_P+0x2>
    349a:	80 95       	com	r24
    349c:	90 95       	com	r25
    349e:	8e 0f       	add	r24, r30
    34a0:	9f 1f       	adc	r25, r31
    34a2:	08 95       	ret

000034a4 <strnlen>:
    34a4:	fc 01       	movw	r30, r24
    34a6:	61 50       	subi	r22, 0x01	; 1
    34a8:	70 40       	sbci	r23, 0x00	; 0
    34aa:	01 90       	ld	r0, Z+
    34ac:	01 10       	cpse	r0, r1
    34ae:	d8 f7       	brcc	.-10     	; 0x34a6 <strnlen+0x2>
    34b0:	80 95       	com	r24
    34b2:	90 95       	com	r25
    34b4:	8e 0f       	add	r24, r30
    34b6:	9f 1f       	adc	r25, r31
    34b8:	08 95       	ret

000034ba <fputc>:
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	fb 01       	movw	r30, r22
    34c4:	23 81       	ldd	r18, Z+3	; 0x03
    34c6:	21 fd       	sbrc	r18, 1
    34c8:	03 c0       	rjmp	.+6      	; 0x34d0 <fputc+0x16>
    34ca:	8f ef       	ldi	r24, 0xFF	; 255
    34cc:	9f ef       	ldi	r25, 0xFF	; 255
    34ce:	2c c0       	rjmp	.+88     	; 0x3528 <fputc+0x6e>
    34d0:	22 ff       	sbrs	r18, 2
    34d2:	16 c0       	rjmp	.+44     	; 0x3500 <fputc+0x46>
    34d4:	46 81       	ldd	r20, Z+6	; 0x06
    34d6:	57 81       	ldd	r21, Z+7	; 0x07
    34d8:	24 81       	ldd	r18, Z+4	; 0x04
    34da:	35 81       	ldd	r19, Z+5	; 0x05
    34dc:	42 17       	cp	r20, r18
    34de:	53 07       	cpc	r21, r19
    34e0:	44 f4       	brge	.+16     	; 0x34f2 <fputc+0x38>
    34e2:	a0 81       	ld	r26, Z
    34e4:	b1 81       	ldd	r27, Z+1	; 0x01
    34e6:	9d 01       	movw	r18, r26
    34e8:	2f 5f       	subi	r18, 0xFF	; 255
    34ea:	3f 4f       	sbci	r19, 0xFF	; 255
    34ec:	31 83       	std	Z+1, r19	; 0x01
    34ee:	20 83       	st	Z, r18
    34f0:	8c 93       	st	X, r24
    34f2:	26 81       	ldd	r18, Z+6	; 0x06
    34f4:	37 81       	ldd	r19, Z+7	; 0x07
    34f6:	2f 5f       	subi	r18, 0xFF	; 255
    34f8:	3f 4f       	sbci	r19, 0xFF	; 255
    34fa:	37 83       	std	Z+7, r19	; 0x07
    34fc:	26 83       	std	Z+6, r18	; 0x06
    34fe:	14 c0       	rjmp	.+40     	; 0x3528 <fputc+0x6e>
    3500:	8b 01       	movw	r16, r22
    3502:	ec 01       	movw	r28, r24
    3504:	fb 01       	movw	r30, r22
    3506:	00 84       	ldd	r0, Z+8	; 0x08
    3508:	f1 85       	ldd	r31, Z+9	; 0x09
    350a:	e0 2d       	mov	r30, r0
    350c:	19 95       	eicall
    350e:	89 2b       	or	r24, r25
    3510:	e1 f6       	brne	.-72     	; 0x34ca <fputc+0x10>
    3512:	d8 01       	movw	r26, r16
    3514:	16 96       	adiw	r26, 0x06	; 6
    3516:	8d 91       	ld	r24, X+
    3518:	9c 91       	ld	r25, X
    351a:	17 97       	sbiw	r26, 0x07	; 7
    351c:	01 96       	adiw	r24, 0x01	; 1
    351e:	17 96       	adiw	r26, 0x07	; 7
    3520:	9c 93       	st	X, r25
    3522:	8e 93       	st	-X, r24
    3524:	16 97       	sbiw	r26, 0x06	; 6
    3526:	ce 01       	movw	r24, r28
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	1f 91       	pop	r17
    352e:	0f 91       	pop	r16
    3530:	08 95       	ret

00003532 <__ultoa_invert>:
    3532:	fa 01       	movw	r30, r20
    3534:	aa 27       	eor	r26, r26
    3536:	28 30       	cpi	r18, 0x08	; 8
    3538:	51 f1       	breq	.+84     	; 0x358e <__ultoa_invert+0x5c>
    353a:	20 31       	cpi	r18, 0x10	; 16
    353c:	81 f1       	breq	.+96     	; 0x359e <__ultoa_invert+0x6c>
    353e:	e8 94       	clt
    3540:	6f 93       	push	r22
    3542:	6e 7f       	andi	r22, 0xFE	; 254
    3544:	6e 5f       	subi	r22, 0xFE	; 254
    3546:	7f 4f       	sbci	r23, 0xFF	; 255
    3548:	8f 4f       	sbci	r24, 0xFF	; 255
    354a:	9f 4f       	sbci	r25, 0xFF	; 255
    354c:	af 4f       	sbci	r26, 0xFF	; 255
    354e:	b1 e0       	ldi	r27, 0x01	; 1
    3550:	3e d0       	rcall	.+124    	; 0x35ce <__ultoa_invert+0x9c>
    3552:	b4 e0       	ldi	r27, 0x04	; 4
    3554:	3c d0       	rcall	.+120    	; 0x35ce <__ultoa_invert+0x9c>
    3556:	67 0f       	add	r22, r23
    3558:	78 1f       	adc	r23, r24
    355a:	89 1f       	adc	r24, r25
    355c:	9a 1f       	adc	r25, r26
    355e:	a1 1d       	adc	r26, r1
    3560:	68 0f       	add	r22, r24
    3562:	79 1f       	adc	r23, r25
    3564:	8a 1f       	adc	r24, r26
    3566:	91 1d       	adc	r25, r1
    3568:	a1 1d       	adc	r26, r1
    356a:	6a 0f       	add	r22, r26
    356c:	71 1d       	adc	r23, r1
    356e:	81 1d       	adc	r24, r1
    3570:	91 1d       	adc	r25, r1
    3572:	a1 1d       	adc	r26, r1
    3574:	20 d0       	rcall	.+64     	; 0x35b6 <__ultoa_invert+0x84>
    3576:	09 f4       	brne	.+2      	; 0x357a <__ultoa_invert+0x48>
    3578:	68 94       	set
    357a:	3f 91       	pop	r19
    357c:	2a e0       	ldi	r18, 0x0A	; 10
    357e:	26 9f       	mul	r18, r22
    3580:	11 24       	eor	r1, r1
    3582:	30 19       	sub	r19, r0
    3584:	30 5d       	subi	r19, 0xD0	; 208
    3586:	31 93       	st	Z+, r19
    3588:	de f6       	brtc	.-74     	; 0x3540 <__ultoa_invert+0xe>
    358a:	cf 01       	movw	r24, r30
    358c:	08 95       	ret
    358e:	46 2f       	mov	r20, r22
    3590:	47 70       	andi	r20, 0x07	; 7
    3592:	40 5d       	subi	r20, 0xD0	; 208
    3594:	41 93       	st	Z+, r20
    3596:	b3 e0       	ldi	r27, 0x03	; 3
    3598:	0f d0       	rcall	.+30     	; 0x35b8 <__ultoa_invert+0x86>
    359a:	c9 f7       	brne	.-14     	; 0x358e <__ultoa_invert+0x5c>
    359c:	f6 cf       	rjmp	.-20     	; 0x358a <__ultoa_invert+0x58>
    359e:	46 2f       	mov	r20, r22
    35a0:	4f 70       	andi	r20, 0x0F	; 15
    35a2:	40 5d       	subi	r20, 0xD0	; 208
    35a4:	4a 33       	cpi	r20, 0x3A	; 58
    35a6:	18 f0       	brcs	.+6      	; 0x35ae <__ultoa_invert+0x7c>
    35a8:	49 5d       	subi	r20, 0xD9	; 217
    35aa:	31 fd       	sbrc	r19, 1
    35ac:	40 52       	subi	r20, 0x20	; 32
    35ae:	41 93       	st	Z+, r20
    35b0:	02 d0       	rcall	.+4      	; 0x35b6 <__ultoa_invert+0x84>
    35b2:	a9 f7       	brne	.-22     	; 0x359e <__ultoa_invert+0x6c>
    35b4:	ea cf       	rjmp	.-44     	; 0x358a <__ultoa_invert+0x58>
    35b6:	b4 e0       	ldi	r27, 0x04	; 4
    35b8:	a6 95       	lsr	r26
    35ba:	97 95       	ror	r25
    35bc:	87 95       	ror	r24
    35be:	77 95       	ror	r23
    35c0:	67 95       	ror	r22
    35c2:	ba 95       	dec	r27
    35c4:	c9 f7       	brne	.-14     	; 0x35b8 <__ultoa_invert+0x86>
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	61 05       	cpc	r22, r1
    35ca:	71 05       	cpc	r23, r1
    35cc:	08 95       	ret
    35ce:	9b 01       	movw	r18, r22
    35d0:	ac 01       	movw	r20, r24
    35d2:	0a 2e       	mov	r0, r26
    35d4:	06 94       	lsr	r0
    35d6:	57 95       	ror	r21
    35d8:	47 95       	ror	r20
    35da:	37 95       	ror	r19
    35dc:	27 95       	ror	r18
    35de:	ba 95       	dec	r27
    35e0:	c9 f7       	brne	.-14     	; 0x35d4 <__ultoa_invert+0xa2>
    35e2:	62 0f       	add	r22, r18
    35e4:	73 1f       	adc	r23, r19
    35e6:	84 1f       	adc	r24, r20
    35e8:	95 1f       	adc	r25, r21
    35ea:	a0 1d       	adc	r26, r0
    35ec:	08 95       	ret

000035ee <_exit>:
    35ee:	f8 94       	cli

000035f0 <__stop_program>:
    35f0:	ff cf       	rjmp	.-2      	; 0x35f0 <__stop_program>
>>>>>>> parent of 075f925... Updated Main.cpp + Added Arm.h
=======
    2ba6:	ff 91       	pop	r31
    2ba8:	ef 91       	pop	r30
    2baa:	bf 91       	pop	r27
    2bac:	af 91       	pop	r26
    2bae:	9f 91       	pop	r25
    2bb0:	8f 91       	pop	r24
    2bb2:	7f 91       	pop	r23
    2bb4:	6f 91       	pop	r22
    2bb6:	5f 91       	pop	r21
    2bb8:	4f 91       	pop	r20
    2bba:	3f 91       	pop	r19
    2bbc:	2f 91       	pop	r18
    2bbe:	0f 90       	pop	r0
    2bc0:	0b be       	out	0x3b, r0	; 59
    2bc2:	0f 90       	pop	r0
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	0f 90       	pop	r0
    2bc8:	1f 90       	pop	r1
    2bca:	18 95       	reti

00002bcc <__udivmodsi4>:
    2bcc:	a1 e2       	ldi	r26, 0x21	; 33
    2bce:	1a 2e       	mov	r1, r26
    2bd0:	aa 1b       	sub	r26, r26
    2bd2:	bb 1b       	sub	r27, r27
    2bd4:	fd 01       	movw	r30, r26
    2bd6:	0d c0       	rjmp	.+26     	; 0x2bf2 <__udivmodsi4_ep>

00002bd8 <__udivmodsi4_loop>:
    2bd8:	aa 1f       	adc	r26, r26
    2bda:	bb 1f       	adc	r27, r27
    2bdc:	ee 1f       	adc	r30, r30
    2bde:	ff 1f       	adc	r31, r31
    2be0:	a2 17       	cp	r26, r18
    2be2:	b3 07       	cpc	r27, r19
    2be4:	e4 07       	cpc	r30, r20
    2be6:	f5 07       	cpc	r31, r21
    2be8:	20 f0       	brcs	.+8      	; 0x2bf2 <__udivmodsi4_ep>
    2bea:	a2 1b       	sub	r26, r18
    2bec:	b3 0b       	sbc	r27, r19
    2bee:	e4 0b       	sbc	r30, r20
    2bf0:	f5 0b       	sbc	r31, r21

00002bf2 <__udivmodsi4_ep>:
    2bf2:	66 1f       	adc	r22, r22
    2bf4:	77 1f       	adc	r23, r23
    2bf6:	88 1f       	adc	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	1a 94       	dec	r1
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <__udivmodsi4_loop>
    2bfe:	60 95       	com	r22
    2c00:	70 95       	com	r23
    2c02:	80 95       	com	r24
    2c04:	90 95       	com	r25
    2c06:	9b 01       	movw	r18, r22
    2c08:	ac 01       	movw	r20, r24
    2c0a:	bd 01       	movw	r22, r26
    2c0c:	cf 01       	movw	r24, r30
    2c0e:	08 95       	ret

00002c10 <__tablejump2__>:
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	88 1f       	adc	r24, r24
    2c16:	8b bf       	out	0x3b, r24	; 59
    2c18:	07 90       	elpm	r0, Z+
    2c1a:	f6 91       	elpm	r31, Z
    2c1c:	e0 2d       	mov	r30, r0
    2c1e:	19 94       	eijmp

00002c20 <malloc>:
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	82 30       	cpi	r24, 0x02	; 2
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	10 f4       	brcc	.+4      	; 0x2c32 <malloc+0x12>
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	e0 91 a3 05 	lds	r30, 0x05A3	; 0x8005a3 <__flp>
    2c36:	f0 91 a4 05 	lds	r31, 0x05A4	; 0x8005a4 <__flp+0x1>
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	a0 e0       	ldi	r26, 0x00	; 0
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	30 97       	sbiw	r30, 0x00	; 0
    2c44:	19 f1       	breq	.+70     	; 0x2c8c <malloc+0x6c>
    2c46:	40 81       	ld	r20, Z
    2c48:	51 81       	ldd	r21, Z+1	; 0x01
    2c4a:	02 81       	ldd	r16, Z+2	; 0x02
    2c4c:	13 81       	ldd	r17, Z+3	; 0x03
    2c4e:	48 17       	cp	r20, r24
    2c50:	59 07       	cpc	r21, r25
    2c52:	c8 f0       	brcs	.+50     	; 0x2c86 <malloc+0x66>
    2c54:	84 17       	cp	r24, r20
    2c56:	95 07       	cpc	r25, r21
    2c58:	69 f4       	brne	.+26     	; 0x2c74 <malloc+0x54>
    2c5a:	10 97       	sbiw	r26, 0x00	; 0
    2c5c:	31 f0       	breq	.+12     	; 0x2c6a <malloc+0x4a>
    2c5e:	12 96       	adiw	r26, 0x02	; 2
    2c60:	0c 93       	st	X, r16
    2c62:	12 97       	sbiw	r26, 0x02	; 2
    2c64:	13 96       	adiw	r26, 0x03	; 3
    2c66:	1c 93       	st	X, r17
    2c68:	27 c0       	rjmp	.+78     	; 0x2cb8 <malloc+0x98>
    2c6a:	00 93 a3 05 	sts	0x05A3, r16	; 0x8005a3 <__flp>
    2c6e:	10 93 a4 05 	sts	0x05A4, r17	; 0x8005a4 <__flp+0x1>
    2c72:	22 c0       	rjmp	.+68     	; 0x2cb8 <malloc+0x98>
    2c74:	21 15       	cp	r18, r1
    2c76:	31 05       	cpc	r19, r1
    2c78:	19 f0       	breq	.+6      	; 0x2c80 <malloc+0x60>
    2c7a:	42 17       	cp	r20, r18
    2c7c:	53 07       	cpc	r21, r19
    2c7e:	18 f4       	brcc	.+6      	; 0x2c86 <malloc+0x66>
    2c80:	9a 01       	movw	r18, r20
    2c82:	bd 01       	movw	r22, r26
    2c84:	ef 01       	movw	r28, r30
    2c86:	df 01       	movw	r26, r30
    2c88:	f8 01       	movw	r30, r16
    2c8a:	db cf       	rjmp	.-74     	; 0x2c42 <malloc+0x22>
    2c8c:	21 15       	cp	r18, r1
    2c8e:	31 05       	cpc	r19, r1
    2c90:	f9 f0       	breq	.+62     	; 0x2cd0 <malloc+0xb0>
    2c92:	28 1b       	sub	r18, r24
    2c94:	39 0b       	sbc	r19, r25
    2c96:	24 30       	cpi	r18, 0x04	; 4
    2c98:	31 05       	cpc	r19, r1
    2c9a:	80 f4       	brcc	.+32     	; 0x2cbc <malloc+0x9c>
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca0:	61 15       	cp	r22, r1
    2ca2:	71 05       	cpc	r23, r1
    2ca4:	21 f0       	breq	.+8      	; 0x2cae <malloc+0x8e>
    2ca6:	fb 01       	movw	r30, r22
    2ca8:	93 83       	std	Z+3, r25	; 0x03
    2caa:	82 83       	std	Z+2, r24	; 0x02
    2cac:	04 c0       	rjmp	.+8      	; 0x2cb6 <malloc+0x96>
    2cae:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <__flp+0x1>
    2cb2:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <__flp>
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	32 96       	adiw	r30, 0x02	; 2
    2cba:	44 c0       	rjmp	.+136    	; 0x2d44 <malloc+0x124>
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e2 0f       	add	r30, r18
    2cc0:	f3 1f       	adc	r31, r19
    2cc2:	81 93       	st	Z+, r24
    2cc4:	91 93       	st	Z+, r25
    2cc6:	22 50       	subi	r18, 0x02	; 2
    2cc8:	31 09       	sbc	r19, r1
    2cca:	39 83       	std	Y+1, r19	; 0x01
    2ccc:	28 83       	st	Y, r18
    2cce:	3a c0       	rjmp	.+116    	; 0x2d44 <malloc+0x124>
    2cd0:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <__brkval>
    2cd4:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2cd8:	23 2b       	or	r18, r19
    2cda:	41 f4       	brne	.+16     	; 0x2cec <malloc+0xcc>
    2cdc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2ce0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2ce4:	30 93 a2 05 	sts	0x05A2, r19	; 0x8005a2 <__brkval+0x1>
    2ce8:	20 93 a1 05 	sts	0x05A1, r18	; 0x8005a1 <__brkval>
    2cec:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2cf0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2cf4:	21 15       	cp	r18, r1
    2cf6:	31 05       	cpc	r19, r1
    2cf8:	41 f4       	brne	.+16     	; 0x2d0a <malloc+0xea>
    2cfa:	2d b7       	in	r18, 0x3d	; 61
    2cfc:	3e b7       	in	r19, 0x3e	; 62
    2cfe:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2d02:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2d06:	24 1b       	sub	r18, r20
    2d08:	35 0b       	sbc	r19, r21
    2d0a:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <__brkval>
    2d0e:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2d12:	e2 17       	cp	r30, r18
    2d14:	f3 07       	cpc	r31, r19
    2d16:	a0 f4       	brcc	.+40     	; 0x2d40 <malloc+0x120>
    2d18:	2e 1b       	sub	r18, r30
    2d1a:	3f 0b       	sbc	r19, r31
    2d1c:	28 17       	cp	r18, r24
    2d1e:	39 07       	cpc	r19, r25
    2d20:	78 f0       	brcs	.+30     	; 0x2d40 <malloc+0x120>
    2d22:	ac 01       	movw	r20, r24
    2d24:	4e 5f       	subi	r20, 0xFE	; 254
    2d26:	5f 4f       	sbci	r21, 0xFF	; 255
    2d28:	24 17       	cp	r18, r20
    2d2a:	35 07       	cpc	r19, r21
    2d2c:	48 f0       	brcs	.+18     	; 0x2d40 <malloc+0x120>
    2d2e:	4e 0f       	add	r20, r30
    2d30:	5f 1f       	adc	r21, r31
    2d32:	50 93 a2 05 	sts	0x05A2, r21	; 0x8005a2 <__brkval+0x1>
    2d36:	40 93 a1 05 	sts	0x05A1, r20	; 0x8005a1 <__brkval>
    2d3a:	81 93       	st	Z+, r24
    2d3c:	91 93       	st	Z+, r25
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <malloc+0x124>
    2d40:	e0 e0       	ldi	r30, 0x00	; 0
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	cf 01       	movw	r24, r30
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	08 95       	ret

00002d50 <free>:
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	09 f4       	brne	.+2      	; 0x2d5a <free+0xa>
    2d58:	81 c0       	rjmp	.+258    	; 0x2e5c <free+0x10c>
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	32 97       	sbiw	r30, 0x02	; 2
    2d5e:	13 82       	std	Z+3, r1	; 0x03
    2d60:	12 82       	std	Z+2, r1	; 0x02
    2d62:	a0 91 a3 05 	lds	r26, 0x05A3	; 0x8005a3 <__flp>
    2d66:	b0 91 a4 05 	lds	r27, 0x05A4	; 0x8005a4 <__flp+0x1>
    2d6a:	10 97       	sbiw	r26, 0x00	; 0
    2d6c:	81 f4       	brne	.+32     	; 0x2d8e <free+0x3e>
    2d6e:	20 81       	ld	r18, Z
    2d70:	31 81       	ldd	r19, Z+1	; 0x01
    2d72:	82 0f       	add	r24, r18
    2d74:	93 1f       	adc	r25, r19
    2d76:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <__brkval>
    2d7a:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2d7e:	28 17       	cp	r18, r24
    2d80:	39 07       	cpc	r19, r25
    2d82:	51 f5       	brne	.+84     	; 0x2dd8 <free+0x88>
    2d84:	f0 93 a2 05 	sts	0x05A2, r31	; 0x8005a2 <__brkval+0x1>
    2d88:	e0 93 a1 05 	sts	0x05A1, r30	; 0x8005a1 <__brkval>
    2d8c:	67 c0       	rjmp	.+206    	; 0x2e5c <free+0x10c>
    2d8e:	ed 01       	movw	r28, r26
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	ce 17       	cp	r28, r30
    2d96:	df 07       	cpc	r29, r31
    2d98:	40 f4       	brcc	.+16     	; 0x2daa <free+0x5a>
    2d9a:	4a 81       	ldd	r20, Y+2	; 0x02
    2d9c:	5b 81       	ldd	r21, Y+3	; 0x03
    2d9e:	9e 01       	movw	r18, r28
    2da0:	41 15       	cp	r20, r1
    2da2:	51 05       	cpc	r21, r1
    2da4:	f1 f0       	breq	.+60     	; 0x2de2 <free+0x92>
    2da6:	ea 01       	movw	r28, r20
    2da8:	f5 cf       	rjmp	.-22     	; 0x2d94 <free+0x44>
    2daa:	d3 83       	std	Z+3, r29	; 0x03
    2dac:	c2 83       	std	Z+2, r28	; 0x02
    2dae:	40 81       	ld	r20, Z
    2db0:	51 81       	ldd	r21, Z+1	; 0x01
    2db2:	84 0f       	add	r24, r20
    2db4:	95 1f       	adc	r25, r21
    2db6:	c8 17       	cp	r28, r24
    2db8:	d9 07       	cpc	r29, r25
    2dba:	59 f4       	brne	.+22     	; 0x2dd2 <free+0x82>
    2dbc:	88 81       	ld	r24, Y
    2dbe:	99 81       	ldd	r25, Y+1	; 0x01
    2dc0:	84 0f       	add	r24, r20
    2dc2:	95 1f       	adc	r25, r21
    2dc4:	02 96       	adiw	r24, 0x02	; 2
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	80 83       	st	Z, r24
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dce:	93 83       	std	Z+3, r25	; 0x03
    2dd0:	82 83       	std	Z+2, r24	; 0x02
    2dd2:	21 15       	cp	r18, r1
    2dd4:	31 05       	cpc	r19, r1
    2dd6:	29 f4       	brne	.+10     	; 0x2de2 <free+0x92>
    2dd8:	f0 93 a4 05 	sts	0x05A4, r31	; 0x8005a4 <__flp+0x1>
    2ddc:	e0 93 a3 05 	sts	0x05A3, r30	; 0x8005a3 <__flp>
    2de0:	3d c0       	rjmp	.+122    	; 0x2e5c <free+0x10c>
    2de2:	e9 01       	movw	r28, r18
    2de4:	fb 83       	std	Y+3, r31	; 0x03
    2de6:	ea 83       	std	Y+2, r30	; 0x02
    2de8:	49 91       	ld	r20, Y+
    2dea:	59 91       	ld	r21, Y+
    2dec:	c4 0f       	add	r28, r20
    2dee:	d5 1f       	adc	r29, r21
    2df0:	ec 17       	cp	r30, r28
    2df2:	fd 07       	cpc	r31, r29
    2df4:	61 f4       	brne	.+24     	; 0x2e0e <free+0xbe>
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	84 0f       	add	r24, r20
    2dfc:	95 1f       	adc	r25, r21
    2dfe:	02 96       	adiw	r24, 0x02	; 2
    2e00:	e9 01       	movw	r28, r18
    2e02:	99 83       	std	Y+1, r25	; 0x01
    2e04:	88 83       	st	Y, r24
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	9b 83       	std	Y+3, r25	; 0x03
    2e0c:	8a 83       	std	Y+2, r24	; 0x02
    2e0e:	e0 e0       	ldi	r30, 0x00	; 0
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	12 96       	adiw	r26, 0x02	; 2
    2e14:	8d 91       	ld	r24, X+
    2e16:	9c 91       	ld	r25, X
    2e18:	13 97       	sbiw	r26, 0x03	; 3
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	19 f0       	breq	.+6      	; 0x2e24 <free+0xd4>
    2e1e:	fd 01       	movw	r30, r26
    2e20:	dc 01       	movw	r26, r24
    2e22:	f7 cf       	rjmp	.-18     	; 0x2e12 <free+0xc2>
    2e24:	8d 91       	ld	r24, X+
    2e26:	9c 91       	ld	r25, X
    2e28:	11 97       	sbiw	r26, 0x01	; 1
    2e2a:	9d 01       	movw	r18, r26
    2e2c:	2e 5f       	subi	r18, 0xFE	; 254
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	82 0f       	add	r24, r18
    2e32:	93 1f       	adc	r25, r19
    2e34:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <__brkval>
    2e38:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2e3c:	28 17       	cp	r18, r24
    2e3e:	39 07       	cpc	r19, r25
    2e40:	69 f4       	brne	.+26     	; 0x2e5c <free+0x10c>
    2e42:	30 97       	sbiw	r30, 0x00	; 0
    2e44:	29 f4       	brne	.+10     	; 0x2e50 <free+0x100>
    2e46:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <__flp+0x1>
    2e4a:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <__flp>
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <free+0x104>
    2e50:	13 82       	std	Z+3, r1	; 0x03
    2e52:	12 82       	std	Z+2, r1	; 0x02
    2e54:	b0 93 a2 05 	sts	0x05A2, r27	; 0x8005a2 <__brkval+0x1>
    2e58:	a0 93 a1 05 	sts	0x05A1, r26	; 0x8005a1 <__brkval>
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	08 95       	ret

00002e62 <realloc>:
    2e62:	6f 92       	push	r6
    2e64:	7f 92       	push	r7
    2e66:	8f 92       	push	r8
    2e68:	9f 92       	push	r9
    2e6a:	af 92       	push	r10
    2e6c:	bf 92       	push	r11
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	81 f4       	brne	.+32     	; 0x2ea2 <realloc+0x40>
    2e82:	cb 01       	movw	r24, r22
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	df 90       	pop	r13
    2e92:	cf 90       	pop	r12
    2e94:	bf 90       	pop	r11
    2e96:	af 90       	pop	r10
    2e98:	9f 90       	pop	r9
    2e9a:	8f 90       	pop	r8
    2e9c:	7f 90       	pop	r7
    2e9e:	6f 90       	pop	r6
    2ea0:	bf ce       	rjmp	.-642    	; 0x2c20 <malloc>
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	e6 0f       	add	r30, r22
    2ea6:	f7 1f       	adc	r31, r23
    2ea8:	9c 01       	movw	r18, r24
    2eaa:	22 50       	subi	r18, 0x02	; 2
    2eac:	31 09       	sbc	r19, r1
    2eae:	e2 17       	cp	r30, r18
    2eb0:	f3 07       	cpc	r31, r19
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <realloc+0x54>
    2eb4:	a5 c0       	rjmp	.+330    	; 0x3000 <realloc+0x19e>
    2eb6:	ec 01       	movw	r28, r24
    2eb8:	d9 01       	movw	r26, r18
    2eba:	0d 91       	ld	r16, X+
    2ebc:	1c 91       	ld	r17, X
    2ebe:	11 97       	sbiw	r26, 0x01	; 1
    2ec0:	06 17       	cp	r16, r22
    2ec2:	17 07       	cpc	r17, r23
    2ec4:	a8 f0       	brcs	.+42     	; 0x2ef0 <realloc+0x8e>
    2ec6:	05 30       	cpi	r16, 0x05	; 5
    2ec8:	11 05       	cpc	r17, r1
    2eca:	08 f4       	brcc	.+2      	; 0x2ece <realloc+0x6c>
    2ecc:	97 c0       	rjmp	.+302    	; 0x2ffc <realloc+0x19a>
    2ece:	c8 01       	movw	r24, r16
    2ed0:	04 97       	sbiw	r24, 0x04	; 4
    2ed2:	86 17       	cp	r24, r22
    2ed4:	97 07       	cpc	r25, r23
    2ed6:	08 f4       	brcc	.+2      	; 0x2eda <realloc+0x78>
    2ed8:	91 c0       	rjmp	.+290    	; 0x2ffc <realloc+0x19a>
    2eda:	02 50       	subi	r16, 0x02	; 2
    2edc:	11 09       	sbc	r17, r1
    2ede:	06 1b       	sub	r16, r22
    2ee0:	17 0b       	sbc	r17, r23
    2ee2:	01 93       	st	Z+, r16
    2ee4:	11 93       	st	Z+, r17
    2ee6:	6d 93       	st	X+, r22
    2ee8:	7c 93       	st	X, r23
    2eea:	cf 01       	movw	r24, r30
    2eec:	31 df       	rcall	.-414    	; 0x2d50 <free>
    2eee:	86 c0       	rjmp	.+268    	; 0x2ffc <realloc+0x19a>
    2ef0:	5b 01       	movw	r10, r22
    2ef2:	a0 1a       	sub	r10, r16
    2ef4:	b1 0a       	sbc	r11, r17
    2ef6:	4c 01       	movw	r8, r24
    2ef8:	80 0e       	add	r8, r16
    2efa:	91 1e       	adc	r9, r17
    2efc:	a0 91 a3 05 	lds	r26, 0x05A3	; 0x8005a3 <__flp>
    2f00:	b0 91 a4 05 	lds	r27, 0x05A4	; 0x8005a4 <__flp+0x1>
    2f04:	61 2c       	mov	r6, r1
    2f06:	71 2c       	mov	r7, r1
    2f08:	e1 2c       	mov	r14, r1
    2f0a:	f1 2c       	mov	r15, r1
    2f0c:	10 97       	sbiw	r26, 0x00	; 0
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <realloc+0xb0>
    2f10:	46 c0       	rjmp	.+140    	; 0x2f9e <realloc+0x13c>
    2f12:	8d 91       	ld	r24, X+
    2f14:	9c 91       	ld	r25, X
    2f16:	11 97       	sbiw	r26, 0x01	; 1
    2f18:	a8 15       	cp	r26, r8
    2f1a:	b9 05       	cpc	r27, r9
    2f1c:	b1 f5       	brne	.+108    	; 0x2f8a <realloc+0x128>
    2f1e:	6c 01       	movw	r12, r24
    2f20:	42 e0       	ldi	r20, 0x02	; 2
    2f22:	c4 0e       	add	r12, r20
    2f24:	d1 1c       	adc	r13, r1
    2f26:	ca 14       	cp	r12, r10
    2f28:	db 04       	cpc	r13, r11
    2f2a:	78 f1       	brcs	.+94     	; 0x2f8a <realloc+0x128>
    2f2c:	4c 01       	movw	r8, r24
    2f2e:	8a 18       	sub	r8, r10
    2f30:	9b 08       	sbc	r9, r11
    2f32:	64 01       	movw	r12, r8
    2f34:	42 e0       	ldi	r20, 0x02	; 2
    2f36:	c4 0e       	add	r12, r20
    2f38:	d1 1c       	adc	r13, r1
    2f3a:	12 96       	adiw	r26, 0x02	; 2
    2f3c:	bc 90       	ld	r11, X
    2f3e:	12 97       	sbiw	r26, 0x02	; 2
    2f40:	13 96       	adiw	r26, 0x03	; 3
    2f42:	ac 91       	ld	r26, X
    2f44:	b5 e0       	ldi	r27, 0x05	; 5
    2f46:	cb 16       	cp	r12, r27
    2f48:	d1 04       	cpc	r13, r1
    2f4a:	40 f0       	brcs	.+16     	; 0x2f5c <realloc+0xfa>
    2f4c:	b2 82       	std	Z+2, r11	; 0x02
    2f4e:	a3 83       	std	Z+3, r26	; 0x03
    2f50:	91 82       	std	Z+1, r9	; 0x01
    2f52:	80 82       	st	Z, r8
    2f54:	d9 01       	movw	r26, r18
    2f56:	6d 93       	st	X+, r22
    2f58:	7c 93       	st	X, r23
    2f5a:	09 c0       	rjmp	.+18     	; 0x2f6e <realloc+0x10c>
    2f5c:	0e 5f       	subi	r16, 0xFE	; 254
    2f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f60:	80 0f       	add	r24, r16
    2f62:	91 1f       	adc	r25, r17
    2f64:	f9 01       	movw	r30, r18
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	80 83       	st	Z, r24
    2f6a:	eb 2d       	mov	r30, r11
    2f6c:	fa 2f       	mov	r31, r26
    2f6e:	e1 14       	cp	r14, r1
    2f70:	f1 04       	cpc	r15, r1
    2f72:	31 f0       	breq	.+12     	; 0x2f80 <realloc+0x11e>
    2f74:	d7 01       	movw	r26, r14
    2f76:	13 96       	adiw	r26, 0x03	; 3
    2f78:	fc 93       	st	X, r31
    2f7a:	ee 93       	st	-X, r30
    2f7c:	12 97       	sbiw	r26, 0x02	; 2
    2f7e:	3e c0       	rjmp	.+124    	; 0x2ffc <realloc+0x19a>
    2f80:	f0 93 a4 05 	sts	0x05A4, r31	; 0x8005a4 <__flp+0x1>
    2f84:	e0 93 a3 05 	sts	0x05A3, r30	; 0x8005a3 <__flp>
    2f88:	39 c0       	rjmp	.+114    	; 0x2ffc <realloc+0x19a>
    2f8a:	68 16       	cp	r6, r24
    2f8c:	79 06       	cpc	r7, r25
    2f8e:	08 f4       	brcc	.+2      	; 0x2f92 <realloc+0x130>
    2f90:	3c 01       	movw	r6, r24
    2f92:	7d 01       	movw	r14, r26
    2f94:	12 96       	adiw	r26, 0x02	; 2
    2f96:	0d 90       	ld	r0, X+
    2f98:	bc 91       	ld	r27, X
    2f9a:	a0 2d       	mov	r26, r0
    2f9c:	b7 cf       	rjmp	.-146    	; 0x2f0c <realloc+0xaa>
    2f9e:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <__brkval>
    2fa2:	90 91 a2 05 	lds	r25, 0x05A2	; 0x8005a2 <__brkval+0x1>
    2fa6:	88 16       	cp	r8, r24
    2fa8:	99 06       	cpc	r9, r25
    2faa:	e1 f4       	brne	.+56     	; 0x2fe4 <realloc+0x182>
    2fac:	66 16       	cp	r6, r22
    2fae:	77 06       	cpc	r7, r23
    2fb0:	c8 f4       	brcc	.+50     	; 0x2fe4 <realloc+0x182>
    2fb2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2fb6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	41 f4       	brne	.+16     	; 0x2fce <realloc+0x16c>
    2fbe:	8d b7       	in	r24, 0x3d	; 61
    2fc0:	9e b7       	in	r25, 0x3e	; 62
    2fc2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2fc6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2fca:	84 1b       	sub	r24, r20
    2fcc:	95 0b       	sbc	r25, r21
    2fce:	e8 17       	cp	r30, r24
    2fd0:	f9 07       	cpc	r31, r25
    2fd2:	b0 f4       	brcc	.+44     	; 0x3000 <realloc+0x19e>
    2fd4:	f0 93 a2 05 	sts	0x05A2, r31	; 0x8005a2 <__brkval+0x1>
    2fd8:	e0 93 a1 05 	sts	0x05A1, r30	; 0x8005a1 <__brkval>
    2fdc:	f9 01       	movw	r30, r18
    2fde:	71 83       	std	Z+1, r23	; 0x01
    2fe0:	60 83       	st	Z, r22
    2fe2:	0c c0       	rjmp	.+24     	; 0x2ffc <realloc+0x19a>
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	1c de       	rcall	.-968    	; 0x2c20 <malloc>
    2fe8:	7c 01       	movw	r14, r24
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	49 f0       	breq	.+18     	; 0x3000 <realloc+0x19e>
    2fee:	a8 01       	movw	r20, r16
    2ff0:	be 01       	movw	r22, r28
    2ff2:	17 d0       	rcall	.+46     	; 0x3022 <memcpy>
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	ac de       	rcall	.-680    	; 0x2d50 <free>
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	04 c0       	rjmp	.+8      	; 0x3004 <realloc+0x1a2>
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	02 c0       	rjmp	.+4      	; 0x3004 <realloc+0x1a2>
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	bf 90       	pop	r11
    3016:	af 90       	pop	r10
    3018:	9f 90       	pop	r9
    301a:	8f 90       	pop	r8
    301c:	7f 90       	pop	r7
    301e:	6f 90       	pop	r6
    3020:	08 95       	ret

00003022 <memcpy>:
    3022:	fb 01       	movw	r30, r22
    3024:	dc 01       	movw	r26, r24
    3026:	02 c0       	rjmp	.+4      	; 0x302c <memcpy+0xa>
    3028:	01 90       	ld	r0, Z+
    302a:	0d 92       	st	X+, r0
    302c:	41 50       	subi	r20, 0x01	; 1
    302e:	50 40       	sbci	r21, 0x00	; 0
    3030:	d8 f7       	brcc	.-10     	; 0x3028 <memcpy+0x6>
    3032:	08 95       	ret

00003034 <strcpy>:
    3034:	fb 01       	movw	r30, r22
    3036:	dc 01       	movw	r26, r24
    3038:	01 90       	ld	r0, Z+
    303a:	0d 92       	st	X+, r0
    303c:	00 20       	and	r0, r0
    303e:	e1 f7       	brne	.-8      	; 0x3038 <strcpy+0x4>
    3040:	08 95       	ret

00003042 <sprintf>:
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	2e 97       	sbiw	r28, 0x0e	; 14
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	0e 89       	ldd	r16, Y+22	; 0x16
    305c:	1f 89       	ldd	r17, Y+23	; 0x17
    305e:	86 e0       	ldi	r24, 0x06	; 6
    3060:	8c 83       	std	Y+4, r24	; 0x04
    3062:	1a 83       	std	Y+2, r17	; 0x02
    3064:	09 83       	std	Y+1, r16	; 0x01
    3066:	8f ef       	ldi	r24, 0xFF	; 255
    3068:	9f e7       	ldi	r25, 0x7F	; 127
    306a:	9e 83       	std	Y+6, r25	; 0x06
    306c:	8d 83       	std	Y+5, r24	; 0x05
    306e:	ae 01       	movw	r20, r28
    3070:	46 5e       	subi	r20, 0xE6	; 230
    3072:	5f 4f       	sbci	r21, 0xFF	; 255
    3074:	68 8d       	ldd	r22, Y+24	; 0x18
    3076:	79 8d       	ldd	r23, Y+25	; 0x19
    3078:	ce 01       	movw	r24, r28
    307a:	01 96       	adiw	r24, 0x01	; 1
    307c:	10 d0       	rcall	.+32     	; 0x309e <vfprintf>
    307e:	ef 81       	ldd	r30, Y+7	; 0x07
    3080:	f8 85       	ldd	r31, Y+8	; 0x08
    3082:	e0 0f       	add	r30, r16
    3084:	f1 1f       	adc	r31, r17
    3086:	10 82       	st	Z, r1
    3088:	2e 96       	adiw	r28, 0x0e	; 14
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	df 91       	pop	r29
    3096:	cf 91       	pop	r28
    3098:	1f 91       	pop	r17
    309a:	0f 91       	pop	r16
    309c:	08 95       	ret

0000309e <vfprintf>:
    309e:	2f 92       	push	r2
    30a0:	3f 92       	push	r3
    30a2:	4f 92       	push	r4
    30a4:	5f 92       	push	r5
    30a6:	6f 92       	push	r6
    30a8:	7f 92       	push	r7
    30aa:	8f 92       	push	r8
    30ac:	9f 92       	push	r9
    30ae:	af 92       	push	r10
    30b0:	bf 92       	push	r11
    30b2:	cf 92       	push	r12
    30b4:	df 92       	push	r13
    30b6:	ef 92       	push	r14
    30b8:	ff 92       	push	r15
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	2b 97       	sbiw	r28, 0x0b	; 11
    30c8:	0f b6       	in	r0, 0x3f	; 63
    30ca:	f8 94       	cli
    30cc:	de bf       	out	0x3e, r29	; 62
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	cd bf       	out	0x3d, r28	; 61
    30d2:	6c 01       	movw	r12, r24
    30d4:	7b 01       	movw	r14, r22
    30d6:	8a 01       	movw	r16, r20
    30d8:	fc 01       	movw	r30, r24
    30da:	17 82       	std	Z+7, r1	; 0x07
    30dc:	16 82       	std	Z+6, r1	; 0x06
    30de:	83 81       	ldd	r24, Z+3	; 0x03
    30e0:	81 ff       	sbrs	r24, 1
    30e2:	bf c1       	rjmp	.+894    	; 0x3462 <vfprintf+0x3c4>
    30e4:	ce 01       	movw	r24, r28
    30e6:	01 96       	adiw	r24, 0x01	; 1
    30e8:	3c 01       	movw	r6, r24
    30ea:	f6 01       	movw	r30, r12
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	f7 01       	movw	r30, r14
    30f0:	93 fd       	sbrc	r25, 3
    30f2:	85 91       	lpm	r24, Z+
    30f4:	93 ff       	sbrs	r25, 3
    30f6:	81 91       	ld	r24, Z+
    30f8:	7f 01       	movw	r14, r30
    30fa:	88 23       	and	r24, r24
    30fc:	09 f4       	brne	.+2      	; 0x3100 <vfprintf+0x62>
    30fe:	ad c1       	rjmp	.+858    	; 0x345a <vfprintf+0x3bc>
    3100:	85 32       	cpi	r24, 0x25	; 37
    3102:	39 f4       	brne	.+14     	; 0x3112 <vfprintf+0x74>
    3104:	93 fd       	sbrc	r25, 3
    3106:	85 91       	lpm	r24, Z+
    3108:	93 ff       	sbrs	r25, 3
    310a:	81 91       	ld	r24, Z+
    310c:	7f 01       	movw	r14, r30
    310e:	85 32       	cpi	r24, 0x25	; 37
    3110:	21 f4       	brne	.+8      	; 0x311a <vfprintf+0x7c>
    3112:	b6 01       	movw	r22, r12
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	d6 d1       	rcall	.+940    	; 0x34c4 <fputc>
    3118:	e8 cf       	rjmp	.-48     	; 0x30ea <vfprintf+0x4c>
    311a:	91 2c       	mov	r9, r1
    311c:	21 2c       	mov	r2, r1
    311e:	31 2c       	mov	r3, r1
    3120:	ff e1       	ldi	r31, 0x1F	; 31
    3122:	f3 15       	cp	r31, r3
    3124:	d8 f0       	brcs	.+54     	; 0x315c <vfprintf+0xbe>
    3126:	8b 32       	cpi	r24, 0x2B	; 43
    3128:	79 f0       	breq	.+30     	; 0x3148 <vfprintf+0xaa>
    312a:	38 f4       	brcc	.+14     	; 0x313a <vfprintf+0x9c>
    312c:	80 32       	cpi	r24, 0x20	; 32
    312e:	79 f0       	breq	.+30     	; 0x314e <vfprintf+0xb0>
    3130:	83 32       	cpi	r24, 0x23	; 35
    3132:	a1 f4       	brne	.+40     	; 0x315c <vfprintf+0xbe>
    3134:	23 2d       	mov	r18, r3
    3136:	20 61       	ori	r18, 0x10	; 16
    3138:	1d c0       	rjmp	.+58     	; 0x3174 <vfprintf+0xd6>
    313a:	8d 32       	cpi	r24, 0x2D	; 45
    313c:	61 f0       	breq	.+24     	; 0x3156 <vfprintf+0xb8>
    313e:	80 33       	cpi	r24, 0x30	; 48
    3140:	69 f4       	brne	.+26     	; 0x315c <vfprintf+0xbe>
    3142:	23 2d       	mov	r18, r3
    3144:	21 60       	ori	r18, 0x01	; 1
    3146:	16 c0       	rjmp	.+44     	; 0x3174 <vfprintf+0xd6>
    3148:	83 2d       	mov	r24, r3
    314a:	82 60       	ori	r24, 0x02	; 2
    314c:	38 2e       	mov	r3, r24
    314e:	e3 2d       	mov	r30, r3
    3150:	e4 60       	ori	r30, 0x04	; 4
    3152:	3e 2e       	mov	r3, r30
    3154:	2a c0       	rjmp	.+84     	; 0x31aa <vfprintf+0x10c>
    3156:	f3 2d       	mov	r31, r3
    3158:	f8 60       	ori	r31, 0x08	; 8
    315a:	1d c0       	rjmp	.+58     	; 0x3196 <vfprintf+0xf8>
    315c:	37 fc       	sbrc	r3, 7
    315e:	2d c0       	rjmp	.+90     	; 0x31ba <vfprintf+0x11c>
    3160:	20 ed       	ldi	r18, 0xD0	; 208
    3162:	28 0f       	add	r18, r24
    3164:	2a 30       	cpi	r18, 0x0A	; 10
    3166:	40 f0       	brcs	.+16     	; 0x3178 <vfprintf+0xda>
    3168:	8e 32       	cpi	r24, 0x2E	; 46
    316a:	b9 f4       	brne	.+46     	; 0x319a <vfprintf+0xfc>
    316c:	36 fc       	sbrc	r3, 6
    316e:	75 c1       	rjmp	.+746    	; 0x345a <vfprintf+0x3bc>
    3170:	23 2d       	mov	r18, r3
    3172:	20 64       	ori	r18, 0x40	; 64
    3174:	32 2e       	mov	r3, r18
    3176:	19 c0       	rjmp	.+50     	; 0x31aa <vfprintf+0x10c>
    3178:	36 fe       	sbrs	r3, 6
    317a:	06 c0       	rjmp	.+12     	; 0x3188 <vfprintf+0xea>
    317c:	8a e0       	ldi	r24, 0x0A	; 10
    317e:	98 9e       	mul	r9, r24
    3180:	20 0d       	add	r18, r0
    3182:	11 24       	eor	r1, r1
    3184:	92 2e       	mov	r9, r18
    3186:	11 c0       	rjmp	.+34     	; 0x31aa <vfprintf+0x10c>
    3188:	ea e0       	ldi	r30, 0x0A	; 10
    318a:	2e 9e       	mul	r2, r30
    318c:	20 0d       	add	r18, r0
    318e:	11 24       	eor	r1, r1
    3190:	22 2e       	mov	r2, r18
    3192:	f3 2d       	mov	r31, r3
    3194:	f0 62       	ori	r31, 0x20	; 32
    3196:	3f 2e       	mov	r3, r31
    3198:	08 c0       	rjmp	.+16     	; 0x31aa <vfprintf+0x10c>
    319a:	8c 36       	cpi	r24, 0x6C	; 108
    319c:	21 f4       	brne	.+8      	; 0x31a6 <vfprintf+0x108>
    319e:	83 2d       	mov	r24, r3
    31a0:	80 68       	ori	r24, 0x80	; 128
    31a2:	38 2e       	mov	r3, r24
    31a4:	02 c0       	rjmp	.+4      	; 0x31aa <vfprintf+0x10c>
    31a6:	88 36       	cpi	r24, 0x68	; 104
    31a8:	41 f4       	brne	.+16     	; 0x31ba <vfprintf+0x11c>
    31aa:	f7 01       	movw	r30, r14
    31ac:	93 fd       	sbrc	r25, 3
    31ae:	85 91       	lpm	r24, Z+
    31b0:	93 ff       	sbrs	r25, 3
    31b2:	81 91       	ld	r24, Z+
    31b4:	7f 01       	movw	r14, r30
    31b6:	81 11       	cpse	r24, r1
    31b8:	b3 cf       	rjmp	.-154    	; 0x3120 <vfprintf+0x82>
    31ba:	98 2f       	mov	r25, r24
    31bc:	9f 7d       	andi	r25, 0xDF	; 223
    31be:	95 54       	subi	r25, 0x45	; 69
    31c0:	93 30       	cpi	r25, 0x03	; 3
    31c2:	28 f4       	brcc	.+10     	; 0x31ce <vfprintf+0x130>
    31c4:	0c 5f       	subi	r16, 0xFC	; 252
    31c6:	1f 4f       	sbci	r17, 0xFF	; 255
    31c8:	9f e3       	ldi	r25, 0x3F	; 63
    31ca:	99 83       	std	Y+1, r25	; 0x01
    31cc:	0d c0       	rjmp	.+26     	; 0x31e8 <vfprintf+0x14a>
    31ce:	83 36       	cpi	r24, 0x63	; 99
    31d0:	31 f0       	breq	.+12     	; 0x31de <vfprintf+0x140>
    31d2:	83 37       	cpi	r24, 0x73	; 115
    31d4:	71 f0       	breq	.+28     	; 0x31f2 <vfprintf+0x154>
    31d6:	83 35       	cpi	r24, 0x53	; 83
    31d8:	09 f0       	breq	.+2      	; 0x31dc <vfprintf+0x13e>
    31da:	55 c0       	rjmp	.+170    	; 0x3286 <vfprintf+0x1e8>
    31dc:	20 c0       	rjmp	.+64     	; 0x321e <vfprintf+0x180>
    31de:	f8 01       	movw	r30, r16
    31e0:	80 81       	ld	r24, Z
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	0e 5f       	subi	r16, 0xFE	; 254
    31e6:	1f 4f       	sbci	r17, 0xFF	; 255
    31e8:	88 24       	eor	r8, r8
    31ea:	83 94       	inc	r8
    31ec:	91 2c       	mov	r9, r1
    31ee:	53 01       	movw	r10, r6
    31f0:	12 c0       	rjmp	.+36     	; 0x3216 <vfprintf+0x178>
    31f2:	28 01       	movw	r4, r16
    31f4:	f2 e0       	ldi	r31, 0x02	; 2
    31f6:	4f 0e       	add	r4, r31
    31f8:	51 1c       	adc	r5, r1
    31fa:	f8 01       	movw	r30, r16
    31fc:	a0 80       	ld	r10, Z
    31fe:	b1 80       	ldd	r11, Z+1	; 0x01
    3200:	36 fe       	sbrs	r3, 6
    3202:	03 c0       	rjmp	.+6      	; 0x320a <vfprintf+0x16c>
    3204:	69 2d       	mov	r22, r9
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	02 c0       	rjmp	.+4      	; 0x320e <vfprintf+0x170>
    320a:	6f ef       	ldi	r22, 0xFF	; 255
    320c:	7f ef       	ldi	r23, 0xFF	; 255
    320e:	c5 01       	movw	r24, r10
    3210:	4e d1       	rcall	.+668    	; 0x34ae <strnlen>
    3212:	4c 01       	movw	r8, r24
    3214:	82 01       	movw	r16, r4
    3216:	f3 2d       	mov	r31, r3
    3218:	ff 77       	andi	r31, 0x7F	; 127
    321a:	3f 2e       	mov	r3, r31
    321c:	15 c0       	rjmp	.+42     	; 0x3248 <vfprintf+0x1aa>
    321e:	28 01       	movw	r4, r16
    3220:	22 e0       	ldi	r18, 0x02	; 2
    3222:	42 0e       	add	r4, r18
    3224:	51 1c       	adc	r5, r1
    3226:	f8 01       	movw	r30, r16
    3228:	a0 80       	ld	r10, Z
    322a:	b1 80       	ldd	r11, Z+1	; 0x01
    322c:	36 fe       	sbrs	r3, 6
    322e:	03 c0       	rjmp	.+6      	; 0x3236 <vfprintf+0x198>
    3230:	69 2d       	mov	r22, r9
    3232:	70 e0       	ldi	r23, 0x00	; 0
    3234:	02 c0       	rjmp	.+4      	; 0x323a <vfprintf+0x19c>
    3236:	6f ef       	ldi	r22, 0xFF	; 255
    3238:	7f ef       	ldi	r23, 0xFF	; 255
    323a:	c5 01       	movw	r24, r10
    323c:	2d d1       	rcall	.+602    	; 0x3498 <strnlen_P>
    323e:	4c 01       	movw	r8, r24
    3240:	f3 2d       	mov	r31, r3
    3242:	f0 68       	ori	r31, 0x80	; 128
    3244:	3f 2e       	mov	r3, r31
    3246:	82 01       	movw	r16, r4
    3248:	33 fc       	sbrc	r3, 3
    324a:	19 c0       	rjmp	.+50     	; 0x327e <vfprintf+0x1e0>
    324c:	82 2d       	mov	r24, r2
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	88 16       	cp	r8, r24
    3252:	99 06       	cpc	r9, r25
    3254:	a0 f4       	brcc	.+40     	; 0x327e <vfprintf+0x1e0>
    3256:	b6 01       	movw	r22, r12
    3258:	80 e2       	ldi	r24, 0x20	; 32
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	33 d1       	rcall	.+614    	; 0x34c4 <fputc>
    325e:	2a 94       	dec	r2
    3260:	f5 cf       	rjmp	.-22     	; 0x324c <vfprintf+0x1ae>
    3262:	f5 01       	movw	r30, r10
    3264:	37 fc       	sbrc	r3, 7
    3266:	85 91       	lpm	r24, Z+
    3268:	37 fe       	sbrs	r3, 7
    326a:	81 91       	ld	r24, Z+
    326c:	5f 01       	movw	r10, r30
    326e:	b6 01       	movw	r22, r12
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	28 d1       	rcall	.+592    	; 0x34c4 <fputc>
    3274:	21 10       	cpse	r2, r1
    3276:	2a 94       	dec	r2
    3278:	21 e0       	ldi	r18, 0x01	; 1
    327a:	82 1a       	sub	r8, r18
    327c:	91 08       	sbc	r9, r1
    327e:	81 14       	cp	r8, r1
    3280:	91 04       	cpc	r9, r1
    3282:	79 f7       	brne	.-34     	; 0x3262 <vfprintf+0x1c4>
    3284:	e1 c0       	rjmp	.+450    	; 0x3448 <vfprintf+0x3aa>
    3286:	84 36       	cpi	r24, 0x64	; 100
    3288:	11 f0       	breq	.+4      	; 0x328e <vfprintf+0x1f0>
    328a:	89 36       	cpi	r24, 0x69	; 105
    328c:	39 f5       	brne	.+78     	; 0x32dc <vfprintf+0x23e>
    328e:	f8 01       	movw	r30, r16
    3290:	37 fe       	sbrs	r3, 7
    3292:	07 c0       	rjmp	.+14     	; 0x32a2 <vfprintf+0x204>
    3294:	60 81       	ld	r22, Z
    3296:	71 81       	ldd	r23, Z+1	; 0x01
    3298:	82 81       	ldd	r24, Z+2	; 0x02
    329a:	93 81       	ldd	r25, Z+3	; 0x03
    329c:	0c 5f       	subi	r16, 0xFC	; 252
    329e:	1f 4f       	sbci	r17, 0xFF	; 255
    32a0:	08 c0       	rjmp	.+16     	; 0x32b2 <vfprintf+0x214>
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	07 2e       	mov	r0, r23
    32a8:	00 0c       	add	r0, r0
    32aa:	88 0b       	sbc	r24, r24
    32ac:	99 0b       	sbc	r25, r25
    32ae:	0e 5f       	subi	r16, 0xFE	; 254
    32b0:	1f 4f       	sbci	r17, 0xFF	; 255
    32b2:	f3 2d       	mov	r31, r3
    32b4:	ff 76       	andi	r31, 0x6F	; 111
    32b6:	3f 2e       	mov	r3, r31
    32b8:	97 ff       	sbrs	r25, 7
    32ba:	09 c0       	rjmp	.+18     	; 0x32ce <vfprintf+0x230>
    32bc:	90 95       	com	r25
    32be:	80 95       	com	r24
    32c0:	70 95       	com	r23
    32c2:	61 95       	neg	r22
    32c4:	7f 4f       	sbci	r23, 0xFF	; 255
    32c6:	8f 4f       	sbci	r24, 0xFF	; 255
    32c8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ca:	f0 68       	ori	r31, 0x80	; 128
    32cc:	3f 2e       	mov	r3, r31
    32ce:	2a e0       	ldi	r18, 0x0A	; 10
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	a3 01       	movw	r20, r6
    32d4:	33 d1       	rcall	.+614    	; 0x353c <__ultoa_invert>
    32d6:	88 2e       	mov	r8, r24
    32d8:	86 18       	sub	r8, r6
    32da:	44 c0       	rjmp	.+136    	; 0x3364 <vfprintf+0x2c6>
    32dc:	85 37       	cpi	r24, 0x75	; 117
    32de:	31 f4       	brne	.+12     	; 0x32ec <vfprintf+0x24e>
    32e0:	23 2d       	mov	r18, r3
    32e2:	2f 7e       	andi	r18, 0xEF	; 239
    32e4:	b2 2e       	mov	r11, r18
    32e6:	2a e0       	ldi	r18, 0x0A	; 10
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	25 c0       	rjmp	.+74     	; 0x3336 <vfprintf+0x298>
    32ec:	93 2d       	mov	r25, r3
    32ee:	99 7f       	andi	r25, 0xF9	; 249
    32f0:	b9 2e       	mov	r11, r25
    32f2:	8f 36       	cpi	r24, 0x6F	; 111
    32f4:	c1 f0       	breq	.+48     	; 0x3326 <vfprintf+0x288>
    32f6:	18 f4       	brcc	.+6      	; 0x32fe <vfprintf+0x260>
    32f8:	88 35       	cpi	r24, 0x58	; 88
    32fa:	79 f0       	breq	.+30     	; 0x331a <vfprintf+0x27c>
    32fc:	ae c0       	rjmp	.+348    	; 0x345a <vfprintf+0x3bc>
    32fe:	80 37       	cpi	r24, 0x70	; 112
    3300:	19 f0       	breq	.+6      	; 0x3308 <vfprintf+0x26a>
    3302:	88 37       	cpi	r24, 0x78	; 120
    3304:	21 f0       	breq	.+8      	; 0x330e <vfprintf+0x270>
    3306:	a9 c0       	rjmp	.+338    	; 0x345a <vfprintf+0x3bc>
    3308:	e9 2f       	mov	r30, r25
    330a:	e0 61       	ori	r30, 0x10	; 16
    330c:	be 2e       	mov	r11, r30
    330e:	b4 fe       	sbrs	r11, 4
    3310:	0d c0       	rjmp	.+26     	; 0x332c <vfprintf+0x28e>
    3312:	fb 2d       	mov	r31, r11
    3314:	f4 60       	ori	r31, 0x04	; 4
    3316:	bf 2e       	mov	r11, r31
    3318:	09 c0       	rjmp	.+18     	; 0x332c <vfprintf+0x28e>
    331a:	34 fe       	sbrs	r3, 4
    331c:	0a c0       	rjmp	.+20     	; 0x3332 <vfprintf+0x294>
    331e:	29 2f       	mov	r18, r25
    3320:	26 60       	ori	r18, 0x06	; 6
    3322:	b2 2e       	mov	r11, r18
    3324:	06 c0       	rjmp	.+12     	; 0x3332 <vfprintf+0x294>
    3326:	28 e0       	ldi	r18, 0x08	; 8
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	05 c0       	rjmp	.+10     	; 0x3336 <vfprintf+0x298>
    332c:	20 e1       	ldi	r18, 0x10	; 16
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <vfprintf+0x298>
    3332:	20 e1       	ldi	r18, 0x10	; 16
    3334:	32 e0       	ldi	r19, 0x02	; 2
    3336:	f8 01       	movw	r30, r16
    3338:	b7 fe       	sbrs	r11, 7
    333a:	07 c0       	rjmp	.+14     	; 0x334a <vfprintf+0x2ac>
    333c:	60 81       	ld	r22, Z
    333e:	71 81       	ldd	r23, Z+1	; 0x01
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	93 81       	ldd	r25, Z+3	; 0x03
    3344:	0c 5f       	subi	r16, 0xFC	; 252
    3346:	1f 4f       	sbci	r17, 0xFF	; 255
    3348:	06 c0       	rjmp	.+12     	; 0x3356 <vfprintf+0x2b8>
    334a:	60 81       	ld	r22, Z
    334c:	71 81       	ldd	r23, Z+1	; 0x01
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 5f       	subi	r16, 0xFE	; 254
    3354:	1f 4f       	sbci	r17, 0xFF	; 255
    3356:	a3 01       	movw	r20, r6
    3358:	f1 d0       	rcall	.+482    	; 0x353c <__ultoa_invert>
    335a:	88 2e       	mov	r8, r24
    335c:	86 18       	sub	r8, r6
    335e:	fb 2d       	mov	r31, r11
    3360:	ff 77       	andi	r31, 0x7F	; 127
    3362:	3f 2e       	mov	r3, r31
    3364:	36 fe       	sbrs	r3, 6
    3366:	0d c0       	rjmp	.+26     	; 0x3382 <vfprintf+0x2e4>
    3368:	23 2d       	mov	r18, r3
    336a:	2e 7f       	andi	r18, 0xFE	; 254
    336c:	a2 2e       	mov	r10, r18
    336e:	89 14       	cp	r8, r9
    3370:	58 f4       	brcc	.+22     	; 0x3388 <vfprintf+0x2ea>
    3372:	34 fe       	sbrs	r3, 4
    3374:	0b c0       	rjmp	.+22     	; 0x338c <vfprintf+0x2ee>
    3376:	32 fc       	sbrc	r3, 2
    3378:	09 c0       	rjmp	.+18     	; 0x338c <vfprintf+0x2ee>
    337a:	83 2d       	mov	r24, r3
    337c:	8e 7e       	andi	r24, 0xEE	; 238
    337e:	a8 2e       	mov	r10, r24
    3380:	05 c0       	rjmp	.+10     	; 0x338c <vfprintf+0x2ee>
    3382:	b8 2c       	mov	r11, r8
    3384:	a3 2c       	mov	r10, r3
    3386:	03 c0       	rjmp	.+6      	; 0x338e <vfprintf+0x2f0>
    3388:	b8 2c       	mov	r11, r8
    338a:	01 c0       	rjmp	.+2      	; 0x338e <vfprintf+0x2f0>
    338c:	b9 2c       	mov	r11, r9
    338e:	a4 fe       	sbrs	r10, 4
    3390:	0f c0       	rjmp	.+30     	; 0x33b0 <vfprintf+0x312>
    3392:	fe 01       	movw	r30, r28
    3394:	e8 0d       	add	r30, r8
    3396:	f1 1d       	adc	r31, r1
    3398:	80 81       	ld	r24, Z
    339a:	80 33       	cpi	r24, 0x30	; 48
    339c:	21 f4       	brne	.+8      	; 0x33a6 <vfprintf+0x308>
    339e:	9a 2d       	mov	r25, r10
    33a0:	99 7e       	andi	r25, 0xE9	; 233
    33a2:	a9 2e       	mov	r10, r25
    33a4:	09 c0       	rjmp	.+18     	; 0x33b8 <vfprintf+0x31a>
    33a6:	a2 fe       	sbrs	r10, 2
    33a8:	06 c0       	rjmp	.+12     	; 0x33b6 <vfprintf+0x318>
    33aa:	b3 94       	inc	r11
    33ac:	b3 94       	inc	r11
    33ae:	04 c0       	rjmp	.+8      	; 0x33b8 <vfprintf+0x31a>
    33b0:	8a 2d       	mov	r24, r10
    33b2:	86 78       	andi	r24, 0x86	; 134
    33b4:	09 f0       	breq	.+2      	; 0x33b8 <vfprintf+0x31a>
    33b6:	b3 94       	inc	r11
    33b8:	a3 fc       	sbrc	r10, 3
    33ba:	10 c0       	rjmp	.+32     	; 0x33dc <vfprintf+0x33e>
    33bc:	a0 fe       	sbrs	r10, 0
    33be:	06 c0       	rjmp	.+12     	; 0x33cc <vfprintf+0x32e>
    33c0:	b2 14       	cp	r11, r2
    33c2:	80 f4       	brcc	.+32     	; 0x33e4 <vfprintf+0x346>
    33c4:	28 0c       	add	r2, r8
    33c6:	92 2c       	mov	r9, r2
    33c8:	9b 18       	sub	r9, r11
    33ca:	0d c0       	rjmp	.+26     	; 0x33e6 <vfprintf+0x348>
    33cc:	b2 14       	cp	r11, r2
    33ce:	58 f4       	brcc	.+22     	; 0x33e6 <vfprintf+0x348>
    33d0:	b6 01       	movw	r22, r12
    33d2:	80 e2       	ldi	r24, 0x20	; 32
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	76 d0       	rcall	.+236    	; 0x34c4 <fputc>
    33d8:	b3 94       	inc	r11
    33da:	f8 cf       	rjmp	.-16     	; 0x33cc <vfprintf+0x32e>
    33dc:	b2 14       	cp	r11, r2
    33de:	18 f4       	brcc	.+6      	; 0x33e6 <vfprintf+0x348>
    33e0:	2b 18       	sub	r2, r11
    33e2:	02 c0       	rjmp	.+4      	; 0x33e8 <vfprintf+0x34a>
    33e4:	98 2c       	mov	r9, r8
    33e6:	21 2c       	mov	r2, r1
    33e8:	a4 fe       	sbrs	r10, 4
    33ea:	0f c0       	rjmp	.+30     	; 0x340a <vfprintf+0x36c>
    33ec:	b6 01       	movw	r22, r12
    33ee:	80 e3       	ldi	r24, 0x30	; 48
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	68 d0       	rcall	.+208    	; 0x34c4 <fputc>
    33f4:	a2 fe       	sbrs	r10, 2
    33f6:	16 c0       	rjmp	.+44     	; 0x3424 <vfprintf+0x386>
    33f8:	a1 fc       	sbrc	r10, 1
    33fa:	03 c0       	rjmp	.+6      	; 0x3402 <vfprintf+0x364>
    33fc:	88 e7       	ldi	r24, 0x78	; 120
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	02 c0       	rjmp	.+4      	; 0x3406 <vfprintf+0x368>
    3402:	88 e5       	ldi	r24, 0x58	; 88
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	b6 01       	movw	r22, r12
    3408:	0c c0       	rjmp	.+24     	; 0x3422 <vfprintf+0x384>
    340a:	8a 2d       	mov	r24, r10
    340c:	86 78       	andi	r24, 0x86	; 134
    340e:	51 f0       	breq	.+20     	; 0x3424 <vfprintf+0x386>
    3410:	a1 fe       	sbrs	r10, 1
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <vfprintf+0x37a>
    3414:	8b e2       	ldi	r24, 0x2B	; 43
    3416:	01 c0       	rjmp	.+2      	; 0x341a <vfprintf+0x37c>
    3418:	80 e2       	ldi	r24, 0x20	; 32
    341a:	a7 fc       	sbrc	r10, 7
    341c:	8d e2       	ldi	r24, 0x2D	; 45
    341e:	b6 01       	movw	r22, r12
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	50 d0       	rcall	.+160    	; 0x34c4 <fputc>
    3424:	89 14       	cp	r8, r9
    3426:	30 f4       	brcc	.+12     	; 0x3434 <vfprintf+0x396>
    3428:	b6 01       	movw	r22, r12
    342a:	80 e3       	ldi	r24, 0x30	; 48
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	4a d0       	rcall	.+148    	; 0x34c4 <fputc>
    3430:	9a 94       	dec	r9
    3432:	f8 cf       	rjmp	.-16     	; 0x3424 <vfprintf+0x386>
    3434:	8a 94       	dec	r8
    3436:	f3 01       	movw	r30, r6
    3438:	e8 0d       	add	r30, r8
    343a:	f1 1d       	adc	r31, r1
    343c:	80 81       	ld	r24, Z
    343e:	b6 01       	movw	r22, r12
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	40 d0       	rcall	.+128    	; 0x34c4 <fputc>
    3444:	81 10       	cpse	r8, r1
    3446:	f6 cf       	rjmp	.-20     	; 0x3434 <vfprintf+0x396>
    3448:	22 20       	and	r2, r2
    344a:	09 f4       	brne	.+2      	; 0x344e <vfprintf+0x3b0>
    344c:	4e ce       	rjmp	.-868    	; 0x30ea <vfprintf+0x4c>
    344e:	b6 01       	movw	r22, r12
    3450:	80 e2       	ldi	r24, 0x20	; 32
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	37 d0       	rcall	.+110    	; 0x34c4 <fputc>
    3456:	2a 94       	dec	r2
    3458:	f7 cf       	rjmp	.-18     	; 0x3448 <vfprintf+0x3aa>
    345a:	f6 01       	movw	r30, r12
    345c:	86 81       	ldd	r24, Z+6	; 0x06
    345e:	97 81       	ldd	r25, Z+7	; 0x07
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <vfprintf+0x3c8>
    3462:	8f ef       	ldi	r24, 0xFF	; 255
    3464:	9f ef       	ldi	r25, 0xFF	; 255
    3466:	2b 96       	adiw	r28, 0x0b	; 11
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	df 91       	pop	r29
    3474:	cf 91       	pop	r28
    3476:	1f 91       	pop	r17
    3478:	0f 91       	pop	r16
    347a:	ff 90       	pop	r15
    347c:	ef 90       	pop	r14
    347e:	df 90       	pop	r13
    3480:	cf 90       	pop	r12
    3482:	bf 90       	pop	r11
    3484:	af 90       	pop	r10
    3486:	9f 90       	pop	r9
    3488:	8f 90       	pop	r8
    348a:	7f 90       	pop	r7
    348c:	6f 90       	pop	r6
    348e:	5f 90       	pop	r5
    3490:	4f 90       	pop	r4
    3492:	3f 90       	pop	r3
    3494:	2f 90       	pop	r2
    3496:	08 95       	ret

00003498 <strnlen_P>:
    3498:	fc 01       	movw	r30, r24
    349a:	05 90       	lpm	r0, Z+
    349c:	61 50       	subi	r22, 0x01	; 1
    349e:	70 40       	sbci	r23, 0x00	; 0
    34a0:	01 10       	cpse	r0, r1
    34a2:	d8 f7       	brcc	.-10     	; 0x349a <strnlen_P+0x2>
    34a4:	80 95       	com	r24
    34a6:	90 95       	com	r25
    34a8:	8e 0f       	add	r24, r30
    34aa:	9f 1f       	adc	r25, r31
    34ac:	08 95       	ret

000034ae <strnlen>:
    34ae:	fc 01       	movw	r30, r24
    34b0:	61 50       	subi	r22, 0x01	; 1
    34b2:	70 40       	sbci	r23, 0x00	; 0
    34b4:	01 90       	ld	r0, Z+
    34b6:	01 10       	cpse	r0, r1
    34b8:	d8 f7       	brcc	.-10     	; 0x34b0 <strnlen+0x2>
    34ba:	80 95       	com	r24
    34bc:	90 95       	com	r25
    34be:	8e 0f       	add	r24, r30
    34c0:	9f 1f       	adc	r25, r31
    34c2:	08 95       	ret

000034c4 <fputc>:
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	fb 01       	movw	r30, r22
    34ce:	23 81       	ldd	r18, Z+3	; 0x03
    34d0:	21 fd       	sbrc	r18, 1
    34d2:	03 c0       	rjmp	.+6      	; 0x34da <fputc+0x16>
    34d4:	8f ef       	ldi	r24, 0xFF	; 255
    34d6:	9f ef       	ldi	r25, 0xFF	; 255
    34d8:	2c c0       	rjmp	.+88     	; 0x3532 <fputc+0x6e>
    34da:	22 ff       	sbrs	r18, 2
    34dc:	16 c0       	rjmp	.+44     	; 0x350a <fputc+0x46>
    34de:	46 81       	ldd	r20, Z+6	; 0x06
    34e0:	57 81       	ldd	r21, Z+7	; 0x07
    34e2:	24 81       	ldd	r18, Z+4	; 0x04
    34e4:	35 81       	ldd	r19, Z+5	; 0x05
    34e6:	42 17       	cp	r20, r18
    34e8:	53 07       	cpc	r21, r19
    34ea:	44 f4       	brge	.+16     	; 0x34fc <fputc+0x38>
    34ec:	a0 81       	ld	r26, Z
    34ee:	b1 81       	ldd	r27, Z+1	; 0x01
    34f0:	9d 01       	movw	r18, r26
    34f2:	2f 5f       	subi	r18, 0xFF	; 255
    34f4:	3f 4f       	sbci	r19, 0xFF	; 255
    34f6:	31 83       	std	Z+1, r19	; 0x01
    34f8:	20 83       	st	Z, r18
    34fa:	8c 93       	st	X, r24
    34fc:	26 81       	ldd	r18, Z+6	; 0x06
    34fe:	37 81       	ldd	r19, Z+7	; 0x07
    3500:	2f 5f       	subi	r18, 0xFF	; 255
    3502:	3f 4f       	sbci	r19, 0xFF	; 255
    3504:	37 83       	std	Z+7, r19	; 0x07
    3506:	26 83       	std	Z+6, r18	; 0x06
    3508:	14 c0       	rjmp	.+40     	; 0x3532 <fputc+0x6e>
    350a:	8b 01       	movw	r16, r22
    350c:	ec 01       	movw	r28, r24
    350e:	fb 01       	movw	r30, r22
    3510:	00 84       	ldd	r0, Z+8	; 0x08
    3512:	f1 85       	ldd	r31, Z+9	; 0x09
    3514:	e0 2d       	mov	r30, r0
    3516:	19 95       	eicall
    3518:	89 2b       	or	r24, r25
    351a:	e1 f6       	brne	.-72     	; 0x34d4 <fputc+0x10>
    351c:	d8 01       	movw	r26, r16
    351e:	16 96       	adiw	r26, 0x06	; 6
    3520:	8d 91       	ld	r24, X+
    3522:	9c 91       	ld	r25, X
    3524:	17 97       	sbiw	r26, 0x07	; 7
    3526:	01 96       	adiw	r24, 0x01	; 1
    3528:	17 96       	adiw	r26, 0x07	; 7
    352a:	9c 93       	st	X, r25
    352c:	8e 93       	st	-X, r24
    352e:	16 97       	sbiw	r26, 0x06	; 6
    3530:	ce 01       	movw	r24, r28
    3532:	df 91       	pop	r29
    3534:	cf 91       	pop	r28
    3536:	1f 91       	pop	r17
    3538:	0f 91       	pop	r16
    353a:	08 95       	ret

0000353c <__ultoa_invert>:
    353c:	fa 01       	movw	r30, r20
    353e:	aa 27       	eor	r26, r26
    3540:	28 30       	cpi	r18, 0x08	; 8
    3542:	51 f1       	breq	.+84     	; 0x3598 <__ultoa_invert+0x5c>
    3544:	20 31       	cpi	r18, 0x10	; 16
    3546:	81 f1       	breq	.+96     	; 0x35a8 <__ultoa_invert+0x6c>
    3548:	e8 94       	clt
    354a:	6f 93       	push	r22
    354c:	6e 7f       	andi	r22, 0xFE	; 254
    354e:	6e 5f       	subi	r22, 0xFE	; 254
    3550:	7f 4f       	sbci	r23, 0xFF	; 255
    3552:	8f 4f       	sbci	r24, 0xFF	; 255
    3554:	9f 4f       	sbci	r25, 0xFF	; 255
    3556:	af 4f       	sbci	r26, 0xFF	; 255
    3558:	b1 e0       	ldi	r27, 0x01	; 1
    355a:	3e d0       	rcall	.+124    	; 0x35d8 <__ultoa_invert+0x9c>
    355c:	b4 e0       	ldi	r27, 0x04	; 4
    355e:	3c d0       	rcall	.+120    	; 0x35d8 <__ultoa_invert+0x9c>
    3560:	67 0f       	add	r22, r23
    3562:	78 1f       	adc	r23, r24
    3564:	89 1f       	adc	r24, r25
    3566:	9a 1f       	adc	r25, r26
    3568:	a1 1d       	adc	r26, r1
    356a:	68 0f       	add	r22, r24
    356c:	79 1f       	adc	r23, r25
    356e:	8a 1f       	adc	r24, r26
    3570:	91 1d       	adc	r25, r1
    3572:	a1 1d       	adc	r26, r1
    3574:	6a 0f       	add	r22, r26
    3576:	71 1d       	adc	r23, r1
    3578:	81 1d       	adc	r24, r1
    357a:	91 1d       	adc	r25, r1
    357c:	a1 1d       	adc	r26, r1
    357e:	20 d0       	rcall	.+64     	; 0x35c0 <__ultoa_invert+0x84>
    3580:	09 f4       	brne	.+2      	; 0x3584 <__ultoa_invert+0x48>
    3582:	68 94       	set
    3584:	3f 91       	pop	r19
    3586:	2a e0       	ldi	r18, 0x0A	; 10
    3588:	26 9f       	mul	r18, r22
    358a:	11 24       	eor	r1, r1
    358c:	30 19       	sub	r19, r0
    358e:	30 5d       	subi	r19, 0xD0	; 208
    3590:	31 93       	st	Z+, r19
    3592:	de f6       	brtc	.-74     	; 0x354a <__ultoa_invert+0xe>
    3594:	cf 01       	movw	r24, r30
    3596:	08 95       	ret
    3598:	46 2f       	mov	r20, r22
    359a:	47 70       	andi	r20, 0x07	; 7
    359c:	40 5d       	subi	r20, 0xD0	; 208
    359e:	41 93       	st	Z+, r20
    35a0:	b3 e0       	ldi	r27, 0x03	; 3
    35a2:	0f d0       	rcall	.+30     	; 0x35c2 <__ultoa_invert+0x86>
    35a4:	c9 f7       	brne	.-14     	; 0x3598 <__ultoa_invert+0x5c>
    35a6:	f6 cf       	rjmp	.-20     	; 0x3594 <__ultoa_invert+0x58>
    35a8:	46 2f       	mov	r20, r22
    35aa:	4f 70       	andi	r20, 0x0F	; 15
    35ac:	40 5d       	subi	r20, 0xD0	; 208
    35ae:	4a 33       	cpi	r20, 0x3A	; 58
    35b0:	18 f0       	brcs	.+6      	; 0x35b8 <__ultoa_invert+0x7c>
    35b2:	49 5d       	subi	r20, 0xD9	; 217
    35b4:	31 fd       	sbrc	r19, 1
    35b6:	40 52       	subi	r20, 0x20	; 32
    35b8:	41 93       	st	Z+, r20
    35ba:	02 d0       	rcall	.+4      	; 0x35c0 <__ultoa_invert+0x84>
    35bc:	a9 f7       	brne	.-22     	; 0x35a8 <__ultoa_invert+0x6c>
    35be:	ea cf       	rjmp	.-44     	; 0x3594 <__ultoa_invert+0x58>
    35c0:	b4 e0       	ldi	r27, 0x04	; 4
    35c2:	a6 95       	lsr	r26
    35c4:	97 95       	ror	r25
    35c6:	87 95       	ror	r24
    35c8:	77 95       	ror	r23
    35ca:	67 95       	ror	r22
    35cc:	ba 95       	dec	r27
    35ce:	c9 f7       	brne	.-14     	; 0x35c2 <__ultoa_invert+0x86>
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	61 05       	cpc	r22, r1
    35d4:	71 05       	cpc	r23, r1
    35d6:	08 95       	ret
    35d8:	9b 01       	movw	r18, r22
    35da:	ac 01       	movw	r20, r24
    35dc:	0a 2e       	mov	r0, r26
    35de:	06 94       	lsr	r0
    35e0:	57 95       	ror	r21
    35e2:	47 95       	ror	r20
    35e4:	37 95       	ror	r19
    35e6:	27 95       	ror	r18
    35e8:	ba 95       	dec	r27
    35ea:	c9 f7       	brne	.-14     	; 0x35de <__ultoa_invert+0xa2>
    35ec:	62 0f       	add	r22, r18
    35ee:	73 1f       	adc	r23, r19
    35f0:	84 1f       	adc	r24, r20
    35f2:	95 1f       	adc	r25, r21
    35f4:	a0 1d       	adc	r26, r0
    35f6:	08 95       	ret

000035f8 <_exit>:
    35f8:	f8 94       	cli

000035fa <__stop_program>:
    35fa:	ff cf       	rjmp	.-2      	; 0x35fa <__stop_program>
>>>>>>> parent of 48dd859... Updated Main.cpp (speed and dir. control of servo 1 and 2) now stable
